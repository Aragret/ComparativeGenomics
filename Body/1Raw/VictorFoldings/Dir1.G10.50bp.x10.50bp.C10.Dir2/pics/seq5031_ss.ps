%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUCACUUCUGGGGGGGGGGGAGUCCCAGAGGUUACCCAAGGCACCCCUCUGACAUCCGGCCUGCUUCUUxxxxxxxxxxUAUUUACCAAAUGCCCCUCAUUUACAUAAAUAUUAUACUAGCAUUUACCACCCCCCCCCCUCUCACUUCU\
) } def
/len { sequence length } bind def

/coor [
[86.15958405 348.46179199]
[72.93939209 341.18930054]
[62.05258560 330.74230957]
[54.24145508 317.83306885]
[50.03857422 303.34173584]
[49.73049927 288.25640869]
[53.33824158 273.60559082]
[60.61581421 260.38818359]
[71.06702423 249.50543213]
[83.97928619 241.69927979]
[98.47222137 237.50199890]
[98.16016388 222.50524902]
[97.84810638 207.50848389]
[97.53604889 192.51173401]
[97.22399902 177.51498413]
[96.91194153 162.51823425]
[96.59988403 147.52146912]
[96.28782654 132.52471924]
[95.97576904 117.52796936]
[85.53595734 106.75715637]
[70.55624390 105.97731018]
[55.57653046 105.19746399]
[40.58951569 104.57348633]
[25.59681702 104.10544586]
[19.50512695 106.93366241]
[13.77467442 106.30658722]
[9.99383450 103.29315186]
[-4.96641397 102.20184326]
[-19.92666245 101.11053467]
[-34.88690948 100.01922607]
[-49.84716034 98.92790985]
[-64.80741119 97.83660126]
[-71.59959412 111.43566895]
[-83.08217621 121.39653778]
[-97.50413513 126.20024109]
[-112.66622162 125.11425781]
[-126.25634766 118.30418396]
[-136.20210266 106.80851746]
[-140.98683167 92.38024902]
[-139.88090515 77.21959686]
[-133.05296326 63.63844681]
[-121.54421234 53.70782471]
[-107.10966492 48.94208145]
[-91.95048523 50.06795120]
[-78.37832642 56.91375351]
[-68.46285248 68.43555450]
[-63.71609879 82.87635040]
[-48.75584793 83.96766663]
[-33.79560089 85.05897522]
[-18.83535194 86.15028381]
[-3.87510324 87.24159241]
[11.08514595 88.33290863]
[26.06485939 89.11275482]
[41.05755615 89.58079529]
[47.88541794 86.62682343]
[56.35637665 90.21775055]
[71.33609009 90.99759674]
[86.31580353 91.77744293]
[100.27619171 86.29041290]
[110.71600342 75.51959991]
[109.65837860 56.65480423]
[122.45760345 43.19088745]
[140.71650696 43.28966904]
[150.69923401 32.09390259]
[160.68196106 20.89813805]
[170.66468811 9.70237255]
[164.20133972 0.37292930]
[159.73664856 -10.05434418]
[157.44851685 -21.15722084]
[157.42671204 -32.48670197]
[159.66944885 -43.58516693]
[164.08351135 -54.00486755]
[170.48815918 -63.32598114]
[178.62246704 -71.17353821]
[188.15602112 -77.23248291]
[198.70231628 -81.26036072]
[209.83442688 -83.09697723]
[221.10227966 -82.67079163]
[232.05082703 -80.00169373]
[242.23849487 -75.20010376]
[251.25492859 -68.46237946]
[262.75674438 -78.09090424]
[274.25854492 -87.71943665]
[285.76034546 -97.34796143]
[297.26214600 -106.97648621]
[308.76394653 -116.60501099]
[309.96914673 -134.02583313]
[323.12118530 -144.99433899]
[339.80554199 -143.12619019]
[351.10455322 -152.99191284]
[362.40356445 -162.85763550]
[373.70254517 -172.72335815]
[385.00155640 -182.58908081]
[387.51574707 -198.43391418]
[401.54180908 -206.22167969]
[416.32015991 -199.97827148]
[420.51409912 -184.49310303]
[410.90640259 -171.64506531]
[394.86727905 -171.29008484]
[383.56826782 -161.42436218]
[372.26928711 -151.55863953]
[360.97027588 -141.69291687]
[349.67126465 -131.82719421]
[350.60174561 -118.93801117]
[343.82022095 -107.70922852]
[331.62216187 -102.37680817]
[318.39245605 -105.10321045]
[306.89065552 -95.47468567]
[295.38885498 -85.84615326]
[283.88705444 -76.21762848]
[272.38525391 -66.58910370]
[260.88345337 -56.96057892]
[268.20587158 -39.41342926]
[269.23843384 -20.40655136]
[263.84802246 -2.12871981]
[252.64196777 13.31049061]
[236.89970398 24.12418556]
[218.42666626 29.05495644]
[199.34724426 27.52107811]
[181.86045837 19.68509865]
[171.87773132 30.88086510]
[161.89500427 42.07662964]
[151.91227722 53.27239609]
[155.02853394 64.32587433]
[152.36575317 75.62088776]
[144.47857666 84.29650116]
[133.25975037 88.09738922]
[121.48681641 85.95941925]
[111.04700470 96.73022461]
[114.95677185 105.59219360]
[110.97252655 117.21591187]
[111.28458405 132.21266174]
[111.59663391 147.20941162]
[111.90869141 162.20617676]
[112.22074890 177.20292664]
[112.53280640 192.19967651]
[112.84486389 207.19642639]
[113.15692139 222.19319153]
[113.46897125 237.18994141]
[128.12396240 240.78070068]
[141.34977722 248.04296875]
[152.24464417 258.48156738]
[160.06573486 271.38476562]
[164.27981567 285.87283325]
[164.59953308 300.95794678]
[161.00311279 315.61154175]
[153.73574829 328.83453369]
[143.29293823 339.72537231]
[130.38671875 347.54150391]
[115.89701843 351.74996948]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 58]
[21 57]
[22 56]
[23 54]
[24 53]
[27 52]
[28 51]
[29 50]
[30 49]
[31 48]
[32 47]
[59 129]
[60 128]
[63 123]
[64 122]
[65 121]
[66 120]
[81 112]
[82 111]
[83 110]
[84 109]
[85 108]
[86 107]
[89 103]
[90 102]
[91 101]
[92 100]
[93 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
