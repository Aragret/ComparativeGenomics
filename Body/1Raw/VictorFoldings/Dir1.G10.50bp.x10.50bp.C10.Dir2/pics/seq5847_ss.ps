%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCACACUCAUCGGGGGGGGGGGCCCUUACCACGCUACUCCUACCUAUCUCCCCUUUUAUACUAAUAAUCUUxxxxxxxxxxCAUAAAUAGGAGAAGGCUUAGAAGAAAACCCCACAAACCCCAUUACUAAACCCCCCCCCCCCCACACUCAAC\
) } def
/len { sequence length } bind def

/coor [
[83.96709442 371.79898071]
[69.80648804 366.64398193]
[57.21674347 358.36178589]
[46.87680435 347.39898682]
[39.34429550 334.34686279]
[35.02542877 319.90927124]
[34.15312195 304.86480713]
[36.77441025 290.02481079]
[42.74794006 276.18957520]
[51.75155640 264.10522461]
[63.29971313 254.42346191]
[76.76963043 247.66638184]
[91.43489075 244.19841003]
[91.43489075 229.19841003]
[91.43489075 214.19841003]
[91.43489075 199.19841003]
[91.43489075 184.19841003]
[91.43489075 169.19841003]
[91.43489075 154.19841003]
[91.43489075 139.19841003]
[91.43489075 124.19841003]
[91.43489075 109.19841003]
[86.51145935 95.02943420]
[77.21013641 83.26145172]
[67.90881348 71.49346924]
[60.08432770 66.66453552]
[58.54113007 59.39142227]
[49.48021698 47.43735123]
[48.62336349 62.41285706]
[39.92342377 74.63214874]
[26.05266380 80.34196472]
[11.27160358 77.78849030]
[0.12036899 67.75604248]
[-3.97584271 53.32617569]
[0.24115434 38.93114471]
[11.47607327 28.99250412]
[26.27801514 26.56299210]
[40.10039902 32.38882065]
[33.35835266 18.98938942]
[26.61630249 5.58995724]
[19.87425423 -7.80947495]
[13.13220596 -21.20890808]
[6.39015818 -34.60834122]
[4.13132524 -19.77939224]
[-4.24082565 -7.33322477]
[-17.12441254 0.34878084]
[-32.05435562 1.79679036]
[-46.17404556 -3.26625037]
[-56.78189468 -13.87160683]
[-61.84825134 -27.99010658]
[-60.40374756 -42.92039108]
[-52.72476959 -55.80578232]
[-40.28056717 -64.18085480]
[-25.45215034 -66.44316864]
[-11.07670879 -62.15987015]
[0.09409105 -52.15210342]
[-3.22254777 -66.78083801]
[-6.53918695 -81.40957642]
[-9.85582542 -96.03830719]
[-13.17246437 -110.66704559]
[-28.24813080 -111.08546448]
[-42.74588394 -115.24069977]
[-55.75438309 -122.87154388]
[-66.45590210 -133.49832153]
[-74.17773438 -146.45301819]
[-78.43447113 -160.92129517]
[-78.95854950 -175.99365234]
[-75.71701050 -190.72265625]
[-68.91362000 -204.18238831]
[-58.97605133 -215.52679443]
[-46.52898788 -224.04275513]
[-32.35485840 -229.19491577]
[-17.34466171 -230.65943909]
[-2.44195271 -228.34425354]
[11.41647243 -222.39489746]
[23.35946083 -213.18534851]
[32.63626862 -201.29452515]
[38.66374207 -187.46989441]
[41.06299591 -172.58049011]
[39.68320847 -157.56227112]
[34.61111450 -143.35928345]
[26.16554832 -130.86436462]
[14.87740612 -120.86292267]
[1.45627105 -113.98368073]
[4.77291012 -99.35494995]
[8.08954906 -84.72621155]
[11.40618801 -70.09748077]
[14.72282696 -55.46874237]
[19.78959084 -41.35038757]
[26.53163910 -27.95095634]
[33.27368546 -14.55152321]
[40.01573563 -1.15209103]
[46.75778198 12.24734116]
[53.49983215 25.64677429]
[61.43429184 38.37643814]
[70.49520111 50.33050919]
[79.67679596 62.19214630]
[88.97811890 73.96012878]
[98.27944183 85.72811127]
[111.87762451 92.05973053]
[126.87069702 91.60375977]
[141.86376953 91.14778900]
[156.85682678 90.69182587]
[160.00971985 75.94995880]
[166.59957886 62.39130020]
[176.24330139 50.80414200]
[188.38018799 41.86214828]
[202.30464172 36.08518600]
[217.20707703 33.80912399]
[232.22113037 35.16629028]
[246.47387695 40.07778168]
[259.13668823 48.25804901]
[269.47335815 59.23150253]
[276.88293457 72.36016083]
[280.93463135 86.88073730]
[281.39288330 101.94902802]
[278.23104858 116.68898773]
[271.63296509 130.24363708]
[261.98223877 141.82495117]
[249.83992004 150.75958252]
[235.91197205 156.52810669]
[221.00814819 158.79513550]
[205.99491882 157.42886353]
[191.74516296 152.50872803]
[179.08731079 144.32078552]
[168.75730896 133.34107971]
[161.35568237 120.20792389]
[157.31280518 105.68489075]
[142.31973267 106.14086151]
[127.32666016 106.59682465]
[112.33359528 107.05279541]
[109.39171600 108.57389069]
[106.43489075 109.19841003]
[106.43489075 124.19841003]
[106.43489075 139.19841003]
[106.43489075 154.19841003]
[106.43489075 169.19841003]
[106.43489075 184.19841003]
[106.43489075 199.19841003]
[106.43489075 214.19841003]
[106.43489075 229.19841003]
[106.43489075 244.19841003]
[121.10015106 247.66638184]
[134.57006836 254.42346191]
[146.11822510 264.10522461]
[155.12184143 276.18957520]
[161.09536743 290.02481079]
[163.71665955 304.86480713]
[162.84434509 319.90927124]
[158.52548218 334.34686279]
[150.99296570 347.39898682]
[140.65303040 358.36178589]
[128.06329346 366.64398193]
[113.90268707 371.79898071]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 99]
[24 98]
[25 97]
[27 96]
[28 95]
[38 94]
[39 93]
[40 92]
[41 91]
[42 90]
[43 89]
[56 88]
[57 87]
[58 86]
[59 85]
[60 84]
[100 131]
[101 130]
[102 129]
[103 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
