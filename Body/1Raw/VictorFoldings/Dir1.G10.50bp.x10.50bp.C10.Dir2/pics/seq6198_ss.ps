%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCUAACCCGGGGGGGGGGCUGUCUUUAGAUUUACAGUCCAAUGCUUCACUCAGCCAUUUUACCUCACCxxxxxxxxxxAUAUUGUGCCUAUUGCCAUACUAGUCUUUGCCGCCUGCGAAGCAGCGGUGCCCCCCCCCCGGCCUAGCCC\
) } def
/len { sequence length } bind def

/coor [
[95.80335236 394.32983398]
[81.95742035 388.31381226]
[70.24875641 378.78439331]
[61.54623032 366.44873047]
[56.49562836 352.22219849]
[55.47173691 337.16052246]
[58.55053711 322.38134766]
[65.50355530 308.98141479]
[75.81484222 297.95510864]
[88.71922302 290.12057495]
[103.25910950 286.05926514]
[103.25910950 271.05926514]
[103.25910950 256.05926514]
[103.25910950 241.05926514]
[103.25910950 226.05926514]
[103.25910950 211.05926514]
[103.25910950 196.05926514]
[103.25910950 181.05926514]
[103.25910950 166.05926514]
[103.25910950 151.05926514]
[103.25910950 136.05926514]
[91.42861176 134.45210266]
[80.99316406 129.14912415]
[73.04470062 120.87697601]
[68.35759735 110.66260529]
[67.31461334 99.70726013]
[69.87950134 89.24573517]
[75.61777496 80.40726471]
[83.76142120 74.09368896]
[79.15585327 59.81822586]
[74.55029297 45.54276657]
[69.94472504 31.26730537]
[65.33916473 16.99184418]
[61.36516571 13.41037178]
[59.40334320 9.08560276]
[59.39474869 4.92608309]
[60.92179871 1.68022466]
[57.21563721 -12.85471153]
[53.50947952 -27.38964844]
[34.58028030 -41.96712112]
[38.99182129 -64.77878571]
[31.80931282 -77.94736481]
[24.62680435 -91.11595154]
[17.44429588 -104.28453064]
[7.00448275 -115.05533600]
[-5.93357325 -122.64524841]
[-18.87162971 -130.23515320]
[-34.10028839 -126.00863647]
[-47.81586075 -133.86093140]
[-51.88113785 -149.13343811]
[-43.88426208 -162.76521301]
[-28.56964302 -166.66879272]
[-15.02316761 -158.52824402]
[-11.28172112 -143.17321777]
[1.65633488 -135.58329773]
[14.59439087 -127.99339294]
[7.53054714 -141.22601318]
[3.52709985 -155.68188477]
[2.77732491 -170.66313171]
[5.31741953 -185.44650269]
[11.02475452 -199.31828308]
[19.62379456 -211.60879517]
[30.69940376 -221.72467041]
[43.71687698 -229.17753601]
[58.04776764 -233.60762024]
[73.00022125 -234.80101013]
[87.85236359 -232.70013428]
[101.88718414 -227.40637207]
[114.42711639 -219.17532349]
[124.86676025 -208.40435791]
[132.70213318 -195.61346436]
[137.55493164 -181.42015076]
[139.19091797 -166.50962830]
[137.53108215 -151.60174561]
[132.65556335 -137.41621399]
[124.79973602 -124.63787079]
[114.34286499 -113.88362122]
[101.78977966 -105.67265320]
[87.74650574 -100.40136719]
[72.89101410 -98.32424927]
[57.94049072 -99.54158020]
[43.61671066 -103.99458313]
[30.61287689 -111.46704102]
[37.79538727 -98.29845428]
[44.97789383 -85.12987518]
[52.16040421 -71.96128845]
[57.42599869 -72.10556030]
[62.57269669 -70.98359680]
[72.08105469 -82.58493805]
[71.93540955 -98.62732697]
[84.47740173 -108.63123322]
[100.08588409 -104.92250061]
[106.78737640 -90.34616852]
[99.44105530 -76.08393860]
[83.68239594 -73.07657623]
[74.17404175 -61.47523880]
[77.26029968 -53.74491882]
[77.24764252 -45.30278778]
[74.04978943 -37.36185455]
[68.04441071 -31.09580803]
[71.75057220 -16.56087303]
[75.45673370 -2.02593660]
[79.61462402 12.38627911]
[84.22019196 26.66173935]
[88.82575226 40.93720245]
[93.43132019 55.21266174]
[98.03688049 69.48812103]
[118.25677490 73.17041779]
[132.67657471 89.47702026]
[134.00865173 112.42194366]
[148.50424194 116.27909851]
[162.99984741 120.13626099]
[177.49543762 123.99342346]
[191.99104309 127.85057831]
[201.15538025 127.03400421]
[206.74645996 131.94169617]
[221.15867615 136.09959412]
[235.57089233 140.25747681]
[252.46534729 138.83854675]
[258.50567627 154.67997742]
[244.95545959 164.86958313]
[231.41299438 154.66969299]
[217.00077820 150.51181030]
[202.58856201 146.35391235]
[188.13388062 142.34617615]
[173.63827515 138.48901367]
[159.14268494 134.63185120]
[144.64709473 130.77470398]
[130.15148926 126.91754150]
[118.25910950 136.05926514]
[118.25910950 151.05926514]
[118.25910950 166.05926514]
[118.25910950 181.05926514]
[118.25910950 196.05926514]
[118.25910950 211.05926514]
[118.25910950 226.05926514]
[118.25910950 241.05926514]
[118.25910950 256.05926514]
[118.25910950 271.05926514]
[118.25910950 286.05926514]
[132.79899597 290.12057495]
[145.70338440 297.95510864]
[156.01466370 308.98141479]
[162.96768188 322.38134766]
[166.04647827 337.16052246]
[165.02259827 352.22219849]
[159.97198486 366.44873047]
[151.26947021 378.78439331]
[139.56080627 388.31381226]
[125.71486664 394.32983398]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[29 107]
[30 106]
[31 105]
[32 104]
[33 103]
[37 102]
[38 101]
[39 100]
[41 86]
[42 85]
[43 84]
[44 83]
[45 56]
[46 55]
[47 54]
[88 96]
[89 95]
[110 129]
[111 128]
[112 127]
[113 126]
[114 125]
[116 124]
[117 123]
[118 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
