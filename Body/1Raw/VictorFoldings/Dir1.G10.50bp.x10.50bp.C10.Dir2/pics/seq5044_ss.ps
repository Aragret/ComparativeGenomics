%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUGACAUCGGGGGGGGGGCGGCCUGCUUCUUCUCACAUGACAAAAACUAGCCCCCAUCUCAAUCAUAUxxxxxxxxxxAACCAAACCACUUUCACCGCUACACGACCGGGGGUAUACUACGGUCAAUGCCCCCCCCCCCUCUGAAAUC\
) } def
/len { sequence length } bind def

/coor [
[82.98427582 345.45123291]
[69.76407623 338.17877197]
[58.87727356 327.73178101]
[51.06614304 314.82250977]
[46.86326218 300.33120728]
[46.55518723 285.24588013]
[50.16292953 270.59503174]
[57.44050217 257.37765503]
[67.89170837 246.49488831]
[80.80397034 238.68873596]
[95.29690552 234.49145508]
[94.98485565 219.49470520]
[94.67279816 204.49795532]
[94.36074066 189.50119019]
[94.04868317 174.50444031]
[93.73662567 159.50769043]
[93.42456818 144.51094055]
[93.11251831 129.51417542]
[92.80046082 114.51742554]
[87.89891052 100.34086609]
[78.88137817 88.35403442]
[69.86384583 76.36720276]
[60.84631729 64.38037109]
[48.13962936 72.36827850]
[34.80909348 79.26489258]
[20.94820786 85.02183533]
[6.65420389 89.59873199]
[-7.97265625 92.96347809]
[-22.82977295 95.09246826]
[-37.81293488 95.97077179]
[-52.81704330 95.59222412]
[-67.73685455 93.95948792]
[-82.46771240 91.08400726]
[-96.90628815 86.98595428]
[-110.95130920 81.69406891]
[-124.50424957 75.24549103]
[-137.47004700 67.68543243]
[-149.75776672 59.06692505]
[-161.28120422 49.45043182]
[-171.95953369 38.90340042]
[-181.71784973 27.49981499]
[-190.48770142 15.31966114]
[-198.20759583 2.44837785]
[-204.82334900 -11.02375221]
[-210.28857422 -25.00222969]
[-214.56494141 -39.38900375]
[-217.62243652 -54.08316040]
[-219.43963623 -68.98162842]
[-220.00376892 -83.97990417]
[-219.31089783 -98.97278595]
[-217.36587524 -113.85510254]
[-214.18232727 -128.52247620]
[-209.78262329 -142.87200928]
[-204.19758606 -156.80305481]
[-197.46641541 -170.21788025]
[-189.63632202 -183.02241516]
[-180.76222229 -195.12683105]
[-170.90637207 -206.44622803]
[-160.13789368 -216.90119934]
[-148.53231812 -226.41841125]
[-136.17106628 -234.93110657]
[-123.14084625 -242.37957764]
[-109.53303528 -248.71157837]
[-95.44310760 -253.88269043]
[-80.96987915 -257.85662842]
[-66.21488190 -260.60556030]
[-51.28160477 -262.11013794]
[-36.27479935 -262.35986328]
[-21.29973030 -261.35296631]
[-6.46143770 -259.09652710]
[8.13599777 -255.60632324]
[22.39018250 -250.90689087]
[36.20113373 -245.03115845]
[49.47197342 -238.02035522]
[62.10961914 -229.92366028]
[74.02542114 -220.79786682]
[85.13580322 -210.70697021]
[95.36282349 -199.72177124]
[104.63475037 -187.91932678]
[112.88654327 -175.38240051]
[120.06033325 -162.19894409]
[126.10578918 -148.46144104]
[130.98051453 -134.26625061]
[134.65029907 -119.71292877]
[137.08941650 -104.90356445]
[138.28076172 -89.94203949]
[138.21595764 -74.93329620]
[136.89547729 -59.98261261]
[134.32858276 -45.19486237]
[130.53326416 -30.67376900]
[125.53616333 -16.52119064]
[119.37231445 -2.83639789]
[112.08496857 10.28461838]
[103.72522736 22.74982071]
[94.35173798 34.47177505]
[84.03024292 45.36825943]
[72.83315277 55.36284256]
[81.85067749 67.34967041]
[90.86820984 79.33650970]
[99.88574219 91.32334137]
[104.78589630 87.23062897]
[112.40604401 86.14697266]
[121.01531219 89.35959625]
[135.87835693 91.38193512]
[152.71629333 84.00195312]
[166.18852234 95.20457458]
[181.09042358 96.91726685]
[195.99232483 98.62995911]
[210.89422607 100.34264374]
[225.79614258 102.05533600]
[240.38949585 95.94432831]
[252.15010071 105.08422089]
[267.05200195 106.79691315]
[280.46063232 97.98852539]
[295.66201782 103.11663055]
[300.99496460 118.24737549]
[292.36843872 131.77375793]
[276.40002441 133.31948853]
[265.33929443 121.69881439]
[250.43740845 119.98612213]
[236.90992737 126.21962738]
[224.08345032 116.95723724]
[209.18154907 115.24454498]
[194.27964783 113.53186035]
[179.37773132 111.81916809]
[164.47583008 110.10647583]
[154.77062988 117.39456940]
[142.30456543 116.04681396]
[133.85601807 106.24497986]
[118.99298096 104.22264099]
[107.79721069 114.20536804]
[108.10926819 129.20211792]
[108.42132568 144.19888306]
[108.73338318 159.19563293]
[109.04544067 174.19238281]
[109.35749054 189.18913269]
[109.66954803 204.18589783]
[109.98160553 219.18264771]
[110.29366302 234.17939758]
[124.94865417 237.77017212]
[138.17446899 245.03242493]
[149.06933594 255.47102356]
[156.89042664 268.37423706]
[161.10449219 282.86230469]
[161.42422485 297.94738770]
[157.82778931 312.60101318]
[150.56042480 325.82400513]
[140.11763000 336.71484375]
[127.21140289 344.53094482]
[112.72171021 348.73944092]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 100]
[21 99]
[22 98]
[23 97]
[103 130]
[104 129]
[106 126]
[107 125]
[108 124]
[109 123]
[110 122]
[112 120]
[113 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
