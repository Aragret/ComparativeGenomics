%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCACUCCCAGGGGGGGGGGUACUACUAAUCUCAUCAAUACAACCCCCGCCCAUCCUACCCAGCACACACxxxxxxxxxxAGCAAACUCAUCACUAGACAUCGUACUACACGACACGUACUACGUUGUAGCCCCCCCCCCCCCACUUCCA\
) } def
/len { sequence length } bind def

/coor [
[81.50490570 435.93792725]
[67.65896606 429.92187500]
[55.95030594 420.39248657]
[47.24778366 408.05679321]
[42.19718170 393.83029175]
[41.17329025 378.76861572]
[44.25208664 363.98944092]
[51.20510864 350.58950806]
[61.51639557 339.56317139]
[74.42077637 331.72866821]
[88.96066284 327.66735840]
[88.96066284 312.66735840]
[88.96066284 297.66735840]
[88.96066284 282.66735840]
[88.96066284 267.66735840]
[88.96066284 252.66735840]
[88.96066284 237.66735840]
[88.96066284 222.66735840]
[88.96066284 207.66735840]
[88.96066284 192.66735840]
[86.23028564 188.67729187]
[86.02178955 182.91641235]
[89.28570557 177.04663086]
[89.90968323 162.05961609]
[90.53365326 147.07260132]
[91.15763092 132.08558655]
[75.88011932 122.93257904]
[67.50928497 107.21286774]
[68.44212341 89.42776489]
[78.41149902 74.67000580]
[71.50450134 61.35485077]
[64.59750366 48.03969574]
[50.66710281 53.63428116]
[36.26176834 57.85825729]
[21.51601219 60.67217636]
[6.56750965 62.04977417]
[-8.44416523 61.97818375]
[-23.37884903 60.45807648]
[-38.09709930 57.50364304]
[-52.46148682 53.14246750]
[-66.33789825 47.41527176]
[-79.59676361 40.37553024]
[-92.11428833 32.08897400]
[-103.77360535 22.63297272]
[-114.46583557 12.09581661]
[-124.09116364 0.57589108]
[-132.55970764 -11.81924248]
[-139.79238892 -24.97385216]
[-145.72169495 -38.76511383]
[-150.29225159 -53.06425476]
[-153.46139526 -67.73777008]
[-155.19950867 -82.64865875]
[-155.49040222 -97.65768433]
[-154.33132935 -112.62471771]
[-151.73313904 -127.41001129]
[-147.72006226 -141.87550354]
[-142.32957458 -155.88615417]
[-135.61201477 -169.31112671]
[-127.63011932 -182.02508545]
[-118.45838165 -193.90931702]
[-108.18246460 -204.85285950]
[-96.89830017 -214.75352478]
[-84.71125031 -223.51887512]
[-71.73511505 -231.06706238]
[-58.09103394 -237.32763672]
[-43.90641403 -242.24211121]
[-29.31369591 -245.76461792]
[-14.44912720 -247.86225891]
[0.54850155 -248.51545715]
[15.53915691 -247.71809387]
[30.38287163 -245.47764587]
[44.94105148 -241.81500244]
[59.07776642 -236.76438904]
[72.66102600 -230.37294006]
[85.56399536 -222.70033264]
[97.66621399 -213.81822205]
[108.85466766 -203.80952454]
[119.02490234 -192.76770020]
[128.08195496 -180.79585266]
[135.94125366 -168.00573730]
[142.52943420 -154.51679993]
[147.78497314 -140.45498657]
[151.65878296 -125.95156860]
[154.11471558 -111.14197540]
[155.12983704 -96.16449738]
[154.69467163 -81.15895844]
[152.81327820 -66.26547241]
[149.50320435 -51.62310410]
[144.79539490 -37.36856079]
[138.73376465 -23.63494301]
[131.37495422 -10.55047703]
[122.78763580 1.76266718]
[113.05200195 13.18952179]
[102.25895691 23.62339592]
[90.50927734 32.96686554]
[77.91265869 41.13269806]
[84.81965637 54.44785309]
[91.72665405 67.76300812]
[106.40523529 67.34046936]
[119.83686066 73.27602386]
[129.40667725 84.41414642]
[143.90228271 80.55698395]
[158.39787292 76.69982910]
[172.89347839 72.84266663]
[182.15068054 59.73985672]
[198.17436218 58.95184708]
[208.67253113 71.08312988]
[205.59188843 86.82762146]
[191.29562378 94.10750580]
[176.75062561 87.33826447]
[162.25503540 91.19541931]
[147.75944519 95.05258179]
[133.26383972 98.90974426]
[133.27990723 100.34621429]
[133.23396301 101.78203583]
[147.64617920 105.93991852]
[162.05839539 110.09780884]
[176.47061157 114.25569916]
[193.36508179 112.83677673]
[199.40539551 128.67820740]
[185.85519409 138.86781311]
[172.31272888 128.66790771]
[157.90051270 124.51002502]
[143.48829651 120.35213470]
[129.07608032 116.19425201]
[119.45028687 127.00662994]
[106.14465332 132.70954895]
[105.52067566 147.69657898]
[104.89669800 162.68359375]
[104.27272034 177.67060852]
[103.96066284 192.66735840]
[103.96066284 207.66735840]
[103.96066284 222.66735840]
[103.96066284 237.66735840]
[103.96066284 252.66735840]
[103.96066284 267.66735840]
[103.96066284 282.66735840]
[103.96066284 297.66735840]
[103.96066284 312.66735840]
[103.96066284 327.66735840]
[118.50054932 331.72866821]
[131.40492249 339.56317139]
[141.71621704 350.58950806]
[148.66923523 363.98944092]
[151.74803162 378.76861572]
[150.72413635 393.83029175]
[145.67353821 408.05679321]
[136.97102356 420.39248657]
[125.26235199 429.92187500]
[111.41641998 435.93792725]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 130]
[24 129]
[25 128]
[26 127]
[30 98]
[31 97]
[32 96]
[101 113]
[102 112]
[103 111]
[104 110]
[115 125]
[116 124]
[117 123]
[118 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
