%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAAAAUUUCGGGGGGGGGGCACCAAACCCCCCCUCCCCCGCUUCUGGCCACAGCACUUAAACACAUCUCxxxxxxxxxxCCUGCCCCUACUCCUCCUAGACCUAACCUGACUAGAAAAGCUAUUACCUACCCCCCCCCCAAACAAUUUC\
) } def
/len { sequence length } bind def

/coor [
[21.39995193 258.14456177]
[11.76367188 252.97720337]
[2.46565175 247.22338867]
[-6.45846558 240.90518188]
[-14.97446823 234.04679871]
[-23.04971123 226.67454529]
[-30.65323448 218.81668091]
[-37.75589371 210.50334167]
[-44.33045959 201.76635742]
[-50.35172272 192.63926697]
[-63.44487762 199.95835876]
[-76.53803253 207.27746582]
[-89.63118744 214.59657288]
[-102.72434235 221.91567993]
[-115.81749725 229.23478699]
[-128.83380127 236.68969727]
[-141.77186584 244.27960205]
[-154.70991516 251.86952209]
[-167.64797974 259.45941162]
[-180.58602905 267.04934692]
[-181.11044312 282.46777344]
[-189.90625000 295.14205933]
[-204.16670227 301.02786255]
[-219.34138489 298.24707031]
[-230.58807373 287.68698120]
[-234.31800842 272.71728516]
[-229.34098816 258.11480713]
[-217.24514771 248.53909302]
[-201.89022827 247.04574585]
[-188.17593384 254.11128235]
[-175.23788452 246.52136230]
[-162.29981995 238.93145752]
[-149.36177063 231.34155273]
[-136.42370605 223.75164795]
[-132.21856689 217.61468506]
[-123.13660431 216.14163208]
[-110.04344940 208.82252502]
[-96.95029449 201.50341797]
[-83.85713959 194.18431091]
[-70.76398468 186.86521912]
[-57.67082977 179.54611206]
[-71.58781433 141.77674866]
[-76.59076691 101.83707428]
[-72.41979218 61.80196381]
[-59.29156113 23.75125313]
[-72.53414917 16.70611954]
[-85.77673340 9.66098404]
[-102.13834381 10.76996708]
[-111.05366516 -2.99408126]
[-103.35138702 -17.47188950]
[-86.95494843 -17.76992798]
[-78.73159790 -3.58160162]
[-65.48901367 3.46353340]
[-52.24642944 10.50866795]
[-47.32120895 2.61347723]
[-41.98695374 -5.01132202]
[-36.25848007 -12.34456062]
[-30.15168381 -19.36587715]
[-23.68352509 -26.05577660]
[-16.87196350 -32.39568329]
[-9.73590946 -38.36800003]
[-2.29517555 -43.95613861]
[5.42957830 -49.14458847]
[13.41690445 -53.91894150]
[21.64462662 -58.26594162]
[30.08990097 -62.17352295]
[38.72927856 -65.63082886]
[47.53877258 -68.62826538]
[56.49392319 -71.15751648]
[65.56987000 -73.21154785]
[74.74140930 -74.78466034]
[83.98307800 -75.87248993]
[93.26921844 -76.47200775]
[102.57404327 -76.58155823]
[111.87172699 -76.20083618]
[121.13644409 -75.33090210]
[130.34248352 -73.97415924]
[139.46426392 -72.13437653]
[148.47648621 -69.81667328]
[157.35411072 -67.02748108]
[166.07249451 -63.77453613]
[174.60742188 -60.06687546]
[182.93521118 -55.91479492]
[191.03273010 -51.32981873]
[198.87750244 -46.32468033]
[206.44773865 -40.91327667]
[213.72242737 -35.11062622]
[220.68138123 -28.93284798]
[227.30525208 -22.39708900]
[233.57565308 -15.52149773]
[239.47520447 -8.32516479]
[244.98750305 -0.82806861]
[250.09722900 6.94897413]
[254.79023743 14.98437023]
[259.05346680 23.25581169]
[262.87509155 31.74032974]
[266.24447632 40.41437149]
[280.56707764 35.95755386]
[294.88967896 31.50073814]
[309.21228027 27.04392242]
[311.91442871 11.97883415]
[321.31732178 -0.09776186]
[335.26022339 -6.41075087]
[350.53918457 -5.50945425]
[363.64318848 2.39901590]
[371.56100464 15.49735165]
[372.47323608 30.77565193]
[366.17022705 44.72307205]
[354.10037231 54.13460159]
[339.03720093 56.84753799]
[324.44216919 52.23846436]
[313.66909790 41.36651993]
[299.34649658 45.82333374]
[285.02389526 50.28015137]
[270.70129395 54.73696518]
[273.17523193 65.38774872]
[274.98532104 76.17121887]
[276.12457275 87.04603577]
[276.58865356 97.97052002]
[276.37576294 108.90277863]
[275.48675537 119.80090332]
[273.92498779 130.62312317]
[271.69647217 141.32795715]
[268.80972290 151.87434387]
[265.27587891 162.22187805]
[261.10839844 172.33087158]
[256.32333374 182.16259766]
[250.93896484 191.67933655]
[244.97598267 200.84461975]
[238.45722961 209.62330627]
[231.40768433 217.98175049]
[223.85438538 225.88790894]
[215.82627869 233.31146240]
[207.35415649 240.22395325]
[198.47047424 246.59890747]
[189.20932007 252.41184998]
[179.60615540 257.64053345]
[169.69783020 262.26486206]
[159.52230835 266.26715088]
[149.11860657 269.63204956]
[138.52659607 272.34667969]
[127.78690338 274.40057373]
[116.94068146 275.78591919]
[106.02952576 276.49734497]
[95.09524536 276.53219604]
[84.17977142 275.89028931]
[73.32495117 274.57409668]
[62.57238388 272.58865356]
[51.96329880 269.94158936]
[41.53836441 266.64306641]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 41]
[11 40]
[12 39]
[13 38]
[14 37]
[15 36]
[16 34]
[17 33]
[18 32]
[19 31]
[20 30]
[45 54]
[46 53]
[47 52]
[97 115]
[98 114]
[99 113]
[100 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
