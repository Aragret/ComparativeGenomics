%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACUUCCCCUAGGGGGGGGGGUCAUAGAAGAGCUUAUCACCUUUCAUGAUCACGCCCUCAUAAUCAUUUUCxxxxxxxxxxCUCUGAAAUCUGUGGAGCAAACCACAGUUUCAUGCCCAUCGUCCUAGAAUCCCCCCCCCCUAAUUCCCCUA\
) } def
/len { sequence length } bind def

/coor [
[88.91987610 372.16339111]
[74.89793396 366.61038208]
[62.69797134 357.74404907]
[53.08690262 346.12173462]
[46.66887665 332.47402954]
[43.84733963 317.65884399]
[44.79965591 302.60748291]
[49.46596146 288.26605225]
[57.55292892 275.53610229]
[68.55220032 265.21780396]
[81.77236176 257.95983887]
[96.38237000 254.21839905]
[96.38237000 239.21839905]
[96.38237000 224.21839905]
[96.38237000 209.21839905]
[96.38237000 194.21839905]
[96.38237000 179.21839905]
[96.38237000 164.21839905]
[96.38237000 149.21839905]
[96.38237000 134.21839905]
[96.38237000 119.21839905]
[85.19407654 109.22730255]
[70.28962708 110.91770172]
[55.38518143 112.60810089]
[40.48073578 114.29850006]
[32.24698257 118.39741516]
[25.25334549 115.86735535]
[10.31733322 117.25138092]
[-4.61868000 118.63540649]
[-9.46275997 133.07336426]
[-19.76527786 144.28845215]
[-33.74126053 150.33757019]
[-48.96928406 150.17266846]
[-62.81100082 143.82234192]
[-72.86824799 132.38679504]
[-77.39855194 117.84732819]
[-75.61701202 102.72297668]
[-67.83227539 89.63413239]
[-55.39311218 80.84851074]
[-40.45467377 77.88828278]
[-25.60513687 81.26631927]
[-13.41727448 90.39736176]
[-6.00270510 103.69939423]
[8.93330765 102.31536865]
[23.86931992 100.93134308]
[38.79033661 99.39405060]
[53.69478226 97.70365143]
[68.59922791 96.01325226]
[83.50367737 94.32286072]
[96.09211731 86.16619110]
[103.72509003 73.25349426]
[110.82149506 60.03831100]
[117.36936188 46.54292679]
[123.91723633 33.04754257]
[114.51103973 19.48477173]
[113.21736908 3.12420845]
[120.29386902 -11.57948399]
[133.73199463 -20.67033958]
[149.82604980 -21.75531960]
[156.09545898 -35.38229752]
[143.69572449 -26.94152260]
[129.65992737 -21.65037727]
[114.77386475 -19.80509377]
[99.87094879 -21.50898361]
[85.78555298 -26.66665268]
[73.30625153 -34.98934174]
[63.13172913 -46.01109695]
[55.83160782 -59.11484528]
[51.81460190 -73.56696320]
[51.30560303 -88.55831909]
[54.33310699 -103.24961853]
[60.72762299 -116.81833649]
[70.13114166 -128.50482178]
[82.01718903 -137.65478516]
[95.72032166 -143.75595093]
[110.47333527 -146.46675110]
[125.45028687 -145.63539124]
[139.81265259 -141.30845642]
[152.75633240 -133.72814941]
[163.55668640 -123.31890106]
[171.60900879 -110.66346741]
[176.46250916 -96.47039032]
[177.84544373 -81.53427124]
[175.68038940 -66.69134521]
[170.08677673 -52.76935959]
[182.05703735 -61.80887985]
[194.02729797 -70.84839630]
[205.99754333 -79.88791656]
[217.96780396 -88.92743683]
[222.97001648 -96.64584351]
[230.27792358 -98.02666473]
[242.43124390 -106.81850433]
[254.58457947 -115.61035156]
[266.73791504 -124.40219116]
[278.89123535 -133.19403076]
[291.04458618 -141.98587036]
[293.30117798 -157.62823486]
[306.00750732 -167.02635193]
[321.62515259 -164.60449219]
[330.88839722 -151.79951477]
[328.30154419 -136.20835876]
[315.39935303 -127.08100891]
[299.83642578 -129.83255005]
[287.68310547 -121.04070282]
[275.52975464 -112.24885559]
[263.37643433 -103.45701599]
[251.22309875 -94.66517639]
[239.06976318 -85.87332916]
[227.00732422 -76.95718384]
[215.03706360 -67.91766357]
[203.06681824 -58.87813950]
[191.09655762 -49.83862305]
[179.12629700 -40.79910278]
[169.72244263 -29.11289406]
[163.45303345 -15.48591423]
[172.07743835 -4.85408735]
[175.28219604 8.52369118]
[172.38357544 22.03892708]
[163.89370728 33.03086090]
[151.43115234 39.31027603]
[137.41261292 39.59541321]
[130.86474609 53.09079742]
[124.31687927 66.58618164]
[125.15737915 69.32197571]
[124.93054962 72.56509399]
[123.43386841 75.89776611]
[120.62445068 78.83557129]
[116.63778687 80.88646698]
[109.00481415 93.79916382]
[114.71061707 99.16549683]
[116.35678101 108.71839142]
[111.38237000 119.21839905]
[111.38237000 134.21839905]
[111.38237000 149.21839905]
[111.38237000 164.21839905]
[111.38237000 179.21839905]
[111.38237000 194.21839905]
[111.38237000 209.21839905]
[111.38237000 224.21839905]
[111.38237000 239.21839905]
[111.38237000 254.21839905]
[125.99238586 257.95983887]
[139.21253967 265.21780396]
[150.21182251 275.53610229]
[158.29878235 288.26605225]
[162.96508789 302.60748291]
[163.91740417 317.65884399]
[161.09587097 332.47402954]
[154.67784119 346.12173462]
[145.06677246 357.74404907]
[132.86682129 366.61038208]
[118.84487152 372.16339111]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 49]
[23 48]
[24 47]
[25 46]
[27 45]
[28 44]
[29 43]
[50 129]
[51 128]
[52 123]
[53 122]
[54 121]
[59 115]
[60 114]
[85 113]
[86 112]
[87 111]
[88 110]
[89 109]
[91 108]
[92 107]
[93 106]
[94 105]
[95 104]
[96 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
