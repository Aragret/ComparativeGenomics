%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGCCAUGGCGGGGGGGGGGCAUCCCCUUAUGAGCGGGCACAGUGAUUAUAGGCUUUCGCUCUAAGAUUAxxxxxxxxxxACUCACCAAGACCUCAACCCCUGACCCCCAUGCCUCAGGAUACUCCUCAACCCCCCCCCCUAGCCAUCGC\
) } def
/len { sequence length } bind def

/coor [
[114.59279633 422.26062012]
[104.95941162 410.59643555]
[99.40383148 396.52551270]
[98.47033691 381.42639160]
[102.25038147 366.77828979]
[110.37364197 354.01632690]
[122.04427338 344.39074707]
[136.11891174 338.84460449]
[135.18328857 323.87380981]
[131.60392761 317.35202026]
[134.38720703 308.58245850]
[133.76322937 293.59542847]
[133.13925171 278.60842896]
[132.51527405 263.62139893]
[131.89129639 248.63438416]
[131.26731873 233.64736938]
[130.64334106 218.66035461]
[130.01936340 203.67333984]
[126.92105103 188.99681091]
[121.43401337 175.03642273]
[115.94698334 161.07603455]
[110.45995331 147.11564636]
[104.97292328 133.15525818]
[81.29481506 132.51127625]
[61.43458176 115.30213928]
[56.46870804 86.85588837]
[71.80780792 59.36811829]
[57.79109573 54.02660370]
[43.77438354 48.68509293]
[29.75767136 43.34357834]
[20.55808258 43.20412827]
[15.50683689 37.74238968]
[1.60428059 32.11043549]
[-12.29827499 26.47847748]
[-26.20083237 20.84652138]
[-40.10338593 15.21456432]
[-54.12010193 9.87305164]
[-68.24490356 4.82429552]
[-82.36970520 -0.22446074]
[-92.85454559 10.82035542]
[-106.92774200 16.63972855]
[-122.15102386 16.22541809]
[-135.88685608 9.64920330]
[-145.75544739 -1.94954515]
[-150.04698181 -16.56127357]
[-148.01792908 -31.65441322]
[-140.01985168 -44.61398697]
[-127.43843842 -53.19466400]
[-112.45351410 -55.90980148]
[-97.66130066 -52.28897476]
[-85.62464142 -42.95951843]
[-78.42896271 -29.53781891]
[-77.32095337 -14.34926414]
[-63.19614792 -9.30050755]
[-49.07134247 -4.25175095]
[-44.39509201 -5.47982836]
[-38.90015411 -3.73714328]
[-34.47143173 1.31200850]
[-20.56887436 6.94396496]
[-6.66631889 12.57592201]
[7.23623705 18.20787811]
[21.13879395 23.83983612]
[35.09918213 29.32686615]
[49.11589432 34.66838074]
[63.13261032 40.00989151]
[77.14932251 45.35140610]
[67.40935516 33.94381714]
[57.66939163 22.53622818]
[44.10759354 16.12704086]
[34.34865952 4.73567724]
[30.09643936 -9.64898968]
[32.09335327 -24.51547241]
[39.99074936 -37.26816559]
[52.40978622 -45.68051147]
[67.18215942 -48.28376007]
[81.72869873 -44.62340164]
[93.50965118 -35.33850861]
[100.46812439 -22.05018234]
[101.38920593 -7.07848883]
[96.11171722 6.96315432]
[97.05743408 21.93331146]
[98.00315857 36.90346909]
[104.35028839 23.31251907]
[100.24543762 7.80349541]
[109.92683411 -4.98908424]
[125.96773529 -5.25184870]
[136.06294250 7.21677303]
[132.46826172 22.85192108]
[117.94123840 29.65964699]
[111.59410858 43.25059891]
[117.29461670 48.12442398]
[131.43673706 43.12438583]
[128.69563293 57.87207794]
[134.39614868 62.74590302]
[146.83558655 54.36375809]
[159.27502441 45.98161697]
[163.74244690 30.57312012]
[178.62899780 24.59230804]
[192.51499939 32.62714386]
[194.74829102 48.51399231]
[183.61569214 60.06582260]
[167.65716553 58.42105865]
[155.21772766 66.80319977]
[142.77828979 75.18534088]
[145.02534485 87.23524475]
[144.12911987 98.81419373]
[140.46733093 109.15653992]
[134.59091187 117.65423584]
[127.16996765 123.89241028]
[118.93331146 127.66822815]
[124.42034149 141.62861633]
[129.90737915 155.58900452]
[135.39440918 169.54939270]
[140.88143921 183.50978088]
[148.55720520 175.51881409]
[160.31181335 171.01538086]
[174.69157410 171.50022888]
[188.70828247 176.84175110]
[202.72499084 182.18325806]
[216.74171448 187.52478027]
[233.69566345 187.51512146]
[238.39825439 203.80381775]
[224.04792786 212.83180237]
[211.40019226 201.54148865]
[197.38348389 196.19998169]
[183.36677551 190.85845947]
[169.35006714 185.51695251]
[163.26414490 189.90005493]
[164.77000427 204.82427979]
[151.09230042 198.66625977]
[145.00639343 203.04936218]
[145.63037109 218.03637695]
[146.25433350 233.02339172]
[146.87831116 248.01040649]
[147.50228882 262.99743652]
[148.12626648 277.98443604]
[148.75024414 292.97146606]
[149.37422180 307.95846558]
[150.15406799 322.93820190]
[151.08970642 337.90899658]
[165.74536133 341.65957642]
[178.52363586 349.75717163]
[188.17263794 361.40841675]
[193.74707031 375.47189331]
[194.70079041 390.56973267]
[190.94038391 405.22290039]
[182.83424377 417.99572754]
[171.17651367 427.63693237]
[157.10932922 433.20193481]
[142.01081848 434.14553833]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 140]
[9 139]
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 114]
[20 113]
[21 112]
[22 111]
[23 110]
[27 66]
[28 65]
[29 64]
[30 63]
[32 62]
[33 61]
[34 60]
[35 59]
[36 58]
[37 55]
[38 54]
[39 53]
[82 90]
[83 89]
[94 104]
[95 103]
[96 102]
[117 127]
[118 126]
[119 125]
[120 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
