%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGCCUAGCCCGGGGGGGGGGCUACCCCCCAAUUAGGAGGGCACUGGCCCCCAACAGGCAUCACCCCGCUAxxxxxxxxxxCAAACAACUAACCUGCCACUAAUAGUUAUGUCAUCCCUCUUAUUAAUCAUCCCCCCCCCCCAUCCUAGCCC\
) } def
/len { sequence length } bind def

/coor [
[70.98557281 561.46234131]
[56.96363068 555.90936279]
[44.76367188 547.04302979]
[35.15260315 535.42071533]
[28.73457718 521.77301025]
[25.91304016 506.95779419]
[26.86535645 491.90643311]
[31.53166008 477.56500244]
[39.61862946 464.83505249]
[50.61790085 454.51678467]
[63.83806229 447.25878906]
[78.44807434 443.51736450]
[78.44807434 428.51736450]
[78.44807434 413.51736450]
[78.44807434 398.51736450]
[78.44807434 383.51736450]
[78.44807434 368.51736450]
[78.44807434 353.51736450]
[78.44807434 338.51736450]
[78.44807434 323.51736450]
[78.44807434 308.51736450]
[63.75251007 305.61657715]
[49.90085983 299.90258789]
[37.42620087 291.59326172]
[26.80902290 281.00643921]
[18.45870590 268.54763794]
[12.69773674 254.69464111]
[9.74926186 239.97920227]
[9.72843838 224.96649170]
[12.63793850 210.23352051]
[18.36777878 196.34686279]
[26.69946861 183.84097290]
[37.31435394 173.19752502]
[49.80578613 164.82690430]
[63.69472122 159.05239868]
[78.44807434 156.09767151]
[78.44807434 141.09767151]
[78.44807434 126.09766388]
[69.28614044 114.22084045]
[54.77751160 110.41297913]
[40.26888657 106.60512543]
[25.76026154 102.79726410]
[10.09323502 107.64250183]
[-1.75084281 96.30010986]
[2.41219974 80.43817139]
[18.29978180 76.37408447]
[29.56812096 88.28863525]
[44.07674789 92.09649658]
[58.58537292 95.90435791]
[73.09399414 99.71221161]
[76.32296753 90.63271332]
[82.30847931 83.75606537]
[89.93848419 79.79347229]
[97.97570801 78.96911621]
[101.93231964 64.50035095]
[105.88893127 50.03158188]
[108.18980408 35.20910263]
[108.80562592 20.22174835]
[109.42145538 5.23439503]
[110.03727722 -9.75295830]
[95.34577942 -12.96714783]
[81.43569183 -18.68383408]
[68.72972107 -26.72929192]
[57.61398697 -36.85903168]
[48.42628860 -48.76522064]
[41.44582748 -62.08604050]
[36.88473129 -76.41669464]
[34.88161087 -91.32167816]
[35.49732971 -106.34805298]
[38.71318817 -121.03918457]
[44.43144989 -134.94862366]
[52.47835159 -147.65368652]
[62.60934830 -158.76828003]
[74.51657867 -167.95462036]
[87.83819580 -174.93357849]
[102.16935730 -179.49304199]
[117.07456970 -181.49447632]
[132.10087585 -180.87704468]
[146.79164124 -177.65953064]
[160.70043945 -171.93968201]
[173.40458679 -163.89134216]
[184.51802063 -153.75907898]
[193.70301819 -141.85081482]
[200.68046570 -128.52841187]
[205.23831177 -114.19672394]
[207.23805237 -99.29128265]
[206.61891174 -84.26504517]
[203.39973450 -69.57464600]
[197.67831421 -55.66650009]
[189.62852478 -42.96326447]
[179.49501038 -31.85098076]
[167.58569336 -22.66733360]
[154.26249695 -15.69140434]
[139.93029785 -11.13518524]
[125.02463531 -9.13713264]
[124.40880585 5.85022020]
[123.79298401 20.83757401]
[123.17715454 35.82492828]
[135.84867859 43.85192490]
[149.13601685 36.89156723]
[162.42335510 29.93121147]
[173.64837646 17.22549248]
[188.96495056 24.49454117]
[186.22001648 41.22480392]
[169.38371277 43.21855164]
[156.09637451 50.17890930]
[142.80903625 57.13926697]
[134.12052917 58.70374680]
[126.37770081 57.45925903]
[120.35769653 53.98819351]
[116.40108490 68.45696259]
[112.44447327 82.92572784]
[123.04912567 99.49914551]
[115.57695007 119.52976227]
[93.44807434 126.09766388]
[93.44807434 141.09767151]
[93.44807434 156.09767151]
[108.20142365 159.05239868]
[122.09036255 164.82690430]
[134.58178711 173.19752502]
[145.19668579 183.84097290]
[153.52836609 196.34686279]
[159.25820923 210.23352051]
[162.16770935 224.96649170]
[162.14688110 239.97920227]
[159.19841003 254.69464111]
[153.43743896 268.54763794]
[145.08712769 281.00643921]
[134.46994019 291.59326172]
[121.99529266 299.90258789]
[108.14363861 305.61657715]
[93.44807434 308.51736450]
[93.44807434 323.51736450]
[93.44807434 338.51736450]
[93.44807434 353.51736450]
[93.44807434 368.51736450]
[93.44807434 383.51736450]
[93.44807434 398.51736450]
[93.44807434 413.51736450]
[93.44807434 428.51736450]
[93.44807434 443.51736450]
[108.05809021 447.25878906]
[121.27824402 454.51678467]
[132.27752686 464.83505249]
[140.36448669 477.56500244]
[145.03079224 491.90643311]
[145.98310852 506.95779419]
[143.16157532 521.77301025]
[136.74354553 535.42071533]
[127.13247681 547.04302979]
[114.93251801 555.90936279]
[100.91057587 561.46234131]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[36 117]
[37 116]
[38 115]
[39 50]
[40 49]
[41 48]
[42 47]
[54 112]
[55 111]
[56 110]
[57 98]
[58 97]
[59 96]
[60 95]
[99 107]
[100 106]
[101 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
