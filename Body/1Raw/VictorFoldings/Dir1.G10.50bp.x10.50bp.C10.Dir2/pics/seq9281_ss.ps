%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGUAAUAAGGGGGGGGGGACUUCGCCUUAAUUUUAAUAAUCAACACCCUCCUAGCCUUACUACUAAUAxxxxxxxxxxCUAAAUAAAUUAAAAAAACUAUUAAACCCAUAUAACCUCCCCCAAAAUUCCCCCCCCCCCAGAAUAAUAA\
) } def
/len { sequence length } bind def

/coor [
[83.34783173 370.11724854]
[70.12763977 362.84475708]
[59.24083328 352.39776611]
[51.42970276 339.48852539]
[47.22682190 324.99719238]
[46.91875076 309.91186523]
[50.52648926 295.26104736]
[57.80406570 282.04364014]
[68.25527191 271.16088867]
[81.16753387 263.35473633]
[95.66046906 259.15744019]
[95.34841156 244.16069031]
[95.03635406 229.16394043]
[94.72430420 214.16719055]
[94.41224670 199.17044067]
[94.10018921 184.17367554]
[93.78813171 169.17692566]
[93.47607422 154.18017578]
[93.16401672 139.18342590]
[92.85196686 124.18666840]
[92.53990936 109.18991089]
[83.42993164 121.10663605]
[69.63557434 126.99864197]
[54.72746658 125.34080505]
[42.56453323 116.56225586]
[36.29510498 102.93528748]
[37.54200363 87.98720551]
[45.98247910 75.58726501]
[59.43173599 68.94516754]
[74.40847778 69.78018951]
[87.03601837 77.87619019]
[94.04573059 91.13744354]
[96.83805084 76.39964294]
[99.63037872 61.66183472]
[102.42270660 46.92403030]
[105.21502686 32.18622208]
[90.70475769 28.35986900]
[76.50054169 23.51950264]
[62.67314148 17.68923759]
[49.29145050 10.89812183]
[36.42213440 3.17998743]
[24.12930679 -5.42671347]
[12.47421074 -14.87910271]
[1.51491225 -25.13008881]
[-8.69398880 -36.12860107]
[-18.10163307 -47.81984329]
[-26.66114998 -60.14557266]
[-34.32989883 -73.04438019]
[-41.06967163 -86.45200348]
[-46.84688950 -100.30165100]
[-51.63277054 -114.52431488]
[-55.40347672 -129.04914856]
[-58.14021683 -143.80377197]
[-59.82936096 -158.71470642]
[-60.46249008 -173.70764160]
[-60.03644943 -188.70788574]
[-58.55336761 -203.64071655]
[-56.02062607 -218.43173218]
[-52.45084381 -233.00724792]
[-47.86180878 -247.29463196]
[-42.27638245 -261.22274780]
[-35.72239304 -274.72213745]
[-28.23248863 -287.72561646]
[-19.84398651 -300.16836548]
[-10.59867859 -311.98840332]
[-0.54262280 -323.12683105]
[10.27408028 -333.52816772]
[21.79754257 -343.14059448]
[33.97035217 -351.91622925]
[46.73186874 -359.81134033]
[60.01850891 -366.78659058]
[73.76408386 -372.80722046]
[87.90010834 -377.84326172]
[102.35615540 -381.86962891]
[117.06021118 -384.86621094]
[131.93902588 -386.81814575]
[146.91845703 -387.71566772]
[161.92387390 -387.55432129]
[176.88055420 -386.33489990]
[191.71394348 -384.06347656]
[206.35015869 -380.75137329]
[220.71629333 -376.41510010]
[234.74075317 -371.07626343]
[248.35368347 -364.76144409]
[261.48727417 -357.50210571]
[274.07604980 -349.33441162]
[286.05734253 -340.29904175]
[297.37145996 -330.44107056]
[307.96200562 -319.80953979]
[317.77621460 -308.45742798]
[326.76519775 -296.44131470]
[334.88421631 -283.82107544]
[342.09277344 -270.65954590]
[348.35498047 -257.02233887]
[353.63958740 -242.97735596]
[357.92034912 -228.59457397]
[361.17587280 -213.94567871]
[363.38998413 -199.10362244]
[364.55163574 -184.14234924]
[364.65499878 -169.13641357]
[363.69961548 -154.16055298]
[361.69024658 -139.28939819]
[358.63687134 -124.59703064]
[354.55468750 -110.15663910]
[349.46408081 -96.04017639]
[343.39038086 -82.31796265]
[336.36386108 -69.05836487]
[328.41952515 -56.32743835]
[319.59695435 -44.18861771]
[309.94009399 -32.70237350]
[299.49703979 -21.92593002]
[288.31985474 -11.91297436]
[276.46420288 -2.71339273]
[263.98913574 5.62698269]
[250.95683289 13.06660080]
[237.43218994 19.56839752]
[223.48262024 25.09997940]
[209.17761230 29.63379097]
[194.58840942 33.14724350]
[179.78773499 35.62282944]
[164.84928894 37.04822159]
[149.84750366 37.41631317]
[134.85711670 36.72527695]
[119.95283508 34.97854614]
[117.16050720 49.71635437]
[114.36818695 64.45416260]
[111.57585907 79.19196320]
[108.78353882 93.92977142]
[107.53665924 108.87786102]
[107.84871674 123.87461090]
[108.16077423 138.87136841]
[108.47283173 153.86811829]
[108.78488922 168.86486816]
[109.09693909 183.86163330]
[109.40899658 198.85838318]
[109.72105408 213.85513306]
[110.03311157 228.85188293]
[110.34516907 243.84864807]
[110.65722656 258.84539795]
[125.31221771 262.43615723]
[138.53802490 269.69842529]
[149.43289185 280.13702393]
[157.25398254 293.04022217]
[161.46806335 307.52828979]
[161.78778076 322.61340332]
[158.19136047 337.26699829]
[150.92399597 350.48999023]
[140.48118591 361.38082886]
[127.57495880 369.19696045]
[113.08527374 373.40542603]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[32 128]
[33 127]
[34 126]
[35 125]
[36 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
