%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAACCGAAACGGGGGGGGGGCAAAUAAUUCAAGCACUGCUUAUUACAAUUUUACUGGGUCUCUAUUUUACxxxxxxxxxxUAUUCAUGUGCCUAGACCAAGAAGUUAUUAUCUCGAACUGACACUGAGCCCCCCCCCCCCACAACCCAAAC\
) } def
/len { sequence length } bind def

/coor [
[85.89449310 426.32601929]
[72.97533417 418.56765747]
[62.19403839 408.03863525]
[54.13202286 395.30676270]
[49.22406387 381.05865479]
[47.73484039 366.06271362]
[49.74466324 351.12759399]
[55.14514923 337.05877686]
[63.64505386 324.61499023]
[74.78598785 314.46725464]
[87.96713257 307.16287231]
[102.47765350 303.09573364]
[101.86182404 288.10836792]
[101.24600220 273.12103271]
[100.63017273 258.13366699]
[100.01435089 243.14631653]
[99.39852905 228.15896606]
[98.78269958 213.17161560]
[98.16687775 198.18426514]
[97.55104828 183.19689941]
[96.93522644 168.20954895]
[96.31939697 153.22219849]
[85.33859253 143.00349426]
[70.34571075 143.46542358]
[55.35282516 143.92733765]
[40.35993958 144.38926697]
[25.38838768 145.31268311]
[10.45237541 146.69670105]
[-4.48363686 148.08073425]
[-10.17605972 151.63586426]
[-15.93630791 151.72201538]
[-20.05928230 149.20202637]
[-35.03952408 149.97169495]
[-50.01976395 150.74134827]
[-65.00000763 151.51101685]
[-80.50803375 158.36210632]
[-91.38442993 145.35670471]
[-81.89817810 131.30511475]
[-65.76966858 136.53077698]
[-50.78942490 135.76110840]
[-35.80918503 134.99145508]
[-20.82894325 134.22178650]
[-5.86766195 133.14471436]
[9.06835079 131.76069641]
[24.00436401 130.37666321]
[26.54886818 127.85224915]
[30.46655273 126.46611786]
[35.19410324 126.86093903]
[39.89801407 129.39637756]
[54.89089966 128.93446350]
[69.88378143 128.47253418]
[84.87667084 128.01060486]
[71.59090424 107.82733154]
[76.72621155 86.11136627]
[94.45928955 75.89048767]
[95.68989563 60.94105148]
[89.11085510 46.55262756]
[97.86623383 34.50303268]
[99.09684753 19.55359840]
[100.32745361 4.60416460]
[101.55806732 -10.34527016]
[102.78868103 -25.29470444]
[88.27670288 -29.25917625]
[74.74038696 -35.82292938]
[62.64078140 -44.76240158]
[52.38999557 -55.77312469]
[44.33716202 -68.48007202]
[38.75656509 -82.45045471]
[35.83827209 -97.20844269]
[35.68167877 -112.25138855]
[38.29211807 -127.06692505]
[43.58068466 -141.15045166]
[51.36724854 -154.02229309]
[61.38660049 -165.24401855]
[73.29749298 -174.43344116]
[86.69422913 -181.27755737]
[101.12053680 -185.54325867]
[116.08506012 -187.08528137]
[131.07810974 -185.85107422]
[145.58901978 -181.88269043]
[159.12356567 -175.31529236]
[171.22074890 -166.37255859]
[181.46856689 -155.35906982]
[189.51797485 -142.64994812]
[195.09481812 -128.67807007]
[198.00912476 -113.91928864]
[198.16166687 -98.87630463]
[195.54722595 -84.06147003]
[190.25486755 -69.97937012]
[182.46484375 -57.10963821]
[172.44245911 -45.89060974]
[160.52909851 -36.70440292]
[147.13050842 -29.86389351]
[132.70304871 -25.60207176]
[117.73811340 -24.06409264]
[116.50750732 -9.11465740]
[115.27689362 5.83477688]
[114.04627991 20.78421211]
[112.81566620 35.73364639]
[119.48272705 49.05278778]
[110.63933563 62.17166519]
[109.40872192 77.12110138]
[127.48731995 93.32895660]
[124.25526428 120.61531830]
[139.15971375 118.92491913]
[154.06416321 117.23451996]
[168.96861267 115.54412079]
[175.70120239 101.66335297]
[188.88142395 93.64553833]
[204.30349731 94.04912567]
[217.04632568 102.74533844]
[223.04368591 116.95924377]
[220.38186646 132.15524292]
[209.91023254 143.48432922]
[194.97024536 147.33145142]
[180.32919312 142.46900940]
[170.65901184 130.44856262]
[155.75456238 132.13896179]
[140.85011292 133.82936096]
[125.94566345 135.51976013]
[140.85911560 133.91075134]
[154.09980774 140.95942688]
[161.09214783 154.22996521]
[159.41973877 169.13644409]
[149.66053772 180.52758789]
[135.18705750 184.46693420]
[121.00093842 179.59313965]
[112.00449371 167.59046936]
[111.30675507 152.60636902]
[111.92257690 167.59371948]
[112.53839874 182.58108521]
[113.15422821 197.56843567]
[113.77005005 212.55578613]
[114.38587952 227.54313660]
[115.00170135 242.53048706]
[115.61753082 257.51785278]
[116.23335266 272.50518799]
[116.84918213 287.49255371]
[117.46500397 302.47991943]
[132.26028442 305.34286499]
[145.99624634 311.54125977]
[157.93215942 320.74075317]
[167.42430115 332.44528198]
[173.96080017 346.02359009]
[177.18914795 360.74346924]
[176.93521118 375.81106567]
[173.21272278 390.41378784]
[166.22242737 403.76416016]
[156.34127808 415.14218140]
[144.10217285 423.93429565]
[130.16514587 429.66632080]
[115.28181458 432.02914429]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[23 52]
[24 51]
[25 50]
[26 49]
[27 45]
[28 44]
[29 43]
[32 42]
[33 41]
[34 40]
[35 39]
[55 102]
[56 101]
[58 99]
[59 98]
[60 97]
[61 96]
[62 95]
[104 120]
[105 119]
[106 118]
[107 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
