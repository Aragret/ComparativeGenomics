%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUACUACCAGGGGGGGGGGCUGACAUGACUUUCCAAAAAACACAUAAUUUGAAUCAACACAACCACCCAxxxxxxxxxxUAAACCCCAUUAAACGCCUGGCAGCCGGAAGCCUAUUCGCAGGAUUUCUCCCCCCCCCCCAUUACUAACA\
) } def
/len { sequence length } bind def

/coor [
[77.90546417 328.39828491]
[66.02119446 319.12316895]
[56.70248413 307.27307129]
[50.49111938 293.53689575]
[47.74821854 278.71325684]
[48.63324738 263.66400146]
[53.09475327 249.26405334]
[60.87335205 236.35061646]
[71.51679993 225.67446899]
[84.40631104 217.85627747]
[98.79249573 213.35061646]
[97.85687256 198.37982178]
[96.92124176 183.40902710]
[95.98561096 168.43823242]
[95.04998779 153.46743774]
[94.11435699 138.49665833]
[93.17872620 123.52586365]
[92.24310303 108.55506897]
[87.78628540 94.23247528]
[80.06220245 81.37406921]
[72.33811188 68.51567078]
[64.61402893 55.65726471]
[56.88994598 42.79886246]
[43.15107727 34.95322418]
[43.22993088 20.05882645]
[35.50584412 7.20042372]
[22.03068924 13.81057167]
[8.04349613 19.25412369]
[-6.35495758 23.49185753]
[-21.06092644 26.49324036]
[-35.96845245 28.23664665]
[-50.97012711 28.70951653]
[-65.95786285 27.90844154]
[-80.82366180 25.83919144]
[-95.46042633 22.51667976]
[-109.76268005 17.96484375]
[-123.62738800 12.21647835]
[-136.95465088 5.31300306]
[-149.64843750 -2.69584155]
[-161.61729431 -11.75235081]
[-172.77497864 -21.79127121]
[-183.04109192 -32.74027252]
[-192.34169006 -44.52046204]
[-200.60972595 -57.04696655]
[-207.78565979 -70.22953033]
[-213.81776428 -83.97315979]
[-218.66259766 -98.17884827]
[-222.28523254 -112.74423218]
[-224.65956116 -127.56436157]
[-225.76850891 -142.53247070]
[-225.60406494 -157.54069519]
[-224.16741943 -172.48089600]
[-221.46891785 -187.24545288]
[-217.52799988 -201.72795105]
[-212.37307739 -215.82408142]
[-206.04127502 -229.43223572]
[-198.57821655 -242.45440674]
[-190.03768921 -254.79673767]
[-180.48121643 -266.37030029]
[-169.97764587 -277.09173584]
[-158.60267639 -286.88375854]
[-146.43826294 -295.67584229]
[-133.57203674 -303.40463257]
[-120.09671021 -310.01443481]
[-106.10937500 -315.45761108]
[-91.71081543 -319.69497681]
[-77.00476837 -322.69598389]
[-62.09719467 -324.43899536]
[-47.09550476 -324.91149902]
[-32.10779572 -324.11001587]
[-17.24204636 -322.04040527]
[-2.60537243 -318.71749878]
[11.69676971 -314.16531372]
[25.56132889 -308.41656494]
[38.88841248 -301.51275635]
[51.58199310 -293.50357056]
[63.55061340 -284.44677734]
[74.70803833 -274.40756226]
[84.97387695 -263.45828247]
[94.27416229 -251.67785645]
[102.54187775 -239.15113831]
[109.71746826 -225.96839905]
[115.74922180 -212.22460938]
[120.59368134 -198.01879883]
[124.21593475 -183.45332336]
[126.58989716 -168.63313293]
[127.69845581 -153.66499329]
[127.53362274 -138.65676880]
[126.09658813 -123.71659851]
[123.39770508 -108.95212555]
[119.45641327 -94.46971893]
[114.30112457 -80.37372589]
[107.96897125 -66.76573181]
[100.50558472 -53.74375916]
[91.96473694 -41.40164948]
[82.40795898 -29.82832146]
[71.90412140 -19.10716629]
[60.52889633 -9.31542873]
[48.36424637 -0.52366108]
[56.08833313 12.33474159]
[69.27471924 19.26066208]
[69.74834442 35.07477951]
[77.47243500 47.93318176]
[85.19651794 60.79158401]
[92.92060089 73.64998627]
[100.64468384 86.50838470]
[112.99626160 95.01947784]
[127.76231384 97.65834045]
[142.52836609 100.29720306]
[157.29441833 102.93607330]
[172.24053955 97.74723053]
[183.40814209 107.60289001]
[198.17419434 110.24176025]
[212.94024658 112.88062286]
[225.76237488 103.64110565]
[241.34869385 106.25682068]
[250.45213318 119.17591095]
[247.67178345 134.73371887]
[234.65716553 143.70005798]
[219.12962341 140.75537109]
[210.30139160 127.64667511]
[195.53532410 125.00781250]
[180.76927185 122.36894989]
[166.87931824 127.74653625]
[154.65556335 117.70212555]
[139.88951111 115.06326294]
[125.12345123 112.42440033]
[110.35739136 109.78553009]
[108.75206757 108.74288940]
[107.21389008 107.61943817]
[108.14952087 122.59023285]
[109.08515167 137.56101990]
[110.02077484 152.53181458]
[110.95640564 167.50260925]
[111.89203644 182.47340393]
[112.82765961 197.44418335]
[113.76329041 212.41497803]
[128.59852600 215.09440613]
[142.36116028 221.24690247]
[154.25105286 230.51480103]
[163.57693481 242.35926819]
[169.79663086 256.09167480]
[172.54852295 270.91363525]
[171.67262268 285.96340942]
[167.21984863 300.36605835]
[159.44908142 313.28421021]
[148.81210327 323.96682739]
[135.92732239 331.79281616]
[121.54387665 336.30722046]
[106.49797058 337.24752808]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 137]
[12 136]
[13 135]
[14 134]
[15 133]
[16 132]
[17 131]
[18 130]
[19 106]
[20 105]
[21 104]
[22 103]
[23 102]
[25 100]
[26 99]
[107 128]
[108 127]
[109 126]
[110 125]
[112 123]
[113 122]
[114 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
