%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUAUAAUAAGGGGGGGGGGACACCCUCACCACUACAAUCUUCCUAGGAACAACAUAUGACGCACUCUCCxxxxxxxxxxAAUUAACUAGUUUUGACAACAUUCAAAAAAGAGUAAUAAACUUCGCCUUACCCCCCCCCCAUUUUAAUAA\
) } def
/len { sequence length } bind def

/coor [
[91.28704071 597.16680908]
[77.44110107 591.15081787]
[65.73244476 581.62139893]
[57.02991867 569.28570557]
[51.97931671 555.05920410]
[50.95542526 539.99749756]
[54.03422546 525.21838379]
[60.98724747 511.81842041]
[71.29853058 500.79208374]
[84.20291138 492.95758057]
[98.74279785 488.89627075]
[98.74279785 473.89627075]
[98.74279785 458.89627075]
[98.74279785 443.89627075]
[98.74279785 428.89627075]
[98.74279785 413.89627075]
[98.74279785 398.89627075]
[98.74279785 383.89627075]
[98.74279785 368.89627075]
[98.74279785 353.89627075]
[83.28411865 350.75259399]
[68.79891968 344.49130249]
[55.90879059 335.37857056]
[45.16739655 323.80310059]
[37.03665543 310.25939941]
[31.86690521 295.32666016]
[29.88179588 279.64404297]
[31.16861534 263.88327026]
[35.67445755 248.71994019]
[43.20839310 234.80441284]
[53.44954681 222.73408508]
[65.96078491 213.02761841]
[80.20736694 206.10272217]
[95.57977295 202.25816345]
[94.95579529 187.27114868]
[94.33181763 172.28413391]
[91.43782806 168.41110229]
[90.98986053 162.66387939]
[94.00678253 156.66340637]
[94.00678253 141.66340637]
[94.00678253 126.66340637]
[94.00678253 111.66340637]
[81.82151794 104.65852356]
[79.76944733 86.32529449]
[74.57403564 72.25377655]
[69.37861633 58.18225479]
[64.18320465 44.11073685]
[49.45457077 47.10537338]
[34.44141769 47.81648636]
[19.49567413 46.22740555]
[4.96768761 42.37538528]
[-8.80198288 36.35071564]
[-21.49055672 28.29463005]
[-32.80059814 18.39597321]
[-42.46697617 6.88678026]
[-50.26310730 -5.96315336]
[-56.00623322 -19.85260773]
[-59.56172943 -34.45599365]
[-60.84624481 -49.43098831]
[-59.82967377 -64.42655182]
[-56.53584290 -79.09117889]
[-51.04196930 -93.08109283]
[-43.47682953 -106.06835938]
[-34.01776886 -117.74854279]
[-22.88651657 -127.84783173]
[-10.34400749 -136.12948608]
[3.31574559 -142.39938354]
[17.77253723 -146.51054382]
[32.68748093 -148.36657715]
[47.71094894 -147.92401123]
[62.49076843 -145.19319153]
[76.68048096 -140.23812866]
[89.94745636 -133.17500305]
[101.98069763 -124.16936493]
[112.49813080 -113.43232727]
[121.25321198 -101.21557617]
[128.04071045 -87.80549622]
[132.70152283 -73.51643372]
[135.12637329 -58.68334198]
[135.25843811 -43.65393829]
[133.09461975 -28.78052902]
[128.68562317 -14.41176796]
[122.13483429 -0.88448000]
[113.59578705 11.48423576]
[103.26866150 22.40443802]
[91.39553070 31.62014389]
[78.25472260 38.91532135]
[83.45013428 52.98683929]
[88.64555359 67.05835724]
[93.84096527 81.12988281]
[108.06774902 85.88369751]
[120.67887115 77.76215363]
[133.29000854 69.64060974]
[145.90113831 61.51906586]
[158.51225281 53.39752579]
[171.12338257 45.27598190]
[174.22285461 29.77860069]
[187.41896057 21.08158302]
[202.88270569 24.34471893]
[211.43972778 37.63204575]
[208.01327515 53.06042862]
[194.63623047 61.47648239]
[179.24493408 57.88711166]
[166.63380432 66.00865173]
[154.02267456 74.13019562]
[141.41154480 82.25173950]
[128.80041504 90.37328339]
[116.18928528 98.49481964]
[109.00678253 111.66340637]
[109.00678253 126.66340637]
[109.00678253 141.66340637]
[109.00678253 156.66340637]
[109.31883240 171.66015625]
[109.94281006 186.64717102]
[110.56678772 201.63418579]
[124.67122650 203.78666687]
[138.12718201 208.51776123]
[150.46772766 215.66159058]
[161.26496887 224.96862793]
[170.14483643 236.11433411]
[176.80010986 248.71054077]
[181.00097656 262.31887817]
[182.60304260 276.46615601]
[181.55223083 290.66073608]
[177.88662720 304.40960693]
[171.73510742 317.23556519]
[163.31282043 328.69369507]
[152.91362000 338.38693237]
[140.89987183 345.97970581]
[127.68975830 351.20953369]
[113.74279785 353.89627075]
[113.74279785 368.89627075]
[113.74279785 383.89627075]
[113.74279785 398.89627075]
[113.74279785 413.89627075]
[113.74279785 428.89627075]
[113.74279785 443.89627075]
[113.74279785 458.89627075]
[113.74279785 473.89627075]
[113.74279785 488.89627075]
[128.28268433 492.95758057]
[141.18707275 500.79208374]
[151.49835205 511.81842041]
[158.45137024 525.21838379]
[161.53016663 539.99749756]
[160.50628662 555.05920410]
[155.45567322 569.28570557]
[146.75315857 581.62139893]
[135.04449463 591.15081787]
[121.19855499 597.16680908]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[34 115]
[35 114]
[36 113]
[39 112]
[40 111]
[41 110]
[42 109]
[44 90]
[45 89]
[46 88]
[47 87]
[91 108]
[92 107]
[93 106]
[94 105]
[95 104]
[96 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
