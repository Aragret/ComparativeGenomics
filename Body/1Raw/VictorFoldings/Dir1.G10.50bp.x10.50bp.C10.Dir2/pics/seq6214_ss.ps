%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUACAGUCCAAUGGGGGGGGGGGCUUCACUCAGCCAUUUUACCUCACCCCCACUGAUGUUCGCCGACCGUUGxxxxxxxxxxCCACCCUUAACAGUACAUAGUACAUAAAGCCAUUUACCGUACAUAGCACACCCCCCCCCCUUACAGUCAAAU\
) } def
/len { sequence length } bind def

/coor [
[89.17237854 438.33755493]
[75.01177216 433.18255615]
[62.42202759 424.90032959]
[52.08209229 413.93756104]
[44.54957962 400.88543701]
[40.23071289 386.44784546]
[39.35840607 371.40338135]
[41.97969818 356.56338501]
[47.95322418 342.72814941]
[56.95684052 330.64379883]
[68.50499725 320.96203613]
[81.97491455 314.20495605]
[96.64017487 310.73696899]
[96.64017487 295.73696899]
[96.64017487 280.73696899]
[96.64017487 265.73696899]
[96.64017487 250.73698425]
[96.64017487 235.73698425]
[96.64017487 220.73698425]
[96.64017487 205.73698425]
[96.64017487 190.73698425]
[96.64017487 175.73698425]
[96.18420410 160.74391174]
[95.27269745 145.77163696]
[94.36118317 130.79934692]
[79.60512543 126.38388062]
[67.92261505 114.93511963]
[62.61168289 98.45732117]
[65.72418213 80.45576477]
[77.41436768 65.19290924]
[62.63642502 62.62146378]
[47.85848236 60.05001450]
[33.08053589 57.47856522]
[26.22889137 70.95247650]
[15.70894241 81.80706787]
[2.45611882 89.07714844]
[-12.35114765 92.11627197]
[-27.39620590 90.65419769]
[-41.34125900 84.82093811]
[-52.94631958 75.13517761]
[-61.17947769 62.45817184]
[-65.30864716 47.91714859]
[-64.96665955 32.80508423]
[-60.18392563 18.46573830]
[-51.38573074 6.17415047]
[-39.35439301 -2.97671652]
[-25.15973854 -8.17317486]
[-10.06394291 -8.95315838]
[4.59068489 -5.24731159]
[17.50106430 2.61484408]
[27.51921654 13.93421078]
[33.75432968 27.70427895]
[35.65198517 42.70062256]
[50.42993164 45.27207184]
[65.20787811 47.84351730]
[79.98581696 50.41496658]
[91.06492615 40.30292511]
[89.85015869 25.35219574]
[88.63539124 10.40146637]
[87.42062378 -4.54926443]
[83.07544708 -18.90612411]
[75.79591370 -32.02132416]
[60.82948303 -37.79933548]
[56.15313721 -53.14571762]
[65.35417175 -66.28803253]
[81.37434387 -67.14462280]
[91.92433929 -55.05839157]
[88.91111755 -39.30085373]
[96.19064331 -26.18565369]
[96.66397095 -41.17818451]
[101.09344482 -55.50925827]
[109.16234589 -68.15413666]
[120.29369354 -78.20864105]
[133.69154358 -84.95381927]
[148.39788818 -87.90737152]
[163.36114502 -86.85808563]
[177.51136780 -81.88100433]
[189.83673096 -73.33200836]
[199.45591736 -61.82239151]
[205.68110657 -48.17515564]
[208.06716919 -33.36614609]
[206.44348145 -18.45428467]
[200.92614746 -4.50584364]
[191.90968323 7.48179293]
[180.03881836 16.65144730]
[166.16236877 22.34744072]
[151.27259827 24.16248322]
[136.43415833 21.96678925]
[122.70811462 15.91736031]
[111.07592773 6.44676304]
[102.37135315 -5.76403284]
[103.58612061 9.18669701]
[104.80088806 24.13742828]
[106.01565552 39.08815765]
[111.85221863 43.79821014]
[111.93892670 28.79846001]
[123.72017670 19.51394272]
[138.32461548 22.93594170]
[144.75506592 36.48767471]
[138.16934204 49.96462631]
[123.52533722 53.21831131]
[129.36189270 57.92836380]
[144.23190308 55.95791245]
[159.10191345 53.98746109]
[173.97193909 52.01700974]
[188.27006531 40.45657349]
[204.22000122 47.71518707]
[219.04702759 45.44377136]
[233.87405396 43.17235184]
[248.70108032 40.90093613]
[261.15237427 30.22869110]
[276.52850342 35.93019867]
[279.01177979 52.14023590]
[266.04766846 62.18330765]
[250.97248840 55.72796249]
[236.14546204 57.99937820]
[221.31843567 60.27079391]
[206.49140930 62.54221344]
[199.05068970 72.12625122]
[186.67390442 74.11124420]
[175.94238281 66.88702393]
[161.07237244 68.85747528]
[146.20236206 70.82792664]
[131.33233643 72.79837799]
[138.04350281 97.94643402]
[128.50366211 119.79858398]
[109.33345795 129.88783264]
[110.24497223 144.86012268]
[111.15648651 159.83239746]
[114.10810089 164.27993774]
[114.93441010 168.94656372]
[113.91631317 172.97171021]
[111.64017487 175.73698425]
[111.64017487 190.73698425]
[111.64017487 205.73698425]
[111.64017487 220.73698425]
[111.64017487 235.73698425]
[111.64017487 250.73698425]
[111.64017487 265.73696899]
[111.64017487 280.73696899]
[111.64017487 295.73696899]
[111.64017487 310.73696899]
[126.30543518 314.20495605]
[139.77534485 320.96203613]
[151.32350159 330.64379883]
[160.32713318 342.72814941]
[166.30065918 356.56338501]
[168.92193604 371.40338135]
[168.04963684 386.44784546]
[163.73077393 400.88543701]
[156.19825745 413.93756104]
[145.85832214 424.90032959]
[133.26856995 433.18255615]
[119.10797119 438.33755493]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 129]
[24 128]
[25 127]
[30 56]
[31 55]
[32 54]
[33 53]
[57 94]
[58 93]
[59 92]
[60 91]
[61 69]
[62 68]
[102 124]
[103 123]
[104 122]
[105 121]
[107 118]
[108 117]
[109 116]
[110 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
