%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCGCGGUACGGGGGGGGGGCCUAACCGUGCAAAGGUAGCAUAAUCACUUGUUCCUUAAAUAGGGACCUGxxxxxxxxxxACGAAAAUCUGUUCGCUUCAUUCAUUGCCCCCACAAUCCUAGGCCUACCCCCCCCCCCCCGCCGCAGUAC\
) } def
/len { sequence length } bind def

/coor [
[106.85163116 502.40774536]
[96.28813171 491.66714478]
[88.37992096 478.84497070]
[83.52368927 464.58438110]
[81.96301270 449.60064697]
[83.77617645 434.64538574]
[88.87223053 420.46871948]
[96.99555969 407.78173828]
[107.73870087 397.22085571]
[120.56278992 389.31573486]
[134.82456970 384.46298218]
[133.26698303 369.54406738]
[131.70939636 354.62515259]
[130.15182495 339.70623779]
[128.59423828 324.78732300]
[127.03665924 309.86840820]
[125.47908020 294.94949341]
[123.92150116 280.03057861]
[122.05388641 265.14730835]
[119.87705231 250.30609131]
[117.70021057 235.46488953]
[115.52337646 220.62368774]
[113.34653473 205.78248596]
[111.16970062 190.94128418]
[95.19631195 183.53056335]
[86.75173187 167.90078735]
[89.35356140 150.16909790]
[102.15378571 137.40324402]
[99.36146545 122.66543579]
[96.56913757 107.92762756]
[90.59838867 110.87540436]
[82.89012909 110.57380676]
[74.94698334 106.37410736]
[60.62438583 101.91728973]
[46.30178833 97.46047211]
[31.97919273 93.00365448]
[20.17670631 98.30980682]
[8.31137943 94.25604248]
[2.60173965 83.54589844]
[-11.62503910 78.79207611]
[-25.85181808 74.03826141]
[-38.40214539 83.16344452]
[-53.91919327 83.13531494]
[-66.43634796 73.96468353]
[-71.14050293 59.17784119]
[-66.22281647 44.46064377]
[-53.57423782 35.47214508]
[-38.05840302 35.66860580]
[-25.64147186 44.97448730]
[-21.09800339 59.81148529]
[-6.87122488 64.56529999]
[7.35555458 69.31911469]
[24.30255508 64.86949921]
[36.43600845 78.68106079]
[50.75860596 83.13787842]
[65.08119965 87.59468842]
[79.40380096 92.05150604]
[67.64591217 82.73742676]
[66.59212494 67.77449036]
[76.92850494 56.90438080]
[91.92550659 57.20413971]
[101.81926727 68.47860718]
[100.16862488 83.38710022]
[107.07562256 70.07194519]
[113.98262024 56.75678635]
[103.01418304 48.17236710]
[93.73337555 37.79152298]
[86.42994690 25.94030952]
[81.33154297 12.99064350]
[78.59664917 -0.65135652]
[78.30963898 -14.55810642]
[80.47819519 -28.29396057]
[85.03308868 -41.42885971]
[91.83039856 -53.55179596]
[100.65605927 -64.28366852]
[111.23258972 -73.28915405]
[123.22785187 -80.28714752]
[136.26542664 -85.05959320]
[149.93647766 -87.45822144]
[163.81254578 -87.40920258]
[177.45896912 -84.91537476]
[190.44853210 -80.05615997]
[198.17262268 -92.91456604]
[205.89671326 -105.77296448]
[213.62078857 -118.63137054]
[209.55291748 -133.90316772]
[217.54747009 -147.53631592]
[232.86141968 -151.44250488]
[246.40928650 -143.30426025]
[250.15335083 -127.94985962]
[241.87231445 -114.48880005]
[226.47918701 -110.90727997]
[218.75511169 -98.04888153]
[211.03102112 -85.19047546]
[203.30694580 -72.33207703]
[215.24040222 -61.47138977]
[224.69950867 -48.39250183]
[231.28144836 -33.64868164]
[234.70518494 -17.86418533]
[234.82342529 -1.70781064]
[231.62902832 14.13543606]
[225.25529480 28.99338150]
[215.97048950 42.23520279]
[204.16653442 53.29821777]
[190.34242249 61.71178055]
[175.08316040 67.11731720]
[159.03503418 69.28360748]
[142.87817383 68.11665344]
[127.29777527 63.66378784]
[120.39077759 76.97894287]
[113.48377991 90.29409790]
[111.30694580 105.13529968]
[114.09926605 119.87310791]
[116.89159393 134.61091614]
[128.86863708 138.44064331]
[138.01011658 146.96905518]
[142.60716248 158.51728821]
[141.83668518 170.85041809]
[135.90798950 181.60984802]
[126.01091003 188.76443481]
[128.18774414 203.60565186]
[130.36457825 218.44685364]
[132.54141235 233.28805542]
[134.71826172 248.12925720]
[136.89509583 262.97045898]
[140.75086975 268.46960449]
[141.14170837 274.22100830]
[138.84040833 278.47299194]
[140.39799500 293.39190674]
[141.95556641 308.31082153]
[143.51315308 323.22973633]
[145.07073975 338.14865112]
[146.62831116 353.06756592]
[148.18589783 367.98648071]
[149.74348450 382.90539551]
[164.70005798 384.70767212]
[178.88043213 389.79342651]
[191.57330322 397.90753174]
[202.14201355 408.64300537]
[210.05642700 421.46133423]
[214.91957092 435.71957397]
[216.48751831 450.70254517]
[214.68159485 465.65869141]
[209.59242249 479.83782959]
[201.47523499 492.52874756]
[190.73721313 503.09484863]
[177.91696167 511.00616455]
[163.65753174 515.86584473]
[148.67417908 517.43017578]
[133.71847534 515.62060547]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 135]
[12 134]
[13 133]
[14 132]
[15 131]
[16 130]
[17 129]
[18 128]
[19 125]
[20 124]
[21 123]
[22 122]
[23 121]
[24 120]
[28 114]
[29 113]
[30 112]
[33 57]
[34 56]
[35 55]
[36 54]
[39 52]
[40 51]
[41 50]
[63 111]
[64 110]
[65 109]
[82 95]
[83 94]
[84 93]
[85 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
