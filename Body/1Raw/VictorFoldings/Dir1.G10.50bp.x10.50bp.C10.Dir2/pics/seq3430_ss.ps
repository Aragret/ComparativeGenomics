%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCCAUAAAACUCUUCGGGGGGGGGGACCAAAGAGCCCCUAAAACCCGCCACAUCUACCAUCACCCUCUACAUCACxxxxxxxxxxACCCCUUACGAGUGCGGCUUCGACCCUAUAUCCCCCGCCCGCGUCCCUUUCCCCCCCCCCCUCCAUAAAAUUCUUC\
) } def
/len { sequence length } bind def

/coor [
[62.94306183 479.13989258]
[48.44392395 475.13806152]
[34.89243698 468.61141968]
[22.72423172 459.76977539]
[12.33046341 448.89736938]
[4.04524851 436.34368896]
[-1.86507821 422.51229858]
[-5.21052361 407.84777832]
[-5.88354492 392.82156372]
[-3.86250830 377.91671753]
[0.78761917 363.61230469]
[7.91735458 350.36816406]
[17.29750633 338.61010742]
[28.62654305 328.71600342]
[41.54027939 321.00399780]
[55.62359619 315.72195435]
[70.42377472 313.03967285]
[70.42377472 298.03967285]
[70.42377472 283.03967285]
[70.42377472 268.03967285]
[70.42377472 253.03968811]
[70.42377472 238.03968811]
[70.42377472 223.03968811]
[70.42377472 208.03968811]
[70.42377472 193.03968811]
[70.42377472 178.03968811]
[70.42377472 163.03968811]
[68.15786743 160.27937317]
[67.14216614 156.26812744]
[67.95716095 151.61776733]
[70.88243103 147.17912292]
[71.74925995 132.20419312]
[72.61608887 117.22926331]
[67.78879547 103.02724457]
[57.97581863 91.68240356]
[45.60807419 100.19721985]
[32.37868118 107.29978180]
[18.44823265 112.90386200]
[3.98582673 116.94143677]
[-10.83297348 119.36349487]
[-25.82828140 120.14063263]
[-40.81806564 119.26342010]
[-55.62036896 116.74250031]
[-70.05550385 112.60847473]
[-83.94823456 106.91152954]
[-97.12992096 99.72081757]
[-109.44055176 91.12363434]
[-120.73068237 81.22434235]
[-130.86326599 70.14309692]
[-139.71530151 58.01442337]
[-147.17932129 44.98554993]
[-153.16474915 31.21463966]
[-157.59889221 16.86885452]
[-160.42793274 2.12234092]
[-161.61755371 -12.84589291]
[-161.15328979 -27.85414505]
[-159.04077148 -42.72023010]
[-155.30566406 -57.26368713]
[-149.99330139 -71.30797577]
[-143.16815186 -84.68260193]
[-134.91310120 -97.22521973]
[-125.32833099 -108.78356171]
[-114.53020477 -119.21733856]
[-102.64978790 -128.39987183]
[-89.83131409 -136.21971130]
[-76.23037720 -142.58192444]
[-62.01208496 -147.40927124]
[-47.34903336 -150.64317322]
[-32.41921997 -152.24435425]
[-17.40387344 -152.19338989]
[-2.48527074 -150.49089050]
[12.15548992 -147.15753174]
[26.34068489 -142.23376465]
[39.89811707 -135.77937317]
[52.66321182 -127.87269592]
[64.48101807 -118.60972595]
[75.20806885 -108.10289001]
[84.71414948 -96.47974396]
[92.88387299 -83.88137817]
[99.61806488 -70.46072388]
[104.83496857 -56.38069916]
[108.47126007 -41.81222153]
[110.48280334 -26.93213844]
[110.84517670 -11.92107964]
[109.55398560 3.03873348]
[106.62489319 17.76570320]
[102.09346008 32.08105469]
[96.01470184 45.81101608]
[88.46240234 58.78892136]
[79.52823639 70.85722351]
[69.32066345 81.86942291]
[79.13363647 93.21427155]
[94.90503693 80.91098785]
[111.78042603 86.96102905]
[125.62474823 81.18740845]
[139.46907043 75.41378784]
[149.22785950 62.96080780]
[163.95269775 65.20315552]
[173.71148682 52.75017929]
[188.43634033 54.99252701]
[202.28067017 49.21890640]
[216.12498474 43.44528580]
[229.96931458 37.67166138]
[228.97346497 22.56249237]
[232.93992615 7.94928360]
[241.43844604 -4.58283377]
[253.54716492 -13.67446899]
[267.95260620 -18.33942795]
[283.09219360 -18.07169342]
[297.32366943 -12.90030479]
[309.10336304 -3.38621664]
[317.15344238 9.43855381]
[320.60073853 24.18287086]
[319.07128906 39.24738312]
[312.73101807 52.99800491]
[302.26763916 63.94316864]
[288.81619263 70.89562988]
[273.83572388 73.10122681]
[258.95126343 70.32072449]
[245.77731323 62.85573196]
[235.74293518 51.51598740]
[221.89860535 57.28960800]
[208.05429077 63.06322861]
[194.20996094 68.83685303]
[185.44140625 80.87686157]
[169.72633362 79.04747772]
[160.95777893 91.08749390]
[145.24269104 89.25811005]
[131.39836121 95.03173065]
[117.55404663 100.80535126]
[113.86448669 113.03376007]
[102.19989014 120.36703491]
[87.59101868 118.09608459]
[86.72419739 133.07101440]
[85.85736847 148.04595947]
[85.42377472 163.03968811]
[85.42377472 178.03968811]
[85.42377472 193.03968811]
[85.42377472 208.03968811]
[85.42377472 223.03968811]
[85.42377472 238.03968811]
[85.42377472 253.03968811]
[85.42377472 268.03967285]
[85.42377472 283.03967285]
[85.42377472 298.03967285]
[85.42377472 313.03967285]
[100.22394562 315.72195435]
[114.30726624 321.00399780]
[127.22100067 328.71600342]
[138.55003357 338.61010742]
[147.93019104 350.36816406]
[155.05992126 363.61230469]
[159.71005249 377.91671753]
[161.73109436 392.82156372]
[161.05805969 407.84777832]
[157.71261597 422.51229858]
[151.80229187 436.34368896]
[143.51707458 448.89736938]
[133.12330627 459.76977539]
[120.95510101 468.61141968]
[107.40361786 475.13806152]
[92.90447998 479.13989258]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 146]
[18 145]
[19 144]
[20 143]
[21 142]
[22 141]
[23 140]
[24 139]
[25 138]
[26 137]
[27 136]
[31 135]
[32 134]
[33 133]
[34 92]
[35 91]
[94 130]
[95 129]
[96 128]
[98 126]
[100 124]
[101 123]
[102 122]
[103 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
