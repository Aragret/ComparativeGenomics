%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCACAAUCCUAGGGGGGGGGGGGCCUACCCGCCGCAGUACUGAUCAUUCUAUUUCCCCCUCUAUUGAUCCCxxxxxxxxxxAAGCUACCCUUUUACCAUCAUUGGACAAGUAGCAUCCGUACUAUACUUCACCCCCCCCCCCAACAAUCCUA\
) } def
/len { sequence length } bind def

/coor [
[76.74410248 391.89184570]
[62.72216415 386.33883667]
[50.52220535 377.47250366]
[40.91113281 365.85018921]
[34.49310684 352.20248413]
[31.67157173 337.38729858]
[32.62388611 322.33590698]
[37.29019165 307.99450684]
[45.37715912 295.26452637]
[56.37643433 284.94625854]
[69.59659576 277.68829346]
[84.20660400 273.94683838]
[84.20660400 258.94683838]
[84.20660400 243.94685364]
[84.20660400 228.94685364]
[84.20660400 213.94685364]
[84.20660400 198.94685364]
[84.20660400 183.94685364]
[84.20660400 168.94685364]
[84.20660400 153.94685364]
[84.20660400 138.94685364]
[71.53508759 130.91984558]
[57.97319412 137.32882690]
[44.41129684 143.73780823]
[39.31884384 158.69917297]
[25.10195923 165.60247803]
[10.19527054 160.35214233]
[3.44265032 146.06306458]
[8.85030842 131.21270752]
[23.20997810 124.61154175]
[38.00231934 130.17590332]
[51.56421661 123.76692963]
[65.12611389 117.35795593]
[63.52795410 93.32135010]
[76.08897400 74.16499329]
[96.54711914 66.85374451]
[98.39044189 51.96743774]
[100.23376465 37.08113098]
[102.07708740 22.19482231]
[103.92041016 7.30851555]
[85.84687042 -12.38757801]
[94.46786499 -40.98967743]
[83.07678986 -50.74895096]
[71.68571472 -60.50822830]
[60.29463959 -70.26750183]
[48.90356827 -80.02677917]
[36.00222015 -72.12674713]
[21.29059792 -68.60207367]
[6.20998812 -69.79808044]
[-7.76216030 -75.59757996]
[-19.25699997 -85.43241119]
[-27.14838409 -98.33905029]
[-30.66319466 -113.05303192]
[-29.45708656 -128.13282776]
[-23.64822197 -142.10108948]
[-13.80569458 -153.58934021]
[-0.89377421 -161.47207642]
[13.82256031 -164.97702026]
[28.90155220 -163.76081848]
[42.86591721 -157.94259644]
[54.34756851 -148.09236145]
[62.22164536 -135.17517090]
[65.71673584 -120.45648956]
[64.49041748 -105.37831116]
[58.66284180 -91.41784668]
[70.05391693 -81.65857697]
[81.44499207 -71.89929962]
[92.83605957 -62.14002609]
[104.22713470 -52.38075256]
[98.90937042 -66.40649414]
[87.57941437 -76.23664856]
[81.10168457 -89.76584625]
[80.54795837 -104.75562286]
[86.00984955 -118.72586823]
[96.58366394 -129.36515808]
[110.51992798 -134.91317749]
[125.51284027 -134.45198059]
[139.08175659 -128.05789185]
[148.98167419 -116.78883362]
[153.57458496 -102.50930023]
[152.10060120 -87.58189392]
[144.80358887 -74.47641754]
[132.88757324 -65.35963440]
[126.71646118 -51.68786240]
[138.68672180 -60.72738266]
[150.65698242 -69.76689911]
[162.62724304 -78.80641937]
[174.59750366 -87.84593964]
[176.67268372 -92.77024841]
[180.10830688 -96.04165649]
[184.02949524 -97.41783905]
[187.59449768 -97.04632568]
[200.09852600 -105.33180237]
[203.36135864 -120.56307220]
[216.16026306 -128.78759766]
[230.66084290 -125.58312225]
[243.16488647 -133.86859131]
[255.66891479 -142.15406799]
[262.49029541 -157.06718445]
[278.83947754 -158.34664917]
[287.89776611 -144.67628479]
[280.34683228 -130.11897278]
[263.95440674 -129.65003967]
[251.45036316 -121.36456299]
[238.94631958 -113.07908630]
[236.24522400 -98.47636414]
[223.68237305 -89.89558411]
[208.38400269 -92.82776642]
[195.87997437 -84.54228973]
[183.63702393 -75.87567902]
[171.66676331 -66.83616638]
[159.69650269 -57.79664230]
[147.72624207 -48.75712585]
[135.75598145 -39.71760559]
[142.72058105 -27.65738487]
[143.69805908 -14.33474541]
[138.98280334 -2.44526625]
[129.97367859 5.81462049]
[118.80671692 9.15184021]
[116.96339417 24.03814697]
[115.12007141 38.92445374]
[113.27674866 53.81076431]
[111.43342590 68.69706726]
[120.88603973 73.23341370]
[128.61973572 80.59767151]
[133.79838562 90.15859985]
[135.81239319 101.04147339]
[134.34808350 112.20785522]
[129.42962646 122.55463409]
[121.42809296 131.02299500]
[111.03565979 136.70642090]
[99.20660400 138.94685364]
[99.20660400 153.94685364]
[99.20660400 168.94685364]
[99.20660400 183.94685364]
[99.20660400 198.94685364]
[99.20660400 213.94685364]
[99.20660400 228.94685364]
[99.20660400 243.94685364]
[99.20660400 258.94683838]
[99.20660400 273.94683838]
[113.81661987 277.68829346]
[127.03677368 284.94625854]
[138.03605652 295.26452637]
[146.12301636 307.99450684]
[150.78932190 322.33590698]
[151.74163818 337.38729858]
[148.92010498 352.20248413]
[142.50207520 365.85018921]
[132.89100647 377.47250366]
[120.69104767 386.33883667]
[106.66910553 391.89184570]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 33]
[23 32]
[24 31]
[36 123]
[37 122]
[38 121]
[39 120]
[40 119]
[42 69]
[43 68]
[44 67]
[45 66]
[46 65]
[84 114]
[85 113]
[86 112]
[87 111]
[88 110]
[92 109]
[93 108]
[96 105]
[97 104]
[98 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
