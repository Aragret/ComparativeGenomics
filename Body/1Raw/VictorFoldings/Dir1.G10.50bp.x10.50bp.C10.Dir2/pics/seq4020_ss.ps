%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUGCCGAAGGGGGGGGGGGGGGAGUCCGAACUAGUCUCAGGCUUCAACAUCGAAUACGCCGCAGGCCCCxxxxxxxxxxUAUGACUCCCUAAAGCCCAUGUCGAAGCCCCCAUCGCUGGGUCAAUAGUACCCCCCCCCCCUUGCCGCAG\
) } def
/len { sequence length } bind def

/coor [
[84.14244080 363.68884277]
[71.26917267 355.78598022]
[61.14487457 344.57546997]
[54.59029388 330.96612549]
[52.13677216 316.06118774]
[53.98320770 301.06896973]
[59.97991943 287.20474243]
[69.64078522 275.59249878]
[82.18263245 267.17355347]
[96.58875275 262.63037109]
[96.27669525 247.63363647]
[95.96463776 232.63687134]
[95.65258026 217.64012146]
[95.34053040 202.64337158]
[95.02847290 187.64662170]
[94.71641541 172.64985657]
[94.40435791 157.65310669]
[94.09230042 142.65635681]
[93.78024292 127.65959930]
[80.53765869 120.61446381]
[67.92652893 128.73600769]
[63.13952637 144.04823303]
[48.13177490 149.71804810]
[34.41593552 141.39607239]
[32.51362991 125.46620178]
[43.88414383 114.14847565]
[59.80498886 116.12487793]
[72.41611481 108.00334167]
[75.11248779 93.11851501]
[84.39481354 83.21125031]
[96.08674622 80.36502075]
[98.87907410 65.62721252]
[101.67139435 50.88940811]
[104.46372223 36.15160370]
[99.43063354 21.15231514]
[109.40193939 10.08784676]
[98.01893616 0.29653805]
[93.66843414 -14.59548473]
[98.27629089 -29.93251991]
[110.87551880 -40.60844040]
[127.75234985 -42.76445770]
[127.44029236 -57.76121140]
[127.12823486 -72.75796509]
[126.81617737 -87.75471497]
[126.50411987 -102.75147247]
[126.19207001 -117.74822235]
[118.16934204 -131.38444519]
[125.64019775 -144.26992798]
[125.32814026 -159.26667786]
[125.01608276 -174.26344299]
[124.70402527 -189.26019287]
[118.49861908 -202.91642761]
[107.40730286 -213.01507568]
[91.27896881 -215.98306274]
[86.04084778 -231.52314758]
[97.08146667 -243.64901733]
[113.04318237 -239.88662720]
[117.50595093 -224.10639954]
[128.59727478 -214.00775146]
[135.75857544 -216.23616028]
[127.09410858 -228.48063660]
[136.06198120 -240.50465393]
[150.26867676 -235.69114685]
[150.08116150 -220.69296265]
[157.24246216 -222.92137146]
[160.64544678 -237.53027344]
[164.04841614 -252.13916016]
[150.45552063 -258.62356567]
[138.57466125 -267.87875366]
[128.96150208 -279.47192383]
[122.06568146 -292.86077881]
[118.20973206 -307.41915894]
[117.57400513 -322.46606445]
[120.18822479 -337.29779053]
[125.93013000 -351.22061157]
[134.53115845 -363.58331299]
[145.58901978 -373.80767822]
[158.58651733 -381.41549683]
[172.91574097 -386.05096436]
[187.90647888 -387.49722290]
[202.85760498 -385.68664551]
[217.06980896 -380.70394897]
[229.87835693 -372.78216553]
[240.68418884 -362.29177856]
[248.98188782 -349.72344971]
[254.38334656 -335.66506958]
[256.63595581 -320.77413940]
[255.63432312 -305.74713135]
[251.42530823 -291.28689575]
[244.20578003 -278.06976318]
[234.31341553 -266.71392822]
[222.21087646 -257.75051880]
[208.46424866 -251.59877014]
[193.71646118 -248.54640198]
[178.65731812 -248.73619080]
[175.25433350 -234.12728882]
[171.85136414 -219.51840210]
[159.69480896 -194.00608826]
[139.70077515 -189.57225037]
[140.01283264 -174.57548523]
[140.32489014 -159.57873535]
[140.63694763 -144.58198547]
[148.63734436 -132.01843262]
[141.18882751 -118.06027985]
[141.50086975 -103.06352997]
[141.81292725 -88.06677246]
[142.12498474 -73.07002258]
[142.43704224 -58.07326889]
[142.74909973 -43.07651520]
[152.96258545 -32.09084702]
[167.89688110 -30.68854523]
[182.83119202 -29.28624153]
[197.76550293 -27.88393784]
[212.43826294 -35.20800400]
[225.96638489 -25.93857956]
[224.43327332 -9.61125183]
[209.41607666 -3.02217698]
[196.36320496 -12.94963074]
[181.42889404 -14.35193443]
[166.49458313 -15.75423717]
[151.56027222 -17.15654182]
[148.11935425 -1.79302204]
[137.81399536 9.06530380]
[124.13973999 12.88017178]
[129.37255859 26.82531357]
[119.20152283 38.94392776]
[116.40920258 53.68173218]
[113.61687469 68.41954041]
[110.82455444 83.15734100]
[124.16462708 103.16732025]
[108.77700043 127.34754944]
[109.08905792 142.34429932]
[109.40111542 157.34104919]
[109.71316528 172.33781433]
[110.02522278 187.33456421]
[110.33728027 202.33131409]
[110.64933777 217.32806396]
[110.96139526 232.32482910]
[111.27345276 247.32157898]
[111.58550262 262.31832886]
[126.16814423 266.25830078]
[139.04934692 274.14822388]
[149.18490601 285.34854126]
[155.75315857 298.95129395]
[158.22164917 313.85375977]
[156.39027405 328.84783936]
[150.40748596 342.71807861]
[140.75830078 354.34002686]
[128.22491455 362.77157593]
[113.82337189 367.32919312]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 28]
[21 27]
[31 129]
[32 128]
[33 127]
[34 126]
[36 124]
[41 109]
[42 108]
[43 107]
[44 106]
[45 105]
[46 104]
[48 102]
[49 101]
[50 100]
[51 99]
[52 59]
[53 58]
[65 97]
[66 96]
[67 95]
[110 121]
[111 120]
[112 119]
[113 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
