%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUAGCCUUGGGGGGGGGGACUACUAAUAAUUAUUACAUUUUGACUACCACAACUCAACGGCUACAUAGxxxxxxxxxxCGGCUCACUCCUUGGCGCCUGCCUGAUCCUCCAAAUCACCACAGGACUAUCCCCCCCCCCUCCUAGCCAU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 390.54895020]
[71.19830322 384.53292847]
[59.48964310 375.00350952]
[50.78712082 362.66784668]
[45.73651886 348.44131470]
[44.71262741 333.37963867]
[47.79142761 318.60049438]
[54.74444962 305.20056152]
[65.05573273 294.17422485]
[77.96011353 286.33972168]
[92.50000000 282.27841187]
[92.50000000 267.27841187]
[92.50000000 252.27839661]
[92.50000000 237.27839661]
[92.50000000 222.27839661]
[92.50000000 207.27839661]
[92.50000000 192.27839661]
[92.50000000 177.27839661]
[92.50000000 162.27839661]
[92.50000000 147.27839661]
[92.50000000 132.27839661]
[81.95214081 130.48771667]
[71.89469147 125.15740967]
[63.53059387 116.45780182]
[57.99092865 104.96838379]
[56.19689941 91.64525604]
[41.70130539 95.50241852]
[27.20570755 99.35957336]
[12.71011066 103.21673584]
[1.48234034 115.16952515]
[-14.41896629 111.15947723]
[-18.63590813 95.31178284]
[-6.83045673 83.92919159]
[8.85295105 88.72113800]
[23.34854698 84.86397552]
[37.84414291 81.00682068]
[52.33974075 77.14965820]
[53.35090637 69.71813965]
[38.48789215 67.69557190]
[40.51068497 52.83258820]
[55.37324142 54.85509109]
[56.38441086 47.42356491]
[43.44635391 39.83365631]
[30.50829697 32.24374771]
[17.57024193 24.65384102]
[4.25593185 32.31052017]
[-11.10290241 32.26819611]
[-24.37481117 24.53825188]
[-31.98971748 11.20000744]
[-31.89925003 -4.15861845]
[-24.12774467 -17.40623283]
[-10.76569653 -24.97929192]
[4.59257030 -24.84068489]
[17.81575966 -17.02769279]
[25.34689903 -3.64197159]
[25.16015053 11.71578503]
[38.09820557 19.30569267]
[51.03626251 26.89560127]
[63.97431946 34.48551178]
[77.43028259 27.85701180]
[79.29789734 12.97373199]
[73.33902740 -1.68240905]
[82.60076141 -13.34729385]
[68.31944275 -18.09388542]
[55.23870087 -25.53568268]
[43.86132050 -35.38664627]
[34.62462234 -47.26813126]
[27.88364029 -60.72344208]
[23.89747810 -75.23538971]
[22.81935501 -90.24618530]
[24.69070816 -105.17884064]
[29.43961143 -119.45939636]
[36.88352585 -132.53894043]
[46.73633194 -143.91471863]
[58.61930847 -153.14949036]
[72.07571411 -159.88829041]
[86.58831024 -163.87211609]
[101.59927368 -164.94779968]
[116.53163147 -163.07403564]
[130.81141663 -158.32281494]
[143.88973999 -150.87678528]
[155.26393127 -141.02214050]
[164.49678040 -129.13766479]
[171.23341370 -115.68017578]
[175.21487427 -101.16693115]
[176.28814697 -86.15579224]
[174.41195679 -71.22373962]
[169.65843201 -56.94472885]
[162.21028137 -43.86759949]
[152.35379028 -32.49500656]
[140.46781921 -23.26407814]
[127.00923920 -16.52963066]
[112.49535370 -12.55051517]
[97.48404694 -11.47968006]
[103.57649231 2.11190867]
[94.18117523 14.84134483]
[92.31356049 29.72462463]
[102.64076996 40.60345078]
[117.60102081 39.51213837]
[132.56126404 38.42082977]
[147.52151489 37.32951736]
[158.68045044 23.89763260]
[175.76289368 22.68340492]
[188.20974731 33.94989014]
[203.14405823 32.54758835]
[218.07835388 31.14528275]
[233.01266479 29.74297905]
[241.75094604 16.77468872]
[256.79489136 12.50696564]
[271.04122925 18.95489883]
[277.76327515 33.07397079]
[273.78707886 48.19758987]
[260.99005127 57.18484116]
[245.41461182 55.79222488]
[234.41497803 44.67728806]
[219.48066711 46.07958984]
[204.54635620 47.48189545]
[189.61204529 48.88419724]
[182.83447266 59.88697815]
[170.76931763 65.03543091]
[157.75477600 62.23373032]
[148.61282349 52.28976822]
[133.65257263 53.38107681]
[118.69232941 54.47238922]
[103.73207855 55.56369781]
[125.59008026 66.31625366]
[137.51327515 86.08484650]
[136.88592529 107.88871765]
[125.27179718 124.83067322]
[107.50000000 132.27839661]
[107.50000000 147.27839661]
[107.50000000 162.27839661]
[107.50000000 177.27839661]
[107.50000000 192.27839661]
[107.50000000 207.27839661]
[107.50000000 222.27839661]
[107.50000000 237.27839661]
[107.50000000 252.27839661]
[107.50000000 267.27841187]
[107.50000000 282.27841187]
[122.03988647 286.33972168]
[134.94427490 294.17422485]
[145.25555420 305.20056152]
[152.20857239 318.60049438]
[155.28736877 333.37963867]
[154.26348877 348.44131470]
[149.21287537 362.66784668]
[140.51036072 375.00350952]
[128.80169678 384.53292847]
[114.95575714 390.54895020]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[26 37]
[27 36]
[28 35]
[29 34]
[42 59]
[43 58]
[44 57]
[45 56]
[60 97]
[61 96]
[63 94]
[98 125]
[99 124]
[100 123]
[101 122]
[104 118]
[105 117]
[106 116]
[107 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
