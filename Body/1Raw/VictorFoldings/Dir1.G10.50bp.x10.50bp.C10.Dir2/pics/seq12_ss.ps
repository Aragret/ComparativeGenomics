%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAUCACCCUAGGGGGGGGGGUUAACCACUCACGGGAGCUCUCCAUGCAUUUGGUAUUUUCGUCUGGGGGGxxxxxxxxxxACAAGUAGCAUCCGUACUAUACUUCACAACAAUCCUAAUCCUAAUACCAACCCCCCCCCCCUAUCUCCCUA\
) } def
/len { sequence length } bind def

/coor [
[23.99363327 468.05978394]
[9.97168922 462.50677490]
[-2.22826815 453.64047241]
[-11.83933926 442.01815796]
[-18.25736427 428.37045288]
[-21.07890129 413.55526733]
[-20.12658501 398.50387573]
[-15.46028042 384.16244507]
[-7.37331390 371.43249512]
[3.62596059 361.11422729]
[16.84611893 353.85626221]
[31.45613289 350.11480713]
[31.45613289 335.11480713]
[31.45613289 320.11480713]
[31.45613289 305.11480713]
[31.45613289 290.11480713]
[31.45613289 275.11480713]
[31.45613289 260.11480713]
[31.45613289 245.11482239]
[31.45613289 230.11482239]
[31.45613289 215.11482239]
[31.45613289 200.11482239]
[23.54721069 212.86036682]
[13.27585697 223.79193115]
[1.04706049 232.47851562]
[-12.65700340 238.57757568]
[-27.29599380 241.84866333]
[-42.29270554 242.16278076]
[-57.05582428 239.50753784]
[-71.00325775 233.98765564]
[-83.58506012 225.82075500]
[-94.30514526 215.32885742]
[-102.74082184 202.92565918]
[-108.55947876 189.10020447]
[-111.53170013 174.39762878]
[-111.54027557 159.39762878]
[-108.58487701 144.69165039]
[-102.78203583 130.85955811]
[-94.36054993 118.44671631]
[-83.65247345 107.94256592]
[-71.08002472 99.76128387]
[-57.13891220 94.22544861]
[-42.37884140 91.55332947]
[-27.38178062 91.85029602]
[-12.73905754 95.10462952]
[0.97197378 101.18801117]
[13.21069813 109.86059570]
[23.49454880 120.78041077]
[31.41804314 133.51690674]
[36.66876221 147.56788635]
[39.03967285 162.37931824]
[38.43811798 177.36134338]
[46.85152817 164.94302368]
[55.26493835 152.52471924]
[63.67834854 140.10639954]
[72.09175873 127.68808746]
[80.50516510 115.26977539]
[88.91857910 102.85146332]
[74.12231445 105.31531525]
[61.11708832 97.84108734]
[55.79705811 83.81620789]
[60.57334137 69.59696198]
[73.28125763 61.62771225]
[88.16139221 63.52025223]
[98.46984100 74.41684723]
[99.53514862 89.37729645]
[109.64057922 78.29216766]
[119.74601746 67.20703125]
[110.69578552 55.19330978]
[104.00904846 41.72468567]
[99.91223907 27.26050758]
[98.54345703 12.29378223]
[99.94786072 -2.66563654]
[104.07617188 -17.10841370]
[110.78636932 -30.54307747]
[119.84862518 -42.51273727]
[130.95312500 -52.61062622]
[143.72071838 -60.49393082]
[157.71578979 -65.89541626]
[172.46118164 -68.63249207]
[187.45446777 -68.61337280]
[202.18501282 -65.84019470]
[216.15139771 -60.40882492]
[228.87850952 -52.50561523]
[238.98394775 -63.59074783]
[249.08938599 -74.67588043]
[259.19482422 -85.76101685]
[269.30026245 -96.84615326]
[263.55142212 -110.98524475]
[264.51522827 -126.21789551]
[272.00024414 -139.51966858]
[284.52035522 -148.24946594]
[299.58969116 -150.67401123]
[314.21618652 -146.31187439]
[325.49575806 -136.02917480]
[331.18887329 -121.86755371]
[330.16510010 -106.63880920]
[322.62774658 -93.36662292]
[310.07333374 -84.68618774]
[294.99459839 -82.32101440]
[280.38537598 -86.74071503]
[270.27993774 -75.65557861]
[260.17449951 -64.57044983]
[250.06907654 -53.48531342]
[239.96363831 -42.40018082]
[249.00744629 -30.45657158]
[255.70429993 -17.05090523]
[259.82482910 -2.63908315]
[261.22726440 12.28847599]
[259.86239624 27.22352219]
[255.77525330 41.65727997]
[249.10362244 55.09778214]
[240.07339478 67.08663177]
[228.99096680 77.21464539]
[216.23274231 85.13581848]
[202.23249817 90.57912445]
[187.46647644 93.35781860]
[172.43730164 93.37583160]
[157.65681458 90.63108063]
[143.62867737 85.21560669]
[130.83114624 77.31246185]
[120.72571564 88.39759827]
[110.62027740 99.48273468]
[101.33689117 111.26486969]
[92.92348480 123.68318176]
[84.51007080 136.10150146]
[76.09666443 148.51980591]
[67.68325043 160.93812561]
[59.26984406 173.35644531]
[50.85643387 185.77474976]
[46.45613098 200.11482239]
[46.45613098 215.11482239]
[46.45613098 230.11482239]
[46.45613098 245.11482239]
[46.45613098 260.11480713]
[46.45613098 275.11480713]
[46.45613098 290.11480713]
[46.45613098 305.11480713]
[46.45613098 320.11480713]
[46.45613098 335.11480713]
[46.45613098 350.11480713]
[61.06614304 353.85626221]
[74.28630066 361.11422729]
[85.28557587 371.43249512]
[93.37254333 384.16244507]
[98.03884888 398.50387573]
[98.99116516 413.55526733]
[96.16963196 428.37045288]
[89.75160217 442.01815796]
[80.14053345 453.64047241]
[67.94057465 462.50677490]
[53.91863251 468.05978394]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[52 130]
[53 129]
[54 128]
[55 127]
[56 126]
[57 125]
[58 124]
[66 123]
[67 122]
[68 121]
[84 105]
[85 104]
[86 103]
[87 102]
[88 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
