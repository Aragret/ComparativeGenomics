%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACACCUAUCCCCCAUUCUCCUCCUAUCCCUCAACCCCGACAUCAUUACCGGGUUUUCCUCxxxxxxxxxxACUCAUGCCCCCAUGUCUAACAACAUGGCUUUCUCAACUUUUAAAGGAUAACAGCUAUCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[93.45114899 132.85250854]
[83.70349884 144.25354004]
[73.95584106 155.65455627]
[64.20819092 167.05557251]
[54.46054077 178.45660400]
[45.31880569 190.34898376]
[36.80771637 202.70054626]
[28.29662514 215.05212402]
[19.78553391 227.40370178]
[11.27444458 239.75526428]
[2.76335406 252.10684204]
[5.87072706 267.60263062]
[-2.95863008 280.71057129]
[-18.48641586 283.65393066]
[-31.50027084 274.68649292]
[-34.27930450 259.12844849]
[-25.17476654 246.21014404]
[-9.58821869 243.59574890]
[-1.07712817 231.24417114]
[7.43396187 218.89260864]
[15.94505215 206.54103088]
[24.45614243 194.18945312]
[32.96723175 181.83789062]
[17.96958923 181.57203674]
[8.65844822 169.81182861]
[11.83950043 155.15299988]
[25.18765450 148.30999756]
[38.94649124 154.28448486]
[43.05951691 168.70893860]
[52.80717087 157.30792236]
[62.55482101 145.90690613]
[72.30247498 134.50588989]
[82.05012512 123.10485840]
[81.27133942 115.64540863]
[67.25102234 120.97747040]
[57.18764877 132.10079956]
[42.42367172 134.75126648]
[29.11961174 127.82291412]
[22.82681274 114.20672607]
[26.17105103 99.58427429]
[37.75688934 90.05702972]
[52.74993515 89.60038757]
[64.89443207 98.40538025]
[79.71375275 100.72649384]
[78.93496704 93.26703644]
[67.04258728 84.12530518]
[55.15020370 74.98356628]
[43.25782394 65.84183502]
[29.09380531 71.78120422]
[13.85975266 69.82691193]
[1.65355313 60.50466919]
[-4.24138737 46.32210159]
[-2.23935938 31.09424973]
[7.12110138 18.91732979]
[21.32207870 13.06687450]
[36.54357910 15.11662483]
[48.69109726 24.51520729]
[54.49701309 38.73445129]
[52.39955902 53.94945526]
[64.29193878 63.09119034]
[76.18431854 72.23292542]
[88.07669830 81.37465668]
[82.02293396 67.65052032]
[75.96916962 53.92638397]
[69.91540527 40.20224762]
[63.86164093 26.47810936]
[53.42502975 15.70419884]
[45.82510376 2.77202582]
[41.49099731 -11.58818054]
[40.66743851 -26.56555557]
[43.40093994 -41.31438446]
[49.53714371 -55.00186157]
[58.72956467 -66.85510254]
[70.45913696 -76.20481110]
[84.06355286 -82.52304077]
[98.77461243 -85.45301819]
[113.76163483 -84.82931519]
[128.17837524 -80.68713379]
[141.21076965 -73.26037598]
[152.12292480 -62.96840286]
[160.29869080 -50.39235687]
[165.27639771 -36.24235916]
[166.77497864 -21.31740379]
[164.70980835 -6.46024752]
[159.19750977 7.49018574]
[150.54934692 19.74617004]
[139.25175476 29.61694145]
[132.07810974 42.79035950]
[124.90448761 55.96378326]
[117.73085785 69.13719940]
[110.55722046 82.31062317]
[123.16835022 74.18907928]
[135.77947998 66.06753540]
[148.39060974 57.94599533]
[161.00173950 49.82445526]
[173.61286926 41.70291138]
[176.71232605 26.20553017]
[189.90844727 17.50851250]
[205.37219238 20.77164841]
[213.92919922 34.05897522]
[210.50276184 49.48735809]
[197.12570190 57.90341187]
[181.73440552 54.31404114]
[169.12327576 62.43558121]
[156.51214600 70.55712128]
[143.90101624 78.67866516]
[131.28988647 86.80020905]
[118.67876434 94.92175293]
[121.62424469 109.62971497]
[136.39030457 112.26857758]
[151.15635681 114.90744019]
[165.92240906 117.54630280]
[175.76060486 105.75200653]
[190.18341064 100.47200775]
[205.31115723 103.12660980]
[217.07455444 113.00172424]
[222.30932617 127.44100952]
[219.60731506 142.56036377]
[209.69537354 154.29275513]
[195.23976135 159.48222351]
[180.12895203 156.73284912]
[168.42768860 146.78417969]
[163.28355408 132.31236267]
[148.51750183 129.67349243]
[133.75143433 127.03462982]
[118.98538208 124.39576721]
[130.67868042 133.79081726]
[142.37197876 143.18585205]
[156.80833435 147.25909424]
[169.85276794 154.66468811]
[180.74914551 164.97337341]
[188.86584473 177.58761597]
[193.73240662 191.77622986]
[195.06672668 206.71676636]
[192.79144287 221.54319763]
[187.03848267 235.39611816]
[178.14128113 247.47253418]
[166.61558533 257.07244873]
[153.12947083 263.63940430]
[138.46467590 266.79272461]
[123.47121429 266.34963989]
[109.01820374 262.33584595]
[95.94341278 254.98399353]
[85.00471497 244.72023010]
[76.83617401 232.13949585]
[71.91127014 217.97102356]
[70.51549530 203.03610229]
[72.72973633 188.20043945]
[78.42565155 174.32395935]
[87.27429199 162.20973206]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 33]
[2 32]
[3 31]
[4 30]
[5 29]
[6 23]
[7 22]
[8 21]
[9 20]
[10 19]
[11 18]
[45 62]
[46 61]
[47 60]
[48 59]
[91 108]
[92 107]
[93 106]
[94 105]
[95 104]
[96 103]
[109 126]
[110 125]
[111 124]
[112 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
