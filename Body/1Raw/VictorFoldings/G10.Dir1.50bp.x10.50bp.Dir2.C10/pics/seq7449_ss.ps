%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAUCCUAUAUAUCUUAAUGGCACAUGCAGCGCAAGUAGGUCUACAAGACGCUACUUCCCCUAxxxxxxxxxxUACCAAGGCCACCACACACCACCUGUCCAAAAAGGCCUUCGAUACGGGAUAAUCCUAUUUAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[125.72787476 405.02044678]
[125.72787476 390.02044678]
[125.72787476 375.02044678]
[125.72787476 360.02044678]
[125.72787476 345.02044678]
[125.72787476 330.02044678]
[125.72787476 315.02044678]
[125.72787476 300.02044678]
[125.72787476 285.02044678]
[125.72787476 270.02044678]
[123.90821838 255.13122559]
[119.21736145 249.36273193]
[120.37327576 240.24105835]
[117.05664062 225.61231995]
[113.73999786 210.98358154]
[102.93795013 207.10423279]
[95.29116821 198.38441467]
[92.80429840 186.93333435]
[96.21466064 175.59692383]
[104.77890778 167.25068665]
[102.05783081 152.49955750]
[99.33675385 137.74844360]
[96.61567688 122.99731445]
[85.32489014 119.33821106]
[76.87805939 110.28701019]
[73.75574493 97.77886963]
[77.21945190 84.83048248]
[86.87815857 74.81301117]
[76.00627136 64.47850800]
[65.13437653 54.14400101]
[50.87488556 64.02971649]
[34.82160187 70.59841919]
[17.73401451 73.54209137]
[0.41993910 72.72416687]
[-16.30265617 68.18583679]
[-31.64429665 60.14400482]
[-44.88127899 48.98090363]
[-55.38979721 35.22593307]
[-62.67535782 19.53056908]
[-66.39602661 2.63748908]
[-66.37850189 -14.65456200]
[-62.62615204 -31.52853966]
[-55.31877518 -47.18770218]
[-67.36405945 -56.12700653]
[-79.40933990 -65.06631470]
[-91.45462036 -74.00561523]
[-103.49990845 -82.94492340]
[-115.54518890 -91.88422394]
[-127.68044281 -100.70100403]
[-139.90441895 -109.39434814]
[-152.12840271 -118.08769989]
[-164.35238647 -126.78104401]
[-180.76440430 -131.03335571]
[-181.22155762 -147.98114014]
[-165.06265259 -153.11206055]
[-155.65904236 -139.00502014]
[-143.43505859 -130.31167603]
[-131.21107483 -121.61833191]
[-118.98709869 -112.92498779]
[-111.67043304 -111.60359192]
[-106.60588074 -103.92951202]
[-94.56060028 -94.99020386]
[-82.51531982 -86.05089569]
[-70.47003937 -77.11159515]
[-58.42475510 -68.17228699]
[-46.37947083 -59.23298645]
[-37.05119705 -68.07022858]
[-26.41847992 -75.29075623]
[-14.75860023 -80.70510101]
[-2.37581658 -84.17091370]
[10.40657711 -85.59670258]
[23.25469017 -84.94424438]
[35.83275986 -82.22962189]
[47.81192780 -77.52282715]
[58.87882614 -70.94594574]
[68.74378967 -62.66998291]
[77.14842987 -52.91045761]
[83.87240601 -41.92174149]
[88.73919678 -29.99045753]
[91.62074280 -17.42800331]
[92.44081116 -4.56240940]
[91.17699432 8.27021503]
[87.86136627 20.73446655]
[82.57962036 32.50440979]
[75.46887970 43.27210999]
[86.34077454 53.60661316]
[97.21266174 63.94111633]
[112.08267975 65.91156769]
[125.27097321 58.76532364]
[138.45927429 51.61907578]
[151.64756775 44.47282791]
[164.83586121 37.32658386]
[163.68013000 20.24420929]
[170.05943298 4.41499996]
[182.65547180 -7.01834011]
[198.92092896 -11.80843639]
[215.59446716 -9.04488468]
[229.35470581 0.67315829]
[242.24255371 -7.00168085]
[255.13041687 -14.67651939]
[260.45080566 -29.81167603]
[275.64794922 -34.95235443]
[289.06387329 -26.15506935]
[290.40704346 -10.16834259]
[278.64709473 0.74417651]
[262.80523682 -1.78866303]
[249.91738892 5.88617611]
[237.02954102 13.56101513]
[239.23049927 26.42663193]
[236.90484619 39.30284882]
[230.31010437 50.64102554]
[220.21853638 59.06993484]
[207.82681274 63.56158829]
[194.61410522 63.55657959]
[182.16557312 59.03365326]
[171.98211670 50.51488113]
[158.79380798 57.66112518]
[145.60551453 64.80737305]
[132.41722107 71.95362091]
[119.22892761 79.09986115]
[126.16011810 94.74983978]
[122.68152618 110.42681885]
[111.36680603 120.27623749]
[114.08788300 135.02735901]
[116.80895996 149.77848816]
[119.53003693 164.52961731]
[135.51432800 174.61308289]
[139.05247498 192.85437012]
[128.36872864 207.66694641]
[131.68537903 222.29568481]
[135.00201416 236.92440796]
[138.46673584 251.51878357]
[143.94847107 237.55632019]
[154.86537170 227.26936340]
[169.12863159 222.62617493]
[184.00921631 224.51515198]
[196.65994263 232.57487488]
[204.66029358 245.26322937]
[206.47952271 260.15249634]
[201.76954651 274.39385986]
[191.43154907 285.26242065]
[177.44355774 290.67868042]
[162.48193359 289.60629272]
[149.40937805 282.25048828]
[140.72787476 270.02044678]
[140.72787476 285.02044678]
[140.72787476 300.02044678]
[140.72787476 315.02044678]
[140.72787476 330.02044678]
[140.72787476 345.02044678]
[140.72787476 360.02044678]
[140.72787476 375.02044678]
[140.72787476 390.02044678]
[140.72787476 405.02044678]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[11 132]
[13 131]
[14 130]
[15 129]
[20 126]
[21 125]
[22 124]
[23 123]
[28 87]
[29 86]
[30 85]
[43 66]
[44 65]
[45 64]
[46 63]
[47 62]
[48 61]
[49 59]
[50 58]
[51 57]
[52 56]
[88 120]
[89 119]
[90 118]
[91 117]
[92 116]
[98 108]
[99 107]
[100 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
