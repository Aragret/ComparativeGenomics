%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCAAUCCUCUGAUCAGGGUGAGCAUCAAACUCAAACUACGCCCUGAUCGGCGCACUGCGAGCxxxxxxxxxxCGUCUAAACCAAACCACUUUCACCGCUACACGACCGGGGGUAUACUACGGUCAAUGCUCUGACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 255.33895874]
[92.50000000 240.33895874]
[92.50000000 225.33895874]
[92.50000000 210.33895874]
[92.50000000 195.33895874]
[92.50000000 180.33895874]
[92.50000000 165.33895874]
[92.50000000 150.33895874]
[92.50000000 135.33895874]
[92.50000000 120.33895874]
[85.30861664 133.50270081]
[80.33569336 147.65437317]
[67.58760834 155.55920410]
[52.70050430 153.72230530]
[42.25624084 142.95581055]
[40.87240982 128.01979065]
[49.16082764 115.51770020]
[63.45751953 110.97696686]
[76.83377838 104.18905640]
[61.84070969 103.73308563]
[46.84764099 103.27712250]
[31.85457230 102.82115173]
[16.86150360 102.36518860]
[1.86843586 101.90921783]
[-13.12463284 101.45325470]
[-28.11770058 100.99728394]
[-43.11076736 100.54131317]
[-58.10383606 100.08535004]
[-73.09151459 100.69322968]
[-87.99841309 102.36190796]
[-102.90530396 104.03058624]
[-117.81220245 105.69926453]
[-126.31758118 118.82147980]
[-141.28295898 123.35707855]
[-155.64212036 117.16448212]
[-162.61514282 103.16765594]
[-158.90954590 87.97547150]
[-146.27500916 78.76120758]
[-130.67718506 79.87555695]
[-119.48087311 90.79236603]
[-104.57398224 89.12369537]
[-89.66708374 87.45501709]
[-74.76019287 85.78633881]
[-86.25791168 76.15293884]
[-89.04122162 61.41342545]
[-81.84819031 48.25058746]
[-67.94007874 42.63235092]
[-53.62272644 47.10598755]
[-45.38750839 59.64317703]
[-46.96820450 74.55965424]
[-57.64786911 85.09227753]
[-42.65480042 85.54824829]
[-27.66173363 86.00421906]
[-12.66866493 86.46018219]
[2.32440329 86.91615295]
[17.31747055 87.37211609]
[32.31053925 87.82808685]
[47.30360794 88.28404999]
[62.29667664 88.74002075]
[77.28974152 89.19599152]
[89.93834686 81.13293457]
[95.85368347 67.34856415]
[86.77938843 55.03579330]
[85.09757996 39.93386078]
[91.16041565 26.10966301]
[103.24792480 17.23565483]
[118.05458069 15.61435890]
[123.96991730 1.82999122]
[129.88525391 -11.95437622]
[117.49276733 -20.48772430]
[107.00662994 -31.27143669]
[98.82852936 -43.88974380]
[93.27120972 -57.85666656]
[90.54650879 -72.63470459]
[90.75730896 -87.65554810]
[93.89363861 -102.34191895]
[99.83312225 -116.12975311]
[108.34577179 -128.48986816]
[119.10285950 -138.94830322]
[131.68965149 -147.10443115]
[145.62136841 -152.64634705]
[160.36189270 -155.36279297]
[175.34431458 -155.15122986]
[189.99285889 -152.02165222]
[195.90818787 -165.80601501]
[193.43754578 -182.01799011]
[206.40951538 -192.05094910]
[221.47962952 -185.58384705]
[223.14506531 -169.26948547]
[209.69256592 -159.89067078]
[203.77722168 -146.10630798]
[216.13787842 -137.64532471]
[226.61363220 -126.93193817]
[234.80047607 -114.37657166]
[240.38223267 -100.46076202]
[243.14262390 -85.71865082]
[242.97370911 -70.71647644]
[239.88011169 -56.03085709]
[233.97889709 -42.22660065]
[225.49514771 -29.83498764]
[214.75338745 -19.33333397]
[202.16514587 -11.12659740]
[188.21321106 -5.53176022]
[173.43310547 -2.76559114]
[158.39254761 -2.93624592]
[143.66961670 -6.03903818]
[137.75428772 7.74532890]
[131.83894348 21.52969551]
[140.86514282 33.37847137]
[142.76121521 48.25331116]
[136.91862488 62.17202377]
[124.81414795 71.35779572]
[109.63805389 73.26390076]
[103.72271729 87.04827118]
[118.01552582 81.48046875]
[136.40576172 88.43955994]
[150.67161560 93.07481384]
[164.93745422 97.71006775]
[180.45315552 94.61594391]
[190.16656494 105.90749359]
[204.43240356 110.54275513]
[219.32212830 104.56982422]
[233.20385742 112.61201477]
[235.42874146 128.50004578]
[224.29002380 140.04597473]
[208.33238220 138.39276123]
[199.79714966 124.80860138]
[185.53131104 120.17334747]
[171.03599548 123.59901428]
[160.30220032 111.97591400]
[146.03636169 107.34066010]
[131.77050781 102.70540619]
[125.70288086 107.11379242]
[136.00007629 118.02102661]
[146.29728699 128.92825317]
[156.59448242 139.83547974]
[168.01301575 149.56262207]
[167.43365479 164.55142212]
[155.29835510 173.36813354]
[140.86416626 169.28718567]
[135.14176941 155.42178345]
[127.95039368 142.25805664]
[120.75901031 129.09431458]
[113.56762695 115.93057251]
[107.50000000 120.33895874]
[107.50000000 135.33895874]
[107.50000000 150.33895874]
[107.50000000 165.33895874]
[107.50000000 180.33895874]
[107.50000000 195.33895874]
[107.50000000 210.33895874]
[107.50000000 225.33895874]
[107.50000000 240.33895874]
[107.50000000 255.33895874]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[19 60]
[20 59]
[21 58]
[22 57]
[23 56]
[24 55]
[25 54]
[26 53]
[27 52]
[28 51]
[29 43]
[30 42]
[31 41]
[32 40]
[61 114]
[62 113]
[67 108]
[68 107]
[69 106]
[84 91]
[85 90]
[116 132]
[117 131]
[118 130]
[120 128]
[121 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
