%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCCCAGAAAACUACGAUAGCCCUUAUGAAACUUAAGGGUCGAAGGUGGAUUUAGCAGUAxxxxxxxxxxGCUAACAAUCAAUACUAAACCCCCAUAAAUAGGAGAAGGCUUAGAAGAAAACCCCACAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[94.22888947 255.94168091]
[94.22888947 240.94168091]
[94.22888947 225.94168091]
[94.22888947 210.94168091]
[94.22888947 195.94168091]
[94.22888947 180.94168091]
[94.22888947 165.94168091]
[94.22888947 150.94168091]
[94.22888947 135.94168091]
[94.22888947 120.94167328]
[82.82786560 111.19402313]
[68.01010895 113.52512360]
[53.19235229 115.85623169]
[45.87342072 129.51925659]
[32.07742691 136.03833008]
[17.34788322 133.11131287]
[6.46905756 143.43852234]
[2.33553815 159.30818176]
[-13.54445362 163.40180969]
[-24.83494377 151.50825500]
[-19.92124367 135.86256409]
[-3.85814762 132.55969238]
[7.02067757 122.23249054]
[6.33089495 120.60665894]
[5.76372385 118.93410492]
[-9.22897243 118.46605682]
[-24.22166824 117.99801636]
[-28.93175697 120.53468323]
[-33.66450882 120.92639160]
[-37.58422852 119.53446198]
[-40.12672043 117.00399780]
[-55.06102753 115.60169983]
[-69.99533844 114.19939423]
[-84.92964172 112.79708862]
[-99.86395264 111.39478302]
[-114.79825592 109.99248505]
[-125.79790497 121.10742188]
[-141.37335205 122.50003815]
[-154.17036438 113.51278687]
[-158.14656067 98.38916779]
[-151.42453003 84.27009583]
[-137.17819214 77.82215881]
[-122.13423157 82.08988190]
[-113.39595795 95.05817413]
[-98.46164703 96.46047974]
[-83.52734375 97.86278534]
[-68.59303284 99.26508331]
[-53.65872574 100.66738892]
[-38.72441864 102.06969452]
[-23.75362587 103.00532532]
[-8.76093006 103.47336578]
[6.23176575 103.94140625]
[18.19618607 90.31369019]
[36.57146072 88.95002747]
[50.86124802 101.03847504]
[65.67900848 98.70736694]
[80.49676514 96.37626648]
[78.17094421 84.44481659]
[83.32956696 70.62964630]
[82.70558929 55.64263153]
[82.08161163 40.65561295]
[81.45763397 25.66859818]
[80.52200317 10.69780636]
[79.27513123 -4.25028086]
[78.02825165 -19.19836807]
[76.78137970 -34.14645386]
[62.29198074 -38.74273300]
[50.66766357 -48.53781509]
[43.68104553 -62.03802490]
[42.39754486 -77.18467712]
[47.01287842 -91.66801453]
[56.82324219 -103.27944183]
[70.33263397 -110.24829102]
[85.48095703 -111.51186371]
[99.95821381 -106.87748718]
[111.55672455 -97.05185699]
[118.50779724 -83.53330994]
[119.75144196 -68.38333130]
[115.09802246 -53.91218567]
[105.25714111 -42.32661438]
[91.72946930 -35.39332962]
[92.97634125 -20.44524193]
[94.22321320 -5.49715567]
[95.47009277 9.45093155]
[98.52268982 13.20021915]
[99.20934296 18.92383766]
[96.44464874 25.04462051]
[97.06862640 40.03163528]
[97.69260406 55.01865387]
[98.31658173 70.00566864]
[104.11724854 74.75984955]
[113.62578583 63.15865326]
[125.22683716 72.66737366]
[115.71858978 84.26820374]
[121.51926422 89.02238464]
[136.33702087 86.69128418]
[151.15478516 84.36017609]
[165.97253418 82.02907562]
[178.40261841 72.24113464]
[192.17768860 77.90652466]
[206.99543762 75.57542419]
[209.87890625 60.69384003]
[217.68092346 47.69752121]
[229.45938110 38.15584183]
[243.79197693 33.22099686]
[258.94796753 33.48889923]
[273.09719849 38.92719650]
[284.53106689 48.87918854]
[291.86892700 62.14312363]
[294.22463989 77.11731720]
[291.31375122 91.99356079]
[283.48779297 104.97547150]
[271.69177246 114.49542999]
[257.35009766 119.40385437]
[242.19464111 119.10802460]
[228.05545044 113.64366150]
[216.63992310 103.67061615]
[209.32655334 90.39318085]
[194.50878906 92.72428131]
[183.13858032 102.34548950]
[168.30363464 96.84683228]
[153.48588562 99.17793274]
[138.66812134 101.50904083]
[123.85036469 103.84014130]
[137.97175598 108.89842224]
[152.09315491 113.95669556]
[167.06120300 112.97811890]
[181.27456665 117.77188873]
[192.59243774 127.61595917]
[199.31011963 141.02763367]
[200.41578674 155.98681641]
[195.74291992 170.24038696]
[185.99531555 181.64146423]
[172.64118958 188.47280884]
[157.69192505 189.70549011]
[143.39918518 185.15383911]
[131.91574097 175.50343323]
[124.97121429 162.20780945]
[123.61165619 147.26914978]
[116.42027283 134.10540771]
[109.22888947 120.94167328]
[109.22888947 135.94168091]
[109.22888947 150.94168091]
[109.22888947 165.94168091]
[109.22888947 180.94168091]
[109.22888947 195.94168091]
[109.22888947 210.94168091]
[109.22888947 225.94168091]
[109.22888947 240.94168091]
[109.22888947 255.94168091]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 57]
[12 56]
[13 55]
[16 23]
[17 22]
[25 52]
[26 51]
[27 50]
[31 49]
[32 48]
[33 47]
[34 46]
[35 45]
[36 44]
[59 90]
[60 89]
[61 88]
[62 87]
[63 84]
[64 83]
[65 82]
[66 81]
[95 124]
[96 123]
[97 122]
[98 121]
[100 119]
[101 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
