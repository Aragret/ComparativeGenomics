%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGAAUAAUAGCAGUUCUACCGUACAACCCUAACAUAACCAUUCUUAAUUUAACUAUUUAUAUxxxxxxxxxxUAAAUAAAUUAAAAAAACUAUUAAACCCAUAUAACCUCCCCCAAAAUUCAGAAUAAUAACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[168.30546570 373.68246460]
[168.30546570 358.68246460]
[168.30546570 343.68246460]
[168.30546570 328.68246460]
[168.30546570 313.68246460]
[168.30546570 298.68246460]
[168.30546570 283.68246460]
[168.30546570 268.68246460]
[168.30546570 253.68246460]
[168.30546570 238.68246460]
[166.46214294 223.79615784]
[162.80343628 209.24920654]
[159.14472961 194.70225525]
[155.48602295 180.15530396]
[148.52566528 166.86796570]
[138.64996338 155.57768250]
[128.77424622 144.28739929]
[118.89854431 132.99711609]
[109.02283478 121.70684052]
[97.62049103 123.38667297]
[86.79014587 119.44474792]
[79.13521576 110.82863617]
[64.31273651 113.12950897]
[49.49025345 115.43038177]
[47.52178192 130.40708923]
[41.41236115 144.22200012]
[31.65724945 155.75518799]
[19.04725456 164.07171631]
[4.60461044 168.49740601]
[-10.49988174 168.67349243]
[-25.04176903 164.58567810]
[-37.84220505 156.56535339]
[-47.86351395 145.26269531]
[-54.29331970 131.59396362]
[-56.61037827 116.66721344]
[-54.62686157 101.69248962]
[-48.50356293 87.88372803]
[-38.73687363 76.36034393]
[-26.11852837 68.05648804]
[-11.67144680 63.64530563]
[3.43321443 63.48440552]
[17.97098732 67.58682251]
[30.76335907 75.62000275]
[40.77331161 86.93271637]
[47.18938065 100.60790253]
[62.01185989 98.30702972]
[76.83434296 96.00615692]
[79.23773956 88.97607422]
[83.71504211 83.04716492]
[89.81903076 78.81164551]
[87.97570801 63.92533875]
[76.53772736 49.53078079]
[83.92886353 33.64318466]
[81.78028870 18.79786110]
[79.63170624 3.95253801]
[77.48312378 -10.89278507]
[75.33454895 -25.73810768]
[73.18596649 -40.58343124]
[71.03739166 -55.42875290]
[68.13026428 -58.84170914]
[66.64923096 -62.62722015]
[66.53246307 -66.27867126]
[67.55606842 -69.36436462]
[69.37387085 -71.57493591]
[68.45045471 -86.54648590]
[67.52704620 -101.51803589]
[66.60363007 -116.48958588]
[65.68021393 -131.46113586]
[51.39827347 -136.74752808]
[40.50577927 -147.39053345]
[34.88992310 -161.54617310]
[35.52368546 -176.76190186]
[42.29726791 -190.40148926]
[54.03709793 -200.10180664]
[68.70918274 -204.18222046]
[83.77149963 -201.93576050]
[96.61440277 -193.75166321]
[105.01278687 -181.04783630]
[107.51158142 -166.02532959]
[103.67785645 -151.28684998]
[94.17581940 -139.38597107]
[80.65176392 -132.38455200]
[81.57518005 -117.41300201]
[82.49859619 -102.44145203]
[83.42200470 -87.46990204]
[84.34542084 -72.49835205]
[85.88271332 -57.57733154]
[88.03128815 -42.73200989]
[90.17987061 -27.88668633]
[92.32845306 -13.04136372]
[94.47702789 1.80395901]
[96.62561035 16.64928246]
[98.77418518 31.49460411]
[108.29739380 39.01595306]
[110.17841339 51.41083527]
[102.86201477 62.08201218]
[104.70533752 76.96832275]
[121.45541382 90.39459991]
[120.31311798 111.83113098]
[130.18882751 123.12141418]
[140.06452942 134.41169739]
[149.94023132 145.70198059]
[159.81594849 156.99224854]
[157.16560364 142.22825623]
[158.20046997 127.26399231]
[162.85787964 113.00536346]
[170.85589600 100.31553650]
[181.71034241 89.96270752]
[194.76412964 82.57360840]
[209.22700500 78.59554291]
[224.22346497 78.26934814]
[238.84564209 81.61474609]
[252.20838928 88.42923737]
[263.50274658 98.30029297]
[272.04498291 110.63033295]
[277.31799316 124.67295837]
[279.00256348 139.57806396]
[276.99673462 154.44334412]
[271.42190552 168.36891174]
[262.61557007 180.51174927]
[251.11082458 190.13676453]
[237.60415649 196.66130066]
[222.91317749 199.69038391]
[207.92726135 199.04063416]
[193.55358887 194.75138855]
[180.66230774 187.08230591]
[170.03297424 176.49659729]
[173.69168091 191.04354858]
[177.35038757 205.59049988]
[181.00909424 220.13745117]
[186.47694397 206.16954041]
[197.38250732 195.87057495]
[211.64015198 191.21014404]
[226.52320862 193.07954407]
[239.18539429 201.12124634]
[247.20516968 213.79733276]
[249.04878235 228.68360901]
[244.36367798 242.93316650]
[234.04585266 253.82087708]
[220.06849670 259.26455688]
[205.10469055 258.22311401]
[192.01615906 250.89573669]
[183.30546570 238.68246460]
[183.30546570 253.68246460]
[183.30546570 268.68246460]
[183.30546570 283.68246460]
[183.30546570 298.68246460]
[183.30546570 313.68246460]
[183.30546570 328.68246460]
[183.30546570 343.68246460]
[183.30546570 358.68246460]
[183.30546570 373.68246460]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 130]
[12 129]
[13 128]
[14 127]
[15 103]
[16 102]
[17 101]
[18 100]
[19 99]
[22 47]
[23 46]
[24 45]
[50 97]
[51 96]
[53 93]
[54 92]
[55 91]
[56 90]
[57 89]
[58 88]
[59 87]
[64 86]
[65 85]
[66 84]
[67 83]
[68 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
