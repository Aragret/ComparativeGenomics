%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCCCCUCCCCCGCUUCUGGCCACAGCACUUAAACACAUCUCUGCCAAACCCCAAAAACAAxxxxxxxxxxCCAGACCUCCUAGGCGACCCAGACAAUUAUACCCUAGCCAACCCCUUAAACACCCCUCCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[10.72926426 291.24685669]
[3.90568876 304.60494995]
[-2.91788650 317.96304321]
[-9.74146175 331.32116699]
[-16.56503677 344.67926025]
[-23.25111198 358.10671997]
[-29.79898262 371.60208130]
[-36.34685516 385.09747314]
[-42.89472580 398.59286499]
[-44.36905289 415.48257446]
[-61.00685120 418.74142456]
[-68.74412537 403.65594482]
[-56.39011002 392.04498291]
[-49.84223938 378.54959106]
[-43.29436874 365.05422974]
[-36.74649811 351.55883789]
[-36.65565872 344.12216187]
[-29.92313576 337.85568237]
[-23.09956169 324.49758911]
[-16.27598572 311.13949585]
[-9.45241070 297.78137207]
[-2.62883520 284.42327881]
[-29.04448700 267.00942993]
[-52.56018448 245.84243774]
[-72.64747620 221.39799500]
[-88.85494232 194.22544861]
[-100.81836700 164.93542480]
[-115.24575043 169.04037476]
[-129.67314148 173.14530945]
[-140.69447327 185.28871155]
[-156.66215515 181.55168152]
[-161.14999390 165.77856445]
[-149.54129028 154.19538879]
[-133.77807617 158.71792603]
[-119.35069275 154.61297607]
[-104.92330933 150.50804138]
[-107.31970215 139.53688049]
[-109.12916565 128.45379639]
[-110.34655762 117.29016113]
[-110.96845245 106.07757568]
[-110.99308014 94.84777832]
[-110.42037201 83.63257599]
[-109.25194550 72.46370697]
[-107.49111938 61.37279129]
[-105.14286804 50.39123154]
[-102.21384430 39.55012131]
[-98.71233368 28.88014793]
[-94.64826202 18.41152000]
[-90.03312683 8.17387390]
[-84.87998962 -1.80380583]
[-79.20344543 -11.49327183]
[-73.01956940 -20.86709404]
[-66.34586334 -29.89873123]
[-59.20121384 -38.56261826]
[-51.60585785 -46.83422470]
[-43.58129883 -54.69013214]
[-35.15024567 -62.10810089]
[-26.33657646 -69.06713104]
[-17.16523933 -75.54752350]
[-7.66219950 -81.53092194]
[2.14563966 -87.00039673]
[12.23051071 -91.94046783]
[22.56386375 -96.33713531]
[33.11644363 -100.17796326]
[43.85837555 -103.45206451]
[54.75925064 -106.15018463]
[65.78820038 -108.26468658]
[76.91400909 -109.78956604]
[88.10517883 -110.72052002]
[99.33001709 -111.05491638]
[110.55675507 -110.79179382]
[121.75360870 -109.93190765]
[132.88887024 -108.47769165]
[143.93103027 -106.43325806]
[154.84881592 -103.80439758]
[165.61131287 -100.59855652]
[176.18806458 -96.82480621]
[186.54911804 -92.49382782]
[196.66516113 -87.61788940]
[206.50752258 -82.21079254]
[216.04835510 -76.28784180]
[225.26065063 -69.86581421]
[234.11833191 -62.96287918]
[242.59629822 -55.59858704]
[250.67057800 -47.79378510]
[258.31829834 -39.57056808]
[265.51779175 -30.95221519]
[272.24871826 -21.96312904]
[278.49197388 -12.62875748]
[284.22991943 -2.97552609]
[289.44631958 6.96923637]
[303.13693237 0.84006238]
[316.82754517 -5.28911161]
[330.51818848 -11.41828537]
[344.20880127 -17.54745865]
[342.57846069 -32.58731461]
[345.67749023 -47.39445114]
[353.20223999 -60.51821518]
[364.41552734 -70.67288208]
[378.21881104 -76.86358643]
[393.25976562 -78.48384094]
[408.06481934 -75.37490845]
[421.18353271 -67.84136200]
[431.33068848 -56.62126160]
[437.51214600 -42.81384659]
[439.12231445 -27.77182198]
[436.00344849 -12.96885204]
[428.46112061 0.14481848]
[417.23422241 10.28444576]
[403.42266846 16.45665169]
[388.37957764 18.05674934]
[373.57870483 14.92797279]
[360.47009277 7.37685156]
[350.33798218 -3.85683370]
[336.64736938 2.27234006]
[322.95672607 8.40151405]
[309.26611328 14.53068829]
[295.57546997 20.65986252]
[300.41342163 33.82533646]
[304.36621094 47.28307343]
[307.41641235 60.97364426]
[309.55053711 74.83657837]
[310.75915527 88.81064606]
[311.03695679 102.83412933]
[310.38265991 116.84510040]
[308.79922485 130.78167725]
[306.29357910 144.58229065]
[302.87683105 158.18601990]
[298.56408691 171.53276062]
[293.37432861 184.56355286]
[287.33053589 197.22088623]
[280.45935059 209.44882202]
[272.79116821 221.19337463]
[264.35986328 232.40264893]
[255.20262146 243.02717590]
[245.35992432 253.02000427]
[234.87521362 262.33700562]
[223.79483032 270.93701172]
[212.16769409 278.78207397]
[200.04515076 285.83755493]
[187.48075867 292.07223511]
[174.52999878 297.45861816]
[161.25007629 301.97290039]
[147.69963074 305.59515381]
[133.93850708 308.30938721]
[120.02749634 310.10360718]
[106.02803802 310.96987915]
[92.00195312 310.90438843]
[78.01119232 309.90740967]
[64.11754608 307.98333740]
[50.38237381 305.14071655]
[36.86634827 301.39205933]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 22]
[2 21]
[3 20]
[4 19]
[5 18]
[6 16]
[7 15]
[8 14]
[9 13]
[27 36]
[28 35]
[29 34]
[91 118]
[92 117]
[93 116]
[94 115]
[95 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
