%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUUUAACUGUUAGUCCAAAGAGGAACAGCUCUUUGGACACUAGGAAAAAACCUUGUAGAGAxxxxxxxxxxAUUAUUAGCAUCAUCCCUCUACUAUUUUUUAACCAAAUCAACAACAACCUAUUUAGCUGUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[124.24489594 306.66378784]
[124.24489594 291.66378784]
[124.24489594 276.66378784]
[124.24489594 261.66378784]
[124.24489594 246.66377258]
[124.24489594 231.66377258]
[124.24489594 216.66377258]
[124.24489594 201.66377258]
[124.24489594 186.66377258]
[124.24489594 171.66377258]
[120.73572540 157.08003235]
[113.91214752 143.72192383]
[107.08857727 130.36383057]
[100.26499939 117.00572968]
[98.21858215 131.86547852]
[84.91947937 138.80332947]
[71.56136322 131.97979736]
[69.38758087 117.13813782]
[80.22785187 106.77037048]
[65.40537262 109.07124329]
[59.94260025 112.97005463]
[54.19858170 113.41065216]
[49.92829132 111.14926910]
[35.02384567 112.83966064]
[20.11939812 114.53005981]
[5.21495008 116.22045898]
[-9.68949699 117.91085815]
[-24.59394455 119.60125732]
[-39.49839401 121.29164886]
[-54.40283966 122.98204803]
[-69.30728912 124.67244720]
[-84.21173859 126.36284637]
[-93.85917664 138.88092041]
[-109.54308319 140.82789612]
[-121.95846558 131.04862976]
[-123.73950195 115.34502411]
[-113.82953644 103.03372955]
[-98.10797119 101.41881561]
[-85.90213013 111.45839691]
[-70.99768829 109.76799774]
[-56.09323883 108.07759857]
[-41.18878937 106.38720703]
[-26.28434181 104.69680786]
[-11.37989521 103.00640869]
[3.52455282 101.31600952]
[18.42900085 99.62561035]
[33.33344650 97.93521881]
[48.23789597 96.24481964]
[63.10449219 94.24876404]
[77.92697906 91.94788361]
[85.47125244 88.01709747]
[92.69950104 87.85568237]
[98.09835815 90.68543243]
[102.64564514 76.39130402]
[106.89849091 62.00682068]
[110.85510254 47.53805542]
[114.81171417 33.06928635]
[118.76832581 18.60051918]
[122.72493744 4.13175106]
[126.68154907 -10.33701611]
[125.35521698 -16.91603279]
[127.30015564 -22.33867836]
[131.10902405 -25.31217766]
[127.91938782 -40.80852509]
[139.15089417 -50.59129333]
[143.69818115 -64.88542175]
[148.24546814 -79.17955017]
[152.79277039 -93.47368622]
[157.34005737 -107.76781464]
[161.88734436 -122.06194305]
[148.84963989 -129.60067749]
[137.73767090 -139.76620483]
[129.07115173 -152.08308411]
[123.25542450 -165.97521973]
[120.56251526 -180.79286194]
[121.11837006 -195.84294128]
[124.89698792 -210.42155457]
[131.72164917 -223.84684753]
[141.27313232 -235.49085999]
[153.10470581 -244.80900574]
[166.66299438 -251.36544800]
[181.31384277 -254.85354614]
[196.37199402 -255.11013794]
[211.13317871 -252.12321472]
[224.90696716 -246.03250122]
[237.04914856 -237.12286377]
[246.99179077 -225.81101990]
[254.26988220 -212.62605286]
[258.54299927 -198.18463135]
[259.61126709 -183.16221619]
[257.42477417 -168.26144409]
[252.08572388 -154.17922974]
[243.84385681 -141.57423401]
[233.08467102 -131.03602600]
[220.31138611 -123.05747986]
[206.12142944 -118.01177216]
[191.17848206 -116.13490295]
[176.18147278 -117.51465607]
[171.63418579 -103.22052002]
[167.08689880 -88.92639160]
[162.53961182 -74.63226318]
[157.99230957 -60.33813477]
[153.44502258 -46.04400253]
[156.95991516 -31.57006836]
[145.40315247 -20.76488686]
[141.15031433 -6.38040590]
[137.19369507 8.08836174]
[133.23709106 22.55712891]
[129.28048706 37.02589798]
[125.32387543 51.49466324]
[121.36726379 65.96343231]
[122.94686127 70.53005981]
[121.63039398 76.13851929]
[116.93977356 80.93859100]
[112.39248657 95.23271942]
[113.62310028 110.18215942]
[120.44667816 123.54025269]
[127.27024841 136.89836121]
[134.09382629 150.25645447]
[135.12467957 135.29191589]
[139.77827454 121.03204346]
[147.77290344 108.34007263]
[158.62457275 97.98434448]
[171.67637634 90.59175110]
[186.13819885 86.60981750]
[201.13456726 86.27960968]
[215.75764465 89.62110138]
[229.12219238 96.43201447]
[240.41918945 106.30004120]
[248.96473694 118.62779999]
[254.24151611 132.66900635]
[255.93008423 147.57366943]
[253.92822266 162.43948364]
[248.35711670 176.36653137]
[239.55403137 188.51173401]
[228.05186462 198.13983154]
[214.54692078 204.66796875]
[199.85676575 207.70098877]
[184.87066650 207.05525208]
[170.49584961 202.76985168]
[157.60252380 195.10421753]
[146.97119141 184.52241516]
[139.24488831 171.66377258]
[139.24488831 186.66377258]
[139.24488831 201.66377258]
[139.24488831 216.66377258]
[139.24488831 231.66377258]
[139.24488831 246.66377258]
[139.24488831 261.66378784]
[139.24488831 276.66378784]
[139.24488831 291.66378784]
[139.24488831 306.66378784]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 119]
[12 118]
[13 117]
[14 116]
[19 50]
[20 49]
[23 48]
[24 47]
[25 46]
[26 45]
[27 44]
[28 43]
[29 42]
[30 41]
[31 40]
[32 39]
[53 115]
[54 114]
[55 111]
[56 110]
[57 109]
[58 108]
[59 107]
[60 106]
[63 105]
[65 103]
[66 102]
[67 101]
[68 100]
[69 99]
[70 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
