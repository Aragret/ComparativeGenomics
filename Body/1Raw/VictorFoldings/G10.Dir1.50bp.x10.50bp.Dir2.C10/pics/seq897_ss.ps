%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUCACCCCAUAAACAAAUAGGUUUGGUCCUAGCCUUUCUAUUAGCUCUUAGUAAGAUUAxxxxxxxxxxUCCAACUCAUGAGACCCACAACAAAUAGCCCUUCUAAACGCUAAUCCAAGCCUCACCCCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[120.34410858 262.14523315]
[120.34410858 247.14523315]
[120.34410858 232.14523315]
[120.34410858 217.14523315]
[120.34410858 202.14523315]
[120.34410858 187.14523315]
[120.34410858 172.14523315]
[120.34410858 157.14523315]
[120.34410858 142.14523315]
[120.34410858 127.14522552]
[113.75981903 123.55397034]
[106.57708740 136.72244263]
[93.40874481 129.53948975]
[100.59123230 116.37146759]
[94.00694275 112.78021240]
[81.39581299 120.90175629]
[68.78468323 129.02330017]
[71.15132141 144.06719971]
[67.18817139 158.77139282]
[57.58188629 170.58828735]
[43.99680328 177.47055054]
[28.78662300 178.22576904]
[14.58660412 172.72309875]
[3.85698271 161.91592407]
[-1.54326868 147.67663574]
[-0.67852378 132.47229004]
[6.30139494 118.93712616]
[18.18717384 109.41619873]
[32.91953278 105.55905151]
[47.94599533 108.03397369]
[60.66314316 116.41217041]
[73.27426910 108.29062653]
[85.88539886 100.16908264]
[94.65160370 87.99724579]
[98.35776520 73.46231079]
[102.06392670 58.92737198]
[105.77008820 44.39243698]
[94.47274780 54.26006699]
[80.17234802 58.78759384]
[65.25451660 57.21973038]
[52.20787430 49.81802750]
[43.20890427 37.81725311]
[39.75883484 23.21941185]
[42.43320847 8.45974636]
[50.78588867 -3.99949789]
[63.42345428 -12.07983971]
[78.23767853 -14.43329716]
[92.75721741 -10.66726112]
[104.55988312 -1.40998936]
[111.67672729 11.79419613]
[112.92067719 26.74113274]
[120.37558746 13.72482204]
[127.83049774 0.70851302]
[135.28540039 -12.30779648]
[142.74031067 -25.32410622]
[150.19522095 -38.34041595]
[146.27453613 -53.41575623]
[154.02029419 -66.50994873]
[168.41648865 -70.15482330]
[175.87139893 -83.17113495]
[183.32630920 -96.18744659]
[190.78121948 -109.20375824]
[192.34866333 -118.26989746]
[198.52903748 -122.41098785]
[206.25311279 -135.26939392]
[213.97720337 -148.12779236]
[202.27082825 -157.54450989]
[191.95578003 -168.46759033]
[183.22422791 -180.69352722]
[176.23883057 -193.99458313]
[171.12973022 -208.12295532]
[167.99208069 -222.81542969]
[166.88435364 -237.79830933]
[167.82719421 -252.79246521]
[170.80302429 -267.51858521]
[175.75640869 -281.70230103]
[182.59506226 -295.07937622]
[191.19158936 -307.40063477]
[201.38584900 -318.43652344]
[212.98793030 -327.98144531]
[225.78167725 -335.85760498]
[239.52876282 -341.91824341]
[253.97308350 -346.05047607]
[268.84555054 -348.17730713]
[283.86911011 -348.25912476]
[298.76385498 -346.29440308]
[313.25231934 -342.31976318]
[327.06460571 -336.40921021]
[339.94338989 -328.67288208]
[351.64874268 -319.25491333]
[361.96261597 -308.33071899]
[370.69284058 -296.10382080]
[377.67678833 -282.80200195]
[382.78439331 -268.67309570]
[385.92044067 -253.98027039]
[387.02655029 -238.99728394]
[386.08209229 -224.00321960]
[383.10464478 -209.27743530]
[378.14974976 -195.09425354]
[371.30963135 -181.71791077]
[362.71176147 -169.39758301]
[352.51632690 -158.36279297]
[340.91320801 -148.81912231]
[328.11859131 -140.94436646]
[314.37084961 -134.88520813]
[299.92608643 -130.75454712]
[285.05340576 -128.62931824]
[270.02984619 -128.54911804]
[255.13529968 -130.51544189]
[240.64724731 -134.49166870]
[226.83560181 -140.40370178]
[219.11152649 -127.54530334]
[211.38743591 -114.68689728]
[203.79753113 -101.74884796]
[196.34262085 -88.73253632]
[188.88771057 -75.71622467]
[181.43280029 -62.69991684]
[185.57333374 -48.43837738]
[178.19842529 -35.13179016]
[163.21153259 -30.88550568]
[155.75662231 -17.86919594]
[148.30171204 -4.85288620]
[140.84680176 8.16342354]
[133.39189148 21.17973328]
[125.93698120 34.19604111]
[120.30502319 48.09859848]
[116.59886932 62.63353348]
[112.89270782 77.16847229]
[109.18654633 91.70340729]
[119.40742493 80.72463226]
[131.21391296 71.47222900]
[145.74679565 67.75803375]
[160.54486084 70.21106720]
[173.10195923 78.41589355]
[181.29148865 90.98297882]
[183.72650146 105.78401184]
[179.99461365 120.31237030]
[170.72784424 132.10757446]
[157.49555969 139.17205811]
[142.53549194 140.30895996]
[135.34410095 127.14522552]
[135.34410095 142.14523315]
[135.34410095 157.14523315]
[135.34410095 172.14523315]
[135.34410095 187.14523315]
[135.34410095 202.14523315]
[135.34410095 217.14523315]
[135.34410095 232.14523315]
[135.34410095 247.14523315]
[135.34410095 262.14523315]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[15 33]
[16 32]
[17 31]
[34 129]
[35 128]
[36 127]
[37 126]
[51 125]
[52 124]
[53 123]
[54 122]
[55 121]
[56 120]
[59 117]
[60 116]
[61 115]
[62 114]
[64 113]
[65 112]
[66 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
