%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCUAUACCAACACCUAUUCUGAUUUUUCGGUCACCCUGAAGUUUAUAUUCUUAUCCUACCxxxxxxxxxxUCAUGAGCUGUCCCCACAUUAGGCUUAAAAACAGAUGCAAUUCCCGGACGUCUAAACCAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[157.74090576 515.01074219]
[157.42886353 500.01400757]
[157.11680603 485.01724243]
[156.80474854 470.02050781]
[156.49269104 455.02374268]
[156.18063354 440.02697754]
[155.86857605 425.03024292]
[155.55651855 410.03347778]
[155.24446106 395.03674316]
[153.22212219 380.17367554]
[149.51596069 365.63876343]
[145.80979919 351.10382080]
[130.19898987 350.26602173]
[115.58937836 344.64770508]
[103.40951538 334.78543091]
[94.85430908 321.63134766]
[90.76781464 306.46127319]
[91.55995178 290.75097656]
[97.16544342 276.03265381]
[107.04900360 263.74539185]
[120.25643921 255.09452820]
[116.24869537 240.63983154]
[106.41783142 251.96917725]
[91.42341614 251.55993652]
[82.22515106 239.71122742]
[85.54622650 225.08349609]
[98.95920563 218.36843872]
[112.65985107 224.47370911]
[110.17473602 209.68099976]
[107.68961334 194.88829041]
[105.20449829 180.09558105]
[100.96728516 173.98071289]
[102.82489014 164.96954346]
[100.64805603 150.12834167]
[98.47122192 135.28713989]
[96.29438019 120.44593048]
[94.11754608 105.60472870]
[81.28895569 114.21771240]
[66.62347412 119.93134308]
[51.91551208 116.98585510]
[36.56154251 122.74672699]
[24.06908798 112.12267303]
[27.28931618 96.04280090]
[42.90953064 91.04871368]
[54.86099625 102.27789307]
[69.56895447 105.22338104]
[75.56237030 100.71461487]
[87.54920959 91.69708252]
[93.54262543 87.18831635]
[94.78949738 72.24023438]
[96.03636932 57.29214478]
[90.79283142 58.09667587]
[84.99141693 57.29012680]
[79.08100891 54.70630646]
[73.54936981 50.29615402]
[64.28441620 38.49951553]
[55.01946640 26.70287514]
[39.60573959 21.10385513]
[37.01459885 4.91070652]
[49.91159058 -5.21844482]
[65.02938843 1.13640273]
[66.81610870 17.43792725]
[76.08105469 29.23456573]
[85.34600830 41.03120804]
[100.16376495 38.70010376]
[105.35918427 24.62858391]
[110.55459595 10.55706406]
[115.75001526 -3.51445532]
[103.61978912 5.30924368]
[89.06161499 8.92305851]
[74.21314240 6.79635572]
[61.25464249 -0.75859165]
[52.08887100 -12.63245392]
[48.06167984 -27.08173561]
[49.76440430 -41.98477936]
[56.94702530 -55.15330124]
[68.55488586 -64.65370178]
[82.88353729 -69.09099579]
[97.82905579 -67.81363678]
[111.19689941 -61.00917435]
[121.02421570 -49.67674637]
[125.86801147 -35.48035049]
[125.01720428 -20.50515175]
[134.03474426 -32.49198532]
[143.05226135 -44.47881699]
[136.44070435 -58.28264999]
[137.01301575 -73.57745361]
[144.63766479 -86.84859467]
[157.56259155 -95.04646301]
[172.81771851 -96.28724670]
[186.89755249 -90.28582001]
[196.56661987 -78.42127228]
[199.60307312 -63.41998672]
[195.30912781 -48.72914886]
[184.67152405 -37.72460556]
[170.13470459 -32.93512344]
[155.03909302 -35.46128845]
[146.02157593 -23.47445488]
[137.00404358 -11.48762226]
[129.82153320 1.68096018]
[124.62611389 15.75247955]
[119.43070221 29.82399940]
[114.23528290 43.89551926]
[110.98445892 58.53902054]
[109.73758698 73.48710632]
[108.49070740 88.43519592]
[108.95874786 103.42788696]
[111.13558960 118.26909637]
[113.31242371 133.11030579]
[115.48926544 147.95150757]
[117.66609955 162.79270935]
[119.99720001 177.61047363]
[122.48232269 192.40318298]
[124.96743774 207.19587708]
[127.45256042 221.98858643]
[130.70338440 236.63209534]
[134.71112061 251.08677673]
[149.13632202 251.45181274]
[162.85598755 255.87112427]
[174.75581360 263.97634888]
[183.87194824 275.10006714]
[189.46913147 288.33087158]
[191.09991455 302.58798218]
[188.64047241 316.70953369]
[182.29992676 329.54727173]
[172.60261536 340.05993652]
[160.34474182 347.39764404]
[164.05090332 361.93258667]
[167.75706482 376.46752930]
[173.53158569 362.62356567]
[184.99583435 352.95034790]
[199.61401367 349.58749390]
[214.15272522 353.27883911]
[225.39613342 363.20785522]
[230.85729980 377.17840576]
[229.32827759 392.10025024]
[221.14726257 404.67288208]
[208.12380981 412.11532593]
[193.13861084 412.78137207]
[179.50622559 406.52371216]
[170.24121094 394.72467041]
[170.55326843 409.72143555]
[170.86532593 424.71817017]
[171.17738342 439.71493530]
[171.48944092 454.71170044]
[171.80149841 469.70843506]
[172.11355591 484.70520020]
[172.42561340 499.70196533]
[172.73767090 514.69873047]
[175.32865906 533.90643311]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 129]
[11 128]
[12 127]
[21 117]
[22 116]
[28 115]
[29 114]
[30 113]
[31 112]
[33 111]
[34 110]
[35 109]
[36 108]
[37 107]
[39 46]
[40 45]
[49 106]
[50 105]
[51 104]
[55 64]
[56 63]
[57 62]
[65 103]
[66 102]
[67 101]
[68 100]
[83 99]
[84 98]
[85 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
