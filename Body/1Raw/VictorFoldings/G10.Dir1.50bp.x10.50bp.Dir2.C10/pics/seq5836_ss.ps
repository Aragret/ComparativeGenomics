%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCCCCACACUCAUCGCCCUUACCACGCUACUCCUACCUAUCUCCCCUUUUAUACUAAUAAUxxxxxxxxxxCCGCUACCAUAAUCAUCGCUAUCCCCACCGGCGUCAAAGUAUUUAGCUGACUCGCCACACUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.08899689 227.79450989]
[94.78499603 212.79759216]
[94.48098755 197.80067444]
[94.17698669 182.80375671]
[93.87297821 167.80683899]
[93.56897736 152.80992126]
[93.26496887 137.81300354]
[92.96096802 122.81607819]
[92.65695953 107.81916046]
[90.08551025 93.04121399]
[85.30592346 78.82307434]
[80.52633667 64.60493469]
[66.01761627 65.96396637]
[51.57947159 64.04809570]
[37.94139099 58.95751190]
[25.79167366 50.95272827]
[15.74270535 40.44123840]
[8.30008602 27.95678139]
[3.83719063 14.13223839]
[2.57644200 -0.33245158]
[4.57822657 -14.70572662]
[9.73801041 -28.26140213]
[17.79179382 -40.31536102]
[28.32961845 -50.26007843]
[40.81642532 -57.59523773]
[36.32598114 -71.90732574]
[31.83553314 -86.21941376]
[27.34508514 -100.53150177]
[12.73378277 -97.10848999]
[-2.09041810 -94.77390289]
[-17.04655266 -93.54050446]
[-32.05293274 -93.41503143]
[-47.02760315 -94.39817047]
[-61.88876724 -96.48453522]
[-76.55526733 -99.66275024]
[-90.94699097 -103.91545105]
[-104.98534393 -109.21940613]
[-118.59364319 -115.54565430]
[-131.69757080 -122.85964203]
[-144.22555542 -131.12141418]
[-156.10916138 -140.28584290]
[-167.28350830 -150.30290222]
[-177.68754578 -161.11785889]
[-187.26445007 -172.67164612]
[-195.96192932 -184.90116882]
[-203.73246765 -197.73962402]
[-210.53361511 -211.11689758]
[-216.32826233 -224.95993042]
[-221.08471680 -239.19309998]
[-224.77703857 -253.73867798]
[-227.38502502 -268.51724243]
[-228.89445496 -283.44802856]
[-229.29708862 -298.44955444]
[-228.59071350 -313.43981934]
[-226.77919006 -328.33697510]
[-223.87242126 -343.05969238]
[-219.88626099 -357.52749634]
[-214.84251404 -371.66140747]
[-208.76869202 -385.38424683]
[-201.69799805 -398.62103271]
[-193.66903687 -411.29946899]
[-184.72564697 -423.35034180]
[-174.91670227 -434.70779419]
[-164.29576111 -445.30981445]
[-152.92083740 -455.09848022]
[-140.85404968 -464.02035522]
[-128.16130066 -472.02670288]
[-114.91193390 -479.07379150]
[-101.17829895 -485.12313843]
[-87.03540802 -490.14166260]
[-72.56050110 -494.10202026]
[-57.83264160 -496.98254395]
[-42.93226624 -498.76748657]
[-27.94075775 -499.44714355]
[-12.93999672 -499.01776123]
[1.98808956 -497.48168945]
[16.76196671 -494.84735107]
[31.30094528 -491.12911987]
[45.52561569 -486.34729004]
[59.35828781 -480.52798462]
[72.72341156 -473.70297241]
[85.54799652 -465.90954590]
[97.76198578 -457.19027710]
[109.29867554 -447.59277344]
[120.09506226 -437.16949463]
[130.09217834 -425.97729492]
[139.23541260 -414.07736206]
[147.47482300 -401.53466797]
[154.76542664 -388.41772461]
[161.06739807 -374.79815674]
[166.34631348 -360.75036621]
[170.57334900 -346.35107422]
[173.72540283 -331.67895508]
[175.78527832 -316.81408691]
[176.74169922 -301.83767700]
[176.58946228 -286.83154297]
[175.32940674 -271.87762451]
[172.96838379 -257.05761719]
[169.51931763 -242.45245361]
[165.00103760 -228.14187622]
[159.43821716 -214.20408630]
[152.86123657 -200.71517944]
[145.30603027 -187.74884033]
[136.81384277 -175.37586975]
[127.43107605 -163.66387939]
[117.20896149 -152.67681885]
[106.20333862 -142.47468567]
[94.47431183 -133.11322021]
[82.08594513 -124.64353180]
[69.10589600 -117.11189270]
[55.60506058 -110.55944061]
[41.65717316 -105.02194977]
[46.14762115 -90.70986176]
[50.63806915 -76.39777374]
[55.12851715 -62.08568573]
[70.55873871 -63.15600204]
[85.80780029 -60.51536560]
[99.99562836 -54.31196213]
[112.30238342 -44.89971924]
[122.01583862 -32.81811523]
[128.57261658 -18.76125717]
[131.59085083 -3.53801084]
[130.89241028 11.97455120]
[126.51341248 26.88167763]
[118.70240021 40.32254410]
[107.90622711 51.51996994]
[94.74448395 59.82534790]
[99.52407074 74.04348755]
[104.30365753 88.26162720]
[107.96585846 73.71555328]
[116.55471039 61.41793060]
[128.95069885 52.97166824]
[143.53810120 49.47769165]
[158.41552734 51.39141464]
[171.64378357 58.46340179]
[181.49867249 69.77185822]
[186.69566345 83.84279633]
[186.55735779 98.84216309]
[181.10177612 112.81487274]
[171.04002380 123.93967438]
[157.68359375 130.76652527]
[142.77342224 132.40557861]
[128.25292969 128.64318848]
[116.01480103 119.96977234]
[107.65388489 107.51515961]
[107.95788574 122.51207733]
[108.26188660 137.50900269]
[108.56589508 152.50592041]
[108.86989594 167.50283813]
[109.17390442 182.49975586]
[109.47790527 197.49667358]
[109.78191376 212.49359131]
[110.08591461 227.49050903]
[112.66660309 246.69963074]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 153]
[2 152]
[3 151]
[4 150]
[5 149]
[6 148]
[7 147]
[8 146]
[9 145]
[10 129]
[11 128]
[12 127]
[25 115]
[26 114]
[27 113]
[28 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
