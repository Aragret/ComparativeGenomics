%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAUGUCCUAUCAAUAGGAGCUGUAUUUGCCAUCAUAGGAGGCUUCAUUCACUGAUUUCCCxxxxxxxxxxAUACCCUAGCCAACCCCUUAAACACCCCUCCCCACAUCAAGCCCGAAUGAUAUUUCCUAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[81.27146912 292.27407837]
[81.27146912 277.27407837]
[81.27146912 262.27407837]
[81.27146912 247.27406311]
[81.27146912 232.27406311]
[81.27146912 217.27406311]
[81.27146912 202.27406311]
[81.27146912 187.27406311]
[81.27146912 172.27406311]
[81.27146912 157.27406311]
[74.50937653 154.02998352]
[68.02098846 167.55406189]
[54.49701309 161.06544495]
[60.98518753 147.54182434]
[54.22309113 144.29772949]
[42.52346802 153.68489075]
[30.82384491 163.07205200]
[19.12422180 172.45921326]
[7.42459774 181.84638977]
[1.98621929 197.31752014]
[-14.17909813 200.07696533]
[-24.44186211 187.28604126]
[-18.24461937 172.10295105]
[-1.96256399 170.14675903]
[9.73705959 160.75959778]
[21.43668365 151.37243652]
[33.13630676 141.98527527]
[44.83592987 132.59811401]
[43.43976974 125.22920990]
[28.70196152 128.02153015]
[13.96415615 130.81385803]
[0.81045574 138.02359009]
[-10.11099052 127.74146271]
[-3.70685601 114.17728424]
[11.17183208 116.07604980]
[25.90963745 113.28372955]
[40.64744568 110.49140167]
[39.25128174 103.12249756]
[24.92868423 98.66568756]
[10.60608673 94.20886993]
[1.41571510 94.64351654]
[-3.96637297 89.50748444]
[-18.19315147 84.75366974]
[-34.14492035 88.55802917]
[-45.21739197 76.46123505]
[-40.02015686 60.90743256]
[-23.89968681 57.89704132]
[-13.43933678 70.52689362]
[0.78744197 75.28070831]
[15.06290245 79.88626862]
[29.38549995 84.34308624]
[43.70809555 88.79990387]
[79.56035614 56.99633408]
[117.70518494 66.56584930]
[127.21353912 54.96451187]
[136.72189331 43.36317062]
[146.23025513 31.76182938]
[155.73861694 20.16048813]
[165.24697876 8.55914688]
[154.57870483 -2.00127912]
[144.94622803 -13.51430416]
[136.43417358 -25.87874985]
[129.11737061 -38.98595428]
[123.06010437 -52.72072983]
[118.31562042 -66.96237183]
[114.92559814 -81.58571625]
[112.91984558 -96.46225739]
[112.31597900 -111.46125031]
[113.11931610 -126.45088196]
[115.32278442 -141.29942322]
[118.90702820 -155.87637329]
[123.84054565 -170.05364990]
[130.07997131 -183.70663452]
[137.57049561 -196.71534729]
[146.24626160 -208.96546936]
[156.03103638 -220.34933472]
[166.83883667 -230.76692200]
[178.57467651 -240.12664795]
[191.13542175 -248.34628296]
[204.41065979 -255.35357666]
[218.28376770 -261.08694458]
[232.63279724 -265.49603271]
[247.33164978 -268.54205322]
[262.25112915 -270.19824219]
[277.26016235 -270.45004272]
[292.22683716 -269.29528809]
[307.01959229 -266.74407959]
[321.50845337 -262.81884766]
[335.56607056 -257.55407715]
[349.06893921 -250.99606323]
[361.89834595 -243.20242310]
[373.94155884 -234.24163818]
[385.09274292 -224.19248962]
[395.25387573 -213.14326477]
[404.33572388 -201.19107056]
[412.25842285 -188.44096375]
[418.95233154 -175.00497437]
[424.35867310 -161.00117493]
[428.42990112 -146.55267334]
[431.13024902 -131.78640747]
[432.43597412 -116.83215332]
[432.33560181 -101.82134247]
[430.83001709 -86.88588715]
[427.93246460 -72.15705109]
[423.66839600 -57.76427078]
[418.07528687 -43.83402634]
[411.20230103 -30.48875046]
[403.10983276 -17.84571648]
[393.86898804 -6.01603937]
[383.56097412 4.89632177]
[372.27639771 14.79546547]
[360.11444092 23.59439659]
[347.18197632 31.21578598]
[333.59265137 37.59265900]
[319.46588135 42.66896820]
[304.92581177 46.40010834]
[290.10028076 48.75328445]
[275.11950684 49.70782089]
[260.11517334 49.25532150]
[245.21916199 47.39977264]
[230.56236267 44.15747452]
[216.27357483 39.55692291]
[202.47837830 33.63854980]
[189.29801941 26.45436478]
[176.84831238 18.06750488]
[167.33995056 29.66884613]
[157.83160400 41.27018738]
[148.32324219 52.87152863]
[138.81488037 64.47286987]
[129.30651855 76.07421112]
[135.24926758 81.92980194]
[139.96896362 89.24929810]
[143.11006165 97.76463318]
[144.37841797 107.12284851]
[143.56118774 116.90061188]
[140.54325867 126.62342072]
[135.31901550 135.78840637]
[127.99879456 143.88983154]
[118.80934143 150.44590759]
[108.08812714 155.02563477]
[96.27146912 157.27406311]
[96.27146912 172.27406311]
[96.27146912 187.27406311]
[96.27146912 202.27406311]
[96.27146912 217.27406311]
[96.27146912 232.27406311]
[96.27146912 247.27406311]
[96.27146912 262.27407837]
[96.27146912 277.27407837]
[96.27146912 292.27407837]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[15 28]
[16 27]
[17 26]
[18 25]
[19 24]
[38 52]
[39 51]
[40 50]
[42 49]
[43 48]
[54 130]
[55 129]
[56 128]
[57 127]
[58 126]
[59 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
