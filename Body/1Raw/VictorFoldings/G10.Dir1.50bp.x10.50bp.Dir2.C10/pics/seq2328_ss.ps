%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCAUAGUAGGCCUAAAAGCAGCCACCAAUUAAGAAAGCGUUCAAGCUCAACACCCACUACCUxxxxxxxxxxAGCAGCAGGCAAAUCAGCCCAAUUAGGUCUCCACCCCUGACUCCCCUCAGCCAUAGAAGGCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.20173645 276.62542725]
[95.20173645 261.62542725]
[95.20173645 246.62544250]
[95.20173645 231.62544250]
[95.20173645 216.62544250]
[95.20173645 201.62544250]
[95.20173645 186.62544250]
[95.20173645 171.62544250]
[95.20173645 156.62544250]
[95.20173645 141.62544250]
[80.66523743 135.24652100]
[70.11284637 124.27211761]
[64.78911591 110.70405579]
[65.04572296 96.78043365]
[70.35391998 84.61042023]
[79.45530701 75.85493469]
[72.71325684 62.45550156]
[65.70102692 49.19546127]
[58.42150116 36.08026123]
[51.14197159 22.96506119]
[43.86244202 9.84986305]
[36.58291245 -3.26533651]
[29.30338287 -16.38053513]
[22.02385330 -29.49573517]
[14.74432373 -42.61093521]
[-5.45485973 -46.01445389]
[-17.50473022 -62.25839233]
[-14.96789551 -82.06336212]
[-25.62810516 -92.61608124]
[-40.87892532 -96.82595825]
[-44.48064804 -111.27853394]
[-55.14085770 -121.83125305]
[-66.89367676 -112.48204803]
[-79.66978455 -104.58853912]
[-93.28982544 -98.26154327]
[-107.56259155 -93.58988190]
[-122.28771973 -90.63913727]
[-137.25849915 -89.45072174]
[-152.26473999 -90.04133606]
[-167.09580994 -92.40267944]
[-181.54347229 -96.50160217]
[-195.40493774 -102.28057098]
[-208.48558044 -109.65843964]
[-220.60179138 -118.53165436]
[-231.58346558 -128.77563477]
[-241.27644348 -140.24658203]
[-249.54464722 -152.78344727]
[-256.27200317 -166.21025085]
[-261.36407471 -180.33850098]
[-264.74935913 -194.96983337]
[-266.38037109 -209.89888000]
[-266.23419189 -224.91603088]
[-264.31286621 -239.81048584]
[-260.64337158 -254.37315369]
[-255.27720642 -268.39959717]
[-248.28973389 -281.69287109]
[-239.77903748 -294.06640625]
[-229.86459351 -305.34646606]
[-218.68557739 -315.37472534]
[-206.39892578 -324.01037598]
[-193.17712402 -331.13220215]
[-179.20579529 -336.64022827]
[-164.68106079 -340.45712280]
[-149.80683899 -342.52929688]
[-134.79193115 -342.82766724]
[-119.84713745 -341.34802246]
[-105.18224335 -338.11117554]
[-91.00312042 -333.16253662]
[-77.50883484 -326.57159424]
[-64.88881683 -318.43084717]
[-53.32023239 -308.85464478]
[-42.96548843 -297.97732544]
[-33.96994781 -285.95166016]
[-26.45989227 -272.94647217]
[-20.54075241 -259.14428711]
[-16.29562569 -244.73889160]
[-13.78410625 -229.93252563]
[-13.04145145 -214.93302917]
[-14.07808590 -199.95097351]
[-16.87945938 -185.19670105]
[-21.40624237 -170.87731934]
[-27.59488678 -157.19386292]
[-35.35851288 -144.33842468]
[-44.58813477 -132.49145508]
[-33.92792511 -121.93874359]
[-19.43959427 -118.48366547]
[-15.07538414 -103.27629089]
[-4.41517401 -92.72357178]
[7.60647345 -96.01548767]
[19.80594635 -93.46018219]
[29.80519295 -104.64119720]
[39.80443954 -115.82221222]
[38.67386246 -131.58601379]
[49.08412170 -143.47726440]
[64.85899353 -144.44111633]
[76.63952637 -133.90571594]
[77.43653870 -118.12153625]
[66.77717590 -106.45304871]
[50.98545074 -105.82295990]
[40.98620605 -94.64194489]
[30.98695946 -83.46093750]
[34.59045792 -75.29443359]
[35.30499649 -66.30982208]
[32.99353409 -57.50851822]
[27.85952377 -49.89046478]
[35.13905334 -36.77526474]
[42.41858292 -23.66006470]
[49.69811249 -10.54486561]
[56.97764206 2.57033324]
[64.25717163 15.68553257]
[71.53669739 28.80073166]
[78.81623077 41.91593170]
[83.13443756 44.07850266]
[86.11062622 49.00678253]
[86.11269379 55.71345139]
[92.85473633 69.11288452]
[115.54501343 68.52748108]
[135.06201172 84.09299469]
[140.49064636 110.77999115]
[154.44845581 116.27357483]
[168.40626526 121.76716614]
[182.36407471 127.26075745]
[196.75395203 120.72570801]
[211.52055359 126.35805511]
[217.90309143 140.81622314]
[212.11494446 155.52244568]
[197.59010315 161.75177002]
[182.94590759 155.80845642]
[176.87048340 141.21856689]
[162.91267395 135.72497559]
[148.95486450 130.23138428]
[134.99705505 124.73780060]
[128.79821777 128.95970154]
[138.41358948 140.47251892]
[148.02894592 151.98532104]
[157.64431763 163.49813843]
[169.40701294 172.80615234]
[168.87074280 187.79655457]
[156.47299194 196.24024963]
[142.32780457 191.24887085]
[137.97471619 176.89474487]
[130.78334045 163.73100281]
[123.59194946 150.56726074]
[116.40056610 137.40353394]
[110.20173645 141.62544250]
[110.20173645 156.62544250]
[110.20173645 171.62544250]
[110.20173645 186.62544250]
[110.20173645 201.62544250]
[110.20173645 216.62544250]
[110.20173645 231.62544250]
[110.20173645 246.62544250]
[110.20173645 261.62542725]
[110.20173645 276.62542725]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[16 116]
[17 115]
[18 112]
[19 111]
[20 110]
[21 109]
[22 108]
[23 107]
[24 106]
[25 105]
[28 88]
[29 87]
[31 85]
[32 84]
[90 101]
[91 100]
[92 99]
[119 132]
[120 131]
[121 130]
[122 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
