%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUACAACCCUUCGCUGACGCCAUAAAACUCUUCACCAAAGAGCCCCUAAAACCCGCCACAxxxxxxxxxxUAAUUCAAGCACUGCUUAUUACAAUUUUACUGGGUCUCUAUUUUACCCUCCUACAAGCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-40.96871948 129.76919556]
[-55.78647614 132.10029602]
[-68.21655273 141.88824463]
[-81.99163055 136.22285461]
[-96.80938721 138.55395508]
[-111.62714386 140.88505554]
[-126.30367279 143.98338318]
[-140.79927063 147.84053040]
[-155.29486084 151.69769287]
[-169.79046631 155.55485535]
[-184.28605652 159.41201782]
[-198.78164673 163.26918030]
[-186.62783813 172.06034851]
[-184.06022644 186.83895874]
[-192.53657532 199.21438599]
[-207.24443054 202.16044617]
[-219.83332825 194.00448608]
[-223.15586853 179.37709045]
[-215.32443237 166.58210754]
[-230.18748474 168.60444641]
[-245.05053711 170.62677002]
[-259.27731323 175.38058472]
[-272.37045288 182.69969177]
[-280.29687500 197.05603027]
[-296.69595337 197.09916687]
[-304.69775391 182.78472900]
[-296.07070923 168.83818054]
[-279.68957520 169.60653687]
[-266.59640503 162.28742981]
[-281.58187866 161.62739563]
[-295.66030884 156.45068359]
[-307.50369263 147.24560547]
[-315.99499512 134.88040161]
[-320.33319092 120.52142334]
[-320.10913086 105.52310181]
[-315.34390259 91.30013275]
[-306.48706055 79.19409943]
[-294.37393188 70.34690857]
[-280.14718628 65.59307098]
[-265.14868164 65.38098145]
[-250.79318237 69.73065186]
[-238.43475342 78.23180389]
[-229.23913574 90.08255768]
[-224.07366943 104.16510010]
[-223.42559814 119.15110016]
[-227.35606384 133.62698364]
[-235.49430847 146.22734070]
[-247.07286072 155.76373291]
[-232.20982361 153.74139404]
[-217.34677124 151.71905518]
[-202.63880920 148.77357483]
[-188.14321899 144.91641235]
[-173.64761353 141.05926514]
[-159.15202332 137.20210266]
[-144.65641785 133.34494019]
[-130.16082764 129.48777771]
[-141.38729858 119.53959656]
[-140.82209778 104.55024719]
[-128.87834167 95.47573853]
[-114.28595734 98.94879150]
[-107.71078491 112.43090057]
[-113.95824432 126.06729889]
[-99.14048767 123.73619080]
[-84.32273102 121.40509033]
[-72.95252228 111.78388977]
[-58.11758041 117.28253937]
[-43.29982376 114.95143890]
[-44.06817245 98.34285736]
[-42.91799545 81.75634766]
[-39.86460876 65.41278076]
[-34.94867325 49.52980804]
[-28.23565292 34.31893921]
[-19.81494331 19.98272705]
[-9.79868317 6.71209097]
[1.67974472 -5.31624842]
[14.46748352 -15.94211292]
[28.39424324 -25.02399826]
[43.27455902 -32.44096375]
[58.91028214 -38.09424210]
[75.09318542 -41.90854645]
[91.60776520 -43.83308029]
[108.23410797 -43.84222031]
[124.75079346 -41.93584061]
[140.93788147 -38.13933182]
[156.57980347 -32.50324631]
[171.46826172 -25.10264397]
[185.40499878 -16.03607368]
[194.91336060 -27.63741493]
[204.42172241 -39.23875427]
[213.93008423 -50.84009552]
[219.29397583 -66.92315674]
[236.23338318 -66.22111511]
[240.24807739 -49.74936676]
[225.53141785 -41.33173752]
[216.02305603 -29.73039627]
[206.51470947 -18.12905502]
[197.00634766 -6.52771473]
[204.29212952 0.59408385]
[211.05639648 8.21296406]
[217.26533508 16.29082680]
[222.88787842 24.78727913]
[227.89591980 33.65983200]
[232.26441956 42.86412430]
[235.97152710 52.35412216]
[238.99870300 62.08237457]
[241.33081055 72.00023651]
[242.95619202 82.05811310]
[243.86672974 92.20570374]
[244.05784607 102.39227295]
[243.52859497 112.56687927]
[242.28163147 122.67864227]
[240.32319641 132.67700195]
[254.73541260 136.83488464]
[269.14761353 140.99278259]
[283.55984497 145.15066528]
[295.10321045 134.91571045]
[310.35101318 132.56890869]
[324.43777466 138.85911560]
[332.86843872 151.77915955]
[332.95281982 167.20628357]
[324.66397095 180.21777344]
[310.64685059 186.66168213]
[295.37429810 184.48181152]
[283.71966553 174.37371826]
[279.40194702 159.56288147]
[264.98974609 155.40499878]
[250.57751465 151.24710083]
[236.16529846 147.08921814]
[230.27435303 161.53842163]
[222.85536194 175.26582336]
[213.99536133 188.11039734]
[203.79827881 199.92147827]
[192.38369751 210.56056213]
[179.88549805 219.90283203]
[166.45031738 227.83872986]
[152.23570251 234.27514648]
[137.40840149 239.13661194]
[122.14231873 242.36608887]
[106.61652374 243.92570496]
[91.01312256 243.79714966]
[75.51512909 241.98194885]
[60.30432510 238.50140381]
[45.55913162 233.39631653]
[31.45249176 226.72657776]
[18.14987183 218.57040405]
[5.80730295 209.02348328]
[-5.43044567 198.19778442]
[-15.43156242 186.22029114]
[-24.07873917 173.23149109]
[-31.27055168 159.38372803]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 67]
[2 66]
[4 64]
[5 63]
[6 62]
[7 56]
[8 55]
[9 54]
[10 53]
[11 52]
[12 51]
[19 50]
[20 49]
[21 48]
[22 29]
[23 28]
[87 97]
[88 96]
[89 95]
[90 94]
[112 128]
[113 127]
[114 126]
[115 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
