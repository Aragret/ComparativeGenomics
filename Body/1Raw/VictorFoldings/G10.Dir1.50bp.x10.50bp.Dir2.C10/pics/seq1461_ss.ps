%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGCCAGAACACUACGAGCCACAGCUUAAAACUCAAAGGACCUGGCGGUGCUUCAUAUCCCUxxxxxxxxxxGAAACCACACUUAUCCCCACCUUGGCUAUCAUCACCCGAUGAGGCAACCAGCCAGAACGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[81.32378387 264.10589600]
[81.32378387 249.10588074]
[81.32378387 234.10588074]
[81.32378387 219.10588074]
[81.32378387 204.10588074]
[81.32378387 189.10588074]
[81.32378387 174.10588074]
[81.32378387 159.10588074]
[81.32378387 144.10588074]
[81.32378387 129.10588074]
[69.62416077 119.71872711]
[54.98065567 122.96955109]
[40.33715439 126.22037506]
[25.69365311 129.47120667]
[11.05015182 132.72203064]
[2.54270959 145.77044678]
[-12.35419273 148.85864258]
[-24.74143410 140.66767883]
[-32.50040054 145.61241150]
[-39.72330475 143.83045959]
[-54.43126678 146.77595520]
[-63.20832062 159.64456177]
[-78.16624451 162.42216492]
[-90.38040924 153.97528076]
[-105.08836365 156.92076111]
[-119.79632568 159.86625671]
[-123.09680939 174.73321533]
[-132.16410828 186.96858215]
[-145.42726135 194.45248413]
[-160.58833313 195.88829041]
[-175.02059937 191.02725220]
[-186.22357178 180.71156311]
[-192.25625610 166.72848511]
[-192.07347107 151.50065613]
[-185.70687866 137.66641235]
[-174.25952148 127.62261200]
[-159.71473694 123.10939026]
[-144.59249878 124.90870667]
[-131.51280212 132.70881653]
[-122.74181366 145.15829468]
[-108.03385162 142.21279907]
[-93.32588959 139.26731873]
[-85.30644226 126.76836395]
[-70.43243408 123.57170105]
[-57.37674713 132.06799316]
[-42.66878510 129.12249756]
[-27.99225998 126.02418518]
[-20.23457146 113.36109161]
[-5.43028879 109.85569000]
[7.79932594 118.07852936]
[22.44282722 114.82769775]
[37.08633041 111.57687378]
[51.72983170 108.32604980]
[66.37332916 105.07522583]
[94.19470978 80.51316071]
[95.75229645 65.59424591]
[97.30987549 50.67533493]
[98.86745453 35.75642395]
[84.33159637 31.93422508]
[70.54959106 25.93782806]
[57.84450912 17.90779877]
[46.51417923 8.03237152]
[36.82419968 -3.45695901]
[29.00171471 -16.29086685]
[23.23009872 -30.16850471]
[19.64464188 -44.76456451]
[18.32939720 -59.73689270]
[19.31519127 -74.73451233]
[22.57892036 -89.40586090]
[28.04407310 -103.40702057]
[35.58254242 -116.40979004]
[45.01761627 -128.10935974]
[56.12811661 -138.23147583]
[68.65360260 -146.53884888]
[82.30046082 -152.83676147]
[96.74878693 -156.97758484]
[111.65988922 -158.86422729]
[126.68423462 -158.45248413]
[141.46961975 -155.75199890]
[155.66947937 -150.82608032]
[168.95091248 -143.79019165]
[181.00262451 -134.80926514]
[191.54206848 -124.09383392]
[200.32220459 -111.89507294]
[207.13720703 -98.49894714]
[211.82731628 -84.21948242]
[214.28260803 -69.39140320]
[214.44552612 -54.36229706]
[212.31222534 -39.48447800]
[207.93273926 -25.10670090]
[201.40971375 -11.56599808]
[192.89607239 0.82021534]
[182.59136963 11.76158810]
[170.73718262 21.00164032]
[157.61137390 28.32377052]
[143.52163696 33.55633545]
[128.79824829 36.57668304]
[113.78636932 37.31400681]
[112.22878265 52.23291779]
[110.67120361 67.15183258]
[109.11362457 82.07073975]
[118.86127472 93.47176361]
[133.84098816 94.25160980]
[148.82070923 95.03145599]
[163.00447083 88.02207947]
[175.31227112 96.41060638]
[190.29199219 97.19045258]
[196.44119263 94.48957825]
[202.15736389 95.23573303]
[205.87469482 98.32717133]
[220.80900574 99.72946930]
[235.74331665 101.13177490]
[250.67761230 102.53408051]
[265.35037231 95.21001434]
[278.87850952 104.47943878]
[277.34539795 120.80676270]
[262.32818604 127.39584351]
[249.27531433 117.46838379]
[234.34100342 116.06608582]
[219.40669250 114.66378021]
[204.47239685 113.26147461]
[189.51214600 112.17016602]
[174.53242493 111.39031982]
[161.42010498 118.45546722]
[148.04086304 110.01116943]
[133.06114197 109.23132324]
[118.08142853 108.45147705]
[112.64202118 113.61508179]
[125.41407776 121.48111725]
[138.18614197 129.34715271]
[152.83973694 132.55213928]
[162.91362000 143.66595459]
[164.66822815 158.56297302]
[157.45220947 171.71322632]
[143.94425964 178.23513794]
[129.15873718 175.70767212]
[118.58422089 165.06907654]
[116.14595795 150.26976013]
[108.95457458 137.10601807]
[101.76319122 123.94228363]
[96.32378387 129.10588074]
[96.32378387 144.10588074]
[96.32378387 159.10588074]
[96.32378387 174.10588074]
[96.32378387 189.10588074]
[96.32378387 204.10588074]
[96.32378387 219.10588074]
[96.32378387 234.10588074]
[96.32378387 249.10588074]
[96.32378387 264.10589600]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 54]
[12 53]
[13 52]
[14 51]
[15 50]
[18 47]
[20 46]
[21 45]
[24 42]
[25 41]
[26 40]
[55 101]
[56 100]
[57 99]
[58 98]
[102 127]
[103 126]
[104 125]
[106 123]
[107 122]
[110 121]
[111 120]
[112 119]
[113 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
