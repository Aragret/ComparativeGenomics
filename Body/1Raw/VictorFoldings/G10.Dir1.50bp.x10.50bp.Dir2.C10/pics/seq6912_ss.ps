%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCGCUACCAUAAUCAUCGCUAUCCCCACCGGCGUCAAAGUAUUUAGCUGACUCGCCACACUCxxxxxxxxxxACAACCGCUAUGUAUUUCGUACAUUACUGCCAGCCACCAUGAAUAUUGUACGGUACCAUAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.98035431 124.43305969]
[85.21167755 134.87506104]
[80.69056702 150.03652954]
[66.16730499 153.34172058]
[55.39862823 163.78373718]
[44.62994766 174.22573853]
[33.86127090 184.66775513]
[29.26708412 202.47010803]
[12.13435745 206.14627075]
[1.58234191 216.80718994]
[-8.96967316 227.46809387]
[-19.52168846 238.12899780]
[-13.95192528 252.30284119]
[-14.63519764 267.51641846]
[-21.45312309 281.13391113]
[-33.22445679 290.79595947]
[-47.90974426 294.82861328]
[-62.96467209 292.53314209]
[-75.78087616 284.30728149]
[-84.13787842 271.57620239]
[-86.58777618 256.54565430]
[-82.70610809 241.81973267]
[-73.16539764 229.94982910]
[-59.61863327 222.99246216]
[-44.41286850 222.15303040]
[-30.18259621 227.57698059]
[-19.63058281 216.91607666]
[-9.07856655 206.25517273]
[1.47344816 195.59425354]
[1.73659790 183.46194458]
[10.49436378 174.49128723]
[23.41926003 173.89906311]
[34.18793869 163.45706177]
[44.95661926 153.01504517]
[55.72529602 142.57304382]
[59.47615814 128.15846252]
[74.76966858 124.10638428]
[85.53834534 113.66437531]
[84.00105286 98.74336243]
[71.32953644 90.71636200]
[58.65802002 82.68936920]
[45.98650360 74.66236877]
[33.15285110 66.89723206]
[20.16246796 59.39723587]
[7.17208767 51.89723587]
[-5.72977495 60.13134384]
[-20.98136520 61.41493225]
[-35.07797623 55.45304489]
[-44.78031540 43.61568069]
[-47.85885239 28.62297440]
[-43.60616302 13.92014503]
[-32.99948120 2.88579249]
[-18.47615051 -1.94446921]
[-3.37352204 0.53931880]
[8.83792973 9.76640034]
[15.35210228 23.61645889]
[14.67208767 38.90685272]
[27.66246796 46.40685272]
[40.65285110 53.90685272]
[45.47087479 53.53827286]
[50.56141663 56.23536301]
[54.01350021 61.99085617]
[66.68502045 70.01785278]
[79.35652924 78.04484558]
[92.02804565 86.07184601]
[84.75609589 72.95244598]
[77.48413849 59.83304214]
[65.55397034 50.74067688]
[56.57524872 38.72475052]
[51.23666382 24.70692253]
[49.94770050 9.76240635]
[52.80723190 -4.96250772]
[59.59591675 -18.33837128]
[69.79305267 -29.33921242]
[82.61647034 -37.12123489]
[97.08258820 -41.08752823]
[112.08180237 -40.93386841]
[126.46362305 -36.67203903]
[139.12492371 -28.62893867]
[149.09454346 -17.42149734]
[155.60777283 -3.90936232]
[158.16503906 10.87104416]
[156.57017517 25.78601646]
[150.94552612 39.69153214]
[141.72251892 51.52098846]
[129.60643005 60.36818314]
[122.06665039 73.33551025]
[114.52686310 86.30284119]
[127.36051941 78.53770447]
[140.19416809 70.77256775]
[152.43711853 62.10596085]
[164.02616882 52.58262634]
[175.61521912 43.05928802]
[187.20426941 33.53594971]
[198.79331970 24.01261330]
[201.78031921 8.25008106]
[216.03305054 0.88534486]
[230.61802673 7.56799841]
[234.34690857 23.17168236]
[224.35922241 35.72658539]
[208.31665039 35.60166168]
[196.72760010 45.12500000]
[185.13856506 54.64833450]
[173.54951477 64.17167664]
[161.96046448 73.69500732]
[176.84812927 75.52733612]
[187.20057678 86.38214874]
[188.32592773 101.33987427]
[179.71414185 113.62145996]
[165.26821899 117.66069794]
[151.53527832 111.62696075]
[144.73925781 98.25481415]
[147.95930481 83.60622406]
[135.12565613 91.37136078]
[122.29199982 99.13649750]
[135.42254639 91.88468170]
[149.49768066 86.69907379]
[164.19453430 83.69863892]
[179.17594910 82.95220947]
[194.09825134 84.47689819]
[208.61914062 88.23773956]
[222.40548706 94.14844513]
[235.14105225 102.07344055]
[246.53366089 111.83091736]
[256.32199097 123.19703674]
[264.28149414 135.91107178]
[270.22955322 149.68135071]
[274.02972412 164.19198608]
[275.59487915 179.11010742]
[274.88903809 194.09349060]
[271.92846680 208.79841614]
[266.78103638 222.88755798]
[259.56484985 236.03771973]
[250.44541931 247.94721985]
[239.63197327 258.34286499]
[227.37255859 266.98617554]
[213.94841003 273.67886353]
[199.66748047 278.26742554]
[184.85736084 280.64657593]
[169.85780334 280.76174927]
[155.01289368 278.61029053]
[140.66317749 274.24157715]
[127.13784027 267.75579834]
[114.74714661 259.30175781]
[103.77534485 249.07339478]
[94.47412109 237.30532837]
[87.05684662 224.26753235]
[81.69367981 210.25909424]
[78.50764465 195.60136414]
[77.57183075 180.63058472]
[78.90769958 165.69018555]
[82.48461914 151.12290955]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 38]
[2 37]
[4 35]
[5 34]
[6 33]
[7 32]
[9 29]
[10 28]
[11 27]
[12 26]
[39 65]
[40 64]
[41 63]
[42 62]
[43 59]
[44 58]
[45 57]
[88 115]
[89 114]
[90 113]
[91 105]
[92 104]
[93 103]
[94 102]
[95 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
