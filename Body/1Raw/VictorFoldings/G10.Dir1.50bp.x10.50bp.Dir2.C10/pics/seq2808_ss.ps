%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAGAGGCGGGCAUAACACAGCAAGACGAGAAGACCCUAUGGAGCUUUAAUUUAUUAAUGCxxxxxxxxxxCUAAGCACCCUAAUCAACUGGCUUCAAUCUACUUCUCCCGCCGCCGGGAAAAAAGGCGGGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[114.88847351 416.01162720]
[114.88847351 401.01162720]
[114.88847351 386.01162720]
[114.88847351 371.01162720]
[114.88847351 356.01162720]
[114.88847351 341.01162720]
[114.88847351 326.01162720]
[114.88847351 311.01162720]
[114.88847351 296.01162720]
[114.88847351 281.01162720]
[94.38645172 271.78750610]
[81.04322815 253.61393738]
[78.36737061 231.16242981]
[87.11524963 210.24296570]
[105.07872009 196.30055237]
[101.67573547 181.69166565]
[98.27275848 167.08276367]
[94.86978149 152.47387695]
[91.46680450 137.86499023]
[77.74674988 131.80197144]
[64.65359497 139.12107849]
[62.95152664 154.54452515]
[52.48397446 165.99920654]
[37.27592468 169.08058167]
[23.17518616 162.60380554]
[15.60377884 149.05929565]
[17.47306442 133.65522766]
[28.06426239 122.31476593]
[43.30484390 119.39855194]
[57.33449173 126.02792358]
[70.42764282 118.70881653]
[66.98020172 108.12816620]
[67.09169006 97.31681824]
[70.54988098 87.40709686]
[76.80227661 79.37373352]
[85.03332520 73.93824768]
[94.26618195 71.50559998]
[95.20180511 56.53481293]
[96.13743591 41.56402206]
[97.07306671 26.59322929]
[98.00868988 11.62243748]
[98.94432068 -3.34835434]
[86.33501434 -9.80716991]
[77.17680359 -20.55939674]
[72.83316040 -33.95312500]
[73.93120575 -47.94717026]
[80.27138519 -60.42213058]
[90.86274719 -69.50138092]
[104.07769775 -73.83335114]
[105.32456970 -88.78144073]
[106.57144165 -103.72953033]
[107.81832123 -118.67761230]
[109.06519318 -133.62570190]
[110.31207275 -148.57379150]
[95.90599060 -152.93769836]
[82.72725677 -160.19880676]
[71.35073853 -170.03759766]
[62.27212524 -182.02215576]
[55.88630676 -195.62716675]
[52.47021484 -210.25692749]
[52.17079926 -225.27137756]
[54.99871445 -240.01420593]
[60.82796097 -253.84144592]
[69.40149689 -266.14962769]
[80.34258270 -276.40216064]
[93.17129517 -284.15264893]
[107.32563782 -289.06442261]
[122.18611145 -290.92507935]
[123.43298340 -305.87316895]
[124.67986298 -320.82125854]
[111.15218353 -327.75454712]
[101.31130219 -339.34011841]
[96.65788269 -353.81124878]
[97.90152740 -368.96124268]
[104.85260010 -382.47979736]
[116.45111084 -392.30541992]
[130.92837524 -396.93978882]
[146.07669067 -395.67620850]
[159.58609009 -388.70736694]
[169.39645386 -377.09594727]
[174.01177979 -362.61260986]
[172.72828674 -347.46594238]
[165.74166870 -333.96575928]
[154.11734009 -324.17065430]
[139.62794495 -319.57437134]
[138.38107300 -304.62631226]
[137.13420105 -289.67822266]
[151.48104858 -285.38125610]
[164.62602234 -278.19235229]
[175.99339294 -268.42358398]
[185.08468628 -256.50006104]
[191.50059509 -242.94155884]
[194.95846558 -228.33966064]
[195.30477905 -213.33204651]
[192.52198792 -198.57469177]
[186.72932434 -184.71307373]
[178.17774963 -172.35404968]
[167.23905945 -162.03919983]
[154.38972473 -154.22117615]
[140.19013977 -149.24380493]
[125.26015472 -147.32691956]
[124.01328278 -132.37882996]
[122.76640320 -117.43074036]
[121.51953125 -102.48265076]
[120.27265930 -87.53456879]
[119.02577972 -72.58647919]
[132.92793274 -64.76787567]
[142.07461548 -51.63038635]
[144.60092163 -35.76421738]
[139.95327759 -20.32447052]
[129.00987244 -8.40375328]
[113.91511536 -2.41272593]
[112.97948456 12.55806541]
[112.04385376 27.52885628]
[111.10823059 42.49964905]
[110.17259979 57.47043991]
[109.23696899 72.44123077]
[125.44302368 83.09422302]
[131.94081116 102.38236237]
[124.85157776 122.48154449]
[106.07569885 134.46200562]
[109.47867584 149.07089233]
[112.88165283 163.67979431]
[116.28462982 178.28868103]
[119.68760681 192.89758301]
[128.13978577 193.22711182]
[136.37139893 195.14076233]
[144.08851624 198.56729126]
[151.01612854 203.38150024]
[156.90795898 209.40881348]
[161.55520630 216.43159485]
[164.79389954 224.19696045]
[166.51077271 232.42596436]
[166.64714050 240.82357788]
[165.20092773 249.08924866]
[162.22668457 256.92767334]
[157.83346558 264.05938721]
[152.18087769 270.23068237]
[145.47326660 275.22256470]
[137.95234680 278.85876465]
[129.88847351 281.01162720]
[129.88847351 296.01162720]
[129.88847351 311.01162720]
[129.88847351 326.01162720]
[129.88847351 341.01162720]
[129.88847351 356.01162720]
[129.88847351 371.01162720]
[129.88847351 386.01162720]
[129.88847351 401.01162720]
[129.88847351 416.01162720]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[15 125]
[16 124]
[17 123]
[18 122]
[19 121]
[20 31]
[21 30]
[37 117]
[38 116]
[39 115]
[40 114]
[41 113]
[42 112]
[49 106]
[50 105]
[51 104]
[52 103]
[53 102]
[54 101]
[68 87]
[69 86]
[70 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
