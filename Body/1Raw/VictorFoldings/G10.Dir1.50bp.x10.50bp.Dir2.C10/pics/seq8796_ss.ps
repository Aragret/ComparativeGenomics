%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUAAUGACCCACCAAUCACAUGCCUAUCAUAUAGUAAAACCCAGCCCAUGACCCCUAACxxxxxxxxxxCAUAUAGUAAAACCCAGCCCAUGACCCCUAACAGGGGCCCUCUCAGCCCUCCUAAUGACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[167.66418457 142.05007935]
[162.42681885 128.71824646]
[158.35179138 114.98606110]
[155.46914673 100.95464325]
[140.56724548 102.66733551]
[125.66534424 104.38002014]
[110.76344299 106.09271240]
[98.34803772 143.15136719]
[86.45565796 152.29309082]
[74.56327820 161.43482971]
[62.67089844 170.57656860]
[50.77851868 179.71829224]
[38.88613892 188.86003113]
[36.42633057 201.56448364]
[26.27869034 208.92956543]
[14.23481941 207.42872620]
[2.15483093 216.32107544]
[-9.92515755 225.21342468]
[-9.69364738 240.72877502]
[-18.65355301 253.39762878]
[-33.35960770 258.34854126]
[-48.15703201 253.67779541]
[-57.35591888 241.18139648]
[-57.41910172 225.66444397]
[-48.32228851 213.09353638]
[-33.56339264 208.30244446]
[-18.81750679 213.13343811]
[-6.73751879 204.24108887]
[5.34246969 195.34873962]
[11.46542168 178.93199158]
[29.74440575 176.96765137]
[41.63678360 167.82591248]
[53.52916336 158.68418884]
[65.42154694 149.54244995]
[77.31392670 140.40071106]
[89.20630646 131.25898743]
[88.66064453 123.77885437]
[87.02368164 101.33848572]
[73.93052673 94.01937866]
[60.83737183 86.70027161]
[47.74422073 79.38116455]
[36.47875595 89.49887848]
[22.53749657 95.40818787]
[7.43268633 96.46811676]
[-7.19721746 92.56368256]
[-19.76527405 84.11840057]
[-28.90819168 72.04837036]
[-33.63421631 57.66284180]
[-33.43070602 42.52225494]
[-28.31973648 28.26895142]
[-18.85570335 16.44901848]
[-6.06519747 8.34459496]
[8.66436386 4.83478975]
[23.73522758 6.30031824]
[37.51261902 12.58221149]
[48.50207138 22.99905777]
[55.51153183 36.42091370]
[57.78065872 51.39187622]
[55.06332397 66.28800964]
[68.15647888 73.60711670]
[81.24963379 80.92622375]
[94.34278870 88.24533081]
[109.05075073 91.19081116]
[123.95265198 89.47811890]
[138.85455322 87.76543427]
[153.75645447 86.05274200]
[153.41108704 70.30442047]
[154.55186462 54.59419250]
[157.16853333 39.06198120]
[161.23768616 23.84612083]
[166.72297668 9.08211994]
[173.57548523 -5.09854889]
[181.73403931 -18.56961632]
[191.12593079 -31.21114159]
[201.66740417 -42.91058350]
[213.26449585 -53.56379318]
[225.81382751 -63.07595444]
[239.20358276 -71.36241150]
[253.31445312 -78.34944916]
[268.02066040 -83.97490692]
[283.19122314 -88.18876648]
[298.69097900 -90.95359802]
[314.38183594 -92.24485779]
[330.12402344 -92.05114746]
[345.77731323 -90.37429047]
[361.20233154 -87.22931671]
[376.26165771 -82.64433289]
[390.82119751 -76.66027069]
[404.75131226 -69.33052826]
[417.92797852 -60.72047043]
[430.23382568 -50.90687561]
[441.55935669 -39.97723007]
[451.80374146 -28.02895927]
[460.87582397 -15.16854763]
[468.69482422 -1.51060581]
[475.19122314 12.82316399]
[480.30722046 27.70504761]
[494.87994385 24.15028572]
[509.45263672 20.59552383]
[524.02532959 17.04076195]
[535.59875488 6.25344849]
[549.79711914 10.75417900]
[564.36981201 7.19941711]
[570.13085938 -7.20855665]
[583.27838135 -15.45007420]
[598.75683594 -14.35610390]
[610.61450195 -4.34730005]
[614.29180908 10.72774792]
[608.37475586 25.07237816]
[595.13861084 33.17078400]
[579.67291260 31.90896797]
[567.92456055 21.77211952]
[553.35186768 25.32688141]
[542.82080078 35.85993576]
[527.58007812 31.61346436]
[513.00738525 35.16822815]
[498.43469238 38.72298813]
[483.86199951 42.27775192]
[486.02395630 56.42388153]
[486.96502686 70.70368195]
[486.67819214 85.01197052]
[485.16549683 99.24335480]
[482.43801880 113.29300690]
[478.51577759 127.05742645]
[473.42764282 140.43519592]
[467.21096802 153.32777405]
[459.91152954 165.64015198]
[451.58300781 177.28161621]
[442.28668213 188.16635132]
[432.09103394 198.21417236]
[421.07107544 207.35101318]
[409.30792236 215.50950623]
[396.88821411 222.62951660]
[383.90338135 228.65853882]
[370.44903564 233.55209351]
[356.62426758 237.27407837]
[342.53088379 239.79702759]
[328.27270508 241.10226440]
[313.95471191 241.18013000]
[299.68237305 240.02998352]
[285.56085205 237.66021729]
[271.69415283 234.08822632]
[258.18444824 229.34025574]
[245.13122559 223.45121765]
[232.63072205 216.46441650]
[220.77499390 208.43127441]
[209.65144348 199.41090393]
[199.34204102 189.46968079]
[189.92276001 178.68078613]
[181.46302795 167.12367249]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 66]
[5 65]
[6 64]
[7 63]
[8 36]
[9 35]
[10 34]
[11 33]
[12 32]
[13 31]
[16 29]
[17 28]
[18 27]
[38 62]
[39 61]
[40 60]
[41 59]
[97 118]
[98 117]
[99 116]
[100 115]
[102 113]
[103 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
