%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACCCCCUUAUUUCUAGGACUAUGAGAAUCGAACCCAUCCCUGAGAAUCCAAAAUUCUCCxxxxxxxxxxAGCACCACGACCCUACUACUAUCUCGCACCUGAAACAAGCUAACAUGACUAACACCCUUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[186.69175720 606.73034668]
[186.69175720 591.73034668]
[186.69175720 576.73034668]
[186.69175720 561.73034668]
[186.69175720 546.73034668]
[186.69175720 531.73034668]
[186.69175720 516.73034668]
[186.69175720 501.73037720]
[186.69175720 486.73037720]
[186.69175720 471.73037720]
[165.36463928 465.01330566]
[147.87800598 451.03970337]
[136.59776306 431.67785645]
[133.05813599 409.52661133]
[137.75299072 387.56649780]
[150.06709290 368.75860596]
[168.35655212 355.64550781]
[163.75099182 341.37005615]
[159.14543152 327.09460449]
[147.87409973 317.35772705]
[151.00050354 301.84848022]
[146.39494324 287.57302856]
[141.78936768 273.29757690]
[137.18380737 259.02212524]
[132.10404968 253.58688354]
[132.63427734 244.40153503]
[128.32669067 230.03335571]
[124.01910400 215.66516113]
[112.97109985 212.52954102]
[104.74458313 204.34468079]
[101.48601532 193.08166504]
[104.12506866 181.53417969]
[112.11324310 172.62564087]
[108.40708160 158.09071350]
[104.70092010 143.55577087]
[100.99475861 129.02082825]
[97.28859711 114.48590088]
[76.52219391 112.38159943]
[64.90959930 84.53334045]
[58.28110123 71.07737732]
[51.65260315 57.62141037]
[34.30587387 61.89393997]
[16.44844437 62.04003525]
[-0.95197731 58.05506897]
[-16.95322037 50.15820312]
[-30.68965340 38.78030396]
[-41.41901398 24.54047394]
[-48.56252289 8.21232891]
[-51.73609543 -9.31800175]
[-50.77100754 -27.09998322]
[-45.72283936 -44.17020798]
[-36.86830902 -59.60459518]
[-24.69009018 -72.56840515]
[-33.20117950 -84.91998291]
[-41.71226883 -97.27155304]
[-50.22336197 -109.62312317]
[-58.73445129 -121.97470093]
[-67.24554443 -134.32626343]
[-82.69967651 -138.63316345]
[-88.83502197 -153.45669556]
[-80.94506836 -167.42552185]
[-65.08231354 -169.82395935]
[-53.41529846 -158.81211853]
[-54.89396667 -142.83735657]
[-46.38287735 -130.48579407]
[-37.87178802 -118.13421631]
[-29.36069870 -105.78264618]
[-20.84960747 -93.43106842]
[-12.33851814 -81.07949829]
[-1.02820969 -86.20143890]
[10.96538734 -89.42463684]
[23.32580376 -90.66299438]
[35.72671890 -89.88278961]
[47.84058380 -87.10360718]
[59.34725952 -82.39786530]
[69.94248199 -75.88887024]
[79.34592438 -67.74767303]
[87.30858612 -58.18848038]
[93.61939240 -47.46309662]
[98.11082458 -35.85424042]
[100.66330719 -23.66812515]
[101.20844269 -11.22635460]
[99.73081970 1.14254725]
[96.26845551 13.11181450]
[90.91179657 24.36507416]
[83.80138397 34.60470581]
[75.12416840 43.55971909]
[65.10856628 50.99291229]
[71.73706818 64.44887543]
[78.36556244 77.90484619]
[85.67001343 79.60633087]
[95.92150116 68.65612793]
[100.27890778 83.00930786]
[107.58335114 84.71080017]
[119.47573090 75.56906891]
[125.23478699 60.21441650]
[141.45401001 57.79186249]
[151.44845581 70.79352570]
[144.93669128 85.84439850]
[128.61746216 87.46144867]
[116.72508240 96.60317993]
[111.82353210 110.77973938]
[115.52969360 125.31467438]
[119.23585510 139.84960938]
[122.94201660 154.38455200]
[126.64817810 168.91947937]
[143.27168274 177.90048218]
[148.03596497 195.85595703]
[138.38728333 211.35758972]
[142.69487000 225.72576904]
[147.00245667 240.09394836]
[151.45927429 254.41654968]
[156.06483459 268.69201660]
[160.67039490 282.96746826]
[165.27597046 297.24291992]
[176.87670898 308.00088501]
[173.42088318 322.48904419]
[178.02645874 336.76449585]
[182.63201904 351.03994751]
[191.51020813 350.02072144]
[200.43923950 350.30212402]
[209.22964478 351.87725830]
[217.69503784 354.71182251]
[225.65606689 358.74487305]
[232.94418335 363.89001465]
[239.40524292 370.03732300]
[244.90274048 377.05572510]
[249.32072449 384.79571533]
[252.56617737 393.09265137]
[254.57109070 401.77008057]
[255.29376221 410.64367676]
[254.71972656 419.52508545]
[252.86207581 428.22589111]
[249.76107788 436.56164551]
[245.48336792 444.35571289]
[240.12049866 451.44317627]
[233.78700256 457.67413330]
[226.61788940 462.91699219]
[218.76580811 467.06121826]
[210.39779663 470.01968384]
[201.69175720 471.73037720]
[201.69175720 486.73037720]
[201.69175720 501.73037720]
[201.69175720 516.73034668]
[201.69175720 531.73034668]
[201.69175720 546.73034668]
[201.69175720 561.73034668]
[201.69175720 576.73034668]
[201.69175720 591.73034668]
[201.69175720 606.73034668]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[17 119]
[18 118]
[19 117]
[21 115]
[22 114]
[23 113]
[24 112]
[26 111]
[27 110]
[28 109]
[33 106]
[34 105]
[35 104]
[36 103]
[37 102]
[39 90]
[40 89]
[41 88]
[53 69]
[54 68]
[55 67]
[56 66]
[57 65]
[58 64]
[94 101]
[95 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
