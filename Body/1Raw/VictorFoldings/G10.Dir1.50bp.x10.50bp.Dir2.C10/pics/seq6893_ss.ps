%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGUAGGAAUAGACGUAGACACACGAGCAUAUUUCACCUCCGCUACCAUAAUCAUCGCUAUxxxxxxxxxxCUAGGAAUACUAGUAUAUCGCUCACACCUCAUAUCCUCCCUACUAUGCCUAGAAGGAAUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[125.77468872 340.10409546]
[125.77468872 325.10409546]
[125.77468872 310.10409546]
[125.77468872 295.10409546]
[125.77468872 280.10409546]
[125.77468872 265.10409546]
[125.77468872 250.10411072]
[125.77468872 235.10411072]
[125.77468872 220.10411072]
[125.77468872 205.10411072]
[123.28956604 190.31140137]
[118.38801575 176.13484192]
[113.48646545 161.95828247]
[108.58491516 147.78172302]
[103.68336487 133.60516357]
[98.78181458 119.42861176]
[79.10676575 108.90511322]
[80.18673706 83.23106384]
[65.69113922 79.37390137]
[51.19554520 75.51674652]
[36.69994736 71.65958405]
[27.53561211 72.47615814]
[21.94453239 67.56846619]
[7.53231621 63.41057968]
[-6.18443871 70.79220581]
[-20.74124527 66.37020874]
[-27.69396400 53.24788666]
[-42.10618210 49.09000015]
[-52.03004837 61.70162582]
[-65.99373627 69.53227234]
[-81.85358429 71.41356659]
[-97.18772125 67.08788300]
[-109.66590881 57.24317932]
[-117.40364838 43.40373993]
[-119.24674225 27.69425774]
[-133.74234009 23.83709908]
[-148.23794556 19.97993851]
[-157.76838684 31.85808372]
[-171.30914307 38.82714844]
[-186.51417542 39.67970657]
[-200.74913025 34.26804352]
[-211.54769897 23.52976227]
[-217.03898621 9.32533646]
[-216.27157593 -5.88423204]
[-209.37843323 -19.46379280]
[-197.55383301 -29.06060600]
[-182.84646606 -33.01196671]
[-167.80447388 -30.63327217]
[-155.03396606 -22.33665276]
[-146.74749756 -9.55954361]
[-144.38078308 5.48434210]
[-129.88517761 9.34150124]
[-115.38958740 13.19866085]
[-107.27347565 1.70985699]
[-95.69262695 -6.32696676]
[-82.03239441 -9.92548561]
[-67.93544769 -8.63180542]
[-55.10420609 -2.58160162]
[-45.09527588 7.51378870]
[-39.13059616 20.45094109]
[-37.94829178 34.67778397]
[-23.53607750 38.83567047]
[-10.66204166 31.43331718]
[4.01322556 35.44469833]
[11.69020367 48.99836349]
[26.10241890 53.15625000]
[40.55710983 57.16399002]
[55.05270386 61.02114868]
[69.54830170 64.87831116]
[84.04389954 68.73546600]
[70.22081757 62.91116333]
[60.11588669 51.82557678]
[55.59315109 37.52365494]
[57.48692703 22.64368248]
[65.44786072 9.93056107]
[78.00741577 1.72948074]
[92.84871674 -0.44670638]
[107.23399353 3.80344105]
[118.50959778 13.69589806]
[124.59552002 27.40580559]
[124.36909485 42.40409470]
[117.87207794 55.92403793]
[106.30570984 65.47021484]
[119.08306122 57.61278534]
[131.86042786 49.75535965]
[144.63777161 41.89793396]
[139.68521118 27.67519951]
[137.90635681 12.72027683]
[139.38439941 -2.26736617]
[144.05023193 -16.58672905]
[151.68559265 -29.56807137]
[161.93339539 -40.60422897]
[174.31430054 -49.17902374]
[188.24925232 -54.89139557]
[203.08648682 -57.47416687]
[218.13201904 -56.80653381]
[232.68217468 -52.91972733]
[246.05639648 -45.99554062]
[257.62915039 -36.35782623]
[266.85913086 -24.45735741]
[273.31469727 -10.85074615]
[276.69384766 3.82560587]
[276.83859253 18.88525772]
[273.74212646 33.62384415]
[267.54925537 47.35201263]
[258.54968262 59.42766953]
[247.16429138 69.28601837]
[233.92561340 76.46596527]
[219.45285034 80.63169861]
[204.42292786 81.58836365]
[189.53880310 79.29122162]
[175.49662781 73.84772491]
[162.95320129 65.51245880]
[152.49520874 54.67529297]
[139.71784973 62.53271866]
[126.94049072 70.39014435]
[114.16313171 78.24756622]
[122.64694977 98.28422546]
[112.95837402 114.52706146]
[117.85992432 128.70361328]
[122.76147461 142.88017273]
[127.66302490 157.05673218]
[132.56457520 171.23329163]
[137.46612549 185.40985107]
[140.94221497 170.81817627]
[149.11889648 158.24272156]
[161.04544067 149.14562988]
[175.33518982 144.58457947]
[190.32667542 145.08992004]
[204.27685547 150.60287476]
[215.56373596 160.48245239]
[222.87503052 173.57997131]
[225.36062622 188.37260437]
[222.73155212 203.14041138]
[215.29348755 216.16633606]
[203.91122437 225.93589783]
[189.90820312 231.31318665]
[174.91252136 231.67297363]
[160.66770935 226.97344971]
[148.83001709 217.76100159]
[140.77468872 205.10411072]
[140.77468872 220.10411072]
[140.77468872 235.10411072]
[140.77468872 250.10411072]
[140.77468872 265.10409546]
[140.77468872 280.10409546]
[140.77468872 295.10409546]
[140.77468872 310.10409546]
[140.77468872 325.10409546]
[140.77468872 340.10409546]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 124]
[12 123]
[13 122]
[14 121]
[15 120]
[16 119]
[18 70]
[19 69]
[20 68]
[21 67]
[23 66]
[24 65]
[27 62]
[28 61]
[35 53]
[36 52]
[37 51]
[83 117]
[84 116]
[85 115]
[86 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
