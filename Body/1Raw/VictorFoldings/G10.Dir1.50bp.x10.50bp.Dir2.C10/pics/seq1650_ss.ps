%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUAGCCCUUAUGAAACUUAAGGGUCGAAGGUGGAUUUAGCAGUAAACUAAGAGUAGAGUGxxxxxxxxxxUAAAAUGACAGUUUGAACAUACAAAACCCACCCCAUUCCUCCCCACACUCAUCGCCCUUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 249.26142883]
[92.50000000 234.26142883]
[92.50000000 219.26142883]
[92.50000000 204.26142883]
[92.50000000 189.26142883]
[92.50000000 174.26142883]
[92.50000000 159.26142883]
[92.50000000 144.26142883]
[92.50000000 129.26142883]
[92.50000000 114.26143646]
[85.91571045 110.67018127]
[73.11134338 118.48352051]
[72.74712372 103.48767090]
[66.16283417 99.89641571]
[53.55170822 108.01795959]
[40.94057846 116.13950348]
[28.32945061 124.26103973]
[15.71832275 132.38258362]
[3.10719419 140.50411987]
[-9.50393391 148.62567139]
[-11.28923512 164.16101074]
[-22.67826462 174.87660217]
[-38.29346848 175.71289062]
[-50.76182938 166.27497864]
[-54.19616699 151.01918030]
[-46.97488785 137.14881897]
[-32.50766373 131.21302795]
[-17.62547684 136.01454163]
[-5.01434803 127.89299774]
[7.59678030 119.77145386]
[20.20790863 111.64991760]
[32.81903458 103.52837372]
[45.43016434 95.40682983]
[58.04129410 87.28528595]
[77.43328857 84.07926178]
[93.23126984 90.83676147]
[94.16690063 75.86596680]
[95.10253143 60.89517975]
[95.57057190 45.90248108]
[95.57057190 30.90248299]
[95.57057190 15.90248299]
[95.57057190 0.90248269]
[95.57057190 -14.09751701]
[85.98784637 -29.78672600]
[95.27182770 -44.64632416]
[94.95977020 -59.64307785]
[94.64771271 -74.63983154]
[81.29511261 -82.10007477]
[73.52077484 -95.15597534]
[73.32656097 -110.24996948]
[80.66448975 -123.32707977]
[93.47653198 -130.92425537]
[93.16447449 -145.92100525]
[92.54050446 -160.90802002]
[91.60487366 -175.87881470]
[90.66924286 -190.84960938]
[89.73361206 -205.82040405]
[88.79798889 -220.79118347]
[73.87403870 -222.70750427]
[59.58253479 -227.41381836]
[46.44010544 -234.74002075]
[34.92184067 -244.42123413]
[25.44411659 -256.10751343]
[18.34955025 -269.37640381]
[13.89460278 -283.74826050]
[12.24031925 -298.70352173]
[13.44650173 -313.70156860]
[17.46954536 -328.20025635]
[24.16402054 -341.67544556]
[33.28792953 -353.64001465]
[44.51144028 -363.66143799]
[57.42884064 -371.37747192]
[71.57316589 -376.50921631]
[86.43311310 -378.87109375]
[101.47150421 -378.37774658]
[116.14469910 -375.04705811]
[129.92228699 -368.99935913]
[142.30621338 -360.45330811]
[152.84880066 -349.71783447]
[161.16894531 -337.18103027]
[166.96588135 -323.29608154]
[170.03004456 -308.56491089]
[170.25068665 -293.52005005]
[167.61981201 -278.70535278]
[162.23251343 -264.65637207]
[154.28358459 -251.88098145]
[144.06031799 -240.84097290]
[131.93232727 -231.93547058]
[118.33800507 -225.48637390]
[103.76877594 -221.72682190]
[104.70440674 -206.75602722]
[105.64003754 -191.78523254]
[106.57566071 -176.81443787]
[107.51129150 -161.84365845]
[110.48522949 -158.03167725]
[111.05266571 -152.29499817]
[108.16123199 -146.23306274]
[108.47328949 -131.23631287]
[121.59027100 -124.17867279]
[129.46583557 -111.41812897]
[129.89967346 -96.32912445]
[122.67517853 -82.96112823]
[109.64447021 -74.95188904]
[109.95652771 -59.95513153]
[110.26857758 -44.95837784]
[118.79860687 -36.32437515]
[119.14385986 -23.79043198]
[110.57057190 -14.09751701]
[110.57057190 0.90248269]
[110.57057190 15.90248299]
[110.57057190 30.90248299]
[110.57057190 45.90248108]
[112.85225677 48.67040634]
[113.87165070 52.70308685]
[113.03920746 57.37849045]
[110.07331848 61.83080673]
[109.13769531 76.80159760]
[108.20206451 91.77239227]
[113.37908936 77.69409180]
[121.95718384 65.38896179]
[133.37547302 55.66154480]
[146.88739014 49.14786530]
[161.60948181 46.27381134]
[176.57914734 47.22730255]
[190.81761169 51.94598770]
[203.39392090 60.12134552]
[213.48577881 71.21884155]
[220.43333435 84.51287842]
[223.78234863 99.13423920]
[223.31382751 114.12692261]
[219.05842590 128.51065063]
[211.29437256 141.34494019]
[200.52929688 151.79067993]
[187.46707153 159.16484070]
[172.96176147 162.98529053]
[157.96176147 163.00224304]
[143.44786072 159.21458435]
[130.36900330 151.86994934]
[119.58035278 141.44857788]
[111.78730774 128.63185120]
[107.50000000 114.26143646]
[107.50000000 129.26142883]
[107.50000000 144.26142883]
[107.50000000 159.26142883]
[107.50000000 174.26142883]
[107.50000000 189.26142883]
[107.50000000 204.26142883]
[107.50000000 219.26142883]
[107.50000000 234.26142883]
[107.50000000 249.26142883]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[14 34]
[15 33]
[16 32]
[17 31]
[18 30]
[19 29]
[20 28]
[36 118]
[37 117]
[38 116]
[39 112]
[40 111]
[41 110]
[42 109]
[43 108]
[45 105]
[46 104]
[47 103]
[52 98]
[53 97]
[54 94]
[55 93]
[56 92]
[57 91]
[58 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
