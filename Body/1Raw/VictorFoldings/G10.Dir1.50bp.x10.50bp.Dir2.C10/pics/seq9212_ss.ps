%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACUUUACAUCCAAACAUCACUUUGGCUUCGAAGCCGCCGCCUGAUACUGGCAUUUUGUAGAxxxxxxxxxxCACCAAAUCUCCACCUCCAUCAUCACCUCAACCCAAAAAGGCAUAAUUAAACUUUACUUCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[94.79282379 415.41360474]
[94.79282379 400.41360474]
[94.79282379 385.41360474]
[94.79282379 370.41360474]
[94.79282379 355.41360474]
[94.79282379 340.41360474]
[94.79282379 325.41360474]
[94.79282379 310.41360474]
[94.79282379 295.41360474]
[94.79282379 280.41360474]
[79.73315430 277.07226562]
[65.78181458 270.47430420]
[53.63362503 260.94494629]
[43.89434052 248.95544434]
[37.05048370 235.09980774]
[33.44500732 220.06544495]
[33.26013565 204.59893799]
[36.50813675 189.46908569]
[43.03057098 175.42860413]
[52.50601196 163.17672729]
[64.46588898 153.32434082]
[78.31765747 146.36360168]
[93.37414551 142.64323425]
[93.06616974 127.64639282]
[79.13453674 119.41735077]
[71.92708588 104.93079376]
[56.99107361 103.54676819]
[42.05506134 102.16274261]
[27.11904907 100.77871704]
[23.12069511 102.80672455]
[19.09375191 103.36106110]
[15.51631069 102.62034607]
[12.75571823 100.90326691]
[11.03175259 98.61875916]
[-3.74036384 96.01403809]
[-18.51247978 93.40931702]
[-31.36828613 102.20510864]
[-46.31221008 99.35311890]
[-54.61842728 87.04286194]
[-69.39054108 84.43814087]
[-84.60724640 90.55238342]
[-97.34194183 80.21992493]
[-94.49425507 64.06991577]
[-78.99365234 58.71610260]
[-66.78582001 69.66602325]
[-52.01370621 72.27075195]
[-39.99805832 63.54378891]
[-24.97992516 65.97491455]
[-15.90775776 78.63719940]
[-1.13564110 81.24192047]
[13.63647556 83.84664917]
[28.50307465 85.84270477]
[43.43908691 87.22673035]
[58.37509918 88.61075592]
[73.31111145 89.99478149]
[81.67401886 78.16975403]
[94.76885223 71.98149872]
[109.21442413 73.02787018]
[117.62783051 60.60955811]
[118.96264648 44.84476089]
[132.50691223 38.64781570]
[133.84173584 22.88301849]
[147.38600159 16.68607330]
[155.79940796 4.26775885]
[164.21281433 -8.15055561]
[172.62623596 -20.56887054]
[181.03964233 -32.98718262]
[169.78262329 -42.93243027]
[159.88984680 -54.23558044]
[151.52374268 -66.71102142]
[144.82170105 -80.15390015]
[139.89376831 -94.34346771]
[136.82086182 -109.04671478]
[135.65345764 -124.02221680]
[136.41072083 -139.02404785]
[139.08020020 -153.80586243]
[143.61807251 -168.12493896]
[149.94982910 -181.74613953]
[157.97149658 -194.44580078]
[167.55133057 -206.01538086]
[178.53204346 -216.26487732]
[190.73330688 -225.02600098]
[203.95478821 -232.15489197]
[217.97935486 -237.53446960]
[232.57670593 -241.07641602]
[247.50717163 -242.72256470]
[262.52554321 -242.44586182]
[277.38522339 -240.25088501]
[291.84222412 -236.17364502]
[305.65911865 -230.28112793]
[318.60900879 -222.67005920]
[330.47930908 -213.46543884]
[341.07501221 -202.81842041]
[350.22219849 -190.90382385]
[357.77062988 -177.91731262]
[363.59634399 -164.07212830]
[367.60369873 -149.59561157]
[369.72689819 -134.72549438]
[369.93103027 -119.70595551]
[368.21279907 -104.78362274]
[364.60040283 -90.20353699]
[359.15313721 -76.20511627]
[351.96047974 -63.01823425]
[343.14050293 -50.85942459]
[332.83810425 -39.92834473]
[321.22238159 -30.40449905]
[308.48413086 -22.44427109]
[294.83251953 -16.17838097]
[280.49166870 -11.70971489]
[265.69714355 -9.11165619]
[250.69181824 -8.42686558]
[235.72213745 -9.66658878]
[221.03390503 -12.81046867]
[206.86830139 -17.80687904]
[193.45796204 -24.57377434]
[185.04454041 -12.15545940]
[176.63113403 0.26285481]
[168.21772766 12.68116951]
[159.80432129 25.09948349]
[159.07127380 39.97603989]
[144.92523193 47.06122589]
[144.19219971 61.93778229]
[130.04614258 69.02297211]
[121.63273621 81.44128418]
[127.87172699 94.03608704]
[127.33306122 108.08116150]
[120.14772797 120.16110992]
[108.06301117 127.33841705]
[108.37098694 142.33525085]
[122.70396423 145.16072083]
[136.12521362 150.91485596]
[148.04382324 159.34153748]
[157.93563843 170.06706238]
[165.36625671 182.61669922]
[170.01017761 196.43566895]
[171.66499329 210.91374207]
[170.26025391 225.41209412]
[165.86042786 239.29156494]
[158.66197205 251.94082642]
[148.98458862 262.80328369]
[137.25694275 271.40151978]
[123.99774933 277.35842896]
[109.79282379 280.41360474]
[109.79282379 295.41360474]
[109.79282379 310.41360474]
[109.79282379 325.41360474]
[109.79282379 340.41360474]
[109.79282379 355.41360474]
[109.79282379 370.41360474]
[109.79282379 385.41360474]
[109.79282379 400.41360474]
[109.79282379 415.41360474]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[23 129]
[24 128]
[26 55]
[27 54]
[28 53]
[29 52]
[34 51]
[35 50]
[36 49]
[39 46]
[40 45]
[58 124]
[59 123]
[61 121]
[63 119]
[64 118]
[65 117]
[66 116]
[67 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
