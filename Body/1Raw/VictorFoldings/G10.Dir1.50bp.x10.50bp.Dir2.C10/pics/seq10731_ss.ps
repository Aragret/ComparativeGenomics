%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCUCCCUAAGCUUCAAACUAGACUACUUCUCCAUAAUAUUCAUCCCUGUAGCAUUGUUCxxxxxxxxxxUCCACCCUUACUACACAAUCAAAGACGCCCUCGGCUUACUUCUCUUCCUUCUCUCCUUAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[64.77187347 498.02413940]
[64.77187347 483.02413940]
[64.77187347 468.02413940]
[64.77187347 453.02413940]
[64.77187347 438.02413940]
[64.77187347 423.02413940]
[64.77187347 408.02413940]
[64.77187347 393.02413940]
[64.77187347 378.02413940]
[64.77187347 363.02413940]
[50.73499680 360.47714233]
[37.35935211 355.50564575]
[25.06031418 348.26275635]
[14.22007275 338.97201538]
[5.17573786 327.92074585]
[-1.79113960 315.45092773]
[-6.46333027 301.94882202]
[-8.69470119 287.83288574]
[-8.41478539 273.54083252]
[-5.63100624 259.51602173]
[-0.42848888 246.19384766]
[7.03254652 233.98800659]
[16.52171516 223.27783203]
[27.74558449 214.39640808]
[40.35674286 207.62025452]
[53.96456146 203.16065979]
[68.14728546 201.15721130]
[68.77126312 186.17019653]
[60.79639435 177.02095032]
[61.23361969 164.48986816]
[70.39481354 155.35058594]
[71.33043671 140.37980652]
[72.26606750 125.40900421]
[64.54198456 112.55060577]
[50.88574219 106.34519958]
[37.22949982 100.13979340]
[23.57325935 93.93438721]
[13.86071301 105.49159241]
[1.38958812 113.99885559]
[-12.91467571 118.82489014]
[-27.99060822 119.61156464]
[-42.71947479 116.30050659]
[-56.00829315 109.13742065]
[-66.87094879 98.65384674]
[-74.50135040 85.62773895]
[-78.33329010 71.02571869]
[-78.08239746 55.93136597]
[-73.76729584 41.46476746]
[-65.70819092 28.69944572]
[-54.50312424 18.58267212]
[-40.98358917 11.86518002]
[-26.15281868 9.04545021]
[-11.11135960 10.33272648]
[3.02461433 15.63148308]
[15.20611954 24.54851723]
[24.52920723 36.42212677]
[30.30204201 50.37121201]
[32.09624100 65.36065674]
[29.77866745 80.27814484]
[43.43490601 86.48355103]
[57.09114838 92.68895721]
[70.74739075 98.89436340]
[80.76287842 81.21135712]
[98.49707794 75.53934479]
[102.20323944 61.00440598]
[105.90940094 46.46946716]
[109.61556244 31.93453217]
[113.32172394 17.39959717]
[99.91517639 10.52848625]
[88.37405396 0.84601194]
[79.27726746 -11.16215801]
[73.08109283 -24.89369965]
[70.09634399 -39.65984344]
[70.47271729 -54.71992493]
[74.19135284 -69.31853485]
[81.06571198 -82.72342682]
[90.75098419 -94.26219940]
[102.76135254 -103.35607910]
[116.49440002 -109.54891968]
[131.26126099 -112.53009033]
[146.32125854 -112.15006256]
[160.91896057 -108.42789459]
[174.32218933 -101.55029297]
[185.85861206 -91.86222839]
[194.94958496 -79.84964752]
[201.13909912 -66.11510468]
[204.11668396 -51.34751892]
[203.73301697 -36.28762054]
[200.00730896 -21.69081116]
[193.12644958 -8.28925800]
[183.43559265 3.24481916]
[171.42082214 12.33287811]
[157.68476868 18.51906586]
[142.91645813 21.49308395]
[127.85665894 21.10575676]
[124.15049744 35.64069366]
[120.44433594 50.17562866]
[116.73817444 64.71056366]
[113.03201294 79.24549866]
[116.55544281 81.93068695]
[119.53789520 85.20630646]
[121.88192749 88.96533203]
[136.69969177 86.63423157]
[151.51744080 84.30312347]
[163.94752502 74.51518250]
[177.72259521 80.18057251]
[192.54034424 77.84947205]
[204.94859314 67.12717438]
[220.34753418 72.76671600]
[222.89607239 88.96662140]
[209.97248840 99.06182098]
[194.87145996 92.66722870]
[180.05369568 94.99833679]
[168.68348694 104.61953735]
[153.84854126 99.12088013]
[139.03079224 101.45198822]
[124.21302795 103.78308868]
[120.88961029 114.96781158]
[112.47287750 123.82241058]
[100.43785858 128.07839966]
[87.23686218 126.34463501]
[86.30123138 141.31542969]
[85.36560059 156.28622437]
[93.95104980 172.54260254]
[83.75827789 186.79417419]
[83.13430023 201.78118896]
[98.48757172 205.41780090]
[112.84553528 211.94891357]
[125.66841125 221.12709045]
[136.47448730 232.60543823]
[144.85826111 245.95065308]
[150.50558472 260.65945435]
[153.20547485 276.17752075]
[152.85801697 291.92041016]
[149.47801208 307.29550171]
[143.19439697 321.72436523]
[134.24528503 334.66458130]
[122.96900940 345.62997437]
[109.79124451 354.20901489]
[95.20899963 360.08020020]
[79.77187347 363.02413940]
[79.77187347 378.02413940]
[79.77187347 393.02413940]
[79.77187347 408.02413940]
[79.77187347 423.02413940]
[79.77187347 438.02413940]
[79.77187347 453.02413940]
[79.77187347 468.02413940]
[79.77187347 483.02413940]
[79.77187347 498.02413940]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[27 126]
[28 125]
[31 123]
[32 122]
[33 121]
[34 62]
[35 61]
[36 60]
[37 59]
[64 99]
[65 98]
[66 97]
[67 96]
[68 95]
[102 117]
[103 116]
[104 115]
[106 113]
[107 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
