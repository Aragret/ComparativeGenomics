%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAAACUUUACAGUCAGAGGUUCAAUUCCUCUUCUUAACAACAUACCCAUGGCCAACCUCCxxxxxxxxxxACAAUCAUGGCAAGCCAACGCCACUUAUCCAGUGAACCACUAUCACGAAAAAAACUCUACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[104.55368042 428.62625122]
[104.55368042 413.62625122]
[104.55368042 398.62625122]
[104.55368042 383.62625122]
[104.55368042 368.62625122]
[104.55368042 353.62625122]
[104.55368042 338.62625122]
[104.55368042 323.62625122]
[104.55368042 308.62625122]
[104.55368042 293.62625122]
[89.94943237 290.32205200]
[76.44020844 283.84753418]
[64.70491028 274.52456665]
[55.33410263 262.81817627]
[48.80026245 249.31347656]
[45.43397522 234.68634033]
[45.40719986 219.66964722]
[48.72449493 205.01649475]
[55.22262955 191.46250916]
[64.57860565 179.68884277]
[76.32570648 170.28796387]
[89.87680817 163.73388672]
[104.55368042 160.35818481]
[104.55368042 145.35818481]
[64.12884521 132.68302917]
[49.42088318 135.62850952]
[34.71292496 138.57398987]
[20.00496101 141.51947021]
[5.29699993 144.46495056]
[-2.04742551 158.27050781]
[-16.56689835 164.07731628]
[-31.40576935 159.14355469]
[-39.55757523 145.79881287]
[-37.17328262 130.34407043]
[-25.37868500 120.07657623]
[-9.74282551 119.84432983]
[2.35151768 129.75698853]
[17.05947876 126.81151581]
[31.76744080 123.86602783]
[46.47540283 120.92054749]
[61.18336487 117.97506714]
[63.18723297 110.74771881]
[48.73254395 106.73998260]
[34.27785873 102.73223877]
[19.29217148 103.38737488]
[14.03829384 89.33757782]
[25.77692223 79.99923706]
[38.28559875 88.27754974]
[52.74028397 92.28529358]
[67.19497681 96.29302979]
[69.19884491 89.06568909]
[58.10752869 78.96704102]
[47.01621246 68.86838531]
[30.88788033 65.90040588]
[25.64975548 50.36032486]
[36.69037247 38.23445129]
[52.65209198 41.99684143]
[57.11486435 57.77707291]
[68.20617676 67.87572479]
[79.29749298 77.97437286]
[93.07987213 72.05441284]
[93.39192963 57.05765533]
[93.70398712 42.06090164]
[94.01604462 27.06414795]
[79.48703003 23.01957893]
[66.42072296 15.48814487]
[55.63848877 4.94327784]
[47.81810379 -7.95216274]
[43.45116425 -22.38755798]
[42.81217957 -37.45549011]
[45.94131470 -52.20877075]
[52.64187622 -65.72000122]
[62.49265671 -77.13984680]
[74.87442780 -85.75045776]
[89.00885773 -91.01055908]
[104.00745392 -92.58949280]
[118.92737579 -90.38800049]
[132.83076477 -84.54448700]
[144.84362793 -75.42626953]
[154.21083069 -63.60652542]
[160.34355164 -49.82825851]
[162.85626221 -34.95758057]
[161.59101868 -19.92927361]
[156.62738037 -5.68803167]
[148.27732849 6.87093019]
[137.06578064 16.95814514]
[123.69748688 23.93952179]
[109.01279449 27.37620354]
[108.70074463 42.37295914]
[108.38868713 57.36971283]
[108.07662964 72.36646271]
[121.24520874 79.54897308]
[133.68464661 71.16683197]
[146.12409973 62.78468704]
[145.68576050 47.36355209]
[153.67387390 34.16530609]
[167.53944397 27.40146255]
[182.85801697 29.23033714]
[194.74150085 39.06834412]
[199.39790344 53.77621460]
[195.34140015 68.66071320]
[183.86640930 78.97225952]
[168.63453674 81.42046356]
[154.50624084 75.22412872]
[142.06678772 83.60626984]
[129.62734985 91.98841095]
[130.94679260 99.37144470]
[144.17469788 92.29878998]
[154.98881531 102.69373322]
[148.44436646 116.19077301]
[133.58564758 114.13749695]
[134.90509033 121.52052307]
[149.47778320 125.07528687]
[164.05049133 128.63005066]
[178.62319946 132.18481445]
[191.11941528 122.78383636]
[206.73208618 123.66630554]
[218.08935547 134.41555786]
[219.82868958 149.95610046]
[211.12882996 162.95019531]
[196.09756470 167.26240540]
[181.83221436 160.85664368]
[175.06843567 146.75750732]
[160.49572754 143.20275879]
[145.92301941 139.64799500]
[131.35032654 136.09323120]
[119.55368042 145.35818481]
[119.55368042 160.35818481]
[134.23056030 163.73388672]
[147.78164673 170.28796387]
[159.52876282 179.68884277]
[168.88473511 191.46250916]
[175.38287354 205.01649475]
[178.70016479 219.66964722]
[178.67338562 234.68634033]
[175.30709839 249.31347656]
[168.77325439 262.81817627]
[159.40245056 274.52456665]
[147.66716003 283.84753418]
[134.15792847 290.32205200]
[119.55368042 293.62625122]
[119.55368042 308.62625122]
[119.55368042 323.62625122]
[119.55368042 338.62625122]
[119.55368042 353.62625122]
[119.55368042 368.62625122]
[119.55368042 383.62625122]
[119.55368042 398.62625122]
[119.55368042 413.62625122]
[119.55368042 428.62625122]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[23 128]
[24 127]
[25 41]
[26 40]
[27 39]
[28 38]
[29 37]
[51 60]
[52 59]
[53 58]
[61 91]
[62 90]
[63 89]
[64 88]
[92 106]
[93 105]
[94 104]
[112 126]
[113 125]
[114 124]
[115 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
