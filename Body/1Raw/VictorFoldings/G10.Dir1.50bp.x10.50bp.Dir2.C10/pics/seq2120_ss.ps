%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACUAGAAAUAACUUUGCAAGGAGAGCCAAAGCUAAGACCCCCGAAACCAGACGAGCUACxxxxxxxxxxCCCUUUCUCCAUAAAAUUCUUCUUAGUAGCUAUUACCUUCUUAUUAUUUGAUCUAGAAAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[145.56562805 416.81607056]
[145.56562805 401.81607056]
[145.56562805 386.81607056]
[145.56562805 371.81607056]
[145.56562805 356.81607056]
[145.56562805 341.81607056]
[145.56562805 326.81607056]
[145.56562805 311.81607056]
[145.56562805 296.81607056]
[145.56562805 281.81607056]
[143.23452759 266.99832153]
[138.62895203 252.72285461]
[125.29608154 246.18296814]
[120.42202759 231.77124023]
[127.37205505 217.83082581]
[122.76648712 203.55537415]
[118.16092682 189.27990723]
[113.55535889 175.00445557]
[99.92536163 163.99430847]
[103.85527039 146.03503418]
[98.95372009 131.85847473]
[94.05216980 117.68191528]
[81.35723877 109.69200134]
[66.45533752 111.40469360]
[51.55343246 113.11737823]
[38.72695160 122.37977600]
[25.19947433 116.14626312]
[10.29757214 117.85895538]
[-0.29295829 131.74340820]
[-17.31010056 133.66719055]
[-30.21485138 122.92823029]
[-45.07789993 124.95056152]
[-57.70651627 135.41239929]
[-72.98480225 129.45372009]
[-75.19577789 113.20430756]
[-62.06496811 103.38014984]
[-47.10023499 110.08751678]
[-32.23718643 108.06517792]
[-25.92317200 96.78998566]
[-14.08263588 91.14409637]
[-0.96280831 93.40199280]
[8.58488178 102.95705414]
[23.48678398 101.24436188]
[35.24738312 92.10447693]
[49.84074402 98.21547699]
[64.74264526 96.50279236]
[79.64454651 94.79010010]
[82.38806152 87.80990601]
[67.41535950 86.90540314]
[63.64879608 72.38600159]
[76.29364777 64.31706238]
[87.87509155 73.84951782]
[90.61861420 66.86931610]
[80.87095642 55.46829987]
[65.41357422 56.82799911]
[52.12642670 48.81354904]
[46.11870575 34.50666428]
[49.70049667 19.40863800]
[61.49452972 9.32496834]
[76.96575928 8.13303089]
[90.16517639 16.29115105]
[96.01734924 30.66236496]
[92.27198029 45.72064590]
[102.01963043 57.12166595]
[116.95394135 55.71936417]
[124.40885162 42.70305634]
[131.86375427 29.68674469]
[139.31866455 16.67043495]
[146.77357483 3.65412641]
[154.22848511 -9.36218357]
[142.62895203 -18.93081665]
[132.81350708 -30.32225609]
[125.06454468 -43.20874786]
[119.60503387 -57.21952057]
[116.59204865 -71.95145416]
[116.11228180 -86.98069000]
[118.17954254 -101.87479401]
[122.73434448 -116.20524597]
[129.64562988 -129.55972290]
[138.71456909 -141.55398560]
[149.68020630 -151.84295654]
[162.22705078 -160.13056946]
[175.99411011 -166.17840576]
[190.58526611 -169.81242371]
[205.58070374 -170.92810059]
[220.54898071 -169.49330139]
[235.05943298 -165.54933167]
[248.69456482 -159.20967102]
[261.06204224 -150.65670776]
[271.80606079 -140.13652039]
[280.61749268 -127.95182800]
[287.24276733 -114.45317841]
[291.49133301 -100.02896881]
[293.24090576 -85.09421539]
[292.44116211 -70.07860565]
[289.11508179 -55.41418457]
[283.35839844 -41.52286530]
[275.33676147 -28.80433846]
[265.28091431 -17.62453461]
[253.48020935 -8.30512047]
[240.27418518 -1.11423576]
[226.04278564 3.74122477]
[211.19549561 6.12155914]
[196.15950012 5.95828104]
[181.36740112 3.25608778]
[167.24479675 -1.90727282]
[159.78988647 11.10903645]
[152.33497620 24.12534523]
[144.88006592 37.14165497]
[137.42515564 50.15796661]
[129.97024536 63.17427444]
[131.29183960 101.73971558]
[108.22872925 112.78036499]
[113.13027954 126.95692444]
[118.03182983 141.13348389]
[129.30183411 147.49279785]
[133.07124329 159.45149231]
[127.83081818 170.39888000]
[132.43638611 184.67434692]
[137.04194641 198.94979858]
[141.64752197 213.22526550]
[155.43412781 220.47560120]
[159.90145874 235.01855469]
[152.90441895 248.11729431]
[157.50997925 262.39276123]
[161.42652893 247.91308594]
[170.22755432 235.76638794]
[182.76690674 227.53446960]
[197.41166687 224.28932190]
[212.25471497 226.45355225]
[225.36311340 233.74531555]
[235.02981567 245.21505737]
[239.99598694 259.36911011]
[239.61488342 274.36425781]
[233.93615723 288.24777222]
[223.69929504 299.21166992]
[210.23742676 305.82815552]
[195.30360413 307.23562622]
[180.84259033 303.25076294]
[168.73757935 294.39251709]
[160.56562805 281.81607056]
[160.56562805 296.81607056]
[160.56562805 311.81607056]
[160.56562805 326.81607056]
[160.56562805 341.81607056]
[160.56562805 356.81607056]
[160.56562805 371.81607056]
[160.56562805 386.81607056]
[160.56562805 401.81607056]
[160.56562805 416.81607056]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 125]
[12 124]
[15 121]
[16 120]
[17 119]
[18 118]
[20 115]
[21 114]
[22 113]
[23 47]
[24 46]
[25 45]
[27 43]
[28 42]
[31 38]
[32 37]
[53 64]
[54 63]
[65 111]
[66 110]
[67 109]
[68 108]
[69 107]
[70 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
