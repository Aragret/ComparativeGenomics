%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAAUCCCCACUAUGCACAUUUUAUUUCUCCAACAUACUCGGAUUCUACCCUAGCAUCACAxxxxxxxxxxAGACCUAACCUGACUAGAAAAGCUAUUACCUAAAACAAUUUCACAGCACCAAAUCUCCACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 301.42300415]
[92.50000000 286.42300415]
[92.50000000 271.42300415]
[92.50000000 256.42300415]
[92.50000000 241.42298889]
[92.50000000 226.42298889]
[92.50000000 211.42298889]
[92.50000000 196.42298889]
[92.50000000 181.42298889]
[92.50000000 166.42298889]
[77.90982819 163.08952332]
[64.42700195 156.59352112]
[52.72736740 147.26057434]
[43.39741898 135.55856323]
[36.90484238 122.07408142]
[33.57509613 107.48306274]
[33.57509613 92.51693726]
[36.90484238 77.92591858]
[43.39741898 64.44142914]
[52.72736740 52.73941803]
[64.42700195 43.40648651]
[77.90982819 36.91047287]
[92.50000000 33.57700729]
[92.50000000 18.57700539]
[92.50000000 3.57700539]
[77.52366638 2.65344143]
[62.63258743 0.80966949]
[47.88325882 -1.94731653]
[33.33162689 -5.60705805]
[19.03289604 -10.15567303]
[5.04130173 -15.57590580]
[-8.59008026 -21.84719658]
[-21.80953979 -28.94575500]
[-34.56692886 -36.84465408]
[-46.81386185 -45.51393127]
[-58.50387192 -54.92070007]
[-69.59262085 -65.02927399]
[-80.03804016 -75.80131531]
[-89.80050659 -87.19595337]
[-98.84299469 -99.16996765]
[-107.13120270 -111.67794037]
[-114.63368225 -124.67241669]
[-121.32197571 -138.10411072]
[-127.17071533 -151.92207336]
[-132.15771484 -166.07386780]
[-136.26405334 -180.50582886]
[-139.47415161 -195.16322327]
[-141.77584839 -209.99041748]
[-143.16038513 -224.93119812]
[-143.62252808 -239.92886353]
[-143.16053772 -254.92652893]
[-141.77613831 -269.86730957]
[-139.47459412 -284.69454956]
[-136.26463318 -299.35195923]
[-132.15843201 -313.78396606]
[-127.17157745 -327.93582153]
[-121.32297516 -341.75381470]
[-114.63481140 -355.18557739]
[-107.13246155 -368.18014526]
[-98.84438324 -380.68820190]
[-89.80200958 -392.66229248]
[-80.03964996 -404.05703735]
[-69.59433746 -414.82916260]
[-58.50569153 -424.93786621]
[-46.81577301 -434.34472656]
[-34.56892776 -443.01412964]
[-21.81161308 -450.91317749]
[-8.59222317 -458.01184082]
[5.03909636 -464.28326416]
[19.03063774 -469.70364380]
[33.32932663 -474.25241089]
[47.88092041 -477.91229248]
[62.63021851 -480.66940308]
[77.52127838 -482.51333618]
[92.49760437 -483.43704224]
[107.50239563 -483.43704224]
[122.47872162 -482.51333618]
[137.36978149 -480.66940308]
[152.11907959 -477.91229248]
[166.67066956 -474.25241089]
[180.96936035 -469.70364380]
[194.96090698 -464.28326416]
[208.59222412 -458.01184082]
[221.81161499 -450.91317749]
[234.56892395 -443.01412964]
[246.81576538 -434.34472656]
[258.50567627 -424.93786621]
[269.59432983 -414.82916260]
[280.03964233 -404.05703735]
[289.80200195 -392.66229248]
[298.84439087 -380.68820190]
[307.13247681 -368.18014526]
[314.63482666 -355.18557739]
[321.32296753 -341.75381470]
[327.17156982 -327.93582153]
[332.15844727 -313.78396606]
[336.26464844 -299.35195923]
[339.47457886 -284.69454956]
[341.77612305 -269.86730957]
[343.16052246 -254.92652893]
[343.62252808 -239.92886353]
[343.16040039 -224.93119812]
[341.77584839 -209.99041748]
[339.47415161 -195.16322327]
[336.26403809 -180.50582886]
[332.15771484 -166.07386780]
[327.17071533 -151.92207336]
[321.32196045 -138.10411072]
[314.63366699 -124.67241669]
[307.13119507 -111.67794037]
[298.84298706 -99.16996765]
[289.80050659 -87.19595337]
[280.03802490 -75.80131531]
[269.59262085 -65.02927399]
[258.50387573 -54.92070007]
[246.81385803 -45.51393127]
[234.56692505 -36.84465408]
[221.80953979 -28.94575500]
[208.59007263 -21.84719658]
[194.95869446 -15.57590580]
[180.96710205 -10.15567303]
[166.66836548 -5.60705805]
[152.11674500 -1.94731653]
[137.36741638 0.80966949]
[122.47633362 2.65344143]
[107.50000000 3.57700539]
[107.50000000 18.57700539]
[107.50000000 33.57700729]
[122.09017181 36.91047287]
[135.57299805 43.40648651]
[147.27262878 52.73941803]
[156.60258484 64.44142914]
[163.09515381 77.92591858]
[166.42491150 92.51693726]
[166.42491150 107.48306274]
[163.09515381 122.07408142]
[156.60258484 135.55856323]
[147.27262878 147.26057434]
[135.57299805 156.59352112]
[122.09017181 163.08952332]
[107.50000000 166.42298889]
[107.50000000 181.42298889]
[107.50000000 196.42298889]
[107.50000000 211.42298889]
[107.50000000 226.42298889]
[107.50000000 241.42298889]
[107.50000000 256.42300415]
[107.50000000 271.42300415]
[107.50000000 286.42300415]
[107.50000000 301.42300415]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[23 128]
[24 127]
[25 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
