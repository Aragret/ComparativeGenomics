%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCUACCAUCACCCUCUACAUCACCGCCCCGACCUUAGCUCUCACCAUCGCUCUUCUACUAxxxxxxxxxxCAGACCUCCUCAUUCUAACCUGAAUCGGAGGACAACCAGUAAGCUACCCUUUUACCAUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-8.79849625 209.20416260]
[-19.88981247 219.30282593]
[-30.98112679 229.40147400]
[-42.07244110 239.50012207]
[-47.06749344 254.51211548]
[-61.68739319 257.35952759]
[-72.77870941 267.45819092]
[-82.87735748 278.54949951]
[-91.89488983 290.53634644]
[-100.91241455 302.52316284]
[-109.92994690 314.51000977]
[-105.25260925 329.30535889]
[-110.19697571 344.01361084]
[-122.86182404 352.97915649]
[-138.37727356 352.75457764]
[-150.77731323 343.42617798]
[-155.29386902 328.58096313]
[-150.19024658 313.92721558]
[-137.42887878 305.09957886]
[-121.91677856 305.49246216]
[-112.89924622 293.50564575]
[-103.88172150 281.51879883]
[-94.86418915 269.53198242]
[-109.51387024 272.75482178]
[-123.63117981 267.68515015]
[-132.88368225 255.87873840]
[-134.43191528 240.95886230]
[-127.80073547 227.50421143]
[-115.02517700 219.64385986]
[-100.02588654 219.79005432]
[-87.40596771 227.89791870]
[-81.03829956 241.47926331]
[-82.87735748 256.36688232]
[-71.78604126 246.26823425]
[-67.58431244 231.97856140]
[-52.17109299 228.40879822]
[-41.07977676 218.31015015]
[-29.98846054 208.21150208]
[-18.89714622 198.11285400]
[-34.93294144 174.53700256]
[-46.35241699 148.41108704]
[-52.76488495 120.62893677]
[-53.95096588 92.14102936]
[-49.87007904 63.92199707]
[-40.66184235 36.93725967]
[-26.64128685 12.11002350]
[-38.53366470 2.96828890]
[-50.42604446 -6.17344522]
[-64.59006500 -0.23407842]
[-79.82411957 -2.18836451]
[-92.03031921 -11.51061058]
[-97.92526245 -25.69318008]
[-95.92323303 -40.92103195]
[-86.56276703 -53.09794998]
[-72.36179352 -58.94840622]
[-57.14029312 -56.89865494]
[-44.99277496 -47.50007248]
[-39.18685913 -33.28082657]
[-41.28431320 -18.06582451]
[-29.39193153 -8.92409039]
[-17.49955177 0.21764337]
[-9.89851284 -8.09708786]
[-1.71053135 -15.83449936]
[7.02066088 -22.95326805]
[16.24843216 -29.41537285]
[25.92350197 -35.18630219]
[35.99419403 -40.23523331]
[46.40672684 -44.53520203]
[57.10548782 -48.06324387]
[68.03334045 -50.80051804]
[79.13191223 -52.73240280]
[90.34194183 -53.84857941]
[101.60355377 -54.14308929]
[112.85659790 -53.61436081]
[124.04097748 -52.26521301]
[135.09695435 -50.10285568]
[145.96549988 -47.13883209]
[156.58854675 -43.38898087]
[166.90937805 -38.87332153]
[176.87284851 -33.61597443]
[186.42576599 -27.64501762]
[195.51710510 -20.99233818]
[204.09831238 -13.69347000]
[212.12355042 -5.78739262]
[219.54997253 2.68366957]
[231.62995911 -6.20868015]
[243.70994568 -15.10102940]
[255.78993225 -23.99337959]
[267.86993408 -32.88573074]
[270.59350586 -45.53626251]
[280.89215088 -52.68863297]
[292.90222168 -50.93756485]
[305.16458130 -59.57668304]
[317.42694092 -68.21579742]
[329.68930054 -76.85491180]
[332.14141846 -92.46781921]
[344.96432495 -101.70624542]
[360.55044556 -99.08920288]
[369.65277100 -86.16933441]
[366.87109375 -70.61177063]
[353.85571289 -61.64653397]
[338.32843018 -64.59254456]
[326.06607056 -55.95343018]
[313.80368042 -47.31431198]
[301.54132080 -38.67519760]
[295.07815552 -22.38938904]
[276.76226807 -20.80574036]
[264.68228149 -11.91339111]
[252.60229492 -3.02104139]
[240.52230835 5.87130833]
[228.44232178 14.76365757]
[234.21948242 24.18579102]
[239.30668640 33.99764633]
[243.67778015 44.14878845]
[247.31030273 54.58703613]
[250.18557739 65.25872803]
[252.28881836 76.10900879]
[253.60922241 87.08209991]
[254.13998413 98.12159729]
[253.87840271 109.17074585]
[252.82579041 120.17275238]
[250.98759460 131.07106018]
[248.37322998 141.80966187]
[244.99615479 152.33332825]
[240.87373352 162.58796692]
[236.02714539 172.52088928]
[230.48130798 182.08100891]
[224.26473999 191.21919250]
[217.40937805 199.88845825]
[209.95046997 208.04425049]
[201.92636108 215.64463806]
[193.37829590 222.65054321]
[184.35021973 229.02597046]
[174.88854980 234.73814392]
[165.04191589 239.75769043]
[154.86091614 244.05882263]
[144.39791870 247.61940002]
[133.70669556 250.42115784]
[122.84219360 252.44966125]
[111.86026764 253.69448853]
[100.81738281 254.14926147]
[89.77029419 253.81163025]
[78.77578735 252.68331909]
[67.89038849 250.77014160]
[57.17004776 248.08193970]
[46.66987610 244.63250732]
[36.44384766 240.43959045]
[26.54452896 235.52474976]
[17.02280998 229.91323853]
[7.92763519 223.63391113]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 39]
[2 38]
[3 37]
[4 36]
[6 34]
[7 33]
[8 23]
[9 22]
[10 21]
[11 20]
[46 61]
[47 60]
[48 59]
[85 111]
[86 110]
[87 109]
[88 108]
[89 107]
[92 105]
[93 104]
[94 103]
[95 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
