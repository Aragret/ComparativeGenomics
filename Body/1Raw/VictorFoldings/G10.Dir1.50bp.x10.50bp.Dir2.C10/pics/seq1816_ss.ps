%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACUUACACUUAGGAGAUUUCAACUUAACUUGACCGCUCUGAGCUAAACCUAGCCCCAAAxxxxxxxxxxUACUUCCUAUUCUACACCCUAGUAGGCUCCCUUCCCCUACUCAUCGCACUAAUUUACACUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 460.24908447]
[92.50000000 445.24908447]
[92.50000000 430.24908447]
[92.50000000 415.24908447]
[92.50000000 400.24908447]
[92.50000000 385.24908447]
[92.50000000 370.24908447]
[92.50000000 355.24908447]
[92.50000000 340.24908447]
[92.50000000 325.24908447]
[77.84561920 322.15957642]
[64.14855957 316.08822632]
[52.00850296 307.29815674]
[41.95753098 296.17163086]
[34.43677902 283.19338989]
[29.77709579 268.92944336]
[28.18446350 254.00257874]
[29.73092079 239.06497192]
[34.35128784 224.76980591]
[41.84592056 211.74270630]
[51.88933182 200.55427551]
[64.04432678 191.69522095]
[77.78102875 185.55471802]
[92.50000000 182.40341187]
[84.76270294 169.67614746]
[92.50000000 155.87596130]
[92.50000000 140.87596130]
[92.50000000 125.87596893]
[69.69306183 111.57811737]
[67.82723999 79.88101196]
[52.84752655 80.66085052]
[37.86781311 81.44069672]
[22.88809776 82.22054291]
[12.49641991 94.12804413]
[-3.27692604 95.11652374]
[-15.07389545 84.59954071]
[-15.89555550 68.81661987]
[-5.25442934 57.13150406]
[10.53629112 56.47675705]
[22.10825157 67.24082947]
[37.08796692 66.46098328]
[52.06768036 65.68113708]
[67.04739380 64.90129089]
[71.74097443 59.05148315]
[56.74104309 59.00705338]
[47.42335129 47.25202560]
[50.80416870 32.63798904]
[64.33772278 26.16937828]
[77.83318329 32.71708679]
[81.12813568 47.35186005]
[85.82171631 41.50204849]
[83.33660126 26.70933914]
[76.98947144 13.11838913]
[67.24182129 1.71736813]
[57.49416733 -9.68365288]
[47.74651337 -21.08467293]
[32.11321640 -26.03766060]
[28.85070992 -42.10900497]
[41.31517792 -52.76588440]
[56.68424606 -47.04541397]
[59.14753342 -30.83232498]
[68.89518738 -19.43130493]
[78.64283752 -8.03028393]
[88.39048767 3.37073708]
[86.03844452 -11.44371128]
[86.97852325 -26.41422462]
[91.16532898 -40.81806564]
[98.39674377 -53.95985413]
[108.32365417 -65.20514679]
[120.46681213 -74.01103973]
[134.23997498 -79.95241547]
[148.97821045 -82.74243927]
[163.97001648 -82.24641418]
[178.49159241 -78.48828125]
[191.84191895 -71.64949036]
[203.37643433 -62.06018448]
[212.53831482 -50.18331528]
[218.88523865 -36.59226990]
[222.11077881 -21.94317818]
[222.05924988 -6.94326687]
[218.73310852 7.68331051]
[212.29293823 21.23042297]
[203.04965210 33.04404831]
[191.44950867 42.55386353]
[178.05250549 49.30075455]
[163.50544739 52.95899963]
[148.51058960 53.35198975]
[133.79187012 50.46075058]
[120.05986023 44.42486572]
[107.97750092 35.53573227]
[98.12931061 24.22422218]
[100.61442566 39.01692963]
[98.21714020 24.20973396]
[104.55403900 10.61401272]
[117.43527985 2.92807126]
[132.40945435 3.80795908]
[144.30189514 12.94961166]
[149.00291443 27.19392395]
[144.88795471 41.61845779]
[133.37904358 51.23848724]
[118.45299530 52.72953033]
[133.38729858 51.32722473]
[148.32160950 49.92492294]
[163.25592041 48.52261734]
[178.19023132 47.12031555]
[193.12452698 45.71801376]
[200.12388611 31.96982574]
[213.45645142 24.20798874]
[228.86787415 24.90927696]
[241.44039917 33.84991074]
[247.16220093 48.17696762]
[244.20747375 63.31873322]
[233.51904297 74.44352722]
[218.50756836 78.00146484]
[203.96313477 72.85723114]
[194.52684021 60.65232086]
[179.59252930 62.05462265]
[164.65821838 63.45692825]
[149.72390747 64.85923004]
[134.78961182 66.26153564]
[119.85530090 67.66384125]
[132.15118408 104.34333801]
[107.50000000 125.87596893]
[107.50000000 140.87596130]
[107.50000000 155.87596130]
[115.23729706 169.67614746]
[107.50000000 182.40341187]
[122.21897125 185.55471802]
[135.95567322 191.69522095]
[148.11067200 200.55427551]
[158.15408325 211.74270630]
[165.64871216 224.76980591]
[170.26907349 239.06497192]
[171.81553650 254.00257874]
[170.22290039 268.92944336]
[165.56321716 283.19338989]
[158.04246521 296.17163086]
[147.99150085 307.29815674]
[135.85144043 316.08822632]
[122.15438080 322.15957642]
[107.50000000 325.24908447]
[107.50000000 340.24908447]
[107.50000000 355.24908447]
[107.50000000 370.24908447]
[107.50000000 385.24908447]
[107.50000000 400.24908447]
[107.50000000 415.24908447]
[107.50000000 430.24908447]
[107.50000000 445.24908447]
[107.50000000 460.24908447]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[24 127]
[26 125]
[27 124]
[28 123]
[30 43]
[31 42]
[32 41]
[33 40]
[51 92]
[52 91]
[53 64]
[54 63]
[55 62]
[56 61]
[101 121]
[102 120]
[103 119]
[104 118]
[105 117]
[106 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
