%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGCAGUCAUUCUCAUAAUCGCCCACGGGCUUACAUCCUCAUUACUAUUCUGCCUAGCAAACxxxxxxxxxxUAUCCUUCUUGCUCAUCAGUUGAUGAUACGCCCGAGCAGAUGCCAACACAGCAGCCAUUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[137.79537964 561.18591309]
[137.48332214 546.18920898]
[137.17126465 531.19244385]
[136.85920715 516.19567871]
[136.54714966 501.19891357]
[136.23509216 486.20217896]
[135.92303467 471.20541382]
[135.61097717 456.20867920]
[135.29891968 441.21191406]
[132.50659180 426.47412109]
[127.31118011 412.40258789]
[122.11576843 398.33105469]
[116.92034912 384.25955200]
[113.21664429 398.79510498]
[104.01009369 410.63739014]
[90.83656311 417.81082153]
[75.89369202 419.11871338]
[61.67428589 414.34289551]
[50.55046082 404.28005981]
[44.37792206 390.60891724]
[44.18638611 375.61013794]
[50.00780487 361.78585815]
[60.87103653 351.44226074]
[74.96385193 346.30487061]
[89.93524933 347.23077393]
[103.28766632 354.06546021]
[112.79296112 365.66751099]
[111.54608154 350.71942139]
[110.14378357 335.78512573]
[108.58619690 320.86621094]
[100.04347992 315.11697388]
[96.02357483 305.39791870]
[98.09394073 294.86145020]
[105.80229187 287.07257080]
[104.86666870 272.10177612]
[103.93103790 257.13098145]
[102.99540710 242.16020203]
[102.05978394 227.18940735]
[93.54367828 214.96954346]
[100.40512848 200.71362305]
[99.46949768 185.74282837]
[98.37818909 170.78257751]
[97.13130951 155.83450317]
[95.88443756 140.88641357]
[94.63756561 125.93832397]
[84.45400238 121.44467926]
[77.01594543 113.16379547]
[73.63699341 102.55812073]
[74.91387939 91.50067139]
[62.65150833 82.86154938]
[46.27914047 81.92475891]
[39.14691544 67.15779114]
[48.59185791 53.75163269]
[64.89781952 55.49739456]
[71.29062653 70.59918213]
[83.55299377 79.23829651]
[89.29399872 75.77328491]
[95.72119904 73.86106110]
[97.58881378 58.97777939]
[99.45642853 44.09450150]
[88.30839539 33.46305466]
[85.58987427 18.48096466]
[92.13718414 4.93117666]
[105.25073242 -2.08116031]
[107.11834717 -16.96443939]
[108.98596191 -31.84772110]
[110.85356903 -46.73099899]
[112.72118378 -61.61428070]
[98.86469269 -67.62879944]
[87.26486206 -77.30456543]
[78.86203003 -89.85721588]
[74.33737183 -104.26916504]
[74.05769348 -119.37209320]
[78.04566193 -133.94168091]
[85.97798920 -146.79682922]
[97.21163177 -156.89543152]
[110.83594513 -163.41883850]
[125.74645233 -165.83824158]
[140.73442078 -163.95748901]
[154.58486938 -157.92906189]
[166.17497253 -148.24163818]
[174.56520081 -135.68055725]
[179.07536316 -121.26406860]
[179.33987427 -106.16086578]
[175.33728027 -91.59529114]
[167.39202881 -78.74811554]
[156.14825439 -68.66080475]
[142.51739502 -62.15108109]
[127.60446167 -59.74666595]
[125.73685455 -44.86338806]
[123.86923981 -29.98010635]
[122.00162506 -15.09682751]
[120.13401031 -0.21354720]
[131.10839844 9.82143879]
[134.10485840 24.56881714]
[127.76889038 38.41471481]
[114.33970642 45.96211243]
[112.47209167 60.84539413]
[110.60447693 75.72867584]
[124.67111969 90.36215973]
[124.24884796 110.65577698]
[109.58564758 124.69144440]
[110.83252716 139.63954163]
[112.07939911 154.58761597]
[113.32627106 169.53570557]
[117.17977142 177.89048767]
[114.44029236 184.80720520]
[115.37591553 199.77799988]
[123.95893860 213.06867981]
[117.03057098 226.25378418]
[117.96620178 241.22457886]
[118.90183258 256.19537354]
[119.83745575 271.16616821]
[120.77308655 286.13696289]
[132.69541931 302.33898926]
[123.50511169 319.30862427]
[125.06269073 334.22753906]
[129.08917236 342.50033569]
[126.49417114 349.47253418]
[127.74104309 364.42062378]
[130.99186707 379.06414795]
[136.18728638 393.13565063]
[141.38270569 407.20718384]
[146.57812500 421.27868652]
[149.74989319 406.61785889]
[157.66317749 393.87503052]
[169.39790344 384.53176880]
[183.58967590 379.67443848]
[198.58842468 379.86779785]
[212.65026855 385.08932495]
[224.14024353 394.73196411]
[231.72242737 407.67456055]
[234.51524353 422.41226196]
[232.19395447 437.23156738]
[225.02848816 450.40942383]
[213.85194397 460.41366577]
[199.96380615 466.08108521]
[184.97885132 466.75277710]
[170.63935852 462.35061646]
[158.61257935 453.38644409]
[150.29566956 440.89987183]
[150.60772705 455.89660645]
[150.91978455 470.89337158]
[151.23184204 485.89010620]
[151.54389954 500.88687134]
[151.85595703 515.88360596]
[152.16801453 530.88037109]
[152.48007202 545.87713623]
[152.79212952 560.87390137]
[155.38313293 580.08160400]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 124]
[11 123]
[12 122]
[13 121]
[27 120]
[28 119]
[29 117]
[30 116]
[34 114]
[35 113]
[36 112]
[37 111]
[38 110]
[40 108]
[41 107]
[42 105]
[43 104]
[44 103]
[45 102]
[49 56]
[50 55]
[58 99]
[59 98]
[60 97]
[64 93]
[65 92]
[66 91]
[67 90]
[68 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
