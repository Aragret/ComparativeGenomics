%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUCACCAGUCAAAGCGAACUACUAUACUCAAUUGAUCCAAUAACUUGACCAACGGAACAAxxxxxxxxxxUAAUUGAAAACAAAAUACUCAAAUGGGCCUGUCCUUGUAGUAUAAACUAAUACACCAGUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[73.06324005 265.51800537]
[73.06324005 250.51802063]
[73.06324005 235.51802063]
[73.06324005 220.51802063]
[73.06324005 205.51802063]
[73.06324005 190.51802063]
[73.06324005 175.51802063]
[73.06324005 160.51802063]
[73.06324005 145.51802063]
[73.06324005 130.51802063]
[72.07176208 145.48521423]
[62.12588882 156.71372986]
[47.38780975 159.50462341]
[34.02517319 152.68994141]
[27.63002014 139.12152100]
[30.87862206 124.47752380]
[42.41149139 114.88623047]
[57.40351868 114.36180115]
[42.41082001 113.89376068]
[27.41812515 113.42572021]
[12.42542934 112.95767212]
[-2.56726646 112.48963165]
[-17.43031311 114.51197052]
[-31.75291061 118.96878052]
[-33.93939590 134.07447815]
[-42.47058868 146.73075867]
[-55.65261459 154.42471313]
[-70.86817169 155.62870789]
[-85.09619904 150.10368347]
[-95.51171112 138.94662476]
[-100.04670715 124.37279510]
[-97.80075073 109.27582550]
[-89.21978760 96.65323639]
[-76.00756836 89.01125336]
[-60.78738403 87.86718750]
[-46.58122635 93.44820404]
[-36.20972824 104.64618683]
[-21.88712883 100.18936920]
[-21.73110008 92.69099426]
[-21.41904449 77.69423676]
[-21.26301575 70.19586182]
[-35.38782120 65.14710999]
[-49.51262283 60.09835052]
[-63.63742447 55.04959488]
[-80.58750153 55.41195679]
[-85.62795258 39.22460938]
[-71.46854401 29.90003967]
[-58.58866882 40.92478943]
[-44.46386719 45.97354889]
[-30.33906364 51.02230453]
[-16.21426010 56.07106018]
[-5.27799082 65.81571960]
[0.56368333 77.25322723]
[1.37762415 88.40432739]
[-2.09922433 97.49694061]
[12.89347172 97.96498108]
[27.88616753 98.43302155]
[42.87886429 98.90106201]
[57.87155914 99.36910248]
[102.17568207 78.57200623]
[109.89976501 65.71360779]
[117.62385559 52.85520172]
[119.37956238 43.82362747]
[125.64475250 39.81201172]
[133.63467407 27.11708450]
[141.62458801 14.42215443]
[143.56781006 5.42905998]
[149.91510010 1.54865324]
[158.16738892 -10.97730923]
[146.87876892 -22.00070381]
[137.93386841 -34.99282455]
[131.66795349 -49.46360779]
[128.31533813 -64.86762238]
[128.00051880 -80.62463379]
[130.73362732 -96.14144135]
[136.41006470 -110.83422852]
[144.81454468 -124.15052795]
[155.62919617 -135.58996582]
[168.44567871 -144.72311401]
[182.78051758 -151.20756531]
[198.09335327 -154.80079651]
[213.80737305 -155.36924744]
[229.33096313 -152.89321899]
[244.08001709 -147.46763611]
[251.80410767 -160.32603455]
[259.52819824 -173.18444824]
[259.27133179 -189.58157349]
[273.48028564 -197.76925659]
[287.53805542 -189.32469177]
[286.98324585 -172.93493652]
[272.38659668 -165.46035767]
[264.66250610 -152.60195923]
[256.93841553 -139.74356079]
[267.65966797 -130.33206177]
[276.56561279 -119.18273926]
[283.37902832 -106.64067841]
[287.88742065 -93.09435272]
[289.94970703 -78.96360779]
[289.50073242 -64.68663025]
[286.55310059 -50.70637512]
[281.19702148 -37.45679474]
[273.59753418 -25.34939384]
[263.98928833 -14.76044655]
[252.66944885 -6.01929331]
[239.98838806 0.60189760]
[226.33894348 4.89660454]
[212.14414978 6.73039293]
[197.84420776 6.04512548]
[183.88281250 2.86080241]
[170.69334412 -2.72501969]
[162.44105530 9.80094242]
[154.31951904 22.41207123]
[146.32958984 35.10699844]
[138.33967590 47.80192947]
[130.48225403 60.57928848]
[122.75817108 73.43769073]
[115.03408813 86.29608917]
[119.49089813 100.61869049]
[133.14714050 106.82409668]
[146.80337524 113.02950287]
[160.45962524 119.23490906]
[176.72019958 117.10752869]
[186.47669983 130.28868103]
[179.69247437 145.21871948]
[163.34655762 146.53890991]
[154.25421143 132.89115906]
[140.59797668 126.68574524]
[126.94173431 120.48033905]
[113.28549194 114.27493286]
[106.97992706 118.33570099]
[115.98937988 130.32861328]
[124.99882507 142.32151794]
[134.00827026 154.31442261]
[143.67350769 165.78540039]
[137.38832092 179.40510559]
[122.38858795 179.49377441]
[115.94294739 165.94845581]
[108.75156403 152.78471375]
[101.56018066 139.62098694]
[94.36879730 126.45724487]
[88.06324005 130.51802063]
[88.06324005 145.51802063]
[88.06324005 160.51802063]
[88.06324005 175.51802063]
[88.06324005 190.51802063]
[88.06324005 205.51802063]
[88.06324005 220.51802063]
[88.06324005 235.51802063]
[88.06324005 250.51802063]
[88.06324005 265.51800537]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[18 59]
[19 58]
[20 57]
[21 56]
[22 55]
[23 38]
[24 37]
[41 51]
[42 50]
[43 49]
[44 48]
[60 117]
[61 116]
[62 115]
[64 114]
[65 113]
[66 112]
[68 111]
[69 110]
[84 93]
[85 92]
[86 91]
[118 129]
[119 128]
[120 127]
[121 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
