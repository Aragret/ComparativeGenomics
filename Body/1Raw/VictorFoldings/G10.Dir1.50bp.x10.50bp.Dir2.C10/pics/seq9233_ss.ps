%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACAUCACUUUGGCUUCGAAGCCGCCGCCUGAUACUGGCAUUUUGUAGAUGUGGUUUGACUxxxxxxxxxxCUACUCCAAUGCUAAAACUAAUCGUCCCAACAAUUAUAUUACUACCACUGACAUGACUUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[91.50547791 251.20237732]
[91.50547791 236.20237732]
[91.50547791 221.20237732]
[91.50547791 206.20237732]
[91.50547791 191.20237732]
[91.50547791 176.20237732]
[91.50547791 161.20237732]
[91.50547791 146.20237732]
[91.50547791 131.20237732]
[91.50547791 116.20237732]
[90.75575256 112.63687897]
[90.84063721 109.25379181]
[91.68296051 106.21611023]
[76.72270966 107.30741882]
[61.76246643 108.39872742]
[46.81437683 109.64560699]
[31.88006973 111.04791260]
[25.54589653 129.00553894]
[9.96638203 141.29110718]
[-10.56177902 143.43380737]
[-29.77651787 133.92521667]
[-43.16280365 140.69332886]
[-56.54908752 147.46144104]
[-69.93537140 154.22955322]
[-78.45211029 168.24374390]
[-94.83879852 167.60466003]
[-102.23822021 152.96974182]
[-93.03848267 139.39414978]
[-76.70349121 140.84327698]
[-63.31720352 134.07516479]
[-49.93091965 127.30704498]
[-36.54463196 120.53893280]
[-39.18349838 105.77287292]
[-54.08539963 104.06018066]
[-68.98730469 102.34749603]
[-78.07067108 114.73248291]
[-92.13604736 120.90182495]
[-107.39991760 119.19599152]
[-119.75637054 110.07385254]
[-125.88159943 95.98920441]
[-124.12792969 80.73075867]
[-114.96709442 68.40295410]
[-100.86331940 62.32191086]
[-85.61045074 64.12339783]
[-73.31141663 73.32282257]
[-67.27461243 87.44559479]
[-52.37271118 89.15827942]
[-37.47080612 90.87097168]
[-27.77089691 78.72513580]
[-14.42075443 71.54238129]
[0.29488701 70.21092987]
[13.98643780 74.64546204]
[24.54733658 83.84806061]
[30.47776604 96.11360168]
[45.41207504 94.71129608]
[51.81901550 90.93019867]
[60.67115402 93.43848419]
[75.63140106 92.34717560]
[90.59165192 91.25585938]
[104.18260193 84.90872955]
[114.62241364 74.13792419]
[125.06222534 63.36711502]
[135.50204468 52.59630585]
[145.94184875 41.82549667]
[136.29238892 30.32366943]
[127.87673187 17.89062500]
[120.78407288 4.65815783]
[115.08959961 -9.23345852]
[110.85367584 -23.63696480]
[108.12121582 -38.39967728]
[106.92117310 -53.36510086]
[107.26627350 -68.37459564]
[109.15285492 -83.26905060]
[112.56092834 -97.89057922]
[117.45435333 -112.08418274]
[123.78127289 -125.69940186]
[131.47460938 -138.59190369]
[140.45280457 -150.62503052]
[150.62068176 -161.67121887]
[161.87046814 -171.61335754]
[174.08290100 -180.34608459]
[187.12852478 -187.77680969]
[200.86906433 -193.82676697]
[215.15882874 -198.43180847]
[229.84635925 -201.54315186]
[244.77595520 -203.12777710]
[259.78936768 -203.16891479]
[274.72741699 -201.66612244]
[289.43179321 -198.63531494]
[303.74658203 -194.10864258]
[317.52005005 -188.13407898]
[330.60620117 -180.77494812]
[342.86630249 -172.10928345]
[354.17041016 -162.22892761]
[364.39868164 -151.23863220]
[373.44265747 -139.25488281]
[381.20654297 -126.40473175]
[387.60797119 -112.82438660]
[392.57910156 -98.65781403]
[396.06723022 -84.05517578]
[398.03543091 -69.17127991]
[398.46276855 -54.16390610]
[397.34475708 -39.19213104]
[394.69320679 -24.41466522]
[390.53628540 -9.98816299]
[384.91802979 3.93444943]
[377.89797974 17.20558357]
[369.55056763 29.68455887]
[359.96429443 41.23908997]
[349.24075317 51.74669647]
[337.49362183 61.09598541]
[324.84747314 69.18785095]
[311.43627930 75.93652344]
[297.40228271 81.27044678]
[282.89422607 85.13309479]
[268.06588745 87.48350525]
[253.07446289 88.29677582]
[238.07888794 87.56428528]
[223.23809814 85.29378510]
[208.70942688 81.50936127]
[194.64689636 76.25111389]
[181.19955444 69.57479858]
[168.50997925 61.55117798]
[156.71266174 52.26530838]
[146.27284241 63.03611755]
[135.83303833 73.80693054]
[125.39322662 84.57773590]
[114.95340729 95.34854126]
[126.97148132 86.37268829]
[141.64625549 83.26605225]
[156.27066040 86.60170746]
[168.14694214 95.76433563]
[175.08430481 109.06369781]
[175.80297852 124.04647064]
[170.17041016 137.94877625]
[159.22564697 148.20606995]
[144.98764038 152.92617798]
[130.08290100 151.23837280]
[117.26089478 143.45402527]
[108.88689423 131.00910950]
[106.50547791 116.20237732]
[106.50547791 131.20237732]
[106.50547791 146.20237732]
[106.50547791 161.20237732]
[106.50547791 176.20237732]
[106.50547791 191.20237732]
[106.50547791 206.20237732]
[106.50547791 221.20237732]
[106.50547791 236.20237732]
[106.50547791 251.20237732]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[13 59]
[14 58]
[15 57]
[16 55]
[17 54]
[21 32]
[22 31]
[23 30]
[24 29]
[33 48]
[34 47]
[35 46]
[60 128]
[61 127]
[62 126]
[63 125]
[64 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
