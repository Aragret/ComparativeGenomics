%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCUAAUCAACUGGCUUCAAUCUACUUCUCCCGCCGCCGGGAAAAAAGGCGGGAGAAGCCxxxxxxxxxxUUGUAUUUCAACUACAAGAACACCAAUGACCCCAAUACGCAAAACUAACCCCCUAAUAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[227.65403748 460.77169800]
[227.34197998 445.77493286]
[227.02993774 430.77819824]
[226.71788025 415.78143311]
[226.40582275 400.78469849]
[226.09376526 385.78793335]
[225.78170776 370.79116821]
[225.46965027 355.79443359]
[225.15759277 340.79766846]
[221.75462341 326.18878174]
[215.40748596 312.59783936]
[197.10742188 313.23449707]
[180.29896545 305.84381104]
[168.33222961 291.85107422]
[163.61303711 274.00207520]
[167.11932373 255.82440186]
[178.19888306 240.93032837]
[170.74397278 227.91401672]
[163.28906250 214.89770508]
[151.66625977 211.40232849]
[145.36148071 200.56402588]
[148.24671936 187.94938660]
[141.06420898 174.78080750]
[133.88169861 161.61221313]
[118.44036102 153.33183289]
[118.95836639 134.95489502]
[111.50345612 121.93859100]
[104.04854584 108.92227936]
[101.69944000 112.97518158]
[97.30236053 116.15040588]
[91.24906158 117.60759735]
[84.23921204 116.68296814]
[77.20457458 112.99360657]
[71.20003510 106.51093292]
[67.27343750 97.59348297]
[54.66230774 89.47193909]
[42.05117798 81.35039520]
[29.44005013 73.22885132]
[16.82892227 65.10731506]
[4.21779394 56.98577118]
[-8.39333439 48.86422729]
[-21.00446320 40.74268341]
[-33.61558914 32.62114334]
[-46.22671890 24.49960136]
[-58.83784866 16.37805939]
[-71.82420349 24.39786339]
[-87.00506592 25.98034668]
[-101.36625671 20.81130791]
[-112.05635071 9.91706085]
[-116.95282745 -4.53933144]
[-115.08348083 -19.68754387]
[-106.81948090 -32.51988602]
[-93.80164337 -40.48848724]
[-78.61466980 -42.01117706]
[-64.27394104 -36.78562164]
[-53.62683105 -25.84936523]
[-48.78732300 -11.37380219]
[-50.71630478 3.76693058]
[-38.10517502 11.88847256]
[-25.49404907 20.01001549]
[-12.88292027 28.13155746]
[-0.27179214 36.25309753]
[12.33933640 44.37464142]
[24.95046425 52.49618530]
[37.56159210 60.61772537]
[50.17272186 68.73926544]
[62.78384781 76.86080933]
[75.39497375 84.98235321]
[82.71672821 83.35694122]
[75.54309845 70.18351746]
[68.36946106 57.01009750]
[58.97072601 45.31977081]
[58.96059799 30.31977463]
[68.34353638 18.61676598]
[82.98689270 15.36526203]
[96.44107819 21.99736977]
[102.78028107 35.59201813]
[99.21130371 50.16327667]
[98.28576660 65.13469696]
[97.36022949 80.10611725]
[104.68197632 78.48069763]
[112.67189789 65.78577423]
[120.66181183 53.09084320]
[128.65173340 40.39591217]
[136.64164734 27.70098305]
[131.68559265 12.86954594]
[137.47055054 -1.65864134]
[151.26504517 -9.02381325]
[166.55575562 -5.74836063]
[176.12284851 6.62114716]
[175.44905090 22.24420738]
[164.85249329 33.74408722]
[149.33657837 35.69089890]
[141.34666443 48.38582611]
[133.35673523 61.08075714]
[125.36682892 73.77568817]
[117.37690735 86.47061920]
[117.06484985 101.46736908]
[124.51976013 114.48368073]
[131.97467041 127.49999237]
[144.23149109 131.65017700]
[150.16119385 142.69815063]
[147.05027771 154.42971802]
[154.23278809 167.59829712]
[161.41529846 180.76687622]
[177.34056091 189.95198059]
[176.30537415 207.44279480]
[183.76028442 220.45910645]
[191.21519470 233.47541809]
[202.89109802 231.22000122]
[214.70967102 232.34906006]
[225.71139526 236.75994873]
[235.00617981 244.08403015]
[241.84535217 253.71746826]
[245.68199158 264.87097168]
[246.21456909 276.63449097]
[243.41073608 288.05145264]
[237.50898743 298.19653320]
[228.99844360 306.25070190]
[235.34556580 319.84164429]
[236.99172974 304.93225098]
[242.69789124 291.05999756]
[252.01872253 279.30746460]
[264.22683716 270.59182739]
[278.36950684 265.59329224]
[293.34298706 264.70196533]
[307.97879028 267.98733521]
[321.13467407 275.19305420]
[331.78396606 285.75680542]
[339.09558105 298.85412598]
[342.49893188 313.46295166]
[341.72839355 328.44314575]
[336.84411621 342.62567139]
[328.22726440 354.90368652]
[316.55032349 364.31903076]
[302.72454834 370.13690186]
[287.82891846 371.90328979]
[273.02587891 369.48034668]
[259.47073364 363.05712891]
[248.22128296 353.13491821]
[240.15434265 340.48562622]
[240.46640015 355.48236084]
[240.77845764 370.47912598]
[241.09051514 385.47586060]
[241.40257263 400.47262573]
[241.71463013 415.46939087]
[242.02668762 430.46612549]
[242.33874512 445.46289062]
[242.65080261 460.45965576]
[245.24179077 479.66735840]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 120]
[11 119]
[17 109]
[18 108]
[19 107]
[22 105]
[23 104]
[24 103]
[26 100]
[27 99]
[28 98]
[35 68]
[36 67]
[37 66]
[38 65]
[39 64]
[40 63]
[41 62]
[42 61]
[43 60]
[44 59]
[45 58]
[81 97]
[82 96]
[83 95]
[84 94]
[85 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
