%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACCCUGACUUCCCUAAUUCCCCCCAUCCUUACCACCCUCGUUAACCCUAACAAAAAAAACUCAUxxxxxxxxxxACUAGGCCUCCUCCUAGCAGCAGCAGGCAAAUCAGCCCAAUUAGGUCUCCACCCCUGACUCCCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-33.18162918 268.93719482]
[-42.87317657 280.38592529]
[-52.56472778 291.83468628]
[-62.25627518 303.28344727]
[-71.94782257 314.73217773]
[-81.63937378 326.18093872]
[-90.87686157 337.99908447]
[-99.64620972 350.16867065]
[-108.41556549 362.33822632]
[-117.18492126 374.50781250]
[-125.95426941 386.67736816]
[-134.72361755 398.84695435]
[-130.70623779 413.95968628]
[-137.38978577 428.09701538]
[-151.61851501 434.58374023]
[-166.67402649 430.35699463]
[-175.44760132 417.41256714]
[-173.79660034 401.86239624]
[-162.50059509 391.04876709]
[-146.89318848 390.07760620]
[-138.12384033 377.90802002]
[-129.35449219 365.73846436]
[-120.58513641 353.56887817]
[-111.81578064 341.39932251]
[-103.04643250 329.22973633]
[-103.39652252 326.39999390]
[-102.61792755 323.25823975]
[-100.58491516 320.24450684]
[-97.33720398 317.83645630]
[-93.08812714 316.48937988]
[-83.39657593 305.04064941]
[-73.70502472 293.59188843]
[-64.01347351 282.14312744]
[-54.32192612 270.69439697]
[-44.63037872 259.24563599]
[-58.29187393 245.67361450]
[-70.68491364 230.93426514]
[-81.71018982 215.14567566]
[-91.27935791 198.43437195]
[-99.31572723 180.93429565]
[-105.75490570 162.78565979]
[-110.54529572 144.13388062]
[-113.64849854 125.12845612]
[-115.03965759 105.92166138]
[-114.70761871 86.66741943]
[-112.65505219 67.52001190]
[-108.89839172 48.63287735]
[-103.46775818 30.15736961]
[-96.40665436 12.24153709]
[-87.77166748 -4.97105265]
[-77.63199615 -21.34247017]
[-89.71543121 -30.23013496]
[-101.79886627 -39.11780167]
[-113.88230133 -48.00546646]
[-130.23213196 -49.27632141]
[-137.06138611 -64.18582916]
[-127.34470367 -77.39636230]
[-111.07778168 -75.31806183]
[-104.99462891 -60.08890152]
[-92.91120148 -51.20123672]
[-80.82776642 -42.31357193]
[-68.74433136 -33.42590332]
[-60.93625259 -42.74678040]
[-52.61402130 -51.61161041]
[-43.80422592 -59.99207687]
[-34.53500748 -67.86140442]
[-24.83598137 -75.19445801]
[-14.73813248 -81.96780396]
[-4.27372122 -88.15980530]
[6.52381992 -93.75067139]
[17.61999702 -98.72255707]
[28.97935677 -103.05957031]
[40.56561279 -106.74784851]
[52.34174728 -109.77561951]
[64.27014160 -112.13320923]
[76.31268311 -113.81307220]
[88.43090057 -114.80986023]
[100.58607483 -115.12037659]
[112.73937988 -114.74363708]
[124.85198212 -113.68083191]
[136.88519287 -111.93537140]
[148.80056763 -109.51282501]
[160.56002808 -106.42093658]
[172.12600708 -102.66957855]
[183.46157837 -98.27073669]
[194.53050232 -93.23847198]
[205.29740906 -87.58884430]
[213.09117126 -100.40513611]
[220.88493347 -113.22142792]
[228.67869568 -126.03771973]
[236.47245789 -138.85400391]
[232.48751831 -154.14765930]
[240.55595398 -167.73721313]
[255.89088440 -171.56022644]
[269.39437866 -163.34857178]
[273.05505371 -147.97409058]
[264.70108032 -134.55816650]
[249.28874207 -131.06025696]
[241.49497986 -118.24395752]
[233.70121765 -105.42766571]
[225.90747070 -92.61137390]
[218.11370850 -79.79508972]
[233.39877319 -68.76577759]
[247.65971375 -56.44081497]
[260.78704834 -42.91482162]
[272.67996216 -28.29164505]
[283.24719238 -12.68354607]
[292.40762329 3.78964806]
[300.09085083 21.00146866]
[306.23797607 38.81977844]
[310.80175781 57.10778046]
[325.59588623 54.63126755]
[340.39004517 52.15475082]
[349.36175537 39.14382172]
[364.92068481 36.36986160]
[377.83602905 45.47861481]
[380.44534302 61.06601715]
[371.20056152 73.88433838]
[355.58642578 76.32869720]
[342.86657715 66.94889832]
[328.07241821 69.42541504]
[313.27825928 71.90193176]
[314.56759644 84.57727051]
[315.10430908 97.30670929]
[314.88650513 110.04558563]
[313.91491699 122.74923706]
[312.19299316 135.37307739]
[309.72674561 147.87284851]
[306.52484131 160.20469666]
[302.59851074 172.32536316]
[297.96154785 184.19233704]
[292.63015747 195.76399231]
[286.62310791 206.99972534]
[279.96142578 217.86013794]
[272.66848755 228.30712891]
[264.76986694 238.30406189]
[256.29330444 247.81585693]
[247.26849365 256.80917358]
[237.72711182 265.25241089]
[227.70262146 273.11602783]
[217.23019409 280.37240601]
[206.34655762 286.99606323]
[195.08988953 292.96380615]
[183.49967957 298.25469971]
[171.61656189 302.85015869]
[159.48223877 306.73410034]
[147.13928223 309.89285278]
[134.63096619 312.31536865]
[122.00116730 313.99316406]
[109.29420471 314.92031860]
[96.55463409 315.09359741]
[83.82715607 314.51239014]
[71.15640259 313.17871094]
[58.58682251 311.09729004]
[46.16250992 308.27542114]
[33.92704391 304.72296143]
[21.92334366 300.45239258]
[10.19351292 295.47866821]
[-1.22130334 289.81930542]
[-12.28106499 283.49407959]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 35]
[2 34]
[3 33]
[4 32]
[5 31]
[6 30]
[7 25]
[8 24]
[9 23]
[10 22]
[11 21]
[12 20]
[51 62]
[52 61]
[53 60]
[54 59]
[87 102]
[88 101]
[89 100]
[90 99]
[91 98]
[111 122]
[112 121]
[113 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
