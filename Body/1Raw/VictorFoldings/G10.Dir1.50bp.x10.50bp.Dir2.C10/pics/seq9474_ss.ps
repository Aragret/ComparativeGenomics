%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAUGUCAUCCCUCUUAUUAAUCAUCAUCCUAGCCCUAAGUCUGGCCUAUGAGUGACUACAAxxxxxxxxxxACAUCGGCAUUAUCCUCCUGCUUGCAACUAUAGCAACAGCCUUCAUAGGCUAUGUCCUCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[117.65353394 264.45989990]
[117.65353394 249.45988464]
[117.65353394 234.45988464]
[117.65353394 219.45988464]
[117.65353394 204.45988464]
[117.65353394 189.45988464]
[117.65353394 174.45988464]
[117.65353394 159.45988464]
[117.65353394 144.45988464]
[117.65353394 129.45988464]
[110.97448730 126.04810333]
[90.93733978 115.81274414]
[78.78400421 124.60458374]
[66.63066864 133.39642334]
[71.06159210 147.87556458]
[70.54856873 163.00883484]
[65.14725494 177.15466309]
[55.44354248 188.77862549]
[42.49001312 196.61985779]
[27.69177055 199.82777405]
[12.65401936 198.05442810]
[-0.99205816 191.49215698]
[-11.76623821 180.85281372]
[-18.49981689 167.29045105]
[-20.46238899 152.27622986]
[-17.44106674 137.43876648]
[-9.76358032 124.38751984]
[1.73727202 114.53820038]
[15.81396484 108.95918274]
[30.93956375 108.25563812]
[45.47335815 112.50387573]
[57.83882904 121.24309540]
[69.99215698 112.45124817]
[82.14549255 103.65940857]
[79.23802185 88.94388580]
[64.65427399 85.43471527]
[51.28137207 93.42241669]
[36.54136658 89.65586853]
[29.00872993 76.85762787]
[14.42498112 73.34845734]
[1.95821869 82.78847504]
[-13.65712833 81.95483398]
[-25.04796982 71.24116516]
[-26.83589935 55.70612717]
[-18.17671204 42.68489456]
[-3.15900898 38.32569504]
[11.12630749 44.68680954]
[17.93414879 58.76470947]
[32.51789856 62.27387619]
[45.04799652 54.30316544]
[59.88798141 57.65420532]
[68.16343689 70.85096741]
[82.74719238 74.36013794]
[96.89450836 69.37481689]
[106.05644226 57.49798965]
[115.21837616 45.62116623]
[124.38031006 33.74434280]
[133.54225159 21.86751938]
[142.70417786 9.99069595]
[151.86611938 -1.88612771]
[161.02804565 -13.76295185]
[170.18998718 -25.63977432]
[156.21488953 -20.19031715]
[141.35063171 -18.17688942]
[126.42941284 -19.71221924]
[112.28661346 -24.71034813]
[99.71404266 -32.89144897]
[89.41558838 -43.79748917]
[81.96781921 -56.81788635]
[77.78770447 -71.22367096]
[77.10929108 -86.20832062]
[79.97054291 -100.93290710]
[86.21127319 -114.57303619]
[95.48209381 -126.36506653]
[107.26396179 -135.64878845]
[120.89725494 -141.90446472]
[135.61868286 -144.78184509]
[150.60408020 -144.11982727]
[165.01443481 -139.95550537]
[178.04296875 -132.52200317]
[188.96029663 -122.23549652]
[197.15515137 -109.67189026]
[202.16877747 -95.53456879]
[203.72044373 -80.61504364]
[201.72329712 -65.74858856]
[196.28913879 -51.76753235]
[187.71977234 -39.45185089]
[201.41040039 -45.58102417]
[215.10102844 -51.71019745]
[200.56965637 -55.43030167]
[189.75064087 -65.82015991]
[185.44575500 -80.18914795]
[188.76982117 -94.81620026]
[198.86199951 -105.91340637]
[213.10876465 -110.60697174]
[227.82070923 -107.68141937]
[239.18792725 -97.89436340]
[244.26669312 -83.78032684]
[241.74180603 -68.99436188]
[232.26789856 -57.36609650]
[246.92062378 -60.57509613]
[254.69093323 -65.49627686]
[261.90704346 -63.69628906]
[276.62255859 -66.60375977]
[291.33807373 -69.51123047]
[306.05361938 -72.41870117]
[313.43368530 -86.20523834]
[327.96810913 -91.97450256]
[342.79418945 -87.00242615]
[350.91146851 -73.63667297]
[348.48727417 -58.18813705]
[336.66616821 -47.95115280]
[321.02978516 -47.75930405]
[308.96109009 -57.70318222]
[294.24554443 -54.79571152]
[279.53002930 -51.88823700]
[264.81451416 -48.98076630]
[250.12962341 -45.92237091]
[235.47689819 -42.71337509]
[221.23019409 -38.01957321]
[207.53958130 -31.89039993]
[193.84895325 -25.76122475]
[182.06681824 -16.47784042]
[172.90487671 -4.60101604]
[163.74293518 7.27580786]
[154.58100891 19.15263176]
[145.41906738 31.02945518]
[136.25714111 42.90628052]
[127.09519958 54.78310394]
[117.93326569 66.65992737]
[108.77133179 78.53675079]
[122.50573730 72.50632477]
[136.18811035 66.35873413]
[151.17980957 65.86004639]
[165.24047852 71.08477020]
[176.26884460 81.25212097]
[182.61683655 94.84266663]
[183.33576965 109.82543182]
[178.31823730 123.96135712]
[168.31404114 135.13793945]
[154.81825256 141.68495178]
[139.84492493 142.62362671]
[132.65353394 129.45988464]
[132.65353394 144.45988464]
[132.65353394 159.45988464]
[132.65353394 174.45988464]
[132.65353394 189.45988464]
[132.65353394 204.45988464]
[132.65353394 219.45988464]
[132.65353394 234.45988464]
[132.65353394 249.45988464]
[132.65353394 264.45989990]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[12 34]
[13 33]
[14 32]
[35 53]
[36 52]
[39 49]
[40 48]
[54 131]
[55 130]
[56 129]
[57 128]
[58 127]
[59 126]
[60 125]
[61 124]
[62 123]
[87 122]
[88 121]
[89 120]
[100 119]
[101 118]
[103 117]
[104 116]
[105 115]
[106 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
