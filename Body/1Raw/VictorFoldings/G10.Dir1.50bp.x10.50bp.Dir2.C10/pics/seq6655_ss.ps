%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUAACCCAAUACCAAACGCCCCUCUUCGUCUGAUCCGUCCUAAUCACAGCAGUCCUACUxxxxxxxxxxGCCUAGCCCUACUAGUCUCAAUCUCCAACACAUAUGGCCUAGACUACGUACAUAACCUAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 421.87683105]
[92.50000000 406.87683105]
[92.50000000 391.87683105]
[92.50000000 376.87683105]
[92.50000000 361.87683105]
[92.50000000 346.87683105]
[92.50000000 331.87683105]
[92.50000000 316.87683105]
[92.50000000 301.87683105]
[92.50000000 286.87683105]
[78.03514099 283.04049683]
[65.04627991 275.58486938]
[54.42181396 265.01296997]
[46.89020538 252.04118347]
[42.97005844 237.55073547]
[42.93439102 222.52783203]
[46.79164505 207.99650574]
[54.28468323 194.94886780]
[64.90794373 184.27731323]
[77.94152832 176.71350098]
[92.50000000 172.77825928]
[92.50000000 157.77825928]
[92.50000000 142.77825928]
[81.68730164 139.38114929]
[72.12172699 133.30212402]
[64.45469666 124.95518494]
[59.20835114 114.90876007]
[44.44229507 117.54763031]
[29.67624092 120.18649292]
[23.02768898 134.20706177]
[9.39171314 141.61245728]
[-5.98837423 139.55514526]
[-17.19861603 128.82620239]
[-19.92844772 113.55113983]
[-13.12819004 99.60351562]
[0.58731729 92.34648132]
[15.94418144 94.57051849]
[27.03737640 105.42043304]
[41.80343246 102.78157043]
[56.56948853 100.14270782]
[57.09691238 93.25056458]
[58.71111298 86.52938080]
[45.46852493 79.48424530]
[32.22594070 72.43911743]
[18.98335457 65.39398193]
[5.09465837 72.31378937]
[-10.20329189 69.71526337]
[-21.02812195 58.59758759]
[-23.21746445 43.23573685]
[-15.92947197 29.53665733]
[-1.96652663 22.76792336]
[13.30233479 25.53224945]
[24.00592232 36.76669693]
[26.02849007 52.15139389]
[39.27107620 59.19652939]
[52.51366043 66.24166107]
[65.75624847 73.28679657]
[72.31668091 66.53563690]
[80.17771149 61.35667419]
[88.97001648 57.99322510]
[87.72313690 43.04513550]
[72.83537292 40.67492676]
[58.94772339 34.81006622]
[46.86759567 25.79153061]
[37.29731750 14.14364815]
[30.79328537 0.54361123]
[27.73363876 -14.21789265]
[28.29626274 -29.28264999]
[32.44844818 -43.77481461]
[39.94878769 -56.85182953]
[50.36122131 -67.75341797]
[63.08039093 -75.84577179]
[77.36681366 -80.65840912]
[92.38990021 -81.91154480]
[107.27622223 -79.53230286]
[121.16031647 -73.65902710]
[133.23497009 -64.63317108]
[142.79818726 -52.97948837]
[149.29397583 -39.37551117]
[152.34468079 -24.61215401]
[151.77291870 -9.54774189]
[147.61195374 4.94190216]
[140.10368347 18.01436806]
[129.68463135 28.90963936]
[116.96056366 36.99428177]
[102.67122650 41.79826355]
[103.91809845 56.74634933]
[112.09195709 58.28651810]
[119.82228851 61.35667419]
[126.82557678 65.84420776]
[132.84494019 71.58451843]
[137.65960693 78.36707306]
[141.09297180 85.94308472]
[155.91073608 83.61197662]
[170.72850037 81.28087616]
[185.54624939 78.94976807]
[200.36401367 76.61866760]
[215.18176270 74.28755951]
[218.57989502 63.22431564]
[225.85292053 54.28812790]
[235.90524292 48.76379776]
[247.24543762 47.42676926]
[258.20751953 50.43447876]
[267.19564819 57.30892181]
[272.91647339 67.01215363]
[287.85076904 65.60984802]
[302.78509521 64.20754242]
[311.52334595 51.23925400]
[326.56732178 46.97153091]
[340.81365967 53.41946411]
[347.53570557 67.53853607]
[343.55947876 82.66215515]
[330.76248169 91.64940643]
[315.18704224 90.25679016]
[304.18737793 79.14185333]
[289.25308228 80.54415894]
[274.31878662 81.94646454]
[265.81765747 98.51718903]
[248.94628906 106.75016785]
[230.36070251 103.19879150]
[217.51287842 89.10532379]
[202.69511414 91.43642426]
[187.87734985 93.76753235]
[173.05960083 96.09863281]
[158.24183655 98.42973328]
[143.42408752 100.76084137]
[133.01033020 128.22319031]
[107.50000000 142.77825928]
[107.50000000 157.77825928]
[107.50000000 172.77825928]
[122.05847168 176.71350098]
[135.09205627 184.27731323]
[145.71531677 194.94886780]
[153.20835876 207.99650574]
[157.06561279 222.52783203]
[157.02993774 237.55073547]
[153.10978699 252.04118347]
[145.57818604 265.01296997]
[134.95372009 275.58486938]
[121.96485901 283.04049683]
[107.50000000 286.87683105]
[107.50000000 301.87683105]
[107.50000000 316.87683105]
[107.50000000 331.87683105]
[107.50000000 346.87683105]
[107.50000000 361.87683105]
[107.50000000 376.87683105]
[107.50000000 391.87683105]
[107.50000000 406.87683105]
[107.50000000 421.87683105]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[21 130]
[22 129]
[23 128]
[27 40]
[28 39]
[29 38]
[42 57]
[43 56]
[44 55]
[45 54]
[60 87]
[61 86]
[93 126]
[94 125]
[95 124]
[96 123]
[97 122]
[98 121]
[105 117]
[106 116]
[107 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
