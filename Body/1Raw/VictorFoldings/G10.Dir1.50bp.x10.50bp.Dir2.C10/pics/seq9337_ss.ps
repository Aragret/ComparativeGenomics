%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCCUAGCCUUACUACUAAUAAUUAUUACAUUUUGACUACCACAACUCAACGGCUACAUAGAxxxxxxxxxxAGCAGCCAUUCAAGCAAUCCUAUACAACCGUAUCGGCGAUAUCGGUUUCAUCCUCGCCUUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[102.01419067 276.57299805]
[102.01419067 261.57299805]
[102.01419067 246.57299805]
[102.01419067 231.57299805]
[102.01419067 216.57299805]
[102.01419067 201.57299805]
[102.01419067 186.57299805]
[102.01419067 171.57299805]
[102.01419067 156.57299805]
[102.01419067 141.57299805]
[87.98259735 137.42163086]
[77.03577423 128.99330139]
[70.29650116 117.87695312]
[68.18768311 105.87542725]
[53.20744705 105.10576630]
[38.22720337 104.33610535]
[23.24696350 103.56644440]
[8.26672173 102.79679108]
[6.40798903 109.77850342]
[2.56812119 116.33946228]
[-3.14432430 121.91141510]
[-10.45751667 125.95862579]
[-18.94720459 128.02458191]
[-28.06077194 127.77488708]
[-37.15319824 125.03262329]
[-45.53254700 119.80312347]
[-59.95993423 123.90806580]
[-74.38732147 128.01301575]
[-88.81470490 132.11796570]
[-99.83603668 144.26135254]
[-115.80371094 140.52433777]
[-120.29155731 124.75121307]
[-108.68285370 113.16802979]
[-92.91964722 117.69057465]
[-78.49226379 113.58563232]
[-64.06488037 109.48068237]
[-49.63749313 105.37574005]
[-48.79229355 97.92351532]
[-63.69671249 96.23287201]
[-62.00582123 81.32847595]
[-47.10189819 83.01906586]
[-46.25669861 75.56684113]
[-59.39833069 68.33514404]
[-72.53996277 61.10343933]
[-85.68159485 53.87173843]
[-98.78059387 61.89120102]
[-114.13479614 62.27072144]
[-127.61399841 54.90820694]
[-135.59236145 41.78413773]
[-135.92375183 26.42882156]
[-128.51902771 12.97276115]
[-115.37001038 5.03557014]
[-100.01373291 4.75231266]
[-86.58094788 12.19918346]
[-78.68501282 25.37301254]
[-78.44989014 40.73010635]
[-65.30825806 47.96180725]
[-52.16662598 55.19351196]
[-39.02499771 62.42521286]
[-5.31698179 63.51159668]
[9.03638172 87.81654358]
[24.01662254 88.58620453]
[38.99686432 89.35586548]
[53.97710419 90.12552643]
[68.95734406 90.89518738]
[82.40860748 72.85065460]
[104.37435150 67.94677734]
[109.79297638 53.95969391]
[115.21160126 39.97261047]
[120.63022614 25.98552704]
[107.92482758 17.91961098]
[97.03734589 7.52975559]
[88.38627625 -4.78467703]
[82.30414581 -18.55035400]
[79.02471924 -33.23815918]
[78.67406464 -48.28353500]
[81.26565552 -63.10816956]
[86.69987488 -77.14225769]
[94.76785278 -89.84635162]
[105.15946960 -100.73214722]
[117.47530365 -109.38121796]
[131.24195862 -115.46112823]
[145.93029785 -118.73816681]
[160.97572327 -119.08638763]
[175.79994202 -116.49240112]
[189.83314514 -111.05590820]
[202.53593445 -102.98587799]
[213.42005920 -92.59249878]
[222.06713867 -80.27526855]
[228.14480591 -66.50762177]
[231.41947937 -51.81875610]
[231.76525879 -36.77326965]
[229.16886902 -21.94947052]
[223.73011780 -7.91714811]
[215.65802002 4.78433466]
[205.26287842 15.66676521]
[192.94425964 24.31185341]
[179.17562866 30.38730240]
[164.48622131 33.65959167]
[149.44068909 34.00294113]
[134.61730957 31.40415192]
[129.19868469 45.39123535]
[123.78005981 59.37831879]
[118.36143494 73.36540222]
[129.42869568 80.25151825]
[137.64540100 91.78519440]
[141.08117676 106.68635559]
[155.98562622 108.37674713]
[170.89007568 110.06714630]
[185.79452515 111.75754547]
[200.69897461 113.44794464]
[215.61999512 114.98523712]
[230.55599976 116.36926270]
[245.49201965 117.75328827]
[260.42803955 119.13731384]
[276.75747681 114.57821655]
[285.65884399 129.00741577]
[274.25769043 141.55532837]
[259.04400635 134.07331848]
[244.10798645 132.68930054]
[229.17198181 131.30526733]
[214.23596191 129.92124939]
[207.24232483 132.45130920]
[199.00857544 128.35238647]
[184.10412598 126.66199493]
[169.19967651 124.97159576]
[154.29522705 123.28119659]
[139.39077759 121.59079742]
[133.79663086 126.58634949]
[146.06610107 135.21537781]
[158.33555603 143.84442139]
[173.21821594 145.71701050]
[184.71946716 155.34619141]
[189.17945862 169.66781616]
[185.17892456 184.12449646]
[173.99092102 194.11592102]
[159.17562866 196.46264648]
[145.44750977 190.41792297]
[137.17504883 177.90527344]
[136.99110413 162.90492249]
[129.79972839 149.74118042]
[122.60833740 136.57745361]
[117.01419067 141.57299805]
[117.01419067 156.57299805]
[117.01419067 171.57299805]
[117.01419067 186.57299805]
[117.01419067 201.57299805]
[117.01419067 216.57299805]
[117.01419067 231.57299805]
[117.01419067 246.57299805]
[117.01419067 261.57299805]
[117.01419067 276.57299805]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[14 65]
[15 64]
[16 63]
[17 62]
[18 61]
[26 37]
[27 36]
[28 35]
[29 34]
[42 59]
[43 58]
[44 57]
[45 56]
[67 104]
[68 103]
[69 102]
[70 101]
[107 128]
[108 127]
[109 126]
[110 125]
[111 124]
[112 122]
[113 121]
[114 120]
[115 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
