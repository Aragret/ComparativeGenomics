%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCAUACUAGUUAUUAUCGAAACCAUCAGCCUACUCAUUCAACCAAUAGCCCUGGCCGUACxxxxxxxxxxGCCUAUUGCCAUACUAGUCUUUGCCGCCUGCGAAGCAGCGGUGGGCCUAGCCCUACUAGUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[122.29078674 291.47686768]
[121.66680908 276.48983765]
[121.04283142 261.50280762]
[120.41885376 246.51580811]
[119.79487610 231.52879333]
[119.17089844 216.54177856]
[118.54692078 201.55476379]
[117.92294312 186.56773376]
[115.28408051 171.80168152]
[110.67851257 157.52622986]
[106.07295227 143.25076294]
[101.46738434 128.97529602]
[82.14852905 122.87020874]
[71.53546906 105.61177826]
[74.80398560 85.61660004]
[64.14235687 75.06530762]
[53.48073196 64.51401520]
[42.81910706 53.96272659]
[32.15748215 43.41143799]
[21.49585533 32.86014557]
[7.77580070 26.79713249]
[-7.20391369 26.01728821]
[-22.18362808 25.23744392]
[-37.16334152 24.45759773]
[-47.59396744 37.73367310]
[-63.71614456 42.15599442]
[-79.15139008 36.17943954]
[-87.91408539 22.33312035]
[-102.90677643 21.86507988]
[-117.89947510 21.39703751]
[-123.50280762 35.48172760]
[-133.58778381 46.79848480]
[-146.93659973 53.98076630]
[-161.93730164 56.16126633]
[-176.77850342 53.07668304]
[-189.66804504 45.09949493]
[-199.04945374 33.19298553]
[-203.78987122 18.79492760]
[-203.31689453 3.64395022]
[-197.68762207 -10.43038845]
[-187.58180237 -21.72854424]
[-174.21977234 -28.88621140]
[-159.21507263 -31.03906250]
[-144.37959290 -27.92713547]
[-131.50477600 -19.92620850]
[-122.14531708 -8.00243092]
[-117.43143463 6.40434074]
[-102.43873596 6.87238264]
[-87.44603729 7.34042501]
[-80.25440216 -3.95011449]
[-68.31963348 -10.24874783]
[-54.72345734 -9.80765438]
[-43.03715515 -2.63524938]
[-36.38349533 9.47788334]
[-21.40378189 10.25772858]
[-6.42406845 11.03757381]
[8.55564594 11.81741905]
[14.10130405 6.76809406]
[4.00282526 -4.32337713]
[15.09445286 -14.42168427]
[25.19261932 -3.33055544]
[30.73827744 -8.37987995]
[31.36225319 -23.36689568]
[31.98623085 -38.35391235]
[32.61021042 -53.34092712]
[18.20772743 -57.83881378]
[5.46065807 -65.91189575]
[-4.76188564 -77.00972748]
[-11.76291275 -90.37565613]
[-15.06508064 -105.09836578]
[-14.44324303 -120.17403412]
[-9.93979836 -134.57478333]
[-1.86179733 -147.31872559]
[9.23998737 -157.53698730]
[22.60861778 -164.53285217]
[37.33259964 -167.82933044]
[52.40802383 -167.20167542]
[66.80702972 -162.69267273]
[79.54785919 -154.60975647]
[89.76183319 -143.50402832]
[96.75253296 -130.13269043]
[100.04332733 -115.40744019]
[99.40985107 -100.33225250]
[94.89528656 -85.93499756]
[86.80744934 -73.19728851]
[75.69777679 -62.98760223]
[62.32374573 -56.00206375]
[47.59722519 -52.71694946]
[46.97324753 -37.72993469]
[46.34926987 -22.74291801]
[45.72529221 -7.75590277]
[43.16355896 11.62815475]
[32.04714584 22.19852066]
[42.70877075 32.74980927]
[53.37039566 43.30110168]
[64.03202057 53.85239029]
[74.69364929 64.40367889]
[85.35527802 74.95497131]
[95.15811920 71.39444733]
[105.58666992 71.53053284]
[115.29326630 75.34564209]
[123.02356720 82.34676361]
[127.77859497 91.62915039]
[142.77128601 91.16110992]
[157.76399231 90.69306946]
[172.75668335 90.22502899]
[187.74937439 89.75698853]
[196.29321289 86.34306335]
[203.05813599 89.43843842]
[218.05732727 89.28240204]
[233.05651855 89.12636566]
[248.83189392 82.91558838]
[259.16702271 96.35514069]
[249.11372375 110.00679779]
[233.21255493 104.12554932]
[218.21336365 104.28158569]
[203.21417236 104.43762207]
[188.21742249 104.74967957]
[173.22473145 105.21772003]
[158.23202515 105.68576813]
[143.23933411 106.15380859]
[128.24664307 106.62184906]
[123.71740723 116.70944977]
[115.74285126 124.36973572]
[120.34841156 138.64520264]
[124.95397949 152.92065430]
[129.55953979 167.19612122]
[133.86470032 152.82720947]
[143.55590820 141.37815857]
[157.01643372 134.75894165]
[172.00077820 134.07377625]
[186.00920105 139.43698120]
[196.70480347 149.95382690]
[202.30329895 163.86988831]
[201.87074280 178.86366272]
[195.47929382 192.43382263]
[184.19519043 202.31657410]
[169.90086365 206.86326599]
[154.98094177 205.31539917]
[141.92440796 197.93118286]
[132.90995789 185.94375610]
[133.53393555 200.93078613]
[134.15791321 215.91780090]
[134.78189087 230.90481567]
[135.40586853 245.89183044]
[136.02984619 260.87884521]
[136.65382385 275.86584473]
[137.27780151 290.85287476]
[143.97779846 306.42678833]
[130.86726379 317.17620850]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 148]
[2 147]
[3 146]
[4 145]
[5 144]
[6 143]
[7 142]
[8 141]
[9 127]
[10 126]
[11 125]
[12 124]
[15 98]
[16 97]
[17 96]
[18 95]
[19 94]
[20 93]
[21 57]
[22 56]
[23 55]
[24 54]
[28 49]
[29 48]
[30 47]
[62 91]
[63 90]
[64 89]
[65 88]
[103 122]
[104 121]
[105 120]
[106 119]
[107 118]
[109 117]
[110 116]
[111 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
