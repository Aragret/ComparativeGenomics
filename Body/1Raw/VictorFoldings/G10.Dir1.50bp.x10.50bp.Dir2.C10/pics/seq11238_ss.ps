%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACAAUCCCCUAUCUAGGCCUUCUUACGAGCCAAAACCUGCCCCUACUCCUCCUAGACCUAAxxxxxxxxxxUGCAGCCCUAGCAACACUCCACCUCCUAUUCUUGCACGAAACGGGAUCAAACAACCCCCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[138.13723755 470.52557373]
[138.13723755 455.52557373]
[138.13723755 440.52557373]
[138.13723755 425.52557373]
[138.13723755 410.52557373]
[138.13723755 395.52557373]
[138.13723755 380.52557373]
[138.13723755 365.52557373]
[138.13723755 350.52557373]
[138.13723755 335.52557373]
[117.69769287 324.15264893]
[107.82858276 302.81991577]
[112.43837738 279.65463257]
[129.89083862 263.57009888]
[126.53157806 248.95109558]
[123.17231750 234.33209229]
[119.81305695 219.71308899]
[116.45379639 205.09407043]
[102.69984436 199.44017029]
[94.81925201 186.61985779]
[96.01277161 171.43997192]
[106.03163147 159.73832703]
[102.67237854 145.11932373]
[83.92694092 142.24395752]
[68.01123047 131.93138123]
[57.72725677 115.99717712]
[43.01173401 118.90464783]
[28.29621124 121.81212616]
[23.41661072 136.37525940]
[11.89856052 146.53547668]
[-3.15964222 149.55973816]
[-17.70741653 144.63450623]
[-27.83148384 133.08467102]
[-30.80852127 118.01705933]
[-25.83771896 103.48479462]
[-14.25620079 93.39698029]
[0.82066536 90.46718597]
[15.33727741 95.48352051]
[25.38873863 107.09660339]
[40.10426331 104.18912506]
[54.81978607 101.28165436]
[55.25613403 93.60617828]
[56.98697662 86.11567688]
[59.96223831 79.02687073]
[64.09584045 72.54484558]
[69.26818848 66.85712433]
[75.32964325 62.12826920]
[69.34134674 48.37543869]
[63.35305405 34.62260818]
[57.36475754 20.86978149]
[42.70395660 24.24255943]
[27.67303085 24.86375618]
[12.78392315 22.71221352]
[-1.45624709 17.86121368]
[-14.56246567 10.47597980]
[-26.08833885 0.80804849]
[-35.64130020 -10.81329250]
[-42.89598083 -23.99222565]
[-47.60528564 -38.27988052]
[-49.60882187 -53.18962479]
[-48.83834457 -68.21363831]
[-45.32009888 -82.84020996]
[-39.17391586 -96.57116699]
[-30.60913277 -108.93882751]
[-19.91745949 -119.52196503]
[-7.46305180 -127.96011353]
[6.32989645 -133.96588135]
[20.99160385 -137.33470154]
[36.02269745 -137.95185852]
[50.91122437 -135.79629517]
[65.15008545 -130.94146729]
[78.25431061 -123.55269623]
[89.77758026 -113.88165283]
[99.32740784 -102.25773621]
[106.57853699 -89.07685089]
[111.28398895 -74.78792572]
[113.28350830 -59.87764359]
[112.50897980 -44.85383606]
[108.98679352 -30.22821426]
[102.83690643 -16.49891853]
[94.26879120 -4.13356352]
[83.57426453 6.44669056]
[71.11758423 14.88148403]
[77.10588074 28.63431358]
[83.09417725 42.38714218]
[89.08247375 56.13997269]
[98.06329346 54.84312057]
[107.12216949 55.36627579]
[115.89398956 57.68835068]
[124.02522278 61.71575546]
[131.18814087 67.28617096]
[137.09403992 74.17508698]
[150.65594482 67.76610565]
[164.21783447 61.35713196]
[177.77973938 54.94815826]
[176.08479309 39.90136719]
[179.36981201 25.12004852]
[187.27844238 12.20756626]
[198.95283508 2.56457162]
[213.12663269 -2.76293564]
[228.26235962 -3.19706774]
[242.71820068 1.30926669]
[254.92611694 10.26725388]
[263.56185913 22.70520020]
[267.68872070 37.27392578]
[266.85900879 52.39313126]
[261.16278076 66.42279053]
[251.21784973 77.84107971]
[238.10301208 85.40941620]
[223.24085999 88.30685425]
[208.24353027 86.21910095]
[194.73780823 79.37261200]
[184.18870544 68.51005554]
[170.62681580 74.91902924]
[157.06491089 81.32800293]
[143.50302124 87.73697662]
[144.20948792 109.40296936]
[134.74671936 128.90605164]
[117.29138184 141.76005554]
[120.65064240 156.37907410]
[134.77259827 162.53347778]
[142.47279358 175.66969299]
[140.97906494 190.64410400]
[131.07279968 201.73481750]
[134.43206787 216.35382080]
[137.79132080 230.97283936]
[141.15058899 245.59184265]
[144.50984192 260.21084595]
[152.07771301 260.78808594]
[159.37471008 262.84036255]
[166.11659241 266.28381348]
[172.04158020 270.98034668]
[176.92039490 276.74340820]
[180.56523132 283.34521484]
[182.83699036 290.52581787]
[183.65048218 298.00332642]
[182.97775269 305.48504639]
[180.84887695 312.67880249]
[177.35079956 319.30447388]
[172.62362671 325.10482788]
[166.85514832 329.85552979]
[160.27331543 333.37384033]
[153.13723755 335.52557373]
[153.13723755 350.52557373]
[153.13723755 365.52557373]
[153.13723755 380.52557373]
[153.13723755 395.52557373]
[153.13723755 410.52557373]
[153.13723755 425.52557373]
[153.13723755 440.52557373]
[153.13723755 455.52557373]
[153.13723755 470.52557373]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[14 128]
[15 127]
[16 126]
[17 125]
[18 124]
[22 120]
[23 119]
[26 41]
[27 40]
[28 39]
[47 86]
[48 85]
[49 84]
[50 83]
[92 116]
[93 115]
[94 114]
[95 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
