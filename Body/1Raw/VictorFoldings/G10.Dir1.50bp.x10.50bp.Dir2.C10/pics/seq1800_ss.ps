%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAGCACCCAACUUACACUUAGGAGAUUUCAACUUAACUUGACCGCUCUGAGCUAAACCUAGCxxxxxxxxxxUUUAUUGCCACAACUAACCUCCUCGGACUCCUGCCUCACUCAUUUACACCAACCACCCAACUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[146.33703613 380.63253784]
[146.33703613 365.63253784]
[146.33703613 350.63253784]
[146.33703613 335.63253784]
[146.33703613 320.63253784]
[146.33703613 305.63253784]
[146.33703613 290.63253784]
[146.33703613 275.63253784]
[146.33703613 260.63253784]
[146.33703613 245.63255310]
[142.43028259 231.15023804]
[129.34185791 224.04092407]
[129.08903503 208.22174072]
[121.54518890 195.25675964]
[114.00135040 182.29179382]
[113.34221649 197.27729797]
[107.40467072 211.05212402]
[96.96264648 221.82078552]
[83.37718964 228.17965698]
[68.41907501 229.29991150]
[54.03801727 225.03552246]
[42.10848236 215.94232178]
[34.18542099 203.20556641]
[31.30154800 188.48539734]
[33.83276749 173.70050049]
[41.44914246 160.77801514]
[53.15792847 151.40228271]
[67.43296051 146.79537964]
[82.41357422 147.55780029]
[96.14713287 153.59014893]
[106.84400177 164.10678101]
[103.52735901 149.47804260]
[100.21072388 134.84930420]
[96.89408112 120.22057343]
[88.17163849 118.88826752]
[80.15518188 113.70055389]
[74.55937958 105.08222198]
[72.83772278 94.21344757]
[58.24335098 90.74872589]
[43.64897919 87.28401184]
[29.05460548 83.81929779]
[15.73338604 92.32345581]
[0.31873700 88.83573914]
[-8.04410458 75.42535400]
[-4.39361286 60.04843903]
[9.10443974 51.82785034]
[24.44189835 55.64070892]
[32.51932144 69.22492218]
[47.11369324 72.68963623]
[61.70806885 76.15435791]
[76.30244446 79.61907196]
[88.52642059 70.92572021]
[90.04394531 56.00268173]
[91.56147003 41.07964325]
[82.34944153 33.45439148]
[78.03221130 22.43141556]
[79.58354950 10.81654072]
[86.49903870 1.50609648]
[96.95143890 -3.23531008]
[99.07248688 -18.08459282]
[96.80107117 -32.91161728]
[90.33197021 -46.44493866]
[83.86286926 -59.97826004]
[77.39377594 -73.51158142]
[63.57223511 -82.33750916]
[64.57514954 -98.70596313]
[79.37081146 -105.77847290]
[92.73870850 -96.27944946]
[90.92709351 -79.98067474]
[97.39619446 -66.44735718]
[103.86528778 -52.91403580]
[110.33438873 -39.38071442]
[111.90569305 -54.29818726]
[116.39414215 -68.61090088]
[123.62267303 -81.75428009]
[133.30615234 -93.20985413]
[145.06260681 -102.52574158]
[158.42828369 -109.33447266]
[172.87594604 -113.36746216]
[187.83569336 -114.46562958]
[202.71742249 -112.58563995]
[216.93408203 -107.80167389]
[229.92489624 -100.30242157]
[241.17741394 -90.38372040]
[250.24777222 -78.43681335]
[256.77816772 -64.93296051]
[260.51101685 -50.40485764]
[261.29904175 -35.42557144]
[259.11120605 -20.58598518]
[254.03375244 -6.47146845]
[246.26701355 6.36121225]
[236.11734009 17.40585327]
[223.98510742 26.22678566]
[210.34887695 32.47605133]
[195.74656677 35.90714264]
[180.75416565 36.38471603]
[165.96308899 33.88992691]
[151.95677185 28.52119255]
[139.28773499 20.49028587]
[128.45571899 10.11399937]
[119.88800049 -2.19835925]
[113.92176819 -15.96354866]
[111.80072784 -1.11426699]
[123.64896393 12.78442764]
[121.59970093 31.25233841]
[106.48451233 42.59716797]
[104.96698761 57.52020645]
[103.44946289 72.44324493]
[123.44128418 94.34066772]
[111.52281952 116.90393829]
[114.83945465 131.53266907]
[118.15609741 146.16140747]
[121.47273254 160.79014587]
[126.96632385 174.74795532]
[134.51016235 187.71292114]
[142.05400085 200.67790222]
[155.68200684 208.71455383]
[155.39524841 223.60639954]
[155.61427307 208.60800171]
[159.10505676 194.01983643]
[165.69892883 180.54687500]
[175.07723999 168.84014893]
[186.78678894 159.46537781]
[200.26174927 152.87557983]
[214.85096741 149.38920593]
[229.84944153 149.17472839]
[244.53237915 152.24249268]
[258.19027710 158.44427490]
[270.16311646 167.48036194]
[279.87234497 178.91412354]
[286.84878540 192.19302368]
[290.75527954 206.67539978]
[291.40310669 221.66140747]
[288.76092529 236.42686462]
[282.95642090 250.25827026]
[274.27008057 262.48724365]
[263.12164307 272.52282715]
[250.04989624 279.88006592]
[235.68646240 284.20346069]
[220.72543335 285.28405762]
[205.88978577 283.06964111]
[191.89642334 277.66726685]
[179.42155457 269.33795166]
[169.06800842 258.48419189]
[161.33703613 245.63255310]
[161.33703613 260.63253784]
[161.33703613 275.63253784]
[161.33703613 290.63253784]
[161.33703613 305.63253784]
[161.33703613 320.63253784]
[161.33703613 335.63253784]
[161.33703613 350.63253784]
[161.33703613 365.63253784]
[161.33703613 380.63253784]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[11 118]
[13 116]
[14 115]
[15 114]
[31 113]
[32 112]
[33 111]
[34 110]
[38 51]
[39 50]
[40 49]
[41 48]
[52 108]
[53 107]
[54 106]
[59 103]
[60 102]
[61 72]
[62 71]
[63 70]
[64 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
