%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUUCUUAAUUUAACUAUUUAUAUUAUCCUAACUACUACCGCAUUCCUACUACUCAACUUAAxxxxxxxxxxAUUUAGGUUAAAUACAGACCAAGAGCCUUCAAAGCCCUCAGUAAGUUGCAAUACUUAAUUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[97.88931274 269.34527588]
[97.88931274 254.34527588]
[97.88931274 239.34527588]
[97.88931274 224.34527588]
[97.88931274 209.34527588]
[97.88931274 194.34527588]
[97.88931274 179.34527588]
[97.88931274 164.34527588]
[97.88931274 149.34527588]
[97.88931274 134.34527588]
[80.38299561 123.46105194]
[74.00927734 106.34315491]
[78.84571075 91.16447449]
[67.65741730 81.17337036]
[56.46912003 71.18227386]
[40.90850449 71.89289856]
[29.70430756 61.60112762]
[29.12273216 46.76207733]
[17.93443489 36.77098083]
[6.74613857 26.77988434]
[-4.44215822 16.78878784]
[-15.63045502 6.79769039]
[-26.81875229 -3.19340682]
[-38.00704956 -13.18450356]
[-49.03965759 -3.00427699]
[-61.00331116 6.06361008]
[-73.78629303 13.93449116]
[-87.26926422 20.53487587]
[-101.32632446 25.80313683]
[-115.82622528 29.69008446]
[-130.63359070 32.15942764]
[-145.61013794 33.18811035]
[-160.61607361 32.76652527]
[-175.51124573 30.89860725]
[-190.15661621 27.60180283]
[-204.41540527 22.90689087]
[-218.15451050 16.85770798]
[-231.24563599 9.51073456]
[-243.56654358 0.93456990]
[-255.00221252 -8.79071140]
[-265.44586182 -19.57430458]
[-274.79995728 -31.31552315]
[-282.97720337 -43.90474319]
[-289.90118408 -57.22441483]
[-295.50732422 -71.15017700]
[-299.74325562 -85.55200195]
[-302.56939697 -100.29541779]
[-303.95938110 -115.24277496]
[-303.90023804 -130.25450134]
[-302.39251709 -145.19044495]
[-299.45028687 -159.91113281]
[-295.10101318 -174.27912903]
[-289.38531494 -188.16029358]
[-282.35656738 -201.42498779]
[-274.08038330 -213.94937134]
[-264.63406372 -225.61653137]
[-254.10577393 -236.31748962]
[-242.59382629 -245.95236206]
[-230.20571899 -254.43116760]
[-217.05711365 -261.67477417]
[-203.27076721 -267.61550903]
[-188.97541809 -272.19790649]
[-174.30453491 -275.37921143]
[-159.39509583 -277.12969971]
[-144.38632202 -277.43304443]
[-129.41833496 -276.28637695]
[-114.63088989 -273.70043945]
[-100.16207123 -269.69934082]
[-86.14695740 -264.32046509]
[-72.71641541 -257.61404419]
[-59.99584579 -249.64270020]
[-48.10401917 -240.48081970]
[-37.15196991 -230.21397400]
[-27.24195290 -218.93801880]
[-18.46650124 -206.75823975]
[-10.90754986 -193.78836060]
[-4.63567543 -180.14949036]
[0.29056007 -165.96894836]
[3.82516170 -151.37915039]
[5.93512678 -136.51632690]
[6.60075426 -121.51924133]
[5.81583023 -106.52793121]
[3.58768249 -91.68236542]
[-0.06288451 -77.12115479]
[-5.10178566 -62.98025513]
[-11.48197269 -49.39170456]
[-19.14387321 -36.48237228]
[-28.01595116 -24.37280083]
[-16.82765388 -14.38170338]
[-5.63935804 -4.39060640]
[5.54893875 5.60049057]
[16.73723602 15.59158802]
[27.92553139 25.58268547]
[39.11382675 35.57378006]
[53.92388916 34.47939301]
[65.41274261 44.45240402]
[66.46022034 59.99398041]
[77.64851379 69.98507690]
[88.83681488 79.97617340]
[113.88351440 74.91844177]
[134.36512756 98.24202728]
[149.36433411 98.39602661]
[164.36355591 98.55002594]
[179.34379578 97.78036499]
[194.24822998 96.08996582]
[209.15267944 94.39956665]
[214.63343811 80.10901642]
[226.13520813 70.01110077]
[241.01496887 66.42625427]
[255.85346985 70.17825317]
[267.24093628 80.40490723]
[272.56057739 94.75620270]
[270.59002686 109.93432617]
[261.78207397 122.45145416]
[248.16072083 129.43124390]
[232.85606384 129.26979065]
[219.38500977 122.00418091]
[210.84307861 109.30401611]
[195.93862915 110.99441528]
[181.03419495 112.68481445]
[191.78160095 123.14871216]
[192.17196655 138.14363098]
[181.98356628 149.15257263]
[167.00334167 149.92251587]
[155.73994446 140.01617432]
[154.59089661 125.06024170]
[164.20954895 113.54923248]
[149.21034241 113.39524078]
[134.21113586 113.24124146]
[128.88067627 118.51725006]
[141.96989441 125.84339905]
[155.05911255 133.16954041]
[169.71293640 136.37353516]
[179.85359192 147.42643738]
[181.78654480 162.30137634]
[174.80755615 175.57893372]
[161.45927429 182.42170715]
[146.60488892 180.33665466]
[135.65632629 170.08341980]
[132.60253906 155.39674377]
[125.41115570 142.23300171]
[118.21977234 129.06925964]
[112.88931274 134.34527588]
[112.88931274 149.34527588]
[112.88931274 164.34527588]
[112.88931274 179.34527588]
[112.88931274 194.34527588]
[112.88931274 209.34527588]
[112.88931274 224.34527588]
[112.88931274 239.34527588]
[112.88931274 254.34527588]
[112.88931274 269.34527588]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[13 99]
[14 98]
[15 97]
[18 94]
[19 93]
[20 92]
[21 91]
[22 90]
[23 89]
[24 88]
[101 129]
[102 128]
[103 127]
[104 120]
[105 119]
[106 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
