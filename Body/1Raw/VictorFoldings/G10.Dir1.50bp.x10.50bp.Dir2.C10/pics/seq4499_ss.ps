%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUUAAACCCCCUUAUUUCUAGGACUAUGAGAAUCGAACCCAUCCCUGAGAAUCCAAAAUUCxxxxxxxxxxUUCUCACCAGACCUCCUAGGCGACCCAGACAAUUAUACCCUAGCCAACCCCUUAAACACCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 429.04467773]
[92.50000000 414.04467773]
[92.50000000 399.04467773]
[92.50000000 384.04467773]
[92.50000000 369.04467773]
[92.50000000 354.04467773]
[92.50000000 339.04467773]
[92.50000000 324.04467773]
[92.50000000 309.04467773]
[92.50000000 294.04467773]
[77.80443573 291.14389038]
[63.95278549 285.42993164]
[51.47812653 277.12060547]
[40.86095047 266.53375244]
[32.51063156 254.07495117]
[26.74966240 240.22196960]
[23.80118752 225.50653076]
[23.78036499 210.49382019]
[26.68986511 195.76083374]
[32.41970444 181.87419128]
[40.75139618 169.36828613]
[51.36627960 158.72483826]
[63.85771179 150.35423279]
[77.74665070 144.57972717]
[92.50000000 141.62498474]
[92.50000000 126.62499237]
[80.56707764 119.68505859]
[73.47389984 107.84258270]
[72.98702240 94.04691315]
[79.22770691 81.73386383]
[71.07103729 69.14542389]
[62.91437149 56.55698395]
[48.91677856 49.18284607]
[48.48933792 34.29437637]
[40.33267212 21.70593452]
[23.75843430 13.74822140]
[23.47285080 -3.77213717]
[15.05944061 -16.19045067]
[6.64603090 -28.60876656]
[-1.76737928 -41.02708054]
[-10.18078899 -53.44539261]
[-18.59420013 -65.86370850]
[-32.17744064 -59.42973709]
[-46.58366394 -55.14474487]
[-61.47517014 -53.10918808]
[-76.50287628 -53.37077332]
[-91.31451416 -55.92337036]
[-105.56288147 -60.70714951]
[-118.91397095 -67.60996246]
[-131.05480957 -76.47000885]
[-141.70082092 -87.07958221]
[-150.60241699 -99.18998718]
[-157.55094910 -112.51734161]
[-162.38352966 -126.74922943]
[-164.98686218 -141.55203247]
[-165.29995728 -156.57876587]
[-163.31544495 -171.47715759]
[-159.07984924 -185.89797974]
[-152.69245911 -199.50318909]
[-144.30302429 -211.97386169]
[-134.10816956 -223.01766968]
[-122.34690857 -232.37571716]
[-109.29492950 -239.82864380]
[-95.25818634 -245.20175171]
[-80.56571960 -248.36907959]
[-65.56195068 -249.25637817]
[-50.59858322 -247.84284973]
[-36.02637863 -244.16163635]
[-22.18693542 -238.29901123]
[-9.40466785 -230.39244080]
[2.02079058 -220.62722778]
[11.82160950 -209.23229980]
[19.76804543 -196.47476196]
[25.67382050 -182.65368652]
[29.40049362 -168.09304810]
[30.86071014 -153.13415527]
[30.02023888 -138.12768555]
[26.89878082 -123.42541504]
[21.56950760 -109.37197113]
[14.15734577 -96.29679108]
[4.83604670 -84.50637817]
[-6.17588520 -74.27712250]
[2.23752475 -61.85880280]
[10.65093517 -49.44049072]
[19.06434441 -37.02217484]
[27.47775459 -24.60386086]
[35.89116669 -12.18554783]
[47.74237823 -9.57576466]
[54.84538651 0.75470656]
[52.92111206 13.54926968]
[61.07777786 26.13770866]
[74.49195862 32.61143875]
[75.50281525 48.40031815]
[83.65947723 60.98875809]
[91.81614685 73.57719421]
[111.04288483 74.63871765]
[124.91813660 87.99056244]
[139.69024658 85.38584137]
[154.46237183 82.78111267]
[169.23448181 80.17639160]
[184.00660706 77.57167053]
[186.09393311 62.58840561]
[192.71101379 48.98438263]
[203.20956421 38.09238434]
[216.56105042 30.97949982]
[231.45741272 28.34257507]
[246.43928528 30.43994904]
[260.03887939 37.06614304]
[270.92382812 47.57199097]
[278.02777100 60.92823410]
[280.65469360 75.82637024]
[278.54730225 90.80682373]
[271.91198730 104.40196228]
[261.39883423 115.27988434]
[248.03784180 122.37487030]
[233.13795471 124.99182892]
[218.15892029 122.87437439]
[204.56822205 116.22996521]
[193.69735718 105.70954132]
[186.61132812 92.34378815]
[171.83920288 94.94850922]
[157.06709290 97.55323029]
[142.29496765 100.15795135]
[127.52285767 102.76268005]
[124.29126740 113.23156738]
[117.24868774 121.62458801]
[107.50000000 126.62499237]
[107.50000000 141.62498474]
[122.25334930 144.57972717]
[136.14228821 150.35423279]
[148.63372803 158.72483826]
[159.24861145 169.36828613]
[167.58029175 181.87419128]
[173.31013489 195.76083374]
[176.21963501 210.49382019]
[176.19880676 225.50653076]
[173.25033569 240.22196960]
[167.48936462 254.07495117]
[159.13905334 266.53375244]
[148.52186584 277.12060547]
[136.04721069 285.42993164]
[122.19556427 291.14389038]
[107.50000000 294.04467773]
[107.50000000 309.04467773]
[107.50000000 324.04467773]
[107.50000000 339.04467773]
[107.50000000 354.04467773]
[107.50000000 369.04467773]
[107.50000000 384.04467773]
[107.50000000 399.04467773]
[107.50000000 414.04467773]
[107.50000000 429.04467773]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[25 128]
[26 127]
[30 95]
[31 94]
[32 93]
[34 91]
[35 90]
[37 87]
[38 86]
[39 85]
[40 84]
[41 83]
[42 82]
[97 124]
[98 123]
[99 122]
[100 121]
[101 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
