%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUAUUGUAACUUACUACUCCGGAAAAAAAGAACCAUUUGGAUACAUAGGUAUGGUCUGAxxxxxxxxxxAGCCUCUACCUGCACGACAACACAUAAUGACCCACCAAUCACAUGCCUAUCAUAUAGUAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[124.78836823 295.88137817]
[124.16439056 280.89437866]
[123.54041290 265.90734863]
[122.91643524 250.92034912]
[122.29245758 235.93333435]
[121.66847992 220.94631958]
[121.04450226 205.95928955]
[120.42052460 190.97227478]
[117.78166199 176.20622253]
[113.17610168 161.93077087]
[108.57053375 147.65530396]
[103.96497345 133.37983704]
[99.35940552 119.10438538]
[86.04425049 112.19738007]
[71.72164917 116.65419769]
[60.84361267 128.14241028]
[46.39219284 124.53606415]
[32.06959534 128.99287415]
[25.36171722 140.05895996]
[13.29122639 143.45339966]
[2.51268744 137.87393188]
[-11.89952850 142.03182983]
[-26.31174469 146.18971252]
[-27.62745285 161.31033325]
[-34.32002640 174.93289185]
[-45.48434830 185.21502686]
[-59.61053467 190.76617432]
[-74.78813934 190.83558655]
[-88.96450806 185.41387939]
[-100.22241211 175.23429871]
[-107.03930664 161.67352295]
[-108.49326324 146.56556702]
[-104.38764954 131.95364380]
[-95.27771759 119.81389618]
[-82.39550018 111.78812408]
[-67.48322296 108.96175385]
[-52.55764008 111.71701813]
[-39.63732147 119.68130493]
[-30.46963120 131.77749634]
[-16.05741692 127.61960602]
[-1.64519989 123.46172333]
[9.78486919 110.18190765]
[27.61277962 114.67028046]
[41.93537521 110.21346283]
[51.78896713 99.04404449]
[67.26483917 102.33160400]
[81.58743286 97.87478638]
[92.24906158 87.32349396]
[96.85462189 73.04803467]
[101.46018982 58.77257538]
[106.06575012 44.49711227]
[102.81492615 29.85361290]
[92.60144806 18.86794853]
[82.38796997 7.88228273]
[72.17449188 -3.10338187]
[56.34868622 -7.40176058]
[52.42045975 -23.32347679]
[64.43082428 -34.48963547]
[80.02455902 -29.41344643]
[83.16015625 -13.31686115]
[93.37363434 -2.33119702]
[103.58711243 8.65446758]
[113.80059052 19.64013290]
[128.70249939 17.92744255]
[136.15740967 4.91113329]
[143.61231995 -8.10517597]
[151.06723022 -21.12148476]
[139.41352844 -31.22594833]
[129.94586182 -43.39677048]
[123.02297211 -57.16980362]
[118.90665436 -72.02025604]
[117.75177002 -87.38265991]
[119.60046387 -102.67241669]
[124.38062286 -117.30805206]
[131.90866089 -130.73330688]
[141.89662170 -142.43830872]
[153.96313477 -151.97891235]
[167.64802551 -158.99354553]
[182.42982483 -163.21693420]
[197.74566650 -164.49015808]
[213.01271057 -162.76654053]
[227.65034485 -158.11346436]
[234.83285522 -171.28204346]
[228.05789185 -185.24197388]
[230.81541443 -200.51206970]
[242.04508972 -211.22065735]
[257.42889404 -213.25007629]
[271.05142212 -205.81997681]
[277.67453003 -191.78738403]
[274.75152588 -176.54809570]
[263.40634155 -165.96195984]
[248.00143433 -164.09953308]
[240.81892395 -150.93095398]
[252.12005615 -141.67785645]
[261.52050781 -130.49362183]
[268.69573975 -117.76204681]
[273.39752197 -103.92041779]
[275.46264648 -89.44445038]
[274.81857300 -74.83197784]
[271.48590088 -60.58580780]
[265.57785034 -47.19641495]
[257.29626465 -35.12507629]
[246.92480469 -24.78796959]
[234.81922913 -16.54181671]
[221.39517212 -10.67158794]
[207.11386108 -7.38064337]
[192.46630859 -6.78369474]
[177.95639038 -8.90280437]
[164.08354187 -13.66657543]
[156.62863159 -0.65026581]
[149.17372131 12.36604404]
[141.71881104 25.38235283]
[139.30326843 37.70019150]
[131.16273499 46.32775116]
[120.34121704 49.10267639]
[115.73564911 63.37813950]
[111.13008881 77.65360260]
[106.52452087 91.92906189]
[110.47467041 93.58447266]
[113.88194275 97.06822205]
[115.95034790 102.13847351]
[116.00804901 108.22615051]
[113.63486481 114.49881744]
[118.24043274 128.77427673]
[122.84599304 143.04974365]
[127.45156097 157.32519531]
[132.05712891 171.60066223]
[136.36228943 157.23175049]
[146.05348206 145.78269958]
[159.51402283 139.16348267]
[174.49836731 138.47831726]
[188.50679016 143.84152222]
[199.20239258 154.35836792]
[204.80088806 168.27442932]
[204.36833191 183.26818848]
[197.97688293 196.83836365]
[186.69277954 206.72111511]
[172.39845276 211.26780701]
[157.47853088 209.71994019]
[144.42198181 202.33572388]
[135.40754700 190.34829712]
[136.03152466 205.33531189]
[136.65550232 220.32234192]
[137.27947998 235.30935669]
[137.90345764 250.29637146]
[138.52743530 265.28338623]
[139.15141296 280.27038574]
[139.77539062 295.25741577]
[146.47537231 310.83132935]
[133.36485291 321.58074951]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 148]
[2 147]
[3 146]
[4 145]
[5 144]
[6 143]
[7 142]
[8 141]
[9 127]
[10 126]
[11 125]
[12 124]
[13 123]
[14 47]
[15 46]
[17 44]
[18 43]
[21 41]
[22 40]
[23 39]
[48 118]
[49 117]
[50 116]
[51 115]
[52 63]
[53 62]
[54 61]
[55 60]
[64 112]
[65 111]
[66 110]
[67 109]
[82 93]
[83 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
