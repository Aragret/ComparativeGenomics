%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUAUCCUUCUUGCUCAUCAGUUGAUGAUACGCCCGAGCAGAUGCCAACACAGCAGCCAUUxxxxxxxxxxUUGCAACUAUAGCAACAGCCUUCAUAGGCUAUGUCCUCCCGUGAGGCCAAAUAUCAUUCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[68.61461639 302.26748657]
[68.61461639 287.26748657]
[68.61461639 272.26748657]
[68.61461639 257.26748657]
[68.61461639 242.26748657]
[68.61461639 227.26748657]
[68.61461639 212.26748657]
[68.61461639 197.26748657]
[68.61461639 182.26748657]
[68.61461639 167.26748657]
[62.96511078 162.33462524]
[62.29676819 177.31973267]
[50.16433716 186.14039612]
[35.70357132 182.15464783]
[29.80345345 168.36376953]
[36.90678787 155.15229797]
[51.66610718 152.46890259]
[46.01660156 147.53604126]
[31.15355682 149.55838013]
[16.29051018 151.58071899]
[8.14736652 155.86335754]
[1.09758484 153.48718262]
[-13.80431747 155.19987488]
[-28.70622063 156.91256714]
[-43.60812378 158.62524414]
[-58.37417603 161.26411438]
[-72.94688416 164.81887817]
[-87.51958466 168.37364197]
[-102.09228516 171.92840576]
[-111.62007904 184.83578491]
[-127.65669250 185.29028320]
[-137.90020752 172.94322205]
[-134.49267578 157.26622009]
[-120.04807281 150.28533936]
[-105.64704895 157.35569763]
[-91.07434845 153.80093384]
[-76.50164032 150.24617004]
[-61.92893982 146.69140625]
[-73.89723969 137.64929199]
[-76.15684509 122.82046509]
[-67.42486572 110.62405396]
[-52.65891266 107.98461914]
[-40.24241638 116.40071106]
[-37.22489166 131.09405518]
[-45.32081223 143.72334290]
[-30.41890907 142.01066589]
[-15.51700687 140.29797363]
[-0.61510485 138.58528137]
[14.26817513 136.71766663]
[29.13122177 134.69532776]
[43.99427032 132.67300415]
[53.25921631 120.87635803]
[51.70163727 105.95744324]
[50.14405441 91.03853607]
[35.46943283 87.31284332]
[22.97835541 78.80725861]
[14.16755390 66.56430054]
[10.08476734 52.07289124]
[11.20418644 37.08728409]
[17.37145424 23.41471100]
[27.82463074 12.69742393]
[41.28826141 6.21545744]
[39.73068237 -8.70345497]
[38.17309952 -23.62236595]
[23.41371918 -27.00458145]
[10.55356121 -34.99802017]
[0.98760051 -46.73561478]
[-4.24651861 -60.94415665]
[-4.58103848 -76.08241272]
[0.02032706 -90.50830078]
[9.05845642 -102.65699768]
[21.55296135 -111.21071625]
[36.14853287 -115.24160767]
[51.26194763 -114.31242371]
[65.25382233 -108.52397156]
[76.60641479 -98.50412750]
[84.08828735 -85.33976746]
[86.88786316 -70.45886993]
[84.70145416 -55.47560120]
[77.76624298 -42.01523209]
[66.83449554 -31.53784561]
[53.09201431 -25.17994690]
[54.64959335 -10.26103592]
[56.20717621 4.65787649]
[70.71934509 8.21908188]
[83.16080475 16.54609680]
[92.01921082 28.64994431]
[96.20983887 43.08116531]
[95.20836639 58.10338593]
[89.11640930 71.90223694]
[78.65157318 82.80448914]
[65.06296539 89.48094940]
[66.62055206 104.39986420]
[68.17813110 119.31877899]
[69.12887573 84.67195892]
[96.72531128 68.46248627]
[122.72914124 82.07453156]
[136.51152039 76.15456390]
[150.29389954 70.23460388]
[164.07627869 64.31464386]
[177.85865784 58.39468002]
[187.23295593 44.93902206]
[203.54786682 46.59898376]
[210.02003479 61.66693497]
[199.99142456 74.64226532]
[183.77862549 72.17706299]
[169.99624634 78.09702301]
[156.21386719 84.01698303]
[142.43148804 89.93695068]
[128.64909363 95.85691071]
[128.27307129 117.18679810]
[112.23140717 135.16018677]
[126.55400085 139.61700439]
[142.02987671 136.32945251]
[151.88346863 147.49887085]
[166.20605469 151.95568848]
[180.52865601 156.41250610]
[194.85125732 160.86932373]
[210.72042847 156.73393250]
[222.04216003 168.59774780]
[217.16963196 184.25631714]
[201.11526489 187.60142517]
[190.39443970 175.19190979]
[176.07183838 170.73510742]
[161.74923706 166.27828979]
[147.42665100 161.82147217]
[132.97521973 165.42781067]
[122.09718323 153.93960571]
[107.77458954 149.48278809]
[101.73459625 153.92897034]
[112.16714478 164.70680237]
[122.59969330 175.48464966]
[136.15388489 181.90991211]
[140.62091064 196.22932434]
[133.12413025 209.22155762]
[118.49126434 212.51995850]
[106.14551544 204.00041199]
[104.03737640 189.14878845]
[96.84599304 175.98506165]
[89.65460968 162.82131958]
[83.61461639 167.26748657]
[83.61461639 182.26748657]
[83.61461639 197.26748657]
[83.61461639 212.26748657]
[83.61461639 227.26748657]
[83.61461639 242.26748657]
[83.61461639 257.26748657]
[83.61461639 272.26748657]
[83.61461639 287.26748657]
[83.61461639 302.26748657]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[18 51]
[19 50]
[20 49]
[22 48]
[23 47]
[24 46]
[25 45]
[26 38]
[27 37]
[28 36]
[29 35]
[52 94]
[53 93]
[54 92]
[62 84]
[63 83]
[64 82]
[97 110]
[98 109]
[99 108]
[100 107]
[101 106]
[112 129]
[113 128]
[115 126]
[116 125]
[117 124]
[118 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
