%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCACUUCUAGGAAUACUAGUAUAUCGCUCACACCUCAUAUCCUCCCUACUAUGCCUAGAAGGAxxxxxxxxxxUAAUCCUCUCUCAAGGACUUCAAACUCUACUCCCACUAAUAGCUUUUUGAUGACUUCUAGCAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[83.89618683 263.80944824]
[83.89618683 248.80944824]
[83.89618683 233.80944824]
[83.89618683 218.80944824]
[83.89618683 203.80944824]
[83.89618683 188.80944824]
[83.89618683 173.80944824]
[83.89618683 158.80944824]
[83.89618683 143.80944824]
[83.89618683 128.80944824]
[73.88899994 117.63554382]
[58.97975159 115.98803711]
[50.04924011 118.16381836]
[43.78974533 114.15550232]
[28.91644478 112.21000671]
[14.04314518 110.26451111]
[-0.83015472 108.31902313]
[-15.70345497 106.37352753]
[-30.57675552 104.42803192]
[-45.45005417 102.48254395]
[-60.32335663 100.53704834]
[-75.01048279 106.41912079]
[-86.62673187 97.09645081]
[-101.50003052 95.15096283]
[-106.42162323 97.20273590]
[-111.15560913 97.13029480]
[-114.91244507 95.37126160]
[-117.19705963 92.61647797]
[-131.92684937 89.78217316]
[-146.65663147 86.94786835]
[-161.38642883 84.11356354]
[-167.56298828 97.85935974]
[-176.74353027 109.80986023]
[-188.43296814 119.32057953]
[-202.00088501 125.87862396]
[-216.71562195 129.13032532]
[-231.78358459 128.90032959]
[-246.39221191 125.20102692]
[-259.75366211 118.23193359]
[-271.14736938 108.36886597]
[-279.95889282 96.14373779]
[-285.71304321 82.21582794]
[-288.09948730 67.33625793]
[-286.98953247 52.30746078]
[-282.44305420 37.93992233]
[-274.70520020 25.00846481]
[-264.19332886 14.21046352]
[-251.47425842 6.12824345]
[-237.23396301 1.19766819]
[-222.24037170 -0.31536293]
[-207.30210876 1.67074609]
[-193.22473145 7.04888678]
[-180.76744080 15.52902317]
[-170.60205078 26.65383148]
[-163.27673340 39.82336426]
[-159.18656921 54.32740784]
[-158.55212402 69.38377380]
[-143.82234192 72.21807861]
[-129.09254456 75.05238342]
[-114.36275482 77.88668060]
[-99.55453491 80.27765656]
[-84.68123627 82.22315216]
[-71.05794525 76.20192719]
[-58.37786102 85.66374969]
[-43.50456238 87.60924530]
[-28.63126183 89.55473328]
[-13.75796223 91.50022888]
[1.11533809 93.44571686]
[15.98863792 95.39121246]
[30.86193848 97.33670807]
[45.73523712 99.28219604]
[60.62725830 101.07878876]
[75.53650665 102.72629547]
[63.24226761 94.13259888]
[50.94802856 85.53890228]
[37.92016220 78.10420227]
[28.62294006 66.33297729]
[24.40851212 51.93719482]
[25.88980865 37.01051331]
[32.85139465 23.72381592]
[44.28080368 14.00946617]
[58.51578903 9.28028011]
[73.48606873 10.22405338]
[87.01442719 16.70352554]
[97.13209534 27.77429771]
[95.63005066 42.69890213]
[94.12800598 57.62350845]
[102.60140991 45.24605179]
[111.07481384 32.86859894]
[119.54821777 20.49114037]
[116.39363098 5.00488520]
[125.18299866 -8.12990189]
[140.70173645 -11.12058258]
[153.74285889 -2.19284105]
[156.56930542 13.35665321]
[147.50418091 26.30266190]
[131.92567444 28.96454620]
[123.45227051 41.34200287]
[114.97886658 53.71945953]
[106.50546265 66.09691620]
[109.97042847 72.74853516]
[116.90035248 86.05177307]
[120.36531830 92.70338440]
[135.36456299 92.85346222]
[150.36381531 93.00353241]
[165.36306763 93.15361023]
[180.36231995 93.30368042]
[192.59886169 80.83973694]
[209.72715759 81.04960632]
[221.19410706 93.31741333]
[236.19335938 93.16734314]
[251.19261169 93.01726532]
[258.66860962 79.60066986]
[271.85952759 71.73332977]
[287.21710205 71.53153229]
[300.61019897 79.04954529]
[308.43615723 92.26506805]
[308.58981323 107.62319183]
[301.02984619 120.99265289]
[287.78985596 128.77714539]
[272.43133545 128.88267517]
[259.08563232 121.28083801]
[251.34268188 108.01651764]
[236.34344482 108.16658783]
[221.34419250 108.31666565]
[213.67527771 118.71159363]
[201.22836304 122.83652496]
[188.49621582 118.96562958]
[180.21223450 108.30293274]
[165.21298218 108.15285492]
[150.21374512 108.00278473]
[135.21449280 107.85270691]
[120.21524048 107.70263672]
[114.88547516 112.97933960]
[127.97660828 120.30207062]
[141.06773376 127.62479401]
[155.72151184 130.82897949]
[165.86233521 141.88175964]
[167.79592896 156.75660706]
[160.81788635 170.03466797]
[147.47029114 176.87876892]
[132.61564636 174.79562378]
[121.66545868 164.54411316]
[118.60871124 149.86022949]
[111.41733551 136.69648743]
[104.22595215 123.53275299]
[98.89618683 128.80944824]
[98.89618683 143.80944824]
[98.89618683 158.80944824]
[98.89618683 173.80944824]
[98.89618683 188.80944824]
[98.89618683 203.80944824]
[98.89618683 218.80944824]
[98.89618683 233.80944824]
[98.89618683 248.80944824]
[98.89618683 263.80944824]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 156]
[2 155]
[3 154]
[4 153]
[5 152]
[6 151]
[7 150]
[8 149]
[9 148]
[10 147]
[11 73]
[12 72]
[14 71]
[15 70]
[16 69]
[17 68]
[18 67]
[19 66]
[20 65]
[21 64]
[23 62]
[24 61]
[28 60]
[29 59]
[30 58]
[31 57]
[87 100]
[88 99]
[89 98]
[90 97]
[103 133]
[104 132]
[105 131]
[106 130]
[107 129]
[110 125]
[111 124]
[112 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
