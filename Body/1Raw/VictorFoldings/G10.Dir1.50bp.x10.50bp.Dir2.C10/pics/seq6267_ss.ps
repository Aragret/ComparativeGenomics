%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUACAAACCACAAAGACAUUGGAACACUAUACCUAUUAUUCGGCGCAUGAGCUGGAGUCCxxxxxxxxxxGCCUAGCCAUGUGAUUUCACUUCCACUCCAUAACGCUCCUCAUACUAGGCCUACUAACCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 294.41549683]
[92.50000000 279.41549683]
[92.50000000 264.41549683]
[92.50000000 249.41549683]
[92.50000000 234.41549683]
[92.50000000 219.41549683]
[92.50000000 204.41549683]
[92.50000000 189.41549683]
[92.50000000 174.41549683]
[92.50000000 159.41549683]
[72.97853088 153.44429016]
[56.59694290 141.26287842]
[50.07006836 155.67504883]
[35.23352814 156.98896790]
[23.15353966 165.88131714]
[11.07355118 174.77366638]
[13.94318390 189.76460266]
[10.01601601 204.51383972]
[0.07178769 216.09292603]
[-13.91506577 222.20280457]
[-29.16744614 221.63037109]
[-42.65697861 214.48927307]
[-51.70531082 202.19738770]
[-54.51588821 187.19528198]
[-50.53066635 172.46160889]
[-40.54092026 160.92178345]
[-26.53011322 154.86703491]
[-11.28010654 155.49952698]
[2.18120193 162.69367981]
[14.26119041 153.80133057]
[26.34117889 144.90898132]
[32.00401306 131.13285828]
[47.70459366 129.18289185]
[41.91048431 114.56224823]
[40.12244415 98.93733215]
[42.46378708 83.38569641]
[48.77304077 68.97985077]
[58.61509705 56.71326828]
[71.31121826 47.43190384]
[85.98581696 41.77583313]
[101.62689209 40.13511658]
[117.15576935 42.62290955]
[123.21878052 28.90285492]
[129.28179932 15.18280125]
[135.34480286 1.46274734]
[133.84576416 -14.28728294]
[146.06723022 -22.80111694]
[152.13023376 -36.52117157]
[158.19325256 -50.24122238]
[152.72834778 -64.82794952]
[159.07255554 -78.65566254]
[173.01243591 -83.77572632]
[179.07545471 -97.49577332]
[181.56057739 -112.28848267]
[180.31370544 -127.23657227]
[179.06681824 -142.18466187]
[177.81994629 -157.13275146]
[176.57307434 -172.08082581]
[175.32620239 -187.02891541]
[171.47270203 -195.38369751]
[174.21218872 -202.30041504]
[173.27655029 -217.27120972]
[172.34092712 -232.24200439]
[171.24961853 -247.20223999]
[170.00274658 -262.15032959]
[155.37037659 -266.10885620]
[142.97613525 -274.83572388]
[134.31666565 -287.27716064]
[130.43765259 -301.93081665]
[131.80751038 -317.02713013]
[138.26080322 -330.74322510]
[149.01829529 -341.42276001]
[162.78092957 -347.77612305]
[177.88682556 -349.03616333]
[192.51187134 -345.05068970]
[204.89001465 -336.30099487]
[213.52653503 -323.84362793]
[217.37854004 -309.18286133]
[215.98086548 -294.08908081]
[209.50230408 -280.38491821]
[198.72515869 -269.72521973]
[184.95083618 -263.39721680]
[186.19770813 -248.44912720]
[189.91195679 -242.00318909]
[187.31172180 -233.17762756]
[188.24734497 -218.20683289]
[189.18298340 -203.23603821]
[190.27429199 -188.27578735]
[191.52116394 -173.32771301]
[192.76803589 -158.37962341]
[194.01490784 -143.43153381]
[195.26177979 -128.48344421]
[196.50866699 -113.53536224]
[203.20362854 -126.95837402]
[212.86431885 -138.43316650]
[224.95013428 -147.31761169]
[238.78472900 -153.11451721]
[253.59390259 -155.49948120]
[268.54895020 -154.33905029]
[282.81295776 -149.69815063]
[295.58773804 -141.83650208]
[306.15835571 -131.19404602]
[313.93328857 -118.36634064]
[318.47747803 -104.07122040]
[319.53662109 -89.10865784]
[317.05139160 -74.31596375]
[311.16094971 -60.52095032]
[302.19485474 -48.49559021]
[290.65490723 -38.91282654]
[277.18685913 -32.30892181]
[262.54437256 -29.05343056]
[247.54690552 -29.32853317]
[233.03369141 -33.11883545]
[219.81687927 -40.21223068]
[208.63613892 -50.21176529]
[200.11709595 -62.55786133]
[194.73652649 -76.55962372]
[192.79550171 -91.43276215]
[186.73249817 -77.71270752]
[192.33155823 -63.95821762]
[186.37825012 -49.95775986]
[171.91329956 -44.17821121]
[165.85029602 -30.45815659]
[159.78727722 -16.73810387]
[161.71998596 -1.96942294]
[149.06486511 7.52576065]
[143.00184631 21.24581337]
[136.93882751 34.96586609]
[130.87582397 48.68592072]
[140.72773743 56.09438705]
[148.85414124 65.36297607]
[154.91078186 76.09902191]
[158.64103699 87.84766388]
[159.88688660 100.11116028]
[158.59552002 112.36994171]
[154.82168579 124.10466003]
[148.72523499 134.81814575]
[140.56446838 144.05650330]
[130.68511963 151.42834473]
[119.50575256 156.62133789]
[107.50000000 159.41549683]
[107.50000000 174.41549683]
[107.50000000 189.41549683]
[107.50000000 204.41549683]
[107.50000000 219.41549683]
[107.50000000 234.41549683]
[107.50000000 249.41549683]
[107.50000000 264.41549683]
[107.50000000 279.41549683]
[107.50000000 294.41549683]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 33]
[14 31]
[15 30]
[16 29]
[42 129]
[43 128]
[44 127]
[45 126]
[47 124]
[48 123]
[49 122]
[52 119]
[53 118]
[54 93]
[55 92]
[56 91]
[57 90]
[58 89]
[59 88]
[61 87]
[62 86]
[63 85]
[64 83]
[65 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
