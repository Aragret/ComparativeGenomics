%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAGACAUCGUACUACACGACACGUACUACGUUGUAGCCCACUUCCACUAUGUCCUAUCAxxxxxxxxxxUCCGCUACCUUCACGCCAAUGGCGCCUCAAUAUUCUUUAUCUGCCUCUUCCUACACAUCGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[297.20516968 50.35660934]
[291.21130371 37.40139771]
[277.19458008 42.74290848]
[263.17788696 48.08441925]
[249.16116333 53.42593384]
[235.14445496 58.76744461]
[226.00674438 70.52973938]
[210.35594177 68.21389008]
[196.33923340 73.55540466]
[182.32252502 78.89691925]
[168.30580139 84.23842621]
[154.28909302 89.57994080]
[151.53288269 93.55219269]
[146.22387695 95.79848480]
[139.57659912 94.83876038]
[125.34981537 99.59257507]
[111.12303162 104.34639740]
[109.10638428 149.00749207]
[96.49525452 157.12904358]
[83.88412476 165.25057983]
[71.27299500 173.37213135]
[66.48599243 188.68434143]
[51.47823715 194.35417175]
[37.76240158 186.03219604]
[35.86009216 170.10232544]
[47.23060608 158.78459167]
[63.15145493 160.76100159]
[75.76258087 152.63945007]
[88.37371063 144.51791382]
[100.98484039 136.39636230]
[98.75643158 129.23507690]
[92.07120514 107.75117493]
[77.07851410 108.21921539]
[62.08581543 108.68725586]
[47.09312057 109.15530396]
[31.45036125 115.69292450]
[20.83788681 102.47128296]
[30.60499382 88.61343384]
[46.62507629 94.16260529]
[61.61777115 93.69456482]
[76.61046600 93.22652435]
[91.60316467 92.75847626]
[106.36921692 90.11961365]
[120.59600067 85.36579895]
[134.82278442 80.61198425]
[148.94758606 75.56322479]
[162.96429443 70.22171783]
[176.98100281 64.88020325]
[190.99772644 59.53869247]
[205.01443481 54.19717789]
[215.15470886 42.05282593]
[229.80293274 44.75073242]
[243.81965637 39.40922165]
[257.83636475 34.06770706]
[271.85308838 28.72619629]
[285.86978149 23.38468361]
[281.32003784 8.19892120]
[277.91769409 -7.28408670]
[275.68179321 -22.97777367]
[274.62475586 -38.79439545]
[274.75247192 -54.64551926]
[276.06414795 -70.44253540]
[278.55249023 -86.09712982]
[282.20346069 -101.52178192]
[286.99667358 -116.63027191]
[292.90527344 -131.33815002]
[299.89620972 -145.56320190]
[307.93032837 -159.22590637]
[316.96270752 -172.24990845]
[326.94277954 -184.56240845]
[337.81475830 -196.09461975]
[349.51782227 -206.78207397]
[361.98654175 -216.56506348]
[375.15112305 -225.38890076]
[388.93801880 -233.20433044]
[403.27005005 -239.96765137]
[418.06716919 -245.64111328]
[433.24655151 -250.19300842]
[448.72335815 -253.59796143]
[464.41107178 -255.83694458]
[480.22195435 -256.89749146]
[496.06765747 -256.77371216]
[511.85952759 -255.46633911]
[527.50927734 -252.98271179]
[542.92950439 -249.33676147]
[558.03393555 -244.54891968]
[572.73822021 -238.64596558]
[586.96002197 -231.66094971]
[600.61999512 -223.63294983]
[613.64166260 -214.60690308]
[625.95239258 -204.63328552]
[637.48327637 -193.76788330]
[648.16986084 -182.07148743]
[657.95251465 -169.60949707]
[670.39196777 -177.99163818]
[682.83142090 -186.37379456]
[695.27087402 -194.75593567]
[705.02746582 -208.62120056]
[721.05175781 -203.08419800]
[720.16711426 -186.15335083]
[703.65301514 -182.31649780]
[691.21356201 -173.93434143]
[678.77410889 -165.55220032]
[666.33465576 -157.17005920]
[673.47338867 -144.81880188]
[679.76483154 -132.01502991]
[685.18060303 -118.81674957]
[689.69598389 -105.28379822]
[693.29058838 -91.47749329]
[695.94812012 -77.46042633]
[697.65637207 -63.29613113]
[698.40771484 -49.04880905]
[698.19860840 -34.78303528]
[697.03002930 -20.56348610]
[694.90728760 -6.45461607]
[691.83990479 7.47961617]
[687.84185791 21.17604065]
[682.93115234 34.57256699]
[677.13006592 47.60845947]
[670.46484375 60.22461319]
[662.96569824 72.36383057]
[654.66662598 83.97107697]
[645.60522461 94.99372101]
[635.82250977 105.38177490]
[625.36279297 115.08813477]
[614.27355957 124.06878662]
[602.60498047 132.28300476]
[590.40997314 139.69352722]
[577.74383545 146.26675415]
[564.66387939 151.97285461]
[551.22943115 156.78593445]
[537.50146484 160.68417358]
[523.54205322 163.64987183]
[509.41455078 165.66955566]
[495.18298340 166.73403931]
[480.91186523 166.83848572]
[466.66589355 165.98239136]
[452.50964355 164.16961670]
[438.50726318 161.40834045]
[424.72222900 157.71107483]
[411.21707153 153.09454346]
[398.05300903 147.57966614]
[385.28970337 141.19139099]
[372.98501587 133.95867920]
[361.19476318 125.91427612]
[349.97238159 117.09464264]
[339.36877441 107.53972626]
[329.43203735 97.29283142]
[320.20718384 86.40038300]
[311.73608398 74.91174316]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 56]
[3 55]
[4 54]
[5 53]
[6 52]
[8 50]
[9 49]
[10 48]
[11 47]
[12 46]
[15 45]
[16 44]
[17 43]
[18 30]
[19 29]
[20 28]
[21 27]
[32 42]
[33 41]
[34 40]
[35 39]
[94 104]
[95 103]
[96 102]
[97 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
