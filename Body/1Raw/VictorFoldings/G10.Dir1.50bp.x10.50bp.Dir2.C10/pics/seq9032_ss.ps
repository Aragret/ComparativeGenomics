%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGCCCCUACCCCCCAAUUAGGAGGGCACUGGCCCCCAACAGGCAUCACCCCGCUAAAUCCCCxxxxxxxxxxAUCACACACCGCACAAUCCCCUAUCUAGGCCUUCUUACGAGCCAAAACCUGCCCCUACUCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[178.17297363 85.55554199]
[168.04896545 96.48046112]
[152.65820312 92.81512451]
[138.23080444 96.92006683]
[123.80342865 101.02500916]
[109.37604523 105.12995911]
[95.50315857 110.83461761]
[82.36152649 118.06632233]
[69.21989441 125.29802704]
[56.07826614 132.52972412]
[42.93663406 139.76142883]
[29.79500389 146.99313354]
[16.65337181 154.22483826]
[16.23668098 169.51449585]
[8.27542591 182.45726013]
[-5.00700712 189.62966919]
[-19.99586296 189.19357300]
[-32.66857910 181.36619568]
[-45.81021118 188.59790039]
[-58.95184326 195.82958984]
[-67.31203461 209.26156616]
[-82.19277191 208.61883545]
[-95.33440399 215.85054016]
[-101.16690063 230.79582214]
[-116.53021240 235.41622925]
[-129.63891602 226.16737366]
[-130.43714905 210.14419556]
[-118.31256104 199.63829041]
[-102.56610107 202.70890808]
[-89.42446899 195.47720337]
[-82.00425720 182.56250000]
[-66.18354797 182.68795776]
[-53.04191208 175.45626831]
[-39.90028000 168.22456360]
[-39.73100662 153.33036804]
[-32.07837296 140.43489075]
[-18.91148758 133.05252075]
[-3.71752501 133.25320435]
[9.42166901 141.08320618]
[22.56330109 133.85150146]
[35.70493317 126.61979675]
[48.84656525 119.38809967]
[61.98819733 112.15639496]
[75.12982941 104.92469025]
[88.27146149 97.69298553]
[73.41751862 95.60479736]
[61.16184998 86.95619202]
[54.21649170 73.66100311]
[54.11838913 58.66131973]
[60.88924408 45.27642441]
[73.03074646 36.46824265]
[87.85609436 34.18593979]
[102.08460999 38.93456268]
[112.56766510 49.66329193]
[116.98546600 63.99797058]
[114.36040497 78.76648712]
[105.27109528 90.70257568]
[119.69847870 86.59762573]
[134.12586975 82.49268341]
[148.55325317 78.38774109]
[159.70919800 67.16920471]
[174.06802368 71.12815857]
[171.37393188 57.86922073]
[169.64814758 44.45009995]
[168.89970398 30.94140816]
[169.13252258 17.41423416]
[170.34535217 3.93976307]
[172.53175354 -9.41110516]
[175.68019104 -22.56811905]
[179.77407837 -35.46205139]
[184.79182434 -48.02506638]
[190.70701599 -60.19105911]
[197.48846436 -71.89602661]
[205.10047913 -83.07839966]
[213.50297546 -93.67934418]
[222.65170288 -103.64309692]
[232.49848938 -112.91725922]
[242.99151611 -121.45304108]
[254.07553101 -129.20555115]
[265.69216919 -136.13403320]
[277.78033447 -142.20205688]
[290.27633667 -147.37770081]
[303.11447144 -151.63377380]
[316.22711182 -154.94792175]
[329.54528809 -157.30273438]
[342.99890137 -158.68583679]
[356.51715088 -159.08999634]
[370.02890015 -158.51312256]
[383.46304321 -156.95826721]
[396.74890137 -154.43367004]
[409.81652832 -150.95263672]
[422.59722900 -146.53352356]
[435.02374268 -141.19961548]
[447.03067017 -134.97900391]
[458.55484009 -127.90445709]
[469.53564453 -120.01323700]
[479.91534424 -111.34688568]
[489.63928223 -101.95104980]
[498.65637207 -91.87517548]
[506.91912842 -81.17232513]
[514.38415527 -69.89882660]
[521.01214600 -58.11403656]
[526.76831055 -45.87997055]
[531.62237549 -33.26102829]
[535.54876709 -20.32362938]
[538.52691650 -7.13585615]
[540.54113770 6.23288393]
[541.58093262 19.71223640]
[541.64080811 33.23126984]
[556.60211182 34.30833817]
[571.56335449 35.38540649]
[580.11151123 22.62514114]
[593.90167236 15.86291122]
[609.22430420 16.91772842]
[621.95770264 25.50584793]
[628.67669678 39.31711197]
[627.57385254 54.63636017]
[618.94586182 67.34278870]
[605.11358643 74.01843262]
[589.79785156 72.86758423]
[577.11853027 64.19980621]
[570.48632812 50.34668732]
[555.52502441 49.26961899]
[540.56372070 48.19255066]
[537.92999268 64.82743835]
[533.80511475 81.15706635]
[528.22265625 97.04805756]
[521.22827148 112.37059784]
[512.87890625 126.99951172]
[503.24267578 140.81530762]
[492.39822388 153.70507812]
[480.43408203 165.56350708]
[467.44787598 176.29370117]
[453.54562378 185.80796814]
[438.84078979 194.02851868]
[423.45346069 200.88816833]
[407.50927734 206.33079529]
[391.13836670 210.31188965]
[374.47448730 212.79885864]
[357.65365601 213.77130127]
[340.81326294 213.22119141]
[324.09085083 211.15295410]
[307.62301636 207.58338928]
[291.54421997 202.54156494]
[275.98587036 196.06858826]
[261.07498169 188.21723938]
[246.93342590 179.05157471]
[233.67672729 168.64637756]
[221.41319275 157.08656311]
[210.24302673 144.46647644]
[200.25753784 130.88912964]
[191.53833008 116.46537018]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 62]
[3 60]
[4 59]
[5 58]
[6 57]
[7 45]
[8 44]
[9 43]
[10 42]
[11 41]
[12 40]
[13 39]
[18 34]
[19 33]
[20 32]
[22 30]
[23 29]
[109 124]
[110 123]
[111 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
