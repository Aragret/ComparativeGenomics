%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUAGCAGUAAACUAAGAGUAGAGUGCUUAGUUGAACAGGGCCCUGAAGCGCGUACACACCxxxxxxxxxxUACCCUAUAGCACCCCCUCUACCCCCUCUAGAGCCCACUGUAAAGCUAACUUAGCAUUAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[205.05508423 546.84515381]
[204.74302673 531.84838867]
[204.43098450 516.85162354]
[204.11892700 501.85485840]
[203.80686951 486.85812378]
[203.49481201 471.86135864]
[203.18275452 456.86459351]
[202.87069702 441.86785889]
[202.55863953 426.87109375]
[200.69102478 411.98782349]
[197.28805542 397.37893677]
[193.88507080 382.77001953]
[190.48208618 368.16113281]
[187.07911682 353.55224609]
[183.67613220 338.94335938]
[179.51824951 324.53112793]
[174.61669922 310.35458374]
[169.71514893 296.17800903]
[155.43595886 292.02557373]
[146.23107910 280.12036133]
[145.79634094 264.89984131]
[154.50799561 252.19497681]
[149.60644531 238.01841736]
[135.75033569 227.29421997]
[139.30577087 209.25706482]
[134.11036682 195.18554688]
[128.91494751 181.11402893]
[123.13867188 167.27081299]
[116.79154205 153.67987061]
[110.44441223 140.08891296]
[104.09728241 126.49796295]
[97.75015259 112.90701294]
[90.84315491 99.59185791]
[83.38824463 86.57554626]
[75.93333435 73.55923462]
[68.47842407 60.54292679]
[61.02351761 47.52661896]
[53.43360901 34.58856201]
[45.70952225 21.73015976]
[35.96187210 10.32913971]
[24.46006775 0.70061302]
[12.85872555 -8.80774593]
[1.15910232 -18.19490814]
[-14.44677162 -20.79630470]
[-19.53163910 -34.79606628]
[-31.23126221 -44.18323135]
[-39.94366837 -47.14056778]
[-43.07396698 -53.88940811]
[-58.62234497 -56.81490326]
[-63.41486359 -70.91741943]
[-74.91666412 -80.54594421]
[-90.63510132 -78.90084076]
[-102.86020660 -88.91694641]
[-104.33903503 -104.65189362]
[-94.19423676 -116.77041626]
[-78.44453430 -118.08280945]
[-66.43394470 -107.81044769]
[-65.28813934 -92.04775238]
[-53.78633881 -82.41922760]
[-39.06064606 -80.18242645]
[-33.44544220 -65.39121246]
[-21.84410095 -55.88285446]
[-10.14447689 -46.49569321]
[4.62456179 -44.56572723]
[10.54626369 -29.89453125]
[22.24588776 -20.50737000]
[29.47801781 -18.76325417]
[34.08859253 -10.80119038]
[45.59039688 -1.17266417]
[41.05637741 -15.47100925]
[41.59004593 -30.46151352]
[47.12935638 -44.40124130]
[57.03025818 -55.66943359]
[70.14157867 -62.95595169]
[84.93887329 -65.41358948]
[99.70168304 -62.75660706]
[112.71353149 -55.29392242]
[122.46156311 -43.89322281]
[127.81236267 -29.88005447]
[128.14381409 -14.88371658]
[123.41736603 -0.64782155]
[114.18257141 11.17243481]
[101.51313782 19.20272255]
[86.88214111 22.50936508]
[71.99070740 20.70790291]
[58.56792450 14.00607491]
[66.29200745 26.86447716]
[72.47238922 31.00556374]
[74.03982544 40.07170868]
[81.49473572 53.08801651]
[88.94964600 66.10432434]
[96.40455627 79.12063599]
[103.85946655 92.13694763]
[106.79874420 93.18318176]
[109.41001892 95.35017395]
[111.26702881 98.51364136]
[111.99744415 102.38977814]
[111.34111023 106.55988312]
[117.68823242 120.15083313]
[124.03536224 133.74179077]
[130.38249207 147.33273315]
[136.72962952 160.92369080]
[140.50514221 163.35412598]
[143.01962280 166.55543518]
[144.18563843 170.02275085]
[144.09344482 173.27629089]
[142.98646545 175.91862488]
[148.18188477 189.99014282]
[153.37730408 204.06166077]
[164.77716064 210.18513489]
[168.79454041 222.06283569]
[163.78300476 233.11686707]
[168.68455505 247.29342651]
[183.38308716 251.90420532]
[192.44235229 264.14279175]
[192.55665588 279.19107056]
[183.89170837 291.27645874]
[188.79325867 305.45303345]
[193.69480896 319.62957764]
[202.79985046 307.70910645]
[217.79060364 307.18225098]
[227.71002197 318.43414307]
[225.30781555 333.24053955]
[212.33981323 340.77917480]
[198.28503418 335.54037476]
[201.68800354 350.14926147]
[205.09098816 364.75814819]
[208.49395752 379.36706543]
[211.89694214 393.97595215]
[215.29992676 408.58483887]
[221.75198364 395.04339600]
[234.03184509 386.42913818]
[248.96089172 384.97189331]
[262.67477417 391.04882812]
[271.62371826 403.08694458]
[273.49130249 417.97024536]
[267.79412842 431.84619141]
[256.00686646 441.12304688]
[241.18061829 443.39956665]
[227.15312195 438.08642578]
[217.55538940 426.55905151]
[217.86744690 441.55578613]
[218.17950439 456.55255127]
[218.49156189 471.54928589]
[218.80361938 486.54605103]
[219.11567688 501.54281616]
[219.42773438 516.53955078]
[219.73979187 531.53631592]
[220.05184937 546.53308105]
[222.64283752 565.74078369]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 130]
[11 129]
[12 128]
[13 127]
[14 126]
[15 125]
[16 119]
[17 118]
[18 117]
[22 113]
[23 112]
[25 109]
[26 108]
[27 107]
[28 102]
[29 101]
[30 100]
[31 99]
[32 98]
[33 93]
[34 92]
[35 91]
[36 90]
[37 89]
[38 87]
[39 86]
[40 69]
[41 68]
[42 66]
[43 65]
[45 63]
[46 62]
[48 61]
[50 59]
[51 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
