%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUUCCCCUACUCAUCGCACUAAUUUACACUCACAACACCCUAGGCUCACUAAACAUUCUACUACUxxxxxxxxxxAGCAUCACACACCGCACAAUCCCCUAUCUAGGCCUUCUUACGAGCCAAAACCUGCCCCUACUCCUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 92.50000000]
[92.50000000 77.50000000]
[92.50000000 62.50000000]
[92.50000000 47.50000000]
[92.50000000 32.50000000]
[92.50000000 17.50000000]
[92.50000000 2.49999952]
[92.50000000 -12.50000000]
[92.50000000 -27.50000000]
[92.50000000 -42.50000000]
[77.51187897 -43.15434265]
[62.56657028 -44.46183777]
[47.69251633 -46.41999435]
[32.91802979 -49.02508545]
[18.27124023 -52.27214813]
[3.78002667 -56.15501022]
[-10.52802658 -60.66627121]
[-24.62568283 -65.79734802]
[-38.48610687 -71.53847504]
[-52.08291245 -77.87872314]
[-65.39022064 -84.80601501]
[-78.38269806 -92.30717468]
[-91.03561401 -100.36791992]
[-103.32488251 -108.97290802]
[-115.22711182 -118.10575867]
[-126.71963501 -127.74907684]
[-137.78059387 -137.88452148]
[-148.38891602 -148.49278259]
[-158.52441406 -159.55369568]
[-168.16780090 -171.04617310]
[-177.30070496 -182.94834900]
[-185.90576172 -195.23756409]
[-193.96656799 -207.89044189]
[-201.46778870 -220.88287354]
[-208.39515686 -234.19015503]
[-214.73547363 -247.78692627]
[-220.47666931 -261.64730835]
[-225.60783386 -275.74493408]
[-230.11917114 -290.05297852]
[-234.00210571 -304.54415894]
[-237.24923706 -319.19094849]
[-239.85441589 -333.96542358]
[-241.81263733 -348.83944702]
[-243.12020874 -363.78475952]
[-243.77464294 -378.77288818]
[-243.77465820 -393.77526855]
[-243.12030029 -408.76339722]
[-241.81277466 -423.70870972]
[-239.85459900 -438.58276367]
[-237.24948120 -453.35723877]
[-234.00238037 -468.00402832]
[-230.11950684 -482.49523926]
[-225.60821533 -496.80328369]
[-220.47711182 -510.90090942]
[-214.73596191 -524.76135254]
[-208.39569092 -538.35815430]
[-201.46836853 -551.66540527]
[-193.96719360 -564.65789795]
[-185.90641785 -577.31079102]
[-177.30140686 -589.60003662]
[-168.16854858 -601.50225830]
[-158.52520752 -612.99475098]
[-148.38973999 -624.05572510]
[-137.78144836 -634.66400146]
[-126.72053528 -644.79949951]
[-115.22804260 -654.44287109]
[-103.32585144 -663.57574463]
[-91.03661346 -672.18078613]
[-78.38372040 -680.24157715]
[-65.39127350 -687.74273682]
[-52.08398819 -694.67010498]
[-38.48720551 -701.01037598]
[-24.62680054 -706.75158691]
[-10.52916145 -711.88269043]
[3.77887654 -716.39398193]
[18.27007675 -720.27691650]
[32.91685486 -723.52404785]
[47.69132996 -726.12915039]
[62.56538010 -728.08740234]
[77.51068878 -729.39495850]
[92.49880219 -730.04931641]
[107.50119781 -730.04931641]
[122.48931122 -729.39495850]
[137.43461609 -728.08740234]
[152.30867004 -726.12915039]
[167.08314514 -723.52404785]
[181.72991943 -720.27691650]
[196.22113037 -716.39398193]
[210.52915955 -711.88269043]
[224.62680054 -706.75158691]
[238.48719788 -701.01037598]
[252.08398438 -694.67010498]
[265.39126587 -687.74273682]
[278.38372803 -680.24157715]
[291.03662109 -672.18078613]
[303.32583618 -663.57574463]
[315.22805786 -654.44287109]
[326.72055054 -644.79949951]
[337.78146362 -634.66400146]
[348.38973999 -624.05572510]
[358.52520752 -612.99475098]
[368.16854858 -601.50225830]
[377.30142212 -589.60003662]
[385.90643311 -577.31079102]
[393.96719360 -564.65789795]
[401.46838379 -551.66540527]
[408.39569092 -538.35815430]
[414.73596191 -524.76135254]
[420.47711182 -510.90090942]
[425.60821533 -496.80328369]
[430.11950684 -482.49523926]
[434.00238037 -468.00402832]
[437.24948120 -453.35723877]
[439.85458374 -438.58276367]
[441.81277466 -423.70870972]
[443.12030029 -408.76339722]
[443.77465820 -393.77526855]
[443.77462769 -378.77288818]
[443.12020874 -363.78475952]
[441.81265259 -348.83944702]
[439.85440063 -333.96542358]
[437.24923706 -319.19094849]
[434.00210571 -304.54415894]
[430.11917114 -290.05297852]
[425.60781860 -275.74493408]
[420.47668457 -261.64730835]
[414.73547363 -247.78692627]
[408.39517212 -234.19015503]
[401.46780396 -220.88287354]
[393.96655273 -207.89044189]
[385.90576172 -195.23756409]
[377.30072021 -182.94834900]
[368.16778564 -171.04617310]
[358.52441406 -159.55369568]
[348.38891602 -148.49278259]
[337.78057861 -137.88452148]
[326.71963501 -127.74907684]
[315.22711182 -118.10575867]
[303.32489014 -108.97290802]
[291.03561401 -100.36791992]
[278.38269043 -92.30717468]
[265.39022827 -84.80601501]
[252.08291626 -77.87872314]
[238.48611450 -71.53847504]
[224.62568665 -65.79734802]
[210.52803040 -60.66627121]
[196.21997070 -56.15501022]
[181.72875977 -52.27214813]
[167.08197021 -49.02508545]
[152.30747986 -46.41999435]
[137.43342590 -44.46183777]
[122.48812103 -43.15434265]
[107.50000000 -42.50000000]
[107.50000000 -27.50000000]
[107.50000000 -12.50000000]
[107.50000000 2.49999952]
[107.50000000 17.50000000]
[107.50000000 32.50000000]
[107.50000000 47.50000000]
[107.50000000 62.50000000]
[107.50000000 77.50000000]
[107.50000000 92.50000000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 162]
[2 161]
[3 160]
[4 159]
[5 158]
[6 157]
[7 156]
[8 155]
[9 154]
[10 153]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
