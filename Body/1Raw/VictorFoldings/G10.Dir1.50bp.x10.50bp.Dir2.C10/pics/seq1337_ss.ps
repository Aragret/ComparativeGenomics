%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAUAGCUAAGACCCAAACUGGGAUUAGAUACCCCACUAUGCUUAGCCCUAAACCUCAACAxxxxxxxxxxAGCUAAGCCCUUACUAGACCAAUGGGACUUAAACCCACAAACACUUAGUUAACAGCUAAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[104.61331177 268.07254028]
[104.61331177 253.07254028]
[104.61331177 238.07254028]
[104.61331177 223.07254028]
[104.61331177 208.07254028]
[104.61331177 193.07254028]
[104.61331177 178.07254028]
[104.61331177 163.07254028]
[104.61331177 148.07254028]
[104.61331177 133.07254028]
[80.13913727 125.54577637]
[68.86779022 103.45442200]
[54.54519272 107.91123962]
[40.22259903 112.36804962]
[25.89999962 116.82486725]
[11.99744415 122.45682526]
[-1.38884091 129.22494507]
[-14.77512550 135.99305725]
[-28.16141129 142.76116943]
[-32.94321823 154.78564453]
[-44.28453064 160.13294983]
[-55.83848953 156.41632080]
[-69.36267853 162.90449524]
[-82.88687134 169.39265442]
[-96.41105652 175.88081360]
[-108.07651520 188.18341064]
[-123.12762451 180.37953186]
[-119.79529572 163.75630188]
[-102.89922333 162.35662842]
[-89.37503815 155.86846924]
[-75.85084534 149.38029480]
[-62.32665634 142.89213562]
[-53.25467300 127.90216827]
[-34.92952728 129.37487793]
[-21.54324150 122.60676575]
[-8.15695572 115.83865356]
[5.22932911 109.07054138]
[-9.16035557 104.83533478]
[-18.43910217 93.04954529]
[-19.17860031 78.06778717]
[-11.10561752 65.42551422]
[2.79703856 59.79380417]
[17.39261246 63.25345993]
[27.28833199 74.52619934]
[28.82792473 89.44698334]
[21.44318390 102.50227356]
[35.76578140 98.04545593]
[50.08837891 93.58863831]
[64.41097260 89.13182068]
[71.59348297 75.96324158]
[67.58574677 61.50855255]
[63.57800293 47.05386353]
[59.57026291 32.59917450]
[55.56252289 18.14448738]
[51.55478287 3.68979883]
[47.54704285 -10.76488972]
[32.48834229 -10.18848515]
[17.70273972 -13.10098553]
[3.98760295 -19.34532356]
[-7.91742659 -28.58474922]
[-17.37032700 -40.32099152]
[-23.86131287 -53.92113113]
[-27.04033470 -68.65173340]
[-26.73595428 -83.71838379]
[-22.96458244 -98.30857086]
[-15.92960644 -111.63545227]
[-6.01041412 -122.98033905]
[6.25806522 -131.73139954]
[20.21420860 -137.41671753]
[35.10537720 -139.72967529]
[50.12851334 -138.54554749]
[64.47343445 -133.92819214]
[77.36653137 -126.12660980]
[88.11251068 -115.56153870]
[96.13184357 -102.80273438]
[100.99205780 -88.53826904]
[102.43105316 -73.53739929]
[100.37122345 -58.60910797]
[94.92365265 -44.55846024]
[86.38212585 -32.14318848]
[75.20726776 -22.03283310]
[62.00173187 -14.77262974]
[66.00947571 -0.31794152]
[70.01721191 14.13674736]
[74.02495575 28.59143448]
[78.03269196 43.04612350]
[82.04043579 57.50081253]
[86.04817200 71.95549774]
[98.53567505 68.29663086]
[111.60610199 70.01685333]
[123.01327515 76.95948792]
[130.74101257 88.05870819]
[133.35897827 101.50125885]
[148.29328918 100.09895325]
[163.22760010 98.69664764]
[178.16191101 97.29434967]
[182.85404968 81.14719391]
[193.34371948 68.05198669]
[208.01313782 59.98356628]
[224.61695862 58.14496231]
[240.62594604 62.78807068]
[253.61224365 73.17959595]
[261.61755371 87.71667480]
[276.48062134 85.69434357]
[291.34365845 83.67200470]
[306.20669556 81.64967346]
[314.39794922 68.32910919]
[329.25134277 63.43927383]
[343.75357056 69.28900146]
[351.05712891 83.11622620]
[347.71350098 98.39215088]
[335.30142212 107.90396118]
[319.68151855 107.16046906]
[308.22903442 96.51271820]
[293.36599731 98.53505707]
[278.50292969 100.55738831]
[263.63989258 102.57971954]
[261.07031250 115.65556335]
[254.56980896 127.31462097]
[244.76403809 136.40570068]
[232.60578918 142.02618408]
[219.28240967 143.61157227]
[206.09989929 140.99223328]
[194.35482788 134.41136169]
[185.20684814 124.50253296]
[179.56420898 112.22865295]
[164.62989807 113.63095856]
[149.69558716 115.03326416]
[134.76129150 116.43556213]
[148.53967285 122.36481476]
[163.53965759 122.38896179]
[176.59815979 129.76971436]
[184.35542297 142.60813904]
[184.81561279 157.60107422]
[177.86035156 170.89108276]
[165.27911377 179.05883789]
[150.30885315 180.00291443]
[136.80119324 173.48040771]
[128.23146057 161.16944885]
[126.80469513 146.23628235]
[119.61331177 133.07254028]
[119.61331177 148.07254028]
[119.61331177 163.07254028]
[119.61331177 178.07254028]
[119.61331177 193.07254028]
[119.61331177 208.07254028]
[119.61331177 223.07254028]
[119.61331177 238.07254028]
[119.61331177 253.07254028]
[119.61331177 268.07254028]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 49]
[13 48]
[14 47]
[15 46]
[16 37]
[17 36]
[18 35]
[19 34]
[22 32]
[23 31]
[24 30]
[25 29]
[50 88]
[51 87]
[52 86]
[53 85]
[54 84]
[55 83]
[56 82]
[93 129]
[94 128]
[95 127]
[96 126]
[103 117]
[104 116]
[105 115]
[106 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
