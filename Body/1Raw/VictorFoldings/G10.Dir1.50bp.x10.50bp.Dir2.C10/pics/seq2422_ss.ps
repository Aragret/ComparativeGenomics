%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCUAAAAAAUCCCAAACAUAUAACUGAACUCCUCACACCCAAUUGGACCAAUCUAUCACCxxxxxxxxxxUUACCUGAGUAGGCCUAGAAAUAAACAUGCUAGCUUUUAUUCCAGUUCUAACCAAAAAAAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[101.08470917 266.26721191]
[101.08470917 251.26722717]
[101.08470917 236.26722717]
[101.08470917 221.26722717]
[101.08470917 206.26722717]
[101.08470917 191.26722717]
[101.08470917 176.26722717]
[101.08470917 161.26722717]
[101.08470917 146.26722717]
[101.08470917 131.26722717]
[78.89367676 116.70225525]
[78.25155640 94.06050110]
[65.92027283 85.52004242]
[53.58899307 76.97958374]
[41.25770569 68.43912506]
[31.73546600 80.03997040]
[21.29932594 90.82606506]
[10.01873875 100.72561646]
[-2.03122449 109.67275238]
[-14.77037144 117.60791779]
[-28.11392403 124.47832489]
[-41.97308350 130.23823547]
[-56.25561142 134.84931946]
[-70.86647034 138.28088379]
[-85.70841217 140.51011658]
[-100.68267822 141.52215576]
[-115.68960571 141.31028748]
[-130.62933350 139.87590027]
[-145.40242004 137.22856140]
[-159.91058350 133.38586426]
[-174.05723572 128.37339783]
[-187.74826050 122.22453308]
[-200.89254761 114.98016357]
[-213.40258789 106.68850708]
[-225.19515991 97.40475464]
[-236.19177246 87.19068146]
[-246.31924438 76.11426544]
[-255.51019287 64.24921417]
[-263.70343018 51.67449188]
[-270.84442139 38.47378159]
[-276.88571167 24.73493195]
[-281.78701782 10.54937744]
[-285.51574707 -3.98848152]
[-288.04708862 -18.78189468]
[-289.36419678 -33.73241425]
[-289.45831299 -48.74054337]
[-288.32882690 -63.70640564]
[-285.98321533 -78.53040314]
[-282.43710327 -93.11388397]
[-277.71408081 -107.35979462]
[-271.84561157 -121.17333221]
[-264.87072754 -134.46257019]
[-256.83584595 -147.13905334]
[-247.79443359 -159.11845398]
[-237.80668640 -170.32101440]
[-226.93904114 -180.67219543]
[-215.26382446 -190.10311890]
[-202.85874939 -198.55102539]
[-189.80638123 -205.95967102]
[-176.19354248 -212.27978516]
[-162.11085510 -217.46926880]
[-147.65203857 -221.49362183]
[-132.91331482 -224.32603455]
[-117.99275208 -225.94767761]
[-102.98966217 -226.34774780]
[-88.00388336 -225.52359009]
[-73.13514709 -223.48069763]
[-58.48240280 -220.23263550]
[-44.14316177 -215.80104065]
[-30.21285439 -210.21540833]
[-16.78418350 -203.51290894]
[-3.94651675 -195.73812866]
[8.21471214 -186.94282532]
[19.61857224 -177.18553162]
[30.18916893 -166.53117371]
[39.85615921 -155.05067444]
[48.55520630 -142.82040405]
[56.22842026 -129.92178345]
[62.82473755 -116.44062805]
[68.30025482 -102.46667480]
[72.61854553 -88.09290314]
[75.75085449 -73.41497803]
[77.67635345 -58.53058243]
[78.38220978 -43.53876877]
[77.86374664 -28.53930092]
[76.12439728 -13.63200569]
[73.17574310 1.08391285]
[69.03741455 15.51051998]
[63.73693848 29.55180931]
[57.30960083 43.11433411]
[49.79816818 56.10783768]
[62.12945175 64.64830017]
[74.46073151 73.18875885]
[86.79201508 81.72921753]
[102.73415375 74.68863678]
[121.14880371 81.08660126]
[131.28579712 100.12131500]
[146.27868652 99.65939331]
[161.27156067 99.19746399]
[176.26445007 98.73553467]
[191.25733948 98.27361298]
[206.20677185 97.04299927]
[221.07336426 95.04694366]
[235.93997192 93.05088806]
[250.80656433 91.05483246]
[265.67315674 89.05876923]
[271.44003296 74.82364655]
[283.56170654 65.39175415]
[298.77752686 63.30023575]
[312.99450684 69.11169434]
[322.38836670 81.26287842]
[324.43215942 96.48517609]
[318.57617188 110.68386841]
[306.39559937 120.03958130]
[291.16699219 122.03567505]
[276.98669434 116.13520050]
[267.66921997 103.92536926]
[252.80262756 105.92142487]
[237.93601990 107.91748810]
[223.06942749 109.91354370]
[208.20283508 111.90959930]
[218.09626770 123.18434906]
[215.65718079 137.98471069]
[202.66905212 145.48861694]
[188.62884521 140.20915222]
[183.80282593 126.00671387]
[191.71926880 113.26649475]
[176.72637939 113.72842407]
[161.73348999 114.19034576]
[146.74060059 114.65227509]
[131.74772644 115.11420441]
[145.12667847 121.89679718]
[160.12368774 122.19631958]
[173.02233887 129.85301208]
[180.46720886 142.87506104]
[180.52162170 157.87495422]
[173.17141724 170.95068359]
[160.32865906 178.70074463]
[145.33421326 179.10905457]
[132.08869934 172.06942749]
[124.03777313 159.41310120]
[123.27609253 144.43095398]
[116.08470917 131.26722717]
[116.08470917 146.26722717]
[116.08470917 161.26722717]
[116.08470917 176.26722717]
[116.08470917 191.26722717]
[116.08470917 206.26722717]
[116.08470917 221.26722717]
[116.08470917 236.26722717]
[116.08470917 251.26722717]
[116.08470917 266.26721191]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[12 94]
[13 93]
[14 92]
[15 91]
[97 131]
[98 130]
[99 129]
[100 128]
[101 127]
[102 121]
[103 120]
[104 119]
[105 118]
[106 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
