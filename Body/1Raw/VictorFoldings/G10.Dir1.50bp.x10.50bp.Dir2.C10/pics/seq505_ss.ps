%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGUCACCCCCCAACUAACACAUUAUUUUCCCCUCCCACUCCCAUACUACUAAUCUCAUCAAUxxxxxxxxxxGCACACACACACCGCUGCUAACCCCAUACCCCGAACCAACCAAACCCCAAAGACACCCCCCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[144.82614136 73.21076965]
[133.34634399 82.86551666]
[121.86654663 92.52026367]
[110.38674164 102.17501068]
[100.73199463 113.65481567]
[93.18815613 126.61978149]
[85.64431763 139.58476257]
[78.10047913 152.54972839]
[70.55663300 165.51469421]
[63.01279831 178.47967529]
[65.70604706 194.29504395]
[54.91326523 206.16497803]
[38.91374588 204.98388672]
[29.98095512 191.65779114]
[34.96736526 176.40933228]
[50.04782486 170.93583679]
[57.59166336 157.97085571]
[65.13550568 145.00588989]
[72.67934418 132.04092407]
[80.22318268 119.07594299]
[87.76702118 106.11097717]
[77.99643707 94.72959900]
[64.03862762 100.22319031]
[54.03098297 112.47707367]
[39.35429001 109.93858337]
[25.39647865 115.43217468]
[11.43866730 120.92576599]
[1.65526903 134.08695984]
[-14.60092640 131.92637634]
[-20.60693932 116.66662598]
[-10.18429756 104.00563812]
[5.94507837 106.96794891]
[19.90288925 101.47436523]
[33.86069870 95.98077393]
[42.86998749 84.11982727]
[58.54503632 86.26538086]
[72.50284576 80.77178955]
[90.84657288 80.60842896]
[100.73199463 90.69520569]
[112.21179962 81.04045868]
[123.69159698 71.38571167]
[135.17140198 61.73096848]
[126.15562439 49.73810959]
[117.80821991 37.27080154]
[110.15410614 24.36625481]
[103.21611786 11.06297398]
[97.01496887 -2.59933257]
[91.56916046 -16.57989311]
[86.89495087 -30.83698463]
[83.00628662 -45.32805634]
[79.91477203 -60.00986099]
[77.62963104 -74.83858490]
[76.15769196 -89.76997375]
[75.50333405 -104.75946045]
[75.66852570 -119.76231384]
[76.65276337 -134.73374939]
[78.45311737 -149.62910461]
[81.06420898 -164.40393066]
[84.47824097 -179.01409912]
[88.68503571 -193.41603088]
[93.67203522 -207.56675720]
[99.42434692 -221.42401123]
[105.92481995 -234.94647217]
[113.15403748 -248.09376526]
[121.09043121 -260.82666016]
[129.71032715 -273.10714722]
[138.98797607 -284.89859009]
[148.89572144 -296.16577148]
[159.40396118 -306.87509155]
[170.48135376 -316.99459839]
[182.09483337 -326.49407959]
[194.20974731 -335.34515381]
[206.78993225 -343.52145386]
[219.79785156 -350.99853516]
[233.19467163 -357.75411987]
[246.94042969 -363.76803589]
[260.99407959 -369.02233887]
[275.31372070 -373.50134277]
[289.85656738 -377.19165039]
[304.57922363 -380.08230591]
[319.43777466 -382.16464233]
[334.38787842 -383.43243408]
[349.38491821 -383.88195801]
[364.38412476 -383.51181030]
[379.34069824 -382.32312012]
[394.21008301 -380.31942749]
[408.94784546 -377.50671387]
[423.51000977 -373.89340210]
[437.85311890 -369.49023438]
[451.93438721 -364.31039429]
[465.71176147 -358.36929321]
[479.14416504 -351.68466187]
[492.19146729 -344.27651978]
[504.81472778 -336.16690063]
[516.97631836 -327.38003540]
[528.63989258 -317.94213867]
[539.77069092 -307.88140869]
[550.33544922 -297.22781372]
[560.30267334 -286.01321411]
[569.64257812 -274.27102661]
[578.32733154 -262.03631592]
[586.33099365 -249.34559631]
[593.62963867 -236.23674011]
[600.20159912 -222.74887085]
[606.02716064 -208.92224121]
[611.08892822 -194.79811096]
[615.37188721 -180.41864014]
[618.86315918 -165.82673645]
[621.55236816 -151.06593323]
[623.43151855 -136.18031311]
[624.49499512 -121.21429443]
[624.73956299 -106.21252441]
[624.16448975 -91.21977997]
[622.77160645 -76.28081512]
[620.56494141 -61.44021225]
[617.55114746 -46.74225235]
[613.73925781 -32.23080826]
[609.14050293 -17.94918442]
[603.76873779 -3.94000530]
[597.64001465 9.75492191]
[590.77252197 23.09472466]
[583.18676758 36.03959274]
[574.90545654 48.55089569]
[565.95324707 60.59128571]
[556.35687256 72.12483978]
[546.14501953 83.11713409]
[535.34808350 93.53536224]
[523.99835205 103.34842682]
[512.12969971 112.52704620]
[499.77746582 121.04383087]
[486.97857666 128.87336731]
[473.77124023 135.99226379]
[460.19482422 142.37931824]
[446.28988647 148.01542664]
[432.09793091 152.88378906]
[417.66128540 156.96986389]
[403.02304077 160.26147461]
[388.22689819 162.74879456]
[373.31698608 164.42439270]
[358.33782959 165.28326416]
[343.33410645 165.32286072]
[328.35061646 164.54304504]
[313.43209839 162.94616699]
[298.62301636 160.53697205]
[283.96759033 157.32266235]
[269.50958252 153.31282043]
[255.29212952 148.51942444]
[241.35763550 142.95677185]
[227.74772644 136.64146423]
[214.50299072 129.59236145]
[201.66296387 121.83048248]
[189.26597595 113.37900543]
[177.34901428 104.26315308]
[165.94764709 94.51011658]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 42]
[2 41]
[3 40]
[4 39]
[5 21]
[6 20]
[7 19]
[8 18]
[9 17]
[10 16]
[22 37]
[23 36]
[25 34]
[26 33]
[27 32]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
