%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUUAUAGGCUAAAUCCUAUAUAUCUUAAUGGCACAUGCAGCGCAAGUAGGUCUACAAGACxxxxxxxxxxAACUAUCUAUAAACCUAGCCAUGGCCAUCCCCUUAUGAGCGGGCACAGUGAUUAUAGGCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[78.79465485 255.10289001]
[78.48259735 240.10614014]
[78.17053986 225.10939026]
[77.85848236 210.11262512]
[77.54642487 195.11587524]
[77.23437500 180.11912537]
[76.92231750 165.12237549]
[76.61026001 150.12561035]
[76.29820251 135.12886047]
[62.77401352 128.64070129]
[50.88163376 137.78242493]
[38.98925400 146.92416382]
[27.19261360 156.18911743]
[15.49298954 165.57627869]
[3.79336596 174.96343994]
[-7.90625763 184.35060120]
[-19.60588074 193.73776245]
[-31.30550575 203.12492371]
[-32.77898407 218.86036682]
[-45.00067520 228.88064575]
[-60.71966553 227.24089050]
[-70.61016083 214.91394043]
[-68.80430603 199.21315002]
[-56.37347412 189.45353699]
[-40.69266510 191.42529297]
[-28.99304390 182.03813171]
[-17.29341888 172.65097046]
[-5.59379578 163.26380920]
[6.10582781 153.87664795]
[17.80545044 144.48948669]
[21.07547569 137.80723572]
[29.84751892 135.03178406]
[41.73989868 125.89005280]
[53.63227844 116.74831390]
[55.98349380 91.61710358]
[69.77082062 73.32537079]
[88.97068787 65.91678619]
[106.89405060 69.43671417]
[105.33647156 54.51780319]
[103.77889252 39.59889221]
[102.22130585 24.67997742]
[100.66372681 9.76106644]
[96.63725281 1.48825753]
[99.23224640 -5.48394775]
[97.98537445 -20.43203545]
[96.73850250 -35.38012314]
[95.49162292 -50.32820892]
[92.79161835 -53.91588974]
[91.54158783 -57.78996658]
[91.64868927 -61.44652557]
[92.86206818 -64.46674347]
[94.81573486 -66.56210327]
[94.81573486 -81.56210327]
[92.13333893 -86.19074249]
[91.59414673 -90.90896606]
[92.86309052 -94.87020874]
[95.31298828 -97.49042511]
[96.24861145 -112.46121216]
[97.18424225 -127.43200684]
[98.11987305 -142.40280151]
[99.05549622 -157.37359619]
[92.19405365 -171.62950134]
[100.71015167 -183.84938049]
[101.64578247 -198.82017517]
[93.69378662 -209.02897644]
[94.82017517 -221.51696777]
[103.87213898 -229.60209656]
[105.11901093 -244.55018616]
[106.36589050 -259.49829102]
[92.59156036 -265.82629395]
[81.81442261 -276.48599243]
[75.33585358 -290.19015503]
[73.93818665 -305.28393555]
[77.79018402 -319.94470215]
[86.42670441 -332.40206909]
[98.80484772 -341.15176392]
[113.42989349 -345.13723755]
[128.53578186 -343.87719727]
[142.29843140 -337.52380371]
[153.05590820 -326.84426880]
[159.50920105 -313.12820435]
[160.87905884 -298.03186035]
[157.00004578 -283.37823486]
[148.34057617 -270.93679810]
[135.94633484 -262.20989990]
[121.31397247 -258.25140381]
[120.06710052 -243.30331421]
[118.82022858 -228.35522461]
[127.15925598 -212.94548035]
[116.61657715 -197.88453674]
[115.68094635 -182.91375732]
[122.60931396 -169.72865295]
[114.02629089 -156.43795776]
[113.09066010 -141.46716309]
[112.15503693 -126.49637604]
[111.21940613 -111.52558899]
[110.28377533 -96.55479431]
[109.81573486 -81.56210327]
[109.81573486 -66.56210327]
[110.43971252 -51.57508469]
[111.68658447 -36.62699509]
[112.93346405 -21.67890930]
[114.18033600 -6.73082256]
[115.58264160 8.20348549]
[117.14022064 23.12239647]
[118.69779968 38.04130936]
[120.25537872 52.96022034]
[121.81296539 67.87913513]
[132.36425781 78.54076385]
[147.26615906 80.25344849]
[162.16806030 81.96614075]
[177.08697510 83.52371979]
[192.02127075 84.92602539]
[206.69404602 77.60195923]
[220.22215271 86.87138367]
[218.68905640 103.19870758]
[203.67185974 109.78778839]
[190.61897278 99.86032867]
[175.68466187 98.45803070]
[168.68583679 100.98035431]
[160.45536804 96.86804199]
[145.55346680 95.15534973]
[130.65156555 93.44266510]
[125.60280609 107.56746674]
[138.21392822 115.68901062]
[154.80426025 119.18147278]
[156.04093933 136.09025574]
[140.13531494 141.95942688]
[130.09239197 128.30014038]
[117.48126221 120.17859650]
[110.93468475 123.83815002]
[118.25379181 136.93130493]
[125.57289886 150.02445984]
[132.89199829 163.11761475]
[140.21090698 176.21087646]
[127.11753082 183.52957153]
[119.79885101 170.43672180]
[112.47974396 157.34356689]
[105.16063690 144.25041199]
[97.84152985 131.15725708]
[91.29496002 134.81680298]
[91.60700989 149.81355286]
[91.91906738 164.81031799]
[92.23112488 179.80706787]
[92.54318237 194.80381775]
[92.85523987 209.80056763]
[93.16729736 224.79733276]
[93.47934723 239.79408264]
[93.79140472 254.79083252]
[96.38240814 273.99856567]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 34]
[11 33]
[12 32]
[13 30]
[14 29]
[15 28]
[16 27]
[17 26]
[18 25]
[38 108]
[39 107]
[40 106]
[41 105]
[42 104]
[44 103]
[45 102]
[46 101]
[47 100]
[52 99]
[53 98]
[57 97]
[58 96]
[59 95]
[60 94]
[61 93]
[63 91]
[64 90]
[67 88]
[68 87]
[69 86]
[109 123]
[110 122]
[111 121]
[112 119]
[113 118]
[124 130]
[125 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
