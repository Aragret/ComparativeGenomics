%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAAUAAUCAUAAUAGCUAUAGCAAUAAAACUAGGAAUAGCCCCCUUUCACUUCUGAGUCCCAGxxxxxxxxxxGAAUUGGUAUAUAGUUUAAACAAAACGAAUGAUUUCGACUCAUUAAAUUAUGAUAAUCAUAUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[171.96899414 407.42446899]
[171.96899414 392.42446899]
[171.96899414 377.42446899]
[171.96899414 362.42446899]
[171.96899414 347.42446899]
[171.96899414 332.42446899]
[171.96899414 317.42446899]
[171.96899414 302.42446899]
[171.96899414 287.42446899]
[171.96899414 272.42446899]
[169.28219604 257.66705322]
[163.99551392 243.62956238]
[158.70884705 229.59208679]
[153.42216492 215.55459595]
[147.16613770 201.92147827]
[139.97140503 188.75955200]
[132.77668762 175.59764099]
[125.58197021 162.43572998]
[118.38724518 149.27381897]
[111.19252777 136.11189270]
[97.74256134 137.73918152]
[84.58249664 134.52017212]
[73.40226746 126.86824799]
[65.63760376 115.76602173]
[62.28559113 102.63919830]
[63.77669525 89.17346191]
[69.91942596 77.09801483]
[60.02453613 65.82453918]
[50.12965012 54.55107117]
[40.23476028 43.27759552]
[25.31626701 38.00985336]
[22.73568916 23.34050179]
[12.84080124 12.06702805]
[2.94591331 0.79355496]
[-6.94897413 -10.47991848]
[-19.34766769 -2.00467396]
[-32.67755890 4.91424036]
[-46.74425888 10.17592716]
[-61.34262848 13.70365429]
[-76.25978851 15.44597816]
[-91.27819824 15.37749100]
[-106.17884827 13.49919128]
[-120.74444580 9.83846855]
[-134.76257324 4.44870901]
[-148.02880859 -2.59148979]
[-160.34968567 -11.17946053]
[-171.54553223 -21.18996620]
[-181.45309448 -32.47702408]
[-189.92787170 -44.87603378]
[-196.84629822 -58.20618439]
[-202.10745239 -72.27307892]
[-205.63462830 -86.87158203]
[-207.37640381 -101.78881073]
[-207.30735779 -116.80722046]
[-205.42849731 -131.70779419]
[-201.76722717 -146.27325439]
[-196.37693787 -160.29116821]
[-189.33624268 -173.55714417]
[-180.74781799 -185.87770081]
[-170.73689270 -197.07318115]
[-159.44946289 -206.98031616]
[-147.05014038 -215.45463562]
[-133.71972656 -222.37255859]
[-119.65263367 -227.63319397]
[-105.05400085 -231.15982056]
[-90.13671112 -232.90103149]
[-75.11830139 -232.83142090]
[-60.21779633 -230.95201111]
[-45.65247726 -227.29019165]
[-31.63475418 -221.89938354]
[-18.36904716 -214.85820007]
[-6.04880857 -206.26930237]
[5.14629698 -196.25796509]
[15.05300999 -184.97016907]
[23.52686310 -172.57052612]
[30.44428253 -159.23985291]
[35.70439148 -145.17256165]
[39.23048019 -130.57379150]
[40.97113037 -115.65644073]
[40.90095901 -100.63803864]
[39.02098846 -85.73760223]
[35.35863113 -71.17241669]
[29.96730042 -57.15489960]
[22.92561340 -43.88945389]
[14.33625984 -31.56953621]
[4.32449865 -20.37480545]
[14.21938610 -9.10133266]
[24.11427498 2.17214036]
[34.00916290 13.44561386]
[48.21990585 17.90700340]
[51.50823593 33.38270950]
[61.40312195 44.65618134]
[71.29801178 55.92965317]
[81.19289398 67.20312500]
[96.72086334 62.33583832]
[112.85633850 64.44642639]
[126.60997772 73.14388275]
[139.07159424 64.79473877]
[151.53320312 56.44559097]
[163.99481201 48.09644699]
[168.50305176 32.69984436]
[183.40539551 26.75850677]
[197.27005005 34.83012009]
[199.46124268 50.72282791]
[188.29806519 62.24511337]
[172.34396362 60.55805969]
[159.88233948 68.90720367]
[147.42073059 77.25634766]
[134.95912170 85.60549164]
[137.78976440 101.12957764]
[134.03694153 116.45687866]
[124.35443878 128.91717529]
[131.54916382 142.07908630]
[138.74388123 155.24101257]
[145.93859863 168.40292358]
[153.13333130 181.56483459]
[160.32804871 194.72674561]
[164.86402893 180.42903137]
[177.43811035 172.25022888]
[192.34710693 173.89999390]
[202.82882690 184.63000488]
[204.12913513 199.57354736]
[195.65823364 211.95272827]
[181.25825500 216.15277100]
[167.45965576 210.26791382]
[172.74633789 224.30540466]
[178.03300476 238.34289551]
[183.31968689 252.38037109]
[186.07084656 237.63482666]
[193.17012024 224.42118835]
[203.94691467 213.98756409]
[217.38331604 207.31950378]
[232.21015930 205.04682922]
[247.02691650 207.38423157]
[260.43408203 214.11090088]
[271.16522217 224.59147644]
[278.20672607 237.83599854]
[280.89346313 252.59341431]
[278.97164917 267.46978760]
[272.62283325 281.05996704]
[262.44671631 292.08023071]
[249.40444946 299.48965454]
[234.72801208 302.58834839]
[219.80366516 301.08364868]
[206.04113770 295.11767578]
[194.74040222 285.25393677]
[186.96899414 272.42446899]
[186.96899414 287.42446899]
[186.96899414 302.42446899]
[186.96899414 317.42446899]
[186.96899414 332.42446899]
[186.96899414 347.42446899]
[186.96899414 362.42446899]
[186.96899414 377.42446899]
[186.96899414 392.42446899]
[186.96899414 407.42446899]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 156]
[2 155]
[3 154]
[4 153]
[5 152]
[6 151]
[7 150]
[8 149]
[9 148]
[10 147]
[11 128]
[12 127]
[13 126]
[14 125]
[15 117]
[16 116]
[17 115]
[18 114]
[19 113]
[20 112]
[27 94]
[28 93]
[29 92]
[30 91]
[32 89]
[33 88]
[34 87]
[35 86]
[97 109]
[98 108]
[99 107]
[100 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
