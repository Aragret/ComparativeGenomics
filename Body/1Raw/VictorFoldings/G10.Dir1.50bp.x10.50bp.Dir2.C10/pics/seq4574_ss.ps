%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGCCACCUAUCACACCCCAUCCUAAAGUAAGGUCAGCUAAAUAAGCUAUCGGGCCCAUACCxxxxxxxxxxCCUAAUACUAACUACCUGACUCCUACCCCUCACAAUCAUGGCAAGCCAACGCCACUUAUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[85.87664032 312.91616821]
[88.46764374 293.70843506]
[88.77970123 278.71166992]
[89.09175873 263.71493530]
[89.40380859 248.71817017]
[89.71586609 233.72142029]
[90.02792358 218.72467041]
[90.33998108 203.72792053]
[90.65203857 188.73115540]
[90.96409607 173.73440552]
[91.27614594 158.73765564]
[74.46816254 153.61289978]
[59.89585876 143.79354858]
[48.83525467 130.13945007]
[35.05287552 136.05941772]
[21.27049255 141.97937012]
[7.48811102 147.89933777]
[9.49484634 162.86181641]
[7.38919735 177.81068420]
[1.32741821 191.63665771]
[-8.24066734 203.31373596]
[-20.60504341 211.97541809]
[-34.84819031 216.97895813]
[-49.91317749 217.95303345]
[-64.68207550 214.82537842]
[-78.05893707 207.82807922]
[-89.05110931 197.48039246]
[-96.84290314 184.55017090]
[-100.85610962 169.99693298]
[-100.79293060 154.90061951]
[-96.65805054 140.38148499]
[-88.75830078 127.51694489]
[-77.67990112 117.26161957]
[-64.24494171 110.37653351]
[-49.45037842 107.37261200]
[-34.39407349 108.47274780]
[-20.19330597 113.59532166]
[-7.90186262 122.36019897]
[1.56814814 134.11695862]
[15.35052967 128.19699097]
[29.13291168 122.27703094]
[42.91529083 116.35707092]
[40.69834518 96.91275024]
[44.92238235 77.80374908]
[31.82922745 70.48464203]
[18.73607254 63.16553879]
[5.64291763 55.84643555]
[-10.12364960 58.81205750]
[-22.17796707 48.22560501]
[-21.27299500 32.20809555]
[-8.10294914 23.04679489]
[7.22923708 27.76946449]
[12.96202374 42.75328064]
[26.05517769 50.07238770]
[39.14833069 57.39149094]
[52.24148560 64.71059418]
[65.54960632 51.63278198]
[82.25892639 43.33015060]
[100.71978760 40.62239838]
[119.10958099 43.77685928]
[135.61273193 52.48210144]
[146.05255127 41.71129227]
[156.49235535 30.94048500]
[166.59100342 19.84916878]
[176.33866882 8.44814777]
[186.08631897 -2.95287275]
[195.83396912 -14.35389423]
[185.67767334 -25.41766357]
[176.92904663 -37.62500000]
[169.71568298 -50.79787827]
[164.14277649 -64.74420166]
[160.29158020 -79.26059723]
[158.21826172 -94.13536072]
[157.95306396 -109.15158844]
[159.49984741 -124.09029388]
[162.83604431 -138.73362732]
[167.91304016 -152.86802673]
[174.65675354 -166.28741455]
[182.96887207 -178.79605103]
[192.72814941 -190.21154785]
[203.79231262 -200.36743164]
[215.99996948 -209.11560059]
[229.17311096 -216.32846069]
[243.11964417 -221.90086365]
[257.63619995 -225.75151062]
[272.51104736 -227.82426453]
[287.52728271 -228.08891296]
[302.46591187 -226.54156494]
[317.10913086 -223.20481873]
[331.24334717 -218.12730408]
[344.66247559 -211.38308716]
[357.17080688 -203.07049561]
[368.58593750 -193.31077576]
[378.74139404 -182.24624634]
[387.48910522 -170.03826904]
[394.70147705 -156.86483765]
[400.27334595 -142.91810608]
[404.12347412 -128.40142822]
[406.19567871 -113.52649689]
[406.45974731 -98.51025391]
[404.91183472 -83.57167053]
[401.57455444 -68.92858887]
[396.49649048 -54.79455566]
[389.75177002 -41.37568665]
[381.43872070 -28.86766434]
[371.67858887 -17.45289612]
[360.61367798 -7.29784107]
[348.40536499 1.44940925]
[335.23165894 8.66129398]
[321.28472900 14.23264408]
[306.76788330 18.08221054]
[291.89288330 20.15385818]
[276.87664795 20.41737366]
[261.93811035 18.86891556]
[247.29515076 15.53106594]
[233.16131592 10.45249844]
[219.74269104 3.70727396]
[207.23498535 -4.60624170]
[197.48733521 6.79477930]
[187.73968506 18.19580078]
[177.99203491 29.59682083]
[177.92755127 33.18336868]
[176.08174133 36.91092682]
[172.41075134 39.92359543]
[167.26316833 41.38029861]
[156.82334900 52.15110397]
[146.38354492 62.92191315]
[151.48689270 70.41423798]
[155.39033508 78.59606171]
[158.00289917 87.27671051]
[159.26368713 96.25387573]
[159.14332581 105.31835175]
[157.64462280 114.25887299]
[154.80249023 122.86709595]
[150.68319702 130.94239807]
[145.38270569 138.29656982]
[139.02456665 144.75823975]
[131.75695801 150.17681885]
[123.74924469 154.42601013]
[115.18805695 157.40679932]
[106.27290344 159.04971313]
[105.96084595 174.04646301]
[105.64878845 189.04321289]
[105.33673096 204.03997803]
[105.02468109 219.03672791]
[104.71262360 234.03347778]
[104.40056610 249.03022766]
[104.08850861 264.02697754]
[103.77645111 279.02374268]
[103.46439362 294.02050781]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 142]
[11 141]
[14 42]
[15 41]
[16 40]
[17 39]
[44 56]
[45 55]
[46 54]
[47 53]
[61 127]
[62 126]
[63 125]
[64 121]
[65 120]
[66 119]
[67 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
