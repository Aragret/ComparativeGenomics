%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCGACAUCAUUACCGGGUUUUCCUCUUGUAAAUAUAGUUUAACCAAAACAUCAGAUUGUxxxxxxxxxxUCCUAGGCGACCCAGACAAUUAUACCCUAGCCAACCCCUUAAACACCCCUCCCCACAUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[71.90818787 294.58840942]
[71.90818787 279.58840942]
[71.90818787 264.58840942]
[71.90818787 249.58840942]
[71.90818787 234.58840942]
[71.90818787 219.58840942]
[71.90818787 204.58840942]
[71.90818787 189.58840942]
[71.90818787 174.58840942]
[71.90818787 159.58840942]
[58.12580490 153.66845703]
[47.24697876 163.99565125]
[36.36815643 174.32286072]
[25.48933029 184.65007019]
[29.15534973 199.56501770]
[24.85733032 214.31027222]
[13.75141621 224.91943359]
[-1.17495596 228.53869629]
[-15.90666771 224.19447327]
[-26.48096275 213.05535889]
[-30.05340958 198.11770630]
[-25.66303635 183.39968872]
[-14.49083138 172.86036682]
[0.45793650 169.33476257]
[15.16212559 173.77124023]
[26.04095078 163.44403076]
[36.91977692 153.11683655]
[47.79859924 142.78962708]
[41.73558807 129.06958008]
[26.77533913 130.16088867]
[11.81509018 131.25219727]
[-1.38559043 139.97300720]
[-14.64205360 133.18217468]
[-26.17660332 144.33267212]
[-42.06689453 142.12402344]
[-50.12326050 128.25050354]
[-44.16554260 113.35469818]
[-28.76399422 108.86338806]
[-15.73336411 118.22192383]
[-3.60274053 109.57917023]
[10.72377968 116.29194641]
[25.68402863 115.20063782]
[40.64427567 114.10932159]
[41.87479019 89.07986450]
[52.88476181 67.43416595]
[71.18507385 52.67511368]
[93.17440033 46.89730453]
[114.83759308 50.50407791]
[121.18472290 36.91312790]
[127.53185272 23.32217598]
[133.87898254 9.73122406]
[140.22612000 -3.85972643]
[146.57324219 -17.45067787]
[135.04751587 -27.17655754]
[126.43881989 -39.54489517]
[121.32905579 -53.70915604]
[120.06089020 -68.70176697]
[122.71479034 -83.50022888]
[129.10392761 -97.09684753]
[138.78735352 -108.56732941]
[151.10037231 -117.13365173]
[165.20022583 -122.21680450]
[180.12374878 -123.47593689]
[194.85313416 -120.83120728]
[201.20025635 -134.42216492]
[206.68730164 -148.38255310]
[211.29286194 -162.65800476]
[215.89842224 -176.93347168]
[220.50398254 -191.20893860]
[225.10955811 -205.48439026]
[213.05075073 -196.56332397]
[198.33842468 -193.63973999]
[183.78497314 -197.27250671]
[172.17242432 -206.76719666]
[165.72065735 -220.30877686]
[165.66296387 -235.30867004]
[172.01039124 -248.89947510]
[183.54954529 -258.48321533]
[198.07463074 -262.22781372]
[212.80902100 -259.41748047]
[224.93608093 -250.58943176]
[232.13761902 -237.43124390]
[233.03721619 -222.45970154]
[241.02713013 -235.15463257]
[242.97035217 -244.14772034]
[249.31764221 -248.02812195]
[257.56991577 -260.55407715]
[257.99539185 -276.94772339]
[272.53262329 -284.53723145]
[286.22695923 -275.51519775]
[284.99084473 -259.16271973]
[270.09588623 -252.30180359]
[261.84359741 -239.77583313]
[253.72206116 -227.16470337]
[245.73214722 -214.46977234]
[239.38500977 -200.87882996]
[234.77944946 -186.60336304]
[230.17388916 -172.32791138]
[225.56831360 -158.05244446]
[220.96275330 -143.77699280]
[234.93437195 -149.23535156]
[248.74957275 -143.39237976]
[254.56471252 -129.56544495]
[249.07821655 -115.60483551]
[235.40509033 -109.43675995]
[221.30827332 -114.56315613]
[214.79121399 -128.07502747]
[208.44409180 -114.48407745]
[219.92684937 -104.88743591]
[228.54078674 -92.63603210]
[233.69381714 -78.56156158]
[235.02902222 -63.62136078]
[232.44941711 -48.83332062]
[226.12490845 -35.20652390]
[216.48118591 -23.67239189]
[204.17100525 -15.02101803]
[190.03007507 -9.84705257]
[175.02026367 -8.50882816]
[160.16419983 -11.10354805]
[153.81706238 2.48740292]
[147.46994019 16.07835388]
[141.12280273 29.66930580]
[134.77568054 43.26025391]
[128.42854309 56.85120773]
[135.43617249 61.64190292]
[141.63261414 67.57377625]
[146.83168030 74.50879669]
[150.87072754 82.27850342]
[153.61575317 90.68806458]
[154.96557617 99.52116394]
[154.85530090 108.54553223]
[153.25881958 117.51906586]
[150.19027710 126.19634247]
[145.70445251 134.33528137]
[139.89601135 141.70390320]
[132.89762878 148.08697510]
[124.87705994 153.29209900]
[116.03318024 157.15560913]
[106.59103394 159.54743958]
[96.79615784 160.37541199]
[86.90818787 159.58840942]
[86.90818787 174.58840942]
[86.90818787 189.58840942]
[86.90818787 204.58840942]
[86.90818787 219.58840942]
[86.90818787 234.58840942]
[86.90818787 249.58840942]
[86.90818787 264.58840942]
[86.90818787 279.58840942]
[86.90818787 294.58840942]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 28]
[12 27]
[13 26]
[14 25]
[29 43]
[30 42]
[31 41]
[33 39]
[48 124]
[49 123]
[50 122]
[51 121]
[52 120]
[53 119]
[64 108]
[65 107]
[66 100]
[67 99]
[68 98]
[69 97]
[70 96]
[83 95]
[84 94]
[86 93]
[87 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
