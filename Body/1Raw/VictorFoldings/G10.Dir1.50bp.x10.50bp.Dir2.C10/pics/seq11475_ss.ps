%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUCCAACAUCUCCGCAUGAUGAAACUUCGGCUCACUCCUUGGCGCCUGCCUGAUCCUCCAAxxxxxxxxxxCUCUCCUCGCUCCGGGCCCAUAACACUUGGGGGUAGCUAAAGUGAACUGUAUCCGACAUCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 250.45523071]
[92.50000000 235.45523071]
[92.50000000 220.45523071]
[92.50000000 205.45523071]
[92.50000000 190.45523071]
[92.50000000 175.45523071]
[92.50000000 160.45523071]
[92.50000000 145.45523071]
[92.50000000 130.45523071]
[92.50000000 115.45523071]
[85.89241028 111.90702820]
[78.79600525 125.12221527]
[71.69937897 138.33728027]
[58.48443604 131.24043274]
[65.58082581 118.02581024]
[72.67722321 104.81063080]
[66.06963348 101.26242828]
[53.56559753 109.54789734]
[41.06156158 117.83337402]
[28.55752754 126.11885071]
[26.97517395 141.67616272]
[15.72699642 152.53952026]
[0.12403806 153.57957458]
[-12.46646118 144.30523682]
[-16.09965134 129.09556580]
[-9.06005287 115.13211823]
[5.32845259 109.00798798]
[20.27205276 113.61481476]
[32.77608871 105.32933807]
[45.28012466 97.04386902]
[57.78416061 88.75839233]
[71.12761688 84.73619843]
[83.62974548 85.86138153]
[93.73347473 91.44757843]
[95.27076721 76.52656555]
[96.80805969 61.60554504]
[98.34535217 46.68452835]
[88.64915466 34.49348450]
[90.42074585 19.38335228]
[102.10279846 10.21464157]
[103.64009094 -4.70637465]
[105.17738342 -19.62739182]
[102.93482971 -28.54741096]
[106.90248871 -34.83787155]
[108.74581146 -49.72417831]
[110.58913422 -64.61048889]
[112.43245697 -79.49679565]
[114.27578735 -94.38310242]
[116.11911011 -109.26940918]
[116.73493195 -124.25675964]
[116.11911011 -139.24411011]
[115.50328064 -154.23147583]
[112.00616455 -162.73828125]
[115.03187561 -169.53219604]
[114.72389221 -184.52903748]
[114.41591644 -199.52587891]
[114.10794067 -214.52272034]
[113.79996490 -229.51956177]
[98.92987061 -231.75303650]
[84.65118408 -236.46760559]
[71.37473297 -243.52761841]
[59.48250580 -252.72994995]
[49.31665802 -263.80981445]
[41.16969299 -276.44845581]
[35.27600479 -290.28219604]
[31.80517197 -304.91302490]
[30.85705757 -319.92001343]
[32.45893860 -334.87130737]
[36.56472778 -349.33682251]
[43.05628967 -362.90026855]
[51.74685287 -375.17147827]
[62.38637543 -385.79733276]
[74.66873169 -394.47210693]
[88.24053192 -400.94622803]
[102.71128845 -405.03338623]
[117.66465759 -406.61605835]
[132.67039490 -405.64865112]
[147.29675293 -402.15899658]
[161.12290955 -396.24752808]
[173.75105286 -388.08432007]
[184.81784058 -377.90423584]
[194.00488281 -366.00018311]
[201.04782104 -352.71466064]
[205.74401855 -338.42993164]
[207.95837402 -323.55697632]
[207.62718201 -308.52374268]
[204.75993347 -293.76275635]
[199.43916321 -279.69869995]
[191.81794739 -266.73626709]
[182.11555481 -255.24836731]
[170.61116028 -245.56555176]
[157.63574219 -237.96643066]
[143.56265259 -232.66961670]
[128.79679871 -229.82752991]
[129.10478210 -214.83068848]
[129.41275024 -199.83386230]
[129.72073364 -184.83702087]
[130.02871704 -169.84017944]
[130.49063110 -154.84729004]
[131.10646057 -139.85993958]
[131.72229004 -124.87258911]
[141.51855469 -136.23185730]
[156.08366394 -139.81761169]
[170.03373718 -134.30441284]
[178.21226501 -121.73016357]
[177.59611511 -106.74282074]
[168.41304016 -94.88233185]
[154.05747986 -90.53282166]
[139.83586121 -95.30205536]
[131.00541687 -107.42608643]
[129.16209412 -92.53977966]
[127.31876373 -77.65347290]
[125.47544098 -62.76716232]
[123.63211823 -47.88085556]
[121.78879547 -32.99454498]
[120.09839630 -18.09009933]
[118.56110382 -3.16908240]
[117.02381134 11.75193405]
[126.59102631 23.10992813]
[125.24454498 38.26385880]
[113.26636505 48.22182083]
[111.72907257 63.14283752]
[110.19178009 78.06385803]
[108.65448761 92.98487091]
[114.98194122 79.38475037]
[125.11669922 68.32641602]
[138.11482239 60.83983612]
[152.76567078 57.62231064]
[167.70468140 58.97350693]
[181.54046631 64.76757812]
[192.98434448 74.46487427]
[200.97045898 87.16219330]
[204.75498962 101.67692566]
[203.98545837 116.65717316]
[198.73350525 130.70768738]
[189.48832703 142.51983643]
[177.11099243 150.99342346]
[162.75433350 155.33923340]
[147.75549316 155.15251160]
[133.51145935 150.45062256]
[121.34891510 141.67153931]
[112.40066528 129.63290405]
[107.50000000 115.45523071]
[107.50000000 130.45523071]
[107.50000000 145.45523071]
[107.50000000 160.45523071]
[107.50000000 175.45523071]
[107.50000000 190.45523071]
[107.50000000 205.45523071]
[107.50000000 220.45523071]
[107.50000000 235.45523071]
[107.50000000 250.45523071]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[17 31]
[18 30]
[19 29]
[20 28]
[34 124]
[35 123]
[36 122]
[37 121]
[40 118]
[41 117]
[42 116]
[44 115]
[45 114]
[46 113]
[47 112]
[48 111]
[49 110]
[50 101]
[51 100]
[52 99]
[54 98]
[55 97]
[56 96]
[57 95]
[58 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
