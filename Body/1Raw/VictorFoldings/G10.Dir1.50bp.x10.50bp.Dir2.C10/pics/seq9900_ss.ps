%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCCUAAUACUAACUACCUGACUCCUACCCCUCACAAUCAUGGCAAGCCAACGCCACUUAUCCxxxxxxxxxxCCCUUUUACCAUCAUUGGACAAGUAGCAUCCGUACUAUACUUCACAACAAUCCUAAUCCUAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-4.04560280 205.11798096]
[-15.12471008 215.23002625]
[-26.20381737 225.34205627]
[-37.28292465 235.45410156]
[-42.25983810 250.47212219]
[-56.87628555 253.33720398]
[-67.95539093 263.44924927]
[-79.03450012 273.56127930]
[-90.11360931 283.67333984]
[-101.19271851 293.78536987]
[-112.27182770 303.89739990]
[-123.35092926 314.00946045]
[-117.55473328 328.01586914]
[-116.90167236 343.16015625]
[-121.47060394 357.61355591]
[-130.70980835 369.63073730]
[-143.50360107 377.76058960]
[-158.30708313 381.02139282]
[-173.33265686 379.01937866]
[-186.76589966 371.99630737]
[-196.98469543 360.80023193]
[-202.75508118 346.78314209]
[-203.38023376 331.63769531]
[-198.78466797 317.19271851]
[-189.52333069 305.19259644]
[-176.71456909 297.08633423]
[-161.90510559 293.85281372]
[-146.88325500 295.88250732]
[-133.46296692 302.93035889]
[-122.38386536 292.81829834]
[-111.30475616 282.70626831]
[-100.22564697 272.59423828]
[-89.14654541 262.48217773]
[-78.06743622 252.37014771]
[-66.98832703 242.25810242]
[-62.80386734 227.96336365]
[-47.39496613 224.37500000]
[-36.31586075 214.26295471]
[-25.23675156 204.15090942]
[-14.15764427 194.03886414]
[-26.15081787 177.20912170]
[-35.68111420 158.87199402]
[-42.56247711 139.38549805]
[-46.66055298 119.13006592]
[-47.89533615 98.50115204]
[-46.24272156 77.90150452]
[-41.73497009 57.73328781]
[-34.46009064 38.39025497]
[-24.56011391 20.25004578]
[-12.22831535 3.66681671]
[-23.10020638 -6.66768694]
[-33.97209930 -17.00219154]
[-44.84399033 -27.33669472]
[-60.07860947 -24.38949394]
[-74.12171173 -30.99032593]
[-81.57343292 -44.60103989]
[-79.56843567 -59.98803329]
[-68.87767792 -71.23469543]
[-53.61198807 -74.01645660]
[-39.64131927 -67.26367188]
[-32.33768845 -53.57292557]
[-34.50948715 -38.20858765]
[-23.63759422 -27.87408257]
[-12.76570320 -17.53957939]
[-1.89381123 -7.20507526]
[4.19227648 -12.67722511]
[10.57173920 -17.80434227]
[17.22504234 -22.57072830]
[24.13181496 -26.96178627]
[31.27090454 -30.96407318]
[38.62044907 -34.56533051]
[46.15794754 -37.75452805]
[53.86031723 -40.52190781]
[61.70397568 -42.85898972]
[69.66489410 -44.75862122]
[77.71871185 -46.21498108]
[85.84075165 -47.22361374]
[94.00614929 -47.78142929]
[102.18990326 -47.88671875]
[110.36694336 -47.53915787]
[118.51224518 -46.73981476]
[126.60086060 -45.49113846]
[134.60801697 -43.79694748]
[142.50920105 -41.66242981]
[150.28022766 -39.09412766]
[157.89727783 -36.09989929]
[165.33703613 -32.68891525]
[172.57673645 -28.87162209]
[179.59419250 -24.65970612]
[186.36790466 -20.06606865]
[192.87716675 -15.10477161]
[202.87641907 -26.28578568]
[212.87565613 -37.46680069]
[215.69956970 -53.62098312]
[231.19227600 -58.99760818]
[243.41621399 -48.06567001]
[239.79644775 -32.07100296]
[224.05667114 -27.46755409]
[214.05743408 -16.28653908]
[204.05818176 -5.10552502]
[223.63369751 18.82126236]
[237.80786133 46.29460526]
[245.96145630 76.11424255]
[260.86834717 74.44556427]
[275.77523804 72.77688599]
[290.68212891 71.10820770]
[305.58905029 69.43952942]
[310.59191895 55.01961517]
[321.36199951 44.20443726]
[335.76089478 39.14136505]
[350.92965698 40.83567429]
[363.85656738 48.95095444]
[371.97497559 61.87591553]
[373.67291260 77.04429626]
[368.61328125 91.44439697]
[357.80068970 102.21707916]
[343.38198853 107.22341156]
[328.22000122 105.46938324]
[315.32513428 97.30326080]
[307.25772095 84.34642792]
[292.35083008 86.01510620]
[277.44393921 87.68378448]
[262.53701782 89.35245514]
[247.63014221 91.02113342]
[247.88711548 102.16284943]
[247.30441284 113.29228973]
[245.88536072 124.34625244]
[243.63798523 135.26197815]
[240.57505798 145.97750854]
[236.71397400 156.43197632]
[232.07664490 166.56602478]
[226.68942261 176.32214355]
[220.58287048 185.64489746]
[213.79167175 194.48138428]
[206.35438538 202.78143311]
[198.31323242 210.49789429]
[189.71388245 217.58697510]
[180.60514832 224.00840759]
[171.03875732 229.72575378]
[161.06901550 234.70654297]
[150.75254822 238.92248535]
[140.14790344 242.34965515]
[129.31530762 244.96858215]
[118.31626892 246.76440430]
[107.21323395 247.72692871]
[96.06923676 247.85069275]
[84.94756317 247.13497925]
[73.91135406 245.58386230]
[63.02327347 243.20614624]
[52.34513855 240.01531982]
[41.93757629 236.02952576]
[31.85968590 231.27137756]
[22.16868210 225.76789856]
[12.91959095 219.55032349]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 40]
[2 39]
[3 38]
[4 37]
[6 35]
[7 34]
[8 33]
[9 32]
[10 31]
[11 30]
[12 29]
[50 65]
[51 64]
[52 63]
[53 62]
[91 100]
[92 99]
[93 98]
[103 124]
[104 123]
[105 122]
[106 121]
[107 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
