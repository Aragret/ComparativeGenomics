%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCACCGCUACACGACCGGGGGUAUACUACGGUCAAUGCUCUGAAAUCUGUGGAGCAAACCxxxxxxxxxxCGAAACCGCAAACAUAUCAUACACAAACGCCUGAGCCCUAUCUAUUACUCUCAUCGCUACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[149.57009888 337.66009521]
[149.57009888 322.66009521]
[149.57009888 307.66009521]
[149.57009888 292.66009521]
[149.57009888 277.66009521]
[149.57009888 262.66009521]
[149.57009888 247.66009521]
[149.57009888 232.66009521]
[149.57009888 217.66009521]
[149.57009888 202.66009521]
[145.56236267 188.20539856]
[137.83827209 175.34700012]
[130.11419678 162.48860168]
[114.34175873 154.85771179]
[114.09486389 136.47514343]
[106.10494995 123.78021240]
[93.69646454 125.46323395]
[81.24822235 120.67538452]
[72.10290527 109.87374878]
[69.09573364 95.20919800]
[54.32967758 97.84806061]
[40.57099533 110.04144287]
[24.30987549 103.51641846]
[9.60191441 106.46190643]
[-5.10604715 109.40738678]
[-19.81400871 112.35286713]
[-34.52196884 115.29834747]
[-46.53412628 125.59488678]
[-60.53294373 120.50742340]
[-75.24090576 123.45291138]
[-85.29737854 135.95278931]
[-101.33901978 135.73977661]
[-111.06005096 122.97729492]
[-107.00333405 107.45561218]
[-92.28083038 101.08164215]
[-78.18638611 108.74494934]
[-63.47842789 105.79946136]
[-52.51828384 95.71360779]
[-37.46745300 100.59038544]
[-22.75949097 97.64490509]
[-8.05152988 94.69942474]
[6.65643215 91.75394440]
[21.36439323 88.80845642]
[28.36309814 78.89253998]
[40.64082336 76.34764862]
[51.69081116 83.08200073]
[66.45687103 80.44313812]
[51.55847549 82.18608093]
[37.65851212 76.54772186]
[28.18443108 64.91837311]
[25.47234344 50.16559219]
[30.19099808 35.92711258]
[41.17686844 25.71385384]
[55.72106552 22.04419899]
[70.23728180 25.82300949]
[81.14611816 36.11850739]
[85.75768280 50.39203262]
[82.93536377 65.12291718]
[86.64152527 50.58798218]
[90.34768677 36.05304718]
[94.05384827 21.51811218]
[80.20652008 15.67780018]
[67.38436890 7.83879709]
[55.87383270 -1.82377207]
[45.93206787 -13.09404182]
[37.78117752 -25.72023010]
[31.60325432 -39.42026520]
[27.53631592 -53.88808060]
[25.67121887 -68.80046082]
[26.04963112 -83.82425690]
[28.66309547 -98.62383270]
[33.45323181 -112.86856079]
[40.31301880 -126.24020386]
[49.08921432 -138.44004822]
[59.58575058 -149.19552612]
[71.56813049 -158.26637268]
[84.76866913 -165.44992065]
[98.89245605 -170.58572388]
[113.62396240 -173.55900574]
[128.63407898 -174.30335999]
[143.58747864 -172.80216980]
[158.15008545 -169.08894348]
[171.99658203 -163.24665833]
[184.81761169 -155.40583801]
[196.32678223 -145.74162292]
[206.26693726 -134.46994019]
[214.41603088 -121.84259033]
[220.59199524 -108.14167786]
[224.65687561 -93.67327881]
[226.51985168 -78.76063538]
[226.13929749 -63.73689270]
[223.52372742 -48.93769073]
[218.73156738 -34.69364548]
[211.86987305 -21.32297516]
[203.09193420 -9.12438583]
[192.59387207 1.62960017]
[180.61019897 10.69873619]
[167.40863037 17.88041306]
[153.28411865 23.01419258]
[138.55218506 25.98538017]
[123.54196930 26.72760010]
[108.58878326 25.22427177]
[104.88262177 39.75920868]
[101.17646027 54.29414368]
[97.47029877 68.82907867]
[118.75847626 77.84106445]
[126.69564056 97.72937775]
[118.79988098 115.79029846]
[126.78979492 128.48522949]
[139.20864868 132.12196350]
[145.59280396 142.91369629]
[142.97259521 154.76451111]
[150.69667053 167.62292480]
[158.42076111 180.48132324]
[158.55560303 165.48193359]
[161.96292114 150.87403870]
[168.47821045 137.36289978]
[177.78695679 125.60079193]
[189.43974304 116.15554047]
[202.87399292 109.48315430]
[217.44114685 105.90574646]
[232.43795776 105.59603119]
[247.14039612 108.56896210]
[260.83868408 114.68101501]
[272.87149048 123.63710785]
[282.65789795 135.00486755]
[289.72546387 148.23548889]
[293.73297119 162.69024658]
[294.48696899 177.67127991]
[291.95104980 192.45536804]
[286.24761963 206.32875061]
[277.65203857 218.62167358]
[266.57928467 228.74067688]
[253.56390381 236.19720459]
[239.23425293 240.63131714]
[224.28215027 241.82893372]
[209.42941284 239.73222351]
[195.39309692 234.44242859]
[182.85084534 226.21490479]
[172.40817261 215.44688416]
[164.57009888 202.66009521]
[164.57009888 217.66009521]
[164.57009888 232.66009521]
[164.57009888 247.66009521]
[164.57009888 262.66009521]
[164.57009888 277.66009521]
[164.57009888 292.66009521]
[164.57009888 307.66009521]
[164.57009888 322.66009521]
[164.57009888 337.66009521]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 114]
[12 113]
[13 112]
[15 109]
[16 108]
[20 47]
[21 46]
[23 43]
[24 42]
[25 41]
[26 40]
[27 39]
[29 37]
[30 36]
[58 105]
[59 104]
[60 103]
[61 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
