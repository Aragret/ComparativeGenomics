%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCUAACACCAGCCUAACCAGAUUUCAAAUUUUAUCUUUUGGCGGUAUGCACUUUUAACAxxxxxxxxxxCGGGCUACUACAACCCUUCGCUGACGCCAUAAAACUCUUCACCAAAGAGCCCCUAAAACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[85.83221436 269.77935791]
[85.83221436 254.77937317]
[85.83221436 239.77937317]
[85.83221436 224.77937317]
[85.83221436 209.77937317]
[85.83221436 194.77937317]
[85.83221436 179.77937317]
[85.83221436 164.77937317]
[85.83221436 149.77937317]
[85.83221436 134.77937317]
[80.44680786 129.55946350]
[79.00029755 144.48954773]
[66.42568970 152.66752625]
[52.19169998 147.93536377]
[47.01654434 133.85638428]
[54.79713058 121.03208923]
[69.67600250 119.11965179]
[64.29059601 113.89974213]
[49.29789734 114.36779022]
[34.30520248 114.83583069]
[25.76137543 118.24974823]
[18.99644279 115.15438080]
[3.99725485 115.31041718]
[-11.00193310 115.46645355]
[-24.72087288 123.34688568]
[-37.52794266 115.74240112]
[-52.52713013 115.89843750]
[-58.49589920 118.97760773]
[-64.24747467 118.58945465]
[-68.15039825 115.73590851]
[-83.14309692 115.26786804]
[-98.13578796 114.79982758]
[-113.12848663 114.33177948]
[-121.15091705 127.42896271]
[-134.65478516 134.74613953]
[-150.00762939 134.31501770]
[-163.07960510 126.25157928]
[-170.35441589 112.72483826]
[-169.87516785 97.37342072]
[-161.77079773 84.32678986]
[-148.22131348 77.09441376]
[-132.87147522 77.62177277]
[-119.85031128 85.76700592]
[-112.66044617 99.33908844]
[-97.66774750 99.80712891]
[-82.67504883 100.27516937]
[-67.68235779 100.74320984]
[-52.68316650 100.89924622]
[-37.68397903 100.74320984]
[-25.03788185 92.87393951]
[-11.15797043 100.46726227]
[3.84121847 100.31122589]
[18.84040642 100.15518951]
[33.83716202 99.84313202]
[48.82985687 99.37509155]
[63.82255173 98.90705109]
[67.73146820 88.59820557]
[74.30595398 80.50395966]
[82.59587097 75.21773529]
[91.55705261 72.97537994]
[100.17483521 73.65809631]
[107.57601166 76.83520508]
[113.11691284 81.83983612]
[120.84100342 68.98143005]
[128.56507874 56.12302780]
[136.28916931 43.26462555]
[144.01325989 30.40622330]
[133.22492981 20.50828934]
[124.58925629 8.69150543]
[118.43978119 -4.58439445]
[115.01339722 -18.80338097]
[114.44116211 -33.41319275]
[116.74333191 -47.84677505]
[121.82864380 -61.54430771]
[129.49790955 -73.97489929]
[139.45184326 -84.65717316]
[151.30271912 -93.17790222]
[164.58950806 -99.20800781]
[178.79576111 -102.51525116]
[193.36973572 -102.97318268]
[207.74575806 -100.56599426]
[221.36628723 -95.38903046]
[229.35620117 -108.08396149]
[237.34613037 -120.77888489]
[230.71195984 -134.70697021]
[232.68370056 -150.00781250]
[242.63217163 -161.79896545]
[257.38284302 -166.31793213]
[272.22885132 -162.12271118]
[282.43286133 -150.55200195]
[284.73883057 -135.29794312]
[278.41091919 -121.22808075]
[265.46835327 -112.83203888]
[250.04104614 -112.78897095]
[242.05113220 -100.09403992]
[234.06121826 -87.39911652]
[245.15463257 -76.73224640]
[253.80378723 -63.99600983]
[259.63232422 -49.74043655]
[262.38577271 -34.58176422]
[261.94262695 -19.17578316]
[258.31976318 -4.18948412]
[251.67172241 9.72783852]
[242.28421021 21.97270393]
[230.56175232 32.01361847]
[217.01026917 39.41414642]
[202.21530151 43.85186768]
[186.81665039 45.13244629]
[171.48071289 43.19812012]
[156.87165833 38.13031006]
[149.14756775 50.98871231]
[141.42349243 63.84711456]
[133.69940186 76.70551300]
[125.97531891 89.56391907]
[130.87687683 103.74047852]
[144.89358521 109.08198547]
[158.91029358 114.42350006]
[172.92700195 119.76501465]
[186.94372559 125.10652924]
[202.11300659 119.88421631]
[215.57603455 128.60923767]
[217.00514221 144.58851624]
[205.30403137 155.56410217]
[189.44879150 153.11647034]
[181.60220337 139.12324524]
[167.58549500 133.78172302]
[153.56878662 128.44021606]
[139.55206299 123.09870148]
[125.53535461 117.75718689]
[119.35957336 122.01273346]
[129.09953308 133.42031860]
[138.83950806 144.82791138]
[152.45433044 151.12365723]
[156.82450867 165.47293091]
[149.03030396 178.28895569]
[134.27905273 181.00932312]
[122.42607880 171.81654358]
[121.39076233 156.85130310]
[114.19937897 143.68756104]
[107.00799561 130.52381897]
[100.83221436 134.77937317]
[100.83221436 149.77937317]
[100.83221436 164.77937317]
[100.83221436 179.77937317]
[100.83221436 194.77937317]
[100.83221436 209.77937317]
[100.83221436 224.77937317]
[100.83221436 239.77937317]
[100.83221436 254.77937317]
[100.83221436 269.77935791]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[18 56]
[19 55]
[20 54]
[22 53]
[23 52]
[24 51]
[26 49]
[27 48]
[30 47]
[31 46]
[32 45]
[33 44]
[63 114]
[64 113]
[65 112]
[66 111]
[67 110]
[82 96]
[83 95]
[84 94]
[115 129]
[116 128]
[117 127]
[118 126]
[119 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
