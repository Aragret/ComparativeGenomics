%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAUCACCCUAUUAACCACUCACGGGAGCUCUCCAUGCAUUUGGUAUUUUCGUCUGGGGGGxxxxxxxxxxACUCUCAUCGCUACCUCCCUGACAAGCGCCUAUAGCACUCGAAUAAUUCUUCUCACCCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[106.58546448 406.63717651]
[106.27340698 391.64044189]
[105.96135712 376.64367676]
[105.64929962 361.64694214]
[105.33724213 346.65017700]
[105.02518463 331.65341187]
[104.71312714 316.65667725]
[104.40106964 301.65991211]
[104.08901978 286.66314697]
[88.02499390 283.00683594]
[73.42101288 275.35931396]
[61.25071335 264.22451782]
[52.32698822 250.33903503]
[47.24770737 234.62342834]
[46.35565948 218.12120056]
[49.71542358 201.92948914]
[57.10871506 187.12614441]
[68.04858398 174.69796753]
[81.81145477 165.47491455]
[97.48500824 160.07473755]
[96.23812866 145.12664795]
[94.99125671 130.17855835]
[93.74438477 115.23046875]
[82.97357178 104.79065704]
[67.99385834 104.01081085]
[53.01414490 103.23096466]
[38.03443146 102.45111847]
[23.08634377 103.69799805]
[8.44284248 106.94882202]
[-6.20065880 110.19964600]
[-17.91592789 121.67503357]
[-33.63665771 117.00698853]
[-37.19070816 100.99758911]
[-24.92197990 90.11594391]
[-9.45148468 95.55614471]
[5.19201660 92.30532074]
[19.83551788 89.05449677]
[5.93201208 83.42488098]
[-4.56089115 72.70578766]
[-9.89273930 58.68539810]
[-9.17406178 43.70262527]
[-2.52474928 30.25693130]
[8.94594383 20.59136391]
[23.32444763 16.31835365]
[38.21210480 18.15073586]
[51.12532425 25.78282738]
[59.90988541 37.94142532]
[63.10033035 52.59819794]
[60.16441727 67.30807495]
[51.59192657 79.61711121]
[38.81427765 87.47140503]
[53.79399109 88.25125122]
[68.77370453 89.03109741]
[83.75341797 89.81094360]
[88.69644928 87.71227264]
[93.47680664 87.37028503]
[97.55619049 88.52368927]
[100.52837372 90.76269531]
[109.29457855 78.59085846]
[118.06079102 66.41902161]
[126.82699585 54.24718857]
[118.15855408 13.44418526]
[122.16629791 -1.01050353]
[118.39744568 -16.37625504]
[129.25396729 -26.57356644]
[133.26170349 -41.02825546]
[137.26945496 -55.48294449]
[141.27719116 -69.93762970]
[145.28492737 -84.39231873]
[149.29267883 -98.84700775]
[136.21343994 -106.35597229]
[125.41309357 -116.88228607]
[117.57054901 -129.76426697]
[113.17880249 -144.19213867]
[112.51391602 -159.25894165]
[115.61769104 -174.01757812]
[122.29501343 -187.54031372]
[132.12614441 -198.97708130]
[144.49310303 -207.60896301]
[158.61846924 -212.89334106]
[173.61431885 -214.49806213]
[188.53800964 -212.32221985]
[202.45143127 -206.50260925]
[214.47994995 -197.40505981]
[223.86744690 -185.60144043]
[230.02384949 -171.83374023]
[232.56211853 -156.96739197]
[231.32272339 -141.93693542]
[226.38356018 -127.68717957]
[218.05511475 -115.11388397]
[206.86091614 -105.00741577]
[193.50463867 -98.00306702]
[178.82588196 -94.54114532]
[163.74736023 -94.83927155]
[159.73962402 -80.38458252]
[155.73187256 -65.92989349]
[151.72413635 -51.47520447]
[147.71640015 -37.02051544]
[143.70866394 -22.56582642]
[147.76417542 -8.23396969]
[136.62098694 2.99723673]
[132.61325073 17.45192528]
[137.30682373 23.30173683]
[146.69398499 35.00136185]
[151.38757324 40.85117340]
[166.36727905 40.07132721]
[179.74653625 31.62702370]
[192.85885620 38.69217300]
[207.83856201 37.91233063]
[219.60258484 27.00419998]
[235.44349670 29.54295158]
[243.20950317 43.58107376]
[236.94317627 58.34971619]
[221.45152283 62.51964188]
[208.61840820 52.89204407]
[193.63870239 53.67189026]
[181.33090210 62.06041336]
[167.14712524 55.05104065]
[152.16741943 55.83088684]
[138.99882507 63.01339722]
[130.23262024 75.18523407]
[121.46641541 87.35707092]
[112.70021057 99.52890778]
[108.69246674 113.98359680]
[109.93934631 128.93168640]
[111.18621826 143.87977600]
[112.43309021 158.82785034]
[125.90637970 160.75425720]
[138.66598511 165.47152710]
[150.14099121 172.76559448]
[159.81861877 182.30722046]
[167.26708984 193.66674805]
[172.15489197 206.33355713]
[174.26559448 219.73889160]
[173.50733948 233.28153992]
[169.91690063 246.35467529]
[163.65791321 258.37313843]
[155.01333618 268.79953003]
[144.37280273 277.16839600]
[132.21490479 283.10678101]
[119.08576965 286.35110474]
[119.39782715 301.34786987]
[119.70988464 316.34460449]
[120.02194214 331.34136963]
[120.33399200 346.33810425]
[120.64604950 361.33486938]
[120.95810699 376.33163452]
[121.27016449 391.32836914]
[121.58222198 406.32513428]
[124.17321777 425.53286743]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[20 127]
[21 126]
[22 125]
[23 124]
[24 54]
[25 53]
[26 52]
[27 51]
[28 37]
[29 36]
[30 35]
[58 123]
[59 122]
[60 121]
[61 120]
[62 102]
[63 101]
[65 99]
[66 98]
[67 97]
[68 96]
[69 95]
[70 94]
[105 119]
[106 118]
[108 116]
[109 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
