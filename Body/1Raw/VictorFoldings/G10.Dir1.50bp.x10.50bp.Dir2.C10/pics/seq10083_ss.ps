%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUUCCCCUACUCAUCGCACUAAUUUACACUCACAACACCCUAGGCUCACUAAACAUUCUxxxxxxxxxxCUAUUCGCCUACACAAUUCUCCGAUCCGUCCCUAACAAACUAGGAGGCGUCCUUGCCCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[83.57132721 412.54333496]
[83.57132721 397.54333496]
[83.57132721 382.54333496]
[83.57132721 367.54333496]
[83.57132721 352.54333496]
[83.57132721 337.54333496]
[83.57132721 322.54333496]
[83.57132721 307.54333496]
[83.57132721 292.54333496]
[83.57132721 277.54333496]
[70.53226471 274.91992188]
[58.21047974 269.90026855]
[47.04227066 262.66018677]
[37.42343903 253.45425415]
[29.69526482 242.60662842]
[24.13240051 230.49983215]
[20.93310928 217.56118774]
[20.21219444 204.24772644]
[21.99688721 191.03002930]
[26.22581673 178.37567139]
[32.75112534 166.73257446]
[41.34363556 156.51325989]
[51.70088577 148.08013916]
[63.45779800 141.73272705]
[76.19953918 137.69697571]
[89.47613525 136.11721802]
[90.72301483 121.16913605]
[91.96988678 106.22105408]
[89.43602753 98.50978851]
[93.40136719 90.97603607]
[94.95894623 76.05712128]
[85.78862762 87.92747498]
[73.44837189 96.45497131]
[59.10218811 100.83526611]
[44.10326767 100.65517426]
[29.86638832 95.93170166]
[17.73443985 87.11037445]
[8.85176563 75.02326965]
[4.05622530 60.81050110]
[3.80015659 45.81268692]
[8.10771370 31.44449234]
[16.57258606 19.06120110]
[28.39632607 9.83086109]
[42.46366119 4.62412500]
[57.44768906 3.93211794]
[71.93504333 7.82011271]
[84.55921173 15.92137527]
[94.12940979 27.47175407]
[99.74294281 41.38175964]
[100.87028503 56.33952332]
[107.77728271 43.02436829]
[114.68428802 29.70921135]
[121.59128571 16.39405632]
[128.49827576 3.07890034]
[115.87876892 -5.05020905]
[104.07594299 -14.32532120]
[93.19351959 -24.66492271]
[83.32714844 -35.97814941]
[74.56352234 -48.16557693]
[66.97966766 -61.12009811]
[60.64223480 -74.72786713]
[55.60691452 -88.86930084]
[51.91795731 -103.42010498]
[49.60778427 -118.25242615]
[48.69670105 -133.23590088]
[49.19270706 -148.23884583]
[51.09144974 -163.12942505]
[54.37623978 -177.77676392]
[59.01821136 -192.05213928]
[64.97657013 -205.83010864]
[72.19894409 -218.98959351]
[80.62187195 -231.41491699]
[90.17133331 -242.99690247]
[100.76338959 -253.63375854]
[112.30496979 -263.23199463]
[124.69464111 -271.70730591]
[137.82351685 -278.98513794]
[151.57621765 -285.00158691]
[165.83189392 -289.70376587]
[180.46524048 -293.05035400]
[195.34767151 -295.01190186]
[210.34838867 -295.57122803]
[225.33557129 -294.72338867]
[240.17750549 -292.47583008]
[254.74375916 -288.84829712]
[268.90631104 -283.87271118]
[282.54071045 -277.59277344]
[295.52709961 -270.06365967]
[307.75140381 -261.35153198]
[319.10617065 -251.53298950]
[329.49160767 -240.69430542]
[338.81646729 -228.93072510]
[346.99874878 -216.34562683]
[353.96658325 -203.04962158]
[359.65872192 -189.15956116]
[364.02517700 -174.79750061]
[367.02752686 -160.08967590]
[368.63940430 -145.16531372]
[368.84664917 -130.15560913]
[367.64743042 -115.19243622]
[365.05230713 -100.40731812]
[361.08404541 -85.93017578]
[355.77758789 -71.88825226]
[349.17947388 -58.40494156]
[341.34777832 -45.59873962]
[332.35128784 -33.58218765]
[322.26904297 -22.46089554]
[311.18969727 -12.33259487]
[299.21060181 -3.28629899]
[286.43701172 4.59849310]
[272.98120117 11.25248718]
[258.96142578 16.61720657]
[244.50086975 20.64550591]
[229.72665405 23.30198288]
[214.76858521 24.56329155]
[199.75814819 24.41834641]
[184.82722473 22.86842346]
[170.10707092 19.92714119]
[155.72700500 15.62034988]
[141.81343079 9.98589897]
[134.90643311 23.30105400]
[127.99944305 36.61621094]
[121.09244537 49.93136597]
[114.18544006 63.24652100]
[109.87786102 77.61470795]
[108.32027435 92.53361511]
[106.91797638 107.46792603]
[105.67109680 122.41601562]
[104.42422485 137.36410522]
[120.45171356 142.48802185]
[134.81965637 151.23066711]
[146.72531128 163.09928894]
[155.50451660 177.42658997]
[160.66871643 193.40827942]
[161.93220520 210.14816284]
[159.22789001 226.70851135]
[152.71086121 242.16242981]
[142.74945068 255.64590454]
[129.90452576 266.40597534]
[114.89779663 273.84283447]
[98.57132721 277.54333496]
[98.57132721 292.54333496]
[98.57132721 307.54333496]
[98.57132721 322.54333496]
[98.57132721 337.54333496]
[98.57132721 352.54333496]
[98.57132721 367.54333496]
[98.57132721 382.54333496]
[98.57132721 397.54333496]
[98.57132721 412.54333496]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[26 129]
[27 128]
[28 127]
[30 126]
[31 125]
[50 124]
[51 123]
[52 122]
[53 121]
[54 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
