%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAACCCCCUGGUCAACCUCAACCUAGGCCUCCUAUUUAUUCUAGCCACCUCUAGCCUAGCCxxxxxxxxxxGCAGCCCUAGCAACACUCCACCUCCUAUUCUUGCACGAAACGGGAUCAAACAACCCCCUAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[66.41007233 277.50643921]
[55.66373062 275.13168335]
[45.08193207 272.10699463]
[34.70394897 268.44357300]
[24.56829643 264.15502930]
[17.74472046 277.51312256]
[10.92114544 290.87121582]
[4.09756994 304.22933960]
[-2.72600555 317.58743286]
[-1.34464025 333.92828369]
[-14.95827675 343.07165527]
[-29.56237221 335.61160278]
[-30.13348579 319.22238159]
[-16.08410454 310.76385498]
[-9.26052952 297.40576172]
[-2.43695426 284.04763794]
[4.38662100 270.68954468]
[11.21019650 257.33145142]
[-4.43751907 247.40969849]
[-18.98670197 235.93740845]
[-32.28431702 223.03526306]
[-44.19049454 208.83894348]
[-54.57999420 193.49781799]
[-63.34353256 177.17321777]
[-70.38893890 160.03686523]
[-75.64209747 142.26901245]
[-79.04775238 124.05655670]
[-80.57008362 105.59105682]
[-80.19307709 87.06674194]
[-77.92070770 68.67847443]
[-73.77686310 50.61966324]
[-67.80513763 33.08025742]
[-60.06834030 16.24475479]
[-73.05872345 8.74475479]
[-86.04910278 1.24475431]
[-99.03948212 -6.25524569]
[-112.02986145 -13.75524521]
[-125.02024841 -21.25524521]
[-135.35623169 -10.28874397]
[-147.94299316 -2.00199270]
[-162.10173035 3.15811515]
[-177.06889343 4.91330099]
[-192.03732300 3.16891003]
[-206.19978333 -1.98098516]
[-218.79251099 -10.25865746]
[-229.13641357 -21.21770096]
[-236.67362976 -34.26710892]
[-240.99769592 -48.70314407]
[-241.87542725 -63.74729156]
[-239.25949097 -78.58823395]
[-233.29095459 -92.42562103]
[-224.29168701 -104.51322174]
[-212.74702454 -114.19915771]
[-199.27955627 -120.96109009]
[-184.61553955 -124.43435669]
[-169.54580688 -124.43164062]
[-154.88305664 -120.95308685]
[-141.41801453 -114.18630219]
[-129.87684631 -104.49619293]
[-120.88194275 -92.40534973]
[-114.91839600 -78.56581116]
[-112.30780792 -63.72393036]
[-113.19097137 -48.68010330]
[-117.52024841 -34.24562836]
[-104.52986145 -26.74562645]
[-91.53948212 -19.24562645]
[-78.54910278 -11.74562645]
[-65.55872345 -4.24562693]
[-52.56834030 3.25437331]
[-43.13887024 -10.21832085]
[-32.52335358 -22.77774811]
[-20.80975151 -34.31983948]
[-8.09511852 -44.74895477]
[5.51518965 -53.97868347]
[19.90839767 -61.93254852]
[34.96524429 -68.54463959]
[50.56097031 -73.76016998]
[66.56634521 -77.53592682]
[82.84874725 -79.84062195]
[99.27326965 -80.65515900]
[115.70381927 -79.97279358]
[132.00424194 -77.79916382]
[148.03947449 -74.15229797]
[163.67665100 -69.06240845]
[178.78620911 -62.57167053]
[185.88261414 -75.78685760]
[184.83705139 -92.15263367]
[198.63554382 -101.01454926]
[213.08338928 -93.25621796]
[213.31788635 -76.85874939]
[199.09779358 -68.69045258]
[192.00138855 -55.47526932]
[204.68733215 -47.23238754]
[216.63912964 -37.95698166]
[227.77293396 -27.71409988]
[238.01069641 -16.57557297]
[247.28059387 -4.61951494]
[255.51762390 8.07022858]
[262.66403198 21.40466499]
[268.66970825 35.29028320]
[273.49249268 49.62970352]
[277.09863281 64.32236481]
[279.46276855 79.26522827]
[280.56835938 94.35350037]
[295.56756592 94.50749969]
[310.56677246 94.66149139]
[325.56597900 94.81549072]
[341.35458374 85.39472961]
[356.11734009 94.83429718]
[371.11654663 94.68029785]
[386.11575317 94.52630615]
[396.99533081 83.06286621]
[412.79620361 82.73353577]
[424.14395142 93.73370361]
[424.30621338 109.53715515]
[413.18670654 120.76799774]
[397.38241577 120.76315308]
[386.26977539 109.52551270]
[371.27053833 109.67951202]
[356.27133179 109.83350372]
[347.54962158 118.27115631]
[335.01467896 118.48604584]
[325.41198730 109.81469727]
[310.41278076 109.66070557]
[295.41357422 109.50670624]
[280.41436768 109.35270691]
[279.51007080 120.32109070]
[277.93957520 131.21406555]
[275.70870972 141.99118042]
[272.82574463 152.61247253]
[269.30139160 163.03849792]
[265.14871216 173.23057556]
[260.38311768 183.15087891]
[255.02230835 192.76258850]
[249.08618164 202.03002930]
[242.59675598 210.91880798]
[235.57810974 219.39595032]
[228.05630493 227.42997742]
[220.05924988 234.99107361]
[211.61662292 242.05119324]
[202.75976562 248.58413696]
[193.52154541 254.56564331]
[183.93623352 259.97351074]
[174.03941345 264.78768921]
[163.86782837 268.99029541]
[153.45921326 272.56573486]
[142.85218811 275.50073242]
[132.08612061 277.78439331]
[121.20098877 279.40829468]
[110.23716736 280.36633301]
[99.23535919 280.65499878]
[88.23638916 280.27322388]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 18]
[6 17]
[7 16]
[8 15]
[9 14]
[33 69]
[34 68]
[35 67]
[36 66]
[37 65]
[38 64]
[85 92]
[86 91]
[104 126]
[105 125]
[106 124]
[107 123]
[109 120]
[110 119]
[111 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
