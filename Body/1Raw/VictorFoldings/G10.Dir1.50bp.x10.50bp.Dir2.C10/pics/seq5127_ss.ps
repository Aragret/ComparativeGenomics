%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCUCCCUCACUAAACGUAAGCCUUCUCCUCACUCUCUCAAUCUUAUCCAUCAUAGCAGGxxxxxxxxxxUCAUACAAAGCCCCCGCACCAAUAGGAUCCUCCCGAAUCAACCCUGACCCCUCUCCUUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[44.25622940 75.99406433]
[31.31817436 68.40415955]
[15.49998760 68.09506226]
[8.43727016 54.98143387]
[-7.38091660 54.67234039]
[-14.44363403 41.55870819]
[-27.38168907 33.96879959]
[-40.31974411 26.37889290]
[-53.25780106 18.78898430]
[-66.19585419 11.19907665]
[-79.13391113 3.60916829]
[-92.07196808 -3.98074007]
[-100.68279266 8.31153584]
[-110.25481415 19.87106323]
[-120.72596741 30.62287140]
[-132.02832031 40.49723053]
[-144.08859253 49.43010330]
[-156.82855225 57.36355591]
[-170.16558838 64.24613190]
[-184.01319885 70.03319550]
[-198.28157043 74.68721771]
[-212.87817383 78.17800903]
[-227.70832825 80.48294067]
[-242.67587280 81.58705139]
[-257.68371582 81.48319244]
[-272.63455200 80.17202759]
[-287.43136597 77.66206360]
[-301.97827148 73.96958160]
[-316.18084717 69.11853027]
[-329.94705200 63.14036179]
[-343.18753052 56.07385635]
[-355.81649780 47.96483994]
[-367.75195312 38.86590576]
[-378.91656494 28.83606339]
[-389.23791504 17.94036102]
[-398.64904785 6.24946022]
[-407.08889771 -6.16081476]
[-414.50277710 -19.20997810]
[-420.84259033 -32.81340027]
[-426.06723022 -46.88285828]
[-430.14276123 -61.32710266]
[-433.04281616 -76.05245209]
[-434.74856567 -90.96341705]
[-435.24893188 -105.96327972]
[-434.54067993 -120.95477295]
[-432.62841797 -135.84065247]
[-429.52450562 -150.52438354]
[-425.24911499 -164.91075134]
[-419.82995605 -178.90643311]
[-413.30218506 -192.42065430]
[-405.70809937 -205.36579895]
[-397.09701538 -217.65788269]
[-387.52474976 -229.21719360]
[-377.05334473 -239.96878052]
[-365.75076294 -249.84288025]
[-353.69030762 -258.77548218]
[-340.95016479 -266.70864868]
[-327.61297607 -273.59094238]
[-313.76525879 -279.37771606]
[-299.49676514 -284.03140259]
[-284.90008545 -287.52188110]
[-270.06988525 -289.82647705]
[-255.10232544 -290.93026733]
[-240.09448242 -290.82608032]
[-225.14367676 -289.51458740]
[-210.34689331 -287.00430298]
[-195.80009460 -283.31149292]
[-181.59761047 -278.46011353]
[-167.83155823 -272.48165894]
[-154.59121704 -265.41485596]
[-141.96244812 -257.30557251]
[-130.02717590 -248.20635986]
[-118.86277771 -238.17626953]
[-108.54167938 -227.28034973]
[-99.13082123 -215.58923340]
[-90.69122314 -203.17877197]
[-83.27763367 -190.12945557]
[-76.93811798 -176.52589417]
[-71.71380615 -162.45631409]
[-67.63856506 -148.01197815]
[-64.73883820 -133.28656006]
[-63.03342819 -118.37556458]
[-62.53339386 -103.37568665]
[-63.24197769 -88.38421631]
[-65.15457916 -73.49837494]
[-68.25880432 -58.81470871]
[-72.53451538 -44.42844391]
[-77.95398712 -30.43288231]
[-84.48206329 -16.91879654]
[-71.54400635 -9.32888794]
[-58.60594940 -1.73897946]
[-45.66789246 5.85092878]
[-32.72983551 13.44083691]
[-19.79178047 21.03074455]
[-6.85372543 28.62065315]
[8.03904533 28.38686752]
[16.02717781 42.04337692]
[30.91994858 41.80959320]
[38.90808105 55.46610260]
[51.84613800 63.05601120]
[70.88922882 45.21004868]
[96.17351532 36.72201538]
[123.26684570 39.58133698]
[147.20889282 53.74263763]
[163.41912842 77.04907990]
[178.18518066 74.41020966]
[192.95124817 71.77134705]
[207.47964478 63.03282166]
[219.89852905 74.57438660]
[212.24591064 89.70295715]
[195.59010315 86.53740692]
[180.82405090 89.17626953]
[166.05799866 91.81513214]
[165.27920532 99.27458954]
[180.19808960 100.83239746]
[178.64004517 115.75126648]
[163.72161865 114.19349670]
[162.94284058 121.65295410]
[176.84538269 127.28491211]
[190.74794006 132.91687012]
[206.90594482 130.11491394]
[217.20231628 142.87879944]
[211.04502869 158.07814026]
[194.76817322 160.07714844]
[185.11598206 146.81942749]
[171.21343994 141.18746948]
[157.31088257 135.55551147]
[152.44335938 141.97703552]
[146.86540222 147.74729919]
[140.66258240 152.78884888]
[133.92877197 157.03535461]
[126.76470184 160.43238831]
[119.27645874 162.93820190]
[111.57394409 164.52413940]
[103.76923370 165.17500305]
[95.97496796 164.88914490]
[88.30269623 163.67835999]
[80.86132812 161.56765747]
[73.75552368 158.59475708]
[67.08429718 154.80940247]
[60.93955994 150.27264404]
[55.40492630 145.05580139]
[50.55453491 139.23933411]
[46.45206451 132.91168213]
[43.14992905 126.16783142]
[40.68859482 119.10798645]
[39.09609985 111.83599091]
[38.38777161 104.45788574]
[38.56609726 97.08029938]
[39.62080765 89.80894470]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 100]
[2 99]
[4 97]
[6 95]
[7 94]
[8 93]
[9 92]
[10 91]
[11 90]
[12 89]
[105 113]
[106 112]
[107 111]
[118 127]
[119 126]
[120 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
