%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACAACCUAUUUAGCUGUUCCCCAACCUUUUCCUCCGACCCCCUAACAACCCCCCUCCUAAxxxxxxxxxxUCAAAUAUCUACUCAUCUUCCUAAUUACCAUACUAAUCUUAGUUACCGCUAACAACCUAUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[182.40863037 89.62998199]
[167.75590515 92.83898163]
[153.10317993 96.04797363]
[138.45045471 99.25697327]
[123.79772949 102.46597290]
[109.14500427 105.67496490]
[95.85766602 112.63532257]
[84.87686157 122.85402679]
[73.89605713 133.07273865]
[62.91525650 143.29144287]
[51.93445587 153.51014709]
[40.95365143 163.72885132]
[29.97285080 173.94757080]
[18.99204826 184.16627502]
[17.73743248 197.04376221]
[8.32921314 205.32969666]
[-3.80061817 204.96998596]
[-14.98891449 214.96107483]
[-19.60383034 230.69749451]
[-35.60113144 234.30560303]
[-46.52416229 222.07369995]
[-41.13624573 206.58491516]
[-24.98001099 203.77278137]
[-13.79171562 193.78167725]
[-9.24130249 176.86015320]
[8.77334023 173.18547058]
[19.75414276 162.96676636]
[30.73494530 152.74806213]
[41.71574783 142.52934265]
[52.69655228 132.31063843]
[63.67735291 122.09193420]
[74.65815735 111.87322998]
[85.63896179 101.65451813]
[70.94930267 104.68997955]
[55.95132828 104.44332886]
[41.36943054 100.92648315]
[27.90789604 94.30929565]
[16.21690750 84.91138458]
[6.86112642 73.18665314]
[0.29243103 59.70139313]
[-3.17191744 45.10693359]
[-3.36459398 30.10816956]
[-0.27629256 15.42953205]
[5.94382477 1.77998495]
[14.99533176 -10.18121147]
[26.44104958 -19.87634277]
[39.72815704 -26.83714104]
[54.21490479 -30.72740746]
[69.20159149 -31.35924721]
[83.96437836 -28.70213890]
[97.79022980 -22.88442230]
[110.01136780 -14.18708515]
[120.03753662 -3.03020263]
[127.38446808 10.04735851]
[131.69731140 24.41396332]
[132.76777649 39.37571716]
[130.54414368 54.20998383]
[125.13381195 68.20027924]
[116.79810333 80.67088318]
[105.93601227 91.02223969]
[120.58873749 87.81324768]
[135.24145508 84.60424805]
[149.89418030 81.39524841]
[164.54690552 78.18625641]
[179.19963074 74.97725677]
[177.31906128 61.61999893]
[176.39744568 48.16275024]
[176.43946838 34.67426682]
[177.44487000 21.22346497]
[179.40849304 7.87905979]
[182.32026672 -5.29077530]
[186.16528320 -18.21876144]
[190.92385864 -30.83885765]
[196.57168579 -43.08659744]
[203.07983398 -54.89942551]
[210.41506958 -66.21699524]
[218.53985596 -76.98151398]
[227.41268921 -87.13799286]
[236.98817444 -96.63456726]
[247.21740723 -105.42273712]
[258.04806519 -113.45764160]
[269.42483521 -120.69824219]
[281.28955078 -127.10757446]
[293.58160400 -132.65292358]
[306.23815918 -137.30598450]
[319.19451904 -141.04301453]
[332.38452148 -143.84495544]
[345.74078369 -145.69752502]
[359.19500732 -146.59127808]
[372.67849731 -146.52168274]
[386.12234497 -145.48913574]
[399.45785522 -143.49894714]
[412.61694336 -140.56129456]
[425.53237915 -136.69123840]
[438.13812256 -131.90858459]
[450.36987305 -126.23777008]
[462.16506958 -119.70782471]
[473.46353149 -112.35211945]
[484.20748901 -104.20826721]
[494.34213257 -95.31790924]
[503.81567383 -85.72647858]
[512.57971191 -75.48300171]
[520.58953857 -64.63984680]
[527.80426025 -53.25241470]
[534.18695068 -41.37891006]
[539.70513916 -29.08000565]
[544.33062744 -16.41855431]
[548.03979492 -3.45925426]
[550.81372070 9.73167801]
[552.63830566 23.08684158]
[553.50421143 36.53800201]
[553.40710449 50.01642990]
[552.34741211 63.45326996]
[567.16992188 65.75414276]
[581.99237061 68.05501556]
[596.81488037 70.35589600]
[611.90283203 63.93051529]
[624.84698486 73.99932861]
[622.33148193 90.20439911]
[606.94409180 95.87534332]
[594.51397705 85.17837524]
[579.69152832 82.87750244]
[564.86901855 80.57662201]
[550.04656982 78.27574921]
[546.05194092 94.71572113]
[540.59973145 110.73191071]
[533.73376465 126.19538116]
[525.50927734 140.98162842]
[515.99243164 154.97158813]
[505.25964355 168.05259705]
[493.39733887 180.11932373]
[480.50091553 191.07458496]
[466.67413330 200.83010864]
[452.02822876 209.30734253]
[436.68106079 216.43795776]
[420.75616455 222.16447449]
[404.38165283 226.44075012]
[387.68936157 229.23226929]
[370.81356812 230.51649475]
[353.89016724 230.28298950]
[337.05535889 228.53356934]
[320.44467163 225.28222656]
[304.19180298 220.55505371]
[288.42764282 214.39004517]
[273.27908325 206.83673096]
[258.86807251 197.95584106]
[245.31071472 187.81880188]
[232.71615601 176.50714111]
[221.18580627 164.11184692]
[210.81257629 150.73265076]
[201.67999268 136.47718811]
[193.86164856 121.46016693]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 65]
[2 64]
[3 63]
[4 62]
[5 61]
[6 60]
[7 33]
[8 32]
[9 31]
[10 30]
[11 29]
[12 28]
[13 27]
[14 26]
[17 24]
[18 23]
[113 124]
[114 123]
[115 122]
[116 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
