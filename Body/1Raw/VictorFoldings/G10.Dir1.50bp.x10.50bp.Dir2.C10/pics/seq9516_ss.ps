%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACUACAAAAAGGAUUAGACUGAACCGAAUUGGUAUAUAGUUUAAACAAAACGAAUGAUUUxxxxxxxxxxCACGGACUACAACCACGACCAAUGAUAUGAAAAACCAUCGUUGUAUUUCAACUACAAGAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[93.17318726 391.18200684]
[93.17318726 376.18200684]
[93.17318726 361.18200684]
[93.17318726 346.18200684]
[93.17318726 331.18200684]
[93.17318726 316.18200684]
[93.17318726 301.18200684]
[93.17318726 286.18200684]
[93.17318726 271.18200684]
[93.17318726 256.18200684]
[78.63079071 252.63136292]
[65.35283661 245.69911194]
[54.11315918 235.78440857]
[45.56797791 223.46029663]
[40.21757507 209.44068909]
[38.37702560 194.53898621]
[40.15762329 179.62088013]
[45.46017456 165.55401611]
[53.98051453 153.15765381]
[65.22694397 143.15480042]
[78.54861450 136.13017273]
[93.17318726 132.49594116]
[93.17318726 117.49594116]
[82.84597778 106.61711884]
[67.86626434 105.83727264]
[52.88655090 105.05742645]
[37.90683746 104.27758026]
[22.92712212 103.49773407]
[7.94740772 102.71788788]
[-7.03230667 101.93804932]
[-20.54691696 115.14238739]
[-39.10708618 114.35656738]
[-51.04183197 100.53775787]
[-66.04102325 100.38172150]
[-81.04020691 100.22568512]
[-93.46172333 110.37879181]
[-109.11342621 106.85690308]
[-115.98867035 92.36170959]
[-108.81336212 78.01268768]
[-93.09177399 74.81717682]
[-80.88417053 85.22650146]
[-65.88498688 85.38253784]
[-50.88579559 85.53857422]
[-44.60918427 75.92115784]
[-34.34967422 70.49804688]
[-22.62710571 70.73312378]
[-12.38522911 76.68399048]
[-6.25246143 86.95832825]
[8.72725296 87.73817444]
[23.70696640 88.51802063]
[38.68667984 89.29786682]
[53.66639709 90.07771301]
[68.64611053 90.85755920]
[83.62582397 91.63740540]
[97.01210785 84.86928558]
[105.26439667 72.34332275]
[113.51668549 59.81736374]
[114.29854584 53.14681625]
[117.83448029 48.59395981]
[122.38190460 46.95187378]
[131.14811707 34.78003693]
[139.91432190 22.60820007]
[148.68052673 10.43636322]
[151.18090820 1.58198881]
[157.75787354 -1.89494812]
[166.77540588 -13.88178062]
[168.54949951 -32.18021011]
[184.90165710 -38.47360229]
[193.66786194 -50.64543915]
[202.43408203 -62.81727600]
[192.15087891 -74.42557526]
[184.69828796 -88.01749420]
[180.44401550 -102.91605377]
[179.59651184 -118.37995148]
[182.19483948 -133.64048767]
[188.10679626 -147.93972778]
[197.03575134 -160.56822205]
[208.53541565 -170.90008545]
[222.03219604 -178.42416382]
[236.85383606 -182.76918030]
[252.26283264 -183.72216797]
[267.49319458 -181.23881531]
[281.78848267 -175.44561768]
[290.29956055 -187.79718018]
[283.11950684 -201.31404114]
[283.05508423 -216.61941528]
[290.12106323 -230.19624329]
[302.69378662 -238.92466736]
[317.88409424 -240.79896545]
[332.20138550 -235.38842773]
[342.35565186 -223.93637085]
[346.01348877 -209.07438660]
[342.33438110 -194.21763611]
[332.16375732 -182.78012085]
[317.83874512 -177.39007568]
[302.65115356 -179.28608704]
[294.14004517 -166.93452454]
[304.10427856 -156.35769653]
[311.64279175 -143.92778015]
[316.42086792 -130.19174194]
[318.22540283 -115.75466156]
[316.97421265 -101.25302887]
[312.72000122 -87.32674408]
[305.64797974 -74.59084320]
[296.06784058 -63.60832977]
[284.40032959 -54.86532211]
[271.15850830 -48.74951553]
[256.92544556 -45.53297806]
[242.32838440 -45.36006927]
[228.01119995 -48.24096298]
[214.60591125 -54.05107117]
[205.83970642 -41.87923431]
[197.07350159 -29.70739555]
[198.69953918 -17.67979050]
[191.44041443 -7.45608187]
[178.76223755 -4.86425066]
[169.74470520 7.12258196]
[160.85235596 19.20256996]
[152.08615112 31.37440681]
[143.31994629 43.54624557]
[134.55374146 55.71807861]
[126.04264832 68.06965637]
[117.79035950 80.59561157]
[109.53807068 93.12157440]
[113.41415405 97.48768616]
[115.03482819 103.91110229]
[113.39146423 111.14587402]
[108.17318726 117.49594116]
[108.17318726 132.49594116]
[122.79775238 136.13017273]
[136.11941528 143.15480042]
[147.36585999 153.15765381]
[155.88619995 165.55401611]
[161.18875122 179.62088013]
[162.96934509 194.53898621]
[161.12878418 209.44068909]
[155.77839661 223.46029663]
[147.23321533 235.78440857]
[135.99353027 245.69911194]
[122.71557617 252.63136292]
[108.17318726 256.18200684]
[108.17318726 271.18200684]
[108.17318726 286.18200684]
[108.17318726 301.18200684]
[108.17318726 316.18200684]
[108.17318726 331.18200684]
[108.17318726 346.18200684]
[108.17318726 361.18200684]
[108.17318726 376.18200684]
[108.17318726 391.18200684]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[22 129]
[23 128]
[24 54]
[25 53]
[26 52]
[27 51]
[28 50]
[29 49]
[30 48]
[33 43]
[34 42]
[35 41]
[55 124]
[56 123]
[57 122]
[60 121]
[61 120]
[62 119]
[63 118]
[65 117]
[66 116]
[68 113]
[69 112]
[70 111]
[83 97]
[84 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
