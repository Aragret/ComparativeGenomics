%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCCCAGUCCUAGCUGCUGGCAUCACUAUACUACUAACAGACCGCAACCUCAACACCACCUUxxxxxxxxxxAGGAGGGCACUGGCCCCCAACAGGCAUCACCCCGCUAAAUCCCCUAGAAGUCCCACUCCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[99.62768555 275.16955566]
[99.62768555 260.16955566]
[99.62768555 245.16957092]
[99.62768555 230.16957092]
[99.62768555 215.16957092]
[99.62768555 200.16957092]
[99.62768555 185.16957092]
[99.62768555 170.16957092]
[99.62768555 155.16957092]
[99.62768555 140.16957092]
[97.63162994 125.30296326]
[93.67501831 110.83419800]
[85.13455963 98.50291443]
[72.98123169 89.71107483]
[60.82789612 80.91922760]
[48.67456436 72.12738800]
[36.52122879 63.33554459]
[32.04727936 63.04673004]
[28.29861832 61.47475815]
[25.59591293 59.01668549]
[24.09322739 56.13377380]
[23.77166176 53.28989792]
[12.38058758 43.53062439]
[-1.55012834 37.96868896]
[-16.53036880 37.19902802]
[-31.51061058 36.42936707]
[-40.30381393 39.12665558]
[-46.78956985 35.48699188]
[-61.75085068 34.40992355]
[-66.84571075 48.62065887]
[-75.58659363 60.92917633]
[-87.32485962 70.42210388]
[-101.18946075 76.39499664]
[-116.15154266 78.40464020]
[-131.10083008 76.30188751]
[-144.92796326 70.24279785]
[-156.60691833 60.67697525]
[-165.27099609 48.31428146]
[-170.27728271 34.07210159]
[-171.25428772 19.00730896]
[-168.12950134 4.23780346]
[-161.13479614 -9.14041615]
[-150.78924561 -20.13459778]
[-137.86053467 -27.92889977]
[-123.30808258 -31.94493484]
[-108.21176147 -31.88468361]
[-93.69181824 -27.75262070]
[-80.82574463 -19.85536957]
[-70.56826782 -8.77895927]
[-63.68058014 4.65466642]
[-60.67378235 19.44864273]
[-45.71250153 20.52571297]
[-30.74094963 21.44912529]
[-15.76070976 22.21878624]
[-0.78046829 22.98844719]
[-0.46209732 22.43869972]
[-0.10473414 21.90541267]
[-2.86097693 7.16081619]
[-5.61721945 -7.58378029]
[-8.37346268 -22.32837677]
[-23.42219925 -23.32152557]
[-37.75090790 -28.02672195]
[-50.45887756 -36.14819717]
[-60.74727249 -47.17542648]
[-67.96935272 -60.41522598]
[-71.67113495 -75.03533936]
[-71.61992645 -90.11672211]
[-67.81893921 -104.71135712]
[-60.50710678 -117.90180206]
[-50.14406204 -128.85890198]
[-37.38123322 -136.89389038]
[-23.02089882 -141.50166321]
[-7.96576357 -142.39259338]
[6.83779240 -139.51066589]
[20.45920753 -133.03703308]
[32.04222488 -123.37863922]
[40.85873032 -111.14262390]
[46.35450745 -97.09815216]
[48.18408966 -82.12806702]
[46.23246765 -67.17340088]
[40.62232208 -53.17422485]
[31.70630836 -41.01052475]
[20.04489708 -31.44693375]
[6.37113428 -25.08461952]
[9.12737656 -10.34002304]
[11.88361931 4.40457344]
[14.63986206 19.14916992]
[22.13986206 32.13954926]
[33.53093719 41.89882660]
[45.31307220 51.18221283]
[57.46640778 59.97405243]
[69.61973572 68.76589966]
[81.77307129 77.55773926]
[93.92640686 86.34957886]
[86.63159943 73.24287415]
[87.96173096 58.30196381]
[97.45713806 46.69002151]
[111.83647919 42.41981125]
[126.13063812 46.96700287]
[135.39994812 58.76021194]
[136.44120789 73.72402954]
[128.89457703 86.68737030]
[115.36759949 93.17051697]
[130.36680603 93.01651764]
[145.36601257 92.86252594]
[149.87544250 78.42229462]
[158.62809753 66.08348083]
[170.76647949 57.05491638]
[185.10139465 52.22113037]
[200.22843933 52.05568314]
[214.66564941 56.57478333]
[226.99859619 65.33570099]
[236.01902771 77.48012543]
[240.84320068 91.81827545]
[240.99851990 106.94543457]
[236.46974182 121.37960815]
[227.70056152 133.70668030]
[215.55009460 142.71896362]
[201.20870972 147.53353882]
[186.08145142 147.67871094]
[171.65031433 143.14027405]
[159.32911682 134.36283875]
[150.32498169 122.20632935]
[145.52001953 107.86173248]
[130.52081299 108.01573181]
[115.52159882 108.16972351]
[111.69334412 107.87859344]
[108.14379120 106.87758636]
[112.10040283 121.34635162]
[117.01573181 107.17456818]
[127.18848419 96.15118408]
[140.92082214 90.11602783]
[155.92076111 90.07638550]
[169.68479919 96.03887177]
[179.91569519 107.00833130]
[184.90586853 121.15393829]
[183.82244873 136.11476135]
[176.84628296 149.39379883]
[165.14167786 158.77476501]
[150.66218567 162.69194031]
[135.82446289 160.49156189]
[123.10493469 152.54084778]
[114.62768555 140.16957092]
[114.62768555 155.16957092]
[114.62768555 170.16957092]
[114.62768555 185.16957092]
[114.62768555 200.16957092]
[114.62768555 215.16957092]
[114.62768555 230.16957092]
[114.62768555 245.16957092]
[114.62768555 260.16955566]
[114.62768555 275.16955566]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 129]
[12 128]
[13 94]
[14 93]
[15 92]
[16 91]
[17 90]
[22 89]
[23 88]
[24 55]
[25 54]
[26 53]
[28 52]
[29 51]
[57 87]
[58 86]
[59 85]
[60 84]
[103 126]
[104 125]
[105 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
