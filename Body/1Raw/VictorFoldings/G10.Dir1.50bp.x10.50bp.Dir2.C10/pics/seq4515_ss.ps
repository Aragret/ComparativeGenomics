%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAACCCCCUUAUUUCUAGGACUAUGAGAAUCGAACCCAUCCCUGAGAAUCCAAAAUUCUCCxxxxxxxxxxAUCAAUACUAAACCCCCAUAAAUAGGAGAAGGCUUAGAAGAAAACCCCACAAACCCCAUUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[134.68797302 89.33690643]
[122.18394470 97.62238312]
[109.67990875 105.90785217]
[99.68881226 117.09615326]
[92.86523438 130.45425415]
[86.04166412 143.81234741]
[79.21808624 157.17045593]
[72.39450836 170.52854919]
[65.57093811 183.88664246]
[66.95230103 200.22750854]
[53.33866501 209.37086487]
[38.73456955 201.91081238]
[38.16345596 185.52162170]
[52.21283722 177.06307983]
[59.03641129 163.70497131]
[65.85998535 150.34687805]
[72.68356323 136.98876953]
[79.50714111 123.63067627]
[86.33071136 110.27257538]
[81.50980377 104.52724457]
[66.73773956 107.13227081]
[71.86798859 93.03657532]
[67.04708099 87.29124451]
[52.70702362 91.69154358]
[38.36696243 96.09184265]
[24.02690125 100.49214172]
[19.95952797 115.37368011]
[8.47699833 125.67683411]
[-6.75665426 128.11392212]
[-20.88042641 121.90725708]
[-29.38747597 109.03738403]
[-29.56323051 93.61102295]
[-21.35161018 80.55066681]
[-7.37291336 74.02383423]
[7.91231012 76.11321259]
[19.62660027 86.15208435]
[33.96666336 81.75178528]
[48.30672455 77.35147858]
[62.64678574 72.95117950]
[72.97982025 71.11131287]
[82.47672272 72.04530334]
[90.49518585 75.33805847]
[96.52534485 80.43878174]
[100.21643829 86.69706726]
[101.39443207 93.40381622]
[113.89846802 85.11834717]
[126.40250397 76.83287048]
[112.30331421 46.32921982]
[104.86010742 13.56480122]
[104.39652252 -20.02599335]
[110.93064880 -52.97307205]
[124.17440796 -83.83496094]
[143.54618835 -111.26187134]
[168.19642639 -134.05476379]
[159.78302002 -146.47306824]
[151.36961365 -158.89138794]
[142.95620728 -171.30970764]
[134.54278564 -183.72801208]
[126.12937927 -196.14633179]
[110.70969391 -200.57496643]
[104.69145203 -215.44642639]
[112.69132996 -229.35260010]
[128.57250977 -231.62585449]
[140.15231323 -220.52233887]
[138.54769897 -204.55973816]
[146.96110535 -192.14141846]
[155.37451172 -179.72311401]
[163.78791809 -167.30479431]
[172.20133972 -154.88648987]
[180.61474609 -142.46817017]
[188.28227234 -146.87248230]
[196.18086243 -150.84782410]
[204.28652954 -154.38212585]
[212.57467651 -157.46461487]
[221.02014160 -160.08592224]
[229.59729004 -162.23809814]
[238.28005981 -163.91459656]
[247.04211426 -165.11029053]
[255.85684204 -165.82154846]
[264.69747925 -166.04621887]
[273.53717041 -165.78356934]
[282.34912109 -165.03440857]
[291.10650635 -163.80099487]
[299.78280640 -162.08706665]
[308.35162354 -159.89779663]
[316.78695679 -157.23983765]
[325.06317139 -154.12123108]
[333.15515137 -150.55146790]
[341.03833008 -146.54133606]
[348.68875122 -142.10301208]
[356.08319092 -137.24996948]
[363.19918823 -131.99693298]
[370.01510620 -126.35984039]
[376.51028442 -120.35578918]
[382.66494751 -114.00301361]
[388.46041870 -107.32077789]
[393.87911987 -100.32937622]
[398.90454102 -93.05001831]
[403.52145386 -85.50481415]
[407.71578979 -77.71665192]
[411.47482300 -69.70917511]
[414.78713989 -61.50669861]
[417.64263916 -53.13411713]
[420.03268433 -44.61685181]
[421.94998169 -35.98075485]
[423.38867188 -27.25205040]
[424.34442139 -18.45723534]
[424.81427002 -9.62301445]
[424.79681396 -0.77620876]
[424.29208374 8.05631924]
[423.30160522 16.84775162]
[421.82836914 25.57139206]
[419.87680054 34.20075226]
[417.45288086 42.70962906]
[414.56390381 51.07218170]
[411.21862793 59.26301575]
[407.42724609 67.25725555]
[403.20123291 75.03062439]
[398.55337524 82.55950928]
[393.49783325 89.82105255]
[388.04989624 96.79319763]
[382.22613525 103.45475769]
[376.04418945 109.78550720]
[369.52285767 115.76621246]
[362.68188477 121.37870789]
[355.54208374 126.60593414]
[348.12506104 131.43202209]
[340.45339966 135.84228516]
[332.55038452 139.82334900]
[324.43994141 143.36309814]
[316.14672852 146.45077515]
[307.69592285 149.07701111]
[299.11318970 151.23379517]
[290.42459106 152.91456604]
[281.65646362 154.11422729]
[272.83544922 154.82911682]
[263.98834229 155.05703735]
[255.14201355 154.79731750]
[246.32328796 154.05068970]
[237.55895996 152.81944275]
[228.87565613 151.10728455]
[220.29972839 148.91940308]
[211.85722351 146.26243591]
[203.57377625 143.14443970]
[195.47453308 139.57485962]
[187.58412170 135.56452942]
[179.92646790 131.12561035]
[172.52485657 126.27156830]
[165.40174866 121.01714325]
[158.57879639 115.37826538]
[152.07670593 109.37204742]
[145.91525269 103.01673126]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 47]
[2 46]
[3 45]
[4 19]
[5 18]
[6 17]
[7 16]
[8 15]
[9 14]
[23 39]
[24 38]
[25 37]
[26 36]
[54 70]
[55 69]
[56 68]
[57 67]
[58 66]
[59 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
