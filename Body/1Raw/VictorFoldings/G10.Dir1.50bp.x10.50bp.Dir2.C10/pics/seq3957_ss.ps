%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUGCCAUCAUGACCCUUGGCCAUAAUAUGAUUUAUCUCCACACUAGCAGAGACCAACCGAxxxxxxxxxxAUACUAACAUCUCAGACGCUCAGGAAAUAGAAACCGUCUGAACUAUCCUGCCCGCCAUCAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[122.07831573 261.37756348]
[122.07831573 246.37754822]
[122.07831573 231.37754822]
[122.07831573 216.37754822]
[122.07831573 201.37754822]
[122.07831573 186.37754822]
[122.07831573 171.37754822]
[122.07831573 156.37754822]
[122.07831573 141.37754822]
[122.07831573 126.37754822]
[115.36459351 123.03451538]
[102.86073303 131.32025146]
[101.93714905 116.34843445]
[95.22341919 113.00540161]
[83.25315857 122.04492188]
[71.28290558 131.08444214]
[59.31264496 140.12396240]
[61.27967834 155.35636902]
[55.35216141 169.52536011]
[43.12457657 178.81953430]
[27.88607216 180.73880005]
[13.73573685 174.76690674]
[4.47993612 162.51023865]
[2.60843515 147.26580811]
[8.62465763 133.13424683]
[20.91027069 123.91691589]
[36.16050720 122.09320831]
[50.27312469 128.15370178]
[62.24338531 119.11418152]
[74.21364594 110.07466125]
[86.18389893 101.03514099]
[94.21089935 88.36362457]
[97.26929474 73.67872620]
[88.87356567 60.55815125]
[92.18441010 45.70914459]
[104.74461365 37.78596115]
[107.80300903 23.10106087]
[110.86140442 8.41616440]
[98.61755371 -12.76452255]
[114.55015564 -34.85011292]
[108.28075409 -48.47709274]
[102.01134491 -62.10407257]
[95.60237122 -75.66596985]
[89.05449677 -89.16135406]
[82.50662994 -102.65673828]
[73.10277557 -114.34294128]
[61.32063675 -123.62632751]
[49.53849792 -132.90971375]
[37.75636292 -142.19309998]
[23.52228355 -136.42364502]
[8.31270695 -138.56008911]
[-3.78106713 -148.02772522]
[-9.50587463 -162.27981567]
[-7.32177210 -177.48262024]
[2.18372917 -189.54666138]
[16.45369720 -195.22676086]
[31.64958000 -192.99502563]
[43.68376541 -183.45175171]
[49.31911469 -169.16404724]
[47.03974533 -153.97523499]
[58.82188416 -144.69184875]
[70.60401917 -135.40846252]
[82.38615417 -126.12508392]
[77.06662750 -140.15014648]
[75.48609161 -155.06665039]
[77.74833679 -169.89508057]
[83.70480347 -183.66172791]
[92.96436310 -195.46258545]
[104.91899109 -204.52278137]
[118.78367615 -210.24732971]
[133.64797974 -212.26036072]
[148.53584290 -210.42968750]
[162.46966553 -204.87550354]
[174.53443909 -195.96252441]
[183.93795776 -184.27604675]
[190.06272888 -170.58345032]
[192.50654602 -155.78385925]
[191.10897827 -140.84910583]
[185.96176147 -126.75988770]
[177.40289307 -114.44137573]
[165.99441528 -104.70245361]
[152.48544312 -98.18265533]
[137.76306152 -95.31008911]
[122.79402924 -96.27338409]
[108.56127930 -101.00929260]
[96.00201416 -109.20460510]
[102.54988098 -95.70922089]
[109.09775543 -82.21383667]
[114.88285828 -77.53999329]
[115.63832855 -68.37347412]
[121.90773010 -54.74649811]
[128.17713928 -41.11951828]
[141.86776733 -34.99034500]
[156.20782471 -39.39064407]
[170.54788208 -43.79094315]
[184.88793945 -48.19124603]
[199.22801208 -52.59154510]
[213.56806946 -56.99184418]
[227.90812683 -61.39214706]
[228.66111755 -76.53179169]
[234.54960632 -90.49965668]
[244.86256409 -101.60906982]
[258.35461426 -108.51849365]
[273.39654541 -110.39360046]
[288.17196655 -107.00795746]
[300.89669800 -98.77038574]
[310.03411865 -86.67562866]
[314.48086548 -72.18417358]
[313.69998169 -57.04594803]
[307.78576660 -43.08895111]
[297.45236206 -31.99856949]
[283.94760132 -25.11401558]
[268.90222168 -23.26663399]
[254.13305664 -26.67950439]
[241.42355347 -34.94050598]
[232.30842590 -47.05208588]
[217.96836853 -42.65178299]
[203.62831116 -38.25148392]
[189.28823853 -33.85118484]
[174.94818115 -29.45088387]
[160.60812378 -25.05058289]
[146.26806641 -20.65028381]
[146.57429504 -5.05037689]
[138.29847717 6.93909264]
[125.54630280 11.47455978]
[122.48790741 26.15945625]
[119.42951202 40.84435654]
[127.78231049 53.12305069]
[124.88985443 68.05918884]
[111.95419312 76.73712158]
[108.89579773 91.42201996]
[118.62010193 80.00108337]
[130.20176697 70.46875763]
[144.63018799 66.36746979]
[159.49421692 68.38259125]
[172.30987549 76.17737579]
[180.93554688 88.44921875]
[183.92973328 103.14733887]
[180.79209900 117.81550598]
[172.04696655 130.00250244]
[159.15576172 137.67170715]
[144.26969910 139.54129028]
[137.07832336 126.37754822]
[137.07832336 141.37754822]
[137.07832336 156.37754822]
[137.07832336 171.37754822]
[137.07832336 186.37754822]
[137.07832336 201.37754822]
[137.07832336 216.37754822]
[137.07832336 231.37754822]
[137.07832336 246.37754822]
[137.07832336 261.37756348]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[14 31]
[15 30]
[16 29]
[17 28]
[32 131]
[33 130]
[36 127]
[37 126]
[38 125]
[40 92]
[41 91]
[42 90]
[43 88]
[44 87]
[45 86]
[46 63]
[47 62]
[48 61]
[49 60]
[93 122]
[94 121]
[95 120]
[96 119]
[97 118]
[98 117]
[99 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
