%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUCCGCAUAAGCCUGCGUCAGAUUAAAACACUGAACUGACAAUUAACAGCCCAAUAUCUxxxxxxxxxxAUCACCGCCCCGACCUUAGCUCUCACCAUCGCUCUUCUACUAUGAACCCCCCUCCCCAUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[257.33770752 98.49143219]
[243.21290588 93.44268036]
[229.08810425 88.39392090]
[214.96330261 83.34516907]
[200.37437439 86.34722900]
[189.98364258 74.41645813]
[175.85884094 69.36770630]
[160.97555542 67.50009155]
[146.04125977 68.90238953]
[131.10694885 70.30469513]
[116.17263794 71.70700073]
[130.65025330 87.96259308]
[131.75332642 109.92890930]
[118.71181488 127.91911316]
[97.05587769 133.82194519]
[85.35625458 143.20910645]
[73.65663147 152.59626770]
[61.95700455 161.98342896]
[60.48352814 177.71888733]
[48.26183701 187.73915100]
[32.54284286 186.09939575]
[22.65234756 173.77244568]
[24.45820618 158.07167053]
[36.88903427 148.31205750]
[52.56984329 150.28381348]
[64.26946259 140.89665222]
[75.96909332 131.50949097]
[87.66871643 122.12232208]
[82.47329712 108.05080414]
[67.48059845 108.51884460]
[52.48790741 108.98688507]
[37.49520874 109.45492554]
[29.65194130 122.73976135]
[15.86118603 129.65486145]
[0.52352309 127.99364471]
[-11.46685600 118.28620911]
[-16.28386307 103.63014984]
[-12.39041042 88.70217133]
[-1.02888334 78.26573181]
[14.17529583 75.65106201]
[28.37052727 81.69249725]
[37.02716827 94.46223450]
[52.01986313 93.99419403]
[67.01255798 93.52614594]
[82.00525665 93.05810547]
[84.30803680 85.92037964]
[88.91360474 71.64491272]
[91.21638489 64.50718689]
[79.32400513 55.36545181]
[64.48080444 59.88862610]
[49.82477570 54.79153061]
[40.99145508 42.03409576]
[41.37743759 26.52182388]
[50.83430099 14.21949387]
[65.72569275 9.85760403]
[80.32556915 15.11339092]
[89.01997375 27.96589661]
[88.46573639 43.47307205]
[100.35811615 52.61480713]
[114.77033234 56.77269363]
[129.70463562 55.37038803]
[144.63894653 53.96808624]
[159.57325745 52.56578064]
[146.07719421 46.01932526]
[134.79721069 36.13184738]
[126.53915405 23.60968971]
[121.89294434 9.34740639]
[121.19049835 -5.63613653]
[124.48200226 -20.27054787]
[131.53231812 -33.51037979]
[141.83778381 -44.40980148]
[154.66218567 -52.19018936]
[169.08941650 -56.29572678]
[184.08877563 -56.43312073]
[198.58877563 -52.59255981]
[211.55357361 -45.04840469]
[222.05696106 -34.33959198]
[229.34863281 -21.23113441]
[232.90766907 -6.65947437]
[232.47981262 8.33442211]
[228.09565735 22.67942429]
[220.06835938 35.35075760]
[208.97140503 45.44321060]
[195.59753418 52.23579788]
[180.90759277 55.24290085]
[195.03239441 60.29165649]
[210.63163757 57.65071487]
[220.01206970 69.22035980]
[234.13687134 74.26911926]
[248.26167297 79.31787872]
[262.38647461 84.36663055]
[277.36727905 62.52091217]
[298.56219482 46.65962601]
[323.71542358 38.45797348]
[350.15399170 38.77662277]
[375.07180786 47.57138062]
[395.82760620 63.89900208]
[410.22476196 86.01832581]
[424.45153809 81.26451111]
[438.67831421 76.51069641]
[441.66781616 61.44555664]
[451.80142212 49.90409088]
[466.35327148 44.99089813]
[481.40896606 48.02760315]
[492.91860962 58.19734573]
[497.78616333 72.76451874]
[494.70230103 87.81062317]
[484.49652100 99.28833008]
[469.91415405 104.11019897]
[454.87780762 100.97917175]
[443.43212891 90.73748016]
[429.20535278 95.49129486]
[414.97857666 100.24510956]
[416.35791016 107.63698578]
[417.04580688 115.12576294]
[417.03619385 122.64688110]
[416.32901001 130.13551331]
[414.93014526 137.52708435]
[412.85159302 144.75785828]
[410.11105347 151.76545715]
[406.73202515 158.48941040]
[402.74353027 164.87170410]
[398.17977905 170.85722351]
[393.08001709 176.39428711]
[387.48809814 181.43505859]
[381.45208740 185.93595886]
[375.02395630 189.85809326]
[368.25903320 193.16749573]
[361.21557617 195.83552551]
[353.95422363 197.83901978]
[346.53756714 199.16056824]
[339.02944946 199.78862000]
[331.49462891 199.71762085]
[323.99807739 198.94801331]
[316.60437012 197.48629761]
[309.37731934 195.34492493]
[302.37924194 192.54219055]
[295.67056274 189.10212708]
[289.30914307 185.05424500]
[283.34988403 180.43330383]
[277.84429932 175.27903748]
[272.83993530 169.63574219]
[268.38006592 163.55197144]
[264.50320435 157.08009338]
[261.24295044 150.27578735]
[258.62750244 143.19767761]
[256.67959595 135.90669250]
[255.41615295 128.46568298]
[254.84822083 120.93872070]
[254.98081970 113.39071655]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 91]
[2 90]
[3 89]
[4 88]
[6 86]
[7 85]
[8 63]
[9 62]
[10 61]
[11 60]
[15 28]
[16 27]
[17 26]
[18 25]
[29 45]
[30 44]
[31 43]
[32 42]
[48 59]
[49 58]
[98 113]
[99 112]
[100 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
