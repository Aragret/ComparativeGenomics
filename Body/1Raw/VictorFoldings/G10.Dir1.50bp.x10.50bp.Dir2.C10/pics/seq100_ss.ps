%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUCAUCCUAUUAUUUAUCGCACCUACGUUCAAUAUUACAGGCGAACAUACUUACUAAAGxxxxxxxxxxAUCGCUCUUCUACUAUGAACCCCCCUCCCCAUACCCAACCCCCUGGUCAACCUCAACCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[202.74690247 205.31906128]
[191.65559387 195.22041321]
[180.56427002 185.12176514]
[169.47296143 175.02311707]
[158.38163757 164.92445374]
[147.29032898 154.82580566]
[136.19900513 144.72715759]
[125.10769653 134.62850952]
[114.01638031 124.52986145]
[102.92506409 114.43121338]
[107.06182861 128.84950256]
[108.06367493 143.81600952]
[105.88550568 158.65702820]
[100.62535858 172.70446777]
[92.52003479 185.32603455]
[81.93437958 195.95353699]
[69.34490967 204.10861206]
[55.31832123 209.42413330]
[40.48601913 211.66085815]
[25.51567841 210.71807861]
[11.08117294 206.63822937]
[-2.16773129 199.60499573]
[-13.63464260 189.93493652]
[-22.80338478 178.06336975]
[-29.26123047 164.52467346]
[-32.71748352 149.92829895]
[-33.01655960 134.93127441]
[-30.14500237 120.20870209]
[-24.23206902 106.42330170]
[-15.54392719 94.19562531]
[-4.47167110 84.07608032]
[8.48628902 76.52020264]
[22.74665642 71.86811829]
[37.66751099 70.32923126]
[52.57719040 71.97281647]
[66.80455017 76.72489166]
[79.70915222 84.37154388]
[90.71160126 94.57028198]
[86.70386505 80.11559296]
[82.69612122 65.66090393]
[78.68837738 51.20621490]
[74.68064117 36.75152588]
[59.59156036 35.50853348]
[45.86394501 29.18994522]
[35.14655685 18.57590675]
[28.71933556 4.96117592]
[27.34055138 -10.00279522]
[31.15739250 -24.50818062]
[39.69052887 -36.80918503]
[51.89420319 -45.43215561]
[47.88646317 -59.88684464]
[43.72857666 -74.29905701]
[39.42098999 -88.66724396]
[35.11340714 -103.03543091]
[30.80582237 -117.40361023]
[15.77516460 -116.39015961]
[0.89592421 -118.74726105]
[-13.08556366 -124.35669708]
[-25.46799278 -132.93708801]
[-35.63026428 -144.05805969]
[-43.06264877 -157.16177368]
[-47.39233398 -171.59097290]
[-48.40214539 -186.62187195]
[-46.04143524 -201.50053406]
[-40.42861557 -215.48066711]
[-31.84522057 -227.86102295]
[-20.72178841 -238.02059937]
[-7.61627007 -245.44979858]
[6.81397009 -249.77598572]
[21.84511566 -250.78216553]
[36.72321320 -248.41784668]
[50.70198059 -242.80163574]
[63.08024979 -234.21524048]
[73.23712921 -223.08935547]
[80.66316223 -209.98204041]
[84.98585510 -195.55075073]
[85.98838806 -180.51936340]
[83.62046814 -165.64183044]
[78.00086975 -151.66442871]
[69.41147614 -139.28823853]
[58.28312302 -129.13404846]
[45.17400742 -121.71119690]
[49.48159027 -107.34300995]
[53.78917313 -92.97483063]
[58.09675980 -78.60664368]
[63.06235123 -73.06691742]
[62.34115219 -63.89458466]
[66.34889221 -49.43989563]
[81.25051117 -48.33220291]
[94.89961243 -42.18149567]
[105.64089966 -31.71253014]
[112.16449738 -18.17502213]
[113.66567230 -3.19448376]
[109.94402313 11.42295647]
[101.43003082 23.90830421]
[89.13533020 32.74378586]
[93.14306641 47.19847488]
[97.15081024 61.65316391]
[101.15854645 76.10784912]
[105.16629028 90.56253815]
[113.02371216 103.33989716]
[124.11502838 113.43854523]
[135.20634460 123.53719330]
[146.29766846 133.63584900]
[157.38897705 143.73449707]
[168.48028564 153.83314514]
[179.57160950 163.93179321]
[190.66291809 174.03044128]
[201.75424194 184.12908936]
[212.84555054 194.22773743]
[231.79591370 182.29919434]
[253.52925110 176.97509766]
[275.81518555 178.79132080]
[296.36999512 187.55152893]
[313.09051514 202.34831238]
[324.26943970 221.65715027]
[328.76962280 243.49356079]
[326.13970947 265.61694336]
[340.04226685 271.24890137]
[353.94482422 276.88085938]
[370.10284424 274.07891846]
[380.39920044 286.84280396]
[374.24191284 302.04214478]
[357.96505737 304.04113770]
[348.31286621 290.78341675]
[334.41030884 285.15145874]
[320.50775146 279.51950073]
[315.68826294 287.26232910]
[309.89593506 294.30975342]
[303.22991943 300.54034424]
[295.80438232 305.84655762]
[287.74664307 310.13677979]
[279.19494629 313.33679199]
[270.29605103 315.39105225]
[261.20278931 316.26370239]
[252.07139587 315.93923950]
[243.05883789 314.42266846]
[234.32011414 311.73950195]
[226.00556946 307.93530273]
[218.25833130 303.07501221]
[211.21185303 297.24163818]
[204.98760986 290.53506470]
[199.69297791 283.07012939]
[195.41940308 274.97485352]
[192.24082947 266.38809204]
[190.21241760 257.45727539]
[189.36953735 248.33570862]
[189.72724915 239.18017578]
[191.27996826 230.14802551]
[194.00152588 221.39460754]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 110]
[2 109]
[3 108]
[4 107]
[5 106]
[6 105]
[7 104]
[8 103]
[9 102]
[10 101]
[38 100]
[39 99]
[40 98]
[41 97]
[42 96]
[50 88]
[51 87]
[52 85]
[53 84]
[54 83]
[55 82]
[118 127]
[119 126]
[120 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
