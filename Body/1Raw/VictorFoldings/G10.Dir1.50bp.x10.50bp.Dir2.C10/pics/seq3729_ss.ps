%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGCCUAGCCGUUUACUCAAUCCUCUGAUCAGGGUGAGCAUCAAACUCAAACUACGCCCUGAxxxxxxxxxxCAGCCCAUGACCCCUAACAGGGGCCCUCUCAGCCCUCCUAAUGACCUCCGGCCUAGCCAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[99.55755615 573.91198730]
[102.14855194 554.70422363]
[102.46060944 539.70751953]
[102.77266693 524.71075439]
[103.08472443 509.71398926]
[103.39678192 494.71722412]
[103.70883179 479.72048950]
[104.02088928 464.72372437]
[104.33294678 449.72695923]
[104.64500427 434.73022461]
[104.95706177 419.73345947]
[89.20405579 416.23992920]
[74.49575043 409.59176636]
[61.45665359 400.06896973]
[50.64089584 388.07348633]
[42.50866318 374.11248779]
[37.40662003 358.77685547]
[35.55314255 342.71609497]
[37.02895355 326.61096191]
[41.77363586 311.14450073]
[49.58807755 296.97308350]
[60.14283752 284.69863892]
[72.99203491 274.84301758]
[87.59218597 267.82577515]
[103.32518005 263.94641113]
[102.70120239 248.95939636]
[102.07722473 233.97238159]
[84.94327545 227.51286316]
[72.27709961 214.21948242]
[66.62162018 196.69764709]
[69.13973999 178.40783691]
[79.37557220 162.98222351]
[95.33617401 153.50332642]
[93.46856689 138.62004089]
[91.60095215 123.73676300]
[89.73333740 108.85348511]
[82.27842712 95.83717346]
[70.38604736 86.69544220]
[58.49366760 77.55370331]
[46.60128784 68.41197205]
[34.70890808 59.27023697]
[22.81652832 50.12850189]
[10.29056740 41.87621307]
[-2.80258751 34.55710983]
[-15.89574146 27.23800278]
[-28.98889542 19.91889763]
[-43.54261017 25.63933372]
[-58.35190964 20.61750984]
[-66.42429352 7.22457695]
[-63.94822693 -8.21573162]
[-52.09283829 -18.41297340]
[-36.45587540 -18.55232430]
[-24.42063522 -8.56798553]
[-21.66979027 6.82574272]
[-8.57663631 14.14484882]
[4.51651812 21.46395493]
[17.60967255 28.78306007]
[13.90918732 14.24667740]
[20.26007271 0.65748096]
[33.78531265 -5.82849073]
[48.35784531 -2.27302909]
[57.37616730 9.71320724]
[56.75489426 24.70033646]
[46.77546310 35.89904022]
[31.95826340 38.23612213]
[43.85064316 47.37785721]
[55.74302292 56.51959229]
[67.63539886 65.66132355]
[79.52777863 74.80306244]
[91.42015839 83.94479370]
[85.36639404 70.22065735]
[73.74791718 60.73324966]
[67.75077057 46.98427582]
[68.70127869 32.01442337]
[76.38922882 19.13438034]
[89.11437225 11.19266796]
[104.06244659 9.94565105]
[117.92757416 15.66911793]
[127.64339447 27.09728050]
[131.06117249 41.70272064]
[127.42503357 56.25533295]
[117.53865814 67.53704834]
[113.84229279 82.07448578]
[124.05577087 71.08882141]
[134.26925659 60.10315323]
[144.48272705 49.11748886]
[148.21263123 33.74223328]
[162.54522705 29.68938065]
[172.75871277 18.70371628]
[169.64299011 3.50266743]
[176.08790588 -10.61266518]
[189.61528015 -18.21464729]
[205.02352905 -16.38016319]
[216.38789368 -5.81460667]
[219.33851624 9.41934776]
[212.74085999 23.46393394]
[199.13182068 30.91872406]
[183.74438477 28.91719627]
[173.53089905 39.90286255]
[170.53153992 54.49234772]
[155.46839905 59.33096695]
[145.25491333 70.31663513]
[135.04144287 81.30229950]
[124.82795715 92.28796387]
[122.45188141 99.02114868]
[118.51593781 104.02461243]
[113.73957062 107.00743866]
[108.87250519 107.92787933]
[104.61661530 106.98587036]
[106.48423004 121.86914825]
[108.35184479 136.75242615]
[110.21945953 151.63571167]
[121.86344910 154.05044556]
[132.33580017 159.64358521]
[140.79052734 167.95091248]
[146.54811096 178.28945923]
[149.15017700 189.81362915]
[148.39587402 201.58441162]
[144.35743713 212.64582825]
[137.37333679 222.10261536]
[128.02001953 229.19264221]
[117.06423950 233.34840393]
[117.68821716 248.33541870]
[118.31219482 263.32244873]
[132.09651184 265.32034302]
[145.30918884 269.71585083]
[157.53674316 276.37005615]
[168.39680481 285.07330322]
[177.55001831 295.55197144]
[184.71064758 307.47695923]
[189.65550232 320.47406006]
[192.23094177 334.13568115]
[192.35758972 348.03363037]
[190.03276062 361.73254395]
[185.33059692 374.80355835]
[178.39962769 386.83767700]
[169.45809937 397.45858765]
[158.78709412 406.33444214]
[146.72171021 413.18823242]
[133.64056396 417.80639648]
[119.95381165 420.04553223]
[119.64175415 435.04226685]
[119.32970428 450.03903198]
[119.01764679 465.03576660]
[118.70558929 480.03253174]
[118.39353180 495.02929688]
[118.08147430 510.02603149]
[117.76941681 525.02276611]
[117.45736694 540.01953125]
[117.14530945 555.01629639]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 142]
[11 141]
[25 124]
[26 123]
[27 122]
[33 112]
[34 111]
[35 110]
[36 109]
[37 70]
[38 69]
[39 68]
[40 67]
[41 66]
[42 65]
[43 57]
[44 56]
[45 55]
[46 54]
[83 104]
[84 103]
[85 102]
[86 101]
[88 99]
[89 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
