%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCUCCCUCACCAUUGGCAGCCUAGCAUUAGCAGGAAUACCUUUCCUCACAGGUUUCUACxxxxxxxxxxCCUGACUAGAAAAGCUAUUACCUAAAACAAUUUCACAGCACCAAAUCUCCACCUCCAUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[101.92686462 463.82720947]
[101.92686462 448.82720947]
[101.92686462 433.82720947]
[101.92686462 418.82720947]
[101.92686462 403.82720947]
[101.92686462 388.82720947]
[101.92686462 373.82720947]
[101.92686462 358.82720947]
[101.92686462 343.82720947]
[101.92686462 328.82720947]
[86.10458374 325.66213989]
[71.26115417 319.32144165]
[58.02677536 310.07192993]
[46.96380615 298.30404663]
[38.54289246 284.51525879]
[33.12291718 269.28909302]
[30.93571472 253.27037048]
[32.07616043 237.13801575]
[36.49805832 221.57618713]
[44.01598740 207.24528503]
[54.31311035 194.75392151]
[66.95449066 184.63311768]
[81.40549469 177.31365967]
[97.05438232 173.10781860]
[96.11875153 158.13702393]
[95.18312073 143.16624451]
[94.24749756 128.19544983]
[81.62532806 124.05579376]
[71.64297485 114.31398773]
[66.74523163 100.54627228]
[68.47733307 85.36672974]
[54.57477570 79.73477173]
[40.67222214 74.10281372]
[21.64334488 85.49634552]
[-1.94649804 74.98159790]
[-16.93919373 74.51355743]
[-31.12654877 82.73857880]
[-45.20650101 74.33102417]
[-44.69480133 57.93986130]
[-30.11784363 50.42691803]
[-16.47115135 59.52086258]
[-1.47845590 59.98890686]
[2.52928424 45.53421783]
[-10.56387043 38.21511078]
[-23.65702438 30.89600563]
[-36.75017929 23.57690048]
[-49.84333420 16.25779343]
[-65.60990143 19.22341728]
[-77.66421509 8.63696575]
[-76.75924683 -7.38054323]
[-63.58919907 -16.54184532]
[-48.25701523 -11.81917572]
[-42.52422714 3.16463995]
[-29.43107414 10.48374557]
[-16.33791924 17.80285072]
[-3.24476457 25.12195587]
[9.84838963 32.44106293]
[25.14953041 30.95857620]
[38.11908340 37.02941132]
[45.57963943 48.00222015]
[46.30417633 60.20025635]
[60.20673370 65.83221436]
[74.10929108 71.46417236]
[86.96768951 63.74008560]
[88.52527618 48.82117462]
[90.08285522 33.90225983]
[91.64043427 18.98334885]
[93.19801331 4.06443739]
[94.75559998 -10.85447502]
[81.01311493 -17.21237183]
[70.08136749 -27.68976021]
[63.14615250 -41.15012741]
[60.95974731 -56.13339615]
[63.75932312 -71.01429749]
[71.24119568 -84.17864990]
[82.59378815 -94.19850159]
[96.58566284 -99.98695374]
[111.69908142 -100.91613007]
[126.29464722 -96.88524628]
[138.78915405 -88.33152771]
[147.82728577 -76.18282318]
[152.42864990 -61.75694275]
[152.09413147 -46.61868286]
[146.86001587 -32.41014099]
[137.29405212 -20.67254639]
[124.43389130 -12.67910767]
[109.67450714 -9.29689407]
[108.11692810 5.62201786]
[106.55934906 20.54092979]
[105.00177002 35.45984268]
[103.44418335 50.37875366]
[101.88660431 65.29766846]
[116.33914185 72.75952911]
[124.61414337 85.09300232]
[139.02635193 80.93511963]
[153.43856812 76.77722931]
[167.61512756 71.87567902]
[181.51768494 66.24372101]
[195.42024231 60.61176682]
[198.17668152 45.43264771]
[208.71868896 34.16900253]
[223.68234253 30.41501999]
[238.29281616 35.36857986]
[247.88793945 47.44902039]
[249.40596008 62.80151749]
[242.36247253 76.52714539]
[229.00503540 84.24610138]
[213.59594727 83.49530792]
[201.05220032 74.51432037]
[187.14964294 80.14627838]
[173.24708557 85.77823639]
[185.62483215 94.25122833]
[186.93031311 109.19431305]
[176.20935059 119.68529510]
[161.29808044 118.05612946]
[153.09544373 105.49758911]
[157.59646606 91.18944550]
[143.18424988 95.34733582]
[128.77203369 99.50521851]
[123.52436066 116.57344055]
[109.21828461 127.25981903]
[110.15391541 142.23060608]
[111.08954620 157.20140076]
[112.02516937 172.17219543]
[125.84806824 173.88290405]
[139.14932251 178.00259399]
[151.51268005 184.40095520]
[162.55145264 192.87638855]
[171.92066956 203.16238403]
[179.32783508 214.93582153]
[184.54200745 227.82723999]
[187.40110779 241.43232727]
[187.81684875 255.32463074]
[185.77751160 269.06893921]
[181.34829712 282.23495483]
[174.66918945 294.41067505]
[165.95054626 305.21527100]
[155.46649170 314.31121826]
[143.54631042 321.41452026]
[130.56405640 326.30383301]
[116.92686462 328.82720947]
[116.92686462 343.82720947]
[116.92686462 358.82720947]
[116.92686462 373.82720947]
[116.92686462 388.82720947]
[116.92686462 403.82720947]
[116.92686462 418.82720947]
[116.92686462 433.82720947]
[116.92686462 448.82720947]
[116.92686462 463.82720947]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[24 124]
[25 123]
[26 122]
[27 121]
[31 63]
[32 62]
[33 61]
[35 42]
[36 41]
[43 57]
[44 56]
[45 55]
[46 54]
[47 53]
[64 92]
[65 91]
[66 90]
[67 89]
[68 88]
[69 87]
[94 119]
[95 118]
[96 117]
[97 111]
[98 110]
[99 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
