%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAAACCCCACUCUGCAUCAACUGAACGCAAAUCAGCCACUUUAAUUAAGCUAAGCCCUUAxxxxxxxxxxACCGCUAACAAUCAAUACUAAACCCCCAUAAAUAGGAGAAGGCUUAGAAGAAAACCCCACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[97.56150818 382.08483887]
[97.56150818 367.08483887]
[97.56150818 352.08483887]
[97.56150818 337.08483887]
[97.56150818 322.08483887]
[97.56150818 307.08483887]
[97.56150818 292.08483887]
[97.56150818 277.08483887]
[97.56150818 262.08483887]
[97.56150818 247.08483887]
[82.58544159 242.83734131]
[69.39347076 234.54595947]
[59.05245972 222.87159729]
[52.40140915 208.74917603]
[49.98338699 193.31269836]
[52.00119019 177.80419922]
[58.30037308 163.47386169]
[68.38103485 151.47917175]
[81.43746185 142.79145813]
[96.42255402 138.11726379]
[96.11050415 123.12050629]
[89.19452667 136.43099976]
[86.19305420 151.12763977]
[75.27076721 161.40887451]
[60.41965103 163.51702881]
[47.06761169 156.68161011]
[40.09466553 143.40086365]
[42.04934692 128.52877808]
[52.21723938 117.50090027]
[66.88022614 114.34763336]
[80.11806488 107.29357147]
[65.11887360 107.13753510]
[50.11968613 106.98149872]
[35.12049484 106.82546234]
[25.08284950 118.81627655]
[9.67706585 121.49878693]
[-3.82271433 113.60638428]
[-9.04230690 98.86563110]
[-3.51718092 84.23665619]
[10.14386845 76.62680817]
[25.49051285 79.62923431]
[35.27653503 91.82627869]
[50.27572250 91.98231506]
[65.27490997 92.13835144]
[80.27410126 92.29438782]
[82.79847717 85.23198700]
[73.09039307 73.79724884]
[87.84723663 71.10717773]
[90.37161255 64.04477692]
[78.67198944 54.65761948]
[66.97236633 45.27045441]
[50.93235397 45.58297729]
[40.79852676 33.14572906]
[44.34468842 17.49950600]
[58.85052490 10.64675045]
[73.18840027 17.84430885]
[76.35952759 33.57083130]
[88.05915070 42.95799255]
[99.75877380 52.34515762]
[114.71902466 51.25384521]
[124.93250275 40.26818085]
[135.14598083 29.28251648]
[145.35946655 18.29685211]
[155.57293701 7.31118679]
[165.78642273 -3.67447805]
[175.99990845 -14.66014290]
[166.21578979 -26.05097389]
[157.76858521 -38.46567535]
[150.76452637 -51.74811554]
[145.29170227 -65.73125458]
[141.41893005 -80.23924255]
[139.19493103 -95.08962250]
[138.64765930 -110.09564209]
[139.78399658 -125.06857300]
[142.58966064 -139.82012939]
[147.02937317 -154.16477966]
[153.04727173 -167.92213440]
[160.56770325 -180.91917419]
[169.49607849 -192.99244690]
[179.72012329 -203.99012756]
[191.11125183 -213.77391052]
[203.52619934 -222.22074890]
[216.80885315 -229.22439575]
[230.79216003 -234.69680786]
[245.30026245 -238.56913757]
[260.15069580 -240.79269409]
[275.15673828 -241.33952332]
[290.12963867 -240.20272827]
[304.88110352 -237.39662170]
[319.22561646 -232.95649719]
[332.98278809 -226.93817139]
[345.97961426 -219.41735840]
[358.05264282 -210.48861694]
[369.05001831 -200.26425171]
[378.83343506 -188.87283325]
[387.27990723 -176.45762634]
[394.28317261 -163.17477417]
[399.75515747 -149.19129944]
[403.62704468 -134.68307495]
[405.85015869 -119.83256531]
[406.39654541 -104.82651520]
[405.25930786 -89.85365295]
[402.45275879 -75.10227203]
[398.01220703 -60.75788116]
[391.99346924 -47.00088882]
[384.47225952 -34.00429535]
[375.54315186 -21.93154907]
[365.31845093 -10.93447876]
[353.92675781 -1.15138245]
[341.51129150 7.29470682]
[328.22821045 14.29757023]
[314.24459839 19.76914024]
[299.73626709 23.64060402]
[284.88568115 25.86327553]
[269.87960815 26.40920067]
[254.90678406 25.27151680]
[240.15548706 22.46452904]
[225.81123352 18.02353859]
[212.05441284 12.00439548]
[199.05804443 4.48279762]
[186.98556519 -4.44666290]
[176.77207947 6.53900194]
[166.55860901 17.52466583]
[156.34512329 28.51033211]
[146.13165283 39.49599457]
[135.91816711 50.48165894]
[125.70468903 61.46732712]
[135.76258850 102.41974640]
[111.10725403 122.80845642]
[111.41931152 137.80520630]
[125.45679474 141.38438416]
[138.07292175 148.47966003]
[148.40536499 158.59884644]
[155.74983215 171.04331970]
[159.60797119 184.95626831]
[159.72120667 199.38162231]
[156.08808899 213.32989502]
[148.96394348 225.84585571]
[138.84292603 236.07415771]
[126.42375946 243.31762695]
[112.56150818 247.08483887]
[112.56150818 262.08483887]
[112.56150818 277.08483887]
[112.56150818 292.08483887]
[112.56150818 307.08483887]
[112.56150818 322.08483887]
[112.56150818 337.08483887]
[112.56150818 352.08483887]
[112.56150818 367.08483887]
[112.56150818 382.08483887]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[20 130]
[21 129]
[31 45]
[32 44]
[33 43]
[34 42]
[49 59]
[50 58]
[51 57]
[60 127]
[61 126]
[62 125]
[63 124]
[64 123]
[65 122]
[66 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
