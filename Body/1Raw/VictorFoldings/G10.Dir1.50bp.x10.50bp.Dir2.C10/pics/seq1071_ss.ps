%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUAGCCACACCCCCACGGGAAACAGCAGUGAUUAACCUUUAGCAAUAAACGAAAGUUUAxxxxxxxxxxCCAACUUACACUUAGGAGAUUUCAACUUAACUUGACCGCUCUGAGCUAAACCUAGCCCCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 275.23507690]
[92.50000000 260.23507690]
[92.50000000 245.23507690]
[92.50000000 230.23507690]
[92.50000000 215.23507690]
[92.50000000 200.23507690]
[92.50000000 185.23507690]
[92.50000000 170.23507690]
[92.50000000 155.23507690]
[92.50000000 140.23507690]
[86.85575104 138.76002502]
[81.47855377 136.49749756]
[76.47765350 133.49343872]
[71.95466614 129.80889893]
[68.00147247 125.51873016]
[54.75888443 132.56385803]
[54.36709976 149.06311035]
[45.77359390 163.04335022]
[31.39416504 170.75451660]
[15.18131351 170.18399048]
[1.53795803 161.58105469]
[-11.55519676 168.90016174]
[-24.64835167 176.21926880]
[-32.57474899 190.57560730]
[-48.97383881 190.61874390]
[-56.97564316 176.30430603]
[-48.34859467 162.35775757]
[-31.96745682 163.12611389]
[-18.87430191 155.80700684]
[-5.78114748 148.48791504]
[-6.48780346 134.81457520]
[-1.19608760 122.11508942]
[9.10953522 112.90087128]
[22.44707489 109.02079773]
[36.21805573 111.29040527]
[47.71375275 119.32128143]
[60.95633698 112.27614594]
[59.44555664 105.51802063]
[59.09576035 98.60193634]
[44.45225906 95.35111237]
[30.20144272 102.71954346]
[15.61472893 96.04066467]
[11.88179874 80.43795013]
[21.86623573 67.88045502]
[37.90883255 68.00122833]
[47.70308685 80.70761108]
[62.34658813 83.95843506]
[84.63297272 62.06629944]
[115.87245178 62.27498627]
[124.12474060 49.74902344]
[132.37702942 37.22306442]
[140.62931824 24.69710159]
[148.88160706 12.17113876]
[157.13389587 -0.35482314]
[149.82598877 -17.83575058]
[157.02990723 -36.82881927]
[176.54678345 -46.26982880]
[176.54678345 -61.26982880]
[176.54678345 -76.26982880]
[165.65223694 -87.40295410]
[165.86592102 -102.61508942]
[176.54678345 -112.93276978]
[168.80949402 -126.73294067]
[176.54678345 -139.46022034]
[176.54678345 -154.46022034]
[176.54678345 -169.46022034]
[176.54678345 -184.46022034]
[176.54678345 -199.46022034]
[162.48960876 -205.24501038]
[151.71972656 -215.97247314]
[145.87950134 -230.00671387]
[145.85949707 -245.20764160]
[151.66279602 -259.25720215]
[162.40440369 -270.01296997]
[176.44631958 -275.83471680]
[191.64726257 -275.83471680]
[205.68917847 -270.01296997]
[216.43078613 -259.25720215]
[222.23406982 -245.20764160]
[222.21408081 -230.00671387]
[216.37385559 -215.97247314]
[205.60397339 -205.24501038]
[191.54678345 -199.46022034]
[191.54678345 -184.46022034]
[191.54678345 -169.46022034]
[191.54678345 -154.46022034]
[191.54678345 -139.46022034]
[199.28408813 -126.73294067]
[191.54678345 -112.93276978]
[202.22766113 -102.61508942]
[202.44134521 -87.40295410]
[191.54678345 -76.26982880]
[191.54678345 -61.26982880]
[191.54678345 -46.26982880]
[203.14813232 -36.76147079]
[217.85609436 -39.70695496]
[232.56405640 -42.65243530]
[247.27201843 -45.59791946]
[253.82238770 -59.54061508]
[267.17062378 -66.86714172]
[282.09692383 -64.95154572]
[292.90374756 -54.73633575]
[307.61172485 -57.68181610]
[322.31967163 -60.62730026]
[337.02761841 -63.57278061]
[345.58126831 -76.86229706]
[361.04415894 -80.12937927]
[374.24249268 -71.43572998]
[377.34591675 -55.93913651]
[368.51321411 -42.83345413]
[352.98468018 -39.89405060]
[339.97311401 -48.86482239]
[325.26516724 -45.91933823]
[310.55718994 -42.97385788]
[295.84924316 -40.02837372]
[289.80953979 -26.43940163]
[276.77200317 -18.92364311]
[261.63183594 -20.54495239]
[250.21749878 -30.88995743]
[235.50953674 -27.94447517]
[220.80157471 -24.99899292]
[206.09361267 -22.05351067]
[201.64012146 -2.78215289]
[186.93873596 8.50405598]
[169.65986633 7.89746618]
[161.40756226 20.42342758]
[153.15527344 32.94939041]
[144.90298462 45.47535324]
[136.65069580 58.00131226]
[128.39840698 70.52727509]
[133.66751099 76.72747803]
[137.60594177 83.84748077]
[140.05809021 91.60588074]
[140.92700195 99.69605255]
[140.17834473 107.79822540]
[137.84170532 115.59219360]
[134.00944519 122.76991272]
[128.83302307 129.04768372]
[122.51702881 134.17739868]
[115.31108856 137.95631409]
[107.50000000 140.23507690]
[107.50000000 155.23507690]
[107.50000000 170.23507690]
[107.50000000 185.23507690]
[107.50000000 200.23507690]
[107.50000000 215.23507690]
[107.50000000 230.23507690]
[107.50000000 245.23507690]
[107.50000000 260.23507690]
[107.50000000 275.23507690]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[15 37]
[16 36]
[21 30]
[22 29]
[23 28]
[39 47]
[40 46]
[49 130]
[50 129]
[51 128]
[52 127]
[53 126]
[54 125]
[57 94]
[58 93]
[59 92]
[62 89]
[64 87]
[65 86]
[66 85]
[67 84]
[68 83]
[95 122]
[96 121]
[97 120]
[98 119]
[102 115]
[103 114]
[104 113]
[105 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
