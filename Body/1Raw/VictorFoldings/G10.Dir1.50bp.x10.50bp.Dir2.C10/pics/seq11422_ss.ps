%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUAACCUCCCCCAAAAUUCAGAAUAAUAACACACCCGACCACACCGCUAACAAUCAAUACxxxxxxxxxxCACUCCACCUCCUAUUCUUGCACGAAACGGGAUCAAACAACCCCCUAGGAAUCACCUCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-243.52456665 341.83966064]
[-261.67950439 335.19659424]
[-279.16467285 326.95144653]
[-286.61956787 339.96774292]
[-294.07449341 352.98406982]
[-301.52938843 366.00036621]
[-308.98431396 379.01669312]
[-316.43920898 392.03298950]
[-323.89413452 405.04931641]
[-331.34902954 418.06561279]
[-330.75112915 434.45385742]
[-344.78665161 442.93536377]
[-359.01708984 434.78509521]
[-358.80337524 418.38732910]
[-344.36535645 410.61071777]
[-336.91043091 397.59439087]
[-329.45553589 384.57809448]
[-322.00061035 371.56176758]
[-314.54571533 358.54547119]
[-307.09078979 345.52914429]
[-299.63589478 332.51284790]
[-292.18096924 319.49655151]
[-302.70666504 312.53778076]
[-312.80654907 304.97409058]
[-322.44589233 296.83142090]
[-331.59155273 288.13778687]
[-340.21209717 278.92303467]
[-348.27786255 269.21884155]
[-355.76116943 259.05853271]
[-362.63619995 248.47706604]
[-368.87939453 237.51077271]
[-374.46923828 226.19735718]
[-379.38650513 214.57569885]
[-383.61428833 202.68572998]
[-387.13803101 190.56832886]
[-389.94561768 178.26515198]
[-392.02740479 165.81845093]
[-393.37619019 153.27104187]
[-393.98733521 140.66604614]
[-393.85873413 128.04676819]
[-392.99081421 115.45661926]
[-391.38653564 102.93885803]
[-389.05142212 90.53651428]
[-385.99346924 78.29222107]
[-382.22317505 66.24806976]
[-377.75347900 54.44547272]
[-372.59973145 42.92499542]
[-366.77969360 31.72624397]
[-360.31326294 20.88772011]
[-353.22274780 10.44668770]
[-345.53244019 0.43904150]
[-337.26879883 -9.10081005]
[-328.46020508 -18.14006615]
[-319.13693237 -26.64764786]
[-309.33102417 -34.59430313]
[-299.07617188 -41.95270157]
[-288.40765381 -48.69754028]
[-277.36206055 -54.80562973]
[-265.97738647 -60.25595474]
[-254.29280090 -65.02977753]
[-242.34840393 -69.11066437]
[-230.18528748 -72.48458862]
[-217.84523010 -75.13993073]
[-205.37065125 -77.06755829]
[-192.80444336 -78.26081848]
[-180.18978882 -78.71561432]
[-167.57005310 -78.43035889]
[-154.98860168 -77.40602112]
[-142.48869324 -75.64611053]
[-130.11331177 -73.15666199]
[-117.90496063 -69.94622040]
[-105.90563965 -66.02580261]
[-94.15658569 -61.40888596]
[-82.69818878 -56.11131287]
[-71.56983948 -50.15129089]
[-60.80980301 -43.54928970]
[-50.45507050 -36.32799149]
[-40.54123688 -28.51221085]
[-31.10239410 -20.12880135]
[-22.17099190 -11.20657063]
[-13.77773952 -1.77617633]
[-5.95149851 8.12997437]
[1.28081942 18.47783661]
[7.89434385 29.23185349]
[13.86633015 40.35506058]
[19.17623901 51.80923462]
[23.80580711 63.55500793]
[27.73910904 75.55200958]
[30.96261024 87.75901031]
[33.46521759 100.13404846]
[48.32826614 98.11170959]
[63.19131088 96.08937836]
[78.05435944 94.06704712]
[92.91740417 92.04470825]
[107.09396362 87.14315796]
[120.03202057 79.55325317]
[132.97007751 71.96334076]
[136.71151733 56.60830688]
[150.25799561 48.46775436]
[165.57261658 52.37133408]
[173.56948853 66.00312042]
[169.50421143 81.27561188]
[155.78865051 89.12791443]
[140.55998230 84.90139771]
[127.62192535 92.49130249]
[114.68387604 100.08121490]
[116.23303223 107.41947937]
[119.33135223 122.09600067]
[120.88051605 129.43426514]
[135.78242493 131.14695740]
[150.68432617 132.85964966]
[160.37248230 120.85368347]
[175.02078247 116.01313782]
[189.95500183 119.88260651]
[200.40968323 131.22735596]
[203.04876709 146.42730713]
[197.03015137 160.63223267]
[184.27433777 169.30937195]
[168.85166931 169.68989563]
[155.68345642 161.65237427]
[148.97163391 147.76155090]
[134.06973267 146.04885864]
[119.16782379 144.33616638]
[102.14742279 134.98992920]
[93.85828400 120.92668915]
[94.93974304 106.90775299]
[80.07669067 108.93009186]
[65.21364594 110.95242310]
[50.35060120 112.97476196]
[35.48755264 114.99709320]
[36.55458832 134.31054688]
[35.88429642 153.64135742]
[33.48217392 172.83355713]
[29.36769104 191.73229980]
[23.57412720 210.18513489]
[16.14830971 228.04321289]
[7.15023279 245.16249084]
[-3.34742880 261.40487671]
[-15.25990486 276.63937378]
[-28.49101448 290.74310303]
[-42.93394470 303.60238647]
[-58.47210693 315.11349487]
[-74.98008728 325.18365479]
[-92.32465363 333.73165894]
[-110.36582184 340.68865967]
[-128.95800781 345.99856567]
[-147.95118713 349.61865234]
[-167.19209290 351.51980591]
[-186.52548218 351.68673706]
[-205.79536438 350.11822510]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 22]
[4 21]
[5 20]
[6 19]
[7 18]
[8 17]
[9 16]
[10 15]
[90 130]
[91 129]
[92 128]
[93 127]
[94 126]
[95 106]
[96 105]
[97 104]
[109 123]
[110 122]
[111 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
