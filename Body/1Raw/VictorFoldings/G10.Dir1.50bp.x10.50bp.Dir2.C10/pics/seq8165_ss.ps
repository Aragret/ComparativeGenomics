%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAAAUUAUAACAAACCCUGAGAACCAAAAUGAACGAAAAUCUGUUCGCUUCAUUCAUUGCCCCCAxxxxxxxxxxCCCUGACAAAACACAUAGCCUACCCCUUCCUUGUACUAUCCCUAUGAGGCAUAAUUAUAACAAGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[174.62940979 116.12751007]
[171.68278503 101.23452759]
[156.74057007 102.54996490]
[141.79837036 103.86540222]
[126.85615540 105.18083191]
[111.91394806 106.49626923]
[98.66363525 113.52685547]
[89.19731140 125.16252899]
[79.73099518 136.79818726]
[70.26467133 148.43386841]
[77.51827240 161.79252625]
[79.10262299 176.91065979]
[74.77610779 191.48289490]
[65.19850159 203.28703308]
[51.83031464 210.52305603]
[36.71009827 212.08750916]
[22.14357758 207.74183655]
[10.35203934 198.14871216]
[3.13360953 184.77101135]
[1.58904481 169.64875793]
[5.95388031 155.08796692]
[15.56251049 143.30905151]
[28.94968796 136.10823059]
[44.07396698 134.58355713]
[58.62900543 138.96754456]
[68.09532166 127.33187866]
[77.56164551 115.69620514]
[87.02796173 104.06053925]
[85.43047333 96.73264313]
[74.33573914 106.82753754]
[60.04590988 102.26675415]
[56.85066223 87.61102295]
[67.94520569 77.51592255]
[82.23549652 82.07685852]
[80.63800812 74.74896240]
[67.18761444 68.10916138]
[53.73721695 61.46936417]
[40.15983200 55.09326935]
[26.46062088 48.98331070]
[12.76141071 42.87334824]
[-0.93780023 36.76338577]
[-14.63701057 30.65342522]
[-28.33622169 24.54346275]
[-42.09439087 18.56744766]
[-55.91020966 12.72594452]
[-69.72602844 6.88444233]
[-83.54184723 1.04293966]
[-98.09091187 7.21547842]
[-112.71178436 1.21500421]
[-118.73015594 -13.39850807]
[-112.57543945 -27.95512009]
[-97.89910889 -33.81865311]
[-83.40838623 -27.51037788]
[-77.70034790 -12.77287865]
[-63.88452530 -6.93137646]
[-50.06870651 -1.08987415]
[-36.25288773 4.75162840]
[-28.82988930 4.45850420]
[-22.22625923 10.84425259]
[-8.52704906 16.95421410]
[5.17216110 23.06417465]
[18.87137222 29.17413712]
[32.57058334 35.28409958]
[46.26979446 41.39405823]
[51.01393890 40.53158951]
[56.34564209 42.67596436]
[60.37701797 48.01897049]
[73.82740784 54.65877151]
[87.27780151 61.29856873]
[110.59851074 91.55406189]
[125.54072571 90.23862457]
[140.48292542 88.92318726]
[155.42514038 87.60775757]
[170.36735535 86.29232025]
[170.64237976 71.44667053]
[172.47662354 56.71292877]
[175.84960938 42.25440216]
[180.72378540 28.23131752]
[187.04498291 14.79906654]
[194.74299622 2.10647249]
[203.73237610 -9.70585060]
[213.91336060 -20.50706100]
[225.17297363 -30.17753792]
[237.38630676 -38.61020279]
[250.41790771 -45.71170807]
[264.12322998 -51.40346909]
[278.35034180 -55.62254333]
[292.94146729 -58.32230377]
[307.73483276 -59.47297287]
[322.56646729 -59.06195450]
[337.27197266 -57.09395218]
[351.68835449 -53.59093094]
[365.65588379 -48.59187317]
[379.01974487 -42.15232849]
[391.63186646 -34.34381866]
[403.35256958 -25.25302505]
[414.05203247 -14.98083401]
[423.61169434 -3.64121890]
[431.92578125 8.64002705]
[438.90222168 21.72668839]
[444.46383667 35.47362900]
[448.54913330 49.72842026]
[451.11291504 64.33300781]
[466.07794189 63.30936813]
[481.04299927 62.28573227]
[496.00802612 61.26209641]
[498.46710205 46.39436340]
[504.28921509 32.49472809]
[513.16033936 20.31278610]
[524.60211182 10.50549126]
[537.99743652 3.60174060]
[552.62396240 -0.02615642]
[567.69287109 -0.18255155]
[582.39154053 3.14098930]
[595.92724609 9.76523209]
[607.57012939 19.33293915]
[616.69219971 31.32813644]
[622.80151367 45.10393906]
[625.56866455 59.91743088]
[624.84436035 74.96974945]
[620.66778564 89.44912720]
[613.26403809 102.57472229]
[603.03240967 113.63867950]
[590.52478027 122.04434204]
[576.41552734 127.33839417]
[561.46569824 129.23533630]
[546.48138428 127.63287354]
[532.27075195 122.61742401]
[519.60015869 114.45945740]
[509.15289307 103.59893799]
[501.49234009 90.62153625]
[497.03164673 76.22712708]
[482.06661987 77.25076294]
[467.10159302 78.27439880]
[452.13656616 79.29803467]
[451.55505371 94.44785309]
[449.34835815 109.44813538]
[445.54180908 124.12505341]
[440.17941284 138.30847168]
[433.32315063 151.83398438]
[425.05230713 164.54478455]
[415.46258545 176.29347229]
[404.66497803 186.94381714]
[392.78451538 196.37228394]
[379.95877075 204.46946716]
[366.33624268 211.14141846]
[352.07476807 216.31065369]
[337.33953857 219.91712952]
[322.30123901 221.91889954]
[307.13412476 222.29258728]
[292.01394653 221.03372192]
[277.11596680 218.15669250]
[262.61282349 213.69470215]
[248.67263794 207.69929504]
[235.45700073 200.23979187]
[223.11915588 191.40248108]
[211.80215454 181.28965759]
[201.63725281 170.01837158]
[192.74238586 157.71911621]
[185.22073364 144.53433228]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 74]
[3 73]
[4 72]
[5 71]
[6 70]
[7 28]
[8 27]
[9 26]
[10 25]
[35 69]
[36 68]
[37 67]
[38 64]
[39 63]
[40 62]
[41 61]
[42 60]
[43 59]
[44 57]
[45 56]
[46 55]
[47 54]
[103 135]
[104 134]
[105 133]
[106 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
