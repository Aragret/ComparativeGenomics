%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUCACUGUCAACCCAACACAGGCAUGCUCAUAAGGAAAGGUUAAAAAAAGUAAAAGGAAxxxxxxxxxxUUUGUAGCCACAGGCUUCCACGGACUUCACGUCAUUAUUGGCUCAACUUUCCUCACUAUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[77.25549316 277.70953369]
[77.25549316 262.70953369]
[77.25549316 247.70953369]
[77.25549316 232.70953369]
[77.25549316 217.70953369]
[77.25549316 202.70953369]
[77.25549316 187.70953369]
[77.25549316 172.70953369]
[77.25549316 157.70953369]
[77.25549316 142.70953369]
[65.26866150 133.69201660]
[50.85644913 137.84989929]
[36.44423294 142.00778198]
[34.83067703 157.41535950]
[21.97724152 170.37648010]
[1.09767377 172.98637390]
[-11.51345444 181.10791016]
[-24.12458229 189.22946167]
[-36.73571014 197.35099792]
[-36.61829376 212.77790833]
[-44.87924576 225.80712891]
[-58.88252258 232.28105164]
[-74.15973663 230.13388062]
[-85.83598328 220.05078125]
[-90.18540955 205.24922180]
[-85.82012939 190.45234680]
[-74.13309479 180.38174438]
[-58.85359192 178.25094604]
[-44.85725403 184.73986816]
[-32.24612427 176.61833191]
[-19.63499641 168.49678040]
[-7.02386856 160.37524414]
[-8.57302952 153.03698730]
[-22.83244324 148.38197327]
[-11.67135143 138.36045837]
[-13.22051144 131.02218628]
[-28.05545044 136.52084351]
[-39.42566299 126.89964294]
[-54.24341965 124.56854248]
[-69.34445953 130.96313477]
[-82.26804352 120.86793518]
[-79.71949768 104.66802979]
[-64.32055664 99.02848053]
[-51.91231537 109.75078583]
[-37.09455872 112.08188629]
[-23.31948471 106.41649628]
[-10.88940811 116.20443726]
[16.59136581 111.97727203]
[32.28634262 127.59556580]
[46.69855881 123.43768311]
[61.11077499 119.27979279]
[57.41914749 103.75382996]
[59.60449600 88.19182587]
[67.19046783 74.70880127]
[78.97911835 65.07171631]
[93.23680878 60.46843338]
[107.94792938 61.36309433]
[121.09960175 67.45537567]
[131.53941345 56.68457031]
[141.97921753 45.91376114]
[152.41903687 35.14295197]
[162.85885620 24.37214470]
[148.34060669 28.14313889]
[133.34573364 27.75095940]
[119.04444885 23.22620964]
[106.55284119 14.92200756]
[96.84576416 3.48641920]
[90.68077087 -10.18811226]
[88.53897095 -25.03441620]
[90.58752441 -39.89387131]
[96.66655731 -53.60683441]
[106.30165100 -65.10313416]
[118.74087524 -73.48559570]
[133.01347351 -78.10003662]
[148.00558472 -78.58634186]
[162.54722595 -74.90656281]
[175.50354004 -67.34786987]
[185.86341858 -56.50015259]
[192.81835938 -43.20997620]
[195.82560730 -28.51451874]
[194.65045166 -13.56062126]
[189.38461304 0.48469701]
[180.43714905 12.52725697]
[194.33969116 6.89530039]
[201.17222595 0.73344612]
[208.59053040 1.29411185]
[222.60723877 -4.04740095]
[236.62396240 -9.38891315]
[250.64067078 -14.73042583]
[264.65737915 -20.07193756]
[267.71224976 -41.48761368]
[285.03662109 -56.78102112]
[309.61874390 -57.22460938]
[320.91775513 -67.09033203]
[328.87210083 -82.06246948]
[345.46109009 -78.56370544]
[346.69134521 -61.65445328]
[330.78347778 -55.79132843]
[319.48446655 -45.92560577]
[326.80358887 -32.83245087]
[341.12619019 -37.28926468]
[355.44879150 -41.74608231]
[361.31994629 -56.23964310]
[375.15795898 -63.52273560]
[390.42892456 -60.15649796]
[399.92236328 -47.73037338]
[399.15576172 -32.11159134]
[388.49108887 -20.67486572]
[372.96386719 -18.82026863]
[359.90560913 -27.42348289]
[345.58300781 -22.96666718]
[331.26040649 -18.50985146]
[326.64999390 -7.00992870]
[318.64437866 2.03051662]
[308.33651733 7.69458342]
[297.03295898 9.50438118]
[286.08944702 7.45584726]
[276.74862671 1.99553597]
[269.99890137 -6.05522537]
[255.98217773 -0.71371281]
[241.96546936 4.62779951]
[227.94876099 9.96931267]
[213.93203735 15.31082439]
[199.97164917 20.79785538]
[186.06909180 26.42981339]
[173.62965393 34.81195450]
[163.18984985 45.58276367]
[152.75003052 56.35357285]
[142.31022644 67.12438202]
[131.87040710 77.89518738]
[136.22943115 85.01564026]
[139.00025940 92.98622131]
[140.01954651 101.45325470]
[139.20260620 110.03231049]
[136.54901123 118.32569122]
[132.14428711 125.94084167]
[126.15772247 132.50892639]
[118.83605957 137.70260620]
[110.49343109 141.25228882]
[101.49794769 142.95989990]
[92.25549316 142.70953369]
[92.25549316 157.70953369]
[92.25549316 172.70953369]
[92.25549316 187.70953369]
[92.25549316 202.70953369]
[92.25549316 217.70953369]
[92.25549316 232.70953369]
[92.25549316 247.70953369]
[92.25549316 262.70953369]
[92.25549316 277.70953369]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 51]
[12 50]
[13 49]
[16 32]
[17 31]
[18 30]
[19 29]
[36 47]
[38 45]
[39 44]
[58 130]
[59 129]
[60 128]
[61 127]
[62 126]
[83 125]
[84 124]
[86 123]
[87 122]
[88 121]
[89 120]
[90 119]
[93 99]
[94 98]
[100 112]
[101 111]
[102 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
