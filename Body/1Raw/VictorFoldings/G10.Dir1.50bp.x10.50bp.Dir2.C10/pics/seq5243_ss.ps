%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUACUCCUCAAUUACCCACAUAGGAUGAAUAAUAGCAGUUCUACCGUACAACCCUAACAUxxxxxxxxxxAGUGAAAUGCCCCAACUAAAUACUACCGUAUGGCCCACCAUAAUUACCCCCAUACUCCUUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 251.29689026]
[92.50000000 236.29689026]
[92.50000000 221.29689026]
[92.50000000 206.29689026]
[92.50000000 191.29689026]
[92.50000000 176.29689026]
[92.50000000 161.29689026]
[92.50000000 146.29689026]
[92.50000000 131.29689026]
[92.50000000 116.29689789]
[79.35836792 109.06519318]
[66.68685150 117.09219360]
[54.01533508 125.11918640]
[46.49788284 139.04034424]
[31.60580826 139.31489563]
[18.93429184 147.34190369]
[22.20141792 162.14398193]
[20.20582390 177.17041016]
[13.18848801 190.60665894]
[1.99678802 200.83024597]
[-12.01782417 206.60661316]
[-27.16301727 207.23823547]
[-41.60993195 202.64886475]
[-53.61403656 193.39265442]
[-61.72577667 180.58737183]
[-64.96562195 165.77928162]
[-62.94233704 150.75656128]
[-55.90025330 137.33326721]
[-44.68973160 127.13033295]
[-30.66449738 121.37979889]
[-15.51816654 120.77607727]
[-1.07973206 125.39207458]
[10.90729427 134.67037964]
[23.57880974 126.64338684]
[30.18991280 113.29637909]
[45.98833847 112.44766998]
[58.65985489 104.42067719]
[71.33137512 96.39367676]
[79.92173767 88.92308044]
[89.23017120 86.88852692]
[96.65718079 89.51588440]
[101.20447540 75.22175598]
[105.75176239 60.92762375]
[110.29904938 46.63349152]
[102.66587067 34.00582504]
[106.07557678 18.90300560]
[101.23576355 4.70525217]
[96.39594269 -9.49250031]
[84.61977386 -20.05812073]
[87.83674622 -34.60117340]
[82.99693298 -48.79892349]
[78.15711212 -62.99667740]
[72.39162445 -70.16291046]
[73.36693573 -77.53589630]
[68.81964874 -91.83002472]
[53.82263565 -90.45027161]
[38.87969589 -92.32714081]
[24.68973923 -97.37284851]
[11.91645050 -105.35139465]
[1.15726388 -115.88961029]
[-7.08459568 -128.49459839]
[-12.42364120 -142.57681274]
[-14.61015606 -157.47760010]
[-13.54187298 -172.50000000]
[-9.26875687 -186.94142151]
[-1.99066961 -200.12638855]
[7.95197964 -211.43823242]
[20.09415436 -220.34786987]
[33.86794281 -226.43858337]
[48.62912369 -229.42550659]
[63.68728638 -229.16891479]
[78.33813477 -225.68083191]
[91.89641571 -219.12437439]
[103.72799683 -209.80622864]
[113.27947998 -198.16221619]
[120.10413361 -184.73693848]
[123.88275146 -170.15830994]
[124.43860626 -155.10823059]
[121.74569702 -140.29058838]
[115.92997742 -126.39846039]
[107.26345062 -114.08158112]
[96.15147400 -103.91604614]
[83.11377716 -96.37731934]
[87.66106415 -82.08318329]
[92.35486603 -67.83649445]
[97.19468689 -53.63874054]
[102.03450012 -39.44099045]
[113.46450043 -29.89088631]
[110.59369659 -14.33231640]
[115.43351746 -0.13456401]
[120.27333069 14.06318855]
[122.83275604 -0.71684307]
[125.39218140 -15.49687481]
[123.27686310 -30.34697151]
[126.21264648 -45.05687332]
[133.86637878 -57.95727158]
[145.36952209 -67.58421326]
[159.41664124 -72.84520721]
[174.41368103 -73.14323425]
[188.65873718 -68.44448090]
[200.53526306 -59.28215408]
[208.69549561 -46.69601822]
[212.21337891 -32.11436844]
[210.68971252 -17.19195557]
[204.29739380 -3.62219787]
[193.76184082 7.05498600]
[180.27865601 13.62793159]
[165.38082886 15.35088634]
[151.73469543 21.57848930]
[138.08856201 27.80609131]
[153.04985046 28.88316154]
[168.01112366 29.96023178]
[182.97241211 31.03730011]
[197.93368530 32.11437225]
[212.44364929 24.47282600]
[226.17021179 33.44574738]
[224.99267578 49.80256271]
[210.12239075 56.71678543]
[196.85661316 47.07565308]
[181.89533997 45.99858093]
[166.93405151 44.92151260]
[151.97277832 43.84444046]
[137.01148987 42.76737213]
[124.59318542 51.18078232]
[120.04589081 65.47491455]
[115.49860382 79.76904297]
[110.95130920 94.06317139]
[119.47533417 81.72052002]
[131.79092407 73.15744019]
[146.32926941 69.46472168]
[161.23846436 71.11276245]
[174.61930847 77.89162445]
[184.76731873 88.93779755]
[190.38981628 102.84418488]
[190.77058411 117.83934784]
[185.86111450 132.01316833]
[176.28678894 143.56013489]
[163.26722717 151.00935364]
[148.46089172 153.41194153]
[133.75386047 150.46183777]
[121.01954651 142.53483582]
[111.88010406 130.64070129]
[107.50000000 116.29689789]
[107.50000000 131.29689026]
[107.50000000 146.29689026]
[107.50000000 161.29689026]
[107.50000000 176.29689026]
[107.50000000 191.29689026]
[107.50000000 206.29689026]
[107.50000000 221.29689026]
[107.50000000 236.29689026]
[107.50000000 251.29689026]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 38]
[12 37]
[13 36]
[15 34]
[16 33]
[41 127]
[42 126]
[43 125]
[44 124]
[46 91]
[47 90]
[48 89]
[50 87]
[51 86]
[52 85]
[54 84]
[55 83]
[110 123]
[111 122]
[112 121]
[113 120]
[114 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
