%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUACUACUAACAGACCGCAACCUCAACACCACCUUCUUCGACCCCGCCGGAGGAGGAGACCCxxxxxxxxxxAAGAGUAAUAAACUUCGCCUUAAUUUUAAUAAUCAACACCCUCCUAGCCUUACUACUAAUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[81.28909302 428.21154785]
[83.87487030 409.00311279]
[84.18284607 394.00628662]
[84.49082184 379.00942993]
[84.79879761 364.01260376]
[85.10678101 349.01577759]
[85.41475677 334.01892090]
[85.72273254 319.02209473]
[86.03070831 304.02523804]
[86.33869171 289.02841187]
[72.04672241 286.02273560]
[58.55180740 280.42788696]
[46.31872559 272.43493652]
[35.76911545 262.31750488]
[27.26691818 250.42254639]
[21.10584259 237.15834045]
[17.49919891 222.98049927]
[16.57253075 208.37634277]
[18.35923767 193.84814453]
[22.79937363 179.89582825]
[29.74165726 166.99980164]
[38.94863129 155.60438538]
[50.10477829 146.10252380]
[62.82732773 138.82223511]
[76.67941284 134.01525879]
[91.18502808 131.84838867]
[91.80085754 116.86103821]
[82.28864288 110.60072327]
[77.48365784 99.10978699]
[80.09667969 85.83985901]
[65.84999084 81.14605713]
[51.60329437 76.45225525]
[37.35660553 71.75845337]
[29.47373962 84.60202026]
[18.84099960 95.28104401]
[6.03179789 103.21962738]
[-8.26308537 107.98963928]
[-23.27274323 109.33385468]
[-38.18772125 107.17976379]
[-52.20367813 101.64355469]
[-64.56475067 93.02377319]
[-74.60431671 81.78527069]
[-81.78096008 68.53414154]
[-85.70765686 53.98498917]
[-86.17263031 38.92243576]
[-83.15081787 24.15878677]
[-76.80518341 10.49022388]
[-67.47793579 -1.34612322]
[-55.67207336 -10.71193409]
[-42.02428436 -17.10212326]
[-27.27056885 -20.17207718]
[-12.20657825 -19.75623322]
[2.35530472 -15.87702084]
[15.62977600 -8.74363995]
[26.90096092 1.25921476]
[35.56101990 13.59210300]
[41.14292145 27.58992577]
[43.34564972 42.49779892]
[42.05040359 57.51176453]
[56.29709625 62.20556259]
[70.54378510 66.89936066]
[84.79048157 71.59316254]
[99.29910278 67.78530884]
[109.40454102 56.70017242]
[119.50997925 45.61503983]
[129.61541748 34.52990341]
[139.72084045 23.44477081]
[129.82566833 12.15027809]
[121.25733185 -0.18112446]
[114.12356567 -13.39435482]
[108.51409912 -27.32324219]
[104.49948120 -41.79261780]
[102.13018799 -56.62051392]
[101.43602753 -71.62045288]
[102.42572021 -86.60379028]
[105.08682251 -101.38210297]
[109.38587189 -115.76953888]
[115.26879883 -129.58514404]
[122.66162109 -142.65519714]
[131.47137451 -154.81530762]
[141.58724976 -165.91256714]
[152.88203430 -175.80740356]
[165.21369934 -184.37538147]
[178.42713928 -191.50874329]
[192.35620117 -197.11779785]
[206.82568359 -201.13198853]
[221.65365601 -203.50082397]
[236.65361023 -204.19454956]
[251.63693237 -203.20440674]
[266.41516113 -200.54286194]
[280.80245972 -196.24337769]
[294.61788940 -190.36003113]
[307.68771362 -182.96682739]
[319.84756470 -174.15670776]
[330.94451904 -164.04051208]
[340.83901978 -152.74542236]
[349.40664673 -140.41349792]
[356.53961182 -127.19985199]
[362.14822388 -113.27062225]
[366.16198730 -98.80101013]
[368.53039551 -83.97296906]
[369.22366333 -68.97299194]
[368.23306274 -53.98971176]
[365.57107544 -39.21155548]
[361.27117920 -24.82438087]
[355.38742065 -11.00911999]
[347.99380493 2.06048656]
[339.18334961 14.22007465]
[329.06680298 25.31672287]
[317.77142334 35.21088409]
[305.43923950 43.77812195]
[292.22537231 50.91069794]
[278.29598999 56.51891327]
[263.82626343 60.53223419]
[248.99815369 62.90019608]
[233.99815369 63.59301376]
[219.01489258 62.60197449]
[204.23681641 59.93954468]
[189.84977722 55.63920593]
[176.03468323 49.75503922]
[162.96530151 42.36104202]
[150.80598450 33.55020523]
[140.70054626 44.63533783]
[130.59510803 55.72047424]
[120.48967743 66.80561066]
[110.38423920 77.89073944]
[121.57496643 100.74053955]
[106.78820801 117.47686768]
[106.17238617 132.46421814]
[121.17311096 136.05987549]
[135.18615723 142.49742126]
[147.67907715 151.53024292]
[158.17752075 162.81317139]
[166.28332520 175.91564941]
[171.68959045 190.33813477]
[174.19227600 205.53123474]
[173.69792175 220.91648865]
[170.22714233 235.90855408]
[163.91375732 249.93731689]
[154.99964905 262.46972656]
[143.82548523 273.02996826]
[130.81768799 281.21743774]
[116.47219849 286.72219849]
[101.33552551 289.33639526]
[101.02754974 304.33322144]
[100.71957397 319.33007812]
[100.41159058 334.32690430]
[100.10361481 349.32373047]
[99.79563904 364.32058716]
[99.48766327 379.31741333]
[99.17967987 394.31427002]
[98.87170410 409.31109619]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 152]
[3 151]
[4 150]
[5 149]
[6 148]
[7 147]
[8 146]
[9 145]
[10 144]
[26 129]
[27 128]
[30 62]
[31 61]
[32 60]
[33 59]
[63 126]
[64 125]
[65 124]
[66 123]
[67 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
