%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUUAUUUAUCGCACCUACGUUCAAUAUUACAGGCGAACAUACUUACUAAAGUGUGUUAAUxxxxxxxxxxGCAAUCCUAUACAACCGUAUCGGCGAUAUCGGUUUCAUCCUCGCCUUAGCAUGAUUUAUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[17.65562630 481.13113403]
[17.65562630 466.13113403]
[17.65562630 451.13113403]
[17.65562630 436.13113403]
[17.65562630 421.13113403]
[17.65562630 406.13113403]
[17.65562630 391.13113403]
[17.65562630 376.13113403]
[17.65562630 361.13113403]
[17.65562630 346.13113403]
[3.19077086 342.29479980]
[-9.79808998 334.83917236]
[-20.42255974 324.26727295]
[-27.95416832 311.29547119]
[-31.87431526 296.80505371]
[-31.90998268 281.78213501]
[-28.05273056 267.25082397]
[-20.55969048 254.20317078]
[-9.93642998 243.53160095]
[3.09715581 235.96780396]
[17.65562630 232.03256226]
[17.65562630 217.03256226]
[9.48245144 229.61029053]
[-2.62294126 238.46801758]
[-17.08412361 242.45227051]
[-32.01788712 241.04417419]
[-45.47947693 234.42710876]
[-55.71585846 223.46278381]
[-61.39399719 209.57902527]
[-61.77445602 194.58384705]
[-56.80768585 180.43000793]
[-47.14049149 168.96067810]
[-34.03178024 161.66947937]
[-19.18864059 159.50587463]
[-4.54401731 162.75164795]
[7.99498749 170.98411560]
[16.79548073 183.13117981]
[20.71126938 197.60923767]
[25.31683350 183.33378601]
[24.37125206 175.95465088]
[30.16955185 168.81101990]
[35.07110214 154.63446045]
[39.97265244 140.45790100]
[44.87420273 126.28134155]
[49.77575302 112.10478210]
[54.67730713 97.92822266]
[51.27432632 83.31932831]
[40.61270142 72.76804352]
[29.95107460 62.21675110]
[19.28944969 51.66545868]
[8.62782288 41.11417007]
[-2.03380346 30.56287956]
[-12.69542980 20.01158905]
[-23.35705566 9.46029854]
[-39.34796524 5.82396984]
[-43.93511200 -9.92055607]
[-32.39963531 -21.57666206]
[-16.60824203 -17.15354347]
[-12.80576611 -1.20132768]
[-2.14413953 9.34996223]
[8.51748657 19.90125275]
[19.17911339 30.45254326]
[29.84073830 41.00383377]
[40.50236511 51.55512238]
[51.16399002 62.10641479]
[61.82561874 72.65770721]
[76.05239868 67.90389252]
[78.22923279 53.06268311]
[64.43265533 46.93429947]
[52.80184937 37.31001282]
[44.19989395 24.90401077]
[39.26511002 10.63689995]
[38.36368942 -4.43260670]
[41.56253052 -19.18625069]
[48.62425232 -32.52921295]
[59.02483368 -43.47135925]
[71.99247742 -51.20070648]
[86.56489563 -55.14368439]
[101.66072845 -55.00770569]
[116.15975189 -50.80285263]
[128.98605347 -42.84115982]
[139.18783569 -31.71343231]
[146.00804138 -18.24542427]
[148.94059753 -3.43654990]
[147.76785278 11.61427307]
[142.57685852 25.79017448]
[133.75282288 38.03920746]
[121.95052338 47.45241165]
[108.04579163 53.33126450]
[93.07044220 55.23952103]
[90.89360046 70.08072662]
[107.61125183 73.29653931]
[118.23835754 84.00346375]
[132.02073669 78.08349609]
[145.80311584 72.16353607]
[159.58549500 66.24357605]
[173.36787415 60.32360840]
[187.08793640 54.26059723]
[200.74417114 48.05518723]
[214.40042114 41.84978104]
[228.05665588 35.64437485]
[239.97552490 23.58713913]
[254.86103821 31.70243835]
[251.18359375 48.25275040]
[234.26206970 49.30061722]
[220.60581970 55.50602341]
[206.94958496 61.71142960]
[193.29333496 67.91683960]
[188.47366333 73.58396912]
[179.28784180 74.10598755]
[165.50546265 80.02595520]
[151.72308350 85.94591522]
[137.94070435 91.86588287]
[124.15831757 97.78584290]
[123.66437531 108.84027100]
[118.17670441 118.95772552]
[108.45928955 125.92048645]
[96.23868561 128.01670837]
[83.90134430 124.44538116]
[74.02768707 115.55155945]
[68.85386658 102.82977295]
[63.95231247 117.00633240]
[59.05076218 131.18289185]
[54.14921188 145.35945129]
[49.24766159 159.53601074]
[44.34611130 173.71257019]
[39.59229660 187.93934631]
[34.98672867 202.21479797]
[32.65562820 217.03256226]
[32.65562820 232.03256226]
[47.21409607 235.96780396]
[60.24768448 243.53160095]
[70.87094116 254.20317078]
[78.36398315 267.25082397]
[82.22123718 281.78213501]
[82.18556976 296.80505371]
[78.26541901 311.29547119]
[70.73381042 324.26727295]
[60.10934448 334.83917236]
[47.12048340 342.29479980]
[32.65562820 346.13113403]
[32.65562820 361.13113403]
[32.65562820 376.13113403]
[32.65562820 391.13113403]
[32.65562820 406.13113403]
[32.65562820 421.13113403]
[32.65562820 436.13113403]
[32.65562820 451.13113403]
[32.65562820 466.13113403]
[32.65562820 481.13113403]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[21 130]
[22 129]
[38 128]
[39 127]
[41 126]
[42 125]
[43 124]
[44 123]
[45 122]
[46 121]
[47 66]
[48 65]
[49 64]
[50 63]
[51 62]
[52 61]
[53 60]
[54 59]
[67 91]
[68 90]
[93 114]
[94 113]
[95 112]
[96 111]
[97 110]
[98 108]
[99 107]
[100 106]
[101 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
