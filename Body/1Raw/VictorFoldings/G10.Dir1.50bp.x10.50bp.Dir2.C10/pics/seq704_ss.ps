%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCCAGCACACACACACCGCUGCUAACCCCAUACCCCGAACCAACCAAACCCCAAAGACAxxxxxxxxxxCAGCCCUAUACUCCCUCUACAUAUUUACCACAACACAAUGGGGCUCACUCACCCACCACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 292.92654419]
[92.50000000 277.92654419]
[92.50000000 262.92654419]
[92.50000000 247.92652893]
[92.50000000 232.92652893]
[92.50000000 217.92652893]
[92.50000000 202.92652893]
[92.50000000 187.92652893]
[92.50000000 172.92652893]
[92.50000000 157.92652893]
[82.53568268 155.73805237]
[73.10412598 151.84925842]
[64.49304962 146.37875366]
[56.96512985 139.49345398]
[44.70276260 148.13256836]
[32.44039154 156.77168274]
[20.17802429 165.41079712]
[22.23193359 180.57786560]
[16.99119186 194.95817566]
[5.66008615 205.24723816]
[-9.15758038 209.08068848]
[-24.05681610 205.57763672]
[-35.61388397 195.54306030]
[-41.17305756 181.28282166]
[-39.45687866 166.07383728]
[-30.85970879 153.41101074]
[-17.35712051 146.20416260]
[-2.05190516 146.10937500]
[11.53890896 153.14843750]
[23.80127716 144.50932312]
[36.06364441 135.87019348]
[48.32601166 127.23108673]
[41.70269775 103.62728119]
[45.34897614 79.38450623]
[58.62253189 58.77333450]
[79.18510437 45.42461395]
[103.41440582 41.68984222]
[106.20673370 26.95203400]
[108.99905396 12.21422863]
[111.79138184 -2.52357697]
[114.58370972 -17.26138306]
[117.37602997 -31.99918938]
[102.90665436 -35.98540497]
[88.81034088 -41.13775253]
[75.18089294 -47.42194748]
[62.10902786 -54.79616547]
[49.68172836 -63.21133041]
[37.98170090 -72.61144257]
[27.08680344 -82.93394470]
[17.06954765 -94.11014557]
[7.99659204 -106.06565857]
[-0.07168020 -118.72092438]
[-7.08157635 -131.99172974]
[-12.98644638 -145.78974915]
[-17.74699211 -160.02314758]
[-21.33153534 -174.59722900]
[-23.71621895 -189.41499329]
[-24.88517380 -204.37782288]
[-24.83061981 -219.38615417]
[-23.55292130 -234.34008789]
[-21.06057930 -249.14012146]
[-17.37018394 -263.68777466]
[-12.50628948 -277.88619995]
[-6.50126886 -291.64093018]
[0.60491705 -304.86041260]
[8.76497650 -317.45669556]
[17.92460442 -329.34591675]
[28.02284431 -340.44900513]
[38.99249268 -350.69204712]
[50.76054764 -360.00683594]
[63.24869537 -368.33145142]
[76.37382507 -375.61044312]
[90.04859161 -381.79537964]
[104.18199158 -386.84512329]
[118.67996216 -390.72604370]
[133.44602966 -393.41232300]
[148.38192749 -394.88607788]
[163.38824463 -395.13751221]
[178.36511230 -394.16494751]
[193.21289062 -391.97485352]
[207.83273315 -388.58181763]
[222.12738037 -384.00842285]
[236.00167847 -378.28506470]
[249.36329651 -371.44985962]
[262.12332153 -363.54830933]
[274.19680786 -354.63296509]
[285.50347900 -344.76318359]
[295.96801758 -334.00463867]
[305.52078247 -322.42892456]
[314.09826660 -310.11309814]
[321.64334106 -297.13909912]
[328.10577393 -283.59326172]
[333.44259644 -269.56576538]
[337.61828613 -255.14991760]
[340.60507202 -240.44168091]
[342.38302612 -225.53894043]
[342.94033813 -210.54086304]
[342.27331543 -195.54727173]
[340.38638306 -180.65794373]
[337.29211426 -165.97195435]
[333.01107788 -151.58705139]
[327.57177734 -137.59895325]
[321.01037598 -124.10076141]
[313.37060547 -111.18229675]
[304.70327759 -98.92954254]
[295.06607056 -87.42402649]
[284.52310181 -76.74232483]
[273.14456177 -66.95552826]
[261.00613403 -58.12875366]
[248.18865967 -50.32075119]
[234.77740479 -43.58348083]
[220.86160278 -37.96178055]
[206.53388977 -33.49305725]
[191.88961792 -30.20705795]
[177.02621460 -28.12564468]
[162.04261780 -27.26267052]
[147.03854370 -27.62387848]
[132.11383057 -29.20686531]
[129.32151794 -14.46905804]
[126.52919006 0.26874751]
[123.73686218 15.00655365]
[120.94454193 29.74435997]
[118.15221405 44.48216629]
[126.23567200 47.81358337]
[133.73132324 52.31424713]
[140.47120667 57.88331985]
[146.30432129 64.39602661]
[151.09997559 71.70645142]
[154.75073242 79.65080261]
[157.17478943 88.05107880]
[158.31782532 96.71907043]
[158.15423584 105.46057129]
[156.68768311 114.07973480]
[153.95103455 122.38343048]
[150.00561523 130.18562317]
[144.93978882 137.31150818]
[138.86708069 143.60140991]
[131.92355347 148.91441345]
[124.26477051 153.13148499]
[116.06232452 156.15812683]
[107.50000000 157.92652893]
[107.50000000 172.92652893]
[107.50000000 187.92652893]
[107.50000000 202.92652893]
[107.50000000 217.92652893]
[107.50000000 232.92652893]
[107.50000000 247.92652893]
[107.50000000 262.92654419]
[107.50000000 277.92654419]
[107.50000000 292.92654419]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[14 32]
[15 31]
[16 30]
[17 29]
[37 123]
[38 122]
[39 121]
[40 120]
[41 119]
[42 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
