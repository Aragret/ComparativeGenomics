%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUUCACCAUUUCCGACGGCAUCUACGGCUCAACAUUUUUUGUAGCCACAGGCUUCCACGGxxxxxxxxxxCCGGAGAUGAAAACCUUUUUCCAAGGACAAAUCAGAGAAAAAGUCUUUAACUCCACCAUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 252.33383179]
[92.50000000 237.33383179]
[92.50000000 222.33383179]
[92.50000000 207.33383179]
[92.50000000 192.33383179]
[92.50000000 177.33383179]
[92.50000000 162.33383179]
[92.50000000 147.33383179]
[92.50000000 132.33383179]
[92.50000000 117.33383942]
[85.77201843 114.01958466]
[83.62587738 128.86526489]
[68.84357452 131.41154480]
[61.85409927 118.13949585]
[72.31605530 107.39109039]
[65.58806610 104.07684326]
[53.69569016 113.21857452]
[55.09506226 128.58233643]
[47.94575500 142.25314331]
[34.52908325 149.86868286]
[19.12625885 148.99887085]
[6.65226889 139.92124939]
[1.08751619 125.53247070]
[4.20769405 110.42393494]
[15.01716423 99.41670990]
[30.06666565 96.02317810]
[44.55395508 101.32619476]
[56.44633484 92.18446350]
[58.15902328 77.28255463]
[48.65066528 65.68121338]
[39.14230728 54.07987595]
[29.63394928 42.47853470]
[20.12559128 30.87719154]
[5.39358759 25.10842705]
[3.31009388 10.36026382]
[-6.19826460 -1.24107766]
[-15.70662308 -12.84241867]
[-28.79461479 -6.42861271]
[-42.97755051 -3.10336137]
[-57.53737640 -3.03155971]
[-71.73772430 -6.21347332]
[-84.86116028 -12.48489571]
[-96.24542999 -21.52562141]
[-105.31687927 -32.87578583]
[-111.61935425 -45.95926285]
[-114.83715057 -60.11291504]
[-114.81081390 -74.62017822]
[-111.54502869 -88.74737549]
[-105.20825195 -101.78079224]
[-96.12398529 -113.06275177]
[-105.38893127 -124.85939026]
[-114.65388489 -136.65603638]
[-124.28240967 -148.15783691]
[-134.26513672 -159.35359192]
[-144.24786377 -170.54936218]
[-154.23059082 -181.74513245]
[-169.28466797 -189.54328918]
[-165.95864868 -206.16778564]
[-149.06311035 -207.57386780]
[-143.03482056 -191.72785950]
[-133.05209351 -180.53208923]
[-123.06936646 -169.33631897]
[-113.08663940 -158.14056396]
[-109.54153442 -157.59312439]
[-106.09686279 -155.26161194]
[-103.60663605 -151.21795654]
[-102.85723877 -145.92097473]
[-93.59229279 -134.12434387]
[-84.32734680 -122.32769775]
[-70.27712250 -128.78878784]
[-55.08325195 -131.71630859]
[-39.62081909 -130.93740845]
[-24.78137207 -126.49283600]
[-11.42154217 -118.63483429]
[-0.31356928 -107.81280518]
[7.89931774 -94.64762878]
[12.74015713 -79.89601135]
[13.92595005 -64.40704346]
[11.38419914 -49.07326889]
[5.25733137 -34.77930450]
[-4.10528183 -22.35077667]
[5.40307665 -10.74943638]
[14.91143513 0.85190511]
[28.96333694 5.79086494]
[31.72693253 21.36883354]
[41.23529053 32.97017670]
[50.74364853 44.57151794]
[60.25200653 56.17285919]
[69.76036835 67.77420044]
[119.30392456 85.31507874]
[134.06997681 82.67620850]
[148.83602905 80.03734589]
[157.87890625 67.35411835]
[172.89138794 64.88828278]
[184.92716980 73.58744812]
[199.69322205 70.94858551]
[214.45927429 68.30971527]
[229.22534180 65.67085266]
[243.99139404 63.03199005]
[258.75744629 60.39312363]
[273.52349854 57.75426102]
[276.40219116 42.85199356]
[284.47314453 29.99803352]
[296.64480591 20.93076706]
[311.27105713 16.87647057]
[326.37380981 18.38345528]
[339.91055298 25.24791145]
[350.05056763 36.54147720]
[355.42248535 50.73679352]
[355.29980469 65.91406250]
[349.69909668 80.02067566]
[339.37780762 91.14883423]
[325.73187256 97.79354095]
[310.60671997 99.05616760]
[296.04791260 94.76593781]
[284.02444458 85.50308228]
[276.16235352 72.52031708]
[261.39630127 75.15917969]
[246.63024902 77.79804230]
[231.86419678 80.43690491]
[217.09814453 83.07577515]
[202.33209229 85.71463776]
[187.56604004 88.35350037]
[179.28829956 100.68292236]
[164.35101318 103.56945801]
[151.47489929 94.80340576]
[136.70884705 97.44226837]
[121.94278717 100.08113098]
[136.16636658 104.84453583]
[151.10562134 103.49606323]
[165.02705383 109.08119965]
[174.89202881 120.38086700]
[178.54730225 134.92868042]
[175.19503784 149.54930115]
[165.56694031 161.05145264]
[151.76454163 166.92459106]
[136.80047607 165.88676453]
[123.94098663 158.16450500]
[115.99288940 145.44335938]
[114.69138336 130.49757385]
[107.50000000 117.33383942]
[107.50000000 132.33383179]
[107.50000000 147.33383179]
[107.50000000 162.33383179]
[107.50000000 177.33383179]
[107.50000000 192.33383179]
[107.50000000 207.33383179]
[107.50000000 222.33383179]
[107.50000000 237.33383179]
[107.50000000 252.33383179]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[16 28]
[17 27]
[29 89]
[30 88]
[31 87]
[32 86]
[33 85]
[35 83]
[36 82]
[37 81]
[50 69]
[51 68]
[52 67]
[53 63]
[54 62]
[55 61]
[56 60]
[90 128]
[91 127]
[92 126]
[95 123]
[96 122]
[97 121]
[98 120]
[99 119]
[100 118]
[101 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
