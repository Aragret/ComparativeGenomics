%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUUUCACUUCUGAGUCCCAGAGGUUACCCAAGGCACCCCUCUGACAUCCGGCCUGCUUCUxxxxxxxxxxUUAACAAUGAACAAGAUAUUCGAAAAAUAGGAGGACUACUCAAAACCAUACCUCUCACUUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[118.30406189 468.47235107]
[118.30406189 453.47235107]
[118.30406189 438.47235107]
[118.30406189 423.47235107]
[118.30406189 408.47235107]
[118.30406189 393.47235107]
[118.30406189 378.47235107]
[118.30406189 363.47235107]
[118.30406189 348.47235107]
[118.30406189 333.47235107]
[100.59736633 329.68856812]
[84.22979736 321.92984009]
[70.08073425 310.60949707]
[58.91117096 296.33230591]
[51.32277679 279.86218262]
[47.72552490 262.08129883]
[48.31550217 243.94284058]
[53.06424713 226.41992188]
[61.72010422 210.45336914]
[73.82154083 196.90119934]
[88.72177887 186.49249268]
[105.62335205 179.78823853]
[103.17042542 164.99015808]
[100.71749878 150.19207764]
[98.26456451 135.39399719]
[95.81163788 120.59592438]
[83.46195984 116.84383392]
[74.43170166 105.68920135]
[73.02973938 89.95066071]
[58.16314316 87.95460510]
[43.29654312 85.95854950]
[28.42994499 83.96249390]
[13.56334591 81.96643066]
[-1.30325234 79.97037506]
[-8.90720272 93.13275909]
[-20.97240639 102.37934875]
[-35.65900421 106.30009460]
[-50.72739792 104.29711914]
[-63.87976837 96.67585754]
[-73.11047363 84.59850311]
[-77.01190186 69.90676117]
[-74.98910522 54.84101105]
[-67.35054779 41.69868088]
[-55.26106262 32.48386765]
[-40.56420135 28.60177422]
[-25.50112724 30.64438629]
[-12.36885166 38.30022049]
[-3.16995335 50.40182114]
[0.69280457 65.10377502]
[15.55940342 67.09983826]
[30.42600250 69.09589386]
[45.29260254 71.09194946]
[60.15919876 73.08800507]
[75.02579498 75.08406067]
[61.68384171 68.22898102]
[56.38291931 54.19686508]
[61.85990906 40.23253250]
[75.28703308 33.54579926]
[89.73182678 37.58903503]
[97.73642731 50.27471542]
[95.16696930 65.05494690]
[95.20393372 49.23378754]
[108.19413757 41.94654846]
[115.56037903 28.87985420]
[122.92662048 15.81315899]
[122.96357727 -0.00800446]
[135.95378113 -7.29524279]
[143.32002258 -20.36193848]
[130.14192200 -13.19689655]
[115.83570099 -8.68782711]
[100.93077850 -7.00159931]
[85.97877502 -8.20061970]
[71.53304291 -12.24051476]
[58.12818527 -18.97177315]
[46.26029968 -28.14528465]
[36.36859512 -39.42155075]
[28.81914520 -52.38325500]
[23.89134598 -66.55071259]
[21.76756287 -81.39960480]
[22.52639580 -96.38039398]
[26.13976097 -110.93867493]
[32.47393417 -124.53567505]
[41.29449844 -136.66818237]
[52.27501678 -146.88719177]
[65.00912476 -154.81451416]
[79.02555084 -160.15678406]
[93.80556488 -162.71627808]
[108.80220032 -162.39830017]
[123.46043396 -159.21458435]
[137.23780823 -153.28297424]
[149.62443542 -144.82298279]
[160.16191101 -134.14770508]
[168.46026611 -121.65221405]
[174.21238708 -107.79894257]
[177.20539856 -93.10057831]
[177.32852173 -78.10108185]
[174.57722473 -63.35556412]
[169.05329895 -49.40972519]
[160.95854187 -36.77630234]
[174.52044678 -43.18527603]
[188.08233643 -49.59425354]
[194.82382202 -64.15213776]
[210.44242859 -67.81800079]
[222.95690918 -57.77970505]
[222.76722717 -41.73777390]
[210.01887512 -31.99820328]
[194.49131775 -36.03235626]
[180.92941284 -29.62338066]
[167.36752319 -23.21440506]
[156.38671875 -12.99569798]
[149.02047729 0.07099687]
[149.51040649 14.95754242]
[135.99331665 23.17939758]
[128.62707520 36.24609375]
[121.26083374 49.31278992]
[121.75075531 64.19933319]
[108.23366547 72.42118835]
[124.72195435 97.03121948]
[110.60971832 118.14299774]
[113.06264496 132.94107056]
[115.51557159 147.73915100]
[117.96850586 162.53723145]
[120.42143250 177.33531189]
[132.63304138 177.46614075]
[144.67388916 179.48866272]
[156.25276184 183.35310364]
[167.08981323 188.96510315]
[176.92321777 196.18814087]
[185.51556396 204.84674072]
[192.65957642 214.73080444]
[198.18312073 225.60067749]
[201.95330811 237.19296265]
[203.87976074 249.22692871]
[203.91671753 261.41128540]
[202.06413269 273.45117188]
[198.36770630 285.05548096]
[192.91767883 295.94366455]
[185.84671021 305.85269165]
[177.32658386 314.54330444]
[167.56405640 321.80584717]
[156.79583740 327.46530151]
[145.28289795 331.38546753]
[133.30406189 333.47235107]
[133.30406189 348.47235107]
[133.30406189 363.47235107]
[133.30406189 378.47235107]
[133.30406189 393.47235107]
[133.30406189 408.47235107]
[133.30406189 423.47235107]
[133.30406189 438.47235107]
[133.30406189 453.47235107]
[133.30406189 468.47235107]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[22 123]
[23 122]
[24 121]
[25 120]
[26 119]
[29 54]
[30 53]
[31 52]
[32 51]
[33 50]
[34 49]
[61 117]
[63 115]
[64 114]
[65 113]
[67 111]
[68 110]
[99 109]
[100 108]
[101 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
