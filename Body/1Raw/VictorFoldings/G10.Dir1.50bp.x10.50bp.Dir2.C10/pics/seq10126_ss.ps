%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAAGAACUAUCAAACUCCUGAGCCAACAACUUAAUAUGACUAGCUUACACAAUAGCUUUUxxxxxxxxxxACUCCCCUCAGCCAUAGAAGGCCCCACCCCAGUCUCAGCCCUACUCCACUCAAGCACUAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[201.21418762 268.28512573]
[209.90454102 256.02713013]
[199.02572632 245.69992065]
[188.14689636 235.37271118]
[177.26806641 225.04551697]
[162.71057129 221.89454651]
[158.02891541 206.78189087]
[147.15008545 196.45468140]
[136.27125549 186.12747192]
[125.39243317 175.80027771]
[114.51361084 165.47306824]
[118.30054474 179.98716736]
[119.04648590 194.96861267]
[116.72003937 209.78709412]
[111.41909027 223.81919861]
[103.36666107 236.47456360]
[92.90151215 247.22076416]
[80.46394348 255.60568237]
[66.57721710 261.27655029]
[51.82556915 263.99481201]
[36.82962418 263.64608765]
[22.22028351 260.24502563]
[8.61218262 253.93475342]
[-3.42216325 244.98072815]
[-13.37645149 233.75965881]
[-20.83189011 220.74365234]
[-25.47481918 206.48030090]
[-27.10990334 191.56968689]
[-25.66834831 176.63911438]
[-21.21080780 162.31674194]
[-13.92481518 149.20513916]
[-4.11690187 137.85591125]
[7.80029726 128.74656677]
[21.32540894 122.26031494]
[35.88940811 118.67006683]
[50.87957001 118.12686157]
[65.66522980 120.65355682]
[79.62434387 126.14383698]
[92.16961670 134.36674500]
[102.77700806 144.98091125]
[99.37403107 130.37202454]
[95.97105408 115.76312256]
[86.44302368 108.99537659]
[83.91019440 97.58614349]
[89.67948151 87.42242432]
[86.58116150 72.74590302]
[83.48283386 58.06937408]
[80.38451385 43.39284897]
[69.96357727 31.48845291]
[74.90514374 17.43746758]
[71.80682373 2.76094174]
[65.45969391 -10.83000946]
[56.19474411 -22.62664986]
[46.92979431 -34.42329025]
[37.66484451 -46.21992874]
[22.16427612 -45.50440979]
[9.22202206 -54.06464767]
[3.81464505 -68.60906219]
[8.02139187 -83.54502106]
[20.22468185 -93.12934875]
[35.73210144 -93.67667389]
[48.58073044 -84.97653961]
[53.83000946 -70.37432098]
[49.46148682 -55.48487854]
[58.72643280 -43.68824005]
[67.99138641 -31.89159775]
[77.25633240 -20.09495926]
[75.44338226 -34.98499680]
[77.47311401 -49.84703445]
[83.21230316 -63.70566940]
[92.28428650 -75.65133667]
[104.09366608 -84.90004730]
[117.86537933 -90.84478760]
[132.69557190 -93.09541321]
[147.61093140 -91.50419617]
[161.63255310 -86.17558289]
[173.84017944 -77.45928955]
[183.43263245 -65.92736816]
[189.78031921 -52.33668518]
[192.46665955 -37.57918930]
[191.31533813 -22.62344170]
[186.40191650 -8.45099163]
[178.04887390 4.00800800]
[166.80442810 13.93586254]
[153.40653992 20.68099785]
[138.73455811 23.80072784]
[123.75138855 23.09029961]
[109.44039917 18.59633827]
[96.74083710 10.61379051]
[86.48334503 -0.33737990]
[89.58167267 14.33914566]
[99.78099060 25.19377708]
[95.06104279 40.29452515]
[98.15936279 54.97105026]
[101.25768280 69.64757538]
[104.35600281 84.32410431]
[115.88318634 96.47396851]
[110.57994843 112.36014557]
[113.98292542 126.96903992]
[117.38590240 141.57792664]
[124.84081268 154.59423828]
[135.71963501 164.92144775]
[146.59846497 175.24865723]
[157.47729492 185.57585144]
[168.35610962 195.90306091]
[183.69174194 199.79269409]
[187.59527588 214.16668701]
[198.47410583 224.49389648]
[209.35292053 234.82109070]
[220.23175049 245.14830017]
[232.02136230 235.83241272]
[245.01679993 228.28924561]
[258.95349121 222.67239380]
[273.54772949 219.09617615]
[288.50238037 217.63343811]
[303.51296997 218.31393433]
[318.27389526 221.12380981]
[332.48468018 226.00587463]
[345.85598755 232.86071777]
[358.11560059 241.54879761]
[369.01391602 251.89323425]
[378.32907104 263.68341064]
[385.87142944 276.67932129]
[391.48742676 290.61636353]
[395.06274414 305.21081543]
[396.52456665 320.16555786]
[395.84313965 335.17608643]
[393.03234863 349.93685913]
[388.14938354 364.14733887]
[381.29373169 377.51821899]
[372.60488892 389.77728271]
[362.25976562 400.67498779]
[350.46902466 409.98941040]
[337.47262573 417.53097534]
[323.53524780 423.14608765]
[308.94058228 426.72048950]
[293.98574829 428.18139648]
[278.97525024 427.49902344]
[264.21466064 424.68731689]
[250.00448608 419.80349731]
[236.63403320 412.94702148]
[224.37548828 404.25741577]
[213.47845459 393.91162109]
[204.16474915 382.12030029]
[196.62399292 369.12344360]
[191.00973511 355.18569946]
[187.43623352 340.59082031]
[185.97625732 325.63589478]
[186.65954590 310.62545776]
[189.47216797 295.86502075]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 110]
[3 109]
[4 108]
[5 107]
[7 105]
[8 104]
[9 103]
[10 102]
[11 101]
[40 100]
[41 99]
[42 98]
[45 96]
[46 95]
[47 94]
[48 93]
[50 91]
[51 90]
[52 67]
[53 66]
[54 65]
[55 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
