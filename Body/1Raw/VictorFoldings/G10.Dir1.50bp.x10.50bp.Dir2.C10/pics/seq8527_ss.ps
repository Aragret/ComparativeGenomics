%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUUAUAGGCUUUCGCUCUAAGAUUAAAAAUGCCCUAGCCCACUUCUUACCACAAGGCACAxxxxxxxxxxUCUACGGCUCAACAUUUUUUGUAGCCACAGGCUUCCACGGACUUCACGUCAUUAUUGGCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[76.58703613 268.14923096]
[76.58703613 253.14923096]
[76.58703613 238.14923096]
[76.58703613 223.14923096]
[76.58703613 208.14923096]
[76.58703613 193.14923096]
[76.58703613 178.14923096]
[76.58703613 163.14923096]
[76.58703613 148.14923096]
[76.58703613 133.14923096]
[63.13107300 126.52073669]
[51.23869324 135.66247559]
[39.34631348 144.80419922]
[33.12067413 159.34902954]
[18.31468201 160.97132874]
[6.42230272 170.11306763]
[-5.47007704 179.25479126]
[-17.26671791 188.51974487]
[-28.96634102 197.90690613]
[-34.40472031 213.37805176]
[-50.57003784 216.13749695]
[-60.83279800 203.34657288]
[-54.63555908 188.16348267]
[-38.35350418 186.20729065]
[-26.65387917 176.82012939]
[-23.38385582 170.13786316]
[-14.61181164 167.36241150]
[-2.71943164 158.22068787]
[9.17294788 149.07894897]
[14.54796219 135.18800354]
[30.20457649 132.91181946]
[42.09695816 123.77009583]
[53.98933792 114.62835693]
[68.36711884 78.99769592]
[97.49341583 72.45352173]
[92.29799652 58.38200378]
[87.10258484 44.31048584]
[81.90716553 30.23896599]
[76.71175385 16.16744614]
[71.51633453 2.09592652]
[66.32092285 -11.97559261]
[52.77787781 -14.72970390]
[42.45713425 -23.75717926]
[37.99625015 -36.60828781]
[40.46436691 -49.87553787]
[49.10823441 -60.09705734]
[44.20668411 -74.27362061]
[39.30513382 -88.45017242]
[34.40358353 -102.62673187]
[19.57959938 -100.11688232]
[4.54468584 -100.08136749]
[-10.29099178 -102.52114868]
[-24.52270508 -107.36966705]
[-37.76220703 -114.49465942]
[-49.64830780 -123.70175171]
[-59.85674667 -134.73976135]
[-68.10903931 -147.30755615]
[-74.18004608 -161.06228638]
[-77.90414429 -175.62872314]
[-79.17974854 -190.60946655]
[-77.97205353 -205.59584045]
[-74.31400299 -220.17900085]
[-68.30539703 -233.96110535]
[-60.11015701 -246.56617737]
[-49.95184326 -257.65032959]
[-38.10759354 -266.91119385]
[-24.90052032 -274.09613037]
[-10.69092751 -279.00909424]
[4.13354063 -281.51608276]
[19.16845894 -281.54870605]
[34.00366592 -279.10607910]
[48.23444748 -274.25479126]
[61.47257233 -267.12725830]
[73.35690308 -257.91787720]
[83.56321716 -246.87791443]
[91.81307983 -234.30851746]
[97.88143921 -220.55261230]
[101.60273743 -205.98547363]
[102.87545013 -191.00448608]
[101.66487122 -176.01834106]
[98.00401306 -161.43588257]
[91.99275208 -147.65493774]
[83.79508209 -135.05143738]
[73.63463593 -123.96924591]
[61.78859711 -114.71066284]
[48.58014297 -107.52828217]
[53.48169327 -93.35172272]
[58.38324356 -79.17517090]
[63.28479385 -64.99861145]
[79.10939026 -60.74567413]
[89.40217590 -47.78324890]
[89.96981049 -31.07518768]
[80.39244080 -17.17100906]
[85.58786011 -3.09948897]
[90.78327179 10.97203064]
[95.97869110 25.04355049]
[101.17410278 39.11507034]
[106.36952209 53.18658829]
[111.56493378 67.25811005]
[124.50299072 74.84801483]
[139.32075500 72.51691437]
[154.13850403 70.18580627]
[168.87631226 67.39348602]
[183.51982117 64.14265442]
[198.16331482 60.89183426]
[212.80682373 57.64100647]
[226.95913696 48.30568314]
[239.84738159 59.32064819]
[232.83070374 74.75446320]
[216.05764771 72.28450775]
[201.41413879 75.53533173]
[186.77064514 78.78616333]
[172.12713623 82.03698730]
[169.91949463 84.86431122]
[166.20358276 86.73345184]
[161.45887756 86.93405151]
[156.46960449 85.00356293]
[141.65185547 87.33467102]
[126.83409119 89.66577148]
[124.34897614 104.45848083]
[137.59156799 111.50361633]
[150.83415222 118.54875183]
[166.53559875 115.25576782]
[178.80755615 125.58914948]
[178.23600769 141.62202454]
[165.25939941 151.05532837]
[149.83227539 146.65264893]
[143.78901672 131.79133606]
[130.54643250 124.74620056]
[117.30384064 117.70106506]
[110.87464142 121.56311035]
[119.11848450 134.09463501]
[127.36232758 146.62615967]
[140.00105286 154.70468140]
[139.79252625 169.70323181]
[126.93409729 177.42727661]
[113.59489441 170.56683350]
[112.39900208 155.61466980]
[105.20761871 142.45092773]
[98.01623535 129.28720093]
[91.58703613 133.14923096]
[91.58703613 148.14923096]
[91.58703613 163.14923096]
[91.58703613 178.14923096]
[91.58703613 193.14923096]
[91.58703613 208.14923096]
[91.58703613 223.14923096]
[91.58703613 238.14923096]
[91.58703613 253.14923096]
[91.58703613 268.14923096]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 33]
[12 32]
[13 31]
[15 29]
[16 28]
[17 27]
[18 25]
[19 24]
[35 99]
[36 98]
[37 97]
[38 96]
[39 95]
[40 94]
[41 93]
[46 89]
[47 88]
[48 87]
[49 86]
[100 119]
[101 118]
[102 117]
[103 113]
[104 112]
[105 111]
[106 110]
[120 130]
[121 129]
[122 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
