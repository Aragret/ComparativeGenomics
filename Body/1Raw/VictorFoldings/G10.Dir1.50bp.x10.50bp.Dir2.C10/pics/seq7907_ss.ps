%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAUAGCACCCCCUCUACCCCCUCUAGAGCCCACUGUAAAGCUAACUUAGCAUUAACCUUxxxxxxxxxxAUUUCUCUACUCAGAAACCUGAAACAUCGGCAUUAUCCUCCUGCUUGCAACUAUAGCAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-11.44587517 247.80906677]
[-20.95423317 259.41040039]
[-30.46259308 271.01174927]
[-39.97095108 282.61309814]
[-49.47930908 294.21444702]
[-58.49683762 306.20126343]
[-67.00792694 318.55282593]
[-75.51902008 330.90441895]
[-84.03011322 343.25598145]
[-92.54119873 355.60754395]
[-87.25244904 370.19552612]
[-91.58068848 385.09674072]
[-103.86162567 394.58135986]
[-119.37299347 395.00238037]
[-132.15034485 386.19790649]
[-137.28053284 371.55340576]
[-132.79089355 356.70004272]
[-120.40779114 347.34918213]
[-104.89276886 347.09646606]
[-96.38168335 334.74490356]
[-87.87059021 322.39331055]
[-79.35950470 310.04174805]
[-70.84841156 297.69018555]
[-71.26821136 294.85626221]
[-70.55366516 291.68081665]
[-68.56710815 288.60910034]
[-65.33960724 286.12832642]
[-61.08065033 284.70608521]
[-51.57229233 273.10473633]
[-42.06393433 261.50338745]
[-32.55557632 249.90205383]
[-23.04721642 238.30070496]
[-36.76104736 224.75624084]
[-48.99214935 209.85920715]
[-59.60791397 193.77108765]
[-68.49325562 176.66633606]
[-75.55183411 158.73039246]
[-80.70712280 140.15769958]
[-83.90322876 121.14963531]
[-85.10550690 101.91226959]
[-84.30091095 82.65417480]
[-81.49817657 63.58413315]
[-76.72769165 44.90890503]
[-70.04116058 26.83096123]
[-61.51108932 9.54629612]
[-51.22995758 -6.75769234]
[-39.30922699 -21.90424156]
[-50.18805313 -32.23144531]
[-61.06687546 -42.55865097]
[-76.40250397 -46.44828033]
[-80.30603790 -60.82227325]
[-91.18486786 -71.14948273]
[-102.06369019 -81.47668457]
[-112.94251251 -91.80388641]
[-128.59271240 -98.32368469]
[-126.66011810 -115.16712189]
[-109.93993378 -117.97278595]
[-102.61531067 -102.68271637]
[-91.73648834 -92.35550690]
[-80.85765839 -82.02830505]
[-69.97883606 -71.70110321]
[-55.42133713 -68.55014038]
[-50.73967361 -53.43747711]
[-39.86084747 -43.11027145]
[-28.98202133 -32.78306580]
[-20.54921913 -40.48341751]
[-11.65766239 -47.64914703]
[-2.34118509 -54.25299454]
[7.36475658 -60.26982498]
[17.42322540 -65.67673492]
[27.79594612 -70.45315552]
[38.44344330 -74.58090973]
[49.32519531 -78.04428864]
[60.39979553 -80.83010864]
[71.62509155 -82.92777252]
[82.95837402 -84.32929230]
[94.35650635 -85.02933502]
[105.77612305 -85.02524567]
[117.17375183 -84.31703186]
[128.50602722 -82.90738678]
[139.72981262 -80.80167389]
[150.80241394 -78.00791931]
[161.68168640 -74.53674316]
[172.32621765 -70.40135956]
[182.69551086 -65.61750031]
[192.75010681 -60.20338058]
[202.45172119 -54.17959595]
[211.76347351 -47.56907272]
[220.64988708 -40.39696884]
[229.07716370 -32.69057846]
[237.01324463 -24.47922325]
[248.51504517 -34.10774994]
[260.01684570 -43.73627472]
[271.51864624 -53.36480331]
[276.63400269 -68.94573212]
[292.73840332 -72.04087830]
[303.26504517 -59.46622849]
[297.38500977 -44.15749741]
[281.14718628 -41.86299896]
[269.64538574 -32.23447418]
[258.14355469 -22.60594559]
[246.64176941 -12.97741985]
[256.84445190 1.67645109]
[265.58786011 17.24513626]
[272.79058838 33.58378220]
[278.38568115 50.54037476]
[282.32104492 67.95714569]
[284.56005859 85.67204285]
[285.08190918 103.52025604]
[283.88174438 121.33570862]
[298.69949341 123.66681671]
[313.51724243 125.99791718]
[323.69647217 114.40536499]
[338.53344727 110.17835999]
[353.29376221 114.66571808]
[363.26745605 126.43553925]
[365.27197266 141.73213196]
[358.66766357 155.67437744]
[345.56192017 163.81340027]
[330.13677979 163.55201721]
[317.31433105 154.97367859]
[311.18615723 140.81567383]
[296.36837769 138.48457336]
[281.55062866 136.15347290]
[278.47195435 149.14741516]
[274.46453857 161.88562012]
[269.54925537 174.30177307]
[263.75167847 186.33128357]
[257.10198975 197.91156006]
[249.63475037 208.98231506]
[241.38887024 219.48594666]
[232.40722656 229.36781311]
[222.73657227 238.57646179]
[212.42723083 247.06401062]
[201.53283691 254.78627014]
[190.11009216 261.70306396]
[178.21842957 267.77838135]
[165.91973877 272.98062134]
[153.27803040 277.28271484]
[140.35905457 280.66226196]
[127.23007202 283.10168457]
[113.95939636 284.58828735]
[100.61606598 285.11434937]
[87.26953888 284.67712402]
[73.98925781 283.27886963]
[60.84432602 280.92687988]
[47.90315247 277.63339233]
[35.23307800 273.41555786]
[22.90003777 268.29528809]
[10.96820641 262.29925537]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 32]
[2 31]
[3 30]
[4 29]
[5 28]
[6 23]
[7 22]
[8 21]
[9 20]
[10 19]
[47 65]
[48 64]
[49 63]
[51 61]
[52 60]
[53 59]
[54 58]
[91 102]
[92 101]
[93 100]
[94 99]
[110 124]
[111 123]
[112 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
