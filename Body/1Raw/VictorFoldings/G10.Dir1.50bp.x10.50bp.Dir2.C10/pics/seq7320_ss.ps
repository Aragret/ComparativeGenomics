%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUGGAUGCCCCCCACCCUACCACACAUUCGAAGAACCCGUAUACAUAAAAUCUAGACAAAAAAxxxxxxxxxxAAGCCAUUUACCGUACAUAGCACAUUACAGUCAAAUCCCUUCUCGUCCCCAUGGAUGACCCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[128.78135681 68.23493958]
[120.80995178 80.94150543]
[112.83854675 93.64806366]
[112.13387299 107.61212921]
[99.86801147 114.32333374]
[91.89661407 127.02989960]
[83.92520905 139.73646545]
[75.95380402 152.44302368]
[67.98240662 165.14958191]
[60.01100159 177.85615540]
[64.98867035 192.68034363]
[59.22489548 207.21694946]
[45.44114304 214.60221863]
[30.14568901 211.34906006]
[20.56057358 198.99351501]
[21.21159744 183.36949158]
[31.79136848 171.85417175]
[47.30443954 169.88475037]
[55.27584076 157.17819214]
[63.24724579 144.47161865]
[71.21864319 131.76506042]
[79.19004822 119.05849457]
[87.16145325 106.35193634]
[87.86612701 92.38787079]
[100.13198853 85.67666626]
[108.10338593 72.97010040]
[116.07479095 60.26353836]
[103.75953674 51.69498825]
[91.86593628 42.55015564]
[80.42093658 32.84976578]
[69.45046997 22.61578369]
[58.97937775 11.87139702]
[49.03138351 0.64094537]
[39.62902832 -11.05013084]
[30.79360390 -23.17534828]
[22.54512978 -35.70723724]
[14.90229130 -48.61741257]
[7.88240194 -61.87662888]
[1.50136268 -75.45484161]
[-4.22637033 -89.32130432]
[-9.28782272 -103.44458771]
[-13.67152691 -117.79271698]
[-17.36755371 -132.33317566]
[-20.36753082 -147.03303528]
[-22.66466141 -161.85897827]
[-24.25374222 -176.77743530]
[-25.13117409 -191.75460815]
[-25.29496765 -206.75657654]
[-24.74475288 -221.74932861]
[-23.48177528 -236.69892883]
[-21.50889778 -251.57150269]
[-18.83058739 -266.33334351]
[-15.45291328 -280.95104980]
[-11.38352585 -295.39144897]
[-6.63164425 -309.62188721]
[-1.20803225 -323.61010742]
[4.87502337 -337.32440186]
[11.60374260 -350.73373413]
[18.96288300 -363.80770874]
[26.93577194 -376.51669312]
[35.50434875 -388.83193970]
[44.64920807 -400.72549438]
[54.34962463 -412.17047119]
[64.58363342 -423.14093018]
[75.32804108 -433.61199951]
[86.55851746 -443.55996704]
[98.24961090 -452.96228027]
[110.37484741 -461.79769897]
[122.90676117 -470.04614258]
[135.81695557 -477.68893433]
[149.07618713 -484.70880127]
[162.65440369 -491.08981323]
[176.52088928 -496.81750488]
[190.64418030 -501.87893677]
[204.99232483 -506.26260376]
[219.53279114 -509.95858765]
[234.23265076 -512.95855713]
[249.05860901 -515.25561523]
[263.97708130 -516.84466553]
[278.95425415 -517.72210693]
[293.95620728 -517.88586426]
[308.94894409 -517.33557129]
[323.89855957 -516.07257080]
[338.77111816 -514.09967041]
[353.53295898 -511.42132568]
[368.15063477 -508.04360962]
[382.59106445 -503.97421265]
[396.82147217 -499.22229004]
[410.80969238 -493.79864502]
[424.52395630 -487.71554565]
[437.93325806 -480.98681641]
[451.00723267 -473.62765503]
[463.71621704 -465.65472412]
[476.03143311 -457.08612061]
[487.92498779 -447.94122314]
[499.36993408 -438.24078369]
[510.34036255 -428.00674438]
[520.81140137 -417.26232910]
[530.75933838 -406.03182983]
[540.16162109 -394.34069824]
[548.99700928 -382.21545410]
[557.24542236 -369.68353271]
[564.88818359 -356.77331543]
[571.90802002 -343.51406860]
[578.28900146 -329.93582153]
[584.01666260 -316.06933594]
[589.07806396 -301.94601440]
[593.46173096 -287.59786987]
[597.15765381 -273.05740356]
[600.15759277 -258.35754395]
[602.45465088 -243.53157043]
[604.04364014 -228.61311340]
[604.92102051 -213.63594055]
[605.08477783 -198.63397217]
[604.53448486 -183.64122009]
[603.27142334 -168.69161987]
[601.29846191 -153.81906128]
[598.62011719 -139.05722046]
[595.24237061 -124.43954468]
[591.17291260 -109.99914551]
[586.42095947 -95.76873779]
[580.99731445 -81.78054810]
[574.91418457 -68.06627655]
[568.18536377 -54.65698624]
[560.82617188 -41.58304977]
[552.85327148 -28.87409019]
[544.28460693 -16.55889130]
[535.13970947 -4.66535521]
[525.43920898 6.77957678]
[515.20520020 17.74997711]
[504.46072388 28.22099686]
[493.23019409 38.16891098]
[481.53906250 47.57118988]
[469.41378784 56.40653229]
[456.88183594 64.65492249]
[443.97161865 72.29766846]
[430.71234131 79.31746674]
[417.13409424 85.69841766]
[403.26757812 91.42605591]
[389.14425659 96.48741150]
[374.79611206 100.87101746]
[360.25561523 104.56694794]
[345.55575562 107.56682587]
[330.72979736 109.86385345]
[315.81130981 111.45283508]
[300.83413696 112.33016205]
[285.83218384 112.49385834]
[270.83941650 111.94354248]
[255.88983154 110.68045807]
[241.01727295 108.70748138]
[226.25544739 106.02906799]
[211.63777161 102.65129852]
[197.19738770 98.58181000]
[182.96697998 93.82983398]
[168.97880554 88.40612793]
[155.26454163 82.32297516]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 27]
[2 26]
[3 25]
[5 23]
[6 22]
[7 21]
[8 20]
[9 19]
[10 18]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
