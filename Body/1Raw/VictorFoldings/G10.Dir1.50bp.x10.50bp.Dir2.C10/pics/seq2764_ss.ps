%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAGCAUAAUCACUUGUUCCUUAAAUAGGGACCUGUAUGAAUGGCUCCACGAGGGUUCAGCUxxxxxxxxxxAUAUUUACAGUAGGAAUAGACGUAGACACACGAGCAUAUUUCACCUCCGCUACCAUAAUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[94.37647247 390.32757568]
[94.37647247 375.32757568]
[94.37647247 360.32757568]
[94.37647247 345.32757568]
[94.37647247 330.32757568]
[94.37647247 315.32757568]
[94.37647247 300.32757568]
[94.37647247 285.32757568]
[94.37647247 270.32757568]
[94.37647247 255.32757568]
[79.33471680 251.73005676]
[65.57643127 244.64657593]
[53.89677429 234.48188782]
[44.97187424 221.81887817]
[39.31971359 207.38528442]
[37.27003860 192.01179504]
[38.94514465 176.58422852]
[44.25257874 161.99253845]
[52.89023590 149.07946777]
[64.36354828 138.59182739]
[78.01380157 131.13737488]
[93.05596924 127.14955139]
[81.88638306 123.89530182]
[72.33937836 115.98256683]
[66.36022949 104.25151825]
[51.70750427 107.46051788]
[37.05477905 110.66950989]
[22.40205383 113.87850952]
[7.74932861 117.08750153]
[-6.90339613 120.29650116]
[-16.73389244 132.97486877]
[-32.77677155 133.04981995]
[-42.72530746 120.46386719]
[-38.94783783 104.87187195]
[-24.34210968 98.23468018]
[-10.11239243 105.64377594]
[4.54033232 102.43477631]
[19.19305801 99.22578430]
[33.84578323 96.01678467]
[48.49850845 92.80779266]
[63.15122986 89.59879303]
[69.97480774 76.24069214]
[63.98651123 62.48786545]
[57.99821472 48.73503494]
[52.00991821 34.98220825]
[46.02162170 21.22937775]
[37.60821152 8.81106377]
[27.05619621 -1.84984469]
[16.50418091 -12.51075363]
[5.95216513 -23.17166138]
[-4.59985018 -33.83257294]
[-17.50986290 -34.69002914]
[-26.08159828 -43.83861923]
[-26.09559441 -55.97377396]
[-36.42649460 -66.84909058]
[-46.75740051 -77.72440338]
[-62.04995728 -85.04383087]
[-59.24997711 -101.76496887]
[-42.40719604 -103.70328522]
[-35.88208389 -88.05530548]
[-25.55118179 -77.17999268]
[-15.22027969 -66.30467987]
[1.83335793 -62.27752304]
[6.06105900 -44.38458633]
[16.61307335 -33.72367859]
[27.16508865 -23.06276894]
[37.71710587 -12.40186024]
[48.26911926 -1.74095094]
[44.85483551 -16.34720421]
[46.03543854 -31.30067253]
[51.69951248 -45.19017410]
[61.31253433 -56.70493698]
[73.96730804 -64.75830078]
[88.46958923 -68.59025574]
[103.45077515 -67.83917236]
[117.49707031 -62.57594299]
[129.28289795 -53.29725266]
[137.69602966 -40.87874985]
[141.94250488 -26.49238396]
[141.62156677 -11.49581814]
[136.76350403 2.69570327]
[127.82679749 14.74290657]
[115.65479279 23.50888062]
[101.39618683 28.16636848]
[86.39658356 28.27583504]
[72.07151794 23.82695389]
[59.77444839 15.24108219]
[65.76274872 28.99391174]
[71.75104523 42.74673843]
[77.73934174 56.49956894]
[83.72763824 70.25239563]
[109.21371460 70.43708038]
[125.03543854 87.40854645]
[139.75096130 84.50107574]
[154.46647644 81.59359741]
[169.08549500 78.23434448]
[183.59411621 74.42648315]
[198.10273743 70.61862183]
[212.61137390 66.81076813]
[227.08013916 62.85415649]
[239.54985046 49.34353638]
[256.38314819 54.21017456]
[270.72323608 49.80987167]
[285.06329346 45.40957260]
[292.24627686 31.33192253]
[307.30535889 26.53619957]
[321.30630493 33.86762238]
[325.94253540 48.97658539]
[318.46350098 62.89921188]
[303.30636597 67.37545013]
[289.46359253 59.74963379]
[275.12353516 64.14993286]
[260.78344727 68.55023193]
[254.81190491 79.11445618]
[242.85224915 82.87448120]
[231.18507385 77.28153992]
[225.57766724 82.16714478]
[216.41921997 81.31938934]
[201.91059875 85.12725067]
[187.40197754 88.93510437]
[172.89335632 92.74296570]
[170.79591370 95.64950562]
[167.15763855 97.65763092]
[162.42916870 98.04121399]
[157.37396240 96.30912018]
[142.65843201 99.21659851]
[127.94290924 102.12406921]
[124.89515686 112.86659241]
[117.89460754 121.56620026]
[108.05280304 126.84157562]
[122.30513000 129.88490295]
[135.51029968 136.03263855]
[147.00201416 144.97090149]
[156.20127869 156.24504089]
[162.64552307 169.28288269]
[166.01191711 183.42369080]
[166.13352966 197.95162964]
[163.00755310 212.13209534]
[156.79534912 225.24876404]
[147.81407166 236.63984680]
[136.52050781 245.73144531]
[123.48782349 252.06645203]
[109.37647247 255.32757568]
[109.37647247 270.32757568]
[109.37647247 285.32757568]
[109.37647247 300.32757568]
[109.37647247 315.32757568]
[109.37647247 330.32757568]
[109.37647247 345.32757568]
[109.37647247 360.32757568]
[109.37647247 375.32757568]
[109.37647247 390.32757568]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[22 130]
[25 41]
[26 40]
[27 39]
[28 38]
[29 37]
[30 36]
[42 91]
[43 90]
[44 89]
[45 88]
[46 87]
[47 68]
[48 67]
[49 66]
[50 65]
[51 64]
[54 62]
[55 61]
[56 60]
[93 127]
[94 126]
[95 125]
[96 121]
[97 120]
[98 119]
[99 118]
[100 116]
[102 113]
[103 112]
[104 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
