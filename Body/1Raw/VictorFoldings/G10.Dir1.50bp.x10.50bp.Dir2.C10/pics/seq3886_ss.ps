%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCUCCACCCUUAUCACAACACAAGAACACCUCUGAUUACUCCUGCCAUCAUGACCCUUGGxxxxxxxxxxACACCUCUGAUUACUCCUGCCAUCAUGACCCUUGGCCAUAAUAUGAUUUAUCUCCACACUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[91.42057037 442.15994263]
[91.42057037 427.15994263]
[91.42057037 412.15994263]
[91.42057037 397.15994263]
[91.42057037 382.15994263]
[91.42057037 367.15994263]
[91.42057037 352.15994263]
[91.42057037 337.15994263]
[91.42057037 322.15994263]
[91.42057037 307.15994263]
[75.92000580 303.52304077]
[61.71773148 296.30801392]
[49.62686539 285.92343140]
[40.34070206 272.95950317]
[34.39295578 258.15451050]
[32.12709045 242.35270691]
[33.67648315 226.45622253]
[38.95658875 211.37355042]
[47.66952515 197.96759033]
[59.32089996 187.00636292]
[73.24784088 179.11892700]
[88.65673065 174.75932312]
[88.03275299 159.77230835]
[87.40877533 144.78529358]
[86.78479767 129.79827881]
[86.26081848 144.78912354]
[76.67015076 156.32250977]
[62.02633286 159.57191467]
[48.45756531 153.17750549]
[41.64215469 139.81523132]
[44.43224335 125.07701111]
[55.66022110 115.13052368]
[70.62858582 114.13855743]
[55.62939453 113.98252106]
[40.63020706 113.82648468]
[28.20869064 123.97959137]
[12.55698681 120.45770264]
[5.68174028 105.96250916]
[12.85705280 91.61348724]
[28.57863808 88.41797638]
[40.78624344 98.82730103]
[55.78543091 98.98333740]
[70.78462219 99.13937378]
[82.45606232 82.93894196]
[98.86981964 80.31685638]
[103.77136993 66.14029694]
[108.67292023 51.96374130]
[113.57447052 37.78718185]
[106.59556580 29.56918335]
[103.71341705 19.26426888]
[105.39065552 8.77830029]
[111.25310516 0.02135068]
[120.17053986 -5.44021940]
[130.47404480 -6.66378450]
[136.25032043 -20.50700188]
[142.02659607 -34.35021973]
[147.80287170 -48.19343948]
[152.99827576 -62.26495743]
[157.60385132 -76.54042053]
[162.20941162 -90.81587982]
[166.81497192 -105.09133911]
[171.42054749 -119.36679840]
[176.02610779 -133.64225769]
[174.91587830 -137.99299622]
[175.25410461 -142.04968262]
[176.76103210 -145.38299561]
[179.04386902 -147.70304871]
[181.65376282 -148.88449097]
[187.43003845 -162.72770691]
[193.20631409 -176.57092285]
[180.76280212 -185.04112244]
[170.27931213 -195.84301758]
[162.18511963 -208.53431702]
[156.81166077 -222.59529114]
[154.37901306 -237.45014954]
[154.98675537 -252.49061584]
[158.61001587 -267.10076904]
[165.10043335 -280.68237305]
[174.19221497 -292.67919922]
[185.51306152 -302.60006714]
[198.59939575 -310.03866577]
[212.91532898 -314.69039917]
[227.87464905 -316.36480713]
[242.86477661 -314.99328613]
[257.27188110 -310.63204956]
[270.50598145 -303.45962524]
[282.02514648 -293.76977539]
[291.35769653 -281.95925903]
[298.12145996 -268.51171875]
[302.03948975 -253.97781372]
[302.95129395 -238.95271301]
[300.81954956 -224.05169678]
[295.73159790 -209.88491821]
[287.89572144 -197.03251648]
[277.63284302 -186.02079773]
[265.36318970 -177.30067444]
[251.58921814 -171.22923279]
[236.87495422 -168.05508423]
[221.82292175 -167.90821838]
[207.04953003 -170.79464722]
[201.27325439 -156.95143127]
[195.49697876 -143.10821533]
[190.30155945 -129.03669739]
[185.69599915 -114.76123810]
[181.09043884 -100.48577118]
[176.48487854 -86.21031189]
[171.87930298 -71.93485260]
[167.27374268 -57.65939331]
[168.48968506 -55.06539536]
[168.71713257 -51.81851196]
[167.69636536 -48.30569077]
[165.31723022 -45.00255203]
[161.64608765 -42.41716385]
[155.86981201 -28.57394791]
[150.09353638 -14.73073006]
[144.31726074 -0.88751203]
[153.06748962 16.45619583]
[146.23231506 34.96287918]
[127.75102997 42.68873215]
[122.84947968 56.86529160]
[117.94792938 71.04184723]
[113.04637909 85.21840668]
[123.14157104 107.95846558]
[101.77181244 129.17430115]
[102.39579010 144.16131592]
[103.01976776 159.14833069]
[103.64374542 174.13534546]
[117.55113220 176.64166260]
[130.61769104 182.00665283]
[142.26318359 189.98921204]
[151.97111511 200.23207092]
[159.31156921 212.27775574]
[163.96031189 225.58906555]
[165.71305847 239.57302856]
[164.49447632 253.60725403]
[160.36143494 267.06768799]
[153.50033569 279.35641479]
[144.21865845 289.92803955]
[132.93130493 298.31411743]
[120.14194489 304.14370728]
[106.42057037 307.15994263]
[106.42057037 322.15994263]
[106.42057037 337.15994263]
[106.42057037 352.15994263]
[106.42057037 367.15994263]
[106.42057037 382.15994263]
[106.42057037 397.15994263]
[106.42057037 412.15994263]
[106.42057037 427.15994263]
[106.42057037 442.15994263]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[22 127]
[23 126]
[24 125]
[25 124]
[33 43]
[34 42]
[35 41]
[45 122]
[46 121]
[47 120]
[48 119]
[54 116]
[55 115]
[56 114]
[57 113]
[58 108]
[59 107]
[60 106]
[61 105]
[62 104]
[63 103]
[68 102]
[69 101]
[70 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
