%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAUUAAUUAAUGCUUGUAGGACAUAAUAAUAACAAUUGAAUGUCUGCACAGCCACUUUCCxxxxxxxxxxCUCAAUAGCCAUCGCUGUAGUAUAUCCAAAGACAACCAUCAUUCCCCCUAAAUAAAUUAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[116.42196655 425.12274170]
[116.42196655 410.12274170]
[116.42196655 395.12274170]
[116.42196655 380.12274170]
[116.42196655 365.12274170]
[116.42196655 350.12274170]
[116.42196655 335.12274170]
[116.42196655 320.12274170]
[116.42196655 305.12274170]
[116.42196655 290.12274170]
[97.72505951 285.03634644]
[81.37873077 274.60519409]
[68.87082672 259.76840210]
[61.34289551 241.86662292]
[59.48597717 222.52075195]
[63.47721481 203.48530579]
[72.96296692 186.48924255]
[87.09014130 173.07890320]
[104.58289337 164.47738647]
[101.79056549 149.73957825]
[98.99824524 135.00178528]
[96.20591736 120.26396942]
[87.95166779 116.72905731]
[81.98301697 110.02058411]
[67.11997223 112.04291534]
[52.25692749 114.06524658]
[37.39387894 116.08758545]
[33.55711746 130.79634094]
[24.37962532 142.91418457]
[11.26090527 150.59323120]
[-3.79853344 152.66246033]
[-18.50223541 148.80635071]
[-30.60799408 139.61293030]
[-38.26976776 126.48412323]
[-40.31919479 111.42197418]
[-36.44374847 96.72335815]
[-27.23440742 84.62969971]
[-14.09552956 76.98520660]
[0.96930152 74.95559692]
[15.66280842 78.85037231]
[27.74433708 88.07561493]
[35.37154388 101.22454071]
[50.23459244 99.20220184]
[65.09764099 97.17987061]
[79.96068573 95.15753174]
[86.60276031 84.33036041]
[98.33061218 79.45159912]
[102.63819885 65.08341217]
[95.39966583 51.29061508]
[99.97284698 36.78059769]
[113.16677856 29.96475792]
[117.47436523 15.59657383]
[121.78195190 1.22838950]
[126.08953857 -13.13979435]
[130.39712524 -27.50797844]
[133.49543762 -42.18450546]
[135.36305237 -57.06778336]
[137.07574463 -71.96968842]
[138.63333130 -86.88859558]
[140.19090271 -101.80751038]
[141.74848938 -116.72642517]
[143.30606079 -131.64533997]
[128.90585327 -136.00769043]
[115.59156036 -143.01670837]
[103.84452057 -152.41902161]
[94.08936310 -163.87472534]
[86.67873383 -176.96974182]
[81.88053131 -191.23065186]
[79.86820221 -206.14195251]
[80.71448517 -221.16461182]
[84.38879395 -235.75556946]
[90.75830078 -249.38737488]
[99.59275818 -261.56723022]
[110.57279968 -271.85485840]
[123.30150604 -279.87832642]
[137.31874084 -285.34765625]
[152.11779785 -288.06512451]
[167.16369629 -287.93243408]
[181.91252136 -284.95443726]
[195.83113098 -279.23880005]
[208.41638184 -270.99209595]
[219.21330261 -260.51245117]
[227.83160400 -248.17869568]
[233.95973206 -234.43669128]
[237.37617493 -219.78321838]
[237.95741272 -204.74797058]
[235.68244934 -189.87446594]
[230.63351440 -175.70037842]
[222.99311829 -162.73809814]
[213.03746033 -151.45617676]
[201.12644958 -142.26248169]
[187.69062805 -135.48933411]
[173.21572876 -131.38159180]
[158.22497559 -130.08775330]
[156.66740417 -115.16883850]
[155.10981750 -100.24993134]
[153.55223083 -85.33101654]
[151.99465942 -70.41210938]
[154.44404602 -63.38742447]
[150.24633789 -55.20017242]
[148.37872314 -40.31689072]
[159.93205261 -49.88352585]
[174.89102173 -50.99234390]
[187.72856140 -43.23365402]
[193.70149231 -29.47414017]
[190.60290527 -14.79767036]
[179.57768250 -4.62690592]
[164.69941711 -2.71974182]
[151.46533203 -9.78083801]
[144.76530457 -23.20039368]
[140.45771790 -8.83220959]
[136.15013123 5.53597403]
[131.84254456 19.90415764]
[127.53496552 34.27234268]
[134.80299377 47.22268295]
[130.63917542 61.85542679]
[117.00638580 69.39099884]
[112.69879913 83.75918579]
[120.58821869 101.07182312]
[110.94372559 117.47164917]
[113.73605347 132.20945740]
[116.52837372 146.94726562]
[119.32070160 161.68505859]
[130.43763733 161.87440491]
[141.35406494 163.96276855]
[151.74812317 167.88714600]
[161.31362915 173.53038025]
[169.76901245 180.72476196]
[176.86570740 189.25686646]
[182.39540100 198.87405396]
[186.19615173 209.29180908]
[188.15715027 220.20225525]
[188.22193909 231.28317261]
[186.39001465 242.20759583]
[182.71685791 252.65338135]
[177.31217957 262.31277466]
[170.33671570 270.90145874]
[161.99739075 278.16687012]
[152.54122925 283.89572144]
[142.24800110 287.92013550]
[131.42196655 290.12274170]
[131.42196655 305.12274170]
[131.42196655 320.12274170]
[131.42196655 335.12274170]
[131.42196655 350.12274170]
[131.42196655 365.12274170]
[131.42196655 380.12274170]
[131.42196655 395.12274170]
[131.42196655 410.12274170]
[131.42196655 425.12274170]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[19 123]
[20 122]
[21 121]
[22 120]
[24 45]
[25 44]
[26 43]
[27 42]
[47 118]
[48 117]
[51 114]
[52 113]
[53 112]
[54 111]
[55 110]
[56 101]
[57 100]
[58 98]
[59 97]
[60 96]
[61 95]
[62 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
