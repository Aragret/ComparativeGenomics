%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAACUACGCCCUGAUCGGCGCACUGCGAGCAGUAGCCCAAACAAUCUCAUAUGAAGUCACxxxxxxxxxxGGAGGCUUCAUUCACUGAUUUCCCCUAUUCUCAGGCUACACCCUAGACCAAACCUACGCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[108.80390167 376.52691650]
[108.80390167 361.52691650]
[108.80390167 346.52691650]
[108.80390167 331.52691650]
[108.80390167 316.52691650]
[108.80390167 301.52691650]
[108.80390167 286.52691650]
[108.80390167 271.52691650]
[108.80390167 256.52691650]
[108.80390167 241.52693176]
[93.91448975 243.34500122]
[79.87714386 238.05795288]
[69.88668060 226.86909485]
[66.21688843 212.32493591]
[69.70299530 197.73565674]
[79.55156708 186.42169189]
[93.52112579 180.95805359]
[108.43228149 182.58824158]
[120.89132690 190.94120789]
[128.06320190 204.11799622]
[123.16165161 189.94143677]
[118.26010132 175.76487732]
[113.35855103 161.58831787]
[108.45700073 147.41175842]
[83.78514099 145.34837341]
[63.39845657 131.30053711]
[52.68465042 108.98074341]
[37.69195175 109.44878387]
[22.69925690 109.91683197]
[13.27857304 118.78839111]
[0.73995882 118.83439636]
[-8.15600014 110.57793427]
[-23.15518951 110.73397064]
[-38.15437698 110.89000702]
[-53.15356445 111.04604340]
[-66.98648834 119.85411835]
[-81.40399933 112.03954315]
[-81.57458496 95.64128113]
[-67.32277679 87.52845764]
[-53.30960083 96.04685211]
[-38.31041336 95.89081573]
[-23.31122589 95.73477936]
[-8.31203651 95.57874298]
[6.25063848 85.83562469]
[22.23121452 94.92413330]
[37.22391129 94.45609283]
[52.21660614 93.98805237]
[54.70991898 83.62303925]
[59.42243576 74.06050110]
[66.12324524 65.76899719]
[74.48400879 59.15479660]
[84.09505463 54.54201126]
[94.48543549 52.15665436]
[95.10941315 37.16963959]
[95.73339081 22.18262100]
[96.35736847 7.19560575]
[82.32440186 -1.49084139]
[74.61418152 -15.97697639]
[75.23892212 -32.28157043]
[83.93462372 -45.97707367]
[98.25842285 -53.39194107]
[98.57048035 -68.38869476]
[98.88253784 -83.38545227]
[99.19459534 -98.38220215]
[99.50665283 -113.37895966]
[99.81870270 -128.37571716]
[100.13076019 -143.37246704]
[100.44281769 -158.36921692]
[86.39596558 -164.11816406]
[75.37711334 -174.55604553]
[68.87647247 -188.27122498]
[67.77320099 -203.40882874]
[72.21650696 -217.92163086]
[81.60546875 -229.84689331]
[94.67031097 -237.57182312]
[109.64411163 -240.05168152]
[124.50179291 -236.95108032]
[137.23397827 -228.68936157]
[146.11874390 -216.38386536]
[149.95448303 -201.69879150]
[148.22247314 -186.62017822]
[141.15692139 -173.18728638]
[129.71340942 -163.21681213]
[115.43957520 -158.05715942]
[115.12751770 -143.06040955]
[114.81546021 -128.06365967]
[114.50340271 -113.06690216]
[114.19134521 -98.07014465]
[113.87928772 -83.07339478]
[113.56723785 -68.07663727]
[113.25518036 -53.07988739]
[125.40650177 -46.77077866]
[133.68269348 -35.78061676]
[136.41572571 -22.22929955]
[133.01371765 -8.76188087]
[124.08806610 1.96769428]
[111.34438324 7.81958294]
[110.72040558 22.80659866]
[110.09642792 37.79361725]
[109.47245026 52.78063202]
[119.68621063 56.04719543]
[128.92396545 61.49285507]
[136.72772217 68.84762573]
[142.71058655 77.74687958]
[146.57594299 87.74939728]
[148.13215637 98.35927582]
[147.30206299 109.05049896]
[144.12681580 119.29301453]
[138.76383972 128.57902527]
[131.47903442 136.44813538]
[122.63356018 142.51020813]
[127.53511047 156.68676758]
[132.43666077 170.86332703]
[137.33821106 185.03988647]
[142.23976135 199.21644592]
[152.90138245 209.76773071]
[167.12817383 214.52154541]
[181.35494995 219.27536011]
[196.29385376 213.42655945]
[210.10818481 221.58398438]
[212.20077515 237.48999023]
[200.96635437 248.94282532]
[185.02302551 247.15686035]
[176.60113525 233.50213623]
[162.37435913 228.74832153]
[148.14756775 223.99450684]
[142.06166077 228.37762451]
[152.26773071 239.37016296]
[162.47380066 250.36271667]
[172.67987061 261.35525513]
[186.58946228 266.96981812]
[193.46116638 280.30322266]
[189.96255493 294.88949585]
[177.79028320 303.65512085]
[162.84722900 302.34918213]
[152.37998962 291.60504150]
[151.46397400 276.63504028]
[144.27258301 263.47131348]
[137.08120728 250.30755615]
[129.88981628 237.14382935]
[123.80390167 241.52693176]
[123.80390167 256.52691650]
[123.80390167 271.52691650]
[123.80390167 286.52691650]
[123.80390167 301.52691650]
[123.80390167 316.52691650]
[123.80390167 331.52691650]
[123.80390167 346.52691650]
[123.80390167 361.52691650]
[123.80390167 376.52691650]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[20 115]
[21 114]
[22 113]
[23 112]
[24 111]
[27 47]
[28 46]
[29 45]
[32 43]
[33 42]
[34 41]
[35 40]
[53 100]
[54 99]
[55 98]
[56 97]
[61 91]
[62 90]
[63 89]
[64 88]
[65 87]
[66 86]
[67 85]
[68 84]
[116 126]
[117 125]
[118 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
