%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUACGAGCCACAGCUUAAAACUCAAAGGACCUGGCGGUGCUUCAUAUCCCUCUAGAGGAGCCxxxxxxxxxxGGAUUCUACCCUAGCAUCACACACCGCACAAUCCCCUAUCUAGGCCUUCUUACGAGCCAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[90.98231506 266.34216309]
[90.67433929 251.34532166]
[90.36636353 236.34849548]
[90.05838013 221.35165405]
[89.75040436 206.35481262]
[89.44242859 191.35797119]
[89.13445282 176.36114502]
[88.82646942 161.36430359]
[88.51849365 146.36746216]
[74.70491028 140.52067566]
[63.72410965 150.73937988]
[66.00501251 167.46952820]
[57.96445465 182.12823486]
[42.93110657 189.05718994]
[26.88783073 185.71603394]
[16.11915207 196.15803528]
[5.35047340 206.60005188]
[1.38550675 222.51264954]
[-14.45017338 226.77449036]
[-25.86617661 215.00134277]
[-21.11869812 199.30442810]
[-5.09153557 195.83135986]
[5.67714310 185.38935852]
[16.44582176 174.94734192]
[13.34129047 161.92759705]
[17.12082100 148.97451782]
[26.89589119 139.51654053]
[40.17661667 136.11216736]
[53.50540161 139.75857544]
[64.48620605 129.53987122]
[55.42864990 105.47724915]
[60.70892715 81.05532837]
[77.87413788 63.90941238]
[100.88568878 58.96335220]
[103.94408417 44.27845383]
[107.00248718 29.59355545]
[110.06088257 14.90865803]
[108.74431610 5.80577660]
[113.33576202 -0.04493029]
[116.69502258 -14.66393757]
[120.05428314 -29.28294563]
[123.41354370 -43.90195465]
[124.79756927 -58.83796692]
[124.18173981 -73.82531738]
[123.56591797 -88.81267548]
[122.95008850 -103.80002594]
[122.33426666 -118.78737640]
[121.71843719 -133.77473450]
[106.88249969 -136.31909180]
[92.90528107 -141.89045715]
[80.39682770 -150.24302673]
[69.90254211 -161.00967407]
[61.87940216 -173.71810913]
[56.67604065 -187.81152344]
[54.51762390 -202.67304993]
[55.49608994 -217.65272522]
[59.56623840 -232.09593201]
[66.54782104 -245.37202454]
[76.13352203 -256.90179443]
[87.90246582 -266.18286133]
[101.33872223 -272.81143188]
[115.85390472 -276.49996948]
[115.23808289 -291.48730469]
[114.62225342 -306.47467041]
[114.00643158 -321.46203613]
[110.74806976 -327.32937622]
[110.95759583 -333.08645630]
[113.68580627 -337.07467651]
[105.94850922 -350.87484741]
[113.68580627 -363.60214233]
[113.68580627 -378.60214233]
[100.34468079 -386.21197510]
[92.60971069 -399.48095703]
[92.56156921 -414.83978271]
[100.21320343 -428.15698242]
[113.50636292 -435.85034180]
[128.86524963 -435.85034180]
[142.15841675 -428.15698242]
[149.81004333 -414.83978271]
[149.76190186 -399.48095703]
[142.02693176 -386.21197510]
[128.68580627 -378.60214233]
[128.68580627 -363.60214233]
[136.42311096 -350.87484741]
[128.68580627 -337.07467651]
[128.99378967 -322.07785034]
[129.60960388 -307.09048462]
[130.22543335 -292.10314941]
[130.84126282 -277.11578369]
[145.61012268 -274.63055420]
[159.54489136 -269.12664795]
[172.03559875 -260.84237671]
[182.53489685 -250.13789368]
[190.58212280 -237.47933960]
[195.82348633 -223.41873169]
[198.02760315 -208.56982422]
[197.09570312 -193.58132935]
[193.06613159 -179.10853577]
[186.11264038 -165.78471375]
[176.53703308 -154.19338989]
[164.75599670 -144.84277344]
[151.28297424 -138.14349365]
[136.70579529 -134.39056396]
[137.32162476 -119.40320587]
[137.93743896 -104.41584778]
[138.55326843 -89.42849731]
[139.16909790 -74.44114685]
[139.78492737 -59.45379257]
[147.74917603 -72.16483307]
[160.13224792 -80.63002777]
[174.86737061 -83.43653107]
[189.49519348 -80.11592102]
[201.57434082 -71.22241974]
[209.08874512 -58.24036407]
[210.78425598 -43.33649826]
[206.37786865 -28.99830246]
[196.60504150 -17.61885834]
[183.09686279 -11.09741592]
[168.10789490 -10.52242088]
[154.13980103 -15.98983955]
[143.52392578 -26.58714867]
[138.03254700 -40.54269409]
[134.67329407 -25.92368698]
[131.31402588 -11.30467892]
[127.95477295 3.31432843]
[124.74577332 17.96705246]
[121.68737793 32.65195084]
[118.62898254 47.33684921]
[115.57058716 62.02174759]
[122.70454407 65.36458588]
[129.12814331 70.04590607]
[134.59065247 75.91596985]
[138.87274170 82.77815247]
[141.79515076 90.39553070]
[143.22610474 98.49899292]
[143.08703613 106.79677582]
[141.35638428 114.98493958]
[138.07136536 122.75849915]
[133.32760620 129.82281494]
[127.27642059 135.90467834]
[120.12021637 140.76293945]
[112.10567474 144.19790649]
[103.51533508 146.05947876]
[103.82331085 161.05632019]
[104.13128662 176.05316162]
[104.43926239 191.05000305]
[104.74724579 206.04682922]
[105.05522156 221.04367065]
[105.36319733 236.04051208]
[105.67117310 251.03735352]
[105.97915649 266.03417969]
[108.56492615 285.24261475]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 151]
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 30]
[11 29]
[15 24]
[16 23]
[17 22]
[34 129]
[35 128]
[36 127]
[37 126]
[39 125]
[40 124]
[41 123]
[42 122]
[43 108]
[44 107]
[45 106]
[46 105]
[47 104]
[48 103]
[62 89]
[63 88]
[64 87]
[65 86]
[68 85]
[70 83]
[71 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
