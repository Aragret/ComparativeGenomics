%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCCAUAAACCUGGAGUGACUAUAUGGAUGCCCCCCACCCUACCACACAUUCGAAGAACCCGxxxxxxxxxxCUAACCUCCUCGGACUCCUGCCUCACUCAUUUACACCAACCACCCAACUAUCUAUAAACCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[139.99090576 84.56909943]
[127.15725708 92.33423615]
[114.32360077 100.09937286]
[107.41516113 112.25523376]
[93.44153595 112.73428345]
[80.60787964 120.49942017]
[67.77423096 128.26455688]
[54.94057465 136.02969360]
[42.10691833 143.79483032]
[29.27326584 151.55995178]
[16.60174942 159.58695984]
[4.09771442 167.87243652]
[-8.40632153 176.15789795]
[-20.91035652 184.44337463]
[-33.41439438 192.72885132]
[-45.91843033 201.01432800]
[-42.64275360 215.83439636]
[-44.94577026 230.83641052]
[-52.51601410 243.99148560]
[-64.32966614 253.52049255]
[-78.78903961 258.13470459]
[-93.93861389 257.21011353]
[-107.72953033 250.87174988]
[-118.29669189 239.97680664]
[-124.21096802 225.99876404]
[-124.67250061 210.82801819]
[-119.61888123 196.51629639]
[-109.73355865 184.99914551]
[-96.35344696 177.83415222]
[-81.28810120 175.99034119]
[-66.57497406 179.71705627]
[-54.20390320 188.51029968]
[-41.69986725 180.22482300]
[-29.19583130 171.93934631]
[-16.69179535 163.65386963]
[-4.18776035 155.36839294]
[8.31627560 147.08291626]
[10.13391495 142.60571289]
[14.81729698 139.25103760]
[21.50813103 138.72630310]
[34.34178543 130.96116638]
[47.17543793 123.19603729]
[60.00909042 115.43090057]
[72.84274292 107.66576385]
[85.67639923 99.90062714]
[92.58483887 87.74476624]
[106.55846405 87.26571655]
[119.39212036 79.50057983]
[132.22576904 71.73545074]
[125.23236847 58.46046066]
[119.03766632 44.79449463]
[113.66342926 30.78554916]
[109.12853241 16.48283386]
[105.44889832 1.93658745]
[102.63746643 -12.80209637]
[100.70410156 -27.68144608]
[99.65559387 -42.64919662]
[99.49562836 -57.65277481]
[100.22476959 -72.63948059]
[101.84045410 -87.55667114]
[104.33700562 -102.35194397]
[107.70565796 -116.97334290]
[111.93457794 -131.36949158]
[117.00890350 -145.48983765]
[122.91082764 -159.28477478]
[129.61959839 -172.70585632]
[137.11167908 -185.70591736]
[145.36071777 -198.23931885]
[154.33776855 -210.26203918]
[164.01127625 -221.73182678]
[174.34729004 -232.60839844]
[185.30947876 -242.85356140]
[196.85934448 -252.43132019]
[208.95632935 -261.30804443]
[221.55792236 -269.45254517]
[234.61987305 -276.83618164]
[248.09629822 -283.43307495]
[261.93984985 -289.22003174]
[276.10192871 -294.17669678]
[290.53277588 -298.28570557]
[305.18167114 -301.53262329]
[319.99722290 -303.90600586]
[334.92733765 -305.39752197]
[349.91958618 -306.00195312]
[364.92129517 -305.71716309]
[379.87982178 -304.54418945]
[394.74258423 -302.48709106]
[409.45736694 -299.55313110]
[423.97247314 -295.75262451]
[438.23696899 -291.09887695]
[452.20071411 -285.60830688]
[465.81469727 -279.30010986]
[479.03103638 -272.19650269]
[491.80334473 -264.32244873]
[504.08676147 -255.70555115]
[515.83813477 -246.37612915]
[527.01617432 -236.36691284]
[537.58166504 -225.71310425]
[547.49737549 -214.45207214]
[556.72863770 -202.62341309]
[565.24291992 -190.26867676]
[573.01037598 -177.43122864]
[580.00366211 -164.15617371]
[586.19824219 -150.49015808]
[591.57232666 -136.48117065]
[596.10711670 -122.17840576]
[599.78662109 -107.63213348]
[602.59790039 -92.89342499]
[604.53118896 -78.01405334]
[605.57952881 -63.04629517]
[605.73937988 -48.04271317]
[605.01013184 -33.05601501]
[603.39428711 -18.13883972]
[600.89758301 -3.34358644]
[597.52880859 11.27777767]
[593.29980469 25.67389297]
[588.22534180 39.79419327]
[582.32330322 53.58908081]
[575.61437988 67.01009369]
[568.12219238 80.01010132]
[559.87304688 92.54343414]
[550.89587402 104.56606293]
[541.22229004 116.03576660]
[530.88616943 126.91225433]
[519.92388916 137.15731812]
[508.37396240 146.73498535]
[496.27688599 155.61158752]
[483.67523193 163.75596619]
[470.61322021 171.13951111]
[457.13671875 177.73628235]
[443.29312134 183.52311707]
[429.13101196 188.47967529]
[414.70013428 192.58856201]
[400.05117798 195.83532715]
[385.23562622 198.20857239]
[370.30551147 199.69996643]
[355.31326294 200.30427551]
[340.31152344 200.01936340]
[325.35302734 198.84623718]
[310.49029541 196.78901672]
[295.77554321 193.85493469]
[281.26043701 190.05429077]
[266.99597168 185.40043640]
[253.03227234 179.90971375]
[239.41838074 173.60140991]
[226.20208740 166.49769592]
[213.42985535 158.62351990]
[201.14651489 150.00653076]
[189.39521790 140.67698669]
[178.21725464 130.66769409]
[167.65188599 120.01377106]
[157.73622131 108.75266266]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 49]
[2 48]
[3 47]
[5 45]
[6 44]
[7 43]
[8 42]
[9 41]
[10 40]
[11 37]
[12 36]
[13 35]
[14 34]
[15 33]
[16 32]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
