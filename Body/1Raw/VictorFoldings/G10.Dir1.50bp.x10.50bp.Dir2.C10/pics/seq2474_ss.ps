%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCAAUUGGACCAAUCUAUCACCCUAUAGAAGAACUAAUGUUAGUAUAAGUAACAUGAAAAxxxxxxxxxxAUCAACUGAACGCAAAUCAGCCACUUUAAUUAAGCUAAGCCCUUACUAGACCAAUGGGACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[146.17640686 257.67858887]
[145.24076843 242.70779419]
[144.30514526 227.73699951]
[143.36952209 212.76622009]
[142.43388367 197.79542542]
[141.49826050 182.82463074]
[140.56263733 167.85383606]
[136.85647583 153.31890869]
[130.50933838 139.72795105]
[124.16220856 126.13700104]
[117.81507874 112.54605103]
[107.10530853 119.00048828]
[95.50772095 118.23651123]
[87.12380981 111.52062225]
[72.71159363 115.67851257]
[58.29937744 119.83640289]
[43.88716125 123.99428558]
[29.47494507 128.15217590]
[21.79796791 141.70584106]
[7.12269974 145.71722412]
[-5.75133514 138.31486511]
[-12.68797588 149.23901367]
[-24.82647133 152.38160706]
[-35.48660660 146.57911682]
[-49.98220062 150.43626404]
[-64.47779846 154.29342651]
[-78.97339630 158.15058899]
[-93.46899414 162.00775146]
[-101.17701721 175.80491638]
[-116.40603638 180.03013611]
[-130.12094116 172.17666626]
[-134.18492126 156.90382385]
[-126.18688965 143.27272034]
[-110.87193298 139.37045288]
[-97.32614899 147.51214600]
[-82.83055115 143.65499878]
[-68.33496094 139.79783630]
[-53.83935928 135.94067383]
[-39.34376526 132.08351135]
[-27.63989830 119.04436493]
[-9.90922260 123.90264893]
[-2.95650291 110.78033447]
[11.60030270 106.35833740]
[25.31705856 113.73995972]
[39.72927475 109.58206940]
[54.14149094 105.42418671]
[68.55370331 101.26629639]
[82.96591949 97.10840607]
[94.89683533 81.14476776]
[116.71053314 86.01648712]
[121.90595245 71.94496918]
[127.10136414 57.87345123]
[132.29678345 43.80193329]
[137.49220276 29.73041344]
[135.01367188 14.10455418]
[146.68026733 4.84498358]
[151.87568665 -9.22653580]
[157.07110596 -23.29805565]
[154.59257507 -38.92391586]
[166.25917053 -48.18348694]
[171.45458984 -62.25500488]
[176.65000916 -76.32652283]
[164.49568176 -94.80677795]
[168.09770203 -116.39932251]
[185.23194885 -129.65446472]
[184.60797119 -144.64147949]
[183.98399353 -159.62849426]
[169.69833374 -164.82353210]
[158.49153137 -175.09368896]
[152.07255554 -188.87284851]
[151.42024231 -204.05976868]
[156.63406372 -218.33859253]
[166.91896057 -229.53186035]
[180.70654297 -235.93270874]
[195.89431763 -236.56504822]
[210.16625977 -231.33244324]
[221.34600830 -221.03283691]
[227.72871399 -207.23684692]
[228.34106445 -192.04824829]
[223.08969116 -177.78320312]
[212.77539062 -166.61701965]
[198.97100830 -160.25247192]
[199.59498596 -145.26545715]
[200.21896362 -130.27844238]
[203.85261536 -129.23655701]
[207.32339478 -127.73903656]
[217.30612183 -138.93479919]
[227.28884888 -150.13056946]
[237.27157593 -161.32633972]
[234.84120178 -176.77389526]
[242.95317078 -190.14289856]
[257.77725220 -195.12088013]
[272.31399536 -189.35742188]
[279.69955444 -175.57382202]
[276.44671631 -160.27830505]
[264.09136963 -150.69291687]
[248.46733093 -151.34361267]
[238.48460388 -140.14784241]
[228.50187683 -128.95207214]
[218.51916504 -117.75630951]
[222.95378113 -107.58610535]
[223.33496094 -96.43908691]
[219.56610107 -85.87942505]
[212.13597107 -77.40474701]
[202.05574036 -72.23376465]
[190.72152710 -71.13111115]
[185.52610779 -57.05958939]
[180.33068848 -42.98806763]
[183.18083191 -28.36870003]
[171.14262390 -18.10264015]
[165.94720459 -4.03112030]
[160.75178528 10.04039860]
[163.60192871 24.65976906]
[151.56372070 34.92582703]
[146.36830139 48.99734879]
[141.17288208 63.06886673]
[135.97746277 77.14038849]
[130.78205872 91.21190643]
[131.40603638 106.19892120]
[137.75315857 119.78987122]
[144.10029602 133.38082886]
[150.44741821 146.97177124]
[152.19595337 132.07403564]
[158.38320923 118.40956116]
[168.42556763 107.26725006]
[181.37577820 99.69809723]
[196.01231384 96.41606140]
[210.95458984 97.73072052]
[224.79318237 103.51808167]
[236.22274780 113.23223877]
[244.16522217 125.95690155]
[247.87141418 140.49183655]
[246.99172974 155.46601868]
[241.60917664 169.46701050]
[232.23143005 181.17419434]
[219.74305725 189.48326111]
[205.32202148 193.61047363]
[190.32859802 193.16651917]
[176.17701721 188.19329834]
[164.20214844 179.15989685]
[155.53341675 166.91821289]
[156.46905518 181.88900757]
[157.40467834 196.85980225]
[158.34030151 211.83058167]
[159.27593994 226.80137634]
[160.21156311 241.77217102]
[161.14718628 256.74295044]
[170.66252136 270.09924316]
[163.60807800 284.90353394]
[147.24085999 285.92642212]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 147]
[2 146]
[3 145]
[4 144]
[5 143]
[6 142]
[7 141]
[8 122]
[9 121]
[10 120]
[11 119]
[14 48]
[15 47]
[16 46]
[17 45]
[18 44]
[21 41]
[24 39]
[25 38]
[26 37]
[27 36]
[28 35]
[50 118]
[51 117]
[52 116]
[53 115]
[54 114]
[56 112]
[57 111]
[58 110]
[60 108]
[61 107]
[62 106]
[65 84]
[66 83]
[67 82]
[86 100]
[87 99]
[88 98]
[89 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
