%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUAAUUAAUUAAUGCUUGUAGGACAUAAUAAUAACAAUUGAAUGUCUGCACAGCCACUUUCCACAxxxxxxxxxxCCGUGAAGAGGCGGGCAUAACACAGCAAGACGAGAAGACCCUAUGGAGCUUUAAUUUAUUAAUGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 252.15383911]
[92.50000000 237.15383911]
[92.50000000 222.15383911]
[92.50000000 207.15383911]
[92.50000000 192.15383911]
[92.50000000 177.15383911]
[92.50000000 162.15383911]
[92.50000000 147.15383911]
[92.50000000 132.15383911]
[92.50000000 117.15383911]
[78.27076721 112.40737915]
[69.26563263 124.40352631]
[60.26049805 136.39967346]
[51.25536728 148.39582825]
[49.82505798 164.73248291]
[34.84963226 171.41593933]
[21.73452568 161.57084656]
[23.97143364 145.32496643]
[39.25921631 139.39068604]
[48.26435089 127.39453888]
[57.26948547 115.39839172]
[66.27462006 103.40224457]
[67.29825592 88.43721008]
[60.01047134 75.32659912]
[52.72268677 62.21598434]
[45.43490219 49.10536957]
[38.01955414 36.06648254]
[30.47734833 23.10055923]
[22.93514061 10.13463879]
[6.54754877 10.15302658]
[-7.38751411 -0.54423887]
[-12.22878838 -18.65661812]
[-27.06844330 -20.84400368]
[-41.90809631 -23.03138733]
[-56.74775314 -25.21877289]
[-71.58740997 -27.40615654]
[-82.41815186 -20.34142685]
[-94.76020813 -22.50157738]
[-102.06324005 -32.18448639]
[-116.85739136 -34.66100311]
[-131.65153503 -37.13751984]
[-146.44569397 -39.61403275]
[-161.60879517 -33.36806107]
[-174.43261719 -43.58969116]
[-171.72509766 -59.76378632]
[-156.27151489 -65.25182343]
[-143.96917725 -54.40818405]
[-129.17503357 -51.93166733]
[-114.38087463 -49.45515060]
[-99.58672333 -46.97863770]
[-83.53301239 -54.01354599]
[-69.40002441 -42.24581146]
[-54.56036758 -40.05842590]
[-39.72071457 -37.87104416]
[-24.88105774 -35.68365860]
[-10.04140377 -33.49627304]
[1.11881566 -43.51872253]
[0.53357434 -58.50730133]
[-0.05166703 -73.49588013]
[-8.32150459 -86.98366547]
[-1.08666420 -100.00312805]
[-4.56318140 -108.50604248]
[-1.53420961 -115.28926849]
[-1.82688606 -130.28640747]
[-2.11956239 -145.28355408]
[-10.12465572 -158.93013000]
[-2.63715959 -171.80595398]
[-2.92983603 -186.80310059]
[-3.22251225 -201.80023193]
[-6.34515333 -207.72044373]
[-6.01979351 -213.45799255]
[-3.22251225 -217.38558960]
[-2.92983603 -232.38273621]
[-2.63715959 -247.37988281]
[-16.44381905 -253.80607605]
[-26.43816376 -265.29663086]
[-30.88860893 -279.86074829]
[-29.02409172 -294.97509766]
[-21.16765022 -308.02102661]
[-8.68045902 -316.73825073]
[6.27399969 -319.61645508]
[21.10477448 -316.15698242]
[33.24234772 -306.95919800]
[40.58380508 -293.61666870]
[41.85720062 -278.44107056]
[36.84190750 -264.06170654]
[26.40685654 -252.96983337]
[12.35998535 -247.08720398]
[12.06730843 -232.09005737]
[11.77463245 -217.09291077]
[11.77463245 -202.09291077]
[12.06730843 -187.09576416]
[12.35998535 -172.09863281]
[20.34414291 -159.52474976]
[12.87758160 -145.57623291]
[13.17025852 -130.57908630]
[13.46293449 -115.58193970]
[13.90191460 -100.58836365]
[22.12989235 -88.17266846]
[14.93691158 -74.08112335]
[15.52215290 -59.09254456]
[16.10739517 -44.10396576]
[36.63849640 -34.95650482]
[44.08256149 -15.25949478]
[35.90106201 2.59243155]
[43.44326782 15.55835247]
[50.98547745 28.52427483]
[57.09794617 32.74618912]
[58.54551697 41.81758499]
[65.83329773 54.92819977]
[73.12108612 68.03881836]
[80.40886688 81.14942932]
[76.84025574 66.58011627]
[80.24182892 51.97089386]
[89.87908173 40.47640228]
[103.67099762 34.57868576]
[118.63943481 35.55126953]
[131.55220032 43.18413162]
[139.62097168 55.82908249]
[141.10345459 70.75564575]
[135.67997742 84.73998260]
[150.08355713 88.92765808]
[167.83215332 84.11014557]
[179.50112915 97.18863678]
[193.98368835 101.09447479]
[209.68310547 96.35525513]
[221.45024109 107.77744293]
[217.18008423 123.61087799]
[201.26538086 127.56748199]
[190.07783508 115.57703400]
[175.59529114 111.67119598]
[164.92466736 117.43582153]
[152.80339050 114.26293945]
[145.89588928 103.33124542]
[131.49229431 99.14356995]
[125.49422455 103.64614105]
[136.12687683 114.22661591]
[146.75953674 124.80709839]
[157.39219666 135.38757324]
[171.77571106 139.64372253]
[180.87350464 151.56974792]
[181.17726135 166.56666565]
[172.56983948 178.85130310]
[158.37046814 183.68638611]
[144.05479431 179.20738220]
[135.14331055 167.14151001]
[135.07221985 152.14248657]
[127.88084412 138.97874451]
[120.68946075 125.81501007]
[113.49807739 112.65126801]
[107.50000000 117.15383911]
[107.50000000 132.15383911]
[107.50000000 147.15383911]
[107.50000000 162.15383911]
[107.50000000 177.15383911]
[107.50000000 192.15383911]
[107.50000000 207.15383911]
[107.50000000 222.15383911]
[107.50000000 237.15383911]
[107.50000000 252.15383911]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 160]
[2 159]
[3 158]
[4 157]
[5 156]
[6 155]
[7 154]
[8 153]
[9 152]
[10 151]
[11 22]
[12 21]
[13 20]
[14 19]
[23 112]
[24 111]
[25 110]
[26 109]
[27 107]
[28 106]
[29 105]
[32 56]
[33 55]
[34 54]
[35 53]
[36 52]
[39 50]
[40 49]
[41 48]
[42 47]
[57 102]
[58 101]
[59 100]
[61 98]
[63 97]
[64 96]
[65 95]
[67 93]
[68 92]
[69 91]
[72 90]
[73 89]
[74 88]
[121 135]
[122 134]
[124 131]
[125 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
