%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCGCCGCCGGGAAAAAAGGCGGGAGAAGCCCCGGCAGGUUUGAAGCUGCUUCUUCGAAUxxxxxxxxxxUGAACGAAAAUCUGUUCGCUUCAUUCAUUGCCCCCACAAUCCUAGGCCUACCCGCCGCAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[79.43499756 308.83926392]
[79.43499756 293.83926392]
[79.43499756 278.83926392]
[79.43499756 263.83926392]
[79.43499756 248.83926392]
[79.43499756 233.83926392]
[79.43499756 218.83926392]
[79.43499756 203.83926392]
[79.43499756 188.83926392]
[79.43499756 173.83926392]
[66.04871368 167.07113647]
[53.96872330 175.96348572]
[41.88873672 184.85583496]
[29.80874825 193.74819946]
[17.72875977 202.64054871]
[5.64877081 211.53289795]
[8.51840401 226.52381897]
[4.59123516 241.27305603]
[-5.35299301 252.85214233]
[-19.33984756 258.96203613]
[-34.59222794 258.38958740]
[-48.08176041 251.24848938]
[-57.13009262 238.95660400]
[-59.94067001 223.95449829]
[-55.95544815 209.22084045]
[-45.96569824 197.68099976]
[-31.95489311 191.62625122]
[-16.70488739 192.25874329]
[-3.24357891 199.45289612]
[8.83640957 190.56054688]
[20.91639709 181.66819763]
[32.99638748 172.77584839]
[45.07637405 163.88349915]
[57.15636444 154.99114990]
[56.06505203 140.03089905]
[42.82246780 132.98576355]
[29.57988167 125.94063568]
[16.33729553 118.89550018]
[3.09470963 111.85036469]
[-10.14787579 104.80522919]
[-15.49407864 104.99938965]
[-19.91275978 103.25938416]
[-22.81390572 100.27860260]
[-23.97647667 96.88509369]
[-36.75383377 89.02766418]
[-49.53119278 81.17024231]
[-63.38950729 87.94892883]
[-78.71002960 86.13646698]
[-90.60404205 76.31118774]
[-95.27620697 61.60831833]
[-91.23564911 46.71948242]
[-79.77169800 36.39565277]
[-64.54246521 33.93113327]
[-50.40753174 40.11233521]
[-41.87731171 52.96686172]
[-41.67376709 68.39288330]
[-28.89640808 76.25031281]
[-16.11905098 84.10773468]
[-3.10274124 91.56264496]
[10.13984489 98.60778046]
[23.38243103 105.65291595]
[36.62501526 112.69805145]
[49.86759949 119.74318695]
[63.11018753 126.78832245]
[58.81008911 92.31504822]
[79.25748444 67.90893555]
[108.16270447 66.45740509]
[114.79119873 53.00144196]
[121.41970062 39.54547501]
[108.03427124 46.31528473]
[93.03458405 46.21762085]
[79.73844147 39.27409363]
[71.08682251 27.02054596]
[68.99338531 12.16734695]
[73.92117310 -2.00011063]
[84.78022003 -12.34811687]
[99.16858673 -16.58778763]
[113.90370941 -13.78134537]
[125.72631836 -4.54955149]
[132.02134705 9.06560707]
[131.39585876 24.05448914]
[140.90422058 12.45314693]
[150.41258240 0.85180604]
[159.92094421 -10.74953556]
[169.30810547 -22.44915962]
[178.57304382 -34.24580002]
[187.83799744 -46.04243851]
[197.10295105 -57.83907700]
[194.96818542 -73.49852753]
[204.59796143 -86.03020477]
[220.27909851 -87.99929047]
[232.70826721 -78.23756409]
[234.51145935 -62.53647995]
[224.61886597 -50.21121597]
[208.89959717 -48.57413101]
[199.63464355 -36.77748871]
[190.36968994 -24.98085022]
[181.10473633 -13.18420982]
[179.43595886 -5.93432760]
[171.52227783 -1.24117672]
[162.01391602 10.36016464]
[152.50556946 21.96150589]
[142.99720764 33.56284714]
[134.87567139 46.17397690]
[128.24716187 59.62994003]
[121.61866760 73.08590698]
[134.37327576 85.54573822]
[139.86386108 103.91751099]
[135.48843384 123.96637726]
[121.08506775 140.42143250]
[135.72857666 143.67225647]
[150.37207031 146.92308044]
[159.77684021 134.90173340]
[173.46992493 128.15913391]
[188.73252869 128.03405762]
[202.53425598 134.55134583]
[212.13478088 146.41694641]
[215.62789917 161.27497864]
[212.32005310 176.17533875]
[202.86801147 188.15956116]
[189.14848328 194.84817505]
[173.88551331 194.91314697]
[160.10954285 188.34158325]
[150.55583191 176.43824768]
[147.12124634 161.56658936]
[132.47775269 158.31576538]
[117.83424377 155.06494141]
[111.98443604 159.75851440]
[123.27678680 169.63185120]
[134.56913757 179.50518799]
[145.86149597 189.37852478]
[158.51232910 197.43807983]
[162.14002991 211.99279785]
[154.75172424 225.04702759]
[140.40617371 229.42941284]
[126.98413849 222.73249817]
[121.85895538 208.63688660]
[114.66757202 195.47315979]
[107.47618866 182.30941772]
[100.28480530 169.14567566]
[94.43499756 173.83926392]
[94.43499756 188.83926392]
[94.43499756 203.83926392]
[94.43499756 218.83926392]
[94.43499756 233.83926392]
[94.43499756 248.83926392]
[94.43499756 263.83926392]
[94.43499756 278.83926392]
[94.43499756 293.83926392]
[94.43499756 308.83926392]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 34]
[12 33]
[13 32]
[14 31]
[15 30]
[16 29]
[35 64]
[36 63]
[37 62]
[38 61]
[39 60]
[40 59]
[44 58]
[45 57]
[46 56]
[67 106]
[68 105]
[69 104]
[81 103]
[82 102]
[83 101]
[84 100]
[85 98]
[86 97]
[87 96]
[88 95]
[110 127]
[111 126]
[112 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
