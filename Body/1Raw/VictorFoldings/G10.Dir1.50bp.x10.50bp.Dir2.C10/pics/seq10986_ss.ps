%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUACUAUUUAUGUGCUCCGGGUCCAUCAUCCACAACCUUAACAAUGAACAAGAUAUUCGxxxxxxxxxxAAUUAUUCAGCUUCCUACACUAUUAAAGUUUACCACAACCACCACCCCAUCAUACUCUUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 291.80279541]
[92.50000000 276.80279541]
[92.50000000 261.80279541]
[92.50000000 246.80278015]
[92.50000000 231.80278015]
[92.50000000 216.80278015]
[92.50000000 201.80278015]
[92.50000000 186.80278015]
[92.50000000 171.80278015]
[92.50000000 156.80278015]
[78.05754089 152.92764282]
[65.10964203 145.44743347]
[54.53823090 134.87167358]
[47.06335068 121.92070770]
[43.19413757 107.47665405]
[43.19413757 92.52334595]
[47.06335068 78.07929230]
[54.53823090 65.12832642]
[65.10964203 54.55256653]
[78.05754089 47.07236481]
[92.50000000 43.19721603]
[92.50000000 28.19721603]
[92.50000000 13.19721508]
[80.87916565 22.68173981]
[65.93726349 21.36278343]
[56.15762711 9.98919106]
[57.09267426 -4.98163700]
[68.21153259 -15.04995155]
[83.20142365 -14.49942684]
[93.55234528 -3.64118934]
[95.41996002 -18.52446938]
[97.28757477 -33.40774918]
[99.15518951 -48.29103088]
[84.42823792 -51.17089844]
[69.93214417 -55.04905701]
[55.73450851 -59.90742874]
[41.90151596 -65.72335815]
[28.49766541 -72.46973419]
[15.58545399 -80.11509705]
[3.22508502 -88.62380219]
[-8.52581215 -97.95616913]
[-19.61244965 -108.06869507]
[-29.98313332 -118.91423798]
[-39.58951187 -130.44221497]
[-48.38679886 -142.59887695]
[-56.33396912 -155.32754517]
[-63.39397430 -168.56889343]
[-69.53389740 -182.26115417]
[-74.72510529 -196.34049988]
[-78.94340515 -210.74128723]
[-82.16912079 -225.39637756]
[-84.38720703 -240.23742676]
[-85.58733368 -255.19525146]
[-85.76390076 -270.20010376]
[-84.91608429 -285.18203735]
[-83.04784393 -300.07116699]
[-80.16787720 -314.79809570]
[-76.28961945 -329.29415894]
[-71.43115234 -343.49176025]
[-65.61512756 -357.32470703]
[-58.86865997 -370.72851562]
[-51.22321320 -383.64068604]
[-42.71442795 -396.00100708]
[-33.38197708 -407.75183105]
[-23.26937485 -418.83840942]
[-12.42376995 -429.20901489]
[-0.89573044 -438.81530762]
[11.26099491 -447.61251831]
[23.98972511 -455.55960083]
[37.23110962 -462.61950684]
[50.92341614 -468.75933838]
[65.00279999 -473.95046997]
[79.40361786 -478.16867065]
[94.05872345 -481.39428711]
[108.89978790 -483.61227417]
[123.85762024 -484.81228638]
[138.86247253 -484.98876953]
[153.84439087 -484.14083862]
[168.73350525 -482.27249146]
[183.46041870 -479.39242554]
[197.95646667 -475.51406860]
[212.15403748 -470.65551758]
[225.98695374 -464.83941650]
[239.39071655 -458.09283447]
[252.30282593 -450.44732666]
[264.66308594 -441.93844604]
[276.41384888 -432.60592651]
[287.50033569 -422.49322510]
[297.87088013 -411.64755249]
[307.47711182 -400.11947632]
[316.27423096 -387.96267700]
[324.22122192 -375.23388672]
[331.28106689 -361.99246216]
[337.42080688 -348.30010986]
[342.61181641 -334.22070312]
[346.82992554 -319.81985474]
[350.05545044 -305.16473389]
[352.27334595 -290.32363892]
[353.47326660 -275.36581421]
[353.64962769 -260.36096191]
[352.80160522 -245.37904358]
[350.93316650 -230.48992920]
[348.05300903 -215.76303101]
[344.17456055 -201.26702881]
[339.31588745 -187.06947327]
[333.49969482 -173.23660278]
[326.75305176 -159.83288574]
[319.10742188 -146.92083740]
[310.59848022 -134.56063843]
[301.26586914 -122.80992889]
[291.15310669 -111.72349548]
[280.30737305 -101.35302734]
[268.77920532 -91.74687958]
[256.62234497 -82.94983673]
[243.89350891 -75.00292206]
[230.65203857 -67.94318390]
[216.95964050 -61.80353546]
[202.88018799 -56.61260986]
[188.47932434 -52.39459991]
[173.82417297 -49.16918182]
[158.98307800 -46.95138931]
[144.02522278 -45.75156403]
[129.02037048 -45.57529831]
[114.03846741 -46.42341614]
[112.17085266 -31.54013634]
[110.30323792 -16.65685654]
[108.43563080 -1.77357626]
[107.50000000 13.19721508]
[107.50000000 28.19721603]
[107.50000000 43.19721603]
[121.94245911 47.07236481]
[134.89035034 54.55256653]
[145.46177673 65.12832642]
[152.93664551 78.07929230]
[156.80586243 92.52334595]
[156.80586243 107.47665405]
[152.93664551 121.92070770]
[145.46177673 134.87167358]
[134.89035034 145.44743347]
[121.94245911 152.92764282]
[107.50000000 156.80278015]
[107.50000000 171.80278015]
[107.50000000 186.80278015]
[107.50000000 201.80278015]
[107.50000000 216.80278015]
[107.50000000 231.80278015]
[107.50000000 246.80278015]
[107.50000000 261.80279541]
[107.50000000 276.80279541]
[107.50000000 291.80279541]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[21 130]
[22 129]
[23 128]
[30 127]
[31 126]
[32 125]
[33 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
