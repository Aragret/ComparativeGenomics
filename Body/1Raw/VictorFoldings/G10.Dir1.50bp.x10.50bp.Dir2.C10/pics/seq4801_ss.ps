%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAACCCUCGUUCCACAGAAGCUGCCAUCAAGUAUUUCCUCACGCAAGCAACCGCAUCCAUAxxxxxxxxxxGCAUACAUCAUUAUUCUCGCACGGACUACAACCACGACCAAUGAUAUGAAAAACCAUCGUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[100.70650482 257.82067871]
[100.70650482 242.82069397]
[100.70650482 227.82069397]
[100.70650482 212.82069397]
[100.70650482 197.82069397]
[100.70650482 182.82069397]
[100.70650482 167.82069397]
[100.70650482 152.82069397]
[100.70650482 137.82069397]
[100.70650482 122.82068634]
[99.25762939 137.75054932]
[88.97292328 148.66955566]
[74.15636444 151.00828552]
[61.00844955 143.78800964]
[55.03136444 130.03030396]
[58.72642517 115.49254608]
[70.54730225 106.25854492]
[85.54835510 106.19298553]
[70.61234283 104.80895996]
[56.02859497 108.31813049]
[43.35707855 116.34513092]
[30.68556213 124.37212372]
[23.55941772 139.14202881]
[7.18743515 140.08555603]
[-1.58829212 126.23208618]
[6.25995111 111.83287811]
[22.65856552 111.70060730]
[35.33008194 103.67361450]
[48.00159836 95.64661407]
[45.54866791 80.84853363]
[30.96492004 77.33937073]
[16.38117027 73.83020020]
[1.76216292 70.47093964]
[-12.89056206 67.26194763]
[-20.51935005 80.32551575]
[-31.81297302 90.39076233]
[-45.66499329 96.47161102]
[-60.71833420 97.97231293]
[-75.49822235 94.74584198]
[-88.55667877 87.10829926]
[-98.61435699 75.80793762]
[-104.68592072 61.95184326]
[-106.17652893 46.89749908]
[-102.94016266 32.11977768]
[-95.29386902 19.06644630]
[-83.98677063 9.01633835]
[-70.12660980 2.95406246]
[-55.07127380 1.47353721]
[-40.29572296 4.71981001]
[-27.24751854 12.37484360]
[-17.20499039 23.68867683]
[-11.15200233 37.55289459]
[-9.68156528 52.60922241]
[4.97115898 55.81821823]
[12.22270393 54.16676712]
[19.89033699 59.24645233]
[34.47408676 62.75561905]
[49.05783463 66.26478577]
[59.16912460 69.07106781]
[66.72845459 74.87629700]
[71.03164673 82.29686737]
[71.99636841 89.87294769]
[86.93238068 91.25697327]
[101.13013458 86.41716003]
[112.11093903 76.19845581]
[123.09173584 65.97974396]
[108.41427612 69.07363892]
[93.44162750 68.16828156]
[79.24390411 63.32838058]
[66.83583832 54.89985657]
[57.10427094 43.48510742]
[50.74472046 29.89996338]
[48.21171570 15.11538029]
[49.68630219 0.18803598]
[55.06308365 -13.81518650]
[63.95777130 -25.89345360]
[75.73464966 -35.18350983]
[89.55200195 -41.02137756]
[104.42227936 -42.98982239]
[119.28268433 -40.94814682]
[133.07110596 -35.04227448]
[144.80207825 -25.69431496]
[153.63716125 -13.57237530]
[158.94488525 0.45716512]
[160.34591675 15.39159203]
[157.74011230 30.16351700]
[151.31370544 43.71716690]
[141.52934265 55.08088684]
[155.77603149 50.38708496]
[170.02273560 45.69328308]
[184.26942444 40.99948502]
[198.51611328 36.30568314]
[212.76280212 31.61188316]
[215.97480774 20.08923912]
[224.28630066 11.65450573]
[235.52972412 8.34129047]
[246.85221863 10.86873531]
[255.43943787 18.48916435]
[269.86682129 14.38421917]
[284.29418945 10.27927399]
[285.66540527 -4.83642006]
[292.40795898 -18.43430710]
[303.60995483 -28.67538643]
[317.75643921 -34.17463684]
[332.93417358 -34.18832397]
[347.09054565 -28.71460533]
[358.31100464 -18.49374962]
[365.07806396 -4.90804672]
[366.47656250 10.20514965]
[362.31732178 24.80190277]
[353.16287231 36.90812302]
[340.25128174 44.88654327]
[325.32870483 47.65814590]
[310.41336060 44.84809494]
[297.52236938 36.83642960]
[288.39913940 24.70665932]
[273.97177124 28.81160355]
[259.54437256 32.91654968]
[251.67236328 49.39405823]
[233.97230530 55.04114151]
[217.45660400 45.85857391]
[203.20991516 50.55237579]
[188.96322632 55.24617767]
[174.71652222 59.93997574]
[160.46983337 64.63377380]
[146.22314453 69.32757568]
[133.31044006 76.96054840]
[122.32964325 87.17925262]
[111.34883881 97.39796448]
[125.88451385 93.69467926]
[137.70979309 84.46630859]
[152.26632690 80.84590912]
[167.03686523 83.45955658]
[179.46714783 91.85527039]
[187.40762329 104.58118439]
[189.48513794 119.43662262]
[185.34042358 133.85263062]
[175.69024658 145.33627319]
[162.20338440 151.90167236]
[147.21212769 152.41349792]
[133.30888367 146.78323364]
[122.89788818 135.98442078]
[115.70650482 122.82068634]
[115.70650482 137.82069397]
[115.70650482 152.82069397]
[115.70650482 167.82069397]
[115.70650482 182.82069397]
[115.70650482 197.82069397]
[115.70650482 212.82069397]
[115.70650482 227.82069397]
[115.70650482 242.82069397]
[115.70650482 257.82067871]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[18 63]
[19 62]
[20 29]
[21 28]
[22 27]
[30 58]
[31 57]
[32 56]
[33 54]
[34 53]
[64 129]
[65 128]
[66 127]
[88 126]
[89 125]
[90 124]
[91 123]
[92 122]
[93 121]
[98 118]
[99 117]
[100 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
