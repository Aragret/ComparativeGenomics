%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUAAUUAAGCUAAGCCCUUACUAGACCAAUGGGACUUAAACCCACAAACACUUAGUUAACxxxxxxxxxxCUACAAGAACACCAAUGACCCCAAUACGCAAAACUAACCCCCUAAUAAAAUUAAUUAACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[134.22233582 165.57788086]
[125.97004700 153.05192566]
[117.71775818 140.52595520]
[109.46546936 128.00000000]
[101.21318054 115.47403717]
[87.08837891 110.42527771]
[76.21033478 121.91348267]
[61.75891495 118.30714417]
[47.43631744 122.76395416]
[33.11371994 127.22077179]
[18.79112244 131.67758179]
[4.46852589 136.13439941]
[17.95768738 142.69508362]
[25.15559959 155.85525513]
[23.40278053 170.75248718]
[13.34686089 181.88256836]
[-1.29669845 185.13313293]
[-15.11739254 179.30316162]
[-23.00875092 166.54673767]
[-22.05507278 151.57708740]
[-12.60945702 139.92567444]
[-27.47250366 141.94801331]
[-42.33555222 143.97035217]
[-57.19859695 145.99269104]
[-72.03980255 148.16952515]
[-86.85755920 150.50062561]
[-101.67531586 152.83172607]
[-105.59138489 167.54853821]
[-115.15980530 179.39611816]
[-128.72279358 186.32180786]
[-143.93048096 187.12570190]
[-158.14804077 181.66850281]
[-168.91218567 170.89572144]
[-174.35798645 156.67379761]
[-173.54190063 141.46676636]
[-166.60533142 127.90933228]
[-154.75009155 118.35041046]
[-140.03015137 114.44613647]
[-124.99584198 116.87296295]
[-112.25194550 125.21041107]
[-104.00642395 138.01397705]
[-89.18866730 135.68286133]
[-74.37091064 133.35176086]
[-68.21228790 129.17839050]
[-59.22093201 131.12963867]
[-44.35788345 129.10729980]
[-29.49483871 127.08496857]
[-14.63179111 125.06262970]
[0.01171015 121.81180573]
[14.33430767 117.35498810]
[28.65690422 112.89817810]
[42.97950363 108.44136047]
[57.30210114 103.98454285]
[67.15569305 92.81512451]
[82.63156128 96.10268402]
[68.55184937 90.92949677]
[61.60281754 77.63623047]
[65.39122009 63.12251282]
[77.95076752 54.92142487]
[92.76264191 57.28958893]
[102.13903046 68.99785614]
[101.21318054 83.96945953]
[109.46546936 71.44349670]
[117.71775818 58.91753387]
[125.97004700 46.39157104]
[134.22233582 33.86561203]
[142.47462463 21.33964920]
[131.17010498 11.44411373]
[121.31837463 0.10140106]
[113.10295868 -12.47718048]
[106.67691040 -26.05730057]
[102.15994263 -40.38596725]
[99.63619995 -55.19625092]
[99.15270233 -70.21224213]
[100.71845245 -85.15420532]
[104.30429077 -99.74377441]
[109.84340668 -113.70915985]
[117.23260498 -126.79019165]
[126.33424377 -138.74317932]
[136.97875977 -149.34544373]
[148.96784973 -158.39949036]
[162.07815552 -165.73661804]
[176.06546021 -171.22015381]
[190.66917419 -174.74794006]
[205.61723328 -176.25427246]
[220.63119507 -175.71105957]
[235.43132019 -173.12844849]
[249.74191284 -168.55453491]
[263.29638672 -162.07453918]
[275.84219360 -153.80917358]
[287.14562988 -143.91241455]
[296.99612427 -132.56863403]
[305.21020508 -119.98916626]
[311.63476562 -106.40834808]
[316.15017700 -92.07919312]
[318.67233276 -77.26863098]
[319.15420532 -62.25259018]
[317.58682251 -47.31079865]
[313.99942017 -32.72161865]
[308.45880127 -18.75683403]
[301.06817627 -5.67660093]
[291.96524048 6.27540350]
[281.31958008 16.87652016]
[269.32949829 25.92925644]
[256.21841431 33.26496887]
[242.23051453 38.74699020]
[227.62641907 42.27320099]
[212.67817688 43.77790833]
[197.66429138 43.23307800]
[182.86444092 40.64886475]
[168.55435181 36.07340240]
[155.00057983 29.59193802]
[146.74829102 42.11790085]
[138.49600220 54.64385986]
[130.24371338 67.16982269]
[121.99143219 79.69578552]
[113.73914337 92.22174835]
[113.73914337 107.22174835]
[121.99143219 119.74771118]
[130.24371338 132.27366638]
[138.49600220 144.79963684]
[146.74829102 157.32559204]
[160.72613525 151.73947144]
[175.54240417 149.08175659]
[190.59034729 149.46128845]
[205.25379944 152.86251831]
[218.93226624 159.14616394]
[231.06564331 168.05491638]
[241.15708923 179.22396851]
[248.79333496 192.19596863]
[253.66169739 206.43969727]
[255.56282043 221.37190247]
[254.41885376 236.38110352]
[250.27664185 250.85269165]
[243.30580139 264.19406128]
[233.79179382 275.85891724]
[222.12420654 285.36953735]
[208.78080750 292.33651733]
[194.30801392 296.47454834]
[179.29847717 297.61416626]
[164.36683655 295.70870972]
[150.12451172 290.83621216]
[137.15472412 283.19622803]
[125.98859406 273.10153198]
[117.08335114 260.96557617]
[110.80366516 247.28529358]
[107.40669250 232.62086487]
[107.03151703 217.57279968]
[109.69351959 202.75732422]
[115.28369141 188.78109741]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 122]
[2 121]
[3 120]
[4 119]
[5 118]
[6 55]
[8 53]
[9 52]
[10 51]
[11 50]
[12 49]
[21 48]
[22 47]
[23 46]
[24 45]
[25 43]
[26 42]
[27 41]
[62 117]
[63 116]
[64 115]
[65 114]
[66 113]
[67 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
