%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUAACCAAGCAUAAUAUAGCAAGGACUAACCCCUAUACCUUCUGCAUAAUGAAUUAACUAGxxxxxxxxxxUCCAUUGGUCUUAGGCCCCAAAAAUUUUGGUGCAACUCCAAAUAAAAGUAAUAACCAUGCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[101.65812683 284.49395752]
[101.65812683 269.49395752]
[101.65812683 254.49395752]
[101.65812683 239.49395752]
[101.65812683 224.49395752]
[101.65812683 209.49395752]
[101.65812683 194.49395752]
[101.65812683 179.49395752]
[101.65812683 164.49395752]
[101.65812683 149.49395752]
[78.78713226 142.47781372]
[62.78247833 126.06709290]
[56.88684464 104.95146942]
[61.63059235 84.57239532]
[48.95907593 76.54540253]
[36.28755951 68.51840210]
[23.61604500 60.49140549]
[10.94452953 52.46440887]
[-3.56409621 48.65655136]
[-18.54433823 49.42620850]
[-33.52457809 50.19586945]
[-46.90956497 58.63107300]
[-60.01707840 51.55701065]
[-74.99732208 52.32667160]
[-89.95860291 53.40373993]
[-104.89461517 54.78776550]
[-119.83062744 56.17179108]
[-134.76663208 57.55581665]
[-149.70265198 58.93984222]
[-154.54673767 73.37780762]
[-164.84924316 84.59288788]
[-178.82522583 90.64199829]
[-194.05325317 90.47710419]
[-207.89497375 84.12677002]
[-217.95222473 72.69123077]
[-222.48252869 58.15176010]
[-220.70097351 43.02740860]
[-212.91624451 29.93856430]
[-200.47708130 21.15294838]
[-185.53865051 18.19272041]
[-170.68910217 21.57075882]
[-158.50125122 30.70179749]
[-151.08666992 44.00382996]
[-136.15066528 42.61980438]
[-121.21465302 41.23577881]
[-106.27864075 39.85175323]
[-91.34262848 38.46772766]
[-87.62312317 35.38316727]
[-81.90993500 34.64333725]
[-75.76698303 37.34643173]
[-60.78673935 36.57677078]
[-48.47323990 28.19661713]
[-34.29423904 35.21562958]
[-19.31399727 34.44596863]
[-4.33375645 33.67630768]
[-17.43858719 26.37812996]
[-28.90344238 16.70563889]
[-38.30403137 5.01679993]
[-45.29244614 -8.25580406]
[-49.61006546 -22.62097549]
[-51.09709930 -37.54708481]
[-49.69851303 -52.48174286]
[-45.46606445 -66.87223816]
[-38.55639648 -80.18600464]
[-29.22521591 -91.93032837]
[-17.81785774 -101.67056274]
[-4.75649118 -109.04624939]
[9.47550774 -113.78440857]
[24.35143661 -115.70970917]
[39.32075882 -114.75088501]
[53.82949066 -110.94342804]
[67.34068298 -104.42824554]
[79.35431671 -95.44644165]
[89.42577362 -84.33043671]
[97.18234253 -71.49160004]
[102.33695221 -57.40508270]
[104.69885254 -42.59220123]
[104.18062592 -27.60115623]
[100.80144501 -12.98674011]
[94.68637848 0.71019167]
[86.06172943 12.98273945]
[75.24668121 23.37671661]
[62.64148331 31.50745964]
[48.71263123 37.07406235]
[33.97560883 39.87051773]
[18.97152710 39.79289246]
[31.64304161 47.81988907]
[44.31455994 55.84688568]
[56.98607254 63.87388229]
[69.65759277 71.90087891]
[79.38708496 64.14849854]
[90.98190308 59.64041519]
[103.39278412 58.78457260]
[115.49665070 61.65842819]
[126.19818115 68.00190735]
[134.52896118 77.24098206]
[148.34254456 71.39419556]
[158.03530884 58.88976288]
[172.77182007 61.05417252]
[186.58540344 55.20738602]
[200.39898682 49.36059570]
[214.21257019 43.51380920]
[228.02615356 37.66701889]
[240.25572205 25.92504311]
[254.92430115 34.42617035]
[250.81605530 50.87483978]
[233.87294006 51.48060226]
[220.05935669 57.32739258]
[206.24577332 63.17417908]
[192.43218994 69.02096558]
[178.61860657 74.86775208]
[169.91387939 86.95398712]
[154.18933105 85.20777893]
[140.37574768 91.05456543]
[145.30319214 103.50108337]
[146.12934875 118.01342010]
[160.27667236 122.99874115]
[174.42399597 127.98406982]
[186.54054260 118.43458557]
[201.89866638 116.97451019]
[215.59761047 124.06974030]
[223.26611328 137.45620728]
[222.45718384 152.86235046]
[213.42893982 165.37211609]
[199.06225586 170.99368286]
[183.94149780 167.93324280]
[172.89164734 157.16735840]
[169.43865967 142.13137817]
[155.29135132 137.14605713]
[141.14402771 132.16073608]
[135.02255249 136.49404907]
[145.04789734 147.65165710]
[155.07325745 158.80928040]
[165.09860229 169.96688843]
[176.65773010 179.52651978]
[176.09530640 194.51596069]
[163.85229492 203.18249512]
[149.52806091 198.73095703]
[144.35375977 184.65187073]
[137.16236877 171.48812866]
[129.97099304 158.32438660]
[122.77960205 145.16064453]
[116.65812683 149.49395752]
[116.65812683 164.49395752]
[116.65812683 179.49395752]
[116.65812683 194.49395752]
[116.65812683 209.49395752]
[116.65812683 224.49395752]
[116.65812683 239.49395752]
[116.65812683 254.49395752]
[116.65812683 269.49395752]
[116.65812683 284.49395752]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[14 90]
[15 89]
[16 88]
[17 87]
[18 86]
[19 55]
[20 54]
[21 53]
[23 51]
[24 50]
[25 47]
[26 46]
[27 45]
[28 44]
[29 43]
[96 114]
[97 113]
[99 111]
[100 110]
[101 109]
[102 108]
[103 107]
[116 130]
[117 129]
[118 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
