%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGGUGGAUUUAGCAGUAAACUAAGAGUAGAGUGCUUAGUUGAACAGGGCCCUGAAGCGCGUxxxxxxxxxxGUAAGCCUUCUCCUCACUCUCUCAAUCUUAUCCAUCAUAGCAGGCAGUUGAGGUGGAUUAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[150.69012451 360.21255493]
[150.69012451 345.21255493]
[150.69012451 330.21255493]
[150.69012451 315.21255493]
[150.69012451 300.21255493]
[150.69012451 285.21255493]
[150.69012451 270.21255493]
[150.69012451 255.21255493]
[150.69012451 240.21255493]
[150.69012451 225.21255493]
[147.18095398 210.62881470]
[134.50088501 202.81440735]
[135.11349487 187.00506592]
[128.15313721 173.71771240]
[121.05673218 160.50253296]
[113.96032715 147.28735352]
[106.86392212 134.07217407]
[99.76752472 120.85698700]
[85.38304138 116.60414124]
[72.24140930 123.83584595]
[59.09977722 131.06755066]
[45.95814514 138.29925537]
[43.10479355 153.67430115]
[31.00329399 163.57823181]
[15.36760616 163.33470154]
[3.58042479 153.05868530]
[1.20729542 137.60221863]
[9.36873722 124.26337433]
[24.21116638 119.34033203]
[38.72644424 125.15761566]
[51.86807632 117.92591858]
[65.00970459 110.69421387]
[78.15133667 103.46250916]
[83.71327209 89.53179169]
[79.16598511 75.23766327]
[74.61869812 60.94353485]
[69.00154877 53.66043854]
[70.12804413 46.30902863]
[65.87519836 31.92454720]
[61.62234879 17.54006767]
[57.36950302 3.15558577]
[53.11665726 -11.22889519]
[48.86381149 -25.61337662]
[43.64621735 -11.55006504]
[32.57594299 -1.42835581]
[18.10271835 2.51192236]
[3.42931867 -0.60117257]
[-8.19718647 -10.07874489]
[-14.20397377 -23.82350731]
[-13.26180363 -38.79388809]
[-5.57917023 -51.67710114]
[7.14384222 -59.62222290]
[22.09176254 -60.87108231]
[35.95677567 -55.14731979]
[45.67201996 -43.71492386]
[44.74860382 -58.68647385]
[43.82519150 -73.65802765]
[42.90177917 -88.62957764]
[40.28445053 -92.26953125]
[39.11898041 -96.16378784]
[39.30217743 -99.81250763]
[40.57548141 -102.80381775]
[42.56851196 -104.85780334]
[42.87648773 -119.85464478]
[43.18446732 -134.85148621]
[43.49244308 -149.84831238]
[40.52564621 -158.55429077]
[43.96385574 -165.14904785]
[44.57968140 -180.13639832]
[30.55091667 -185.87832642]
[19.33412933 -196.07437134]
[12.28380013 -209.49334717]
[10.25129032 -224.51481628]
[13.48203468 -239.32487488]
[21.58590698 -252.13514709]
[33.58432388 -261.39874268]
[48.02841949 -265.99697876]
[63.17399597 -265.37466431]
[77.19215393 -259.60690308]
[88.39012909 -249.39019775]
[95.41571808 -235.95825195]
[97.42054749 -220.93305969]
[94.16251373 -206.12896729]
[86.03504181 -193.33364868]
[74.01957703 -184.09220886]
[59.56703568 -179.52058411]
[58.95121002 -164.53323364]
[58.48928070 -149.54034424]
[58.18130493 -134.54350281]
[57.87332535 -119.54666138]
[57.56534958 -104.54982758]
[57.87332535 -89.55298615]
[58.79674149 -74.58143616]
[59.72015381 -59.60988998]
[60.64356613 -44.63834000]
[63.24829102 -29.86622238]
[67.50113678 -15.48174191]
[71.75398254 -1.09726083]
[76.00682831 13.28722000]
[80.25967407 27.67170143]
[84.51252747 42.05618286]
[88.91282654 56.39624405]
[93.46011353 70.69037628]
[98.00740814 84.98450470]
[103.54041290 84.71889496]
[108.98990631 86.49370575]
[113.60500336 90.20640564]
[116.70119476 95.47968292]
[117.75994873 101.69722748]
[116.51068878 108.07510376]
[112.98270416 113.76058197]
[120.07910919 126.97576904]
[127.17551422 140.19094849]
[134.27191162 153.40612793]
[141.36831665 166.62132263]
[148.22808838 172.74826050]
[148.47158813 180.18148804]
[161.63973999 188.95135498]
[160.53906250 203.80523682]
[161.56991577 188.84069824]
[166.22351074 174.58082581]
[174.21812439 161.88885498]
[185.06980896 151.53312683]
[198.12161255 144.14053345]
[212.58341980 140.15859985]
[227.57978821 139.82838440]
[242.20286560 143.16987610]
[255.56742859 149.98078918]
[266.86441040 159.84881592]
[275.40997314 172.17657471]
[280.68673706 186.21778870]
[282.37530518 201.12245178]
[280.37344360 215.98826599]
[274.80233765 229.91531372]
[265.99926758 242.06050110]
[254.49710083 251.68859863]
[240.99215698 258.21676636]
[226.30200195 261.24975586]
[211.31590271 260.60403442]
[196.94108582 256.31863403]
[184.04774475 248.65299988]
[173.41641235 238.07118225]
[165.69012451 225.21255493]
[165.69012451 240.21255493]
[165.69012451 255.21255493]
[165.69012451 270.21255493]
[165.69012451 285.21255493]
[165.69012451 300.21255493]
[165.69012451 315.21255493]
[165.69012451 330.21255493]
[165.69012451 345.21255493]
[165.69012451 360.21255493]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 119]
[13 117]
[14 115]
[15 114]
[16 113]
[17 112]
[18 111]
[19 33]
[20 32]
[21 31]
[22 30]
[34 104]
[35 103]
[36 102]
[38 101]
[39 100]
[40 99]
[41 98]
[42 97]
[43 96]
[55 95]
[56 94]
[57 93]
[58 92]
[63 91]
[64 90]
[65 89]
[66 88]
[68 87]
[69 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
