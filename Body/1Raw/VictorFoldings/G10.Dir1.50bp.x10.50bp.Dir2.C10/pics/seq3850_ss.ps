%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACAUUACUAAUAAGUGGCUCCUUUAACCUCUCCACCCUUAUCACAACACAAGAACACCUxxxxxxxxxxUCGAAUACGCCGCAGGCCCCUUCGCCCUAUUCUUCAUAGCCGAAUACACAAACAUUAUUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[70.18643188 412.86511230]
[70.18643188 397.86511230]
[70.18643188 382.86511230]
[70.18643188 367.86511230]
[70.18643188 352.86511230]
[70.18643188 337.86511230]
[70.18643188 322.86511230]
[70.18643188 307.86511230]
[70.18643188 292.86511230]
[70.18643188 277.86511230]
[55.90142441 274.99139404]
[42.45235825 269.37109375]
[30.36191750 261.22055054]
[20.10039711 250.85443115]
[12.06741142 238.67361450]
[6.57633162 225.14978027]
[3.84206319 210.80699158]
[3.97263622 196.20150757]
[6.96493626 181.90014648]
[12.70475101 168.45831299]
[20.97112846 156.39842224]
[31.44487953 146.18959045]
[43.72090530 138.22940063]
[57.32386398 132.82839966]
[71.72657776 130.19801331]
[72.03863525 115.20126343]
[68.18148041 100.70567322]
[60.45739365 87.84726715]
[52.73330688 74.98886871]
[39.20753098 81.49870300]
[25.13879585 86.73275757]
[10.64713478 90.64637756]
[-4.14381409 93.20616150]
[-19.10785484 94.39027405]
[-34.11731720 94.18860626]
[-49.04414368 92.60289764]
[-63.76098251 89.64665985]
[-78.14226532 85.34511566]
[-92.06530762 79.73497772]
[-105.41130066 72.86409760]
[-118.06639862 64.79110718]
[-129.92262268 55.58487320]
[-140.87879944 45.32394791]
[-150.84149170 34.09587479]
[-159.72566223 21.99645042]
[-167.45553589 9.12890339]
[-173.96514893 -4.39698172]
[-179.19897461 -18.46580315]
[-183.11233521 -32.95753098]
[-185.67187500 -47.74852371]
[-186.85574341 -62.71258163]
[-186.65382385 -77.72204590]
[-185.06787109 -92.64884186]
[-182.11138916 -107.36563110]
[-177.80960083 -121.74684906]
[-172.19923401 -135.66978455]
[-165.32812500 -149.01567078]
[-157.25492859 -161.67063904]
[-148.04849243 -173.52670288]
[-137.78738403 -184.48271179]
[-126.55915070 -194.44520569]
[-114.45957947 -203.32917786]
[-101.59190369 -211.05883789]
[-88.06591034 -217.56822205]
[-73.99700165 -222.80181885]
[-59.50520706 -226.71495056]
[-44.71417236 -229.27423096]
[-29.75009155 -230.45785522]
[-14.74063587 -230.25569153]
[0.18613820 -228.66947937]
[14.90287685 -225.71275330]
[29.28401947 -221.41073608]
[43.20687103 -215.80012512]
[56.55263901 -208.92880249]
[69.20746613 -200.85539246]
[81.06337738 -191.64875793]
[92.01922607 -181.38746643]
[101.98152924 -170.15907288]
[110.86530304 -158.05934143]
[118.59474182 -145.19154358]
[125.10390472 -131.66543579]
[130.33726501 -117.59644318]
[134.25015259 -103.10458374]
[136.80918884 -88.31350708]
[137.99255371 -73.34941101]
[137.79014587 -58.33995438]
[136.20368958 -43.41320801]
[133.24671936 -28.69651794]
[128.94445801 -14.31544685]
[123.33361816 -0.39268991]
[116.46207428 12.95296478]
[108.38845062 25.60765648]
[99.18162537 37.46341324]
[88.92015076 48.41909027]
[77.69158173 58.38121033]
[65.59171295 67.26477814]
[73.31579590 80.12318420]
[81.03987885 92.98158264]
[91.66134644 82.94516754]
[105.36032104 83.07766724]
[114.47573853 92.04444122]
[129.46842957 91.57640076]
[144.46113586 91.10836029]
[159.45382690 90.64031982]
[168.87451172 81.76875305]
[181.41313171 81.72274780]
[190.30908203 89.97920990]
[205.30827332 89.82317352]
[220.30746460 89.66713715]
[235.30665588 89.51110077]
[247.51425171 79.10178375]
[263.23583984 82.29729462]
[270.41116333 96.64631653]
[263.53591919 111.14151001]
[247.88420105 114.66339874]
[235.46269226 104.51029205]
[220.46350098 104.66632843]
[205.46430969 104.82236481]
[190.46511841 104.97840118]
[175.90245056 114.72152710]
[159.92187500 105.63301086]
[144.92916870 106.10105133]
[129.93647766 106.56909943]
[114.94377899 107.03713989]
[103.95953369 117.93576050]
[87.03539276 115.51332092]
[86.72333527 130.51007080]
[101.78681946 134.00271606]
[115.79640961 140.53450012]
[128.14662170 149.82055664]
[138.30421448 161.45703125]
[145.83123779 174.93864441]
[150.40390015 189.68066406]
[151.82646179 205.04420471]
[150.03965759 220.36398315]
[145.12318420 234.97708130]
[137.29205322 248.25164795]
[126.88729858 259.61419678]
[114.36105347 268.57446289]
[100.25693512 274.74645996]
[85.18643188 277.86511230]
[85.18643188 292.86511230]
[85.18643188 307.86511230]
[85.18643188 322.86511230]
[85.18643188 337.86511230]
[85.18643188 352.86511230]
[85.18643188 367.86511230]
[85.18643188 382.86511230]
[85.18643188 397.86511230]
[85.18643188 412.86511230]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[25 127]
[26 126]
[27 98]
[28 97]
[29 96]
[101 124]
[102 123]
[103 122]
[104 121]
[107 119]
[108 118]
[109 117]
[110 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
