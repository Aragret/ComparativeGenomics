%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUAGGAGGCUUCAUUCACUGAUUUCCCCUAUUCUCAGGCUACACCCUAGACCAAACCUAxxxxxxxxxxGCAGCAGGCAAAUCAGCCCAAUUAGGUCUCCACCCCUGACUCCCCUCAGCCAUAGAAGGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[97.27828217 280.06423950]
[97.27828217 265.06423950]
[97.27828217 250.06425476]
[97.27828217 235.06425476]
[97.27828217 220.06425476]
[97.27828217 205.06425476]
[97.27828217 190.06425476]
[97.27828217 175.06425476]
[97.27828217 160.06425476]
[97.27828217 145.06425476]
[78.10195923 137.33979797]
[65.12882996 122.36712646]
[60.62969208 103.95994568]
[64.83979797 86.36948395]
[76.06852722 73.30625153]
[68.61361694 60.28994370]
[61.15870667 47.27363586]
[53.70379639 34.25732422]
[46.24888229 21.24101639]
[38.79397202 8.22470760]
[31.33906364 -4.79160213]
[23.88415337 -17.80791092]
[10.31147671 -25.93767357]
[10.70017242 -40.82720566]
[3.24526167 -53.84351730]
[-4.20964861 -66.85982513]
[-21.14673996 -71.11097717]
[-29.63041687 -85.98751068]
[-24.85622787 -102.08300781]
[-32.58031464 -114.94141388]
[-40.30439758 -127.79981232]
[-48.02848434 -140.65821838]
[-55.75256729 -153.51661682]
[-63.47665405 -166.37501526]
[-71.20073700 -179.23342896]
[-83.54125214 -183.12773132]
[-89.69950867 -194.04994202]
[-86.83332825 -205.84368896]
[-94.28823853 -218.86000061]
[-101.74314880 -231.87631226]
[-105.22451019 -217.28590393]
[-116.51196289 -207.40695190]
[-131.43501282 -205.88957214]
[-144.47990417 -213.29435730]
[-150.82678223 -226.88542175]
[-148.13063049 -241.64112854]
[-137.38760376 -252.10952759]
[-122.56704712 -254.42277527]
[-109.14548492 -247.72676086]
[-114.34090424 -261.79827881]
[-119.53631592 -275.86978149]
[-134.38195801 -273.41964722]
[-149.42301941 -273.82360840]
[-164.11575317 -277.06707764]
[-177.92903137 -283.03277588]
[-190.36352539 -291.50509644]
[-200.96972656 -302.17773438]
[-209.36421204 -314.66485596]
[-215.24356079 -328.51513672]
[-218.39520264 -343.22784424]
[-218.70523071 -358.27111816]
[-216.16244507 -373.10119629]
[-210.85873413 -387.18191528]
[-202.98583984 -400.00433350]
[-192.82836914 -411.10488892]
[-180.75350952 -420.08230591]
[-167.19775391 -426.61206055]
[-152.65112305 -430.45812988]
[-137.63948059 -431.48144531]
[-122.70549011 -429.64505005]
[-108.38899994 -425.01528931]
[-95.20755005 -417.75952148]
[-83.63763428 -408.14010620]
[-74.09749603 -396.50469971]
[-66.93201447 -383.27398682]
[-62.40020370 -368.92617798]
[-60.66590118 -353.97998047]
[-61.79179001 -338.97570801]
[-65.73717499 -324.45568848]
[-72.35942841 -310.94488525]
[-81.41916656 -298.93164062]
[-92.58888245 -288.85028076]
[-105.46479797 -281.06521606]
[-100.26937866 -266.99368286]
[-95.07396698 -252.92216492]
[-88.72683716 -239.33122253]
[-81.27192688 -226.31491089]
[-73.81701660 -213.29859924]
[-58.20675278 -205.34123230]
[-58.34233475 -186.95750427]
[-50.61825180 -174.09910583]
[-42.89416504 -161.24070740]
[-35.17008209 -148.38230896]
[-27.44599533 -135.52389526]
[-19.72191048 -122.66549683]
[-11.99782562 -109.80709839]
[0.85402530 -108.45553589]
[10.71464539 -99.80437469]
[13.81796551 -86.85843658]
[8.80666065 -74.31473541]
[16.26157188 -61.29842758]
[23.71648216 -48.28211594]
[36.75593185 -41.08337021]
[36.90046310 -25.26282120]
[44.35537338 -12.24651241]
[51.81028366 0.76979685]
[59.26519394 13.78610611]
[66.72010040 26.80241585]
[74.17501068 39.81872559]
[81.62992096 52.83503342]
[89.08483124 65.85134125]
[104.94738007 62.61612701]
[121.43669891 66.74085999]
[135.15893555 78.08799744]
[142.99444580 94.97382355]
[142.78912354 114.39740753]
[156.69168091 120.02936554]
[170.59423828 125.66132355]
[184.49679565 131.29327393]
[198.95086670 124.90148163]
[213.66079712 130.68022156]
[219.89941406 145.20106506]
[213.96546936 159.84907532]
[199.37947083 165.93382263]
[184.79502869 159.84535217]
[178.86483765 145.19583130]
[164.96228027 139.56387329]
[151.05972290 133.93191528]
[137.15716553 128.29995728]
[130.93743896 132.49104309]
[140.43798828 144.09878540]
[149.93852234 155.70652771]
[163.57391357 161.95759583]
[167.91235352 176.31649780]
[160.01965332 189.07211304]
[145.23379517 191.59762573]
[133.55464172 182.18499756]
[132.88076782 167.20065308]
[125.68939209 154.03691101]
[118.49800873 140.87318420]
[112.27828217 145.06425476]
[112.27828217 160.06425476]
[112.27828217 175.06425476]
[112.27828217 190.06425476]
[112.27828217 205.06425476]
[112.27828217 220.06425476]
[112.27828217 235.06425476]
[112.27828217 250.06425476]
[112.27828217 265.06423950]
[112.27828217 280.06423950]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[15 111]
[16 110]
[17 109]
[18 108]
[19 107]
[20 106]
[21 105]
[22 104]
[24 102]
[25 101]
[26 100]
[29 96]
[30 95]
[31 94]
[32 93]
[33 92]
[34 91]
[35 90]
[38 88]
[39 87]
[40 86]
[49 85]
[50 84]
[51 83]
[116 129]
[117 128]
[118 127]
[119 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
