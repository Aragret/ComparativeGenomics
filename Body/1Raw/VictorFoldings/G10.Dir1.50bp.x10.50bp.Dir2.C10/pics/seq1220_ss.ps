%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACCCCCUCCCCAAUAAAGCUAAAACUCACCUGAGUUGUAAAAAACUCCAGUUGACACAAxxxxxxxxxxAAAACUAACCCCCUAAUAAAAUUAAUUAACCACUCAUUCAUCGACCUCCCCACCCCAUCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[2.57178831 304.10772705]
[-4.33521032 317.42288208]
[-11.24220848 330.73803711]
[-18.14920807 344.05319214]
[-24.91732216 357.43948364]
[-31.54582024 370.89544678]
[-38.17432022 384.35140991]
[-44.80281830 397.80737305]
[-51.43131638 411.26333618]
[-53.00667191 428.14395142]
[-69.66367340 431.30316162]
[-77.31054688 416.17169189]
[-64.88728333 404.63485718]
[-58.25878143 391.17889404]
[-51.63028336 377.72290039]
[-45.00178528 364.26693726]
[-38.37328720 350.81097412]
[-38.23798370 343.37274170]
[-31.46436310 337.14620972]
[-24.55736351 323.83105469]
[-17.65036583 310.51589966]
[-10.74336720 297.20074463]
[-30.82955360 284.48806763]
[-49.47049713 269.73742676]
[-66.46027374 253.11172485]
[-81.61120605 234.79463196]
[-94.75592041 214.98849487]
[-105.74921417 193.91210938]
[-114.46964264 171.79829407]
[-120.82087708 148.89135742]
[-124.73274994 125.44431305]
[-126.16205597 101.71619415]
[-125.09300995 77.96911621]
[-121.53740692 54.46541214]
[-115.53453827 31.46471405]
[-107.15071106 9.22111034]
[-96.47853088 -12.01968002]
[-109.25588989 -19.87710571]
[-122.03324890 -27.73453140]
[-137.84158325 -28.37263680]
[-144.62995911 -41.63035965]
[-157.40731812 -49.48778534]
[-170.18467712 -57.34521103]
[-183.04307556 -65.06929779]
[-195.98112488 -72.65920258]
[-208.91918945 -80.24911499]
[-221.85723877 -87.83901978]
[-237.08590698 -83.61250305]
[-250.80146790 -91.46480560]
[-254.86674500 -106.73729706]
[-246.86987305 -120.36907959]
[-231.55525208 -124.27265930]
[-218.00877380 -116.13211060]
[-214.26733398 -100.77707672]
[-201.32926941 -93.18717194]
[-188.39122009 -85.59725952]
[-175.45317078 -78.00735474]
[-168.04447937 -77.33124542]
[-162.32723999 -70.12256622]
[-149.54988098 -62.26514435]
[-136.77253723 -54.40771866]
[-121.87812042 -54.33162689]
[-114.17581940 -40.51189041]
[-101.39846039 -32.65446472]
[-88.62110901 -24.79703712]
[-81.80352020 -34.53513718]
[-74.48368835 -43.90158081]
[-66.68183899 -52.87048721]
[-58.41952896 -61.41708374]
[-49.71957779 -69.51776123]
[-40.60601807 -77.15013123]
[-31.10402870 -84.29312897]
[-21.23985863 -90.92700195]
[-11.04075909 -97.03343201]
[-0.53490478 -102.59554291]
[10.24868107 -107.59798431]
[21.28020859 -112.02692413]
[32.52920532 -115.87013245]
[43.96458817 -119.11698914]
[55.55477524 -121.75852966]
[67.26773834 -123.78744507]
[79.07113647 -125.19814301]
[90.93234253 -125.98672485]
[102.81860352 -126.15100861]
[114.69707489 -125.69053650]
[126.53494263 -124.60659027]
[138.29951477 -122.90215302]
[149.95826721 -120.58193970]
[161.47901917 -117.65236664]
[172.82994080 -114.12151337]
[183.97964478 -109.99914551]
[194.89736938 -105.29664612]
[205.55293274 -100.02700043]
[215.91690063 -94.20477295]
[225.96064758 -87.84605408]
[235.65641785 -80.96839905]
[244.97743225 -73.59080505]
[253.89793396 -65.73366547]
[262.39328003 -57.41867828]
[270.44003296 -48.66881943]
[278.01593018 -39.50825119]
[285.10003662 -29.96228790]
[291.67282104 -20.05729866]
[297.71606445 -9.82064629]
[303.21313477 0.71938998]
[308.14883423 11.53369331]
[312.50949097 22.59238815]
[316.28308105 33.86492538]
[319.45919800 45.32016373]
[322.02902222 56.92645645]
[323.98550415 68.65174103]
[325.32321167 80.46363068]
[326.03845215 92.32948303]
[326.12927246 104.21652985]
[325.59536743 116.09192657]
[324.43826294 127.92287445]
[322.66113281 139.67668152]
[320.26889038 151.32087708]
[317.26815796 162.82330322]
[313.66720581 174.15216064]
[309.47601318 185.27618408]
[304.70608521 196.16462708]
[299.37069702 206.78741455]
[293.48449707 217.11518860]
[287.06381226 227.11943054]
[280.12637329 236.77250671]
[272.69128418 246.04772949]
[264.77914429 254.91949463]
[256.41180420 263.36331177]
[247.61238098 271.35580444]
[238.40515137 278.87490845]
[228.81558228 285.89990234]
[218.87014771 292.41131592]
[208.59634399 298.39117432]
[198.02252197 303.82296753]
[187.17791748 308.69171143]
[176.09246826 312.98394775]
[164.79682922 316.68777466]
[153.32217407 319.79299927]
[141.70021057 322.29104614]
[129.96305847 324.17501831]
[118.14312744 325.43966675]
[106.27307892 326.08154297]
[94.38569641 326.09887695]
[82.51382446 325.49157715]
[70.69026184 324.26138306]
[58.94766617 322.41162109]
[47.31848145 319.94744873]
[35.83482742 316.87567139]
[24.52843475 313.20474243]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 22]
[2 21]
[3 20]
[4 19]
[5 17]
[6 16]
[7 15]
[8 14]
[9 13]
[37 65]
[38 64]
[39 63]
[41 61]
[42 60]
[43 59]
[44 57]
[45 56]
[46 55]
[47 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
