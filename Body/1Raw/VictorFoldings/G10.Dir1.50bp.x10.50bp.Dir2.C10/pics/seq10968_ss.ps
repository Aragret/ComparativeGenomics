%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUCGGCAUCAACCAACCACACCUAGCAUUCCUGCACAUCUGUACCCACGCCUUCUUCAAAxxxxxxxxxxUCGGGCGAGGCCUAUAUUACGGAUCAUUUCUCUACUCAGAAACCUGAAACAUCGGCAUUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[86.73807526 454.03146362]
[86.73807526 439.03146362]
[86.73807526 424.03146362]
[86.73807526 409.03146362]
[86.73807526 394.03146362]
[86.73807526 379.03146362]
[86.73807526 364.03146362]
[86.73807526 349.03146362]
[86.73807526 334.03146362]
[86.73807526 319.03146362]
[72.70120239 316.48446655]
[59.32555008 311.51300049]
[47.02651596 304.27011108]
[36.18627548 294.97937012]
[27.14193916 283.92807007]
[20.17506218 271.45828247]
[15.50287056 257.95617676]
[13.27149963 243.84022522]
[13.55141640 229.54815674]
[16.33519363 215.52337646]
[21.53771210 202.20120239]
[28.99874687 189.99536133]
[38.48791504 179.28518677]
[49.71178436 170.40376282]
[62.32294464 163.62759399]
[75.93076324 159.16801453]
[90.11347961 157.16456604]
[90.73745728 142.17753601]
[83.37665558 139.85478210]
[76.54695129 136.25871277]
[70.46655273 131.50421143]
[65.32971191 125.74317169]
[61.30056000 119.15967560]
[58.50781250 111.96403503]
[57.04070282 104.38616180]
[42.08045197 103.29485321]
[27.12020302 102.20353699]
[12.60298061 109.83126831]
[-1.11504138 100.84528351]
[0.07806285 84.48960114]
[14.95493031 77.58953857]
[28.21151352 87.24329376]
[43.17176437 88.33460236]
[58.13201141 89.42591095]
[65.11572266 74.54755402]
[77.15297699 63.35639954]
[92.50000000 57.47365952]
[92.50000000 42.47365952]
[92.50000000 27.47365761]
[92.50000000 12.47365761]
[92.50000000 -2.52634192]
[92.50000000 -17.52634239]
[92.50000000 -32.52634048]
[91.40869141 -47.48659134]
[89.23184967 -62.32779694]
[79.34266663 -70.67391968]
[77.86530304 -83.12528229]
[85.05204010 -92.90578461]
[83.18442535 -107.78906250]
[81.31681824 -122.67234039]
[79.44920349 -137.55561829]
[64.50057220 -139.60522461]
[50.59215546 -145.45486450]
[38.67225266 -154.70571899]
[29.55358315 -166.72705078]
[23.85787010 -180.69921875]
[21.97345924 -195.66957092]
[24.02883339 -210.61740112]
[29.88385010 -224.52355957]
[39.13930893 -236.43988037]
[51.16415405 -245.55390930]
[65.13851166 -251.24423218]
[80.10958862 -253.12286377]
[95.05663300 -251.06172180]
[108.96052551 -245.20132446]
[120.87328339 -235.94126892]
[129.98266602 -223.91290283]
[135.66758728 -209.93635559]
[137.54043579 -194.96455383]
[135.47352600 -180.01831055]
[129.60777283 -166.11666870]
[120.34310913 -154.20750427]
[108.31123352 -145.10275269]
[94.33248138 -139.42323303]
[96.20009613 -124.53995514]
[98.06771088 -109.65667725]
[99.93531799 -94.77339172]
[111.27748108 -81.41841888]
[104.07305908 -64.50463104]
[106.24989319 -49.66342926]
[115.51944733 -61.45644760]
[130.16384888 -64.70322418]
[143.54904175 -57.93294144]
[149.61138916 -44.21259689]
[145.60459900 -29.75764465]
[133.34379578 -21.11631775]
[118.38322449 -22.20322227]
[107.50000000 -32.52634048]
[107.50000000 -17.52634239]
[107.50000000 -2.52634192]
[107.50000000 12.47365761]
[107.50000000 27.47365761]
[107.50000000 42.47365952]
[107.50000000 57.47365952]
[124.35156250 64.33851624]
[136.87928772 77.53540039]
[142.85874939 94.72107697]
[157.83847046 95.50091553]
[172.81817627 96.28076172]
[187.79789734 97.06060791]
[202.77760315 97.84045410]
[214.34956360 87.07637787]
[230.14028931 87.73112488]
[240.78141785 99.41624451]
[239.95976257 115.19916534]
[228.16278076 125.71614838]
[212.38943481 124.72766876]
[201.99777222 112.82016754]
[187.01805115 112.04032135]
[172.03833008 111.26047516]
[157.05862427 110.48063660]
[142.07890320 109.70079041]
[134.88427734 125.45244598]
[122.07975006 137.11097717]
[105.72447968 142.80151367]
[105.10050201 157.78854370]
[120.45377350 161.42514038]
[134.81173706 167.95625305]
[147.63461304 177.13442993]
[158.44068909 188.61277771]
[166.82446289 201.95800781]
[172.47178650 216.66680908]
[175.17167664 232.18487549]
[174.82421875 247.92774963]
[171.44421387 263.30282593]
[165.16059875 277.73171997]
[156.21148682 290.67193604]
[144.93521118 301.63732910]
[131.75744629 310.21636963]
[117.17520142 316.08755493]
[101.73807526 319.03146362]
[101.73807526 334.03146362]
[101.73807526 349.03146362]
[101.73807526 364.03146362]
[101.73807526 379.03146362]
[101.73807526 394.03146362]
[101.73807526 409.03146362]
[101.73807526 424.03146362]
[101.73807526 439.03146362]
[101.73807526 454.03146362]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[27 126]
[28 125]
[35 44]
[36 43]
[37 42]
[47 104]
[48 103]
[49 102]
[50 101]
[51 100]
[52 99]
[53 98]
[54 90]
[55 89]
[58 87]
[59 86]
[60 85]
[61 84]
[107 122]
[108 121]
[109 120]
[110 119]
[111 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
