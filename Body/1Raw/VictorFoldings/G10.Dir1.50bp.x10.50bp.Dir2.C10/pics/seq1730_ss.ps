%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUUAACUAAAACCCCUACGCAUUUAUAUAGAGGAGACAAGUCGUAACAUGGUAAGUGUACxxxxxxxxxxUCAACACAACCACCCACAGCCUAAUUAUUAGCAUCAUCCCUCUACUAUUUUUUAACCAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[33.67542648 486.35952759]
[32.42855072 471.41143799]
[31.18167686 456.46334839]
[29.93480301 441.51525879]
[28.68792915 426.56716919]
[27.44105339 411.61907959]
[13.07287025 407.31149292]
[3.80792046 419.10815430]
[-5.45702887 430.90478516]
[-14.72197819 442.70141602]
[-23.98692703 454.49804688]
[-33.25187683 466.29470825]
[-42.51682663 478.09133911]
[-42.03746796 494.12722778]
[-54.36862564 504.38989258]
[-70.05088806 501.00668335]
[-77.05416870 486.57290649]
[-70.00614929 472.16094971]
[-54.31346512 468.82638550]
[-45.04851532 457.02975464]
[-35.78356552 445.23312378]
[-26.51861763 433.43646240]
[-17.25366783 421.63983154]
[-7.98871946 409.84320068]
[1.27622986 398.04653931]
[-10.25645733 386.38116455]
[-18.32268333 372.19699097]
[-22.40838242 356.48880005]
[-22.27684593 340.34500122]
[-17.98197746 324.87216187]
[-9.86151600 311.11923218]
[1.48906636 300.00643921]
[15.26005745 292.26370239]
[30.48516655 288.38284302]
[46.10929489 288.58648682]
[49.81545639 274.05154419]
[53.52161789 259.51663208]
[57.07638168 244.94390869]
[60.47935867 230.33502197]
[63.88233566 215.72613525]
[67.28531647 201.11723328]
[70.68829346 186.50834656]
[74.09127045 171.89945984]
[72.53556824 164.62446594]
[77.71998596 157.02357483]
[81.42614746 142.48863220]
[65.93782806 131.46490479]
[56.17456818 115.15266418]
[53.77733994 96.29360962]
[59.14906311 78.05751038]
[47.25668335 68.91577911]
[30.93745613 67.29873657]
[24.42569160 52.24785614]
[34.42013550 39.24619675]
[50.63935852 41.66874695]
[56.39841843 57.02339935]
[68.29080200 66.16513062]
[79.50865173 58.40221024]
[92.50000000 54.23951721]
[92.50000000 39.23951721]
[92.50000000 24.23951912]
[92.50000000 9.23951817]
[83.92671204 -0.45339626]
[84.27196503 -12.98734093]
[92.80198669 -21.62134361]
[93.11404419 -36.61809540]
[93.42610168 -51.61484909]
[93.73815918 -66.61160278]
[79.69130707 -72.36054993]
[68.67245483 -82.79843140]
[62.17181396 -96.51361084]
[61.06854248 -111.65122223]
[65.51184845 -126.16402435]
[74.90081024 -138.08927917]
[87.96564484 -145.81420898]
[102.93945312 -148.29406738]
[117.79713440 -145.19346619]
[130.52931213 -136.93174744]
[139.41407776 -124.62625122]
[143.24983215 -109.94116974]
[141.51780701 -94.86255646]
[134.45227051 -81.42967224]
[123.00875092 -71.45919037]
[108.73490906 -66.29954529]
[108.42285919 -51.30279541]
[108.11080170 -36.30604172]
[107.79874420 -21.30928802]
[117.08272552 -6.44968987]
[107.50000000 9.23951817]
[107.50000000 24.23951912]
[107.50000000 39.23951721]
[107.50000000 54.23951721]
[113.45387268 55.62360001]
[119.17395782 57.77878571]
[124.56087494 60.66763306]
[129.52101135 64.23993683]
[133.96815491 68.43363190]
[137.82507324 73.17583466]
[141.02470398 78.38415527]
[155.25149536 73.63034058]
[162.45506287 67.90666199]
[169.82394409 68.92895508]
[184.14654541 64.47213745]
[198.46914673 60.01532364]
[211.79647827 49.53590012]
[225.55574036 59.44140625]
[219.84628296 75.40506744]
[202.92596436 74.33792114]
[188.60336304 78.79473877]
[174.28076172 83.25155640]
[160.00531006 87.85711670]
[145.77851868 92.61093140]
[145.41343689 109.37506104]
[139.11007690 124.91330719]
[127.69270325 137.19389343]
[112.65422821 144.61100769]
[95.96109009 146.19479370]
[92.25492859 160.72972107]
[88.70016479 175.30242920]
[85.29718781 189.91133118]
[81.89421082 204.52021790]
[78.49122620 219.12910461]
[75.08824921 233.73800659]
[71.68527222 248.34689331]
[72.78740692 257.48129272]
[68.05655670 263.22277832]
[64.35039520 277.75772095]
[60.64423370 292.29266357]
[71.76158905 297.79785156]
[81.54078674 305.51693726]
[89.54506683 315.13296509]
[95.41120148 326.24380493]
[98.86599731 338.37875366]
[99.73889923 351.01864624]
[97.97033691 363.61801147]
[93.61518097 375.62847900]
[86.84137726 386.52285767]
[77.92348480 395.81814575]
[67.23167419 403.09692383]
[55.21633148 408.02612305]
[42.38914108 410.37222290]
[43.63601685 425.32028198]
[44.88288879 440.26837158]
[46.12976456 455.21646118]
[47.37664032 470.16455078]
[48.62351227 485.11264038]
[59.89340210 496.53057861]
[57.85016632 512.44299316]
[44.06120300 520.64324951]
[29.10422516 514.84075928]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 146]
[2 145]
[3 144]
[4 143]
[5 142]
[6 141]
[7 25]
[8 24]
[9 23]
[10 22]
[11 21]
[12 20]
[13 19]
[35 128]
[36 127]
[37 126]
[38 124]
[39 123]
[40 122]
[41 121]
[42 120]
[43 119]
[45 118]
[46 117]
[50 57]
[51 56]
[59 92]
[60 91]
[61 90]
[62 89]
[65 87]
[66 86]
[67 85]
[68 84]
[99 112]
[100 111]
[102 110]
[103 109]
[104 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
