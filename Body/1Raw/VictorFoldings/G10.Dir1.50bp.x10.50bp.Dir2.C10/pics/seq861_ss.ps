%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:33:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUCAAAGCAAUACACUGAAAAUGUUUAGACGGGCUCACAUCACCCCAUAAACAAAUAGGxxxxxxxxxxCUAGGAAAAAACCUUGUAGAGAGAGUAAAAAAUUUAACACCCAUAGUAGGCCUAAAAGCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 255.13160706]
[92.50000000 240.13160706]
[92.50000000 225.13160706]
[92.50000000 210.13160706]
[92.50000000 195.13160706]
[92.50000000 180.13160706]
[92.50000000 165.13160706]
[92.50000000 150.13160706]
[92.50000000 135.13160706]
[92.50000000 120.13160706]
[84.37845612 107.52048492]
[70.72221375 101.31507874]
[57.06597519 95.10966492]
[47.70294571 107.47212982]
[35.83908081 117.44860077]
[22.06598282 124.54561615]
[7.06957579 128.41319275]
[-8.40406609 128.86210632]
[-23.58582687 125.87311554]
[-37.72178268 119.59780121]
[-50.11064148 110.35085297]
[-60.13853073 98.59430695]
[-67.30941772 84.91444397]
[-71.26963806 69.99258423]
[-71.82536316 54.57110214]
[-68.95204163 39.41655350]
[-82.73442078 33.49659348]
[-92.60329437 41.28901672]
[-104.78421021 44.10425186]
[-116.92999268 41.46330261]
[-126.72724915 33.93248367]
[-132.33699036 23.00336647]
[-132.73968506 10.79769516]
[-146.26387024 4.30953026]
[-159.78805542 -2.17863488]
[-173.31225586 -8.66680050]
[-186.83644104 -15.15496540]
[-200.36062622 -21.64312935]
[-212.50650024 -15.73250103]
[-225.64390564 -17.88572693]
[-234.98953247 -27.09081078]
[-237.27253723 -39.81027222]
[-250.65882874 -46.57838440]
[-264.04510498 -53.34650040]
[-277.29199219 -45.43929672]
[-292.71014404 -45.97197342]
[-305.37973022 -54.77455521]
[-311.25790405 -69.03816986]
[-308.46896362 -84.21134949]
[-297.90286255 -95.45238495]
[-282.93118286 -99.17430878]
[-268.33135986 -94.18946838]
[-258.76211548 -82.08850098]
[-257.27700806 -66.73278809]
[-243.89071655 -59.96467209]
[-230.50442505 -53.19655609]
[-214.79891968 -59.12910461]
[-199.34458923 -51.75024033]
[-193.87246704 -35.16732025]
[-180.34828186 -28.67915535]
[-166.82408142 -22.19099045]
[-153.29989624 -15.70282459]
[-139.77571106 -9.21465969]
[-126.25151825 -2.72649455]
[-111.17975616 -11.83198166]
[-93.49913788 -10.10098076]
[-80.24824524 1.96534669]
[-76.81445312 19.71421051]
[-63.03207397 25.63417435]
[-54.61780167 13.78701782]
[-43.91019058 3.95446992]
[-31.37984085 -3.42788172]
[-17.57818031 -8.03221130]
[-3.11319733 -9.65301037]
[11.37733555 -8.21626091]
[25.25398636 -3.78281045]
[37.90388107 3.45420074]
[48.76776886 13.17775154]
[57.36474228 24.96082687]
[63.31354141 38.28516769]
[66.34943390 52.56407547]
[66.33603668 67.16822815]
[63.27138138 81.45343018]
[76.92762756 87.65883636]
[90.58386230 93.86424255]
[91.59796143 89.97492981]
[94.16423798 86.26652527]
[98.22513580 83.33071899]
[103.50751495 81.72855377]
[109.53953552 81.91515350]
[115.69272614 84.17276001]
[121.24567413 88.56033325]
[136.17997742 87.15802765]
[151.11428833 85.75572205]
[165.88034058 83.11685944]
[180.37593079 79.25969696]
[194.87153625 75.40254211]
[181.66696167 68.28640747]
[175.02272034 54.83820724]
[177.39372253 40.02678299]
[187.90394592 29.32465744]
[202.67004395 26.68605614]
[216.23625183 33.08588791]
[223.59013367 46.15954208]
[222.01457214 61.07656479]
[212.09245300 72.32496643]
[227.02674866 70.92266083]
[241.96105957 69.52035522]
[256.89535522 68.11805725]
[272.09988403 60.61744308]
[283.51638794 73.15138245]
[274.63269043 87.59146881]
[258.29766846 83.05236053]
[243.36335754 84.45466614]
[228.42906189 85.85697174]
[213.49475098 87.25926971]
[198.72869873 89.89813995]
[184.23309326 93.75529480]
[169.73750305 97.61245728]
[182.94207764 104.72858429]
[189.58630371 118.17678833]
[187.21530151 132.98820496]
[176.70509338 143.69033813]
[161.93899536 146.32893372]
[148.37278748 139.92910767]
[141.01890564 126.85545349]
[142.59446716 111.93843079]
[152.51658630 100.69003296]
[137.58227539 102.09233093]
[122.64797211 103.49463654]
[136.42636108 109.42388916]
[151.37834167 110.62316132]
[163.43328857 119.54943085]
[168.94259644 133.50103760]
[166.23880005 148.25535583]
[156.14025879 159.34675598]
[141.70339966 163.41828918]
[127.29776764 159.23764038]
[117.28342438 148.07015991]
[114.69138336 133.29534912]
[107.50000000 120.13160706]
[107.50000000 135.13160706]
[107.50000000 150.13160706]
[107.50000000 165.13160706]
[107.50000000 180.13160706]
[107.50000000 195.13160706]
[107.50000000 210.13160706]
[107.50000000 225.13160706]
[107.50000000 240.13160706]
[107.50000000 255.13160706]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 85]
[12 84]
[13 83]
[26 69]
[27 68]
[33 64]
[34 63]
[35 62]
[36 61]
[37 60]
[38 59]
[42 56]
[43 55]
[44 54]
[92 130]
[93 129]
[94 128]
[95 119]
[96 118]
[97 117]
[106 116]
[107 115]
[108 114]
[109 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
