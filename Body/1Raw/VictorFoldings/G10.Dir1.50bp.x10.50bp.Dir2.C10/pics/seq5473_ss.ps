%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACACCCUUAAUUCCAUCCACCCUCCUCUCCCUAGGAGGCCUGCCCCCGCUAACCGGCUUUxxxxxxxxxxCCACGCCUUCUUCAAAGCCAUACUAUUUAUGUGCUCCGGGUCCAUCAUCCACAACCUUAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.11127472 438.86804199]
[95.11127472 423.86804199]
[95.11127472 408.86804199]
[95.11127472 393.86804199]
[95.11127472 378.86804199]
[95.11127472 363.86804199]
[95.11127472 348.86804199]
[95.11127472 333.86804199]
[95.11127472 318.86804199]
[95.11127472 303.86804199]
[80.03276825 300.94400024]
[65.80441284 295.14678955]
[52.96820831 286.69528198]
[42.01349258 275.90951538]
[33.35829926 263.19854736]
[27.33340073 249.04493713]
[24.16966820 233.98648071]
[23.98922920 218.59568787]
[26.80074310 203.45808411]
[32.49901962 189.14990234]
[40.86893845 176.21617126]
[51.59357834 165.14990234]
[64.26621246 156.37339783]
[78.40573883 150.22200012]
[93.47493744 146.93142700]
[93.16287994 131.93467712]
[85.83248901 131.87896729]
[78.27102661 130.08610535]
[70.89678192 126.46845245]
[64.15182495 121.03942871]
[58.47771072 113.91907501]
[43.51746368 112.82775879]
[28.55721283 111.73645020]
[13.59696484 110.64514160]
[-1.36328411 109.55383301]
[-16.32353210 108.46251678]
[-28.11692238 118.98352051]
[-43.89060211 118.00041199]
[-54.28633118 106.09644318]
[-53.13650513 90.33403778]
[-41.12329865 80.06475067]
[-25.37392998 81.38115692]
[-15.23222256 93.50227356]
[-0.27197352 94.59358215]
[14.68827534 95.68489075]
[29.64852333 96.77619934]
[44.60877228 97.86751556]
[59.56902313 98.95882416]
[62.52900314 92.06763458]
[53.55306625 80.04962158]
[68.44896698 78.28524780]
[71.40895081 71.39405823]
[60.31763077 61.29541016]
[44.18930054 58.32742691]
[38.95117569 42.78734589]
[49.99179077 30.66147232]
[65.95350647 34.42386246]
[70.41628265 50.20409393]
[81.50759888 60.30274582]
[99.56614685 61.77669144]
[113.11504364 70.09072113]
[115.22822571 54.41127396]
[129.06251526 48.89204788]
[138.08004761 36.90521622]
[147.09756470 24.91838455]
[156.11509705 12.93155193]
[142.10765076 18.29731750]
[127.31627655 20.79034042]
[112.32389832 20.31237221]
[97.72135162 16.88224792]
[84.08412933 10.63514900]
[71.94967651 1.81727207]
[61.79619598 -9.22387218]
[54.02384186 -22.05315590]
[48.93891907 -36.16497803]
[46.74182510 -51.00320053]
[47.51914215 -65.98304749]
[51.24024200 -80.51416779]
[57.75847244 -94.02388763]
[66.81695557 -105.97980499]
[78.05869293 -115.91073608]
[91.04065704 -123.42529297]
[105.25122070 -128.22734070]
[120.13036346 -130.12763977]
[135.09170532 -129.05128479]
[149.54559326 -125.04069519]
[162.92243958 -118.25392914]
[174.69503784 -108.95845795]
[184.39945984 -97.52061462]
[191.65322876 -84.39115143]
[196.17048645 -70.08750153]
[197.77322388 -55.17337418]
[196.39825439 -40.23652267]
[192.09977722 -25.86561203]
[185.04719543 -12.62699318]
[175.51995850 -1.04390478]
[189.74673462 -5.79771948]
[203.97351074 -10.55153465]
[218.15007019 -15.45308495]
[232.27487183 -20.50184250]
[246.39967346 -25.55059814]
[260.52447510 -30.59935379]
[268.66049194 -44.42632294]
[284.56320190 -46.54357529]
[296.03344727 -35.32693481]
[294.27221680 -19.38085175]
[280.63058472 -10.93779182]
[265.57324219 -16.47455215]
[251.44844055 -11.42579460]
[237.32363892 -6.37703848]
[223.19882202 -1.32828236]
[217.92475891 3.91860127]
[208.72732544 3.67524457]
[194.50054932 8.42905903]
[180.27377319 13.18287468]
[168.10192871 21.94908142]
[159.08441162 33.93591309]
[150.06687927 45.92274857]
[141.04934692 57.90958023]
[139.58116150 72.73164368]
[125.10187531 79.10824585]
[132.64949036 99.23849487]
[126.04859161 119.69873810]
[108.15963745 131.62261963]
[108.47168732 146.61936951]
[122.93180084 149.08001709]
[136.68484497 154.16748047]
[149.25816345 161.70529175]
[160.21998596 171.43281555]
[169.19418335 183.01420593]
[175.87319946 196.05010986]
[180.02859497 210.09132385]
[181.51889038 224.65432739]
[180.29431152 239.23791504]
[176.39851379 253.34049988]
[169.96701050 266.47726440]
[161.22244263 278.19696045]
[150.46687317 288.09722900]
[138.07141113 295.83862305]
[124.46328735 301.15606689]
[110.11127472 303.86804199]
[110.11127472 318.86804199]
[110.11127472 333.86804199]
[110.11127472 348.86804199]
[110.11127472 363.86804199]
[110.11127472 378.86804199]
[110.11127472 393.86804199]
[110.11127472 408.86804199]
[110.11127472 423.86804199]
[110.11127472 438.86804199]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[25 125]
[26 124]
[31 48]
[32 47]
[33 46]
[34 45]
[35 44]
[36 43]
[52 59]
[53 58]
[61 121]
[63 119]
[64 118]
[65 117]
[66 116]
[96 115]
[97 114]
[98 113]
[99 111]
[100 110]
[101 109]
[102 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
