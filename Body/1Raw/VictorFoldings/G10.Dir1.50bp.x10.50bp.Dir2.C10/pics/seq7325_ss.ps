%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUGCCCCCCACCCUACCACACAUUCGAAGAACCCGUAUACAUAAAAUCUAGACAAAAAAGGAAGxxxxxxxxxxAAGUAAUAACCAUGCACACUACUAUAACCACCCUAACCCUGACUUCCCUAAUUCCCCCCAUCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[125.94377899 65.87807465]
[119.09434509 79.22293091]
[112.24490356 92.56778717]
[112.74340057 106.54073334]
[101.09995270 114.28164673]
[94.25051880 127.62650299]
[87.40107727 140.97135925]
[80.55163574 154.31622314]
[73.70220184 167.66107178]
[66.85276031 181.00593567]
[64.99932098 197.85826111]
[48.29249954 200.74244690]
[40.89612579 185.48695374]
[53.50790405 174.15649414]
[60.35734177 160.81163025]
[67.20677948 147.46678162]
[74.05622101 134.12191772]
[80.90565491 120.77706909]
[87.75509644 107.43221283]
[87.25659943 93.45926666]
[98.90004730 85.71835327]
[105.74948120 72.37349701]
[112.59892273 59.02863693]
[99.57735443 51.57766724]
[86.90840149 43.54174423]
[74.61833954 34.93752670]
[62.73262405 25.78285027]
[51.27590179 16.09668541]
[40.27191544 5.89910936]
[29.74347115 -4.78874111]
[19.71239090 -15.94471455]
[10.19946766 -27.54568672]
[1.22441673 -39.56761551]
[-7.19415903 -51.98558044]
[-15.03881168 -64.77384186]
[-22.29327965 -77.90590668]
[-28.94252968 -91.35453796]
[-34.97277832 -105.09187317]
[-40.37152863 -119.08943939]
[-45.12759018 -133.31822205]
[-49.23110199 -147.74871826]
[-52.67356491 -162.35104370]
[-55.44783783 -177.09490967]
[-57.54817581 -191.94976807]
[-58.97022247 -206.88482666]
[-59.71103287 -221.86914062]
[-59.76906586 -236.87164307]
[-59.14420700 -251.86123657]
[-57.83775330 -266.80685425]
[-55.85240555 -281.67752075]
[-53.19227982 -296.44241333]
[-49.86289597 -311.07092285]
[-45.87114716 -325.53274536]
[-41.22531509 -339.79788208]
[-35.93502045 -353.83679199]
[-30.01123238 -367.62039185]
[-23.46622849 -381.12005615]
[-16.31357574 -394.30786133]
[-8.56809616 -407.15643311]
[-0.24584611 -419.63916016]
[8.63592720 -431.73016357]
[18.05881310 -443.40438843]
[28.00328255 -454.63763428]
[38.44872284 -465.40661621]
[49.37348557 -475.68899536]
[60.75492859 -485.46353149]
[72.56945801 -494.70986938]
[84.79258728 -503.40893555]
[97.39898682 -511.54263306]
[110.36252594 -519.09411621]
[123.65632629 -526.04772949]
[137.25285339 -532.38909912]
[151.12390137 -538.10504150]
[165.24073792 -543.18377686]
[179.57411194 -547.61468506]
[194.09428406 -551.38861084]
[208.77119446 -554.49774170]
[223.57440186 -556.93566895]
[238.47322083 -558.69726562]
[253.43678284 -559.77893066]
[268.43408203 -560.17846680]
[283.43402100 -559.89495850]
[298.40548706 -558.92901611]
[313.31750488 -557.28265381]
[328.13909912 -554.95928955]
[342.83959961 -551.96368408]
[357.38854980 -548.30218506]
[371.75573730 -543.98223877]
[385.91143799 -539.01287842]
[399.82626343 -533.40435791]
[413.47143555 -527.16827393]
[426.81860352 -520.31768799]
[439.84014893 -512.86663818]
[452.50906372 -504.83065796]
[464.79910278 -496.22640991]
[476.68475342 -487.07168579]
[488.14144897 -477.38546753]
[499.14538574 -467.18783569]
[509.67379761 -456.49993896]
[519.70483398 -445.34393311]
[529.21771240 -433.74291992]
[538.19268799 -421.72097778]
[546.61126709 -409.30297852]
[554.45587158 -396.51467896]
[561.71026611 -383.38259888]
[568.35943604 -369.93392944]
[574.38964844 -356.19656372]
[579.78833008 -342.19897461]
[584.54437256 -327.97018433]
[588.64782715 -313.53967285]
[592.09020996 -298.93731689]
[594.86444092 -284.19345093]
[596.96472168 -269.33859253]
[598.38671875 -254.40350342]
[599.12744141 -239.41920471]
[599.18542480 -224.41670227]
[598.56048584 -209.42710876]
[597.25396729 -194.48150635]
[595.26855469 -179.61083984]
[592.60839844 -164.84596252]
[589.27893066 -150.21745300]
[585.28717041 -135.75566101]
[580.64123535 -121.49052429]
[575.35089111 -107.45162964]
[569.42706299 -93.66807556]
[562.88201904 -80.16842651]
[555.72930908 -66.98066711]
[547.98376465 -54.13212204]
[539.66149902 -41.64942932]
[530.77966309 -29.55846024]
[521.35675049 -17.88427353]
[511.41220093 -6.65106726]
[500.96673584 4.11787653]
[490.04193115 14.40023804]
[478.66043091 24.17470551]
[466.84588623 33.42101669]
[454.62271118 42.12001419]
[442.01626587 50.25365829]
[429.05270386 57.80509949]
[415.75888062 64.75868225]
[402.16232300 71.09999084]
[388.29125977 76.81589508]
[374.17440796 81.89453125]
[359.84100342 86.32537842]
[345.32083130 90.09925842]
[330.64389038 93.20834351]
[315.84069824 95.64619446]
[300.94186401 97.40775299]
[285.97827148 98.48937225]
[270.98098755 98.88880920]
[255.98106384 98.60523224]
[241.00958252 97.63923645]
[226.09759521 95.99282074]
[211.27598572 93.66939545]
[196.57548523 90.67378235]
[182.02658081 87.01217651]
[167.65939331 82.69218445]
[153.50372314 77.72274780]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 23]
[2 22]
[3 21]
[5 19]
[6 18]
[7 17]
[8 16]
[9 15]
[10 14]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
