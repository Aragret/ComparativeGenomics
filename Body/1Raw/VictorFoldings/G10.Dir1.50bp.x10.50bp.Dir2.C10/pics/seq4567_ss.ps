%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAAAAUUCUCCGUGCCACCUAUCACACCCCAUCCUAAAGUAAGGUCAGCUAAAUAAGCUAUCxxxxxxxxxxUUAAACACCCCUCCCCACAUCAAGCCCGAAUGAUAUUUCCUAUUCGCCUACACAAUUCUCCGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.35919952 140.46128845]
[84.28009033 150.57333374]
[73.20098114 160.68536377]
[62.12187195 170.79740906]
[51.67772293 181.56401062]
[41.90713882 192.94538879]
[32.13655090 204.32676697]
[29.01823616 219.83761597]
[14.85730267 224.45466614]
[5.08671522 235.83604431]
[-4.68387222 247.21742249]
[-14.45445919 258.59878540]
[-9.28861904 273.06286621]
[-12.06269646 288.16915894]
[-22.03047943 299.85415649]
[-36.51068115 304.97463989]
[-51.60820389 302.15319824]
[-63.26189041 292.14886475]
[-68.33695221 277.65267944]
[-65.46823120 262.56405640]
[-55.42738724 250.94180298]
[-40.91537094 245.91220093]
[-25.83583069 248.82820129]
[-16.06524467 237.44682312]
[-6.29465675 226.06546021]
[3.47593069 214.68408203]
[5.89538574 199.98730469]
[20.75517845 194.55616760]
[30.52576447 183.17480469]
[40.29635239 171.79342651]
[25.30007744 171.45916748]
[14.79781342 160.74925232]
[14.75721073 145.74929810]
[25.20133972 134.98268127]
[40.19558334 134.56724548]
[51.21984482 144.73905945]
[52.00983047 159.71830750]
[63.08893967 149.60626221]
[74.16804504 139.49421692]
[85.24715424 129.38218689]
[83.96143341 121.99320984]
[81.38998413 107.21526337]
[80.10425568 99.82629395]
[66.26065063 94.05094910]
[52.41704559 88.27560425]
[37.89767456 94.51767731]
[23.24826813 88.58721161]
[17.16005516 74.00265503]
[23.24506950 59.41676712]
[37.89317703 53.48309326]
[52.41391754 59.72197723]
[58.19239044 74.43199921]
[72.03599548 80.20734406]
[85.87960052 85.98268890]
[90.64855957 80.19416046]
[100.18647003 68.61710358]
[104.95542908 62.82857895]
[96.63768005 50.34598923]
[88.31993866 37.86339569]
[80.00218964 25.38080597]
[64.61698151 20.83382225]
[58.71318054 5.91656160]
[66.81967163 -7.92772961]
[82.71784210 -10.07889652]
[94.21199036 1.11325276]
[92.48477936 17.06305885]
[100.80252838 29.54564857]
[109.12026978 42.02824020]
[117.43801880 54.51082993]
[116.12298584 39.56858444]
[114.80794525 24.62634087]
[113.49291229 9.68409634]
[105.77864075 -3.18019581]
[100.21925354 -17.11193085]
[96.95763397 -31.75303268]
[96.07762146 -46.72719574]
[97.60182953 -61.64955521]
[101.49108887 -76.13657379]
[107.64542389 -89.81590271]
[115.90666199 -102.33596802]
[126.06247711 -113.37496185]
[137.85183716 -122.64916992]
[150.97174072 -129.92022705]
[165.08497620 -135.00123596]
[179.82879639 -137.76162720]
[194.82426453 -138.13044739]
[209.68595886 -136.09820557]
[224.03190613 -131.71713257]
[237.49339294 -125.09985352]
[249.72442627 -116.41642761]
[260.41064453 -105.89003754]
[269.27737427 -93.79123688]
[276.09674072 -80.43099213]
[280.69348145 -66.15268707]
[282.94943237 -51.32330322]
[282.80661011 -36.32398224]
[280.26870728 -21.54024315]
[275.40093994 -7.35205269]
[268.32839966 5.87592125]
[259.23287964 17.80369186]
[248.34817505 28.12469292]
[235.95402527 36.57365036]
[222.36898804 42.93341446]
[207.94221497 47.04051971]
[193.04450989 48.78940964]
[178.06187439 48.13551712]
[164.29785156 54.09804153]
[150.53382874 60.06056595]
[136.76980591 66.02308655]
[151.70745850 67.38930511]
[166.64511108 68.75552368]
[181.58276367 70.12174225]
[196.52041626 71.48795319]
[205.31376648 58.89539719]
[219.23210144 52.40113068]
[234.53146362 53.75208664]
[247.09640503 62.58486176]
[253.54699707 76.52348328]
[252.14810181 91.81854248]
[243.27598572 104.35572815]
[229.31719971 110.76261139]
[214.02661133 109.31577301]
[201.51728821 100.40439606]
[195.15419006 86.42560577]
[180.21655273 85.05939484]
[165.27890015 83.69317627]
[150.34124756 82.32695770]
[135.40359497 80.96073914]
[147.85762024 89.32120514]
[160.31163025 97.68166351]
[172.76565552 106.04212189]
[186.93156433 110.97437286]
[199.82797241 118.63484955]
[210.93585205 128.71525574]
[219.80822754 140.80993652]
[226.08799744 154.43214417]
[229.52246094 169.03366089]
[229.97340393 184.02688599]
[227.42268372 198.80841064]
[221.97293091 212.78340149]
[213.84347534 225.38943481]
[203.36148071 236.11918640]
[190.94877625 244.54087830]
[177.10490417 250.31556702]
[162.38697815 253.21086121]
[147.38731384 253.11026001]
[132.70954895 250.01779175]
[118.94438934 244.05790710]
[106.64577484 235.47047424]
[96.30865479 224.60105896]
[88.34903717 211.88711548]
[83.08724213 197.84028625]
[80.73461151 183.01856995]
[85.60947418 168.83280945]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 40]
[2 39]
[3 38]
[4 37]
[5 30]
[6 29]
[7 28]
[9 26]
[10 25]
[11 24]
[12 23]
[43 54]
[44 53]
[45 52]
[57 69]
[58 68]
[59 67]
[60 66]
[109 128]
[110 127]
[111 126]
[112 125]
[113 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
