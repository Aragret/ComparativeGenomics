%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUCAAACUCUACUCCCACUAAUAGCUUUUUGAUGACUUCUAGCAAGCCUCGCUAACCUCGCxxxxxxxxxxAAUCUUCUUACUCAUCCGCUUCCACCCCCUAGCAGAAAAUAGCCCACUAAUCCAAACUCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.35118866 238.91438293]
[95.04321289 223.91755676]
[94.73522949 208.92071533]
[94.42725372 193.92387390]
[94.11927795 178.92703247]
[93.81130219 163.93020630]
[93.50331879 148.93336487]
[93.19534302 133.93652344]
[92.88736725 118.93968201]
[80.21585083 110.91268921]
[66.52522278 117.04186249]
[52.96332932 123.45083618]
[39.53588104 130.13691711]
[26.10843086 136.82298279]
[12.68098164 143.50906372]
[-0.74646801 150.19514465]
[-5.97569799 166.85774231]
[-21.32225800 174.46133423]
[-37.11320496 168.75614929]
[-50.40054703 175.71650696]
[-63.68788910 182.67686462]
[-64.23826599 198.02589417]
[-72.40302277 211.03482056]
[-85.98587036 218.20433044]
[-101.33309937 217.60583496]
[-114.31637573 209.40034485]
[-121.44326782 195.79508972]
[-120.79667664 180.44981384]
[-112.55052948 167.49230957]
[-98.92299652 160.40811157]
[-83.57982635 161.10279846]
[-70.64824677 169.38952637]
[-57.36090088 162.42916870]
[-44.07356262 155.46881104]
[-41.97481155 142.71939087]
[-32.76501846 133.38084412]
[-19.66214752 131.03651428]
[-7.43254328 136.76768494]
[5.99490595 130.08161926]
[19.42235565 123.39553833]
[32.84980392 116.70946503]
[46.27725601 110.02338409]
[48.63131332 105.80348206]
[53.69144821 103.04976654]
[60.39605331 103.35123444]
[74.08667755 97.22206116]
[83.72849274 85.73139191]
[87.38719940 71.18444061]
[91.04590607 56.63748932]
[94.70461273 42.09053421]
[93.76287079 32.94127655]
[98.59065247 27.28400421]
[102.54726410 12.81523609]
[105.00019073 -1.98284316]
[105.92360687 -16.95439339]
[106.84702301 -31.92594337]
[107.77043152 -46.89749146]
[93.06583405 -49.99469757]
[78.96893311 -55.19999313]
[65.78018951 -62.40242004]
[53.78073502 -71.44846344]
[43.22633362 -82.14530945]
[34.34195709 -94.26495361]
[27.31697273 -107.54905701]
[22.30112076 -121.71447754]
[19.40131187 -136.45927429]
[18.67935753 -151.46916199]
[20.15064621 -166.42419434]
[23.78381729 -181.00561523]
[29.50142860 -194.90261841]
[37.18161011 -207.81900024]
[46.66065598 -219.47941589]
[57.73652267 -229.63536072]
[70.17312622 -238.07032776]
[83.70537567 -244.60455322]
[98.04483795 -249.09872437]
[112.88586426 -251.45709229]
[127.91211700 -251.62934875]
[142.80329895 -249.61184692]
[157.24201965 -245.44757080]
[170.92051697 -239.22529602]
[183.54722595 -231.07765198]
[194.85301208 -221.17829895]
[204.59687805 -209.73825073]
[212.57115173 -197.00134277]
[218.60585022 -183.23905945]
[222.57234192 -168.74476624]
[224.38609314 -153.82737732]
[224.00842285 -138.80488586]
[221.44740295 -123.99749756]
[216.75761414 -109.72080994]
[210.03901672 -96.27915192]
[201.43481445 -83.95901489]
[191.12841797 -73.02302551]
[179.33949280 -63.70426941]
[166.31933594 -56.20137787]
[152.34545898 -50.67428207]
[137.71574402 -47.24078751]
[122.74198151 -45.97407913]
[121.81857300 -31.00252914]
[120.89515686 -16.03097916]
[119.97174072 -1.05942953]
[130.00999451 -12.20543575]
[144.23384094 -16.96801758]
[158.95979309 -14.11382771]
[170.37432861 -4.38200474]
[175.52146912 9.70724201]
[173.06829834 24.50527954]
[163.65008545 36.17992401]
[149.70584106 41.70783997]
[134.84663391 39.65748596]
[122.92049408 30.55983543]
[117.01602936 16.77184677]
[113.05942535 31.24061394]
[109.25156403 45.74924088]
[105.59285736 60.29619217]
[101.93415070 74.84314728]
[98.27544403 89.39009857]
[106.63014984 80.23628998]
[122.37929535 78.63063812]
[139.47006226 88.75647736]
[153.03195190 95.16545868]
[166.59385681 101.57443237]
[182.88442993 99.69050598]
[192.44267273 113.01611328]
[185.43589783 127.84301758]
[169.07205200 128.91856384]
[160.18487549 115.13632965]
[146.62298584 108.72734833]
[133.06108093 102.31837463]
[126.76686096 106.39670563]
[135.59591675 118.52303314]
[144.42497253 130.64935303]
[153.25402832 142.77568054]
[165.66888428 151.19421387]
[165.51158142 166.19338989]
[152.92291260 174.34968567]
[139.16909790 168.36363220]
[136.55885315 153.59330750]
[129.09870911 140.58000183]
[121.63856506 127.56668854]
[114.17842865 114.55337524]
[107.88420868 118.63170624]
[108.19218445 133.62854004]
[108.50016022 148.62538147]
[108.80813599 163.62222290]
[109.11611938 178.61906433]
[109.42409515 193.61589050]
[109.73207092 208.61273193]
[110.04004669 223.60957336]
[110.34803009 238.60641479]
[112.93379974 257.81484985]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 151]
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 46]
[11 45]
[12 42]
[13 41]
[14 40]
[15 39]
[16 38]
[19 34]
[20 33]
[21 32]
[47 118]
[48 117]
[49 116]
[50 115]
[52 114]
[53 113]
[54 102]
[55 101]
[56 100]
[57 99]
[121 130]
[122 129]
[123 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
