%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCAUAAUCCUUCUAAUAGCUAUCCUCUUCAACAAUAUACUCUCCGGACAAUGAACCAUAAxxxxxxxxxxAACCCUGAGAACCAAAAUGAACGAAAAUCUGUUCGCUUCAUUCAUUGCCCCCACAAUCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 252.20483398]
[92.50000000 237.20483398]
[92.50000000 222.20483398]
[92.50000000 207.20483398]
[92.50000000 192.20483398]
[92.50000000 177.20483398]
[92.50000000 162.20483398]
[92.50000000 147.20483398]
[92.50000000 132.20483398]
[92.50000000 117.20483398]
[88.46721649 131.65255737]
[77.52681732 141.91450500]
[62.85082626 145.01538086]
[48.69435883 140.05610657]
[39.16188812 128.47456360]
[37.01723099 113.62867737]
[42.88220215 99.82279968]
[55.05632782 91.05977631]
[70.00988770 89.88031769]
[83.40547943 96.62475586]
[72.31416321 86.52610779]
[61.22285080 76.42745209]
[50.13153458 66.32880402]
[39.01616669 76.41807556]
[26.99207306 85.40505981]
[14.16814995 93.20838165]
[0.66053522 99.75735474]
[-13.40844154 104.99268341]
[-27.91136742 108.86694336]
[-42.71689606 111.34505463]
[-57.69094849 112.40457916]
[-72.69790649 112.03591156]
[-87.60186768 110.24239349]
[-102.26785278 107.04026794]
[-116.56304169 102.45854187]
[-130.35798645 96.53869629]
[-143.52772522 89.33435059]
[-155.95300293 80.91075134]
[-167.52130127 71.34418488]
[-178.12785339 60.72128296]
[-187.67658997 49.13825607]
[-196.08102417 36.70000839]
[-203.26507568 23.51917839]
[-209.16365051 9.71514034]
[-213.72335815 -4.58709431]
[-216.90287781 -19.25799751]
[-218.67343140 -34.16470337]
[-219.01896667 -49.17221451]
[-217.93638611 -64.14461517]
[-215.43545532 -78.94630432]
[-211.53884888 -93.44324493]
[-206.28186035 -107.50414276]
[-199.71206665 -121.00164795]
[-191.88900757 -133.81353760]
[-182.88349915 -145.82376099]
[-172.77711487 -156.92356873]
[-161.66137695 -167.01243591]
[-149.63696289 -175.99897766]
[-136.81275940 -183.80183411]
[-123.30490112 -190.35031128]
[-109.23573303 -195.58512878]
[-94.73266602 -199.45886230]
[-79.92704773 -201.93644714]
[-64.95295715 -202.99540710]
[-49.94601440 -202.62620544]
[-35.04211807 -200.83213806]
[-20.37624741 -197.62948608]
[-6.08122349 -193.04722595]
[7.71349478 -187.12687683]
[20.88297653 -179.92205811]
[33.30795670 -171.49800110]
[44.87590408 -161.93101501]
[55.48205948 -151.30772400]
[65.03037262 -139.72434998]
[73.43436432 -127.28579712]
[80.61792755 -114.10470581]
[86.51600647 -100.30045319]
[91.07518005 -85.99805450]
[94.25417328 -71.32703400]
[96.02417755 -56.42026520]
[96.36917877 -41.41274261]
[95.28604126 -26.44038200]
[92.78457642 -11.63877964]
[88.88744354 2.85801697]
[83.62993622 16.91871834]
[77.05966187 30.41598701]
[69.23612213 43.22758484]
[60.23018265 55.23749161]
[71.32150269 65.33613586]
[82.41281128 75.43479156]
[93.50412750 85.53343964]
[105.29472351 80.27439117]
[120.27625275 85.39328003]
[135.13929749 83.37094879]
[150.00234985 81.34860992]
[164.82009888 79.01750946]
[179.58615112 76.37864685]
[194.35221863 73.73977661]
[209.11827087 71.10091400]
[223.88432312 68.46205139]
[238.65037537 65.82318878]
[253.38818359 63.03086090]
[268.09616089 60.08538055]
[282.80410767 57.13989639]
[297.51208496 54.19441223]
[306.06570435 40.90490341]
[321.52859497 37.63782120]
[334.72692871 46.33146667]
[337.83035278 61.82806015]
[328.99765015 74.93373871]
[313.46911621 77.87314606]
[300.45755005 68.90237427]
[285.74960327 71.84785461]
[271.04162598 74.79334259]
[256.33367920 77.73882294]
[250.35398865 82.16477203]
[241.28924561 80.58924103]
[226.52319336 83.22810364]
[211.75712585 85.86697388]
[196.99107361 88.50583649]
[182.22502136 91.14469910]
[167.45896912 93.78356171]
[164.01147461 97.17330170]
[158.37712097 98.39202881]
[152.02467346 96.21165466]
[137.16163635 98.23399353]
[122.29858398 100.25632477]
[136.31169128 105.60728455]
[151.17790222 103.60826874]
[165.47773743 108.13757324]
[176.48217773 118.33081818]
[182.09111023 132.24267578]
[181.23408508 147.21817017]
[174.07467651 160.39933777]
[161.97920227 169.27059937]
[147.25599670 172.13897705]
[132.71490479 168.45703125]
[121.13100433 158.92744446]
[114.71498108 145.36886597]
[114.69138336 130.36857605]
[107.50000000 117.20483398]
[107.50000000 132.20483398]
[107.50000000 147.20483398]
[107.50000000 162.20483398]
[107.50000000 177.20483398]
[107.50000000 192.20483398]
[107.50000000 207.20483398]
[107.50000000 222.20483398]
[107.50000000 237.20483398]
[107.50000000 252.20483398]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[20 91]
[21 90]
[22 89]
[23 88]
[93 127]
[94 126]
[95 125]
[96 122]
[97 121]
[98 120]
[99 119]
[100 118]
[101 117]
[102 115]
[103 114]
[104 113]
[105 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
