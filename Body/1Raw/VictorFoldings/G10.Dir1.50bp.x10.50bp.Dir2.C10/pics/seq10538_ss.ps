%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUCAUUACCGGGUUUUCCUCUUGUAAAUAUAGUUUAACCAAAACAUCAGAUUGUGAAUCxxxxxxxxxxACCAUGCACACUACUAUAACCACCCUAACCCUGACUUCCCUAAUUCCCCCCAUCCUUACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[181.33314514 397.07690430]
[181.33314514 382.07690430]
[181.33314514 367.07690430]
[181.33314514 352.07690430]
[181.33314514 337.07690430]
[181.33314514 322.07690430]
[181.33314514 307.07690430]
[181.33314514 292.07690430]
[181.33314514 277.07690430]
[181.33314514 262.07690430]
[177.17526245 247.66467285]
[169.18534851 234.96974182]
[154.33642578 234.16500854]
[142.67066956 224.65849304]
[138.79426575 209.93344116]
[144.39646912 195.58348083]
[136.40655518 182.88854980]
[128.41664124 170.19361877]
[123.98049927 168.27108765]
[120.73543549 163.50654602]
[120.37117767 156.80021667]
[112.91626740 143.78390503]
[105.46135712 130.76759338]
[98.00644684 117.75128174]
[84.16323090 111.97501373]
[69.66763306 115.83217621]
[55.17203522 119.68933105]
[49.71195221 134.21403503]
[36.73874283 142.72729492]
[21.24086761 141.95556641]
[9.17758083 132.19561768]
[5.18745804 117.20032501]
[10.80478477 102.73571014]
[23.86958313 94.36369324]
[39.35817337 95.30348969]
[51.31487274 105.19373322]
[65.81047058 101.33657837]
[80.30606842 97.47941589]
[87.62517548 84.38626099]
[83.31758881 70.01808167]
[79.01000214 55.64989471]
[74.70242310 41.28170776]
[70.39483643 26.91352463]
[66.08724976 12.54534149]
[61.69824982 26.88886642]
[52.23700714 38.52865982]
[39.09275436 45.75559998]
[24.19553185 47.50852203]
[9.73276520 43.53002930]
[-2.17190671 34.40430832]
[-9.77046394 21.47133064]
[-11.94717503 6.63010645]
[-8.38242340 -7.94015598]
[0.40036312 -20.10003471]
[13.11156464 -28.06403923]
[27.88473511 -30.66277313]
[42.55065918 -27.51465607]
[54.95587158 -19.08193779]
[63.27859879 -6.60344887]
[63.27859879 -21.60344887]
[60.26168060 -27.60392570]
[60.70964813 -33.35115433]
[63.60363770 -37.22417831]
[64.22761536 -52.21119690]
[64.85159302 -67.19821167]
[65.47557068 -82.18522644]
[58.31903458 -96.29531860]
[66.57907104 -108.68971252]
[67.20304871 -123.67672729]
[53.39866638 -130.04127502]
[43.08436203 -141.20745850]
[37.83299255 -155.47250366]
[38.44534683 -170.66110229]
[44.82805252 -184.45709229]
[56.00778961 -194.75669861]
[70.27973175 -199.98930359]
[85.46750641 -199.35696411]
[99.25509644 -192.95611572]
[109.53999329 -181.76284790]
[114.75381470 -167.48403931]
[114.10150146 -152.29710388]
[107.68251801 -138.51794434]
[96.47572327 -128.24778748]
[82.19006348 -123.05274963]
[81.56608582 -108.06573486]
[88.76725769 -95.02761841]
[80.46258545 -81.56124878]
[79.83860779 -66.57423401]
[79.21463013 -51.58721924]
[78.59065247 -36.60020065]
[78.27859497 -21.60344887]
[78.27859497 -6.60344887]
[80.45543671 8.23775673]
[84.76301575 22.60594177]
[89.07060242 36.97412491]
[93.37818909 51.34230804]
[97.68577576 65.71049500]
[101.99335480 80.07867432]
[111.44891357 85.10518646]
[116.42791748 93.81904602]
[116.00634003 103.17368317]
[111.02275085 110.29637146]
[118.47766113 123.31268311]
[125.93257141 136.32899475]
[133.38748169 149.34530640]
[141.11157227 162.20370483]
[149.10148621 174.89863586]
[157.09140015 187.59356689]
[172.45271301 188.74954224]
[184.05229187 198.61378479]
[187.57752991 213.24377441]
[181.88026428 226.97982788]
[189.87019348 239.67475891]
[189.73612976 224.67535400]
[192.76950073 209.98527527]
[198.83374023 196.26576233]
[207.65589905 184.13441467]
[218.83882141 174.13729858]
[231.87913513 166.72445679]
[246.18981934 162.22953796]
[261.12670898 160.85491943]
[276.01739502 162.66244507]
[290.19161987 167.57077026]
[303.01129150 175.35893250]
[313.89938354 185.67637634]
[322.36575317 198.05863953]
[328.02929688 211.94836426]
[330.63507080 226.72029114]
[330.06576538 241.70948792]
[326.34704590 256.24121094]
[319.64627075 269.66131592]
[310.26507568 281.36572266]
[298.62573242 290.82757568]
[285.25225830 297.62091064]
[270.74655151 301.43994141]
[255.76165771 302.11279297]
[240.97207642 299.60913086]
[227.04356384 294.04168701]
[214.60310364 285.66107178]
[204.21067810 274.84451294]
[196.33314514 262.07690430]
[196.33314514 277.07690430]
[196.33314514 292.07690430]
[196.33314514 307.07690430]
[196.33314514 322.07690430]
[196.33314514 337.07690430]
[196.33314514 352.07690430]
[196.33314514 367.07690430]
[196.33314514 382.07690430]
[196.33314514 397.07690430]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 113]
[12 112]
[16 108]
[17 107]
[18 106]
[21 105]
[22 104]
[23 103]
[24 102]
[25 38]
[26 37]
[27 36]
[39 98]
[40 97]
[41 96]
[42 95]
[43 94]
[44 93]
[59 92]
[60 91]
[63 90]
[64 89]
[65 88]
[66 87]
[68 85]
[69 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
