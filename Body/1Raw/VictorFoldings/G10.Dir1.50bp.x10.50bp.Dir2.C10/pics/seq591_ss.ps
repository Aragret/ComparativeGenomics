%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCCCAUACUACUAAUCUCAUCAAUACAACCCCCGCCCAUCCUACCCAGCACACACACACCxxxxxxxxxxCAGCUAAAUAAGCUAUCGGGCCCAUACCCCGAAAAUGUUGGUUAUACCCUUCCCGUACUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-15.78202724 194.26051331]
[-23.08810806 184.49757385]
[-35.86546326 192.35499573]
[-48.64282227 200.21241760]
[-56.34511948 214.03216553]
[-71.23953247 214.10824585]
[-84.01689148 221.96568298]
[-96.79424286 229.82310486]
[-109.57160187 237.68052673]
[-122.34896088 245.53794861]
[-135.12631226 253.39538574]
[-130.28190613 267.66000366]
[-128.73362732 282.64501953]
[-130.55918884 297.59878540]
[-135.66697693 311.77120972]
[-143.80082703 324.45144653]
[-154.55270386 335.00344849]
[-167.38334656 342.89791870]
[-181.64912415 347.73889160]
[-196.63452148 349.28350830]
[-211.58784485 347.45434570]
[-225.75904846 342.34310913]
[-238.43731689 334.20620728]
[-248.98670959 323.45175171]
[-256.87805176 310.61923218]
[-261.71557617 296.35226440]
[-263.25656128 281.36648560]
[-261.42376709 266.41360474]
[-256.30911255 252.24365234]
[-248.16912842 239.56735229]
[-237.41212463 229.02056885]
[-224.57768250 221.13230896]
[-210.30953979 216.29826355]
[-195.32341003 214.76089478]
[-180.37097168 216.59732056]
[-166.20223999 221.71540833]
[-153.52792358 229.85845947]
[-142.98374939 240.61802673]
[-130.20639038 232.76058960]
[-117.42903137 224.90316772]
[-104.65167236 217.04574585]
[-91.87431335 209.18832397]
[-79.09695435 201.33088684]
[-72.30857849 188.07316589]
[-56.50024796 187.43505859]
[-43.72288895 179.57763672]
[-30.94553375 171.72021484]
[-35.80424881 162.03005981]
[-39.94705963 152.01290894]
[-43.35212708 141.72155762]
[-46.00150681 131.21028137]
[-47.88122559 120.53447723]
[-48.98137665 109.75041962]
[-49.29616165 98.91496277]
[-48.82392120 88.08522797]
[-47.56714630 77.31829834]
[-45.53245544 66.67093658]
[-42.73057938 56.19927597]
[-39.17628860 45.95851517]
[-34.88832092 36.00263596]
[-29.88927650 26.38412285]
[-24.20551300 17.15368080]
[-17.86698914 8.35997200]
[-10.90711975 0.04934957]
[-3.36259556 -7.73437500]
[4.72681284 -14.95016956]
[13.31846046 -21.55999565]
[22.36705780 -27.52900887]
[31.82490158 -32.82574081]
[41.64213562 -37.42227554]
[51.76700974 -41.29437637]
[62.14614868 -44.42163086]
[72.72483063 -46.78755569]
[83.44730377 -48.37968063]
[94.25703430 -49.18960953]
[105.09703827 -49.21307755]
[115.91017151 -48.44995117]
[126.63942719 -46.90426254]
[137.22825623 -44.58415604]
[147.62083435 -41.50186539]
[157.76237488 -37.67363358]
[167.59942627 -33.11964417]
[175.05433655 -46.13595200]
[182.50924683 -59.15226364]
[189.96415710 -72.16857147]
[187.16270447 -87.96513367]
[197.87397766 -99.90867615]
[213.88121033 -98.83713531]
[222.90501404 -85.57250214]
[218.02310181 -70.29026794]
[202.98046875 -64.71366119]
[195.52555847 -51.69735336]
[188.07064819 -38.68104172]
[180.61573792 -25.66473389]
[212.46284485 1.80309999]
[235.38618469 37.06271362]
[249.28874207 31.43075752]
[263.19131470 25.79880142]
[277.09384155 20.16684341]
[290.99639893 14.53488731]
[295.64248657 -0.39655617]
[308.82720947 -8.80472469]
[324.32513428 -6.71953917]
[334.81863403 4.87444019]
[335.35299683 20.50289154]
[325.67590332 32.78653717]
[310.35659790 35.92541504]
[296.62835693 28.43744278]
[282.72579956 34.06940079]
[268.82324219 39.70135498]
[254.92070007 45.33331299]
[241.01814270 50.96527100]
[244.90730286 64.05010223]
[247.58509827 77.43545532]
[249.02915955 91.00943756]
[249.22740173 104.65858459]
[248.17817688 118.26878357]
[245.89025879 131.72625732]
[242.38275146 144.91851807]
[237.68499756 157.73529053]
[251.20918274 164.22344971]
[264.73336792 170.71162415]
[281.62945557 172.11128235]
[284.96176147 188.73452759]
[269.91067505 196.53839111]
[258.24520874 184.23580933]
[244.72102356 177.74763489]
[231.19683838 171.25947571]
[224.94401550 181.72828674]
[217.85774231 191.65191650]
[209.98526001 200.96417236]
[201.37910461 209.60290527]
[192.09667969 217.51052856]
[182.19990540 224.63426208]
[171.75479126 230.92658997]
[160.83102417 236.34555054]
[149.50146484 240.85498047]
[137.84170532 244.42481995]
[125.92951202 247.03123474]
[113.84434509 248.65684509]
[101.66683197 249.29080200]
[89.47819519 248.92889404]
[77.35974884 247.57351685]
[65.39233398 245.23371887]
[53.65576935 241.92509460]
[42.22835541 237.66973877]
[31.18632126 232.49603271]
[20.60332489 226.43847656]
[10.54996014 219.53749084]
[1.09329176 211.83909607]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 47]
[3 46]
[4 45]
[6 43]
[7 42]
[8 41]
[9 40]
[10 39]
[11 38]
[82 94]
[83 93]
[84 92]
[85 91]
[96 112]
[97 111]
[98 110]
[99 109]
[100 108]
[120 128]
[121 127]
[122 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
