%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAAACCCUGAUGAAGGCUACAAAGUAAGCGCAAGUACCCACGUAAAGACGUUAGGUCAAGxxxxxxxxxxUGGUGCAACUCCAAAUAAAAGUAAUAACCAUGCACACUACUAUAACCACCCUAACCCUGACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[74.06428528 548.87536621]
[74.06428528 533.87536621]
[74.06428528 518.87536621]
[74.06428528 503.87536621]
[74.06428528 488.87536621]
[74.06428528 473.87536621]
[74.06428528 458.87536621]
[74.06428528 443.87536621]
[74.06428528 428.87536621]
[74.06428528 413.87536621]
[59.77927399 411.00167847]
[46.33020782 405.38137817]
[34.23976898 397.23083496]
[23.97824860 386.86471558]
[15.94526291 374.68389893]
[10.45418262 361.16006470]
[7.71991491 346.81726074]
[7.85048771 332.21179199]
[10.84278774 317.91043091]
[16.58260345 304.46859741]
[24.84897995 292.40869141]
[35.32273102 282.19985962]
[47.59875870 274.23968506]
[61.20171738 268.83868408]
[75.60443115 266.20831299]
[75.91648865 251.21154785]
[64.40749359 245.83171082]
[55.77275848 236.44905090]
[51.33276749 224.44583130]
[51.78643417 211.60890198]
[57.10134125 199.86364746]
[66.51327515 190.98527527]
[78.63590240 186.33045959]
[79.57153320 171.35968018]
[80.50715637 156.38888550]
[69.00159454 166.01290894]
[54.00236511 166.16481018]
[42.30426407 156.77574158]
[39.20664597 142.09907532]
[46.11276627 128.78346252]
[59.89407730 122.86101532]
[74.30751801 127.01465607]
[82.82376099 139.36314392]
[85.92208099 124.68661499]
[89.02040100 110.01009369]
[84.56358337 95.68749237]
[73.68476105 85.36029053]
[62.80593491 75.03308105]
[44.82974243 71.18128967]
[40.44458389 54.21749496]
[29.35326767 44.11884689]
[18.26195145 34.02019882]
[7.17063665 23.92154884]
[-8.95769596 20.95356560]
[-14.19582176 5.41348505]
[-3.15520525 -6.71238947]
[12.80651283 -2.94999838]
[17.26928520 12.83023262]
[28.36060143 22.92888260]
[39.45191574 33.02753067]
[50.54323196 43.12618256]
[62.67784119 42.88407898]
[72.00584412 51.26305771]
[73.13314056 64.15425873]
[84.01196289 74.48146057]
[94.89079285 84.80867004]
[108.54703522 78.60326385]
[107.92305756 63.61624527]
[93.88755798 57.61894608]
[83.85060883 46.12014389]
[79.80505371 31.40293503]
[82.55413818 16.38943100]
[91.55203247 4.06057549]
[105.01219177 -3.13572979]
[120.26210022 -3.77065253]
[134.27386475 2.28187156]
[144.26545715 13.82010937]
[148.25302124 28.55313492]
[145.44483948 43.55569839]
[136.39846802 55.84902573]
[122.91007233 62.99226761]
[123.53404999 77.97928619]
[136.92033386 84.74739838]
[149.35977173 76.36525726]
[161.79920959 67.98310852]
[174.23864746 59.60096741]
[186.67810059 51.21882629]
[198.37771606 41.83166504]
[209.25654602 31.50445938]
[220.13537598 21.17725372]
[217.14820862 6.04185152]
[222.83930969 -8.29742718]
[235.39266968 -17.26497078]
[250.80253601 -17.99926758]
[264.15170288 -10.26600742]
[271.18048096 3.46715498]
[269.64602661 18.81801796]
[260.03796387 30.88817596]
[245.42221069 35.82608795]
[230.46257019 32.05607986]
[219.58375549 42.38328552]
[208.70492554 52.71048737]
[223.70472717 52.63498306]
[235.97720337 61.25974655]
[240.98789978 75.39809418]
[236.88546753 89.82619476]
[225.18568420 99.21315002]
[210.21136475 100.09066772]
[197.49523926 92.13451385]
[191.73567200 78.28434753]
[195.06024170 63.65826416]
[182.62080383 72.04041290]
[170.18135071 80.42255402]
[157.74191284 88.80469513]
[145.30247498 97.18683624]
[103.69692993 113.10841370]
[100.59860229 127.78493500]
[97.50028229 142.46145630]
[95.47795105 157.32450867]
[94.54232025 172.29530334]
[93.60668945 187.26609802]
[108.43777466 196.58998108]
[116.49794006 212.04421997]
[115.66444397 229.36541748]
[106.25430298 243.82580566]
[90.91323853 251.52360535]
[90.60118866 266.52035522]
[105.66467285 270.01300049]
[119.67425537 276.54476929]
[132.02447510 285.83084106]
[142.18206787 297.46731567]
[149.70909119 310.94891357]
[154.28175354 325.69094849]
[155.70429993 341.05447388]
[153.91751099 356.37426758]
[149.00102234 370.98736572]
[141.16990662 384.26193237]
[130.76515198 395.62448120]
[118.23890686 404.58474731]
[104.13478851 410.75674438]
[89.06428528 413.87536621]
[89.06428528 428.87536621]
[89.06428528 443.87536621]
[89.06428528 458.87536621]
[89.06428528 473.87536621]
[89.06428528 488.87536621]
[89.06428528 503.87536621]
[89.06428528 518.87536621]
[89.06428528 533.87536621]
[89.06428528 548.87536621]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[25 127]
[26 126]
[33 121]
[34 120]
[35 119]
[43 118]
[44 117]
[45 116]
[46 66]
[47 65]
[48 64]
[50 61]
[51 60]
[52 59]
[53 58]
[67 82]
[68 81]
[83 115]
[84 114]
[85 113]
[86 112]
[87 111]
[88 102]
[89 101]
[90 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
