%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAAAAUUCUCCGUGCCACCUAUCACACCCCAUCCUAAAGUAAGGUCAGCUAAAUAAGCUAxxxxxxxxxxUACUUCACAACAAUCCUAAUCCUAAUACCAACUAUCUCCCUAAUUGAAAACAAAAUACUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[103.90421295 144.54310608]
[92.60520935 154.40882874]
[81.30620575 164.27455139]
[70.00720215 174.14027405]
[59.34557343 184.69157410]
[49.36284637 195.88732910]
[39.38011932 207.08309937]
[35.97089767 222.53262329]
[21.72570610 226.88276672]
[11.74298000 238.07853699]
[1.76025319 249.27430725]
[-8.22247314 260.47006226]
[-3.32933593 275.02865601]
[-6.38678169 290.08016968]
[-16.57237244 301.57577515]
[-31.14623833 306.42327881]
[-46.18807983 303.31866455]
[-57.65171432 293.09707642]
[-62.45348740 278.50808716]
[-59.30174637 263.47604370]
[-49.04428864 252.04450989]
[-34.44032288 247.28849792]
[-19.41823959 250.48735046]
[-9.43551254 239.29158020]
[0.54721379 228.09580994]
[10.52994061 216.90003967]
[13.22513199 202.25131226]
[28.18435478 197.10037231]
[38.16707993 185.90460205]
[48.14980698 174.70884705]
[33.16410446 174.05410767]
[22.88948822 163.12559509]
[23.15941620 148.12802124]
[33.82063293 137.57632446]
[48.82019043 137.46125793]
[59.64203262 147.84815979]
[60.14147568 162.84127808]
[71.44048309 152.97555542]
[82.73948669 143.10983276]
[94.03849030 133.24411011]
[93.02732086 125.81258392]
[91.00498962 110.94953918]
[89.99382019 103.51801300]
[76.46963501 97.02984619]
[62.94544220 90.54167938]
[48.12081528 96.01945496]
[33.79999161 89.33443451]
[28.47925758 74.45272064]
[35.31531143 60.20337677]
[50.25244904 55.04027939]
[64.42872620 62.02660370]
[69.43360901 77.01749420]
[82.95779419 83.50566101]
[96.48198700 89.99382019]
[101.58872986 84.50099182]
[111.80220795 73.51532745]
[116.90894318 68.02249146]
[109.45403290 55.00618362]
[101.99912262 41.98987579]
[94.54421234 28.97356415]
[79.50157928 23.39695740]
[74.61966705 8.11472702]
[83.64347839 -5.14990520]
[99.65070343 -6.22144985]
[110.36197662 5.72209072]
[107.56052399 21.51865387]
[115.01543427 34.53496552]
[122.47034454 47.55127335]
[129.92526245 60.56758118]
[137.69375610 47.73596573]
[146.34896851 35.48495865]
[155.84768677 23.87572098]
[166.14248657 12.96622086]
[177.18196106 2.81092310]
[188.91099548 -6.53946877]
[201.27102661 -15.03827000]
[214.20034790 -22.64304924]
[227.63439941 -29.31583786]
[241.50611877 -35.02331924]
[255.74624634 -39.73699951]
[270.28369141 -43.43334198]
[285.04583740 -46.09389114]
[299.95904541 -47.70536804]
[314.94879150 -48.25972366]
[329.94027710 -47.75418854]
[344.85861206 -46.19129181]
[359.62936401 -43.57883072]
[374.17877197 -39.92985535]
[388.43417358 -35.26257706]
[402.32440186 -29.60030365]
[415.78012085 -22.97130394]
[428.73416138 -15.40867329]
[441.12179565 -6.95017052]
[452.88122559 2.36197233]
[463.95370483 12.48126316]
[474.28396606 23.35717773]
[483.82043457 34.93541718]
[492.51550293 47.15817261]
[500.32577515 59.96442032]
[507.21221924 73.29022217]
[513.14044189 87.06903839]
[518.08087158 101.23209381]
[522.00891113 115.70865631]
[524.90478516 130.42645264]
[526.75421143 145.31201172]
[527.54779053 160.29100037]
[527.28173828 175.28863525]
[525.95721436 190.23005676]
[523.58093262 205.04063416]
[520.16473389 219.64643860]
[515.72564697 233.97454834]
[510.28588867 247.95341492]
[503.87258911 261.51327515]
[496.51776123 274.58639526]
[488.25811768 287.10751343]
[479.13494873 299.01412964]
[469.19372559 310.24676514]
[458.48413086 320.74938965]
[447.05966187 330.46951294]
[434.97729492 339.35861206]
[422.29736328 347.37234497]
[409.08322144 354.47070312]
[395.40081787 360.61819458]
[381.31845093 365.78414917]
[366.90646362 369.94277954]
[352.23678589 373.07333374]
[337.38265991 375.16015625]
[322.41824341 376.19284058]
[307.41827393 376.16625977]
[292.45761108 375.08047485]
[277.61096191 372.94097900]
[262.95248413 369.75842285]
[248.55532837 365.54870605]
[234.49137878 360.33282471]
[220.83085632 354.13684082]
[207.64196777 346.99169922]
[194.99055481 338.93304443]
[182.93980408 330.00112915]
[171.54985046 320.24053955]
[160.87757874 309.70001221]
[150.97627258 298.43215942]
[141.89537048 286.49328613]
[133.68020630 273.94293213]
[126.37178802 260.84381104]
[120.00660706 247.26130676]
[114.61645508 233.26322937]
[110.22823334 218.91946411]
[106.86385345 204.30163574]
[104.54011536 189.48272705]
[103.26862335 174.53671265]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 40]
[2 39]
[3 38]
[4 37]
[5 30]
[6 29]
[7 28]
[9 26]
[10 25]
[11 24]
[12 23]
[43 54]
[44 53]
[45 52]
[57 69]
[58 68]
[59 67]
[60 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
