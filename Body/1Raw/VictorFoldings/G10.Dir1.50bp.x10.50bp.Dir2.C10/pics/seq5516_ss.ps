%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAGGAGGCCUGCCCCCGCUAACCGGCUUUUUGCCCAAAUGGGCCAUUAUCGAAGAAUUCAxxxxxxxxxxCUCCGGGUCCAUCAUCCACAACCUUAACAAUGAACAAGAUAUUCGAAAAAUAGGAGGACUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[90.01817322 292.99191284]
[90.01817322 277.99191284]
[90.01817322 262.99191284]
[90.01817322 247.99192810]
[90.01817322 232.99192810]
[90.01817322 217.99192810]
[90.01817322 202.99192810]
[90.01817322 187.99192810]
[90.01817322 172.99192810]
[90.01817322 157.99192810]
[75.84161377 153.09037781]
[66.57666779 164.88700867]
[57.31171417 176.68365479]
[48.04676437 188.48028564]
[43.01861572 204.67146301]
[26.06826973 204.32197571]
[21.71177673 187.93731689]
[36.25012589 179.21534729]
[45.51507568 167.41870117]
[54.78002548 155.62207031]
[64.04497528 143.82542419]
[59.72541428 137.69424438]
[44.78633881 139.04478455]
[51.08629990 125.43186951]
[46.76674271 119.30068970]
[32.53996277 124.05450439]
[18.31318283 128.80831909]
[9.89129257 142.46302795]
[-6.05204201 144.24899292]
[-17.28645706 132.79615784]
[-15.19387245 116.89015961]
[-1.37953925 108.73272705]
[13.55936909 114.58153534]
[27.78614807 109.82772064]
[42.01292801 105.07390594]
[54.47058487 73.79484558]
[80.08464050 57.58713150]
[106.98865509 59.41786575]
[112.18407440 45.34634781]
[117.37948608 31.27482796]
[122.57490540 17.20331001]
[116.65494537 3.42092776]
[102.87255859 -2.49903536]
[89.09017944 -8.41899872]
[75.30780029 -14.33896160]
[59.09500122 -11.87375832]
[49.06639481 -24.84908485]
[55.53855133 -39.91703796]
[71.85346985 -41.57699966]
[81.22776031 -28.12134361]
[95.01013947 -22.20137978]
[108.79252625 -16.28141594]
[122.57490540 -10.36145401]
[112.52261353 -21.49480057]
[113.96236420 -36.42554474]
[125.95680237 -45.43295670]
[140.69689941 -42.65271759]
[148.58602905 -29.89491653]
[144.48825073 -15.46592045]
[154.23590088 -26.86694145]
[163.98355103 -38.26796341]
[173.73120117 -49.66898346]
[183.47885132 -61.07000351]
[173.14910889 -71.96560669]
[164.01487732 -83.88128662]
[156.17622375 -96.68648529]
[149.71903992 -110.24092102]
[144.71408081 -124.39606476]
[141.21617126 -138.99682617]
[139.26365662 -153.88323975]
[138.87791443 -168.89219666]
[140.06317139 -183.85926819]
[142.80642700 -198.62043762]
[147.07766724 -213.01399231]
[152.83004761 -226.88221741]
[160.00056458 -240.07316589]
[168.51066589 -252.44233704]
[178.26707458 -263.85415649]
[189.16293335 -274.18365479]
[201.07882690 -283.31759644]
[213.88423157 -291.15594482]
[227.43881226 -297.61279297]
[241.59407043 -302.61740112]
[256.19491577 -306.11495972]
[271.08139038 -308.06710815]
[286.09036255 -308.45248413]
[301.05740356 -307.26687622]
[315.81851196 -304.52325439]
[330.21194458 -300.25167847]
[344.08004761 -294.49893188]
[357.27081299 -287.32809448]
[369.63977051 -278.81771851]
[381.05136108 -269.06100464]
[391.38058472 -258.16491699]
[400.51425171 -246.24879456]
[408.35226440 -233.44320679]
[414.80877686 -219.88845825]
[419.81304932 -205.73307800]
[423.31024170 -191.13214111]
[425.26205444 -176.24562073]
[425.64706421 -161.23664856]
[424.46109009 -146.26965332]
[421.71710205 -131.50860596]
[417.44519043 -117.11526489]
[411.69210815 -103.24731445]
[404.52096558 -90.05670929]
[396.01025391 -77.68796539]
[386.25329590 -66.27659607]
[375.35693359 -55.94765091]
[363.44058228 -46.81428146]
[350.63482666 -38.97656250]
[337.07992554 -32.52037048]
[322.92440796 -27.51644325]
[308.32339478 -24.01960373]
[293.43682861 -22.06816864]
[278.42782593 -21.68351555]
[263.46087646 -22.86985970]
[248.69989014 -25.61420441]
[234.30665588 -29.88648033]
[220.43884277 -35.63987732]
[207.24841309 -42.81135941]
[194.87986755 -51.32235336]
[185.13221741 -39.92133331]
[175.38456726 -28.52031136]
[165.63691711 -17.11928940]
[155.88926697 -5.71826839]
[136.64642334 22.39872551]
[131.45100403 36.47024536]
[126.25559235 50.54176331]
[121.06018066 64.61328125]
[129.61477661 69.20043945]
[137.13032532 75.88202667]
[143.09086609 84.41159821]
[147.04159546 94.41550446]
[148.62010193 105.40864563]
[147.58349609 116.81790924]
[143.82939148 128.01199341]
[137.40945435 138.33625793]
[128.53424072 147.15057373]
[117.56868744 153.86796570]
[105.01817322 157.99192810]
[105.01817322 172.99192810]
[105.01817322 187.99192810]
[105.01817322 202.99192810]
[105.01817322 217.99192810]
[105.01817322 232.99192810]
[105.01817322 247.99192810]
[105.01817322 262.99191284]
[105.01817322 277.99191284]
[105.01817322 292.99191284]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 21]
[12 20]
[13 19]
[14 18]
[25 35]
[26 34]
[27 33]
[38 130]
[39 129]
[40 128]
[41 127]
[42 53]
[43 52]
[44 51]
[45 50]
[59 126]
[60 125]
[61 124]
[62 123]
[63 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
