%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCUCAACCCCCUGACAAAACACAUAGCCUACCCCUUCCUUGUACUAUCCCUAUGAGGCAUxxxxxxxxxxCCACUACUAGGCCUCCUCCUAGCAGCAGCAGGCAAAUCAGCCCAAUUAGGUCUCCACCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[36.96604156 155.71362305]
[24.88605309 164.60598755]
[12.80606365 173.49833679]
[0.72607577 182.39068604]
[-9.48740387 193.37634277]
[-17.47731972 206.07127380]
[-25.46723747 218.76620483]
[-33.45715332 231.46113586]
[-41.44706726 244.15606689]
[-49.43698502 256.85098267]
[-57.42690277 269.54592896]
[-57.51123047 285.94485474]
[-71.88742828 293.83517456]
[-85.76649475 285.09997559]
[-84.87084198 268.72531128]
[-70.12183380 261.55599976]
[-62.13191605 248.86106873]
[-54.14199829 236.16615295]
[-46.15208435 223.47122192]
[-38.16216660 210.77629089]
[-30.17225075 198.08135986]
[-22.18233299 185.38642883]
[-35.65420914 191.98252869]
[-50.49250793 194.17909241]
[-65.29760742 191.76892090]
[-78.67302704 184.97933960]
[-89.35711670 174.45080566]
[-96.34211731 161.17640686]
[-98.96915436 146.40823364]
[-96.99044037 131.53932190]
[-90.59262085 117.97216034]
[-80.37916565 106.98647308]
[-67.31345367 99.61849213]
[-52.62790680 96.56319427]
[-37.70774841 98.10876465]
[-23.96031189 104.10943604]
[-12.68232441 113.99917603]
[-4.93758297 126.84514618]
[-1.45660770 141.43565369]
[-2.56774211 156.39443970]
[-8.16627407 170.31068420]
[3.91371441 161.41833496]
[15.99370289 152.52598572]
[28.07369041 143.63363647]
[23.73034096 135.49967957]
[20.30328751 126.93923950]
[17.83370399 118.05515289]
[16.35125923 108.95414734]
[15.87376213 99.74556732]
[16.40695000 90.54004669]
[17.94441986 81.44817352]
[20.46769524 72.57918549]
[23.94646645 64.03961945]
[28.33893776 55.93208694]
[33.59233856 48.35398102]
[39.64355850 41.39634323]
[46.41989136 35.14276886]
[53.83993149 29.66838074]
[61.81453705 25.03894997]
[70.24789429 21.31009674]
[79.03869629 18.52661514]
[88.08132172 16.72194862]
[97.26714325 15.91777706]
[106.48578644 16.12376213]
[108.97090912 1.33105552]
[111.45602417 -13.46165180]
[113.94114685 -28.25435829]
[116.42626190 -43.04706573]
[102.69587708 -49.30316925]
[91.05315399 -58.90053558]
[82.29191589 -71.18479919]
[77.00952911 -85.31840515]
[75.56614685 -100.33769226]
[78.06017303 -115.21862793]
[84.32157898 -128.94660950]
[93.92343903 -140.58561707]
[106.21109009 -149.34210205]
[120.34673309 -154.61903381]
[135.36657715 -156.05662537]
[150.24655151 -153.55685425]
[163.97210693 -147.29014587]
[175.60740662 -137.68379211]
[184.35916138 -125.39276123]
[189.63063049 -111.25508118]
[191.06240845 -96.23468018]
[188.55688477 -81.35568237]
[182.28488159 -67.63254547]
[172.67404175 -56.00094986]
[160.37963867 -47.25394821]
[146.23992920 -41.98793411]
[131.21897888 -40.56194687]
[128.73385620 -25.76923943]
[126.24873352 -10.97653294]
[123.76361847 3.81617403]
[121.27849579 18.60888100]
[152.55206299 34.30701065]
[174.73341370 61.37091827]
[183.98486328 95.11818695]
[198.97755432 95.58622742]
[213.97024536 96.05426788]
[228.96295166 96.52231598]
[243.80415344 94.34547424]
[258.03094482 89.59165955]
[268.49127197 76.96180725]
[284.61175537 79.97220612]
[289.80899048 95.52600861]
[278.73651123 107.62280273]
[262.78475952 103.81844330]
[248.55796814 108.57225800]
[249.25912476 116.03940582]
[251.36257935 138.44087219]
[266.22561646 140.46321106]
[281.08865356 142.48553467]
[293.51535034 132.72064209]
[309.19699097 134.68571472]
[318.82995605 147.21495056]
[316.69918823 162.87493896]
[304.06881714 172.37490845]
[288.43225098 170.07868958]
[279.06634521 157.34858704]
[264.20327759 155.32624817]
[249.34024048 153.30392456]
[237.96186829 146.74971008]
[230.11567688 137.99984741]
[226.08236694 128.37133789]
[225.71942139 119.15981293]
[228.49490356 111.51500702]
[213.50221252 111.04696655]
[198.50950623 110.57892609]
[183.51681519 110.11088562]
[182.00801086 118.76096344]
[179.60581970 127.20666504]
[176.33638000 135.35597229]
[172.23533630 143.12011719]
[167.34736633 150.41448975]
[161.72569275 157.15966797]
[155.43159485 163.28213501]
[148.53359985 168.71519470]
[141.10688782 173.39967346]
[133.23236084 177.28453064]
[124.99578857 180.32745361]
[116.48691559 182.49526978]
[107.79843140 183.76438904]
[99.02499390 184.12097168]
[90.26217651 183.56114197]
[81.60543823 182.09097290]
[73.14910126 179.72651672]
[64.98526764 176.49351501]
[57.20289612 172.42718506]
[49.88675690 167.57182312]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 44]
[2 43]
[3 42]
[4 41]
[5 22]
[6 21]
[7 20]
[8 19]
[9 18]
[10 17]
[11 16]
[64 95]
[65 94]
[66 93]
[67 92]
[68 91]
[98 130]
[99 129]
[100 128]
[101 127]
[102 109]
[103 108]
[111 122]
[112 121]
[113 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
