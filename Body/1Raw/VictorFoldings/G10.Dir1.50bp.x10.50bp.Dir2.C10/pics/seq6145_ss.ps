%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUACUUCUCCCGCCGCCGGGAAAAAAGGCGGGAGAAGCCCCGGCAGGUUUGAAGCUGCUUxxxxxxxxxxCCCAAUACCAAACGCCCCUCUUCGUCUGAUCCGUCCUAAUCACAGCAGUCCUACUUCUCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[116.08824158 293.62008667]
[115.77618408 278.62332153]
[115.46412659 263.62655640]
[115.15206909 248.62980652]
[114.84001160 233.63305664]
[114.52796173 218.63630676]
[114.21590424 203.63955688]
[113.90384674 188.64279175]
[113.59178925 173.64604187]
[111.10667419 158.85333252]
[106.50110626 144.57788086]
[101.89553833 130.30241394]
[86.01947784 126.95133972]
[74.13632202 115.90281677]
[59.81372452 120.35963440]
[45.49112701 124.81645203]
[31.16852760 129.27326965]
[16.84593010 133.73008728]
[2.52333355 138.18688965]
[-11.79926395 142.64370728]
[-26.12186050 147.10052490]
[-40.44445801 151.55734253]
[-54.76705551 156.01416016]
[-69.08965302 160.47097778]
[-71.27613831 175.57667542]
[-79.80733490 188.23295593]
[-92.98935699 195.92691040]
[-108.20491028 197.13090515]
[-122.43293762 191.60586548]
[-132.84844971 180.44882202]
[-137.38345337 165.87498474]
[-135.13749695 150.77801514]
[-126.55652618 138.15542603]
[-113.34430695 130.51344299]
[-98.12413025 129.36938477]
[-83.91796875 134.95039368]
[-73.54647064 146.14837646]
[-59.22387314 141.69155884]
[-44.90127563 137.23474121]
[-30.57867622 132.77792358]
[-16.25607872 128.32112122]
[-1.93348217 123.86429596]
[12.38911533 119.40748596]
[26.71171188 114.95066833]
[41.03430939 110.49385071]
[55.35690689 106.03703308]
[69.67950439 101.58022308]
[69.77801514 90.43597412]
[74.00375366 79.61318970]
[82.11531830 70.64475250]
[93.30336761 64.92163849]
[106.26527405 63.48418808]
[105.32965088 48.51339722]
[104.39402008 33.54260635]
[101.00869751 27.74199295]
[101.09730530 21.97801399]
[103.74407959 17.93201637]
[103.43202209 2.93526292]
[103.11996460 -12.06149101]
[102.80791473 -27.05824471]
[102.49585724 -42.05499649]
[87.72225189 -44.97984695]
[73.92298889 -51.01261520]
[61.74346924 -59.87114334]
[51.75336838 -71.14109802]
[44.41992950 -84.29536438]
[40.08615494 -98.71869659]
[38.95474243 -113.73648071]
[41.07860947 -128.64631653]
[46.35842133 -142.75085449]
[54.54722977 -155.39036560]
[65.26203156 -165.97370911]
[78.00167084 -174.00587463]
[92.17029572 -179.11117554]
[107.10521698 -181.05082703]
[122.10789490 -179.73411560]
[136.47663879 -175.22262573]
[149.53936768 -167.72737122]
[160.68515015 -157.59890747]
[169.39265442 -145.31097412]
[175.25462341 -131.43829346]
[177.99688721 -116.62970734]
[177.49116516 -101.57785034]
[173.76112366 -86.98672485]
[166.98123169 -73.53878784]
[157.46859741 -61.86301422]
[145.66812134 -52.50550461]
[132.13175964 -45.90393066]
[117.49260712 -42.36705399]
[117.80466461 -27.37030029]
[118.11672211 -12.37354755]
[118.42877960 2.62320662]
[118.74083710 17.61996078]
[119.36481476 32.60697556]
[120.30043793 47.57776642]
[121.23606873 62.54856110]
[127.59235382 48.96189117]
[129.48155212 34.08133316]
[138.94212341 22.44098282]
[153.12222290 17.54972267]
[167.74740601 20.88198471]
[178.40902710 31.43328857]
[181.89321899 46.02302551]
[177.14968872 60.25323868]
[165.60836792 69.83435059]
[150.74832153 71.87821198]
[137.22850037 78.37549591]
[152.20822144 79.15534210]
[167.18794250 79.93518829]
[182.16764832 80.71502686]
[191.82362366 68.56835175]
[206.78408813 64.44957733]
[221.29641724 69.94245911]
[229.78034973 82.93486023]
[228.97361755 98.43095398]
[219.18644714 110.47216797]
[204.18218994 114.42840576]
[189.73028564 108.77841949]
[181.38780212 95.69474792]
[166.40809631 94.91490173]
[151.42837524 94.13505554]
[136.44866943 93.35520935]
[130.85272217 113.57100677]
[116.17100525 125.69685364]
[120.77656555 139.97232056]
[125.38213348 154.24777222]
[129.47178650 139.81604004]
[138.68882751 127.98194122]
[151.67988586 120.48311615]
[166.53741455 118.42065430]
[181.07981873 122.09740448]
[193.17176819 130.97349548]
[201.03773499 143.74559021]
[203.52272034 158.53831482]
[200.26185608 173.17959595]
[191.73394775 185.51954651]
[179.19117737 193.74627686]
[164.47526550 196.65177917]
[149.74702454 193.80944824]
[137.16906738 185.63662720]
[128.58854675 173.33398438]
[128.90060425 188.33074951]
[129.21266174 203.32749939]
[129.52471924 218.32424927]
[129.83676147 233.32099915]
[130.14881897 248.31776428]
[130.46087646 263.31451416]
[130.77293396 278.31127930]
[131.08499146 293.30801392]
[133.67599487 312.51574707]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 126]
[11 125]
[12 124]
[14 47]
[15 46]
[16 45]
[17 44]
[18 43]
[19 42]
[20 41]
[21 40]
[22 39]
[23 38]
[24 37]
[52 96]
[53 95]
[54 94]
[57 93]
[58 92]
[59 91]
[60 90]
[61 89]
[107 122]
[108 121]
[109 120]
[110 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
