%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCACAGAACUAAUCAUAUUUUAUAUCUUCUUCGAAACCACACUUAUCCCCACCUUGGCUAUxxxxxxxxxxAUGAUGAAACUUCGGCUCACUCCUUGGCGCCUGCCUGAUCCUCCAAAUCACCACAGGACUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[74.59710693 250.14759827]
[74.28913116 235.15075684]
[73.98115540 220.15391541]
[73.67317963 205.15708923]
[73.36519623 190.16024780]
[73.05722046 175.16340637]
[72.74924469 160.16656494]
[72.44126892 145.16972351]
[72.13328552 130.17289734]
[65.17293549 116.88555145]
[53.01959991 108.09370422]
[40.86626434 99.30186462]
[25.46041489 101.60349274]
[13.26044941 92.51419067]
[11.16113758 77.81288147]
[-0.99219507 69.02103424]
[-13.47759628 75.40190887]
[-27.42800713 75.76561737]
[-40.10790253 70.09809875]
[-49.05558777 59.56232452]
[-52.56109619 46.26018524]
[-49.99274063 32.81326675]
[-61.96299744 23.77374840]
[-73.93325806 14.73422813]
[-85.90351868 5.69470882]
[-97.87377167 -3.34481096]
[-108.18525696 7.57015610]
[-119.63491058 17.28450584]
[-132.08375549 25.68031502]
[-145.38066101 32.65566635]
[-159.36421204 38.12588501]
[-173.86468506 42.02456665]
[-188.70602417 44.30438995]
[-203.70809937 44.93767166]
[-218.68878174 43.91673279]
[-233.46621704 41.25395966]
[-247.86103821 36.98168182]
[-261.69848633 31.15175438]
[-274.81060791 23.83495331]
[-287.03823853 15.12009430]
[-298.23287964 5.11296940]
[-308.25872803 -6.06494522]
[-316.99401855 -18.27795982]
[-324.33276367 -31.37781906]
[-330.18582153 -45.20550156]
[-334.48217773 -59.59315491]
[-337.16964722 -74.36611938]
[-338.21566772 -89.34507751]
[-337.60748291 -104.34819031]
[-335.35247803 -119.19332886]
[-331.47805786 -133.70028687]
[-326.03125000 -147.69297791]
[-319.07815552 -161.00154114]
[-310.70315552 -173.46440125]
[-301.00799561 -184.93029785]
[-290.11029053 -195.26002502]
[-278.14233398 -204.32818604]
[-265.24945068 -212.02473450]
[-251.58813477 -218.25619507]
[-237.32418823 -222.94697571]
[-222.63079834 -226.04008484]
[-207.68630981 -227.49800110]
[-192.67214966 -227.30302429]
[-177.77056885 -225.45753479]
[-163.16244507 -221.98390198]
[-149.02513123 -216.92431641]
[-135.53022766 -210.34019470]
[-122.84154510 -202.31144714]
[-111.11312866 -192.93556213]
[-100.48733521 -182.32632446]
[-91.09316254 -170.61253357]
[-83.04464722 -157.93640137]
[-76.43948364 -144.45178223]
[-71.35786438 -130.32235718]
[-67.86145782 -115.71968079]
[-65.99272156 -100.82099152]
[-65.77433777 -85.80714417]
[-67.20894623 -70.86040497]
[-70.27915192 -56.16220474]
[-74.94766998 -41.89097214]
[-81.15782928 -28.21994019]
[-88.83425140 -15.31506920]
[-76.86399841 -6.27554989]
[-64.89373779 2.76396966]
[-52.92348099 11.80348969]
[-40.95322037 20.84300804]
[-26.26086426 14.18489456]
[-10.12088585 15.83655930]
[3.06982207 25.44284248]
[9.67015934 40.46872711]
[7.79964733 56.86770248]
[19.95298004 65.65954590]
[34.57289886 63.05309296]
[47.02334976 71.79614258]
[49.65810776 87.14852905]
[61.81143951 95.94037628]
[73.96477509 104.73221588]
[67.51425171 91.19003296]
[61.58708191 77.41075134]
[61.97509003 62.41576767]
[68.60696411 48.96146393]
[80.26362610 39.52101135]
[94.80235291 35.82974625]
[109.55063629 38.56620026]
[121.79743958 47.22735977]
[129.29161072 60.22124100]
[117.20189667 69.10037231]
[132.06849670 67.10431671]
[146.93508911 65.10826111]
[159.58218384 54.66875839]
[174.84991455 60.65443802]
[177.03216553 76.90773773]
[163.88400269 86.70866394]
[148.93115234 79.97486115]
[134.06455994 81.97091675]
[119.19795227 83.96697235]
[117.35462952 98.85327911]
[131.28535461 104.41521454]
[145.21606445 109.97715759]
[159.14677429 115.53909302]
[172.83715820 107.98214722]
[188.17207336 111.04390717]
[197.91084290 123.27870941]
[197.45512390 138.90965271]
[187.02008057 150.55627441]
[171.53283691 152.71940613]
[158.30598450 144.37768555]
[153.58483887 129.46980286]
[139.65412903 123.90786743]
[125.72341156 118.34593201]
[111.79269409 112.78399658]
[105.62705231 117.05422211]
[115.18586731 128.61402893]
[124.74468994 140.17382812]
[138.52052307 146.10900879]
[143.13046265 160.38305664]
[135.42848206 173.25471497]
[120.67074585 175.93975830]
[108.92862701 166.60581970]
[108.21605682 151.62130737]
[100.75591278 138.60800171]
[93.29576874 125.59468079]
[87.13012695 129.86491394]
[87.43810272 144.86175537]
[87.74607849 159.85859680]
[88.05406189 174.85542297]
[88.36203766 189.85226440]
[88.67001343 204.84910583]
[88.97798920 219.84594727]
[89.28597260 234.84277344]
[89.59394836 249.83961487]
[92.17972565 269.04803467]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 151]
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 97]
[11 96]
[12 95]
[15 92]
[16 91]
[22 86]
[23 85]
[24 84]
[25 83]
[26 82]
[107 116]
[108 115]
[109 114]
[117 131]
[118 130]
[119 129]
[120 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
