%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUAGGAUUCAUCUUUCUUUUCACCGUAGGUGGCCUGACUGGCAUUGUAUUAGCAAACUCxxxxxxxxxxUCAAGUCAACUAGGACUCAUAAUAGUUACAAUCGGCAUCAACCAACCACACCUAGCAUUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[105.94905090 255.08905029]
[105.94905090 240.08905029]
[105.94905090 225.08905029]
[105.94905090 210.08905029]
[105.94905090 195.08905029]
[105.94905090 180.08905029]
[105.94905090 165.08905029]
[105.94905090 150.08905029]
[105.94905090 135.08905029]
[105.94905090 120.08905792]
[93.01099396 112.49914551]
[79.91783905 119.81825256]
[66.82468414 127.13735962]
[53.73153305 134.45646667]
[40.71522141 141.91137695]
[27.77716827 149.50128174]
[30.80381012 164.33766174]
[28.84662247 179.35258484]
[22.11790657 192.91737366]
[11.34754372 203.56057739]
[-2.29618025 210.12773132]
[-17.33329391 211.90647888]
[-32.13268661 208.70385742]
[-45.08902740 200.86727905]
[-54.79690933 189.24679565]
[-60.20329666 175.10290527]
[-60.72174454 159.96983337]
[-56.29601288 145.48908997]
[-47.40617371 133.23146057]
[-35.01653290 124.52655029]
[-20.47102165 120.31860352]
[-5.34743118 121.06406403]
[8.71374607 126.68206787]
[20.18725967 136.56323242]
[33.12531662 128.97331238]
[37.33046722 122.83634949]
[46.41242599 121.36331177]
[59.50558090 114.04420471]
[72.59873962 106.72509766]
[85.69188690 99.40599060]
[95.07905579 87.70636749]
[99.38663483 73.33818817]
[103.69422150 58.97000122]
[98.26558685 47.22335052]
[102.19570160 35.31649780]
[112.84587860 29.49575424]
[117.45143890 15.22029305]
[122.05700684 0.94483250]
[121.71798706 -8.24956322]
[126.90972137 -13.57793331]
[131.81127930 -27.75449181]
[129.00820923 -43.32540512]
[140.47964478 -52.82567978]
[145.23345947 -67.05245972]
[149.83901978 -81.32791901]
[154.44459534 -95.60337830]
[159.05015564 -109.87884521]
[163.65571594 -124.15430450]
[152.17059326 -114.50588226]
[139.00585938 -107.31633759]
[124.68031311 -102.86900330]
[109.75852966 -101.33915710]
[94.82857513 -102.78707886]
[80.47883606 -107.15570831]
[67.27482605 -114.27288818]
[55.73692322 -123.85811615]
[46.31982040 -135.53366089]
[39.39464951 -148.83937073]
[35.23433304 -163.25088501]
[34.00282288 -178.20024109]
[35.74865341 -193.09829712]
[40.40302277 -207.35792542]
[47.78250504 -220.41714478]
[57.59627151 -231.76130676]
[69.45757294 -240.94332886]
[82.89894867 -247.60136414]
[97.39068604 -251.47300720]
[112.36165619 -252.40568542]
[127.22187042 -250.36264038]
[141.38569641 -245.42439270]
[154.29490662 -237.78555298]
[165.44079590 -227.74716187]
[174.38407898 -215.70483398]
[180.77232361 -202.13316345]
[184.35374451 -187.56698608]
[184.98722839 -172.58036804]
[182.64778137 -157.76393127]
[177.42855835 -143.70349121]
[189.32093811 -152.84521484]
[201.21331787 -161.98695374]
[213.10569763 -171.12869263]
[224.99807739 -180.27041626]
[222.90063477 -195.48542786]
[228.70654297 -209.70466614]
[240.85406494 -219.10325623]
[256.07556152 -221.15299988]
[270.27655029 -215.30255127]
[279.63699341 -203.12562561]
[281.63903809 -187.89778137]
[275.74407959 -173.71520996]
[263.53790283 -164.39295959]
[248.30383301 -162.43867493]
[234.13981628 -168.37803650]
[222.24743652 -159.23631287]
[210.35505676 -150.09457397]
[198.46267700 -140.95283508]
[186.57029724 -131.81111145]
[177.93118286 -119.54873657]
[173.32562256 -105.27327728]
[168.72004700 -90.99781799]
[164.11448669 -76.72235870]
[159.50892639 -62.44689560]
[160.45449829 -55.06776810]
[154.65620422 -47.92412949]
[157.80986023 -33.36721802]
[145.98782349 -22.85293961]
[141.08627319 -8.67638206]
[136.33245850 5.55039692]
[131.72689819 19.82585716]
[127.12133789 34.10131836]
[131.74700928 51.00111771]
[118.06240845 63.27758408]
[113.75482178 77.64576721]
[109.44723511 92.01395416]
[120.11597443 81.46984863]
[129.04328918 69.41567993]
[141.44384766 60.97612000]
[155.93270874 57.09372330]
[170.89169312 58.20208740]
[184.65016174 64.17742920]
[195.67149353 74.35240173]
[202.72482300 87.59062958]
[205.02236938 102.41362762]
[202.30757141 117.16590881]
[194.88360596 130.19989014]
[183.57960510 140.05990601]
[169.65805054 145.64472961]
[154.67375183 146.33065796]
[140.30018616 142.04106140]
[128.14044189 133.25279236]
[120.94905090 120.08905792]
[120.94905090 135.08905029]
[120.94905090 150.08905029]
[120.94905090 165.08905029]
[120.94905090 180.08905029]
[120.94905090 195.08905029]
[120.94905090 210.08905029]
[120.94905090 225.08905029]
[120.94905090 240.08905029]
[120.94905090 255.08905029]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 40]
[12 39]
[13 38]
[14 37]
[15 35]
[16 34]
[41 124]
[42 123]
[43 122]
[46 120]
[47 119]
[48 118]
[50 117]
[51 116]
[53 114]
[54 112]
[55 111]
[56 110]
[57 109]
[58 108]
[88 107]
[89 106]
[90 105]
[91 104]
[92 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
