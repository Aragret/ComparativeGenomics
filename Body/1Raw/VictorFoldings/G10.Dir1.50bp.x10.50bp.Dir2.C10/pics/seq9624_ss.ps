%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGCUACUCUCAUAACCCUCAACACCCACUCCCUCUUAGCCAAUAUUGUGCCUAUUGCCAUACxxxxxxxxxxGGGGUCCCUUGACCACCAUCCUCCGUGAAAUCAAUAUCCCGCACAAGAGUGCUACUCUCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[23.47057915 521.38055420]
[26.05635452 502.17211914]
[26.36433220 487.17529297]
[26.67230988 472.17846680]
[26.98028755 457.18161011]
[27.28826523 442.18478394]
[27.59624290 427.18792725]
[27.90422058 412.19110107]
[28.21219826 397.19427490]
[28.52017593 382.19741821]
[28.82815361 367.20059204]
[15.04923630 364.07559204]
[2.15058231 358.29669189]
[-9.36201000 350.08831787]
[-19.03665543 339.77014160]
[-26.49311638 327.74468994]
[-31.43774986 314.48165894]
[-33.67506790 300.49960327]
[-33.11546707 286.34555054]
[-29.77882004 272.57366943]
[-23.79376411 259.72366333]
[-15.39275646 248.29936218]
[-4.90304232 238.74928284]
[7.26609659 231.44877625]
[20.63930511 226.68540955]
[34.69372559 224.64758301]
[35.61714172 209.67604065]
[36.54055405 194.70448303]
[28.00779343 207.04109192]
[16.90355682 217.12553406]
[3.80451274 224.43409729]
[-10.60907555 228.58721924]
[-25.58867645 229.36924744]
[-40.35636520 226.73953247]
[-54.14522171 220.83465576]
[-66.23915863 211.96128845]
[-76.01010132 200.58023071]
[-82.95063782 187.28251648]
[-86.70031738 172.75874329]
[-87.06441498 157.76316833]
[-84.02402496 143.07453918]
[-77.73703766 129.45565796]
[-68.52994537 117.61380005]
[-56.88090897 108.16394043]
[-43.39487839 101.59683228]
[-28.77221680 98.25350952]
[-13.77231312 98.30760956]
[0.82585049 101.75632477]
[14.26415920 108.42054749]
[25.84473038 117.95419312]
[34.96615601 129.86215210]
[41.15474319 143.52601624]
[44.08910370 158.23620605]
[43.61746597 173.22454834]
[51.77413177 160.63610840]
[59.93079758 148.04766846]
[68.08746338 135.45922852]
[76.24412537 122.87078857]
[84.40079498 110.28234863]
[84.01509094 90.32816315]
[101.86993408 81.41061401]
[109.23617554 68.34391785]
[116.60240936 55.27722549]
[123.96865082 42.21052933]
[131.33488464 29.14383507]
[120.33821869 19.97021675]
[111.12356567 9.01259899]
[103.97572327 -3.38840032]
[99.11525726 -16.84758377]
[96.69171906 -30.94713783]
[96.77902222 -45.24960709]
[99.37319946 -59.31146622]
[104.39256287 -72.69686890]
[111.68027496 -84.99115753]
[121.00926208 -95.81372070]
[132.08924866 -104.82975769]
[144.57586670 -111.76064301]
[158.08125305 -116.39255524]
[172.18618774 -118.58303070]
[186.45309448 -118.26539612]
[200.43952942 -115.45075989]
[213.71203613 -110.22763824]
[221.60850525 -122.98089600]
[229.37364197 -135.81454468]
[237.00662231 -148.72724915]
[244.63958740 -161.63993835]
[252.27255249 -174.55264282]
[251.89976501 -190.94755554]
[266.05044556 -199.23550415]
[280.16760254 -190.89054871]
[279.72869873 -174.49728394]
[265.18524170 -166.91967773]
[257.55227661 -154.00697327]
[249.91931152 -141.09428406]
[242.28634644 -128.18157959]
[241.58570862 -120.77743530]
[234.36177063 -115.08441162]
[226.46528625 -102.33115387]
[238.04216003 -91.69956207]
[247.35031128 -79.02857208]
[254.03781128 -64.79430389]
[257.85125732 -49.53208160]
[258.64535522 -33.81621933]
[256.38845825 -18.23846054]
[251.16386414 -3.38568783]
[243.16668701 10.18219852]
[232.69659424 21.95337677]
[220.14656067 31.48341370]
[205.98815918 38.41204834]
[190.75381470 42.47680283]
[175.01676941 43.52293777]
[159.36953735 41.50932312]
[144.40158081 36.51007462]
[137.03535461 49.57677078]
[129.66911316 62.64346313]
[122.30287170 75.71015930]
[114.93663025 88.77685547]
[118.41709137 96.85793304]
[117.81288147 105.63588715]
[113.25799561 113.16387177]
[105.76265717 117.77227020]
[96.98923492 118.43901062]
[88.83256531 131.02745056]
[80.67590332 143.61589050]
[72.51923370 156.20433044]
[64.36257172 168.79277039]
[56.20590591 181.38121033]
[51.51210403 195.62789917]
[50.58869171 210.59945679]
[49.66527557 225.57099915]
[64.97428131 229.96203613]
[78.93215942 237.61781311]
[90.85306549 248.15876770]
[100.15198517 261.06369019]
[106.37345123 275.69537354]
[109.21384430 291.33224487]
[108.53622437 307.20385742]
[104.37690735 322.52880859]
[96.94354248 336.55328369]
[86.60475922 348.58813477]
[73.87187195 358.04272461]
[59.37358856 364.45385742]
[43.82499313 367.50857544]
[43.51701355 382.50540161]
[43.20903778 397.50222778]
[42.90105820 412.49908447]
[42.59308243 427.49591064]
[42.28510284 442.49276733]
[41.97712708 457.48959351]
[41.66914749 472.48641968]
[41.36117172 487.48327637]
[41.05319214 502.48010254]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 152]
[3 151]
[4 150]
[5 149]
[6 148]
[7 147]
[8 146]
[9 145]
[10 144]
[11 143]
[26 130]
[27 129]
[28 128]
[54 127]
[55 126]
[56 125]
[57 124]
[58 123]
[59 122]
[61 117]
[62 116]
[63 115]
[64 114]
[65 113]
[82 98]
[83 97]
[84 95]
[85 94]
[86 93]
[87 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
