%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUCCUCAUCACCCAACUAAAAAUAUUAAACACAAACUACCACCUACCUCCCUCACCAAAGxxxxxxxxxxACCUAUUCCAACUGUUCAUCGGCUGAGAGGGCGUAGGAAUUAUAUCCUUCUUGCUCAUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[123.33351898 313.44433594]
[123.33351898 298.44433594]
[123.33351898 283.44433594]
[123.33351898 268.44433594]
[123.33351898 253.44433594]
[123.33351898 238.44433594]
[123.33351898 223.44433594]
[123.33351898 208.44433594]
[123.33351898 193.44433594]
[123.33351898 178.44433594]
[120.08269501 163.80082703]
[113.73556519 150.20988464]
[107.38843536 136.61892700]
[101.04130554 123.02798462]
[94.69417572 109.43702698]
[85.67665100 97.45019531]
[74.37763977 87.58447266]
[63.61796570 98.04785156]
[52.04122543 107.59938812]
[39.72446060 116.17552185]
[26.74963951 123.71918488]
[13.20310974 130.18016052]
[-0.82497913 135.51547241]
[-15.24127007 139.68960571]
[-29.94982529 142.67477417]
[-44.85275650 144.45111084]
[-59.85089111 145.00680542]
[-74.84441376 144.33816528]
[-89.73354340 142.44961548]
[-104.41919708 139.35374451]
[-118.80363464 135.07115173]
[-132.79113770 129.63032532]
[-146.28862000 123.06749725]
[-159.20625305 115.42632294]
[-171.45806885 106.75765991]
[-182.96253967 97.11919403]
[-193.64309692 86.57507324]
[-203.42866516 75.19546509]
[-212.25413513 63.05610657]
[-220.06074524 50.23777771]
[-226.79655457 36.82578278]
[-232.41674805 22.90938377]
[-236.88392639 8.58118725]
[-240.16833496 -6.06345034]
[-242.24813843 -20.92707062]
[-243.10949707 -35.91075897]
[-242.74665833 -50.91479492]
[-241.16206360 -65.83933258]
[-238.36622620 -80.58505249]
[-234.37777710 -95.05381012]
[-229.22326660 -109.14933014]
[-222.93696594 -122.77780914]
[-215.56072998 -135.84854126]
[-207.14364624 -148.27453613]
[-197.74172974 -159.97311401]
[-187.41755676 -170.86642456]
[-176.23982239 -180.88195801]
[-164.28289795 -189.95306396]
[-151.62638855 -198.01939392]
[-138.35450745 -205.02723694]
[-124.55558014 -210.92997742]
[-110.32144165 -215.68833923]
[-95.74680328 -219.27062988]
[-80.92867279 -221.65303040]
[-65.96566010 -222.81968689]
[-50.95734787 -222.76281738]
[-36.00360489 -221.48280334]
[-21.20395470 -218.98818970]
[-6.65688515 -215.29554749]
[7.54079247 -210.42945862]
[21.29459381 -204.42231750]
[34.51298904 -197.31410217]
[47.10800934 -189.15209961]
[58.99583817 -179.99064636]
[70.09735870 -169.89068604]
[80.33869171 -158.91946411]
[89.65168762 -147.14996338]
[97.97436523 -134.66053772]
[105.25133514 -121.53428650]
[111.43417358 -107.85856628]
[116.48173523 -93.72438812]
[120.36042023 -79.22582245]
[123.04442596 -64.45934296]
[124.51588440 -49.52322388]
[124.76500702 -34.51686478]
[123.79013824 -19.54013634]
[121.59775543 -4.69270420]
[118.20246124 9.92662430]
[113.62683868 24.22055626]
[107.90135193 38.09396744]
[101.06408691 51.45453262]
[93.16056061 64.21333313]
[84.24336243 76.28546906]
[95.54237366 86.15119171]
[91.29476166 71.76516724]
[99.05107117 58.92617416]
[113.76151276 55.99310303]
[125.84878540 64.87554169]
[127.44342041 79.79054260]
[117.50762177 91.02742767]
[131.91984558 86.86954498]
[143.03451538 75.61013031]
[157.40779114 79.51633453]
[171.82000732 75.35845184]
[182.79667664 63.17466354]
[198.77796936 66.85304260]
[203.32368469 82.60957336]
[191.75759888 94.23529816]
[175.97789001 89.77066040]
[161.56567383 93.92855072]
[151.48185730 104.89056396]
[136.07772827 101.28176117]
[121.66551208 105.43964386]
[114.88710785 104.62925720]
[108.28512573 103.08989716]
[114.63225555 116.68085480]
[120.97938538 130.27180481]
[127.32651520 143.86274719]
[133.67364502 157.45370483]
[135.29557800 142.54165649]
[140.80950928 128.59185791]
[149.82150269 116.60087585]
[161.68780518 107.42530060]
[175.56066895 101.72062683]
[190.44908142 99.89437866]
[205.28944397 102.07701874]
[219.02157593 108.11262512]
[230.66448975 117.57002258]
[239.38644409 129.77360535]
[244.56437683 143.85157776]
[245.82836914 158.79821777]
[243.08811951 173.54580688]
[236.53939819 187.04077148]
[226.65002441 198.31909180]
[214.12649536 206.57504272]
[199.86341858 211.21887207]
[184.87976074 211.91879272]
[170.24591064 208.62483215]
[157.00726318 201.57231140]
[146.10955811 191.26501465]
[138.33352661 178.44433594]
[138.33352661 193.44433594]
[138.33352661 208.44433594]
[138.33352661 223.44433594]
[138.33352661 238.44433594]
[138.33352661 253.44433594]
[138.33352661 268.44433594]
[138.33352661 283.44433594]
[138.33352661 298.44433594]
[138.33352661 313.44433594]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 119]
[12 118]
[13 117]
[14 116]
[15 115]
[16 94]
[17 93]
[100 113]
[101 112]
[103 110]
[104 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
