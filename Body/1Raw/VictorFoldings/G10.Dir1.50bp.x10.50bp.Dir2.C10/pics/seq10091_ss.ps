%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUACUCAUCGCACUAAUUUACACUCACAACACCCUAGGCUCACUAAACAUUCUACUACUxxxxxxxxxxCCAGUCUCAGCCCUACUCCACUCAAGCACUAUAGUUGUAGCAGGAAUCUUCUUACUCAUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[121.66447449 330.11450195]
[121.66447449 315.11450195]
[121.66447449 300.11450195]
[121.66447449 285.11450195]
[121.66447449 270.11450195]
[121.66447449 255.11450195]
[121.66447449 240.11450195]
[121.66447449 225.11450195]
[121.66447449 210.11450195]
[121.66447449 195.11450195]
[119.17935181 180.32179260]
[114.27780151 166.14523315]
[109.37625122 151.96867371]
[97.90480804 142.46839905]
[100.70787811 126.89748383]
[95.80632782 112.72093201]
[92.62088776 127.37879181]
[85.50509644 140.58354187]
[75.01428223 151.30468750]
[61.96714401 158.70550537]
[47.38190079 162.20846558]
[32.39679718 161.54016113]
[18.18127823 156.75277710]
[5.84473991 148.21990967]
[-3.65006471 136.60748291]
[-9.56215382 122.82171631]
[-11.43014240 107.93848419]
[-9.10825157 93.11927795]
[-2.77768254 79.52060699]
[7.06752014 68.20372009]
[19.65902901 60.05179214]
[34.01419449 55.70101166]
[49.01272202 55.49091721]
[63.48411942 59.43790436]
[76.29901886 67.23394775]
[86.45734406 78.27063751]
[93.16718292 91.68922424]
[94.41406250 76.74113464]
[95.66093445 61.79304886]
[96.90780640 46.84496307]
[98.15468597 31.89687538]
[88.80097961 24.43489075]
[84.28527832 13.48421383]
[85.63282013 1.83698452]
[92.38962555 -7.59769821]
[102.76545715 -12.52036190]
[104.63306427 -27.40364265]
[106.50067902 -42.28692245]
[108.21337128 -57.18882370]
[109.77095032 -72.10773468]
[111.32852936 -87.02664948]
[96.66802979 -90.27740479]
[82.47365570 -95.17816925]
[68.93046570 -101.66506195]
[56.21502304 -109.65351105]
[44.49309921 -119.03936768]
[33.91751099 -129.70025635]
[24.62613678 -141.49722290]
[16.74010658 -154.27642822]
[10.36223030 -167.87129211]
[5.57565832 -182.10458374]
[2.44279289 -196.79072571]
[1.00447726 -211.73828125]
[1.27946293 -226.75233459]
[3.26416469 -241.63719177]
[6.93270779 -256.19876099]
[12.23726559 -270.24722290]
[19.10868263 -283.59942627]
[27.45737457 -296.08129883]
[37.17449951 -307.53012085]
[48.13337708 -317.79660034]
[60.19113159 -326.74694824]
[73.19056702 -334.26440430]
[86.96221161 -340.25100708]
[101.32652283 -344.62872314]
[116.09622955 -347.34045410]
[131.07878113 -348.35086060]
[146.07885742 -347.64678955]
[160.90087891 -345.23736572]
[175.35162354 -341.15402222]
[189.24270630 -335.45001221]
[202.39300537 -328.19967651]
[214.63110352 -319.49755859]
[225.79743958 -309.45712280]
[235.74644470 -298.20922852]
[244.34838867 -285.90051270]
[251.49116516 -272.69149780]
[257.08163452 -258.75433350]
[261.04690552 -244.27073669]
[263.33529663 -229.42953491]
[263.91696167 -214.42422485]
[262.78433228 -199.45042419]
[259.95214844 -184.70333862]
[255.45736694 -170.37522888]
[249.35856628 -156.65289307]
[241.73526001 -143.71522522]
[232.68684387 -131.73091125]
[222.33126831 -120.85618591]
[210.80354309 -111.23281097]
[198.25395203 -102.98625183]
[184.84611511 -96.22402191]
[170.75483704 -91.03428650]
[156.16380310 -87.48469543]
[141.26325989 -85.62152100]
[126.24744415 -85.46907043]
[124.68986511 -70.55015564]
[123.13228607 -55.63124466]
[125.58166504 -48.60655975]
[121.38396454 -40.41930771]
[119.51634979 -25.53602791]
[117.64873505 -10.65274906]
[129.73229980 3.03611183]
[128.00862122 21.53277016]
[113.10276794 33.14374924]
[111.85589600 48.09183502]
[110.60902405 63.03992462]
[109.36214447 77.98801422]
[108.11527252 92.93609619]
[109.98288727 107.81937408]
[114.88443756 121.99593353]
[126.70647430 132.51020813]
[123.55281067 147.06712341]
[128.45436096 161.24368286]
[133.35591125 175.42024231]
[136.83200073 160.82856750]
[145.00868225 148.25311279]
[156.93522644 139.15602112]
[171.22497559 134.59498596]
[186.21646118 135.10031128]
[200.16664124 140.61326599]
[211.45352173 150.49284363]
[218.76481628 163.59036255]
[221.25041199 178.38299561]
[218.62133789 193.15080261]
[211.18327332 206.17672729]
[199.80101013 215.94628906]
[185.79798889 221.32357788]
[170.80230713 221.68336487]
[156.55749512 216.98384094]
[144.71980286 207.77140808]
[136.66447449 195.11450195]
[136.66447449 210.11450195]
[136.66447449 225.11450195]
[136.66447449 240.11450195]
[136.66447449 255.11450195]
[136.66447449 270.11450195]
[136.66447449 285.11450195]
[136.66447449 300.11450195]
[136.66447449 315.11450195]
[136.66447449 330.11450195]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 124]
[12 123]
[13 122]
[15 120]
[16 119]
[37 118]
[38 117]
[39 116]
[40 115]
[41 114]
[46 111]
[47 110]
[48 109]
[49 107]
[50 106]
[51 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
