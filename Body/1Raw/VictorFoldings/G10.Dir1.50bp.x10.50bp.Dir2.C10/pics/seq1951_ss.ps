%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCUUAGCCAAACCAUUUACCCAAAUAAAGUAUAGGCGAUAGAAAUUGAAACCUGGCGCAAxxxxxxxxxxUGACAUUAACACUAUUCUCACCAGACCUCCUAGGCGACCCAGACAAUUAUACCCUAGCCAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[112.88838959 255.67747498]
[112.88838959 240.67747498]
[112.88838959 225.67747498]
[112.88838959 210.67747498]
[112.88838959 195.67747498]
[112.88838959 180.67747498]
[112.88838959 165.67747498]
[112.88838959 150.67747498]
[112.88838959 135.67747498]
[112.88838959 120.67748260]
[101.46654510 122.37898254]
[91.52406311 118.65324402]
[85.25883484 111.26110840]
[70.67508698 114.77027893]
[56.12813568 118.42898560]
[44.74420166 129.41609192]
[30.46968460 125.16316986]
[15.96105862 128.97102356]
[1.45243347 132.77888489]
[-7.06433535 148.02525330]
[-23.63883400 152.34005737]
[-37.93481445 143.53506470]
[-52.36219788 147.64001465]
[-57.30444336 152.18057251]
[-62.95078278 153.32369995]
[-67.46659851 151.60423279]
[-82.05035400 155.11340332]
[-96.63410187 158.62255859]
[-111.21784973 162.13172913]
[-119.25384521 175.74049377]
[-134.57962036 179.60006714]
[-148.10264587 171.42063904]
[-151.79997253 156.05491638]
[-143.47804260 142.61912537]
[-128.07408142 139.08445740]
[-114.72702026 147.54798889]
[-100.14326477 144.03881836]
[-85.55951691 140.52964783]
[-70.97576904 137.02047729]
[-56.46714401 133.21261597]
[-42.03976059 129.10768127]
[-37.38558197 117.05400848]
[-26.46519279 109.78945160]
[-13.15957642 110.16593933]
[-2.35542536 118.27025604]
[12.15320015 114.46240234]
[26.66182518 110.65454102]
[37.00800323 99.93978882]
[52.32027435 103.92035675]
[58.02681351 99.15090942]
[67.16592407 100.18653107]
[81.74967194 96.67736053]
[97.67285919 78.66874695]
[122.46636963 90.56967926]
[131.13298035 78.32672119]
[139.79959106 66.08377075]
[148.46620178 53.84081650]
[157.13279724 41.59786224]
[154.28921509 32.49276352]
[155.96664429 23.24302292]
[161.65670776 15.93443871]
[169.96116638 12.15456200]
[178.93359375 12.64864159]
[188.33744812 0.96243262]
[197.74131775 -10.72377586]
[207.14517212 -22.40998459]
[216.30709839 -34.28680801]
[225.22325134 -46.34923935]
[234.13940430 -58.41167068]
[223.35565186 -68.87083435]
[214.06224060 -80.67404938]
[206.42501831 -93.61067963]
[200.58027649 -107.44984436]
[196.63233948 -121.94457245]
[194.65164185 -136.83619690]
[194.67353821 -151.85893250]
[196.69764709 -166.74472046]
[200.68783569 -181.22787476]
[206.57290649 -195.04994202]
[214.24781799 -207.96424866]
[223.57559204 -219.74031067]
[234.38980103 -230.16798401]
[246.49742126 -239.06118774]
[259.68240356 -246.26118469]
[273.70941162 -251.63949585]
[288.32815552 -255.10012817]
[303.27770996 -256.58132935]
[318.29132080 -256.05670166]
[333.10101318 -253.53553772]
[347.44253540 -249.06288147]
[361.05987549 -242.71853638]
[373.71011353 -234.61572266]
[385.16741943 -224.89906311]
[395.22732544 -213.74192810]
[403.71032715 -201.34346008]
[410.46502686 -187.92491150]
[415.37091064 -173.72576904]
[418.34036255 -158.99940491]
[419.32043457 -144.00863647]
[418.29360962 -129.02101135]
[415.27822876 -114.30397797]
[410.32812500 -100.12019348]
[403.53161621 -86.72277832]
[395.00997925 -74.35082245]
[384.91531372 -63.22512436]
[373.42776489 -53.54423141]
[360.75234985 -45.48091125]
[347.11526489 -39.17906570]
[332.75985718 -34.75115204]
[317.94238281 -32.27619934]
[302.92721558 -31.79837227]
[287.98233032 -33.32619858]
[273.37448120 -36.83241272]
[259.36428833 -42.25444031]
[246.20184326 -49.49552155]
[237.28569031 -37.43309021]
[228.36953735 -25.37065697]
[228.19281006 -20.54178810]
[224.93923950 -15.78761864]
[218.83137512 -13.00612736]
[209.42752075 -1.31991887]
[200.02366638 10.36629009]
[190.61981201 22.05249786]
[189.35151672 42.61903763]
[169.37576294 50.26447296]
[160.70915222 62.50742340]
[152.04254150 74.75038147]
[143.37593079 86.99333191]
[134.70932007 99.23628235]
[145.64544678 88.96977234]
[159.74212646 83.84302521]
[174.71844482 84.68557739]
[188.15113831 91.36110687]
[197.86672974 102.78945923]
[202.29316711 117.12147522]
[200.71423340 132.03814697]
[193.38540649 145.12585449]
[181.49253845 154.26695251]
[166.95996094 157.98234558]
[152.13912964 155.67085266]
[139.42814636 147.70649719]
[130.88371277 135.37796021]
[127.88838959 120.67748260]
[127.88838959 135.67747498]
[127.88838959 150.67747498]
[127.88838959 165.67747498]
[127.88838959 180.67747498]
[127.88838959 195.67747498]
[127.88838959 210.67747498]
[127.88838959 225.67747498]
[127.88838959 240.67747498]
[127.88838959 255.67747498]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[13 52]
[14 51]
[15 49]
[17 47]
[18 46]
[19 45]
[22 41]
[23 40]
[26 39]
[27 38]
[28 37]
[29 36]
[54 129]
[55 128]
[56 127]
[57 126]
[58 125]
[63 123]
[64 122]
[65 121]
[66 120]
[67 117]
[68 116]
[69 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
