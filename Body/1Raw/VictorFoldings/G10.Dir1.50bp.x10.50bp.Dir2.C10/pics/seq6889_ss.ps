%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACCAUAUAUUUACAGUAGGAAUAGACGUAGACACACGAGCAUAUUUCACCUCCGCUACCxxxxxxxxxxGCGUCCUUGCCCUAUUACUAUCCAUCCUCAUCCUAGCAAUAAUCCCCAUCCUCCAUAUAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[248.79983521 511.29696655]
[248.48777771 496.30020142]
[248.17572021 481.30346680]
[247.86366272 466.30670166]
[247.55160522 451.30993652]
[247.23954773 436.31320190]
[246.92749023 421.31643677]
[246.61543274 406.31970215]
[246.30337524 391.32293701]
[242.44622803 376.82733154]
[235.26371765 363.65875244]
[221.02336121 368.31198120]
[206.16647339 370.26974487]
[191.19885254 369.46386719]
[176.63031006 365.92034912]
[162.95736694 359.75845337]
[150.64627075 351.18667603]
[140.11714172 340.49578857]
[131.72962952 328.04882812]
[125.77057648 314.26889038]
[122.44429016 299.62466431]
[121.86547852 284.61462402]
[124.05532074 269.74984741]
[128.94068909 255.53684998]
[136.35658264 242.46011353]
[146.05171204 230.96574402]
[157.69702148 221.44613647]
[150.51451111 208.27755737]
[143.33200073 195.10897827]
[130.44512939 187.64051819]
[130.62976074 171.82038879]
[123.44725800 158.65180969]
[116.26474762 145.48321533]
[109.08223724 132.31463623]
[101.89972687 119.14605713]
[88.59403229 115.49465942]
[81.15413666 103.87476349]
[66.44617462 100.92927551]
[51.73820877 97.98379517]
[38.72664642 106.95456696]
[23.19810867 104.01515961]
[14.36540508 90.90947723]
[17.46882248 75.41288757]
[30.66715622 66.71923828]
[46.13006973 69.98632050]
[54.68369293 83.27583313]
[69.39165497 86.22131348]
[84.09961700 89.16680145]
[86.18458557 86.60914612]
[88.67593384 84.44538116]
[85.27295685 69.83649445]
[81.86997986 55.22760010]
[66.85946655 56.11785507]
[51.91443634 54.45834732]
[37.46487808 50.29682541]
[23.92653656 43.75302124]
[11.68894005 35.01521683]
[1.10418701 24.33481407]
[-7.52317858 12.01911068]
[-13.94492912 -1.57754827]
[-17.97629929 -16.06395721]
[-19.50129700 -31.02331543]
[-18.47604752 -46.02521133]
[-14.93004704 -60.63801193]
[-8.96532154 -74.44127655]
[-0.75348800 -87.03784943]
[9.46918201 -98.06531525]
[21.40856171 -107.20639038]
[34.72113419 -114.19805908]
[49.02386475 -118.83916473]
[63.90524292 -120.99617004]
[78.93709564 -120.60701752]
[93.68692780 -117.68289948]
[107.73035431 -112.30794525]
[120.66332245 -104.63681793]
[132.11372375 -94.89021301]
[141.75210571 -83.34856415]
[149.30116272 -70.34395599]
[154.54368591 -56.25055695]
[157.32882690 -41.47385406]
[157.57646179 -26.43900299]
[155.27946472 -11.57859135]
[150.50393677 2.67981863]
[143.38725281 15.92598534]
[134.13420105 27.77878952]
[123.01099396 37.89720154]
[110.33766937 45.99009323]
[96.47887421 51.82461929]
[99.88185120 66.43350983]
[103.28482819 81.04240417]
[117.97884369 93.14859009]
[115.06831360 111.96354675]
[122.25081635 125.13213348]
[129.43333435 138.30072021]
[136.61584473 151.46929932]
[143.79833984 164.63787842]
[157.19895935 173.04824829]
[156.50057983 187.92646790]
[163.68309021 201.09504700]
[170.86560059 214.26362610]
[185.17433167 209.62719727]
[200.08741760 207.69955444]
[215.09681702 208.54492188]
[229.69139099 212.13302612]
[243.37448120 218.34025574]
[255.68067932 226.95387268]
[266.19171143 237.67932129]
[274.55062866 250.15029907]
[280.47399902 263.94128418]
[283.76144409 278.58200073]
[284.30239868 293.57351685]
[282.07995605 308.40521240]
[277.17120361 322.57217407]
[269.74472046 335.59240723]
[260.05471802 347.02322388]
[248.43229675 356.47625732]
[255.61480713 369.64483643]
[256.29757690 354.66036987]
[260.61767578 340.29595947]
[268.31365967 327.42071533]
[278.91989136 316.81372070]
[291.79458618 309.11682129]
[306.15869141 304.79571533]
[321.14309692 304.11187744]
[335.84109497 307.10668945]
[349.36334229 313.59890747]
[360.89160156 323.19573975]
[369.72833252 335.31646729]
[375.33883667 349.22769165]
[377.38360596 364.08767700]
[375.73895264 378.99725342]
[370.50436401 393.05422974]
[361.99658203 405.40811157]
[350.73040771 415.31130981]
[337.38757324 422.16461182]
[322.77536011 425.55337524]
[307.77798462 425.27252197]
[293.30291748 421.33901978]
[280.22601318 413.99093628]
[269.33853149 403.67282104]
[261.30014038 391.01086426]
[261.61218262 406.00762939]
[261.92425537 421.00439453]
[262.23629761 436.00112915]
[262.54837036 450.99789429]
[262.86041260 465.99465942]
[263.17248535 480.99139404]
[263.48452759 495.98815918]
[263.79656982 510.98489380]
[266.38757324 530.19262695]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 117]
[11 116]
[27 100]
[28 99]
[29 98]
[31 96]
[32 95]
[33 94]
[34 93]
[35 92]
[37 48]
[38 47]
[39 46]
[50 90]
[51 89]
[52 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
