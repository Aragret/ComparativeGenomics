%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUUCUCCUCACUCUCUCAAUCUUAUCCAUCAUAGCAGGCAGUUGAGGUGGAUUAAACCAxxxxxxxxxxACACACCGCACAAUCCCCUAUCUAGGCCUUCUUACGAGCCAAAACCUGCCCCUACUCCUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.32515717 235.84906006]
[95.01309967 220.85231018]
[94.70104218 205.85554504]
[94.38899231 190.85879517]
[94.07693481 175.86204529]
[93.76487732 160.86529541]
[93.45281982 145.86853027]
[93.14076233 130.87178040]
[92.82870483 115.87503052]
[80.21758270 107.75348663]
[66.43519592 113.67344666]
[69.81175232 128.33082581]
[70.51666260 143.35556030]
[68.52725220 158.26469421]
[63.90749359 172.57893372]
[56.80587769 185.83815002]
[47.45069504 197.61611938]
[36.14268112 207.53421021]
[23.24533653 215.27360535]
[9.17326069 220.58552551]
[-5.62118864 223.29919434]
[-20.66243172 223.32740784]
[-35.46695328 220.66921997]
[-49.55884933 215.41011047]
[-62.48512650 207.71913147]
[-73.83025360 197.84352112]
[-83.22953796 186.10072327]
[-90.38082886 172.86822510]
[-95.05423737 158.57141113]
[-97.09954071 143.66984558]
[-96.45098114 128.64257812]
[-93.12941742 113.97264099]
[-87.24161530 100.13162994]
[-78.97685242 87.56446838]
[-68.60079193 76.67514801]
[-56.44699860 67.81371307]
[-42.90615845 61.26501846]
[-28.41355324 57.23958206]
[-13.43506050 55.86679840]
[1.54782283 57.19079971]
[16.05345917 61.16902924]
[29.61555099 67.67359924]
[41.79813766 76.49541473]
[52.20959091 87.35089111]
[60.51523590 99.89106750]
[74.29761505 93.97109985]
[88.05668640 83.61289978]
[101.14214325 85.89102173]
[109.13205719 73.19609070]
[117.12197876 60.50116348]
[125.11189270 47.80623245]
[133.10180664 35.11130142]
[140.95922852 22.33394623]
[148.68331909 9.47554398]
[140.03775024 -16.77502251]
[164.31585693 -39.60967255]
[165.56272888 -54.55775833]
[166.80960083 -69.50584412]
[164.39353943 -78.38359833]
[168.24108887 -84.75086212]
[169.79866028 -99.66976929]
[171.35624695 -114.58868408]
[172.91383362 -129.50759888]
[174.47140503 -144.42651367]
[160.17692566 -149.16801453]
[147.23616028 -156.87196350]
[136.25437927 -167.17799377]
[127.74520111 -179.60409546]
[122.10663605 -193.56907654]
[119.60239410 -208.41976929]
[120.34961700 -223.46156311]
[124.31334686 -237.99095154]
[131.30819702 -251.32833862]
[141.00700378 -262.84994507]
[152.95613098 -272.01684570]
[166.59669495 -278.40032959]
[181.29072571 -281.70181274]
[196.35093689 -281.76687622]
[211.07293701 -278.59246826]
[224.76814270 -272.32705688]
[236.79602051 -263.26370239]
[246.59399414 -251.82632446]
[253.70381165 -238.54986572]
[257.79290771 -224.05526733]
[258.67004395 -209.02047729]
[256.29418945 -194.14871216]
[250.77648926 -180.13554382]
[242.37496948 -167.63639832]
[231.48263550 -157.23587036]
[218.60890198 -149.42042542]
[204.35592651 -144.55560303]
[189.39031982 -142.86892700]
[187.83273315 -127.95001221]
[186.27516174 -113.03110504]
[184.71757507 -98.11219025]
[183.16000366 -83.19327545]
[181.75769043 -68.25897217]
[180.51081848 -53.31088257]
[179.26394653 -38.36279678]
[184.42755127 -32.92338562]
[191.58265686 -46.10686874]
[206.33195496 -43.37584686]
[208.29234314 -28.50450325]
[194.75474548 -22.04455948]
[199.91835022 -16.60514641]
[214.91105652 -17.07318878]
[229.90374756 -17.54123116]
[237.09361267 -31.11331177]
[250.11477661 -39.25854492]
[265.46463013 -39.78590012]
[279.01409912 -32.55352783]
[287.11846924 -19.50689507]
[287.59771729 -4.15548086]
[280.32290649 9.37125969]
[267.25091553 17.43470192]
[251.89808655 17.86582184]
[238.39421082 10.54864788]
[230.37178040 -2.54853511]
[215.37908936 -2.08049297]
[200.38639832 -1.61245084]
[190.34912109 13.46642399]
[175.49501038 19.79912567]
[161.54171753 17.19962883]
[153.81764221 30.05803108]
[153.06449890 37.45927429]
[145.79673767 43.10121918]
[137.80682373 55.79615021]
[129.81690979 68.49108124]
[121.82698822 81.18600464]
[113.83707428 93.88093567]
[125.61487579 84.59205627]
[140.40872192 82.11374664]
[154.57075500 87.05711365]
[164.60890198 98.20321655]
[168.04795837 112.80365753]
[164.03993225 127.25826263]
[153.57310486 138.00282288]
[139.22839355 142.38795471]
[124.54291534 139.33236694]
[113.13780212 129.58950806]
[107.82546234 115.56297302]
[108.13751984 130.55972290]
[108.44957733 145.55647278]
[108.76162720 160.55323792]
[109.07368469 175.54998779]
[109.38574219 190.54673767]
[109.69779968 205.54348755]
[110.00985718 220.54025269]
[110.32191467 235.53700256]
[112.91291046 254.74472046]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 46]
[11 45]
[48 130]
[49 129]
[50 128]
[51 127]
[52 126]
[53 124]
[54 123]
[56 99]
[57 98]
[58 97]
[60 96]
[61 95]
[62 94]
[63 93]
[64 92]
[105 120]
[106 119]
[107 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
