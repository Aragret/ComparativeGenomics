%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACUUAGGAGAUUUCAACUUAACUUGACCGCUCUGAGCUAAACCUAGCCCCAAACCCACUxxxxxxxxxxUCGCAGGAUUUUUCUGAGCCUUUUACCACUCCAGCCUAGCCCCUACCCCCCAAUUAGGAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[225.76622009 384.50415039]
[219.70321655 370.78408813]
[213.64019775 357.06402588]
[207.57717896 343.34399414]
[201.51417542 329.62393188]
[186.81457520 320.08862305]
[188.85836792 301.81835938]
[182.51124573 288.22741699]
[176.16410828 274.63647461]
[169.81698608 261.04550171]
[163.46984863 247.45455933]
[147.52041626 247.57922363]
[133.05407715 240.72496033]
[122.97648621 228.21258545]
[119.33602905 212.50483704]
[122.90769196 196.72178650]
[133.02871704 184.02104187]
[126.40022278 170.56507874]
[119.77172089 157.10910034]
[113.14322662 143.65313721]
[97.41986084 145.51576233]
[82.00772095 141.88816833]
[68.76584625 133.20796204]
[59.29148865 120.52214050]
[44.96889114 124.97895813]
[30.64629173 129.43577576]
[16.32369423 133.89259338]
[9.19627953 147.99845886]
[-5.84379482 152.85353088]
[-19.87351799 145.57737732]
[-24.56930542 130.48680115]
[-17.14522743 116.53479767]
[-2.00586057 111.99881744]
[11.86687946 119.56999207]
[26.18947601 115.11317444]
[40.51207352 110.65635681]
[54.83467102 106.19953918]
[56.37189102 86.77391815]
[65.88006592 69.76473236]
[81.62203979 58.27960205]
[77.91587830 43.74466324]
[74.20971680 29.20972824]
[70.50355530 14.67479229]
[59.59643173 3.21419644]
[63.94921875 -11.03018856]
[60.24306107 -25.56512451]
[51.73196793 -37.91669846]
[39.46960068 -46.55581284]
[27.20723343 -55.19492722]
[14.94486523 -63.83404541]
[-1.42750406 -64.77083588]
[-8.55972672 -79.53780365]
[0.88521564 -92.94396210]
[17.19117737 -91.19820404]
[23.58398056 -76.09641266]
[35.84634781 -67.45729828]
[48.10871887 -58.81818008]
[60.37108612 -50.17906570]
[67.09906769 -53.49331284]
[68.08657074 -68.46076965]
[80.55503082 -60.12181091]
[87.28302002 -63.43606186]
[87.90699005 -78.42308044]
[88.53096771 -93.41009521]
[81.37443542 -107.52017975]
[89.63447571 -119.91457367]
[90.25845337 -134.90159607]
[76.07147980 -140.15373230]
[64.20312500 -149.53442383]
[55.81612778 -162.12463379]
[51.73216629 -176.69091797]
[52.35133743 -191.80619812]
[57.61298370 -205.98965454]
[67.00162506 -217.85171509]
[79.59745789 -226.23027039]
[94.16646576 -230.30447388]
[109.28133392 -229.67517090]
[123.46125793 -224.40402222]
[135.31703186 -215.00743103]
[143.68714905 -202.40599060]
[147.75158691 -187.83425903]
[147.11215210 -172.71981812]
[141.83149719 -158.54342651]
[132.42697144 -146.69395447]
[119.81992340 -138.33229065]
[105.24546814 -134.27761841]
[104.62149048 -119.29059601]
[111.82265472 -106.25248718]
[103.51799011 -92.78611755]
[102.89401245 -77.79910278]
[102.27003479 -62.81208420]
[93.56443787 -36.56769180]
[74.77799225 -29.27128601]
[78.48415375 -14.73634911]
[89.12619019 -4.31538916]
[85.03849030 10.96863079]
[88.74465179 25.50356674]
[92.45081329 40.03850174]
[96.15697479 54.57344055]
[107.97792816 55.11465836]
[119.26137543 58.68002319]
[129.24708557 65.02931213]
[137.26228333 73.73474884]
[142.76693726 84.20980835]
[145.39016724 95.74872589]
[144.95524597 107.57407379]
[141.49147034 118.88911438]
[135.23222351 128.93150330]
[126.59918976 137.02464294]
[133.22769165 150.48060608]
[139.85618591 163.93656921]
[146.48468018 177.39254761]
[160.63645935 176.73045349]
[173.92732239 181.50917053]
[184.35313416 190.97285461]
[190.35527039 203.66197205]
[191.05352783 217.63819885]
[186.37516785 230.78059387]
[177.06080627 241.10743713]
[183.40792847 254.69837952]
[189.75506592 268.28933716]
[196.10218811 281.88027954]
[202.44932556 295.47125244]
[214.31874084 300.62591553]
[219.30955505 312.12854004]
[215.23422241 323.56091309]
[221.29724121 337.28097534]
[227.36026001 351.00103760]
[233.42326355 364.72106934]
[239.48628235 378.44113159]
[254.42706299 376.27886963]
[269.39703369 378.22888184]
[283.28530884 384.14651489]
[295.06130981 393.59262085]
[303.85113525 405.86621094]
[309.00256348 420.05654907]
[310.13330078 435.11059570]
[307.15945435 449.91122437]
[300.30166626 463.36013794]
[290.06887817 474.45938110]
[277.22042847 482.38525391]
[262.70971680 486.54962158]
[247.61357117 486.64349365]
[233.05220032 482.65985107]
[220.10618591 474.89437866]
[209.73617554 463.92324829]
[202.71170044 450.56063843]
[199.55404663 435.79812622]
[200.49749756 420.73120117]
[205.47207642 406.47790527]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 130]
[2 129]
[3 128]
[4 127]
[5 126]
[7 123]
[8 122]
[9 121]
[10 120]
[11 119]
[17 112]
[18 111]
[19 110]
[20 109]
[24 37]
[25 36]
[26 35]
[27 34]
[40 99]
[41 98]
[42 97]
[43 96]
[45 94]
[46 93]
[47 58]
[48 57]
[49 56]
[50 55]
[62 91]
[63 90]
[64 89]
[66 87]
[67 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
