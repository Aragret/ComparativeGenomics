%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAGCAUACUCCUCAAUUACCCACAUAGGAUGAAUAAUAGCAGUUCUACCGUACAACCCUAACAUAACCxxxxxxxxxxAAUUAUAACAAGCUCCAUCUGCCUACGACAAACAGACCUAAAAUCGCUCAUUGCAUACUCUUCAAUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[115.86631775 317.28863525]
[115.86631775 302.28863525]
[115.86631775 287.28863525]
[115.86631775 272.28863525]
[115.86631775 257.28863525]
[115.86631775 242.28865051]
[115.86631775 227.28865051]
[115.86631775 212.28865051]
[115.86631775 197.28865051]
[115.86631775 182.28865051]
[111.96132660 167.80586243]
[104.42063141 154.83906555]
[96.87993622 141.87225342]
[82.36106873 138.10365295]
[69.46576691 145.76597595]
[56.57046127 153.42829895]
[48.65901566 167.12937927]
[33.76516724 166.97909546]
[20.86986542 174.64141846]
[23.71348572 189.53065491]
[21.29012871 204.49404907]
[13.89242744 217.72468567]
[2.41368961 227.62490845]
[-11.75997162 232.99922180]
[-26.91701698 233.19862366]
[-41.22716141 228.19906616]
[-52.96238327 218.60426331]
[-60.70559692 205.57281494]
[-63.52177429 190.67835999]
[-61.07084656 175.71945190]
[-53.64877319 162.50247192]
[-42.15180969 152.62341309]
[-27.96826935 147.27525330]
[-12.81088161 147.10377502]
[1.49002421 152.12968445]
[13.20754337 161.74610901]
[26.10284615 154.08378601]
[33.09193420 140.93077087]
[48.90814209 140.53300476]
[61.80344391 132.87068176]
[74.69874573 125.20835876]
[69.76188660 117.63990784]
[66.96806335 109.23579407]
[66.41461182 100.57704926]
[68.04718018 92.23884583]
[71.66915894 84.75231171]
[76.96027374 78.57071686]
[83.50295258 74.04217529]
[78.78726196 59.80271530]
[74.07157135 45.56325531]
[60.04065704 33.66849899]
[64.20855713 16.64043236]
[59.22584534 2.49219680]
[54.24312973 -11.65603924]
[51.37652206 3.06749868]
[44.16960144 16.22273636]
[33.30455017 26.56443214]
[19.80982971 33.11367035]
[4.96281338 35.25051498]
[-9.83111858 32.77270126]
[-23.17161369 25.91477013]
[-33.79589081 15.32587528]
[-40.69829178 2.00833416]
[-43.22544479 -12.77724934]
[-41.13814545 -27.63131142]
[-34.63396072 -41.14780807]
[-24.32857132 -52.04729843]
[-11.19745064 -59.29806900]
[3.51644206 -62.21377945]
[18.42032814 -60.51843643]
[32.10344315 -54.37252045]
[43.27058411 -44.35778046]
[50.86387253 -31.42427826]
[50.86387253 -46.42427826]
[50.86387253 -61.42427826]
[50.86387253 -76.42427826]
[36.80668259 -82.20907593]
[26.03681183 -92.93653107]
[20.19658089 -106.97077942]
[20.17658424 -122.17170715]
[25.97987175 -136.22126770]
[36.72148514 -146.97702026]
[50.76340485 -152.79878235]
[65.96434021 -152.79878235]
[80.00625610 -146.97702026]
[90.74787140 -136.22126770]
[96.55116272 -122.17170715]
[96.53116608 -106.97077942]
[90.69093323 -92.93653107]
[79.92105865 -82.20907593]
[65.86386871 -76.42427826]
[65.86386871 -61.42427826]
[65.86386871 -46.42427826]
[65.86386871 -31.42427826]
[68.39136505 -16.63875198]
[73.37407684 -2.49051595]
[78.35678864 11.65771961]
[89.14728546 17.18420410]
[93.39949036 28.96506882]
[88.31102753 40.84756470]
[93.02672577 55.08702469]
[97.74241638 69.32648468]
[105.49430847 69.73825073]
[112.89620209 72.07780457]
[119.47654724 76.19611359]
[124.81616974 81.83082581]
[138.71450806 76.18847656]
[152.61285400 70.54612732]
[166.51119995 64.90378571]
[167.94032288 49.66514206]
[176.29722595 36.84247589]
[189.66154480 29.38233948]
[204.96224976 28.99901772]
[218.68336487 35.78059387]
[227.67185974 48.16871262]
[229.86225891 63.31667328]
[224.75122070 77.74359131]
[213.51321411 88.13425446]
[198.73066711 92.10097504]
[183.80049133 88.73223114]
[172.15353394 78.80212402]
[158.25520325 84.44447327]
[144.35685730 90.08682251]
[130.45851135 95.72916412]
[127.87184906 118.10522461]
[109.84674072 134.33157349]
[117.38743591 147.29837036]
[124.92812347 160.26516724]
[124.87454987 145.26527405]
[127.88795471 130.57107544]
[133.84109497 116.80298615]
[142.48263550 104.54233551]
[153.44772339 94.30676270]
[166.27339172 86.52842712]
[180.41810608 81.53575897]
[195.28468323 79.53953552]
[210.24543762 80.62405396]
[224.66867065 84.74351501]
[237.94546509 91.72399139]
[249.51521301 101.27075958]
[258.88943481 112.98074341]
[265.67236328 126.35953522]
[269.57760620 140.84225464]
[270.44024658 155.81742859]
[268.22387695 170.65278625]
[263.02209473 184.72195435]
[255.05451965 197.43090820]
[244.65754700 208.24308777]
[232.27015686 216.70195007]
[218.41534424 222.45036316]
[203.67810059 225.24563599]
[188.68063354 224.96974182]
[174.05618286 221.63432312]
[160.42218018 215.38020325]
[148.35427856 206.47145081]
[138.36201477 195.28419495]
[130.86631775 182.28865051]
[130.86631775 197.28865051]
[130.86631775 212.28865051]
[130.86631775 227.28865051]
[130.86631775 242.28865051]
[130.86631775 257.28863525]
[130.86631775 272.28863525]
[130.86631775 287.28863525]
[130.86631775 302.28863525]
[130.86631775 317.28863525]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 166]
[2 165]
[3 164]
[4 163]
[5 162]
[6 161]
[7 160]
[8 159]
[9 158]
[10 157]
[11 128]
[12 127]
[13 126]
[14 41]
[15 40]
[16 39]
[18 37]
[19 36]
[48 102]
[49 101]
[50 100]
[52 97]
[53 96]
[54 95]
[73 94]
[74 93]
[75 92]
[76 91]
[106 124]
[107 123]
[108 122]
[109 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
