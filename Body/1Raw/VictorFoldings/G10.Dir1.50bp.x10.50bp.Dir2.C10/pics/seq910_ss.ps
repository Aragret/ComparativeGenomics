%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCCCAUAAACAAAUAGGUUUGGUCCUAGCCUUUCUAUUAGCUCUUAGUAAGAUUACACAxxxxxxxxxxUCGCUUCCCCACCCUUACUAACAUUAACGAAAAUAACCCCACCCUACUAAACCCCAUUAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[90.66712189 534.94195557]
[90.66712189 519.94195557]
[90.66712189 504.94195557]
[90.66712189 489.94195557]
[90.66712189 474.94195557]
[90.66712189 459.94195557]
[90.66712189 444.94195557]
[90.66712189 429.94195557]
[90.66712189 414.94195557]
[90.66712189 399.94195557]
[75.97155762 397.04119873]
[62.11990738 391.32720947]
[49.64524841 383.01788330]
[39.02807236 372.43103027]
[30.67775345 359.97222900]
[24.91678619 346.11926270]
[21.96831131 331.40380859]
[21.94748688 316.39111328]
[24.85698700 301.65811157]
[30.58682632 287.77145386]
[38.91851807 275.26556396]
[49.53340149 264.62213135]
[62.02483368 256.25152588]
[75.91377258 250.47700500]
[90.66712189 247.52227783]
[90.66712189 232.52227783]
[90.66712189 217.52227783]
[90.66712189 202.52227783]
[82.31856537 193.71267700]
[82.23413849 181.17427063]
[91.00721741 171.66180420]
[91.31927490 156.66505432]
[91.63133240 141.66830444]
[79.16070557 137.04058838]
[68.73136902 128.78462219]
[61.36491013 117.70907593]
[57.78290939 104.89886475]
[58.33623505 91.60879517]
[62.97068787 79.14067078]
[71.23229980 68.71579742]
[82.31182098 61.35533524]
[95.12397003 57.78026581]
[96.05960083 42.80947495]
[96.99523163 27.83868217]
[97.93085480 12.86789036]
[89.97885895 2.65908957]
[91.10524750 -9.82891369]
[100.15721130 -17.91404152]
[101.40408325 -32.86212921]
[102.65096283 -47.81021500]
[91.54548645 -56.03624344]
[86.01413727 -68.58284760]
[87.41014099 -82.11435699]
[95.26033783 -93.09095764]
[107.41738892 -98.69472504]
[108.97496796 -113.61363983]
[110.53254700 -128.53254700]
[112.09012604 -143.45146179]
[113.64771271 -158.37037659]
[115.20529175 -173.28929138]
[116.76287079 -188.20819092]
[118.32044983 -203.12710571]
[103.92023468 -207.48945618]
[90.60594940 -214.49847412]
[78.85890198 -223.90078735]
[69.10374451 -235.35650635]
[61.69312286 -248.45150757]
[56.89491653 -262.71243286]
[54.88258362 -277.62371826]
[55.72887039 -292.64639282]
[59.40317917 -307.23733521]
[65.77268982 -320.86914062]
[74.60713959 -333.04901123]
[85.58718872 -343.33660889]
[98.31589508 -351.36010742]
[112.33312988 -356.82943726]
[127.13218689 -359.54687500]
[142.17808533 -359.41421509]
[156.92691040 -356.43621826]
[170.84552002 -350.72058105]
[183.43077087 -342.47384644]
[194.22769165 -331.99420166]
[202.84599304 -319.66046143]
[208.97412109 -305.91845703]
[212.39056396 -291.26498413]
[212.97180176 -276.22973633]
[210.69683838 -261.35623169]
[205.64788818 -247.18215942]
[198.00750732 -234.21986389]
[188.05184937 -222.93795776]
[176.14083862 -213.74424744]
[162.70501709 -206.97111511]
[148.23011780 -202.86337280]
[133.23936462 -201.56953430]
[131.68177795 -186.65061951]
[130.12420654 -171.73170471]
[128.56661987 -156.81278992]
[127.00904083 -141.89387512]
[125.45146179 -126.97496796]
[123.89388275 -112.05605316]
[122.33629608 -97.13714600]
[134.87478638 -86.58766174]
[138.71575928 -70.48757172]
[132.16018677 -55.10882187]
[117.59904480 -46.56333923]
[116.35217285 -31.61525345]
[115.10530090 -16.66716576]
[123.44432831 -1.25741398]
[112.90164948 13.80351925]
[111.96601868 28.77431107]
[111.03038788 43.74510193]
[110.09476471 58.71589279]
[125.10692596 65.70825195]
[136.30696106 77.90733337]
[141.99430847 93.46086884]
[141.30540466 110.00727844]
[134.34486389 125.03422546]
[122.16954041 136.26007080]
[106.62808228 141.98034668]
[106.31603241 156.97711182]
[106.00397491 171.97386169]
[115.25823212 187.85902405]
[105.66712189 202.52227783]
[105.66712189 217.52227783]
[105.66712189 232.52227783]
[105.66712189 247.52227783]
[120.42047119 250.47700500]
[134.30940247 256.25152588]
[146.80084229 264.62213135]
[157.41572571 275.26556396]
[165.74742126 287.77145386]
[171.47726440 301.65811157]
[174.38676453 316.39111328]
[174.36593628 331.40380859]
[171.41746521 346.11926270]
[165.65649414 359.97222900]
[157.30616760 372.43103027]
[146.68899536 383.01788330]
[134.21434021 391.32720947]
[120.36268616 397.04119873]
[105.66712189 399.94195557]
[105.66712189 414.94195557]
[105.66712189 429.94195557]
[105.66712189 444.94195557]
[105.66712189 459.94195557]
[105.66712189 474.94195557]
[105.66712189 489.94195557]
[105.66712189 504.94195557]
[105.66712189 519.94195557]
[105.66712189 534.94195557]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[25 126]
[26 125]
[27 124]
[28 123]
[31 121]
[32 120]
[33 119]
[42 112]
[43 111]
[44 110]
[45 109]
[48 107]
[49 106]
[50 105]
[55 101]
[56 100]
[57 99]
[58 98]
[59 97]
[60 96]
[61 95]
[62 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
