%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAAAAAGGUAUUAGAAAAACCAUUUCAUAACUUUGUCAAAGUUAAAUUAUAGGCUAAAUCCxxxxxxxxxxCUAAAACAAUUUCACAGCACCAAAUCUCCACCUCCAUCAUCACCUCAACCCAAAAAGGCAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[90.08052826 389.37982178]
[90.08052826 374.37982178]
[90.08052826 359.37982178]
[90.08052826 344.37982178]
[90.08052826 329.37982178]
[90.08052826 314.37982178]
[90.08052826 299.37982178]
[90.08052826 284.37982178]
[90.08052826 269.37982178]
[90.08052826 254.37982178]
[72.71034241 248.07792664]
[59.00806427 235.63275146]
[51.04102325 218.88877869]
[50.02383041 200.34152222]
[56.13326645 182.76556396]
[68.47814941 168.79956055]
[85.22924042 160.55006409]
[83.69194794 145.62904358]
[82.15465546 130.70803833]
[71.06951904 120.60260010]
[56.07031250 120.44860077]
[41.07110214 120.29460144]
[43.57048416 140.43803406]
[27.02653694 161.23489380]
[12.87922001 166.22021484]
[-1.26809692 171.20553589]
[-15.41541386 176.19085693]
[-23.61337852 189.98118591]
[-39.52544785 192.02705383]
[-50.94524384 180.75904846]
[-49.11248016 164.82102966]
[-35.43309021 156.43927002]
[-20.40073586 162.04354858]
[-6.25341892 157.05822754]
[7.89389753 152.07290649]
[22.04121399 147.08758545]
[21.96421623 139.58796692]
[21.73322105 117.08915710]
[7.48652792 112.39536285]
[-6.76016378 107.70156097]
[-21.00685692 103.00775909]
[-35.25354767 98.31395721]
[-49.50024033 93.62015533]
[-63.74693298 88.92635345]
[-80.68263245 89.71266174]
[-86.12648010 73.65648651]
[-72.20479584 63.98059464]
[-59.05313110 74.67966461]
[-44.80643845 79.37346649]
[-30.55974770 84.06726837]
[-16.31305504 88.76106262]
[-2.06636333 93.45486450]
[12.18032837 98.14866638]
[26.42702103 102.84246826]
[41.22510147 105.29539490]
[56.22430801 105.44939423]
[71.22351837 105.60338593]
[73.74338531 90.65628815]
[83.08550262 79.70135498]
[96.00855255 75.34612274]
[108.58890533 78.09620667]
[118.23072052 66.60554504]
[127.87253571 55.11487579]
[117.40673065 44.35114288]
[108.08358765 32.58381653]
[99.99877930 19.93364525]
[93.23526001 6.53044081]
[87.86244965 -7.48825693]
[83.93547058 -21.97859383]
[81.49462128 -36.79187393]
[80.56495667 -51.77608871]
[81.15600586 -66.77748108]
[83.26171112 -81.64210510]
[86.86046600 -96.21742249]
[91.91532898 -110.35387421]
[98.37444305 -123.90640259]
[106.17152405 -136.73591614]
[115.22655487 -148.71078491]
[125.44662476 -159.70811462]
[136.72685242 -169.61505127]
[148.95147705 -178.32995605]
[161.99507141 -185.76336670]
[175.72378540 -191.83903503]
[189.99671936 -196.49458313]
[204.66743469 -199.68226624]
[219.58535767 -201.36936951]
[234.59744263 -201.53855896]
[249.54960632 -200.18811035]
[264.28842163 -197.33189392]
[278.66265869 -192.99920654]
[292.52484131 -187.23451233]
[305.73263550 -180.09696960]
[318.15060425 -171.65980530]
[329.65124512 -162.00962830]
[340.11657715 -151.24543762]
[349.43917847 -139.47769165]
[357.52343750 -126.82716370]
[364.28637695 -113.42366028]
[369.65856934 -99.40473175]
[373.58489990 -84.91422272]
[376.02511597 -70.10083008]
[376.95410156 -55.11657333]
[376.36239624 -40.11521149]
[374.25604248 -25.25068092]
[370.65664673 -10.67551804]
[365.60116577 3.46071267]
[359.14144897 17.01295090]
[351.34381104 29.84212685]
[342.28823853 41.81659317]
[332.06768799 52.81347275]
[320.78701782 62.71992111]
[308.56201172 71.43427277]
[295.51809692 78.86711884]
[281.78912354 84.94217682]
[267.51599121 89.59710693]
[252.84512329 92.78414154]
[237.92712402 94.47058105]
[222.91503906 94.63911438]
[207.96293640 93.28801727]
[193.22422791 90.43114471]
[178.85017395 86.09783173]
[164.98828125 80.33252716]
[151.78077698 73.19439697]
[139.36320496 64.75669098]
[129.72138977 76.24736023]
[120.07957458 87.73802185]
[124.99237823 104.84330750]
[116.34957886 121.97151184]
[97.07567596 129.17074585]
[98.61296082 144.09175110]
[100.15025330 159.01277161]
[111.72347260 161.11212158]
[122.43482208 165.94267273]
[131.65098572 173.21247864]
[138.82858276 182.48559570]
[143.54620361 193.20819092]
[145.52912903 204.74160767]
[144.66535950 216.40039062]
[141.01187134 227.49307251]
[134.79096985 237.36312866]
[126.37668610 245.42790222]
[116.27236938 251.21290588]
[105.08052826 254.37982178]
[105.08052826 269.37982178]
[105.08052826 284.37982178]
[105.08052826 299.37982178]
[105.08052826 314.37982178]
[105.08052826 329.37982178]
[105.08052826 344.37982178]
[105.08052826 359.37982178]
[105.08052826 374.37982178]
[105.08052826 389.37982178]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[17 131]
[18 130]
[19 129]
[20 57]
[21 56]
[22 55]
[24 36]
[25 35]
[26 34]
[27 33]
[38 54]
[39 53]
[40 52]
[41 51]
[42 50]
[43 49]
[44 48]
[61 126]
[62 125]
[63 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
