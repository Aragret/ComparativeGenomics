%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAAUAAUCAUAAUAGCUAUAGCAAUAAAACUAGGAAUAGCCCCCUUUCACUUCUGAGUCCxxxxxxxxxxUAUCCAUUGGUCUUAGGCCCCAAAAAUUUUGGUGCAACUCCAAAUAAAAGUAAUAACCAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[79.19618225 287.79660034]
[79.19618225 272.79660034]
[79.19618225 257.79660034]
[79.19618225 242.79661560]
[79.19618225 227.79661560]
[79.19618225 212.79661560]
[79.19618225 197.79661560]
[79.19618225 182.79661560]
[79.19618225 167.79661560]
[79.19618225 152.79661560]
[65.17946625 147.45509338]
[55.19674301 158.65086365]
[51.78751755 174.10038757]
[37.54232788 178.45053101]
[27.55960083 189.64630127]
[24.75955200 205.80462646]
[9.27480221 211.20413208]
[-2.96526504 200.29025269]
[0.63088161 184.29025269]
[16.36383438 179.66357422]
[26.34656143 168.46780396]
[29.04175377 153.81907654]
[44.00097656 148.66813660]
[53.98370361 137.47236633]
[47.77829742 123.81613159]
[32.77910614 123.97216797]
[17.77991867 124.12820435]
[2.78073049 124.28424072]
[-12.21845818 124.44027710]
[-17.23103905 138.74586487]
[-26.83652496 150.47235107]
[-39.87500763 158.20370483]
[-54.77202606 161.00631714]
[-69.72869110 158.54177856]
[-82.93891144 151.10768127]
[-92.80749512 139.60173035]
[-98.14276123 125.41333008]
[-98.30044556 110.25579071]
[-93.26150513 95.95946503]
[-83.63442993 84.25070190]
[-70.58171844 76.54338837]
[-55.67956161 73.76822662]
[-40.72746277 76.26033020]
[-27.53096390 83.71875763]
[-17.68360138 95.24287415]
[-12.37449455 109.44108582]
[2.62469387 109.28504944]
[17.62388229 109.12901306]
[32.62306976 108.97297668]
[47.62225723 108.81694031]
[53.45007706 80.60487366]
[72.47499084 60.99015808]
[97.61669922 55.00590515]
[120.63401794 62.99232101]
[130.14237976 51.39097977]
[139.65072632 39.78963852]
[149.15908813 28.18829918]
[135.01458740 33.18159485]
[120.07906342 34.57090378]
[105.25625610 32.27215576]
[91.44306183 26.42444992]
[79.47530365 17.38162041]
[70.07713318 5.69083834]
[63.81721878 -7.94050503]
[61.07434845 -22.68759537]
[62.01448059 -37.65810394]
[66.58073425 -51.94618607]
[74.49680328 -64.68729401]
[85.28370667 -75.11047363]
[98.28874207 -82.58503723]
[112.72499084 -86.65870667]
[127.71893311 -87.08499146]
[142.36331177 -83.83809662]
[155.77200317 -77.11448669]
[167.13366699 -67.32099915]
[175.76084900 -55.05022812]
[181.13150024 -41.04465485]
[182.92065430 -26.15173912]
[181.02008057 -11.27263451]
[175.54473877 2.69234705]
[166.82730103 14.89674664]
[180.60968018 8.97678280]
[194.39205933 3.05682015]
[197.58633423 -1.23459268]
[201.70875549 -3.59213400]
[205.84925842 -3.98955226]
[209.22366333 -2.77263308]
[223.34846497 -7.82138920]
[237.47326660 -12.87014580]
[251.59806824 -17.91890144]
[258.41467285 -31.92502594]
[272.81115723 -36.84396744]
[286.12185669 -30.25905228]
[300.24667358 -35.30780792]
[304.88159180 -40.16836166]
[310.44427490 -41.68095779]
[315.06536865 -40.25941849]
[329.38796997 -44.71623230]
[340.26602173 -56.20443726]
[354.71743774 -52.59809494]
[369.04003906 -57.05491257]
[383.36264038 -61.51172638]
[397.68524170 -65.96854401]
[412.00781250 -70.42536163]
[425.33517456 -80.90478516]
[439.09442139 -70.99927521]
[433.38497925 -55.03561401]
[416.46463013 -56.10276031]
[402.14205933 -51.64594650]
[387.81945801 -47.18912888]
[373.49685669 -42.73231506]
[359.17425537 -38.27549744]
[349.32064819 -27.10607529]
[333.84478760 -30.39363670]
[319.52218628 -25.93682098]
[305.29541016 -21.18300438]
[291.17062378 -16.13424873]
[285.04992676 -2.60380363]
[270.79730225 2.71756649]
[256.64682007 -3.79409909]
[242.52201843 1.25465727]
[228.39721680 6.30341339]
[214.27241516 11.35216999]
[200.31202698 16.83920097]
[186.52964783 22.75916481]
[172.74726868 28.67912674]
[160.76043701 37.69665909]
[151.25207520 49.29800034]
[141.74371338 60.89934158]
[132.23535156 72.50067902]
[138.26126099 79.62536621]
[142.69082642 88.07649994]
[145.23184204 97.49167633]
[145.67533875 107.44429016]
[143.90959167 117.46286774]
[139.92964172 127.05336761]
[133.84165955 135.72351074]
[125.86166382 143.00784302]
[116.30873871 148.49232483]
[105.59259796 151.83717346]
[94.19618225 152.79661560]
[94.19618225 167.79661560]
[94.19618225 182.79661560]
[94.19618225 197.79661560]
[94.19618225 212.79661560]
[94.19618225 227.79661560]
[94.19618225 242.79661560]
[94.19618225 257.79660034]
[94.19618225 272.79660034]
[94.19618225 287.79660034]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 24]
[12 23]
[14 21]
[15 20]
[25 50]
[26 49]
[27 48]
[28 47]
[29 46]
[54 130]
[55 129]
[56 128]
[57 127]
[81 126]
[82 125]
[83 124]
[87 123]
[88 122]
[89 121]
[90 120]
[93 117]
[94 116]
[97 115]
[98 114]
[100 112]
[101 111]
[102 110]
[103 109]
[104 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
