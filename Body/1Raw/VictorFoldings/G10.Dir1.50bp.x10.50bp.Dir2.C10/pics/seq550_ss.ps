%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAACACAUUAUUUUCCCCUCCCACUCCCAUACUACUAAUCUCAUCAAUACAACCCCCGCCxxxxxxxxxxAACCUACCCACCCUUAACAGUACAUAGUACAUAAAGCCAUUUACCGUACAUAGCACAUUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-38.87905502 281.28085327]
[-48.38741302 292.88220215]
[-57.89577103 304.48352051]
[-67.40412903 316.08486938]
[-76.91249084 327.68621826]
[-86.42084503 339.28756714]
[-95.92920685 350.88888550]
[-105.43756104 362.49023438]
[-114.94592285 374.09158325]
[-124.21086884 385.88821411]
[-133.22839355 397.87506104]
[-142.24592590 409.86187744]
[-151.26345825 421.84872437]
[-152.71066284 438.18386841]
[-167.69297791 444.85186768]
[-180.79791260 434.99319458]
[-178.54420471 418.74966431]
[-163.25028992 412.83117676]
[-154.23275757 400.84436035]
[-145.21524048 388.85751343]
[-136.19770813 376.87069702]
[-135.98091125 372.04074097]
[-132.68426514 367.31173706]
[-126.54726410 364.58322144]
[-117.03890228 352.98187256]
[-107.53054810 341.38052368]
[-98.02218628 329.77920532]
[-88.51383209 318.17785645]
[-79.00547028 306.57650757]
[-69.49710846 294.97515869]
[-59.98875427 283.37384033]
[-50.48039627 271.77249146]
[-59.76688385 263.17071533]
[-68.56249237 254.06759644]
[-76.84020233 244.49110413]
[-84.57457733 234.47068787]
[-91.74184418 224.03709412]
[-98.31999969 213.22241211]
[-104.28882599 202.05986023]
[-109.62997437 190.58372498]
[-114.32704163 178.82928467]
[-118.36560059 166.83262634]
[-121.73323822 154.63064575]
[-124.41960907 142.26080322]
[-126.41645813 129.76112366]
[-127.71765137 117.16999817]
[-128.31918335 104.52611542]
[-128.21922302 91.86833191]
[-127.41806030 79.23553467]
[-125.91816711 66.66653442]
[-123.72414398 54.19994736]
[-120.84273529 41.87408066]
[-117.28279877 29.72680283]
[-113.05526733 17.79543877]
[-108.17313385 6.11664438]
[-102.65139008 -5.27369642]
[-96.50701141 -16.34058762]
[-89.75886536 -27.05002594]
[-82.42769623 -37.36911011]
[-74.53602600 -47.26612854]
[-66.10810089 -56.71067810]
[-57.16981125 -65.67373657]
[-47.74862289 -74.12777710]
[-37.87348175 -82.04680634]
[-27.57472801 -89.40650940]
[-16.88400841 -96.18426514]
[-5.83416414 -102.35925293]
[5.54085064 -107.91249847]
[17.20608902 -112.82693481]
[29.12570763 -117.08747864]
[41.26308441 -120.68101501]
[53.58092880 -123.59652710]
[66.04139709 -125.82504272]
[78.60620117 -127.35971832]
[91.23673248 -128.19584656]
[103.89418793 -128.33084106]
[116.53968811 -127.76429749]
[129.13436890 -126.49796295]
[141.63952637 -124.53571320]
[154.01675415 -121.88359070]
[166.22801208 -118.54973602]
[178.23579407 -114.54439545]
[190.00318909 -109.87987518]
[201.49406433 -104.57051086]
[212.67309570 -98.63259888]
[223.50595093 -92.08440399]
[233.95932007 -84.94603729]
[244.00111389 -77.23942566]
[253.60047913 -68.98825836]
[262.72790527 -60.21787262]
[271.35534668 -50.95522690]
[279.45632935 -41.22877502]
[287.00592041 -31.06840515]
[293.98092651 -20.50532913]
[300.35995483 -9.57200718]
[306.12338257 1.69797230]
[311.25350952 13.26998138]
[315.73455811 25.10846519]
[319.55276489 37.17705154]
[322.69641113 49.43865585]
[325.15582275 61.85560989]
[326.92346191 74.38976288]
[327.99386597 87.00260162]
[328.36380005 99.65537262]
[328.03207397 112.30920410]
[326.99972534 124.92521667]
[325.26992798 137.46464539]
[339.97787476 140.41012573]
[354.68585205 143.35560608]
[369.39379883 146.30110168]
[386.65927124 139.98576355]
[399.40652466 152.00689697]
[414.17257690 154.64576721]
[428.93862915 157.28462219]
[443.70468140 159.92349243]
[458.93548584 153.84445190]
[471.64624023 164.20631409]
[468.76123047 180.34970093]
[453.24829102 185.66766357]
[441.06582642 174.68954468]
[426.29977417 172.05068970]
[411.53369141 169.41181946]
[396.76763916 166.77294922]
[386.62673950 173.44148254]
[374.26901245 171.31878662]
[366.44833374 161.00906372]
[351.74035645 158.06356812]
[337.03240967 155.11808777]
[322.32443237 152.17260742]
[316.97189331 171.22731018]
[309.98956299 189.74697876]
[301.42987061 207.59249878]
[291.35711670 224.62983704]
[279.84695435 240.73100281]
[266.98583984 255.77503967]
[252.87040710 269.64898682]
[237.60667419 282.24856567]
[221.30929565 293.47918701]
[204.10069275 303.25643921]
[186.11012268 311.50692749]
[167.47273254 318.16867065]
[148.32850647 323.19161987]
[128.82125854 326.53802490]
[109.09751129 328.18276978]
[89.30542755 328.11349487]
[69.59368134 326.33071899]
[50.11033630 322.84783936]
[31.00174141 317.69100952]
[12.41143417 310.89898682]
[-5.52094221 302.52276611]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 32]
[2 31]
[3 30]
[4 29]
[5 28]
[6 27]
[7 26]
[8 25]
[9 24]
[10 21]
[11 20]
[12 19]
[13 18]
[107 129]
[108 128]
[109 127]
[110 126]
[112 123]
[113 122]
[114 121]
[115 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
