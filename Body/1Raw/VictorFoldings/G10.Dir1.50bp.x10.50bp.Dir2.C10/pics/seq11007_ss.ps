%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAAAUAGGAGGACUACUCAAAACCAUACCUCUCACUUCAACCUCCCUCACCAUUGGCAGCCxxxxxxxxxxCCGAAUGAUAUUUCCUAUUCGCCUACACAAUUCUCCGAUCCGUCCCUAACAAACUAGGAGGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[101.69244385 289.11825562]
[101.69244385 274.11825562]
[101.69244385 259.11825562]
[101.69244385 244.11825562]
[101.69244385 229.11825562]
[101.69244385 214.11825562]
[101.69244385 199.11825562]
[101.69244385 184.11825562]
[101.69244385 169.11825562]
[101.69244385 154.11825562]
[65.00830841 124.85466003]
[70.41260529 88.63135529]
[58.08131790 80.09089661]
[45.75003433 71.55043793]
[33.41875076 63.00997925]
[21.08746719 54.46952057]
[6.57884121 50.66166306]
[-8.35717201 52.04568863]
[-23.29318428 53.42971420]
[-38.22919846 54.81373978]
[-53.16521072 56.19776535]
[-54.81692886 71.15960693]
[-59.44696426 85.48258209]
[-66.86571503 98.58017731]
[-76.76939392 109.91605377]
[-88.75244904 119.02600861]
[-102.32418060 125.53700256]
[-116.92883301 129.18240356]
[-131.96835327 129.81295776]
[-146.82688904 127.40281677]
[-160.89599609 122.05068970]
[-173.59954834 113.97573853]
[-184.41732788 103.50862885]
[-192.90637207 91.07798767]
[-198.71905518 77.19283295]
[-201.61735535 62.42175293]
[-201.48258972 47.36961746]
[-198.32026672 32.65280533]
[-192.25988770 18.87395477]
[-183.54962158 6.59730577]
[-172.54614258 -3.67442298]
[-159.70004272 -11.52061081]
[-145.53736877 -16.61996078]
[-130.63806152 -18.76365662]
[-115.61222839 -17.86391640]
[-101.07519531 -13.95758438]
[-87.62222290 -7.20462132]
[-75.80421448 2.11844206]
[-66.10510254 13.62983322]
[-58.92206192 26.85816765]
[-54.54923630 41.26175308]
[-39.61322403 39.87772751]
[-24.67720985 38.49370193]
[-9.74119663 37.10967636]
[5.19481564 35.72565079]
[-9.52790451 32.85485077]
[-17.33846664 20.04878998]
[-13.15176582 5.64491844]
[0.30642509 -0.97906053]
[14.27408981 4.48942614]
[19.65753746 18.48965073]
[18.42692375 3.54021597]
[17.19631195 -11.40921879]
[15.96569920 -26.35865402]
[14.58167458 -41.29466629]
[13.04438210 -56.21568298]
[-1.60356212 -60.19087601]
[-13.82403755 -69.19223785]
[-21.96432495 -82.00239563]
[-24.92351913 -96.88888550]
[-22.30141068 -111.83843231]
[-14.45262051 -124.82923126]
[-2.43863153 -134.10438538]
[12.11576176 -138.40951538]
[27.24219704 -137.16236877]
[40.89495087 -130.53161621]
[51.22759628 -119.41402435]
[56.84273148 -105.31314850]
[56.98095322 -90.13601685]
[51.62356949 -75.93521118]
[41.49512100 -64.63127899]
[27.96539879 -57.75297546]
[29.50269127 -42.83195877]
[33.34035873 -36.46136093]
[30.91513443 -27.58926582]
[32.14574814 -12.63983059]
[33.37635803 2.30960345]
[34.60697174 17.25903893]
[35.58812332 31.85759163]
[29.62792587 42.13823700]
[41.95920944 50.67869568]
[54.29049301 59.21915436]
[66.62178040 67.75961304]
[78.95306396 76.30007172]
[86.13785553 67.38595581]
[96.96183014 60.93882370]
[110.47950745 58.37845993]
[125.21685791 60.73875046]
[139.33172607 68.48000336]
[150.83770752 81.36730957]
[165.49043274 78.15830994]
[180.14315796 74.94931793]
[182.78672791 59.98001480]
[190.96179199 47.16452408]
[203.42170715 38.45711517]
[218.26641846 35.18560028]
[233.23223877 37.84886551]
[246.03695679 46.04078293]
[254.72796631 58.51213837]
[257.97994995 73.36114502]
[255.29699707 88.32344055]
[247.08825684 101.11737823]
[234.60546875 109.79197693]
[219.75219727 113.02442169]
[204.79344177 110.32179260]
[192.01031494 102.09622192]
[183.35214233 89.60203552]
[168.69941711 92.81103516]
[154.04669189 96.02003479]
[152.97241211 103.44269562]
[164.75456238 112.72605133]
[150.82382202 118.28801727]
[149.74954224 125.71067810]
[162.89117432 132.94238281]
[178.63763428 129.87176514]
[190.76222229 140.37767029]
[189.96398926 156.40084839]
[176.85528564 165.64970398]
[161.49195862 161.02929688]
[155.65946960 146.08401489]
[142.51783752 138.85231018]
[136.06149292 142.66879272]
[144.12728882 155.31564331]
[152.19309998 167.96249390]
[160.25889587 180.60934448]
[170.59391785 191.48074341]
[164.23318481 205.06533813]
[149.26499939 204.08897400]
[144.72294617 189.79298401]
[137.53155518 176.62924194]
[130.34017944 163.46549988]
[123.14878845 150.30175781]
[116.69244385 154.11825562]
[116.69244385 169.11825562]
[116.69244385 184.11825562]
[116.69244385 199.11825562]
[116.69244385 214.11825562]
[116.69244385 229.11825562]
[116.69244385 244.11825562]
[116.69244385 259.11825562]
[116.69244385 274.11825562]
[116.69244385 289.11825562]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[12 94]
[13 93]
[14 92]
[15 91]
[16 90]
[17 55]
[18 54]
[19 53]
[20 52]
[21 51]
[61 88]
[62 87]
[63 86]
[64 85]
[65 83]
[66 82]
[100 119]
[101 118]
[102 117]
[123 131]
[124 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
