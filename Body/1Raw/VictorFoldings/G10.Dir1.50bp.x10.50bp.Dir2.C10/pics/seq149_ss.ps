%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACAUACUUACUAAAGUGUGUUAAUUAAUUAAUGCUUGUAGGACAUAAUAAUAACAAUUGAAUxxxxxxxxxxGCUAUGUCCUCCCGUGAGGCCAAAUAUCAUUCUGAGGGGCCACAGUAAUUACAAACUUACUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[85.08763885 287.38107300]
[85.08763885 272.38107300]
[85.08763885 257.38107300]
[85.08763885 242.38107300]
[85.08763885 227.38107300]
[85.08763885 212.38107300]
[85.08763885 197.38107300]
[85.08763885 182.38107300]
[85.08763885 167.38107300]
[85.08763885 152.38107300]
[71.36392975 146.32633972]
[60.28482056 156.43838501]
[49.20571136 166.55043030]
[38.12660217 176.66246033]
[27.04749680 186.77450562]
[15.96838856 196.88655090]
[4.88928080 206.99859619]
[-6.18982697 217.11062622]
[-10.63353348 232.89624023]
[-26.59069443 236.67791748]
[-37.64595032 224.56538391]
[-32.42660141 209.01898193]
[-16.30186844 206.03152466]
[-5.22276020 195.91947937]
[5.85634756 185.80743408]
[16.93545532 175.69540405]
[28.01456261 165.58335876]
[39.09366989 155.47131348]
[50.17277908 145.35928345]
[61.25188446 135.24723816]
[51.24795151 117.00425720]
[49.23022079 96.59703064]
[55.28880310 77.31906891]
[68.22908020 62.18980789]
[85.79882812 53.48187256]
[105.07758331 52.38113785]
[108.98433685 37.89882660]
[112.89108276 23.41651726]
[116.79783630 8.93420792]
[120.70458984 -5.54810143]
[116.82858276 -20.88717270]
[127.61367035 -31.16001129]
[131.52041626 -45.64232254]
[122.39465332 -52.62654877]
[116.64575958 -63.08378983]
[115.55821228 -75.41094208]
[119.66825104 -87.55095673]
[128.61518860 -97.33610535]
[141.14724731 -102.87340546]
[136.94779968 -117.27355957]
[132.74833679 -131.67372131]
[128.54887390 -146.07386780]
[124.34940338 -160.47402954]
[120.14994049 -174.87419128]
[115.95048523 -189.27433777]
[111.75102234 -203.67449951]
[96.73664093 -202.55107117]
[81.81684113 -204.57424927]
[67.64384460 -209.65557861]
[54.83724594 -217.57295227]
[43.95688629 -227.98022461]
[35.47840881 -240.42245483]
[29.77245903 -254.35572815]
[27.08847237 -269.17092896]
[27.54378510 -284.22036743]
[31.11849022 -298.84622192]
[37.65631866 -312.40905762]
[46.87146378 -324.31597900]
[58.36108017 -334.04647827]
[71.62288666 -341.17514038]
[86.07714081 -345.39038086]
[101.09196472 -346.50790405]
[116.01096344 -344.47885132]
[130.18196106 -339.39193726]
[142.98544312 -331.46954346]
[153.86170959 -321.05798340]
[162.33529663 -308.61242676]
[168.03576660 -294.67691040]
[170.71391296 -279.86065674]
[170.25268555 -264.81137085]
[166.67222595 -250.18695068]
[160.12905884 -236.62669373]
[150.90922546 -224.72338867]
[139.41578674 -214.99742126]
[126.15117645 -207.87396240]
[130.35063171 -193.47380066]
[134.55009460 -179.07365417]
[138.74955750 -164.67349243]
[142.94902039 -150.27333069]
[147.14848328 -135.87318420]
[151.34794617 -121.47302246]
[155.54740906 -107.07286835]
[152.74974060 -121.80965424]
[159.55827332 -135.17543030]
[173.12374878 -141.57682800]
[187.76922607 -138.33496094]
[197.36582947 -126.80651093]
[197.89752197 -111.81594086]
[189.14181519 -99.63655853]
[174.76153564 -95.36528778]
[189.48432922 -98.23571777]
[204.20712280 -101.10614014]
[218.92991638 -103.97656250]
[221.26824951 -118.95347595]
[228.59068298 -132.22592163]
[240.01300049 -142.19117737]
[254.15591431 -147.64590454]
[269.31158447 -147.93139648]
[283.64990234 -143.01319885]
[295.43942261 -133.48518372]
[303.25653076 -120.49794006]
[306.15725708 -105.61971283]
[303.79132080 -90.64713287]
[296.44445801 -77.38820648]
[285.00378418 -67.44401550]
[270.85083008 -62.01536942]
[255.69467163 -61.75780487]
[241.36544800 -66.70242310]
[229.59350586 -76.25213623]
[221.80033875 -89.25376892]
[207.07754517 -86.38334656]
[192.35475159 -83.51292419]
[177.63195801 -80.64249420]
[170.87371826 -51.67318726]
[146.00273132 -41.73556900]
[142.09597778 -27.25325966]
[146.25141907 -12.95005894]
[135.18690491 -1.64134896]
[131.28015137 12.84096050]
[127.37339783 27.32327080]
[123.46664429 41.80558014]
[119.55989075 56.28788757]
[128.41374207 61.02290344]
[136.14495850 67.54152679]
[142.39643860 75.58184052]
[146.87141418 84.81093597]
[149.34744263 94.83866882]
[149.68727112 105.23412323]
[147.84611511 115.54413605]
[143.87492371 125.31303406]
[137.91944885 134.10281372]
[130.21504211 141.51269531]
[121.07747650 147.19743347]
[110.89008331 150.88327026]
[100.08763885 152.38107300]
[100.08763885 167.38107300]
[100.08763885 182.38107300]
[100.08763885 197.38107300]
[100.08763885 212.38107300]
[100.08763885 227.38107300]
[100.08763885 242.38107300]
[100.08763885 257.38107300]
[100.08763885 272.38107300]
[100.08763885 287.38107300]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[11 30]
[12 29]
[13 28]
[14 27]
[15 26]
[16 25]
[17 24]
[18 23]
[36 132]
[37 131]
[38 130]
[39 129]
[40 128]
[42 126]
[43 125]
[49 92]
[50 91]
[51 90]
[52 89]
[53 88]
[54 87]
[55 86]
[56 85]
[100 123]
[101 122]
[102 121]
[103 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
