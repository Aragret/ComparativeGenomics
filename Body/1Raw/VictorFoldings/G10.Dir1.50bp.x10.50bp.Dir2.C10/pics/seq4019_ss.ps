%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCGACCUUGCCGAAGGGGAGUCCGAACUAGUCUCAGGCUUCAACAUCGAAUACGCCGCAGGxxxxxxxxxxUUCCUAUUCGCCUACACAAUUCUCCGAUCCGUCCCUAACAAACUAGGAGGCGUCCUUGCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[97.44522095 218.93293762]
[96.82124329 203.94590759]
[96.19726562 188.95889282]
[95.57328796 173.97187805]
[94.94931030 158.98486328]
[94.32533264 143.99784851]
[93.70135498 129.01083374]
[93.07737732 114.02381897]
[85.35329437 101.16541290]
[72.41523743 93.57550812]
[59.47718048 85.98559570]
[46.53912354 78.39569092]
[33.60107040 70.80577850]
[18.69916725 72.51847076]
[7.82034111 82.84568024]
[-3.05848408 93.17288208]
[-13.93730927 103.50008392]
[-18.07082939 119.36974335]
[-33.95082092 123.46338654]
[-45.24131012 111.56982422]
[-40.32761002 95.92413330]
[-24.26451492 92.62126160]
[-13.38568878 82.29405975]
[-2.50686383 71.96685028]
[8.37196159 61.63964844]
[8.05990505 46.64289474]
[-3.23909950 36.77716827]
[-14.53810406 26.91144753]
[-26.73410797 35.74679947]
[-40.58384705 41.64367294]
[-55.39145660 44.30928802]
[-70.41373444 43.61311722]
[-84.89742279 39.59328842]
[-98.11698914 32.45450974]
[-109.41096497 22.55763245]
[-118.21504974 10.40143108]
[-124.09030151 -3.40254259]
[-126.74501038 -18.16072655]
[-126.04921722 -33.13238907]
[-122.04102325 -47.56681824]
[-114.92454529 -60.74094391]
[-126.22354889 -70.60666656]
[-141.77526855 -69.72257996]
[-153.09352112 -79.88878632]
[-153.84053040 -94.72042847]
[-165.13952637 -104.58615112]
[-176.43853760 -114.45187378]
[-188.03988647 -123.96023560]
[-199.93226624 -133.10197449]
[-211.82464600 -142.24369812]
[-227.46102905 -139.94615173]
[-240.09220886 -149.44505310]
[-242.22430420 -165.10485840]
[-232.59240723 -177.63490295]
[-216.91091919 -179.60131836]
[-204.48341370 -169.83747864]
[-202.68290710 -154.13607788]
[-190.79052734 -144.99435425]
[-178.89814758 -135.85261536]
[-175.31309509 -135.97468567]
[-171.49461365 -134.32516479]
[-168.29516602 -130.81576538]
[-166.57281494 -125.75087738]
[-155.27380371 -115.88515472]
[-143.97480774 -106.01943207]
[-129.17787170 -107.27889252]
[-117.57852936 -97.43460083]
[-116.35782623 -81.90567017]
[-105.05882263 -72.03994751]
[-92.96443176 -80.86762238]
[-79.20219421 -86.78530121]
[-64.46102905 -89.49326324]
[-49.47967529 -88.85251617]
[-35.00962067 -84.89199066]
[-21.77742195 -77.80722046]
[-10.44822693 -67.95068359]
[-1.59233248 -55.81428146]
[4.34351730 -42.00479126]
[7.05866957 -27.21352959]
[6.41379023 -12.18172836]
[2.43800879 2.33658814]
[-4.67238140 15.61244202]
[6.62662363 25.47816467]
[17.92562866 35.34388733]
[26.84516144 35.80273819]
[34.82640457 40.35665512]
[40.04510498 48.23108673]
[41.19097519 57.86772537]
[54.12903214 65.45763397]
[67.06708527 73.04754639]
[80.00514221 80.63745117]
[92.94319916 88.22735596]
[81.22551727 78.86274719]
[75.28383636 65.08971405]
[76.51238251 50.14011002]
[84.62287140 37.52186966]
[97.71217346 30.19587517]
[112.70886993 29.88117218]
[126.09397888 36.65161133]
[134.72668457 48.91849899]
[136.58128357 63.80340576]
[131.22434998 77.81112671]
[146.15866089 79.21342468]
[161.09295654 80.61573029]
[176.02726746 82.01803589]
[181.60649109 67.98062134]
[190.91560364 56.08452606]
[203.19995117 47.29410553]
[217.46369934 42.32196045]
[232.55055237 41.57116318]
[247.23747253 45.10257721]
[260.33386230 52.62992096]
[270.77807617 63.54299545]
[277.72344971 76.95712280]
[280.60690308 91.78487396]
[279.19473267 106.82424164]
[273.60140991 120.85604095]
[264.28036499 132.74278259]
[251.98718262 141.52085876]
[237.71844482 146.47866821]
[222.63085938 147.21430969]
[207.94747925 143.66813660]
[194.85865784 136.12763977]
[184.42541504 125.20407867]
[177.49353027 111.78298187]
[174.62496948 96.95233917]
[159.69065857 95.55004120]
[144.75634766 94.14773560]
[129.82203674 92.74542999]
[124.38262939 97.90903473]
[136.81642151 106.29956055]
[149.25021362 114.69008636]
[162.92189026 120.86138153]
[168.25520325 134.88122559]
[162.14192200 148.57894897]
[148.14482117 153.97164917]
[134.42129517 147.91648865]
[128.96929932 133.94262695]
[121.23655701 121.08943176]
[113.50380707 108.23623657]
[108.06439209 113.39984131]
[108.68836975 128.38685608]
[109.31234741 143.37387085]
[109.93632507 158.36088562]
[110.56030273 173.34790039]
[111.18428040 188.33491516]
[111.80825806 203.32192993]
[112.43223572 218.30895996]
[119.13222504 233.88285828]
[106.02169800 244.63229370]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 148]
[2 147]
[3 146]
[4 145]
[5 144]
[6 143]
[7 142]
[8 141]
[9 92]
[10 91]
[11 90]
[12 89]
[13 88]
[14 25]
[15 24]
[16 23]
[17 22]
[26 84]
[27 83]
[28 82]
[41 69]
[42 68]
[45 65]
[46 64]
[47 63]
[48 59]
[49 58]
[50 57]
[102 129]
[103 128]
[104 127]
[105 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
