%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCCAUCCUAAAGUAAGGUCAGCUAAAUAAGCUAUCGGGCCCAUACCCCGAAAAUGUUGGxxxxxxxxxxCGAUCCGUCCCUAACAAACUAGGAGGCGUCCUUGCCCUAUUACUAUCCAUCCUCAUCCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[134.36924744 498.92181396]
[134.36924744 483.92181396]
[134.36924744 468.92181396]
[134.36924744 453.92181396]
[134.36924744 438.92181396]
[134.36924744 423.92181396]
[134.36924744 408.92181396]
[134.36924744 393.92181396]
[134.36924744 378.92181396]
[134.36924744 363.92181396]
[117.66914368 360.19622803]
[102.29583740 352.66668701]
[89.10276794 341.74719238]
[78.82324982 328.04016113]
[72.02973175 312.30297852]
[69.10190582 295.40628052]
[70.20550537 278.28576660]
[75.28290558 261.89035034]
[84.05614471 247.12956238]
[96.04209900 234.82318115]
[110.57914734 225.65560913]
[126.86363983 220.13781738]
[125.30605316 205.21890259]
[123.74847412 190.29998779]
[122.19089508 175.38107300]
[120.63331604 160.46215820]
[118.61097717 145.59912109]
[116.12586212 130.80641174]
[96.43317413 133.00810242]
[79.68428040 124.24141693]
[71.14179993 108.40454865]
[56.14910126 108.87258911]
[41.15640640 109.34063721]
[26.16370773 109.80867767]
[14.17529964 120.46971130]
[-1.60936213 117.60195160]
[-9.08163548 103.40531158]
[-2.50943136 88.77022552]
[13.06561756 84.92348480]
[25.69566536 94.81597900]
[40.68836212 94.34793854]
[55.68105698 93.87989807]
[70.67375183 93.41184998]
[71.30023193 91.06938934]
[72.11349487 88.78504181]
[60.03350830 79.89269257]
[47.95351791 71.00034332]
[35.87353134 62.10799408]
[23.79354286 53.21564484]
[8.64083767 57.07952118]
[-5.42796898 50.25290298]
[-11.77001667 35.95911407]
[-7.39078426 20.94724083]
[5.64198780 12.30543232]
[21.17462349 14.11408615]
[31.87308884 25.51921082]
[32.68589401 41.13565826]
[44.76588058 50.02800751]
[56.84587097 58.92035675]
[68.92585754 67.81270599]
[81.00584412 76.70505524]
[84.95917511 73.97682190]
[89.29662323 71.91316986]
[93.90741730 70.56681061]
[98.67380524 69.97212219]
[101.77212524 55.29559326]
[104.87044525 40.61906815]
[107.96876526 25.94254303]
[110.91425323 11.23458195]
[113.70657349 -3.50322366]
[100.33670807 -10.55575085]
[89.64077759 -21.23696899]
[82.56984711 -34.59711075]
[79.75267029 -49.44820023]
[81.43973541 -64.46969604]
[87.48104858 -78.32588196]
[97.33940125 -89.78469086]
[110.13819885 -97.82720947]
[124.73939514 -101.73828888]
[139.84465027 -101.17018127]
[154.11080933 -96.17338562]
[166.26934814 -87.19221497]
[175.23913574 -75.02528381]
[180.22257996 -60.75444412]
[180.77655029 -45.64866638]
[176.85180664 -31.05114174]
[168.79731750 -18.25987053]
[157.32928467 -8.41224575]
[143.46743774 -2.38390994]
[128.44438171 -0.71089917]
[125.65205383 14.02690697]
[127.50904083 21.23088264]
[122.64529419 29.04086494]
[119.54697418 43.71739197]
[116.44864655 58.39391708]
[113.35032654 73.07044220]
[123.59570312 78.93777466]
[131.22253418 88.71238708]
[134.75059509 101.21414185]
[145.86528015 89.95472717]
[160.23854065 93.86093140]
[174.65075684 89.70304871]
[189.06297302 85.54515839]
[203.47518921 81.38727570]
[214.45187378 69.20349121]
[230.43316650 72.88186646]
[234.97888184 88.63839722]
[223.41278076 100.26412201]
[207.63308716 95.79948425]
[193.22087097 99.95737457]
[178.80865479 104.11526489]
[164.39643860 108.27314758]
[154.31260681 119.23516083]
[138.90847778 115.62635803]
[130.91856384 128.32128906]
[133.40368652 143.11399841]
[136.81585693 147.23426819]
[138.12928772 151.79795837]
[137.53416443 155.91468811]
[135.55223083 158.90458679]
[137.10980225 173.82348633]
[138.66738892 188.74240112]
[140.22497559 203.66131592]
[141.78254700 218.58023071]
[154.77227783 219.75169373]
[167.34271240 223.21348572]
[179.09349060 228.85382080]
[189.65060425 236.49159241]
[198.67834473 245.88215637]
[205.88995361 256.72512817]
[211.05670166 268.67401123]
[214.01522827 281.34735107]
[214.67257690 294.34072876]
[213.00927734 307.23989868]
[209.07975769 319.63378906]
[203.01066589 331.12771606]
[194.99676514 341.35592651]
[185.29469299 349.99325562]
[174.21467590 356.76538086]
[162.11073303 361.45764160]
[149.36924744 363.92181396]
[149.36924744 378.92181396]
[149.36924744 393.92181396]
[149.36924744 408.92181396]
[149.36924744 423.92181396]
[149.36924744 438.92181396]
[149.36924744 453.92181396]
[149.36924744 468.92181396]
[149.36924744 483.92181396]
[149.36924744 498.92181396]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[22 124]
[23 123]
[24 122]
[25 121]
[26 120]
[27 116]
[28 115]
[31 43]
[32 42]
[33 41]
[34 40]
[45 61]
[46 60]
[47 59]
[48 58]
[49 57]
[65 96]
[66 95]
[67 94]
[68 93]
[69 91]
[70 90]
[99 114]
[101 112]
[102 111]
[103 110]
[104 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
