%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCAUUCUCAUCCAAACCCCCUGAAGCUUCACCGGCGCAGUCAUUCUCAUAAUCGCCCACGGGxxxxxxxxxxAAAACCCUCAUUCACACGAGAAAACACCCUCAUGUUCAUACACCUAUCCCCCAUUCUCCUCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[74.84032440 299.96124268]
[74.84032440 284.96124268]
[74.84032440 269.96124268]
[74.84032440 254.96125793]
[74.84032440 239.96125793]
[74.84032440 224.96125793]
[74.84032440 209.96125793]
[74.84032440 194.96125793]
[74.84032440 179.96125793]
[74.84032440 164.96125793]
[59.31780243 136.19554138]
[62.00527573 109.82004547]
[76.55264282 94.72576141]
[93.22576904 94.34678650]
[83.00197601 83.37071991]
[72.77817535 72.39466095]
[62.55437851 61.41859436]
[52.33058167 50.44253159]
[37.76792145 54.87990189]
[22.78382874 52.56387329]
[10.34213066 44.00675201]
[2.88020992 30.94992447]
[1.83159542 16.00971603]
[7.35084295 2.15318704]
[-2.87295437 -8.82287598]
[-15.09693527 -17.51622391]
[-28.82064819 -23.57094765]
[-42.54436111 -29.62567329]
[-55.87689209 -16.74785233]
[-76.61173248 -14.25095177]
[-96.73796082 -25.87462044]
[-111.60797882 -23.90416908]
[-126.47798920 -21.93371773]
[-139.14303589 -11.51601315]
[-154.40045166 -17.52797508]
[-156.55468750 -33.78501129]
[-143.38967896 -43.56327820]
[-128.44844055 -36.80373001]
[-113.57843018 -38.77418137]
[-98.70841980 -40.74463272]
[-96.82852173 -48.00521088]
[-93.06873322 -62.52637100]
[-91.18884277 -69.78694916]
[-103.23412323 -78.72624969]
[-115.27940369 -87.66555786]
[-127.32468414 -96.60485840]
[-128.08290100 -81.62403870]
[-140.14578247 -72.70849609]
[-154.68957520 -76.37979126]
[-161.07575989 -89.95243073]
[-154.63298035 -103.49829865]
[-140.07447815 -107.10894775]
[-151.15357971 -117.22099304]
[-162.23269653 -127.33303070]
[-178.26011658 -128.04098511]
[-187.58267212 -141.09738159]
[-183.04888916 -156.48648071]
[-168.13668823 -162.40307617]
[-154.28546143 -154.30847168]
[-152.12065125 -138.41213989]
[-141.04154968 -128.30009460]
[-129.96243286 -118.18805695]
[-118.38538361 -108.65014648]
[-106.34010315 -99.71083832]
[-94.29481506 -90.77153778]
[-82.24953461 -81.83222961]
[-61.59991837 -83.45875549]
[-44.64126968 -74.57177734]
[-35.83207321 -59.35641861]
[-36.48963547 -43.34938812]
[-22.76592445 -37.29466248]
[-9.04221058 -31.23993683]
[-17.69810295 -43.49046707]
[-22.62560081 -57.65802765]
[-23.43978882 -72.63591766]
[-20.07707024 -87.25412750]
[-12.80012226 -100.37075806]
[-2.17738533 -110.96120453]
[10.96134186 -118.19818115]
[25.58972359 -121.51637268]
[40.56506348 -120.65658569]
[54.71755600 -115.68597412]
[66.94167328 -106.99282837]
[76.28253174 -95.25620270]
[82.01046753 -81.39291382]
[83.67803192 -66.48589325]
[81.15497589 -51.69960785]
[74.63838196 -38.18909454]
[64.63729095 -27.00972939]
[51.93294907 -19.03478813]
[37.51775360 -14.88723755]
[22.51775360 -14.89106560]
[8.10310936 -19.04667282]
[18.32690620 -8.07061005]
[32.53978729 -12.59383011]
[47.36809540 -10.48889446]
[59.86318207 -2.12027836]
[67.51691437 10.89665413]
[68.76505280 26.00721741]
[63.30664444 40.21873474]
[73.53044128 51.19479752]
[83.75424194 62.17086029]
[93.97803497 73.14692688]
[104.20183563 84.12298584]
[118.46768188 88.75823975]
[133.19047546 85.88781738]
[147.91326904 83.01739502]
[162.63606262 80.14696503]
[171.25735474 66.90126038]
[186.73674011 63.71308899]
[199.89056396 72.47394562]
[202.91488647 87.98616028]
[194.01545715 101.04662323]
[178.47212219 103.90678406]
[165.50648499 94.86976624]
[150.78369141 97.74018860]
[136.06089783 100.61061096]
[121.33810425 103.48103333]
[120.80651093 110.96217346]
[119.21171570 133.40557861]
[133.38069153 138.32901001]
[147.54966736 143.25244141]
[163.54574585 139.63891602]
[174.47291565 151.86711121]
[169.09024048 167.35771179]
[152.93496704 170.17532349]
[142.62623596 157.42141724]
[128.45726013 152.49798584]
[114.28829193 147.57455444]
[108.17630005 151.92123413]
[118.25032806 163.03491211]
[128.32435608 174.14859009]
[138.39837646 185.26228333]
[148.47241211 196.37596130]
[160.93186951 204.72833252]
[164.01637268 219.40776062]
[155.97225952 232.06842041]
[141.37294006 235.51222229]
[128.51869202 227.78120422]
[124.71784973 213.26953125]
[117.52646637 200.10578918]
[110.33508301 186.94206238]
[103.14369965 173.77832031]
[95.95231628 160.61457825]
[89.84032440 164.96125793]
[89.84032440 179.96125793]
[89.84032440 194.96125793]
[89.84032440 209.96125793]
[89.84032440 224.96125793]
[89.84032440 239.96125793]
[89.84032440 254.96125793]
[89.84032440 269.96124268]
[89.84032440 284.96124268]
[89.84032440 299.96124268]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[14 104]
[15 103]
[16 102]
[17 101]
[18 100]
[24 94]
[25 93]
[26 72]
[27 71]
[28 70]
[31 40]
[32 39]
[33 38]
[43 66]
[44 65]
[45 64]
[46 63]
[52 62]
[53 61]
[54 60]
[105 118]
[106 117]
[107 116]
[108 115]
[120 129]
[121 128]
[122 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
