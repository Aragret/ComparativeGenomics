%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAAAACCAUUUCAUAACUUUGUCAAAGUUAAAUUAUAGGCUAAAUCCUAUAUAUCUUAAUxxxxxxxxxxCUUACCACCCUCGUUAACCCUAACAAAAAAAACUCAUACCCCCAUUAUGUAAAAUCCAUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[127.01750183 271.26367188]
[126.70544434 256.26690674]
[126.39338684 241.27015686]
[126.08132935 226.27340698]
[125.76927185 211.27664185]
[125.45722198 196.27989197]
[125.14516449 181.28314209]
[124.83310699 166.28639221]
[124.52104950 151.28962708]
[110.29427338 146.53581238]
[101.02931976 158.33245850]
[91.76437378 170.12910461]
[82.49942017 181.92573547]
[82.97878265 197.96162415]
[70.64762878 208.22428894]
[54.96535873 204.84107971]
[47.96207809 190.40730286]
[55.01009750 175.99533081]
[70.70278168 172.66079712]
[79.96773529 160.86415100]
[89.23268127 149.06750488]
[98.49763489 137.27087402]
[94.43685913 130.96530151]
[82.25454712 112.04861450]
[67.68184662 115.60337830]
[53.10914230 119.15813446]
[38.53643799 122.71289825]
[23.96373558 126.26766205]
[9.39103317 129.82241821]
[-5.18167019 133.37718201]
[-19.13671494 143.00491333]
[-32.25132370 132.26045227]
[-25.55724907 116.68400574]
[-8.73643208 118.80448151]
[5.83627081 115.24971771]
[20.40897369 111.69496155]
[34.98167801 108.14019775]
[49.55437851 104.58543396]
[64.12708282 101.03067017]
[78.69978333 97.47591400]
[80.17252350 90.12193298]
[84.59075165 68.05998993]
[72.51076508 59.16763687]
[60.33892441 50.40143204]
[48.07655716 41.76231384]
[35.81418991 33.12319946]
[23.55182076 24.48408127]
[11.28945255 15.84496593]
[-0.97291595 7.20585012]
[-16.50020027 10.15186024]
[-29.51558113 1.18662667]
[-32.29726410 -14.37093735]
[-23.19492340 -27.29080391]
[-7.60881996 -29.90784645]
[5.21408939 -20.66942024]
[7.66620016 -5.05651808]
[19.92856789 3.58259797]
[32.19093704 12.22171402]
[44.45330429 20.86083031]
[56.71567154 29.49994659]
[68.97804260 38.13906097]
[76.30487823 39.42867661]
[81.40311432 47.08765030]
[93.48310089 55.97999954]
[108.47985077 55.66794205]
[114.40155792 40.99674606]
[129.17059326 39.06678391]
[140.87022400 29.67962074]
[152.56983948 20.29245758]
[164.26947021 10.90529633]
[156.26753235 -1.80166769]
[149.76628113 -15.33797073]
[144.85046387 -29.52713776]
[141.58416748 -44.18418503]
[140.00996399 -59.11803055]
[140.14839172 -74.13397217]
[141.99765015 -89.03625488]
[145.53359985 -103.63059998]
[150.71017456 -117.72672272]
[157.45986938 -131.14086914]
[165.69470215 -143.69815063]
[175.30731201 -155.23486328]
[186.17236328 -165.60060120]
[198.14822388 -174.66020203]
[211.07875061 -182.29559326]
[224.79537964 -188.40721130]
[239.11927795 -192.91537476]
[253.86370850 -195.76132202]
[268.83645630 -196.90794373]
[283.84231567 -196.34030151]
[298.68563843 -194.06578064]
[313.17291260 -190.11404419]
[327.11529541 -184.53660583]
[340.33099365 -177.40617371]
[352.64773560 -168.81571960]
[363.90490723 -158.87722778]
[373.95581055 -147.72027588]
[382.66934204 -135.49032593]
[389.93194580 -122.34679413]
[395.64892578 -108.46105194]
[399.74575806 -94.01412201]
[402.16903687 -79.19435120]
[402.88714600 -64.19495392]
[401.89074707 -49.21146393]
[399.19281006 -34.43922806]
[394.82852173 -20.07083511]
[388.85476685 -6.29360390]
[381.34942627 6.71285057]
[372.41036987 18.77896309]
[362.15414429 29.74742508]
[350.71441650 39.47524261]
[338.24035645 47.83559036]
[324.89456177 54.71947861]
[310.85104370 60.03715897]
[296.29290771 63.71930313]
[281.40991211 65.71791077]
[266.39611816 66.00691986]
[251.44725037 64.58257294]
[236.75817871 61.46342850]
[222.52043152 56.69015503]
[208.91960144 50.32498169]
[196.13302612 42.45089340]
[184.32739258 33.17054367]
[173.65663147 22.60491943]
[161.95700073 31.99208260]
[150.25738525 41.37924576]
[138.55775452 50.76640701]
[133.47288513 64.76616669]
[117.86701202 67.36756897]
[131.25881958 60.61038208]
[146.10610962 58.47543716]
[160.85925293 61.18555832]
[173.97843933 68.45789337]
[184.09442139 79.53340912]
[190.15135193 93.25614929]
[191.51707458 108.19384766]
[188.04905701 122.78743744]
[180.10923767 135.51376343]
[168.52633667 145.04457092]
[154.50924683 150.38510132]
[139.51780701 150.97758484]
[139.82986450 165.97433472]
[140.14192200 180.97108459]
[140.45397949 195.96783447]
[140.76602173 210.96459961]
[141.07807922 225.96134949]
[141.39013672 240.95809937]
[141.70219421 255.95484924]
[142.01425171 270.95159912]
[144.60525513 290.15933228]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 22]
[11 21]
[12 20]
[13 19]
[24 40]
[25 39]
[26 38]
[27 37]
[28 36]
[29 35]
[30 34]
[42 64]
[43 63]
[44 61]
[45 60]
[46 59]
[47 58]
[48 57]
[49 56]
[65 129]
[67 127]
[68 126]
[69 125]
[70 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
