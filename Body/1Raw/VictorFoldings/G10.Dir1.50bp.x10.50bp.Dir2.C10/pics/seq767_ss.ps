%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCAACCAAACCCCAAAGACACCCCCCACAGUUUAUGUAGCUUACCUCCUCAAAGCAAUACACUxxxxxxxxxxUGCCAUCAUGACCCUUGGCCAUAAUAUGAUUUAUCUCCACACUAGCAGAGACCAACCGAACCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-5.55241108 224.10960388]
[-15.78599834 235.07655334]
[-26.01958656 246.04348755]
[-36.25317383 257.01040649]
[-46.48676300 267.97735596]
[-56.72034836 278.94430542]
[-66.17166901 290.59216309]
[-74.79553223 302.86523438]
[-83.41939545 315.13833618]
[-92.04326630 327.41143799]
[-85.50255585 341.30801392]
[-86.80241394 356.61181641]
[-95.59318542 369.20617676]
[-109.51019287 375.70327759]
[-124.80982971 374.35546875]
[-137.37657166 365.52526855]
[-143.83003235 351.58795166]
[-142.43426514 336.29260254]
[-133.56471252 323.75360107]
[-119.60725403 317.34387207]
[-104.31636047 318.78756714]
[-95.69249725 306.51446533]
[-87.06863403 294.24139404]
[-78.44476318 281.96829224]
[-93.27140808 284.24221802]
[-106.17646027 276.59631348]
[-111.30417633 262.50000000]
[-106.32782745 248.34951782]
[-93.50545502 240.56576538]
[-78.65529633 242.68064880]
[-68.51570129 253.73454285]
[-67.68728638 268.71069336]
[-57.45369720 257.74377441]
[-47.22010803 246.77682495]
[-36.98652267 235.80989075]
[-26.75293541 224.84295654]
[-16.51934814 213.87602234]
[-33.67824173 193.13771057]
[-47.18852615 169.85731506]
[-56.68145370 144.67022705]
[-61.89791870 118.26390839]
[-62.69554901 91.35910034]
[-59.05257034 64.69013214]
[-51.06841660 38.98491669]
[-38.96100616 14.94504070]
[-23.06079483 -6.77334690]
[-33.92609787 -17.11477852]
[-44.79140091 -27.45620918]
[-55.65670395 -37.79764175]
[-66.72420502 -47.92238617]
[-77.98957825 -57.82649231]
[-89.25495148 -67.73059845]
[-100.52032471 -77.63470459]
[-115.32502747 -73.29600525]
[-130.11875916 -77.67200470]
[-140.18086243 -89.36633301]
[-142.30059814 -104.64737701]
[-135.80154419 -118.63900757]
[-122.75751495 -126.87654877]
[-107.33084106 -126.73143005]
[-94.44409180 -118.24996185]
[-88.20939636 -104.13854218]
[-90.61621857 -88.90007782]
[-79.35084534 -78.99597168]
[-68.08547211 -69.09186554]
[-56.82009506 -59.18775940]
[-52.03141022 -58.60218430]
[-47.57557678 -54.96762848]
[-45.31527328 -48.66294479]
[-34.44997025 -38.32151031]
[-23.58466721 -27.98008156]
[-12.71936417 -17.63864899]
[-1.22786117 -27.66137695]
[11.15032101 -36.56588745]
[24.30675888 -44.27418518]
[38.12621307 -50.71875000]
[52.48763275 -55.84313202]
[67.26522827 -59.60244751]
[82.32955170 -61.96376801]
[97.54865265 -62.90640640]
[112.78923035 -62.42211151]
[127.91777802 -60.51512146]
[142.80178833 -57.20214081]
[157.31089783 -52.51218796]
[171.31799316 -46.48634720]
[184.70040894 -39.17739487]
[193.08010864 -51.61848068]
[201.45980835 -64.05956268]
[209.83950806 -76.50064850]
[203.02552795 -90.26528168]
[204.02276611 -105.59176636]
[212.56300354 -118.35735321]
[226.34892273 -125.12815857]
[241.67219543 -124.08287811]
[254.41094971 -115.50268555]
[261.13851929 -101.69560242]
[260.04519653 -86.37567139]
[251.42512512 -73.66387939]
[237.59703064 -66.97962952]
[222.28059387 -68.12094879]
[213.90089417 -55.67986298]
[205.52119446 -43.23878098]
[197.14149475 -30.79769325]
[204.34422302 -25.12709618]
[211.21661377 -19.06036758]
[217.73692322 -12.61671638]
[223.88449097 -5.81654167]
[229.63986206 1.31862855]
[234.98481750 8.76620579]
[239.90243530 16.50261116]
[244.37715149 24.50335503]
[248.39480591 32.74310684]
[251.94265747 41.19578171]
[255.00949097 49.83462143]
[257.58560181 58.63227081]
[259.66281128 67.56089020]
[261.23455811 76.59220123]
[262.29586792 85.69761658]
[262.84338379 94.84830475]
[262.87536621 104.01531219]
[262.39172363 113.16960144]
[261.39395142 122.28220367]
[259.88525391 131.32426453]
[257.87039185 140.26715088]
[255.35574341 149.08256531]
[252.34927368 157.74259949]
[248.86047363 166.21981812]
[244.90042114 174.48739624]
[240.48164368 182.51918030]
[235.61813354 190.28970337]
[230.32527161 197.77439880]
[224.61981201 204.94955444]
[218.51985168 211.79244995]
[212.04466248 218.28144836]
[205.21476746 224.39598083]
[198.05178833 230.11669922]
[190.57838440 235.42549133]
[182.81823730 240.30555725]
[174.79588318 244.74142456]
[166.53675842 248.71908569]
[158.06698608 252.22592163]
[149.41337585 255.25083923]
[140.60334778 257.78427124]
[131.66476440 259.81817627]
[122.62594604 261.34613037]
[113.51548767 262.36328125]
[104.36225128 262.86645508]
[95.19519806 262.85397339]
[86.04335785 262.32595825]
[76.93569946 261.28405762]
[67.90106201 259.73153687]
[58.96804428 257.67333984]
[50.16492462 255.11599731]
[41.51957321 252.06756592]
[33.05936050 248.53773499]
[24.81106949 244.53764343]
[16.80081177 240.07998657]
[9.05394840 235.17884827]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 37]
[2 36]
[3 35]
[4 34]
[5 33]
[6 32]
[7 24]
[8 23]
[9 22]
[10 21]
[46 72]
[47 71]
[48 70]
[49 69]
[50 66]
[51 65]
[52 64]
[53 63]
[86 103]
[87 102]
[88 101]
[89 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
