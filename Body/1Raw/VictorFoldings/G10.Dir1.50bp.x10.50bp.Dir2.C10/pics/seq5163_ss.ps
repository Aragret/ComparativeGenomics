%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCCUCACUCUCUCAAUCUUAUCCAUCAUAGCAGGCAGUUGAGGUGGAUUAAACCAAACCCAGCxxxxxxxxxxUCAUCGCACUAAUUUACACUCACAACACCCUAGGCUCACUAAACAUUCUACUACUCACUCUCACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[90.35413361 574.34606934]
[90.35413361 559.34606934]
[90.35413361 544.34606934]
[90.35413361 529.34606934]
[90.35413361 514.34606934]
[90.35413361 499.34606934]
[90.35413361 484.34606934]
[90.35413361 469.34606934]
[90.35413361 454.34606934]
[90.35413361 439.34606934]
[75.62432861 436.61242676]
[61.64395142 431.21716309]
[48.88967133 423.34265137]
[37.79662704 413.25588989]
[28.74359894 401.29925537]
[22.04007149 387.87908936]
[17.91565895 373.45178223]
[16.51223564 358.50830078]
[17.87905884 343.55740356]
[21.97103500 329.10842896]
[28.65021515 315.65386963]
[37.69044113 303.65258789]
[48.78499985 293.51419067]
[61.55703735 285.58502197]
[75.57234192 280.13641357]
[90.35413361 277.35528564]
[76.15307617 274.30133057]
[62.89707565 268.34716797]
[51.17150116 259.75292969]
[41.49469376 248.89538574]
[34.29509354 236.25141907]
[29.89226151 222.37713623]
[28.48268318 207.88331604]
[30.13102150 193.40858459]
[34.76713943 179.59124756]
[42.18909073 167.04119873]
[52.07191086 156.31288147]
[63.98184204 147.88093567]
[77.39537048 142.11911011]
[91.72225189 139.28367615]
[92.01860809 124.28660583]
[92.31496429 109.28953552]
[92.31496429 94.28953552]
[92.01860809 79.29246521]
[91.72225189 64.29539490]
[80.60986328 53.37968445]
[80.52295685 38.16629791]
[90.99789429 27.63960838]
[90.70153809 12.64253616]
[90.40518188 -2.35453582]
[90.10882568 -17.35160828]
[80.21926117 -32.85553741]
[89.22148132 -47.89320374]
[88.62888336 -62.88149261]
[88.03628540 -77.86978149]
[87.44368744 -92.85807037]
[84.59394073 -97.35824585]
[83.86563873 -102.03182983]
[84.96169281 -106.02896881]
[87.28672028 -108.74629974]
[87.58307648 -123.74337006]
[87.87943268 -138.74044800]
[88.17578888 -153.73751831]
[73.43149567 -156.71166992]
[59.45528793 -162.27093506]
[46.69643784 -170.23658752]
[35.56509399 -180.35255432]
[26.41907692 -192.29367065]
[19.55240059 -205.67607117]
[15.18579483 -220.06954956]
[13.45963001 -235.01144409]
[14.42939568 -250.02142334]
[18.06391716 -264.61697388]
[24.24635887 -278.32891846]
[32.77798080 -290.71643066]
[43.38452911 -301.38137817]
[55.72504807 -309.98089600]
[69.40283203 -316.23852539]
[83.97821045 -319.95309448]
[98.98263550 -321.00527954]
[113.93377686 -319.36114502]
[128.35102844 -315.07363892]
[141.77091980 -308.28051758]
[153.76205444 -299.20022583]
[163.93899536 -288.12457275]
[171.97456360 -275.40963745]
[177.61047363 -261.46417236]
[180.66552734 -246.73641968]
[181.04154968 -231.69985962]
[178.72642517 -216.83782959]
[173.79458618 -202.62808228]
[166.40458679 -189.52742004]
[156.79396057 -177.95695496]
[145.27165222 -168.28863525]
[132.20806885 -160.83326721]
[118.02313995 -155.83050537]
[103.17285919 -153.44116211]
[102.87650299 -138.44409180]
[102.58014679 -123.44701385]
[102.28379059 -108.44994354]
[102.43197632 -93.45067596]
[103.02457428 -78.46237946]
[103.61717224 -63.47409439]
[104.20977020 -48.48580170]
[112.89613342 -40.01935196]
[113.48234558 -27.50168228]
[105.10589600 -17.64796448]
[105.40225220 -2.65089321]
[105.69860840 12.34617901]
[105.99496460 27.34325027]
[116.87760162 37.44789505]
[117.39179230 52.65283585]
[106.71932220 63.99903488]
[107.01567841 78.99610901]
[107.31203461 93.99317932]
[110.20821381 98.43536377]
[110.37876129 104.18801117]
[107.31203461 109.58589172]
[107.01567841 124.58296204]
[106.71932220 139.58003235]
[121.78234863 143.29013062]
[135.64234924 150.24313354]
[147.61137390 160.09048462]
[157.09611511 172.34007263]
[163.62730408 186.38075256]
[166.88288879 201.51293945]
[166.70396423 216.98338318]
[163.10253906 232.02270508]
[156.26069641 245.88363647]
[146.52148438 257.87820435]
[134.37168884 267.41177368]
[120.41746521 274.01263428]
[105.35413361 277.35528564]
[120.13593292 280.13641357]
[134.15124512 285.58502197]
[146.92327881 293.51419067]
[158.01783752 303.65258789]
[167.05805969 315.65386963]
[173.73724365 329.10842896]
[177.82922363 343.55740356]
[179.19604492 358.50830078]
[177.79261780 373.45178223]
[173.66819763 387.87908936]
[166.96467590 401.29925537]
[157.91165161 413.25588989]
[146.81860352 423.34265137]
[134.06431580 431.21716309]
[120.08394623 436.61242676]
[105.35413361 439.34606934]
[105.35413361 454.34606934]
[105.35413361 469.34606934]
[105.35413361 484.34606934]
[105.35413361 499.34606934]
[105.35413361 514.34606934]
[105.35413361 529.34606934]
[105.35413361 544.34606934]
[105.35413361 559.34606934]
[105.35413361 574.34606934]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 158]
[2 157]
[3 156]
[4 155]
[5 154]
[6 153]
[7 152]
[8 151]
[9 150]
[10 149]
[26 133]
[40 120]
[41 119]
[42 118]
[43 115]
[44 114]
[45 113]
[48 110]
[49 109]
[50 108]
[51 107]
[53 104]
[54 103]
[55 102]
[56 101]
[60 100]
[61 99]
[62 98]
[63 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
