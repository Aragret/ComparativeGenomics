%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAGCCCCCAUUCGUAUAAUAAUUACAUCACAAGACGUCUUGCACUCAUGAGCUGUCCCCAxxxxxxxxxxAGGCUUACGACCCCUUAUUUACCGAGAAAGCUCACAAGAACUGCUAACUCAUGCCCCCAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[122.51333618 314.91326904]
[122.20127869 299.91650391]
[121.88922119 284.91976929]
[121.57717133 269.92300415]
[121.26511383 254.92625427]
[120.95305634 239.92948914]
[120.64099884 224.93273926]
[120.32894135 209.93598938]
[120.01688385 194.93923950]
[118.14927673 180.05595398]
[114.74629211 165.44706726]
[110.88913727 150.95146179]
[106.58155060 136.58328247]
[102.27396393 122.21509552]
[104.85771942 136.99089050]
[97.85615540 150.25656128]
[84.19931030 156.46064758]
[69.60235596 153.00682068]
[60.17387772 141.34046936]
[59.85954285 126.34375763]
[68.79089355 114.29257965]
[83.23157501 110.23022461]
[68.41381073 112.56132507]
[53.59605789 114.89242554]
[41.16597748 124.68036652]
[27.39090538 119.01497650]
[24.20280457 133.85412598]
[15.86619854 146.53739929]
[3.50854659 155.34948730]
[-11.19888020 159.09863281]
[-26.26702309 157.27777100]
[-39.65803909 150.13319397]
[-49.56090546 138.63111877]
[-54.63633728 124.32711792]
[-54.19792938 109.15569305]
[-48.30496597 95.16864777]
[-37.75442886 84.25761414]
[-23.97318459 77.89823151]
[-8.82503986 76.95053864]
[5.64134741 81.54271698]
[17.46951485 91.05370331]
[25.05980301 104.19721985]
[36.43001556 94.57601929]
[51.26495361 100.07466888]
[66.08271027 97.74356842]
[80.90046692 95.41246033]
[92.30149078 85.66481018]
[96.90705109 71.38935089]
[101.51261902 57.11389160]
[106.11817932 42.83842850]
[110.72374725 28.56296921]
[96.75212097 34.02133179]
[82.93692780 28.17835999]
[77.12178802 14.35142422]
[82.60827637 0.39082128]
[96.28141785 -5.77725887]
[110.37823486 -0.65086454]
[116.89528656 12.86101341]
[123.24241638 -0.72993708]
[129.58955383 -14.32088757]
[135.93667603 -27.91183853]
[142.28381348 -41.50278854]
[148.63093567 -55.09374237]
[147.45988464 -70.87155151]
[159.85580444 -79.12928772]
[166.20294189 -92.72023773]
[153.71401978 -101.08249664]
[142.64804077 -111.25325775]
[133.26438904 -122.99411011]
[125.78305054 -136.02983093]
[120.37937927 -150.05484009]
[117.18005371 -164.74037170]
[116.26007080 -179.74217224]
[117.64099884 -194.70857239]
[121.29046631 -209.28877258]
[127.12291718 -223.14094543]
[135.00163269 -235.94041443]
[144.74194336 -247.38711548]
[156.11549377 -257.21273804]
[168.85568237 -265.18695068]
[182.66386414 -271.12280273]
[197.21635437 -274.88119507]
[212.17201233 -276.37399292]
[227.18028259 -275.56619263]
[241.88932800 -272.47677612]
[255.95434570 -267.17813110]
[269.04562378 -259.79446411]
[280.85632324 -250.49888611]
[291.10955811 -239.50926208]
[299.56497192 -227.08322144]
[306.02435303 -213.51203918]
[310.33630371 -199.11386108]
[312.39971924 -184.22619629]
[312.16629028 -169.19802856]
[309.64141846 -154.38163757]
[304.88430786 -140.12434387]
[298.00650024 -126.76035309]
[289.16921997 -114.60294342]
[278.57958984 -103.93710327]
[266.48587036 -95.01284790]
[253.17153931 -88.03938293]
[238.94871521 -83.18016815]
[224.15081787 -80.54911804]
[209.12471008 -80.20790100]
[194.22262573 -82.16452026]
[179.79388428 -86.37310791]
[173.44676208 -72.78215790]
[175.07180786 -57.97646713]
[162.22189331 -48.74661255]
[155.87475586 -35.15565872]
[149.52763367 -21.56470871]
[143.18049622 -7.97375870]
[136.83337402 5.61719227]
[130.48623657 19.20814323]
[124.99920654 33.16853333]
[120.39364624 47.44399261]
[115.78807831 61.71945572]
[111.18251801 75.99491882]
[106.57695007 90.27037811]
[112.89700317 92.49905396]
[118.04146576 98.60466766]
[119.81295013 107.73969269]
[116.64215088 117.90750885]
[120.94973755 132.27569580]
[125.25731659 146.64387512]
[129.15594482 150.30725098]
[131.02737427 154.67189026]
[130.94943237 158.83068848]
[129.35519409 162.04408264]
[132.75816345 176.65296936]
[139.21023560 163.11152649]
[151.49009705 154.49728394]
[166.41914368 153.04003906]
[180.13302612 159.11695862]
[189.08197021 171.15509033]
[190.94956970 186.03837585]
[185.25236511 199.91432190]
[173.46510315 209.19119263]
[158.63885498 211.46769714]
[144.61135864 206.15455627]
[135.01364136 194.62718201]
[135.32569885 209.62393188]
[135.63775635 224.62068176]
[135.94981384 239.61743164]
[136.26187134 254.61419678]
[136.57392883 269.61093140]
[136.88597107 284.60769653]
[137.19802856 299.60446167]
[137.51008606 314.60119629]
[140.10108948 333.80892944]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 130]
[11 129]
[12 125]
[13 124]
[14 123]
[22 46]
[23 45]
[24 44]
[26 42]
[47 119]
[48 118]
[49 117]
[50 116]
[51 115]
[58 114]
[59 113]
[60 112]
[61 111]
[62 110]
[63 109]
[65 107]
[66 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
