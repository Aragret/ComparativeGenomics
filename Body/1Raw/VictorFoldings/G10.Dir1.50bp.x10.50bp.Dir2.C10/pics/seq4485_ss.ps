%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAAAUAAUAGGAGCUUAAACCCCCUUAUUUCUAGGACUAUGAGAAUCGAACCCAUCCCUGAxxxxxxxxxxGACUUUUUCAAAAAGGUAUUAGAAAAACCAUUUCAUAACUUUGUCAAAGUUAAAUUAUAGGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[118.78800964 262.69912720]
[118.78800964 247.69912720]
[118.78800964 232.69912720]
[118.78800964 217.69912720]
[118.78800964 202.69912720]
[118.78800964 187.69912720]
[118.78800964 172.69912720]
[118.78800964 157.69912720]
[118.78800964 142.69912720]
[118.78800964 127.69911957]
[105.87473297 120.06581879]
[92.96261597 112.43318176]
[79.82098389 119.66487885]
[66.67935181 126.89658356]
[53.53771973 134.12828064]
[40.39609146 141.35998535]
[27.25445747 148.59169006]
[22.75304031 163.50393677]
[9.32253933 170.65069580]
[-4.86626434 166.26739502]
[-18.00789642 173.49909973]
[-18.95558548 188.89732361]
[-28.09616089 201.32525635]
[-42.51289749 206.81716919]
[-57.60546875 203.62063599]
[-68.55789185 192.75564575]
[-71.87528229 177.68917847]
[-66.49907684 163.22888184]
[-54.14480209 153.98899841]
[-38.75466537 152.91793823]
[-25.23959923 160.35746765]
[-12.09796715 153.12576294]
[-8.20794868 138.79385376]
[5.01651621 131.27267456]
[20.02275467 135.45005798]
[33.16438675 128.21835327]
[46.30601883 120.98665619]
[59.44765091 113.75495148]
[72.58927917 106.52325439]
[85.73091125 99.29154968]
[95.60662079 88.00126648]
[101.02524567 74.01418304]
[94.88812256 59.69728851]
[100.58263397 45.58958817]
[114.26942444 39.82701111]
[119.68804932 25.83992767]
[125.10667419 11.85284519]
[108.10332489 4.21889210]
[103.15918732 -12.37148952]
[111.79255676 -25.82473946]
[108.13385010 -40.37169266]
[104.47514343 -54.91864777]
[100.81643677 -69.46559906]
[97.15773010 -84.01255798]
[93.49902344 -98.55950928]
[78.46864319 -97.80204010]
[63.57933044 -99.99170685]
[49.40340042 -105.04434967]
[36.48572922 -112.76575470]
[25.32284737 -122.85913086]
[16.34382057 -134.93652344]
[9.89378071 -148.53369141]
[6.22064877 -163.12802124]
[5.46561098 -178.15852356]
[7.65768862 -193.04748535]
[12.71262455 -207.22259521]
[20.43611908 -220.13902283]
[30.53130341 -231.30026245]
[42.61014557 -240.27734375]
[56.20836639 -246.72517395]
[70.80328369 -250.39595032]
[85.83391571 -251.14854431]
[100.72251892 -248.95405579]
[114.89681244 -243.89683533]
[127.81198120 -236.17124939]
[138.97158813 -226.07424927]
[147.94671631 -213.99395752]
[154.39234924 -200.39469910]
[158.06076050 -185.79917908]
[158.81092834 -170.76843262]
[156.61402893 -155.88018799]
[151.55450439 -141.70671082]
[143.82682800 -128.79280090]
[133.72802734 -117.63481140]
[121.64628601 -108.66165161]
[108.04598236 -102.21821594]
[111.70468903 -87.67126465]
[115.36339569 -73.12430573]
[119.02209473 -58.57735443]
[122.68080139 -44.03039932]
[126.33950806 -29.48344421]
[140.24383545 -23.28857231]
[146.07394409 -7.26134920]
[160.50132751 -11.36629391]
[174.92871094 -15.47123909]
[189.35609436 -19.57618332]
[200.51205444 -30.79471397]
[214.87088013 -26.83576393]
[229.29826355 -30.94070816]
[243.72564697 -35.04565430]
[248.66789246 -39.58622742]
[254.31423950 -40.72935486]
[258.83004761 -39.00987625]
[273.41378784 -42.51904297]
[287.99755859 -46.02820969]
[302.58129883 -49.53737640]
[312.14941406 -62.41490555]
[328.18737793 -62.81923676]
[338.39221191 -50.44020081]
[334.93566895 -34.77393341]
[320.46929932 -27.83825874]
[306.09045410 -34.95362854]
[291.50671387 -31.44446182]
[276.92297363 -27.93529510]
[262.33920288 -24.42612648]
[247.83059692 -20.61826897]
[233.40321350 -16.51332283]
[218.97583008 -12.40837860]
[208.85182190 -1.48346174]
[193.46104431 -5.14879894]
[179.03366089 -1.04385424]
[164.60627747 3.06109071]
[150.17889404 7.16603565]
[139.09376526 17.27147102]
[133.67514038 31.25855446]
[128.25651550 45.24563599]
[134.48895264 58.72496414]
[129.19294739 72.98704529]
[115.01232910 79.43280792]
[109.59370422 93.41989136]
[121.05475616 83.74289703]
[131.80508423 73.28199768]
[145.78802490 67.85269165]
[160.78080750 68.31805420]
[174.40011597 74.60409546]
[184.48098755 85.71157837]
[189.42091370 99.87480927]
[188.43464661 114.84234619]
[181.67895508 128.23490906]
[170.22775269 137.92355347]
[155.90136719 142.36814880]
[140.97940063 140.86285400]
[133.78800964 127.69911957]
[133.78800964 142.69912720]
[133.78800964 157.69912720]
[133.78800964 172.69912720]
[133.78800964 187.69912720]
[133.78800964 202.69912720]
[133.78800964 217.69912720]
[133.78800964 232.69912720]
[133.78800964 247.69912720]
[133.78800964 262.69912720]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[12 40]
[13 39]
[14 38]
[15 37]
[16 36]
[17 35]
[20 32]
[21 31]
[41 130]
[42 129]
[45 126]
[46 125]
[47 124]
[50 91]
[51 90]
[52 89]
[53 88]
[54 87]
[55 86]
[93 123]
[94 122]
[95 121]
[96 120]
[98 118]
[99 117]
[100 116]
[103 115]
[104 114]
[105 113]
[106 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
