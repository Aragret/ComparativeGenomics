%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGGCCUACUUCACAAAGCGCCUUCCCCCGUAAAUGAUAUCAUCUCAACUUAGUAUUAUACCxxxxxxxxxxAUAACCCAAUACCAAACGCCCCUCUUCGUCUGAUCCGUCCUAAUCACAGCAGUCCUACUUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[6.19878483 249.62463379]
[-4.05368328 242.68507385]
[-13.79475880 235.04426575]
[-22.97656822 226.73974609]
[-31.55398750 217.81234741]
[-43.14303589 227.33569336]
[-54.73208237 236.85902405]
[-66.32112885 246.38235474]
[-77.91017914 255.90570068]
[-89.49922943 265.42904663]
[-101.08827972 274.95236206]
[-112.67732239 284.47570801]
[-124.26637268 293.99905396]
[-135.85542297 303.52239990]
[-147.34608459 313.16421509]
[-158.73716736 322.92346191]
[-156.52534485 338.19146729]
[-162.93994141 352.22201538]
[-175.93406677 360.53805542]
[-191.36134338 360.48593140]
[-204.29898071 352.08230591]
[-210.61863708 338.00872803]
[-208.30372620 322.75604248]
[-198.09292603 311.19128418]
[-183.24446106 307.00479126]
[-168.49642944 311.53240967]
[-157.10536194 301.77313232]
[-154.05322266 294.99105835]
[-145.37875366 291.93334961]
[-133.78971863 282.41000366]
[-122.20066071 272.88665771]
[-110.61161804 263.36331177]
[-99.02256775 253.83998108]
[-87.43351746 244.31665039]
[-75.84446716 234.79331970]
[-64.25542450 225.26997375]
[-52.66637421 215.74664307]
[-41.07732391 206.22329712]
[-46.76577759 198.21409607]
[-52.00006485 189.90095520]
[-56.76398468 181.30961609]
[-61.04279709 172.46667480]
[-64.82326508 163.39947510]
[-68.09368134 154.13607788]
[-70.84393311 144.70516968]
[-73.06550598 135.13592529]
[-74.75151825 125.45793915]
[-75.89677429 115.70117950]
[-76.49770355 105.89582825]
[-76.55246735 96.07223511]
[-76.06088257 86.26079559]
[-75.02448273 76.49187469]
[-73.44646454 66.79570007]
[-71.33171082 57.20227432]
[-68.68677521 47.74128723]
[-65.51983643 38.44201279]
[-61.84069061 29.33323479]
[-57.66072845 20.44313240]
[-52.99288559 11.79922009]
[-47.85160446 3.42824602]
[-42.25279617 -4.64388609]
[-36.21378326 -12.39219666]
[-29.75325775 -19.79270935]
[-22.89120865 -26.82252121]
[-15.64887142 -33.45988083]
[-8.04865837 -39.68424606]
[-0.11408716 -45.47635651]
[8.13028812 -50.81829071]
[16.65895462 -55.69351578]
[25.44552040 -60.08694839]
[34.46279526 -63.98498535]
[43.68287659 -67.37557220]
[53.07723236 -70.24821472]
[62.61679077 -72.59402466]
[72.27203369 -74.40573883]
[82.01307678 -75.67774963]
[91.80978394 -76.40612793]
[101.63183594 -76.58861542]
[111.44883728 -76.22464752]
[121.23040771 -75.31534576]
[130.94628906 -73.86353302]
[140.56639099 -71.87370300]
[150.06097412 -69.35199738]
[159.40063477 -66.30624390]
[168.55648804 -62.74584198]
[177.50018311 -58.68182755]
[186.20405579 -54.12677002]
[194.64117432 -49.09476852]
[202.78541565 -43.60138702]
[210.61160278 -37.66363144]
[218.09548950 -31.29987717]
[225.21392822 -24.52981186]
[231.94488525 -17.37438774]
[238.26754761 -9.85574818]
[244.16233826 -1.99715889]
[249.61102295 6.17706156]
[254.59672546 14.64161777]
[268.02416992 7.95554256]
[281.45162964 1.26946723]
[283.88763428 -14.05520248]
[294.88980103 -24.99742508]
[310.22753906 -27.34969330]
[324.00320435 -20.20751381]
[330.91973877 -6.31719732]
[328.31762695 8.98014450]
[317.19744873 19.80237198]
[301.83508301 21.98811722]
[288.13769531 14.69691658]
[274.71023560 21.38299179]
[261.28280640 28.06906700]
[275.02560425 76.50026703]
[274.54440308 126.84124756]
[289.25991821 129.74871826]
[303.97543335 132.65618896]
[318.69097900 135.56365967]
[329.98001099 124.91767883]
[345.37484741 122.97382355]
[358.95584106 130.47955322]
[365.50085449 144.54876709]
[362.49316406 159.77156067]
[351.08929443 170.29444885]
[335.67425537 172.07118225]
[322.17547607 164.41857910]
[315.78350830 150.27919006]
[301.06796265 147.37171936]
[286.35244751 144.46424866]
[271.63693237 141.55677795]
[268.30361938 153.47984314]
[264.14312744 165.14007568]
[259.17596436 176.48016357]
[253.42646790 187.44438171]
[246.92294312 197.97883606]
[239.69732666 208.03175354]
[231.78514099 217.55372620]
[223.22528076 226.49795532]
[214.05979919 234.82049561]
[204.33374023 242.48042297]
[194.09492493 249.44010925]
[183.39366150 255.66534424]
[172.28254700 261.12551880]
[160.81617737 265.79382324]
[149.05091858 269.64730835]
[137.04458618 272.66702271]
[124.85620117 274.83813477]
[112.54564667 276.14996338]
[100.17343903 276.59606934]
[87.80036926 276.17425537]
[75.48726654 274.88659668]
[63.29463577 272.73944092]
[51.28239822 269.74331665]
[39.50959396 265.91296387]
[28.03408051 261.26718140]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 38]
[6 37]
[7 36]
[8 35]
[9 34]
[10 33]
[11 32]
[12 31]
[13 30]
[14 29]
[15 27]
[16 26]
[97 110]
[98 109]
[99 108]
[112 127]
[113 126]
[114 125]
[115 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
