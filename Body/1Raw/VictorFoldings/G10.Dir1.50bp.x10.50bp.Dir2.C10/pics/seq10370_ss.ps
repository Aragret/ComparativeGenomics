%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUGACUUCUAGCAAGCCUCGCUAACCUCGCCUUACCCCCCACUAUUAACCUACUGGGAGAACxxxxxxxxxxUAUCCAAACAACAAAGCAUAAUAUUUCGCCCACUAAGCCAAUCACUUUAUUGACUCCUAGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[0.33949965 169.06663513]
[-12.49415398 176.83177185]
[-25.32780838 184.59690857]
[-38.16146088 192.36204529]
[-50.99511719 200.12718201]
[-63.82876968 207.89231873]
[-72.29311371 224.21363831]
[-89.81395721 223.95953369]
[-102.48547363 231.98654175]
[-115.15699005 240.01353455]
[-127.82850647 248.04052734]
[-140.50001526 256.06753540]
[-153.17153931 264.09451294]
[-153.02819824 277.91235352]
[-159.69244385 289.89379883]
[-171.32206726 296.94766235]
[-184.81028748 297.31515503]
[-196.61543274 291.00717163]
[-209.44908142 298.77230835]
[-222.28273010 306.53744507]
[-235.11639404 314.30258179]
[-237.33610535 329.78182983]
[-249.02079773 340.17422485]
[-264.65328979 340.57281494]
[-276.85241699 330.78939819]
[-279.85812378 315.44338989]
[-272.25119019 301.78070068]
[-257.62338257 296.25247192]
[-242.88151550 301.46893311]
[-230.04786682 293.70379639]
[-217.21421814 285.93865967]
[-204.38055420 278.17352295]
[-203.53956604 261.80761719]
[-193.02127075 249.02569580]
[-176.80160522 244.96975708]
[-161.19853210 251.42300415]
[-148.52702332 243.39601135]
[-135.85549927 235.36901855]
[-123.18399048 227.34201050]
[-110.51247406 219.31501770]
[-97.84095764 211.28802490]
[-94.86745453 199.52279663]
[-84.32314301 192.74128723]
[-71.59390259 195.05865479]
[-58.76025009 187.29351807]
[-45.92659760 179.52838135]
[-33.09294510 171.76324463]
[-20.25928879 163.99812317]
[-7.42563581 156.23298645]
[-15.61055851 136.55973816]
[-20.22527695 115.75747681]
[-21.12728500 94.46860504]
[-18.28872299 73.35054779]
[-11.79725361 53.05546188]
[-1.85333884 34.21008682]
[11.23593903 17.39638710]
[27.06636620 3.13359547]
[45.14907837 -8.13783646]
[64.92565918 -16.06983185]
[85.78537750 -20.41744041]
[107.08406067 -21.04640198]
[128.16398621 -17.93729401]
[148.37416077 -11.18612957]
[155.19773865 -24.54422951]
[162.02131653 -37.90232849]
[168.84489441 -51.26042557]
[168.23228455 -67.06977081]
[180.91235352 -74.88417816]
[187.73593140 -88.24227905]
[194.55950928 -101.60037231]
[182.51542664 -110.60304260]
[172.16616821 -121.51178741]
[163.80949402 -134.01275635]
[157.68585205 -147.74626160]
[153.97143555 -162.31715393]
[152.77311707 -177.30621338]
[154.12536621 -192.28218079]
[157.98927307 -206.81414795]
[164.25366211 -220.48402405]
[172.73832703 -232.89848328]
[183.19909668 -243.70033264]
[195.33503723 -252.57879639]
[208.79695129 -259.27841187]
[223.19750977 -263.60641479]
[238.12240601 -265.43832397]
[253.14219666 -264.72134399]
[267.82473755 -261.47619629]
[281.74755859 -255.79618835]
[294.51013184 -247.84477234]
[305.74520874 -237.85072327]
[315.12954712 -226.10157776]
[322.39312744 -212.93539429]
[327.32696533 -198.73098755]
[329.78912354 -183.89704895]
[329.70874023 -168.86036682]
[327.08813477 -154.05360413]
[322.00271606 -139.90275574]
[314.59881592 -126.81497955]
[305.08941650 -115.16683197]
[293.74813843 -105.29345703]
[280.90127563 -97.47893524]
[266.91851807 -91.94810486]
[252.20213318 -88.86009216]
[237.17553711 -88.30374908]
[222.27108765 -90.29508209]
[207.91761780 -94.77680206]
[201.09403992 -81.41870117]
[194.27046204 -68.06060028]
[195.37113953 -53.20671844]
[182.20298767 -44.43685150]
[175.37940979 -31.07875252]
[168.55584717 -17.72065353]
[161.73226929 -4.36255360]
[170.57939148 1.40505040]
[178.89109802 7.92062569]
[186.60429382 15.13474369]
[193.66049194 22.99267387]
[200.00614929 31.43480682]
[205.59312439 40.39709473]
[210.37904358 49.81155014]
[214.32760620 59.60674667]
[217.40882874 69.70838165]
[219.59936523 80.03981781]
[220.88256836 90.52267456]
[221.24873352 101.07743073]
[220.69505310 111.62401581]
[219.22575378 122.08242035]
[216.85197449 132.37329102]
[213.59172058 142.41857910]
[209.46972656 152.14205933]
[204.51725769 161.46997070]
[198.77189636 170.33155823]
[192.27720642 178.65959167]
[185.08248901 186.39088440]
[177.24229431 193.46679688]
[168.81613159 199.83363342]
[159.86790466 205.44311523]
[150.46549988 210.25265503]
[140.68025208 214.22579956]
[130.58638000 217.33238220]
[120.26048279 219.54885864]
[109.78087616 220.85838318]
[99.22707367 221.25105286]
[88.67913055 220.72387695]
[78.21707153 219.28083801]
[67.92026520 216.93290710]
[57.86682892 213.69789124]
[48.13302612 209.60032654]
[38.79269791 204.67131042]
[29.91671181 198.94821167]
[21.57239532 192.47445679]
[13.82305622 185.29917908]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 49]
[2 48]
[3 47]
[4 46]
[5 45]
[6 44]
[8 41]
[9 40]
[10 39]
[11 38]
[12 37]
[13 36]
[18 32]
[19 31]
[20 30]
[21 29]
[63 113]
[64 112]
[65 111]
[66 110]
[68 108]
[69 107]
[70 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
