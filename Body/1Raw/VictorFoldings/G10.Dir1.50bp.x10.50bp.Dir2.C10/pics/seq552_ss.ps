%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACACAUUAUUUUCCCCUCCCACUCCCAUACUACUAAUCUCAUCAAUACAACCCCCGCCCAUxxxxxxxxxxACUAAUCGUCCCAACAAUUAUAUUACUACCACUGACAUGACUUUCCAAAAAACACAUAAUUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[113.54825592 95.35025024]
[111.05527496 109.10803986]
[98.02880096 114.18766022]
[88.49088287 125.76471710]
[78.95297241 137.34176636]
[69.41505432 148.91882324]
[59.87714005 160.49588013]
[50.33922577 172.07293701]
[40.80131149 183.64999390]
[31.26339531 195.22703552]
[21.72548103 206.80409241]
[12.18756580 218.38114929]
[16.99858856 233.03916931]
[13.09904003 247.96556091]
[1.73325300 258.39736938]
[-13.47199249 261.00582886]
[-27.66475677 254.95858765]
[-36.31618118 242.18531799]
[-36.66562653 226.76191711]
[-28.60158730 213.60992432]
[-14.69726944 206.92610168]
[0.61051166 208.84323120]
[10.14842606 197.26617432]
[19.68634033 185.68913269]
[29.22425652 174.11207581]
[38.76216888 162.53501892]
[48.30008698 150.95796204]
[57.83800125 139.38090515]
[67.37591553 127.80385590]
[76.91382599 116.22679901]
[86.45174408 104.64974976]
[88.94472504 90.89196014]
[101.97119904 85.81233978]
[90.88964844 75.69817352]
[80.33459473 65.03572083]
[70.33313751 53.85235214]
[60.91094208 42.17676544]
[52.09220505 30.03893661]
[43.89955139 17.47002602]
[36.35402298 4.50229597]
[29.47498703 -8.83096600]
[23.28009605 -22.49553299]
[17.78525925 -36.45632935]
[13.00457764 -50.67751312]
[8.95032501 -65.12258148]
[5.63290739 -79.75446320]
[3.06084180 -94.53558350]
[1.24073017 -109.42800140]
[0.17724463 -124.39349365]
[-0.12688467 -139.39364624]
[0.32912290 -154.38995361]
[1.54409683 -169.34390259]
[3.51491809 -184.21713257]
[6.23652792 -198.97145081]
[9.70193958 -213.56898499]
[13.90225792 -227.97225952]
[18.82670021 -242.14431763]
[24.46262550 -256.04873657]
[30.79556656 -269.64987183]
[37.80926514 -282.91281128]
[45.48572159 -295.80346680]
[53.80522537 -308.28875732]
[62.74642563 -320.33666992]
[72.28636169 -331.91625977]
[82.40055847 -342.99777222]
[93.06303406 -353.55279541]
[104.24643707 -363.55422974]
[115.92205048 -372.97637939]
[128.05990601 -381.79510498]
[140.62882996 -389.98770142]
[153.59658813 -397.53320312]
[166.92987061 -404.41220093]
[180.59445190 -410.60705566]
[194.55525208 -416.10186768]
[208.77645874 -420.88250732]
[223.22154236 -424.93670654]
[237.85342407 -428.25408936]
[252.63455200 -430.82611084]
[267.52697754 -432.64617920]
[282.49246216 -433.70962524]
[297.49261475 -434.01373291]
[312.48892212 -433.55767822]
[327.44287109 -432.34265137]
[342.31610107 -430.37179565]
[357.07040405 -427.65014648]
[371.66793823 -424.18469238]
[386.07119751 -419.98434448]
[400.24322510 -415.05984497]
[414.14767456 -409.42388916]
[427.74877930 -403.09091187]
[441.01168823 -396.07717896]
[453.90231323 -388.40069580]
[466.38760376 -380.08114624]
[478.43548584 -371.13992310]
[490.01504517 -361.59994507]
[501.09652710 -351.48571777]
[511.65151978 -340.82321167]
[521.65289307 -329.63980103]
[531.07507324 -317.96414185]
[539.89373779 -305.82626343]
[548.08630371 -293.25732422]
[555.63177490 -280.28955078]
[562.51074219 -266.95623779]
[568.70556641 -253.29164124]
[574.20031738 -239.33082581]
[578.98089600 -225.10960388]
[583.03509521 -210.66452026]
[586.35241699 -196.03262329]
[588.92437744 -181.25149536]
[590.74444580 -166.35905457]
[591.80786133 -151.39355469]
[592.11187744 -136.39340210]
[591.65582275 -121.39710236]
[590.44073486 -106.44315338]
[588.46984863 -91.56993103]
[585.74816895 -76.81562805]
[582.28265381 -62.21811676]
[578.08227539 -47.81486511]
[573.15771484 -33.64284515]
[567.52172852 -19.73843765]
[561.18872070 -6.13733673]
[554.17492676 7.12554502]
[546.49841309 20.01616096]
[538.17883301 32.50142288]
[529.23760986 44.54927826]
[519.69757080 56.12880325]
[509.58334351 67.21027374]
[498.92080688 77.76523590]
[487.73733521 87.76660919]
[476.06167603 97.18870544]
[463.92376709 106.00734711]
[451.35479736 114.19989014]
[438.38702393 121.74531555]
[425.05368042 128.62423706]
[411.38906860 134.81901550]
[397.42822266 140.31375122]
[383.20700073 145.09431458]
[368.76190186 149.14843750]
[354.13000488 152.46574402]
[339.34884644 155.03768921]
[324.45642090 156.85768127]
[309.49090576 157.92103577]
[294.49075317 158.22505188]
[279.49447632 157.76892090]
[264.54052734 156.55381775]
[249.66731262 154.58287048]
[234.91300964 151.86114502]
[220.31550598 148.39561462]
[205.91226196 144.19517517]
[191.74026489 139.27061462]
[177.83586121 133.63458252]
[164.23478699 127.30152893]
[150.97192383 120.28771973]
[138.08132935 112.61115265]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 33]
[3 31]
[4 30]
[5 29]
[6 28]
[7 27]
[8 26]
[9 25]
[10 24]
[11 23]
[12 22]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
