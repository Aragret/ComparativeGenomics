%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAACAACCUAUUCCAACUGUUCAUCGGCUGAGAGGGCGUAGGAAUUAUAUCCUUCUUGCUxxxxxxxxxxCAAGCCCGAAUGAUAUUUCCUAUUCGCCUACACAAUUCUCCGAUCCGUCCCUAACAAACUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 249.26451111]
[92.50000000 234.26451111]
[92.50000000 219.26451111]
[92.50000000 204.26451111]
[92.50000000 189.26451111]
[92.50000000 174.26451111]
[92.50000000 159.26451111]
[92.50000000 144.26451111]
[92.50000000 129.26451111]
[92.50000000 114.26451874]
[85.78627777 110.92147827]
[72.35882568 104.23540497]
[65.64510345 100.89236450]
[53.67484283 109.93188477]
[41.70458603 118.97140503]
[29.73432541 128.01092529]
[32.78720474 142.96560669]
[29.04083252 157.76181030]
[19.23905373 169.46171570]
[5.32802153 175.74232483]
[-9.93022156 175.35658264]
[-23.50613785 168.38111877]
[-32.70421982 156.20088196]
[-35.69818497 141.23428345]
[-31.89357567 126.45295715]
[-22.04579926 114.79174042]
[-8.11014175 108.56597137]
[7.14646387 109.01178741]
[20.69480705 116.04066467]
[32.66506577 107.00114441]
[44.63532257 97.96162415]
[56.60558319 88.92211151]
[77.36436462 83.11465454]
[93.99880981 89.96386719]
[95.84214020 75.07756042]
[97.68546295 60.19125366]
[99.52878571 45.30494690]
[101.37210846 30.41863823]
[99.28150177 25.50085258]
[99.32456970 20.75704002]
[101.06626892 16.98396492]
[103.81469727 14.68323708]
[106.57093811 -0.06135940]
[109.32717896 -14.80595589]
[111.01757812 -29.71040344]
[111.63340759 -44.69775772]
[112.24922943 -59.68510818]
[112.86505890 -74.67246246]
[113.48088074 -89.65981293]
[113.78885651 -104.65665436]
[113.78885651 -119.65665436]
[113.78885651 -134.65666199]
[113.78885651 -149.65666199]
[113.78885651 -164.65666199]
[113.78885651 -179.65666199]
[110.77413177 -185.65281677]
[111.21983337 -191.39643860]
[114.10948181 -195.26931763]
[114.72531128 -210.25666809]
[115.34113312 -225.24401855]
[115.95696259 -240.23138428]
[116.57278442 -255.21873474]
[109.40857697 -269.32492065]
[117.66187286 -281.72381592]
[118.27769470 -296.71115112]
[118.89352417 -311.69851685]
[108.46522522 -323.26953125]
[109.30326080 -338.46005249]
[120.39871979 -348.33053589]
[121.01454163 -363.31790161]
[121.63037109 -378.30523682]
[108.13809204 -385.44116211]
[99.08502960 -397.72955322]
[96.26868439 -412.73059082]
[100.24823761 -427.46578979]
[110.23355103 -439.00946045]
[124.24202728 -445.06961060]
[139.49227905 -444.44296265]
[152.95634460 -437.25399780]
[161.96093750 -424.93002319]
[164.71820068 -409.91802979]
[160.68064880 -395.19860840]
[150.64994812 -383.69436646]
[136.61772156 -377.68942261]
[136.00189209 -362.70208740]
[135.38607788 -347.71472168]
[145.63435364 -336.96722412]
[145.22331238 -321.75915527]
[133.88087463 -311.08270264]
[133.26504517 -296.09533691]
[132.64921570 -281.10797119]
[139.85748291 -268.07379150]
[131.56013489 -254.60290527]
[130.94430542 -239.61555481]
[130.32849121 -224.62820435]
[129.71266174 -209.64083862]
[129.09683228 -194.65348816]
[128.78886414 -179.65666199]
[128.78886414 -164.65666199]
[128.78886414 -149.65666199]
[128.78886414 -134.65666199]
[128.78886414 -119.65665436]
[128.78886414 -104.65665436]
[131.51707458 -100.66841125]
[131.72659302 -94.91133118]
[128.46823120 -89.04399109]
[127.85240936 -74.05664062]
[127.23657990 -59.06928635]
[126.62075806 -44.08193207]
[126.00493622 -29.09457779]
[137.28791809 -38.97862244]
[152.27986145 -39.47027588]
[164.18618774 -30.34671593]
[167.61077881 -15.74287510]
[161.00155640 -2.27742982]
[147.35392761 3.94688082]
[132.85317993 0.10910697]
[124.07177734 -12.04971313]
[121.31553650 2.69488335]
[118.55929565 17.43947983]
[116.25841522 32.26196289]
[114.41509247 47.14826965]
[112.57176971 62.03457642]
[110.72844696 76.92088318]
[108.88511658 91.80718994]
[115.61865234 78.40348053]
[126.24872589 67.82040405]
[139.68215942 61.14634705]
[154.53742981 59.06766510]
[169.28681946 61.79813766]
[182.41349792 69.05695343]
[192.56748962 80.09761810]
[198.70457458 93.78469849]
[200.19360352 108.71060944]
[196.88143921 123.34036255]
[189.10870361 136.16941833]
[177.67477417 145.87843323]
[163.75549316 151.46891785]
[148.78233337 152.36596680]
[134.29515076 148.47729492]
[121.78382874 140.20283508]
[112.53501892 128.39353943]
[107.50000000 114.26451874]
[107.50000000 129.26451111]
[107.50000000 144.26451111]
[107.50000000 159.26451111]
[107.50000000 174.26451111]
[107.50000000 189.26451111]
[107.50000000 204.26451111]
[107.50000000 219.26451111]
[107.50000000 234.26451111]
[107.50000000 249.26451111]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[13 32]
[14 31]
[15 30]
[16 29]
[34 125]
[35 124]
[36 123]
[37 122]
[38 121]
[42 120]
[43 119]
[44 118]
[45 110]
[46 109]
[47 108]
[48 107]
[49 106]
[50 103]
[51 102]
[52 101]
[53 100]
[54 99]
[55 98]
[58 97]
[59 96]
[60 95]
[61 94]
[62 93]
[64 91]
[65 90]
[66 89]
[69 86]
[70 85]
[71 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
