%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAAUAUAAAACCCCCUGCCAUAACCCAAUACCAAACGCCCCUCUUCGUCUGAUCCGUCCUAAUCAxxxxxxxxxxCUCUACAUAUUUACCACAACACAAUGGGGCUCACUCACCCACCACAUUAACAACAUAAAACCCUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-17.93339729 291.47949219]
[-26.22126389 303.98193359]
[-27.39718246 319.75939941]
[-40.87832642 326.09246826]
[-49.16619110 338.59494019]
[-57.45405960 351.09738159]
[-65.74192810 363.59982300]
[-74.02979279 376.10229492]
[-82.31765747 388.60473633]
[-74.89598083 401.99044800]
[-74.55664825 417.29217529]
[-81.37765503 430.99374390]
[-93.79156494 439.94659424]
[-108.94576263 442.09341431]
[-123.35791779 436.94091797]
[-133.71623230 425.67309570]
[-137.64042664 410.87918091]
[-134.22877502 395.95877075]
[-124.26522064 384.34042358]
[-110.03932953 378.69393921]
[-94.82010651 380.31686401]
[-86.53224182 367.81442261]
[-78.24437714 355.31195068]
[-69.95650482 342.80950928]
[-61.66864014 330.30706787]
[-53.38077545 317.80462646]
[-52.79766083 302.92141724]
[-38.72371292 295.69406128]
[-30.43584824 283.19161987]
[-45.49320602 271.47714233]
[-59.50350189 258.52859497]
[-72.36591339 244.43917847]
[-83.98786163 229.31027222]
[-94.28572083 213.25077820]
[-103.18537903 196.37626648]
[-110.62277985 178.80815125]
[-116.54441071 160.67289734]
[-120.90764618 142.10099792]
[-123.68109131 123.22611237]
[-124.84477997 104.18408203]
[-124.39034271 85.11193085]
[-122.32105255 66.14692688]
[-118.65180206 47.42555618]
[-113.40898895 29.08254242]
[-106.63034821 11.24989414]
[-120.20773315 4.87380028]
[-133.78512573 -1.50229347]
[-147.31152344 6.10140133]
[-162.72000122 4.26886654]
[-174.08570862 -6.29525089]
[-177.03826904 -21.52883148]
[-170.44238281 -35.57425308]
[-156.83428955 -43.03076553]
[-141.44659424 -41.03118515]
[-130.19616699 -30.34439468]
[-127.40902710 -15.07968044]
[-113.83164215 -8.70358658]
[-100.25424957 -2.32749224]
[-94.60617828 -12.69922829]
[-88.42140961 -22.76015282]
[-81.71698761 -32.48251724]
[-74.51141357 -41.83951187]
[-66.82456207 -50.80533218]
[-58.67761993 -59.35524368]
[-50.09306717 -67.46567535]
[-41.09457779 -75.11425781]
[-31.70696068 -82.27989197]
[-21.95611382 -88.94281769]
[-11.86892509 -95.08466339]
[-1.47321546 -100.68848419]
[9.20234585 -105.73883057]
[20.12831688 -110.22177887]
[31.27456474 -114.12495422]
[42.61034775 -117.43759918]
[54.10440826 -120.15057373]
[65.72504425 -122.25640106]
[77.44020081 -123.74927521]
[89.21758270 -124.62506866]
[101.02469635 -124.88137054]
[112.82897949 -124.51747894]
[124.59788513 -123.53439331]
[136.29895020 -121.93482971]
[147.89991760 -119.72319031]
[159.36877441 -116.90557861]
[170.67390442 -113.48976898]
[181.78411865 -109.48517609]
[192.66877747 -104.90285492]
[203.29788208 -99.75542450]
[213.64208984 -94.05709839]
[223.67288208 -87.82358551]
[233.36260986 -81.07207489]
[242.68453979 -73.82118988]
[251.61294556 -66.09092712]
[260.12322998 -57.90259933]
[268.19192505 -49.27879715]
[275.79675293 -40.24330139]
[282.91674805 -30.82103157]
[289.53228760 -21.03797150]
[295.62512207 -10.92110348]
[301.17843628 -0.49832702]
[306.17694092 10.20161152]
[310.60681152 21.14920425]
[314.45587158 32.31425858]
[317.71347046 43.66598129]
[320.37066650 55.17306900]
[322.42007446 66.80377960]
[323.85610962 78.52604675]
[324.67474365 90.30753326]
[339.67401123 90.16118622]
[354.67330933 90.01484680]
[369.67260742 89.86849976]
[383.39663696 81.99692535]
[396.19879150 89.60968781]
[411.19805908 89.46334076]
[417.63934326 75.62596893]
[429.45196533 65.96033478]
[444.29055786 62.38555908]
[459.20889282 65.61140442]
[471.24490356 74.99739075]
[478.00888062 88.67991638]
[478.15780640 103.94230652]
[471.66207886 117.75420380]
[459.81149292 127.37324524]
[444.95892334 130.88957214]
[430.05340576 127.60499573]
[418.05444336 118.17168427]
[411.34442139 104.46263123]
[396.34512329 104.60897064]
[383.69393921 112.47007751]
[369.81893921 104.86778259]
[354.81964111 105.01412964]
[339.82037354 105.16047668]
[324.82107544 105.30682373]
[323.84851074 121.55288696]
[321.70349121 137.68606567]
[318.39730835 153.62185669]
[313.94720459 169.27680969]
[308.37652588 184.56890869]
[301.71447754 199.41806030]
[293.99591064 213.74650574]
[285.26126099 227.47918701]
[275.55630493 240.54418945]
[264.93182373 252.87306213]
[253.44351196 264.40124512]
[241.15151978 275.06835938]
[228.12022400 284.81854248]
[214.41787720 293.60070801]
[200.11625671 301.36886597]
[185.29026794 308.08230591]
[170.01756287 313.70593262]
[154.37812805 318.21023560]
[138.45388794 321.57162476]
[122.32823181 323.77249146]
[106.08563232 324.80136108]
[89.81115723 324.65277100]
[73.59004974 323.32754517]
[57.50726700 320.83264160]
[41.64704514 317.18106079]
[26.09245491 312.39199829]
[10.92496395 306.49047852]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 29]
[2 28]
[4 26]
[5 25]
[6 24]
[7 23]
[8 22]
[9 21]
[45 58]
[46 57]
[47 56]
[108 133]
[109 132]
[110 131]
[111 130]
[113 128]
[114 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
