%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACAACACAUAAUGACCCACCAAUCACAUGCCUAUCAUAUAGUAAAACCCAGCCCAUGACCxxxxxxxxxxCUAGGCGGCUAUGGUAUAAUACGCCUCACACUCAUUCUCAACCCCCUGACAAAACACAUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 312.20043945]
[92.50000000 297.20043945]
[92.50000000 282.20043945]
[92.50000000 267.20043945]
[92.50000000 252.20043945]
[92.50000000 237.20043945]
[92.50000000 222.20043945]
[92.50000000 207.20043945]
[92.50000000 192.20043945]
[92.50000000 177.20043945]
[81.89321136 175.42083740]
[71.63455200 172.19113159]
[61.92127609 167.57342529]
[52.94012070 161.65650940]
[44.86377716 154.55415344]
[37.84752274 146.40287781]
[32.02625275 137.35943604]
[18.24387169 143.27940369]
[4.46149063 149.19937134]
[-1.06103587 160.90217590]
[-12.71380138 165.53164673]
[-24.01343727 161.10156250]
[-37.91599274 166.73352051]
[-51.81855011 172.36547852]
[-55.42771149 187.45698547]
[-67.24000549 197.51925659]
[-82.71337128 198.68313599]
[-95.89797974 190.50109863]
[-101.72407532 176.11930847]
[-97.95141602 161.06784058]
[-86.03065491 151.13430786]
[-70.54557800 150.13833618]
[-57.45050812 158.46292114]
[-43.54795074 152.83096313]
[-29.64539528 147.19902039]
[-19.65607452 132.80410767]
[-1.45847225 135.41699219]
[12.32390881 129.49702454]
[26.10629082 123.57705688]
[22.47387123 102.42021179]
[24.77955437 81.07798767]
[10.65475082 76.02922821]
[-3.47005177 70.98047638]
[-17.59485435 65.93171692]
[-34.54492950 66.29408264]
[-39.58537674 50.10673141]
[-25.42597389 40.78216171]
[-12.54609871 51.80691528]
[1.57870448 56.85567093]
[15.70350742 61.90442657]
[29.82831001 66.95318604]
[38.86726761 52.26168060]
[50.92969131 39.93118286]
[65.41899872 30.57153130]
[81.61859131 24.64562607]
[98.72727203 22.44654655]
[115.89890289 24.08305359]
[132.28422546 29.47420883]
[147.07284546 38.35338211]
[157.28633118 27.36771774]
[167.49980164 16.38205338]
[162.47862244 0.66052765]
[166.03205872 -15.36035538]
[177.10232544 -27.34697151]
[192.61158752 -32.10564423]
[208.31715393 -28.43321800]
[218.29988098 -39.62898636]
[228.28260803 -50.82474899]
[220.16632080 -61.90108871]
[214.40290833 -74.35877228]
[211.21803284 -87.70489502]
[210.73541260 -101.41186523]
[212.97196960 -114.93827057]
[217.83726501 -127.75023651]
[225.13713074 -139.34252930]
[234.58146667 -149.25845337]
[245.79573059 -157.10786438]
[258.33581543 -162.58251953]
[271.70556641 -165.46815491]
[285.37652588 -165.65287781]
[298.80871582 -163.13156128]
[311.47210693 -158.00585938]
[322.86727905 -150.48020935]
[333.52890015 -161.03149414]
[344.19055176 -171.58279419]
[354.85217285 -182.13407898]
[365.51379395 -192.68536377]
[359.73739624 -206.74601746]
[359.78646851 -221.94686890]
[365.65353394 -235.96992493]
[376.44387817 -246.67675781]
[390.51211548 -252.43466187]
[405.71289062 -252.36558533]
[419.72821045 -246.48008728]
[430.42083740 -235.67564392]
[436.16024780 -221.59985352]
[436.07116699 -206.39918518]
[430.16723633 -192.39161682]
[419.34875488 -181.71319580]
[405.26541138 -175.99232483]
[390.06488037 -176.10139465]
[376.06509399 -182.02374268]
[365.40344238 -171.47245789]
[354.74182129 -160.92115784]
[344.08020020 -150.36987305]
[333.41857910 -139.81858826]
[342.01315308 -125.91515350]
[347.08355713 -110.36755371]
[348.33926392 -94.05422974]
[345.70544434 -77.89783478]
[339.32730103 -62.81305313]
[329.56219482 -49.65481949]
[316.95953369 -39.16985703]
[302.22988892 -31.95430374]
[286.20492554 -28.41982651]
[269.79043579 -28.77011871]
[253.91522217 -32.98918915]
[239.47837830 -40.84202576]
[229.49565125 -29.64625740]
[219.51292419 -18.45049286]
[224.64881897 -5.75868607]
[223.79740906 7.97281933]
[217.06845093 20.04878044]
[205.73098755 28.07416534]
[191.97434998 30.42909622]
[178.48547363 26.59553337]
[168.27198792 37.58119965]
[158.05850220 48.56686401]
[165.88827515 59.07454681]
[171.83743286 70.75035095]
[175.73614502 83.26100922]
[177.47315979 96.24945068]
[176.99890137 109.34493256]
[174.32688904 122.17369080]
[169.53338623 134.36955261]
[162.75521851 145.58442688]
[154.18586731 155.49819946]
[144.06990051 163.82791138]
[132.69607544 170.33580017]
[120.38901520 174.83612061]
[107.50000000 177.20043945]
[107.50000000 192.20043945]
[107.50000000 207.20043945]
[107.50000000 222.20043945]
[107.50000000 237.20043945]
[107.50000000 252.20043945]
[107.50000000 267.20043945]
[107.50000000 282.20043945]
[107.50000000 297.20043945]
[107.50000000 312.20043945]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[17 39]
[18 38]
[19 37]
[22 35]
[23 34]
[24 33]
[41 51]
[42 50]
[43 49]
[44 48]
[59 128]
[60 127]
[61 126]
[66 120]
[67 119]
[68 118]
[83 106]
[84 105]
[85 104]
[86 103]
[87 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
