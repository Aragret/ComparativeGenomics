%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCACUUCAACCUCCCUCACCAUUGGCAGCCUAGCAUUAGCAGGAAUACCUUUCCUCACAGGxxxxxxxxxxAAAGCUAUUACCUAAAACAAUUUCACAGCACCAAAUCUCCACCUCCAUCAUCACCUCAACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[117.13361359 392.47888184]
[117.13361359 377.47888184]
[117.13361359 362.47888184]
[117.13361359 347.47888184]
[117.13361359 332.47888184]
[117.13361359 317.47888184]
[117.13361359 302.47888184]
[117.13361359 287.47888184]
[117.13361359 272.47888184]
[117.13361359 257.47888184]
[113.17700195 243.01011658]
[113.03279114 258.00942993]
[108.74412537 272.38327026]
[100.64587402 285.00936890]
[89.37033081 294.90188599]
[75.79785919 301.28845215]
[60.98818970 303.67037964]
[46.09762955 301.86175537]
[32.28881073 296.00372314]
[20.63990021 286.55368042]
[12.06042957 274.24951172]
[7.22026730 260.05187988]
[6.49732494 245.06932068]
[9.94804859 230.47161865]
[17.30301285 217.39857483]
[27.98795128 206.87089539]
[41.16860580 199.71057129]
[55.81584930 196.47665405]
[70.78605652 197.42164612]
[84.91036987 202.47177124]
[97.08599091 211.23272705]
[106.36357880 223.02272034]
[104.52025604 208.13641357]
[102.67693329 193.25010681]
[100.83360291 178.36380005]
[91.46682739 170.64851379]
[89.84070587 158.21762085]
[97.37465668 147.69891357]
[95.83736420 132.77789307]
[77.98650360 127.84406281]
[64.47268677 113.33813477]
[60.27609634 92.62719727]
[67.95574188 71.54293060]
[53.80842209 66.55760956]
[37.79670334 70.10118103]
[26.92309189 57.82532501]
[32.37342834 42.35839462]
[48.54087067 39.61144257]
[58.79374695 52.41029358]
[72.94106293 57.39561462]
[84.43173218 47.75380325]
[81.97879791 32.95572281]
[79.52587128 18.15764427]
[76.92115021 3.38552785]
[74.16490936 -11.35906887]
[71.40866089 -26.10366440]
[68.65242004 -40.84826279]
[58.51108932 -52.99173355]
[63.77801514 -66.92402649]
[61.02177429 -81.66862488]
[58.26552963 -96.41321564]
[55.50928879 -111.15781403]
[51.25644302 -125.54229736]
[45.55177689 -139.41517639]
[39.84711456 -153.28805542]
[28.23130989 -165.63752747]
[36.88258362 -180.21806335]
[53.28821182 -175.94116211]
[53.71999359 -158.99272156]
[59.42465973 -145.11984253]
[65.12931824 -131.24696350]
[69.29515076 -145.65687561]
[80.01325226 -156.15080261]
[94.50800323 -160.01115417]
[109.02575684 -156.23823547]
[119.80690765 -145.80909729]
[124.05950928 -131.42454529]
[120.68228912 -116.80967712]
[110.54982758 -105.74924469]
[96.28607941 -101.10752106]
[81.58487701 -104.08655548]
[70.25388336 -113.91405487]
[73.01012421 -99.16946411]
[75.76637268 -84.42486572]
[78.52261353 -69.68026733]
[88.46680450 -58.59142685]
[83.39701843 -43.60450363]
[86.15325928 -28.85990715]
[88.90950012 -14.11531162]
[91.66574860 0.62928504]
[96.01312256 6.66356134]
[94.32395172 15.70471573]
[96.77687836 30.50279427]
[99.22980499 45.30087280]
[113.10269165 51.00553894]
[125.25601959 42.21369553]
[137.40934753 33.42185211]
[143.61273193 18.24127007]
[159.89558411 16.29165840]
[169.50749207 29.57861137]
[162.56056213 44.43365097]
[146.20120239 45.57518387]
[134.04786682 54.36702728]
[121.89453125 63.15887070]
[134.20918274 77.59522247]
[138.62588501 95.14287567]
[134.97659302 111.96682739]
[124.77637482 124.72692108]
[110.75837708 131.24060059]
[112.29566956 146.16162109]
[123.43569183 160.78797913]
[115.71990967 176.52047729]
[117.56324005 191.40678406]
[119.40656281 206.29309082]
[121.24988556 221.17939758]
[126.08970642 235.37715149]
[126.26712036 220.37820435]
[129.71662903 205.78022766]
[136.27160645 192.28828430]
[145.61544800 180.55404663]
[157.29687500 171.14424133]
[170.75167847 164.51338196]
[185.32998657 160.98170471]
[200.32769775 160.71980286]
[215.02043152 163.74031067]
[228.69854736 169.89736938]
[240.70140076 178.89356995]
[250.44926453 190.29440308]
[257.47131348 203.54924011]
[261.42840576 218.01788330]
[262.12942505 233.00149536]
[259.54046631 247.77638245]
[253.78663635 261.62893677]
[245.14579773 273.89010620]
[234.03530884 283.96765137]
[220.99180603 291.37487793]
[206.64526367 295.75399780]
[191.68859863 296.89349365]
[176.84423828 294.73834229]
[162.82911682 289.39266968]
[150.32015991 281.11459351]
[139.92155457 270.30401611]
[132.13362122 257.47888184]
[132.13362122 272.47888184]
[132.13362122 287.47888184]
[132.13362122 302.47888184]
[132.13362122 317.47888184]
[132.13362122 332.47888184]
[132.13362122 347.47888184]
[132.13362122 362.47888184]
[132.13362122 377.47888184]
[132.13362122 392.47888184]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 116]
[32 115]
[33 114]
[34 113]
[35 112]
[38 110]
[39 109]
[43 50]
[44 49]
[51 94]
[52 93]
[53 92]
[54 90]
[55 89]
[56 88]
[57 87]
[59 85]
[60 84]
[61 83]
[62 82]
[63 71]
[64 70]
[65 69]
[95 104]
[96 103]
[97 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
