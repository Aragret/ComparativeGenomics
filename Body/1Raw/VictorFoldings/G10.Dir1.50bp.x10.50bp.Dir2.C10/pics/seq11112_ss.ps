%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAAAUAACCCCACCCUACUAAACCCCAUUAAACGCCUGGCAGCCGGAAGCCUAUUCGCAGGxxxxxxxxxxAAACCAUCGUUGUAUUUCAACUACAAGAACACCAAUGACCCCAAUACGCAAAACUAACCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-9.34438515 332.32638550]
[-21.47869492 326.21817017]
[-33.27296829 319.47677612]
[-41.42963409 332.06521606]
[-49.58629990 344.65365601]
[-50.59715652 360.44253540]
[-64.01133728 366.91625977]
[-72.16799927 379.50469971]
[-80.32466888 392.09313965]
[-88.48133087 404.68157959]
[-83.72132874 419.57708740]
[-89.69741058 434.02770996]
[-103.58786011 441.21029663]
[-118.83402252 437.73345947]
[-128.23713684 425.23883057]
[-127.35733032 409.62600708]
[-116.61002350 398.26690674]
[-101.06977081 396.52490234]
[-92.91310120 383.93646240]
[-84.75643921 371.34802246]
[-76.59976959 358.75958252]
[-76.17233276 343.87112427]
[-62.17473984 336.49697876]
[-54.01807404 323.90853882]
[-45.86140823 311.32009888]
[-60.23890686 300.63705444]
[-73.83663940 288.97766113]
[-86.58844757 276.39868164]
[-98.43226624 262.96127319]
[-109.31047058 248.73085022]
[-119.17011261 233.77667236]
[-127.96322632 218.17152405]
[-135.64700317 201.99130249]
[-142.18408203 185.31477356]
[-147.54261780 168.22308350]
[-151.69656372 150.79940796]
[-154.62568665 133.12852478]
[-156.31573486 115.29642487]
[-156.75849915 97.38989258]
[-155.95181274 79.49606323]
[-153.89959717 61.70201111]
[-150.61184692 44.09432602]
[-146.10455322 26.75869370]
[-140.39965820 9.77946854]
[-133.52491760 -6.76072073]
[-125.51379395 -22.78138542]
[-116.40525818 -38.20456696]
[-106.24364471 -52.95521164]
[-118.02578735 -62.23859787]
[-129.80792236 -71.52198029]
[-144.70417786 -67.17675018]
[-159.29817200 -72.44885254]
[-167.97819519 -85.31107330]
[-167.40663147 -100.81761932]
[-157.80322266 -113.00590515]
[-142.86070251 -117.18929291]
[-128.32476807 -111.75917816]
[-119.78477478 -98.80355072]
[-120.52453613 -83.30412292]
[-108.74240112 -74.02073669]
[-96.96025848 -64.73735046]
[-87.29883575 -75.64420319]
[-77.03429413 -85.98547363]
[-66.19969940 -95.72786713]
[-54.82993317 -104.84001160]
[-42.96161270 -113.29256439]
[-30.63294792 -121.05829620]
[-17.88364029 -128.11222839]
[-4.75474310 -134.43161011]
[8.71146870 -139.99612427]
[22.47163200 -144.78785706]
[36.48144150 -148.79133606]
[50.69578171 -151.99371338]
[65.06888580 -154.38465881]
[79.55446625 -155.95648193]
[94.10588074 -156.70410156]
[108.67627716 -156.62513733]
[123.21873474 -155.71983337]
[137.68643188 -153.99108887]
[152.03277588 -151.44448853]
[166.21156311 -148.08822632]
[180.17715454 -143.93310547]
[193.88456726 -138.99252319]
[207.28967285 -133.28237915]
[220.34930420 -126.82103729]
[233.02139282 -119.62934113]
[245.26516724 -111.73042297]
[257.04116821 -103.14971924]
[268.31149292 -93.91487885]
[279.03985596 -84.05561829]
[289.80853271 -94.49762726]
[300.57720947 -104.93963623]
[311.34588623 -115.38164520]
[313.02966309 -131.33609009]
[326.63012695 -139.84530640]
[341.71417236 -134.38174438]
[346.71063232 -119.13658142]
[337.78662109 -105.80460358]
[321.78790283 -104.61296082]
[311.01922607 -94.17095184]
[300.25054932 -83.72894287]
[289.48187256 -73.28693390]
[298.38153076 -63.02304077]
[306.72589111 -52.30281830]
[314.49157715 -41.15628433]
[321.65692139 -29.61463356]
[328.20178223 -17.71017647]
[334.10787964 -5.47623110]
[339.35870361 7.05295467]
[343.93951416 19.84231186]
[347.83749390 32.85604095]
[351.04177856 46.05771255]
[353.54333496 59.41037750]
[355.33520508 72.87665558]
[356.41235352 86.41886139]
[356.77175903 99.99907684]
[356.41244507 113.57929993]
[355.33538818 127.12150574]
[353.54360962 140.58779907]
[351.04214478 153.94047546]
[347.83798218 167.14218140]
[343.94009399 180.15592957]
[339.35937500 192.94532776]
[334.10864258 205.47454834]
[328.20263672 217.70852661]
[321.65783691 229.61303711]
[314.49261475 241.15473938]
[306.72698975 252.30133057]
[298.38269043 263.02160645]
[289.48312378 273.28558350]
[280.05313110 283.06448364]
[270.11917114 292.33096313]
[259.70901489 301.05911255]
[248.85183716 309.22445679]
[237.57798767 316.80413818]
[225.91903687 323.77697754]
[213.90762329 330.12344360]
[201.57736206 335.82574463]
[188.96278381 340.86795044]
[176.09918213 345.23590088]
[163.02256775 348.91744995]
[149.76954651 351.90222168]
[136.37721252 354.18188477]
[122.88305664 355.75009155]
[109.32484436 356.60238647]
[95.74053955 356.73641968]
[82.16815186 356.15182495]
[68.64567566 354.85025024]
[55.21096420 352.83529663]
[41.90162277 350.11260986]
[28.75490952 346.68984985]
[15.80761814 342.57653809]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 25]
[4 24]
[5 23]
[7 21]
[8 20]
[9 19]
[10 18]
[48 61]
[49 60]
[50 59]
[90 102]
[91 101]
[92 100]
[93 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
