%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACCACUCACGGGAGCUCUCCAUGCAUUUGGUAUUUUCGUCUGGGGGGUAUGCACGCGAUxxxxxxxxxxAUACUCUUUCACCCACAGCACCAAUCCUACCUCCAUCGCUAACCCCACUAAAACACUCACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 300.99880981]
[92.50000000 285.99880981]
[92.50000000 270.99880981]
[92.50000000 255.99879456]
[92.50000000 240.99879456]
[92.50000000 225.99879456]
[92.50000000 210.99879456]
[92.50000000 195.99879456]
[92.50000000 180.99879456]
[92.50000000 165.99879456]
[64.61874390 156.21617126]
[43.73873138 135.30949402]
[30.21454048 141.79766846]
[16.69035149 148.28582764]
[3.16616082 154.77400208]
[-9.35980129 163.02629089]
[-20.65880585 172.89201355]
[-31.95781136 182.75773621]
[-36.74790573 198.44171143]
[-52.78444290 201.87121582]
[-63.57040405 189.51828003]
[-58.01012039 174.09054565]
[-41.82353210 171.45872498]
[-30.52452850 161.59300232]
[-19.22552490 151.72727966]
[-34.12713623 153.44248962]
[-48.47158051 149.05648804]
[-59.86587906 139.30097961]
[-66.40921021 125.80339813]
[-67.00999451 110.81542969]
[-61.56801224 96.83741760]
[-50.99110413 86.20120239]
[-37.04374313 80.68114471]
[-22.05265236 81.19811249]
[-8.51868916 87.66587067]
[1.30038023 99.00543976]
[5.76651430 113.32513428]
[4.13466215 128.23609924]
[-3.32200432 141.24980164]
[10.20218563 134.76164246]
[23.72637558 128.27348328]
[37.25056458 121.78530884]
[34.17689514 108.91123962]
[33.71683502 95.68333435]
[35.88865662 82.62683105]
[40.60611725 70.26016235]
[47.68190765 59.07435226]
[56.83507156 49.51356125]
[67.70217133 41.95741653]
[79.85169983 36.70594406]
[92.80125427 33.96766281]
[106.03664398 33.85130310]
[119.03234100 36.36148071]
[131.27232361 41.39852524]
[139.78341675 29.04695320]
[148.29450989 16.69538116]
[156.80560303 4.34380770]
[158.26470947 -11.40997124]
[171.85743713 -17.49990273]
[180.36851501 -29.85147476]
[165.37088013 -30.11732292]
[156.05973816 -41.87753677]
[159.24078369 -56.53635406]
[172.58894348 -63.37936401]
[186.34777832 -57.40488052]
[190.46080017 -42.98041534]
[200.20846558 -54.38143921]
[209.95611572 -65.78245544]
[219.70376587 -77.18347931]
[229.45141602 -88.58450317]
[219.46693420 -99.81053162]
[211.10411072 -112.29159546]
[204.51875305 -125.79518127]
[199.83352661 -140.06971741]
[197.13574219 -154.84928894]
[196.47563171 -169.85855103]
[197.86549377 -184.81790161]
[201.27944946 -199.44863892]
[206.65390015 -213.47822571]
[213.88870239 -226.64527893]
[222.84909058 -238.70451355]
[233.36814880 -249.43127441]
[245.24989319 -258.62570190]
[258.27297974 -266.11657715]
[272.19482422 -271.76428223]
[286.75601196 -275.46362305]
[301.68533325 -277.14569092]
[316.70462036 -276.77914429]
[331.53411865 -274.37081909]
[345.89752197 -269.96557617]
[359.52728271 -263.64547729]
[372.16946411 -255.52825928]
[383.58856201 -245.76516724]
[393.57180786 -234.53804016]
[401.93328857 -222.05607605]
[408.51718140 -208.55177307]
[413.20086670 -194.27673340]
[415.89706421 -179.49687195]
[416.55554199 -164.48753357]
[415.16406250 -149.52833557]
[411.74850464 -134.89796448]
[406.37255859 -120.86896515]
[399.13632202 -107.70269775]
[390.17462158 -95.64443207]
[379.65438843 -84.91881561]
[367.77166748 -75.72565460]
[354.74777222 -68.23621368]
[340.82531738 -62.59001923]
[326.26373291 -58.89225006]
[311.33422852 -57.21179581]
[296.31497192 -57.57996750]
[281.48574829 -59.98989868]
[267.12280273 -64.39669800]
[253.49372864 -70.71826935]
[240.85243225 -78.83684540]
[231.10478210 -67.43582916]
[221.35713196 -56.03480530]
[211.60948181 -44.63378525]
[201.86183167 -33.23276520]
[192.72009277 -21.34038544]
[184.20899963 -8.98881245]
[183.35865784 5.88150024]
[169.15716553 12.85489845]
[160.64608765 25.20647049]
[152.13499451 37.55804443]
[143.62390137 49.90961456]
[150.79661560 57.20052338]
[156.76499939 65.50614929]
[161.38757324 74.62958527]
[164.55470276 84.35452271]
[166.19134521 94.45039368]
[166.25865173 104.67783356]
[164.75506592 114.79437256]
[161.71620178 124.56015778]
[157.21414185 133.74365234]
[151.35559082 142.12712097]
[144.27946472 149.51181030]
[136.15353394 155.72264099]
[127.17045593 160.61235046]
[117.54319000 164.06503296]
[107.50000000 165.99879456]
[107.50000000 180.99879456]
[107.50000000 195.99879456]
[107.50000000 210.99879456]
[107.50000000 225.99879456]
[107.50000000 240.99879456]
[107.50000000 255.99879456]
[107.50000000 270.99880981]
[107.50000000 285.99880981]
[107.50000000 300.99880981]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 42]
[13 41]
[14 40]
[15 39]
[16 25]
[17 24]
[18 23]
[54 126]
[55 125]
[56 124]
[57 123]
[59 121]
[60 120]
[66 119]
[67 118]
[68 117]
[69 116]
[70 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
