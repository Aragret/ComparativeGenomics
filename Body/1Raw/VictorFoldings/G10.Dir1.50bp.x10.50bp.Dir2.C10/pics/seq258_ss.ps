%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACAAAAAAUUUCCACCAAACCCCCCCUCCCCCGCUUCUGGCCACAGCACUUAAACACAUxxxxxxxxxxAUGGCCCACCAUAAUUACCCCCAUACUCCUUACACUAUUCCUCAUCACCCAACUAAAAAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-22.66228676 203.75097656]
[-34.55466461 212.89271545]
[-46.44704437 222.03443909]
[-58.33942413 231.17617798]
[-70.23180389 240.31791687]
[-82.02844238 249.58287048]
[-93.72806549 258.97003174]
[-105.42769623 268.35717773]
[-117.12731934 277.74435425]
[-128.82693481 287.13150024]
[-122.74232483 300.93875122]
[-120.43956757 315.85049438]
[-122.07568359 330.85000610]
[-127.53911591 344.91461182]
[-136.45736694 357.08535767]
[-148.22235107 366.53244019]
[-162.03193665 372.61172485]
[-176.94456482 374.90872192]
[-191.94345093 373.26681519]
[-206.00595093 367.79797363]
[-218.17326355 358.87503052]
[-227.61579895 347.10638428]
[-233.68975830 333.29443359]
[-235.98098755 318.38095093]
[-234.33329773 303.38269043]
[-228.85899353 289.32229614]
[-219.93136597 277.15844727]
[-208.15907288 267.72042847]
[-194.34480286 261.65182495]
[-179.43040466 259.36633301]
[-164.43280029 261.01983643]
[-150.37452698 266.49954224]
[-138.21409607 275.43188477]
[-126.51448059 266.04473877]
[-114.81485748 256.65756226]
[-103.11523438 247.27040100]
[-91.41560364 237.88323975]
[-88.14558411 231.20097351]
[-79.37354279 228.42553711]
[-67.48116302 219.28379822]
[-55.58877945 210.14205933]
[-43.69639969 201.00033569]
[-31.80401993 191.85859680]
[-49.57836151 158.62265015]
[-59.12016296 122.16021729]
[-59.90426254 84.47811890]
[-51.88750076 47.65032578]
[-35.51111221 13.70376301]
[-47.77347946 5.06464720]
[-60.03584671 -3.57446909]
[-76.40821838 -4.51125860]
[-83.54043579 -19.27822876]
[-74.09549713 -32.68438721]
[-57.78953552 -30.93862724]
[-51.39673233 -15.83683681]
[-39.13436508 -7.19772100]
[-26.87199593 1.44139504]
[-21.25620651 -5.39086485]
[-15.27295494 -11.90374279]
[-8.94037533 -18.07750130]
[-2.27765751 -23.89343262]
[4.69500780 -29.33390999]
[11.95649052 -34.38244629]
[19.48478508 -39.02374649]
[27.25707626 -43.24374008]
[35.24981308 -47.02964020]
[43.43877029 -50.36997223]
[51.79913330 -53.25461960]
[60.30556870 -55.67483521]
[68.93229675 -57.62328339]
[77.65316772 -59.09406281]
[86.44176483 -60.08271790]
[95.27145386 -60.58624649]
[104.11546326 -60.60312653]
[112.94700623 -60.13330841]
[121.73931122 -59.17821503]
[130.46574402 -57.74073792]
[139.09983826 -55.82523727]
[147.61544800 -53.43751144]
[155.98677063 -50.58480453]
[164.18841553 -47.27575684]
[170.81692505 -60.73172379]
[177.44541931 -74.18769073]
[184.07391357 -87.64365387]
[182.45494080 -103.96269226]
[195.93411255 -113.30315399]
[210.64520264 -106.05636597]
[211.45471191 -89.67721558]
[197.52987671 -81.01515198]
[190.90138245 -67.55918884]
[184.27288818 -54.10322571]
[177.64437866 -40.64725876]
[185.72546387 -35.87290573]
[193.51394653 -30.63477516]
[200.98323059 -24.95075035]
[208.10781860 -18.84022903]
[214.86341858 -12.32407188]
[221.22694397 -5.42451859]
[227.17669678 1.83488083]
[232.69235229 9.42934704]
[237.75508118 17.33295822]
[242.34761047 25.51873779]
[246.45426941 33.95874405]
[250.06103516 42.62416840]
[253.15560913 51.48543549]
[255.72740173 60.51229477]
[257.76763916 69.67393494]
[259.26940918 78.93909454]
[260.22750854 88.27613831]
[260.63870239 97.65319824]
[260.50161743 107.03826904]
[259.81665039 116.39931488]
[258.58621216 125.70438385]
[256.81445312 134.92172241]
[254.50746155 144.01985168]
[251.67306519 152.96774292]
[248.32098389 161.73483276]
[244.46261597 170.29119873]
[240.11117554 178.60763550]
[235.28147888 186.65577698]
[229.99003601 194.40812683]
[224.25488281 201.83822632]
[218.09562683 208.92073059]
[211.53326416 215.63145447]
[204.59020996 221.94749451]
[197.29016113 227.84727478]
[189.65802002 233.31069946]
[181.71986389 238.31907654]
[173.50276184 242.85533142]
[165.03477478 246.90397644]
[156.34480286 250.45120239]
[147.46250916 253.48489380]
[138.41821289 255.99468994]
[129.24278259 257.97201538]
[119.96754456 259.41015625]
[110.62414551 260.30416870]
[101.24448395 260.65103149]
[91.86058044 260.44952393]
[82.50444794 259.70037842]
[73.20804596 258.40609741]
[64.00308228 256.57113647]
[54.92098999 254.20176697]
[45.99276733 251.30604553]
[37.24888611 247.89387512]
[28.71919441 243.97689819]
[20.43280602 239.56849670]
[12.41800404 234.68368530]
[4.70214510 229.33917236]
[-2.68843293 223.55317688]
[-9.72850418 217.34545898]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 43]
[2 42]
[3 41]
[4 40]
[5 39]
[6 37]
[7 36]
[8 35]
[9 34]
[10 33]
[48 57]
[49 56]
[50 55]
[81 92]
[82 91]
[83 90]
[84 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
