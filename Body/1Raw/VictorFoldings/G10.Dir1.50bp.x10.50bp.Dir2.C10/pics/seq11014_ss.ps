%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGGACUACUCAAAACCAUACCUCUCACUUCAACCUCCCUCACCAUUGGCAGCCUAGCAUUxxxxxxxxxxUGAAACUUCGGCUCACUCCUUGGCGCCUGCCUGAUCCUCCAAAUCACCACAGGACUAUUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[195.82084656 344.79843140]
[195.19686890 329.81140137]
[194.57289124 314.82440186]
[193.94891357 299.83737183]
[193.32493591 284.85034180]
[192.70095825 269.86334229]
[192.07698059 254.87632751]
[191.45301819 239.88931274]
[187.74685669 225.35437012]
[181.11834717 211.89840698]
[174.48985291 198.44244385]
[167.86135864 184.98648071]
[161.23284912 171.53050232]
[154.60435486 158.07453918]
[151.92585754 157.05819702]
[149.50274658 154.88505554]
[147.79083252 151.65222168]
[147.20024109 147.62454224]
[148.03692627 143.21302795]
[142.54988098 129.25263977]
[137.06285095 115.29224396]
[118.45088196 132.21159363]
[95.26472473 133.81980896]
[77.66923523 121.75740051]
[71.97455597 103.18332672]
[57.15679932 100.85222626]
[42.33903885 98.52111816]
[36.96311569 112.58501434]
[28.78028870 125.22364807]
[18.14827728 135.88450623]
[5.53186607 144.10156250]
[-8.51740837 149.51557922]
[-23.38537216 151.88989258]
[-38.42206192 151.12069702]
[-52.97013855 147.24162292]
[-66.39362335 140.42225647]
[-78.10569000 130.96069336]
[-87.59435272 119.27057648]
[-94.44480133 105.86293030]
[-98.35755920 91.32387543]
[-99.16158295 76.28900909]
[-96.82172394 61.41558456]
[-91.44026947 47.35380936]
[-83.25246429 34.71839523]
[-72.61626434 24.06171608]
[-59.99662018 15.84963226]
[-45.94521713 10.44114208]
[-31.07632065 8.07268143]
[-16.03993607 8.84778881]
[-1.49338663 12.73258018]
[11.92741299 19.55723000]
[23.63576317 29.02339172]
[33.11982346 40.71724701]
[39.96499634 54.12759018]
[43.87203598 68.66818237]
[44.67014313 83.70336151]
[59.48790359 86.03446198]
[74.30566406 88.36557007]
[87.26204681 68.31488800]
[114.91355896 62.78315353]
[115.53753662 47.79613876]
[116.16151428 32.80912018]
[116.78549194 17.82210541]
[107.86370850 1.74785018]
[117.75778961 -12.71268559]
[118.06984711 -27.70943832]
[103.71632385 -32.44945526]
[91.39859772 -41.21102142]
[82.21195221 -53.21505737]
[76.97325897 -67.39418030]
[76.14833069 -82.48758698]
[79.81053162 -97.15318298]
[87.63421631 -110.08691406]
[98.92370605 -120.13871765]
[112.67514801 -126.41480255]
[127.66577148 -128.35710144]
[142.56262207 -125.79290009]
[156.04109192 -118.95021057]
[166.90266418 -108.43747711]
[174.18156433 -95.18948364]
[177.23051453 -80.38423920]
[175.77844238 -65.33821869]
[169.95445251 -51.38928986]
[160.27641296 -39.77779388]
[147.60487366 -31.53621292]
[133.06660461 -27.39738274]
[132.75454712 -12.40062904]
[140.91802979 -3.41926384]
[140.74159241 9.11819363]
[131.77250671 18.44608307]
[131.14852905 33.43309784]
[130.52455139 48.42011642]
[129.90057373 63.40713120]
[135.79890442 68.03960419]
[143.53164673 55.18641281]
[147.04353333 40.60331726]
[161.21281433 35.68078613]
[173.00962830 44.94551086]
[171.58580017 59.87778091]
[158.25004578 66.74607849]
[147.59553528 77.30455780]
[153.49385071 81.93702698]
[167.90606689 77.77914429]
[182.31828308 73.62125397]
[193.29496765 61.43746948]
[209.27626038 65.11584473]
[213.82197571 80.87238312]
[202.25587463 92.49810791]
[186.47618103 88.03347015]
[172.06396484 92.19136047]
[157.65174866 96.34924316]
[151.02323914 109.80521393]
[156.51028442 123.76560211]
[161.99731445 137.72599792]
[168.06031799 151.44604492]
[174.68882751 164.90200806]
[181.31732178 178.35797119]
[187.94581604 191.81393433]
[194.57431030 205.26991272]
[201.20281982 218.72587585]
[202.53845215 203.78546143]
[207.95477295 189.79748535]
[217.02909851 177.85359192]
[229.05325317 168.88587952]
[243.08886719 163.59420776]
[258.04055786 162.39154053]
[272.74154663 165.37173462]
[286.04449463 172.30221558]
[296.91125488 182.64212036]
[304.49377441 195.58450317]
[308.20028687 210.11935425]
[307.74157715 225.11233521]
[303.15341187 239.39340210]
[294.79385376 251.84802246]
[283.31527710 261.50427246]
[269.61352539 267.60852051]
[254.75787354 269.68438721]
[239.90765381 267.56991577]
[226.22180176 261.43008423]
[214.76837158 251.74407959]
[206.44003296 239.26533508]
[207.06401062 254.25234985]
[207.68798828 269.23934937]
[208.31196594 284.22637939]
[208.93594360 299.21337891]
[209.55992126 314.20040894]
[210.18388367 329.18743896]
[210.80786133 344.17443848]
[217.50785828 359.74835205]
[204.39732361 370.49777222]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 148]
[2 147]
[3 146]
[4 145]
[5 144]
[6 143]
[7 142]
[8 141]
[9 120]
[10 119]
[11 118]
[12 117]
[13 116]
[14 115]
[19 114]
[20 113]
[21 112]
[25 58]
[26 57]
[27 56]
[60 93]
[61 92]
[62 91]
[63 90]
[65 87]
[66 86]
[102 111]
[103 110]
[104 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
