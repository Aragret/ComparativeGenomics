%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUAUCCCUCUAGAGGAGCCUGUUCUGUAAUCGAUAAACCCCGAUCAACCUCACCACCUCxxxxxxxxxxCUACGACAAACAGACCUAAAAUCGCUCAUUGCAUACUCUUCAAUCAGCCACAUAGCCCUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[85.71369171 411.06500244]
[85.71369171 396.06500244]
[85.71369171 381.06500244]
[85.71369171 366.06500244]
[85.71369171 351.06500244]
[85.71369171 336.06500244]
[85.71369171 321.06500244]
[85.71369171 306.06500244]
[85.71369171 291.06500244]
[85.71369171 276.06500244]
[70.63518524 273.14096069]
[56.40683365 267.34375000]
[43.57062912 258.89224243]
[32.61591339 248.10647583]
[23.96072006 235.39550781]
[17.93582153 221.24191284]
[14.77208996 206.18345642]
[14.59164906 190.79266357]
[17.40316391 175.65505981]
[23.10144043 161.34687805]
[31.47135925 148.41313171]
[42.19599915 137.34687805]
[54.86863327 128.57035828]
[69.00815582 122.41898346]
[84.07736206 119.12840271]
[86.02534485 90.16108704]
[80.53831482 76.20069885]
[75.05128479 62.24031067]
[69.56425476 48.27991867]
[62.65725327 34.96476364]
[54.40496445 22.43880081]
[46.15267563 9.91283989]
[37.90038681 -2.61312246]
[29.26127052 -14.87549019]
[20.24374199 -26.86232376]
[12.53214836 -31.88060760]
[11.16638756 -39.19363403]
[2.40018010 -51.36547089]
[-6.36602736 -63.53730774]
[-18.06565094 -72.92446899]
[-31.84803200 -78.84442902]
[-45.63041306 -84.76439667]
[-59.41279602 -90.68435669]
[-72.67821503 -82.63400269]
[-88.13922119 -83.95189667]
[-99.85074615 -94.13127899]
[-103.30946350 -109.25797272]
[-97.18543243 -123.51545715]
[-83.83345795 -131.42143250]
[-68.38765717 -129.93589783]
[-56.78725052 -119.63006592]
[-53.49283218 -104.46674347]
[-39.71044922 -98.54677582]
[-25.92806816 -92.62681580]
[-12.14568806 -86.70684814]
[-20.80212593 -98.95700073]
[-26.57428741 -112.80193329]
[-29.18350601 -127.57324982]
[-28.50381660 -142.55784607]
[-24.56803322 -157.03228760]
[-17.56616592 -170.29780579]
[-7.83624411 -181.71395874]
[4.15199709 -190.72961426]
[17.81979752 -196.90953064]
[32.50730896 -199.95533752]
[47.50546265 -199.72000122]
[62.09018707 -196.21487427]
[75.55736542 -189.60919189]
[87.25684357 -180.22184753]
[96.62380219 -168.50604248]
[103.20603180 -155.02738953]
[106.68574524 -140.43658447]
[106.89497375 -125.43804169]
[103.82359314 -110.75585175]
[97.61990356 -97.09883118]
[88.58338165 -85.12630463]
[77.15030670 -75.41627502]
[63.87261963 -68.43751526]
[49.39134216 -64.52693939]
[34.40559006 -63.87334442]
[19.63883209 -66.50827789]
[5.80580950 -72.30351257]
[14.57201672 -60.13167953]
[23.33822441 -47.95984268]
[32.23057556 -35.87985229]
[41.24810410 -23.89302063]
[44.73543549 -23.05278969]
[47.97438049 -20.44301224]
[50.11986160 -16.20635223]
[50.42634964 -10.86541176]
[58.67863846 1.66055048]
[66.93093109 14.18651199]
[75.18321991 26.71247482]
[76.54567719 11.77447891]
[85.08179474 -0.55981189]
[98.58201599 -7.09770536]
[113.55184937 -6.14688778]
[126.11640167 2.04652524]
[133.02337646 15.36169338]
[132.48492432 30.35202599]
[124.64041901 43.13732147]
[111.52039337 50.40814209]
[96.52091980 50.28246307]
[83.52464294 42.79288864]
[89.01167297 56.75327682]
[94.49870300 70.71366882]
[99.98574066 84.67405701]
[111.87812042 93.81578827]
[126.78002167 95.52848053]
[141.68191528 97.24117279]
[156.58383179 98.95385742]
[166.27198792 86.94789886]
[180.92028809 82.10735321]
[195.85450745 85.97682190]
[206.30917358 97.32157135]
[208.94827271 112.52153015]
[202.92964172 126.72644806]
[190.17384338 135.40359497]
[174.75115967 135.78410339]
[161.58296204 127.74658966]
[154.87113953 113.85576630]
[139.96923828 112.14307404]
[125.06732941 110.43038177]
[110.16542816 108.71769714]
[99.07411194 118.81634521]
[113.53421783 121.27699280]
[127.28726196 126.36445618]
[139.86059570 133.90226746]
[150.82241821 143.62977600]
[159.79660034 155.21118164]
[166.47561646 168.24708557]
[170.63101196 182.28829956]
[172.12130737 196.85128784]
[170.89672852 211.43489075]
[167.00093079 225.53747559]
[160.56942749 238.67425537]
[151.82485962 250.39392090]
[141.06930542 260.29418945]
[128.67382812 268.03558350]
[115.06571198 273.35302734]
[100.71369171 276.06500244]
[100.71369171 291.06500244]
[100.71369171 306.06500244]
[100.71369171 321.06500244]
[100.71369171 336.06500244]
[100.71369171 351.06500244]
[100.71369171 366.06500244]
[100.71369171 381.06500244]
[100.71369171 396.06500244]
[100.71369171 411.06500244]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[25 125]
[26 107]
[27 106]
[28 105]
[29 104]
[30 93]
[31 92]
[32 91]
[33 90]
[34 86]
[35 85]
[37 84]
[38 83]
[39 82]
[40 55]
[41 54]
[42 53]
[43 52]
[108 124]
[109 123]
[110 122]
[111 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
