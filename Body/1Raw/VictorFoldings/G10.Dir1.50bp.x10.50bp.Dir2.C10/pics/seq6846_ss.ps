%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAUAAUCUCCCAUAUUGUAACUUACUACUCCGGAAAAAAAGAACCAUUUGGAUACAUAGGxxxxxxxxxxAACAAACUAGGAGGCGUCCUUGCCCUAUUACUAUCCAUCCUCAUCCUAGCAAUAAUCCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 259.82464600]
[92.50000000 244.82463074]
[92.50000000 229.82463074]
[92.50000000 214.82463074]
[92.50000000 199.82463074]
[92.50000000 184.82463074]
[92.50000000 169.82463074]
[92.50000000 154.82463074]
[92.50000000 139.82463074]
[92.50000000 124.82463074]
[78.59744263 119.19267273]
[68.15763092 129.96348572]
[57.71781921 140.73429871]
[47.27800751 151.50509644]
[50.07681656 166.76768494]
[43.33963776 180.74588013]
[29.65705490 188.06478882]
[14.29029942 185.91015625]
[3.14820266 175.11047363]
[0.51512837 159.81842041]
[7.40354681 145.91413879]
[21.16472054 138.74407959]
[36.50719833 141.06529236]
[46.94701004 130.29447937]
[57.38682175 119.52367401]
[67.82663727 108.75286102]
[62.77787781 94.62805939]
[47.87597656 92.91536713]
[37.26755905 100.32585907]
[24.85500526 98.55175018]
[17.25142097 89.09168243]
[2.38837409 87.06935120]
[-12.47467232 85.04701233]
[-19.78988266 98.34558868]
[-31.41762733 108.10059357]
[-45.78534698 112.99272919]
[-60.94993210 112.36038208]
[-74.86048889 106.28907013]
[-85.63573456 95.59989929]
[-91.81840515 81.73847198]
[-92.57234192 66.57945251]
[-87.79558563 52.17295837]
[-78.13414764 40.46735764]
[-64.89466095 33.04573441]
[-49.86766434 30.91180229]
[-35.08542252 34.35416031]
[-22.54712105 42.90725327]
[-13.94846058 55.41435242]
[-10.45233822 70.18396759]
[4.41070843 72.20629883]
[19.27375603 74.22863770]
[35.09621048 66.70202637]
[49.58866501 78.01346588]
[64.49057007 79.72615814]
[74.50859833 79.70321655]
[83.54386139 82.14717102]
[91.09777069 86.73467255]
[88.61264801 71.94196320]
[86.12753296 57.14925766]
[83.64241028 42.35654831]
[68.62145996 40.93056107]
[54.48175049 35.66454697]
[42.18734360 26.91754913]
[32.57649612 15.28595161]
[26.30449295 1.56281781]
[23.79896927 -13.31618595]
[25.23075676 -28.33658600]
[30.50223160 -42.47426605]
[39.25397491 -54.76529312]
[50.88928223 -64.37165070]
[64.61483765 -70.63835144]
[79.49480438 -73.13813019]
[94.51465607 -71.70054626]
[108.65029907 -66.42361450]
[120.93794250 -57.66712189]
[130.53981018 -46.02810669]
[136.80120850 -32.30013275]
[139.29524231 -17.41919899]
[137.85185242 -2.39990878]
[132.56947327 11.73369503]
[123.80823517 24.01796150]
[112.16551208 33.61532974]
[98.43511963 39.87142944]
[100.92024231 54.66413879]
[103.40535736 69.45684814]
[105.89048004 84.24954987]
[118.32991791 92.63169861]
[132.97341919 89.38086700]
[147.61691284 86.13004303]
[162.26042175 82.87921906]
[176.90391541 79.62839508]
[191.54742432 76.37756348]
[205.26747131 70.31455231]
[217.52984619 61.67543793]
[229.79222107 53.03631973]
[242.05458069 44.39720535]
[248.44738770 29.29541397]
[264.75335693 27.54965401]
[274.19830322 40.95581436]
[267.06607056 55.72278214]
[250.69369507 56.65957260]
[238.43133545 65.29869080]
[226.16896057 73.93780518]
[213.90660095 82.57691956]
[228.87577820 81.61602020]
[243.48237610 85.02886963]
[256.47595215 92.52331543]
[266.74423218 103.45779419]
[273.40814209 116.89625549]
[275.89724731 131.68829346]
[273.99847412 146.56762695]
[267.87432861 160.26051331]
[258.04913330 171.59475708]
[245.36392212 179.60009766]
[230.90463257 183.59123230]
[215.90907288 183.22648621]
[201.66091919 178.53710938]
[189.37991333 169.92451477]
[180.11735535 158.12599182]
[174.66618347 144.15156555]
[173.49304199 129.19750977]
[176.69836426 114.54397583]
[184.00775146 101.44538879]
[194.79824829 91.02106476]
[180.15475464 94.27189636]
[165.51124573 97.52272034]
[150.86775208 100.77354431]
[136.22424316 104.02436829]
[121.58074188 107.27519989]
[135.99015808 111.44279480]
[150.98074341 110.91142273]
[164.34223938 117.72833252]
[172.71046448 130.17715454]
[173.97842407 145.12345886]
[167.82687378 158.80404663]
[155.80467224 167.77436829]
[140.93879700 169.77584839]
[126.97223663 164.30455017]
[117.42152405 152.73805237]
[114.69138336 137.98837280]
[107.50000000 124.82463074]
[107.50000000 139.82463074]
[107.50000000 154.82463074]
[107.50000000 169.82463074]
[107.50000000 184.82463074]
[107.50000000 199.82463074]
[107.50000000 214.82463074]
[107.50000000 229.82463074]
[107.50000000 244.82463074]
[107.50000000 259.82464600]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 26]
[12 25]
[13 24]
[14 23]
[27 54]
[28 53]
[31 51]
[32 50]
[33 49]
[57 86]
[58 85]
[59 84]
[60 83]
[87 129]
[88 128]
[89 127]
[90 126]
[91 125]
[92 124]
[93 104]
[94 103]
[95 102]
[96 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
