%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACCACACUUAUCCCCACCUUGGCUAUCAUCACCCGAUGAGGCAACCAGCCAGAACGCCUGxxxxxxxxxxCUCCACUUCAAGUCAACUAGGACUCAUAAUAGUUACAAUCGGCAUCAACCAACCACACCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[77.49018097 151.51905823]
[83.45253754 137.75497437]
[90.98657227 124.78430176]
[99.98904419 112.78508759]
[90.58518982 124.47129059]
[87.96151733 140.07344055]
[73.95450592 145.13830566]
[64.55064392 156.82452393]
[55.14678955 168.51072693]
[45.74293137 180.19692993]
[36.33907700 191.88314819]
[41.96208954 206.17570496]
[39.66961670 221.36254883]
[30.07831573 233.35848999]
[15.76819992 238.93667603]
[0.58861983 236.59660339]
[-11.37719440 226.96774292]
[-16.91049957 212.64021301]
[-14.52286339 197.46804810]
[-4.85654879 185.53247070]
[9.48825455 180.04409790]
[24.65286636 182.47929382]
[34.05672455 170.79307556]
[43.46058273 159.10687256]
[52.86443710 147.42065430]
[62.26829529 135.73445129]
[64.21934509 120.96818542]
[78.89897919 115.06743622]
[88.30284119 103.38122559]
[83.93296051 103.48242188]
[79.51458740 103.00163269]
[65.36727142 98.01631165]
[51.21995163 93.03099060]
[37.07263565 88.04566956]
[22.92531776 83.06034851]
[15.63808441 96.45777893]
[-3.82246327 102.06658936]
[-18.47518730 98.85758972]
[-33.12791443 95.64859772]
[-47.78063583 92.43959808]
[-62.43336105 89.23060608]
[-77.88825989 94.71496582]
[-90.18801117 83.86839294]
[-86.67969513 67.84891510]
[-70.97235870 63.13599396]
[-59.22436523 74.57788086]
[-44.57164001 77.78687286]
[-29.91891670 80.99587250]
[-15.26619148 84.20486450]
[-0.61346710 87.41386414]
[5.65593815 73.78688049]
[-6.31432056 64.74736786]
[-22.59795380 60.02723694]
[-22.57005119 43.07331467]
[-6.27096748 38.40681458]
[2.72519922 52.77710724]
[14.69545746 61.81662750]
[27.91064072 68.91303253]
[42.05795670 73.89835358]
[56.20527267 78.88367462]
[70.35259247 83.86899567]
[84.49990845 88.85431671]
[74.47455597 77.69670105]
[64.44921112 66.53908539]
[54.42386246 55.38146591]
[41.12989807 48.43376923]
[29.64375305 38.78657150]
[20.50428009 26.89245415]
[14.14024448 13.30941105]
[10.85020542 -1.32533026]
[10.78850842 -16.32520294]
[13.95804977 -30.98651314]
[20.21013260 -44.62144852]
[29.25145340 -56.59034729]
[40.65785217 -66.33170319]
[53.89421463 -73.38852692]
[68.33957672 -77.42974854]
[83.31626129 -78.26578522]
[98.12165833 -75.85740662]
[112.06119537 -70.31761169]
[124.48091888 -61.90628815]
[134.79818726 -51.01803589]
[142.52896118 -38.16365814]
[147.31059265 -23.94620132]
[148.91873169 -9.03265381]
[147.27795410 5.87733698]
[142.46522522 20.08429527]
[134.70632935 32.92172241]
[124.36434174 43.78813934]
[118.47523499 57.58373642]
[112.58612823 71.37933350]
[106.69702148 85.17492676]
[118.47916412 75.89154053]
[130.26130676 66.60815430]
[142.04344177 57.32476807]
[143.65594482 41.60295486]
[155.96571350 31.69110107]
[171.66960144 33.46973419]
[181.45075989 45.88362122]
[179.50619507 61.56782150]
[166.98959351 71.21718597]
[151.32682800 69.10690308]
[139.54467773 78.39028931]
[127.76255035 87.67367554]
[115.98040771 96.95706177]
[128.07069397 88.07872009]
[141.11798096 80.67815399]
[154.94252014 74.85732269]
[169.35386658 70.69641876]
[184.15347290 68.25275421]
[199.13748169 67.56000519]
[214.09942627 68.62770081]
[228.83322144 71.44114685]
[243.13586426 75.96157074]
[256.81033325 82.12670898]
[269.66824341 89.85163116]
[281.53244019 99.02989960]
[292.23950195 109.53507996]
[301.64190674 121.22245789]
[309.61013794 133.93101501]
[316.03442383 147.48565674]
[320.82623291 161.69969177]
[323.91958618 176.37725830]
[325.27185059 191.31617737]
[324.86441040 206.31065369]
[322.70285034 221.15408325]
[318.81695557 235.64201355]
[313.26031494 249.57482910]
[306.10940552 262.76058960]
[297.46276855 275.01766968]
[287.43954468 286.17718506]
[276.17776489 296.08538818]
[263.83264160 304.60583496]
[250.57418823 311.62106323]
[236.58509827 317.03448486]
[222.05805969 320.77151489]
[207.19322205 322.78067017]
[192.19537354 323.03427124]
[177.27110291 321.52880859]
[162.62603760 318.28503418]
[148.46192932 313.34762573]
[134.97390747 306.78460693]
[122.34777069 298.68643188]
[110.75747681 289.16461182]
[100.36270142 278.35031128]
[91.30663300 266.39257812]
[83.71404266 253.45608521]
[77.68952942 239.71908569]
[73.31607819 225.37081909]
[70.65394592 210.60894775]
[69.73980713 195.63682556]
[70.58625793 180.66072083]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 29]
[5 28]
[7 26]
[8 25]
[9 24]
[10 23]
[11 22]
[31 62]
[32 61]
[33 60]
[34 59]
[35 58]
[37 50]
[38 49]
[39 48]
[40 47]
[41 46]
[51 57]
[52 56]
[92 105]
[93 104]
[94 103]
[95 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
