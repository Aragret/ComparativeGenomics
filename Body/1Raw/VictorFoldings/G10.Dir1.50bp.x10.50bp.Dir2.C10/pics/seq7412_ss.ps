%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUCAAAAAGGUAUUAGAAAAACCAUUUCAUAACUUUGUCAAAGUUAAAUUAUAGGCUAAAxxxxxxxxxxAUCCCUCUUAUUAAUCAUCAUCCUAGCCCUAAGUCUGGCCUAUGAGUGACUACAAAAAGGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[113.58769989 263.83724976]
[113.58769989 248.83726501]
[113.58769989 233.83726501]
[113.58769989 218.83726501]
[113.58769989 203.83726501]
[113.58769989 188.83726501]
[113.58769989 173.83726501]
[113.58769989 158.83726501]
[113.58769989 143.83726501]
[113.58769989 128.83726501]
[107.59428406 124.32849884]
[102.72206116 138.51516724]
[87.72414398 138.26513672]
[83.32749939 123.92395020]
[95.60745239 115.31096649]
[89.61402893 110.80220032]
[75.20181274 114.96009064]
[60.78960037 119.11798096]
[46.37738419 123.27586365]
[35.26270294 134.53527832]
[20.88943291 130.62907410]
[6.47721767 134.78695679]
[-7.93499851 138.94485474]
[-12.86407661 143.50683594]
[-18.51026917 144.66950989]
[-23.03372002 142.96249390]
[-37.60642242 146.51725769]
[-52.17912674 150.07202148]
[-66.75183105 153.62678528]
[-76.27962494 166.53416443]
[-92.31623840 166.98866272]
[-102.55975342 154.64160156]
[-99.15222931 138.96459961]
[-84.70761871 131.98371887]
[-70.30659485 139.05407715]
[-55.73388672 135.49931335]
[-41.16118622 131.94454956]
[-26.58848190 128.38978577]
[-12.09288597 124.53263092]
[2.31932998 120.37474823]
[16.73154640 116.21685791]
[26.81537056 105.25484467]
[42.21949768 108.86364746]
[56.63171387 104.70576477]
[71.04393005 100.54787445]
[85.45614624 96.38998413]
[97.34852600 87.24825287]
[105.07260895 74.38984680]
[112.79669189 61.53144836]
[120.52078247 48.67304611]
[118.34394073 33.83184052]
[107.25262451 23.73319054]
[91.47936249 24.72301292]
[79.68150330 14.20702744]
[78.85849762 -1.57581770]
[89.49862671 -13.26184082]
[105.28929138 -13.91793251]
[116.86216736 -3.15484357]
[117.35128021 12.64187527]
[128.44259644 22.74052429]
[143.40284729 21.64921379]
[152.91119385 10.04787254]
[162.41955566 -1.55346835]
[171.92791748 -13.15480995]
[181.43627930 -24.75615120]
[190.94462585 -36.35749054]
[180.53617859 -47.18341446]
[171.48124695 -59.16441345]
[163.90692139 -72.13229370]
[157.91955566 -85.90501404]
[153.60319519 -100.28922272]
[151.01843262 -115.08298492]
[150.20155334 -130.07861328]
[151.16403198 -145.06561279]
[153.89234924 -159.83357239]
[158.34822083 -174.17517090]
[164.46907043 -187.88909912]
[172.16899109 -200.78279114]
[181.33985901 -212.67529297]
[191.85296631 -223.39961243]
[203.56069946 -232.80520630]
[216.29872131 -240.76004028]
[229.88818359 -247.15245056]
[244.13832092 -251.89266968]
[258.84909058 -254.91416931]
[273.81399536 -256.17453003]
[288.82290649 -255.65608215]
[303.66513062 -253.36607361]
[318.13235474 -249.33663940]
[332.02142334 -243.62438965]
[345.13739014 -236.30947876]
[357.29611206 -227.49462891]
[368.32690430 -217.30355835]
[378.07492065 -205.87934875]
[386.40332031 -193.38237000]
[393.19512939 -179.98806763]
[398.35507202 -165.88446045]
[401.81066895 -151.26956177]
[403.51342773 -136.34854126]
[403.43945312 -121.33085632]
[401.58975220 -106.42733765]
[397.99029541 -91.84719849]
[392.69165039 -77.79513550]
[385.76815796 -64.46839905]
[377.31704712 -52.05409622]
[367.45693970 -40.72649002]
[356.32626343 -30.64460945]
[344.08126831 -21.94998360]
[330.89385986 -14.76467514]
[316.94915771 -9.18955231]
[302.44296265 -5.30288315]
[287.57885742 -3.15922856]
[272.56558228 -2.78868294]
[257.61383057 -4.19644833]
[242.93354797 -7.36276150]
[228.73080444 -12.24317265]
[215.20498657 -18.76916885]
[202.54597473 -26.84913445]
[193.03761292 -15.24779224]
[183.52925110 -3.64645100]
[174.02090454 7.95489025]
[164.51254272 19.55623055]
[155.00418091 31.15757179]
[155.63658142 40.28192139]
[151.64791870 48.96785736]
[143.65675354 54.92934036]
[133.37918091 56.39712906]
[125.65509796 69.25553131]
[117.93101501 82.11393738]
[110.20692444 94.97233582]
[123.15009308 87.39115143]
[136.14978027 79.90729523]
[151.12635803 79.06937408]
[164.87973022 85.05643463]
[174.47114563 96.58920288]
[177.85118103 111.20342255]
[174.29760742 125.77641296]
[164.56973267 137.19432068]
[150.74615479 143.01741028]
[135.77908325 142.00100708]
[128.58769226 128.83726501]
[128.58769226 143.83726501]
[128.58769226 158.83726501]
[128.58769226 173.83726501]
[128.58769226 188.83726501]
[128.58769226 203.83726501]
[128.58769226 218.83726501]
[128.58769226 233.83726501]
[128.58769226 248.83726501]
[128.58769226 263.83724976]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[16 46]
[17 45]
[18 44]
[19 43]
[21 41]
[22 40]
[23 39]
[26 38]
[27 37]
[28 36]
[29 35]
[47 130]
[48 129]
[49 128]
[50 127]
[51 60]
[52 59]
[61 123]
[62 122]
[63 121]
[64 120]
[65 119]
[66 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
