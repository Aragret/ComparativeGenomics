%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCCCCUCCCCAUACCCAACCCCCUGGUCAACCUCAACCUAGGCCUCCUAUUUAUUCUAGxxxxxxxxxxGUCCUAAUAGUAGAAGAACCCUCCAUAAACCUGGAGUGACUAUAUGGAUGCCCCCCACCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[35.47568512 247.95762634]
[28.84718704 261.41360474]
[22.21868896 274.86956787]
[15.59018993 288.32553101]
[8.96169090 301.78149414]
[2.33319259 315.23745728]
[-4.29530621 328.69342041]
[-10.92380428 342.14938354]
[-17.55230331 355.60534668]
[-19.12765884 372.48596191]
[-35.78465652 375.64517212]
[-43.43153381 360.51370239]
[-31.00826836 348.97686768]
[-24.37977028 335.52090454]
[-17.75127220 322.06491089]
[-11.12277317 308.60894775]
[-4.49427414 295.15298462]
[2.13422441 281.69702148]
[8.76272297 268.24105835]
[15.39122105 254.78509521]
[22.01972008 241.32913208]
[7.87338877 232.54257202]
[-5.29236698 222.34527588]
[-17.33741379 210.84574890]
[-28.13354492 198.16639709]
[-37.56584930 184.44219971]
[-45.53393555 169.81919861]
[-51.95298767 154.45307922]
[-56.75468445 138.50735474]
[-59.88792038 122.15177155]
[-61.31933975 105.56041718]
[-61.03371429 88.90986633]
[-59.03407669 72.37736511]
[-73.67758179 69.12654114]
[-88.32108307 65.87571716]
[-102.99760437 62.77739334]
[-117.70556641 59.83190918]
[-132.41352844 56.88642883]
[-143.73004150 67.50321198]
[-159.12985229 69.40728760]
[-172.69142151 61.86649704]
[-179.20004272 47.78042221]
[-176.15301514 32.56545258]
[-164.72200012 22.07205200]
[-149.30244446 20.33514786]
[-135.82348633 28.02261543]
[-129.46804810 42.17846680]
[-114.76008606 45.12394714]
[-100.05212402 48.06943130]
[-92.82922363 46.28748703]
[-85.07025146 51.23221207]
[-70.42675018 54.48303986]
[-55.78325272 57.73386383]
[-51.59071350 44.54638672]
[-46.28407669 31.76645470]
[-39.90234375 19.48799896]
[-32.49241257 7.80125666]
[-24.10874557 -3.20788217]
[-14.81295586 -13.45850658]
[-4.67336273 -22.87528229]
[6.23551559 -31.38899994]
[17.83350372 -38.93708801]
[30.03536606 -45.46407700]
[42.75142670 -50.92199326]
[55.88822556 -55.27072906]
[69.34922028 -58.47831726]
[83.03547668 -60.52119064]
[96.84641266 -61.38433075]
[110.68052673 -61.06139755]
[124.43614960 -59.55476379]
[138.01217651 -56.87549973]
[151.30883789 -53.04329681]
[164.22840881 -48.08632278]
[176.67594910 -42.04100418]
[188.55996704 -34.95177078]
[199.79312134 -26.87072754]
[210.29284668 -17.85726166]
[219.98200989 -7.97761869]
[228.78936768 2.69559336]
[236.65019226 14.08393192]
[243.50674438 26.10370064]
[249.30859375 38.66656113]
[263.43341064 33.61780548]
[277.55819702 28.56904984]
[284.37481689 14.56292629]
[298.77130127 9.64398193]
[312.08200073 16.22889900]
[326.20678711 11.18014336]
[340.33160400 6.13138676]
[354.45639038 1.08263052]
[368.58120728 -3.96612597]
[354.83081055 -9.96000004]
[347.09167480 -22.80935478]
[348.22326660 -37.76660919]
[357.80749512 -49.30535889]
[372.30316162 -53.16225815]
[386.35440063 -47.91226959]
[394.76959229 -35.49515152]
[394.43945312 -20.49878311]
[385.48669434 -8.46453762]
[400.22448730 -11.25686264]
[414.93246460 -14.20234489]
[429.64041138 -17.14782715]
[444.34838867 -20.09330940]
[459.05633545 -23.03879166]
[467.60995483 -36.32830429]
[483.07287598 -39.59538651]
[496.27120972 -30.90173912]
[499.37463379 -15.40514755]
[490.54193115 -2.29946470]
[475.01339722 0.63993949]
[462.00183105 -8.33083057]
[447.29385376 -5.38534832]
[432.58590698 -2.43986583]
[417.87792969 0.50561678]
[403.16998291 3.45109916]
[397.19030762 7.87705088]
[388.12554932 6.30151749]
[373.62994385 10.15867710]
[359.50515747 15.20743370]
[345.38034058 20.25618935]
[331.25555420 25.30494690]
[317.13073730 30.35370255]
[311.01007080 43.88414764]
[296.75744629 49.20551682]
[282.60696411 42.69385147]
[268.48214722 47.74260712]
[254.35734558 52.79136658]
[258.13784790 67.63847351]
[260.49368286 82.77712250]
[261.40362549 98.07093811]
[260.85946655 113.38212585]
[258.86611938 128.57275391]
[255.44155884 143.50598145]
[250.61660767 158.04725647]
[244.43475342 172.06558228]
[236.95169067 185.43466187]
[228.23481750 198.03405762]
[218.36268616 209.75027466]
[207.42420959 220.47773743]
[195.51795959 230.11982727]
[182.75117493 238.58964539]
[169.23887634 245.81092834]
[155.10281372 251.71858215]
[140.47033691 256.25939941]
[125.47325134 259.39248657]
[110.24667358 261.08956909]
[94.92778778 261.33541870]
[79.65460205 260.12780762]
[64.56469727 257.47756958]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 21]
[2 20]
[3 19]
[4 18]
[5 17]
[6 16]
[7 15]
[8 14]
[9 13]
[33 53]
[34 52]
[35 51]
[36 49]
[37 48]
[38 47]
[82 128]
[83 127]
[84 126]
[87 123]
[88 122]
[89 121]
[90 120]
[91 119]
[100 118]
[101 116]
[102 115]
[103 114]
[104 113]
[105 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
