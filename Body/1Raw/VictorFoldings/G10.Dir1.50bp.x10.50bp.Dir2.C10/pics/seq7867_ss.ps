%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCCUAGAAUUAAUUCCCCUAAAAAUCUUUGAAAUAGGGCCCGUAUUUACCCUAUAGCACCxxxxxxxxxxCUACUUCUCCAUAAUAUUCAUCCCUGUAGCAUUGUUCGUUACAUGGUCCAUCAUAGAAUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[103.08827972 275.21386719]
[103.08827972 260.21386719]
[103.08827972 245.21388245]
[103.08827972 230.21388245]
[103.08827972 215.21388245]
[103.08827972 200.21388245]
[103.08827972 185.21388245]
[103.08827972 170.21388245]
[103.08827972 155.21388245]
[103.08827972 140.21388245]
[88.75437927 137.11480713]
[77.02544403 129.29565430]
[69.30484009 118.18729401]
[66.33066559 105.57347107]
[68.11778259 93.31111145]
[74.00873566 83.05853271]
[63.79525757 72.07286835]
[53.58177567 61.08720398]
[43.36829758 50.10153961]
[37.07305908 47.76113892]
[33.48785782 43.24697876]
[32.97021484 38.43994904]
[23.22256279 27.03892708]
[13.47490978 15.63790512]
[2.55671573 20.09597778]
[-9.47075176 20.72494507]
[-21.27587891 17.29057312]
[-31.49772263 10.01758957]
[-38.90265274 -0.41802144]
[-42.53217697 -12.94958878]
[-57.39522552 -10.92725468]
[-72.25827026 -8.90491962]
[-84.88688660 1.55692053]
[-100.16517639 -4.40175819]
[-102.37615204 -20.65117836]
[-89.24534607 -30.47532845]
[-74.28060913 -23.76796722]
[-59.41756058 -25.79030037]
[-44.55451202 -27.81263542]
[-37.78639984 -41.19892120]
[-44.96890640 -54.36750412]
[-52.15141678 -67.53608704]
[-61.89906693 -78.93710327]
[-73.79145050 -88.07884216]
[-85.68383026 -97.22057343]
[-97.57621002 -106.36231232]
[-109.46858978 -115.50404358]
[-121.36096954 -124.64577484]
[-135.52499390 -118.70641327]
[-150.75903320 -120.66069794]
[-162.96524048 -129.98294067]
[-168.86018372 -144.16551208]
[-166.85815430 -159.39335632]
[-157.49769592 -171.57028198]
[-143.29670715 -177.42073059]
[-128.07521057 -175.37098694]
[-115.92769623 -165.97239685]
[-110.12178040 -151.75315857]
[-112.21923065 -136.53816223]
[-100.32685089 -127.39642334]
[-88.43447113 -118.25469208]
[-76.54209137 -109.11295319]
[-64.64971161 -99.97122192]
[-52.75733185 -90.82948303]
[-58.16135025 -104.82221985]
[-59.48384094 -119.76380920]
[-56.62159348 -134.48818970]
[-49.79798126 -147.84626770]
[-39.54552841 -158.79557800]
[-26.66433907 -166.48159790]
[-12.15967846 -170.30453491]
[2.83650184 -169.96601868]
[17.15388489 -165.49247742]
[29.67513084 -157.23303223]
[39.42306900 -145.83226013]
[45.63696671 -132.17988586]
[47.83188248 -117.34133911]
[45.83652115 -102.47464752]
[39.80660629 -88.74001312]
[30.21271706 -77.20930481]
[17.80356789 -68.78237915]
[3.54757881 -64.11688995]
[-11.44269943 -63.57693481]
[-25.99741364 -67.20465088]
[-38.98283386 -74.71859741]
[-31.80032349 -61.55001068]
[-24.61781502 -48.38142776]
[-7.34596348 -53.78591156]
[10.16694832 -50.89856339]
[24.22655678 -40.64561462]
[32.01006317 -25.47286987]
[32.13084412 -8.76887608]
[24.87593079 5.89025354]
[34.62358093 17.29127502]
[44.37123489 28.69229507]
[54.35396194 39.88806152]
[64.56744385 50.87372589]
[74.78092194 61.85939026]
[84.99440002 72.84505463]
[107.54738617 66.71750641]
[130.30119324 78.36892700]
[140.09793091 104.34156036]
[155.09063721 104.80960083]
[169.12550354 97.50667572]
[181.60516357 105.63732910]
[196.59785461 106.10537720]
[211.59054565 106.57341766]
[226.58325195 107.04145813]
[241.57594299 107.50949860]
[256.56863403 107.97753906]
[266.85357666 96.19814301]
[282.31182861 93.83671570]
[295.64450073 102.00824738]
[300.55630493 116.85440063]
[294.72802734 131.36526489]
[280.91162109 138.68927002]
[265.63076782 135.36822510]
[256.10058594 122.97023773]
[241.10789490 122.50219727]
[226.11520386 122.03415680]
[211.12251282 121.56610870]
[196.12980652 121.09806824]
[181.13711548 120.63002777]
[168.17462158 127.96643066]
[154.62258911 119.80229950]
[139.62989807 119.33425140]
[134.24449158 124.55416107]
[147.17742920 132.15278625]
[160.11036682 139.75141907]
[174.99873352 141.57798767]
[186.61970520 151.06236267]
[191.39306641 165.28259277]
[187.84828186 179.85771179]
[177.07740784 190.29745483]
[162.39872742 193.38554382]
[148.33442688 188.17059326]
[139.21743774 176.25923157]
[137.85644531 161.32145691]
[130.66506958 148.15771484]
[123.47367859 134.99397278]
[118.08827972 140.21388245]
[118.08827972 155.21388245]
[118.08827972 170.21388245]
[118.08827972 185.21388245]
[118.08827972 200.21388245]
[118.08827972 215.21388245]
[118.08827972 230.21388245]
[118.08827972 245.21388245]
[118.08827972 260.21386719]
[118.08827972 275.21386719]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[16 99]
[17 98]
[18 97]
[19 96]
[22 95]
[23 94]
[24 93]
[30 39]
[31 38]
[32 37]
[40 87]
[41 86]
[42 85]
[43 64]
[44 63]
[45 62]
[46 61]
[47 60]
[48 59]
[102 126]
[103 125]
[105 123]
[106 122]
[107 121]
[108 120]
[109 119]
[110 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
