%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCCCAAAGACACCCCCCACAGUUUAUGUAGCUUACCUCCUCAAAGCAAUACACUGAAAAUxxxxxxxxxxCACCAUUGGCAGCCUAGCAUUAGCAGGAAUACCUUUCCUCACAGGUUUCUACUCCAAAGACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[106.89280701 460.37539673]
[106.89280701 445.37539673]
[106.89280701 430.37539673]
[106.89280701 415.37539673]
[106.89280701 400.37539673]
[106.89280701 385.37539673]
[106.89280701 370.37539673]
[106.89280701 355.37539673]
[106.89280701 340.37539673]
[106.89280701 325.37539673]
[90.17687225 319.90246582]
[76.28688812 309.07321167]
[66.87710571 294.15707397]
[63.07504272 276.91149902]
[65.34642029 259.37469482]
[73.43816376 243.62490845]
[86.40649414 231.53404236]
[102.72698212 224.54521179]
[101.49637604 209.59577942]
[100.26576233 194.64633179]
[91.51038361 182.59674072]
[98.08942413 168.20831299]
[96.85881042 153.25888062]
[95.62820435 138.30944824]
[72.03843689 126.54953003]
[61.51558685 102.38256836]
[68.97715759 77.10218811]
[58.87172318 66.01705170]
[48.76628876 54.93191910]
[36.52333450 46.26531219]
[22.70975113 40.41852188]
[8.89616871 34.57173538]
[4.47117233 35.29220200]
[0.46568227 34.59967041]
[-2.71886277 32.80930328]
[-4.82901001 30.33614540]
[-5.77929544 27.63651848]
[-19.06663704 20.67616272]
[-32.35397720 13.71580601]
[-45.64131927 6.75544977]
[-59.06876755 0.06937453]
[-72.63066864 -6.33960104]
[-86.19255829 -12.74857712]
[-99.75445557 -19.15755272]
[-112.78590393 -10.90013790]
[-128.21278381 -11.02174282]
[-141.11244202 -19.48356247]
[-147.36863708 -33.58546066]
[-144.98504639 -48.82757568]
[-134.72225952 -60.34619904]
[-119.85509491 -64.46578217]
[-105.12761688 -59.87178421]
[-95.23930359 -48.03013229]
[-93.34548187 -32.71944809]
[-79.78358459 -26.31047249]
[-66.22168732 -19.90149689]
[-52.65979385 -13.49252224]
[-47.88824844 -14.25513363]
[-42.59359741 -11.98477077]
[-38.68096161 -6.53189135]
[-25.39362144 0.42846465]
[-12.10628033 7.38882065]
[1.18106091 14.34917736]
[14.74295712 20.75815201]
[28.55653954 26.60494041]
[42.37012100 32.45172882]
[33.54891968 20.31968880]
[28.25724983 6.28408337]
[26.87331009 -8.65193748]
[29.49601746 -23.42087173]
[35.93792343 -36.96715546]
[45.73860931 -48.32262039]
[58.19760895 -56.67566299]
[72.42445374 -61.42928314]
[87.40232849 -62.24372864]
[102.06073761 -59.06079483]
[115.35201263 -52.10796356]
[126.32621765 -41.88217163]
[134.19900513 -29.11426926]
[138.40768433 -14.71680260]
[138.65145874 0.28121623]
[134.91290283 14.80785465]
[127.45922089 27.82486916]
[116.82314301 38.40190887]
[103.76483917 45.78302002]
[89.21762085 49.44065857]
[74.22119141 49.11340714]
[59.85142136 44.82648468]
[69.95685577 55.91161728]
[80.06229401 66.99674988]
[85.32796478 63.54944992]
[91.19016266 60.95436096]
[97.50895691 59.31446838]
[104.12670135 58.70944214]
[110.87201691 59.19264603]
[117.56419373 60.78877640]
[124.01800537 63.49225235]
[130.04887390 67.26647949]
[142.88253784 59.50134277]
[150.31042480 44.88086319]
[166.69833374 44.27368164]
[175.18777466 58.30441666]
[167.04554749 72.53944397]
[150.64767456 72.33499908]
[137.81401062 80.10013580]
[142.36129761 94.39426422]
[157.32258606 93.31719208]
[172.28385925 92.24011993]
[187.24514771 91.16305542]
[202.20642090 90.08598328]
[213.75158691 78.94646454]
[229.63977051 81.17024231]
[237.68292236 95.05142212]
[231.71102905 109.94155884]
[216.30520630 114.41820526]
[203.28349304 105.04726410]
[188.32221985 106.12433624]
[173.36093140 107.20140076]
[158.39965820 108.27847290]
[143.43836975 109.35554504]
[139.35189819 117.96615601]
[133.64334106 125.28201294]
[126.67183685 131.01820374]
[118.84125519 134.98210144]
[110.57763672 137.07884216]
[111.80825043 152.02827454]
[113.03886414 166.97770691]
[121.88225555 180.09658813]
[115.21519470 193.41572571]
[116.44580841 208.36515808]
[117.67642212 223.31459045]
[130.02464294 225.68107605]
[141.42416382 230.95846558]
[151.20066833 238.82867432]
[158.77732849 248.82046509]
[163.70877075 260.33755493]
[165.70726013 272.69436646]
[164.65950012 285.15664673]
[160.63304138 296.98522949]
[153.87191772 307.47988892]
[144.78190613 316.02069092]
[133.90618896 322.10464478]
[121.89280701 325.37539673]
[121.89280701 340.37539673]
[121.89280701 355.37539673]
[121.89280701 370.37539673]
[121.89280701 385.37539673]
[121.89280701 400.37539673]
[121.89280701 415.37539673]
[121.89280701 430.37539673]
[121.89280701 445.37539673]
[121.89280701 460.37539673]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[18 131]
[19 130]
[20 129]
[22 127]
[23 126]
[24 125]
[27 90]
[28 89]
[29 88]
[30 66]
[31 65]
[32 64]
[37 63]
[38 62]
[39 61]
[40 60]
[41 57]
[42 56]
[43 55]
[44 54]
[98 105]
[99 104]
[106 120]
[107 119]
[108 118]
[109 117]
[110 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
