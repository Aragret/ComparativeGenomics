%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCACACCCACCCAAGAACAGGGUUUGUUAAGAUGGCAGAGCCCGGUAAUCGCAUAAAACUUxxxxxxxxxxUGACCCCUCUCCUUCAUAAAUUAUUCAGCUUCCUACACUAUUAAAGUUUACCACAACCACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 303.10211182]
[92.50000000 288.10211182]
[92.50000000 273.10211182]
[92.50000000 258.10211182]
[92.50000000 243.10209656]
[92.50000000 228.10209656]
[92.50000000 213.10209656]
[92.50000000 198.10209656]
[92.50000000 183.10209656]
[92.50000000 168.10209656]
[67.58654785 160.36152649]
[47.37266541 143.86923218]
[34.86862946 152.15470886]
[27.63858795 166.22726440]
[12.75529003 166.80754089]
[0.25125426 175.09301758]
[-12.25278187 183.37847900]
[-24.75681686 191.66395569]
[-23.13680077 206.88349915]
[-28.78599739 221.10830688]
[-40.40626144 231.06962585]
[-55.32733917 234.47843933]
[-70.12048340 230.55140686]
[-81.38632965 220.19093323]
[-86.53607178 205.77780151]
[-84.38633728 190.62400818]
[-75.43112183 178.21180725]
[-61.72826385 171.39343262]
[-46.42658234 171.73568726]
[-33.04229355 179.15992737]
[-20.53825569 170.87445068]
[-8.03422070 162.58897400]
[4.46981525 154.30349731]
[10.80548573 140.82356262]
[26.58315659 139.65066528]
[39.08719254 131.36518860]
[36.02046204 125.71500397]
[33.48022461 119.76477814]
[31.49582481 113.56381226]
[30.09197998 107.16426086]
[29.28848076 100.62071228]
[29.09996605 93.98973083]
[29.53573036 87.32932281]
[30.59956741 80.69850922]
[16.78598404 74.85171509]
[2.97240186 69.00492859]
[-13.97072029 68.39916992]
[-18.07895470 51.95049667]
[-3.41037655 43.44936752]
[8.81919003 55.19134521]
[22.63277245 61.03813553]
[36.44635391 66.88492584]
[44.73183060 54.38088608]
[33.96315002 43.93887711]
[17.96441650 42.74723816]
[9.04040909 29.41525841]
[14.03686523 14.17009544]
[29.12093163 8.70653248]
[42.72140121 17.21574783]
[44.40515900 33.17020035]
[55.17383957 43.61220932]
[73.36465454 33.82917023]
[93.39206696 29.68357658]
[113.56790924 31.40691376]
[132.22486877 38.74084091]
[147.85423279 50.96819305]
[159.44328308 41.44485474]
[171.03233337 31.92151642]
[182.62138367 22.39818001]
[194.21041870 12.87484169]
[205.79946899 3.35150456]
[197.64949036 -9.26101494]
[190.99038696 -22.72036552]
[185.90898132 -36.85107422]
[182.47149658 -51.46892548]
[180.72276306 -66.38333893]
[180.68559265 -81.39987183]
[182.36044312 -96.32276154]
[185.72549438 -110.95745850]
[190.73686218 -125.11315918]
[197.32923889 -138.60531616]
[205.41665649 -151.25804138]
[214.89369202 -162.90637207]
[225.63677979 -173.39845276]
[237.50587463 -182.59750366]
[250.34622192 -190.38357544]
[263.99044800 -196.65518188]
[278.26065063 -201.33053589]
[292.97079468 -204.34872437]
[307.92910767 -205.67036438]
[322.94058228 -205.27822876]
[337.80947876 -203.17744446]
[352.34197998 -199.39538574]
[366.34863281 -193.98138428]
[379.64682007 -187.00598145]
[392.06317139 -178.56015015]
[403.43582153 -168.75399780]
[413.61648560 -157.71534729]
[422.47244263 -145.58811951]
[429.88824463 -132.53041077]
[435.76724243 -118.71247864]
[440.03271484 -104.31444550]
[442.62911987 -89.52402496]
[443.52261353 -74.53404999]
[442.70147705 -59.53993225]
[440.17648315 -44.73715973]
[435.98049927 -30.31871033]
[430.16827393 -16.47256279]
[422.81558228 -3.37922907]
[414.01824951 8.79059315]
[403.89096069 19.87824440]
[392.56576538 29.73917389]
[380.19033813 38.24482727]
[366.92596436 45.28430939]
[352.94558716 50.76585388]
[338.43151855 54.61799240]
[323.57290649 56.79050827]
[308.56350708 57.25507355]
[293.59899902 56.00563431]
[278.87445068 53.05847931]
[264.58187866 48.45203400]
[250.90753174 42.24634552]
[238.02975464 34.52232742]
[226.11640930 25.38066673]
[215.32281494 14.94055271]
[203.73376465 24.46389008]
[192.14471436 33.98722839]
[180.55566406 43.51056671]
[168.96661377 53.03390121]
[157.37756348 62.55723953]
[162.52256775 71.98083496]
[166.13220215 82.09250641]
[168.11779785 92.64393616]
[168.43060303 103.37601471]
[167.06295776 114.02518463]
[164.04841614 124.32993317]
[159.46102905 134.03720093]
[153.41345215 142.90861511]
[146.05416870 150.72631836]
[137.56393433 157.29830933]
[128.15122986 162.46322632]
[118.04721069 166.09420776]
[107.50000000 168.10209656]
[107.50000000 183.10209656]
[107.50000000 198.10209656]
[107.50000000 213.10209656]
[107.50000000 228.10209656]
[107.50000000 243.10209656]
[107.50000000 258.10211182]
[107.50000000 273.10211182]
[107.50000000 288.10211182]
[107.50000000 303.10211182]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[12 36]
[13 35]
[15 33]
[16 32]
[17 31]
[18 30]
[44 52]
[45 51]
[46 50]
[53 61]
[54 60]
[66 130]
[67 129]
[68 128]
[69 127]
[70 126]
[71 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
