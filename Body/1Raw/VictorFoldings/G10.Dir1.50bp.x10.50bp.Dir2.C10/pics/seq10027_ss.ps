%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAUCUUCUUCGAAACCACACUUAUCCCCACCUUGGCUAUCAUCACCCGAUGAGGCAACCAxxxxxxxxxxUCCAUCAUCACCUCAACCCAAAAAGGCAUAAUUAAACUUUACUUCCUCUCUUUCUUCUUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[87.38055420 136.86286926]
[93.14749908 123.01576996]
[81.44787598 132.40292358]
[75.52616882 147.07412720]
[60.75712967 149.00408936]
[49.05750656 158.39125061]
[37.35788345 167.77841187]
[25.65826035 177.16557312]
[14.77943516 187.49278259]
[4.79670906 198.68855286]
[-5.18601751 209.88430786]
[-8.59524059 225.33383179]
[-22.84043121 229.68399048]
[-32.82315826 240.87974548]
[-31.66930962 256.64187622]
[-42.06200027 268.54849243]
[-57.83543015 269.53561401]
[-69.63150024 259.01763916]
[-70.45182037 243.23463440]
[-59.80970001 231.55043030]
[-44.01892471 230.89701843]
[-34.03619766 219.70126343]
[-31.34100723 205.05253601]
[-16.38178253 199.90158081]
[-6.39905691 188.70582581]
[3.58366942 177.51005554]
[-11.35795212 178.83215332]
[-24.30488014 171.25740051]
[-30.47348404 157.58448792]
[-27.58458710 142.86531067]
[-16.70557785 132.53829956]
[-1.85603571 130.41908264]
[11.47743034 137.29066467]
[18.36837006 150.61413574]
[16.27109909 165.46595764]
[27.97072220 156.07879639]
[39.67034531 146.69163513]
[51.36996841 137.30447388]
[56.45483780 123.30470276]
[72.06070709 120.70330811]
[83.76033783 111.31614685]
[83.91637421 96.31695557]
[72.41456604 86.68843079]
[60.91276550 77.05990601]
[45.36438751 74.13440704]
[40.57186890 60.03189087]
[29.07006454 50.40336609]
[22.53241348 48.86497879]
[18.41306305 44.83232880]
[17.30093575 40.12715530]
[6.20962048 30.02850342]
[-4.88169479 19.92985344]
[-15.97301006 9.83120441]
[-32.10134125 6.86322165]
[-37.33946991 -8.67685795]
[-26.29885292 -20.80273247]
[-10.33713341 -17.04034233]
[-5.87436104 -1.26011062]
[5.21695471 8.83853912]
[16.30826950 18.93718910]
[27.39958572 29.03583717]
[38.69858932 38.90156174]
[50.20039368 48.53008652]
[64.92608643 50.76688385]
[70.54129028 65.55809784]
[82.04309082 75.18663025]
[93.54489899 84.81515503]
[88.06727600 70.85106659]
[82.58965302 56.88698196]
[71.68719482 46.58472824]
[62.79413605 34.50526428]
[56.19489288 21.03492737]
[52.10053253 6.60453606]
[50.64200211 -8.32438564]
[51.86595535 -23.27436638]
[55.73323822 -37.76726532]
[62.12017059 -51.33955765]
[70.82247925 -63.55715942]
[81.56183624 -74.02932739]
[93.99476624 -82.42111969]
[107.72363281 -88.46414185]
[122.30934906 -91.96513367]
[137.28541565 -92.81211853]
[152.17286682 -90.97800446]
[166.49554443 -86.52144623]
[179.79537964 -79.58499146]
[191.64700317 -70.39047241]
[201.67135620 -59.23196793]
[209.54785156 -46.46635437]
[215.02455139 -32.50191116]
[217.92631531 -17.78526497]
[218.16033936 -2.78708982]
[215.71913147 12.01292610]
[210.68075562 26.14143753]
[203.20637512 39.14657211]
[193.53501892 50.61239243]
[181.97602844 60.17218399]
[168.89907837 67.52020264]
[154.72241211 72.42144012]
[139.89636230 74.71932220]
[127.46257782 83.10984802]
[115.02879333 91.50037384]
[129.96310425 90.09807587]
[144.89741516 88.69577026]
[159.83171082 87.29346466]
[165.58737183 73.11139679]
[177.28196716 63.23744583]
[192.22817993 59.94057465]
[206.99147034 63.97837448]
[218.17935181 74.42298889]
[223.22091675 88.87432861]
[220.95765686 104.01157379]
[211.90966797 116.35630035]
[198.15608215 123.07178497]
[182.85740662 122.61485291]
[169.52912903 115.09049988]
[161.23402405 102.22777557]
[146.29971313 103.63007355]
[131.36540222 105.03237915]
[116.43109894 106.43468475]
[130.20948792 112.36393738]
[143.98786926 118.29319000]
[158.95817566 119.23657990]
[173.49703979 122.92729187]
[187.10473633 129.23846436]
[199.31350708 137.95315552]
[209.70370483 148.77182007]
[217.91821289 161.32260132]
[223.67465210 175.17408752]
[226.77516174 189.85014343]
[227.11315918 204.84632874]
[224.67704773 219.64718628]
[219.55055237 233.74397278]
[211.90989685 246.65211487]
[202.01768494 257.92794800]
[190.21397400 267.18386841]
[176.90446472 274.10174561]
[162.54664612 278.44378662]
[147.63404846 280.06072998]
[132.67926025 278.89700317]
[118.19631958 274.99261475]
[104.68303680 268.48175049]
[92.60390472 259.58822632]
[82.37413025 248.61775208]
[74.34532166 235.94737244]
[68.79346466 222.01263428]
[65.90939331 207.29251099]
[65.79223633 192.29296875]
[68.44601440 177.52958679]
[73.77952576 163.50982666]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 41]
[3 40]
[5 38]
[6 37]
[7 36]
[8 35]
[9 26]
[10 25]
[11 24]
[13 22]
[14 21]
[42 67]
[43 66]
[44 65]
[46 63]
[47 62]
[50 61]
[51 60]
[52 59]
[53 58]
[102 120]
[103 119]
[104 118]
[105 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
