%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAUUACAUCACAAGACGUCUUGCACUCAUGAGCUGUCCCCACAUUAGGCUUAAAAACAGAxxxxxxxxxxGCUUAGGCGCUAUCACCACUCUGUUCGCAGCAGUCUGCGCCCUUACACAAAAUGACAUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[96.41688538 300.44610596]
[96.41688538 285.44610596]
[96.41688538 270.44610596]
[96.41688538 255.44610596]
[96.41688538 240.44610596]
[96.41688538 225.44610596]
[96.41688538 210.44610596]
[96.41688538 195.44610596]
[96.41688538 180.44610596]
[96.41688538 165.44610596]
[93.93176270 150.65339661]
[89.03021240 136.47683716]
[76.85837555 127.71063232]
[61.85918808 127.55459595]
[46.86000061 127.39855957]
[50.65073776 134.20869446]
[52.37842178 142.53675842]
[51.64197922 151.82714844]
[48.17910767 161.43406677]
[41.88470459 170.65440369]
[32.82179642 178.76399231]
[19.43551254 185.53210449]
[6.04922819 192.30021667]
[-7.33705664 199.06832886]
[-15.85379410 213.08250427]
[-32.24048233 212.44343567]
[-39.63990402 197.80851746]
[-30.44016647 184.23292542]
[-14.10517120 185.68205261]
[-0.71888649 178.91392517]
[12.66739845 172.14581299]
[26.05368233 165.37770081]
[22.19652367 150.88211060]
[7.21680927 151.66195679]
[-6.23774052 161.03782654]
[-20.96784019 153.82977295]
[-21.82042694 137.45280457]
[-7.91843176 128.75415039]
[6.43696451 136.68223572]
[21.41667938 135.90238953]
[24.97144127 121.32968903]
[12.03338432 113.73978424]
[-0.90467131 106.14987183]
[-14.14725685 99.10473633]
[-27.67144775 92.61656952]
[-41.19563675 86.12841034]
[-57.49694824 87.91704559]
[-66.97711945 74.53578186]
[-59.88376236 59.75009918]
[-43.51391220 58.77025223]
[-34.70746994 72.60421753]
[-21.18328094 79.09238434]
[-7.65909195 85.58055115]
[-4.92484283 84.72543335]
[-1.67693985 84.93781281]
[1.66618562 86.42287445]
[4.61840868 89.22562408]
[6.68523693 93.21181488]
[19.62329292 100.80172729]
[32.56134796 108.39163208]
[47.01603699 112.39937592]
[62.01522446 112.55541229]
[77.01441193 112.71144867]
[76.69683075 87.76193237]
[97.40660095 73.75160217]
[103.18287659 59.90838623]
[108.95914459 46.06517029]
[114.73542023 32.22195053]
[120.51169586 18.37873459]
[126.28796387 4.53551626]
[113.84446716 -3.93467712]
[103.36096954 -14.73658466]
[95.26676941 -27.42787361]
[89.89331818 -41.48884583]
[87.46066284 -56.34371185]
[88.06840515 -71.38417816]
[91.69167328 -85.99433899]
[98.18208313 -99.57592010]
[107.27386475 -111.57276917]
[118.59471130 -121.49362183]
[131.68104553 -128.93222046]
[145.99699402 -133.58396912]
[160.95631409 -135.25836182]
[175.94644165 -133.88685608]
[190.35353088 -129.52560425]
[203.58763123 -122.35318756]
[215.10681152 -112.66333008]
[224.43936157 -100.85281372]
[231.20312500 -87.40527344]
[235.12113953 -72.87137604]
[236.03294373 -57.84627914]
[233.90121460 -42.94525146]
[228.81324768 -28.77848053]
[220.97738647 -15.92608356]
[210.71449280 -4.91436005]
[198.44485474 3.80576682]
[184.67086792 9.87721348]
[169.95660400 13.05135822]
[154.90458679 13.19822121]
[140.13117981 10.31178856]
[134.35490417 24.15500641]
[128.57864380 37.99822617]
[122.80236816 51.84144211]
[117.02609253 65.68466187]
[111.24981689 79.52787781]
[119.76091003 91.87944794]
[134.75360107 91.41140747]
[149.74630737 90.94336700]
[164.73899841 90.47532654]
[179.73168945 90.00727844]
[193.37838745 80.91333771]
[207.95533752 88.42627716]
[208.46704102 104.81744385]
[194.38708496 113.22499847]
[180.19973755 104.99997711]
[165.20704651 105.46801758]
[150.21434021 105.93605804]
[135.22164917 106.40410614]
[120.22895050 106.87214661]
[115.97340393 113.04793549]
[122.41466522 126.59452820]
[107.46231842 125.39950562]
[103.20677185 131.57528687]
[108.10832214 145.75184631]
[111.58441925 131.16018677]
[119.76108551 118.58472443]
[131.68763733 109.48762512]
[145.97738647 104.92658234]
[160.96887207 105.43192291]
[174.91905212 110.94487000]
[186.20593262 120.82445526]
[193.51722717 133.92198181]
[196.00282288 148.71459961]
[193.37374878 163.48240662]
[185.93568420 176.50834656]
[174.55342102 186.27789307]
[160.55039978 191.65518188]
[145.55471802 192.01498413]
[131.30990601 187.31544495]
[119.47222137 178.10301208]
[111.41688538 165.44610596]
[111.41688538 180.44610596]
[111.41688538 195.44610596]
[111.41688538 210.44610596]
[111.41688538 225.44610596]
[111.41688538 240.44610596]
[111.41688538 255.44610596]
[111.41688538 270.44610596]
[111.41688538 285.44610596]
[111.41688538 300.44610596]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 124]
[12 123]
[13 63]
[14 62]
[15 61]
[21 32]
[22 31]
[23 30]
[24 29]
[33 40]
[34 39]
[41 60]
[42 59]
[43 58]
[44 53]
[45 52]
[46 51]
[65 105]
[66 104]
[67 103]
[68 102]
[69 101]
[70 100]
[106 119]
[107 118]
[108 117]
[109 116]
[110 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
