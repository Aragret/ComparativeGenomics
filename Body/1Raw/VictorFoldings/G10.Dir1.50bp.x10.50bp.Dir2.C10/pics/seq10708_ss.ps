%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGAGCCACAACCCAAACAACCCAGCUCUCCCUAAGCUUCAAACUAGACUACUUCUCCAUAAxxxxxxxxxxUCGGUUUCAUCCUCGCCUUAGCAUGAUUUAUCCUACACUCCAACUCAUGAGACCCACAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[84.68333435 264.78347778]
[84.68333435 249.78346252]
[84.68333435 234.78346252]
[84.68333435 219.78346252]
[84.68333435 204.78346252]
[84.68333435 189.78346252]
[84.68333435 174.78346252]
[84.68333435 159.78346252]
[84.68333435 144.78346252]
[84.68333435 129.78346252]
[71.44075012 122.73832703]
[59.00130844 131.12046814]
[46.56187057 139.50260925]
[34.12242889 147.88475037]
[38.30307388 162.42358398]
[37.78433609 177.54264832]
[32.61703110 191.76074219]
[23.30740547 203.68492126]
[10.76751518 212.14697266]
[-3.77410674 216.31787109]
[-18.89282036 215.78900146]
[-33.10744858 210.61216736]
[-45.02538300 201.29455566]
[-53.47903061 188.74899292]
[-57.64019012 174.20458984]
[-57.10118866 159.08622742]
[-51.91483688 144.87507629]
[-42.58923721 132.96337891]
[-30.03801918 124.51814270]
[-15.49082088 120.36673737]
[-0.37282994 120.91586304]
[13.83484650 126.11174011]
[25.74028587 135.44531250]
[38.17972565 127.06317139]
[50.61916733 118.68103027]
[63.05860519 110.29888916]
[68.40669250 95.66542053]
[78.24997711 86.82654572]
[89.01041412 84.54051208]
[97.39598083 87.76744843]
[94.29766083 73.09092712]
[91.19933319 58.41440201]
[88.10101318 43.73787689]
[85.00269318 29.06134987]
[70.04866028 30.43741798]
[55.03599930 30.06808853]
[40.16772461 27.95835304]
[25.64492035 24.13674927]
[11.66398907 18.65495491]
[-1.58599377 11.58710575]
[-13.92583656 3.02878809]
[-25.18865776 -6.90425777]
[-35.22213745 -18.07769775]
[-43.89059067 -30.34042549]
[-51.07677841 -43.52659988]
[-56.68352509 -57.45789337]
[-60.63499451 -71.94589996]
[-62.87775803 -86.79469299]
[-63.38148117 -101.80344391]
[-62.13934708 -116.76919556]
[-59.16815948 -131.48954773]
[-54.50810242 -145.76541138]
[-48.22219086 -159.40373230]
[-40.39543915 -172.22006226]
[-31.13369179 -184.04109192]
[-20.56220818 -194.70693970]
[-8.82395172 -204.07336426]
[3.92232871 -212.01368713]
[17.50425529 -218.42054749]
[31.73814964 -223.20727539]
[46.43151093 -226.30915833]
[61.38563156 -227.68421936]
[76.39826965 -227.31388855]
[91.26640320 -225.20315552]
[105.78895569 -221.38058472]
[119.76951599 -215.89785767]
[133.01902771 -208.82913208]
[145.35830688 -200.26998901]
[156.62045288 -190.33619690]
[166.65319824 -179.16207886]
[175.32083130 -166.89877319]
[182.50613403 -153.71212769]
[188.11195374 -139.78045654]
[192.06245422 -125.29218292]
[194.30422974 -110.44324493]
[194.80694580 -95.43444824]
[193.56381226 -80.46878815]
[190.59164429 -65.74863434]
[185.93063354 -51.47308350]
[179.64381409 -37.83517838]
[171.81620789 -25.01936531]
[162.55366516 -13.19896030]
[151.98147583 -2.53382134]
[140.24259949 6.83181763]
[127.49578094 14.77129745]
[113.91342926 21.17724419]
[99.67921448 25.96302795]
[102.77754211 40.63955307]
[105.87586212 55.31607819]
[108.97418213 69.99260712]
[112.07250214 84.66912842]
[123.26827240 94.65185547]
[138.20257568 96.05416107]
[153.13688660 97.45646667]
[168.07119751 98.85876465]
[183.00549316 100.26107025]
[197.46856689 93.84779358]
[209.41676331 102.74104309]
[224.35107422 104.14334106]
[232.18591309 91.04456329]
[244.93293762 82.64955139]
[260.06121826 80.62513733]
[274.56698608 85.37328339]
[285.57015991 95.95122528]
[290.88604736 110.25871277]
[289.45913696 125.45498657]
[281.57278442 138.52281189]
[268.79278564 146.86756897]
[253.65667725 148.83238220]
[239.16969299 144.02716064]
[228.20826721 133.40596008]
[222.94877625 119.07765198]
[208.01446533 117.67534637]
[194.61959839 124.18892670]
[181.60319519 115.19538116]
[166.66888428 113.79307556]
[151.73458862 112.39076996]
[136.80027771 110.98846436]
[121.86596680 109.58616638]
[116.32031250 114.63549042]
[128.75408936 123.02601624]
[141.18788147 131.41653442]
[154.55575562 138.22096252]
[159.37501526 152.42570496]
[152.90742493 165.95974731]
[138.82780457 171.13314819]
[125.13607025 165.00643921]
[119.61176300 151.06161499]
[112.42037964 137.89787292]
[105.22899628 124.73413849]
[99.68333435 129.78346252]
[99.68333435 144.78346252]
[99.68333435 159.78346252]
[99.68333435 174.78346252]
[99.68333435 189.78346252]
[99.68333435 204.78346252]
[99.68333435 219.78346252]
[99.68333435 234.78346252]
[99.68333435 249.78346252]
[99.68333435 264.78347778]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 36]
[12 35]
[13 34]
[14 33]
[40 101]
[41 100]
[42 99]
[43 98]
[44 97]
[102 129]
[103 128]
[104 127]
[105 126]
[106 125]
[108 123]
[109 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
