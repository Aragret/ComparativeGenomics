%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAAAAAAUUUCCACCAAACCCCCCCUCCCCCGCUUCUGGCCACAGCACUUAAACACAUCUxxxxxxxxxxAUGGCUUUCUCAACUUUUAAAGGAUAACAGCUAUCCAUUGGUCUUAGGCCCCAAAAAUUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[90.82916260 117.85817719]
[79.32735443 127.48670197]
[67.82555389 137.11523438]
[56.32374954 146.74375916]
[44.82194519 156.37228394]
[33.42092514 166.11993408]
[22.12192154 175.98565674]
[10.82291698 185.85137939]
[-0.47608817 195.71710205]
[-11.77509308 205.58282471]
[-5.43557739 219.29367065]
[-3.21701241 234.23538208]
[-5.29924679 249.19668579]
[-11.51348400 262.96478271]
[-21.35596275 274.42349243]
[-34.02879715 282.64395142]
[-48.50465775 286.95974731]
[-63.61005020 287.02102661]
[-78.12045288 282.82281494]
[-90.85956573 274.70544434]
[-100.79468536 263.32696533]
[-107.12042999 249.60975647]
[-109.32398224 234.66583252]
[-107.22671509 219.70661926]
[-100.99864960 205.94477844]
[-91.14466858 194.49595642]
[-78.46357727 186.28823853]
[-63.98339081 181.98698425]
[-48.87794495 181.94087219]
[-34.37176895 186.15365601]
[-21.64081573 194.28381348]
[-10.34181118 184.41809082]
[0.95719349 174.55236816]
[12.25619793 164.68664551]
[23.55520248 154.82092285]
[26.54442406 148.00842285]
[35.19342041 144.87048340]
[46.69522476 135.24195862]
[58.19702911 125.61342621]
[69.69882965 115.98490143]
[81.20063782 106.35636902]
[80.57719421 98.88233185]
[65.62908936 100.12895203]
[64.38271332 85.18082428]
[79.33032227 83.93424225]
[78.70688629 76.46019745]
[65.76882935 68.87029266]
[52.83077240 61.28038025]
[36.43719482 61.70778656]
[28.10215378 47.58478928]
[36.40002060 33.43991470]
[52.79466629 33.82420349]
[60.42068100 48.34232712]
[73.35873413 55.93223572]
[86.29679108 63.52214432]
[78.58137512 50.65853500]
[70.86595917 37.79492950]
[63.15054321 24.93132591]
[50.32715988 17.14924622]
[38.64269638 7.74321938]
[28.30147171 -3.12228084]
[19.48431396 -15.25726032]
[12.34539700 -28.44952583]
[7.00955439 -42.46839905]
[3.57008719 -57.06874084]
[2.08713865 -71.99525452]
[2.58663940 -86.98693848]
[5.05985546 -101.78163910]
[9.46353912 -116.12066650]
[15.72068977 -129.75328064]
[23.72189140 -142.44108582]
[33.32723999 -153.96226501]
[44.36877060 -164.11532593]
[56.65341187 -172.72273254]
[69.96636200 -179.63398743]
[84.07482147 -184.72824097]
[98.73209381 -187.91639709]
[113.68187714 -189.14273071]
[128.66276550 -188.38578796]
[143.41279602 -185.65881348]
[157.67407227 -181.00946045]
[171.19718933 -174.51907349]
[183.74569702 -166.30110168]
[195.10017395 -156.49926758]
[205.06205750 -145.28497314]
[213.45718384 -132.85427856]
[220.13874817 -119.42458344]
[224.98989868 -105.23069763]
[227.92581177 -90.52082825]
[228.89517212 -75.55218506]
[227.88101196 -60.58650589]
[224.90106201 -45.88549042]
[220.00743103 -31.70619202]
[213.28570557 -18.29655647]
[204.85340881 -5.89106274]
[194.85798645 5.29336739]
[183.47421265 15.06116295]
[170.90115356 23.24152374]
[157.35589600 29.69251060]
[145.66259766 39.08755493]
[133.96929932 48.48260117]
[122.27600861 57.87764740]
[137.04206848 55.23878098]
[151.80812073 52.59991837]
[166.57417297 49.96105576]
[181.34022522 47.32218933]
[191.65457153 35.03422928]
[207.68830872 35.58091736]
[217.14172363 48.54287338]
[212.76298523 63.97680283]
[197.91105652 70.04310608]
[183.97909546 62.08824539]
[169.21304321 64.72711182]
[154.44697571 67.36597443]
[139.68092346 70.00483704]
[124.91487122 72.64369965]
[123.74932098 80.05258179]
[135.41633606 89.48023224]
[121.41821289 94.87033844]
[120.25266266 102.27922058]
[133.49525452 109.32435608]
[146.73783875 116.36949158]
[162.43930054 113.07649994]
[174.71124268 123.40988922]
[174.13969421 139.44276428]
[161.16308594 148.87606812]
[145.73596191 144.47338867]
[139.69270325 129.61207581]
[126.45011139 122.56694031]
[113.20752716 115.52180481]
[121.45137024 128.05332947]
[129.69522095 140.58485413]
[142.47790527 148.43359375]
[152.45368958 159.63555908]
[158.77470398 173.23867798]
[160.90373230 188.08680725]
[158.65982056 202.91802979]
[152.23370361 216.47180176]
[142.17150879 227.59620667]
[129.32844543 235.34576416]
[114.79604340 239.06185913]
[99.80941772 238.42861938]
[85.64228058 233.49990845]
[73.49870300 224.69459534]
[64.41078186 212.76103210]
[59.15089035 198.71348572]
[58.16607285 183.74584961]
[61.54002762 169.13023376]
[68.98600006 156.10881042]
[79.87391663 145.78634644]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 41]
[2 40]
[3 39]
[4 38]
[5 37]
[6 35]
[7 34]
[8 33]
[9 32]
[10 31]
[46 55]
[47 54]
[48 53]
[102 116]
[103 115]
[104 114]
[105 113]
[106 112]
[120 130]
[121 129]
[122 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
