%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACGCAAGCAACCGCAUCCAUAAUCCUUCUAAUAGCUAUCCUCUUCAACAAUAUACUCUCxxxxxxxxxxCCUGACUCCCCUCAGCCAUAGAAGGCCCCACCCCAGUCUCAGCCCUACUCCACUCAAGCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[191.67167664 199.45095825]
[181.45820618 188.46530151]
[171.24472046 177.47962952]
[161.03125000 166.49397278]
[146.69863892 162.44111633]
[142.96875000 147.06585693]
[132.75526428 136.08020020]
[122.54178619 125.09452820]
[112.32830048 114.10886383]
[97.32911682 114.26490021]
[87.34638977 125.46067047]
[93.25058746 139.53558350]
[92.45463562 154.77792358]
[85.11656189 168.16133118]
[72.69336700 177.02851868]
[57.65166092 179.61888123]
[42.97800064 175.41810608]
[31.58584976 165.26026917]
[25.73712540 151.16221619]
[26.59309578 135.92311096]
[33.98381042 122.56871033]
[46.44183350 113.75052643]
[61.49361801 111.21942139]
[76.15061951 115.47794342]
[86.13334656 104.28217316]
[74.03796387 113.15357208]
[59.09553909 114.46652985]
[45.63842392 107.84036255]
[37.56833267 95.19625092]
[37.22508240 80.20018005]
[44.70819473 67.20006561]
[57.84803772 59.96511078]
[72.83489227 60.59300613]
[85.32351685 68.90169525]
[91.69258881 82.47977448]
[88.28961182 67.87088013]
[84.88663483 53.26198578]
[81.48365784 38.65309143]
[78.08068085 24.04420090]
[74.67770386 9.43530846]
[71.27471924 -5.17358446]
[59.06356430 -10.94812107]
[52.52149200 -22.54248428]
[53.85263062 -35.59247971]
[62.34476471 -45.33314133]
[59.24644089 -60.00966644]
[56.14812088 -74.68619537]
[41.17109299 -73.52700043]
[26.17089844 -74.33267975]
[11.40420341 -77.08943939]
[-2.87631226 -81.75011444]
[-16.42629051 -88.23495483]
[-29.01387215 -96.43299103]
[-40.42366791 -106.20394897]
[-50.46044159 -117.38062286]
[-58.95245361 -129.77178955]
[-65.75438690 -143.16539001]
[-70.74985504 -157.33226013]
[-73.85338593 -172.02998352]
[-75.01186371 -187.00706482]
[-74.20547485 -202.00723267]
[-71.44800568 -216.77378845]
[-66.78665161 -231.05409241]
[-60.30117035 -244.60375977]
[-52.10253525 -257.19094849]
[-42.33103561 -268.60028076]
[-31.15387917 -278.63650513]
[-18.76231575 -287.12792969]
[-5.36838627 -293.92922974]
[8.79872417 -298.92404175]
[23.49659729 -302.02685547]
[38.47373199 -303.18463135]
[53.47385406 -302.37753296]
[68.24028778 -299.61935425]
[82.52035522 -294.95730591]
[96.06971741 -288.47119141]
[108.65651703 -280.27194214]
[120.06538391 -270.49990845]
[130.10108948 -259.32226562]
[138.59191895 -246.93031311]
[145.39257812 -233.53605652]
[150.38670349 -219.36871338]
[153.48883057 -204.67068481]
[154.64588928 -189.69349670]
[153.83807373 -174.69342041]
[151.07919312 -159.92712402]
[146.41648865 -145.64726257]
[139.92971802 -132.09822083]
[131.72987366 -119.51180267]
[121.95729065 -108.10340118]
[110.77918243 -98.06822205]
[98.38681030 -89.57798767]
[84.99223328 -82.77796173]
[70.82464600 -77.78451538]
[73.92296600 -63.10799026]
[77.02128601 -48.43146515]
[91.47720337 -39.89421844]
[95.39335632 -23.22245407]
[85.88361359 -8.57656193]
[89.28659058 6.03233004]
[92.68956757 20.64122200]
[96.09255219 35.25011444]
[99.49552917 49.85900879]
[102.89850616 64.46790314]
[106.30148315 79.07678986]
[123.31396484 103.89538574]
[133.52745056 114.88105011]
[143.74092102 125.86671448]
[153.95440674 136.85238647]
[169.01754761 141.69099426]
[172.01690674 156.28048706]
[182.23039246 167.26614380]
[192.44386292 178.25181580]
[202.65734863 189.23748779]
[215.16529846 180.89797974]
[228.84909058 174.67300415]
[243.35426331 170.72381592]
[258.30511475 169.15270996]
[273.31436157 170.00035095]
[287.99322510 173.24481201]
[301.96154785 178.80204773]
[314.85745239 186.52809143]
[326.34689331 196.22285461]
[336.13232422 207.63520813]
[343.96026611 220.46952820]
[349.62789917 234.39338684]
[352.98849487 249.04611206]
[353.95495605 264.04818726]
[352.50225830 279.01101685]
[348.66806030 293.54699707]
[342.55163574 307.27963257]
[334.31143188 319.85324097]
[324.16088867 330.94207764]
[312.36291504 340.25897217]
[299.22314453 347.56256104]
[285.08190918 352.66366577]
[270.30548096 355.43017578]
[255.27662659 355.79040527]
[240.38462830 353.73504639]
[226.01521301 349.31732178]
[212.54060364 342.65167236]
[200.30979919 333.91073608]
[189.63963318 323.32095337]
[180.80647278 311.15658569]
[174.03912354 297.73275757]
[169.51286316 283.39718628]
[167.34495544 268.52114868]
[167.59153748 253.48999023]
[170.24621582 238.69308472]
[175.24024963 224.51365662]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 114]
[2 113]
[3 112]
[4 111]
[6 109]
[7 108]
[8 107]
[9 106]
[10 25]
[11 24]
[35 105]
[36 104]
[37 103]
[38 102]
[39 101]
[40 100]
[41 99]
[45 96]
[46 95]
[47 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
