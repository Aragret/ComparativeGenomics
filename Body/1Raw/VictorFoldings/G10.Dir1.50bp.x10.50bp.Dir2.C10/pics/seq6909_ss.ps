%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCGCUACCAUAAUCAUCGCUAUCCCCACCGGCGUCAAAGUAUUUAGCUGACUCGCCACACxxxxxxxxxxCGAAACCAUCAGCCUACUCAUUCAACCAAUAGCCCUGGCCGUACGCCUAACCGCUAACAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[93.22671509 273.37496948]
[93.22671509 258.37496948]
[93.22671509 243.37496948]
[93.22671509 228.37496948]
[93.22671509 213.37496948]
[93.22671509 198.37496948]
[93.22671509 183.37496948]
[93.22671509 168.37496948]
[93.22671509 153.37496948]
[93.22671509 138.37496948]
[72.42277527 121.92505646]
[68.55015564 98.34194946]
[80.21031952 80.53784180]
[72.75540924 67.52153015]
[65.30049896 54.50522232]
[57.84558487 41.48891068]
[43.04101944 44.53559494]
[28.03991890 42.85943604]
[14.30999184 36.63710022]
[3.19065881 26.48941612]
[-4.23761320 13.41947556]
[-7.25829077 -1.28652453]
[-5.58787537 -16.18584824]
[0.59753859 -29.82075882]
[10.68073368 -40.86114502]
[3.22582364 -53.87745667]
[-10.16046143 -60.64556885]
[-25.06236267 -58.93288040]
[-39.96426773 -57.22019196]
[-45.42363739 -42.92145538]
[-56.91028976 -32.80634689]
[-71.78467560 -29.19924927]
[-86.62877655 -32.92904282]
[-98.03151703 -43.13865280]
[-103.37263489 -57.48197937]
[-101.42478180 -72.66303253]
[-92.63555908 -85.19332123]
[-79.02466583 -92.19347382]
[-63.71978378 -92.05490875]
[-50.23786545 -84.80946350]
[-41.67695618 -72.12209320]
[-26.77505302 -73.83478546]
[-11.87315083 -75.54747009]
[-26.01066589 -80.56052399]
[-30.11178589 -94.98899078]
[-20.72465324 -106.68863678]
[-5.75029087 -105.81202698]
[2.20759177 -93.09690857]
[0.65001082 -108.01582336]
[-0.90757012 -122.93473053]
[-2.46515107 -137.85363770]
[-10.61133671 -142.82652283]
[-15.45065308 -150.89196777]
[-15.98888969 -160.14396667]
[-12.23114491 -168.46417236]
[-5.15158701 -174.00686646]
[-5.77556419 -188.99388123]
[-6.39954185 -203.98089600]
[-7.02351904 -218.96791077]
[-7.64749622 -233.95492554]
[-22.49322319 -236.46452332]
[-36.49261475 -242.00625610]
[-49.03367996 -250.33784485]
[-59.56817627 -261.09506226]
[-67.63558197 -273.80767822]
[-72.88321686 -287.91995239]
[-75.08168793 -302.81494141]
[-74.13488770 -317.84149170]
[-70.08419037 -332.34271240]
[-63.10669327 -345.68469238]
[-53.50741577 -357.28414917]
[-41.70599365 -366.63403320]
[-28.21833611 -373.32556152]
[-13.63406944 -377.06625366]
[1.40924835 -377.69259644]
[16.25398636 -375.17715454]
[30.25119781 -369.62991333]
[42.78898621 -361.29339600]
[53.31924820 -350.53201294]
[61.38164902 -337.81622314]
[66.62373352 -323.70190430]
[68.81634521 -308.80606079]
[67.86363220 -293.77987671]
[63.80723190 -279.28024292]
[56.82448578 -265.94104004]
[47.22064209 -254.34533691]
[35.41554642 -245.00010681]
[21.92525673 -238.31387329]
[7.33951950 -234.57890320]
[7.96349716 -219.59188843]
[8.58747482 -204.60487366]
[9.21145153 -189.61785889]
[9.83542919 -174.63084412]
[22.43334961 -158.32699585]
[12.45376110 -139.41122437]
[14.01134205 -124.49230957]
[15.56892300 -109.57340240]
[17.12650490 -94.65448761]
[23.92497253 -76.06133270]
[16.24213219 -61.33236694]
[23.69704247 -48.31605530]
[38.32182312 -51.42681885]
[53.21221924 -49.86278534]
[66.90866089 -43.76461411]
[78.06468201 -33.71802139]
[85.57933044 -20.69754982]
[88.70577240 -5.97204733]
[87.12551117 9.01898766]
[80.98078918 22.80611610]
[70.86189270 34.03400040]
[78.31680298 47.05031204]
[85.77171326 60.06661987]
[93.22662354 73.08293152]
[107.71302795 70.43019104]
[122.90719604 75.74520874]
[134.41595459 88.88874054]
[138.27136230 107.33607483]
[152.28808594 112.67758942]
[166.30479431 118.01910400]
[181.47407532 112.79679108]
[194.93711853 121.52182007]
[196.36622620 137.50109863]
[184.66511536 148.47668457]
[168.80987549 146.02905273]
[160.96328735 132.03581238]
[146.94656372 126.69430542]
[132.92985535 121.35279083]
[126.75407410 125.60833740]
[136.49403381 137.01593018]
[146.23400879 148.42350769]
[155.97396851 159.83110046]
[169.13221741 167.03253174]
[172.91653442 181.54731750]
[164.94946289 194.25657654]
[150.23625183 197.17579651]
[138.02046204 188.47094727]
[135.97665405 173.61064148]
[128.78526306 160.44689941]
[121.59387970 147.28315735]
[114.40249634 134.11943054]
[108.22671509 138.37496948]
[108.22671509 153.37496948]
[108.22671509 168.37496948]
[108.22671509 183.37496948]
[108.22671509 198.37496948]
[108.22671509 213.37496948]
[108.22671509 228.37496948]
[108.22671509 243.37496948]
[108.22671509 258.37496948]
[108.22671509 273.37496948]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[13 113]
[14 112]
[15 111]
[16 110]
[25 101]
[26 100]
[27 43]
[28 42]
[29 41]
[48 98]
[49 97]
[50 96]
[51 95]
[56 93]
[57 92]
[58 91]
[59 90]
[60 89]
[117 127]
[118 126]
[119 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
