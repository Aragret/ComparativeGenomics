%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGGACUAACCCCUAUACCUUCUGCAUAAUGAAUUAACUAGAAAUAACUUUGCAAGGAGAGCxxxxxxxxxxUUCUUCCCACAACACUUUCUCGGCCUAUCCGGAAUGCCCCGACGUUACUCGGACUACCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[174.78662109 172.92765808]
[166.02040100 160.75581360]
[157.25419617 148.58398438]
[148.48799133 136.41213989]
[136.59561157 127.27040863]
[122.57890320 121.92889404]
[108.56218719 116.58738708]
[94.19400024 120.89496613]
[85.42779541 133.06680298]
[76.66159058 145.23864746]
[67.89538574 157.41047668]
[59.12917709 169.58232117]
[60.27518845 185.58438110]
[48.38161469 196.35112000]
[32.57218933 193.62319946]
[24.97454643 179.49324036]
[31.41695023 164.80056763]
[46.95734024 160.81611633]
[55.72354507 148.64427185]
[64.48975372 136.47244263]
[73.25595856 124.30059814]
[82.02216339 112.12876129]
[79.71938324 104.99103546]
[65.05362701 101.84214020]
[75.11382294 90.71556854]
[72.81103516 83.57784271]
[58.58425903 78.82402802]
[44.35747910 74.07021332]
[37.71018982 75.02993774]
[32.40119171 72.78364563]
[29.64497948 68.81138611]
[15.62826633 63.46987534]
[1.61155331 58.12836456]
[-12.40515995 52.78684998]
[-20.98179054 65.18462372]
[-32.27664948 75.16909790]
[-45.63306427 82.15977478]
[-60.27451324 85.75023651]
[-75.34976196 85.73173523]
[-89.98235321 82.10534668]
[-103.32156372 75.08190155]
[-114.59188080 65.06974030]
[-123.13805389 52.65094757]
[-128.46322632 38.54754257]
[-130.25778198 23.57947731]
[-128.41741943 8.61697578]
[-123.04910278 -5.47006321]
[-114.46495819 -17.86263657]
[-103.16404724 -27.84025764]
[-89.80339813 -34.82283783]
[-75.15977478 -38.40442276]
[-60.08454132 -38.37678146]
[-45.45415115 -34.74151993]
[-32.11919785 -27.70998955]
[-20.85495377 -17.69099426]
[-12.31631088 -5.26702547]
[-6.99969435 8.83960533]
[-5.21420431 23.80875587]
[-7.06364727 38.77013779]
[6.95306587 44.11165237]
[20.96977806 49.45316315]
[34.98649216 54.79467773]
[49.11129379 59.84343338]
[63.33807373 64.59724426]
[77.56484985 69.35105896]
[89.64484406 60.45871353]
[89.33278656 45.46195984]
[89.02072906 30.46520615]
[74.96626282 24.60073853]
[64.51689148 13.52236080]
[59.48302078 -0.85053152]
[60.73680496 -16.02774811]
[68.06101227 -29.37974548]
[80.18669128 -38.59320831]
[95.01298523 -42.07184982]
[109.97114563 -39.21297073]
[122.46959686 -30.51189232]
[130.34289551 -17.47612953]
[132.22692871 -2.36420512]
[127.79531097 12.20564747]
[117.81582642 23.70911407]
[104.01747894 30.15314865]
[104.32953644 45.14990234]
[104.64159393 60.14665604]
[121.82612610 83.88436890]
[113.90370178 102.57067108]
[127.92041016 107.91218567]
[141.93713379 113.25370026]
[143.65133667 109.52301025]
[146.34146118 106.02246094]
[149.97163391 102.99299622]
[154.44905090 100.66815186]
[159.62590027 99.26103973]
[173.64260864 93.91952515]
[178.17541504 88.96360016]
[183.70542908 87.33560944]
[188.35511780 88.66070557]
[202.58189392 83.90689087]
[216.80867004 79.15307617]
[224.01223755 73.42939758]
[231.38113403 74.45169067]
[245.70373535 69.99488068]
[260.02633667 65.53806305]
[268.73046875 52.06150818]
[284.70751953 50.60761642]
[295.70123291 62.29169083]
[293.27819824 78.15071106]
[279.29714966 86.01898956]
[264.48315430 79.86065674]
[250.16055298 84.31747437]
[235.83795166 88.77429199]
[221.56248474 93.37985229]
[207.33570862 98.13366699]
[193.10893250 102.88748169]
[178.98413086 107.93624115]
[164.96742249 113.27775574]
[160.65983582 127.64593506]
[169.42604065 139.81777954]
[178.19224548 151.98960876]
[186.95845032 164.16145325]
[200.60977173 157.83387756]
[215.21194458 154.20443726]
[230.23713684 153.40434265]
[245.14218140 155.46250916]
[259.38827515 160.30453491]
[272.46044922 167.75537109]
[283.88610840 177.54570007]
[293.25225830 189.32159424]
[300.22030640 202.65736389]
[304.53839111 217.07093811]
[306.05035400 232.04124451]
[304.70159912 247.02716064]
[300.54083252 261.48690796]
[293.71850586 274.89782715]
[284.48123169 286.77505493]
[273.16293335 296.68930054]
[260.17272949 304.28216553]
[245.98023987 309.27911377]
[231.09849548 311.49957275]
[216.06547546 310.86325073]
[201.42462158 307.39312744]
[187.70516968 301.21469116]
[175.40307617 292.55126953]
[164.96307373 281.71600342]
[156.76252747 269.10064697]
[151.09791565 255.16117859]
[148.17398071 240.40153503]
[148.09643555 225.35525513]
[150.86808777 210.56625366]
[156.38874817 196.56915283]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 120]
[2 119]
[3 118]
[4 117]
[5 88]
[6 87]
[7 86]
[8 22]
[9 21]
[10 20]
[11 19]
[12 18]
[26 65]
[27 64]
[28 63]
[31 62]
[32 61]
[33 60]
[34 59]
[66 84]
[67 83]
[68 82]
[93 116]
[94 115]
[97 114]
[98 113]
[99 112]
[101 111]
[102 110]
[103 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
