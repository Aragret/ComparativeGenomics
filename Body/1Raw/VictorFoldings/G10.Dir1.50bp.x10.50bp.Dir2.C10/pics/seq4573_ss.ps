%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUUCUCCGUGCCACCUAUCACACCCCAUCCUAAAGUAAGGUCAGCUAAAUAAGCUAUCGGxxxxxxxxxxCUUCUCGUCCCCAUGGAUGACCCCCCUCAGAUAGGGGUCCCUUGACCACCAUCCUCCGUGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[76.41775513 483.72161865]
[76.41775513 468.72161865]
[76.41775513 453.72161865]
[76.41775513 438.72161865]
[76.41775513 423.72161865]
[76.41775513 408.72161865]
[76.41775513 393.72161865]
[76.41775513 378.72161865]
[76.41775513 363.72161865]
[76.41775513 348.72161865]
[59.70574570 343.25152588]
[45.81708527 332.42810059]
[36.40460205 317.51916504]
[32.59528732 300.27993774]
[34.85535812 282.74639893]
[42.93326950 266.99475098]
[55.88759613 254.89576721]
[72.19673157 247.89236450]
[70.94985962 232.94429016]
[69.70298004 217.99620056]
[63.00801849 231.41921997]
[53.34732056 242.89401245]
[41.26151276 251.77844238]
[27.42691994 257.57534790]
[12.61773586 259.96032715]
[-2.33730984 258.79989624]
[-16.60132408 254.15899658]
[-29.37608528 246.29734802]
[-39.94670868 235.65489197]
[-47.72166061 222.82717896]
[-52.26584244 208.53205872]
[-53.32496643 193.56950378]
[-50.83976364 178.77680969]
[-44.94930267 164.98178101]
[-35.98321533 152.95642090]
[-24.44325638 143.37365723]
[-10.97520542 136.76976013]
[3.66725993 133.51426697]
[18.66473770 133.78936768]
[33.17795944 137.57966614]
[46.39475632 144.67306519]
[57.57551193 154.67260742]
[66.09454346 167.01869202]
[71.47512054 181.02046204]
[73.41613770 195.89360046]
[79.47914886 182.17355347]
[85.39910889 168.39115906]
[91.17538452 154.54794312]
[96.95165253 140.70472717]
[102.72792816 126.86151123]
[80.59191895 127.17000580]
[61.25885010 109.03191376]
[59.31555176 78.17189789]
[49.80719376 66.57055664]
[40.29883194 54.96921158]
[30.79047585 43.36787033]
[15.03181553 40.36051178]
[7.68549728 26.09828377]
[14.38698673 11.52194691]
[29.99547386 7.81321955]
[42.53746414 17.81711960]
[42.39181519 33.85951233]
[51.90017319 45.46085358]
[61.40853500 57.06219482]
[70.91689301 68.66353607]
[78.07819366 66.43512726]
[92.40078735 61.97831345]
[99.56208801 59.74990463]
[100.80895996 44.80181885]
[87.03463745 38.47380447]
[76.25749207 27.81411171]
[69.77893066 14.10995197]
[68.38125610 -0.98383242]
[72.23326111 -15.64459324]
[80.86978149 -28.10197258]
[93.24792480 -36.85168076]
[107.87296295 -40.83714676]
[122.97885895 -39.57711029]
[136.74150085 -33.22372055]
[147.49897766 -22.54418755]
[153.95228577 -8.82811069]
[155.32212830 6.26822329]
[151.44311523 20.92185974]
[142.78366089 33.36330032]
[130.38940430 42.09018326]
[115.75704956 46.04869080]
[114.51016998 60.99678040]
[128.35339355 66.77304840]
[138.10104370 55.37203217]
[147.84869385 43.97100830]
[150.31198120 27.75792122]
[165.68104553 22.03745270]
[178.14552307 32.69433212]
[174.88301086 48.76567459]
[159.24971008 53.71866226]
[149.50205994 65.11968231]
[139.75440979 76.52070618]
[136.37606812 96.09611511]
[125.63190460 108.48456573]
[140.39796448 105.84570312]
[155.16401672 103.20684052]
[169.93006897 100.56797791]
[184.69612122 97.92910767]
[199.46218872 95.29024506]
[205.29449463 81.00782013]
[217.93571472 72.16457367]
[233.35209656 71.58236694]
[246.62429810 79.44696045]
[253.51724243 93.24880981]
[251.83139038 108.58378601]
[242.10470581 120.55855560]
[227.44093323 125.35201263]
[212.51922607 121.43457794]
[202.10104370 110.05630493]
[187.33499146 112.69516754]
[172.56893921 115.33403015]
[157.80288696 117.97289276]
[143.03681946 120.61176300]
[128.27076721 123.25062561]
[116.57114410 132.63778687]
[110.79487610 146.48100281]
[105.01860046 160.32421875]
[99.24233246 174.16743469]
[98.81588745 183.35820007]
[93.19920349 188.23655701]
[87.13618469 201.95661926]
[84.65106964 216.74932861]
[85.89794159 231.69740295]
[87.14482117 246.64549255]
[99.50164795 249.00004578]
[110.91187286 254.26901245]
[120.70008087 262.13458252]
[128.28826904 272.12539673]
[133.23005676 283.64480591]
[135.23686218 296.00650024]
[134.19480896 308.47546387]
[130.17115784 320.31155396]
[123.40996552 330.81353760]
[114.31732941 339.36053467]
[103.43698120 345.44885254]
[91.41775513 348.72161865]
[91.41775513 363.72161865]
[91.41775513 378.72161865]
[91.41775513 393.72161865]
[91.41775513 408.72161865]
[91.41775513 423.72161865]
[91.41775513 438.72161865]
[91.41775513 453.72161865]
[91.41775513 468.72161865]
[91.41775513 483.72161865]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[18 129]
[19 128]
[20 127]
[45 126]
[46 125]
[47 123]
[48 122]
[49 121]
[50 120]
[53 65]
[54 64]
[55 63]
[56 62]
[68 87]
[69 86]
[88 97]
[89 96]
[90 95]
[99 119]
[100 118]
[101 117]
[102 116]
[103 115]
[104 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
