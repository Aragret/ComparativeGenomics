%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUGACUCUUACCUCCCUCUCUCCUACUCCUGCUCGCAUCUGCUAUAGUGGAGGCCGGAGCAGxxxxxxxxxxCCAACCUUUUCCUCCGACCCCCUAACAACCCCCCUCCUAAUACUAACUACCUGACUCCUACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[247.96553040 209.52078247]
[237.52137756 198.75418091]
[227.07722473 187.98757935]
[216.63308716 177.22097778]
[206.18893433 166.45437622]
[195.74478149 155.68775940]
[184.66567993 145.57572937]
[172.99255371 136.15562439]
[161.31944275 126.73551941]
[149.64633179 117.31541443]
[135.80271912 111.54006958]
[120.89582825 109.87139130]
[105.98892975 108.20272064]
[98.21421814 110.51673889]
[90.79793549 106.34617615]
[75.92792511 104.37572479]
[61.05791092 102.40527344]
[46.18789673 100.43482208]
[33.72010040 109.77248383]
[18.66786194 107.56233978]
[9.84266663 95.61865234]
[-5.02734756 93.64820099]
[-19.89736176 91.67774963]
[-34.76737595 89.70729828]
[-49.63739014 87.73684692]
[-39.59739685 98.88128662]
[-37.03392029 113.66062164]
[-42.73434830 127.53524017]
[-54.94774628 136.24345398]
[-69.92266846 137.11044312]
[-83.05944061 129.86991882]
[-90.32299042 116.74585724]
[-89.48226166 101.76943970]
[-80.79548645 89.54078674]
[-66.93093109 83.81604767]
[-81.19677734 79.18078613]
[-95.46262360 74.54553223]
[-108.00214386 83.49353027]
[-123.22814178 83.34386444]
[-135.30360413 74.36350250]
[-139.72268677 60.16456604]
[-153.98854065 55.52931213]
[-166.46249390 64.75862122]
[-181.97923279 64.85961914]
[-194.57226562 55.79347610]
[-199.39932251 41.04629898]
[-194.60427856 26.28868103]
[-182.03094482 17.19523239]
[-166.51400757 17.26256561]
[-154.02006531 26.46479034]
[-149.35328674 41.26346588]
[-135.08743286 45.89871979]
[-123.16640472 37.00901031]
[-108.11861420 36.84152603]
[-95.71254730 45.67005920]
[-90.82736969 60.27968597]
[-76.56152344 64.91493988]
[-62.29567337 69.55019379]
[-47.66693878 72.86683655]
[-32.79692459 74.83728790]
[-17.92691040 76.80773926]
[-3.05689621 78.77819061]
[11.81311798 80.74864197]
[23.44446564 71.51569366]
[38.55284500 73.30218506]
[48.15834808 85.56481171]
[63.02836227 87.53526306]
[77.89837646 89.50571442]
[92.76838684 91.47616577]
[107.65760803 93.29582214]
[122.56450653 94.96450043]
[137.47140503 96.63317871]
[125.61024475 87.45096588]
[115.87322235 76.04086304]
[108.67041016 62.88337708]
[104.30513000 48.53261566]
[102.96121979 33.59294128]
[104.69527435 18.69350815]
[109.43426514 4.46178627]
[116.97863007 -8.50288105]
[127.01063538 -19.65450859]
[139.10781860 -28.52346420]
[152.76069641 -34.73624802]
[167.39433289 -38.03121567]
[182.39244080 -38.26960373]
[197.12339783 -35.44137955]
[210.96684265 -29.66564560]
[223.33976746 -21.18563461]
[233.72113037 -10.35847282]
[241.67370605 2.35987544]
[246.86262512 16.43379593]
[249.06932068 31.27058983]
[248.20089722 46.24542999]
[244.29389954 60.72767639]
[237.51289368 74.10742950]
[228.14343262 85.82122803]
[216.58007812 95.37576294]
[203.30984497 102.36866760]
[188.89155579 106.50543213]
[173.93240356 107.61185455]
[159.06643677 105.64229584]
[170.73954773 115.06240082]
[182.41265869 124.48250580]
[194.08578491 133.90260315]
[193.96403503 118.90309906]
[204.34976196 108.08013153]
[219.34153748 107.58358002]
[230.42066956 117.69560242]
[231.29170227 132.67028809]
[221.45970154 143.99865723]
[206.51138306 145.24362183]
[216.95553589 156.01022339]
[227.39968872 166.77682495]
[237.84384155 177.54342651]
[248.28797913 188.31002808]
[258.73214722 199.07662964]
[270.99005127 190.37927246]
[284.43197632 183.65509033]
[298.74285889 179.06173706]
[313.58721924 176.70686340]
[328.61709595 176.64567566]
[343.48013306 178.87962341]
[357.82794189 183.35632324]
[371.32418823 189.97084045]
[383.65249634 198.56813049]
[394.52386475 208.94665527]
[403.68347168 220.86311340]
[410.91659546 234.03817749]
[416.05368042 248.16300964]
[418.97427368 262.90649414]
[419.60998535 277.92303467]
[417.94586182 292.86059570]
[414.02090454 307.36904907]
[407.92715454 321.10830688]
[399.80746460 333.75625610]
[389.85211182 345.01641846]
[378.29452515 354.62487793]
[365.40557861 362.35638428]
[351.48745728 368.02966309]
[336.86639404 371.51177979]
[321.88516235 372.72103882]
[306.89486694 371.62918091]
[292.24697876 368.26174927]
[278.28485107 362.69766235]
[265.33572388 355.06738281]
[253.70320129 345.54977417]
[243.65995789 334.36795044]
[235.44139099 321.78399658]
[229.24018860 308.09292603]
[225.20169067 293.61566162]
[223.42057800 278.69158936]
[223.93861389 263.67053223]
[226.74363708 248.90461731]
[231.76989746 234.73997498]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 116]
[2 115]
[3 114]
[4 113]
[5 112]
[6 111]
[7 104]
[8 103]
[9 102]
[10 101]
[11 72]
[12 71]
[13 70]
[15 69]
[16 68]
[17 67]
[18 66]
[21 63]
[22 62]
[23 61]
[24 60]
[25 59]
[35 58]
[36 57]
[37 56]
[41 52]
[42 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
