%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUACACCCCUUAUCCCCAUACUAGUUAUUAUCGAAACCAUCAGCCUACUCAUUCAACCAAxxxxxxxxxxCACUACUAGGCCUCCUCCUAGCAGCAGCAGGCAAAUCAGCCCAAUUAGGUCUCCACCCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-22.93359947 300.23068237]
[-31.18588829 312.75665283]
[-39.43817902 325.28262329]
[-47.69046783 337.80859375]
[-55.94275665 350.33453369]
[-63.93267441 363.02947998]
[-71.65676117 375.88787842]
[-79.38084412 388.74627686]
[-87.10492706 401.60467529]
[-94.82901001 414.46307373]
[-92.35679626 430.31451416]
[-103.31421661 442.03262329]
[-119.29569244 440.62829590]
[-128.04159546 427.17880249]
[-122.84281158 412.00146484]
[-107.68741608 406.73898315]
[-99.96333313 393.88058472]
[-92.23924255 381.02218628]
[-84.51515961 368.16378784]
[-76.79107666 355.30538940]
[-77.07698822 350.47903442]
[-74.28921509 345.43325806]
[-68.46871948 342.08224487]
[-60.21643066 329.55630493]
[-51.96413803 317.03033447]
[-43.71184921 304.50436401]
[-35.45956039 291.97839355]
[-45.80566788 284.24362183]
[-55.71104431 275.95190430]
[-65.14575195 267.12832642]
[-74.08126831 257.79959106]
[-82.49059296 247.99386597]
[-90.34829712 237.74079895]
[-97.63063049 227.07138062]
[-104.31558228 216.01785278]
[-110.38294983 204.61364746]
[-115.81439209 192.89321899]
[-120.59348297 180.89199829]
[-124.70578766 168.64627075]
[-128.13887024 156.19303894]
[-130.88235474 143.56996155]
[-132.92794800 130.81518555]
[-134.26945496 117.96724701]
[-134.90284729 105.06501007]
[-134.82618713 92.14746094]
[-134.03971863 79.25364685]
[-132.54580688 66.42254639]
[-130.34898376 53.69293976]
[-127.45588684 41.10330582]
[-123.87525177 28.69169807]
[-119.61789703 16.49563599]
[-114.69670868 4.55198431]
[-109.12654877 -7.10315561]
[-102.92426300 -18.43455315]
[-96.10859680 -29.40795708]
[-88.70014954 -39.99020004]
[-80.72131348 -50.14928818]
[-72.19620514 -59.85451889]
[-63.15060043 -69.07656097]
[-53.61183929 -77.78752136]
[-43.60874939 -85.96109009]
[-33.17157364 -93.57254791]
[-22.33185959 -100.59889221]
[-11.12237072 -107.01889038]
[0.42300996 -112.81311798]
[12.26938343 -117.96408081]
[24.38094139 -122.45619202]
[36.72107315 -126.27588654]
[49.25247955 -129.41162109]
[61.93728256 -131.85389709]
[74.73713684 -133.59535217]
[87.61335754 -134.63070679]
[100.52701569 -134.95684814]
[113.43907928 -134.57278442]
[126.31052399 -133.47967529]
[139.10243225 -131.68081665]
[151.77615356 -129.18165588]
[164.29336548 -125.98974609]
[176.61624146 -122.11473083]
[188.70751953 -117.56832123]
[200.53067017 -112.36427307]
[212.04994202 -106.51831055]
[223.23051453 -100.04809570]
[234.03860474 -92.97319031]
[244.44152832 -85.31498718]
[254.40785217 -77.09663391]
[264.62133789 -88.08229828]
[274.83480835 -99.06796265]
[285.04827881 -110.05362701]
[295.26177979 -121.03929138]
[294.43609619 -136.82199097]
[305.07421875 -148.50982666]
[320.86477661 -149.16860962]
[332.43948364 -138.40748596]
[332.93127441 -122.61085510]
[322.04840088 -111.15056610]
[306.24743652 -110.82581329]
[296.03396606 -99.84014130]
[285.82046509 -88.85447693]
[275.60699463 -77.86881256]
[265.39352417 -66.88314819]
[280.42059326 -50.51049042]
[293.83358765 -32.79132843]
[305.51251221 -13.88418293]
[315.35287476 6.04179811]
[323.26663208 26.80835152]
[329.18298340 48.22969437]
[333.04901123 70.11418915]
[334.83010864 92.26605225]
[334.51040649 114.48709869]
[349.44470215 115.88940430]
[364.37899780 117.29170227]
[376.38873291 107.01832581]
[392.13854980 108.32937622]
[402.28436279 120.44703674]
[400.80688477 136.18211365]
[388.58264160 146.19926453]
[372.86404419 144.55548096]
[362.97671509 132.22601318]
[348.04238892 130.82371521]
[333.10809326 129.42140198]
[330.73220825 144.35824585]
[327.40020752 159.11126709]
[323.12594604 173.61935425]
[317.92712402 187.82237244]
[311.82525635 201.66149902]
[304.84564209 215.07936096]
[297.01724243 228.02035522]
[288.37240601 240.43087769]
[278.94705200 252.25950623]
[268.78018188 263.45718384]
[257.91390991 273.97756958]
[246.39331055 283.77703857]
[234.26608276 292.81497192]
[221.58250427 301.05395508]
[208.39512634 308.45980835]
[194.75859070 315.00189209]
[180.72940063 320.65304565]
[166.36567688 325.38989258]
[151.72697449 329.19274902]
[136.87391663 332.04592896]
[121.86806488 333.93756104]
[106.77159882 334.85983276]
[91.64707184 334.80892944]
[76.55715942 333.78500366]
[61.56438446 331.79235840]
[46.73088074 328.83923340]
[32.11810684 324.93786621]
[17.78661537 320.10443115]
[3.79579329 314.35891724]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 27]
[2 26]
[3 25]
[4 24]
[5 23]
[6 20]
[7 19]
[8 18]
[9 17]
[10 16]
[86 101]
[87 100]
[88 99]
[89 98]
[90 97]
[110 121]
[111 120]
[112 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
