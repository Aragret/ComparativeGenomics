%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCCUCCCCACAUCAAGCCCGAAUGAUAUUUCCUAUUCGCCUACACAAUUCUCCGAUCCGxxxxxxxxxxAUAAAUACUUGACCACCUGUAGUACAUAAAAACCCAAUCCACAUCAAAACCCCCUCCCCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[16.78669930 306.85934448]
[10.72368717 320.57940674]
[4.66067410 334.29946899]
[-1.40233922 348.01950073]
[-7.46535254 361.73956299]
[-13.52836514 375.45962524]
[-19.59137917 389.17965698]
[-25.65439224 402.89971924]
[-26.52617645 419.83123779]
[-43.03733826 423.68063354]
[-51.30704498 408.88037109]
[-39.37444687 396.83670044]
[-33.31143188 383.11666870]
[-27.24841881 369.39660645]
[-21.18540573 355.67654419]
[-15.12239265 341.95648193]
[-9.05937958 328.23645020]
[-2.99636650 314.51638794]
[3.06664658 300.79632568]
[-17.53437614 289.47537231]
[-36.82904816 276.04843140]
[-54.60291672 260.66479492]
[-70.65843201 243.49545288]
[-84.81713867 224.73118591]
[-96.92166901 204.58058167]
[-106.83749390 183.26760864]
[-114.45439148 161.02914429]
[-119.68771362 138.11235046]
[-122.47928619 114.77197266]
[-122.79808044 91.26739502]
[-137.75833130 90.17608643]
[-152.71858215 89.08477783]
[-167.67883301 87.99346924]
[-182.63906860 86.90215302]
[-191.19938660 99.65428162]
[-204.99594116 106.40338135]
[-220.31756592 105.33397675]
[-233.04280090 96.73374176]
[-239.74861145 82.91609192]
[-238.63119507 67.59790039]
[-229.99111938 54.89968872]
[-216.15251160 48.23721313]
[-200.83789062 49.40264511]
[-188.16682434 58.08248520]
[-181.54776001 71.94190979]
[-166.58750916 73.03321838]
[-151.62727356 74.12452698]
[-136.66702271 75.21583557]
[-121.70677185 76.30715179]
[-119.86499786 62.92404938]
[-117.21611786 49.67705154]
[-113.76986694 36.61478424]
[-109.53888702 23.78519630]
[-104.53871155 11.23538589]
[-98.78769684 -0.98857886]
[-92.30695343 -12.84182549]
[-85.12026978 -24.28083992]
[-77.25402832 -35.26363373]
[-68.73710632 -45.74988937]
[-59.60077286 -55.70111084]
[-49.87855530 -65.08077240]
[-39.60615158 -73.85443878]
[-28.82126808 -81.98989868]
[-17.56349373 -89.45729828]
[-5.87415695 -96.22921753]
[6.20383310 -102.28079987]
[18.62613869 -107.58982849]
[31.34716034 -112.13681793]
[44.32019806 -115.90507507]
[57.49763107 -118.88076782]
[70.83108521 -121.05297089]
[84.27162170 -122.41371155]
[97.76988983 -122.95800018]
[111.27634430 -122.68383026]
[124.74140167 -121.59220886]
[138.11564636 -119.68714142]
[151.34996033 -116.97563171]
[164.39578247 -113.46762085]
[177.20520020 -109.17600250]
[189.73121643 -104.11650848]
[201.92784119 -98.30773163]
[213.75030518 -91.77098846]
[225.15518188 -84.53027344]
[236.10064697 -76.61215973]
[246.54649353 -68.04573059]
[256.45437622 -58.86241913]
[267.33322144 -69.18962097]
[278.21203613 -79.51683044]
[289.09085083 -89.84403229]
[291.36566162 -96.16327667]
[295.84225464 -99.79524231]
[300.64364624 -100.36286163]
[311.94265747 -110.22858429]
[314.45684814 -126.07341003]
[328.48291016 -133.86117554]
[343.26123047 -127.61776733]
[347.45520020 -112.13260651]
[337.84750366 -99.28456879]
[321.80838013 -98.92958069]
[310.50936890 -89.06385803]
[299.41806030 -78.96520996]
[288.53924561 -68.63800049]
[277.66040039 -58.31079865]
[266.78158569 -47.98359299]
[274.77694702 -38.44947815]
[282.22802734 -28.48419762]
[289.11160278 -18.11878586]
[295.40621948 -7.38552284]
[301.09231567 3.68216348]
[306.15216064 15.04980659]
[310.56997681 26.68200684]
[314.33203125 38.54253387]
[317.42660522 50.59445572]
[319.84408569 62.80023956]
[321.57690430 75.12187195]
[322.61965942 87.52098083]
[322.96914673 99.95895386]
[322.62423706 112.39704895]
[321.58602905 124.79653931]
[319.85775757 137.11880493]
[317.44479370 149.32548523]
[314.35464478 161.37854004]
[310.59695435 173.24046326]
[306.18341064 184.87428284]
[301.12774658 196.24378967]
[295.44573975 207.31356812]
[289.15505981 218.04914856]
[282.27532959 228.41709900]
[274.82791138 238.38511658]
[266.83605957 247.92218018]
[258.32464600 256.99856567]
[249.32015991 265.58602905]
[239.85064697 273.65780640]
[229.94561768 281.18878174]
[219.63591003 288.15551758]
[208.95361328 294.53625488]
[197.93200684 300.31115723]
[186.60543823 305.46224976]
[175.00914001 309.97351074]
[163.17924500 313.83084106]
[151.15260315 317.02224731]
[138.96665955 319.53778076]
[126.65936279 321.36965942]
[114.26904297 322.51211548]
[101.83428192 322.96160889]
[89.39381409 322.71676636]
[76.98637390 321.77828979]
[64.65060425 320.14916992]
[52.42491913 317.83447266]
[40.34739685 314.84136963]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 19]
[2 18]
[3 17]
[4 16]
[5 15]
[6 14]
[7 13]
[8 12]
[30 49]
[31 48]
[32 47]
[33 46]
[34 45]
[86 104]
[87 103]
[88 102]
[89 101]
[92 100]
[93 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
