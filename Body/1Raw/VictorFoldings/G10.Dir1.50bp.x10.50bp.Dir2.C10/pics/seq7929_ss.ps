%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUACCCCCUCUAGAGCCCACUGUAAAGCUAACUUAGCAUUAACCUUUUAAGUUAAAGAUUxxxxxxxxxxGGUAUAAUACGCCUCACACUCAUUCUCAACCCCCUGACAAAACACAUAGCCUACCCCUUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[5.91688967 249.75453186]
[-2.59420061 262.10610962]
[-11.10529041 274.45767212]
[-18.82937622 287.31607056]
[-25.73637390 300.63122559]
[-32.64337158 313.94638062]
[-39.55037308 327.26156616]
[-46.45737076 340.57672119]
[-53.36436844 353.89187622]
[-52.08524323 370.24105835]
[-65.75580597 379.29907227]
[-80.31295776 371.74780273]
[-80.78153992 355.35534668]
[-66.67952728 346.98486328]
[-59.77252579 333.66970825]
[-52.86552811 320.35455322]
[-45.95853043 307.03939819]
[-39.05152893 293.72424316]
[-32.14453125 280.40908813]
[-46.82738495 283.47726440]
[-59.48363113 275.42620850]
[-62.92763519 260.82693481]
[-55.20404816 247.96824646]
[-40.69797134 244.15069580]
[-27.64528275 251.54173279]
[-23.45686340 265.94659424]
[-14.94577312 253.59501648]
[-6.43468285 241.24343872]
[-22.28640366 227.76576233]
[-36.44553757 212.51963806]
[-48.71609879 195.71611023]
[-58.92826080 177.58776855]
[-66.94066620 158.38551331]
[-72.64241028 138.37513733]
[-75.95458221 117.83359528]
[-76.83133698 97.04522705]
[-75.26053619 76.29774475]
[-90.02659607 73.65888214]
[-104.79264832 71.02001953]
[-119.55870056 68.38115692]
[-136.21450806 71.54670715]
[-143.86712646 56.41813278]
[-131.44824219 44.87657166]
[-116.91983795 53.61510086]
[-102.15378571 56.25396347]
[-87.38772583 58.89282608]
[-72.62167358 61.53169250]
[-56.13540268 16.93502998]
[-28.36425400 -21.65800858]
[-38.80406570 -32.42881775]
[-49.24387741 -43.19962692]
[-59.68369293 -53.97043610]
[-70.12350464 -64.74124146]
[-85.70695496 -63.44118118]
[-98.45034027 -72.50430298]
[-102.33662415 -87.65127563]
[-95.53082275 -101.73016357]
[-81.24642944 -108.09334564]
[-66.22809601 -103.73632812]
[-57.56702042 -90.71634674]
[-59.35269547 -75.18105316]
[-48.91288376 -64.41024780]
[-38.47307205 -53.63943863]
[-28.03325844 -42.86862946]
[-17.59344482 -32.09782028]
[-10.71773624 -37.91169357]
[-3.55503368 -43.36808395]
[3.87609625 -48.45284653]
[11.55639076 -53.15280151]
[19.46594238 -57.45576477]
[27.58424759 -61.35058594]
[35.89026260 -64.82716370]
[44.36246109 -67.87649536]
[52.97887421 -70.49066162]
[61.71717453 -72.66290283]
[70.55471039 -74.38758087]
[79.46856689 -75.66021729]
[88.43564606 -76.47753143]
[97.43270111 -76.83738708]
[106.43640900 -76.73886108]
[115.42343903 -76.18220520]
[124.37048340 -75.16886902]
[133.25436401 -73.70146942]
[142.05203247 -71.78381348]
[150.74070740 -69.42087555]
[159.29785156 -66.61878204]
[167.70129395 -63.38478470]
[175.92924500 -59.72727585]
[183.96037292 -55.65573883]
[191.77386475 -51.18072128]
[199.34947205 -46.31382370]
[206.66755676 -41.06766129]
[213.70913696 -35.45583725]
[220.45597839 -29.49289513]
[226.89057922 -23.19429207]
[232.99626160 -16.57635307]
[238.75720215 -9.65623569]
[244.15847778 -2.45187473]
[249.18606567 5.01805353]
[253.82695007 12.73418617]
[258.06909180 20.67652321]
[261.90151978 28.82447624]
[265.31423950 37.15692520]
[268.29846191 45.65226746]
[270.84646606 54.28849030]
[272.95156860 63.04320145]
[274.60839844 71.89370728]
[275.81259155 80.81707001]
[276.56106567 89.79015350]
[276.85186768 98.78971100]
[276.68426514 107.79239655]
[276.05868530 116.77488708]
[274.97671509 125.71389771]
[273.44119263 134.58624268]
[271.45608521 143.36895752]
[269.02655029 152.03923035]
[266.15887451 160.57463074]
[262.86047363 168.95300293]
[259.13995361 177.15264893]
[255.00689697 185.15229797]
[250.47206116 192.93122864]
[245.54718018 200.46926880]
[240.24501038 207.74687195]
[234.57933044 214.74519348]
[228.56478882 221.44607544]
[222.21699524 227.83215332]
[215.55239868 233.88687134]
[208.58827209 239.59455872]
[201.34268188 244.94038391]
[193.83439636 249.91050720]
[186.08288574 254.49203491]
[178.10823059 258.67312622]
[169.93110657 262.44290161]
[161.57272339 265.79159546]
[153.05471802 268.71054077]
[144.39920044 271.19216919]
[135.62860107 273.23007202]
[126.76564026 274.81890869]
[117.83329773 275.95462036]
[108.85473633 276.63421631]
[99.85321808 276.85595703]
[90.85207367 276.61926270]
[81.87464905 275.92477417]
[72.94420624 274.77423096]
[64.08390045 273.17068481]
[55.31668854 271.11825562]
[46.66530228 268.62225342]
[38.15216446 265.68914795]
[29.79934502 262.32659912]
[21.62849236 258.54324341]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 28]
[2 27]
[3 26]
[4 19]
[5 18]
[6 17]
[7 16]
[8 15]
[9 14]
[37 47]
[38 46]
[39 45]
[40 44]
[49 65]
[50 64]
[51 63]
[52 62]
[53 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
