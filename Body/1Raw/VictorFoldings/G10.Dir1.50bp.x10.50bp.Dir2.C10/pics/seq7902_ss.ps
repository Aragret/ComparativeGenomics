%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCCUAUAGCACCCCCUCUACCCCCUCUAGAGCCCACUGUAAAGCUAACUUAGCAUUAACxxxxxxxxxxACAACUCAACGGCUACAUAGAAAAAUCCACCCCUUACGAGUGCGGCUUCGACCCUAUAUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[27.01804733 252.87538147]
[16.80456734 263.86105347]
[6.59108734 274.84671021]
[-3.62239265 285.83236694]
[-13.83587265 296.81805420]
[-23.58352470 308.21905518]
[-32.84847260 320.01571655]
[-42.11342239 331.81234741]
[-51.37837219 343.60897827]
[-60.64332199 355.40560913]
[-54.32036209 369.34402466]
[-55.21073151 384.62359619]
[-63.10982895 397.73324585]
[-76.20249939 405.66046143]
[-91.48014069 406.58361816]
[-105.43206787 400.29055786]
[-114.85222626 388.22741699]
[-117.57593536 373.16622925]
[-112.97730255 358.56790161]
[-102.11306000 347.78704834]
[-87.47973633 343.30099487]
[-72.43996429 346.14068604]
[-63.17501068 334.34402466]
[-53.91006470 322.54739380]
[-44.64511490 310.75076294]
[-35.38016510 298.95410156]
[-35.62238312 296.09951782]
[-34.71115875 292.97485352]
[-32.53686905 290.03302002]
[-29.16091537 287.75836182]
[-24.82153702 286.60455322]
[-14.60805702 275.61889648]
[-4.39457750 264.63323975]
[5.81890249 253.64756775]
[16.03238297 242.66189575]
[4.64099455 221.27363586]
[2.84292579 197.07492065]
[10.97010422 174.17620850]
[27.66628075 156.47782898]
[50.11328125 147.00563049]
[74.50666809 147.39369202]
[79.70207977 133.32217407]
[84.89749908 119.25065613]
[90.09291077 105.17913818]
[95.14167023 91.05433655]
[100.04322052 76.87777710]
[104.94477081 62.70122147]
[109.84632111 48.52466202]
[114.60013580 34.29788208]
[119.20569611 20.02242279]
[123.81126404 5.74696207]
[128.41682434 -8.52849865]
[130.12951660 -23.43040085]
[128.88264465 -38.37848663]
[127.63577271 -53.32657623]
[112.65126801 -54.55721283]
[98.07372284 -58.23758316]
[84.30082703 -64.26728058]
[71.70832062 -72.48181152]
[60.63972473 -82.65708160]
[51.39700699 -94.51550293]
[44.23231125 -107.73355865]
[39.34109879 -121.95065308]
[36.85680389 -136.77894592]
[36.84720230 -151.81388855]
[39.31254959 -166.64533997]
[44.18559647 -180.86868286]
[51.33339691 -194.09588623]
[60.56095886 -205.96609497]
[71.61654663 -216.15548706]
[84.19854736 -224.38610840]
[97.96372986 -230.43339539]
[112.53656006 -234.13238525]
[127.51947784 -235.38217163]
[142.50375366 -234.14863586]
[157.08058167 -230.46546936]
[170.85231018 -224.43310547]
[183.44323730 -216.21615601]
[194.50987244 -206.03875732]
[203.75030518 -194.17855835]
[210.91244507 -180.95912170]
[215.80091858 -166.74107361]
[218.28236389 -151.91230774]
[218.28907776 -136.87736511]
[215.82086182 -122.04638672]
[210.94508362 -107.82398987]
[203.79472351 -94.59816742]
[194.56488037 -82.72972870]
[183.50733948 -72.54245758]
[170.92373657 -64.31427002]
[157.15739441 -58.26963043]
[142.58386230 -54.57344818]
[143.83073425 -39.62536240]
[145.07760620 -24.67727470]
[151.82310486 -38.07497025]
[162.15766907 -48.94681168]
[175.19657898 -56.36211777]
[189.82365417 -59.68609238]
[204.78671265 -58.63419342]
[218.80487061 -53.29645920]
[230.67808533 -44.12983704]
[239.38992310 -31.91903687]
[244.19464111 -17.70936584]
[244.68090820 -2.71724987]
[240.80709839 11.77390575]
[232.90483093 24.52358055]
[221.65058899 34.44033432]
[208.00778198 40.67523956]
[193.14433289 42.69455338]
[178.33261108 40.32541656]
[164.84057617 33.77063370]
[153.82324219 23.59133339]
[146.22372437 10.65891647]
[142.69229126 -3.92293429]
[138.08673096 10.35252666]
[133.48115540 24.62798691]
[128.87559509 38.90344620]
[129.82118225 46.28257370]
[124.02288055 53.42621231]
[119.12133026 67.60276794]
[114.21977997 81.77932739]
[109.31822968 95.95588684]
[109.86824799 104.05413055]
[104.16442871 110.37455750]
[98.96901703 124.44607544]
[93.77359772 138.51759338]
[88.57818604 152.58911133]
[95.20502472 156.64080811]
[101.24253845 161.52351379]
[106.58724213 167.15270996]
[111.14762115 173.43104553]
[114.84574127 180.25012207]
[117.61853790 187.49227905]
[119.41889954 195.03263855]
[120.21648407 202.74128723]
[119.99822235 210.48551941]
[118.76852417 218.13206482]
[116.54918671 225.54946899]
[113.37904358 232.61024475]
[109.31324005 239.19317627]
[104.42230225 245.18531799]
[98.79089355 250.48396301]
[92.51639557 254.99841309]
[85.70713806 258.65151978]
[78.48063660 261.38095093]
[70.96145630 263.14041138]
[63.27915955 263.90020752]
[55.56600571 263.64794922]
[47.95470428 262.38864136]
[40.57613373 260.14456177]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 35]
[2 34]
[3 33]
[4 32]
[5 31]
[6 26]
[7 25]
[8 24]
[9 23]
[10 22]
[41 127]
[42 126]
[43 125]
[44 124]
[45 122]
[46 121]
[47 120]
[48 119]
[49 117]
[50 116]
[51 115]
[52 114]
[53 94]
[54 93]
[55 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
