%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGGAGCUUUAAUUUAUUAAUGCAAACAGUACCUAACAAACCCACAGGUCCUAAACUACCAAxxxxxxxxxxACCUAAGAAAUAUGUCUGAUAAAAGAGUUACUUUGAUAGAGUAAAUAAUAGGAGCUUAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[85.15119934 456.64627075]
[72.04067230 445.89682007]
[78.74066162 430.32290649]
[79.36463928 415.33590698]
[79.98861694 400.34887695]
[80.61259460 385.36187744]
[81.23657227 370.37484741]
[81.86054993 355.38784790]
[82.48452759 340.40081787]
[83.10850525 325.41381836]
[83.73248291 310.42678833]
[84.35646057 295.43978882]
[70.06371307 291.00506592]
[57.39623260 283.01556396]
[47.22073746 272.01086426]
[40.23525238 258.73699951]
[36.92127991 244.09600830]
[37.51057434 229.08462524]
[41.96897125 214.72634888]
[49.99828720 202.00169373]
[61.05627060 191.78128052]
[74.39321899 184.76620483]
[89.10279083 181.43997192]
[89.72676849 166.45295715]
[90.35073853 151.46594238]
[90.97471619 136.47892761]
[91.59869385 121.49191284]
[85.18772125 117.69408417]
[80.32127380 112.05122375]
[65.67777252 115.30204773]
[53.96250534 126.77743530]
[38.24177551 122.10938263]
[34.68772507 106.09999084]
[46.95645523 95.21833801]
[62.42694855 100.65854645]
[77.07044983 97.40772247]
[83.59842682 83.76816559]
[97.16934204 77.09865570]
[100.26766205 62.42213440]
[103.36598206 47.74560547]
[106.31146240 33.03764725]
[109.10379028 18.29983902]
[111.89611053 3.56203365]
[106.86302948 -11.43725395]
[116.83432770 -22.50172234]
[119.62665558 -37.23952866]
[122.41897583 -51.97733307]
[116.78701782 -65.87989044]
[104.52465057 -74.51900482]
[92.26228333 -83.15811920]
[75.88991547 -84.09490967]
[68.75769043 -98.86188507]
[78.20263672 -112.26804352]
[94.50859833 -110.52227783]
[100.90139771 -95.42048645]
[113.16377258 -86.78137207]
[125.42613983 -78.14225769]
[132.65348816 -80.14612579]
[128.64598083 -94.60088348]
[143.10079956 -98.60814667]
[147.10816956 -84.15386963]
[154.33551025 -86.15773773]
[160.39852905 -99.87779236]
[166.46154785 -113.59784698]
[172.52455139 -127.31790161]
[159.83618164 -135.37164307]
[148.48994446 -145.22662354]
[138.73931885 -156.66267395]
[130.80213928 -169.42428589]
[124.85573578 -183.22637939]
[121.03293610 -197.76060486]
[119.41915131 -212.70227051]
[120.05043030 -227.71757507]
[122.91267395 -242.47105408]
[127.94193268 -256.63311768]
[135.02586365 -269.88739014]
[144.00619507 -281.93774414]
[154.68231201 -292.51501465]
[166.81570435 -301.38284302]
[180.13529968 -308.34317017]
[194.34353638 -313.24044800]
[209.12301636 -315.96530151]
[224.14353943 -316.45687866]
[239.06953430 -314.70416260]
[253.56758118 -310.74630737]
[267.31375122 -304.67175293]
[280.00097656 -296.61618042]
[291.34579468 -286.75958252]
[301.09478760 -275.32217407]
[309.03015137 -262.55941772]
[314.97460938 -248.75646973]
[318.79534912 -234.22169495]
[320.40698242 -219.27980042]
[319.77359009 -204.26458740]
[316.90924072 -189.51152039]
[311.87796021 -175.35017395]
[304.79214478 -162.09690857]
[295.81008911 -150.04782104]
[285.13247681 -139.47209167]
[272.99780273 -130.60598755]
[259.67721558 -123.64756775]
[245.46829224 -118.75230408]
[230.68843079 -116.02954102]
[215.66783142 -115.54012299]
[200.74208069 -117.29496765]
[186.24461365 -121.25488281]
[180.18159485 -107.53483582]
[174.11857605 -93.81478119]
[168.05557251 -80.09472656]
[165.46203613 -65.85424042]
[157.81849670 -55.22096252]
[147.51947021 -49.61405945]
[137.15678406 -49.18500900]
[134.36445618 -34.44720459]
[131.57212830 -19.70939636]
[136.80494690 -5.76425600]
[126.63391876 6.35435820]
[123.84159851 21.09216309]
[121.04927063 35.82997131]
[122.90625000 43.03394699]
[118.04251099 50.84392929]
[114.94418335 65.52045441]
[111.84586334 80.19698334]
[122.29598999 94.05247498]
[120.13521576 111.27196503]
[106.58571625 122.11589050]
[105.96173859 137.10290527]
[105.33776093 152.08992004]
[104.71378326 167.07693481]
[104.08980560 182.06394958]
[118.47196960 186.60139465]
[131.17962646 194.70083618]
[141.34977722 205.80506897]
[148.29356384 219.15312195]
[151.54299927 233.83232117]
[150.88243103 248.84072876]
[146.36289978 263.15554810]
[138.29820251 275.80282593]
[127.24315643 285.92361450]
[113.95539856 292.83245850]
[99.34347534 296.06375122]
[98.71949768 311.05078125]
[98.09552002 326.03778076]
[97.47154236 341.02481079]
[96.84756470 356.01181030]
[96.22358704 370.99884033]
[95.59960938 385.98583984]
[94.97563171 400.97286987]
[94.35165405 415.95986938]
[93.72767639 430.94689941]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 142]
[12 141]
[23 130]
[24 129]
[25 128]
[26 127]
[27 126]
[29 36]
[30 35]
[38 123]
[39 122]
[40 121]
[41 119]
[42 118]
[43 117]
[45 115]
[46 114]
[47 113]
[48 57]
[49 56]
[50 55]
[62 109]
[63 108]
[64 107]
[65 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
