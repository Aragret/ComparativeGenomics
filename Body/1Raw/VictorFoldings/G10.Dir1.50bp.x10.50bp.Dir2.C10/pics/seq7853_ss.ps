%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAUACUACGGUCAAUGCUCUGAAAUCUGUGGAGCAAACCACAGUUUCAUGCCCAUCGUCCxxxxxxxxxxUGGCGCCUCAAUAUUCUUUAUCUGCCUCUUCCUACACAUCGGGCGAGGCCUAUAUUACGGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 260.18255615]
[92.50000000 245.18255615]
[92.50000000 230.18255615]
[92.50000000 215.18255615]
[92.50000000 200.18255615]
[92.50000000 185.18255615]
[92.50000000 170.18255615]
[92.50000000 155.18255615]
[92.50000000 140.18255615]
[92.50000000 125.18255615]
[78.59744263 119.55059814]
[68.15763092 130.32141113]
[57.71781921 141.09220886]
[47.50433731 152.07788086]
[37.52161407 163.27365112]
[34.72156525 179.43197632]
[19.23681450 184.83148193]
[6.99674654 173.91760254]
[10.59289360 157.91760254]
[26.32584763 153.29092407]
[36.30857468 142.09515381]
[36.92610931 137.29992676]
[40.60444641 132.86132812]
[46.94701004 130.65240479]
[57.38682175 119.88159180]
[67.82663727 109.11078644]
[65.82276154 101.88343811]
[51.30068970 98.12720490]
[61.81502533 87.42874908]
[59.81115341 80.20140839]
[45.31555939 76.34424591]
[30.81996155 72.48709106]
[16.32436562 68.62992859]
[1.82876849 64.77277374]
[-7.33556747 65.58934784]
[-12.92664814 60.68164825]
[-27.33886337 56.52376175]
[-41.75107956 52.36587524]
[-56.16329575 48.20798874]
[-70.57551575 44.05009842]
[-84.98773193 39.89221191]
[-98.69995880 47.75035095]
[-113.93041229 43.53031158]
[-121.64313507 29.73576546]
[-117.26230621 14.55077744]
[-103.38699341 6.98432875]
[-88.24916840 11.52545929]
[-80.82984161 25.47999573]
[-66.41762543 29.63788414]
[-52.00540924 33.79577255]
[-37.59319305 37.95365906]
[-23.18097687 42.11154556]
[-8.76876068 46.26943207]
[5.68592787 50.27717209]
[20.18152428 54.13433456]
[34.67712021 57.99149323]
[49.17271805 61.84865189]
[63.66831589 65.70581055]
[77.78338623 75.22830963]
[89.98827362 86.77293396]
[87.81143951 71.93173218]
[85.63459778 57.09052658]
[70.69413757 54.79402542]
[57.09506607 48.19427490]
[46.04660797 37.87812042]
[38.53118896 24.76286888]
[35.21707153 10.01471424]
[36.39894485 -5.05494308]
[41.97171783 -19.10612106]
[51.43986511 -30.88939857]
[63.96148300 -39.35701370]
[78.42315674 -43.75603485]
[93.53897095 -43.69529724]
[107.96482849 -39.18021011]
[120.41799164 -30.61224556]
[129.79113770 -18.75326347]
[135.25082397 -4.65775728]
[136.31156921 10.42091084]
[132.87904358 25.14195633]
[125.25846863 38.19639587]
[114.12747192 48.42343140]
[100.47580719 54.91368866]
[102.65264130 69.75489044]
[104.82948303 84.59609985]
[117.35543823 92.84838867]
[131.85104370 88.99122620]
[146.34663391 85.13407135]
[160.84222412 81.27690887]
[175.33782959 77.41975403]
[166.88781738 59.68584824]
[174.60169983 35.66135025]
[185.90069580 25.79562759]
[197.19970703 15.92990398]
[199.71388245 0.08508021]
[213.73994446 -7.70268250]
[228.51829529 -1.45927894]
[232.71223450 14.02588654]
[223.10455322 26.87391853]
[207.06542969 27.22890854]
[195.76641846 37.09463120]
[184.46742249 46.96035385]
[186.99179077 54.02275848]
[192.04055786 68.14756012]
[194.56492615 75.20996094]
[209.55763245 75.67800140]
[224.55032349 76.14604187]
[230.44508362 62.15975571]
[240.99702454 51.25008011]
[254.77908325 44.89246368]
[269.92733765 43.94672012]
[284.39315796 48.54075241]
[296.22009277 58.05326080]
[303.80868530 71.19774628]
[306.13265991 86.19653320]
[302.87765503 101.02116394]
[294.48394775 113.66671753]
[282.08670044 122.42298889]
[267.36251831 126.10576630]
[252.30271912 124.21698761]
[238.94406128 117.01209259]
[229.09317017 105.46548462]
[224.08227539 91.13874054]
[209.08958435 90.67070007]
[194.09689331 90.20265961]
[179.19499207 91.91534424]
[164.69938660 95.77250671]
[150.20379639 99.62966919]
[135.70819092 103.48682404]
[121.21260071 107.34398651]
[135.78289795 110.90856934]
[150.76565552 110.18942261]
[164.22373962 116.81360626]
[172.79269409 129.12510681]
[174.33030701 144.04609680]
[168.45217896 157.84637451]
[156.62783813 167.07591248]
[141.81329346 169.42739868]
[127.71215057 164.31292725]
[117.84963226 153.01112366]
[114.69138336 138.34629822]
[107.50000000 125.18255615]
[107.50000000 140.18255615]
[107.50000000 155.18255615]
[107.50000000 170.18255615]
[107.50000000 185.18255615]
[107.50000000 200.18255615]
[107.50000000 215.18255615]
[107.50000000 230.18255615]
[107.50000000 245.18255615]
[107.50000000 260.18255615]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 26]
[12 25]
[13 24]
[14 21]
[15 20]
[30 58]
[31 57]
[32 56]
[33 55]
[34 54]
[36 53]
[37 52]
[38 51]
[39 50]
[40 49]
[41 48]
[60 84]
[61 83]
[62 82]
[85 129]
[86 128]
[87 127]
[88 126]
[89 125]
[91 101]
[92 100]
[93 99]
[104 124]
[105 123]
[106 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
