%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUCACCCCACUACUAGGCCUCCUCCUAGCAGCAGCAGGCAAAUCAGCCCAAUUAGGUCUxxxxxxxxxxCGCAAAACUAACCCCCUAAUAAAAUUAAUUAACCACUCAUUCAUCGACCUCCCCACCCCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[114.72808075 253.75682068]
[114.10410309 238.76980591]
[113.48012543 223.78277588]
[112.85614777 208.79576111]
[112.23217773 193.80874634]
[111.60820007 178.82173157]
[110.98422241 163.83471680]
[110.36024475 148.84770203]
[96.45768738 143.21574402]
[85.57885742 153.54295349]
[74.70003510 163.87016296]
[63.82120895 174.19735718]
[52.94238663 184.52456665]
[57.65617371 199.04154968]
[55.59595490 214.16499329]
[47.17078781 226.89210510]
[34.05349731 234.69590759]
[18.84852982 236.02696228]
[4.57484198 230.62098694]
[-5.93351412 219.55133057]
[-10.59009743 205.01589966]
[-8.47033882 189.90069580]
[0.00488032 177.20686340]
[13.15280056 169.45475769]
[28.36289215 168.18359375]
[42.61518097 173.64573669]
[53.49400711 163.31854248]
[64.37283325 152.99133301]
[75.25165558 142.66412354]
[86.13047791 132.33691406]
[83.97669220 125.15283203]
[69.60843658 129.46017456]
[65.30132294 115.09185028]
[79.66910553 110.78464508]
[77.51531219 103.60055542]
[62.74925613 100.96168518]
[47.98320007 98.32282257]
[38.91845703 99.89835358]
[32.93877792 95.47240448]
[18.23081589 92.52692413]
[2.87684536 98.28779602]
[-9.61560917 87.66373444]
[-6.39538240 71.58386993]
[9.22483253 66.58978271]
[21.17629814 77.81896210]
[35.88425827 80.76444244]
[50.62206650 83.55677032]
[65.38812256 86.19563293]
[80.15417480 88.83449554]
[83.81372833 82.28791809]
[91.13283539 69.19476318]
[94.79238892 62.64818954]
[84.80966187 51.45242310]
[74.82693481 40.25665665]
[59.20289612 40.90734482]
[46.84755325 31.32196426]
[43.59471893 16.02643967]
[50.98028946 2.24284744]
[65.51701355 -3.52061939]
[80.34111023 1.45737123]
[88.45307922 14.82636452]
[86.02269745 30.27392960]
[96.00542450 41.46969604]
[105.98815155 52.66546249]
[120.92246246 54.06776428]
[132.81483459 44.92603302]
[144.70721436 35.78429794]
[156.59959412 26.64256287]
[168.49197388 17.50082779]
[160.68121338 4.67744684]
[154.30270386 -8.91526794]
[149.43124390 -23.11794853]
[146.12394714 -37.76407623]
[144.41960144 -52.68193054]
[144.33816528 -67.69660950]
[145.88061523 -82.63208008]
[149.02885437 -97.31321716]
[153.74597168 -111.56790161]
[159.97666931 -125.22899628]
[167.64790344 -138.13635254]
[176.66970825 -150.13861084]
[186.93630981 -161.09506226]
[198.32736206 -170.87725830]
[210.70928955 -179.37049866]
[223.93693542 -186.47518921]
[237.85519409 -192.10806274]
[252.30088806 -196.20304871]
[267.10467529 -198.71215820]
[282.09292603 -199.60595703]
[297.08999634 -198.87397766]
[311.91998291 -196.52479553]
[326.40902710 -192.58593750]
[340.38726807 -187.10362244]
[353.69082642 -180.14208984]
[366.16369629 -171.78298950]
[377.65966797 -162.12429810]
[388.04391479 -151.27928162]
[397.19473267 -139.37509155]
[405.00482178 -126.55129242]
[411.38259888 -112.95822906]
[416.25326538 -98.75528717]
[419.55978394 -84.10898590]
[421.26333618 -69.19104004]
[421.34396362 -54.17635345]
[419.80072021 -39.24097061]
[416.65167236 -24.56000137]
[411.93377686 -10.30557251]
[405.70236206 3.35519242]
[398.03042603 16.26212692]
[389.00799561 28.26390266]
[378.74078369 39.21980667]
[367.34921265 49.00138474]
[354.96682739 57.49395370]
[341.73880005 64.59794617]
[327.82025146 70.23006439]
[313.37432861 74.32427979]
[298.57040405 76.83258820]
[283.58209229 77.72558594]
[268.58508301 76.99279022]
[253.75521851 74.64280701]
[239.26637268 70.70317841]
[225.28843689 65.22010040]
[211.98526001 58.25786209]
[199.51283264 49.89808273]
[188.01739502 40.23878098]
[177.63371277 29.39320755]
[165.74133301 38.53494263]
[153.84895325 47.67667770]
[141.95657349 56.81841278]
[130.06419373 65.96014404]
[144.98677063 64.43802643]
[159.54141235 68.06598663]
[172.00366211 76.41419220]
[180.89692688 88.49349976]
[185.16752625 102.87272644]
[184.30944824 117.84815979]
[178.42436218 131.64546204]
[168.20954895 142.62989807]
[154.87530518 149.49996948]
[140.00151062 151.44171143]
[125.34725952 148.22372437]
[125.97123718 163.21073914]
[126.59521484 178.19775391]
[127.21919250 193.18476868]
[127.84317017 208.17178345]
[128.46714783 223.15881348]
[129.09112549 238.14582825]
[129.71510315 253.13284302]
[136.41508484 268.70675659]
[123.30456543 279.45617676]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 148]
[2 147]
[3 146]
[4 145]
[5 144]
[6 143]
[7 142]
[8 141]
[9 30]
[10 29]
[11 28]
[12 27]
[13 26]
[35 49]
[36 48]
[37 47]
[39 46]
[40 45]
[52 64]
[53 63]
[54 62]
[65 130]
[66 129]
[67 128]
[68 127]
[69 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
