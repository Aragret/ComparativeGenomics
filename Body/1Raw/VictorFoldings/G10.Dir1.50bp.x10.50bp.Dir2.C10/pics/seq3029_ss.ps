%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCGCUAUUAAAGGUUCGUUUGUUCAACGAUUAAAGUCCUACGUGAUCUGAGUUCAGACCGxxxxxxxxxxAAUAGCUUUUUGAUGACUUCUAGCAAGCCUCGCUAACCUCGCCUUACCCCCCACUAUUAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[98.28828430 459.94345093]
[98.28828430 444.94345093]
[98.28828430 429.94345093]
[98.28828430 414.94345093]
[98.28828430 399.94345093]
[98.28828430 384.94345093]
[98.28828430 369.94345093]
[98.28828430 354.94345093]
[98.28828430 339.94345093]
[98.28828430 324.94345093]
[80.92884064 320.45089722]
[65.46273804 311.35333252]
[53.08498383 298.34606934]
[44.75406265 282.42669678]
[41.11772537 264.81869507]
[42.46264267 246.87745667]
[48.69179535 229.98577881]
[59.33144379 215.44744873]
[73.56716156 204.38655090]
[90.30617523 197.66052246]
[88.43856812 182.77723694]
[86.57095337 167.89396667]
[84.70333862 153.01068115]
[82.83572388 138.12741089]
[70.48415375 129.61631775]
[55.91144943 133.17108154]
[41.33874893 136.72584534]
[26.76604462 140.28059387]
[12.19334221 143.83535767]
[2.66555023 156.74275208]
[-13.37106419 157.19723511]
[-23.61458206 144.85017395]
[-20.20705414 129.17318726]
[-5.76244402 122.19229126]
[8.63858032 129.26266479]
[23.21128273 125.70789337]
[37.78398514 122.15313721]
[52.35668945 118.59837341]
[66.92938995 115.04360962]
[64.98497772 101.22903442]
[68.38271332 88.21653748]
[76.22752380 77.91684723]
[87.00258636 71.68903351]
[84.21025848 56.95122528]
[81.41793060 42.21342087]
[78.62561035 27.47561455]
[75.83328247 12.73780823]
[71.67539978 -1.67440748]
[66.18836975 -15.63479710]
[60.70133591 -29.59518623]
[53.51882553 -42.76377106]
[44.75261688 -54.93560791]
[37.14709473 -60.11323547]
[35.93376541 -67.45309448]
[28.43760300 -72.78782654]
[27.37723351 -80.15133667]
[19.12494469 -92.67729187]
[10.87265587 -105.20325470]
[2.62036657 -117.72921753]
[-12.27459717 -124.59012604]
[-13.51071548 -140.94262695]
[0.18362407 -149.96466064]
[14.72085953 -142.37513733]
[15.14632893 -125.98150635]
[23.39861870 -113.45554352]
[31.65090752 -100.92958069]
[39.90319443 -88.40362549]
[48.28533936 -75.96417999]
[56.92445374 -63.70181274]
[65.69066620 -51.52997589]
[65.65497589 -66.52993774]
[72.02233124 -80.11141968]
[83.57554626 -89.67819977]
[98.10610199 -93.40149689]
[112.83634949 -90.56954956]
[124.95044708 -81.72372437]
[132.13267517 -68.55498505]
[133.01007080 -53.58066940]
[127.41490936 -39.66326141]
[116.41677856 -29.46321297]
[102.11805725 -24.93036461]
[87.25210571 -26.93121338]
[74.66172791 -35.08221817]
[80.14875793 -21.12182808]
[85.63578796 -7.16143894]
[90.56439972 -21.32860947]
[102.27792358 -30.69842148]
[117.18162537 -32.39539719]
[130.70175171 -25.89875793]
[138.68913269 -13.20223904]
[138.69256592 1.79776073]
[130.71098328 14.49793148]
[117.19383240 21.00075340]
[102.28936005 19.31059265]
[90.57109070 9.94548416]
[93.36341858 24.68329048]
[96.15573883 39.42109680]
[98.94806671 54.15890121]
[101.74038696 68.89670563]
[117.13832092 73.98612976]
[127.89162445 86.12552643]
[142.53512573 82.87470245]
[157.17863464 79.62387848]
[171.82212830 76.37305450]
[178.87776184 62.41769028]
[193.27328491 56.31009293]
[208.21159363 60.93407440]
[216.63925171 74.10633850]
[214.57699585 89.60733795]
[202.99855042 100.11798096]
[187.37089539 100.67546082]
[175.07295227 91.01655579]
[160.42945862 94.26737976]
[145.78594971 97.51820374]
[131.14245605 100.76903534]
[130.65220642 109.24203491]
[127.83896637 117.49241638]
[122.79249573 124.87980652]
[115.77957916 130.79785156]
[107.23165894 134.72314453]
[97.71900940 136.25979614]
[99.58661652 151.14306641]
[101.45423126 166.02635193]
[103.32184601 180.90963745]
[105.18946075 195.79290771]
[117.45059967 196.87231445]
[129.28347778 200.24238586]
[140.26428223 205.78039551]
[150.00013733 213.28604126]
[158.14309692 222.48863220]
[164.40258789 233.05688477]
[168.55581665 244.61082458]
[170.45568848 256.73547363]
[170.03596497 268.99575806]
[167.31364441 280.95208740]
[162.38824463 292.17614746]
[155.43815613 302.26617432]
[146.71421814 310.86151123]
[136.53059387 317.65527344]
[125.25357056 322.40542603]
[113.28828430 324.94345093]
[113.28828430 339.94345093]
[113.28828430 354.94345093]
[113.28828430 369.94345093]
[113.28828430 384.94345093]
[113.28828430 399.94345093]
[113.28828430 414.94345093]
[113.28828430 429.94345093]
[113.28828430 444.94345093]
[113.28828430 459.94345093]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[20 125]
[21 124]
[22 123]
[23 122]
[24 121]
[25 39]
[26 38]
[27 37]
[28 36]
[29 35]
[43 99]
[44 98]
[45 97]
[46 96]
[47 95]
[48 85]
[49 84]
[50 83]
[51 70]
[52 69]
[54 68]
[56 67]
[57 66]
[58 65]
[59 64]
[101 115]
[102 114]
[103 113]
[104 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
