%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGGACUAACCCCUAUACCUUCUGCAUAAUGAAUUAACUAGAAAUAACUUUGCAAGGAGAGCCAAAxxxxxxxxxxUCUUCGAAUUUGCAAUUCAAUAUGAAAAUCACCUCGGAGCUGGUAAAAAGAGGCCUAACCCCUGUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[139.35101318 313.33407593]
[139.05833435 298.33691406]
[138.76565552 283.33978271]
[138.47297668 268.34262085]
[138.18029785 253.34548950]
[137.88763428 238.34834290]
[137.59495544 223.35119629]
[137.30227661 208.35404968]
[137.00959778 193.35690308]
[132.40219116 179.08204651]
[123.87195587 166.74368286]
[115.34172058 154.40531921]
[106.81148529 142.06695557]
[107.80020142 157.03434753]
[104.19482422 171.59460449]
[96.33619690 184.37121582]
[84.96727753 194.15629578]
[71.16287994 200.02474976]
[56.22807693 201.42176819]
[41.57480240 198.21528625]
[28.58837318 190.70845032]
[18.49652672 179.61093140]
[12.25334644 165.97192383]
[10.44906044 151.08084106]
[13.25424671 136.34547424]
[20.40370369 123.15891266]
[31.22152138 112.76782227]
[44.68498230 106.15456390]
[59.52125549 103.94435883]
[74.32772064 106.34616089]
[87.70457458 113.13290405]
[98.38655090 123.66213989]
[94.62219238 109.14216614]
[90.15427399 94.82302856]
[84.99342346 80.73879242]
[79.83257294 66.65456390]
[74.67172241 52.57032776]
[62.65875244 42.27474213]
[65.54477692 27.66241455]
[60.38392639 13.57818222]
[55.22307587 -0.50605124]
[50.06222534 -14.59028435]
[47.05179977 0.10452232]
[39.27398682 12.93049622]
[27.63517761 22.39295387]
[13.49170876 27.38918114]
[-1.50819981 27.33694077]
[-15.61652374 22.24231720]
[-27.18914032 12.69901848]
[-34.87742615 -0.18082115]
[-37.78541946 -14.89624023]
[-35.57423782 -29.73236847]
[-28.50156403 -42.96026611]
[-17.39161301 -53.03841019]
[-3.53909278 -58.79233932]
[11.44168377 -59.55150986]
[25.80492020 -55.22745895]
[37.87678909 -46.32408905]
[46.24946976 -33.88122940]
[45.66422653 -48.86980820]
[45.07898712 -63.85838699]
[44.49374390 -78.84696960]
[43.90850449 -93.83554840]
[43.32326126 -108.82412720]
[39.55890656 -123.34409332]
[32.78819656 -136.72906494]
[18.77236557 -145.24308777]
[19.40827179 -161.62989807]
[34.04174805 -169.03216553]
[47.61912918 -159.83505249]
[46.17316818 -143.49978638]
[52.94387817 -130.11480713]
[53.82590103 -145.08885193]
[58.48780823 -159.34600830]
[66.62292480 -171.94839478]
[77.69608307 -182.06694031]
[90.97884369 -189.03604126]
[105.59741211 -192.39721680]
[120.59011078 -191.92935181]
[134.97065735 -187.66323853]
[147.79304504 -179.87951660]
[158.21376038 -169.09022522]
[165.54727173 -156.00514221]
[169.31117249 -141.48504639]
[169.25782776 -126.48513794]
[165.39077759 -111.99217987]
[157.96438599 -98.95957184]
[147.46720886 -88.24466705]
[134.58978271 -80.55233002]
[120.17925262 -76.38859558]
[105.18360901 -76.02737427]
[90.58930969 -79.49242401]
[77.35644531 -86.55580902]
[66.35552979 -96.75285339]
[58.31184006 -109.40936279]
[58.89708328 -94.42078400]
[59.48232269 -79.43220520]
[60.06756592 -64.44362640]
[60.65280533 -49.45505142]
[61.23804855 -34.46647263]
[64.14646149 -19.75113487]
[69.30731201 -5.66690159]
[74.46816254 8.41733170]
[79.62901306 22.50156403]
[91.27284241 31.78975296]
[88.75595856 47.40947723]
[93.91680908 61.49371338]
[99.07765961 75.57794189]
[104.23851013 89.66217804]
[113.05748749 77.52852631]
[128.03222656 76.65834045]
[138.19728088 87.68883514]
[136.10914612 102.54277802]
[123.29690552 110.34319305]
[109.14216614 105.37780762]
[112.90652466 119.89778137]
[119.14984894 133.53672791]
[127.68008423 145.87509155]
[136.21031189 158.21343994]
[144.74055481 170.55180359]
[143.79072571 155.58190918]
[145.72756958 140.70747375]
[150.47924805 126.47998810]
[157.86959839 113.42691040]
[167.62461853 102.03220367]
[179.38265991 92.71832275]
[192.70779419 85.83057404]
[207.10597229 81.62432098]
[222.04338074 80.25551605]
[236.96623230 81.77490234]
[251.32125854 86.12615204]
[264.57623291 93.14794159]
[276.23974609 102.57994080]
[285.87936401 114.07245636]
[293.13769531 127.19940186]
[297.74563599 141.47409058]
[299.53234863 156.36729431]
[298.43157959 171.32685852]
[294.48419189 185.79814148]
[287.83645630 199.24461365]
[278.73489380 211.16777039]
[267.51693726 221.12554932]
[254.59848022 228.74876404]
[240.45848083 233.75477600]
[225.62117004 235.95800781]
[210.63664246 235.27676392]
[196.06047058 231.73629761]
[182.43302917 225.46786499]
[170.25959778 216.70388794]
[159.99147034 205.76928711]
[152.00674438 193.06422424]
[152.29942322 208.06137085]
[152.59210205 223.05851746]
[152.88476562 238.05566406]
[153.17744446 253.05281067]
[153.47012329 268.04995728]
[153.76280212 283.04708862]
[154.05548096 298.04425049]
[154.34815979 313.04138184]
[156.91433716 332.25244141]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 159]
[2 158]
[3 157]
[4 156]
[5 155]
[6 154]
[7 153]
[8 152]
[9 151]
[10 120]
[11 119]
[12 118]
[13 117]
[32 116]
[33 115]
[34 109]
[35 108]
[36 107]
[37 106]
[39 104]
[40 103]
[41 102]
[42 101]
[59 100]
[60 99]
[61 98]
[62 97]
[63 96]
[64 95]
[65 72]
[66 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
