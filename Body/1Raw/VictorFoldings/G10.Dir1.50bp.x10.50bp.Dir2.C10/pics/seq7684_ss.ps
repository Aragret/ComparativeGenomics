%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUCGCCCUCCCAUCCCUACGCAUCCUUUACAUAACAGACGAGGUCAACGAUCCCUCCCUxxxxxxxxxxCUACGACAAACAGACCUAAAAUCGCUCAUUGCAUACUCUUCAAUCAGCCACAUAGCCCUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-7.64401197 277.02297974]
[-15.89630127 289.54895020]
[-24.14859009 302.07489014]
[-32.13850784 314.76983643]
[-39.86259079 327.62823486]
[-47.58667755 340.48663330]
[-55.31076050 353.34503174]
[-63.03484726 366.20343018]
[-70.75893402 379.06182861]
[-78.48301697 391.92025757]
[-86.20709991 404.77865601]
[-89.18020630 421.46987915]
[-106.04216766 423.23355103]
[-112.40477753 407.51879883]
[-99.06550598 397.05456543]
[-91.34141541 384.19616699]
[-83.61733246 371.33776855]
[-75.89324951 358.47937012]
[-68.16916656 345.62094116]
[-60.44507980 332.76254272]
[-52.72099304 319.90414429]
[-44.99691010 307.04574585]
[-45.28282166 302.21939087]
[-42.49504852 297.17364502]
[-36.67455292 293.82260132]
[-28.42226219 281.29666138]
[-20.16997337 268.77069092]
[-32.47846603 259.29162598]
[-44.04207230 248.91691589]
[-54.79576874 237.70489502]
[-64.67909241 225.71859741]
[-73.63647461 213.02540588]
[-81.61754608 199.69671631]
[-88.57743073 185.80744934]
[-94.47700500 171.43572998]
[-99.28308105 156.66233826]
[-102.96865082 141.57034302]
[-105.51298523 126.24461365]
[-106.90177917 110.77132416]
[-107.12722015 95.23746490]
[-106.18804932 79.73038483]
[-104.08953094 64.33728027]
[-100.84348297 49.14469147]
[-96.46814728 34.23804855]
[-90.98812866 19.70116615]
[-84.43423462 5.61578226]
[-76.84332275 -7.93890619]
[-68.25806427 -20.88668442]
[-58.72674561 -33.15475082]
[-48.30294800 -44.67412567]
[-37.04528809 -55.38003922]
[-46.55364609 -66.98138428]
[-56.06200409 -78.58272552]
[-65.57035828 -90.18406677]
[-80.88298035 -88.30597687]
[-94.77021027 -95.02523804]
[-102.80068207 -108.19775391]
[-102.41190338 -123.62021637]
[-93.72792816 -136.37138367]
[-79.51979065 -142.38240051]
[-64.32124329 -139.73516846]
[-52.98209763 -129.27441406]
[-49.12063217 -114.33812714]
[-53.96902084 -99.69242096]
[-44.46066284 -88.09107971]
[-34.95230484 -76.48973846]
[-25.44394493 -64.88839722]
[-14.96131420 -72.36085510]
[-4.03483820 -79.16785431]
[7.29329681 -85.28311920]
[18.97935486 -90.68304443]
[30.97821999 -95.34677124]
[43.24356461 -99.25630188]
[55.72803497 -102.39654541]
[68.38343048 -104.75536346]
[81.16089630 -106.32366943]
[94.01109314 -107.09539032]
[106.88441467 -107.06755829]
[119.73115540 -106.24027252]
[132.50170898 -104.61672974]
[145.14678955 -102.20320129]
[157.61756897 -99.00900269]
[169.86589050 -95.04647064]
[181.84448242 -90.33089447]
[193.50708008 -84.88048553]
[204.80865479 -78.71629333]
[215.70559692 -71.86210632]
[226.15580750 -64.34439087]
[236.11897278 -56.19216919]
[245.55659485 -47.43692017]
[254.43225098 -38.11244583]
[262.71166992 -28.25474358]
[270.36288452 -17.90187263]
[277.35638428 -7.09380484]
[283.66513062 4.12773275]
[289.26477051 15.71941566]
[294.13369751 27.63648987]
[298.25311279 39.83294678]
[301.60708618 52.26169968]
[304.18273926 64.87475586]
[305.97003174 77.62342834]
[306.96212769 90.45849609]
[307.15521240 103.33039856]
[306.54846191 116.18943787]
[321.45037842 117.90213013]
[336.35226440 119.61481476]
[350.94564819 113.50381470]
[362.70623779 122.64370728]
[377.60812378 124.35639191]
[392.51004028 126.06908417]
[407.41192627 127.78176880]
[417.10009766 115.77581787]
[431.74841309 110.93526459]
[446.68261719 114.80473328]
[457.13729858 126.14948273]
[459.77639771 141.34944153]
[453.75775146 155.55435181]
[441.00195312 164.23150635]
[425.57928467 164.61203003]
[412.41107178 156.57449341]
[405.69924927 142.68367004]
[390.79733276 140.97097778]
[375.89544678 139.25830078]
[360.99353027 137.54560852]
[347.46606445 143.77911377]
[334.63958740 134.51672363]
[319.73767090 132.80403137]
[304.83578491 131.09133911]
[301.60385132 147.75196838]
[297.01919556 164.09219360]
[291.11251831 180.00234985]
[283.92346191 195.37570190]
[275.50030518 210.10906982]
[265.89953613 224.10362244]
[255.18559265 237.26542664]
[243.43035889 249.50619507]
[230.71269226 260.74377441]
[217.11795044 270.90277100]
[202.73735046 279.91497803]
[187.66738892 287.72000122]
[172.00917053 294.26541138]
[155.86778259 299.50729370]
[139.35151672 303.41049194]
[122.57119751 305.94879150]
[105.63942719 307.10519409]
[88.66982269 306.87191772]
[71.77623749 305.25054932]
[55.07203674 302.25192261]
[38.66930389 297.89620972]
[22.67809486 292.21261597]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 27]
[2 26]
[3 25]
[4 22]
[5 21]
[6 20]
[7 19]
[8 18]
[9 17]
[10 16]
[11 15]
[51 67]
[52 66]
[53 65]
[54 64]
[104 128]
[105 127]
[106 126]
[108 124]
[109 123]
[110 122]
[111 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
