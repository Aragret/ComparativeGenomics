%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACAGUUAAAUCAACAAAACUGCUCGCCAGAACACUACGAGCCACAGCUUAAAACUCAAAGxxxxxxxxxxACUUAGCAUUAACCUUUUAAGUUAAAGAUUAAGAGAACCAACACCUCUUUACAGUGAAAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[100.77946472 280.92675781]
[100.77946472 265.92675781]
[100.77946472 250.92674255]
[100.77946472 235.92674255]
[100.77946472 220.92674255]
[100.77946472 205.92674255]
[100.77946472 190.92674255]
[100.77946472 175.92674255]
[100.77946472 160.92674255]
[100.77946472 145.92674255]
[88.94424438 143.51692200]
[78.41174316 138.18528748]
[69.86788177 130.43977356]
[58.16825867 139.82693481]
[46.46863174 149.21409607]
[34.76900864 158.60125732]
[37.18253708 173.76933289]
[31.67369270 188.10627747]
[19.72432899 197.75555420]
[4.54876518 200.12152100]
[-9.77084923 194.56776428]
[-19.38261032 182.58821106]
[-21.70100021 167.40530396]
[-16.10238647 153.10316467]
[-4.09276724 143.52900696]
[11.09733105 141.25822449]
[25.38184738 146.90164185]
[37.08147049 137.51446533]
[48.78109360 128.12730408]
[60.48072052 118.74015045]
[56.47298050 104.28546143]
[41.60993195 102.26312256]
[26.74688530 100.24079132]
[11.88383770 98.21846008]
[-2.97920895 96.19612122]
[-13.73949528 103.38431549]
[-26.11245537 101.35235596]
[-33.51758957 91.73616028]
[-48.33534622 89.40505219]
[-63.43638229 95.79964447]
[-76.35997009 85.70444489]
[-73.81143188 69.50453949]
[-58.41247940 63.86499786]
[-46.00424576 74.58729553]
[-31.18648529 76.91840363]
[-15.21087170 69.72258759]
[-0.95687443 81.33307648]
[13.90617275 83.35540771]
[28.76921844 85.37774658]
[43.63226700 87.40007782]
[58.49531174 89.42241669]
[65.74047852 76.72846985]
[76.53163147 67.60746002]
[89.34265137 62.91590118]
[102.49948120 62.91445923]
[98.73062897 47.54870987]
[109.58715057 37.35139847]
[113.59489441 22.89670944]
[117.60263824 8.44202137]
[111.93080139 -3.18915009]
[115.61235809 -15.17518902]
[126.13913727 -21.21623421]
[130.44671631 -35.58441925]
[134.75430298 -49.95260239]
[139.06188965 -64.32078552]
[134.38830566 -82.10104370]
[147.54849243 -93.66863251]
[151.55624390 -108.12332153]
[155.56398010 -122.57801056]
[159.57171631 -137.03269958]
[146.49249268 -144.54165649]
[135.69213867 -155.06797791]
[127.84960175 -167.94995117]
[123.45784760 -182.37782288]
[122.79296875 -197.44464111]
[125.89673615 -212.20327759]
[132.57406616 -225.72599792]
[142.40519714 -237.16276550]
[154.77214050 -245.79464722]
[168.89750671 -251.07904053]
[183.89337158 -252.68374634]
[198.81706238 -250.50791931]
[212.73046875 -244.68830872]
[224.75898743 -235.59075928]
[234.14649963 -223.78712463]
[240.30288696 -210.01942444]
[242.84117126 -195.15309143]
[241.60176086 -180.12263489]
[236.66259766 -165.87287903]
[228.33415222 -153.29957581]
[217.13995361 -143.19309998]
[203.78369141 -136.18876648]
[189.10493469 -132.72683716]
[174.02641296 -133.02496338]
[170.01866150 -118.57027435]
[166.01092529 -104.11558533]
[162.00318909 -89.66089630]
[167.69447327 -78.94097900]
[164.42578125 -66.83583069]
[153.43006897 -60.01320267]
[149.12248230 -45.64501953]
[144.81489563 -31.27683449]
[140.50732422 -16.90865135]
[145.48356628 -0.10874142]
[132.05732727 12.44976139]
[128.04957581 26.90444946]
[124.04183960 41.35913849]
[128.09735107 55.69099426]
[116.95417023 66.92220306]
[138.27702332 83.83219147]
[143.91102600 113.47946930]
[158.32324219 117.63735962]
[172.73545837 121.79524994]
[187.14767456 125.95313263]
[201.55987549 130.11102295]
[213.10324097 119.87606049]
[228.35105896 117.52925873]
[242.43782043 123.81947327]
[250.86848450 136.73951721]
[250.95286560 152.16664124]
[242.66401672 165.17813110]
[228.64691162 171.62203979]
[213.37432861 169.44216919]
[201.71971130 159.33407593]
[197.40199280 144.52323914]
[182.98977661 140.36535645]
[168.57756042 136.20745850]
[154.16534424 132.04957581]
[139.75312805 127.89168549]
[133.75971985 132.40045166]
[144.41423035 142.95892334]
[155.06874084 153.51739502]
[168.60316467 159.98419189]
[173.10331726 174.29322815]
[165.70674133 187.34277344]
[151.11827087 190.83224487]
[138.61737061 182.54203796]
[136.15565491 167.74545288]
[128.96426392 154.58172607]
[121.77288055 141.41798401]
[115.77946472 145.92674255]
[115.77946472 160.92674255]
[115.77946472 175.92674255]
[115.77946472 190.92674255]
[115.77946472 205.92674255]
[115.77946472 220.92674255]
[115.77946472 235.92674255]
[115.77946472 250.92674255]
[115.77946472 265.92675781]
[115.77946472 280.92675781]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[13 30]
[14 29]
[15 28]
[16 27]
[31 51]
[32 50]
[33 49]
[34 48]
[35 47]
[38 45]
[39 44]
[55 109]
[57 107]
[58 106]
[59 105]
[62 103]
[63 102]
[64 101]
[65 100]
[67 97]
[68 96]
[69 95]
[70 94]
[111 129]
[112 128]
[113 127]
[114 126]
[115 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
