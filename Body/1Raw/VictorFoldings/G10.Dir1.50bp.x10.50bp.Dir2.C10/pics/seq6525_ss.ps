%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUACCCUCCCUUAGCAGGGAACUACUCCCACCCUGGAGCCUCCGUAGACCUAACCAUCUUCxxxxxxxxxxAGCAUUUACCAUCUCACUUCUAGGAAUACUAGUAUAUCGCUCACACCUCAUAUCCUCCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[96.28923798 398.04666138]
[96.28923798 383.04666138]
[96.28923798 368.04666138]
[96.28923798 353.04666138]
[96.28923798 338.04666138]
[96.28923798 323.04666138]
[96.28923798 308.04666138]
[96.28923798 293.04666138]
[96.28923798 278.04666138]
[96.28923798 263.04666138]
[81.24875641 259.44961548]
[67.49143982 252.36724854]
[55.81222153 242.20411682]
[46.88709259 229.54293823]
[41.23395157 215.11119080]
[39.18253326 199.73930359]
[40.85521698 184.31285095]
[46.15970612 169.72154236]
[54.79411697 156.80792236]
[66.26416779 146.31874084]
[79.91145325 138.86169434]
[94.95125580 134.87031555]
[94.63919830 119.87356567]
[83.13739777 110.24503326]
[68.31964111 112.57614136]
[53.50188065 114.90724182]
[38.68412399 117.23834991]
[23.86636543 119.56945038]
[19.00652695 134.08291626]
[7.95058918 144.66708374]
[-6.76087427 148.88981628]
[-21.74727631 145.78074646]
[-33.56484985 136.05430603]
[-39.49800873 121.94558716]
[-38.18334961 106.69664001]
[-29.92297554 93.81157684]
[-16.61505890 86.25128937]
[-1.31766069 85.75308228]
[12.45398712 92.43142700]
[21.53526115 104.75169373]
[36.35301971 102.42059326]
[51.17077637 100.08948517]
[65.98853302 97.75838470]
[80.80629730 95.42727661]
[92.30809784 85.79875183]
[97.20964813 71.62219238]
[102.11119843 57.44563675]
[107.01274872 43.26907730]
[111.02049255 28.81439018]
[114.11881256 14.13786411]
[107.73252869 2.88312316]
[110.65927887 -9.30921364]
[120.78874969 -15.99510670]
[124.19172668 -30.60400009]
[127.59470367 -45.21289062]
[119.50993347 -58.52732849]
[123.16914368 -73.29434967]
[135.91224670 -80.91989136]
[139.31523132 -95.52877808]
[142.71820068 -110.13767242]
[146.12118530 -124.74656677]
[132.17433167 -130.34884644]
[119.24615479 -138.01454163]
[107.63973999 -147.56396484]
[97.62714386 -158.77326965]
[89.44306946 -171.37966919]
[83.27937317 -185.08767700]
[79.28054047 -199.57592773]
[77.54029846 -214.50483704]
[78.09945679 -229.52441406]
[80.94490051 -244.28259277]
[86.00992584 -258.43341064]
[93.17580414 -271.64517212]
[102.27455139 -283.60818481]
[113.09289551 -294.04196167]
[125.37722015 -302.70196533]
[138.83956909 -309.38519287]
[153.16438293 -313.93496704]
[168.01583862 -316.24462891]
[183.04582214 -316.26004028]
[197.90197754 -313.98086548]
[212.23609924 -309.46051025]
[225.71214294 -302.80493164]
[238.01420593 -294.17013550]
[248.85394287 -283.75857544]
[257.97723389 -271.81427002]
[265.17019653 -258.61724854]
[270.26425171 -244.47685242]
[273.13998413 -229.72454834]
[273.72994995 -214.70614624]
[272.02035522 -199.77369690]
[268.05126953 -185.27726746]
[261.91571045 -171.55664062]
[253.75752258 -158.93347168]
[243.76795959 -147.70365906]
[232.18115234 -138.13043213]
[219.26875305 -130.43821716]
[205.33341980 -124.80731964]
[190.70182800 -121.36975098]
[175.71694946 -120.20607758]
[160.73007202 -121.34358978]
[157.32710266 -106.73469543]
[153.92411804 -92.12580109]
[150.52114868 -77.51690674]
[158.58279419 -65.04513550]
[155.33979797 -50.18115997]
[142.20359802 -41.80991364]
[138.80061340 -27.20102119]
[135.39764404 -12.59212875]
[141.41209412 3.86467242]
[128.79533386 17.23618507]
[125.69701385 31.91271210]
[139.02632141 25.03306007]
[153.37356567 29.40989304]
[160.59303284 42.55824661]
[156.58586121 57.01308823]
[143.62712097 64.56762695]
[129.07418823 60.93274307]
[121.18930817 48.17062759]
[116.28775787 62.34718704]
[111.38620758 76.52374268]
[106.48465729 90.70030212]
[111.47209167 93.01537323]
[115.38997650 97.95825958]
[116.91725159 104.92142487]
[115.10099792 112.67024994]
[109.63595581 119.56150818]
[109.94801331 134.55825806]
[124.20253754 137.59814453]
[137.41049194 143.74330139]
[148.90530396 152.67990112]
[158.10771179 163.95332336]
[164.55491638 176.99130249]
[167.92387390 191.13296509]
[168.04747009 205.66232300]
[164.92282104 219.84452820]
[158.71124268 232.96308899]
[149.72991943 244.35594177]
[138.43571472 253.44902039]
[125.40194702 259.78506470]
[111.28923798 263.04666138]
[111.28923798 278.04666138]
[111.28923798 293.04666138]
[111.28923798 308.04666138]
[111.28923798 323.04666138]
[111.28923798 338.04666138]
[111.28923798 353.04666138]
[111.28923798 368.04666138]
[111.28923798 383.04666138]
[111.28923798 398.04666138]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[22 128]
[23 127]
[24 44]
[25 43]
[26 42]
[27 41]
[28 40]
[45 122]
[46 121]
[47 120]
[48 119]
[49 112]
[50 111]
[53 109]
[54 108]
[55 107]
[58 104]
[59 103]
[60 102]
[61 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
