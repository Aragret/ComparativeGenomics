%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACUAAAACCCCUACGCAUUUAUAUAGAGGAGACAAGUCGUAACAUGGUAAGUGUACUGGAxxxxxxxxxxGGCUAUAUACAACUACGCAAAGGCCCCAACGUUGUAGGCCCCUACGGGCUACUACAACCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[87.87158203 267.16308594]
[87.87158203 252.16308594]
[87.87158203 237.16308594]
[87.87158203 222.16308594]
[87.87158203 207.16308594]
[87.87158203 192.16308594]
[87.87158203 177.16308594]
[87.87158203 162.16308594]
[87.87158203 147.16308594]
[87.87158203 132.16308594]
[75.57016754 116.96781158]
[74.88546753 100.09864807]
[61.49918365 106.86676025]
[74.53839874 114.28153229]
[77.08151245 129.06437683]
[67.26970673 140.41024780]
[52.27462769 140.02619934]
[43.05645370 128.19297791]
[46.35252762 113.56020355]
[32.33581543 118.90171814]
[18.37542343 124.38874817]
[4.47286844 130.02070618]
[-9.42968750 135.65266418]
[-11.47367191 150.87493896]
[-20.86765289 163.02601624]
[-35.08469772 168.83731079]
[-50.30049133 166.74562073]
[-62.42206573 157.31359863]
[-68.18877411 143.07841492]
[-66.04940033 127.86924744]
[-56.57942963 115.77730560]
[-42.32623291 110.05524445]
[-27.12384987 112.24227905]
[-15.06164455 121.75010681]
[-1.15908849 116.11814880]
[12.74346733 110.48619080]
[17.79471397 105.02445984]
[26.99430084 104.88500214]
[41.01101303 99.54349518]
[54.73106766 93.48047638]
[68.11735535 86.71236420]
[76.75646973 74.44999695]
[78.62408447 59.56671524]
[80.49169922 44.68343735]
[82.35930634 29.80015564]
[80.11297607 23.47074127]
[81.27302551 17.82400894]
[84.62671661 14.34144497]
[87.11183929 -0.45126238]
[89.59695435 -15.24396992]
[73.26619720 -12.33817673]
[55.12306213 -20.70981216]
[45.14033508 -31.90557861]
[35.15760803 -43.10134506]
[25.17488098 -54.29711151]
[9.30476093 -56.64632797]
[1.37151396 -70.59061432]
[7.46084881 -85.43310547]
[22.90154839 -89.78791809]
[35.84883118 -80.31439972]
[36.37064743 -64.27983856]
[46.35337448 -53.08407211]
[56.33610153 -41.88830566]
[66.31882477 -30.69253922]
[73.76977539 -31.54888344]
[88.67167664 -33.26157379]
[96.12262726 -34.11791611]
[103.30513763 -47.28649902]
[110.48764801 -60.45508194]
[96.83219147 -54.24795151]
[81.84955597 -54.96949005]
[68.85375977 -62.46010590]
[60.71936035 -75.06294250]
[59.24560165 -89.99037170]
[64.75847626 -103.94057465]
[76.03858185 -113.82790375]
[90.59085846 -117.46537018]
[105.19648743 -114.04840088]
[116.62482452 -104.33279419]
[122.34803772 -90.46755981]
[121.09957886 -75.51766968]
[131.08230591 -86.71343231]
[141.06503296 -97.90920258]
[151.04776001 -109.10496521]
[143.61198425 -122.29541779]
[140.86448669 -137.18601990]
[143.10328674 -152.16154480]
[150.08555603 -165.59756470]
[161.05387878 -176.03665161]
[174.81852722 -182.34643555]
[189.88639832 -183.84248352]
[204.62303162 -180.36251831]
[217.42993164 -172.28401184]
[226.91787720 -160.48327637]
[232.05770874 -146.24035645]
[232.29188538 -131.10020447]
[227.59500122 -116.70513916]
[218.47654724 -104.61660767]
[205.92561340 -96.14589691]
[191.30364990 -92.21183777]
[176.19673157 -93.24117279]
[162.24353027 -99.12223816]
[152.26080322 -87.92647552]
[142.27807617 -76.73070526]
[132.29534912 -65.53494263]
[123.65623474 -53.27257538]
[116.47372437 -40.10399246]
[109.29121399 -26.93540955]
[104.38966370 -12.75885105]
[101.90454102 2.03385615]
[99.41942596 16.82656288]
[97.24259186 31.66776848]
[95.37497711 46.55104828]
[93.50736237 61.43432999]
[91.63974762 76.31761169]
[117.96936798 76.29714966]
[134.29924011 102.26376343]
[147.95549011 108.46916962]
[161.61172485 114.67457581]
[175.26797485 120.87998962]
[188.92420959 127.08539581]
[205.18478394 124.95800781]
[214.94128418 138.13916016]
[208.15705872 153.06921387]
[191.81114197 154.38940430]
[182.71881104 140.74163818]
[169.06256104 134.53622437]
[155.40632629 128.33082581]
[141.75007629 122.12541199]
[128.09384155 115.92000580]
[121.78827667 119.98077393]
[130.79772949 131.97367859]
[139.80717468 143.96659851]
[152.31724548 152.24295044]
[152.22476196 167.24267578]
[139.61360168 175.36415100]
[125.91941833 169.24293518]
[123.55991364 154.42979431]
[116.36853027 141.26605225]
[109.17714691 128.10232544]
[102.87158203 132.16308594]
[102.87158203 147.16308594]
[102.87158203 162.16308594]
[102.87158203 177.16308594]
[102.87158203 192.16308594]
[102.87158203 207.16308594]
[102.87158203 222.16308594]
[102.87158203 237.16308594]
[102.87158203 252.16308594]
[102.87158203 267.16308594]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 41]
[13 40]
[19 39]
[20 38]
[21 36]
[22 35]
[23 34]
[42 115]
[43 114]
[44 113]
[45 112]
[48 111]
[49 110]
[50 109]
[52 64]
[53 63]
[54 62]
[55 61]
[67 108]
[68 107]
[69 106]
[81 105]
[82 104]
[83 103]
[84 102]
[117 130]
[118 129]
[119 128]
[120 127]
[121 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
