%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAGUUUAAACAAAACGAAUGAUUUCGACUCAUUAAAUUAUGAUAAUCAUAUUUACCAAAUxxxxxxxxxxAUCAGAGAAAAAGUCUUUAACUCCACCAUUAGCACCCAAAGCUAAGAUUCUAAUUUAAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[116.66219330 343.02166748]
[116.66219330 328.02166748]
[116.66219330 313.02166748]
[116.66219330 298.02166748]
[116.66219330 283.02166748]
[116.66219330 268.02166748]
[116.66219330 253.02168274]
[116.66219330 238.02168274]
[116.66219330 223.02168274]
[116.66219330 208.02168274]
[109.74058533 205.13354492]
[95.89736938 199.35726929]
[88.97575378 196.46913147]
[78.31413269 207.02043152]
[67.65250397 217.57171631]
[56.99087906 228.12300110]
[55.46991730 244.09379578]
[41.95693588 252.74127197]
[26.81793404 247.43183899]
[21.66625977 232.23841858]
[30.45383644 218.81611633]
[46.43958664 217.46138000]
[57.10121536 206.91009521]
[67.76284027 196.35879517]
[78.42446899 185.80751038]
[84.91262817 172.28332520]
[86.47021484 157.36441040]
[88.02779388 142.44549561]
[89.58537292 127.52658081]
[75.21374512 115.86879730]
[70.64149475 97.93719482]
[77.67628479 80.82113647]
[69.16519165 68.46956635]
[60.65410233 56.11799240]
[52.14300919 43.76641846]
[39.58362198 40.64944077]
[32.75608063 30.13261223]
[34.88104248 18.18305779]
[26.62875366 5.65709591]
[12.57540989 -1.61023724]
[12.03461075 -16.49502182]
[3.78232121 -29.02098274]
[-6.43115854 -40.00664902]
[-18.32353783 -49.14838409]
[-30.21591759 -58.29011536]
[-42.10829926 -67.43185425]
[-54.00067902 -76.57358551]
[-62.77272034 -79.34902954]
[-66.04274750 -86.03128815]
[-77.74237061 -95.41844940]
[-89.44199371 -104.80561066]
[-101.14161682 -114.19277954]
[-117.27960968 -119.38908386]
[-116.75381470 -136.33486938]
[-100.32471466 -140.52069092]
[-91.75445557 -125.89240265]
[-80.05483246 -116.50524139]
[-68.35520935 -107.11807251]
[-56.65558243 -97.73091125]
[-44.85894394 -88.46596527]
[-32.96656418 -79.32423401]
[-21.07418442 -70.18249512]
[-9.18180466 -61.04076385]
[2.71057558 -51.89902878]
[-2.41430902 -65.99639130]
[-2.50468326 -80.99611664]
[2.44996071 -95.15420532]
[11.87355042 -106.82450867]
[24.67041206 -114.65012360]
[39.35266876 -117.72118378]
[54.21322250 -115.68061066]
[67.52424622 -108.76566315]
[77.73809052 -97.78033447]
[83.66719055 -84.00187683]
[84.62217712 -69.03231049]
[80.49201202 -54.61212540]
[71.75691223 -42.41794586]
[59.43249512 -33.86758041]
[44.95171356 -29.95517159]
[29.99823189 -31.13561249]
[16.30828285 -37.27327347]
[24.56057167 -24.74731064]
[38.02365494 -18.37591743]
[39.15471649 -2.59519339]
[47.40700531 9.93076801]
[63.48321533 16.89894104]
[64.49458313 35.25532913]
[73.00567627 47.60690308]
[81.51676178 59.95847321]
[90.02785492 72.31005096]
[103.37923431 64.88578033]
[121.05603027 64.67773438]
[132.75566101 55.29057693]
[144.45527649 45.90341187]
[147.62640381 30.17689133]
[161.96427917 22.97933197]
[176.47010803 29.83208847]
[180.01628113 45.47830963]
[169.88244629 57.91555786]
[153.84243774 57.60303879]
[142.14282227 66.99019623]
[130.44319153 76.37735748]
[132.37176514 83.62516022]
[146.86737061 79.76799774]
[161.36302185 75.91107941]
[165.21971130 90.40680695]
[150.72453308 94.26359558]
[136.22892761 98.12075806]
[138.15751648 105.36855316]
[152.97526550 107.69966125]
[167.79302979 110.03076172]
[182.61077881 112.36186218]
[197.42854309 114.69297028]
[209.10006714 104.28578186]
[224.73205566 103.86739349]
[236.94355774 113.63536835]
[239.96867371 128.97755432]
[232.37904358 142.64984131]
[217.75825500 148.19659424]
[203.00979614 142.99882507]
[195.09744263 129.51072693]
[180.27967834 127.17962646]
[165.46192932 124.84851837]
[150.64416504 122.51741791]
[135.82640076 120.18630981]
[120.08329773 129.00152588]
[104.50428772 129.08416748]
[102.94670868 144.00308228]
[101.38912201 158.92198181]
[99.83154297 173.84089661]
[102.93852997 159.16619873]
[111.95973206 147.18212891]
[125.20246887 140.13729858]
[140.18197632 139.35353088]
[154.08761597 144.97789001]
[164.31019592 155.95507812]
[168.93167114 170.22538757]
[167.08486938 185.11126709]
[159.11631775 197.81962585]
[146.52117920 205.96594238]
[131.66218567 208.02168274]
[131.66218567 223.02168274]
[131.66218567 238.02168274]
[131.66218567 253.02168274]
[131.66218567 268.02166748]
[131.66218567 283.02166748]
[131.66218567 298.02166748]
[131.66218567 313.02166748]
[131.66218567 328.02166748]
[131.66218567 343.02166748]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[13 25]
[14 24]
[15 23]
[16 22]
[26 130]
[27 129]
[28 128]
[29 127]
[32 90]
[33 89]
[34 88]
[35 87]
[38 85]
[39 84]
[41 82]
[42 81]
[43 64]
[44 63]
[45 62]
[46 61]
[47 60]
[49 59]
[50 58]
[51 57]
[52 56]
[92 102]
[93 101]
[94 100]
[109 125]
[110 124]
[111 123]
[112 122]
[113 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
