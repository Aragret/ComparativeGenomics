%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAUUCUACUGACUAUCCUAGAAAUCGCUGUCGCCUUAAUCCAAGCCUACGUUUUCACACUxxxxxxxxxxAGUCUAAUAGAAAACAACCGAAACCAAAUAAUUCAAGCACUGCUUAUUACAAUUUUACUGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[101.29737091 280.03576660]
[101.29737091 265.03576660]
[101.29737091 250.03578186]
[101.29737091 235.03578186]
[101.29737091 220.03578186]
[101.29737091 205.03578186]
[101.29737091 190.03578186]
[101.29737091 175.03578186]
[101.29737091 160.03578186]
[101.29737091 145.03578186]
[90.67276764 141.06346130]
[82.07105255 134.81961060]
[75.90972137 127.04631805]
[63.82973099 135.93865967]
[51.74974442 144.83100891]
[39.66975403 153.72337341]
[27.58976746 162.61572266]
[29.37023544 177.87106323]
[23.26976395 191.96644592]
[10.92934990 201.11027527]
[-4.33150005 202.84292603]
[-18.40769196 196.69830322]
[-27.51280022 184.32928467]
[-29.19759941 169.06307983]
[-23.00888443 155.00621033]
[-10.61138916 145.93992615]
[4.66002274 144.30297852]
[18.69741631 150.53572083]
[30.77740479 141.64337158]
[42.85739517 132.75102234]
[54.93738174 123.85868073]
[67.01737213 114.96633148]
[65.41627502 89.23845673]
[81.33283234 68.96160889]
[76.43127441 54.78505325]
[71.52972412 40.60849380]
[53.10387039 37.06034851]
[40.25238800 21.71069527]
[39.94952011 0.43797719]
[26.56323433 -6.33013773]
[8.23808861 -4.85742283]
[-0.83389437 -19.84738731]
[-14.35808468 -26.33555412]
[-26.98985481 -17.59862328]
[-42.29905319 -16.36409760]
[-56.16757965 -22.96406174]
[-64.86487579 -35.62315369]
[-66.05140686 -50.93614578]
[-59.40800095 -64.78392029]
[-46.72171021 -73.44149017]
[-31.40507317 -74.58001709]
[-17.57819366 -67.89324188]
[-8.96043015 -55.17987061]
[-7.86991930 -39.85974503]
[5.65427065 -33.37157822]
[17.20823097 -37.08820724]
[28.54954147 -31.74090385]
[33.33134842 -19.71642303]
[46.71763611 -12.94830799]
[59.81079102 -20.26741409]
[61.05766296 -35.21549988]
[62.30453873 -50.16358566]
[63.55141449 -65.11167145]
[64.79828644 -80.05976105]
[66.04515839 -95.00785065]
[51.75582123 -99.81182861]
[39.03174973 -107.89646912]
[28.61270714 -118.79174042]
[21.10444069 -131.86421204]
[16.94347191 -146.35385132]
[16.37171555 -161.41825867]
[19.42241096 -176.18162537]
[25.91819572 -189.78559875]
[35.48141479 -201.43928528]
[47.55607224 -210.46513367]
[61.44016266 -216.33840942]
[76.32649231 -218.71765137]
[91.34957123 -217.46452332]
[105.63600159 -212.65188599]
[118.35516357 -204.55952454]
[128.76760864 -193.65794373]
[136.26794434 -180.58091736]
[140.42012024 -166.08876038]
[140.98274231 -151.02400208]
[137.92311096 -136.26249695]
[131.41906738 -122.66246033]
[121.84879303 -111.01457977]
[109.76866150 -101.99604797]
[95.88101196 -96.13118744]
[80.99324799 -93.76097107]
[79.74637604 -78.81288910]
[78.49949646 -63.86479950]
[77.25262451 -48.91671371]
[76.00575256 -33.96862411]
[74.75887299 -19.02053833]
[91.25896454 -9.73065948]
[99.26504517 6.50453520]
[96.82017517 23.59906578]
[85.70628357 35.70694351]
[90.60783386 49.88350296]
[95.50938416 64.06005859]
[104.50855255 62.94952393]
[113.77024841 64.12376404]
[122.70783234 67.63989258]
[130.72407532 73.40316772]
[137.25061035 81.16574097]
[141.78732300 90.53568268]
[143.93879700 100.99604034]
[143.44541931 111.93318176]
[158.01811218 115.48793793]
[172.59082031 119.04270172]
[187.16352844 122.59746552]
[193.70802307 121.08850861]
[199.18537903 122.88571167]
[202.26223755 126.61511230]
[216.67445374 130.77299500]
[231.08666992 134.93089294]
[245.49888611 139.08877563]
[262.39337158 137.66984558]
[268.43368530 153.51127625]
[254.88346863 163.70088196]
[241.34100342 153.50099182]
[226.92878723 149.34310913]
[212.51657104 145.18521118]
[198.10435486 141.02732849]
[183.60876465 137.17016602]
[169.03605652 133.61540222]
[154.46334839 130.06063843]
[139.89065552 126.50588226]
[133.99232483 131.13835144]
[145.07684326 141.24447632]
[156.16134644 151.35060120]
[169.65702820 157.89787292]
[174.22508240 172.18537903]
[167.03103638 185.34765625]
[152.53880310 189.21745300]
[139.74089050 181.39353943]
[136.57846069 166.73078918]
[129.38706970 153.56704712]
[122.19569397 140.40330505]
[116.29737091 145.03578186]
[116.29737091 160.03578186]
[116.29737091 175.03578186]
[116.29737091 190.03578186]
[116.29737091 205.03578186]
[116.29737091 220.03578186]
[116.29737091 235.03578186]
[116.29737091 250.03578186]
[116.29737091 265.03576660]
[116.29737091 280.03576660]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[13 32]
[14 31]
[15 30]
[16 29]
[17 28]
[34 101]
[35 100]
[36 99]
[39 59]
[40 58]
[42 55]
[43 54]
[60 95]
[61 94]
[62 93]
[63 92]
[64 91]
[65 90]
[109 129]
[110 128]
[111 127]
[112 126]
[115 125]
[116 124]
[117 123]
[118 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
