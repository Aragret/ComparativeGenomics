%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUCCCCAUGCUUACAAGCAAGUACAGCAAUCAACCCUCAACUAUCACACAUCAACUGCAxxxxxxxxxxGUACAUAAAGCCAUUUACCGUACAUAGCACAUUACAGUCAAAUCCCUUCUCGUCCCCAUGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[51.47294235 243.96794128]
[45.98591232 257.92834473]
[40.49887848 271.88873291]
[35.01184845 285.84912109]
[29.52481651 299.80950928]
[24.03778458 313.76989746]
[18.55075455 327.73028564]
[18.38405037 344.68341064]
[2.04730844 349.21630859]
[-6.83090782 334.77285767]
[4.59036398 322.24325562]
[10.07739544 308.28286743]
[15.56442738 294.32247925]
[21.05145836 280.36209106]
[26.53849030 266.40170288]
[32.02552032 252.44129944]
[37.51255417 238.48091125]
[-7.98552942 206.86799622]
[-39.12343979 161.04353333]
[-53.14015198 166.38504028]
[-67.15686798 171.72654724]
[-81.17357635 177.06806946]
[-95.13397217 182.55509949]
[-109.03652191 188.18705750]
[-122.93907928 193.81901550]
[-128.86927795 208.46852112]
[-143.45372009 214.55699158]
[-158.03971863 208.47224426]
[-163.97366333 193.82424927]
[-157.73503113 179.30339050]
[-143.02511597 173.52465820]
[-128.57104492 179.91645813]
[-114.66847992 174.28450012]
[-100.76592255 168.65254211]
[-95.71467590 163.19081116]
[-86.51509094 163.05134583]
[-72.49837494 157.70983887]
[-58.48166656 152.36833191]
[-44.46495438 147.02680969]
[-47.02735901 138.27008057]
[-49.05949783 129.37532043]
[-50.55403900 120.37461853]
[-51.50559235 111.30043030]
[-51.91072083 102.18548584]
[-51.76797104 93.06266022]
[-51.07785416 83.96485138]
[-49.84285736 74.92488098]
[-48.06744003 65.97534180]
[-45.75799942 57.14851761]
[-42.92286682 48.47624207]
[-39.57226944 39.98979187]
[-35.71829224 31.71977615]
[-31.37483025 23.69601822]
[-26.55755234 15.94745922]
[-21.28383255 8.50204468]
[-15.57268906 1.38662660]
[-9.44472027 -5.37313223]
[-2.92202854 -11.75285149]
[3.97186232 -17.72952271]
[11.21208858 -23.28159142]
[18.77253723 -28.38903046]
[26.62594223 -33.03342056]
[34.74397659 -37.19801331]
[43.09736633 -40.86779022]
[51.65597916 -44.02951050]
[60.38895035 -46.67177200]
[69.26477814 -48.78504562]
[78.25146484 -50.36171341]
[87.31658173 -51.39608383]
[96.42745209 -51.88443375]
[105.55120087 -51.82499313]
[114.65492249 -51.21797943]
[123.70580292 -50.06558228]
[132.67117310 -48.37195969]
[141.51872253 -46.14321518]
[150.21652222 -43.38739395]
[158.73321533 -40.11442947]
[167.03808594 -36.33612823]
[175.10116577 -32.06611633]
[182.89338684 -27.31979370]
[190.38664246 -22.11428070]
[199.89500427 -33.71562195]
[209.40336609 -45.31696320]
[218.91172791 -56.91830444]
[221.44546509 -75.12709045]
[238.04527283 -80.73481750]
[247.31021118 -92.53145599]
[256.57516479 -104.32809448]
[265.84011841 -116.12473297]
[267.62683105 -132.42625427]
[282.74462891 -138.78111267]
[295.64163208 -128.65196228]
[293.05047607 -112.45880890]
[277.63674927 -106.85978699]
[268.37179565 -95.06314850]
[259.10687256 -83.26651001]
[249.84190369 -71.46986389]
[250.96621704 -59.38502884]
[243.28808594 -49.47214127]
[230.51306152 -47.40994644]
[221.00469971 -35.80860519]
[211.49635315 -24.20726395]
[201.98799133 -12.60592175]
[208.10186768 -6.75031281]
[213.88009644 -0.56324792]
[219.30473328 5.93606234]
[224.35893250 12.72743797]
[229.02699280 19.78979111]
[233.29444885 27.10119629]
[237.14801025 34.63894653]
[240.57574463 42.37964249]
[243.56698608 50.29924774]
[246.11245728 58.37317276]
[248.20425415 66.57634735]
[249.83589172 74.88330078]
[251.00228882 83.26824188]
[251.69982910 91.70513153]
[251.92634583 100.16777802]
[251.68113708 108.62990570]
[250.96496582 117.06523132]
[249.78005981 125.44757843]
[248.13008118 133.75090027]
[246.02015686 141.94943237]
[243.45686340 150.01771545]
[240.44813538 157.93069458]
[237.00331116 165.66380310]
[233.13310242 173.19302368]
[228.84953308 180.49499512]
[224.16587830 187.54701233]
[219.09669495 194.32720947]
[213.65771484 200.81452942]
[207.86582947 206.98881531]
[201.73902893 212.83090210]
[195.29634094 218.32266235]
[188.55775452 223.44702148]
[181.54418945 228.18809509]
[174.27745056 232.53114319]
[166.78007507 236.46269226]
[159.07534790 239.97052002]
[151.18719482 243.04374695]
[143.14010620 245.67283630]
[134.95907593 247.84960938]
[126.66948700 249.56732178]
[118.29709625 250.82061768]
[109.86789703 251.60563660]
[101.40805054 251.91992188]
[92.94384003 251.76249695]
[84.50153351 251.13385010]
[76.10735321 250.03594971]
[67.78735352 248.47218323]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 17]
[2 16]
[3 15]
[4 14]
[5 13]
[6 12]
[7 11]
[19 39]
[20 38]
[21 37]
[22 36]
[23 34]
[24 33]
[25 32]
[81 103]
[82 102]
[83 101]
[84 100]
[86 97]
[87 96]
[88 95]
[89 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
