%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGGCCUGCCCCCGCUAACCGGCUUUUUGCCCAAAUGGGCCAUUAUCGAAGAAUUCACAAAxxxxxxxxxxACCAAAAUGAACGAAAAUCUGUUCGCUUCAUUCAUUGCCCCCACAAUCCUAGGCCUACCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[45.03264236 222.25265503]
[38.12564468 235.56781006]
[31.21864510 248.88296509]
[24.31164742 262.19812012]
[17.40464783 275.51327515]
[17.91835403 291.32614136]
[5.18964672 299.06109619]
[-1.71735191 312.37625122]
[-8.62435055 325.69140625]
[-7.34522629 342.04058838]
[-21.01578903 351.09860229]
[-35.57293701 343.54733276]
[-36.04152298 327.15487671]
[-21.93950653 318.78439331]
[-15.03250790 305.46923828]
[-8.12550926 292.15408325]
[-9.13324928 277.29360962]
[4.08949232 268.60629272]
[10.99649048 255.29112244]
[17.90349007 241.97596741]
[24.81048775 228.66081238]
[31.71748734 215.34565735]
[23.13224220 209.81106567]
[14.99338150 203.63877869]
[7.34816885 196.86465454]
[0.24100094 189.52801514]
[-6.28684950 181.67146301]
[-12.19747353 173.34063721]
[-17.45654869 164.58390808]
[-22.03353310 155.45213318]
[-25.90184784 145.99833679]
[-29.03903008 136.27742004]
[-31.42686081 126.34584045]
[-33.05147171 116.26125336]
[-33.90343094 106.08224487]
[-33.97779083 95.86791229]
[-33.27412033 85.67757416]
[-31.79650116 75.57041168]
[-46.36920547 72.01564789]
[-60.94190598 68.46088409]
[-75.51461029 64.90612030]
[-91.09493256 70.02330780]
[-103.13462830 58.88877487]
[-99.24829102 42.95678329]
[-83.43385315 38.61679459]
[-71.95984650 50.33341980]
[-57.38714600 53.88817978]
[-42.81444168 57.44294357]
[-28.24173927 60.99770355]
[-25.70067024 53.45470810]
[-22.71636772 46.07583237]
[-19.29935455 38.88710022]
[-15.46168137 31.91385841]
[-11.21687889 25.18069458]
[-6.57991409 18.71134949]
[-1.56713796 12.52863789]
[3.80377364 6.65435886]
[9.51388264 1.10922575]
[15.54305458 -4.08720875]
[21.87003136 -8.91662216]
[28.47249985 -13.36198425]
[35.32718277 -17.40762138]
[42.40990829 -21.03926659]
[49.69570160 -24.24411583]
[57.15887451 -27.01086807]
[64.77310944 -29.32976723]
[72.51155090 -31.19263649]
[80.34693146 -32.59290695]
[88.25160217 -33.52564621]
[96.19770050 -33.98755646]
[104.15720367 -33.97701263]
[112.10205078 -33.49405670]
[120.00422668 -32.54038620]
[127.83586884 -31.11936188]
[135.56935120 -29.23600006]
[143.17741394 -26.89694023]
[150.63323975 -24.11042786]
[157.91050720 -20.88629150]
[164.98359680 -17.23589706]
[171.82752991 -13.17211723]
[178.41819763 -8.70928097]
[184.73236084 -3.86312556]
[190.74775696 1.34926164]
[196.44314575 6.90950108]
[201.79847717 12.79798698]
[206.79486084 18.99395561]
[219.23429871 10.61181164]
[231.67375183 2.22966886]
[244.11318970 -6.15247440]
[256.55261230 -14.53461742]
[268.99206543 -22.91676140]
[281.34362793 -31.42785072]
[293.60601807 -40.06696701]
[305.86837769 -48.70608139]
[318.13073730 -57.34519958]
[320.58285522 -72.95809937]
[333.40576172 -82.19652557]
[348.99188232 -79.57948303]
[358.09420776 -66.65961456]
[355.31253052 -51.10205460]
[342.29714966 -42.13682175]
[326.76986694 -45.08283234]
[314.50750732 -36.44371414]
[302.24511719 -27.80459976]
[289.98275757 -19.16548347]
[286.30230713 -12.70020390]
[277.37420654 -10.47732067]
[264.93478394 -2.09517741]
[252.49533081 6.28696585]
[240.05589294 14.66910934]
[227.61645508 23.05125237]
[215.17700195 31.43339539]
[232.62249756 80.54756927]
[230.01606750 132.60285950]
[244.33865356 137.05967712]
[258.66125488 141.51649475]
[272.98385620 145.97331238]
[286.85659790 138.40213013]
[301.99597168 142.93811035]
[309.42004395 156.89012146]
[304.72424316 171.98068237]
[290.69451904 179.25683594]
[275.65444946 174.40176392]
[268.52703857 160.29589844]
[254.20443726 155.83908081]
[239.88183594 151.38227844]
[225.55924988 146.92546082]
[222.22259521 155.03416443]
[218.36293030 162.90737915]
[213.99678040 170.51139832]
[209.14280701 177.81369019]
[203.82179260 184.78300476]
[198.05651855 191.38951111]
[191.87162781 197.60494995]
[185.29360962 203.40272522]
[178.35060120 208.75801086]
[171.07232666 213.64790344]
[163.48991394 218.05148315]
[155.63581848 221.94990540]
[147.54364014 225.32647705]
[139.24803162 228.16674805]
[130.78445435 230.45857239]
[122.18915558 232.19215393]
[113.49890137 233.36004639]
[104.75088501 233.95727539]
[95.98254395 233.98127747]
[87.23138428 233.43194580]
[78.53487396 232.31164551]
[69.93021393 230.62515259]
[61.45422363 228.37969971]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 22]
[2 21]
[3 20]
[4 19]
[5 18]
[7 16]
[8 15]
[9 14]
[38 49]
[39 48]
[40 47]
[41 46]
[86 112]
[87 111]
[88 110]
[89 109]
[90 108]
[91 107]
[92 105]
[93 104]
[94 103]
[95 102]
[114 127]
[115 126]
[116 125]
[117 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
