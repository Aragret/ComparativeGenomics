%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCGGACUACCCCGAUGCAUACACCACAUGAAACAUCCUAUCAUCUGUAGGCUCAUUCAUxxxxxxxxxxCAUUACUAAACCCACACUCAACAGAAACAAAGCAUACAUCAUUAUUCUCGCACGGACUACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 297.05123901]
[92.50000000 282.05123901]
[92.50000000 267.05123901]
[92.50000000 252.05122375]
[92.50000000 237.05122375]
[92.50000000 222.05122375]
[92.50000000 207.05122375]
[92.50000000 192.05122375]
[92.50000000 177.05122375]
[92.50000000 162.05122375]
[75.54712677 159.57737732]
[59.42179871 152.42916870]
[48.98198700 163.19998169]
[38.54217529 173.97077942]
[28.10236168 184.74159241]
[28.59953308 200.53805542]
[17.72054100 212.00204468]
[1.91970038 212.33218384]
[-9.42863083 201.33259583]
[-9.59168911 185.52914429]
[1.52726483 174.29774475]
[17.33155251 174.30178833]
[27.77136612 163.53097534]
[38.21117783 152.76016235]
[48.65098953 141.98934937]
[40.52944946 129.37823486]
[26.40464592 134.42698669]
[16.20930862 147.27171326]
[0.02969947 144.59733582]
[-5.48998737 129.15502930]
[5.32842922 116.83049774]
[21.35588837 120.30217743]
[35.48069382 115.25342560]
[35.11919785 90.73583221]
[43.64846420 68.04792786]
[59.69425583 50.25950623]
[80.88106537 39.69637299]
[104.18224335 37.63724136]
[106.97456360 22.89943504]
[109.76689148 8.16162872]
[112.55921173 -6.57617760]
[102.05848694 4.13525200]
[88.30022430 10.11104488]
[73.30460358 10.47374535]
[59.27352142 5.17009830]
[48.26721954 -5.02113724]
[41.90180588 -18.60353470]
[41.11194229 -33.58272552]
[46.01361465 -47.75923920]
[55.88708115 -59.05147934]
[69.28257751 -65.80134583]
[84.23317719 -67.01772308]
[98.54360962 -62.52201080]
[110.11261749 -52.97433090]
[117.24144745 -39.77661514]
[118.88341522 -24.86740875]
[125.79041290 -38.18256378]
[132.69741821 -51.49772263]
[139.60441589 -64.81287384]
[139.09069824 -80.62574005]
[151.81941223 -88.36067963]
[158.72640991 -101.67583466]
[165.63340759 -114.99098969]
[153.29289246 -123.55486298]
[142.14884949 -133.62654114]
[132.38427734 -145.04063416]
[124.15951538 -157.60969543]
[117.60962677 -171.12736511]
[112.84217072 -185.37165833]
[109.93542480 -200.10865784]
[108.93712616 -215.09637451]
[109.86366272 -230.08869934]
[112.69982147 -244.83944702]
[117.39903259 -259.10638428]
[123.88413239 -272.65527344]
[132.04861450 -285.26358032]
[141.75843811 -296.72427368]
[152.85414124 -306.84918213]
[165.15351868 -315.47204590]
[178.45460510 -322.45123291]
[192.53900146 -327.67218018]
[207.17541504 -331.04913330]
[222.12350464 -332.52664185]
[237.13780212 -332.08044434]
[251.97177124 -329.71789551]
[266.38180542 -325.47775269]
[280.13131714 -319.42962646]
[292.99447632 -311.67288208]
[304.76010132 -302.33486938]
[315.23498535 -291.56893921]
[324.24710083 -279.55184937]
[331.64846802 -266.48098755]
[337.31753540 -252.57090759]
[341.16122437 -238.05009460]
[343.11645508 -223.15695190]
[343.15106201 -208.13606262]
[341.26449585 -193.23406982]
[337.48776245 -178.69569397]
[331.88284302 -164.75965881]
[324.54180908 -151.65478516]
[315.58517456 -139.59631348]
[305.16003418 -128.78221130]
[293.43756104 -119.39007568]
[280.61026001 -111.57413483]
[266.88879395 -105.46273041]
[252.49842834 -101.15621948]
[237.67550659 -98.72531128]
[222.66342163 -98.20993805]
[207.70867920 -99.61854553]
[193.05686951 -102.92800903]
[178.94856262 -108.08399200]
[172.04156494 -94.76883698]
[165.13456726 -81.45368195]
[166.14230347 -66.59320831]
[152.91957092 -57.90587997]
[146.01257324 -44.59072113]
[139.10557556 -31.27556610]
[132.19857788 -17.96041107]
[127.29701996 -3.78385305]
[124.50469971 10.95395279]
[121.71237183 25.69175911]
[118.92004395 40.42956543]
[127.20695496 43.72934341]
[134.93975830 48.17512512]
[141.96099854 53.67636108]
[148.12765503 60.12101746]
[153.31416321 67.37784576]
[157.41487122 75.29904938]
[160.34628296 83.72330475]
[162.04869080 92.47905731]
[162.48742676 101.38797760]
[161.65354919 110.26863098]
[159.56404114 118.94015503]
[156.26147461 127.22594452]
[151.81307983 134.95726013]
[146.30947876 141.97662354]
[139.86273193 148.14111328]
[132.60415649 153.32516479]
[124.68157196 157.42320251]
[116.25632477 160.35177612]
[107.50000000 162.05122375]
[107.50000000 177.05122375]
[107.50000000 192.05122375]
[107.50000000 207.05122375]
[107.50000000 222.05122375]
[107.50000000 237.05122375]
[107.50000000 252.05122375]
[107.50000000 267.05123901]
[107.50000000 282.05123901]
[107.50000000 297.05123901]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 25]
[13 24]
[14 23]
[15 22]
[26 33]
[27 32]
[38 122]
[39 121]
[40 120]
[41 119]
[56 118]
[57 117]
[58 116]
[59 115]
[61 113]
[62 112]
[63 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
