%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUAUCUCCACACUAGCAGAGACCAACCGAACCCCCUUCGACCUUGCCGAAGGGGAGUCCGxxxxxxxxxxAUUCACAGCCACAGAACUAAUCAUAUUUUAUAUCUUCUUCGAAACCACACUUAUCCCCACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[122.42672729 286.75369263]
[121.80274963 271.76666260]
[121.17877197 256.77966309]
[120.55479431 241.79264832]
[119.93081665 226.80561829]
[119.30683899 211.81860352]
[118.68286133 196.83158875]
[118.05888367 181.84457397]
[115.26655579 167.10676575]
[110.36500549 152.93020630]
[105.46345520 138.75366211]
[100.56190491 124.57709503]
[92.69571686 123.47332001]
[85.59210968 119.91889191]
[73.51212311 128.81123352]
[61.43213654 137.70359802]
[49.35214615 146.59594727]
[51.13261795 161.85128784]
[45.03214645 175.94667053]
[32.69173050 185.09049988]
[17.43088150 186.82315063]
[3.35468912 180.67852783]
[-5.75042009 168.30950928]
[-7.43521833 153.04330444]
[-1.24650323 138.98643494]
[11.15099239 129.92015076]
[26.42240334 128.28320312]
[40.45979691 134.51594543]
[52.53978729 125.62360382]
[64.61977386 116.73125458]
[76.69976044 107.83890533]
[75.43244934 100.88591003]
[76.19567108 93.85969543]
[78.92634583 87.34098816]
[83.39878845 81.86856079]
[89.24333191 77.89471436]
[95.97693634 75.74790192]
[98.15377045 60.90669250]
[100.33061218 46.06548691]
[102.50744629 31.22428322]
[88.24211121 16.24168396]
[91.47377777 -6.56734467]
[79.39378357 -15.45969486]
[67.31379700 -24.35204315]
[55.23381042 -33.24439240]
[43.15382004 -42.13674164]
[31.07383347 -51.02909470]
[18.99384499 -59.92144394]
[6.91385698 -68.81378937]
[-8.23884773 -64.94991302]
[-22.30765533 -71.77653503]
[-28.64970207 -86.07032013]
[-24.27046967 -101.08219910]
[-11.23769760 -109.72400665]
[4.29493809 -107.91535187]
[14.99340248 -96.51022339]
[15.80620670 -80.89378357]
[27.88619423 -72.00143433]
[39.96618271 -63.10908127]
[52.04617310 -54.21673203]
[64.12615967 -45.32438278]
[76.20614624 -36.43203354]
[88.28613281 -27.53968239]
[100.36612701 -18.64733315]
[115.15882874 -21.13245201]
[123.66992188 -33.48402405]
[112.49169159 -43.51774597]
[102.68836212 -54.89856720]
[94.42091370 -67.43959808]
[87.82510376 -80.93492126]
[83.00923157 -95.16291046]
[80.05239105 -109.88993835]
[79.00313568 -124.87417603]
[79.87868500 -139.86956787]
[82.66467285 -154.62986755]
[87.31533813 -168.91271973]
[93.75432587 -182.48355103]
[101.87590027 -195.11955261]
[111.54668427 -206.61322021]
[122.60789490 -216.77578735]
[134.87788391 -225.44041443]
[148.15516663 -232.46481323]
[162.22172546 -237.73361206]
[176.84655762 -241.16032410]
[191.78953552 -242.68865967]
[206.80526733 -242.29351807]
[221.64718628 -239.98141479]
[236.07156372 -235.79028320]
[249.84155273 -229.78897095]
[262.73101807 -222.07600403]
[274.52835083 -212.77806091]
[285.03976440 -202.04780579]
[294.09268188 -190.06143188]
[301.53845215 -177.01579285]
[307.25479126 -163.12509155]
[311.14785767 -148.61741638]
[313.15368652 -133.73101807]
[313.23937988 -118.71033478]
[311.40350342 -103.80201721]
[307.67623901 -89.25087738]
[302.11874390 -75.29585266]
[294.82229614 -62.16611099]
[285.90670776 -50.07723999]
[275.51840210 -39.22775650]
[263.82794189 -29.79581451]
[251.02729797 -21.93630028]
[237.32667542 -15.77827263]
[222.95104980 -11.42285156]
[208.13648987 -8.94155598]
[193.12623596 -8.37513161]
[178.16679382 -9.73288059]
[163.50381470 -12.99250603]
[149.37805176 -18.10048294]
[136.02149963 -24.97293472]
[127.51040649 -12.62136173]
[138.50923157 5.48053789]
[133.41662598 24.57058525]
[117.34864807 33.40111923]
[115.17181396 48.24232483]
[112.99497986 63.08353043]
[110.81813812 77.92473602]
[124.47585297 97.70175934]
[114.73846436 119.67554474]
[119.64001465 133.85211182]
[124.54156494 148.02865601]
[129.44311523 162.20521545]
[133.23164368 147.69154358]
[142.20050049 135.66824341]
[155.03274536 127.90077972]
[169.84416199 125.52967072]
[184.45989990 128.90309143]
[196.73388672 137.52569580]
[204.86386108 150.13139343]
[207.65606689 164.86921692]
[204.70050049 179.57516479]
[196.43113708 192.08985901]
[184.06224060 200.57574463]
[169.40995789 203.78677368]
[154.62576294 201.25144958]
[141.88050842 193.34207153]
[133.04589844 181.22059631]
[133.66987610 196.20761108]
[134.29385376 211.19462585]
[134.91783142 226.18165588]
[135.54180908 241.16867065]
[136.16578674 256.15567017]
[136.78976440 271.14270020]
[137.41374207 286.12969971]
[144.11372375 301.70361328]
[131.00320435 312.45306396]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 148]
[2 147]
[3 146]
[4 145]
[5 144]
[6 143]
[7 142]
[8 141]
[9 126]
[10 125]
[11 124]
[12 123]
[14 31]
[15 30]
[16 29]
[17 28]
[37 121]
[38 120]
[39 119]
[40 118]
[42 64]
[43 63]
[44 62]
[45 61]
[46 60]
[47 59]
[48 58]
[49 57]
[65 115]
[66 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
