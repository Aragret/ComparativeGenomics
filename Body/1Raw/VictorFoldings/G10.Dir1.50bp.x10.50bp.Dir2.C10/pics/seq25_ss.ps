%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACCCUAUUAACCACUCACGGGAGCUCUCCAUGCAUUUGGUAUUUUCGUCUGGGGGGUAUxxxxxxxxxxUGAGGCAACCAGCCAGAACGCCUGAACGCAGGCACAUACUUCCUAUUCUACACCCUAGUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[90.08328247 475.67346191]
[90.08328247 460.67346191]
[90.08328247 445.67346191]
[90.08328247 430.67346191]
[90.08328247 415.67346191]
[90.08328247 400.67346191]
[90.08328247 385.67346191]
[90.08328247 370.67346191]
[90.08328247 355.67346191]
[90.08328247 340.67346191]
[75.35346985 337.93981934]
[61.37309647 332.54455566]
[48.61881638 324.67004395]
[37.52576828 314.58328247]
[28.47274017 302.62664795]
[21.76921272 289.20648193]
[17.64480019 274.77917480]
[16.24137878 259.83569336]
[17.60820007 244.88479614]
[21.70017624 230.43582153]
[28.37935638 216.98126221]
[37.41958237 204.97998047]
[48.51414108 194.84158325]
[61.28617859 186.91242981]
[75.30148315 181.46382141]
[90.08328247 178.68266296]
[87.80158997 175.91474915]
[86.78219604 171.88206482]
[87.61464691 167.20666504]
[90.58052826 162.75434875]
[91.51615906 147.78355408]
[92.45178986 132.81275940]
[93.38741302 117.84197235]
[83.40468597 106.64620209]
[68.42497253 105.86635590]
[57.89721680 117.42924500]
[42.39317703 119.46857452]
[29.23339653 111.02143097]
[24.63151360 96.07630920]
[30.76040077 81.68983459]
[44.72618484 74.65485382]
[59.93464661 78.29307556]
[69.20481873 90.88664246]
[84.18453217 91.66648865]
[70.97145081 84.56616974]
[67.30175781 70.02198792]
[75.56461334 57.50299454]
[90.38045502 55.15974045]
[102.10335541 64.51781464]
[103.10122681 79.48417664]
[108.58825684 65.52378845]
[114.07528687 51.56339645]
[119.56231689 37.60300446]
[109.89146423 27.55903816]
[104.98121643 14.56801128]
[105.58590698 0.74815798]
[111.56437683 -11.66532612]
[121.90984344 -20.68179893]
[134.91917419 -24.87436676]
[136.47674561 -39.79327774]
[138.03433228 -54.71218872]
[139.59190369 -69.63110352]
[141.14949036 -84.55001831]
[131.46987915 -96.75423431]
[133.26202393 -111.86193848]
[144.95652771 -121.01476288]
[146.51409912 -135.93367004]
[148.07168579 -150.85258484]
[134.16184998 -156.76933289]
[122.61505890 -166.52449036]
[114.45804596 -179.25062561]
[110.41611481 -193.81613159]
[110.84868622 -208.92587280]
[115.71728516 -223.23629761]
[124.58901215 -235.47491455]
[136.67498779 -244.55349731]
[150.90054321 -249.66477966]
[166.00073242 -250.35424805]
[180.63288879 -246.56062317]
[193.49591064 -238.62121582]
[203.44601440 -227.24200439]
[209.59848022 -213.43481445]
[211.40620422 -198.42735291]
[208.70845032 -183.55410767]
[201.74511719 -170.13757324]
[191.13536072 -159.37075806]
[177.82260132 -152.21101379]
[162.99060059 -149.29499817]
[161.43301392 -134.37609863]
[159.87544250 -119.45717621]
[169.42720032 -108.08618164]
[168.06011963 -92.93409729]
[156.06840515 -82.99243164]
[154.51081848 -68.07352448]
[152.95324707 -53.15460968]
[151.39566040 -38.23569870]
[149.83807373 -23.31678581]
[157.34635925 -19.68639755]
[163.74127197 -14.33300400]
[168.63592529 -7.58050632]
[183.04814148 -11.73839378]
[197.46035767 -15.89628124]
[211.87257385 -20.05416870]
[226.28479004 -24.21205521]
[237.26147461 -36.39583969]
[253.24276733 -32.71746445]
[257.78848267 -16.96092796]
[246.22238159 -5.33520317]
[230.44268799 -9.79983997]
[216.03047180 -5.64195251]
[201.61825562 -1.48406494]
[187.20603943 2.67382240]
[172.79382324 6.83170986]
[168.30743408 26.28475761]
[153.56781006 39.98563004]
[133.52270508 43.09003830]
[128.03567505 57.05042648]
[122.54864502 71.01081848]
[117.06161499 84.97120667]
[121.14723969 104.61665344]
[108.35820770 118.77759552]
[107.42257690 133.74838257]
[106.48694611 148.71917725]
[105.55132294 163.68997192]
[105.08328247 178.68266296]
[119.86507416 181.46382141]
[133.88038635 186.91242981]
[146.65242004 194.84158325]
[157.74697876 204.97998047]
[166.78720093 216.98126221]
[173.46638489 230.43582153]
[177.55836487 244.88479614]
[178.92518616 259.83569336]
[177.52175903 274.77917480]
[173.39733887 289.20648193]
[166.69381714 302.62664795]
[157.64079285 314.58328247]
[146.54774475 324.67004395]
[133.79345703 332.54455566]
[119.81308746 337.93981934]
[105.08328247 340.67346191]
[105.08328247 355.67346191]
[105.08328247 370.67346191]
[105.08328247 385.67346191]
[105.08328247 400.67346191]
[105.08328247 415.67346191]
[105.08328247 430.67346191]
[105.08328247 445.67346191]
[105.08328247 460.67346191]
[105.08328247 475.67346191]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[26 125]
[30 124]
[31 123]
[32 122]
[33 121]
[34 44]
[35 43]
[50 119]
[51 118]
[52 117]
[53 116]
[59 97]
[60 96]
[61 95]
[62 94]
[63 93]
[66 90]
[67 89]
[68 88]
[100 113]
[101 112]
[102 111]
[103 110]
[104 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
