%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAUAAACAUGCUAGCUUUUAUUCCAGUUCUAACCAAAAAAAUAAACCCUCGUUCCACAGAAxxxxxxxxxxAUCCAUUGGUCUUAGGCCCCAAAAAUUUUGGUGCAACUCCAAAUAAAAGUAAUAACCAUGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[79.74322510 588.69195557]
[79.74322510 573.69195557]
[79.74322510 558.69195557]
[79.74322510 543.69195557]
[79.74322510 528.69195557]
[79.74322510 513.69195557]
[79.74322510 498.69195557]
[79.74322510 483.69195557]
[79.74322510 468.69195557]
[79.74322510 453.69195557]
[66.02462006 450.67660522]
[53.23755646 444.84893799]
[41.95172119 436.46569824]
[32.67053604 425.89749146]
[25.80869102 413.61248779]
[21.67362785 400.15570068]
[20.45175743 386.12466431]
[22.20005798 372.14309692]
[26.84343147 358.83297729]
[34.17791748 346.78704834]
[43.87965012 336.54232788]
[55.51916885 328.55618286]
[68.58042145 323.18591309]
[82.48362732 320.67279053]
[83.09944916 305.68542480]
[83.71527863 290.69808960]
[84.33110046 275.71072388]
[84.94692993 260.72338867]
[85.56275177 245.73602295]
[86.17858124 230.74867249]
[86.79440308 215.76132202]
[87.41023254 200.77397156]
[75.50510406 188.93458557]
[75.82266235 171.81060791]
[88.65349579 159.96336365]
[88.96147156 144.96653748]
[89.26944733 129.96969604]
[89.57743073 114.97285461]
[80.28842163 88.28535461]
[74.86979675 74.29827118]
[69.45117188 60.31118774]
[63.74650955 46.43830490]
[57.75821304 32.68547821]
[51.76991653 18.93264771]
[45.78162003 5.17981863]
[39.79332352 -8.57301044]
[25.13027000 -5.22173405]
[10.10506725 -4.62213516]
[-4.77051401 -6.79316950]
[-18.99006844 -11.65944767]
[-32.06979752 -19.05385399]
[-43.56496811 -28.72327995]
[-53.08503342 -40.33729553]
[-60.30690002 -53.49943161]
[-64.98590088 -67.76071930]
[-66.96407318 -82.63500977]
[-66.17550659 -97.61553955]
[-62.64851379 -112.19219208]
[-56.50463867 -125.86887360]
[-47.95446014 -138.18040466]
[-37.29037857 -148.70832825]
[-24.87660789 -157.09512329]
[-30.86490440 -170.84796143]
[-36.85319901 -184.60078430]
[-50.35522079 -193.90817261]
[-48.77625656 -210.23114014]
[-33.74060822 -216.77799988]
[-20.71566772 -206.81391907]
[-23.10037231 -190.58908081]
[-17.11207390 -176.83625793]
[-11.12377834 -163.08341980]
[3.47265768 -166.45748901]
[18.44453239 -167.09204102]
[33.28201294 -164.96403503]
[47.47957611 -160.14448547]
[60.55321884 -152.79612732]
[72.05697632 -143.16796875]
[81.59812927 -131.58676147]
[88.85060120 -118.44602203]
[93.56610870 -104.19255829]
[95.58267212 -89.31134796]
[94.83016205 -74.30899811]
[91.33273315 -59.69652176]
[85.20807648 -45.97190857]
[76.66344452 -33.60317612]
[65.98863220 -23.01239967]
[53.54615402 -14.56130695]
[59.53445053 -0.80847794]
[65.52274323 12.94435120]
[71.51103973 26.69717979]
[77.49933624 40.45000839]
[81.59289551 43.01749420]
[84.08334351 48.21225739]
[83.43825531 54.89256287]
[88.85688019 68.87964630]
[94.27550507 82.86672974]
[107.96613312 88.99590302]
[122.00811005 83.72116089]
[132.20606995 71.62520599]
[146.84129333 74.39279938]
[160.88327026 69.11805725]
[174.92524719 63.84331512]
[188.96722412 58.56857300]
[203.00920105 53.29383469]
[215.71052551 42.06383896]
[230.01771545 51.16001892]
[225.23764038 67.42615509]
[208.28393555 67.33580780]
[194.24195862 72.61054993]
[180.19998169 77.88529205]
[166.15800476 83.16003418]
[152.11602783 88.43477631]
[142.92243958 100.15345001]
[127.28285217 97.76313782]
[113.24087524 103.03787994]
[104.57426453 115.28083038]
[104.26628876 130.27766418]
[103.95831299 145.27450562]
[103.65032959 160.27134705]
[114.05732727 168.87971497]
[117.53614807 181.72802734]
[113.02794647 194.04487610]
[102.39758301 201.38978577]
[101.78176117 216.37715149]
[101.16593170 231.36450195]
[100.55010986 246.35185242]
[99.93428040 261.33920288]
[99.31845856 276.32656860]
[98.70262909 291.31390381]
[98.08680725 306.30126953]
[97.47097778 321.28860474]
[112.88468170 325.64093018]
[126.81767273 333.52307129]
[138.47569275 344.48110962]
[147.19522095 357.88592529]
[152.48132324 372.96929932]
[154.03565979 388.86798096]
[151.77337646 404.67297363]
[145.82766724 419.48162842]
[136.54205322 432.44915771]
[124.45037842 442.83685303]
[110.24625397 450.05410767]
[94.74322510 453.69195557]
[94.74322510 468.69195557]
[94.74322510 483.69195557]
[94.74322510 498.69195557]
[94.74322510 513.69195557]
[94.74322510 528.69195557]
[94.74322510 543.69195557]
[94.74322510 558.69195557]
[94.74322510 573.69195557]
[94.74322510 588.69195557]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[24 131]
[25 130]
[26 129]
[27 128]
[28 127]
[29 126]
[30 125]
[31 124]
[32 123]
[35 119]
[36 118]
[37 117]
[38 116]
[39 96]
[40 95]
[41 94]
[42 91]
[43 90]
[44 89]
[45 88]
[46 87]
[62 71]
[63 70]
[64 69]
[97 115]
[98 114]
[100 112]
[101 111]
[102 110]
[103 109]
[104 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
