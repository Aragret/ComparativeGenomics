%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAAAUCCCCACUAUGCACAUUUUAUUUCUCCAACAUACUCGGAUUCUACCCUAGCAUCACxxxxxxxxxxACAAACUAGGAGGCGUCCUUGCCCUAUUACUAUCCAUCCUCAUCCUAGCAAUAAUCCCCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[91.71149445 255.16485596]
[91.71149445 240.16485596]
[91.71149445 225.16485596]
[91.71149445 210.16485596]
[91.71149445 195.16485596]
[91.71149445 180.16485596]
[91.71149445 165.16485596]
[91.71149445 150.16485596]
[91.71149445 135.16485596]
[91.71149445 120.16486359]
[78.25553131 113.53636169]
[66.36315155 122.67810059]
[54.47077179 131.81983948]
[42.57839203 140.96156311]
[30.68601036 150.10330200]
[34.29497910 164.89840698]
[31.56783295 179.88114929]
[22.97706985 192.45567322]
[10.01109123 200.44337463]
[-5.08366966 202.46032715]
[-19.69195366 198.15707397]
[-31.28278732 188.27920532]
[-37.84798813 174.53808594]
[-38.25009918 159.31448364]
[-32.41944504 145.24595642]
[-21.36622810 134.76997375]
[-7.00548267 129.70155334]
[8.17470551 130.91883850]
[21.54427719 138.21092224]
[33.43665695 129.06918335]
[45.32903671 119.92745209]
[57.22141647 110.78572083]
[69.11379242 101.64398193]
[79.39134979 93.11314392]
[90.40354919 91.94667816]
[81.38601685 79.95984650]
[72.36848450 67.97300720]
[58.80245972 74.48106384]
[44.23205185 78.21612549]
[29.21772194 79.03643799]
[14.33662510 76.91236115]
[0.16043505 71.92737579]
[-12.76662731 64.27484131]
[-23.94868088 54.25048828]
[-32.95721054 42.24098206]
[-39.44748306 28.70901489]
[-43.17173767 14.17548084]
[-43.98865891 -0.80057728]
[-41.86871719 -15.64347363]
[-36.89524078 -29.78300476]
[-29.26114845 -42.67635727]
[-19.26145935 -53.82894897]
[-28.27898788 -65.81578064]
[-37.29652023 -77.80261230]
[-51.77579880 -84.17921448]
[-53.24398804 -99.00128174]
[-62.26151657 -110.98812103]
[-71.27904510 -122.97495270]
[-85.63279724 -131.99748230]
[-80.93638611 -148.28796387]
[-63.98244095 -148.28474426]
[-59.29221344 -131.99247742]
[-50.27468491 -120.00564575]
[-41.25715256 -108.01881409]
[-27.42286873 -102.49958801]
[-25.30968666 -86.82014465]
[-16.29215622 -74.83331299]
[-7.27462626 -62.84648132]
[6.21278381 -69.36291504]
[20.71701622 -73.12391663]
[35.68109131 -73.98313141]
[50.52999496 -71.90566254]
[64.69276428 -66.96950531]
[77.62445831 -59.36259842]
[88.82711029 -49.37569046]
[97.86891937 -37.39122391]
[104.40087891 -23.86866760]
[108.17025757 -9.32693481]
[109.03037262 5.67555285]
[106.94628906 20.56230354]
[101.99626160 34.76090240]
[94.36875153 47.72503281]
[84.35531616 58.95547867]
[93.37284851 70.94231415]
[102.39038086 82.92914581]
[116.56694031 87.83069611]
[131.06253052 83.97353363]
[145.55813599 80.11637878]
[160.05372620 76.25921631]
[174.54931641 72.40206146]
[189.04492188 68.54489899]
[202.50088501 61.91640091]
[214.39326477 52.77466583]
[226.28564453 43.63293076]
[238.17802429 34.49119949]
[243.93708801 19.13654709]
[260.15631104 16.71399498]
[270.15075684 29.71565437]
[263.63897705 44.76653290]
[247.31976318 46.38357925]
[235.42738342 55.52531052]
[223.53500366 64.66704559]
[211.64262390 73.80877686]
[226.55888367 72.22601318]
[241.29479980 75.02829742]
[254.58889771 81.97574615]
[265.30313110 92.47360992]
[272.52029419 105.62322998]
[275.62258911 120.29891968]
[274.34439087 135.24436951]
[268.79516602 149.18014526]
[259.44995117 160.91329956]
[247.10873413 169.43939209]
[232.82798767 174.02856445]
[217.83023071 174.28793335]
[203.39935303 170.19529724]
[190.77070618 162.10102844]
[181.02536011 150.69802856]
[174.99758911 136.96246338]
[173.20339966 122.07015228]
[175.79638672 107.29596710]
[182.55455017 93.90466309]
[192.90208435 83.04049683]
[178.40647888 86.89765167]
[163.91088867 90.75481415]
[149.41528320 94.61197662]
[134.91969299 98.46913147]
[120.42409515 102.32629395]
[134.99440002 105.89087677]
[149.89335632 104.15278625]
[163.97196960 109.32896423]
[174.19676208 120.30410004]
[178.36462402 134.71343994]
[175.57754517 149.45222473]
[166.43603516 161.34477234]
[152.90977478 167.82862854]
[137.91322327 167.50672913]
[124.67764282 160.44845581]
[116.05485535 148.17459106]
[113.90287781 133.32859802]
[106.71149445 120.16486359]
[106.71149445 135.16485596]
[106.71149445 150.16485596]
[106.71149445 165.16485596]
[106.71149445 180.16485596]
[106.71149445 195.16485596]
[106.71149445 210.16485596]
[106.71149445 225.16485596]
[106.71149445 240.16485596]
[106.71149445 255.16485596]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 33]
[12 32]
[13 31]
[14 30]
[15 29]
[35 85]
[36 84]
[37 83]
[52 68]
[53 67]
[54 66]
[56 64]
[57 63]
[58 62]
[86 128]
[87 127]
[88 126]
[89 125]
[90 124]
[91 123]
[92 103]
[93 102]
[94 101]
[95 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
