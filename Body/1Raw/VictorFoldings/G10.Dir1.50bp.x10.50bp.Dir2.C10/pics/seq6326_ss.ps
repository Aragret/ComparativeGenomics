%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUCUACAACGUUAUCGUCACAGCCCAUGCAUUUGUAAUAAUCUUCUUCAUAGUAAUACCxxxxxxxxxxUGUACCCACGCCUUCUUCAAAGCCAUACUAUUUAUGUGCUCCGGGUCCAUCAUCCACAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[120.79276276 261.96984863]
[120.79276276 246.96983337]
[120.79276276 231.96983337]
[120.79276276 216.96983337]
[120.79276276 201.96983337]
[120.79276276 186.96983337]
[120.79276276 171.96983337]
[120.79276276 156.96983337]
[120.79276276 141.96983337]
[120.79276276 126.96983337]
[114.17147064 123.44726562]
[101.44892883 131.39314270]
[100.92888641 116.40213013]
[94.30759430 112.87956238]
[81.86814880 121.26171112]
[81.19206238 136.65161133]
[71.69455719 148.55332947]
[57.18168640 152.53335571]
[43.27455139 147.26747131]
[30.83510971 155.64961243]
[18.39566994 164.03175354]
[11.69007492 178.99728394]
[-4.64867544 180.40344238]
[-13.81267548 166.80369568]
[-6.37478828 152.18829346]
[10.01352596 151.59231567]
[22.45296669 143.21017456]
[34.89240646 134.82803345]
[35.23341751 119.96122742]
[44.37130737 108.00451660]
[58.96822739 103.67054749]
[73.48600769 108.82226562]
[85.92544556 100.44012451]
[94.04698944 87.82899475]
[96.53211212 73.03628540]
[99.01722717 58.24358368]
[88.61246490 44.21938324]
[91.48108673 27.33580780]
[105.37633514 17.91349792]
[107.55317688 3.07229185]
[109.73001099 -11.76891327]
[111.90685272 -26.61011887]
[98.33551788 -20.22114372]
[84.78598785 -26.65622139]
[81.16186523 -41.21183014]
[90.11209869 -53.24900055]
[105.09477997 -53.96952820]
[115.15859985 -42.84740448]
[118.86476135 -57.38233948]
[122.57092285 -71.91727448]
[126.27708435 -86.45221710]
[113.62253571 -78.39849854]
[98.64192200 -79.16081238]
[86.87027740 -88.45749664]
[82.65699005 -102.85362244]
[87.55879211 -117.03009033]
[99.76456451 -125.74899292]
[114.76451111 -125.78885651]
[127.01645660 -117.13496399]
[131.99351501 -102.98562622]
[138.05653381 -116.70567322]
[144.11953735 -130.42573547]
[150.18255615 -144.14578247]
[156.24557495 -157.86584473]
[162.30857849 -171.58589172]
[149.91226196 -180.10453796]
[139.29521179 -190.75321960]
[130.81797791 -203.16824341]
[124.76806641 -216.92596436]
[121.35016632 -231.55725098]
[120.67926788 -246.56347656]
[122.77674103 -261.43350220]
[127.56971741 -275.66110229]
[134.89355469 -288.76220703]
[144.49755859 -300.29132080]
[156.05351257 -309.85678101]
[169.16693115 -317.13391113]
[183.39050293 -321.87619019]
[198.23933411 -323.92346191]
[213.20753479 -323.20745850]
[227.78540039 -319.75405884]
[233.84841919 -333.47412109]
[239.91143799 -347.19415283]
[237.61502075 -363.43173218]
[250.69396973 -373.32482910]
[265.69378662 -366.69625854]
[267.18392944 -350.36495972]
[253.63148499 -341.13116455]
[247.56848145 -327.41110229]
[241.50546265 -313.69104004]
[253.87342834 -305.23684692]
[264.48010254 -294.65106201]
[272.96316528 -282.29321289]
[279.03256226 -268.58331299]
[282.48022461 -253.98770142]
[283.18728638 -239.00309753]
[281.12823486 -224.13978577]
[276.37173462 -209.90415955]
[269.07839966 -196.78150940]
[259.49530029 -185.21943665]
[247.94770813 -175.61268616]
[234.82794189 -168.28953552]
[220.58213806 -163.50067139]
[205.69496155 -161.41058350]
[190.67324829 -162.09188843]
[176.02864075 -165.52287292]
[169.96562195 -151.80282593]
[163.90261841 -138.08276367]
[157.83959961 -124.36271667]
[151.77658081 -110.64266205]
[145.71357727 -96.92260742]
[140.81202698 -82.74605560]
[137.10586548 -68.21111298]
[133.39970398 -53.67617798]
[129.69354248 -39.14124298]
[126.74805450 -24.43328285]
[124.57122040 -9.59207630]
[122.39437866 5.24912882]
[120.21754456 20.09033394]
[129.30072021 29.28232956]
[131.44325256 42.22388458]
[125.63713074 54.20373535]
[113.80993652 60.72869873]
[111.32481384 75.52140808]
[108.83969879 90.31411743]
[118.11259460 78.52371979]
[126.60901642 66.16205597]
[138.66752625 57.24059296]
[152.97381592 52.73172379]
[167.96861267 53.12688446]
[182.01757812 58.38299942]
[193.58944702 67.92719269]
[201.42298889 80.71920013]
[204.66439819 95.36479187]
[202.96037292 110.26768494]
[196.49662781 123.80357361]
[185.97769165 134.49711609]
[172.55006409 141.18281555]
[157.67723083 143.13194275]
[142.98414612 140.13357544]
[135.79277039 126.96983337]
[135.79277039 141.96983337]
[135.79277039 156.96983337]
[135.79277039 171.96983337]
[135.79277039 186.96983337]
[135.79277039 201.96983337]
[135.79277039 216.96983337]
[135.79277039 231.96983337]
[135.79277039 246.96983337]
[135.79277039 261.96984863]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[14 33]
[15 32]
[19 28]
[20 27]
[21 26]
[34 125]
[35 124]
[36 123]
[39 119]
[40 118]
[41 117]
[42 116]
[48 115]
[49 114]
[50 113]
[51 112]
[60 111]
[61 110]
[62 109]
[63 108]
[64 107]
[65 106]
[81 90]
[82 89]
[83 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
