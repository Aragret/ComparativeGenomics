%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAGCCUAACCAGAUUUCAAAUUUUAUCUUUUGGCGGUAUGCACUUUUAACAGUCACCCCCxxxxxxxxxxACCCAAAAAGGCAUAAUUAAACUUUACUUCCUCUCUUUCUUCUUCCCACUCAUCCUAACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[115.98656464 263.45861816]
[115.98656464 248.45861816]
[115.98656464 233.45861816]
[115.98656464 218.45861816]
[115.98656464 203.45861816]
[115.98656464 188.45861816]
[115.98656464 173.45861816]
[115.98656464 158.45861816]
[115.98656464 143.45861816]
[115.98656464 128.45861816]
[109.76684570 124.26754761]
[97.32740784 115.88540649]
[91.10768890 111.69433594]
[77.20513153 117.32628632]
[63.30257416 122.95824432]
[53.41714096 135.31092834]
[38.71595764 132.91833496]
[24.81340027 138.55029297]
[20.38467789 143.59945679]
[14.88973999 145.34213257]
[10.21348667 144.11405945]
[-3.91131616 149.16281128]
[-18.03611946 154.21156311]
[-32.16092300 159.26033020]
[-34.83636093 174.38439941]
[-44.72767639 186.13418579]
[-59.17415619 191.34904480]
[-74.28977203 188.62622070]
[-86.00849152 178.69812012]
[-91.17804718 164.23536682]
[-88.40784454 149.12835693]
[-78.44306946 137.44081116]
[-63.96417618 132.31661987]
[-48.86593246 135.13415527]
[-37.20967865 145.13552856]
[-23.08487511 140.08676147]
[-8.96007252 135.03800964]
[5.16473055 129.98925781]
[19.18144417 124.64774323]
[33.08399963 119.01578522]
[41.97503281 107.06594086]
[57.67061996 109.05568695]
[71.57317352 103.42373657]
[85.47573090 97.79177856]
[96.35455322 87.46456909]
[102.70168304 73.87361908]
[104.56929779 58.99034119]
[101.77696991 44.25253677]
[98.98464966 29.51473045]
[96.19232178 14.77692318]
[93.40000153 0.03911763]
[88.69978333 -7.87035942]
[90.70623779 -15.03414345]
[88.22111511 -29.82685089]
[85.73600006 -44.61955643]
[83.25087738 -59.41226578]
[80.76576233 -74.20497131]
[65.72309113 -74.84663391]
[51.14264297 -78.60220337]
[37.66181946 -85.30751038]
[25.86993980 -94.66941071]
[16.28249359 -106.27865601]
[9.31860542 -119.62773895]
[5.28270483 -134.13308716]
[4.35122442 -149.16059875]
[6.56488419 -164.05332947]
[11.82691288 -178.16023254]
[19.90727615 -190.86460876]
[30.45273781 -201.61109924]
[43.00229263 -209.92990112]
[57.00733185 -215.45733643]
[71.85560608 -217.95179749]
[86.89802551 -217.30421448]
[101.47698975 -213.54290771]
[114.95517731 -206.83230591]
[126.74337769 -197.46575928]
[136.32624817 -185.85273743]
[143.28488159 -172.50093079]
[147.31507874 -157.99398804]
[148.24064636 -142.96611023]
[146.02113342 -128.07424927]
[140.75355530 -113.96942139]
[132.66819763 -101.26821899]
[122.11850739 -90.52587891]
[109.56568146 -82.21202087]
[95.55846405 -76.69009399]
[98.04358673 -61.89738464]
[100.52870178 -47.10467529]
[103.01382446 -32.31196976]
[105.49893951 -17.51926231]
[108.13780975 -2.75320673]
[110.93013000 11.98459911]
[113.72245789 26.72240448]
[116.51477814 41.46021271]
[119.30710602 56.19801712]
[124.82906342 42.25140762]
[132.91885376 29.61988831]
[143.27722168 18.77073288]
[155.52099609 10.10527134]
[169.19723511 3.94406033]
[183.80003357 0.51501566]
[198.78918457 -0.05501466]
[213.61024475 2.25505590]
[227.71492004 7.35977316]
[240.58145142 15.07030201]
[251.73388672 25.10141373]
[260.75967407 37.08203506]
[267.32492065 50.56897354]
[271.18676758 65.06332397]
[272.20233154 80.02890778]
[270.33410645 94.91210175]
[265.65115356 109.16236877]
[258.32669067 122.25253296]
[248.63172913 133.69837952]
[236.92485046 143.07649231]
[223.63914490 150.03996277]
[209.26606750 154.33119202]
[194.33731079 155.79142761]
[179.40512085 154.36666870]
[165.02188110 150.10961914]
[151.71966553 143.17774963]
[139.99053955 133.82748413]
[130.26838684 122.40470886]
[122.91284943 109.33197784]
[118.19603729 95.09288788]
[116.29263306 80.22074890]
[109.94550323 93.81169891]
[122.03148651 84.92749786]
[132.34931946 74.03977966]
[145.98736572 67.79450226]
[160.97108459 67.09587860]
[175.13108826 72.04505920]
[186.41725159 81.92548370]
[193.19551086 95.30663300]
[194.48449707 110.25114441]
[190.09761047 124.59530640]
[180.66996765 136.26234436]
[167.56652832 143.56303406]
[152.68447876 145.44039917]
[138.17794800 141.62236023]
[130.98657227 128.45861816]
[130.98657227 143.45861816]
[130.98657227 158.45861816]
[130.98657227 173.45861816]
[130.98657227 188.45861816]
[130.98657227 203.45861816]
[130.98657227 218.45861816]
[130.98657227 233.45861816]
[130.98657227 248.45861816]
[130.98657227 263.45861816]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[13 44]
[14 43]
[15 42]
[17 40]
[18 39]
[21 38]
[22 37]
[23 36]
[24 35]
[45 127]
[46 126]
[47 95]
[48 94]
[49 93]
[50 92]
[51 91]
[53 90]
[54 89]
[55 88]
[56 87]
[57 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
