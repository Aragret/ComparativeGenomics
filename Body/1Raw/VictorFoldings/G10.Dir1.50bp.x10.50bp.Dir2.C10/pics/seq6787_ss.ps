%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACCUUCUUCGACCCCGCCGGAGGAGGAGACCCCAUUCUAUACCAACACCUAUUCUGAUUxxxxxxxxxxACAAUCGGCAUCAACCAACCACACCUAGCAUUCCUGCACAUCUGUACCCACGCCUUCUUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-21.93038559 250.49391174]
[-31.32289124 242.37181091]
[-40.17566299 233.66456604]
[-48.45231628 224.40797424]
[-56.11883545 214.64006042]
[-63.14370728 204.40098572]
[-76.08176422 211.99089050]
[-89.01982117 219.58079529]
[-101.95787811 227.17071533]
[-109.94600677 240.82722473]
[-124.83877563 240.59342957]
[-132.82691956 254.24993896]
[-147.71968079 254.01615906]
[-160.65774536 261.60607910]
[-173.59579468 269.19598389]
[-186.53384399 276.78588867]
[-199.47190857 284.37579346]
[-212.40995789 291.96569824]
[-225.34802246 299.55560303]
[-238.28607178 307.14550781]
[-251.22413635 314.73541260]
[-253.65412903 330.18304443]
[-265.47906494 340.41561890]
[-281.11553955 340.60159302]
[-293.18051147 330.65319824]
[-295.97723389 315.26773071]
[-288.18524170 301.70977783]
[-273.48361206 296.38095093]
[-258.81402588 301.79736328]
[-245.87597656 294.20745850]
[-232.93792725 286.61755371]
[-219.99987793 279.02764893]
[-207.06181335 271.43774414]
[-194.12376404 263.84783936]
[-181.18569946 256.25790405]
[-168.24765015 248.66801453]
[-155.30958557 241.07810974]
[-148.24687195 227.96447754]
[-132.42868042 227.65538025]
[-125.36596680 214.54174805]
[-109.54778290 214.23265076]
[-96.60972595 206.64274597]
[-83.67166901 199.05284119]
[-70.73361206 191.46292114]
[-78.88988495 174.25524902]
[-85.31698608 156.32981873]
[-89.95278931 137.85989380]
[-92.75248718 119.02401733]
[-93.68901825 100.00424957]
[-92.75331879 80.98443604]
[-89.95445251 62.14843369]
[-85.31945801 43.67830658]
[-78.89314270 25.75259018]
[-70.73762512 8.54456139]
[-60.93173981 -7.77944946]
[-49.57026672 -23.06165123]
[-36.76303101 -37.15432358]
[-22.63382339 -49.92124557]
[-7.31922531 -61.23900986]
[9.03273392 -70.99822235]
[26.26399422 -79.10453796]
[44.20799637 -85.47961426]
[62.69128799 -90.06182098]
[81.53520966 -92.80686188]
[100.55761719 -93.68820953]
[101.18159485 -108.67523193]
[101.80557251 -123.66224670]
[102.42955017 -138.64926147]
[103.05352783 -153.63627625]
[103.67750549 -168.62329102]
[90.18910980 -175.76654053]
[81.14273834 -188.05986023]
[78.33454895 -203.06242371]
[82.32212067 -217.79545593]
[92.31370544 -229.33369446]
[106.32547760 -235.38621521]
[121.57538605 -234.75129700]
[135.03553772 -227.55499268]
[144.03343201 -215.22613525]
[146.78251648 -200.21263123]
[142.73696899 -185.49542236]
[132.70001221 -173.99661255]
[118.66452026 -167.99931335]
[118.04054260 -153.01229858]
[117.41656494 -138.02528381]
[116.79259491 -123.03826904]
[116.16861725 -108.05125427]
[115.54463959 -93.06423187]
[129.20645142 -91.47432709]
[142.72099304 -88.91889954]
[156.02009583 -85.41085052]
[169.03672791 -80.96784973]
[181.70524597 -75.61231995]
[193.96176147 -69.37125397]
[205.74446106 -62.27613449]
[216.99394226 -54.36272430]
[227.65348816 -45.67094040]
[237.66932678 -36.24460220]
[246.99096680 -26.13124466]
[255.57139587 -15.38186741]
[263.36734009 -4.05067253]
[270.33953857 7.80520153]
[276.45275879 20.12597084]
[281.67620850 32.84950638]
[285.98355103 45.91165543]
[289.35308838 59.24654388]
[291.76779175 72.78693390]
[293.21548462 86.46454620]
[308.20819092 85.99649811]
[323.20089722 85.52845764]
[336.84756470 76.43451691]
[351.42453003 83.94745636]
[351.93621826 100.33862305]
[337.85629272 108.74617767]
[323.66891479 100.52115631]
[308.67623901 100.98919678]
[293.68353271 101.45723724]
[293.19213867 113.86473846]
[291.90673828 126.21526337]
[289.83258057 138.45803833]
[286.97824097 150.54275513]
[283.35543823 162.41973877]
[278.97900391 174.04017639]
[273.86700439 185.35630798]
[268.04040527 196.32164001]
[261.52316284 206.89108276]
[254.34207153 217.02119446]
[246.52662659 226.67036438]
[238.10896301 235.79893494]
[229.12367249 244.36935425]
[219.60769653 252.34642029]
[209.60012817 259.69735718]
[199.14210510 266.39193726]
[188.27661133 272.40264893]
[177.04830933 277.70480347]
[165.50332642 282.27658081]
[153.68914795 286.09918213]
[141.65428162 289.15695190]
[129.44824219 291.43728638]
[117.12115479 292.93081665]
[104.72370911 293.63140869]
[92.30683899 293.53616333]
[79.92159271 292.64550781]
[67.61887360 290.96307373]
[55.44923401 288.49578857]
[43.46269989 285.25378418]
[31.70853043 281.25039673]
[20.23503685 276.50207520]
[9.08937740 271.02835083]
[-1.68264151 264.85168457]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 44]
[7 43]
[8 42]
[9 41]
[11 39]
[13 37]
[14 36]
[15 35]
[16 34]
[17 33]
[18 32]
[19 31]
[20 30]
[21 29]
[65 88]
[66 87]
[67 86]
[68 85]
[69 84]
[70 83]
[108 117]
[109 116]
[110 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
