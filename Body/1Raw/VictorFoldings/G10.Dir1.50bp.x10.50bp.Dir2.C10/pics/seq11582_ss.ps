%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAAUUGAAAACAAAAUACUCAAAUGGGCCUGUCCUUGUAGUAUAAACUAAUACACCAGUxxxxxxxxxxAAUCAGAGAAAAAGUCUUUAACUCCACCAUUAGCACCCAAAGCUAAGAUUCUAAUUUAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 314.30349731]
[92.50000000 299.30349731]
[92.50000000 284.30349731]
[92.50000000 269.30349731]
[92.50000000 254.30349731]
[92.50000000 239.30349731]
[92.50000000 224.30349731]
[92.50000000 209.30349731]
[92.50000000 194.30349731]
[92.50000000 179.30349731]
[82.70529175 177.75724792]
[73.17858124 175.00604248]
[64.06750488 171.09255981]
[55.51323700 166.07740784]
[47.64833832 160.03831482]
[36.76951218 170.36552429]
[25.89068794 180.69271851]
[21.75716782 196.56237793]
[5.87717676 200.65602112]
[-5.41331387 188.76246643]
[-0.49961388 173.11677551]
[15.56348324 169.81390381]
[26.44230843 159.48669434]
[37.32113266 149.15948486]
[24.71551514 126.02964020]
[20.34265327 100.05331421]
[5.40834522 98.65100861]
[-9.52596188 97.24871063]
[-24.46026993 95.84640503]
[-39.39457703 94.44409943]
[-54.34266281 93.19722748]
[-69.30290985 92.10591125]
[-84.26316071 91.01460266]
[-90.46723175 93.58696747]
[-96.16663361 92.72205353]
[-99.81884766 89.55395508]
[-114.72074890 87.84126282]
[-129.62265015 86.12857819]
[-144.44461060 93.14580536]
[-157.77696228 83.59695435]
[-155.90451050 67.30505371]
[-140.75349426 61.02981949]
[-127.90996552 71.22666931]
[-113.00806427 72.93936157]
[-98.10615540 74.65205383]
[-83.17185211 76.05435944]
[-68.21160126 77.14566803]
[-53.25135422 78.23697662]
[-46.30651855 75.56959534]
[-37.99227524 79.50979614]
[-23.05796623 80.91209412]
[-8.12365818 82.31439972]
[6.81064892 83.71670532]
[21.74495697 85.11900330]
[28.30756187 65.27983093]
[39.80378723 47.82997513]
[55.44250107 33.97027206]
[48.25999069 20.80168915]
[41.07748413 7.63310671]
[25.67258072 5.77068758]
[14.32739639 -4.81545591]
[11.40438652 -20.05473518]
[18.02750587 -34.08733749]
[31.65003204 -41.51743698]
[47.03382492 -39.48801422]
[58.26350021 -28.77942085]
[61.02102280 -13.50932980]
[54.24606705 0.45059782]
[61.42857361 13.61918068]
[68.61108398 26.78776360]
[79.26765442 23.08793449]
[90.34001160 20.93053436]
[101.60608673 20.35882759]
[112.83995056 21.38428116]
[123.81632233 23.98632622]
[134.31506348 28.11278343]
[144.12564087 33.68089676]
[153.05130005 40.57900620]
[160.91305542 48.66876602]
[167.55322266 57.78794479]
[172.83865356 67.75366211]
[187.06542969 62.99985123]
[201.29220581 58.24603653]
[215.51899719 53.49222183]
[208.66255188 35.52037430]
[219.54609680 12.37215233]
[230.42492676 2.04494762]
[241.30375671 -8.28225708]
[246.08491516 -26.03388786]
[263.25375366 -29.53117371]
[273.91537476 -40.08246613]
[284.57699585 -50.63375473]
[288.37948608 -66.58596802]
[304.17086792 -71.00908661]
[315.70635986 -59.35298157]
[311.11920166 -43.60845566]
[295.12829590 -39.97212982]
[284.46667480 -29.42083740]
[273.80502319 -18.86954689]
[273.41592407 -6.73876381]
[264.56332397 2.14100671]
[251.63095093 2.59656811]
[240.75213623 12.92377281]
[229.87330627 23.25097847]
[231.95225525 30.45708656]
[244.37423706 22.04910088]
[256.20928955 31.26492119]
[251.10174561 45.36856842]
[236.11013794 44.86930084]
[238.18908691 52.07540894]
[252.89704895 55.02089310]
[267.60501099 57.96637344]
[282.31295776 60.91185760]
[297.02093506 63.85734177]
[309.11526489 53.94467926]
[324.75112915 54.17692184]
[336.54571533 64.44441986]
[338.93002319 79.89916229]
[330.77822876 93.24390411]
[315.93933105 98.17765808]
[301.41986084 92.37085724]
[294.07543945 78.56529999]
[279.36749268 75.61981964]
[264.65951538 72.67433929]
[249.95155334 69.72885132]
[235.24359131 66.78337097]
[220.27281189 67.71900177]
[206.04603577 72.47281647]
[191.81924438 77.22663116]
[177.59246826 81.98044586]
[179.44395447 94.17298126]
[179.39129639 106.50518036]
[177.43577576 118.68145752]
[173.62423706 130.40997314]
[168.04806519 141.40962219]
[160.84089661 151.41674805]
[152.17546082 160.19149780]
[142.25949097 167.52355957]
[131.33061218 173.23719788]
[119.65081024 177.19548035]
[107.50000000 179.30349731]
[107.50000000 194.30349731]
[107.50000000 209.30349731]
[107.50000000 224.30349731]
[107.50000000 239.30349731]
[107.50000000 254.30349731]
[107.50000000 269.30349731]
[107.50000000 284.30349731]
[107.50000000 299.30349731]
[107.50000000 314.30349731]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[15 24]
[16 23]
[17 22]
[26 54]
[27 53]
[28 52]
[29 51]
[30 50]
[31 48]
[32 47]
[33 46]
[36 45]
[37 44]
[38 43]
[57 70]
[58 69]
[59 68]
[81 130]
[82 129]
[83 128]
[84 127]
[86 104]
[87 103]
[88 102]
[90 99]
[91 98]
[92 97]
[110 126]
[111 125]
[112 124]
[113 123]
[114 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
