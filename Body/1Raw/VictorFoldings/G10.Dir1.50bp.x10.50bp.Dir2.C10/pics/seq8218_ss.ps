%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUAGGCCUACCCGCCGCAGUACUGAUCAUUCUAUUUCCCCCUCUAUUGAUCCCCACCUCCxxxxxxxxxxAUUGUGCCUAUUGCCAUACUAGUCUUUGCCGCCUGCGAAGCAGCGGUGGGCCUAGCCCUACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[76.09101105 473.15274048]
[76.09101105 458.15274048]
[76.09101105 443.15274048]
[76.09101105 428.15274048]
[76.09101105 413.15274048]
[76.09101105 398.15274048]
[76.09101105 383.15274048]
[76.09101105 368.15274048]
[76.09101105 353.15274048]
[76.09101105 338.15274048]
[61.07544708 334.25674438]
[47.56324005 326.61401367]
[36.47168732 315.73681641]
[28.55544472 302.35717773]
[24.35519791 287.37768555]
[24.16072845 271.81054688]
[27.99093246 256.70925903]
[35.59214783 243.09724426]
[46.45495224 231.89848328]
[59.84829712 223.87490845]
[74.86870575 219.57443237]
[74.56072998 204.57759094]
[74.25274658 189.58076477]
[73.94477081 174.58392334]
[73.63679504 159.58708191]
[73.32881927 144.59024048]
[73.02083588 129.59341431]
[72.71286011 114.59656525]
[69.05415344 100.04961395]
[62.23057938 86.69151306]
[55.40700531 73.33341980]
[48.58342743 59.97531509]
[23.09293175 57.95299530]
[4.80197096 40.32506180]
[1.87917399 15.25984573]
[-11.81145191 9.13067245]
[-25.50207710 3.00149798]
[-39.19270325 -3.12767577]
[-52.88332748 -9.25684929]
[-63.01543045 1.97683585]
[-76.12404633 9.52795696]
[-90.92491913 12.65673256]
[-105.96801758 11.05663681]
[-119.77957916 4.88442993]
[-131.00646973 -5.25519753]
[-138.54881287 -18.36886787]
[-141.66766357 -33.17183685]
[-140.05747986 -48.21386337]
[-133.87602234 -62.02127838]
[-123.72888184 -73.24137878]
[-110.61016083 -80.77492523]
[-95.80509949 -83.88385773]
[-80.76416016 -82.26360321]
[-66.96089172 -76.07289886]
[-55.74759293 -65.91822815]
[-48.22283936 -52.79446411]
[-45.12382126 -37.98732758]
[-46.75415421 -22.94747543]
[-33.06352997 -16.81830215]
[-19.37290382 -10.68912697]
[-5.68227768 -4.55995369]
[8.00834751 1.56922042]
[14.09457302 -5.04144382]
[21.58508301 -10.00483608]
[30.04520607 -13.03293133]
[29.73722839 -28.02976799]
[29.42925072 -43.02660751]
[15.00334549 -47.62791061]
[2.85460711 -56.66598892]
[-5.69916201 -69.16046143]
[-9.73011303 -83.75601196]
[-8.80099773 -98.86943054]
[-3.01259971 -112.86132812]
[7.00719833 -124.21396637]
[20.17152405 -131.69589233]
[35.05241013 -134.49552917]
[50.03569031 -132.30918884]
[63.49608612 -125.37403107]
[73.97351837 -114.44232941]
[80.33147430 -100.69987488]
[81.88028717 -85.63733673]
[78.45195770 -70.88860321]
[70.41835785 -58.05349350]
[58.65092468 -48.52426529]
[44.42608643 -43.33458328]
[44.73406601 -28.33774567]
[45.04204178 -13.34090900]
[52.50130463 -11.21813393]
[59.37350845 -7.59344482]
[65.35939026 -2.61810255]
[70.19692230 3.49767447]
[73.67278290 10.49359131]
[75.63177490 18.07035065]
[75.98371887 25.90245628]
[74.70760345 33.65219879]
[71.85276031 40.98421478]
[67.53694916 47.57999802]
[61.94152832 53.15174103]
[68.76510620 66.50984192]
[75.58867645 79.86794281]
[82.41225433 93.22603607]
[98.00707245 82.99063873]
[112.70577240 91.29050446]
[121.02194214 87.36150360]
[127.96215820 90.03462219]
[142.92344666 88.95755768]
[157.88471985 87.88048553]
[172.84600830 86.80341339]
[187.80728149 85.72634888]
[202.76856995 84.64927673]
[214.31372070 73.50975800]
[230.20190430 75.73353577]
[238.24505615 89.61471558]
[232.27316284 104.50485229]
[216.86735535 108.98149872]
[203.84562683 99.61055756]
[188.88435364 100.68762970]
[173.92306519 101.76469421]
[158.96179199 102.84176636]
[144.00050354 103.91883850]
[129.03923035 104.99590302]
[114.08979797 106.22651672]
[103.77349854 116.70481873]
[87.70970154 114.28858948]
[88.01767731 129.28543091]
[88.32565308 144.28227234]
[88.63362885 159.27909851]
[88.94161224 174.27593994]
[89.24958801 189.27278137]
[89.55756378 204.26962280]
[89.86553955 219.26646423]
[104.02039337 222.55963135]
[116.96139526 229.15205383]
[127.93288422 238.65367126]
[136.29544067 250.50469971]
[141.56315613 264.00863647]
[143.43180847 278.37307739]
[141.79652405 292.75646973]
[136.75756836 306.31707764]
[128.61424255 318.26248169]
[117.84712219 327.89587402]
[105.08967590 334.65658569]
[91.09101105 338.15274048]
[91.09101105 353.15274048]
[91.09101105 368.15274048]
[91.09101105 383.15274048]
[91.09101105 398.15274048]
[91.09101105 413.15274048]
[91.09101105 428.15274048]
[91.09101105 443.15274048]
[91.09101105 458.15274048]
[91.09101105 473.15274048]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[21 131]
[22 130]
[23 129]
[24 128]
[25 127]
[26 126]
[27 125]
[28 124]
[29 101]
[30 100]
[31 99]
[32 98]
[35 62]
[36 61]
[37 60]
[38 59]
[39 58]
[65 87]
[66 86]
[67 85]
[103 122]
[105 121]
[106 120]
[107 119]
[108 118]
[109 117]
[110 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
