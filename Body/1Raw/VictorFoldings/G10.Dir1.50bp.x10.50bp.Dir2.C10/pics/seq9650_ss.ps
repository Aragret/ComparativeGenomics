%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCAACACCCACUCCCUCUUAGCCAAUAUUGUGCCUAUUGCCAUACUAGUCUUUGCCGCCxxxxxxxxxxCAGUACUCUUAAAACUAGGCGGCUAUGGUAUAAUACGCCUCACACUCAUUCUCAACCCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[113.61822510 224.26524353]
[112.99424744 209.27822876]
[112.37026978 194.29121399]
[111.74629211 179.30418396]
[111.12231445 164.31716919]
[110.49834442 149.33015442]
[109.87436676 134.34313965]
[109.25038910 119.35612488]
[95.59414673 113.15071869]
[83.89452362 122.53787994]
[72.19490051 131.92504883]
[60.49527359 141.31221008]
[65.86998749 155.45320129]
[66.60981750 170.56304932]
[62.64227676 185.16146851]
[54.35606384 197.81823730]
[42.56298065 207.29339600]
[28.41839409 212.65863037]
[13.30804253 213.38833618]
[-1.28771377 209.41101074]
[-13.93893051 201.11631775]
[-23.40617180 189.31689453]
[-28.76193237 175.16871643]
[-29.48151016 160.05787659]
[-25.49440765 145.46478271]
[-17.19124222 132.81912231]
[-5.38547182 123.35979462]
[8.76629448 118.01351929]
[23.87760925 117.30406189]
[38.46802139 121.30094147]
[51.10811234 129.61257935]
[62.80773544 120.22541809]
[74.50736237 110.83825684]
[86.20698547 101.45109558]
[94.58912659 89.01165771]
[98.89671326 74.64347076]
[103.20429230 60.27528763]
[94.62660980 45.06474304]
[99.57505035 28.66971207]
[114.53532410 21.05078316]
[118.54306030 6.59609413]
[122.55080414 -7.85859394]
[126.10556793 -22.43129730]
[129.20388794 -37.10782242]
[124.48393250 -52.20857239]
[134.68325806 -63.06320190]
[137.78158569 -77.73973083]
[140.87989807 -92.41625214]
[143.97822571 -107.09278107]
[146.77055359 -121.83058929]
[149.25566101 -136.62329102]
[151.74078369 -151.41600037]
[154.22590637 -166.20870972]
[156.71102905 -181.00141907]
[159.19613647 -195.79412842]
[147.67596436 -186.18757629]
[132.80993652 -184.18727112]
[119.16024780 -190.40707397]
[110.91581726 -202.93820190]
[110.60674286 -217.93502808]
[118.32788849 -230.79519653]
[131.70973206 -237.57209778]
[146.64555359 -236.18597412]
[158.55172729 -227.06222534]
[163.77449036 -213.00001526]
[168.96990967 -227.07153320]
[174.16531372 -241.14305115]
[179.36073303 -255.21456909]
[184.55615234 -269.28610229]
[189.75157166 -283.35760498]
[177.07179260 -291.48394775]
[166.43571472 -302.14642334]
[158.34080505 -314.84628296]
[153.16566467 -328.98953247]
[151.15234375 -343.91470337]
[152.39501953 -358.92370605]
[156.83555603 -373.31451416]
[164.26628113 -386.41409302]
[174.33961487 -397.60968018]
[186.58444214 -406.37771606]
[200.42803955 -412.30804443]
[215.22291565 -415.12335205]
[230.27708435 -414.69189453]
[244.88642883 -411.03390503]
[258.36764526 -404.32043457]
[270.09020996 -394.86550903]
[279.50582886 -383.11135864]
[286.17413330 -369.60772705]
[289.78317261 -354.98620605]
[290.16421509 -339.93066406]
[287.29940796 -325.14532471]
[281.32272339 -311.32165527]
[272.51376343 -299.10626221]
[261.28448486 -289.07046509]
[248.16011047 -281.68365479]
[233.75450134 -277.29132080]
[218.74142456 -276.09890747]
[203.82308960 -278.16220093]
[198.62767029 -264.09066772]
[193.43225098 -250.01916504]
[188.23683167 -235.94763184]
[183.04142761 -221.87611389]
[177.84600830 -207.80459595]
[173.98884583 -193.30900574]
[171.50372314 -178.51629639]
[169.01861572 -163.72358704]
[166.53349304 -148.93087769]
[164.04837036 -134.13816833]
[161.56324768 -119.34546661]
[163.59484863 -114.95819855]
[162.84603882 -109.24237823]
[158.65475464 -103.99446106]
[155.55642700 -89.31793213]
[152.45809937 -74.64141083]
[149.35978699 -59.96488190]
[154.30134583 -45.91389465]
[143.88041687 -34.00950241]
[140.78208923 -19.33297539]
[142.44284058 -16.15345001]
[142.60728455 -11.99717236]
[140.82707214 -7.59453773]
[137.00549316 -3.85085392]
[132.99775696 10.60383415]
[128.99000549 25.05852318]
[136.85803223 35.30991745]
[137.37257385 48.41753006]
[130.12004089 59.58125305]
[117.57247925 64.58287048]
[113.26489258 78.95105743]
[108.95731354 93.31924438]
[119.62604523 82.77513885]
[131.75640869 73.95163727]
[146.60781860 71.84546661]
[160.71316528 76.94831848]
[170.77955627 88.06891632]
[174.45698547 102.61114502]
[170.88694763 117.18011475]
[160.90286255 128.37467957]
[146.83554077 133.58143616]
[131.97015381 131.58534241]
[124.23740387 118.73214722]
[124.86138153 133.71916199]
[125.48535919 148.70617676]
[126.10933685 163.69319153]
[126.73331451 178.68022156]
[127.35729218 193.66723633]
[127.98126984 208.65425110]
[128.60523987 223.64126587]
[135.30523682 239.21516418]
[122.19470978 249.96459961]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 148]
[2 147]
[3 146]
[4 145]
[5 144]
[6 143]
[7 142]
[8 141]
[9 34]
[10 33]
[11 32]
[12 31]
[35 130]
[36 129]
[37 128]
[40 124]
[41 123]
[42 122]
[43 118]
[44 117]
[46 115]
[47 114]
[48 113]
[49 112]
[50 109]
[51 108]
[52 107]
[53 106]
[54 105]
[55 104]
[65 103]
[66 102]
[67 101]
[68 100]
[69 99]
[70 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
