%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAACCACCCACAGCCUAAUUAUUAGCAUCAUCCCUCUACUAUUUUUUAACCAAAUCAACAACxxxxxxxxxxGCCUUCUCCACUUCAAGUCAACUAGGACUCAUAAUAGUUACAAUCGGCAUCAACCAACCACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 305.99896240]
[92.50000000 290.99896240]
[92.50000000 275.99896240]
[92.50000000 260.99896240]
[92.50000000 245.99896240]
[92.50000000 230.99896240]
[92.50000000 215.99896240]
[92.50000000 200.99896240]
[92.50000000 185.99896240]
[92.50000000 170.99896240]
[77.02769470 167.59715271]
[62.68647003 160.86709595]
[50.18243790 151.14012146]
[40.13125992 138.89520264]
[33.02782440 124.73519135]
[29.22187424 109.35730743]
[28.90080833 93.51869965]
[32.08043289 77.99921417]
[38.60419083 63.56297302]
[48.15087891 50.92076874]
[60.25044632 40.69506454]
[74.30715179 33.38934326]
[89.62889099 29.36330795]
[89.02100372 14.37563038]
[88.41311646 -0.61204678]
[87.04690552 -15.54969883]
[84.92585754 -30.39898109]
[82.80481720 -45.24826431]
[80.68377686 -60.09754562]
[78.56272888 -74.94683075]
[76.44168854 -89.79611206]
[74.32064819 -104.64539337]
[72.19960022 -119.49467468]
[70.07855988 -134.34394836]
[55.10198975 -133.37922668]
[40.09569931 -133.57797241]
[25.14993286 -134.93899536]
[10.35457993 -137.45411682]
[-4.20137739 -141.10821533]
[-18.43039703 -145.87930298]
[-32.24690247 -151.73870850]
[-45.56779861 -158.65115356]
[-58.31297302 -166.57510376]
[-70.40576935 -175.46287537]
[-81.77346039 -185.26103210]
[-92.34768677 -195.91064453]
[-102.06484222 -207.34765625]
[-110.86648560 -219.50328064]
[-118.69969177 -232.30441284]
[-125.51734924 -245.67408752]
[-131.27844238 -259.53186035]
[-135.94833374 -273.79440308]
[-139.49894714 -288.37597656]
[-141.90890503 -303.18881226]
[-143.16372681 -318.14385986]
[-143.25585938 -333.15118408]
[-142.18476868 -348.12054443]
[-139.95687866 -362.96185303]
[-136.58557129 -377.58590698]
[-132.09115601 -391.90472412]
[-126.50065613 -405.83218384]
[-119.84767914 -419.28454590]
[-112.17224884 -432.18090820]
[-103.52051544 -444.44369507]
[-93.94452667 -455.99917603]
[-83.50186920 -466.77780151]
[-72.25534058 -476.71481323]
[-60.27258301 -485.75039673]
[-47.62566757 -493.83023071]
[-34.39065170 -500.90573120]
[-20.64713478 -506.93432617]
[-6.47777033 -511.87979126]
[8.03222179 -515.71234131]
[22.79557610 -518.40893555]
[37.72350311 -519.95336914]
[52.72622299 -520.33636475]
[67.71350861 -519.55560303]
[82.59522247 -517.61578369]
[97.28186035 -514.52856445]
[111.68509674 -510.31250000]
[125.71830750 -504.99298096]
[139.29710388 -498.60198975]
[152.33979797 -491.17794800]
[164.76795959 -482.76550293]
[176.50685120 -473.41528320]
[187.48587036 -463.18350220]
[197.63897705 -452.13168335]
[206.90510559 -440.32629395]
[215.22854614 -427.83834839]
[222.55923462 -414.74295044]
[228.85307312 -401.11886597]
[234.07221985 -387.04800415]
[238.18528748 -372.61502075]
[241.16751099 -357.90670776]
[243.00099182 -343.01153564]
[243.67468262 -328.01904297]
[243.18453979 -313.01943970]
[241.53350830 -298.10293579]
[238.73152161 -283.35922241]
[234.79542542 -268.87695312]
[229.74888611 -254.74328613]
[223.62226868 -241.04318237]
[216.45240784 -227.85903931]
[208.28244019 -215.27017212]
[199.16148376 -203.35226440]
[189.14440918 -192.17700195]
[178.29144287 -181.81159973]
[166.66787720 -172.31838989]
[154.34361267 -163.75448608]
[141.39274597 -156.17135620]
[127.89320374 -149.61463928]
[113.92614746 -144.12376404]
[99.57559204 -139.73175049]
[84.92784119 -136.46499634]
[87.04888153 -121.61571503]
[89.16992950 -106.76643372]
[91.29096985 -91.91715240]
[93.41201019 -77.06787109]
[95.53305817 -62.21858978]
[97.65409851 -47.36930466]
[99.77513885 -32.52002335]
[101.89618683 -17.67074203]
[113.07618713 -27.67112160]
[127.89870453 -25.37047768]
[135.52134705 -12.45168495]
[130.36831665 1.63540876]
[116.20893860 6.58636713]
[103.40079498 -1.21993041]
[104.00868225 13.76774693]
[104.61656189 28.75542450]
[118.54833221 31.05755043]
[131.75451660 36.05664062]
[143.71847534 43.55714035]
[153.97222900 53.26562881]
[162.11462402 64.80233002]
[167.82714844 77.71592712]
[170.88633728 91.50125885]
[171.17253113 105.61904907]
[168.67449951 119.51703644]
[163.49000549 132.65151978]
[155.82182312 144.50872803]
[145.96994019 154.62477112]
[134.31976318 162.60395813]
[121.32703400 168.13412476]
[107.50000000 170.99896240]
[107.50000000 185.99896240]
[107.50000000 200.99896240]
[107.50000000 215.99896240]
[107.50000000 230.99896240]
[107.50000000 245.99896240]
[107.50000000 260.99896240]
[107.50000000 275.99896240]
[107.50000000 290.99896240]
[107.50000000 305.99896240]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[23 130]
[24 129]
[25 128]
[26 122]
[27 121]
[28 120]
[29 119]
[30 118]
[31 117]
[32 116]
[33 115]
[34 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
