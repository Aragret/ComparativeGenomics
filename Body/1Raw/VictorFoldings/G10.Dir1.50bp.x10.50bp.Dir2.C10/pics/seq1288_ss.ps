%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGUAAAAAACUCCAGUUGACACAAAAUAGACUACGAAAGUGGCUUUAACAUAUCUGAACACxxxxxxxxxxAUAGUACCGUUAACUUCCAAUUAACUAGUUUUGACAACAUUCAAAAAAGAGUAAUAAACUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[158.55845642 364.01141357]
[158.55845642 349.01141357]
[158.55845642 334.01141357]
[158.55845642 319.01141357]
[158.55845642 304.01141357]
[158.55845642 289.01141357]
[158.55845642 274.01141357]
[158.55845642 259.01141357]
[158.55845642 244.01142883]
[158.55845642 229.01142883]
[154.70129395 214.51582336]
[147.24638367 201.49951172]
[135.62358093 198.00415039]
[129.31880188 187.16584778]
[132.20404053 174.55119324]
[125.02153015 161.38261414]
[117.83901978 148.21403503]
[110.65650940 135.04545593]
[103.47399902 121.87686920]
[96.29149628 108.70829010]
[91.66105652 106.09835052]
[88.85334778 101.05836487]
[89.09711456 94.83911896]
[82.46861267 81.38315582]
[75.84011841 67.92719269]
[69.21161652 54.47122574]
[67.83452606 69.40787506]
[62.19317627 83.30662537]
[52.77049255 94.97765350]
[40.37310028 103.42186737]
[26.06229401 107.91639709]
[11.06314754 108.07647705]
[-3.34032822 103.88841248]
[-15.91511917 95.71072388]
[-25.58475685 84.24346161]
[-31.52146721 70.46828461]
[-33.21703720 55.56442642]
[-30.52631569 40.80773163]
[-23.67964172 27.46145630]
[-13.26313114 16.66811180]
[-0.16849031 9.35166550]
[14.48330879 6.13844585]
[29.43799400 7.30352116]
[43.41536331 12.74715424]
[55.21887970 22.00334167]
[63.83963013 34.28275681]
[62.90400314 19.31196594]
[54.32098007 6.02128172]
[61.24934769 -7.16382313]
[60.31371689 -22.13461494]
[59.37808990 -37.10540771]
[46.06301117 -48.40346146]
[45.02654648 -65.49760437]
[56.42190170 -77.82659149]
[55.17502594 -92.77468109]
[53.92815399 -107.72276306]
[52.68127823 -122.67085266]
[51.43440247 -137.61894226]
[36.48062897 -139.31329346]
[22.14483070 -143.89271545]
[8.97804165 -151.18119812]
[-2.51364470 -160.89857483]
[-11.88851738 -172.67134094]
[-18.78623009 -186.04698181]
[-22.94165611 -200.51136780]
[-24.19506836 -215.50854492]
[-22.49829292 -230.46205139]
[-17.91654587 -244.79710388]
[-10.62593937 -257.96270752]
[-0.90670389 -269.45281982]
[10.86757851 -278.82580566]
[24.24433517 -285.72134399]
[38.70940018 -289.87442017]
[53.70677567 -291.12539673]
[68.66000366 -289.42620850]
[82.99431610 -284.84213257]
[96.15874481 -277.54940796]
[107.64728546 -267.82830811]
[117.01834869 -256.05252075]
[123.91172791 -242.67463684]
[128.06246948 -228.20890808]
[129.31103516 -213.21131897]
[127.60941315 -198.25837708]
[123.02302551 -183.92480469]
[115.72815704 -170.76155090]
[106.00520325 -159.27458191]
[94.22789001 -149.90542603]
[80.84889984 -143.01422119]
[66.38249207 -138.86581421]
[67.62936401 -123.91772461]
[68.87623596 -108.96964264]
[70.12311554 -94.02155304]
[71.36998749 -79.07346344]
[82.30167389 -72.18179321]
[87.32434082 -60.06374741]
[84.38740540 -47.07904816]
[74.34888458 -38.04103470]
[75.28450775 -23.07024384]
[76.22013855 -8.09945202]
[84.73623657 4.12042141]
[77.87479401 18.37633705]
[78.81042480 33.34712982]
[82.66757965 47.84272385]
[89.29608154 61.29869080]
[95.92457581 74.75465393]
[102.55307770 88.21062469]
[109.46007538 101.52577972]
[116.64258575 114.69435883]
[123.82509613 127.86294556]
[131.00759888 141.03152466]
[138.19010925 154.20010376]
[145.37261963 167.36868286]
[161.29786682 176.55380249]
[160.26269531 194.04460144]
[167.71760559 207.06091309]
[168.12948608 192.06657410]
[171.92457581 177.55459595]
[178.90589905 164.27825928]
[188.71105957 152.92666626]
[200.83114624 144.08903503]
[214.63702393 138.22409058]
[229.41210938 135.63624573]
[244.38948059 136.45983887]
[258.79171753 140.65211487]
[271.87130737 147.99546814]
[282.94927979 158.10873413]
[291.45065308 170.46699524]
[296.93417358 184.42877197]
[299.11520386 199.26936340]
[297.88052368 214.21846008]
[293.29421997 228.50012207]
[285.59439087 241.37304688]
[275.18063354 252.16905212]
[262.59353638 260.32778931]
[248.48640442 265.42572021]
[233.59150696 267.19827271]
[218.68196106 265.55343628]
[204.53166199 260.57659912]
[191.87509155 252.52606201]
[181.36918640 241.81968689]
[173.55845642 229.01142883]
[173.55845642 244.01142883]
[173.55845642 259.01141357]
[173.55845642 274.01141357]
[173.55845642 289.01141357]
[173.55845642 304.01141357]
[173.55845642 319.01141357]
[173.55845642 334.01141357]
[173.55845642 349.01141357]
[173.55845642 364.01141357]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 115]
[12 114]
[15 112]
[16 111]
[17 110]
[18 109]
[19 108]
[20 107]
[23 106]
[24 105]
[25 104]
[26 103]
[46 102]
[47 101]
[49 99]
[50 98]
[51 97]
[54 93]
[55 92]
[56 91]
[57 90]
[58 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
