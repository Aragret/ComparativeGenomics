%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUGCCUCAUCCUAUUAUUUAUCGCACCUACGUUCAAUAUUACAGGCGAACAUACUUACUAAAxxxxxxxxxxCACCCCAUCCAACAUCUCCGCAUGAUGAAACUUCGGCUCACUCCUUGGCGCCUGCCUGAUCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 285.87625122]
[92.50000000 270.87625122]
[92.50000000 255.87625122]
[92.50000000 240.87625122]
[92.50000000 225.87625122]
[92.50000000 210.87625122]
[92.50000000 195.87625122]
[92.50000000 180.87625122]
[92.50000000 165.87625122]
[92.50000000 150.87625122]
[81.13437653 147.84068298]
[70.75598145 142.30166626]
[61.90789795 134.54902649]
[49.44628525 142.89816284]
[36.98467255 151.24731445]
[41.12677002 165.79716492]
[40.56796265 180.91479492]
[35.36299515 195.11914062]
[26.02179527 207.01861572]
[13.45952225 215.44740295]
[-1.09310234 219.57974243]
[-16.21036148 219.01080322]
[-30.41121674 213.79632568]
[-42.30441666 204.44715881]
[-50.72478485 191.87922668]
[-54.84738159 177.32383728]
[-54.26831436 162.20697021]
[-49.04431534 148.00961304]
[-39.68717957 136.12268066]
[-27.11362076 127.71073151]
[-12.55547142 123.59789276]
[2.56101084 124.18708801]
[16.75486755 129.42059326]
[28.63552666 138.78570557]
[41.09713745 130.43655396]
[53.55875015 122.08740997]
[48.57403183 100.11458588]
[53.46078110 78.11977386]
[67.28096008 60.32497406]
[87.38171387 50.14599228]
[109.90461731 49.53672791]
[114.90936279 35.39627075]
[119.91410828 21.25581551]
[119.83265686 12.06443882]
[125.16304779 6.88420534]
[130.44972229 -7.15328169]
[135.73640442 -21.19076920]
[124.70825195 -31.61457443]
[118.52779388 -45.42923737]
[118.10839081 -60.51690674]
[123.48284149 -74.57759094]
[133.80307007 -85.47978973]
[147.47380066 -91.58358002]
[162.39916992 -91.98726654]
[167.68583679 -106.02475739]
[165.30882263 -121.66638184]
[177.03530884 -130.85000610]
[182.32199097 -144.88748169]
[187.60865784 -158.92497253]
[192.89533997 -172.96246338]
[197.61614990 -187.20022583]
[201.76353455 -201.61546326]
[205.91090393 -216.03071594]
[192.17230225 -222.11053467]
[179.38955688 -230.00454712]
[167.80082703 -239.56565857]
[157.62197876 -250.61576843]
[149.04264832 -262.94900513]
[142.22268677 -276.33563232]
[137.28910828 -290.52624512]
[134.33384705 -305.25650024]
[133.41194153 -320.25195312]
[134.54057312 -335.23327637]
[137.69873047 -349.92135620]
[142.82756042 -364.04257202]
[149.83152771 -377.33386230]
[158.58013916 -389.54760742]
[168.91041565 -400.45626831]
[180.62992859 -409.85665894]
[193.52033997 -417.57357788]
[207.34149170 -423.46334839]
[221.83593750 -427.41619873]
[236.73362732 -429.35852051]
[251.75703430 -429.25408936]
[266.62628174 -427.10488892]
[281.06436157 -422.95092773]
[294.80233765 -416.86959839]
[307.58422852 -408.97421265]
[319.17190552 -399.41183472]
[329.34957886 -388.36062622]
[337.92755127 -376.02645874]
[344.74609375 -362.63909912]
[349.67813110 -348.44793701]
[352.63177490 -333.71737671]
[353.55206299 -318.72183228]
[352.42181396 -303.74063110]
[349.26205444 -289.05288696]
[344.13171387 -274.93222046]
[337.12631226 -261.64169312]
[328.37637329 -249.42889404]
[318.04489136 -238.52134705]
[306.32437134 -229.12225342]
[293.43313599 -221.40670776]
[279.61132812 -215.51843262]
[265.11648560 -211.56715393]
[250.21856689 -209.62646484]
[235.19517517 -209.73251343]
[220.32615662 -211.88333130]
[216.17877197 -197.46809387]
[212.03138733 -183.05284119]
[213.32119751 -180.50410461]
[213.65002441 -177.27708435]
[212.74905396 -173.74612427]
[210.49389648 -170.37763977]
[206.93283081 -167.67578125]
[201.64614868 -153.63829041]
[196.35946655 -139.60081482]
[191.07279968 -125.56332397]
[193.82794189 -110.92575836]
[181.72332764 -100.73807526]
[176.43664551 -86.70059204]
[187.38772583 -76.55154419]
[193.63575745 -62.94611740]
[194.20033264 -47.94458389]
[188.96432495 -33.83176041]
[178.69639587 -22.76905823]
[164.93841553 -16.46343994]
[149.77388000 -15.90409184]
[144.48721313 -1.86660504]
[139.20053101 12.17088223]
[134.05456543 26.26055908]
[129.04981995 40.40101624]
[124.04507446 54.54147339]
[131.76235962 59.55503464]
[138.46249390 65.86380768]
[143.93090820 73.26576996]
[147.99244690 81.52386475]
[150.51708984 90.37364960]
[151.42396545 99.53170776]
[150.68402100 108.70475769]
[148.32096863 117.59904480]
[144.41049194 125.92974854]
[139.07778931 133.43006897]
[132.49366760 139.85981750]
[124.86895752 145.01309204]
[116.44784546 148.72485352]
[107.50000000 150.87625122]
[107.50000000 165.87625122]
[107.50000000 180.87625122]
[107.50000000 195.87625122]
[107.50000000 210.87625122]
[107.50000000 225.87625122]
[107.50000000 240.87625122]
[107.50000000 255.87625122]
[107.50000000 270.87625122]
[107.50000000 285.87625122]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 156]
[2 155]
[3 154]
[4 153]
[5 152]
[6 151]
[7 150]
[8 149]
[9 148]
[10 147]
[13 36]
[14 35]
[15 34]
[41 133]
[42 132]
[43 131]
[45 130]
[46 129]
[47 128]
[54 121]
[55 120]
[57 118]
[58 117]
[59 116]
[60 115]
[61 110]
[62 109]
[63 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
