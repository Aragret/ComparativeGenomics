%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCGGGAAAAAAGGCGGGAGAAGCCCCGGCAGGUUUGAAGCUGCUUCUUCGAAUUUGCAAUUxxxxxxxxxxUCUUAUCCUACCAGGCUUCGGAAUAAUCUCCCAUAUUGUAACUUACUACUCCGGAAAAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[137.58137512 346.05038452]
[137.58137512 331.05038452]
[137.58137512 316.05038452]
[137.58137512 301.05038452]
[137.58137512 286.05038452]
[137.58137512 271.05038452]
[137.58137512 256.05038452]
[137.58137512 241.05039978]
[137.58137512 226.05039978]
[137.58137512 211.05039978]
[116.51910400 184.13743591]
[127.22966003 157.34461975]
[119.23974609 144.64968872]
[111.24983215 131.95475769]
[103.25991821 119.25982666]
[89.13510895 114.21106720]
[74.90833282 118.96488190]
[60.68155289 123.71869659]
[53.18730927 139.49125671]
[36.93450546 144.88851929]
[22.08986092 137.04669189]
[11.69913006 148.97746277]
[-2.88980055 145.97538757]
[-17.01460266 151.02415466]
[-31.13940620 156.07290649]
[-45.26420975 161.12165833]
[-51.79867172 175.51181030]
[-66.62376404 180.98832703]
[-80.94402313 174.30207825]
[-86.26348877 159.41992188]
[-79.42622375 145.17115784]
[-64.48864746 140.00932312]
[-50.31296539 146.99685669]
[-36.18816376 141.94810486]
[-22.06336021 136.89935303]
[-7.93855667 131.85058594]
[1.44187415 120.28094482]
[17.04110527 122.92188263]
[20.89001274 110.58564758]
[31.30902290 102.61579132]
[44.61230087 102.11502838]
[55.92773819 109.49192047]
[70.15451813 104.73810577]
[84.38129425 99.98429108]
[92.23872375 87.20693207]
[90.06188202 72.36573029]
[87.88504791 57.52452087]
[85.70821381 42.68331528]
[83.53137207 27.84210968]
[77.32596588 14.18586922]
[67.57831573 2.78484821]
[57.83066559 -8.61617279]
[47.73201370 -19.70748901]
[37.29220200 -30.47829628]
[26.85238838 -41.24910355]
[11.48695374 -48.41427994]
[14.11853409 -65.16274261]
[30.94095802 -67.27044678]
[37.62319946 -51.68891907]
[48.06301117 -40.91810989]
[58.50282288 -30.14730072]
[62.06763458 -29.74780655]
[65.60630798 -27.56161118]
[68.26259613 -23.62504578]
[69.23168182 -18.36382484]
[78.97933960 -6.96280384]
[88.72698975 4.43821716]
[86.41760254 -10.38294125]
[87.28699493 -25.35772514]
[91.29603577 -39.81205368]
[98.26425934 -53.09526825]
[107.87799072 -64.60943604]
[119.70448303 -73.83625793]
[133.21136475 -80.36038208]
[147.79063416 -83.88813782]
[162.78599548 -84.26071167]
[177.52247620 -81.46134949]
[191.33668518 -75.61605835]
[203.60679626 -66.98794556]
[213.78048706 -55.96542358]
[221.39978027 -43.04465485]
[226.12171936 -28.80725861]
[227.73370361 -13.89412785]
[226.16322327 1.02343094]
[221.48094177 15.27391148]
[213.89762878 28.21583748]
[203.75465393 39.26663208]
[191.50859070 47.92885208]
[177.71069336 53.81256866]
[162.98207092 56.65293121]
[147.98571777 56.32208633]
[133.39669800 52.83491898]
[119.87171936 46.34840775]
[108.01959229 37.15453720]
[98.37258148 25.66527367]
[100.54941559 40.50647736]
[102.72625732 55.34768295]
[104.90309143 70.18888855]
[107.07992554 85.03009796]
[110.95575714 83.59359741]
[115.36714935 83.02641296]
[129.38386536 77.68490601]
[139.30976868 64.63085175]
[155.54151917 66.96804810]
[161.38127136 82.29219055]
[150.82159424 94.83911133]
[134.72537231 91.70161438]
[120.70865631 97.04312897]
[115.95484161 111.26990509]
[123.94476318 123.96483612]
[131.93467712 136.65977478]
[139.92459106 149.35469055]
[148.82304382 146.58143616]
[158.73777771 147.03614807]
[168.46841431 151.06317139]
[176.71005249 158.55508423]
[182.22344971 168.92643738]
[184.00903320 181.15107727]
[197.66528320 187.35647583]
[211.32151794 193.56188965]
[226.02897644 187.77688599]
[240.48577881 194.16253662]
[246.11495972 208.93032837]
[239.57681274 223.31881714]
[224.75033569 228.79154968]
[210.43177795 222.10165405]
[205.11610413 207.21812439]
[191.45986938 201.01272583]
[177.80363464 194.80731201]
[171.49806213 198.86808777]
[180.50750732 210.86099243]
[189.51696777 222.85389709]
[198.52641296 234.84680176]
[208.19165039 246.31777954]
[201.90646362 259.93750000]
[186.90672302 260.02615356]
[180.46109009 246.48083496]
[173.26969910 233.31710815]
[166.07832336 220.15336609]
[158.88693237 206.98962402]
[152.58137512 211.05039978]
[152.58137512 226.05039978]
[152.58137512 241.05039978]
[152.58137512 256.05038452]
[152.58137512 271.05038452]
[152.58137512 286.05038452]
[152.58137512 301.05038452]
[152.58137512 316.05038452]
[152.58137512 331.05038452]
[152.58137512 346.05038452]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 112]
[13 111]
[14 110]
[15 109]
[16 44]
[17 43]
[18 42]
[21 38]
[23 36]
[24 35]
[25 34]
[26 33]
[45 99]
[46 98]
[47 97]
[48 96]
[49 95]
[50 67]
[51 66]
[52 65]
[53 61]
[54 60]
[55 59]
[101 108]
[102 107]
[118 129]
[119 128]
[120 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
