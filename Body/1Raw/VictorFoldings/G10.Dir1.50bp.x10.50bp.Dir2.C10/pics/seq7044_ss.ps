%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCCUAUCAAUAGGAGCUGUAUUUGCCAUCAUAGGAGGCUUCAUUCACUGAUUUCCCCUAUUxxxxxxxxxxCGUCCCUAACAAACUAGGAGGCGUCCUUGCCCUAUUACUAUCCAUCCUCAUCCUAGCAAUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[164.56536865 401.28750610]
[164.25738525 386.29067993]
[163.94940186 371.29382324]
[163.64143372 356.29699707]
[163.33345032 341.30017090]
[163.02548218 326.30331421]
[162.71749878 311.30648804]
[162.40951538 296.30966187]
[162.10154724 281.31280518]
[158.29368591 266.80419922]
[151.19728088 253.58900452]
[145.46440125 267.45025635]
[131.68315125 273.37283325]
[117.68118286 267.99279785]
[111.41150665 254.36595154]
[116.43525696 240.23222351]
[129.89898682 233.61949158]
[144.15597534 238.28424072]
[138.73735046 224.29716492]
[133.31872559 210.31007385]
[127.90010071 196.32299805]
[122.48147583 182.33590698]
[117.06285095 168.34883118]
[111.68069458 163.21612549]
[111.67980194 154.01852417]
[106.54949951 139.92314148]
[92.51651764 139.75865173]
[79.38402557 134.80998230]
[68.73227692 125.67259979]
[61.84298706 113.44601440]
[59.54515839 99.60146332]
[62.11529160 85.80486298]
[69.24411774 73.71637726]
[80.07382202 64.79061890]
[75.23400879 50.59286880]
[70.39418793 36.39511490]
[64.62869263 29.22888565]
[65.60401154 21.85589790]
[61.05672073 7.56176710]
[52.64331055 -4.85654736]
[41.05426407 -14.37988472]
[29.46521568 -23.90322304]
[17.87616730 -33.42655945]
[6.28711843 -42.94989777]
[-2.38733864 -46.00760651]
[-5.43948507 -52.78968430]
[-16.83055878 -62.54896164]
[-34.21352386 -60.86973953]
[-47.19758606 -72.03869629]
[-48.09873581 -88.80446625]
[-59.68778610 -98.32780457]
[-71.27683258 -107.85114288]
[-87.31939697 -107.72621918]
[-97.30709076 -120.28112030]
[-93.57820129 -135.88481140]
[-78.99321747 -142.56745911]
[-64.74049377 -135.20272827]
[-61.75349426 -119.44019318]
[-50.16444778 -109.91685486]
[-38.57539749 -100.39351654]
[-26.01633072 -103.43031311]
[-13.82656574 -98.58899689]
[-6.56033421 -87.43627930]
[-7.07128477 -73.94003296]
[4.31978941 -64.18076324]
[15.81045628 -54.53894424]
[27.39950371 -45.01560974]
[38.98855209 -35.49227142]
[50.57760239 -25.96893311]
[62.16664886 -16.44559479]
[57.28826523 -30.63014221]
[55.40736389 -45.51174927]
[56.60312653 -60.46401215]
[60.82521439 -74.85755157]
[67.89591217 -88.08650970]
[77.51758575 -99.59403992]
[89.28524780 -108.89576721]
[102.70356750 -115.60015106]
[117.20772552 -119.42499542]
[132.18721008 -120.20929718]
[147.01148987 -117.92004395]
[161.05657959 -112.65360260]
[173.73127747 -104.63163757]
[184.50209045 -94.19182587]
[192.91563416 -81.77360535]
[198.61776733 -67.89968109]
[201.36845398 -53.15404892]
[201.05194092 -38.15739059]
[197.68153381 -23.54094887]
[191.39909363 -9.91996956]
[182.46908569 2.13220358]
[171.26737976 12.10826588]
[158.26548767 19.58830070]
[144.01071167 24.25745201]
[129.10302734 25.91918373]
[114.16998291 24.50354958]
[99.84012604 20.07013893]
[86.71663666 12.80556393]
[75.35085297 3.01447701]
[79.89813995 17.30860710]
[84.59194183 31.55529976]
[89.43176270 45.75305176]
[94.27157593 59.95080566]
[110.02954865 60.80611038]
[124.26144409 67.62508392]
[134.80177307 79.37017059]
[140.04670715 94.25424957]
[139.19822693 110.01258850]
[132.38540649 124.24743652]
[120.64488983 134.79283142]
[125.77519226 148.88822937]
[131.04992676 162.93020630]
[136.46855164 176.91728210]
[141.88717651 190.90437317]
[147.30580139 204.89144897]
[152.72442627 218.87854004]
[158.14305115 232.86561584]
[164.41246033 246.49259949]
[171.50886536 259.70779419]
[172.23225403 244.72523499]
[176.59208679 230.37281799]
[184.32443237 217.51937866]
[194.96119690 206.94302368]
[207.85847473 199.28401184]
[222.23548889 195.00599670]
[237.22190857 194.36795044]
[251.91050720 197.40849304]
[265.41207886 203.94357300]
[276.90930176 213.57757568]
[285.70617676 225.72727966]
[291.27011108 239.65719604]
[293.26434326 254.52403259]
[291.56814575 269.42782593]
[286.28414917 283.46633911]
[277.73229980 295.78970337]
[266.43023682 305.65191650]
[253.06217957 312.45599365]
[238.43739319 315.78997803]
[223.44119263 315.45205688]
[208.98141479 311.46270752]
[195.93341064 304.06341553]
[185.08705139 293.70211792]
[177.09837341 281.00482178]
[177.40635681 296.00167847]
[177.71434021 310.99850464]
[178.02230835 325.99536133]
[178.33029175 340.99218750]
[178.63827515 355.98901367]
[178.94624329 370.98587036]
[179.25422668 385.98269653]
[179.56219482 400.97952271]
[182.14797974 420.18795776]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 151]
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 119]
[11 118]
[18 117]
[19 116]
[20 115]
[21 114]
[22 113]
[23 112]
[25 111]
[26 110]
[34 103]
[35 102]
[36 101]
[38 100]
[39 99]
[40 70]
[41 69]
[42 68]
[43 67]
[44 66]
[46 65]
[47 64]
[50 60]
[51 59]
[52 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
