%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUGCAUACACCACAUGAAACAUCCUAUCAUCUGUAGGCUCAUUCAUUUCUCUAACAGCAGUxxxxxxxxxxACCACAUUAACAACAUAAAACCCUCAUUCACACGAGAAAACACCCUCAUGUUCAUACACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[88.84685516 469.69812012]
[88.84685516 454.69812012]
[88.84685516 439.69812012]
[88.84685516 424.69812012]
[88.84685516 409.69812012]
[88.84685516 394.69812012]
[88.84685516 379.69812012]
[88.84685516 364.69812012]
[88.84685516 349.69812012]
[88.84685516 334.69812012]
[74.84683228 331.20144653]
[62.08834839 324.43963623]
[51.32069778 314.80468750]
[43.17751312 302.85742188]
[38.13943481 289.29495239]
[36.50578308 274.90994263]
[38.37675095 260.54434204]
[43.64728546 247.03996277]
[52.01296997 235.18937683]
[62.98760223 225.68917847]
[75.93146515 219.09919739]
[90.08858490 215.80938721]
[90.40064240 200.81263733]
[90.71269989 185.81588745]
[91.02475739 170.81913757]
[91.33680725 155.82237244]
[79.22610474 152.53221130]
[68.14064789 146.64944458]
[58.62754059 138.46438599]
[51.15628815 128.38098145]
[46.09561157 116.89691162]
[43.69527435 104.57892609]
[28.71555901 103.79907990]
[13.73584557 103.01924133]
[-1.24386919 102.23939514]
[-16.22358322 101.45954895]
[-29.05669975 111.08715057]
[-44.54835129 106.91722107]
[-50.81466675 92.14857483]
[-43.04866791 78.11045837]
[-27.20776367 75.57170105]
[-15.44373798 86.47983551]
[-0.46402407 87.25968170]
[14.51568985 88.03952026]
[29.49540520 88.81936646]
[44.47512054 89.59921265]
[47.48702621 79.17750549]
[52.43548584 69.52368164]
[59.13801575 60.99375534]
[67.34743500 53.90229034]
[76.76100922 48.51079559]
[87.03158569 45.01810455]
[97.78040314 43.55301285]
[108.61106873 44.16955948]
[119.12418365 46.84499741]
[126.03118896 33.52984238]
[132.93818665 20.21468735]
[139.84518433 6.89953089]
[146.75218201 -6.41562510]
[153.65917969 -19.73077965]
[141.20388794 -28.11907768]
[129.78599548 -37.87252045]
[119.55437469 -48.86394882]
[110.64239502 -60.95007324]
[103.16625214 -73.97332001]
[97.22340393 -87.76391602]
[92.89134216 -102.14205933]
[90.22653961 -116.92030334]
[89.26372528 -131.90599060]
[90.01546478 -146.90374756]
[92.47195435 -161.71804810]
[96.60116577 -176.15574646]
[102.34927368 -190.02864075]
[109.64132690 -203.15585327]
[118.38227081 -215.36624146]
[128.45814514 -226.50062561]
[139.73757935 -236.41384888]
[152.07354736 -244.97666931]
[165.30520630 -252.07743835]
[179.26005554 -257.62359619]
[193.75616455 -261.54284668]
[208.60455322 -263.78408813]
[223.61163330 -264.31808472]
[238.58177185 -263.13790894]
[253.31977844 -260.25891113]
[267.63354492 -255.71862793]
[281.33642578 -249.57627869]
[294.24981689 -241.91192627]
[306.20532227 -232.82548523]
[317.04711914 -222.43540955]
[326.63381958 -210.87718201]
[334.84048462 -198.30146790]
[341.56008911 -184.87222290]
[346.70504761 -170.76452637]
[350.20828247 -156.16229248]
[352.02410889 -141.25588989]
[352.12884521 -126.23967743]
[350.52117920 -111.30940247]
[347.22201538 -96.65971375]
[342.27441406 -82.48160553]
[335.74282837 -68.95991516]
[327.71243286 -56.27091980]
[318.28790283 -44.58005905]
[307.59213257 -34.03973770]
[295.76455688 -24.78737450]
[282.95938110 -16.94359016]
[269.34350586 -10.61064911]
[255.09449768 -5.87110996]
[240.39808655 -2.78676438]
[225.44587708 -1.39782250]
[210.43280029 -1.72239220]
[195.55459595 -3.75624204]
[181.00520325 -7.47285652]
[166.97433472 -12.82378197]
[160.06733704 0.49137366]
[153.16033936 13.80652905]
[146.25334167 27.12168503]
[139.34634399 40.43684006]
[132.43934631 53.75199509]
[146.18069458 67.46490479]
[154.46826172 85.02009583]
[156.32330322 104.34436035]
[151.52677917 123.15557098]
[140.64509583 139.23219299]
[124.96337891 150.67562866]
[106.33356476 156.13442993]
[106.02150726 171.13119507]
[105.70944977 186.12794495]
[105.39739227 201.12469482]
[105.08534241 216.12144470]
[120.10330963 220.42543030]
[133.49360657 228.45144653]
[144.35310364 239.65150452]
[151.95112610 253.26374817]
[155.77856445 268.36431885]
[155.58200073 283.93005371]
[151.38044739 298.90777588]
[143.46372986 312.28555298]
[132.37246704 323.16110229]
[118.86116028 330.80264282]
[103.84685516 334.69812012]
[103.84685516 349.69812012]
[103.84685516 364.69812012]
[103.84685516 379.69812012]
[103.84685516 394.69812012]
[103.84685516 409.69812012]
[103.84685516 424.69812012]
[103.84685516 439.69812012]
[103.84685516 454.69812012]
[103.84685516 469.69812012]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[22 130]
[23 129]
[24 128]
[25 127]
[26 126]
[32 46]
[33 45]
[34 44]
[35 43]
[36 42]
[55 119]
[56 118]
[57 117]
[58 116]
[59 115]
[60 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
