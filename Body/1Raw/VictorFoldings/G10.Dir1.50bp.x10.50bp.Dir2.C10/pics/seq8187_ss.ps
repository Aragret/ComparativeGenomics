%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAUCUGUUCGCUUCAUUCAUUGCCCCCACAAUCCUAGGCCUACCCGCCGCAGUACUGAUCAxxxxxxxxxxAAAAUAGCCCACUAAUCCAAACUCUAACACUAUGCUUAGGCGCUAUCACCACUCUGUUCGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[89.72853088 254.92016602]
[89.72853088 239.92016602]
[89.72853088 224.92016602]
[89.72853088 209.92016602]
[89.72853088 194.92016602]
[89.72853088 179.92016602]
[89.72853088 164.92016602]
[89.72853088 149.92016602]
[89.72853088 134.92016602]
[89.72853088 119.92016602]
[87.37387085 112.12216187]
[88.58055878 105.31136322]
[73.64453888 103.92733765]
[58.70853043 102.54331207]
[44.25331879 108.97428894]
[32.29424667 100.09567261]
[17.35823441 98.71164703]
[2.90302324 105.14261627]
[-9.05604839 96.26399994]
[-24.00548363 95.03338623]
[-38.96676254 93.95632172]
[-24.58398819 98.21493530]
[-14.50548553 109.32455444]
[-11.66356373 124.05287933]
[-16.88507462 138.11473083]
[-28.65083122 147.41886902]
[-43.53762436 149.25827026]
[-57.21418381 143.09777832]
[-65.70085907 130.73120117]
[-80.60530853 132.42160034]
[-95.50975037 134.11199951]
[-110.41419983 135.80239868]
[-120.06164551 148.32048035]
[-135.74554443 150.26744080]
[-148.16093445 140.48818970]
[-149.94197083 124.78457642]
[-140.03199768 112.47328186]
[-124.31043243 110.85836792]
[-112.10459900 120.89794922]
[-97.20014954 119.20755005]
[-82.29570007 117.51715088]
[-67.39125824 115.82675934]
[-65.63667297 108.53488159]
[-80.22035980 105.02547455]
[-76.71070862 90.44184113]
[-62.12750626 93.95113373]
[-60.37292099 86.65925598]
[-72.87695312 78.37377930]
[-85.38098907 70.08831024]
[-100.81783295 73.47645569]
[-114.08388519 64.88649750]
[-117.30863953 49.41470337]
[-108.57890320 36.24020767]
[-93.07387543 33.17921448]
[-79.99241638 42.04774857]
[-77.09552002 57.58427429]
[-64.59148407 65.86974335]
[-52.08744812 74.15522003]
[-37.88969421 78.99504089]
[-22.92841339 80.07210541]
[-15.98819637 77.39898682]
[-7.67202282 81.32798767]
[5.71486473 74.79801941]
[18.74225998 83.77563477]
[33.67827225 85.15966034]
[47.06515884 78.62968445]
[60.09255600 87.60729980]
[75.02856445 88.99132538]
[89.96458435 90.37535095]
[75.71164703 85.70053864]
[64.00819397 76.31814575]
[56.34505081 63.42333603]
[53.69836044 48.65867996]
[56.40527725 33.90494919]
[64.12097168 21.04151344]
[75.86260986 11.70695686]
[90.13450623 7.09034300]
[105.11865234 7.77974939]
[118.90633392 13.68735790]
[129.74122620 24.06063843]
[136.24316406 37.57821274]
[137.58390808 52.51817703]
[133.59265137 66.97742462]
[124.77783203 79.11410522]
[112.26448059 87.38126373]
[126.30645752 82.10652161]
[140.34843445 76.83178711]
[154.39041138 71.55704498]
[168.43238831 66.28230286]
[172.56823730 53.42522430]
[183.21070862 45.43029785]
[196.32116699 45.05009460]
[207.08419800 52.19919968]
[221.23150635 47.21387482]
[235.37882996 42.22855377]
[249.52613831 37.24323273]
[255.81738281 25.93731117]
[267.75128174 22.09625244]
[278.72897339 27.26852608]
[292.97564697 22.57472610]
[294.46331787 7.41864443]
[301.99252319 -5.81883287]
[314.25881958 -14.84423351]
[329.13699341 -18.09385300]
[344.04928589 -15.00467491]
[356.41210938 -6.11191750]
[364.08346558 7.04369497]
[365.73425293 22.18287277]
[361.07852173 36.68266296]
[350.92285156 48.03088760]
[337.02679443 54.26139832]
[321.79791260 54.29472351]
[307.87469482 48.12508774]
[297.66946411 36.82141876]
[283.42276001 41.51521683]
[272.49530029 55.21319962]
[254.51145935 51.39054871]
[240.36415100 56.37586975]
[226.21682739 61.36119461]
[212.06951904 66.34651184]
[205.48847961 81.79297638]
[189.46743774 87.84754944]
[173.70712280 80.32427979]
[159.66514587 85.59902191]
[145.62316895 90.87375641]
[131.58119202 96.14849854]
[117.53922272 101.42324066]
[132.39105225 103.52630615]
[146.70906067 99.05474091]
[161.66261292 100.23420715]
[175.10253906 106.89518738]
[185.09716797 118.08032990]
[190.21003723 132.18205261]
[189.70629883 147.17358398]
[183.65835571 160.90028381]
[172.93544006 171.38929749]
[159.07870483 177.13305664]
[144.07969666 177.30607605]
[130.09416199 171.88346863]
[119.13214111 161.64462280]
[112.76916504 148.06108093]
[111.91991425 133.08390808]
[104.72853088 119.92016602]
[104.72853088 134.92016602]
[104.72853088 149.92016602]
[104.72853088 164.92016602]
[104.72853088 179.92016602]
[104.72853088 194.92016602]
[104.72853088 209.92016602]
[104.72853088 224.92016602]
[104.72853088 239.92016602]
[104.72853088 254.92016602]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[12 69]
[13 68]
[14 67]
[16 65]
[17 64]
[19 62]
[20 60]
[21 59]
[29 42]
[30 41]
[31 40]
[32 39]
[47 58]
[48 57]
[49 56]
[85 127]
[86 126]
[87 125]
[88 124]
[89 123]
[93 120]
[94 119]
[95 118]
[96 117]
[99 115]
[100 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
