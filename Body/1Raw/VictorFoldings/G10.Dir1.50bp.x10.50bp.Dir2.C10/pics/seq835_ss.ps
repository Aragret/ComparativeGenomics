%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCACAGUUUAUGUAGCUUACCUCCUCAAAGCAAUACACUGAAAAUGUUUAGACGGGCUCAxxxxxxxxxxCUAAACCUCAACAGUUAAAUCAACAAAACUGCUCGCCAGAACACUACGAGCCACAGCUUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[73.64459991 264.77999878]
[73.64459991 249.78001404]
[73.64459991 234.78001404]
[73.64459991 219.78001404]
[73.64459991 204.78001404]
[73.64459991 189.78001404]
[73.64459991 174.78001404]
[73.64459991 159.78001404]
[73.64459991 144.78001404]
[73.64459991 129.78001404]
[72.31558990 115.56028748]
[76.62650299 104.19969940]
[84.45438385 97.54716492]
[93.18406677 96.35774231]
[85.45998383 83.49933624]
[77.73589325 70.64093781]
[70.01181030 57.78253555]
[62.28772736 44.92413330]
[54.56364059 32.06573105]
[47.41482925 26.27380943]
[46.81582642 18.85849953]
[39.36091614 5.84218931]
[31.90600395 -7.17411995]
[9.81136131 -9.11812592]
[-5.48730469 -24.75072289]
[-20.19526672 -21.80524063]
[-34.90322876 -18.85975838]
[-49.61119080 -15.91427517]
[-55.14510727 -1.51360583]
[-67.59962463 7.59070826]
[-83.00054932 8.49351311]
[-96.43350220 0.90672773]
[-103.61207581 -12.74873352]
[-102.24562073 -28.11546135]
[-92.77015686 -40.28998947]
[-78.20927429 -45.38747025]
[-63.20930099 -41.78131485]
[-52.55667114 -30.62223625]
[-37.84870911 -33.56771851]
[-23.14074898 -36.51320267]
[-8.43278694 -39.45868301]
[-5.95350361 -50.35859680]
[0.19628012 -59.69321060]
[9.23291111 -66.27304840]
[6.13458920 -80.94956970]
[1.27084422 -88.75955200]
[3.12782621 -95.96353149]
[0.33550179 -110.70133972]
[-2.45682263 -125.43914032]
[-5.24914694 -140.17694092]
[-19.93379402 -144.19223022]
[-31.37225533 -154.14454651]
[-37.33094025 -168.01950073]
[-36.67719650 -183.04393005]
[-29.59420013 -196.24017334]
[-17.53401756 -205.01612854]
[-20.32634163 -219.75393677]
[-23.11866570 -234.49174500]
[-25.91099167 -249.22955322]
[-28.70331573 -263.96734619]
[-31.49563980 -278.70516968]
[-46.51870346 -280.37817383]
[-60.38054276 -286.40649414]
[-71.84857178 -296.25411987]
[-79.90306091 -309.04541016]
[-83.82781219 -323.64294434]
[-83.27383423 -338.74871826]
[-78.29039001 -353.01953125]
[-69.32061005 -365.18649292]
[-57.16207123 -374.16763306]
[-42.89590454 -379.16442871]
[-27.79065323 -379.73254395]
[-13.18946171 -375.82147217]
[-0.39065793 -367.77896118]
[9.46769619 -356.32015991]
[15.50900173 -342.46395874]
[17.19607162 -327.44247437]
[14.37889194 -312.59136963]
[7.30796385 -299.23123169]
[-3.38796973 -288.55001831]
[-16.75783348 -281.49749756]
[-13.96550941 -266.75967407]
[-11.17318535 -252.02186584]
[-8.38086033 -237.28407288]
[-5.58853626 -222.54626465]
[-2.79621172 -207.80845642]
[11.63837624 -204.05236816]
[23.05768013 -194.36170959]
[29.16208458 -180.61772156]
[28.69186401 -165.52470398]
[21.68675041 -152.07794189]
[9.48865891 -142.96926880]
[12.28098297 -128.23146057]
[15.07330799 -113.49365997]
[17.86563301 -98.75585175]
[20.81111526 -84.04788971]
[23.90943718 -69.37136841]
[35.84934616 -66.72625732]
[45.91910553 -59.68582535]
[52.56472015 -49.28294373]
[54.74020767 -37.07334900]
[52.07201767 -24.90299988]
[44.92231369 -14.62903023]
[52.37722397 -1.61272097]
[59.83213425 11.40358829]
[67.42204285 24.34164429]
[75.14612579 37.20004654]
[82.87021637 50.05844879]
[90.59429932 62.91685104]
[98.31838226 75.77525330]
[106.04246521 88.63365936]
[117.74208832 98.02082062]
[131.96887207 102.77463531]
[146.19564819 107.52845001]
[160.42242432 112.28226471]
[172.33274841 107.22280121]
[184.11117554 111.52252197]
[189.59677124 122.34914398]
[203.72157288 127.39789581]
[219.74902344 123.92621613]
[230.56744385 136.25074768]
[225.04776001 151.69305420]
[208.86814880 154.36743164]
[198.67280579 141.52270508]
[184.54800415 136.47393799]
[167.51210022 140.57003784]
[155.66860962 126.50904083]
[141.44183350 121.75522614]
[127.21505737 117.00141144]
[112.98827362 112.24759674]
[106.90235901 116.63069916]
[117.10842896 127.62324524]
[127.31450653 138.61579895]
[139.61337280 147.20286560]
[139.72306824 162.20246887]
[127.55110931 170.96849060]
[113.35961914 166.11035156]
[109.11328888 151.72438049]
[101.92190552 138.56065369]
[94.73052216 125.39691162]
[88.64459991 129.78001404]
[88.64459991 144.78001404]
[88.64459991 159.78001404]
[88.64459991 174.78001404]
[88.64459991 189.78001404]
[88.64459991 204.78001404]
[88.64459991 219.78001404]
[88.64459991 234.78001404]
[88.64459991 249.78001404]
[88.64459991 264.77999878]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[14 111]
[15 110]
[16 109]
[17 108]
[18 107]
[19 106]
[21 105]
[22 104]
[23 103]
[25 41]
[26 40]
[27 39]
[28 38]
[44 97]
[45 96]
[47 95]
[48 94]
[49 93]
[50 92]
[56 86]
[57 85]
[58 84]
[59 83]
[60 82]
[61 81]
[112 130]
[113 129]
[114 128]
[115 127]
[118 125]
[119 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
