%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAACUUGACCGCUCUGAGCUAAACCUAGCCCCAAACCCACUCCACCUUACUACCAGACAAxxxxxxxxxxAUGCUAAGACUUCACCAGUCAAAGCGAACUACUAUACUCAAUUGAUCCAAUAACUUGACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[162.89117432 82.61467743]
[148.98861694 88.24663544]
[140.09759521 100.19647980]
[124.40200043 98.20673370]
[110.49944305 103.83869171]
[96.65622711 109.61495972]
[87.02991486 122.17062378]
[72.28213501 120.08439636]
[58.49975586 126.00435638]
[44.71737289 131.92431641]
[30.93499374 137.84428406]
[27.74072266 142.13569641]
[23.61829948 144.49324036]
[19.47779846 144.89065552]
[16.10339737 143.67373657]
[1.97859371 148.72248840]
[-12.14620972 153.77125549]
[-16.48871994 166.56187439]
[-27.26028824 174.38500977]
[-40.37692642 174.55261230]
[-51.02351379 167.22819519]
[-65.25028992 171.98200989]
[-79.47707367 176.73582458]
[-80.90081787 191.89804077]
[-88.37416840 205.16714478]
[-100.60231018 214.24417114]
[-115.46664429 217.55647278]
[-130.39184570 214.53019714]
[-142.79202271 205.68962097]
[-150.51876831 192.56646729]
[-152.23338318 177.43438721]
[-147.63879395 162.91510010]
[-137.53105164 151.52416992]
[-123.66136932 145.23512268]
[-108.43276978 145.13760376]
[-94.48368835 151.24850464]
[-84.23088837 162.50904846]
[-70.00410461 157.75523376]
[-55.77732849 153.00141907]
[-48.94648361 137.66526794]
[-32.83089066 131.87115479]
[-17.19496536 139.64643860]
[-3.07016253 134.59768677]
[11.05464077 129.54893494]
[25.01502991 124.06190491]
[38.79741287 118.14193726]
[52.57979202 112.22197723]
[66.36217499 106.30200958]
[75.00267792 94.16978455]
[90.73626709 95.83258057]
[96.35397339 89.97379303]
[104.86748505 89.93613434]
[118.77004242 84.30417633]
[128.65548706 71.95149231]
[143.35665894 74.34407806]
[157.25921631 68.71212769]
[152.21925354 52.03828430]
[148.83198547 34.95248032]
[147.12968445 17.61810684]
[147.12852478 0.20091869]
[148.82839966 -17.13254356]
[152.21295166 -34.21655273]
[157.24969482 -50.88778305]
[163.89036560 -66.98685455]
[172.07136536 -82.35987854]
[181.71438599 -96.85991669]
[192.72712708 -110.34838104]
[205.00418091 -122.69637299]
[218.42808533 -133.78590393]
[232.87043762 -143.51101685]
[248.19305420 -151.77883911]
[264.24938965 -158.51037598]
[280.88583374 -163.64140320]
[297.94335938 -167.12294006]
[315.25875854 -168.92181396]
[332.66650391 -169.02095032]
[350.00015259 -167.41949463]
[367.09396362 -164.13287354]
[383.78448486 -159.19262695]
[399.91220093 -152.64610291]
[415.32290649 -144.55598450]
[429.86932373 -134.99975586]
[443.41244507 -124.06885529]
[453.85226440 -134.83966064]
[464.29208374 -145.61047363]
[464.21771240 -161.18713379]
[474.95858765 -171.96154785]
[489.80902100 -171.93644714]
[500.24884033 -182.70724487]
[510.68862915 -193.47805786]
[521.12847900 -204.24887085]
[522.31683350 -220.24784851]
[535.64697266 -229.17457581]
[550.89318848 -224.18122864]
[556.35980225 -209.09826660]
[547.85339355 -195.49606323]
[531.89929199 -193.80905151]
[521.45947266 -183.03823853]
[511.01965332 -172.26744080]
[500.57983398 -161.49662781]
[501.06829834 -146.65422058]
[490.63427734 -135.58236694]
[475.06286621 -135.17065430]
[464.62307739 -124.39984894]
[454.18325806 -113.62904358]
[462.87573242 -103.76115417]
[470.81607056 -93.27819061]
[477.96081543 -82.23735809]
[484.27099609 -70.69889832]
[489.71209717 -58.72579956]
[494.25439453 -46.38339996]
[497.87304688 -33.73907089]
[500.54824829 -20.86182404]
[502.26541138 -7.82195330]
[503.01510620 5.30935860]
[502.79318237 18.46042824]
[501.60079956 31.55946350]
[499.44448853 44.53495026]
[496.33593750 57.31604767]
[492.29211426 69.83296967]
[487.33502197 82.01737976]
[481.49169922 93.80274963]
[474.79403687 105.12471008]
[467.27856445 115.92145538]
[458.98623657 126.13400269]
[449.96234131 135.70658875]
[440.25610352 144.58692932]
[429.92047119 152.72653198]
[419.01184082 160.08090210]
[407.58975220 166.60987854]
[395.71658325 172.27778625]
[383.45706177 177.05366516]
[370.87814331 180.91137695]
[358.04849243 183.82983398]
[345.03811646 185.79309082]
[331.91806030 186.79039001]
[318.75994873 186.81622314]
[305.63555908 185.87043762]
[292.61660767 183.95814514]
[279.77413940 181.08976746]
[267.17825317 177.28091431]
[254.89778137 172.55233765]
[242.99972534 166.92982483]
[231.54907227 160.44404602]
[220.60835266 153.13035583]
[210.23730469 145.02867126]
[200.49256897 136.18318176]
[191.42738342 126.64215088]
[183.09124756 116.45763397]
[175.52970886 105.68521118]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 56]
[2 55]
[4 53]
[5 52]
[6 50]
[8 48]
[9 47]
[10 46]
[11 45]
[15 44]
[16 43]
[17 42]
[21 39]
[22 38]
[23 37]
[83 105]
[84 104]
[85 103]
[88 100]
[89 99]
[90 98]
[91 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
