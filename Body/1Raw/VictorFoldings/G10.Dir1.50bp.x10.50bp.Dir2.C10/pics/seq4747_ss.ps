%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAGAAAUAAACAUGCUAGCUUUUAUUCCAGUUCUAACCAAAAAAAUAAACCCUCGUUCCAxxxxxxxxxxCAUAACCAAUACUACCAAUCAAUACUCAUCAUUAAUAAUCAUAAUAGCUAUAGCAAUAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 302.33282471]
[92.50000000 287.33282471]
[92.50000000 272.33282471]
[92.50000000 257.33282471]
[92.50000000 242.33280945]
[92.50000000 227.33280945]
[92.50000000 212.33280945]
[92.50000000 197.33280945]
[92.50000000 182.33280945]
[92.50000000 167.33280945]
[79.98425293 164.72502136]
[68.18125153 159.81240845]
[57.51129150 152.76994324]
[48.35431671 143.84838867]
[41.03639984 133.36541748]
[35.81812668 121.69434357]
[32.88531494 109.25074768]
[32.34239578 96.47773743]
[34.20870972 83.83015442]
[38.41779709 71.75836945]
[44.81977081 60.69224167]
[53.18666458 51.02582932]
[63.22054291 43.10334778]
[74.56410980 37.20690536]
[86.81342316 33.54647064]
[99.53229523 32.25238800]
[101.08988190 17.33347702]
[102.64746094 2.41456509]
[104.20503998 -12.50434685]
[105.76261902 -27.42325974]
[99.50013733 -41.95226288]
[108.51719666 -53.80730057]
[110.07477570 -68.72621155]
[111.63236237 -83.64512634]
[113.18994141 -98.56403351]
[98.41577911 -101.19499969]
[83.86997986 -104.88517761]
[69.62837219 -109.61533356]
[55.76520920 -115.36080933]
[42.35276794 -122.09165192]
[29.46097565 -129.77275085]
[17.15704155 -138.36408997]
[5.50511742 -147.82084656]
[-5.43405056 -158.09375000]
[-15.60342979 -169.12921143]
[-24.95000076 -180.86972046]
[-33.42503357 -193.25404358]
[-40.98434830 -206.21762085]
[-47.58852386 -219.69288635]
[-53.20314026 -233.60955811]
[-57.79891586 -247.89509583]
[-61.35189438 -262.47500610]
[-63.84354782 -277.27331543]
[-65.26089478 -292.21282959]
[-65.59653473 -307.21566772]
[-64.84872437 -322.20361328]
[-63.02136612 -337.09851074]
[-60.12398148 -351.82275391]
[-56.17167282 -366.29953003]
[-51.18505478 -380.45336914]
[-45.19011688 -394.21047974]
[-38.21812057 -407.49917603]
[-30.30541229 -420.25012207]
[-21.49324417 -432.39688110]
[-11.82756329 -443.87609863]
[-1.35875988 -454.62792969]
[9.85858536 -464.59631348]
[21.76599121 -473.72930908]
[34.30137634 -481.97927856]
[47.39938354 -489.30319214]
[60.99172974 -495.66290283]
[75.00754547 -501.02523804]
[89.37376404 -505.36224365]
[104.01548004 -508.65127563]
[118.85636139 -510.87524414]
[133.81903076 -512.02252197]
[148.82548523 -512.08709717]
[163.79748535 -511.06872559]
[178.65695190 -508.97262573]
[193.32644653 -505.80975342]
[207.72947693 -501.59661865]
[221.79095459 -496.35516357]
[235.43754578 -490.11273193]
[248.59812927 -482.90182495]
[261.20407104 -474.76010132]
[273.18966675 -465.72998047]
[284.49243164 -455.85855103]
[295.05343628 -445.19723511]
[304.81759644 -433.80166626]
[313.73400879 -421.73126221]
[321.75622559 -409.04888916]
[328.84237671 -395.82073975]
[334.95553589 -382.11575317]
[340.06384277 -368.00537109]
[344.14062500 -353.56314087]
[347.16470337 -338.86441040]
[349.12023926 -323.98577881]
[349.99707031 -309.00482178]
[349.79061890 -293.99966431]
[348.50195312 -279.04849243]
[346.13778687 -264.22930908]
[342.71047974 -249.61933899]
[338.23788452 -235.29475403]
[332.74328613 -221.33026123]
[326.25537109 -207.79862976]
[318.80798340 -194.77044678]
[310.43988037 -182.31359863]
[301.19473267 -170.49305725]
[291.12075806 -159.37045288]
[280.27044678 -149.00375366]
[268.70037842 -139.44700623]
[256.47085571 -130.75006104]
[243.64569092 -122.95823669]
[230.29170227 -116.11216736]
[216.47851562 -110.24754333]
[202.27816772 -105.39493561]
[187.76467896 -101.57965851]
[173.01371765 -98.82158661]
[158.10218811 -97.13510132]
[143.10784912 -96.52900696]
[128.10885620 -97.00645447]
[126.55126953 -82.08754730]
[124.99369049 -67.16863251]
[123.43611145 -52.24971771]
[129.80999756 -38.78781891]
[120.68153381 -25.86567879]
[119.12395477 -10.94676590]
[117.56636810 3.97214603]
[116.00878906 18.89105797]
[114.45121002 33.80997086]
[130.73881531 39.62548065]
[145.02331543 49.37532043]
[156.37385559 62.42413330]
[164.05076599 77.92159271]
[167.55380249 94.85780334]
[166.65464783 112.12910461]
[161.41192627 128.61000061]
[152.16728210 143.22653198]
[139.52313232 155.02616882]
[124.30343628 163.24002075]
[107.50000000 167.33280945]
[107.50000000 182.33280945]
[107.50000000 197.33280945]
[107.50000000 212.33280945]
[107.50000000 227.33280945]
[107.50000000 242.33280945]
[107.50000000 257.33282471]
[107.50000000 272.33282471]
[107.50000000 287.33282471]
[107.50000000 302.33282471]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[26 130]
[27 129]
[28 128]
[29 127]
[30 126]
[32 124]
[33 123]
[34 122]
[35 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
