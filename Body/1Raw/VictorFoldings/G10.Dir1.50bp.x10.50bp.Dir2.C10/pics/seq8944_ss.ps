%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAACACGAGAAAGCACAUACCAAGGCCACCACACACCACCUGUCCAAAAAGGCCUUCGAUACGGGAxxxxxxxxxxAACACAAUGGGGCUCACUCACCCACCACAUUAACAACAUAAAACCCUCAUUCACACGAGAAAACACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 248.68667603]
[92.50000000 233.68667603]
[92.50000000 218.68667603]
[92.50000000 203.68667603]
[92.50000000 188.68667603]
[92.50000000 173.68667603]
[92.50000000 158.68667603]
[92.50000000 143.68667603]
[92.50000000 128.68667603]
[92.50000000 113.68666840]
[88.01086426 127.99917603]
[74.41615295 134.33824158]
[60.56676102 128.57679749]
[55.47939682 114.46584320]
[62.46621704 101.19239807]
[76.97798157 97.39812469]
[61.99538803 96.67564392]
[47.01279831 95.95316315]
[59.20288849 104.69396210]
[67.20415497 117.38174438]
[69.83861542 132.14859009]
[66.71843719 146.82048035]
[58.30297470 159.23741150]
[45.83116531 167.57130432]
[31.13913536 170.59526062]
[16.38987923 167.86407471]
[3.75480914 159.77981567]
[-4.90591145 147.53269958]
[-8.31723499 132.92575073]
[-5.97693777 118.10945129]
[1.77043569 105.26506805]
[13.78430080 96.28358459]
[28.29580307 92.48728180]
[14.04792881 87.79707336]
[-0.19994575 83.10685730]
[-14.44781971 78.41664886]
[-28.69569397 73.72644043]
[-40.33790588 86.29330444]
[-56.24195480 92.50955963]
[-73.21029663 91.17704010]
[-87.85383606 82.61009979]
[-97.26885223 68.56320953]
[-99.61271667 51.87184525]
[-114.03075409 47.73419952]
[-128.44879150 43.59654999]
[-143.12237549 50.08234406]
[-157.27471924 42.52648544]
[-160.04934692 26.72518921]
[-149.31779480 14.79985332]
[-133.31242371 15.89857483]
[-124.31114197 29.17851067]
[-109.89310455 33.31615829]
[-95.47506714 37.45380783]
[-87.61357880 27.04876518]
[-76.64913177 19.92944145]
[-63.88332367 16.96700287]
[-50.84049225 18.53759384]
[-39.08572006 24.47473717]
[-30.03700066 34.08667755]
[-24.79422379 46.23691559]
[-24.00548363 59.47856522]
[-9.75760841 64.16877747]
[4.49026537 68.85898590]
[18.73814011 73.54919434]
[32.98601532 78.23941040]
[47.73527527 80.97057343]
[62.71786880 81.69305420]
[77.70045471 82.41553497]
[106.01213837 82.14557648]
[116.87117004 71.79756165]
[117.41503143 56.23022461]
[128.57504272 45.89055634]
[143.41276550 46.50498581]
[154.27180481 36.15697098]
[165.13084412 25.80895615]
[157.84042358 14.48271561]
[152.66796875 2.04988408]
[149.77505493 -11.09759712]
[149.25141907 -24.54552269]
[151.11219788 -37.87046432]
[155.29740906 -50.65311813]
[161.67404175 -62.49147415]
[170.04010010 -73.01349640]
[180.13114929 -81.88876343]
[191.62858582 -88.83890533]
[204.16973877 -93.64627838]
[217.35928345 -96.16082001]
[230.78175354 -96.30471039]
[244.01454163 -94.07479095]
[256.64126587 -89.54261780]
[268.26492310 -82.85215759]
[278.52020264 -74.21522522]
[290.14395142 -83.69616699]
[301.76770020 -93.17710114]
[313.39147949 -102.65804291]
[319.19500732 -117.37638092]
[333.94805908 -119.42504120]
[345.57180786 -128.90597534]
[341.96170044 -143.73600769]
[345.15200806 -158.66198730]
[354.50927734 -170.72033691]
[368.17565918 -177.51687622]
[383.43765259 -177.70214844]
[397.26498413 -171.23936462]
[406.91223145 -159.41171265]
[410.46392822 -144.56756592]
[407.21487427 -129.65428162]
[397.81015015 -117.63286591]
[384.11712646 -110.89019012]
[368.85452271 -110.76502991]
[355.05276489 -117.28221893]
[343.42898560 -107.80128479]
[338.45687866 -93.76107788]
[322.87240601 -91.03427887]
[311.24865723 -81.55334473]
[299.62487793 -72.07240295]
[288.00112915 -62.59146500]
[295.62384033 -47.81471252]
[299.83209229 -31.72254944]
[300.41952515 -15.09331989]
[297.35491943 1.26803029]
[290.78396606 16.56892014]
[281.02221680 30.06752777]
[268.54003906 41.10876083]
[253.93988037 49.15603638]
[237.92724609 53.81737137]
[221.27653503 54.86446381]
[204.79367065 52.24387741]
[189.27705383 46.07976913]
[175.47885132 36.66798782]
[164.61982727 47.01600266]
[153.76078796 57.36401749]
[153.65983582 72.21411896]
[142.79464722 82.86316681]
[127.21918488 82.65659332]
[116.36015320 93.00460815]
[127.43560028 82.88855743]
[141.24743652 77.03765106]
[156.21931458 76.11964417]
[170.64250183 80.23930359]
[182.87088013 88.92646790]
[191.50883484 101.18965912]
[195.57049561 115.62928772]
[194.59231567 130.59736633]
[188.68594360 144.38557434]
[178.52546692 155.42027283]
[165.27049255 162.44207764]
[150.43382263 164.64958191]
[135.70875549 161.79086304]
[122.77585602 154.19216919]
[113.11116028 142.72073364]
[107.81770325 128.68579102]
[107.50000000 113.68666840]
[107.50000000 128.68667603]
[107.50000000 143.68667603]
[107.50000000 158.68667603]
[107.50000000 173.68667603]
[107.50000000 188.68667603]
[107.50000000 203.68667603]
[107.50000000 218.68667603]
[107.50000000 233.68667603]
[107.50000000 248.68667603]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 162]
[2 161]
[3 160]
[4 159]
[5 158]
[6 157]
[7 156]
[8 155]
[9 154]
[10 153]
[16 68]
[17 67]
[18 66]
[33 65]
[34 64]
[35 63]
[36 62]
[37 61]
[43 53]
[44 52]
[45 51]
[69 136]
[70 135]
[73 132]
[74 131]
[75 130]
[92 117]
[93 116]
[94 115]
[95 114]
[97 112]
[98 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
