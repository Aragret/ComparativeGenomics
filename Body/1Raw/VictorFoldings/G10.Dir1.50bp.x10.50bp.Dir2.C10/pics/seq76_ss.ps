%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCCUAUGUCGCAGUAUCUGUCUUUGAUUCCUGCCUCAUCCUAUUAUUUAUCGCACCUACxxxxxxxxxxACAACUCAACGGCUACAUAGAAAAAUCCACCCCUUACGAGUGCGGCUUCGACCCUAUAUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 325.14651489]
[92.50000000 310.14651489]
[92.50000000 295.14651489]
[92.50000000 280.14651489]
[92.50000000 265.14651489]
[92.50000000 250.14653015]
[92.50000000 235.14653015]
[92.50000000 220.14653015]
[92.50000000 205.14653015]
[92.50000000 190.14653015]
[74.93814087 186.91690063]
[58.35285950 180.30044556]
[43.39042282 170.55494690]
[30.63386154 158.06018066]
[20.58025742 143.30300903]
[13.62136459 126.85845947]
[-1.02213693 130.10928345]
[-15.66563797 133.36010742]
[-24.17308044 146.40852356]
[-39.06998444 149.49671936]
[-51.45722580 141.30577087]
[-66.10072327 144.55659485]
[-80.74422455 147.80741882]
[-95.38772583 151.05824280]
[-108.62727356 163.81341553]
[-125.14575195 157.97047424]
[-139.71846008 161.52523804]
[-154.29115295 165.08000183]
[-161.05493164 179.17912292]
[-175.32028198 185.58488464]
[-190.35154724 181.27267456]
[-199.05142212 168.27859497]
[-197.31208801 152.73803711]
[-185.95480347 141.98880005]
[-170.34214783 141.10632324]
[-157.84591675 150.50729370]
[-143.27320862 146.95252991]
[-128.70051575 143.39778137]
[-122.12035370 133.19931030]
[-109.95912170 130.14587402]
[-98.63855743 136.41474915]
[-83.99505615 133.16390991]
[-69.35155487 129.91308594]
[-54.70804977 126.66226196]
[-46.95036316 113.99917603]
[-32.14608002 110.49377441]
[-18.91646385 118.71661377]
[-4.27296257 115.46578217]
[10.37053871 112.21495819]
[9.63535500 95.89189148]
[11.84858608 79.70285797]
[16.93801880 64.17608643]
[24.73759460 49.81817245]
[34.99282837 37.09759140]
[47.36911392 26.42938423]
[61.46263885 18.16163826]
[76.81356049 12.56411171]
[92.92100525 9.81943989]
[109.25942230 10.01717567]
[125.29573059 13.15086842]
[140.50668335 19.11827087]
[154.39599609 27.72467995]
[164.37870789 16.52891350]
[174.36143494 5.33314800]
[184.34416199 -5.86261797]
[194.32688904 -17.05838394]
[184.33033752 -28.26402855]
[175.67630005 -40.53617477]
[168.47763062 -53.71482849]
[162.82817078 -67.62818146]
[158.80157471 -82.09484100]
[156.45031738 -96.92620087]
[155.80508423 -111.92891693]
[156.87426758 -126.90738678]
[159.64393616 -141.66635132]
[164.07797241 -156.01336670]
[170.11857605 -169.76141357]
[177.68699646 -182.73126221]
[186.68457031 -194.75379944]
[196.99397278 -205.67231750]
[208.48081970 -215.34443665]
[220.99536133 -223.64408875]
[234.37442017 -230.46307373]
[248.44358826 -235.71246338]
[263.01943970 -239.32383728]
[277.91198730 -241.25012207]
[292.92700195 -241.46620178]
[307.86877441 -239.96923828]
[322.54251099 -236.77877808]
[336.75692749 -231.93640137]
[350.32666016 -225.50523376]
[363.07482910 -217.56912231]
[374.83523560 -208.23152161]
[385.45455933 -197.61419678]
[394.79434204 -185.85552979]
[402.73284912 -173.10884094]
[409.16653442 -159.54029846]
[414.01159668 -145.32681274]
[417.20480347 -130.65367126]
[418.70452881 -115.71215820]
[418.49127197 -100.69709015]
[416.56777954 -85.80421448]
[412.95910645 -71.22767639]
[407.71234131 -57.15752411]
[400.89587402 -43.77718735]
[392.59857178 -31.26110268]
[382.92858887 -19.77244759]
[372.01199341 -9.46099949]
[359.99111938 -0.46118721]
[347.02270508 7.10965633]
[333.27578735 13.15283108]
[318.92959595 17.58955002]
[304.17114258 20.36197281]
[289.19287109 21.43395424]
[274.19003296 20.79152107]
[259.35824585 18.44304657]
[244.89082336 14.41914749]
[230.97642517 8.77228546]
[217.79641724 1.57607818]
[205.52265930 -7.07565737]
[195.53993225 4.12010860]
[185.55720520 15.31587410]
[175.57447815 26.51164055]
[165.59175110 37.70740509]
[173.23051453 46.89692688]
[179.59132385 57.01316833]
[184.56314087 67.87958527]
[188.05921936 79.30654907]
[190.01855469 91.09464264]
[190.40693665 103.03813934]
[189.21760559 114.92861938]
[186.47131348 126.55857849]
[182.21597290 137.72505188]
[176.52584839 148.23316956]
[169.50025940 157.89956665]
[161.26179504 166.55552673]
[151.95422363 174.05000305]
[141.73999023 180.25222778]
[130.79733276 185.05392456]
[119.31722260 188.37132263]
[107.50000000 190.14653015]
[107.50000000 205.14653015]
[107.50000000 220.14653015]
[107.50000000 235.14653015]
[107.50000000 250.14653015]
[107.50000000 265.14651489]
[107.50000000 280.14651489]
[107.50000000 295.14651489]
[107.50000000 310.14651489]
[107.50000000 325.14651489]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[16 49]
[17 48]
[18 47]
[21 44]
[22 43]
[23 42]
[24 41]
[26 38]
[27 37]
[28 36]
[62 124]
[63 123]
[64 122]
[65 121]
[66 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
