%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAGGCACACUCAUCACAGCGCUAAGCUCGCACUGAUUUUUUACCUGAGUAGGCCUAGAAAxxxxxxxxxxUGGUCUUAGGCCCCAAAAAUUUUGGUGCAACUCCAAAUAAAAGUAAUAACCAUGCACACUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[164.49264526 323.56951904]
[164.49264526 308.56951904]
[164.49264526 293.56951904]
[164.49264526 278.56951904]
[164.49264526 263.56951904]
[164.49264526 248.56951904]
[164.49264526 233.56951904]
[164.49264526 218.56951904]
[164.49264526 203.56951904]
[164.49264526 188.56951904]
[148.30210876 179.48254395]
[139.81697083 164.49963379]
[140.30230713 148.63356018]
[148.25038147 136.46879578]
[139.73928833 124.11721802]
[131.22821045 111.76564789]
[99.18781281 128.12031555]
[78.14696503 106.82144165]
[63.15426636 106.35340118]
[48.16157150 105.88536072]
[33.16887283 105.41732025]
[18.17617798 104.94927979]
[3.20538592 105.88490295]
[-11.61237240 108.21601105]
[-26.43013000 110.54711151]
[-35.73490524 123.03946686]
[-50.79542542 125.19245148]
[-62.64763641 116.24478912]
[-77.46539307 118.57588959]
[-92.28314972 120.90699768]
[-100.19551086 134.39508057]
[-114.94396973 139.59286499]
[-129.56475830 134.04611206]
[-137.15438843 120.37381744]
[-134.12927246 105.03163147]
[-121.91776276 95.26366425]
[-106.28577423 95.68204498]
[-94.61425781 106.08924103]
[-79.79649353 103.75813293]
[-64.97873688 101.42703247]
[-56.44629288 89.27248383]
[-41.45218658 86.69732666]
[-28.76123428 95.72935486]
[-13.94347572 93.39825439]
[0.87428212 91.06714630]
[-11.88804626 83.18533325]
[-18.49659538 69.71955872]
[-16.92328453 54.80229950]
[-7.65094328 43.01146698]
[6.47486448 37.96552277]
[21.11910820 41.21299744]
[31.78765678 51.75728989]
[35.20647049 66.36248779]
[30.32635498 80.54643250]
[18.64422035 89.95658112]
[33.63691711 90.42462158]
[48.62961197 90.89266205]
[63.62230682 91.36071014]
[78.61500549 91.82875061]
[87.70898438 74.69501495]
[109.90979004 68.13423157]
[110.53376770 53.14721298]
[111.15774536 38.16019821]
[111.78172302 23.17317963]
[112.40570068 8.18616390]
[113.02967834 -6.80085182]
[113.49771881 -21.79354858]
[113.80977631 -36.79030228]
[99.76292419 -42.53924942]
[88.74407196 -52.97713089]
[82.24343109 -66.69230652]
[81.14015961 -81.82991791]
[85.58346558 -96.34272003]
[94.97242737 -108.26798248]
[108.03726196 -115.99290466]
[123.01107025 -118.47276306]
[137.86874390 -115.37216187]
[150.60093689 -107.11045074]
[159.48570251 -94.80494690]
[163.32144165 -80.11986542]
[161.58943176 -65.04125977]
[154.52388000 -51.60836792]
[143.08036804 -41.63788986]
[128.80653381 -36.47824478]
[128.49447632 -21.48149109]
[131.51930237 -14.68472672]
[128.01669312 -6.17687464]
[127.39271545 8.81014156]
[126.76873779 23.79715729]
[126.14476013 38.78417206]
[125.52078247 53.77119064]
[124.89680481 68.75820923]
[137.98995972 76.07730865]
[150.42939758 67.69516754]
[162.86883545 59.31302643]
[175.30827332 50.93088150]
[187.74772644 42.54874039]
[197.50430298 28.68347549]
[213.52859497 34.22047424]
[212.64395142 51.15132523]
[196.12986755 54.98817825]
[183.69042969 63.37032318]
[171.25097656 71.75246429]
[158.81153870 80.13460541]
[146.37210083 88.51675415]
[143.57977295 103.25455475]
[152.09086609 115.60613251]
[160.60195923 127.95770264]
[187.34278870 127.96628571]
[204.62579346 154.25645447]
[219.44354248 156.58757019]
[234.26130676 158.91867065]
[244.44052124 147.32611084]
[259.27749634 143.09910583]
[274.03781128 147.58645630]
[284.01153564 159.35629272]
[286.01602173 174.65287781]
[279.41171265 188.59512329]
[266.30599976 196.73414612]
[250.88084412 196.47277832]
[238.05838013 187.89442444]
[231.93020630 173.73641968]
[217.11244202 171.40531921]
[202.29469299 169.07421875]
[196.59417725 173.94804382]
[208.48039246 183.09779358]
[220.36660767 192.24754333]
[232.25282288 201.39729309]
[246.87655640 204.73590088]
[257.57290649 215.25199890]
[261.15948486 229.81689453]
[256.56930542 244.09730530]
[245.16795349 253.84458923]
[230.34754944 256.15875244]
[216.51736450 250.35134888]
[207.79211426 238.15011597]
[206.76730347 223.18690491]
[199.57592773 210.02317810]
[192.38453674 196.85943604]
[185.19316101 183.69569397]
[179.49264526 188.56951904]
[179.49264526 203.56951904]
[179.49264526 218.56951904]
[179.49264526 233.56951904]
[179.49264526 248.56951904]
[179.49264526 263.56951904]
[179.49264526 278.56951904]
[179.49264526 293.56951904]
[179.49264526 308.56951904]
[179.49264526 323.56951904]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[14 108]
[15 107]
[16 106]
[18 59]
[19 58]
[20 57]
[21 56]
[22 55]
[23 45]
[24 44]
[25 43]
[28 40]
[29 39]
[30 38]
[61 92]
[62 91]
[63 90]
[64 89]
[65 88]
[66 87]
[67 85]
[68 84]
[93 105]
[94 104]
[95 103]
[96 102]
[97 101]
[110 124]
[111 123]
[112 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
