%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCCGCUACCAUAAUCAUCGCUAUCCCCACCGGCGUCAAAGUAUUUAGCUGACUCGCCACAxxxxxxxxxxAGCCCUACUCCACUCAAGCACUAUAGUUGUAGCAGGAAUCUUCUUACUCAUCCGCUUCCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[160.20846558 361.33920288]
[160.20846558 346.33920288]
[160.20846558 331.33920288]
[160.20846558 316.33920288]
[160.20846558 301.33920288]
[160.20846558 286.33920288]
[160.20846558 271.33920288]
[160.20846558 256.33920288]
[160.20846558 241.33920288]
[160.20846558 226.33920288]
[156.65370178 211.76649475]
[149.74670410 198.45133972]
[142.83970642 185.13618469]
[135.79457092 171.89360046]
[128.61206055 158.72502136]
[121.42955780 145.55644226]
[114.24704742 132.38784790]
[107.06453705 119.21926880]
[112.67239380 133.13156128]
[110.25270844 147.93511963]
[100.50703430 159.33782959]
[86.26100159 164.03364563]
[71.64506531 160.66105652]
[60.89691162 150.19792175]
[57.13283539 135.67787170]
[61.44417191 121.31081390]
[72.58091736 111.26228333]
[87.31166840 108.44551086]
[72.35141754 109.53681946]
[57.39117050 110.62812805]
[51.34171677 124.68738556]
[39.44423294 134.31591797]
[24.43267059 137.30113220]
[9.75657654 132.95707703]
[-1.21158993 122.28196716]
[-5.95142460 107.72887421]
[-3.37374806 92.64199066]
[5.92910862 80.48816681]
[19.81941795 74.06026459]
[35.10528564 74.83537292]
[48.27413559 82.63536835]
[56.29985809 95.66788483]
[71.26010895 94.57656860]
[86.22035980 93.48526001]
[74.76508331 83.80142212]
[78.39333344 69.24684143]
[93.05377960 66.07328796]
[102.37657166 77.82553864]
[103.93415070 62.90662766]
[97.67166901 48.37762833]
[106.68872833 36.52258682]
[108.24630737 21.60367584]
[109.80388641 6.68476391]
[98.43709564 -3.71246052]
[95.40747833 -18.63475227]
[101.67148590 -32.31781769]
[114.63631439 -39.60144806]
[116.19389343 -54.52035904]
[117.75147247 -69.43927002]
[103.24293518 -73.37608337]
[89.55384827 -79.58937073]
[77.03878021 -87.91820526]
[66.02191925 -98.14683533]
[56.78861618 -110.01031494]
[49.57804108 -123.20136261]
[44.57696152 -137.37829590]
[41.91491699 -152.17388916]
[41.66086960 -167.20491028]
[43.82138824 -182.08203125]
[48.34051895 -196.41986084]
[55.10120010 -209.84704590]
[63.92831421 -222.01579285]
[74.59322357 -232.61088562]
[86.81967163 -241.35787964]
[100.29096985 -248.03022766]
[114.65818787 -252.45509338]
[129.54916382 -254.51785278]
[144.57818604 -254.16508484]
[159.35598755 -251.40592957]
[173.49977112 -246.31184387]
[186.64317322 -239.01478577]
[198.44575500 -229.70376587]
[208.60180664 -218.61996460]
[216.84826660 -206.05047607]
[222.97151184 -192.32086182]
[226.81294250 -177.78678894]
[228.27307129 -162.82469177]
[227.31405640 -147.82214355]
[223.96075439 -133.16773987]
[218.30001831 -119.24106598]
[210.47848511 -106.40285492]
[200.69873047 -94.98565674]
[189.21408081 -85.28518677]
[176.32202148 -77.55271912]
[162.35649109 -71.98854828]
[147.67921448 -68.73680115]
[132.67037964 -67.88169098]
[131.11280823 -52.96278000]
[129.55522156 -38.04386520]
[140.73599243 -28.23936081]
[144.03862000 -13.55751133]
[137.99206543 0.41720101]
[124.72280121 8.24234486]
[123.16522217 23.16125679]
[121.60763550 38.08016968]
[127.98152924 51.54207230]
[118.85306549 64.46421051]
[117.29547882 79.38312531]
[120.23312378 112.03676605]
[127.41563416 125.20534515]
[134.59814453 138.37393188]
[141.78065491 151.54251099]
[148.96316528 164.71109009]
[155.86485291 170.79537964]
[156.15486145 178.22918701]
[163.06185913 191.54434204]
[169.96885681 204.85949707]
[170.96322632 189.89250183]
[175.58120728 175.62104797]
[183.54339600 162.90870667]
[194.36798096 152.52467346]
[207.40000916 145.09727478]
[221.85092163 141.07592773]
[236.84631348 140.70396423]
[251.47882080 144.00389099]
[264.86306763 150.77603149]
[276.18917847 160.61061096]
[284.77185059 172.91256714]
[290.09173584 186.93750000]
[291.82693481 201.83680725]
[289.87243652 216.70892334]
[284.34655762 230.65397644]
[275.58361816 242.82817078]
[264.11386108 252.49484253]
[250.63131714 259.06909180]
[235.95178223 262.15313721]
[220.96350098 261.56033325]
[206.57339478 257.32656860]
[193.65217590 249.70800781]
[182.98171997 239.16564941]
[175.20846558 226.33920288]
[175.20846558 241.33920288]
[175.20846558 256.33920288]
[175.20846558 271.33920288]
[175.20846558 286.33920288]
[175.20846558 301.33920288]
[175.20846558 316.33920288]
[175.20846558 331.33920288]
[175.20846558 346.33920288]
[175.20846558 361.33920288]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 117]
[12 116]
[13 115]
[14 113]
[15 112]
[16 111]
[17 110]
[18 109]
[28 44]
[29 43]
[30 42]
[48 108]
[49 107]
[51 105]
[52 104]
[53 103]
[57 99]
[58 98]
[59 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
