%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCAAAGACACCCCCCACAGUUUAUGUAGCUUACCUCCUCAAAGCAAUACACUGAAAAUGUUUxxxxxxxxxxCUGACCCCCAUGCCUCAGGAUACUCCUCAAUAGCCAUCGCUGUAGUAUAUCCAAAGACAACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[103.94264984 167.07093811]
[104.65106201 152.08767700]
[96.84600830 164.89709473]
[89.04096222 177.70651245]
[81.23590851 190.51593018]
[73.43086243 203.32534790]
[65.62580872 216.13476562]
[65.05242920 231.94558716]
[51.82260513 238.78817749]
[51.24922562 254.59899902]
[38.01940536 261.44158936]
[38.17280579 277.84002686]
[23.91249466 285.93789673]
[9.90825844 277.40481567]
[10.56645393 261.01889038]
[25.20998573 253.63653564]
[25.22509766 238.74194336]
[39.01318741 230.98312378]
[39.02830124 216.08853149]
[52.81639099 208.32972717]
[60.62144089 195.52030945]
[68.42649078 182.71089172]
[76.23154449 169.90145874]
[84.03659058 157.09204102]
[91.84164429 144.28262329]
[78.85099792 120.06192780]
[86.83760834 101.71340179]
[72.31645203 97.95361328]
[57.79529190 94.19383240]
[53.52983093 95.55229187]
[49.47174835 95.45541382]
[46.06269073 94.15506744]
[43.61325455 92.02306366]
[42.27479172 89.49646759]
[28.10581779 84.57304382]
[13.93684292 79.64961243]
[-0.23213188 74.72618866]
[-14.49797916 70.09092712]
[-28.85483932 65.74575043]
[-43.21170044 61.40057373]
[-57.56856155 57.05539703]
[-69.24419403 67.13919830]
[-84.52127838 69.28727722]
[-98.52494812 62.81419373]
[-106.78668213 49.78548431]
[-106.67018890 34.35855865]
[-98.21264648 21.45609856]
[-84.11282349 15.19522858]
[-68.86991882 17.57377052]
[-57.34789658 27.83273888]
[-53.22338104 42.69853592]
[-38.86652374 47.04371643]
[-24.50966263 51.38889313]
[-10.15280247 55.73406982]
[-5.54755974 54.27964401]
[0.02011513 55.74477768]
[4.69129610 60.55720901]
[18.86027145 65.48063660]
[33.02924728 70.40406799]
[47.19822311 75.32749176]
[61.55508041 79.67266846]
[76.07624054 83.43245697]
[90.59739685 87.19224548]
[79.65641785 76.93090820]
[68.71544647 66.66957092]
[54.50458527 61.86837769]
[41.33818054 54.68187714]
[29.61301041 45.32664108]
[19.68242264 34.08460236]
[11.84568596 21.29454613]
[6.33896446 7.34191227]
[3.32820868 -7.35282660]
[2.90415001 -22.34683037]
[5.07956791 -37.18824387]
[9.78890514 -51.42980957]
[16.89023972 -64.64234161]
[26.16956902 -76.42767334]
[37.34725189 -86.43064117]
[50.08644104 -94.34980011]
[64.00322723 -99.94650269]
[78.67822266 -103.05207825]
[93.66917419 -103.57294464]
[108.52432251 -101.49340057]
[122.79599762 -96.87612152]
[136.05410767 -89.86024475]
[147.89910889 -80.65720367]
[157.97404480 -69.54434204]
[165.97529602 -56.85655594]
[171.66174316 -42.97619629]
[174.86201477 -28.32156181]
[175.47966003 -13.33428478]
[173.49607849 1.53398430]
[168.97105408 15.83517551]
[162.04092407 29.13831139]
[152.91456604 41.04249191]
[141.86698914 51.18896866]
[129.22666931 59.27430725]
[121.07894897 71.86853790]
[112.93122101 84.46276093]
[126.11952209 77.31651306]
[139.30781555 70.17026520]
[152.49610901 63.02402115]
[163.54161072 50.16193771]
[178.95874023 57.21519852]
[176.44902039 73.98236084]
[159.64236450 76.21231842]
[146.45405579 83.35856628]
[133.26576233 90.50481415]
[120.07746887 97.65105438]
[121.58721161 104.99753571]
[136.28021240 101.97827911]
[139.29922485 116.67132568]
[124.60668945 119.69048309]
[126.11642456 127.03695679]
[141.05407715 128.40316772]
[155.99172974 129.76939392]
[170.64675903 122.40989685]
[184.19721985 131.64660645]
[182.70356750 147.97758484]
[167.70234680 154.60293579]
[154.62551880 144.70704651]
[139.68786621 143.34082031]
[124.75020599 141.97460938]
[137.20423889 150.33506775]
[149.65824890 158.69552612]
[162.11227417 167.05598450]
[174.56629944 175.41644287]
[189.26873779 178.38941956]
[203.09867859 184.19738770]
[215.51533508 192.61325073]
[226.03315735 203.30790710]
[234.24082947 215.86314392]
[239.81742859 229.78799438]
[242.54486084 244.53794861]
[242.31648254 259.53619385]
[239.14122009 274.19628906]
[233.14324951 287.94488525]
[224.55709839 300.24441528]
[213.71853638 310.61386108]
[201.05140686 318.64776611]
[187.05104065 324.03198242]
[172.26490784 326.55590820]
[157.27120972 326.12091064]
[142.65628052 322.74395752]
[128.99162292 316.55712891]
[116.81157684 307.80233765]
[106.59243774 296.82192993]
[98.73382568 284.04528809]
[93.54303741 269.97207642]
[91.22306061 255.15257263]
[91.86461639 240.16629028]
[95.44261932 225.59927368]
[101.81740570 212.02073669]
[102.52581787 197.03746033]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 25]
[3 24]
[4 23]
[5 22]
[6 21]
[7 20]
[9 18]
[11 16]
[27 63]
[28 62]
[29 61]
[34 60]
[35 59]
[36 58]
[37 57]
[38 54]
[39 53]
[40 52]
[41 51]
[99 109]
[100 108]
[101 107]
[102 106]
[114 123]
[115 122]
[116 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
