%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:33:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGCUAAACCUAGCCCCAAACCCACUCCACCUUACUACCAGACAACCUUAGCCAAACCAUUUxxxxxxxxxxCUCCAACACAUAUGGCCUAGACUACGUACAUAACCUAAACCUACUCCAAUGCUAAAACUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[121.59494019 88.49643707]
[111.15512848 99.26725006]
[100.82792664 110.14607239]
[97.09803009 125.52133179]
[82.76542664 129.57418823]
[72.55194855 140.55984497]
[62.33846664 151.54551697]
[52.47274399 162.84451294]
[42.96438599 174.44586182]
[33.45602417 186.04719543]
[23.94766617 197.64854431]
[14.43930817 209.24987793]
[4.93095016 220.85122681]
[-4.57740831 232.45256042]
[-6.70287132 248.71339417]
[-21.94960594 254.75234985]
[-34.63307953 244.35708618]
[-31.70562172 228.22134399]
[-16.17874908 222.94419861]
[-6.67039108 211.34286499]
[2.83796740 199.74151611]
[12.34632587 188.14018250]
[21.85468483 176.53883362]
[31.36304283 164.93750000]
[40.87140274 153.33615112]
[40.86125565 149.74903870]
[42.62910843 145.98388672]
[46.23663712 142.89550781]
[51.35280228 141.33203125]
[61.56628036 130.34635925]
[71.77976227 119.36070251]
[74.77911377 104.77121735]
[89.84226227 99.93259430]
[92.61248779 92.30305481]
[100.38432312 88.82743835]
[110.82413483 78.05662537]
[100.38820648 66.64155579]
[90.66951752 54.61014557]
[81.70437622 42.00737381]
[73.52630615 28.88037682]
[66.16584778 15.27823925]
[59.65050888 1.25182056]
[54.00463486 -13.14643192]
[49.24931717 -27.86268234]
[45.40231705 -42.84190750]
[42.47799301 -58.02809906]
[40.48727036 -73.36448669]
[39.43756485 -88.79371643]
[39.33279037 -104.25811768]
[40.17332077 -119.69987488]
[41.95598984 -135.06124878]
[44.67411804 -150.28482056]
[48.31752777 -165.31367493]
[52.87258148 -180.09161377]
[58.32223129 -194.56343079]
[64.64608765 -208.67498779]
[71.82048798 -222.37356567]
[79.81859589 -235.60794067]
[88.61049652 -248.32864380]
[98.16330719 -260.48812866]
[108.44129944 -272.04098511]
[119.40602875 -282.94396973]
[131.01649475 -293.15637207]
[143.22927856 -302.63998413]
[155.99871826 -311.35943604]
[169.27705383 -319.28210449]
[183.01463318 -326.37835693]
[197.16009521 -332.62173462]
[211.66053772 -337.98886108]
[226.46176147 -342.45974731]
[241.50842285 -346.01760864]
[256.74423218 -348.64926147]
[272.11227417 -350.34478760]
[287.55505371 -351.09796143]
[303.01486206 -350.90588379]
[318.43386841 -349.76937866]
[333.75448608 -347.69265747]
[348.91937256 -344.68353271]
[363.87188721 -340.75326538]
[378.55609131 -335.91656494]
[392.91714478 -330.19149780]
[406.90130615 -323.59951782]
[420.45632935 -316.16531372]
[428.44625854 -328.86022949]
[436.43615723 -341.55517578]
[431.48010254 -356.38659668]
[437.26507568 -370.91479492]
[451.05957031 -378.27996826]
[466.35028076 -375.00451660]
[475.91735840 -362.63500977]
[475.24356079 -347.01193237]
[464.64700317 -335.51205444]
[449.13110352 -333.56524658]
[441.14117432 -320.87033081]
[433.15124512 -308.17538452]
[445.02728271 -299.69451904]
[456.39431763 -290.54257202]
[467.21447754 -280.74996948]
[477.45175171 -270.34933472]
[487.07199097 -259.37536621]
[496.04318237 -247.86453247]
[504.33538818 -235.85520935]
[511.92098999 -223.38740540]
[518.77471924 -210.50262451]
[524.87365723 -197.24378967]
[530.19763184 -183.65505981]
[534.72869873 -169.78172302]
[538.45190430 -155.66995239]
[541.35479736 -141.36679077]
[543.42767334 -126.91985321]
[544.66363525 -112.37728119]
[545.05847168 -97.78751373]
[544.61096191 -83.19915009]
[543.32257080 -68.66079712]
[541.19750977 -54.22087479]
[538.24291992 -39.92749786]
[534.46856689 -25.82827759]
[529.88702393 -11.97019005]
[524.51361084 1.60059965]
[518.36608887 14.83887768]
[511.46505737 27.70053864]
[503.83340454 40.14273071]
[495.49658203 52.12400055]
[486.48236084 63.60442734]
[476.82070923 74.54575348]
[466.54385376 84.91153717]
[455.68597412 94.66722107]
[444.28329468 103.78030396]
[432.37371826 112.22042084]
[419.99697876 119.95944214]
[407.19424438 126.97157288]
[394.00820923 133.23344421]
[380.48275757 138.72419739]
[366.66293335 143.42550659]
[352.59478760 147.32171631]
[338.32519531 150.39982605]
[323.90167236 152.64956665]
[309.37228394 154.06344604]
[294.78536987 154.63671875]
[280.18960571 154.36747742]
[265.63354492 153.25660706]
[251.16572571 151.30778503]
[236.83432007 148.52751160]
[222.68708801 144.92500305]
[208.77113342 140.51226807]
[195.13284302 135.30400085]
[181.81765747 129.31752014]
[168.86991882 122.57276917]
[156.33276367 115.09220123]
[144.24798584 106.90072632]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 36]
[2 35]
[3 33]
[5 31]
[6 30]
[7 29]
[8 25]
[9 24]
[10 23]
[11 22]
[12 21]
[13 20]
[14 19]
[83 95]
[84 94]
[85 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
