%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCCUAUUUAUUCUAGCCACCUCUAGCCUAGCCGUUUACUCAAUCCUCUGAUCAGGGUGAGxxxxxxxxxxACCACACCUAGCAUUCCUGCACAUCUGUACCCACGCCUUCUUCAAAGCCAUACUAUUUAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[91.01536560 294.18109131]
[91.01536560 279.18109131]
[91.01536560 264.18109131]
[91.01536560 249.18109131]
[91.01536560 234.18109131]
[91.01536560 219.18109131]
[91.01536560 204.18109131]
[91.01536560 189.18109131]
[91.01536560 174.18109131]
[91.01536560 159.18109131]
[85.02194977 154.67233276]
[77.83056641 167.83607483]
[70.63918304 180.99981689]
[68.17742920 195.79641724]
[55.67651367 204.08660889]
[41.08804703 200.59710693]
[33.69150162 187.54753113]
[38.19169617 173.23851013]
[51.72608948 166.77174377]
[62.38060379 156.21327209]
[73.03511047 145.65480042]
[67.04169464 141.14604187]
[52.62948227 145.30392456]
[38.21726608 149.46180725]
[23.80504990 153.61970520]
[20.79006195 168.62532043]
[11.13796425 180.50367737]
[-2.93326283 186.52523804]
[-18.19015312 185.30627441]
[-31.12678719 177.12690735]
[-38.77042007 163.86668396]
[-39.36459732 148.57270813]
[-32.77278900 134.75942993]
[-20.50973701 125.60104370]
[-5.39340496 123.20206451]
[9.10258579 128.11376953]
[19.64716148 139.20748901]
[34.05937958 135.04959106]
[48.47159576 130.89170837]
[62.88381195 126.73381805]
[66.25785828 85.84112549]
[95.84515381 72.87324524]
[97.71276855 57.98996735]
[99.58038330 43.10668945]
[90.50616455 39.22713470]
[82.64563751 33.02655029]
[76.58896637 24.87573624]
[72.81502533 15.29443455]
[71.65416718 4.91838741]
[73.26064301 -5.54278421]
[77.59685516 -15.35411358]
[84.43090820 -23.80689812]
[73.76927948 -34.35818863]
[63.10765076 -44.90948105]
[47.11674500 -48.54580688]
[42.52959442 -64.29033661]
[54.06507492 -75.94644165]
[69.85646820 -71.52332306]
[73.65894318 -55.57110596]
[84.32057190 -45.01981354]
[94.98219299 -34.46852493]
[109.65872192 -37.56684875]
[115.14575195 -51.52723694]
[120.63278198 -65.48762512]
[123.73110199 -80.16415405]
[124.35507965 -95.15116882]
[124.97905731 -110.13818359]
[125.60303497 -125.12519836]
[111.57740021 -130.87474060]
[100.36615753 -141.07690430]
[93.32312775 -154.49969482]
[91.29878998 -169.52227783]
[94.53759003 -184.33058167]
[102.64842987 -197.13644409]
[114.65188599 -206.39349365]
[129.09848022 -210.98388672]
[144.24371338 -210.35331726]
[158.25872803 -204.57794189]
[169.45115662 -194.35514832]
[176.46943665 -180.91938782]
[178.46607971 -165.89311218]
[175.19999695 -151.09078979]
[167.06556702 -138.29989624]
[155.04507446 -129.06498718]
[140.59005737 -124.50122070]
[139.96607971 -109.51420593]
[139.34210205 -94.52719116]
[138.71812439 -79.54017639]
[145.51359558 -76.36660767]
[159.10455322 -70.01947784]
[165.90002441 -66.84591675]
[176.99133301 -76.94456482]
[188.08265686 -87.04321289]
[192.54542542 -102.82344818]
[208.50714111 -106.58583832]
[219.54776001 -94.45996094]
[214.30963135 -78.91988373]
[198.18130493 -75.95189667]
[187.08998108 -65.85324860]
[175.99867249 -55.75460052]
[165.92704773 -51.27621078]
[156.03050232 -49.84869385]
[147.09419250 -51.17302322]
[139.78135681 -54.76636887]
[134.59317017 -60.00059509]
[129.10614014 -46.04020691]
[123.61911011 -32.07981491]
[139.62390137 -22.00573349]
[149.28060913 -6.13409138]
[150.81413269 12.04697800]
[144.19786072 28.69306183]
[131.09753418 40.41629791]
[114.46366119 44.97430038]
[112.59604645 59.85758209]
[110.72843170 74.74085999]
[135.42543030 90.83243561]
[136.06002808 128.14219666]
[150.07673645 133.48371887]
[164.09344482 138.82522583]
[179.26272583 133.60292053]
[192.72576904 142.32794189]
[194.15487671 158.30722046]
[182.45376587 169.28280640]
[166.59852600 166.83517456]
[158.75193787 152.84194946]
[144.73521423 147.50042725]
[130.71850586 142.15892029]
[124.54272461 146.41445923]
[134.28268433 157.82205200]
[144.02265930 169.22964478]
[153.76261902 180.63722229]
[166.92086792 187.83865356]
[170.70518494 202.35343933]
[162.73811340 215.06271362]
[148.02490234 217.98191833]
[135.80911255 209.27708435]
[133.76530457 194.41676331]
[126.57391357 181.25303650]
[119.38253021 168.08929443]
[112.19114685 154.92555237]
[106.01536560 159.18109131]
[106.01536560 174.18109131]
[106.01536560 189.18109131]
[106.01536560 204.18109131]
[106.01536560 219.18109131]
[106.01536560 234.18109131]
[106.01536560 249.18109131]
[106.01536560 264.18109131]
[106.01536560 279.18109131]
[106.01536560 294.18109131]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[22 40]
[23 39]
[24 38]
[25 37]
[42 115]
[43 114]
[44 113]
[52 61]
[53 60]
[54 59]
[62 107]
[63 106]
[64 105]
[65 88]
[66 87]
[67 86]
[68 85]
[91 100]
[92 99]
[93 98]
[117 127]
[118 126]
[119 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
