%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCAUUGCCCCCACAAUCCUAGGCCUACCCGCCGCAGUACUGAUCAUUCUAUUUCCCCCUCxxxxxxxxxxCUCAGGAUACUCCUCAAUAGCCAUCGCUGUAGUAUAUCCAAAGACAACCAUCAUUCCCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[171.87306213 98.17164612]
[157.01002502 100.19397736]
[142.14697266 102.21631622]
[127.28392792 104.23864746]
[112.42088318 106.26098633]
[99.80975342 114.38252258]
[91.81983948 127.07745361]
[83.82991791 139.77238464]
[75.84000397 152.46731567]
[67.85009003 165.16224670]
[59.86017227 177.85717773]
[59.77584457 194.25610352]
[45.39964676 202.14640808]
[31.52057648 193.41122437]
[32.41623306 177.03656006]
[47.16524124 169.86726379]
[55.15515900 157.17233276]
[63.14507675 144.47740173]
[71.13499451 131.78247070]
[79.12490845 119.08753967]
[87.11482239 106.39260864]
[83.66132355 99.73503113]
[68.67654419 99.05940247]
[76.75432587 86.41987610]
[73.30082703 79.76229858]
[58.32111359 78.98245239]
[43.34139633 78.20260620]
[28.34220886 78.04656982]
[13.34951305 78.51461029]
[-2.03304744 88.58222198]
[-17.17509651 79.76641846]
[-32.15481186 80.54626465]
[-47.13452530 81.32611084]
[-57.52619934 93.23361206]
[-73.29954529 94.22209167]
[-85.09651947 83.70510101]
[-85.91817474 67.92218781]
[-75.27705383 56.23706818]
[-59.48633194 55.58232117]
[-47.91436768 66.34639740]
[-32.93465424 65.56655121]
[-17.95494080 64.78670502]
[-9.59130287 55.99142838]
[2.92576551 55.25524902]
[12.88147163 63.52191544]
[27.87416649 63.05387497]
[29.90754700 61.03578186]
[32.88842773 59.72875595]
[36.53986359 59.50761032]
[40.45106125 60.63615036]
[44.12124252 63.22289276]
[59.10095596 64.00273895]
[74.08067322 64.78258514]
[74.05556488 49.78260422]
[80.43537140 36.20696259]
[91.99938202 26.65323067]
[106.53491974 22.94942856]
[121.26074219 25.80424118]
[133.35922241 34.67142868]
[140.51539612 47.85433578]
[141.36001587 62.83053970]
[135.73147583 76.73447418]
[124.70673370 86.90576172]
[110.39854431 91.39793396]
[125.26159668 89.37560272]
[140.12463379 87.35326385]
[154.98768616 85.33093262]
[169.85073853 83.30860138]
[169.99334717 64.60269928]
[173.07287598 46.15370178]
[179.01213074 28.41978645]
[187.66291809 11.84124374]
[198.80975342 -3.17042446]
[212.17518616 -16.24273491]
[227.42671204 -27.05145836]
[244.18508911 -35.32866669]
[262.03372192 -40.86936569]
[280.52905273 -43.53658676]
[299.21151733 -43.26475525]
[317.61709595 -40.06131744]
[335.28866577 -34.00652695]
[351.78747559 -25.25144386]
[366.70401001 -14.01415539]
[379.66818237 -0.57435334]
[390.35845947 14.73363018]
[403.74475098 7.96551561]
[417.13101196 1.19740105]
[430.51730347 -5.57071400]
[443.75988770 -12.61584854]
[456.85305786 -19.93495369]
[469.94619751 -27.25406075]
[456.60983276 -34.11999893]
[453.45397949 -48.78426361]
[462.78530884 -60.52845764]
[477.78338623 -60.76852798]
[487.48583984 -49.32900238]
[484.80130005 -34.57178497]
[498.58367920 -40.49174881]
[512.36608887 -46.41171265]
[526.14843750 -52.33167648]
[539.93084717 -58.25163651]
[549.30511475 -71.70729828]
[565.62005615 -70.04733276]
[572.09222412 -54.97938156]
[562.06359863 -42.00405121]
[545.85083008 -44.46925735]
[532.06842041 -38.54929352]
[518.28601074 -32.62932968]
[504.50366211 -26.70936775]
[490.72128296 -20.78940392]
[477.26531982 -14.16090584]
[464.17214966 -6.84179974]
[451.07901001 0.47730574]
[448.92843628 4.80749750]
[444.00161743 7.80046368]
[437.28543091 7.81557131]
[423.89913940 14.58368587]
[410.51284790 21.35180092]
[397.12655640 28.11991501]
[401.29806519 39.38542938]
[404.30737305 51.01620102]
[406.12335205 62.89266205]
[406.72723389 74.89270782]
[406.11264038 86.89293671]
[404.28573608 98.76994324]
[401.26519775 110.40155792]
[397.08187866 121.66813660]
[391.77871704 132.45376587]
[385.41009521 142.64746094]
[378.04138184 152.14431763]
[369.74822998 160.84660339]
[360.61581421 168.66468811]
[350.73797607 175.51809692]
[340.21618652 181.33622742]
[329.15859985 186.05909729]
[317.67883301 189.63801575]
[305.89492798 192.03602600]
[293.92800903 193.22834778]
[281.90115356 193.20256042]
[269.93801880 191.95878601]
[258.16165161 189.50964355]
[246.69317627 185.88021851]
[235.65057373 181.10765076]
[225.14747620 175.24090576]
[215.29194641 168.34019470]
[206.18544006 160.47633362]
[197.92167664 151.73008728]
[190.58576965 142.19131470]
[184.25325012 131.95800781]
[178.98936462 121.13530731]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 68]
[2 67]
[3 66]
[4 65]
[5 64]
[6 21]
[7 20]
[8 19]
[9 18]
[10 17]
[11 16]
[25 53]
[26 52]
[27 51]
[28 46]
[29 45]
[31 42]
[32 41]
[33 40]
[85 119]
[86 118]
[87 117]
[88 116]
[89 113]
[90 112]
[91 111]
[97 110]
[98 109]
[99 108]
[100 107]
[101 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
