%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACUGACUAUCCUAGAAAUCGCUGUCGCCUUAAUCCAAGCCUACGUUUUCACACUUCUAGUAxxxxxxxxxxUGUCCUCCCGUGAGGCCAAAUAUCAUUCUGAGGGGCCACAGUAAUUACAAACUUACUAUCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.44113159 608.85388184]
[92.44113159 593.85388184]
[92.44113159 578.85388184]
[92.44113159 563.85388184]
[92.44113159 548.85388184]
[92.44113159 533.85388184]
[92.44113159 518.85388184]
[92.44113159 503.85388184]
[92.44113159 488.85388184]
[92.44113159 473.85388184]
[77.71131897 471.12020874]
[63.73094559 465.72494507]
[50.97666550 457.85046387]
[39.88362122 447.76367188]
[30.83059311 435.80703735]
[24.12706566 422.38687134]
[20.00265312 407.95956421]
[18.59922981 393.01608276]
[19.96605301 378.06521606]
[24.05802917 363.61624146]
[30.73720932 350.16168213]
[39.77743530 338.16040039]
[50.87199402 328.02197266]
[63.64403152 320.09283447]
[77.65933990 314.64422607]
[92.44113159 311.86306763]
[92.44113159 296.86306763]
[92.44113159 281.86306763]
[81.76026154 271.54541016]
[81.54657745 256.33325195]
[92.44113159 245.20013428]
[92.44113159 230.20013428]
[92.44113159 215.20013428]
[92.44113159 200.20013428]
[84.70383453 187.47286987]
[92.44113159 173.67269897]
[92.44113159 158.67269897]
[92.44113159 143.67269897]
[79.95012665 151.97779846]
[65.60595703 147.59092712]
[59.89713287 133.71975708]
[66.99797058 120.50695801]
[81.71630859 117.61377716]
[93.28977203 127.15515900]
[94.82706451 112.23414612]
[81.88932800 110.19800568]
[72.01100159 95.91042328]
[75.14384460 74.25231934]
[72.69091034 59.45423889]
[70.23798370 44.65616226]
[67.78505707 29.85808182]
[65.18033600 15.08596516]
[62.42409134 0.34136865]
[59.66785049 -14.40322781]
[44.63269424 -14.17495728]
[29.77525330 -16.49109268]
[15.52300739 -21.28499222]
[2.28601933 -28.41872597]
[-9.55485439 -37.68704224]
[-19.65892982 -48.82327652]
[-27.73549080 -61.50701141]
[-33.55216217 -75.37331390]
[-36.94158173 -90.02322388]
[-37.80622864 -105.03523254]
[-36.12123108 -119.97741699]
[-31.93506813 -134.41986084]
[-25.36817932 -147.94700623]
[-16.60951233 -160.16969299]
[-5.91107035 -170.73620605]
[6.41933298 -179.34254456]
[20.02692604 -185.74110413]
[34.52019119 -189.74775696]
[49.48212814 -191.24722290]
[64.48225403 -190.19639587]
[79.08898163 -186.62547302]
[92.88204956 -180.63720703]
[105.46460724 -172.40390015]
[116.47461700 -162.16242981]
[125.59530640 -150.20747375]
[132.56425476 -136.88299561]
[137.18096924 -122.57237244]
[139.31257629 -107.68733978]
[138.89778137 -92.65617371]
[135.94851685 -77.91134644]
[130.54960632 -63.87710571]
[122.85643005 -50.95724106]
[113.09030914 -39.52347946]
[101.53224182 -29.90479660]
[88.51477051 -22.37793922]
[74.41244507 -17.15947151]
[77.16868591 -2.41487408]
[79.92493439 12.32972240]
[84.27230835 18.36399841]
[82.58313751 27.40515327]
[85.03606415 42.20323181]
[87.48899078 57.00131226]
[89.94191742 71.79939270]
[96.27767944 75.81288910]
[96.89361572 60.82553864]
[110.18105316 53.86537552]
[122.85239410 61.89265060]
[122.23613739 76.87998199]
[108.94919586 83.83988953]
[115.28495026 87.85338593]
[129.71234131 83.74844360]
[144.13972473 79.64349365]
[157.71954346 69.49338531]
[171.23225403 79.73267365]
[165.13380432 95.55181885]
[148.24465942 94.07087708]
[133.81727600 98.17582703]
[119.38990021 102.28076935]
[109.74808502 113.77143860]
[108.21079254 128.69245911]
[107.44113159 143.67269897]
[107.44113159 158.67269897]
[107.44113159 173.67269897]
[115.17842865 187.47286987]
[107.44113159 200.20013428]
[107.44113159 215.20013428]
[107.44113159 230.20013428]
[107.44113159 245.20013428]
[118.33568573 256.33325195]
[118.12200165 271.54541016]
[107.44113159 281.86306763]
[107.44113159 296.86306763]
[107.44113159 311.86306763]
[122.22292328 314.64422607]
[136.23823547 320.09283447]
[149.01026917 328.02197266]
[160.10482788 338.16040039]
[169.14505005 350.16168213]
[175.82423401 363.61624146]
[179.91621399 378.06521606]
[181.28303528 393.01608276]
[179.87960815 407.95956421]
[175.75520325 422.38687134]
[169.05166626 435.80703735]
[159.99864197 447.76367188]
[148.90559387 457.85046387]
[136.15132141 465.72494507]
[122.17094421 471.12020874]
[107.44113159 473.85388184]
[107.44113159 488.85388184]
[107.44113159 503.85388184]
[107.44113159 518.85388184]
[107.44113159 533.85388184]
[107.44113159 548.85388184]
[107.44113159 563.85388184]
[107.44113159 578.85388184]
[107.44113159 593.85388184]
[107.44113159 608.85388184]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[26 127]
[27 126]
[28 125]
[31 122]
[32 121]
[33 120]
[34 119]
[36 117]
[37 116]
[38 115]
[44 114]
[45 113]
[48 97]
[49 96]
[50 95]
[51 94]
[52 92]
[53 91]
[54 90]
[104 112]
[105 111]
[106 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
