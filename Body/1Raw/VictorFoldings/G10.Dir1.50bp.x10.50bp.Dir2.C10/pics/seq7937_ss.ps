%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAGAGCCCACUGUAAAGCUAACUUAGCAUUAACCUUUUAAGUUAAAGAUUAAGAGAACCxxxxxxxxxxAAUAGCUUUUAUAGUAAAGAUACCUCUUUACGGACUCCACUUAUGACUCCCUAAAGCCCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[73.86071777 265.02743530]
[73.86071777 250.02743530]
[73.86071777 235.02743530]
[73.86071777 220.02743530]
[73.86071777 205.02743530]
[73.86071777 190.02743530]
[73.86071777 175.02743530]
[73.86071777 160.02743530]
[73.86071777 145.02743530]
[73.86071777 130.02743530]
[71.37742615 114.19209290]
[75.96775818 101.59104919]
[84.64348602 94.77268982]
[93.72849274 94.47393036]
[87.66547394 80.75387573]
[81.60246277 67.03382111]
[75.39705658 53.37757874]
[69.04992676 39.78662872]
[56.57133865 45.54264069]
[43.12109756 45.95834732]
[30.84333992 41.19004059]
[21.60895157 32.20293808]
[16.73088646 20.58520699]
[16.77980232 8.27044106]
[21.52552605 -2.78334260]
[11.08571339 -13.55415154]
[0.64590108 -24.32495880]
[-9.79391098 -35.09576797]
[-20.23372459 -45.86657715]
[-30.67353630 -56.63738632]
[-43.84211731 -63.81989288]
[-58.55007935 -66.76537323]
[-73.25804138 -69.71086121]
[-87.96600342 -72.65634155]
[-102.67396545 -75.60182190]
[-117.38192749 -78.54730988]
[-126.53457642 -66.33289337]
[-140.08441162 -59.30690002]
[-155.34111023 -58.86433411]
[-169.27545166 -65.09307098]
[-179.12074280 -76.75638580]
[-182.92219543 -91.53852844]
[-179.92504883 -106.50447845]
[-170.72438049 -118.68275452]
[-157.14697266 -125.65533447]
[-141.88864136 -126.03781891]
[-127.97895050 -119.75425720]
[-118.17966461 -108.05226135]
[-114.43644714 -93.25526428]
[-99.72848511 -90.30978394]
[-85.02052307 -87.36430359]
[-70.31256104 -84.41882324]
[-55.60459900 -81.47333527]
[-40.89663696 -78.52785492]
[-51.79331970 -88.83621216]
[-60.43898773 -101.09396362]
[-66.49291229 -114.81803131]
[-69.71652222 -129.46754456]
[-69.98275757 -144.46517944]
[-67.28114319 -159.21989441]
[-61.71813202 -173.15017700]
[-53.51297760 -185.70706177]
[-42.98903275 -196.39569092]
[-30.56104660 -204.79479980]
[-16.71880341 -210.57341003]
[-2.00782275 -213.50376892]
[12.99213982 -213.47041321]
[27.68993950 -210.47462463]
[41.50634003 -204.63450623]
[53.89683914 -196.18019104]
[64.37313080 -185.44485474]
[72.52234650 -172.85159302]
[78.02333069 -158.89669800]
[80.65928650 -144.13011169]
[80.32633209 -129.13381958]
[77.03759003 -114.49877930]
[70.92266846 -100.80178070]
[62.22256088 -88.58261108]
[51.28012848 -78.32283020]
[38.52661133 -70.42676544]
[24.46462440 -65.20560455]
[9.64834690 -62.86510849]
[-5.33831596 -63.49752045]
[-19.90272713 -67.07719421]
[-9.46291542 -56.30638885]
[0.97689712 -45.53557968]
[11.41670990 -34.76477051]
[21.85652161 -23.99396324]
[32.29633331 -13.22315502]
[42.75551987 -17.81740761]
[54.54860306 -18.21756744]
[66.00361633 -14.08963776]
[75.39480591 -5.76090384]
[81.20146942 5.79050493]
[94.72566223 -0.69766003]
[108.24984741 -7.18582535]
[121.77404022 -13.67399025]
[135.29823303 -20.16215515]
[148.82241821 -26.65032005]
[162.34660339 -33.13848495]
[171.15304565 -46.97245026]
[187.52290344 -45.99260330]
[194.61625671 -31.20692444]
[185.13609314 -17.82565308]
[168.83477783 -19.61429596]
[155.31057739 -13.12613010]
[141.78639221 -6.63796520]
[128.26220703 -0.14980029]
[114.73801422 6.33836460]
[101.21382141 12.82652950]
[87.68963623 19.31469536]
[82.64087677 33.43949890]
[88.98800659 47.03044891]
[94.70497131 51.79091263]
[95.32251740 60.97080612]
[101.38552856 74.69085693]
[107.44854736 88.41091156]
[118.43421173 98.62439728]
[132.55900574 103.67314911]
[148.58647156 100.20146942]
[159.40489197 112.52599335]
[153.88520813 127.96830750]
[137.70559692 130.64268494]
[127.51025391 117.79795074]
[113.38545227 112.74919891]
[107.25427246 117.06875610]
[117.22944641 128.27124023]
[127.20462799 139.47373962]
[137.17980957 150.67622375]
[147.15498352 161.87872314]
[159.67132568 170.14558411]
[162.79000854 184.81779480]
[154.71820068 197.46081543]
[140.09609985 200.80661011]
[127.32946014 192.93179321]
[123.75743103 178.36282349]
[116.56604767 165.19908142]
[109.37466431 152.03535461]
[102.18328094 138.87161255]
[94.99189758 125.70787048]
[88.86071777 130.02743530]
[88.86071777 145.02743530]
[88.86071777 160.02743530]
[88.86071777 175.02743530]
[88.86071777 190.02743530]
[88.86071777 205.02743530]
[88.86071777 220.02743530]
[88.86071777 235.02743530]
[88.86071777 250.02743530]
[88.86071777 265.02743530]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[14 117]
[15 116]
[16 115]
[17 113]
[18 112]
[25 89]
[26 88]
[27 87]
[28 86]
[29 85]
[30 84]
[31 54]
[32 53]
[33 52]
[34 51]
[35 50]
[36 49]
[94 111]
[95 110]
[96 109]
[97 108]
[98 107]
[99 106]
[100 105]
[118 125]
[119 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
