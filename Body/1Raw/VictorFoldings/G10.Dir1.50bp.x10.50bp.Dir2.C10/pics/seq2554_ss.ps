%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACUGAACUGACAAUUAACAGCCCAAUAUCUACAAUCAACCAACAAGUCAUUAUUACCCUCxxxxxxxxxxCAUCAUCCUAGCCCUAAGUCUGGCCUAUGAGUGACUACAAAAAGGAUUAGACUGAACCGACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 299.97009277]
[92.50000000 284.97009277]
[92.50000000 269.97009277]
[92.50000000 254.97007751]
[92.50000000 239.97007751]
[92.50000000 224.97007751]
[92.50000000 209.97007751]
[92.50000000 194.97007751]
[92.50000000 179.97007751]
[92.50000000 164.97007751]
[76.70026398 161.11042786]
[62.34148026 153.47146606]
[50.31163788 142.52561951]
[37.87220001 150.90776062]
[34.72752380 166.16387939]
[21.99275589 174.48735046]
[7.46776915 171.39537048]
[-4.97167110 179.77751160]
[-17.41111183 188.15965271]
[-17.82521820 203.67120361]
[-27.30437279 215.95635986]
[-42.20364761 220.29124451]
[-56.79396820 215.00900269]
[-65.46505737 202.14074707]
[-64.88270569 186.63461304]
[-55.27083969 174.45300293]
[-40.32541275 170.27999878]
[-25.79325485 175.72021484]
[-13.35381413 167.33807373]
[-0.91437393 158.95593262]
[1.67346489 144.33270264]
[14.16941929 135.65481567]
[29.49005508 138.46832275]
[41.92949677 130.08618164]
[36.13100815 114.07527924]
[34.66233063 97.11019135]
[37.62303543 80.34100342]
[44.81240845 64.90454102]
[55.74306107 51.84727097]
[69.67398834 42.05438232]
[85.66077423 36.18974686]
[102.61965179 34.65094376]
[119.40093994 37.54228973]
[125.46395111 23.82223701]
[131.52696228 10.10218334]
[137.58998108 -3.61787009]
[126.35989380 -13.73432541]
[118.81675720 -26.80886459]
[115.68838501 -41.55476761]
[117.26884460 -56.52531052]
[123.39083862 -70.25570679]
[133.44332886 -81.40641785]
[146.43251038 -88.89384460]
[161.08000183 -91.99562073]
[175.94873047 -90.42029572]
[182.01174927 -104.14035034]
[188.07476807 -117.86039734]
[194.13777161 -131.58045959]
[200.20079041 -145.30050659]
[206.26380920 -159.02056885]
[193.96978760 -150.42652893]
[179.89569092 -145.23811340]
[164.96519470 -143.79583740]
[150.15818787 -146.19435120]
[136.44650269 -152.27622986]
[124.73001099 -161.64233398]
[115.77769470 -173.67794800]
[110.17709351 -187.59317017]
[108.29579163 -202.47473145]
[110.25724792 -217.34593201]
[115.93273926 -231.23077393]
[124.94976807 -243.21797180]
[136.71655273 -252.52081299]
[150.46081543 -258.52874756]
[165.28053284 -260.84744263]
[180.20303345 -259.32473755]
[194.24897766 -254.06056213]
[206.49650574 -245.40042114]
[216.14179993 -233.91267395]
[222.55183411 -220.35127258]
[225.30592346 -205.60627747]
[224.22328186 -190.64540100]
[219.37286377 -176.44618225]
[230.87466431 -186.07470703]
[242.37646484 -195.70323181]
[253.87826538 -205.33175659]
[252.60249329 -217.22904968]
[257.20953369 -228.14161682]
[266.43597412 -235.37670898]
[277.89477539 -237.21067810]
[288.69223022 -233.29849243]
[300.58462524 -242.44021606]
[312.47698975 -251.58195496]
[311.92276001 -267.08914185]
[320.61715698 -279.94161987]
[335.21704102 -285.19741821]
[350.10842896 -280.83554077]
[359.56530762 -268.53320312]
[359.95129395 -253.02093506]
[351.11795044 -240.26350403]
[336.46194458 -235.16639709]
[321.61874390 -239.68957520]
[309.72634888 -230.54783630]
[297.83398438 -221.40611267]
[296.60409546 -203.18840027]
[282.24465942 -191.40264893]
[263.50680542 -193.82995605]
[252.00498962 -184.20143127]
[240.50318909 -174.57290649]
[229.00138855 -164.94438171]
[219.98385620 -152.95755005]
[213.92083740 -139.23748779]
[207.85783386 -125.51744080]
[201.79481506 -111.79738617]
[195.73179626 -98.07733154]
[189.66879272 -84.35727692]
[200.84390259 -74.42359924]
[208.41171265 -61.50468445]
[211.62022400 -46.85935974]
[210.14292908 -31.91919327]
[204.11196899 -18.14856529]
[194.10647583 -6.90112066]
[181.09689331 0.71327740]
[166.35093689 3.93806767]
[151.31002808 2.44514322]
[145.24702454 16.16519737]
[139.18400574 29.88525009]
[133.12098694 43.60530472]
[143.27235413 50.96057892]
[151.83389282 60.11756516]
[158.49105835 70.73983002]
[162.99926758 82.43711853]
[165.19287109 94.77966309]
[164.99128723 107.31400299]
[162.40191650 119.57962799]
[157.51991272 131.12590027]
[150.52461243 141.52859497]
[141.67304993 150.40554810]
[131.29040527 157.43058777]
[119.75816345 162.34562683]
[107.50000000 164.97007751]
[107.50000000 179.97007751]
[107.50000000 194.97007751]
[107.50000000 209.97007751]
[107.50000000 224.97007751]
[107.50000000 239.97007751]
[107.50000000 254.97007751]
[107.50000000 269.97009277]
[107.50000000 284.97009277]
[107.50000000 299.97009277]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[13 34]
[14 33]
[17 30]
[18 29]
[19 28]
[43 128]
[44 127]
[45 126]
[46 125]
[55 116]
[56 115]
[57 114]
[58 113]
[59 112]
[60 111]
[83 110]
[84 109]
[85 108]
[86 107]
[91 104]
[92 103]
[93 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
