%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACCUCCUAUUCUUGCACGAAACGGGAUCAAACAACCCCCUAGGAAUCACCUCCCAUUCCGAxxxxxxxxxxCUCCACCUCCUAUUCUUGCACGAAACGGGAUCAAACAACCCCCUAGGAAUCACCUCCCAUUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[115.97734833 391.61077881]
[115.97734833 376.61077881]
[115.97734833 361.61077881]
[115.97734833 346.61077881]
[115.97734833 331.61077881]
[115.97734833 316.61077881]
[115.97734833 301.61077881]
[115.97734833 286.61077881]
[115.97734833 271.61077881]
[115.97734833 256.61077881]
[95.89227295 247.43246460]
[82.95222473 229.45613098]
[80.60898590 207.36424255]
[89.54341888 186.95156860]
[107.46953583 173.60527039]
[104.45005798 158.91232300]
[101.43058014 144.21937561]
[98.41110229 129.52642822]
[95.39162445 114.83347321]
[89.61627960 100.98986816]
[81.29853058 88.50727844]
[72.98078156 76.02468872]
[58.88959122 68.83102417]
[58.27087784 53.94927216]
[49.95313263 41.46668243]
[41.63538361 28.98409081]
[33.31763458 16.50149918]
[19.22644234 9.30783272]
[18.60773087 -5.57391644]
[10.28998280 -18.05650711]
[1.97223485 -30.53909874]
[-3.69825625 -21.53583145]
[-13.82088184 -14.93109894]
[-27.37817574 -12.38129330]
[-42.31582642 -13.74750996]
[-57.25347900 -15.11372662]
[-66.66026306 -2.88605332]
[-81.19221497 2.29331040]
[-96.21224976 -1.22835124]
[-106.92752838 -12.32728863]
[-109.91883850 -27.46187210]
[-104.23166656 -41.80271149]
[-91.68077087 -50.77369308]
[-76.27109528 -51.51221466]
[-62.91981125 -43.78261566]
[-55.88726425 -30.05137825]
[-40.94961166 -28.68516159]
[-26.01195908 -27.31894493]
[-21.01233673 -32.90945053]
[-11.01309013 -44.09046555]
[-6.01346684 -49.68097305]
[-9.03294468 -64.37392426]
[-12.05242252 -79.06687164]
[-15.07190037 -93.75981903]
[-18.09137726 -108.45276642]
[-33.12431335 -108.02625275]
[-48.00290680 -110.21684265]
[-62.27500534 -114.95796967]
[-75.50689697 -122.10556030]
[-87.29648590 -131.44241333]
[-97.28549957 -142.68478394]
[-105.17037201 -155.49102783]
[-110.71150208 -169.47196960]
[-113.74050140 -184.20275879]
[-114.16531372 -199.23574829]
[-111.97303772 -214.11408997]
[-107.23028564 -228.38565063]
[-100.08119202 -241.61674500]
[-90.74301147 -253.40527344]
[-79.49951172 -263.39300537]
[-66.69237518 -271.27642822]
[-52.71079636 -276.81597900]
[-37.97966003 -279.84329224]
[-22.94662476 -280.26641846]
[-8.06853199 -278.07244873]
[6.20249081 -273.32806396]
[19.43276405 -266.17749023]
[31.22023392 -256.83795166]
[41.20669556 -245.59332275]
[49.08866501 -232.78529358]
[54.62662506 -218.80308533]
[57.65228271 -204.07160950]
[58.07368469 -189.03852844]
[55.87803268 -174.16069031]
[51.13204575 -159.89019775]
[43.97995377 -146.66073608]
[34.63909531 -134.87432861]
[23.39333153 -124.88913727]
[10.58440685 -117.00862122]
[-3.39842868 -111.47224426]
[-0.37895098 -96.77929688]
[2.64052677 -82.08634949]
[5.66000462 -67.39340210]
[8.67948246 -52.70045090]
[14.45482540 -38.85684586]
[22.77257347 -26.37425423]
[31.09032059 -13.89166355]
[44.58657455 -7.59083605]
[45.80022812 8.18375206]
[54.11797333 20.66634178]
[62.43572235 33.14893341]
[70.75347137 45.63152313]
[84.24972534 51.93235397]
[85.46337128 67.70693970]
[93.78112030 80.18952942]
[102.09886932 92.67211914]
[108.06839752 83.76684570]
[117.18170929 77.09513855]
[128.77276611 73.46853638]
[143.77200317 73.31652069]
[158.77122498 73.16451263]
[166.89270020 60.04790878]
[180.82609558 53.42494583]
[196.12535095 55.40898514]
[207.90850830 65.36692810]
[212.41561890 80.12123871]
[208.20846558 94.96385956]
[196.62954712 105.15856934]
[181.37364197 107.45227051]
[167.30886841 101.11306000]
[158.92323303 88.16374207]
[143.92401123 88.31575012]
[128.92477417 88.46776581]
[124.21472931 94.30432129]
[114.79462433 105.97743988]
[110.08457184 111.81399536]
[113.10404968 126.50694275]
[116.12352753 141.19989014]
[119.14300537 155.89283752]
[122.16248322 170.58580017]
[130.84451294 171.23570251]
[139.21661377 173.59324646]
[146.94667053 177.56137085]
[153.72880554 182.97920227]
[159.29537964 189.62854004]
[163.42759705 197.24272156]
[165.96411133 205.51724243]
[166.80729675 214.12196350]
[165.92701721 222.71430969]
[163.36169434 230.95285034]
[159.21664429 238.51089478]
[153.65972900 245.08947754]
[146.91461182 250.42912292]
[139.25169373 254.32012939]
[130.97735596 256.61077881]
[130.97735596 271.61077881]
[130.97735596 286.61077881]
[130.97735596 301.61077881]
[130.97735596 316.61077881]
[130.97735596 331.61077881]
[130.97735596 346.61077881]
[130.97735596 361.61077881]
[130.97735596 376.61077881]
[130.97735596 391.61077881]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[15 130]
[16 129]
[17 128]
[18 127]
[19 126]
[20 106]
[21 105]
[22 104]
[24 102]
[25 101]
[26 100]
[27 99]
[29 97]
[30 96]
[31 95]
[34 48]
[35 47]
[36 46]
[51 94]
[52 93]
[53 92]
[54 91]
[55 90]
[109 123]
[110 122]
[111 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
