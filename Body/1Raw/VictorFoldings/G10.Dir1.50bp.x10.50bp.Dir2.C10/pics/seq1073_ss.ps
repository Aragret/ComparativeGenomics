%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUAGCCACACCCCCACGGGAAACAGCAGUGAUUAACCUUUAGCAAUAAACGAAAGUUUAAxxxxxxxxxxCUCACACGAUUCUUUACCUUUCACUUCAUCUUGCCCUUCAUUAUUGCAGCCCUAGCAACACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-16.86902428 312.44607544]
[-24.50199509 325.35876465]
[-32.13496399 338.27145386]
[-39.76793671 351.18414307]
[-47.40090561 364.09686279]
[-47.76269531 379.91390991]
[-60.89978409 386.93292236]
[-61.26157761 402.74996948]
[-74.39866638 409.76898193]
[-82.03163147 422.68167114]
[-89.66460419 435.59436035]
[-92.51960754 452.30618286]
[-109.36867523 454.18905640]
[-115.84224701 438.51968384]
[-102.57730103 427.96139526]
[-94.94432831 415.04870605]
[-87.31136322 402.13598633]
[-87.49552917 387.24252319]
[-73.81248474 379.29995728]
[-73.99665070 364.40646362]
[-60.31360245 356.46389771]
[-52.68063354 343.55117798]
[-45.04766464 330.63848877]
[-37.41469193 317.72579956]
[-29.78172302 304.81307983]
[-42.39434814 296.25378418]
[-54.44424057 286.91891479]
[-65.88378143 276.84533691]
[-76.66776276 266.07287598]
[-86.75357056 254.64411926]
[-96.10134125 242.60421753]
[-104.67413330 230.00074768]
[-112.43807220 216.88354492]
[-119.36248016 203.30441284]
[-125.41997528 189.31703186]
[-130.58663940 174.97668457]
[-134.84202576 160.34002686]
[-138.16935730 145.46492004]
[-140.55545044 130.41014099]
[-141.99089050 115.23516846]
[-142.47000122 100.00000000]
[-141.99089050 84.76483154]
[-140.55545044 69.58986664]
[-138.16935730 54.53507996]
[-134.84202576 39.65996552]
[-130.58663940 25.02331352]
[-125.41997528 10.68296242]
[-119.36248016 -3.30441523]
[-112.43807220 -16.88354111]
[-104.67413330 -30.00075531]
[-96.10134125 -42.60421371]
[-86.75357056 -54.64411545]
[-76.66776276 -66.07287598]
[-65.88378143 -76.84532928]
[-54.44424057 -86.91889954]
[-42.39434814 -96.25378418]
[-29.78172302 -104.81309509]
[-37.41469193 -117.72579193]
[-45.04766464 -130.63848877]
[-52.68063354 -143.55119324]
[-60.31360245 -156.46388245]
[-74.85705566 -164.04148865]
[-75.29595947 -180.43476868]
[-61.17880630 -188.77970886]
[-47.02811813 -180.49176025]
[-47.40090561 -164.09684753]
[-39.76793671 -151.18415833]
[-32.13496399 -138.27145386]
[-24.50199509 -125.35875702]
[-16.86902428 -112.44606018]
[-5.34667683 -118.38904572]
[6.47685385 -123.70766449]
[18.56776428 -128.38670349]
[30.89148712 -132.41281128]
[43.41278839 -135.77444458]
[56.09587097 -138.46200562]
[68.90447235 -140.46780396]
[81.80197906 -141.78613281]
[94.75151062 -142.41317749]
[107.71604919 -142.34719849]
[120.65852356 -141.58833313]
[133.54194641 -140.13877869]
[146.32946777 -138.00268555]
[158.98452759 -135.18614197]
[171.47096252 -131.69721985]
[183.75305176 -127.54587555]
[195.79570007 -122.74398041]
[207.56448364 -117.30527496]
[219.02572632 -111.24529266]
[230.14668274 -104.58137512]
[240.89555359 -97.33255768]
[251.24162292 -89.51958466]
[261.15527344 -81.16477203]
[270.60821533 -72.29201508]
[279.57336426 -62.92668152]
[288.02514648 -53.09554672]
[295.93933105 -42.82671738]
[303.29336548 -32.14955139]
[310.06619263 -21.09457397]
[316.23843384 -9.69338989]
[321.79244995 2.02140307]
[326.71237183 14.01631451]
[330.98416138 26.25704956]
[334.59552002 38.70861435]
[337.53622437 51.33540726]
[339.79779053 64.10133362]
[341.37380981 76.96989441]
[342.25973511 89.90428925]
[342.45303345 102.86755371]
[341.95318604 115.82262421]
[340.76159668 128.73245239]
[338.88168335 141.56013489]
[336.31878662 154.26899719]
[350.82742310 158.07685852]
[365.33605957 161.88471985]
[375.60903931 150.53904724]
[389.98190308 145.27793884]
[405.15188599 147.31036377]
[417.63299561 156.16928101]
[424.55718994 169.81896973]
[424.33334351 185.12284851]
[417.01287842 198.56417847]
[404.27798462 207.05424500]
[389.05505371 208.64210510]
[374.84222412 202.96287537]
[364.90545654 191.32159424]
[361.52819824 176.39334106]
[347.01956177 172.58547974]
[332.51092529 168.77761841]
[327.00814819 185.19975281]
[320.34710693 201.18717957]
[312.56182861 216.65834045]
[303.69201660 231.53427124]
[293.78289795 245.73908997]
[282.88510132 259.20031738]
[271.05416870 271.84927368]
[258.35046387 283.62142944]
[244.83883667 294.45669556]
[230.58822632 304.29980469]
[215.67131042 313.10055542]
[200.16421509 320.81399536]
[184.14607239 327.40081787]
[167.69859314 332.82739258]
[150.90571594 337.06604004]
[133.85308838 340.09512329]
[116.62774658 341.89920044]
[99.31756592 342.46902466]
[82.01086426 341.80175781]
[64.79594421 339.90075684]
[47.76064682 336.77572632]
[30.99188232 332.44262695]
[14.57521343 326.92355347]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 25]
[2 24]
[3 23]
[4 22]
[5 21]
[7 19]
[9 17]
[10 16]
[11 15]
[57 70]
[58 69]
[59 68]
[60 67]
[61 66]
[113 129]
[114 128]
[115 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
