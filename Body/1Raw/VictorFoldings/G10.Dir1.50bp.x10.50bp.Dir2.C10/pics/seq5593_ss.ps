%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCCACCAUCAUAGCCACCAUCACCCUCCUUAACCUCUACUUCUACCUACGCCUAAUCUAxxxxxxxxxxCAAACCCUGAGAACCAAAAUGAACGAAAAUCUGUUCGCUUCAUUCAUUGCCCCCACAAUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[20.81590652 321.96716309]
[15.32887554 335.92755127]
[17.48179245 351.60159302]
[5.62508106 360.61645508]
[0.13804962 374.57684326]
[-5.34898186 388.53723145]
[-10.83601379 402.49761963]
[-11.00271702 419.45074463]
[-27.33945847 423.98364258]
[-36.21767426 409.54019165]
[-24.79640388 397.01058960]
[-19.30937195 383.05020142]
[-13.82234001 369.08981323]
[-8.33530903 355.12942505]
[-10.88069439 340.45391846]
[1.36848605 330.44052124]
[6.85551739 316.48013306]
[-4.72062588 311.12350464]
[-15.98999500 305.14837646]
[-26.91957664 298.57229614]
[-37.47735214 291.41452026]
[-47.63239670 283.69598389]
[-57.35495377 275.43933105]
[-66.61655426 266.66873169]
[-75.39005280 257.40988159]
[-83.64975739 247.68991089]
[-91.37145996 237.53727722]
[-98.53255463 226.98175049]
[-105.11206055 216.05422974]
[-111.09069824 204.78672791]
[-116.45095062 193.21226501]
[-121.17712402 181.36473083]
[-125.25537109 169.27885437]
[-128.67373657 156.99002075]
[-131.42221069 144.53424072]
[-133.49275208 131.94799805]
[-134.87928772 119.26817322]
[-135.57774353 106.53189850]
[-135.58609009 93.77648926]
[-134.90431213 81.03930664]
[-133.53437805 68.35767365]
[-131.48031616 55.76873016]
[-128.74813843 43.30936432]
[-125.34586334 31.01606941]
[-121.28344727 18.92486000]
[-116.57278442 7.07115650]
[-111.22768402 -4.51031590]
[-105.26380157 -15.78562927]
[-98.69860840 -26.72175407]
[-91.55133820 -37.28665543]
[-83.84292603 -47.44937897]
[-75.59595490 -57.18015671]
[-66.83457947 -66.45048523]
[-57.58447647 -75.23320007]
[-47.87273026 -83.50257874]
[-37.72780228 -91.23439789]
[-27.17940331 -98.40599823]
[-16.25844002 -104.99638367]
[-4.99690294 -110.98623657]
[6.57221889 -116.35801697]
[18.41503334 -121.09598541]
[30.49684525 -125.18626404]
[42.78226471 -128.61686707]
[55.23530197 -131.37774658]
[67.81947327 -133.46081543]
[80.49791718 -134.85998535]
[93.23348999 -135.57112122]
[105.98889160 -135.59217834]
[118.72674561 -134.92306519]
[131.40972900 -133.56576538]
[144.00071716 -131.52424622]
[156.46279907 -128.80448914]
[168.75947571 -125.41445160]
[180.85472107 -121.36407471]
[192.71311951 -116.66522217]
[204.29989624 -111.33166504]
[215.58114624 -105.37901306]
[226.52380371 -98.82471466]
[237.09582520 -91.68796539]
[247.26622009 -83.98967743]
[257.00518799 -75.75240326]
[266.28424072 -67.00026703]
[275.07617188 -57.75891113]
[283.35522461 -48.05540848]
[291.09713745 -37.91818237]
[298.27923584 -27.37693405]
[304.88049316 -16.46253967]
[310.88156128 -5.20697212]
[316.26486206 6.35679388]
[321.01461792 18.19488335]
[325.11694336 30.27261734]
[328.55978394 42.55461502]
[331.33303833 55.00489426]
[333.42864990 67.58699036]
[334.84045410 80.26403046]
[349.82015991 79.48418427]
[364.79986572 78.70433807]
[379.76013184 77.61302948]
[394.69442749 76.21072388]
[409.62872314 74.80842590]
[424.56304932 73.40612030]
[439.49734497 72.00381470]
[454.43167114 70.60150909]
[469.35055542 69.04393005]
[484.25247192 67.33124542]
[499.15435791 65.61855316]
[514.05627441 63.90586090]
[523.68499756 51.37336349]
[539.36596680 49.40294266]
[551.79595947 59.16361237]
[553.60046387 74.86454773]
[543.70892334 87.19065094]
[527.98980713 88.82907104]
[515.76898193 78.80776215]
[500.86706543 80.52045441]
[485.96514893 82.23314667]
[471.06326294 83.94583130]
[464.73635864 87.85940552]
[455.83395386 85.53582001]
[440.89965820 86.93812561]
[425.96533203 88.34043121]
[411.03103638 89.74272919]
[396.09674072 91.14503479]
[381.16241455 92.54734039]
[377.44509888 95.63877106]
[371.72891235 96.38492584]
[365.57971191 93.68405914]
[350.60000610 94.46389771]
[335.62030029 95.24374390]
[335.18750000 115.04616547]
[333.09335327 134.74230957]
[329.35269165 154.19302368]
[323.99191284 173.26094055]
[317.04888916 191.81134033]
[308.57266235 209.71321106]
[298.62310791 226.84007263]
[287.27050781 243.07096863]
[274.59503174 258.29122925]
[260.68627930 272.39334106]
[245.64245605 285.27767944]
[229.56982422 296.85324097]
[212.58193970 307.03826904]
[194.79878235 315.76083374]
[176.34597778 322.95925903]
[157.35389709 328.58273315]
[137.95666504 332.59155273]
[118.29130554 334.95736694]
[98.49674225 335.66348267]
[78.71279907 334.70492554]
[59.07923126 332.08840942]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 17]
[2 16]
[4 14]
[5 13]
[6 12]
[7 11]
[95 129]
[96 128]
[97 127]
[98 124]
[99 123]
[100 122]
[101 121]
[102 120]
[103 119]
[104 117]
[105 116]
[106 115]
[107 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
