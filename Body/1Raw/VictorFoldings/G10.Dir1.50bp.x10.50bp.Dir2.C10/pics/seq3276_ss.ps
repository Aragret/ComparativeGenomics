%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAACCUCCUACUCCUCAUUGUACCCAUUCUAAUCGCAAUGGCAUUCCUAAUGCUUACCGAxxxxxxxxxxCUAGGCACAGCUCUAAGCCUCCUUAUUCGAGCCGAGCUGGGCCAGCCAGGCAACCUUCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[83.08307648 406.49697876]
[83.08307648 391.49697876]
[83.08307648 376.49697876]
[83.08307648 361.49697876]
[83.08307648 346.49697876]
[83.08307648 331.49697876]
[83.08307648 316.49697876]
[83.08307648 301.49697876]
[83.08307648 286.49697876]
[83.08307648 271.49697876]
[69.50539398 268.28497314]
[56.98698807 262.10598755]
[46.16728592 253.27172852]
[37.59983826 242.22956848]
[31.72397995 229.54002380]
[28.84231949 215.84817505]
[29.10514641 201.85096741]
[32.50259781 188.26167297]
[38.86498642 175.77357483]
[47.87127304 165.02462769]
[59.06524658 156.56478882]
[71.87866211 150.82794189]
[85.66005707 148.10963440]
[86.28403473 133.12261963]
[86.90801239 118.13560486]
[76.58081055 107.25677490]
[61.58161926 107.10073853]
[46.58243179 106.94470215]
[31.58324242 106.78866577]
[16.58405304 106.63262939]
[1.58486533 106.47659302]
[-4.71528435 120.34122467]
[-16.11431694 130.43983459]
[-30.63728333 135.02278137]
[-45.76798630 133.29603577]
[-58.88494873 125.55876923]
[-67.71556854 113.15151215]
[-70.72989655 98.22389984]
[-67.40567017 83.36222076]
[-58.31884384 71.14135742]
[-45.04375839 63.67864990]
[-29.88040543 62.26705551]
[-15.45592499 67.15113831]
[-4.26944828 77.48471069]
[1.74090195 91.47740173]
[16.74008942 91.63343811]
[31.73927879 91.78947449]
[46.73846817 91.94551086]
[61.73765564 92.10154724]
[76.73684692 92.25759125]
[82.65680695 78.47520447]
[72.21699524 67.70439911]
[61.77718353 56.93358994]
[51.33736801 46.16278076]
[40.89755630 35.39197159]
[25.53212166 28.22679901]
[28.16370201 11.47833157]
[44.98612595 9.37063217]
[51.66836548 24.95215988]
[62.10817719 35.72296906]
[72.54798889 46.49377823]
[82.98780060 57.26458359]
[93.42761230 68.03539276]
[89.42961884 53.57800674]
[85.43162537 39.12062073]
[75.88696289 27.54912567]
[70.28917694 13.63277435]
[69.16262054 -1.32486081]
[72.61281586 -15.92267418]
[80.31657410 -28.79326439]
[91.55227661 -38.73101807]
[105.26745605 -44.80505371]
[120.17738342 -46.44639969]
[134.88542175 -43.50131226]
[148.01385498 -36.24566269]
[158.33290100 -25.35910034]
[164.87596130 -11.86138725]
[167.03015137 2.98312283]
[164.59367371 17.78391838]
[157.79475403 31.15458488]
[147.27026367 41.84266663]
[134.00355530 48.84785461]
[124.74655151 60.65073395]
[115.48955536 72.45362091]
[129.27194214 66.53365326]
[143.05432129 60.61368942]
[152.68063354 48.05802917]
[167.42840576 50.14426041]
[181.21078491 44.22429657]
[194.99317932 38.30433273]
[208.77555847 32.38436890]
[222.55793762 26.46440697]
[236.34031677 20.54444313]
[249.58290100 13.49930859]
[262.19403076 5.37776613]
[274.80514526 -2.74377608]
[287.41629028 -10.86531830]
[294.43176270 -25.68810654]
[310.79623413 -26.75405121]
[319.67532349 -12.96660233]
[311.93499756 1.49089718]
[295.53784180 1.74580991]
[282.92669678 9.86735153]
[270.31558228 17.98889351]
[257.70443726 26.11043549]
[272.45611572 28.82854080]
[282.90853882 39.58712387]
[285.19970703 54.41110611]
[278.48312378 67.82331848]
[265.24041748 74.86822510]
[250.36450195 72.94285583]
[239.35173035 62.75860977]
[236.27110291 48.07836151]
[242.26028442 34.32682419]
[228.47790527 40.24678802]
[214.69551086 46.16675186]
[200.91313171 52.08671188]
[187.13075256 58.00667572]
[173.34837341 63.92663956]
[164.70787048 76.05886841]
[148.97428894 74.39607239]
[135.19190979 80.31603241]
[121.40952301 86.23600006]
[123.81264496 96.08219910]
[122.13079834 105.53864288]
[117.06496429 113.06811523]
[109.83061218 117.61728668]
[101.89502716 118.75957489]
[101.27104950 133.74659729]
[100.64707184 148.73361206]
[116.07094574 153.41731262]
[129.76513672 161.90008545]
[140.81361389 173.60804749]
[148.47891235 187.75172424]
[152.25151062 203.37942505]
[151.88357544 219.44114685]
[147.40525818 234.85919189]
[139.12236023 248.60044861]
[127.59541321 259.74563599]
[113.60174561 267.55081177]
[98.08307648 271.49697876]
[98.08307648 286.49697876]
[98.08307648 301.49697876]
[98.08307648 316.49697876]
[98.08307648 331.49697876]
[98.08307648 346.49697876]
[98.08307648 361.49697876]
[98.08307648 376.49697876]
[98.08307648 391.49697876]
[98.08307648 406.49697876]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[23 130]
[24 129]
[25 128]
[26 50]
[27 49]
[28 48]
[29 47]
[30 46]
[31 45]
[51 63]
[52 62]
[53 61]
[54 60]
[55 59]
[84 123]
[85 122]
[86 121]
[88 119]
[89 118]
[90 117]
[91 116]
[92 115]
[93 114]
[94 105]
[95 104]
[96 103]
[97 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
