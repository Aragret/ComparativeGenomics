%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUCCACCCUCCUCUCCCUAGGAGGCCUGCCCCCGCUAACCGGCUUUUUGCCCAAAUGGGxxxxxxxxxxUAACCCUAACAAAAAAAACUCAUACCCCCAUUAUGUAAAAUCCAUUGUCGCAUCCACCUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[148.85269165 156.17631531]
[137.55369568 146.31059265]
[126.25468445 136.44487000]
[114.95568085 126.57915497]
[103.65667725 116.71343231]
[88.72236633 115.31112671]
[75.78430939 122.90103149]
[62.84625626 130.49093628]
[49.90819931 138.08085632]
[36.97014236 145.67076111]
[24.03208923 153.26066589]
[11.09403229 160.85057068]
[11.05806255 171.63200378]
[6.55210972 181.33738708]
[-1.53694642 188.21749878]
[-11.68345070 191.06370544]
[-22.01047325 189.41993713]
[-30.63696861 183.65425110]
[-44.02325439 190.42236328]
[-57.40953827 197.19049072]
[-70.79582214 203.95860291]
[-84.18210602 210.72671509]
[-97.56838989 217.49482727]
[-102.26033020 232.58659363]
[-116.28819275 239.86631775]
[-131.32951355 235.01509094]
[-138.46052551 220.91104126]
[-133.45053101 205.92185974]
[-119.27188110 198.94036865]
[-104.33650970 204.10855103]
[-90.95022583 197.34042358]
[-77.56394196 190.57231140]
[-64.17765045 183.80419922]
[-50.79137039 177.03608704]
[-37.40508270 170.26797485]
[-32.78515244 151.39929199]
[-15.56350422 141.77474976]
[3.50412393 147.91252136]
[16.44218063 140.32261658]
[29.38023567 132.73269653]
[42.31829071 125.14279175]
[55.25634766 117.55288696]
[68.19440460 109.96297455]
[81.13246155 102.37306976]
[80.82040405 87.37631226]
[67.57781982 80.33117676]
[54.33523178 73.28604889]
[37.97362518 74.39502716]
[29.05830193 60.63098145]
[36.76058197 46.15317154]
[53.15702057 45.85513306]
[61.38036728 60.04346085]
[74.62295532 67.08859253]
[87.86553955 74.13372803]
[100.64289856 66.27630615]
[100.33084106 51.27954865]
[100.01878357 36.28279495]
[99.70672607 21.28604317]
[99.39466858 6.28928947]
[99.08261108 -8.70746422]
[95.83178711 -23.35096550]
[89.76877594 -37.07101822]
[83.70576477 -50.79107285]
[70.15332031 -60.02488708]
[71.64347839 -76.35618591]
[86.64328766 -82.98474121]
[99.72223663 -73.09165192]
[97.42581940 -56.85408783]
[103.48883057 -43.13403320]
[109.55184174 -29.41397858]
[111.54907990 -44.28041840]
[117.76371765 -57.93246460]
[127.66374207 -69.20142365]
[140.40167236 -77.12261200]
[154.88705444 -81.01794434]
[169.87988281 -80.55394745]
[184.09666443 -75.77033997]
[196.32038879 -67.07663727]
[205.50463867 -55.21706009]
[210.86318970 -41.20684814]
[211.93731689 -26.24535751]
[208.63505554 -11.61336613]
[201.23913574 1.43654609]
[190.38264465 11.78723717]
[176.99499512 18.55263329]
[162.22221375 21.15357780]
[147.32893372 19.36741829]
[133.59010315 13.34706020]
[122.18185425 3.60787630]
[114.07936859 -9.01952076]
[114.39142609 5.97723293]
[114.70348358 20.97398758]
[115.01553345 35.97074127]
[115.32759094 50.96749496]
[115.63964844 65.96424866]
[128.18959045 57.74848175]
[143.12910461 56.40265656]
[156.94531250 62.24322891]
[166.38951111 73.89685822]
[169.24101257 88.62332916]
[164.82929993 102.95988464]
[154.19177246 113.53546143]
[139.82968140 117.86331940]
[125.12011719 114.92583466]
[113.52239990 105.41442108]
[124.82140350 115.28014374]
[136.12040710 125.14586639]
[147.41941833 135.01159668]
[158.71841431 144.87731934]
[170.11029053 135.07905579]
[182.78070068 127.00183868]
[196.47169495 120.81009674]
[210.90452576 116.62988281]
[225.78536987 114.54631805]
[240.81126404 114.60180664]
[255.67631531 116.79521942]
[270.07788086 121.08190155]
[283.72277832 127.37459564]
[296.33316040 135.54516602]
[307.65237427 145.42729187]
[317.44992065 156.81977844]
[325.52636719 169.49069214]
[331.71725464 183.18205261]
[335.89657593 197.61514282]
[337.97921753 212.49612427]
[337.92282104 227.52201843]
[335.72848511 242.38693237]
[331.44088745 256.78823853]
[325.14736938 270.43270874]
[316.97601318 283.04263306]
[307.09317017 294.36120605]
[295.70010376 304.15808105]
[283.02868652 312.23373413]
[269.33691406 318.42376709]
[254.90357971 322.60220337]
[240.02247620 324.68392944]
[224.99658203 324.62655640]
[210.13180542 322.43130493]
[195.73077393 318.14285278]
[182.08666992 311.84848022]
[169.47726440 303.67633057]
[158.15928650 293.79281616]
[148.36314392 282.39910889]
[140.28828430 269.72720337]
[134.09907532 256.03506470]
[129.92155457 241.60145569]
[127.84074402 226.72023010]
[127.89901733 211.69433594]
[130.09519958 196.82969666]
[134.38455200 182.42892456]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 109]
[2 108]
[3 107]
[4 106]
[5 105]
[6 44]
[7 43]
[8 42]
[9 41]
[10 40]
[11 39]
[12 38]
[18 35]
[19 34]
[20 33]
[21 32]
[22 31]
[23 30]
[45 54]
[46 53]
[47 52]
[55 95]
[56 94]
[57 93]
[58 92]
[59 91]
[60 90]
[61 70]
[62 69]
[63 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
