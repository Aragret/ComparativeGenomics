%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACCAGAUUUCAAAUUUUAUCUUUUGGCGGUAUGCACUUUUAACAGUCACCCCCCAACUAxxxxxxxxxxCACCCAAAGCUAAGAUUCUAAUUUAAACUAUUCUCUGUUCUUUCAUGGGGAAGCAGAUUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[197.66410828 443.42544556]
[197.66410828 428.42544556]
[197.66410828 413.42544556]
[197.66410828 398.42544556]
[197.66410828 383.42544556]
[197.66410828 368.42544556]
[197.66410828 353.42544556]
[197.66410828 338.42544556]
[197.66410828 323.42544556]
[197.66410828 308.42544556]
[194.41326904 293.78195190]
[188.06614685 280.19097900]
[181.71900940 266.60003662]
[176.00205994 261.83956909]
[175.38450623 252.65968323]
[169.32148743 238.93962097]
[163.25848389 225.21957397]
[156.35148621 211.90441895]
[148.62739563 199.04602051]
[140.90330505 186.18760681]
[134.72293091 182.04652405]
[133.15550232 172.98037720]
[125.70058441 159.96406555]
[118.24567413 146.94776917]
[110.79076385 133.93145752]
[103.33585358 120.91514587]
[87.33832550 116.97801971]
[79.00213623 102.76782227]
[83.37135315 86.88286591]
[75.64726257 74.02445984]
[67.92317963 61.16606140]
[60.19909668 48.30765915]
[52.47500992 35.44925690]
[41.81338501 24.89796448]
[28.87532806 17.30805779]
[15.93727303 9.71814919]
[2.99921679 2.12824035]
[-6.05013275 0.46657681]
[-10.12670326 -5.75654316]
[-22.90406036 -13.61396885]
[-38.09439850 -10.16557598]
[-50.94052124 -18.31614113]
[-54.13442612 -32.81905746]
[-66.91178131 -40.67648315]
[-75.92460632 -42.52604675]
[-79.87082672 -48.83263016]
[-92.48195648 -56.95417023]
[-105.09308624 -65.07571411]
[-120.48438263 -61.48633957]
[-133.86143494 -69.90239716]
[-137.28788757 -85.33078003]
[-128.73086548 -98.61810303]
[-113.26712036 -101.88124084]
[-100.07100677 -93.18422699]
[-96.97154236 -77.68684387]
[-84.36041260 -69.56529999]
[-71.74929047 -61.44375610]
[-59.05435562 -53.45383835]
[-46.27700043 -45.59641266]
[-31.89320946 -49.28993988]
[-18.82321930 -41.50341415]
[-15.04663467 -26.39132690]
[-2.26927733 -18.53390121]
[10.58912468 -10.80981541]
[23.52718163 -3.21990728]
[36.46523666 4.37000084]
[49.40329361 11.95990944]
[42.28599930 -1.24403417]
[38.46944427 -15.75037479]
[38.16720963 -30.74732971]
[41.39620209 -45.39566040]
[47.97573090 -58.87563705]
[57.53760147 -70.43291473]
[69.54672241 -79.42073822]
[83.33106232 -85.33615112]
[98.11923218 -87.84811401]
[113.08368683 -86.81606293]
[127.38700104 -82.29775238]
[140.22875977 -74.54602051]
[150.89031982 -63.99466705]
[158.77507019 -51.23414993]
[163.44175720 -36.97855377]
[164.62924194 -22.02563286]
[162.27107239 -7.21215820]
[156.49920654 6.63289928]
[147.63665771 18.73476219]
[136.17935181 28.41620255]
[122.76847076 35.13544083]
[108.15447998 38.51646805]
[93.15519714 38.37007523]
[78.60998535 34.70446014]
[65.33341217 27.72517014]
[73.05749512 40.58357239]
[80.78158569 53.44197464]
[88.50566864 66.30037689]
[96.22975159 79.15878296]
[108.84157562 80.75428009]
[118.26810455 89.28330231]
[121.11330414 101.67315674]
[116.35216522 113.46023560]
[123.80707550 126.47654724]
[131.26197815 139.49285889]
[138.71688843 152.50915527]
[146.17179871 165.52546692]
[153.76171875 178.46353149]
[161.48579407 191.32192993]
[169.20988464 204.18032837]
[174.28762817 190.06591797]
[187.77540588 183.50239563]
[202.01547241 188.21623230]
[208.92298889 201.53111267]
[204.57617188 215.88748169]
[191.44294739 223.13444519]
[176.97853088 219.15655518]
[183.04154968 232.87661743]
[189.10455322 246.59666443]
[195.30996704 260.25289917]
[201.65710449 273.84387207]
[208.00422668 287.43481445]
[209.62615967 272.52276611]
[215.14009094 258.57296753]
[224.15208435 246.58198547]
[236.01838684 237.40640259]
[249.89125061 231.70173645]
[264.77966309 229.87548828]
[279.62002563 232.05812073]
[293.35214233 238.09373474]
[304.99508667 247.55113220]
[313.71704102 259.75469971]
[318.89495850 273.83267212]
[320.15893555 288.77932739]
[317.41870117 303.52691650]
[310.86996460 317.02188110]
[300.98062134 328.30020142]
[288.45706177 336.55615234]
[274.19400024 341.19998169]
[259.21035767 341.89990234]
[244.57649231 338.60595703]
[231.33784485 331.55340576]
[220.44013977 321.24612427]
[212.66410828 308.42544556]
[212.66410828 323.42544556]
[212.66410828 338.42544556]
[212.66410828 353.42544556]
[212.66410828 368.42544556]
[212.66410828 383.42544556]
[212.66410828 398.42544556]
[212.66410828 413.42544556]
[212.66410828 428.42544556]
[212.66410828 443.42544556]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 119]
[12 118]
[13 117]
[15 116]
[16 115]
[17 114]
[18 107]
[19 106]
[20 105]
[22 104]
[23 103]
[24 102]
[25 101]
[26 100]
[29 96]
[30 95]
[31 94]
[32 93]
[33 92]
[34 67]
[35 66]
[36 65]
[37 64]
[39 63]
[40 62]
[43 59]
[44 58]
[46 57]
[47 56]
[48 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
