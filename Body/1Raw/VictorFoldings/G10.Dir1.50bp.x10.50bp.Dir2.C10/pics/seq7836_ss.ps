%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGGACGUCUAAACCAAACCACUUUCACCGCUACACGACCGGGGGUAUACUACGGUCAAUGCxxxxxxxxxxCAACAAUCCCCCUCUACCUAAAACUCACAGCCCUCGCUGUCACUUUCCUAGGACUUCUAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 255.26100159]
[92.50000000 240.26100159]
[92.50000000 225.26100159]
[92.50000000 210.26100159]
[92.50000000 195.26100159]
[92.50000000 180.26100159]
[92.50000000 165.26100159]
[92.50000000 150.26100159]
[92.50000000 135.26100159]
[92.50000000 120.26100159]
[80.23763275 111.62188721]
[66.11283112 116.67063904]
[55.72209930 128.60140991]
[41.13316727 125.59934998]
[27.00836372 130.64810181]
[12.88356113 135.69685364]
[14.67708492 150.65449524]
[13.09673500 165.63616943]
[8.22178078 179.89038086]
[0.29674742 192.70214844]
[-10.28084850 203.42886353]
[-22.98043823 211.53244019]
[-37.16501617 216.60644531]
[-52.12309265 218.39634705]
[-67.10437012 216.81236267]
[-81.35739899 211.93395996]
[-94.16725922 204.00581360]
[-104.89139557 193.42562866]
[-112.99191284 180.72407532]
[-118.06246948 166.53826904]
[-119.84874725 151.57975769]
[-118.26113892 136.59886169]
[-113.37927246 122.34700775]
[-105.44803619 109.53907776]
[-94.86524200 98.81749725]
[-82.16172791 90.72006989]
[-67.97469330 85.65293884]
[-53.01575089 83.87029266]
[-38.03524017 85.46153259]
[-23.78457451 90.34684753]
[-10.97856331 98.28118896]
[-0.25955001 108.86657715]
[7.83480501 121.57205963]
[21.95960808 116.52330017]
[36.08441162 111.47454834]
[45.46484375 99.90489197]
[61.06407166 102.54583740]
[75.18887329 97.49707794]
[82.50798035 84.40393066]
[79.40966034 69.72740173]
[76.31134033 55.05087662]
[73.21301270 40.37435150]
[70.11469269 25.69782448]
[55.08426285 26.20505142]
[40.19412613 24.09437561]
[25.89677811 19.42994118]
[12.62669754 12.35349560]
[0.78714913 3.08008146]
[-9.26207829 -8.10849094]
[-17.21559906 -20.87221336]
[-22.83171463 -34.82321167]
[-25.93975830 -49.53753281]
[-26.44527817 -64.56802368]
[-24.33291626 -79.45791626]
[-19.66686058 -93.75473785]
[-12.58890820 -107.02401733]
[-3.31415200 -118.86251068]
[7.87556028 -128.91047668]
[20.64018440 -136.86254883]
[34.59181976 -142.47708130]
[49.30649185 -145.58345032]
[64.33703613 -146.08726501]
[79.22669220 -143.97322083]
[93.52298737 -139.30554199]
[106.79145813 -132.22608948]
[118.62890625 -122.94998169]
[128.67559814 -111.75913239]
[136.62622070 -98.99360657]
[142.23916626 -85.04133606]
[145.34387207 -70.32630920]
[145.84599304 -55.29570770]
[143.73025513 -40.40628815]
[139.06094360 -26.11052895]
[131.97999573 -12.84285641]
[122.70254517 -1.00646317]
[111.51055908 9.03895664]
[98.74412537 16.98813438]
[84.79122162 22.59950256]
[87.88954163 37.27602768]
[90.98786163 51.95255280]
[94.08618164 66.62908173]
[97.18450928 81.30560303]
[101.50177765 66.94033051]
[101.21516418 51.94306564]
[109.59068298 39.49916458]
[123.59259033 34.11896515]
[138.14584351 37.75254059]
[147.97555542 49.08288956]
[149.51890564 64.00328064]
[142.21711731 77.10517120]
[128.97929382 84.15923309]
[143.97846985 84.31526947]
[158.97766113 84.47130585]
[168.26670837 72.18228912]
[182.84042358 67.77090454]
[197.04916382 72.72828674]
[205.51293945 84.95541382]
[220.51213074 85.11145020]
[235.51130676 85.26748657]
[250.51049805 85.42352295]
[265.50967407 85.57955933]
[279.52285767 77.06116486]
[293.77468872 85.17398834]
[293.60409546 101.57225037]
[279.18658447 109.38681793]
[265.35363770 100.57874298]
[250.35446167 100.42270660]
[235.35527039 100.26667023]
[220.35609436 100.11063385]
[205.35690308 99.95459747]
[196.64059448 112.00299835]
[182.33178711 116.66371155]
[167.85301208 111.95009613]
[158.82162476 99.47049713]
[143.82243347 99.31445312]
[128.82325745 99.15841675]
[123.49243927 104.43406677]
[136.58065796 111.76199341]
[149.66886902 119.08992004]
[164.55888367 120.90308380]
[176.21076965 130.34944153]
[181.06414795 144.54255676]
[177.63603210 159.14558411]
[166.97390747 169.69636536]
[152.33572388 172.97102356]
[138.19432068 167.96893311]
[128.87077332 156.21855164]
[127.21357727 141.31283569]
[120.02219391 128.14909363]
[112.83081055 114.98535919]
[107.50000000 120.26100159]
[107.50000000 135.26100159]
[107.50000000 150.26100159]
[107.50000000 165.26100159]
[107.50000000 180.26100159]
[107.50000000 195.26100159]
[107.50000000 210.26100159]
[107.50000000 225.26100159]
[107.50000000 240.26100159]
[107.50000000 255.26100159]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 48]
[12 47]
[14 45]
[15 44]
[16 43]
[49 92]
[50 91]
[51 90]
[52 89]
[53 88]
[101 126]
[102 125]
[103 124]
[107 120]
[108 119]
[109 118]
[110 117]
[111 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
