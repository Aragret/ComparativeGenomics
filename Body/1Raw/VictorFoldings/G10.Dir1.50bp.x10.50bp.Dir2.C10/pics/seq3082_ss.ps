%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGGCCUACUUCACAAAGCGCCUUCCCCCGUAAAUGAUAUCAUCUCAACUUAGUAUUAUACxxxxxxxxxxAACAUACUCGGAUUCUACCCUAGCAUCACACACCGCACAAUCCCCUAUCUAGGCCUUCUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-44.17358780 302.08654785]
[-56.26025772 292.89306641]
[-67.76218414 282.97772217]
[-78.63632965 272.37768555]
[-88.84199524 261.13256836]
[-100.54161835 270.51971436]
[-112.24124146 279.90689087]
[-123.94086456 289.29403687]
[-135.64048767 298.68121338]
[-147.34011841 308.06835938]
[-159.03973389 317.45553589]
[-170.73936462 326.84268188]
[-182.43898010 336.22985840]
[-194.13861084 345.61703491]
[-205.73994446 355.12536621]
[-217.24174500 364.75390625]
[-215.20448303 380.04617310]
[-221.77891541 394.00253296]
[-234.86717224 402.16958618]
[-250.29284668 401.94125366]
[-263.13366699 393.39041138]
[-269.29214478 379.24557495]
[-266.80316162 364.02029419]
[-256.46093750 352.57296753]
[-241.56562805 348.55633545]
[-226.87026978 353.25210571]
[-215.36846924 343.62356567]
[-212.23817444 336.87472534]
[-203.52577209 333.91738892]
[-191.82614136 324.53024292]
[-180.12652588 315.14306641]
[-168.42689514 305.75592041]
[-156.72727966 296.36874390]
[-145.02764893 286.98159790]
[-133.32803345 277.59442139]
[-121.62840271 268.20727539]
[-109.92877960 258.82009888]
[-98.22915649 249.43293762]
[-106.79257965 237.33837891]
[-114.61906433 224.75439453]
[-121.68072510 211.72581482]
[-127.95238495 198.29908752]
[-133.41169739 184.52206421]
[-138.03921509 170.44383240]
[-141.81843567 156.11454773]
[-144.73590088 141.58529663]
[-146.78121948 126.90785980]
[-147.94708252 112.13452148]
[-148.22933960 97.31793976]
[-147.62699890 82.51092529]
[-146.14221191 67.76622772]
[-143.78024292 53.13640213]
[-140.54951477 38.67358017]
[-136.46156311 24.42930984]
[-131.53094482 10.45434475]
[-125.77522278 -3.20150900]
[-119.21491241 -16.48958778]
[-111.87339783 -29.36253548]
[-103.77683258 -41.77448273]
[-94.95407867 -53.68119049]
[-85.43657684 -65.04022980]
[-75.25823975 -75.81111908]
[-64.45534515 -85.95548248]
[-53.06637955 -95.43716431]
[-41.13194275 -104.22236633]
[-28.69455719 -112.27980042]
[-15.79854965 -119.58073425]
[-2.48987365 -126.09915161]
[11.18404102 -131.81182861]
[25.17446518 -136.69842529]
[39.43154526 -140.74148560]
[53.90446854 -143.92663574]
[68.54165649 -146.24250793]
[83.29095459 -147.68086243]
[98.09980011 -148.23655701]
[112.91542053 -147.90762329]
[127.68500519 -146.69523621]
[142.35594177 -144.60371399]
[156.87593079 -141.64050293]
[171.19322205 -137.81616211]
[185.25682068 -133.14431763]
[199.01658630 -127.64163971]
[212.42349243 -121.32772064]
[225.42974854 -114.22506714]
[237.98902893 -106.35897827]
[250.05656433 -97.75750732]
[261.58932495 -88.45128632]
[272.54626465 -78.47348785]
[282.88830566 -67.85968018]
[292.57858276 -56.64766693]
[301.58258057 -44.87741852]
[314.02200317 -53.25956345]
[326.46145630 -61.64170456]
[333.58221436 -75.76988983]
[348.46057129 -76.46549225]
[360.89999390 -84.84764099]
[373.33944702 -93.22978210]
[383.09600830 -107.09504700]
[399.12030029 -101.55804443]
[398.23565674 -84.62719727]
[381.72158813 -80.79034424]
[369.28213501 -72.40819550]
[356.84271240 -64.02605438]
[350.61169434 -50.49742126]
[334.84359741 -49.20226669]
[322.40414429 -40.82012177]
[309.96472168 -32.43798065]
[317.66967773 -19.35204697]
[324.56008911 -5.81948280]
[330.61019897 8.10906982]
[335.79730225 22.38148880]
[340.10205078 36.94436646]
[343.50827026 51.74320221]
[346.00329590 66.72262573]
[347.57772827 81.82657623]
[348.22567749 96.99852753]
[347.94476318 112.18171692]
[346.73599243 127.31932068]
[344.60394287 142.35469055]
[341.55651855 157.23156738]
[337.60516357 171.89427185]
[332.76467896 186.28794861]
[327.05313110 200.35871887]
[320.49194336 214.05392456]
[313.10565186 227.32234192]
[304.92190552 240.11430359]
[295.97128296 252.38192749]
[286.28735352 264.07934570]
[275.90628052 275.16271973]
[264.86694336 285.59063721]
[253.21067810 295.32406616]
[240.98107910 304.32653809]
[228.22389221 312.56442261]
[214.98689270 320.00686646]
[201.31959534 326.62600708]
[187.27314758 332.39706421]
[172.90010071 337.29849243]
[158.25427246 341.31192017]
[143.39042664 344.42233276]
[128.36422729 346.61807251]
[113.23188019 347.89093018]
[98.05001831 348.23617554]
[82.87545776 347.65249634]
[67.76496887 346.14202881]
[52.77511597 343.71051025]
[37.96198273 340.36697388]
[23.38100243 336.12396240]
[9.08673859 330.99734497]
[-4.86731672 325.00631714]
[-18.42894554 318.17330933]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 38]
[6 37]
[7 36]
[8 35]
[9 34]
[10 33]
[11 32]
[12 31]
[13 30]
[14 29]
[15 27]
[16 26]
[91 107]
[92 106]
[93 105]
[95 103]
[96 102]
[97 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
