%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAAAAAUAAAAUGACAGUUUGAACAUACAAAACCCACCCCAUUCCUCCCCACACUCAUCGCCxxxxxxxxxxUUUCCUAGGACUUCUAACAGCCCUAGACCUCAACUACCUAACCAACAAACUUAAAAUAAAAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[169.77320862 102.64675903]
[161.43176270 91.25944519]
[153.86756897 79.34146118]
[140.67927551 86.48770905]
[127.49097443 93.63395691]
[114.30268097 100.78019714]
[106.82416534 112.59389496]
[92.84356689 112.40809631]
[79.65526581 119.55434418]
[66.46697235 126.70058441]
[53.27867508 133.84683228]
[68.24739838 134.81498718]
[82.01965332 140.75846863]
[92.99263000 150.98558044]
[99.88929749 164.30609131]
[101.90702057 179.16976929]
[98.81098175 193.84677124]
[90.96149445 206.62901306]
[79.27207947 216.02888489]
[65.10314941 220.95243835]
[50.10367203 220.82667542]
[36.01929092 215.66622925]
[24.48913956 206.07167053]
[16.85508919 193.15960693]
[14.00558853 178.43275452]
[16.27226257 163.60499573]
[23.39131737 150.40200806]
[34.53490448 140.35990906]
[19.75695801 142.93136597]
[4.97901344 145.50280762]
[-9.79893112 148.07426453]
[-18.68690491 161.14251709]
[-34.22771835 164.01631165]
[-47.20127869 154.99067688]
[-49.91060638 139.42034912]
[-40.74830627 126.54293060]
[-25.15020370 123.99837494]
[-12.37037945 133.29631042]
[2.40756488 130.72486877]
[17.18550873 128.15341187]
[31.96345520 125.58196259]
[46.13243103 120.65853882]
[59.32072449 113.51229095]
[72.50902557 106.36604309]
[85.69731903 99.21980286]
[93.17583466 87.40610504]
[107.15643311 87.59190369]
[120.34473419 80.44565582]
[133.53303528 73.29941559]
[146.72132874 66.15316772]
[140.12913513 51.50895691]
[134.66600037 36.40745926]
[130.36332703 20.93557549]
[127.24581909 5.18233204]
[125.33137512 -10.76162243]
[124.63097382 -26.80454826]
[125.14860535 -42.85413742]
[126.88124084 -58.81805038]
[129.81887817 -74.60443878]
[133.94456482 -90.12248230]
[139.23452759 -105.28291321]
[145.65830994 -119.99850464]
[153.17887878 -134.18461609]
[161.75296021 -147.75962830]
[171.33116150 -160.64549255]
[181.85836792 -172.76805115]
[193.27395630 -184.05761719]
[205.51222229 -194.44924927]
[218.50271606 -203.88317871]
[232.17068481 -212.30517578]
[246.43746948 -219.66682434]
[261.22094727 -225.92578125]
[276.43606567 -231.04609680]
[291.99526978 -234.99833679]
[307.80899048 -237.75979614]
[323.78628540 -239.31463623]
[339.83517456 -239.65396118]
[355.86334229 -238.77584839]
[371.77859497 -236.68537903]
[387.48931885 -233.39465332]
[402.90518188 -228.92262268]
[417.93743896 -223.29505920]
[432.49966431 -216.54437256]
[446.50805664 -208.70945740]
[459.88204956 -199.83543396]
[472.54473877 -189.97337341]
[484.42327881 -179.18006897]
[495.29516602 -189.51457214]
[506.16705322 -199.84907532]
[517.03894043 -210.18357849]
[527.91082764 -220.51808167]
[523.18731689 -235.03190613]
[525.23736572 -250.15672302]
[533.65399170 -262.88946533]
[546.76605225 -270.70208740]
[561.97009277 -272.04336548]
[576.24743652 -266.64694214]
[586.76318359 -255.58435059]
[591.42956543 -241.05204773]
[589.31994629 -225.93542480]
[580.85321045 -213.23590088]
[567.71051025 -205.47499084]
[552.50128174 -204.19361877]
[538.24536133 -209.64619446]
[527.37347412 -199.31169128]
[516.50152588 -188.97718811]
[505.62966919 -178.64268494]
[494.75778198 -168.30818176]
[503.75329590 -157.44120789]
[512.00482178 -145.99884033]
[519.47564697 -134.03192139]
[526.13250732 -121.59362030]
[531.94586182 -108.73922729]
[536.88983154 -95.52587128]
[540.94232178 -82.01227570]
[544.08544922 -68.25849915]
[546.30511475 -54.32567978]
[547.59143066 -40.27574158]
[547.93872070 -26.17114258]
[547.34533691 -12.07457161]
[545.81396484 1.95130670]
[543.35137939 15.84414291]
[539.96844482 29.54217911]
[535.68023682 42.98451996]
[530.50573730 56.11140442]
[524.46795654 68.86447906]
[517.59375000 81.18703461]
[509.91360474 93.02429962]
[501.46166992 104.32362366]
[492.27545166 115.03478241]
[482.39578247 125.11014557]
[471.86660767 134.50491333]
[460.73464966 143.17729187]
[449.04943848 151.08871460]
[436.86285400 158.20402527]
[424.22906494 164.49153137]
[411.20422363 169.92330933]
[397.84622192 174.47514343]
[384.21444702 178.12681580]
[370.36944580 180.86206055]
[356.37280273 182.66868591]
[342.28668213 183.53866577]
[328.17373657 183.46806335]
[314.09667969 182.45721436]
[300.11807251 180.51055908]
[286.30010986 177.63674927]
[272.70416260 173.84851074]
[259.39068604 169.16268921]
[246.41888428 163.60006714]
[233.84642029 157.18534851]
[221.72918701 149.94705200]
[210.12106323 141.91729736]
[199.07365417 133.13179016]
[188.63607788 123.62955475]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 50]
[4 49]
[5 48]
[6 47]
[8 45]
[9 44]
[10 43]
[11 42]
[28 41]
[29 40]
[30 39]
[31 38]
[87 108]
[88 107]
[89 106]
[90 105]
[91 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
