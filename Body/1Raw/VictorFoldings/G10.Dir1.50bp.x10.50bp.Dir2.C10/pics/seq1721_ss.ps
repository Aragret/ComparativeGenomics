%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUCAAAGGACAUUUAACUAAAACCCCUACGCAUUUAUAUAGAGGAGACAAGUCGUAACAUGxxxxxxxxxxUGUAGUAUAAACUAAUACACCAGUCUUGUAAACCGGAGAUGAAAACCUUUUUCCAAGGACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[118.96447754 312.34460449]
[118.96447754 297.34460449]
[118.96447754 282.34460449]
[118.96447754 267.34460449]
[118.96447754 252.34458923]
[118.96447754 237.34458923]
[118.96447754 222.34458923]
[118.96447754 207.34458923]
[118.96447754 192.34458923]
[118.96447754 177.34458923]
[116.20822906 162.59999084]
[110.78960419 148.61291504]
[105.37097931 134.62582397]
[99.95235443 120.63874054]
[95.36244965 120.11102295]
[91.00494385 118.57549286]
[87.09819794 116.10911560]
[74.10781860 123.60911560]
[71.44321442 128.24107361]
[67.63161469 131.06549072]
[63.57102966 131.94938660]
[60.07871246 131.14257812]
[46.65126038 137.82865906]
[33.22381210 144.51473999]
[26.78265381 159.20796204]
[11.24260139 163.19374084]
[-1.47534478 153.41450500]
[-1.61506605 137.37205505]
[10.93062019 127.37278748]
[26.53773689 131.08728027]
[39.96518707 124.40120697]
[53.39263535 117.71513367]
[66.60781860 110.61872864]
[79.59819794 103.11872864]
[82.34191895 89.31579590]
[93.29572296 80.48045349]
[93.91154480 65.49310303]
[86.74733734 51.38690948]
[95.00063324 38.98802185]
[95.61645508 24.00066948]
[87.44925690 13.96570873]
[88.30704498 1.45828903]
[97.18109131 -6.81899691]
[98.10450745 -21.79054642]
[99.02791595 -36.76209641]
[99.95133209 -51.73364639]
[100.87474823 -66.70520020]
[88.70354462 -57.93810272]
[73.86864471 -60.15750504]
[64.79615784 -72.10279083]
[66.63919067 -86.98913574]
[78.35091400 -96.36119843]
[93.27915192 -94.89572144]
[102.94502258 -83.42433167]
[105.70126343 -98.16893005]
[108.45751190 -112.91352844]
[111.21375275 -127.65811920]
[113.96999359 -142.40272522]
[105.30664825 -155.34814453]
[108.31191254 -170.26200867]
[120.70679474 -178.44140625]
[123.46303558 -193.18600464]
[121.95984650 -202.25993347]
[126.43020630 -208.20367432]
[129.48860168 -222.88856506]
[132.54699707 -237.57347107]
[133.77760315 -252.52290344]
[133.16178894 -267.51025391]
[132.54595947 -282.49761963]
[118.51372528 -288.50253296]
[108.48303223 -300.00680542]
[104.44548798 -314.72619629]
[107.20273590 -329.73822021]
[116.20733643 -342.06216431]
[129.67140198 -349.25115967]
[144.92166138 -349.87777710]
[158.93013000 -343.81762695]
[168.91543579 -332.27395630]
[172.89498901 -317.53878784]
[170.07864380 -302.53775024]
[161.02558899 -290.24932861]
[147.53330994 -283.11343384]
[148.14913940 -268.12606812]
[148.76496887 -253.13873291]
[163.31192017 -249.48002625]
[170.94488525 -262.39273071]
[178.57785034 -275.30541992]
[178.20506287 -291.70031738]
[192.35575867 -299.98828125]
[206.47290039 -291.64334106]
[206.03401184 -275.25006104]
[191.49055481 -267.67245483]
[183.85758972 -254.75975037]
[176.22460938 -241.84706116]
[166.31584167 -234.23335266]
[155.87232971 -232.03900146]
[147.23188782 -234.51507568]
[144.17349243 -219.83016968]
[141.11509705 -205.14527893]
[138.20762634 -190.42976379]
[135.45138550 -175.68516541]
[144.05453491 -163.58055115]
[141.46934509 -148.58816528]
[128.71458435 -139.64646912]
[125.95835114 -124.90187836]
[123.20210266 -110.15727997]
[120.44586182 -95.41268921]
[117.68962097 -80.66809082]
[115.84629822 -65.78178406]
[114.92288208 -50.81023407]
[113.99946594 -35.83868408]
[113.07605743 -20.86713219]
[112.15264130 -5.89558315]
[120.82228851 9.33207989]
[110.60381317 24.61649513]
[109.98798370 39.60384750]
[117.19624329 52.63804626]
[108.89890289 66.10892487]
[108.28307343 81.09628296]
[120.36096954 96.62496948]
[113.93943787 115.22011566]
[119.35806274 129.20719910]
[124.77668762 143.19429016]
[130.19531250 157.18136597]
[132.89601135 142.42649841]
[139.94818115 129.18765259]
[150.68627930 118.71420288]
[164.09695435 111.99453735]
[178.91461182 109.66280365]
[193.74089050 111.93905640]
[207.17662048 118.60847473]
[217.95385742 129.04165649]
[225.05552673 142.25401306]
[227.81143188 156.99867249]
[225.96151733 171.88415527]
[219.68032837 185.50570679]
[209.56066895 196.57785034]
[196.55751038 204.05567932]
[181.89799500 207.23350525]
[166.96554565 205.81143188]
[153.16938782 199.92366028]
[141.81146240 190.12582397]
[133.96447754 177.34458923]
[133.96447754 192.34458923]
[133.96447754 207.34458923]
[133.96447754 222.34458923]
[133.96447754 237.34458923]
[133.96447754 252.34458923]
[133.96447754 267.34460449]
[133.96447754 282.34460449]
[133.96447754 297.34460449]
[133.96447754 312.34460449]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 124]
[12 123]
[13 122]
[14 121]
[17 34]
[18 33]
[22 32]
[23 31]
[24 30]
[36 119]
[37 118]
[39 116]
[40 115]
[43 113]
[44 112]
[45 111]
[46 110]
[47 109]
[54 108]
[55 107]
[56 106]
[57 105]
[58 104]
[61 101]
[62 100]
[64 99]
[65 98]
[66 97]
[67 84]
[68 83]
[69 82]
[85 94]
[86 93]
[87 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
