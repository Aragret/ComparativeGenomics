%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCAUAUCCCUCUAGAGGAGCCUGUUCUGUAAUCGAUAAACCCCGAUCAACCUCACCACCUCxxxxxxxxxxAUUCACACGAGAAAACACCCUCAUGUUCAUACACCUAUCCCCCAUUCUCCUCCUAUCCCUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[89.18342590 410.41607666]
[89.18342590 395.41607666]
[89.18342590 380.41607666]
[89.18342590 365.41607666]
[89.18342590 350.41607666]
[89.18342590 335.41607666]
[89.18342590 320.41607666]
[89.18342590 305.41607666]
[89.18342590 290.41607666]
[89.18342590 275.41607666]
[74.97850037 272.36090088]
[61.71931076 266.40399170]
[49.99166489 257.80575562]
[40.31427383 246.94331360]
[33.11582565 234.29405212]
[28.71599770 220.41456604]
[27.31125069 205.91621399]
[28.96606445 191.43814087]
[33.60998535 177.61917114]
[41.04061127 165.06953430]
[50.93242264 154.34400940]
[62.85103607 145.91732788]
[76.27228546 140.16320801]
[90.60526276 137.33773804]
[90.91323853 122.34089661]
[91.22121429 107.34405518]
[87.86196136 92.72505188]
[81.03838348 79.36695099]
[74.21480560 66.00885010]
[59.44825745 61.05034637]
[52.71847153 47.40612793]
[57.53665161 33.35903931]
[50.71307755 20.00093842]
[43.88949966 6.64283895]
[37.06592560 -6.71526051]
[19.47505379 -7.78995371]
[5.59155369 -20.76184845]
[2.95036364 -40.96850586]
[-10.61153221 -47.37747955]
[-28.89243126 -45.41805267]
[-38.35852051 -60.16382217]
[-52.04914474 -66.29299164]
[-65.73976898 -72.42217255]
[-79.43039703 -78.55134583]
[-92.81687927 -70.70394135]
[-108.25602722 -72.25714111]
[-119.81116486 -82.61370850]
[-123.03910828 -97.79132080]
[-116.69865417 -111.95388794]
[-103.22782898 -119.65560150]
[-87.80644226 -117.93501282]
[-76.36433411 -107.45370483]
[-73.30122375 -92.24196625]
[-59.61059570 -86.11279297]
[-45.91997147 -79.98361969]
[-32.22934723 -73.85444641]
[-20.77936745 -77.87442780]
[-9.30197716 -72.83052826]
[-4.20255709 -60.93937683]
[9.35933971 -54.53039932]
[22.03085518 -62.55739975]
[22.03085518 -77.55739594]
[22.03085518 -92.55739594]
[7.34226942 -95.90301514]
[-6.23334646 -102.43374634]
[-18.01504517 -111.82199860]
[-27.41186142 -123.59687042]
[-33.95245361 -137.16773987]
[-37.30875015 -151.85388184]
[-37.31240082 -166.91867065]
[-33.96322250 -181.60644531]
[-27.42920685 -195.18048096]
[-18.03809738 -206.95989990]
[-6.26094961 -216.35386658]
[7.31150007 -222.89117432]
[21.99846268 -226.24391174]
[37.06324768 -226.24391174]
[51.75020981 -222.89117432]
[65.32266235 -216.35386658]
[77.09980774 -206.95989990]
[86.49091339 -195.18048096]
[93.02493286 -181.60644531]
[96.37411499 -166.91867065]
[96.37046051 -151.85388184]
[93.01416779 -137.16773987]
[86.47357178 -123.59687042]
[77.07675934 -111.82199860]
[65.29505920 -102.43374634]
[51.71944046 -95.90301514]
[37.03085709 -92.55739594]
[37.03085709 -77.55739594]
[37.03085709 -62.55739975]
[55.36504745 -50.18401718]
[60.00159073 -30.09128380]
[50.42402649 -13.53883553]
[57.24760056 -0.18073660]
[64.07117462 13.17736244]
[70.89475250 26.53546143]
[85.10005951 30.86498833]
[92.21042633 44.31479645]
[87.57290649 59.18527603]
[94.39648438 72.54337311]
[101.22005463 85.90147400]
[113.97331238 93.79795837]
[128.97251892 93.95195007]
[143.97172546 94.10594940]
[149.01510620 79.82858276]
[158.42301941 67.96393585]
[171.17497253 59.79899216]
[185.88774109 56.21942520]
[200.96537781 57.61351776]
[214.77238464 63.83005142]
[225.81108093 74.19470215]
[232.88406372 87.58319092]
[235.22410583 102.54323578]
[232.57739258 117.45207977]
[225.23101807 130.69252014]
[213.98184204 140.82833862]
[200.05010986 146.76008606]
[184.94702148 147.84431458]
[170.31085205 143.96342468]
[157.72923279 135.53837585]
[148.56689453 123.48306274]
[143.81773376 109.10515594]
[128.81852722 108.95116425]
[113.81932068 108.79716492]
[109.79784393 108.72692871]
[106.21805573 107.65203094]
[105.91007996 122.64887238]
[105.60209656 137.64570618]
[120.65859222 141.36607361]
[134.51036072 148.32682800]
[146.47023010 158.17919922]
[155.94567871 170.43107605]
[162.46810913 184.47155762]
[165.71611023 199.60140991]
[165.53123474 215.06791687]
[161.92576599 230.10229492]
[155.08190918 243.95791626]
[145.34262085 255.94743347]
[133.19442749 265.47680664]
[119.24308777 272.07473755]
[104.18342590 275.41607666]
[104.18342590 290.41607666]
[104.18342590 305.41607666]
[104.18342590 320.41607666]
[104.18342590 335.41607666]
[104.18342590 350.41607666]
[104.18342590 365.41607666]
[104.18342590 380.41607666]
[104.18342590 395.41607666]
[104.18342590 410.41607666]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[24 130]
[25 129]
[26 128]
[27 103]
[28 102]
[29 101]
[32 98]
[33 97]
[34 96]
[35 95]
[38 60]
[39 59]
[41 56]
[42 55]
[43 54]
[44 53]
[61 92]
[62 91]
[63 90]
[104 126]
[105 125]
[106 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
