%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCAAAAAAAUAAACCCUCGUUCCACAGAAGCUGCCAUCAAGUAUUUCCUCACGCAAGCAxxxxxxxxxxCCCCUCACAAUCAUGGCAAGCCAACGCCACUUAUCCAGUGAACCACUAUCACGAAAAAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[97.54963684 412.77224731]
[97.54963684 397.77224731]
[97.54963684 382.77224731]
[97.54963684 367.77224731]
[97.54963684 352.77224731]
[97.54963684 337.77224731]
[97.54963684 322.77224731]
[97.54963684 307.77224731]
[97.54963684 292.77224731]
[97.54963684 277.77224731]
[82.01759338 273.45962524]
[68.30188751 264.96429443]
[57.50324631 252.95890808]
[50.49086380 238.39816284]
[47.83242798 222.44288635]
[49.74816895 206.36750793]
[56.09263992 191.45825195]
[66.36572266 178.91024780]
[79.75204468 169.73170471]
[95.18571472 164.66290283]
[94.56173706 149.67587280]
[93.93775940 134.68885803]
[82.53678131 130.57946777]
[73.20409393 122.84835815]
[67.04501343 112.41115570]
[64.78900909 100.50402832]
[66.70326996 88.53720093]
[72.56108093 77.92799377]
[81.66865540 69.93290710]
[76.76710510 55.75635147]
[71.86555481 41.57979584]
[66.96400452 27.40323639]
[57.85895538 39.32372665]
[42.86820984 39.85056305]
[32.94878769 28.59866714]
[35.35098648 13.79226971]
[48.31899261 6.25364494]
[62.37378311 11.49244785]
[58.07423019 6.33285952]
[57.20666885 0.63385594]
[59.14654541 -3.79473138]
[56.35422134 -18.53253746]
[53.56189728 -33.27034378]
[50.61641693 -47.97830582]
[47.51809311 -62.65483093]
[44.41977310 -77.33135223]
[41.32144928 -92.00788116]
[38.22312927 -106.68441010]
[23.23781013 -105.61014557]
[8.24579430 -106.58646393]
[-6.47362947 -109.59516907]
[-20.64624786 -114.58021545]
[-34.00802994 -121.44873047]
[-46.31005859 -130.07275391]
[-57.32315445 -140.29164124]
[-66.84214783 -151.91499329]
[-74.68970490 -164.72630310]
[-80.71962738 -178.48689270]
[-84.81959534 -192.94039917]
[-86.91321564 -207.81758118]
[-86.96148682 -222.84127808]
[-84.96350861 -237.73161316]
[-80.95651245 -252.21116638]
[-75.01513672 -266.01022339]
[-67.25006866 -278.87170410]
[-57.80596542 -290.55599976]
[-46.85876846 -300.84542847]
[-34.61241150 -309.54833984]
[-21.29504204 -316.50256348]
[-7.15475082 -321.57858276]
[7.54503489 -324.68182373]
[22.53046799 -325.75445557]
[37.52237701 -324.77651978]
[52.24147797 -321.76620483]
[66.41355896 -316.77963257]
[79.77459717 -309.90966797]
[92.07569122 -301.28433228]
[103.08767700 -291.06423950]
[112.60541534 -279.43984985]
[120.45158386 -266.62768555]
[126.48001862 -252.86645508]
[130.57841492 -238.41250610]
[132.67042542 -223.53509521]
[132.71707153 -208.51139832]
[130.71748352 -193.62127686]
[126.70892334 -179.14215088]
[120.76605225 -165.34375000]
[112.99959564 -152.48310852]
[103.55422974 -140.79983521]
[92.60591125 -130.51158142]
[80.35861969 -121.81000519]
[67.04049683 -114.85721588]
[52.89965439 -109.78273010]
[55.99797440 -95.10620117]
[59.09629822 -80.42967987]
[62.19461823 -65.75315094]
[65.29293823 -51.07662582]
[69.78085327 -45.14330673]
[68.29970551 -36.06266785]
[71.09202576 -21.32486153]
[73.88435364 -6.58705568]
[76.98267365 8.08946991]
[81.14056396 22.50168610]
[86.04211426 36.67824554]
[90.94366455 50.85480118]
[95.84521484 65.03135681]
[120.87603760 71.64053345]
[134.62393188 93.57723999]
[149.61662292 94.04528046]
[164.60931396 94.51332092]
[179.60200500 94.98136139]
[192.23205566 85.08886719]
[207.80711365 88.93560791]
[214.37931824 103.57069397]
[206.90704346 117.76734161]
[191.12237549 120.63509369]
[179.13397217 109.97406006]
[164.14128113 109.50601959]
[149.14857483 109.03797150]
[134.15588379 108.56993103]
[132.45523071 113.66478729]
[129.99951172 118.44172668]
[126.84586334 122.78963470]
[123.06766510 126.60734558]
[118.75279999 129.80604553]
[114.00165558 132.31132507]
[108.92477417 134.06488037]
[109.54875183 149.05189514]
[110.17272949 164.03892517]
[123.80271912 166.99896240]
[136.30888367 173.15177917]
[146.95629883 182.13047791]
[155.12054443 193.40223694]
[160.32435608 206.29995728]
[162.26548767 220.06173706]
[160.83430481 233.87585449]
[156.11990356 246.92868042]
[148.40463257 258.45260620]
[138.14715576 267.77111816]
[125.95523071 274.33862305]
[112.54963684 277.77224731]
[112.54963684 292.77224731]
[112.54963684 307.77224731]
[112.54963684 322.77224731]
[112.54963684 337.77224731]
[112.54963684 352.77224731]
[112.54963684 367.77224731]
[112.54963684 382.77224731]
[112.54963684 397.77224731]
[112.54963684 412.77224731]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[20 129]
[21 128]
[22 127]
[29 106]
[30 105]
[31 104]
[32 103]
[38 102]
[41 101]
[42 100]
[43 99]
[44 97]
[45 96]
[46 95]
[47 94]
[48 93]
[108 120]
[109 119]
[110 118]
[111 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
