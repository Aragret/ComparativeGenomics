%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAGAGAAAUAAGGCCUACUUCACAAAGCGCCUUCCCCCGUAAAUGAUAUCAUCUCAACUUAxxxxxxxxxxAUAAAUAGUACCGUUAACUUCCAAUUAACUAGUUUUGACAACAUUCAAAAAAGAGUAAUAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[100.74565125 282.35778809]
[100.74565125 267.35778809]
[100.74565125 252.35777283]
[100.74565125 237.35777283]
[100.74565125 222.35777283]
[100.74565125 207.35777283]
[100.74565125 192.35777283]
[100.74565125 177.35777283]
[100.74565125 162.35777283]
[100.74565125 147.35777283]
[80.29739380 139.91348267]
[66.53470612 124.81098175]
[61.71136093 106.32389832]
[46.71847534 105.86196899]
[31.72558975 105.40004730]
[16.73270416 104.93811798]
[0.75400710 114.03273010]
[-13.81182766 104.29204559]
[-28.81103706 104.13804626]
[-43.67763519 106.13410187]
[-58.10502243 110.23904419]
[-72.53240204 114.34399414]
[-86.95979309 118.44893646]
[-101.38717651 122.55387878]
[-115.77165222 126.80673218]
[-130.11170959 131.20703125]
[-134.17909241 146.08856201]
[-145.66162109 156.39172363]
[-160.89527893 158.82879639]
[-175.01904297 152.62214661]
[-183.52609253 139.75227356]
[-183.70184326 124.32591248]
[-175.49023438 111.26555634]
[-161.51153564 104.73872375]
[-146.22630310 106.82809448]
[-134.51202393 116.86696625]
[-120.17195892 112.46666718]
[-114.66603851 107.46695709]
[-105.49211884 108.12649536]
[-91.06473541 104.02155304]
[-76.63735199 99.91661072]
[-62.20996475 95.81166077]
[-47.78258133 91.70671844]
[-62.07454300 87.15262604]
[-73.60359192 77.55673981]
[-80.67607880 64.32873535]
[-82.25301361 49.41186142]
[-78.10275269 34.99744797]
[-68.83497620 23.20302582]
[-55.81115723 15.76124191]
[-40.94454193 13.76531887]
[-26.41908455 17.50846481]
[-14.36863232 26.44079781]
[-6.56343508 39.25012589]
[-4.15010595 54.05471420]
[-7.48317146 68.67971802]
[-16.07299232 80.97666931]
[-28.65703964 89.13883972]
[-13.65783119 89.29283142]
[-4.76471329 81.03604126]
[7.77201462 81.07855225]
[17.19462967 89.94523621]
[32.18751526 90.40715790]
[47.18040085 90.86908722]
[62.17328644 91.33100891]
[74.15145874 71.05411530]
[95.64904785 61.43731308]
[96.87966156 46.48788071]
[98.11027527 31.53844452]
[84.14772034 25.71587753]
[72.66913605 15.86208057]
[64.79907227 2.94243193]
[61.30856705 -11.77733517]
[62.53957367 -26.85512733]
[68.37149811 -40.81377411]
[78.23297882 -52.28575516]
[91.15789795 -60.14715576]
[105.88000488 -63.62779999]
[120.95696259 -62.38669205]
[134.91169739 -56.54541779]
[146.37707520 -46.67624664]
[154.22981262 -33.74606323]
[157.70059204 -19.02163124]
[156.44937134 -3.94550228]
[150.59875488 10.00531769]
[140.72190857 21.46407127]
[127.78646088 29.30814552]
[113.05970764 32.76905823]
[111.82909393 47.71849060]
[110.59848022 62.66792679]
[115.84686279 64.57559204]
[120.76710510 67.21678925]
[125.25733185 70.53681946]
[129.22454834 74.46694183]
[142.21493530 66.96694183]
[155.20532227 59.46694183]
[168.19569397 51.96694183]
[181.18608093 44.46694183]
[183.72314453 29.03654099]
[195.61875916 18.88623810]
[211.25614929 18.80869484]
[223.25183105 28.84052467]
[225.94180298 44.24500656]
[218.05595398 57.74861145]
[203.31773376 62.97535324]
[188.68608093 57.45732498]
[175.69569397 64.95732117]
[162.70532227 72.45732117]
[149.71493530 79.95732117]
[136.72454834 87.45732117]
[140.40147400 93.34182739]
[143.08537292 100.10549164]
[144.58613586 107.57225037]
[144.74610901 115.52739716]
[158.99281311 120.22119904]
[173.23950195 124.91500092]
[187.48619080 129.60879517]
[201.73287964 134.30259705]
[215.97958374 138.99639893]
[229.97601318 131.65640259]
[245.03804016 136.44291687]
[252.22964478 150.51615906]
[247.28416443 165.52674866]
[233.13566589 172.56916809]
[218.17820740 167.46525574]
[211.28578186 153.24308777]
[197.03907776 148.54930115]
[182.79238892 143.85549927]
[168.54570007 139.16169739]
[154.29901123 134.46789551]
[140.05232239 129.77409363]
[133.97564697 134.17001343]
[144.22796631 145.11944580]
[154.48028564 156.06886292]
[168.05043030 162.46035767]
[172.49147034 176.78785706]
[164.91532898 189.73397827]
[150.24888611 192.87965393]
[138.02993774 184.17922974]
[136.20507812 169.28933716]
[129.01370239 156.12559509]
[121.82231903 142.96185303]
[115.74565125 147.35777283]
[115.74565125 162.35777283]
[115.74565125 177.35777283]
[115.74565125 192.35777283]
[115.74565125 207.35777283]
[115.74565125 222.35777283]
[115.74565125 237.35777283]
[115.74565125 252.35777283]
[115.74565125 267.35778809]
[115.74565125 282.35778809]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[13 65]
[14 64]
[15 63]
[16 62]
[18 59]
[19 58]
[20 43]
[21 42]
[22 41]
[23 40]
[24 39]
[25 37]
[26 36]
[67 90]
[68 89]
[69 88]
[94 110]
[95 109]
[96 108]
[97 107]
[98 106]
[114 131]
[115 130]
[116 129]
[117 128]
[118 127]
[119 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
