%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAAACUCAAAGGACCUGGCGGUGCUUCAUAUCCCUCUAGAGGAGCCUGUUCUGUAAUCGAxxxxxxxxxxUUCACAACAAUCCUAAUCCUAAUACCAACUAUCUCCCUAAUUGAAAACAAAAUACUCAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[90.82091522 303.02282715]
[90.82091522 288.02282715]
[90.82091522 273.02282715]
[90.82091522 258.02282715]
[90.82091522 243.02282715]
[90.82091522 228.02282715]
[90.82091522 213.02282715]
[90.82091522 198.02282715]
[90.82091522 183.02282715]
[90.82091522 168.02282715]
[84.51535034 163.96206665]
[77.32396698 177.12580872]
[75.77247620 192.04534912]
[62.24960327 198.53625488]
[49.63848877 190.41470337]
[49.95364761 175.41801453]
[62.89477158 167.83343506]
[71.90422058 155.84051514]
[65.59865570 151.77975464]
[51.94241714 157.98515320]
[38.28617477 164.19056702]
[28.92314911 176.94377136]
[14.13516235 175.16481018]
[0.47892162 181.37020874]
[-13.17731953 187.57562256]
[-22.26965332 201.22338867]
[-38.61557388 199.90319824]
[-45.39979935 184.97314453]
[-35.64329910 171.79199219]
[-19.38272667 173.91937256]
[-5.72648525 167.71397400]
[7.92975569 161.50856018]
[16.31599617 149.19920349]
[32.08076859 150.53431702]
[45.73700714 144.32891846]
[59.39324951 138.12350464]
[53.30599213 127.47064209]
[49.85256195 116.04671478]
[49.06686020 104.47360229]
[50.84170151 93.34912109]
[54.94124222 83.21623230]
[61.01987076 74.53650665]
[68.64626312 67.66927338]
[77.33109283 62.85722351]
[86.55671692 60.21916580]
[95.80702972 59.74994659]
[104.59596252 61.32733154]
[109.20152283 47.05187225]
[113.80709076 32.77641296]
[113.46807098 23.58201599]
[118.65980530 18.25364494]
[123.56135559 4.07708788]
[128.46290588 -10.09947014]
[133.36445618 -24.27602768]
[124.65281677 -36.98088837]
[125.08753967 -52.20141220]
[134.29243469 -64.10662079]
[148.57160950 -68.25907135]
[153.47315979 -82.43563080]
[158.37471008 -96.61219025]
[153.43942261 -108.57449341]
[157.86143494 -120.30755615]
[168.74453735 -125.68022919]
[173.93995667 -139.75173950]
[179.13536072 -153.82327271]
[166.04934692 -161.22274780]
[154.31983948 -170.62567139]
[144.25067139 -181.78845215]
[136.10263062 -194.42198181]
[130.08680725 -208.19897461]
[126.35899353 -222.76261902]
[125.01576996 -237.73565674]
[126.09191895 -252.73027039]
[129.55957031 -267.35803223]
[135.32890320 -281.24008179]
[143.25047302 -294.01678467]
[153.11911011 -305.35726929]
[164.67916870 -314.96774292]
[177.63122559 -322.59927368]
[191.63978577 -328.05422974]
[206.34201050 -331.19125366]
[221.35705566 -331.92910767]
[236.29600525 -330.24868774]
[250.77191162 -326.19351196]
[264.40982056 -319.86865234]
[276.85644531 -311.43789673]
[287.78939819 -301.11962891]
[296.92550659 -289.18115234]
[304.02813721 -275.93167114]
[308.91326904 -261.71435547]
[311.45440674 -246.89750671]
[311.58569336 -231.86491394]
[309.30374146 -217.00595093]
[304.66769409 -202.70549011]
[297.79757690 -189.33396912]
[288.87136841 -177.23771667]
[278.12030029 -166.73007202]
[265.82284546 -158.08320618]
[252.29750061 -151.52108765]
[237.89462280 -147.21369934]
[222.98730469 -145.27261353]
[207.96165466 -145.74810791]
[193.20687866 -148.62785339]
[188.01147461 -134.55633545]
[182.81605530 -120.48480988]
[186.73471069 -103.40721893]
[172.55126953 -91.71063995]
[167.64971924 -77.53408051]
[162.74816895 -63.35752106]
[171.41311646 -51.27212906]
[171.29882812 -36.22384262]
[162.23954773 -23.98525620]
[147.54101562 -19.37447739]
[142.63946533 -5.19791937]
[137.73791504 8.97863865]
[132.83636475 23.15519714]
[128.08255005 37.38197708]
[123.47698975 51.65743637]
[118.87142181 65.93289948]
[146.89035034 93.62596893]
[139.01612854 139.74986267]
[152.10928345 147.06896973]
[165.20243835 154.38807678]
[181.58357239 153.61972046]
[190.21063232 167.56625366]
[182.20881653 181.88069153]
[165.80973816 181.83755493]
[157.88333130 167.48123169]
[144.79017639 160.16212463]
[131.69702148 152.84301758]
[125.22799683 156.63796997]
[133.20935059 169.33828735]
[141.19071960 182.03858948]
[153.87255859 190.04927063]
[153.62594604 205.04724121]
[140.68759155 212.63665771]
[127.47642517 205.53276062]
[126.67270660 190.55535889]
[119.48132324 177.39161682]
[112.28993988 164.22787476]
[105.82091522 168.02282715]
[105.82091522 183.02282715]
[105.82091522 198.02282715]
[105.82091522 213.02282715]
[105.82091522 228.02282715]
[105.82091522 243.02282715]
[105.82091522 258.02282715]
[105.82091522 273.02282715]
[105.82091522 288.02282715]
[105.82091522 303.02282715]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[19 36]
[20 35]
[21 34]
[23 32]
[24 31]
[25 30]
[47 119]
[48 118]
[49 117]
[51 116]
[52 115]
[53 114]
[54 113]
[58 109]
[59 108]
[60 107]
[63 105]
[64 104]
[65 103]
[121 130]
[122 129]
[123 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
