%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGCCUCACCCCACUACUAGGCCUCCUCCUAGCAGCAGCAGGCAAAUCAGCCCAAUUAGGUCUxxxxxxxxxxCAAAUCAGCCCAAUUAGGUCUCCACCCCUGACUCCCCUCAGCCAUAGAAGGCCCCACCCCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[87.86519623 546.10449219]
[90.45097351 526.89605713]
[90.75894928 511.89920044]
[91.06693268 496.90237427]
[91.37490845 481.90551758]
[91.68288422 466.90869141]
[91.99085999 451.91186523]
[92.29884338 436.91500854]
[92.60681915 421.91818237]
[92.91479492 406.92132568]
[93.22277069 391.92449951]
[78.29036713 387.72103882]
[64.93792725 379.80249023]
[54.07204056 368.69985962]
[46.43217468 355.16049194]
[42.54037094 340.09793091]
[42.66556549 324.53009033]
[46.80501938 309.51062012]
[54.68411255 296.05752563]
[65.77455902 285.08416748]
[79.32981873 277.33728027]
[94.43535614 273.34609985]
[94.43535614 258.34609985]
[86.69805145 245.61882019]
[94.43535614 231.81864929]
[94.43535614 216.81864929]
[94.43535614 201.81864929]
[94.28135681 186.81944275]
[93.97338104 171.82260132]
[93.66540527 156.82575989]
[79.59585571 153.41316223]
[66.83444214 146.57618713]
[56.19930267 136.75314331]
[48.37227631 124.57382965]
[43.85516357 110.81906128]
[42.93755341 96.37066650]
[28.22203064 93.46319580]
[13.50650692 90.55572510]
[4.41762209 91.96567535]
[-1.47991407 87.43453217]
[-16.13263893 84.22553253]
[-31.58753586 89.70989990]
[-43.88729095 78.86332703]
[-40.37897110 62.84384918]
[-24.67163277 58.13092422]
[-12.92364311 69.57280731]
[1.72908211 72.78180695]
[16.41398048 75.84020233]
[31.12950134 78.74767303]
[45.84502411 81.65514374]
[53.02441025 67.40262604]
[63.86319351 55.68943787]
[77.51702881 47.42803955]
[92.92229462 43.26199722]
[108.87890625 43.51584244]
[113.13175201 29.13136292]
[117.38459778 14.74688148]
[121.63744354 0.36240005]
[112.73002625 -10.90603924]
[111.52503967 -25.05370522]
[118.24066162 -37.37652588]
[130.49160767 -43.87756348]
[132.02890015 -58.79858017]
[133.56619263 -73.71959686]
[135.10348511 -88.64060974]
[128.82124329 -103.16108704]
[137.82217407 -115.02837372]
[139.35946655 -129.94938660]
[137.11691284 -138.86941528]
[141.08457947 -145.15986633]
[142.92790222 -160.04617310]
[129.41749573 -166.91966248]
[119.07501221 -178.00158691]
[113.14935303 -191.95373535]
[112.35607147 -207.09130859]
[116.79095459 -221.58641052]
[125.91847229 -233.68864441]
[138.63642883 -241.93663025]
[153.40908813 -245.33438110]
[168.45254517 -243.47158813]
[181.95025635 -236.57321167]
[192.27229309 -225.47225952]
[198.17224121 -211.50921631]
[198.93762207 -196.37019348]
[194.47602844 -181.88330078]
[185.32623291 -169.79791260]
[172.59309387 -161.57336426]
[157.81420898 -158.20285034]
[155.97088623 -143.31654358]
[154.28048706 -128.41209412]
[152.74319458 -113.49108124]
[159.13537598 -100.03785706]
[150.02449036 -87.10331726]
[148.48719788 -72.18230438]
[146.94990540 -57.26128769]
[145.41261292 -42.34027100]
[148.85124207 -40.44755554]
[151.93458557 -38.01865387]
[165.07621765 -45.25035477]
[178.21784973 -52.48205948]
[186.23973083 -66.78525543]
[202.63874817 -66.71912384]
[210.54499817 -52.35168457]
[201.82521057 -38.46293259]
[185.44955444 -39.34042740]
[172.30792236 -32.10872269]
[159.16629028 -24.87702179]
[154.61228943 -4.96179247]
[136.02192688 4.61524677]
[131.76907349 18.99972725]
[127.51623535 33.38420868]
[123.26338959 47.76868820]
[135.77772522 55.39899445]
[145.94105530 65.96009827]
[153.08552551 78.75801086]
[156.74166870 92.95176697]
[156.66925049 107.60867310]
[152.87300110 121.76559448]
[145.60238647 134.49227905]
[135.33517456 144.95242310]
[122.74604797 152.45866394]
[108.66223907 156.51779175]
[108.97021484 171.51463318]
[109.27819824 186.51145935]
[112.59991455 195.08828735]
[109.43535614 201.81864929]
[109.43535614 216.81864929]
[109.43535614 231.81864929]
[117.17265320 245.61882019]
[109.43535614 258.34609985]
[109.43535614 273.34609985]
[123.51960754 276.92919922]
[136.32252502 283.78594971]
[147.09661865 293.51083374]
[155.21409607 305.53103638]
[160.20343018 319.14028931]
[161.77676392 333.54010010]
[159.84651184 347.88684082]
[154.53018188 361.34112549]
[146.14331055 373.11685181]
[135.18067932 382.52713013]
[122.28710938 389.02447510]
[108.21961212 392.23248291]
[107.91163635 407.22930908]
[107.60365295 422.22616577]
[107.29567719 437.22299194]
[106.98770142 452.21981812]
[106.67972565 467.21667480]
[106.37174225 482.21350098]
[106.06376648 497.21035767]
[105.75579071 512.20715332]
[105.44781494 527.20404053]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 152]
[3 151]
[4 150]
[5 149]
[6 148]
[7 147]
[8 146]
[9 145]
[10 144]
[11 143]
[22 131]
[23 130]
[25 128]
[26 127]
[27 126]
[28 124]
[29 123]
[30 122]
[36 50]
[37 49]
[38 48]
[40 47]
[41 46]
[55 112]
[56 111]
[57 110]
[58 109]
[62 96]
[63 95]
[64 94]
[65 93]
[67 91]
[68 90]
[70 89]
[71 88]
[98 107]
[99 106]
[100 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
