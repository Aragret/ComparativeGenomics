%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAUUGAAACCUGGCGCAAUAGAUAUAGUACCGCAAGGGAAAGAUGAAAAAUUAUAACCAAxxxxxxxxxxUCCGUACUAUACUUCACAACAAUCCUAAUCCUAAUACCAACUAUCUCCCUAAUUGAAAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 251.49005127]
[92.50000000 236.49005127]
[92.50000000 221.49005127]
[92.50000000 206.49005127]
[92.50000000 191.49005127]
[92.50000000 176.49005127]
[92.50000000 161.49005127]
[92.50000000 146.49005127]
[92.50000000 131.49005127]
[92.50000000 116.49005127]
[86.69933319 111.73587036]
[79.50794983 124.89961243]
[72.31656647 138.06335449]
[70.47264862 152.94958496]
[59.35722733 163.02168274]
[44.36185074 163.39416504]
[32.76006699 153.88635254]
[30.17934799 139.11001587]
[37.87147522 126.23247528]
[52.10736465 121.50006866]
[63.60267639 111.86379242]
[75.09799194 102.22751617]
[69.29731750 97.47333527]
[54.58935547 100.41881561]
[39.88139343 103.36429596]
[37.31333923 118.32322693]
[29.51155281 131.34231567]
[17.53116798 140.66082764]
[2.99243069 145.01852417]
[-12.13841438 143.82606506]
[-25.81504440 137.24470520]
[-36.18780518 126.16454315]
[-41.85387039 112.08405304]
[-42.04694748 96.90751648]
[-36.74092865 82.68743896]
[-26.65340424 71.34696960]
[-13.14863110 64.41980743]
[1.94697988 62.84280014]
[16.59187317 66.82922363]
[28.80544472 75.83994293]
[36.93591309 88.65633392]
[51.64387512 85.71085358]
[66.35183716 82.76537323]
[86.78802490 78.59954834]
[99.89065552 87.50513458]
[107.07316589 74.33655548]
[114.25567627 61.16797256]
[121.43818665 47.99938965]
[128.62069702 34.83080673]
[128.84535217 28.11835289]
[131.99060059 23.28733063]
[136.38578796 21.27292061]
[144.10986328 8.41451931]
[151.83395386 -4.44388342]
[139.71119690 -13.29514980]
[128.43066406 -23.19746971]
[118.08319855 -34.07111359]
[108.75209808 -45.82852936]
[100.51250458 -58.37505722]
[93.43075562 -71.60967255]
[87.56386566 -85.42581940]
[82.95907593 -99.71224976]
[79.65346527 -114.35394287]
[77.67364502 -129.23300171]
[77.03556061 -144.22964478]
[77.74433899 -159.22309875]
[79.79428101 -174.09266663]
[83.16888428 -188.71861267]
[87.84098053 -202.98318481]
[93.77293396 -216.77151489]
[100.91699982 -229.97259521]
[109.21566010 -242.48013306]
[118.60208130 -254.19343567]
[129.00070190 -265.01815796]
[140.32778931 -274.86718750]
[152.49214172 -283.66122437]
[165.39581299 -291.32940674]
[178.93493652 -297.81005859]
[193.00045776 -303.05096436]
[207.47917175 -307.00991821]
[222.25447083 -309.65505981]
[237.20739746 -310.96511841]
[252.21755981 -310.92950439]
[267.16409302 -309.54852295]
[281.92666626 -306.83328247]
[296.38644409 -302.80566406]
[310.42694092 -297.49807739]
[323.93515015 -290.95327759]
[336.80230713 -283.22393799]
[348.92477417 -274.37231445]
[360.20501709 -264.46963501]
[370.55215454 -253.59567261]
[379.88287354 -241.83796692]
[388.12210083 -229.29119873]
[395.20346069 -216.05636597]
[401.06991577 -202.24003601]
[405.67425537 -187.95346069]
[408.97943115 -173.31167603]
[410.95880127 -158.43254089]
[411.59643555 -143.43589783]
[410.88717651 -128.44245911]
[408.83679199 -113.57295227]
[405.46173096 -98.94710541]
[400.78921509 -84.68268585]
[394.85684204 -70.89453125]
[387.71237183 -57.69367218]
[379.41333008 -45.18638229]
[370.02655029 -33.47337341]
[359.62759399 -22.64895248]
[348.30020142 -12.80026913]
[336.13558960 -4.00662518]
[323.23165894 3.66117883]
[309.69235229 10.14140511]
[295.62667847 15.38187695]
[281.14785767 19.34040070]
[266.37246704 21.98510361]
[251.41949463 23.29469109]
[236.40933228 23.25862122]
[221.46284485 21.87718391]
[206.70034790 19.16149902]
[192.24070740 15.13343525]
[178.20036316 9.82542324]
[164.69235229 3.28020167]
[156.96827698 16.13860321]
[149.24418640 28.99700737]
[141.78927612 42.01331711]
[134.60676575 55.18190002]
[127.42426300 68.35047913]
[120.24175262 81.51906586]
[113.05924225 94.68764496]
[124.64125824 85.15575409]
[139.38034058 82.37021637]
[153.64215088 87.01788330]
[163.91000366 97.95274353]
[167.65206909 112.47848511]
[163.94560242 127.01334381]
[153.70457458 137.97332764]
[139.45420837 142.65592957]
[124.70832825 139.90650940]
[113.10299683 130.40303040]
[107.50000000 116.49005127]
[107.50000000 131.49005127]
[107.50000000 146.49005127]
[107.50000000 161.49005127]
[107.50000000 176.49005127]
[107.50000000 191.49005127]
[107.50000000 206.49005127]
[107.50000000 221.49005127]
[107.50000000 236.49005127]
[107.50000000 251.49005127]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[23 43]
[24 42]
[25 41]
[45 130]
[46 129]
[47 128]
[48 127]
[49 126]
[52 125]
[53 124]
[54 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
