%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:33:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACUUCUAACCUCCCUGUUCUUAUGAAUUCGAACAGCAUACCCCCGAUUCCGCUACGACCAxxxxxxxxxxUGAUUUUUUACCUGAGUAGGCCUAGAAAUAAACAUGCUAGCUUUUAUUCCAGUUCUAACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-45.74459076 174.46444702]
[-59.40083313 180.66986084]
[-73.05707550 186.87525940]
[-86.71331024 193.08067322]
[-100.36955261 199.28608704]
[-111.87136078 208.91461182]
[-120.38244629 221.26617432]
[-128.89353943 233.61775208]
[-137.40463257 245.96932983]
[-145.91572571 258.32089233]
[-140.62696838 272.90887451]
[-144.95521545 287.81005859]
[-157.23614502 297.29470825]
[-172.74751282 297.71572876]
[-185.52485657 288.91122437]
[-190.65504456 274.26675415]
[-186.16542053 259.41339111]
[-173.78230286 250.06253052]
[-158.26728821 249.80979919]
[-149.75619507 237.45823669]
[-141.24511719 225.10665894]
[-132.73402405 212.75508118]
[-124.22293091 200.40351868]
[-132.08035278 187.62615967]
[-146.94340515 189.64849854]
[-161.80645752 191.67082214]
[-176.66949463 193.69316101]
[-191.53254700 195.71549988]
[-206.39558411 197.73783875]
[-212.13728333 211.98312378]
[-224.24226379 221.43643188]
[-239.45436096 223.55484009]
[-253.68159485 217.76852417]
[-263.09692383 205.63397217]
[-265.16763306 190.41531372]
[-259.33676147 176.20628357]
[-247.17272949 166.82905579]
[-231.94766235 164.80604553]
[-217.75698853 170.68144226]
[-208.41792297 182.87478638]
[-193.55488586 180.85244751]
[-178.69183350 178.83010864]
[-163.82878113 176.80778503]
[-148.96574402 174.78544617]
[-134.10269165 172.76310730]
[-126.40983582 172.19581604]
[-119.41168213 173.62709045]
[-113.58193970 176.67436218]
[-109.24845886 180.85409546]
[-106.57495880 185.62983704]
[-92.91872406 179.42443848]
[-79.26248169 173.21902466]
[-65.60623932 167.01361084]
[-51.94999695 160.80821228]
[-56.02962494 149.40846252]
[-59.25532913 137.73831177]
[-61.60945511 125.86162567]
[-63.07912445 113.84340668]
[-63.65628433 101.74942017]
[-63.33778381 89.64585876]
[-62.12536621 77.59896851]
[-60.02566147 65.67467499]
[-57.05016327 53.93823242]
[-53.21515656 42.45388031]
[-48.54162979 31.28446960]
[-43.05516052 20.49112701]
[-36.78577805 10.13292313]
[-29.76778603 0.26654610]
[-22.03959846 -9.05400658]
[-13.64350986 -17.77772713]
[-4.62546968 -25.85686874]
[4.96516800 -33.24721909]
[15.07591534 -39.90832520]
[25.65143776 -45.80374146]
[36.63385773 -50.90119934]
[47.96306610 -55.17279816]
[59.57706833 -58.59516525]
[71.41229248 -61.14956665]
[83.40397644 -62.82202530]
[95.48648834 -63.60338593]
[107.59370422 -63.48937607]
[119.65935516 -62.48061371]
[131.61741638 -60.58262253]
[143.40243530 -57.80579376]
[154.94993591 -54.16531754]
[166.19668579 -49.68112183]
[177.08116150 -44.37774658]
[187.54379272 -38.28421783]
[197.52729797 -31.43388367]
[206.97706604 -23.86423492]
[215.84135437 -15.61669731]
[226.93266296 -25.71534729]
[238.02398682 -35.81399536]
[242.48675537 -51.59422684]
[258.44848633 -55.35661697]
[269.48910522 -43.23074341]
[264.25097656 -27.69066429]
[248.12263489 -24.72268105]
[237.03132629 -14.62403107]
[225.94000244 -4.52538157]
[237.34100342 10.98375988]
[246.84225464 27.72419357]
[254.31236267 45.46436310]
[259.64797974 63.95888138]
[262.77532959 82.95192719]
[263.65109253 102.18078613]
[262.26324463 121.37948608]
[277.02929688 124.01834869]
[291.79534912 126.65721130]
[306.56140137 129.29608154]
[321.32745361 131.93493652]
[336.09350586 134.57380676]
[345.93170166 122.77951050]
[360.35452271 117.49951172]
[375.48226929 120.15410614]
[387.24566650 130.02922058]
[392.48040771 144.46850586]
[389.77841187 159.58786011]
[379.86648560 171.32025146]
[365.41085815 176.50971985]
[350.30004883 173.76034546]
[338.59878540 163.81167603]
[333.45465088 149.33985901]
[318.68859863 146.70100403]
[303.92254639 144.06213379]
[289.15649414 141.42326355]
[274.39044189 138.78440857]
[259.62435913 136.14553833]
[255.11740112 152.20182800]
[248.99989319 167.71611023]
[241.33535767 182.52731323]
[232.20336914 196.48165894]
[221.69874573 209.43424988]
[209.93055725 221.25062561]
[197.02098083 231.80807495]
[183.10406494 240.99700928]
[168.32429504 248.72198486]
[152.83512878 254.90283203]
[136.79739380 259.47537231]
[120.37760925 262.39208984]
[103.74623871 263.62274170]
[87.07597351 263.15457153]
[70.53989410 260.99237061]
[54.30969238 257.15863037]
[38.55388260 251.69316101]
[23.43605423 244.65269470]
[9.11316776 236.11033630]
[-4.26606274 226.15478516]
[-16.56272507 214.88938904]
[-27.64914513 202.43112183]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 54]
[2 53]
[3 52]
[4 51]
[5 50]
[6 23]
[7 22]
[8 21]
[9 20]
[10 19]
[24 45]
[25 44]
[26 43]
[27 42]
[28 41]
[29 40]
[91 100]
[92 99]
[93 98]
[107 128]
[108 127]
[109 126]
[110 125]
[111 124]
[112 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
