%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAAUACAACCCCCGCCCAUCCUACCCAGCACACACACACCGCUGCUAACCCCAUACCCCGxxxxxxxxxxCUAAUAGCUAUCCUCUUCAACAAUAUACUCUCCGGACAAUGAACCAUAACCAAUACUACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-15.34857273 288.71755981]
[-23.60086250 301.24353027]
[-31.85315132 313.76947021]
[-32.98421097 329.55020142]
[-46.44729233 335.92160034]
[-54.69958496 348.44757080]
[-62.95187378 360.97351074]
[-71.20416260 373.49948120]
[-79.45645142 386.02545166]
[-73.11347961 400.08853149]
[-75.40310669 415.34503174]
[-85.59472656 426.92666626]
[-100.43622589 431.13778687]
[-115.19173431 426.63464355]
[-125.15282440 414.85412598]
[-127.14095306 399.55541992]
[-120.52170563 385.62023926]
[-107.40727234 377.49526978]
[-91.98241425 377.77316284]
[-83.73012543 365.24719238]
[-75.47783661 352.72122192]
[-67.22554779 340.19528198]
[-58.97325516 327.66931152]
[-58.43245697 312.78451538]
[-44.37911224 305.51718140]
[-36.12682343 292.99124146]
[-27.87453461 280.46527100]
[-51.12725830 261.49353027]
[-71.59770966 239.54867554]
[-88.90902710 215.03472900]
[-102.74250793 188.40296936]
[-112.84347534 160.14369202]
[-119.02597046 130.77717590]
[-121.17616272 100.84403992]
[-119.25448608 70.89537048]
[-113.29630280 41.48252106]
[-127.61890411 37.02570343]
[-141.94149780 32.56888962]
[-156.26409912 28.11207199]
[-167.03718567 38.98402023]
[-181.63221741 43.59309006]
[-196.69537354 40.88015366]
[-208.76524353 31.46862602]
[-215.06825256 17.52120399]
[-214.15603638 2.24290419]
[-206.23818970 -10.85543156]
[-193.13420105 -18.76390266]
[-177.85523987 -19.66519928]
[-163.91233826 -13.35220909]
[-154.50944519 -1.27561390]
[-151.80728149 13.78947544]
[-137.48468018 18.24629021]
[-123.16208649 22.70310593]
[-108.83948517 27.15992165]
[-104.91641235 16.76015663]
[-100.47583008 6.57061195]
[-95.52894592 -3.38297868]
[-90.08825684 -13.07547760]
[-84.16750336 -22.48240471]
[-77.78163910 -31.58000755]
[-70.94678497 -40.34530640]
[-63.68021393 -48.75616455]
[-56.00027084 -56.79133987]
[-47.92634964 -64.43054199]
[-39.47884369 -71.65447998]
[-30.67908669 -78.44490814]
[-21.54930115 -84.78467560]
[-12.11254501 -90.65776825]
[-2.39265084 -96.04936218]
[7.58583403 -100.94583893]
[17.79770851 -105.33483124]
[28.21718597 -109.20524597]
[38.81794739 -112.54732513]
[49.57322311 -115.35261536]
[60.45585251 -117.61403656]
[71.43834686 -119.32587433]
[82.49297333 -120.48381805]
[93.59181976 -121.08492279]
[104.70684052 -121.12768555]
[115.80998230 -120.61199951]
[126.87319183 -119.53915405]
[137.86853027 -117.91186523]
[148.76824951 -115.73425293]
[159.54478455 -113.01180267]
[170.17094421 -109.75138855]
[180.61990356 -105.96125793]
[190.86524963 -101.65097809]
[200.88110352 -96.83142853]
[210.64219666 -91.51478577]
[220.12387085 -85.71446991]
[229.30216980 -79.44514465]
[238.15391541 -72.72262573]
[246.65675354 -65.56390381]
[254.78921509 -57.98704910]
[262.53076172 -50.01120377]
[269.86184692 -41.65650940]
[276.76391602 -32.94406128]
[283.21960449 -23.89586449]
[289.21255493 -14.53477287]
[294.72766113 -4.88442469]
[299.75100708 5.03080702]
[304.26986694 15.18588161]
[308.27282715 25.55515289]
[311.74981689 36.11243439]
[314.69204712 46.83106232]
[317.09207153 57.68396759]
[318.94381714 68.64373779]
[320.24264526 79.68270111]
[320.98522949 90.77297211]
[321.16973877 101.88655090]
[320.79568481 112.99536133]
[319.86401367 124.07135773]
[318.37707520 135.08656311]
[316.33862305 146.01315308]
[313.75381470 156.82353210]
[310.62918091 167.49041748]
[306.97259521 177.98684692]
[302.79333496 188.28631592]
[298.10189819 198.36283875]
[292.91015625 208.19093323]
[287.23123169 217.74578857]
[281.07946777 227.00329590]
[274.47036743 235.94004822]
[267.42065430 244.53349304]
[259.94815063 252.76191711]
[252.07167053 260.60455322]
[243.81114197 268.04156494]
[235.18740845 275.05419922]
[226.22227478 281.62472534]
[216.93836975 287.73657227]
[207.35914612 293.37429810]
[197.50877380 298.52368164]
[187.41215515 303.17166138]
[177.09477234 307.30654907]
[166.58268738 310.91787720]
[155.90245056 313.99655151]
[145.08103943 316.53479004]
[134.14576721 318.52615356]
[123.12426758 319.96563721]
[112.04436493 320.84957886]
[100.93404388 321.17581177]
[89.82136536 320.94345093]
[78.73439789 320.15307617]
[67.70112610 318.80673218]
[56.74943161 316.90780640]
[45.90696335 314.46105957]
[35.20110703 311.47271729]
[24.65889740 307.95028687]
[14.30696011 303.90270996]
[4.17144060 299.34014893]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 27]
[2 26]
[3 25]
[5 23]
[6 22]
[7 21]
[8 20]
[9 19]
[36 54]
[37 53]
[38 52]
[39 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
