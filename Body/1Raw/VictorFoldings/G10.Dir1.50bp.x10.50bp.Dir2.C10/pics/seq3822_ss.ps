%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGCCAUCAUUCUACUAUCAACAUUACUAAUAAGUGGCUCCUUUAACCUCUCCACCCUUAUCxxxxxxxxxxCAUGCCUCAGGAUACUCCUCAAUAGCCAUCGCUGUAGUAUAUCCAAAGACAACCAUCAUUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 250.66839600]
[92.50000000 235.66839600]
[92.50000000 220.66839600]
[92.50000000 205.66839600]
[92.50000000 190.66839600]
[92.50000000 175.66839600]
[92.50000000 160.66839600]
[92.50000000 145.66839600]
[92.50000000 130.66839600]
[92.50000000 115.66839600]
[80.16871643 107.12793732]
[66.12673950 112.40267181]
[52.08476257 117.67741394]
[38.04278564 122.95215607]
[24.00081062 128.22689819]
[9.95883369 133.50164795]
[-1.36042345 147.98974609]
[-18.53625298 144.52052307]
[-32.46696854 150.08245850]
[-46.39768600 155.64440918]
[-45.63225174 170.76699829]
[-49.82098770 185.31805420]
[-58.50952911 197.71917725]
[-70.75540924 206.62519836]
[-85.23028564 211.07005310]
[-100.36402893 210.57159424]
[-114.51504517 205.18388367]
[-126.14834595 195.49136353]
[-134.00202942 182.54537964]
[-137.22418213 167.75022888]
[-135.46530151 152.71078491]
[-128.91618347 139.05839539]
[-118.28720093 128.27398682]
[-104.73132324 121.52735901]
[-89.71898651 119.55034637]
[-74.87862396 122.55738831]
[-61.82000351 130.22232056]
[-51.95962143 141.71368408]
[-38.02890396 136.15174866]
[-24.09819031 130.58981323]
[-19.01346016 119.57129669]
[-7.40258932 114.84276581]
[4.68409252 119.45966339]
[18.72606850 114.18492126]
[32.76804352 108.91017914]
[46.81002045 103.63543701]
[60.85199738 98.36069489]
[74.89397430 93.08596039]
[88.26899719 83.97592926]
[100.52221680 86.33226776]
[108.15518951 73.41957092]
[115.78815460 60.50687408]
[123.42112732 47.59417725]
[114.16297150 28.76862526]
[120.86618805 7.54290962]
[141.49652100 -3.79279423]
[139.95922852 -18.71380997]
[138.42193604 -33.63482666]
[123.43296051 -34.94905472]
[108.96365356 -39.07647324]
[95.53706360 -45.86788177]
[83.63855743 -55.07776642]
[73.69825745 -66.37320709]
[66.07550049 -79.34587097]
[61.04583740 -93.52680969]
[58.79109955 -108.40338898]
[59.39278412 -123.43783569]
[62.82914734 -138.08665466]
[68.97595978 -151.82029724]
[77.61102295 -164.14231873]
[88.42218781 -174.60728455]
[101.01863098 -182.83686829]
[114.94499969 -188.53358459]
[129.69787598 -191.49153137]
[144.74392700 -191.60372925]
[159.53927612 -188.86616516]
[173.54905701 -183.37779236]
[186.26684570 -175.33699036]
[197.23289490 -165.03443909]
[206.05078125 -152.84259033]
[212.40174866 -139.20214844]
[216.05621338 -124.60620880]
[216.88206482 -109.58241272]
[214.84945679 -94.67385101]
[210.03186035 -80.41947937]
[202.60343933 -67.33456421]
[192.83271790 -55.89212036]
[181.07289124 -46.50579453]
[167.74909973 -39.51488876]
[153.34295654 -35.17211914]
[154.88024902 -20.25110245]
[156.41754150 -5.33008671]
[169.00598145 2.82657886]
[183.25267029 -1.86722171]
[197.49935913 -6.56102228]
[211.74604797 -11.25482273]
[225.99275208 -15.94862366]
[214.19602966 -25.21348381]
[213.87402344 -40.21002579]
[225.26217651 -49.97272110]
[240.03341675 -47.36304092]
[247.38696289 -34.28919983]
[241.94631958 -20.31126595]
[256.59902954 -23.52026367]
[271.25177002 -26.72925949]
[285.90447998 -29.93825531]
[300.55722046 -33.14725113]
[312.30520630 -44.58913803]
[328.01254272 -39.87621307]
[331.52087402 -23.85673523]
[319.22109985 -13.01016521]
[303.76620483 -18.49452591]
[289.11349487 -15.28553009]
[274.46075439 -12.07653427]
[259.80804443 -8.86753750]
[245.15531921 -5.65854168]
[230.68653870 -1.70193136]
[216.43984985 2.99186921]
[202.19316101 7.68566990]
[187.94647217 12.37947083]
[173.69978333 17.07327080]
[174.73751831 31.02439880]
[169.88146973 43.66176224]
[160.41952515 52.70272064]
[148.43002319 56.69168091]
[136.33383179 55.22714615]
[128.70085144 68.13984680]
[121.06788635 81.05254364]
[113.43491364 93.96524048]
[123.94032288 83.25839996]
[137.81463623 77.55723572]
[152.81292725 77.78422546]
[166.50836182 83.90264130]
[176.68495178 94.92249298]
[181.69606018 109.06069183]
[180.73085022 124.02960968]
[173.94552612 137.40718079]
[162.43797302 147.02882385]
[148.07017517 151.33772278]
[133.16694641 149.63664246]
[120.13969421 142.20086670]
[111.09632874 130.23350525]
[107.50000000 115.66839600]
[107.50000000 130.66839600]
[107.50000000 145.66839600]
[107.50000000 160.66839600]
[107.50000000 175.66839600]
[107.50000000 190.66839600]
[107.50000000 205.66839600]
[107.50000000 220.66839600]
[107.50000000 235.66839600]
[107.50000000 250.66839600]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 48]
[12 47]
[13 46]
[14 45]
[15 44]
[16 43]
[18 40]
[19 39]
[20 38]
[50 129]
[51 128]
[52 127]
[53 126]
[56 92]
[57 91]
[58 90]
[93 121]
[94 120]
[95 119]
[96 118]
[97 117]
[103 116]
[104 115]
[105 114]
[106 113]
[107 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
