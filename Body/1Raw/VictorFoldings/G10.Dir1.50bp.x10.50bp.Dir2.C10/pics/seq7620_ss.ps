%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAUACUAACAUCUCAGACGCUCAGGAAAUAGAAACCGUCUGAACUAUCCUGCCCGCCAUCxxxxxxxxxxAAAUAAAUUAAAAAAACUAUUAAACCCAUAUAACCUCCCCCAAAAUUCAGAAUAAUAACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[263.85910034 102.03643799]
[249.04135132 104.36753845]
[237.67112732 113.98874664]
[222.83619690 108.49008942]
[208.01843262 110.82119751]
[193.20068359 113.15229797]
[181.83045959 122.77349854]
[166.99552917 117.27484894]
[152.17776489 119.60594940]
[137.36001587 121.93705750]
[122.54225159 124.26815796]
[109.52593994 131.72306824]
[100.01758575 143.32441711]
[101.82611847 159.02488708]
[91.93772125 171.35351562]
[76.21900940 172.99594116]
[63.99560928 162.97775269]
[62.51945496 147.24255371]
[72.66631317 135.12576294]
[88.41624451 133.81605530]
[97.92459869 122.21470642]
[88.30076599 116.56330872]
[83.44623566 107.67261505]
[68.44704437 107.82865143]
[53.44785690 107.98468781]
[38.44866943 108.14072418]
[23.44948006 108.29676056]
[8.45029259 108.45279694]
[-6.54889584 108.60883331]
[-11.56147766 122.91442108]
[-21.16696358 134.64089966]
[-34.20544434 142.37225342]
[-49.10246277 145.17488098]
[-64.05912781 142.71034241]
[-77.26934814 135.27624512]
[-87.13793182 123.77029419]
[-92.47319794 109.58188629]
[-92.63088226 94.42434692]
[-87.59194183 80.12802124]
[-77.96486664 68.41925812]
[-64.91215515 60.71195221]
[-50.01000214 57.93679047]
[-35.05790329 60.42889023]
[-21.86140060 67.88732147]
[-12.01403904 79.41143799]
[-6.70493221 93.60964203]
[8.29425621 93.45360565]
[23.29344368 93.29756927]
[38.29263306 93.14153290]
[53.29182053 92.98549652]
[68.29100800 92.82946014]
[83.29019928 92.67342377]
[90.45697021 83.50265503]
[102.15625000 80.24549103]
[113.97626495 84.75090027]
[121.08758545 95.81808472]
[120.21115112 109.45040131]
[135.02890015 107.11929321]
[149.84666443 104.78819275]
[164.66442871 102.45708466]
[177.09449768 92.66915131]
[190.86956787 98.33454132]
[205.68733215 96.00343323]
[220.50509644 93.67233276]
[232.93516541 83.88439178]
[246.71023560 89.54978180]
[261.52798462 87.21868134]
[260.28393555 72.26358795]
[260.13485718 57.25758362]
[261.08154297 42.28073120]
[263.11895752 27.41293335]
[266.23620605 12.73352242]
[270.41668701 -1.67918026]
[275.63809204 -15.74827671]
[281.87252808 -29.39870262]
[289.08676147 -42.55762482]
[297.24230957 -55.15483093]
[306.29562378 -67.12311554]
[316.19842529 -78.39862061]
[326.89785767 -88.92118073]
[338.33688354 -98.63465118]
[350.45440674 -107.48721313]
[363.18582153 -115.43163300]
[376.46316528 -122.42552185]
[390.21560669 -128.43156433]
[404.36978149 -133.41770935]
[418.85015869 -137.35737610]
[433.57949829 -140.22950745]
[448.47918701 -142.01879883]
[463.46975708 -142.71571350]
[478.47119141 -142.31652832]
[493.40344238 -140.82334900]
[508.18688965 -138.24417114]
[522.74261475 -134.59274292]
[536.99298096 -129.88856506]
[550.86199951 -124.15670776]
[564.27551270 -117.42776489]
[577.16210938 -109.73764038]
[589.45300293 -101.12737274]
[601.08258057 -91.64289093]
[611.98883057 -81.33480072]
[622.11346436 -70.25810242]
[631.40258789 -58.47189331]
[639.80657959 -46.03906250]
[647.28063965 -33.02594757]
[653.78485107 -19.50197220]
[659.28448486 -5.53929853]
[663.75024414 8.78757668]
[667.15832520 23.40221405]
[669.49047852 38.22663498]
[670.73425293 53.18174744]
[670.88311768 68.18775177]
[669.93615723 83.16458893]
[667.89849854 98.03235626]
[664.78100586 112.71171570]
[660.60028076 127.12435150]
[655.37866211 141.19335938]
[649.14398193 154.84368896]
[641.92956543 168.00248718]
[633.77380371 180.59956360]
[624.72027588 192.56768799]
[614.81732178 203.84303284]
[604.11767578 214.36541748]
[592.67852783 224.07870483]
[580.56085205 232.93107605]
[567.82928467 240.87527466]
[554.55181885 247.86895752]
[540.79931641 253.87477112]
[526.64501953 258.86068726]
[512.16461182 262.80010986]
[497.43521118 265.67199707]
[482.53549194 267.46105957]
[467.54492188 268.15771484]
[452.54348755 267.75827026]
[437.61123657 266.26486206]
[422.82785034 263.68542480]
[408.27215576 260.03378296]
[394.02188110 255.32934570]
[380.15301514 249.59725952]
[366.73953247 242.86810303]
[353.85308838 235.17778015]
[341.56234741 226.56729126]
[329.93292236 217.08262634]
[319.02685547 206.77435303]
[308.90237427 195.69749451]
[299.61343384 183.91113281]
[291.20965576 171.47816467]
[283.73583984 158.46492004]
[277.23187256 144.94084167]
[271.73245239 130.97807312]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 67]
[2 66]
[4 64]
[5 63]
[6 62]
[8 60]
[9 59]
[10 58]
[11 57]
[12 21]
[13 20]
[23 52]
[24 51]
[25 50]
[26 49]
[27 48]
[28 47]
[29 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
