%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCAUUCUAAUCGCAAUGGCAUUCCUAAUGCUUACCGAACGAAAAAUUCUAGGCUAUAUAxxxxxxxxxxAAUCGAACCCAUCCCUGAGAAUCCAAAAUUCUCCGUGCCACCUAUCACACCCCAUCCUAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[101.88478851 286.90048218]
[101.88478851 271.90048218]
[101.88478851 256.90048218]
[101.88478851 241.90048218]
[101.88478851 226.90048218]
[101.88478851 211.90048218]
[101.88478851 196.90048218]
[101.88478851 181.90048218]
[101.88478851 166.90048218]
[101.88478851 151.90048218]
[89.02191925 149.15560913]
[77.64985657 143.37927246]
[68.44087219 135.13868713]
[61.88019943 125.13800812]
[58.24188232 114.16155243]
[43.42412186 116.49266052]
[28.60636520 118.82376099]
[21.95872116 130.58244324]
[9.91912174 136.26364136]
[-2.99944520 133.98658752]
[-12.09645653 124.80828857]
[-26.95950317 126.83061981]
[-41.82255173 128.85295105]
[-46.45744324 142.08790588]
[-56.30559540 151.97753906]
[-69.39598846 156.62367249]
[-83.14346313 155.16947937]
[-94.85921478 147.95697021]
[-102.27667999 136.44868469]
[-117.17858124 138.16137695]
[-132.08047485 139.87406921]
[-146.98237610 141.58674622]
[-161.88429260 143.29943848]
[-176.92945862 151.11474609]
[-188.60426331 138.82102966]
[-180.02288818 124.19924164]
[-163.59696960 128.39753723]
[-148.69506836 126.68485260]
[-133.79316711 124.97216034]
[-118.89126587 123.25946808]
[-103.98936462 121.54678345]
[-97.94606018 106.59251404]
[-85.12346649 96.65454865]
[-68.94868469 94.50827789]
[-53.80518723 100.83046722]
[-43.84488297 113.98990631]
[-28.98183823 111.96757507]
[-14.11879063 109.94524384]
[-4.55244541 96.14875793]
[12.36005497 93.45591736]
[26.27526093 104.00600433]
[41.09302139 101.67490387]
[55.91077805 99.34379578]
[56.63090515 89.38619232]
[59.59879303 79.72364044]
[64.71688080 70.86303711]
[71.77348328 63.28197479]
[80.45110321 57.40311432]
[90.34053040 53.57082367]
[100.96001434 52.03138351]
[111.77873993 52.91791534]
[113.64634705 38.03463364]
[115.51396179 23.15135574]
[101.23264313 18.40476418]
[88.15190125 10.96296597]
[76.77452087 1.11200225]
[67.53781891 -10.76948071]
[60.79684067 -24.22479248]
[56.81067657 -38.73674393]
[55.73255539 -53.74753571]
[57.60390854 -68.68019104]
[62.35280991 -82.96074677]
[69.79673004 -96.04028320]
[79.64952850 -107.41606903]
[91.53250885 -116.65084076]
[104.98891449 -123.38964844]
[119.50151062 -127.37345886]
[134.51248169 -128.44915771]
[149.44482422 -126.57538605]
[163.72460938 -121.82417297]
[176.80294800 -114.37813568]
[188.17713928 -104.52349091]
[197.40998840 -92.63901520]
[204.14660645 -79.18152618]
[208.12808228 -64.66828156]
[209.20133972 -49.65714264]
[207.32514954 -34.72509384]
[202.57162476 -20.44607925]
[195.12347412 -7.36895084]
[185.26699829 4.00364304]
[173.38102722 13.23457050]
[159.92243958 19.96901894]
[145.40855408 23.94813347]
[130.39724731 25.01896858]
[128.52963257 39.90224838]
[126.66201782 54.78553009]
[138.36163330 64.17269135]
[152.48645020 59.12393570]
[166.61125183 54.07517624]
[180.73605347 49.02642059]
[194.86085510 43.97766495]
[208.98565674 38.92890930]
[217.12165833 25.10194016]
[233.02438354 22.98468781]
[244.49462891 34.20132828]
[242.73339844 50.14741135]
[229.09176636 58.59046936]
[214.03440857 53.05371094]
[199.90960693 58.10246658]
[185.78480530 63.15122604]
[171.66000366 68.19998169]
[157.53520203 73.24873352]
[143.41040039 78.29749298]
[150.22261047 98.93508911]
[147.39562988 121.23364258]
[161.29818726 126.86560059]
[175.20074463 132.49755859]
[187.26293945 122.98973083]
[202.46533203 120.80269623]
[216.71852112 126.52475739]
[226.18849182 138.61669922]
[228.32786560 153.82586670]
[222.56115723 168.06105042]
[210.43959045 177.49307251]
[195.22378540 179.58476257]
[181.00674438 173.77346802]
[171.61276245 161.62239075]
[169.56878662 146.40011597]
[155.66622925 140.76815796]
[141.76367188 135.13619995]
[135.54394531 139.32727051]
[145.04447937 150.93501282]
[154.54502869 162.54277039]
[166.97016907 170.94609070]
[166.95739746 185.94607544]
[154.51795959 194.32823181]
[140.61061096 188.70812988]
[137.48727417 174.03689575]
[130.29589844 160.87315369]
[123.10450745 147.70941162]
[116.88478851 151.90048218]
[116.88478851 166.90048218]
[116.88478851 181.90048218]
[116.88478851 196.90048218]
[116.88478851 211.90048218]
[116.88478851 226.90048218]
[116.88478851 241.90048218]
[116.88478851 256.90048218]
[116.88478851 271.90048218]
[116.88478851 286.90048218]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[15 53]
[16 52]
[17 51]
[21 48]
[22 47]
[23 46]
[29 41]
[30 40]
[31 39]
[32 38]
[33 37]
[61 96]
[62 95]
[63 94]
[97 113]
[98 112]
[99 111]
[100 110]
[101 109]
[102 108]
[115 130]
[116 129]
[117 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
