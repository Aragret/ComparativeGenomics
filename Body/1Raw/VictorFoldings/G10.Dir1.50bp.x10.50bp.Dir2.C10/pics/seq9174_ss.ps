%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACGGACUUCACGUCAUUAUUGGCUCAACUUUCCUCACUAUCUGCUUCAUCCGCCAACUAAUxxxxxxxxxxCUUAAUAUGACUAGCUUACACAAUAGCUUUUAUAGUAAAGAUACCUCUUUACGGACUCCACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.54226685 248.21896362]
[95.23429108 233.22212219]
[94.92631531 218.22528076]
[94.61833954 203.22843933]
[94.31035614 188.23161316]
[94.00238037 173.23477173]
[93.69440460 158.23793030]
[93.38642883 143.24108887]
[93.07844543 128.24426270]
[78.93112946 123.25893402]
[69.28931427 134.74960327]
[59.64750290 146.24026489]
[50.00568771 157.73094177]
[52.89912796 173.09849548]
[45.19252777 186.70520020]
[30.52470589 192.12637329]
[15.82136440 186.80229187]
[8.02496815 173.24684143]
[10.81673813 157.86048889]
[22.87848473 147.90818787]
[38.51502228 148.08912659]
[48.15683746 136.59844971]
[57.79864883 125.10778809]
[67.44046783 113.61711884]
[66.36339569 98.65583801]
[55.17509842 88.66474152]
[43.98680115 78.67364502]
[32.79850388 68.68254852]
[20.04524803 60.78606415]
[6.11453152 55.22412872]
[-7.81618452 49.66219330]
[-21.74690056 44.10025406]
[-35.67761612 38.53831863]
[-44.04109192 51.05813980]
[-54.82509995 61.56522751]
[-67.55821228 69.60025024]
[-81.68377686 74.81195831]
[-96.58430481 76.97251892]
[-111.60839844 75.98748016]
[-126.09927368 71.89989471]
[-139.42344666 64.88846588]
[-150.99844360 55.25970078]
[-160.31825256 43.43452454]
[-166.97544861 29.92988205]
[-170.67903137 15.33614349]
[-171.26705933 0.29128027]
[-168.71385193 -14.54700947]
[-163.13102722 -28.53005791]
[-154.76261902 -41.04658890]
[-143.97448730 -51.54943466]
[-131.23822021 -59.57944870]
[-117.11059570 -64.78559875]
[-102.20922089 -66.94029999]
[-87.18551636 -65.94934845]
[-72.69625854 -61.85606384]
[-59.37484360 -54.83939362]
[-47.80363464 -45.20607376]
[-38.48847961 -33.37723160]
[-31.83658791 -19.86997223]
[-28.13875580 -5.27477598]
[-27.55663681 9.77031708]
[-30.11568069 24.60760117]
[-16.18496323 30.16953850]
[-2.25424743 35.73147583]
[11.67646885 41.29341125]
[25.60718536 46.85535049]
[16.71504021 34.77521133]
[12.14105320 20.48960114]
[12.36316872 5.49124575]
[17.35817719 -8.65265369]
[26.60414124 -20.46417999]
[39.13493729 -28.70912552]
[53.64120102 -32.52596664]
[68.60715485 -31.51587486]
[82.46897888 -25.78439331]
[93.77822876 -15.93041706]
[101.35318756 -2.98360205]
[104.40232849 11.70321941]
[102.60704803 26.59539795]
[96.15494537 40.13682556]
[85.72019196 50.91254044]
[72.39315033 57.79656982]
[57.56636810 60.06958771]
[42.78960037 57.49425125]
[53.97789764 67.48535156]
[65.16619873 77.47644806]
[76.35449219 87.46754456]
[82.01013947 74.43205261]
[94.90802765 64.60039520]
[112.94931793 61.87384415]
[132.04174805 68.73714447]
[145.60363770 62.32816696]
[159.16554260 55.91918945]
[172.38072205 48.82278824]
[185.21437073 41.05765152]
[198.04803467 33.29251480]
[210.88168335 25.52737999]
[212.05223083 10.05451870]
[222.11958313 -1.75344360]
[237.21264648 -5.35610437]
[251.52781677 0.63183320]
[259.56063843 13.90788460]
[258.22232056 29.36713791]
[248.02745056 41.06519318]
[232.89619446 44.50391006]
[218.64682007 38.36103439]
[205.81317139 46.12617111]
[192.97950745 53.89130402]
[180.14585876 61.65644073]
[193.71780396 68.04409790]
[197.39012146 82.58762360]
[188.47760010 94.65272522]
[173.49710083 95.41736603]
[163.40243530 84.32241821]
[165.57452393 69.48108673]
[152.01261902 75.89006042]
[138.45072937 82.29903412]
[138.75869751 97.29587555]
[152.57228088 103.14266205]
[166.38586426 108.98944855]
[180.19944763 114.83624268]
[194.01303101 120.68302917]
[210.21252441 118.13188171]
[220.30979919 131.05383301]
[213.91764832 146.15589905]
[197.61177063 147.90235901]
[188.16624451 134.49661255]
[174.35266113 128.64982605]
[160.53907776 122.80303192]
[146.72549438 116.95624542]
[132.91191101 111.10945892]
[126.70275879 115.31616211]
[136.02221680 127.06978607]
[145.34167480 138.82341003]
[159.13722229 144.71263123]
[163.71670532 158.99647522]
[155.91712952 171.80923462]
[141.12556458 174.30122375]
[129.55844116 164.75128174]
[129.20472717 149.75619507]
[121.74458313 136.74288940]
[114.28443909 123.72957611]
[108.07528687 127.93627930]
[108.38326263 142.93312073]
[108.69123840 157.92996216]
[108.99922180 172.92678833]
[109.30719757 187.92362976]
[109.61517334 202.92047119]
[109.92314911 217.91731262]
[110.23113251 232.91413879]
[110.53910828 247.91098022]
[113.12488556 267.11941528]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 151]
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 24]
[11 23]
[12 22]
[13 21]
[25 87]
[26 86]
[27 85]
[28 84]
[29 66]
[30 65]
[31 64]
[32 63]
[33 62]
[91 117]
[92 116]
[93 115]
[94 109]
[95 108]
[96 107]
[97 106]
[118 131]
[119 130]
[120 129]
[121 128]
[122 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
