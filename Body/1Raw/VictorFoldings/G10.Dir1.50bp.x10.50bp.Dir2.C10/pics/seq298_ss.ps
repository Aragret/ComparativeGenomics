%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCAAACCCCCCCUCCCCCGCUUCUGGCCACAGCACUUAAACACAUCUCUGCCAAACCCCAxxxxxxxxxxAGGAACAAGCAUCAAGCACGCAGCAAUGCAGCUCAAAACGCUUAGCCUAGCCACACCCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[7.16887283 261.57675171]
[-0.82104331 274.27166748]
[-8.81095982 286.96661377]
[-16.66838455 299.74395752]
[-24.39246941 312.60235596]
[-32.11655426 325.46075439]
[-39.84064102 338.31915283]
[-47.56472397 351.17758179]
[-55.28881073 364.03598022]
[-63.01289368 376.89437866]
[-60.54067612 392.74578857]
[-71.49810028 404.46392822]
[-87.47957611 403.05960083]
[-96.22547150 389.61010742]
[-91.02669525 374.43273926]
[-75.87129974 369.17028809]
[-68.14720917 356.31188965]
[-60.42312622 343.45349121]
[-52.69904327 330.59509277]
[-44.97495651 317.73666382]
[-37.25087357 304.87826538]
[-29.52678680 292.01986694]
[-28.77364922 284.61862183]
[-21.50588989 278.97668457]
[-13.51597309 266.28176880]
[-5.52605677 253.58682251]
[-24.70670700 238.46623230]
[-41.74504089 220.96696472]
[-56.34835815 201.38960266]
[-68.26579285 180.07049561]
[-77.29261017 157.37586975]
[-83.27375031 133.69560242]
[-86.10646057 109.43647003]
[-101.10564423 109.59250641]
[-116.10483551 109.74854279]
[-129.93775940 118.55661774]
[-144.35527039 110.74204254]
[-144.52586365 94.34378815]
[-130.27404785 86.23096466]
[-116.26087189 94.74935913]
[-101.26168823 94.59332275]
[-86.26249695 94.43728638]
[-85.58325195 83.16197968]
[-84.22208405 71.94854736]
[-82.18401337 60.83819199]
[-79.47650909 49.87173080]
[-76.10953522 39.08946609]
[-72.09545135 28.53100967]
[-67.44901276 18.23516464]
[-62.18729782 8.23975945]
[-56.32963181 -1.41847813]
[-49.89754105 -10.70405960]
[-42.91465759 -19.58286476]
[-35.40664673 -28.02226830]
[-27.40108871 -35.99126434]
[-18.92740440 -43.46056366]
[-10.01672745 -50.40272903]
[-0.70179999 -56.79224777]
[8.98315048 -62.60564041]
[19.00253677 -67.82154846]
[29.31954384 -72.42080688]
[39.89626312 -76.38651276]
[50.69382858 -79.70410156]
[61.67256927 -82.36136627]
[72.79213715 -84.34856415]
[84.01168823 -85.65838623]
[95.28997803 -86.28601074]
[106.58557892 -86.22913361]
[117.85697937 -85.48797607]
[129.06275940 -84.06525421]
[140.16175842 -81.96618652]
[151.11318970 -79.19850159]
[161.87680054 -75.77236176]
[172.41305542 -71.70035553]
[182.68322754 -66.99744415]
[192.64958191 -61.68090820]
[202.27549744 -55.77028656]
[211.52561951 -49.28730011]
[220.36593628 -42.25576019]
[228.76399231 -34.70151138]
[236.68888855 -26.65231133]
[244.11154175 -18.13773346]
[251.00466919 -9.18906403]
[257.34292603 0.16081381]
[263.10305786 9.87754536]
[268.26385498 19.92542648]
[272.80636597 30.26753616]
[286.93118286 25.21878052]
[301.05599976 20.17002487]
[315.18078613 15.12126732]
[317.89453125 -2.18571186]
[328.91320801 -15.69082642]
[345.15731812 -21.76105309]
[362.15771484 -18.82176781]
[375.28521729 -7.76406050]
[389.18777466 -13.39601707]
[403.09033203 -19.02797318]
[408.85513306 -30.61335373]
[420.60168457 -34.99940109]
[431.80673218 -30.33521461]
[445.82342529 -35.67672729]
[459.84014893 -41.01823807]
[469.76605225 -54.07229233]
[485.99780273 -51.73509216]
[491.83755493 -36.41094971]
[481.27786255 -23.86402893]
[465.18167114 -27.00152588]
[451.16494751 -21.66001320]
[437.14822388 -16.31850243]
[426.86160278 -2.13452268]
[408.72229004 -5.12541771]
[394.81973267 0.50653881]
[380.91717529 6.13849545]
[380.51623535 18.83648300]
[375.30303955 30.47329712]
[366.02648926 39.29011154]
[354.05255127 43.93955231]
[341.16308594 43.69150925]
[329.29086304 38.54756165]
[320.22955322 29.24607086]
[306.10473633 34.29482651]
[291.97994995 39.34358215]
[277.85513306 44.39233780]
[281.83657837 59.25548553]
[284.57821655 74.39643860]
[286.06134033 89.71196747]
[286.27581787 105.09764099]
[285.22018433 120.44856262]
[282.90167236 135.66006470]
[279.33605957 150.62840271]
[274.54769897 165.25155640]
[268.56918335 179.42979431]
[261.44131470 193.06645203]
[253.21267700 206.06855774]
[243.93937683 218.34744263]
[233.68464661 229.81939697]
[222.51841736 240.40618896]
[210.51681519 250.03564453]
[197.76165771 258.64212036]
[184.33993530 266.16690063]
[170.34315491 272.55868530]
[155.86674500 277.77392578]
[141.00941467 281.77703857]
[125.87247467 284.54071045]
[110.55912018 286.04614258]
[95.17377472 286.28302002]
[79.82133484 285.24978638]
[64.60647583 282.95343018]
[49.63294983 279.40963745]
[35.00283813 274.64257812]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 26]
[2 25]
[3 24]
[4 22]
[5 21]
[6 20]
[7 19]
[8 18]
[9 17]
[10 16]
[33 42]
[34 41]
[35 40]
[87 123]
[88 122]
[89 121]
[90 120]
[95 113]
[96 112]
[97 111]
[100 109]
[101 108]
[102 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
