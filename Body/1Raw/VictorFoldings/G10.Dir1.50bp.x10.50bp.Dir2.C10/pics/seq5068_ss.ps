%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGACAAAAACUAGCCCCCAUCUCAAUCAUAUACCAAAUCUCUCCCUCACUAAACGUAAGCCxxxxxxxxxxCCUCACAAUCAUGGCAAGCCAACGCCACUUAUCCAGUGAACCACUAUCACGAAAAAAACUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[74.55511475 265.94134521]
[74.55511475 250.94134521]
[74.55511475 235.94134521]
[74.55511475 220.94134521]
[74.55511475 205.94134521]
[74.55511475 190.94134521]
[74.55511475 175.94134521]
[74.55511475 160.94134521]
[74.55511475 145.94134521]
[74.55511475 130.94134521]
[67.10020447 117.92504120]
[54.16214752 110.33513641]
[45.55132675 122.62741089]
[35.97930145 134.18693542]
[25.50815392 144.93875122]
[14.20579433 154.81311035]
[2.14552402 163.74598694]
[-10.59444046 171.67942810]
[-23.93147469 178.56201172]
[-37.77907944 184.34907532]
[-52.04745102 189.00309753]
[-66.64405060 192.49388123]
[-81.47421265 194.79881287]
[-96.44174957 195.90292358]
[-111.44960022 195.79905701]
[-126.40042114 194.48789978]
[-141.19726562 191.97793579]
[-155.74414062 188.28546143]
[-169.94673157 183.43440247]
[-183.71292114 177.45623779]
[-196.95343018 170.38972473]
[-209.58236694 162.28071594]
[-221.51785278 153.18177795]
[-232.68246460 143.15193176]
[-243.00379944 132.25624084]
[-252.41491699 120.56533813]
[-260.85479736 108.15505981]
[-268.26867676 95.10589600]
[-274.60848999 81.50247192]
[-279.83309937 67.43301392]
[-283.90866089 52.98877335]
[-286.80871582 38.26342010]
[-288.51443481 23.35245895]
[-289.01480103 8.35259342]
[-288.30654907 -6.63889456]
[-286.39428711 -21.52477837]
[-283.29037476 -36.20851517]
[-279.01498413 -50.59487152]
[-273.59582520 -64.59055328]
[-267.06805420 -78.10478210]
[-259.47399902 -91.04991913]
[-250.86289978 -103.34200287]
[-241.29061890 -114.90132141]
[-230.81922913 -125.65290070]
[-219.51666260 -135.52700806]
[-207.45619202 -144.45960999]
[-194.71604919 -152.39279175]
[-181.37886047 -159.27507019]
[-167.53112793 -165.06182861]
[-153.26264954 -169.71553040]
[-138.66598511 -173.20600891]
[-123.83576965 -175.51060486]
[-108.86820984 -176.61439514]
[-93.86035919 -176.51019287]
[-78.90956116 -175.19869995]
[-64.11277771 -172.68841553]
[-49.56597519 -168.99562073]
[-35.36349106 -164.14424133]
[-21.59743881 -158.16577148]
[-8.35709476 -151.09898376]
[4.27166891 -142.98968506]
[16.20694923 -133.89048767]
[27.37133980 -123.86039734]
[37.69243622 -112.96446991]
[47.10329819 -101.27336121]
[55.54289246 -88.86289978]
[62.95648956 -75.81357574]
[69.29599762 -62.21001053]
[74.52031708 -48.14043808]
[78.59555054 -33.69610596]
[81.49527740 -18.97068977]
[83.20069122 -4.05969000]
[83.70072174 10.94018650]
[82.99214172 25.93165779]
[81.07953644 40.81750107]
[77.97531128 55.50116730]
[73.69960022 69.88743591]
[68.28013611 83.88299561]
[61.75205612 97.39707947]
[74.69010925 104.98698425]
[76.13951874 75.21530914]
[109.91171265 58.14709091]
[122.52284241 50.02554703]
[135.13397217 41.90400696]
[147.74510193 33.78246307]
[148.48181152 18.28288841]
[158.21449280 6.19758511]
[173.20072937 2.17360187]
[187.67799377 7.75824165]
[196.07949829 20.80409622]
[195.17468262 36.29476929]
[185.31147766 48.27378082]
[170.28247070 52.13495636]
[155.86663818 46.39359283]
[143.25550842 54.51513290]
[130.64437866 62.63667679]
[118.03325653 70.75821686]
[118.65669250 78.23226166]
[133.60478210 76.98538971]
[148.55285645 75.73851013]
[163.50097656 74.49188995]
[164.74734497 89.44001770]
[149.79974365 90.68659973]
[134.85165405 91.93347168]
[119.90356445 93.18035126]
[120.52700043 100.65439606]
[134.30938721 106.57435608]
[148.09176636 112.49431610]
[161.87414551 118.41428375]
[175.75518799 111.21353149]
[191.00588989 114.67042542]
[200.42533875 127.15273285]
[199.56596375 142.76669312]
[188.83352661 154.13984680]
[173.29556274 155.90217590]
[160.28862000 147.22152710]
[155.95417786 132.19667053]
[142.17179871 126.27670288]
[128.38941956 120.35673523]
[114.60704041 114.43677521]
[108.34405518 118.56291962]
[117.60105133 130.36579895]
[126.85804749 142.16868591]
[139.32559204 150.50897217]
[139.27279663 165.50888062]
[126.74686432 173.76119995]
[112.94370270 167.88987732]
[110.20085907 153.14268494]
[103.00947571 139.97894287]
[95.81809235 126.81520844]
[89.55511475 130.94134521]
[89.55511475 145.94134521]
[89.55511475 160.94134521]
[89.55511475 175.94134521]
[89.55511475 190.94134521]
[89.55511475 205.94134521]
[89.55511475 220.94134521]
[89.55511475 235.94134521]
[89.55511475 250.94134521]
[89.55511475 265.94134521]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 90]
[12 89]
[92 107]
[93 106]
[94 105]
[95 104]
[116 130]
[117 129]
[118 128]
[119 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
