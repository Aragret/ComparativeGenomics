%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCCUAAUAGUAGAAGAACCCUCCAUAAACCUGGAGUGACUAUAUGGAUGCCCCCCACCCUxxxxxxxxxxAAAUGACAUCAAAAAAAUCGUAGCCUUCUCCACUUCAAGUCAACUAGGACUCAUAAUAGUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[131.26631165 360.57278442]
[130.95425415 345.57604980]
[130.64219666 330.57928467]
[130.33013916 315.58251953]
[130.01808167 300.58578491]
[129.70602417 285.58901978]
[129.39396667 270.59225464]
[129.08190918 255.59552002]
[128.76985168 240.59875488]
[126.90224457 225.71548462]
[123.49926758 211.10658264]
[120.09629059 196.49769592]
[116.69331360 181.88880920]
[113.29033661 167.27990723]
[110.44019318 165.10179138]
[108.53250122 161.40551758]
[108.28256226 156.66317749]
[110.16103363 151.65408325]
[107.67591858 136.86138916]
[105.19079590 122.06867218]
[100.27969360 136.24192810]
[98.05892181 151.07661438]
[87.78981781 162.01031494]
[73.12332916 165.15579224]
[59.27376175 159.39474487]
[51.16500854 146.77539062]
[51.67993546 131.78424072]
[60.63547516 119.75101471]
[74.84987640 114.95381165]
[87.93809509 107.62588501]
[72.93890381 107.78192139]
[57.93971634 107.93795776]
[42.94052887 108.09399414]
[27.94133949 108.25003052]
[17.06332397 119.71495056]
[1.26251233 120.04642487]
[-10.08675480 109.04780579]
[-10.25115776 93.24436951]
[0.86684036 82.01202393]
[16.67112923 82.01470947]
[27.78530312 93.25084686]
[42.78449249 93.09481049]
[57.78367996 92.93877411]
[72.78286743 92.78273773]
[87.78205872 92.62669373]
[100.04442596 83.98757935]
[105.23983765 69.91606140]
[110.43525696 55.84454346]
[115.63066864 41.77302170]
[120.82608795 27.70150375]
[110.31773376 12.99138641]
[110.68954468 -4.92631865]
[121.60688782 -18.94103622]
[138.58729553 -23.60295486]
[143.19285583 -37.87841797]
[147.79843140 -52.15387726]
[152.40399170 -66.42933655]
[138.75677490 -72.69750977]
[125.94673157 -80.53582001]
[114.15368652 -89.83423615]
[103.54319763 -100.46221161]
[94.26422119 -112.27054596]
[86.44701385 -125.09348297]
[80.20131683 -138.75099182]
[75.61481476 -153.05136108]
[72.75189972 -167.79380798]
[71.65274811 -182.77140808]
[72.33280182 -197.77386475]
[74.78250885 -212.59059143]
[78.96748352 -227.01356506]
[84.82897186 -240.84033203]
[92.28469086 -253.87677002]
[101.22996521 -265.93988037]
[111.53923035 -276.86029053]
[123.06774902 -286.48471069]
[135.65368652 -294.67803955]
[149.12034607 -301.32522583]
[163.27868652 -306.33300781]
[177.92994690 -309.63101196]
[192.86843872 -311.17300415]
[207.88446045 -310.93731689]
[222.76719666 -308.92721558]
[237.30773926 -305.17098999]
[251.30192566 -299.72131348]
[264.55334473 -292.65472412]
[276.87591553 -284.07043457]
[288.09667969 -274.08892822]
[298.05813599 -262.85031128]
[306.62039185 -250.51240540]
[313.66326904 -237.24838257]
[319.08792114 -223.24447632]
[322.81814575 -208.69725037]
[324.80160522 -193.81094360]
[325.01046753 -178.79452515]
[323.44177246 -163.85881042]
[320.11758423 -149.21347046]
[315.08450317 -135.06410217]
[308.41323853 -121.60934448]
[300.19741821 -109.03807831]
[290.55239868 -97.52677917]
[279.61358643 -87.23706055]
[267.53451538 -78.31336212]
[254.48475647 -70.88096619]
[240.64753723 -65.04420471]
[226.21710205 -60.88502502]
[211.39602661 -58.46180725]
[196.39236450 -57.80857849]
[181.41676331 -58.93450165]
[166.67944336 -61.82377243]
[162.07388306 -47.54831314]
[157.46832275 -33.27285004]
[152.86276245 -18.99739075]
[161.43772888 -10.30197144]
[165.50193787 1.29100299]
[164.21849060 13.58133316]
[157.77171326 24.20836449]
[147.34362793 31.10440063]
[134.89761353 32.89691925]
[129.70219421 46.96843719]
[124.50677490 61.03995895]
[119.31136322 75.11148071]
[114.11594391 89.18299866]
[119.98350525 119.58355713]
[122.46862793 134.37626648]
[124.95374298 149.16897583]
[127.89922333 163.87693787]
[131.30220032 178.48582458]
[134.70518494 193.09471130]
[138.10815430 207.70361328]
[141.51113892 222.31250000]
[147.96321106 208.77105713]
[160.24305725 200.15681458]
[175.17210388 198.69955444]
[188.88600159 204.77648926]
[197.83494568 216.81462097]
[199.70252991 231.69789124]
[194.00534058 245.57385254]
[182.21807861 254.85072327]
[167.39183044 257.12722778]
[153.36433411 251.81408691]
[143.76661682 240.28669739]
[144.07867432 255.28346252]
[144.39073181 270.28021240]
[144.70277405 285.27697754]
[145.01483154 300.27371216]
[145.32688904 315.27047729]
[145.63894653 330.26721191]
[145.95100403 345.26397705]
[146.26306152 360.26074219]
[148.85406494 379.46844482]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 130]
[11 129]
[12 128]
[13 127]
[14 126]
[18 125]
[19 124]
[20 123]
[30 45]
[31 44]
[32 43]
[33 42]
[34 41]
[46 122]
[47 121]
[48 120]
[49 119]
[50 118]
[54 112]
[55 111]
[56 110]
[57 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
