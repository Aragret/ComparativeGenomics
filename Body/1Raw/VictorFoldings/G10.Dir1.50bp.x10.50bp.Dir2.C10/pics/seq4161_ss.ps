%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAUCUUCCUAGGAACAACAUAUGACGCACUCUCCCCUGAACUCUACACAACAUAUUUUGUxxxxxxxxxxCCCACCCCAGUCUCAGCCCUACUCCACUCAAGCACUAUAGUUGUAGCAGGAAUCUUCUUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[105.34944916 503.55645752]
[105.34944916 488.55645752]
[105.34944916 473.55645752]
[105.34944916 458.55645752]
[105.34944916 443.55645752]
[105.34944916 428.55645752]
[105.34944916 413.55645752]
[105.34944916 398.55645752]
[105.34944916 383.55645752]
[105.34944916 368.55645752]
[89.52717590 365.39138794]
[74.68374634 359.05068970]
[61.44935989 349.80117798]
[50.38639450 338.03329468]
[41.96548080 324.24450684]
[36.54550171 309.01834106]
[34.35829926 292.99960327]
[35.49874878 276.86727905]
[39.92064285 261.30541992]
[47.43857193 246.97453308]
[57.73569489 234.48316956]
[70.37707520 224.36236572]
[84.82807922 217.04290771]
[100.47696686 212.83706665]
[99.54133606 197.86627197]
[98.60571289 182.89549255]
[97.67008209 167.92469788]
[96.73445129 152.95390320]
[95.64314270 137.99365234]
[94.39627075 123.04557037]
[93.14939117 108.09748077]
[91.12705994 93.23443604]
[88.33473206 78.49662781]
[85.54241180 63.75882339]
[70.49694824 62.91054535]
[56.10046387 58.48860168]
[43.18853378 50.75418091]
[32.50947952 40.16059875]
[24.68099976 27.32672310]
[20.15444565 13.00083542]
[19.18879890 -1.98301601]
[21.83585739 -16.75356293]
[27.93747902 -30.45298195]
[37.13501740 -42.28670883]
[48.89040756 -51.56953430]
[62.51763153 -57.76527023]
[59.72530746 -72.50307465]
[56.93298340 -87.24088287]
[54.14065933 -101.97868347]
[51.19517899 -116.68664551]
[48.09685516 -131.36317444]
[44.99853516 -146.03970337]
[29.97740555 -145.39508057]
[15.05506134 -147.23179626]
[0.63859653 -151.49974060]
[-12.87869835 -158.08250427]
[-25.12806129 -166.80046082]
[-35.77532196 -177.41581726]
[-44.53001022 -189.63896179]
[-51.15330124 -203.13644409]
[-55.46449661 -217.54002380]
[-57.34599304 -232.45678711]
[-56.74645233 -247.47979736]
[-53.68223953 -262.19918823]
[-48.23694229 -276.21340942]
[-40.55911636 -289.14016724]
[-30.85821533 -300.62677002]
[-19.39888763 -310.35989380]
[-6.49375296 -318.07400513]
[7.50512743 -323.55862427]
[22.21585464 -326.66418457]
[37.23710632 -327.30590820]
[52.15909576 -325.46630859]
[66.57473755 -321.19558716]
[80.09076691 -314.61022949]
[92.33844757 -305.88989258]
[102.98366547 -295.27249146]
[111.73600006 -283.04766846]
[118.35668945 -269.54891968]
[122.66510773 -255.14448547]
[124.54373169 -240.22737122]
[123.94129944 -225.20448303]
[120.87424469 -210.48568726]
[115.42624664 -196.47250366]
[107.74593353 -183.54724121]
[98.04281616 -172.06248474]
[86.58161926 -162.33157349]
[73.67499542 -154.61996460]
[59.67506027 -149.13801575]
[62.77338028 -134.46150208]
[65.87170410 -119.78497314]
[70.35961914 -113.85165405]
[68.87846375 -104.77101135]
[71.67079163 -90.03320312]
[74.46311188 -75.29540253]
[77.25543976 -60.55759430]
[92.20461273 -59.77613831]
[106.54093933 -55.43682480]
[119.42982483 -47.78773880]
[130.11984253 -37.26977921]
[137.98652649 -24.49123955]
[142.56893921 -10.19264221]
[143.59654236 4.79617977]
[141.00529480 19.60424614]
[134.94152832 33.37003708]
[125.75376129 45.29161835]
[113.97261810 54.67335129]
[100.28022003 60.96649933]
[103.07254028 75.70430756]
[105.86486816 90.44210815]
[116.60345459 79.96916199]
[131.51196289 81.62339783]
[139.69346619 94.19570160]
[135.16795349 108.49674225]
[121.24320984 114.07361603]
[108.09748077 106.85060883]
[109.34435272 121.79869080]
[110.59123230 136.74678040]
[114.44472504 145.10156250]
[111.70524597 152.01828003]
[112.64087677 166.98905945]
[113.57649994 181.95985413]
[114.51213074 196.93064880]
[115.44776154 211.90144348]
[129.27066040 213.61215210]
[142.57191467 217.73184204]
[154.93525696 224.13020325]
[165.97402954 232.60563660]
[175.34326172 242.89163208]
[182.75041199 254.66506958]
[187.96459961 267.55648804]
[190.82369995 281.16156006]
[191.23942566 295.05386353]
[189.20010376 308.79818726]
[184.77088928 321.96420288]
[178.09176636 334.13992310]
[169.37312317 344.94451904]
[158.88908386 354.04046631]
[146.96890259 361.14376831]
[133.98664856 366.03308105]
[120.34944916 368.55645752]
[120.34944916 383.55645752]
[120.34944916 398.55645752]
[120.34944916 413.55645752]
[120.34944916 428.55645752]
[120.34944916 443.55645752]
[120.34944916 458.55645752]
[120.34944916 473.55645752]
[120.34944916 488.55645752]
[120.34944916 503.55645752]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[24 124]
[25 123]
[26 122]
[27 121]
[28 120]
[29 118]
[30 117]
[31 116]
[32 110]
[33 109]
[34 108]
[46 96]
[47 95]
[48 94]
[49 93]
[50 91]
[51 90]
[52 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
