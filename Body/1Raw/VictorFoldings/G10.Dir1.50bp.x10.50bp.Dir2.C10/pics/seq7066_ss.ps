%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGCUUCAUUCACUGAUUUCCCCUAUUCUCAGGCUACACCCUAGACCAAACCUACGCCAAAAUCCxxxxxxxxxxAUAAAAAAUUAUAACAAACCCUGAGAACCAAAAUGAACGAAAAUCUGUUCGCUUCAUUCAUUGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[105.61645508 250.88784790]
[104.71653748 235.91487122]
[103.81661987 220.94189453]
[102.91670990 205.96891785]
[102.01679230 190.99592590]
[101.11687469 176.02294922]
[100.21695709 161.04997253]
[86.17947388 155.76329041]
[75.62606049 166.42282104]
[65.07265472 177.08235168]
[54.51924515 187.74188232]
[54.94213486 205.20338440]
[42.86310196 217.34915161]
[26.07348824 217.03479004]
[15.73547554 227.90335083]
[5.39746332 238.77191162]
[4.35966539 254.78135681]
[-8.88591480 263.83309937]
[-24.17840195 258.98342896]
[-29.78670883 243.95257568]
[-21.40862083 230.27093506]
[-5.47109222 228.43389893]
[4.86691952 217.56533813]
[15.20493221 206.69679260]
[13.08587551 193.95408630]
[18.79389572 182.14903259]
[30.43865967 175.70770264]
[43.85971451 177.18846130]
[54.41312408 166.52894592]
[64.96653748 155.86941528]
[75.51994324 145.20988464]
[55.98725510 115.89041138]
[60.85834122 84.29515076]
[83.28717804 66.36753845]
[79.42905426 51.87220001]
[75.57093811 37.37685776]
[71.71281433 22.88151741]
[67.85469818 8.38617706]
[63.99657822 -6.10916424]
[60.13845825 -20.60450554]
[56.28033829 -35.09984589]
[41.46052933 -32.70155334]
[26.47556496 -31.79077148]
[11.47438335 -32.37655640]
[-3.39392662 -34.45308685]
[-17.98159218 -37.99972153]
[-32.14363098 -42.98121643]
[-45.73928833 -49.34805679]
[-58.63344574 -57.03696823]
[-70.69794464 -65.97153473]
[-81.81288910 -76.06295013]
[-91.86780548 -87.21092224]
[-100.76275635 -99.30465698]
[-108.40934753 -112.22395325]
[-114.73157501 -125.84041595]
[-119.66660309 -140.01870728]
[-123.16538239 -154.61793518]
[-125.19314575 -169.49296570]
[-125.72973633 -184.49598694]
[-124.76982880 -199.47789001]
[-122.32295227 -214.28974915]
[-118.41342163 -228.78437805]
[-113.08010864 -242.81771851]
[-106.37601471 -256.25027466]
[-98.36775970 -268.94854736]
[-89.13494873 -280.78637695]
[-78.76933289 -291.64605713]
[-67.37393951 -301.41967773]
[-55.06202698 -310.01010132]
[-41.95595169 -317.33193970]
[-28.18597603 -323.31243896]
[-13.88895416 -327.89215088]
[0.79301834 -331.02557373]
[15.71402264 -332.68154907]
[30.72576332 -332.84359741]
[45.67904282 -331.51016235]
[60.42524338 -328.69445801]
[74.81781006 -324.42449951]
[88.71369171 -318.74267578]
[101.97479248 -311.70550537]
[114.46929932 -303.38290405]
[126.07305145 -293.85757446]
[136.67070007 -283.22421265]
[146.15695190 -271.58850098]
[154.43748474 -259.06607056]
[161.43002319 -245.78138733]
[167.06507874 -231.86647034]
[171.28662109 -217.45962524]
[174.05271912 -202.70404053]
[175.33587646 -187.74636841]
[175.12332153 -172.73524475]
[173.41717529 -157.81990051]
[170.23440552 -143.14854431]
[165.60662842 -128.86700439]
[159.57986450 -115.11722565]
[152.21397400 -102.03584290]
[143.58219910 -89.75289154]
[133.77032471 -78.39042664]
[122.87583923 -68.06139374]
[111.00704193 -58.86844254]
[98.28189850 -50.90294266]
[84.82686615 -44.24405670]
[70.77568054 -38.95796585]
[74.63379669 -24.46262550]
[78.49192047 -9.96728420]
[82.35003662 4.52805710]
[86.20816040 19.02339745]
[90.06627655 33.51873779]
[93.92440033 48.01408005]
[97.78251648 62.50942230]
[108.38587952 61.61729431]
[119.27906036 63.79272079]
[129.55987549 69.11380768]
[138.31001282 77.39072418]
[144.67491150 88.16439056]
[147.94258118 100.72885895]
[147.61445618 114.17667389]
[143.46166992 127.46433258]
[157.74595642 132.04244995]
[172.03024292 136.62057495]
[186.31452942 141.19869995]
[200.64390564 145.63369751]
[215.01692200 149.92509460]
[231.92382812 148.66294861]
[237.81694031 164.55972290]
[224.17279053 174.62319946]
[210.72552490 164.29811096]
[196.35250854 160.00671387]
[189.00234985 161.11273193]
[181.73640442 155.48298645]
[167.45211792 150.90486145]
[153.16783142 146.32673645]
[138.88354492 141.74861145]
[132.96014404 146.34896851]
[143.30091858 157.21490479]
[153.64167786 168.08084106]
[163.98245239 178.94677734]
[177.56736755 185.30682373]
[182.22280884 199.56608582]
[175.00791931 212.71696472]
[160.48037720 216.45198059]
[147.81727600 208.41172791]
[145.01788330 193.67544556]
[137.04969788 180.96685791]
[129.08152771 168.25827026]
[121.11334229 155.54969788]
[115.18994141 160.15005493]
[116.08985901 175.12303162]
[116.98976898 190.09600830]
[117.88968658 205.06900024]
[118.78960419 220.04197693]
[119.68952179 235.01495361]
[120.58943176 249.98793030]
[130.07287598 263.36688232]
[122.98314667 278.15429688]
[106.61353302 279.13815308]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 153]
[2 152]
[3 151]
[4 150]
[5 149]
[6 148]
[7 147]
[8 31]
[9 30]
[10 29]
[11 28]
[14 24]
[15 23]
[16 22]
[34 110]
[35 109]
[36 108]
[37 107]
[38 106]
[39 105]
[40 104]
[41 103]
[118 133]
[119 132]
[120 131]
[121 130]
[122 128]
[123 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
