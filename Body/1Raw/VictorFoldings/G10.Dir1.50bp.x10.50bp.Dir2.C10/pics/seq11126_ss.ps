%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUACUAAACCCCAUUAAACGCCUGGCAGCCGGAAGCCUAUUCGCAGGAUUUCUCAUUACUAxxxxxxxxxxAAACCCCCAUAAAUAGGAGAAGGCUUAGAAGAAAACCCCACAAACCCCAUUACUAAACCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[174.69235229 358.08554077]
[174.69235229 343.08554077]
[174.69235229 328.08554077]
[174.69235229 313.08554077]
[174.69235229 298.08554077]
[174.69235229 283.08554077]
[174.69235229 268.08554077]
[174.69235229 253.08552551]
[174.69235229 238.08552551]
[174.69235229 223.08552551]
[170.08679199 208.81007385]
[156.37031555 203.00422668]
[154.58378601 187.28422546]
[145.81756592 175.11238098]
[137.05136108 162.94055176]
[128.28515625 150.76870728]
[114.56868744 144.96287537]
[112.78215790 129.24285889]
[104.01594543 117.07102203]
[89.48101044 113.36486053]
[75.95681763 119.85302734]
[62.43263245 126.34119415]
[60.62836838 141.66268921]
[50.80946350 153.56195068]
[36.10909653 158.24198914]
[21.21809769 154.20941162]
[10.88813305 142.75099182]
[8.41545582 127.52307129]
[14.58908939 113.38483429]
[27.43904686 104.84773254]
[42.86495590 104.63592529]
[55.94446564 112.81700134]
[69.46865845 106.32883453]
[82.99284363 99.84067535]
[82.75882721 92.34432220]
[82.05676270 69.85527802]
[66.36117554 71.84503174]
[57.47014236 59.89518738]
[43.56758499 54.26322937]
[29.60719681 48.77619934]
[15.53567791 43.58078384]
[1.41087461 38.53202438]
[-12.71392822 33.48326874]
[-27.77128029 39.02002716]
[-41.41291809 30.57696915]
[-43.17414856 14.63088417]
[-31.70389938 3.41424513]
[-15.80117130 5.53149748]
[-7.66517210 19.35846710]
[6.45963097 24.40722275]
[20.58443451 29.45597839]
[27.98947334 28.74110603]
[34.94871140 34.75948334]
[42.36701965 34.19881821]
[49.19954300 40.36067200]
[63.10210037 45.99263000]
[77.80328369 43.60004425]
[87.68872070 55.95272446]
[100.85729980 48.77021408]
[103.64962769 34.03240967]
[106.44194794 19.29460335]
[109.23427582 4.55679750]
[112.02659607 -10.18100834]
[97.98444366 -15.57152557]
[85.13057709 -23.38291931]
[73.87819672 -33.36408615]
[64.58901978 -45.19417572]
[57.56165314 -58.49289322]
[53.02199936 -72.83274078]
[51.11599350 -87.75276184]
[51.90489960 -102.77333069]
[55.36335754 -117.41159058]
[61.38019943 -131.19700623]
[69.76200104 -143.68640137]
[80.23932648 -154.47831726]
[92.47536469 -163.22583008]
[106.07678986 -169.64775085]
[120.60636902 -173.53762817]
[135.59703064 -174.77043152]
[150.56689453 -173.30651855]
[165.03472900 -169.19296265]
[178.53547668 -162.56199646]
[190.63511658 -153.62675476]
[200.94471741 -142.67449951]
[209.13284302 -130.05728149]
[214.93630981 -116.18069458]
[218.16854858 -101.49082184]
[218.72563171 -86.45986938]
[216.58969116 -71.57102966]
[211.82936096 -57.30291748]
[204.59768677 -44.11418915]
[195.12712097 -32.42881012]
[183.72210693 -22.62241364]
[170.74926758 -15.01023960]
[156.62562561 -9.83698463]
[141.80519104 -7.26894903]
[126.76440430 -7.38868380]
[123.97207642 7.34912205]
[121.17975616 22.08692741]
[118.38742828 36.82473373]
[115.59510803 51.56253815]
[116.18778229 108.30481720]
[124.95399475 120.47665405]
[139.29748535 127.15309906]
[140.45700073 142.00250244]
[149.22320557 154.17433167]
[157.98941040 166.34617615]
[166.75561523 178.51800537]
[181.09910583 185.19445801]
[182.25862122 200.04385376]
[181.36047363 185.07077026]
[183.34541321 170.20268250]
[188.14001465 155.98960876]
[195.56692505 142.95729065]
[205.35139465 131.58786011]
[217.13148499 122.30187225]
[230.47142029 115.44284058]
[244.87771606 111.26450348]
[259.81747437 109.92141724]
[274.73800659 111.46327972]
[289.08740234 115.83303833]
[302.33483887 122.86904907]
[313.99026489 132.31105042]
[323.62249756 143.80973816]
[330.87524414 156.93975830]
[335.48022461 171.21542358]
[337.26702881 186.10861206]
[336.16961670 201.06842041]
[332.22857666 215.54142761]
[325.58969116 228.99226379]
[316.49853516 240.92335510]
[305.29141235 250.89332581]
[292.38290405 258.53338623]
[278.25051880 263.56088257]
[263.41705322 265.78988647]
[248.43122864 265.13790894]
[233.84741211 261.62905884]
[220.20506287 255.39314270]
[208.00886536 246.66085815]
[197.70997620 235.75521851]
[189.69235229 223.08552551]
[189.69235229 238.08552551]
[189.69235229 253.08552551]
[189.69235229 268.08554077]
[189.69235229 283.08554077]
[189.69235229 298.08554077]
[189.69235229 313.08554077]
[189.69235229 328.08554077]
[189.69235229 343.08554077]
[189.69235229 358.08554077]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 110]
[13 108]
[14 107]
[15 106]
[16 105]
[18 103]
[19 102]
[20 34]
[21 33]
[22 32]
[36 58]
[38 56]
[39 55]
[40 53]
[41 51]
[42 50]
[43 49]
[59 101]
[60 100]
[61 99]
[62 98]
[63 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
