%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAAUAAUCUUCUUCAUAGUAAUACCCAUCAUAAUCGGAGGCUUUGGCAACUGACUAGUUCxxxxxxxxxxCUGUGGAGCAAACCACAGUUUCAUGCCCAUCGUCCUAGAAUUAAUUCCCCUAAAAAUCUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[110.32558441 414.45034790]
[110.32558441 399.45034790]
[110.32558441 384.45034790]
[110.32558441 369.45034790]
[110.32558441 354.45034790]
[110.32558441 339.45034790]
[110.32558441 324.45034790]
[110.32558441 309.45034790]
[110.32558441 294.45034790]
[110.32558441 279.45034790]
[107.68671417 264.68429565]
[102.49130249 250.61277771]
[97.29588318 236.54124451]
[92.10047150 222.46972656]
[88.15710449 219.67234802]
[85.96615601 214.34027100]
[86.99497986 207.70332336]
[82.38941193 193.42785645]
[77.78385162 179.15240479]
[74.15857697 193.70771790]
[67.63982391 207.21719360]
[58.50182724 219.11244202]
[47.12904739 228.89303589]
[33.99995422 236.14747620]
[19.66690063 240.57055664]
[4.73290634 241.97618103]
[-10.17373466 240.30525208]
[-24.42587852 235.62802124]
[-37.42391586 228.14129639]
[-48.62099838 218.16004944]
[-57.54604721 206.10420227]
[-63.82357788 192.48095703]
[-67.18947601 177.86347961]
[-67.50214386 162.86674500]
[-64.74842072 148.12167358]
[-59.04415894 134.24862671]
[-50.62934875 121.83126068]
[-39.85800934 111.39199829]
[-27.18331337 103.37002563]
[-13.13850021 98.10284424]
[1.68554330 95.81204987]
[16.66514778 96.59401703]
[31.17009544 100.41585541]
[44.59014511 107.11676788]
[56.36069489 116.41484070]
[65.98654175 127.91889191]
[73.06270599 141.14492798]
[77.29256439 155.54234314]
[81.30030823 141.08766174]
[85.30804443 126.63296509]
[89.16520691 112.13736725]
[84.19360352 96.14430237]
[95.97105408 84.23687744]
[91.56627655 69.04119873]
[101.98921204 58.40110397]
[105.39218903 43.79220963]
[108.79516602 29.18331718]
[112.19814301 14.57442474]
[110.62118530 8.04596996]
[112.36132050 2.55022192]
[116.05850983 -0.56527364]
[120.06624603 -15.01996231]
[124.07398987 -29.47465134]
[118.40215302 -41.10582352]
[122.08370972 -53.09186172]
[132.61048889 -59.13290787]
[121.05426025 -49.56976318]
[106.74985504 -45.05491638]
[91.79763794 -46.25130081]
[78.39312744 -52.98324966]
[68.50457001 -64.26227570]
[63.58394623 -78.43222046]
[64.35377502 -93.41245270]
[70.70101929 -107.00334930]
[81.69368744 -117.20929718]
[95.71766663 -122.53170013]
[110.71375275 -122.18905640]
[124.47999573 -116.23166656]
[134.99504089 -105.53428650]
[140.71490479 -91.66767120]
[140.79983521 -76.66856384]
[149.05212402 -89.19452667]
[157.30441284 -101.72048950]
[165.55670166 -114.24644470]
[173.80899048 -126.77240753]
[182.06127930 -139.29837036]
[178.63221741 -154.72616577]
[187.18696594 -168.01495361]
[202.65016174 -171.28071594]
[215.84774780 -162.58595276]
[218.94984436 -147.08909607]
[210.11602783 -133.98416138]
[194.58724976 -131.04608154]
[186.33496094 -118.52011871]
[178.08267212 -105.99415588]
[169.83038330 -93.46820068]
[161.57809448 -80.94223785]
[153.32580566 -68.41627502]
[146.97866821 -54.82532120]
[151.95491028 -38.02541351]
[138.52867126 -25.46690941]
[134.52093506 -11.01222229]
[130.51319885 3.44246650]
[126.80703735 17.97740364]
[123.40406036 32.58629608]
[120.00107574 47.19518661]
[116.59809875 61.80408096]
[121.24628448 75.95482635]
[110.57994843 87.63985443]
[116.13654327 97.92139435]
[113.36690521 109.27546692]
[103.70014191 115.84352875]
[104.61199951 124.99887848]
[99.76273346 130.64070129]
[95.75499725 145.09539795]
[91.74725342 159.55007935]
[92.05931091 174.54684448]
[96.66487122 188.82229614]
[101.27043915 203.09776306]
[106.17198944 217.27432251]
[111.36740875 231.34584045]
[116.56282043 245.41735840]
[121.75823975 259.48886108]
[124.82154083 244.80499268]
[132.40791321 231.86486816]
[143.72505188 222.01995850]
[157.59098816 216.29843140]
[172.55758667 215.29788208]
[187.06172180 219.12277222]
[199.58860779 227.37364197]
[208.82995605 239.18879700]
[213.82057190 253.33424377]
[214.03927612 268.33264160]
[209.46319580 282.61758423]
[200.57026672 294.69714355]
[188.28926086 303.30975342]
[173.90280151 307.55590820]
[158.91340637 306.99212646]
[144.88653564 301.67733765]
[133.28718567 292.16656494]
[125.32558441 279.45034790]
[125.32558441 294.45034790]
[125.32558441 309.45034790]
[125.32558441 324.45034790]
[125.32558441 339.45034790]
[125.32558441 354.45034790]
[125.32558441 369.45034790]
[125.32558441 384.45034790]
[125.32558441 399.45034790]
[125.32558441 414.45034790]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 123]
[12 122]
[13 121]
[14 120]
[17 119]
[18 118]
[19 117]
[48 116]
[49 115]
[50 114]
[51 112]
[53 109]
[55 107]
[56 106]
[57 105]
[58 104]
[61 103]
[62 102]
[63 101]
[66 99]
[81 98]
[82 97]
[83 96]
[84 95]
[85 94]
[86 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
