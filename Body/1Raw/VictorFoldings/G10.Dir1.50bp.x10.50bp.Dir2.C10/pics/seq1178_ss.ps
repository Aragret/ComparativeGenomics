%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGUGCCAGCCACCGCGGUCACACGAUUAACCCAAGUCAAUAGAAGCCGGCGUAAAGAGUGUxxxxxxxxxxUGAGCUGGAGUCCUAGGCACAGCUCUAAGCCUCCUUAUUCGAGCCGAGCUGGGCCAGCCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[89.94439697 275.25869751]
[89.94439697 260.25869751]
[89.94439697 245.25871277]
[89.94439697 230.25871277]
[89.94439697 215.25871277]
[89.94439697 200.25871277]
[89.94439697 185.25871277]
[89.94439697 170.25871277]
[89.94439697 155.25871277]
[89.94439697 140.25871277]
[76.28816223 134.05329895]
[64.98915100 143.91902161]
[53.69015121 153.78474426]
[42.49438477 163.76747131]
[31.40306854 173.86611938]
[27.12769318 182.01309204]
[19.97437668 184.05654907]
[8.67537117 193.92227173]
[3.88527632 209.60623169]
[-12.15125942 213.03575134]
[-22.93722153 200.68281555]
[-17.37693787 185.25506592]
[-1.19035161 182.62326050]
[10.10865307 172.75753784]
[21.30441856 162.77481079]
[32.39573288 152.67616272]
[35.24258423 145.80294800]
[43.82442856 142.48574829]
[55.12343216 132.62002563]
[66.42243958 122.75430298]
[64.43177795 112.14311981]
[65.46067810 102.15857697]
[50.62573624 107.65722656]
[39.25552368 98.03602600]
[24.43776703 95.70492554]
[9.62000942 93.37381744]
[-5.21492863 98.87247467]
[-16.58514023 89.25127411]
[-31.40289879 86.92016602]
[-46.50393295 93.31475067]
[-59.42752075 83.21955872]
[-56.87897873 67.01965332]
[-41.48003387 61.38010788]
[-29.07179451 72.10240936]
[-14.25403690 74.43350983]
[-0.47896448 68.76811981]
[11.95111275 78.55606079]
[26.76887131 80.88716125]
[41.58662796 83.21826935]
[55.36170197 77.55287933]
[67.79177856 87.34082031]
[87.34078979 67.79178619]
[114.96896362 68.79816437]
[124.23390961 57.00152206]
[133.49885559 45.20488358]
[142.64059448 33.31250381]
[151.65812683 21.32567024]
[160.67565918 9.33883858]
[169.69317627 -2.64799404]
[165.30320740 -17.41397667]
[170.39019775 -31.76583481]
[182.80581665 -40.26974487]
[197.67024231 -39.83737183]
[206.68777466 -51.82420349]
[196.79995728 -40.54452133]
[183.97555542 -32.76412582]
[169.40400696 -29.20465088]
[154.43681335 -30.19623375]
[140.46218872 -35.64690399]
[128.77626038 -45.05112076]
[120.46291351 -57.53663635]
[116.29319000 -71.94543457]
[116.65383911 -86.94110107]
[121.51140594 -101.13278961]
[130.41535950 -113.20423126]
[142.53984070 -122.03579712]
[156.76034546 -126.80838013]
[171.75788879 -127.07930756]
[186.14149475 -122.82345581]
[198.57704163 -114.43556213]
[207.91117859 -102.69358826]
[213.27804565 -88.68710327]
[223.49153137 -99.67276764]
[233.70500183 -110.65843201]
[243.91848755 -121.64409637]
[254.13197327 -132.62976074]
[264.34545898 -143.61543274]
[264.66644287 -156.55183411]
[273.45364380 -165.49633789]
[285.57974243 -166.01161194]
[296.01956177 -176.78240967]
[297.20791626 -192.78138733]
[310.53808594 -201.70811462]
[325.78427124 -196.71476746]
[331.25091553 -181.63182068]
[322.74447632 -168.02961731]
[306.79034424 -166.34260559]
[296.35055542 -155.57179260]
[293.03204346 -138.36750793]
[275.33111572 -133.40194702]
[265.11764526 -122.41628265]
[254.90414429 -111.43061829]
[244.69067383 -100.44495392]
[234.47718811 -89.45928955]
[224.26371765 -78.47362518]
[230.75187683 -64.94943237]
[245.71212769 -66.04074097]
[260.67236328 -67.13205719]
[275.63262939 -68.22336578]
[288.88922119 -77.87712097]
[303.76608276 -70.97705841]
[304.95916748 -54.62136841]
[291.24114990 -45.63538361]
[276.72393799 -53.26311493]
[261.76367188 -52.17180634]
[246.80343628 -51.08049393]
[231.84318542 -49.98918533]
[218.67460632 -42.80667496]
[209.65707397 -30.81984138]
[214.19281006 -16.65774155]
[209.46365356 -2.37141871]
[197.08425903 6.49447298]
[181.68000793 6.36953592]
[172.66249084 18.35636902]
[163.64495850 30.34320068]
[154.62742615 42.33003235]
[153.10981750 49.61306381]
[145.29550171 54.46983337]
[136.03054810 66.26647186]
[126.76560211 78.06311035]
[130.97134399 83.38194275]
[134.11256409 89.50894165]
[136.03393555 96.22958374]
[136.62364197 103.29953003]
[135.81907654 110.45352936]
[133.61065674 117.41538239]
[130.04379272 123.90853882]
[125.21847534 129.66711426]
[119.28686523 134.44668579]
[112.44864655 138.03448486]
[104.94439697 140.25871277]
[104.94439697 155.25871277]
[104.94439697 170.25871277]
[104.94439697 185.25871277]
[104.94439697 200.25871277]
[104.94439697 215.25871277]
[104.94439697 230.25871277]
[104.94439697 245.25871277]
[104.94439697 260.25869751]
[104.94439697 275.25869751]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 30]
[12 29]
[13 28]
[14 26]
[15 25]
[17 24]
[18 23]
[32 51]
[34 49]
[35 48]
[36 47]
[38 45]
[39 44]
[53 130]
[54 129]
[55 128]
[56 126]
[57 125]
[58 124]
[59 123]
[63 119]
[64 118]
[82 105]
[83 104]
[84 103]
[85 102]
[86 101]
[87 100]
[90 98]
[91 97]
[106 117]
[107 116]
[108 115]
[109 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
