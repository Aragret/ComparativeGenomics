%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCACUGUCAACCCAACACAGGCAUGCUCAUAAGGAAAGGUUAAAAAAAGUAAAAGGAACxxxxxxxxxxAUAAUAUUCAUCCCUGUAGCAUUGUUCGUUACAUGGUCCAUCAUAGAAUUCUCACUGUGACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[134.29061890 326.41278076]
[134.29061890 311.41278076]
[134.29061890 296.41278076]
[134.29061890 281.41278076]
[134.29061890 266.41278076]
[134.29061890 251.41278076]
[134.29061890 236.41278076]
[134.29061890 221.41278076]
[134.29061890 206.41278076]
[134.29061890 191.41278076]
[130.58445740 176.87783813]
[124.58169556 172.48324585]
[123.39275360 163.35974121]
[116.48575592 150.04458618]
[110.57571411 145.52606201]
[109.57682800 136.37980652]
[102.94833374 122.92383575]
[96.31983185 109.46787262]
[90.17691040 104.16235352]
[89.69668579 95.66230774]
[83.34955597 82.07135773]
[77.00242615 68.48040771]
[65.13300323 63.32573318]
[60.14218521 51.82309341]
[64.21752167 40.39072800]
[58.15450668 26.67067337]
[52.09149551 12.95062065]
[46.02848053 -0.76943338]
[37.94583511 11.86665821]
[23.05076218 13.63777542]
[12.23035908 3.24937439]
[13.39346313 -11.70546436]
[25.68993950 -20.29596329]
[40.13156128 -16.24359512]
[35.52599716 -30.51905632]
[30.92043304 -44.79451752]
[26.31486702 -59.06997681]
[21.70930290 -73.34543610]
[7.86538601 -75.57969666]
[-3.60253882 -83.53442383]
[-10.47912502 -95.60329437]
[-11.46613789 -109.39218140]
[-6.42719412 -122.19406128]
[3.59669232 -131.52043152]
[-0.71089238 -145.88861084]
[-5.01847696 -160.25680542]
[-19.86263466 -157.94059753]
[-34.88392258 -157.66732788]
[-49.80250168 -159.44207764]
[-64.34045410 -163.23176575]
[-78.22693634 -168.96580505]
[-91.20326233 -176.53738403]
[-103.02768707 -185.80543518]
[-113.47992706 -196.59730530]
[-122.36526489 -208.71194458]
[-129.51817322 -221.92367554]
[-134.80538940 -235.98635864]
[-138.12843323 -250.63801575]
[-139.42538452 -265.60571289]
[-138.67207336 -280.61056519]
[-135.88256836 -295.37310791]
[-131.10879517 -309.61828613]
[-124.43971252 -323.08071899]
[-115.99954987 -335.50961304]
[-105.94554138 -346.67343140]
[-94.46500397 -356.36419678]
[-81.77178955 -364.40136719]
[-68.10237885 -370.63522339]
[-53.71142578 -374.94964600]
[-38.86701584 -377.26422119]
[-23.84570122 -377.53585815]
[-8.92731190 -375.75952148]
[5.61022758 -371.96823120]
[19.49609184 -366.23269653]
[32.47159958 -358.65972900]
[44.29501724 -349.39038086]
[54.74608994 -338.59738159]
[63.63011551 -326.48178101]
[70.78159332 -313.26928711]
[76.06729126 -299.20602417]
[79.38874054 -284.55401611]
[80.68407440 -269.58618164]
[79.92914581 -254.58139038]
[77.13803101 -239.81915283]
[72.36272430 -225.57450867]
[65.69218445 -212.11279297]
[57.25067520 -199.68481445]
[47.19546509 -188.52207947]
[35.71387100 -178.83256531]
[23.01979065 -170.79676819]
[9.34970665 -164.56437683]
[13.65729141 -150.19619751]
[17.96487617 -135.82801819]
[33.74907303 -132.50978088]
[45.78785324 -121.63550568]
[50.74618530 -106.09056854]
[47.18671036 -90.07102966]
[35.98476410 -77.95100403]
[40.59032822 -63.67554092]
[45.19589233 -49.40008163]
[49.80145645 -35.12461853]
[54.40702057 -20.84915924]
[59.74853516 -6.83244658]
[65.81154633 6.88760710]
[71.87455750 20.60766029]
[77.93757629 34.32771301]
[92.63716888 43.86301041]
[90.59337616 62.13327789]
[96.94050598 75.72422791]
[103.28763580 89.31517792]
[109.77580261 102.83937073]
[116.40429688 116.29533386]
[123.03279877 129.75129700]
[129.80091858 143.13758850]
[136.70791626 156.45274353]
[143.75305176 169.69532776]
[144.45114136 154.71157837]
[148.64936829 140.31106567]
[156.11279297 127.29963684]
[166.42376709 116.40543365]
[179.00529480 108.23809052]
[193.15327454 103.25466156]
[208.07598877 101.73402405]
[222.93836975 103.76126862]
[236.90869141 109.22294617]
[249.20518494 117.81343079]
[259.13970947 129.05198669]
[266.15634155 142.30969238]
[269.86242676 156.84465027]
[270.05053711 171.84347534]
[266.71020508 186.46681213]
[260.02828979 199.89634705]
[250.37878418 211.38053894]
[238.30162048 220.27673340]
[224.47268677 226.08709717]
[209.66583252 228.48648071]
[194.70965576 227.34060669]
[180.44113159 222.71360779]
[167.65872192 214.86439514]
[157.07774353 204.23222351]
[149.29061890 191.41278076]
[149.29061890 206.41278076]
[149.29061890 221.41278076]
[149.29061890 236.41278076]
[149.29061890 251.41278076]
[149.29061890 266.41278076]
[149.29061890 281.41278076]
[149.29061890 296.41278076]
[149.29061890 311.41278076]
[149.29061890 326.41278076]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 116]
[13 115]
[14 114]
[16 113]
[17 112]
[18 111]
[20 110]
[21 109]
[22 108]
[25 106]
[26 105]
[27 104]
[28 103]
[34 102]
[35 101]
[36 100]
[37 99]
[38 98]
[44 93]
[45 92]
[46 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
