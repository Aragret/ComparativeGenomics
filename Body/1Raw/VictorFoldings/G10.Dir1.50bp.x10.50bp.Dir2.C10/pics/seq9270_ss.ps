%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUUUGACAACAUUCAAAAAAGAGUAAUAAACUUCGCCUUAAUUUUAAUAAUCAACACCCUxxxxxxxxxxUAAUUUUAAUAAUCAACACCCUCCUAGCCUUACUACUAAUAAUUAUUACAUUUUGACUACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[87.18492126 283.83853149]
[87.18492126 268.83853149]
[87.18492126 253.83853149]
[87.18492126 238.83853149]
[87.18492126 223.83853149]
[87.18492126 208.83853149]
[87.18492126 193.83853149]
[87.18492126 178.83853149]
[87.18492126 163.83853149]
[87.18492126 148.83853149]
[73.40253448 142.91857910]
[62.52371216 153.24577332]
[51.64488602 163.57298279]
[40.76606369 173.90019226]
[29.88723755 184.22738647]
[19.00841141 194.55459595]
[18.84804344 210.35807800]
[7.50158358 221.35958862]
[-8.29931259 221.03215027]
[-19.18025589 209.57000732]
[-18.68577194 193.77345276]
[-7.10923386 183.01431274]
[8.68120670 183.67576599]
[19.56003189 173.34857178]
[30.43885803 163.02136230]
[41.31768417 152.69415283]
[52.19650650 142.36695862]
[63.07533264 132.03974915]
[53.53092957 111.67092896]
[54.22046661 89.63999176]
[64.58628845 70.70193481]
[82.02632141 58.75962830]
[102.53425598 56.06124496]
[105.93723297 41.45235062]
[109.34020996 26.84346008]
[112.74318695 12.23456669]
[116.14616394 -2.37432599]
[119.54914093 -16.98321915]
[122.95211792 -31.59211159]
[108.62777710 -36.06652069]
[94.67299652 -41.58660507]
[81.16400146 -48.12221909]
[68.17456818 -55.63766098]
[55.77564621 -64.09188843]
[44.03495026 -73.43872833]
[33.01661301 -83.62712097]
[22.78080559 -94.60143280]
[13.38343620 -106.30171967]
[4.87583065 -118.66407776]
[-2.69554663 -131.62098694]
[-9.28934193 -145.10166931]
[-14.86954117 -159.03253174]
[-19.40566826 -173.33744812]
[-22.87294769 -187.93830872]
[-25.25244141 -202.75537109]
[-26.53115273 -217.70770264]
[-26.70210075 -232.71362305]
[-25.76434898 -247.69120789]
[-23.72302055 -262.55862427]
[-20.58926582 -277.23468018]
[-16.38019562 -291.63925171]
[-11.11880398 -305.69360352]
[-4.83382463 -319.32101440]
[2.44041562 -332.44702148]
[10.66418648 -345.00000000]
[19.79257202 -356.91131592]
[29.77571678 -368.11596680]
[40.55909348 -378.55273438]
[52.08380890 -388.16461182]
[64.28691864 -396.89910889]
[77.10176849 -404.70849609]
[90.45837402 -411.55017090]
[104.28377533 -417.38671875]
[118.50247192 -422.18630981]
[133.03680420 -425.92266846]
[147.80738831 -428.57543945]
[162.73353577 -430.13009644]
[177.73374939 -430.57818604]
[192.72610474 -429.91723633]
[207.62869263 -428.15087891]
[222.36012268 -425.28872681]
[236.83996582 -421.34643555]
[250.98910522 -416.34552002]
[264.73028564 -410.31332397]
[277.98843384 -403.28277588]
[290.69113159 -395.29226685]
[302.76904297 -386.38543701]
[314.15615845 -376.61096191]
[324.79031372 -366.02218628]
[334.61343384 -354.67697144]
[343.57183838 -342.63729858]
[351.61660767 -329.96887207]
[358.70379639 -316.74090576]
[364.79473877 -303.02566528]
[369.85610962 -288.89804077]
[373.86029053 -274.43521118]
[376.78543091 -259.71615601]
[378.61553955 -244.82125854]
[379.34060669 -229.83187866]
[378.95669556 -214.82987976]
[377.46588135 -199.89720154]
[374.87631226 -185.11541748]
[371.20214844 -170.56523132]
[366.46343994 -156.32614136]
[360.68606567 -142.47589111]
[353.90158081 -129.09014893]
[346.14706421 -116.24201202]
[337.46484375 -104.00165558]
[327.90237427 -92.43592834]
[317.51181030 -81.60800934]
[306.34997559 -71.57702637]
[294.47781372 -62.39777756]
[281.96014404 -54.12038803]
[268.86535645 -46.79006958]
[255.26493835 -40.44685745]
[241.23321533 -35.12539673]
[226.84680176 -30.85475159]
[212.18428040 -27.65824890]
[197.32572937 -25.55334473]
[182.35229492 -24.55153656]
[167.34577942 -24.65829659]
[152.38810730 -25.87303925]
[137.56101990 -28.18913269]
[134.15803528 -13.58024025]
[130.75505066 1.02865207]
[127.35208130 15.63754463]
[123.94910431 30.24643707]
[120.54611969 44.85533142]
[117.14314270 59.46422195]
[125.98292542 63.97426987]
[133.66284180 70.40205383]
[139.76934814 78.45438385]
[143.96202087 87.74950409]
[145.99235535 97.83517456]
[145.71815491 108.21059418]
[143.11267090 118.35132599]
[138.26803589 127.73574066]
[131.39254761 135.87188721]
[122.80198669 142.32321167]
[112.90524292 146.73190308]
[102.18492126 148.83853149]
[102.18492126 163.83853149]
[102.18492126 178.83853149]
[102.18492126 193.83853149]
[102.18492126 208.83853149]
[102.18492126 223.83853149]
[102.18492126 238.83853149]
[102.18492126 253.83853149]
[102.18492126 268.83853149]
[102.18492126 283.83853149]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 28]
[12 27]
[13 26]
[14 25]
[15 24]
[16 23]
[33 129]
[34 128]
[35 127]
[36 126]
[37 125]
[38 124]
[39 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
