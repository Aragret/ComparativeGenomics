%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUACUCAACUUAAACUCCAGCACCACGACCCUACUACUAUCUCGCACCUGAAACAAGCUAxxxxxxxxxxUAGACCAAUGGGACUUAAACCCACAAACACUUAGUUAACAGCUAAGCACCCUAAUCAACUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[97.39891815 484.78506470]
[97.39891815 469.78506470]
[97.39891815 454.78506470]
[97.39891815 439.78506470]
[97.39891815 424.78506470]
[97.39891815 409.78506470]
[97.39891815 394.78506470]
[97.39891815 379.78506470]
[97.39891815 364.78506470]
[97.39891815 349.78506470]
[82.70335388 346.88430786]
[68.85170746 341.17031860]
[56.37704468 332.86099243]
[45.75986862 322.27413940]
[37.40954971 309.81533813]
[31.64858246 295.96237183]
[28.70010757 281.24691772]
[28.67928314 266.23422241]
[31.58878326 251.50122070]
[37.31862259 237.61457825]
[45.65031433 225.10867310]
[56.26519775 214.46522522]
[68.75662994 206.09461975]
[82.64556885 200.32011414]
[97.39891815 197.36537170]
[97.39891815 182.36537170]
[89.05036163 173.55578613]
[88.96593475 161.01737976]
[97.73901367 151.50491333]
[98.05107117 136.50816345]
[98.36312866 121.51140594]
[89.75502777 133.79556274]
[74.75534058 133.89254761]
[65.98910522 121.72074127]
[70.83473206 107.52497101]
[85.21382141 103.25364685]
[70.89122009 98.79683685]
[56.56862259 94.34001923]
[46.55230331 105.81142426]
[32.73336792 112.21118927]
[17.50603294 112.43050385]
[3.50852156 106.43136597]
[-6.83400965 95.25318146]
[-11.72965527 80.83261871]
[-10.33021450 65.66813660]
[-2.87815022 52.38707733]
[9.33542347 43.29045486]
[24.19443130 39.95431900]
[39.12445831 42.95668030]
[51.53879166 51.77735138]
[59.28656769 64.88810730]
[61.02544022 80.01741791]
[75.34803772 84.47423553]
[89.67063141 88.93105316]
[80.25393677 77.25518799]
[84.31855011 62.81638718]
[98.44333649 57.76759338]
[110.73966217 66.35830688]
[110.85784149 81.35791779]
[119.11013031 68.83195496]
[119.73939514 50.45849991]
[135.66716003 43.15739059]
[143.65707397 30.46245956]
[151.64698792 17.76753044]
[159.50442505 4.99017286]
[167.22850037 -7.86822939]
[174.95259094 -20.72663116]
[163.82713318 -30.85658836]
[154.89468384 -42.95860291]
[148.49703979 -56.56644440]
[144.87840271 -71.15631104]
[144.17602539 -86.16700745]
[146.41503906 -101.02153778]
[151.50752258 -115.14926147]
[159.25599670 -128.00784302]
[169.36106873 -139.10401917]
[181.43296814 -148.01261902]
[195.00660706 -154.39274597]
[209.55950928 -158.00086975]
[224.53192139 -158.70014954]
[239.34828186 -156.46557617]
[253.43943787 -151.38488770]
[261.16351318 -164.24328613]
[261.63714600 -180.05740356]
[274.82354736 -186.98332214]
[282.54760742 -199.84172058]
[282.29077148 -216.23886108]
[296.49972534 -224.42654419]
[310.55749512 -215.98197937]
[310.00268555 -199.59222412]
[295.40603638 -192.11764526]
[287.68194580 -179.25924683]
[287.76080322 -164.36483765]
[274.02191162 -156.51921082]
[266.29785156 -143.66079712]
[277.40155029 -133.60685730]
[286.33319092 -121.57591248]
[292.74801636 -108.02925873]
[296.39776611 -93.48673248]
[297.14035034 -78.50680542]
[294.94537354 -63.66511536]
[289.89532471 -49.53235626]
[282.18255615 -36.65233612]
[272.10186768 -25.52104378]
[260.03930664 -16.56755066]
[246.45739746 -10.13747597]
[231.87730408 -6.47964478]
[216.85896301 -5.73645830]
[201.97947693 -7.93835020]
[187.81098938 -13.00254726]
[180.08691406 -0.14414459]
[172.36282349 12.71425819]
[171.60968018 20.11550331]
[164.34191895 25.75744629]
[156.35200500 38.45237732]
[148.36209106 51.14730453]
[150.73518372 63.05006790]
[144.12791443 73.70665741]
[131.63609314 77.08424377]
[123.38379669 89.61020660]
[113.35987854 121.82346344]
[113.04782867 136.82022095]
[112.73577118 151.81697083]
[121.99002838 167.70213318]
[112.39891815 182.36537170]
[112.39891815 197.36537170]
[127.15226746 200.32011414]
[141.04119873 206.09461975]
[153.53263855 214.46522522]
[164.14752197 225.10867310]
[172.47921753 237.61457825]
[178.20906067 251.50122070]
[181.11856079 266.23422241]
[181.09773254 281.24691772]
[178.14926147 295.96237183]
[172.38829041 309.81533813]
[164.03796387 322.27413940]
[153.42079163 332.86099243]
[140.94613647 341.17031860]
[127.09448242 346.88430786]
[112.39891815 349.78506470]
[112.39891815 364.78506470]
[112.39891815 379.78506470]
[112.39891815 394.78506470]
[112.39891815 409.78506470]
[112.39891815 424.78506470]
[112.39891815 439.78506470]
[112.39891815 454.78506470]
[112.39891815 469.78506470]
[112.39891815 484.78506470]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[25 126]
[26 125]
[29 123]
[30 122]
[31 121]
[36 54]
[37 53]
[38 52]
[59 120]
[60 119]
[62 116]
[63 115]
[64 114]
[65 112]
[66 111]
[67 110]
[82 95]
[83 94]
[85 92]
[86 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
