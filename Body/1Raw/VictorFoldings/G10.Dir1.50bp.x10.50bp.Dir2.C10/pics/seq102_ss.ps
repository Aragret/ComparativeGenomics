%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUCAUCCUAUUAUUUAUCGCACCUACGUUCAAUAUUACAGGCGAACAUACUUACUAAAGxxxxxxxxxxAACAUCUCAGACGCUCAGGAAAUAGAAACCGUCUGAACUAUCCUGCCCGCCAUCAUCCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[111.01554108 264.01828003]
[111.01554108 249.01828003]
[111.01554108 234.01828003]
[111.01554108 219.01828003]
[111.01554108 204.01828003]
[111.01554108 189.01828003]
[111.01554108 174.01828003]
[111.01554108 159.01828003]
[111.01554108 144.01828003]
[111.01554108 129.01828003]
[105.26464081 124.20401764]
[98.07325745 137.36775208]
[93.33632660 151.60017395]
[78.90505219 155.69140625]
[67.40350342 146.06257629]
[68.89292145 131.13670349]
[82.06954193 123.97054291]
[93.76283264 114.57549286]
[88.01193237 109.76123047]
[73.24588013 112.40009308]
[61.02211761 122.44451141]
[47.13216400 117.06691742]
[32.36610794 119.70578003]
[17.60005379 122.34464264]
[2.83399796 124.98351288]
[-4.00501633 138.78691101]
[-17.50278282 145.83416748]
[-32.38600159 143.60845947]
[-42.97797394 133.17063904]
[-57.74402618 135.80949402]
[-66.57227325 148.91818237]
[-82.09980774 151.86288452]
[-95.11442566 142.89653015]
[-97.89478302 127.33873749]
[-88.79134369 114.41964722]
[-73.20501709 111.80392456]
[-60.38289261 121.04344940]
[-45.61683655 118.40457916]
[-39.29575348 104.94419861]
[-26.10468102 97.70129395]
[-11.00151730 99.63722992]
[0.19513379 110.21745300]
[14.96118927 107.57859039]
[29.72724533 104.93972778]
[44.49330139 102.30086517]
[55.66089630 92.44519806]
[70.60701752 97.63404083]
[85.37306976 94.99517822]
[97.45305634 86.10282898]
[104.36005402 72.78766632]
[111.26705933 59.47251511]
[118.17405701 46.15736008]
[108.82981873 20.90995216]
[128.21759033 -1.69185448]
[124.81461334 -16.30074692]
[109.76715851 -15.90178108]
[94.94748688 -18.54035187]
[80.96243286 -24.10841179]
[68.38468933 -32.37794876]
[57.72930908 -43.01033783]
[49.43261337 -55.57018280]
[43.83435059 -69.54316711]
[41.16376877 -84.35710907]
[41.53022003 -99.40538788]
[44.91870880 -114.07177734]
[51.19046783 -127.75570679]
[60.08868027 -139.89682007]
[71.24896240 -149.99795532]
[84.21431732 -157.64547729]
[98.45381165 -162.52621460]
[113.38435364 -164.44030762]
[128.39454651 -163.30938721]
[142.86973572 -159.17974854]
[156.21716309 -152.22050476]
[167.89025879 -142.71662903]
[177.41102600 -131.05729675]
[184.38958740 -117.71996307]
[188.54019165 -103.25077820]
[189.69284058 -88.24223328]
[187.80036926 -73.30893707]
[182.94026184 -59.06238556]
[175.31152344 -46.08597565]
[165.22656250 -34.91107559]
[153.09834290 -25.99529266]
[139.42350769 -19.70372581]
[142.82647705 -5.09483242]
[156.48272705 1.11057460]
[169.72531128 -5.93456030]
[182.96789551 -12.97969532]
[196.21047974 -20.02482986]
[209.45306396 -27.06996536]
[222.69564819 -34.11510086]
[235.93823242 -41.16023636]
[233.80053711 -56.16710281]
[236.92745972 -70.99943542]
[244.94139099 -83.86616516]
[256.87463379 -93.21356964]
[271.28613281 -97.91289520]
[286.43569946 -97.39668274]
[300.49392700 -91.72727203]
[311.76321411 -81.58926392]
[318.88272095 -68.20687103]
[320.99273682 -53.19609070]
[317.83850098 -38.36954117]
[309.80087280 -25.51760292]
[297.85043335 -16.19220924]
[283.43026733 -11.51944828]
[268.28167725 -12.06357670]
[254.23394775 -17.75889015]
[242.98336792 -27.91764832]
[229.74078369 -20.87251472]
[216.49819946 -13.82737923]
[203.25561523 -6.78224468]
[190.01303101 0.26289043]
[176.77044678 7.30802536]
[163.52786255 14.35315990]
[165.73393250 25.33657837]
[163.86151123 36.02952957]
[158.41281128 45.01520157]
[150.34646606 51.19527054]
[140.91827393 53.92277527]
[131.48921204 53.06435776]
[124.58221436 66.37951660]
[117.67520905 79.69467163]
[110.76821136 93.00982666]
[123.21330261 84.63607025]
[133.22544861 73.46660614]
[146.42109680 66.33393097]
[161.25016785 64.07591248]
[175.97071838 66.95777893]
[188.85357666 74.64102173]
[198.38539124 86.22309113]
[203.44650269 100.34346771]
[203.44238281 115.34346771]
[198.37351990 129.46107483]
[188.83532715 141.03790283]
[175.94825745 148.71405029]
[161.22612000 151.58784485]
[146.39828491 149.32167053]
[133.20692444 142.18202209]
[126.01554108 129.01828003]
[126.01554108 144.01828003]
[126.01554108 159.01828003]
[126.01554108 174.01828003]
[126.01554108 189.01828003]
[126.01554108 204.01828003]
[126.01554108 219.01828003]
[126.01554108 234.01828003]
[126.01554108 249.01828003]
[126.01554108 264.01828003]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[19 48]
[20 47]
[22 45]
[23 44]
[24 43]
[25 42]
[29 38]
[30 37]
[49 125]
[50 124]
[51 123]
[52 122]
[54 86]
[55 85]
[87 116]
[88 115]
[89 114]
[90 113]
[91 112]
[92 111]
[93 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
