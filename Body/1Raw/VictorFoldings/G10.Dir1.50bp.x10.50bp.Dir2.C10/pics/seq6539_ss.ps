%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUUAGCAGGGAACUACUCCCACCCUGGAGCCUCCGUAGACCUAACCAUCUUCUCCUUACxxxxxxxxxxACUCAAAACCAUACCUCUCACUUCAACCUCCCUCACCAUUGGCAGCCUAGCAUUAGCAGGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[96.36267090 270.16735840]
[96.05061340 255.17060852]
[95.73855591 240.17385864]
[95.42650604 225.17710876]
[95.11444855 210.18034363]
[94.80239105 195.18359375]
[94.49033356 180.18684387]
[94.17827606 165.19009399]
[93.86621857 150.19332886]
[79.41153717 146.18559265]
[71.42161560 158.88052368]
[71.33728790 175.27944946]
[56.96109009 183.16976929]
[43.08202362 174.43457031]
[43.97768021 158.05990601]
[58.72668839 150.89060974]
[66.71660614 138.19567871]
[65.56835175 133.70297241]
[64.91159058 129.27934265]
[51.97353363 136.86926270]
[39.03547668 144.45916748]
[26.09741974 152.04907227]
[20.67759323 167.14891052]
[5.44697523 172.18952942]
[-7.91080904 163.30418396]
[-9.14881039 147.30897522]
[2.68266106 136.47404480]
[18.50751114 139.11102295]
[31.44556808 131.52110291]
[44.38362503 123.93119812]
[57.32167816 116.34129333]
[54.81362534 93.16857147]
[64.05968475 71.77288055]
[82.65472412 57.71976852]
[105.76170349 54.66480637]
[110.06928253 40.29662323]
[114.22717285 25.88440704]
[118.23491669 11.42971897]
[113.19244385 -6.24945974]
[126.10913849 -18.08833122]
[129.81530762 -32.62326813]
[133.52146912 -47.15820312]
[119.31463623 -51.99556732]
[105.53114319 -57.93268585]
[92.25595856 -64.93294525]
[79.57093811 -72.95319366]
[67.55429077 -81.94397736]
[56.28009415 -91.84986877]
[45.81787109 -102.60978699]
[36.23211670 -114.15740204]
[27.58193207 -126.42151642]
[19.92065239 -139.32650757]
[13.29551029 -152.79281616]
[7.74735308 -166.73742676]
[3.31038809 -181.07435608]
[0.01197016 -195.71520996]
[-2.12756419 -210.56971741]
[-3.09502411 -225.54629517]
[-2.88444448 -240.55262756]
[-1.49712384 -255.49617004]
[1.05838442 -270.28479004]
[4.76632452 -284.82733154]
[9.60383606 -299.03411865]
[15.54109192 -312.81753540]
[22.54148865 -326.09265137]
[30.56186485 -338.77758789]
[39.55277252 -350.79415894]
[49.45877838 -362.06823730]
[60.21880722 -372.53036499]
[71.76651764 -382.11599731]
[84.03071594 -390.76605225]
[96.93579102 -398.42718506]
[110.40216827 -405.05221558]
[124.34683228 -410.60021973]
[138.68380737 -415.03704834]
[153.32469177 -418.33529663]
[168.17922974 -420.47470093]
[183.15582275 -421.44198608]
[198.16213989 -421.23126221]
[213.10566711 -419.84378052]
[227.89427185 -417.28811646]
[242.43676758 -413.58004761]
[256.64349365 -408.74237061]
[270.42687988 -402.80499268]
[283.70190430 -395.80444336]
[296.38674927 -387.78393555]
[308.40322876 -378.79290771]
[319.67721558 -368.88681030]
[330.13922119 -358.12664795]
[339.72473145 -346.57885742]
[348.37466431 -334.31457520]
[356.03570557 -321.40942383]
[362.66055298 -307.94296265]
[368.20843506 -293.99822998]
[372.64511108 -279.66122437]
[375.94323730 -265.02032471]
[378.08245850 -250.16575623]
[379.04962158 -235.18914795]
[378.83871460 -220.18283081]
[377.45111084 -205.23931885]
[374.89529419 -190.45074463]
[371.18704224 -175.90827942]
[366.34924316 -161.70159912]
[360.41171265 -147.91828918]
[353.41104126 -134.64332581]
[345.39041138 -121.95854950]
[336.39926147 -109.94217682]
[326.49301147 -98.66828918]
[315.73278809 -88.20639038]
[304.18487549 -78.62098694]
[291.92050171 -69.97118378]
[279.01525879 -62.31029892]
[265.54873657 -55.68556976]
[251.60397339 -50.13784027]
[237.26690674 -45.70131302]
[222.62596130 -42.40334320]
[207.77137756 -40.26426315]
[192.79476929 -39.29726410]
[177.78845215 -39.50830078]
[162.84495544 -40.89608002]
[148.05639648 -43.45204163]
[144.35023499 -28.91710663]
[140.64407349 -14.38216972]
[146.55714417 -3.78297353]
[143.54100037 8.38755608]
[132.68960571 15.43745995]
[128.68185425 29.89214897]
[129.93357849 37.22555161]
[124.43746948 44.60420990]
[120.12988281 58.97239304]
[129.17276001 64.23876953]
[136.86189270 71.48749542]
[142.76548767 80.37531281]
[146.53785706 90.46567535]
[147.93933105 101.25007629]
[146.85101318 112.17370605]
[143.28329468 122.66394806]
[137.37773132 132.16040039]
[129.40194702 140.14483643]
[119.73773956 146.16932678]
[108.86297607 149.88127136]
[109.17503357 164.87803650]
[109.48709106 179.87478638]
[109.79914093 194.87153625]
[110.11119843 209.86828613]
[110.42325592 224.86505127]
[110.73531342 239.86180115]
[111.04737091 254.85855103]
[111.35942841 269.85531616]
[113.95042419 289.06301880]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 17]
[11 16]
[19 31]
[20 30]
[21 29]
[22 28]
[35 130]
[36 129]
[37 127]
[38 126]
[40 123]
[41 122]
[42 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
