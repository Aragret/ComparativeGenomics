%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAAAAUUCUAGGCUAUAUACAACUACGCAAAGGCCCCAACGUUGUAGGCCCCUACGGGCUxxxxxxxxxxCUUCCCCUACUCAUCGCACUAAUUUACACUCACAACACCCUAGGCUCACUAAACAUUCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[100.13116455 257.63711548]
[100.13116455 242.63711548]
[100.13116455 227.63711548]
[100.13116455 212.63711548]
[100.13116455 197.63711548]
[100.13116455 182.63711548]
[100.13116455 167.63711548]
[100.13116455 152.63711548]
[100.13116455 137.63711548]
[100.13116455 122.63710785]
[92.93978119 135.80084229]
[90.12608337 150.53459167]
[79.95787048 161.56216431]
[65.50028229 165.55941772]
[51.11142349 161.32139587]
[41.12871170 150.12561035]
[38.56134796 135.34695435]
[44.18324280 121.44033051]
[56.29972458 112.59777069]
[71.25831604 111.48478699]
[85.15707397 105.84346008]
[70.25517273 104.13076782]
[55.35326767 102.41808319]
[40.45136642 100.70539093]
[35.54671860 102.84175110]
[30.79778481 102.83869171]
[27.00733566 101.12575531]
[24.68398666 98.39270782]
[9.91793060 95.75384521]
[-4.84812450 93.11497498]
[-19.61417961 90.47611237]
[-34.38023376 87.83724976]
[-49.14628983 85.19838715]
[-56.48715973 98.44188690]
[-67.73210907 108.58238983]
[-81.66136932 114.51992798]
[-96.76400757 115.61045074]
[-111.40178680 111.73564911]
[-123.98692322 103.31584167]
[-133.15426636 91.26435089]
[-137.90942383 76.88842010]
[-137.73657227 61.74745560]
[-132.65447998 47.48382950]
[-123.21440125 35.64475250]
[-110.44033813 27.51444244]
[-95.71791077 23.97481346]
[-80.64411163 25.40981483]
[-66.85402679 31.66379356]
[-55.84349823 42.05836105]
[-48.80687332 55.46599197]
[-46.50742722 70.43232727]
[-31.74137115 73.07119751]
[-16.97531509 75.71006012]
[-2.20926046 78.34892273]
[12.55679512 80.98778534]
[27.32285118 83.62664795]
[42.16405487 85.80348969]
[57.06595993 87.51618195]
[71.96785736 89.22886658]
[86.86976624 90.94155884]
[100.83015442 85.45452881]
[110.57780457 74.05350494]
[120.32545471 62.65248489]
[130.07310486 51.25146484]
[133.30085754 42.63557816]
[140.14408875 39.71738434]
[150.12681580 28.52161789]
[160.10954285 17.32585335]
[150.21180725 6.02919197]
[141.77735901 -6.39818668]
[134.93406677 -19.76788902]
[129.78565979 -33.87723160]
[126.41020203 -48.51232147]
[124.85884857 -63.45129395]
[125.15512848 -78.46768188]
[127.29454803 -93.33383179]
[131.24467468 -107.82438660]
[136.94561768 -121.71966553]
[144.31095886 -134.80902100]
[153.22904968 -146.89402771]
[163.56468201 -157.79148865]
[175.16116333 -167.33616638]
[187.84271240 -175.38339233]
[201.41708374 -181.81117249]
[215.67846680 -186.52206421]
[230.41067505 -189.44464111]
[245.39038086 -190.53460693]
[260.39050293 -189.77543640]
[275.18362427 -187.17861938]
[289.54547119 -182.78355408]
[303.25836182 -176.65686035]
[316.11437988 -168.89140320]
[327.91864014 -159.60490417]
[338.49218750 -148.93815613]
[347.67477417 -137.05287170]
[355.32711792 -124.12921143]
[361.33328247 -110.36310577]
[365.60217285 -95.96323395]
[368.06909180 -81.14791107]
[368.69662476 -66.14171600]
[367.47528076 -51.17214966]
[364.42355347 -36.46614456]
[359.58770752 -22.24663734]
[353.04107666 -8.72919655]
[344.88290405 3.88125968]
[335.23681641 15.39355946]
[324.24911499 25.63317871]
[312.08633423 34.44488907]
[298.93286133 41.69510651]
[284.98809814 47.27391815]
[270.46343994 51.09675217]
[255.57908630 53.10565567]
[240.56068420 53.27017212]
[225.63589478 51.58780670]
[211.03097534 48.08406830]
[196.96734619 42.81207275]
[183.65820312 35.85173416]
[171.30531311 27.30857849]
[161.32258606 38.50434494]
[151.33985901 49.70011139]
[141.47413635 60.99911499]
[131.72647095 72.40013885]
[121.97882843 83.80115509]
[112.23117065 95.20217896]
[126.25148773 89.87011719]
[137.14778137 79.56134796]
[150.88735962 73.54270935]
[165.85264587 72.52278900]
[180.28175354 76.62165070]
[192.47593689 85.35674286]
[200.99957275 97.69966888]
[204.84913635 112.19728851]
[203.57142639 127.14276886]
[197.31687927 140.77658081]
[186.82185364 151.49357605]
[173.32191467 158.03205872]
[158.40643311 159.62222290]
[143.83143616 156.07688904]
[131.31285095 147.81341553]
[122.32254791 135.80084229]
[115.13116455 122.63710785]
[115.13116455 137.63711548]
[115.13116455 152.63711548]
[115.13116455 167.63711548]
[115.13116455 182.63711548]
[115.13116455 197.63711548]
[115.13116455 212.63711548]
[115.13116455 227.63711548]
[115.13116455 242.63711548]
[115.13116455 257.63711548]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[21 60]
[22 59]
[23 58]
[24 57]
[28 56]
[29 55]
[30 54]
[31 53]
[32 52]
[33 51]
[61 124]
[62 123]
[63 122]
[64 121]
[66 120]
[67 119]
[68 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
