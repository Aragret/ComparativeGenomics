%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCCGCAUAAGCCUGCGUCAGAUUAAAACACUGAACUGACAAUUAACAGCCCAAUAUCUAxxxxxxxxxxAUAAAAUUAAUUAACCACUCAUUCAUCGACCUCCCCACCCCAUCCAACAUCUCCGCAUGACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 278.74459839]
[92.50000000 263.74459839]
[92.50000000 248.74459839]
[92.50000000 233.74459839]
[92.50000000 218.74459839]
[92.50000000 203.74459839]
[92.50000000 188.74459839]
[92.50000000 173.74459839]
[92.50000000 158.74459839]
[92.50000000 143.74459839]
[86.18925476 143.50135803]
[79.81063843 142.33113098]
[73.50218964 140.21189880]
[67.40652466 137.14241028]
[56.10752106 147.00813293]
[44.80851746 156.87385559]
[33.50951004 166.73957825]
[32.69187927 182.52270508]
[20.89759636 193.04270935]
[5.12399769 192.05825806]
[-5.27071810 180.15339661]
[-4.11955118 164.39109802]
[7.89453173 154.12281799]
[23.64378738 155.44058228]
[34.94279480 145.57484436]
[46.24179840 135.70912170]
[57.54080200 125.84340668]
[51.76453018 112.00019073]
[36.80428314 113.09149933]
[21.84403229 114.18280792]
[6.88378382 115.27411652]
[-0.40006587 128.87371826]
[-13.89122677 136.35650635]
[-29.28471756 135.33476257]
[-41.66853333 126.13449860]
[-47.09104156 111.69151306]
[-43.82193756 96.61449432]
[-32.90438843 85.71446228]
[-17.82213402 82.46958923]
[-3.38787460 87.91529083]
[5.79247332 100.31387329]
[20.75272179 99.22255707]
[35.71297073 98.13124847]
[50.67321777 97.03993988]
[62.89029694 69.97028351]
[87.71136475 55.60909653]
[115.23265076 58.31299210]
[122.68756104 45.29668427]
[110.28163910 36.85148239]
[98.56746674 27.47030258]
[87.61549377 17.20957184]
[77.49159241 6.13099337]
[68.25664520 -5.69880056]
[59.96619034 -18.20866394]
[52.67008972 -31.32336044]
[46.41222763 -44.96401596]
[41.23023987 -59.04859161]
[37.15528488 -73.49238586]
[34.21187973 -88.20851898]
[32.41771698 -103.10849762]
[31.78359604 -118.10269928]
[32.31332397 -133.10095215]
[34.00371933 -148.01306152]
[36.84461212 -162.74932861]
[40.81892014 -177.22114563]
[45.90273666 -191.34144592]
[52.06549072 -205.02532959]
[59.27011871 -218.19050598]
[67.47328949 -230.75778198]
[76.62566376 -242.65156555]
[86.67220306 -253.80035400]
[97.55248260 -264.13708496]
[109.20106506 -273.59957886]
[121.54789734 -282.13092041]
[134.51872253 -289.67984009]
[148.03552246 -296.20089722]
[162.01701355 -301.65490723]
[176.37911987 -306.00903320]
[191.03544617 -309.23712158]
[205.89784241 -311.31973267]
[220.87693787 -312.24435425]
[235.88264465 -312.00540161]
[250.82472229 -310.60433960]
[265.61328125 -308.04959106]
[280.15939331 -304.35653687]
[294.37557983 -299.54733276]
[308.17633057 -293.65093994]
[321.47866821 -286.70285034]
[334.20257568 -278.74478149]
[346.27151489 -269.82464600]
[357.61294556 -259.99609375]
[368.15859985 -249.31819153]
[377.84509277 -237.85519409]
[386.61413574 -225.67604065]
[394.41302490 -212.85395813]
[401.19485474 -199.46607971]
[406.91879272 -185.59292603]
[411.55047607 -171.31790161]
[415.06201172 -156.72689819]
[417.43228149 -141.90765381]
[418.64703369 -126.94928741]
[418.69897461 -111.94177246]
[417.58779907 -96.97535706]
[415.32015991 -82.14006042]
[411.90969849 -67.52509308]
[407.37695312 -53.21836853]
[401.74914551 -39.30591583]
[395.06018066 -25.87141609]
[387.35021973 -12.99566460]
[378.66567993 -0.75609708]
[369.05877686 10.77367401]
[358.58728027 21.52430725]
[347.31417847 31.43114471]
[335.30725098 40.43460846]
[322.63873291 48.48054504]
[309.38482666 55.52056503]
[295.62521362 61.51233292]
[281.44265747 66.41980743]
[266.92245483 70.21348572]
[252.15191650 72.87053680]
[237.21990967 74.37498474]
[222.21621704 74.71778107]
[207.23107910 73.89687347]
[192.35461426 71.91719055]
[177.67630005 68.79064178]
[163.28440857 64.53602600]
[149.26548767 59.17893982]
[135.70387268 52.75159454]
[128.24896240 65.76789856]
[134.21002197 71.72431946]
[138.93782043 78.70007324]
[142.26188660 86.44369507]
[144.06240845 94.67603302]
[144.27447510 103.10029602]
[142.89042664 111.41278839]
[139.96017456 119.31385040]
[135.58934021 126.51864624]
[129.93551636 132.76744080]
[123.20250702 137.83496094]
[115.63304138 141.53851318]
[107.50000000 143.74459839]
[107.50000000 158.74459839]
[107.50000000 173.74459839]
[107.50000000 188.74459839]
[107.50000000 203.74459839]
[107.50000000 218.74459839]
[107.50000000 233.74459839]
[107.50000000 248.74459839]
[107.50000000 263.74459839]
[107.50000000 278.74459839]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[14 27]
[15 26]
[16 25]
[17 24]
[28 44]
[29 43]
[30 42]
[31 41]
[47 129]
[48 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
