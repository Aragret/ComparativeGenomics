%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAUUCCAACUGUUCAUCGGCUGAGAGGGCGUAGGAAUUAUAUCCUUCUUGCUCAUCAGUUxxxxxxxxxxAUUCUCGCACGGACUACAACCACGACCAAUGAUAUGAAAAACCAUCGUUGUAUUUCAACUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.27452850 233.41598511]
[94.96247101 218.41923523]
[94.65042114 203.42248535]
[94.33836365 188.42572021]
[94.02630615 173.42897034]
[93.71424866 158.43222046]
[93.40219116 143.43547058]
[93.09013367 128.43870544]
[92.77808380 113.44195557]
[86.00996399 100.05567169]
[74.11758423 90.91394043]
[62.22520447 81.77220154]
[46.56859207 79.49603271]
[41.19357681 65.60507965]
[29.30119705 56.46334839]
[17.40881729 47.32161331]
[3.88462710 40.83345032]
[-10.68807602 37.27868652]
[-25.26077843 33.72392654]
[-39.83348083 30.16916275]
[-54.40618515 26.61440086]
[-70.53086853 40.24588013]
[-94.30973816 35.08662415]
[-108.09211731 41.00658798]
[-121.87450409 46.92654800]
[-129.13220215 61.23408127]
[-144.87190247 64.33914185]
[-157.01943970 53.85980606]
[-156.25628662 37.83491516]
[-143.16784668 28.55739594]
[-127.79446411 33.14416885]
[-114.01208496 27.22420502]
[-100.22969818 21.30424309]
[-99.91764832 6.30748844]
[-113.44183350 -0.18067650]
[-126.96602631 -6.66884184]
[-142.75515747 -5.66198015]
[-150.88349915 -18.14313698]
[-166.67263794 -17.13627625]
[-174.80097961 -29.61743355]
[-190.59011841 -28.61057281]
[-198.71846008 -41.09172821]
[-212.24266052 -47.57989502]
[-225.76684570 -54.06805801]
[-239.29103088 -60.55622482]
[-254.11566162 -55.07844925]
[-268.43649292 -61.76346970]
[-273.75723267 -76.64517975]
[-266.92117310 -90.89453125]
[-251.98402405 -96.05762482]
[-237.80775452 -89.07130432]
[-232.80287170 -74.08041382]
[-219.27867126 -67.59224701]
[-205.75448608 -61.10408401]
[-192.23030090 -54.61592102]
[-177.40850830 -56.08685684]
[-168.31282043 -43.14162445]
[-153.49102783 -44.61256027]
[-144.39533997 -31.66732788]
[-129.57354736 -33.13826752]
[-120.47785950 -20.19303131]
[-106.95366669 -13.70486641]
[-93.42948151 -7.21670151]
[-73.42710876 -12.86936760]
[-56.56586456 -4.15595245]
[-50.85142136 12.04169846]
[-36.27872086 15.59646034]
[-21.70601654 19.15122223]
[-7.13331366 22.70598412]
[7.43938923 26.26074600]
[-3.15937972 15.64631653]
[-10.40842342 2.51424313]
[-13.74202061 -12.11063766]
[-12.90001583 -27.08698654]
[-7.94811726 -41.24603653]
[0.72722268 -53.48280334]
[12.44897366 -62.84231949]
[26.30236053 -68.59416199]
[41.20625305 -70.28945160]
[55.99753952 -67.79588318]
[69.52188873 -61.30805588]
[80.72386169 -51.33229065]
[88.72923279 -38.64710617]
[92.91326904 -24.24245834]
[92.94944000 -9.24250221]
[88.83491516 5.18215418]
[80.89080048 17.90579796]
[69.73706818 27.93546486]
[56.24415970 34.48843002]
[41.46507263 37.05329895]
[26.55055046 35.42923355]
[38.44293213 44.57096863]
[50.33531189 53.71270370]
[65.14130402 55.33499908]
[71.36694336 69.87982178]
[83.25932312 79.02156067]
[95.15170288 88.16329193]
[83.93489075 78.20421600]
[78.69869995 64.14781952]
[80.66619110 49.27741241]
[89.37780762 37.06644440]
[102.79866791 30.36715889]
[117.79392242 30.74438667]
[130.86096191 38.11001205]
[138.94757080 50.74356842]
[140.16488647 65.69409180]
[134.22834778 79.46968079]
[148.87184143 82.72051239]
[163.51535034 85.97133636]
[178.15884399 89.22216034]
[192.80235291 92.47298431]
[207.44584656 95.72381592]
[222.08935547 98.97463989]
[232.40965271 87.59980011]
[247.03961182 82.92434692]
[262.04382324 86.20593262]
[273.38626099 96.56184387]
[278.01583862 111.20638275]
[274.68722534 126.20024872]
[264.29583740 137.51016235]
[249.63684082 142.09381104]
[234.65348816 138.71823120]
[223.37620544 128.29141235]
[218.83853149 113.61814117]
[204.19502258 110.36731720]
[189.55152893 107.11648560]
[174.90802002 103.86566162]
[160.26452637 100.61483765]
[145.62101746 97.36401367]
[130.97752380 94.11318207]
[125.17684937 98.86736298]
[136.46919250 108.74069977]
[147.76155090 118.61403656]
[160.07508850 127.18005371]
[160.66549683 142.16842651]
[149.06390381 151.67646790]
[134.48345947 148.15357971]
[128.50286865 134.39828491]
[121.03918457 121.38700104]
[113.57550812 108.37572479]
[107.77483368 113.12990570]
[108.08689117 128.12666321]
[108.39894867 143.12341309]
[108.71100616 158.12016296]
[109.02305603 173.11691284]
[109.33511353 188.11367798]
[109.64717102 203.11042786]
[109.95922852 218.10717773]
[110.27128601 233.10392761]
[112.86228180 252.31166077]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 97]
[11 96]
[12 95]
[14 93]
[15 92]
[16 91]
[17 70]
[18 69]
[19 68]
[20 67]
[21 66]
[23 33]
[24 32]
[25 31]
[34 63]
[35 62]
[36 61]
[38 59]
[40 57]
[42 55]
[43 54]
[44 53]
[45 52]
[107 130]
[108 129]
[109 128]
[110 127]
[111 126]
[112 125]
[113 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
