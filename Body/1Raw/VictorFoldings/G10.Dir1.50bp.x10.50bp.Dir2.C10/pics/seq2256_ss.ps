%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUCCCCUUGUAAAUUUAACUGUUAGUCCAAAGAGGAACAGCUCUUUGGACACUAGGAAAAxxxxxxxxxxCUCACUCAUUUACACCAACCACCCAACUAUCUAUAAACCUAGCCAUGGCCAUCCCCUUAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[83.95919800 257.95678711]
[83.95919800 242.95678711]
[83.95919800 227.95678711]
[83.95919800 212.95678711]
[83.95919800 197.95678711]
[83.95919800 182.95678711]
[83.95919800 167.95678711]
[83.95919800 152.95678711]
[83.95919800 137.95678711]
[83.95919800 122.95677948]
[76.76781464 136.12051392]
[61.90164185 138.11972046]
[48.91716766 130.60949707]
[43.23729324 116.72644806]
[47.23418808 102.26876068]
[59.23856735 93.27460480]
[74.23790741 93.50071716]
[88.73609924 97.34810638]
[77.85727692 87.02089691]
[66.97845459 76.69369507]
[56.09962463 66.36648560]
[45.22079849 56.03928375]
[34.34197617 45.71207809]
[21.73084641 37.59053421]
[7.82829094 31.95858002]
[-6.07426500 26.32662201]
[-20.48336792 32.24401474]
[-34.50230789 26.33436012]
[-40.05483627 12.56101704]
[-53.95739365 6.92905998]
[-67.91778564 1.44202852]
[-81.93449402 -3.89948392]
[-88.61595154 -3.21710873]
[-93.82691193 -5.68230152]
[-96.41550446 -9.76577187]
[-110.19788361 -15.68573570]
[-123.98026276 -21.60569763]
[-137.76264954 -27.52566147]
[-151.54502869 -33.44562531]
[-165.32740784 -39.36558914]
[-179.10978699 -45.28554916]
[-192.89216614 -51.20551300]
[-206.67456055 -57.12547684]
[-220.45693970 -63.04544067]
[-235.04086304 -56.95572662]
[-249.62738037 -63.03923416]
[-255.56256104 -77.68672943]
[-249.32518005 -92.20811462]
[-234.61575317 -97.98810577]
[-220.16111755 -91.59753418]
[-214.53697205 -76.82781982]
[-200.75459290 -70.90785980]
[-186.97221375 -64.98789215]
[-173.18983459 -59.06793213]
[-159.40744019 -53.14796829]
[-145.62506104 -47.22800446]
[-131.84268188 -41.30804443]
[-118.06030273 -35.38808060]
[-104.27792358 -29.46811676]
[-90.49553680 -23.54815292]
[-76.59297943 -17.91619682]
[-62.57627106 -12.57468414]
[-55.15796280 -13.13535023]
[-48.32543564 -6.97349596]
[-34.42287827 -1.34153926]
[-20.84978867 -7.36705208]
[-6.67039108 -1.85349417]
[-0.44230840 12.42406654]
[13.46024799 18.05602264]
[27.36280441 23.68798065]
[18.49954605 11.58663082]
[13.72682762 -2.63381815]
[13.49483585 -17.63202477]
[17.82545280 -31.99328232]
[26.31019402 -44.36296844]
[38.14873886 -53.57431793]
[52.22441101 -58.75846100]
[67.20953369 -59.42641449]
[81.69062805 -55.51516724]
[94.30177307 -47.39365005]
[103.85341644 -35.82792282]
[109.44461060 -21.90892029]
[110.54795837 -6.94955492]
[107.05938721 7.63913536]
[99.30796051 20.48107338]
[88.02482605 30.36494446]
[74.27426910 36.35845184]
[59.35330582 37.89626312]
[44.66918182 34.83325195]
[55.54800415 45.16045761]
[66.42683411 55.48766327]
[77.30565643 65.81486511]
[88.18447876 76.14207458]
[99.06330872 86.46927643]
[113.18811035 91.51803589]
[128.14836121 90.42671967]
[143.10861206 89.33541107]
[145.15374756 74.41860962]
[150.25595093 60.25311279]
[158.19216919 47.45818710]
[168.61546326 36.59316635]
[181.07015991 28.13302040]
[195.01181030 22.44759369]
[209.83094788 19.78542900]
[224.87971497 20.26290321]
[239.50027466 23.85914230]
[253.05346680 30.41693687]
[264.94680786 39.64960861]
[274.66036987 51.15354156]
[281.76950073 64.42583466]
[285.96347046 78.88627625]
[287.05886841 93.90272522]
[285.00784302 108.81872559]
[279.90008545 122.98221588]
[271.95883179 135.77401733]
[261.53128052 146.63493347]
[249.07324219 155.09017944]
[235.12934875 160.77012634]
[220.30917358 163.42645264]
[205.26058960 162.94306946]
[190.64144897 159.34107971]
[177.09083557 152.77793884]
[165.20112610 143.54060364]
[155.49209595 132.03285217]
[148.38816833 118.75775909]
[144.19992065 104.29566193]
[129.23966980 105.38697052]
[114.27941895 106.47827911]
[127.93147278 112.69289398]
[142.90640259 111.82604980]
[156.61679077 117.91089630]
[166.02043152 129.59727478]
[169.03077698 144.29209900]
[164.97984314 158.73474121]
[154.76649475 169.72053528]
[140.65696716 174.81184387]
[125.78202820 172.87895203]
[113.44225311 164.35076904]
[106.37571716 151.11958313]
[106.15058136 136.12051392]
[98.95919800 122.95677948]
[98.95919800 137.95678711]
[98.95919800 152.95678711]
[98.95919800 167.95678711]
[98.95919800 182.95678711]
[98.95919800 197.95678711]
[98.95919800 212.95678711]
[98.95919800 227.95678711]
[98.95919800 242.95678711]
[98.95919800 257.95678711]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[18 94]
[19 93]
[20 92]
[21 91]
[22 90]
[23 89]
[24 70]
[25 69]
[26 68]
[29 65]
[30 64]
[31 62]
[32 61]
[35 60]
[36 59]
[37 58]
[38 57]
[39 56]
[40 55]
[41 54]
[42 53]
[43 52]
[44 51]
[95 128]
[96 127]
[97 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
