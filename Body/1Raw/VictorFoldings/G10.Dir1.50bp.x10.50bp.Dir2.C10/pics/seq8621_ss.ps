%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUUCAACCAAUAGCCCUGGCCGUACGCCUAACCGCUAACAUUACUGCAGGCCACCUACUCAxxxxxxxxxxUUCUUGCUCAUCAGUUGAUGAUACGCCCGAGCAGAUGCCAACACAGCAGCCAUUCAAGCAAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[144.90199280 291.26229858]
[144.29411316 276.27462769]
[143.68621826 261.28695679]
[143.07833862 246.29928589]
[142.47045898 231.31159973]
[141.86257935 216.32392883]
[141.25468445 201.33624268]
[140.64680481 186.34857178]
[136.59349060 171.90660095]
[129.31396484 158.79139709]
[122.03443146 145.67619324]
[114.75490570 132.56100464]
[107.47537231 119.44580078]
[112.75717163 133.48512268]
[109.23783875 148.06642151]
[98.13354492 158.15080261]
[83.28163147 160.25337219]
[69.81452179 153.64755249]
[62.38606644 140.61613464]
[63.56333542 125.66239929]
[72.93950653 113.95396423]
[87.27477264 109.53692627]
[72.44774628 111.80834961]
[57.62072372 114.07976532]
[42.79369736 116.35118103]
[35.01063919 132.67338562]
[19.14782906 141.02363586]
[1.59580636 138.24949646]
[-10.70004654 125.63821411]
[-25.42284012 128.50863647]
[-40.14563370 131.37905884]
[-50.26573181 143.82748413]
[-66.30607605 143.53265381]
[-75.96188354 130.72074890]
[-71.82604980 115.21996307]
[-57.07123184 108.92117310]
[-43.01605988 116.65626526]
[-28.29326439 113.78584290]
[-13.57047081 110.91542053]
[-10.10743618 99.21125031]
[-1.93121481 90.05142975]
[9.43945026 85.23022461]
[21.85245323 85.72726440]
[32.92961121 91.50917053]
[40.52228165 101.52415466]
[55.34930420 99.25273895]
[70.17633057 96.98132324]
[85.00335693 94.70990753]
[70.42395020 91.18273926]
[61.97343063 78.78964996]
[64.01482391 63.92920685]
[75.49415588 54.27389526]
[90.48461151 54.80877304]
[101.24659729 65.25768280]
[102.22306061 80.22778320]
[107.00264740 66.00964355]
[111.78223419 51.79150009]
[116.56182098 37.57336044]
[112.47962189 19.64528847]
[126.02069092 8.52201366]
[130.51113892 -5.79007530]
[119.28556824 4.15911722]
[106.15737915 11.41520214]
[91.76098633 15.62754154]
[76.79206085 16.59258080]
[61.97395706 14.26368713]
[48.02272797 8.75339890]
[35.61254883 0.32799220]
[25.34312248 -10.60538960]
[17.71069527 -23.51840782]
[13.08409595 -37.78706741]
[11.68689442 -52.72185135]
[13.58660984 -67.60106659]
[18.69144249 -81.70570374]
[26.75470734 -94.35417175]
[37.38676071 -104.93525696]
[50.07382965 -112.93765259]
[64.20283508 -117.97464752]
[79.09100342 -119.80284119]
[94.01890564 -118.33389282]
[108.26516724 -113.63877869]
[121.14135742 -105.94438934]
[132.02526855 -95.62254333]
[140.39094543 -83.17201996]
[145.83412170 -69.19448090]
[148.09179688 -54.36535263]
[147.05482483 -39.40123749]
[142.77424622 -25.02733803]
[153.85334778 -35.13938141]
[164.61994934 -45.58353043]
[175.06410217 -56.35013199]
[185.50825500 -67.11673737]
[195.95240784 -77.88333893]
[206.39654541 -88.64994049]
[209.87278748 -104.67641449]
[225.57066345 -109.42077637]
[237.34153748 -98.00243378]
[233.07655334 -82.16760254]
[217.16316223 -78.20579529]
[206.71900940 -67.43919373]
[196.27485657 -56.67258835]
[185.83070374 -45.90598297]
[175.38656616 -35.13938141]
[175.09492493 -31.56972313]
[173.02307129 -27.97169685]
[169.18070984 -25.19746017]
[163.96539307 -24.06027222]
[152.88629150 -13.94823074]
[144.82322693 -1.29962862]
[140.33277893 13.01245975]
[145.66052246 23.91353607]
[141.99198914 35.89964676]
[130.77996826 42.35294724]
[126.00037384 56.57108688]
[121.22078705 70.78923035]
[116.44120026 85.00737000]
[120.59057617 112.16626740]
[127.87010193 125.28147125]
[135.14962769 138.39666748]
[142.42916870 151.51187134]
[149.70869446 164.62705994]
[150.16787720 149.63409424]
[154.27487183 135.20729065]
[161.78091431 122.22040558]
[172.23143005 111.45998383]
[184.99348450 103.57772064]
[199.29414368 99.05100250]
[214.26728821 98.15398407]
[229.00610352 100.94100189]
[242.61791992 107.24324799]
[254.27836609 116.67904663]
[263.28121948 128.67691040]
[269.08120728 142.51020813]
[271.32708740 157.34111023]
[269.88284302 172.27142334]
[264.83590698 186.39688110]
[256.49200439 198.86199951]
[245.35641479 208.91180420]
[232.10359192 215.93766785]
[217.53617859 219.51405334]
[202.53645325 219.42437744]
[188.01284790 215.67405701]
[174.84498596 208.49021912]
[163.83036804 198.30796814]
[155.63449097 185.74069214]
[156.24237061 200.72836304]
[156.85025024 215.71603394]
[157.45812988 230.70372009]
[158.06602478 245.69139099]
[158.67390442 260.67907715]
[159.28178406 275.66674805]
[159.88966370 290.65441895]
[166.57293701 306.23550415]
[153.45086670 316.97085571]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 121]
[10 120]
[11 119]
[12 118]
[13 117]
[22 48]
[23 47]
[24 46]
[25 45]
[29 39]
[30 38]
[31 37]
[55 116]
[56 115]
[57 114]
[58 113]
[60 110]
[61 109]
[88 108]
[89 107]
[90 103]
[91 102]
[92 101]
[93 100]
[94 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
