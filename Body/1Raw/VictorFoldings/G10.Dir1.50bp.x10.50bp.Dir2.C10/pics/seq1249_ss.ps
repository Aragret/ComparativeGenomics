%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAUAAAGCUAAAACUCACCUGAGUUGUAAAAAACUCCAGUUGACACAAAAUAGACUACGAAxxxxxxxxxxAGGACUGCAAAACCCCACUCUGCAUCAACUGAACGCAAAUCAGCCACUUUAAUUAAGCUAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[94.95426178 413.64480591]
[94.95426178 398.64480591]
[94.95426178 383.64480591]
[94.95426178 368.64480591]
[94.95426178 353.64480591]
[94.95426178 338.64480591]
[94.95426178 323.64480591]
[94.95426178 308.64480591]
[94.95426178 293.64480591]
[94.95426178 278.64480591]
[79.93869781 274.74880981]
[66.42649078 267.10610962]
[55.33493805 256.22888184]
[47.41869736 242.84925842]
[43.21844864 227.86976624]
[43.02397919 212.30264282]
[46.85418320 197.20135498]
[54.45539856 183.58932495]
[65.31820679 172.39056396]
[78.71154785 164.36698914]
[93.73195648 160.06651306]
[93.42398071 145.06967163]
[93.11599731 130.07284546]
[80.83734131 124.17762756]
[72.29388428 113.56968689]
[69.15093231 100.31672668]
[72.02111816 87.00202942]
[80.34497070 76.22091675]
[92.50000000 70.07484436]
[92.50000000 55.07484055]
[92.50000000 40.07484055]
[92.50000000 25.07484055]
[84.76270294 11.27466869]
[92.50000000 -1.45260322]
[92.50000000 -16.45260239]
[92.50000000 -31.45260239]
[92.50000000 -46.45260239]
[83.66528320 -49.90603638]
[76.15507507 -55.66178894]
[70.55168915 -63.25709534]
[67.28501892 -72.08721924]
[66.59953308 -81.45361328]
[68.53607178 -90.61914062]
[72.92962646 -98.86613464]
[79.42333221 -105.55255127]
[87.49742126 -110.16196442]
[96.51081085 -112.34346008]
[98.35413361 -127.22977448]
[100.19745636 -142.11607361]
[102.04077911 -157.00238037]
[103.88410950 -171.88868713]
[105.72743225 -186.77499390]
[107.57075500 -201.66131592]
[92.98215485 -205.22351074]
[78.90575409 -210.45529175]
[65.53192902 -217.28590393]
[53.04153442 -225.62295532]
[41.60349274 -235.35372925]
[31.37249374 -246.34658813]
[22.48689651 -258.45291138]
[15.06686783 -271.50891113]
[9.21275711 -285.33810425]
[5.00373411 -299.75338745]
[2.49672079 -314.55984497]
[1.72562170 -329.55725098]
[2.70086503 -344.54275513]
[5.40926218 -359.31372070]
[9.81418419 -373.67034912]
[15.85606098 -387.41851807]
[23.45318222 -400.37228394]
[32.50280380 -412.35647583]
[42.88254166 -423.20901489]
[54.45202255 -432.78314209]
[67.05478668 -440.94934082]
[80.52038574 -447.59722900]
[94.66671753 -452.63684082]
[109.30246735 -456.00006104]
[124.22971344 -457.64138794]
[139.24656677 -457.53863525]
[154.14994812 -455.69320679]
[168.73831177 -452.13003540]
[182.81436157 -446.89730835]
[196.18772888 -440.06582642]
[208.67756653 -431.72790527]
[220.11495972 -421.99639893]
[230.34523010 -411.00283813]
[239.23002625 -398.89593506]
[246.64916992 -385.83941650]
[252.50236511 -372.00985718]
[256.71041870 -357.59429932]
[259.21646118 -342.78765869]
[259.98654175 -327.79022217]
[259.01031494 -312.80477905]
[256.30093384 -298.03399658]
[251.89503479 -283.67764282]
[245.85224915 -269.92987061]
[238.25425720 -256.97659302]
[229.20384216 -244.99302673]
[218.82337952 -234.14117432]
[207.25325012 -224.56784058]
[194.64994812 -216.40246582]
[181.18391418 -209.75549316]
[167.03724670 -204.71682739]
[152.40126038 -201.35456848]
[137.47390747 -199.71423340]
[122.45706177 -199.81797791]
[120.61373901 -184.93167114]
[118.77041626 -170.04536438]
[116.92708588 -155.15905762]
[115.08376312 -140.27275085]
[113.24044037 -125.38644409]
[111.39711761 -110.50013733]
[127.86433411 -97.62894440]
[133.38856506 -77.33420563]
[125.61968994 -57.64588165]
[107.50000000 -46.45260239]
[107.50000000 -31.45260239]
[107.50000000 -16.45260239]
[107.50000000 -1.45260322]
[115.23729706 11.27466869]
[107.50000000 25.07484055]
[107.50000000 40.07484055]
[107.50000000 55.07484055]
[107.50000000 70.07484436]
[121.51060486 77.88532257]
[129.70602417 91.67429352]
[129.87069702 107.71403503]
[121.96012115 121.66836548]
[108.11283875 129.76486206]
[108.42081451 144.76170349]
[108.72879028 159.75854492]
[122.88364410 163.05171204]
[135.82464600 169.64413452]
[146.79612732 179.14575195]
[155.15869141 190.99678040]
[160.42640686 204.50070190]
[162.29505920 218.86517334]
[160.65977478 233.24853516]
[155.62081909 246.80914307]
[147.47749329 258.75457764]
[136.71037292 268.38796997]
[123.95292664 275.14865112]
[109.95426178 278.64480591]
[109.95426178 293.64480591]
[109.95426178 308.64480591]
[109.95426178 323.64480591]
[109.95426178 338.64480591]
[109.95426178 353.64480591]
[109.95426178 368.64480591]
[109.95426178 383.64480591]
[109.95426178 398.64480591]
[109.95426178 413.64480591]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[21 131]
[22 130]
[23 129]
[29 124]
[30 123]
[31 122]
[32 121]
[34 119]
[35 118]
[36 117]
[37 116]
[47 112]
[48 111]
[49 110]
[50 109]
[51 108]
[52 107]
[53 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
