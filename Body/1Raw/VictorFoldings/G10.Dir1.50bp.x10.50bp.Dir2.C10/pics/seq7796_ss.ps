%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUGAAGCCCCCAUUCGUAUAAUAAUUACAUCACAAGACGUCUUGCACUCAUGAGCUGUCCCCAxxxxxxxxxxAGUAAAGAUACCUCUUUACGGACUCCACUUAUGACUCCCUAAAGCCCAUGUCGAAGCCCCCAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 284.41333008]
[92.50000000 269.41333008]
[92.50000000 254.41334534]
[92.50000000 239.41334534]
[92.50000000 224.41334534]
[92.50000000 209.41334534]
[92.50000000 194.41334534]
[92.50000000 179.41334534]
[92.50000000 164.41334534]
[92.50000000 149.41334534]
[69.26431274 142.09466553]
[51.37862015 124.09352875]
[38.14538193 131.15620422]
[24.91214371 138.21888733]
[26.98869896 153.21598816]
[23.81493187 167.99095154]
[15.79276180 180.76455688]
[3.90676069 190.00538635]
[-10.39666176 194.61338806]
[-25.38525581 194.05075073]
[-39.25071716 188.40467834]
[-50.32685089 178.37449646]
[-63.56008911 185.43717957]
[-76.79332733 192.49984741]
[-82.81689453 207.36915588]
[-98.23815918 211.79228210]
[-111.22725677 202.37617493]
[-111.82005310 186.34407043]
[-99.56181335 175.99443054]
[-83.85600281 179.26661682]
[-70.62276459 172.20393372]
[-57.38953018 165.14126587]
[-59.55725861 150.35659790]
[-56.53021622 135.69487000]
[-48.65484619 122.92957306]
[-36.86521912 113.61151123]
[-22.57230949 108.88046265]
[-7.49511099 109.32576752]
[6.54608679 114.91296387]
[17.84946632 124.98564911]
[31.08270264 117.92297363]
[44.31594086 110.86029053]
[43.41602707 95.88731384]
[29.43213463 90.46045685]
[15.44824219 85.03359985]
[1.46434975 79.60674286]
[-14.65069199 82.64606476]
[-25.13369179 70.03501129]
[-19.20063782 54.74674606]
[-2.95494699 52.50853729]
[6.89120579 65.62285614]
[20.87509727 71.04970551]
[34.85898972 76.47656250]
[48.84288025 81.90341949]
[59.01874924 65.75360870]
[73.95362091 54.35929108]
[91.63776398 48.98785019]
[109.78157043 50.11379242]
[126.11176300 57.38422775]
[135.77909851 45.91502762]
[145.44644165 34.44582748]
[155.11378479 22.97662544]
[158.09179688 7.43822241]
[172.21043396 2.69338608]
[181.87776184 -8.77581501]
[191.54510498 -20.24501610]
[198.87115479 -33.33428955]
[203.59196472 -47.57205582]
[208.31277466 -61.80981827]
[213.03358459 -76.04758453]
[201.27485657 -66.73455048]
[186.87574768 -62.53149414]
[171.95346069 -64.05641174]
[158.70213318 -71.08508301]
[149.07020569 -82.58403778]
[144.47392273 -96.86248779]
[145.58912659 -111.82097626]
[152.25184631 -125.26004028]
[163.48237610 -135.20362854]
[177.62944031 -140.18966675]
[192.61288452 -139.48501587]
[206.22956848 -133.19328308]
[216.47734070 -122.23959351]
[221.84938049 -108.23455811]
[221.55624390 -93.23941040]
[230.02964783 -105.61686707]
[238.50305176 -117.99432373]
[246.97645569 -130.37178040]
[255.44985962 -142.74923706]
[263.92327881 -155.12669373]
[272.39666748 -167.50415039]
[273.11315918 -183.88763428]
[287.78286743 -191.21783447]
[301.31484985 -181.95405579]
[299.78857422 -165.62609863]
[284.77413940 -159.03074646]
[276.30072021 -146.65328979]
[267.82733154 -134.27583313]
[259.35391235 -121.89837646]
[250.88050842 -109.52091980]
[242.40710449 -97.14346313]
[233.93370056 -84.76600647]
[227.27134705 -71.32677460]
[222.55053711 -57.08900833]
[217.82972717 -42.85124588]
[213.10891724 -28.61347961]
[224.47947693 -38.39664078]
[238.19624329 -44.46709061]
[253.08329773 -46.30442047]
[267.86437988 -43.75111771]
[281.27236938 -37.02606964]
[292.15777588 -26.70580673]
[299.58743286 -13.67506981]
[302.92440796 0.94903934]
[301.88262939 15.91281891]
[296.55142212 29.93344879]
[287.38778687 41.80895996]
[275.17730713 50.52128983]
[260.96679688 55.32353973]
[245.97450256 55.80402374]
[231.48567200 51.92154694]
[218.74240112 44.00894928]
[208.83717346 32.74456787]
[202.61912537 19.09407806]
[200.62133789 4.22771215]
[203.01431274 -10.57767773]
[193.34696960 0.89152312]
[183.67962646 12.36072445]
[181.39308167 27.07877350]
[166.58297729 32.64396286]
[156.91563416 44.11316681]
[147.24830627 55.58236694]
[137.58096313 67.05156708]
[142.15954590 73.15784454]
[145.75498962 79.89006042]
[148.28344727 87.09122467]
[149.68598938 94.59341431]
[149.92987061 102.22168732]
[149.00942993 109.79814148]
[146.94612122 117.14611816]
[143.78807068 124.09425354]
[139.60890198 130.48052979]
[134.50608826 136.15602112]
[128.59860229 140.98838806]
[122.02423096 144.86492920]
[114.93627167 147.69523621]
[107.50000000 149.41334534]
[107.50000000 164.41334534]
[107.50000000 179.41334534]
[107.50000000 194.41334534]
[107.50000000 209.41334534]
[107.50000000 224.41334534]
[107.50000000 239.41334534]
[107.50000000 254.41334534]
[107.50000000 269.41333008]
[107.50000000 284.41333008]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 156]
[2 155]
[3 154]
[4 153]
[5 152]
[6 151]
[7 150]
[8 149]
[9 148]
[10 147]
[12 42]
[13 41]
[14 40]
[22 32]
[23 31]
[24 30]
[43 54]
[44 53]
[45 52]
[46 51]
[59 133]
[60 132]
[61 131]
[62 130]
[64 128]
[65 127]
[66 126]
[67 106]
[68 105]
[69 104]
[70 103]
[85 102]
[86 101]
[87 100]
[88 99]
[89 98]
[90 97]
[91 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
