%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCACCCCCUAGCAGAAAAUAGCCCACUAAUCCAAACUCUAACACUAUGCUUAGGCGCUAUCACxxxxxxxxxxGCAGCCCUAGCAACACUCCACCUCCUAUUCUUGCACGAAACGGGAUCAAACAACCCCCUAGGACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[110.84532166 320.80664062]
[110.84532166 305.80664062]
[110.84532166 290.80664062]
[110.84532166 275.80664062]
[110.84532166 260.80664062]
[110.84532166 245.80662537]
[110.84532166 230.80662537]
[110.84532166 215.80662537]
[110.84532166 200.80662537]
[110.84532166 185.80662537]
[108.01101685 171.07684326]
[102.44452667 157.14794922]
[89.48796844 164.70622253]
[74.50903320 165.50077820]
[60.82558441 159.35559082]
[51.46855927 147.63185120]
[48.51056290 132.92640686]
[52.60680771 118.49654388]
[62.84995270 107.53853607]
[76.97090149 102.47963715]
[61.97765732 102.02947235]
[46.98441315 101.57931519]
[31.99116898 101.12915039]
[39.94565964 113.84630585]
[35.15652084 128.06123352]
[21.12819290 133.37217712]
[8.12589741 125.89284515]
[5.66404915 111.09625244]
[15.54385853 99.80988312]
[0.67055881 97.86438751]
[-14.20274162 95.91889191]
[-19.95535851 109.86772156]
[-29.12295341 121.85178375]
[-41.08046341 131.05397034]
[-55.01260757 136.84687805]
[-69.96946716 138.83552551]
[-84.93125916 136.88433838]
[-98.87786865 131.12634277]
[-110.85838318 121.95411682]
[-120.05596161 109.99305725]
[-125.84348297 96.05867767]
[-127.82636261 81.10104370]
[-125.86939240 66.14000702]
[-120.10601044 52.19562531]
[-110.92916107 40.21865082]
[-98.96454620 31.02569580]
[-85.02793121 25.24354935]
[-70.06954193 23.26644897]
[-55.10926056 25.22919464]
[-41.16710663 30.99796486]
[-29.19367599 40.17943573]
[-20.00534058 52.14759445]
[-14.22857380 66.08644104]
[-12.25724888 81.04559326]
[2.61605167 82.99108887]
[17.48935127 84.93658447]
[32.44132996 86.13591003]
[47.43457413 86.58606720]
[62.42781448 87.03623199]
[77.42105865 87.48638916]
[87.75907135 76.61783600]
[86.55974579 61.66585541]
[85.36042023 46.71387863]
[84.16108704 31.76190376]
[80.33705902 23.40338707]
[83.09041595 16.49926376]
[82.19049835 1.52628338]
[81.29058075 -13.44669724]
[66.69423676 -17.47477913]
[54.19808578 -26.02609444]
[45.15762329 -38.17305756]
[40.55348206 -52.59805679]
[40.88508987 -67.73637390]
[46.11647797 -81.94593048]
[55.68017960 -93.68536377]
[68.53880310 -101.68127441]
[83.29753113 -105.06632233]
[98.35546112 -103.47333527]
[112.07920837 -97.07508850]
[122.98012543 -86.56563568]
[129.87576294 -73.08495331]
[132.01814270 -58.09532547]
[129.17486572 -43.22271729]
[121.65435791 -30.08039474]
[110.27237701 -20.09394264]
[96.26356506 -14.34661293]
[97.16347504 0.62636757]
[98.06339264 15.59934807]
[99.11306763 30.56257629]
[100.31239319 45.51455307]
[101.51171875 60.46652985]
[102.71105194 75.41851044]
[115.94429016 82.48118591]
[129.03355408 75.15513611]
[142.12283325 67.82909393]
[155.21211243 60.50304794]
[152.48687744 45.60835648]
[154.74806213 30.63619232]
[161.75041199 17.21062279]
[172.73434448 6.78795433]
[186.50840759 0.49875867]
[201.57849121 -0.97475833]
[216.30990601 2.52723932]
[229.10470581 10.62488079]
[238.57499695 22.43979645]
[243.69352722 36.69038773]
[243.90505981 51.83086395]
[239.18666077 66.21889496]
[230.05014038 78.29377747]
[217.48657227 86.74571228]
[202.85873413 90.65790558]
[187.75337219 89.60598755]
[173.80897522 83.70405579]
[162.53814697 73.59232330]
[149.44888306 80.91836548]
[136.35960388 88.24441528]
[123.27033234 95.57045746]
[125.80946350 110.35466766]
[128.34835815 125.13756561]
[143.13189697 127.67657471]
[159.76593018 124.39852905]
[167.52061462 139.47503662]
[155.18002319 151.10026550]
[140.59289551 142.46012878]
[125.80934143 139.92111206]
[116.37342072 151.58145142]
[121.93991852 165.51034546]
[124.32885742 150.70181274]
[130.90454102 137.21995544]
[141.10324097 126.22056580]
[154.05064392 118.64659882]
[168.63677979 115.14736938]
[183.61120605 116.02285004]
[197.69018555 121.19799042]
[209.66677856 130.22912598]
[218.51420593 142.34205627]
[223.47402954 156.49833679]
[224.12103271 171.48437500]
[220.39974976 186.01544189]
[212.62921143 198.84582520]
[201.47555542 208.87557983]
[187.89498901 215.24488831]
[173.05172729 217.40771484]
[158.21827698 215.17863464]
[144.66629028 208.74874878]
[133.55754089 198.66928101]
[125.84532166 185.80662537]
[125.84532166 200.80662537]
[125.84532166 215.80662537]
[125.84532166 230.80662537]
[125.84532166 245.80662537]
[125.84532166 260.80664062]
[125.84532166 275.80664062]
[125.84532166 290.80664062]
[125.84532166 305.80664062]
[125.84532166 320.80664062]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 156]
[2 155]
[3 154]
[4 153]
[5 152]
[6 151]
[7 150]
[8 149]
[9 148]
[10 147]
[11 127]
[12 126]
[20 60]
[21 59]
[22 58]
[23 57]
[29 56]
[30 55]
[31 54]
[61 92]
[62 91]
[63 90]
[64 89]
[66 88]
[67 87]
[68 86]
[93 117]
[94 116]
[95 115]
[96 114]
[119 125]
[120 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
