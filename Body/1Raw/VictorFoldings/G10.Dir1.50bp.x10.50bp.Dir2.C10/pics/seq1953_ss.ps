%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUUAGCCAAACCAUUUACCCAAAUAAAGUAUAGGCGAUAGAAAUUGAAACCUGGCGCAAxxxxxxxxxxCUCACUAAACAUUCUACUACUCACUCUCACUGCCCAAGAACUAUCAAACUCCUGAGCCAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[113.45974731 263.87417603]
[113.45974731 248.87417603]
[113.45974731 233.87417603]
[113.45974731 218.87417603]
[113.45974731 203.87417603]
[113.45974731 188.87417603]
[113.45974731 173.87417603]
[113.45974731 158.87417603]
[113.45974731 143.87417603]
[113.45974731 128.87417603]
[107.46633148 124.36540985]
[102.59426117 138.55212402]
[87.59633636 138.30242920]
[83.19922638 123.96138763]
[95.47949219 115.34788513]
[89.48607635 110.83911896]
[75.07386017 114.99700165]
[60.66164780 119.15489197]
[52.51777267 134.60205078]
[36.05451965 139.31855774]
[21.54893494 130.86598206]
[7.22633743 135.32279968]
[2.39323211 139.98634338]
[-3.22754979 141.26623535]
[-7.78553486 139.65368652]
[-22.28113174 143.51084900]
[-36.77672958 147.36801147]
[-51.27232361 151.22517395]
[-58.98035431 165.02233887]
[-74.20937347 169.24755859]
[-87.92427826 161.39408875]
[-91.98825073 146.12124634]
[-83.99021912 132.49014282]
[-68.67527008 128.58787537]
[-55.12948608 136.72956848]
[-40.63388824 132.87240601]
[-26.13829041 129.01525879]
[-11.64269447 125.15809631]
[2.76952171 121.00020599]
[17.09211922 116.54338837]
[21.45086479 104.37794495]
[32.19239044 96.84840393]
[45.50498199 96.90146637]
[56.50375748 104.74267578]
[70.91597748 100.58478546]
[85.32819366 96.42690277]
[96.72920990 86.67925262]
[103.07633972 73.08829498]
[109.42346954 59.49734879]
[115.77059937 45.90639496]
[122.11772919 32.31544495]
[114.77243805 18.77466202]
[116.78529358 3.68155742]
[127.17664337 -7.20347023]
[141.80981445 -9.85074043]
[148.15695190 -23.44169044]
[154.50407410 -37.03264236]
[139.96156311 -33.35632324]
[126.98136139 -40.87392807]
[122.93303680 -55.31729889]
[130.11503601 -68.48616028]
[144.44975281 -72.90383911]
[157.79859924 -66.06217194]
[162.58261108 -51.84401321]
[170.57252502 -64.53894043]
[178.56243896 -77.23387146]
[167.02732849 -86.85803223]
[156.87794495 -97.93384552]
[148.29544067 -110.26364899]
[141.43298340 -123.62740326]
[136.41302490 -137.78662109]
[133.32514954 -152.48861694]
[132.22448730 -167.47100830]
[133.13066101 -182.46641541]
[136.02751160 -197.20722961]
[140.86332703 -211.43038940]
[147.55181885 -224.88206482]
[155.97361755 -237.32218933]
[165.97843933 -248.52876282]
[177.38771057 -258.30178833]
[189.99783325 -266.46682739]
[203.58377075 -272.87820435]
[217.90306091 -277.42150879]
[232.70016479 -280.01559448]
[247.71098328 -280.61422729]
[262.66766357 -279.20672607]
[277.30328369 -275.81817627]
[291.35662842 -270.50906372]
[304.57693481 -263.37414551]
[316.72824097 -254.54072571]
[327.59368896 -244.16645813]
[336.97943115 -232.43650818]
[344.71786499 -219.56018066]
[350.67098999 -205.76728821]
[354.73251343 -191.30398560]
[356.82995605 -176.42835999]
[356.92590332 -161.40589905]
[355.01861572 -146.50469971]
[351.14215088 -131.99069214]
[345.36569214 -118.12288666]
[337.79232788 -105.14878082]
[328.55718994 -93.29990387]
[317.82510376 -82.78771973]
[305.78762817 -73.79982758]
[292.65954590 -66.49662781]
[278.67514038 -61.00845718]
[264.08398438 -57.43325424]
[249.14651489 -55.83482361]
[234.12925720 -56.24168777]
[219.30023193 -58.64659500]
[204.92408752 -63.00661850]
[191.25737000 -69.24395752]
[183.26745605 -56.54902649]
[175.27754211 -43.85409546]
[168.09503174 -30.68551254]
[161.74790955 -17.09456253]
[155.40077209 -3.50361085]
[162.76394653 9.41620731]
[161.08767700 24.37127686]
[150.80653381 35.60299683]
[135.70867920 38.66257477]
[129.36155701 52.25352478]
[123.01441956 65.84447479]
[116.66728973 79.43542480]
[110.32015991 93.02638245]
[122.40614319 84.14217377]
[131.93217468 72.55534363]
[144.79907227 64.84539795]
[159.50900269 61.90981674]
[174.34967041 64.09032440]
[187.59352112 71.13309479]
[197.69886780 82.21829987]
[203.48941040 96.05555725]
[204.29106140 111.03411865]
[200.01052856 125.41038513]
[191.14608765 137.51086426]
[178.72961426 145.92698669]
[164.20646667 149.67906189]
[149.26722717 148.33032227]
[135.65112305 142.03791809]
[128.45974731 128.87417603]
[128.45974731 143.87417603]
[128.45974731 158.87417603]
[128.45974731 173.87417603]
[128.45974731 188.87417603]
[128.45974731 203.87417603]
[128.45974731 218.87417603]
[128.45974731 233.87417603]
[128.45974731 248.87417603]
[128.45974731 263.87417603]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[16 46]
[17 45]
[18 44]
[21 40]
[22 39]
[25 38]
[26 37]
[27 36]
[28 35]
[47 125]
[48 124]
[49 123]
[50 122]
[51 121]
[55 117]
[56 116]
[57 115]
[64 114]
[65 113]
[66 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
