%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAAUCUCCUUAAUUAUAACAUUCACAGCCACAGAACUAAUCAUAUUUUAUAUCUUCUUCGxxxxxxxxxxGCACGAAACGGGAUCAAACAACCCCCUAGGAAUCACCUCCCAUUCCGAUAAAAUCACCUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[54.10058212 328.19757080]
[54.10058212 313.19757080]
[54.10058212 298.19757080]
[54.10058212 283.19757080]
[54.10058212 268.19757080]
[54.10058212 253.19757080]
[54.10058212 238.19757080]
[54.10058212 223.19757080]
[54.10058212 208.19757080]
[54.10058212 193.19757080]
[42.69956207 183.44992065]
[27.88180351 185.78102112]
[13.06404591 188.11212158]
[-1.75371242 190.44322205]
[-1.70957470 205.47314453]
[-3.96037197 220.33364868]
[-8.45334148 234.67636108]
[-15.08316326 248.16510010]
[-23.69442368 260.48364258]
[-34.08526230 271.34323120]
[-46.01210022 280.48931885]
[-59.19536209 287.70751953]
[-73.32601166 292.82858276]
[-88.07279968 295.73248291]
[-103.09004211 296.35113525]
[-118.02571869 294.67007446]
[-132.52972412 290.72869873]
[-146.26203918 284.61935425]
[-158.90077209 276.48532104]
[-170.14965820 266.51721191]
[-179.74499512 254.94871521]
[-187.46186829 242.05104065]
[-193.11936951 228.12648010]
[-196.58489990 213.50148010]
[-197.77719116 198.51887512]
[-196.66831970 183.52984619]
[-193.28427124 168.88577271]
[-187.70436096 154.92994690]
[-180.05941772 141.98950195]
[-170.52862549 130.36778259]
[-159.33540344 120.33721161]
[-146.74214172 112.13292694]
[-133.04405212 105.94725037]
[-118.56222534 101.92517853]
[-103.63613892 100.16099548]
[-88.61567688 100.69605255]
[-73.85295105 103.51781464]
[-59.69401550 108.56013489]
[-46.47077560 115.70481110]
[-34.49320602 124.78435516]
[-24.04207420 135.58595276]
[-15.36237049 147.85636902]
[-8.65756130 161.30798340]
[-4.08481646 175.62547302]
[10.73294163 173.29435730]
[25.55069923 170.96325684]
[40.36845779 168.63215637]
[48.07188797 161.79177856]
[57.92079544 159.32054138]
[67.65332031 161.64517212]
[78.53215027 151.31796265]
[89.41097260 140.99075317]
[100.28979492 130.66355896]
[80.89836884 128.47561646]
[64.78618622 114.04930115]
[59.47041321 90.90724182]
[69.22346497 66.94961548]
[70.15909576 51.97882462]
[71.09471893 37.00803375]
[72.03034973 22.03724289]
[58.51201248 15.02479553]
[49.01969147 3.11615515]
[45.19798660 -11.62543488]
[47.70903778 -26.64590454]
[56.11778641 -39.34286880]
[68.96736145 -47.51649857]
[84.03150940 -49.75066376]
[98.70025635 -45.65828323]
[110.43217468 -35.94838715]
[117.19461823 -22.30327034]
[117.81597137 -7.08703423]
[112.18856812 7.06401587]
[101.28739166 17.69812584]
[87.00114441 22.97287178]
[86.06551361 37.94366455]
[85.12988281 52.91445541]
[84.19425964 67.88524628]
[90.85183716 71.33874512]
[104.16699219 78.24574280]
[110.82456970 81.69924164]
[122.52419281 72.31208038]
[134.22381592 62.92491913]
[132.50512695 47.59358978]
[139.36848450 33.77701187]
[152.62380981 25.88400078]
[168.04139709 26.43319130]
[180.70153809 35.24933624]
[186.56442261 49.51923752]
[183.75923157 64.68942261]
[173.18109131 75.91913605]
[158.20545959 79.62502289]
[143.61097717 74.62454224]
[131.91134644 84.01170349]
[120.21173096 93.39886475]
[122.06481171 100.66633606]
[136.59980774 96.96039581]
[140.30551147 111.49545288]
[125.77097321 115.20127106]
[127.62405396 122.46874237]
[142.39010620 125.10760498]
[157.15615845 127.74646759]
[171.92221069 130.38533020]
[186.68827820 133.02420044]
[197.78146362 122.17427826]
[213.13833618 119.95024872]
[226.85383606 127.20727539]
[233.65409851 141.15489197]
[230.92427063 156.42996216]
[219.71401978 167.15890503]
[204.33393860 169.21621704]
[190.69796753 161.81082153]
[184.04940796 147.79025269]
[169.28335571 145.15138245]
[154.51730347 142.51252747]
[139.75123596 139.87365723]
[124.98518372 137.23480225]
[110.61700439 141.54237366]
[99.73817444 151.86958313]
[88.85935211 162.19679260]
[77.98052979 172.52398682]
[90.90314484 164.90783691]
[105.89605713 164.44670105]
[119.26231384 171.25428772]
[127.70606232 183.65199280]
[129.14526367 198.58277893]
[123.22501373 212.36505127]
[111.40515137 221.60034180]
[96.60019684 224.01144409]
[82.46076202 219.00382996]
[72.47333527 207.81225586]
[69.10058594 193.19757080]
[69.10058594 208.19757080]
[69.10058594 223.19757080]
[69.10058594 238.19757080]
[69.10058594 253.19757080]
[69.10058594 268.19757080]
[69.10058594 283.19757080]
[69.10058594 298.19757080]
[69.10058594 313.19757080]
[69.10058594 328.19757080]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 57]
[12 56]
[13 55]
[14 54]
[60 130]
[61 129]
[62 128]
[63 127]
[67 87]
[68 86]
[69 85]
[70 84]
[90 104]
[91 103]
[92 102]
[109 126]
[110 125]
[111 124]
[112 123]
[113 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
