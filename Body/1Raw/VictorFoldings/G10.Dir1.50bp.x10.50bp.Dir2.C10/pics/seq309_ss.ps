%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAAACCCCCCCUCCCCCGCUUCUGGCCACAGCACUUAAACACAUCUCUGCCAAACCCCAAxxxxxxxxxxACAAACAAUGUUCAACCAGUAACUACUACUAAUCAACGCCCAUAAUCAUACAAAGCCCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-2.35905600 284.96353149]
[-10.08314133 297.82192993]
[-17.80722618 310.68032837]
[-25.39713478 323.61837769]
[-32.85204315 336.63467407]
[-40.30695343 349.65100098]
[-47.76186371 362.66729736]
[-55.21677399 375.68362427]
[-62.67168427 388.69992065]
[-70.12659454 401.71624756]
[-69.52867889 418.10449219]
[-83.56420898 426.58599854]
[-97.79463196 418.43569946]
[-97.58091736 402.03796387]
[-83.14290619 394.26132202]
[-75.68799591 381.24502563]
[-68.23308563 368.22869873]
[-60.77817535 355.21240234]
[-53.32326508 342.19607544]
[-45.86835480 329.17977905]
[-38.41344452 316.16348267]
[-37.81444168 308.74816895]
[-30.66562843 302.95623779]
[-22.94154358 290.09783936]
[-15.21745872 277.23944092]
[-37.14973068 260.86898804]
[-56.78327942 241.80226135]
[-73.78903198 220.35884094]
[-87.88196564 196.89811707]
[-98.82586670 171.81332397]
[-106.43730927 145.52488708]
[-110.58872986 118.47341919]
[-125.56844330 119.25326538]
[-140.54815674 120.03311157]
[-154.00270081 129.40899658]
[-168.73280334 122.20092773]
[-169.58538818 105.82395935]
[-155.68339539 97.12530518]
[-141.32800293 105.05339813]
[-126.34828949 104.27355194]
[-111.36857605 103.49370575]
[-111.28101349 92.98474884]
[-110.67127991 82.49312592]
[-109.54089355 72.04476929]
[-107.89263153 61.66550064]
[-105.73057556 51.38097763]
[-103.06007385 41.21660995]
[-99.88771820 31.19752502]
[-96.22135162 21.34848022]
[-92.07003021 11.69381809]
[-87.44403076 2.25739932]
[-82.35476685 -6.93745422]
[-76.81482697 -15.86801815]
[-70.83789825 -24.51222229]
[-64.43875122 -32.84870148]
[-57.63320541 -40.85684967]
[-50.43807983 -48.51688385]
[-42.87115097 -55.80986404]
[-34.95112991 -62.71776962]
[-26.69758224 -69.22352600]
[-18.13091087 -75.31105804]
[-9.27228451 -80.96532440]
[-0.14359850 -86.17234039]
[9.23258686 -90.91924286]
[18.83309746 -95.19429779]
[28.63420868 -98.98694611]
[38.61169434 -102.28780365]
[48.74089813 -105.08872223]
[58.99678802 -107.38277435]
[69.35401154 -109.16429901]
[79.78697968 -110.42887878]
[90.26989746 -111.17340088]
[100.77686310 -111.39601898]
[111.28191376 -111.09618378]
[121.75907898 -110.27463531]
[132.18246460 -108.93340302]
[142.52632141 -107.07581329]
[152.76507568 -104.70644379]
[162.87341309 -101.83115387]
[172.82637024 -98.45704651]
[182.59933472 -94.59246826]
[188.94647217 -108.18341827]
[195.29359436 -121.77436829]
[191.18875122 -137.28338623]
[200.87014771 -150.07597351]
[216.91105652 -150.33872986]
[227.00625610 -137.87011719]
[223.41157532 -122.23497009]
[208.88455200 -115.42723846]
[202.53741455 -101.83628845]
[196.19029236 -88.24533844]
[213.94430542 -78.06059265]
[230.63015747 -66.20661926]
[246.09143066 -52.79455185]
[260.18316650 -37.95011520]
[272.77325439 -21.81247330]
[283.74371338 -4.53290272]
[292.99166870 13.72660732]
[306.89422607 8.09465027]
[320.79678345 2.46269369]
[334.69934082 -3.16926289]
[342.25311279 -17.32270813]
[358.05398560 -20.09965706]
[369.98089600 -9.36987209]
[368.88455200 6.63567448]
[355.60592651 15.63889694]
[340.33129883 10.73329258]
[326.42874146 16.36524963]
[312.52618408 21.99720573]
[298.62362671 27.62916374]
[302.46981812 39.21471405]
[305.64086914 51.00295639]
[308.12619019 62.95458603]
[309.91751099 75.02974701]
[311.00885010 87.18817139]
[311.39657593 99.38931274]
[311.07934570 111.59249878]
[310.05828857 123.75701904]
[308.33676147 135.84233093]
[305.92053223 147.80812073]
[302.81762695 159.61448669]
[299.03842163 171.22206116]
[294.59552002 182.59214783]
[289.50372314 193.68682861]
[283.77999878 204.46908569]
[277.44345093 214.90299988]
[270.51519775 224.95376587]
[263.01837158 234.58784485]
[254.97793579 243.77314758]
[246.42071533 252.47901917]
[237.37524414 260.67645264]
[227.87168884 268.33807373]
[217.94174194 275.43838501]
[207.61849976 281.95367432]
[196.93640137 287.86221313]
[185.93104553 293.14434814]
[174.63916016 297.78237915]
[163.09838867 301.76092529]
[151.34721375 305.06668091]
[139.42480469 307.68862915]
[127.37093353 309.61801147]
[115.22579956 310.84841919]
[103.02989197 311.37573242]
[90.82387543 311.19821167]
[78.64846039 310.31640625]
[66.54424286 308.73330688]
[54.55158997 306.45416260]
[42.71048355 303.48657227]
[31.06041527 299.84045410]
[19.64023018 295.52798462]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 25]
[2 24]
[3 23]
[4 21]
[5 20]
[6 19]
[7 18]
[8 17]
[9 16]
[10 15]
[32 41]
[33 40]
[34 39]
[81 91]
[82 90]
[83 89]
[98 110]
[99 109]
[100 108]
[101 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
