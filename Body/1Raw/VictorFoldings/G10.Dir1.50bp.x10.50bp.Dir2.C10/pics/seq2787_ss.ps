%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCUCUUACUUUUAACCAGUGAAAUUGACCUGCCCGUGAAGAGGCGGGCAUAACACAGCAAxxxxxxxxxxCACCUCCAUCAUCACCUCAACCCAAAAAGGCAUAAUUAAACUUUACUUCCUCUCUUUCUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 422.89694214]
[92.50000000 407.89694214]
[92.50000000 392.89694214]
[92.50000000 377.89694214]
[92.50000000 362.89694214]
[92.50000000 347.89694214]
[92.50000000 332.89694214]
[92.50000000 317.89694214]
[92.50000000 302.89694214]
[92.50000000 287.89694214]
[77.89575195 284.59271240]
[64.38652039 278.11822510]
[52.65122604 268.79525757]
[43.28042221 257.08886719]
[36.74658203 243.58416748]
[33.38029099 228.95701599]
[33.35351944 213.94032288]
[36.67081451 199.28717041]
[43.16894913 185.73318481]
[52.52492142 173.95951843]
[64.27202606 164.55865479]
[77.82312775 158.00456238]
[92.50000000 154.62886047]
[92.50000000 139.62886047]
[73.00506592 129.96614075]
[61.36651611 111.58232880]
[60.97154236 89.82768250]
[71.93509674 71.03350830]
[63.68280792 58.50754547]
[55.43051910 45.98158264]
[47.17823029 33.45561981]
[30.54458237 25.62608528]
[30.12225533 8.10976219]
[21.61116600 -4.24180984]
[10.41540051 -14.22453594]
[-2.82718539 -21.26967049]
[-16.73153687 -14.63829041]
[-31.69958115 -17.43310928]
[-42.02964401 -28.37631607]
[-43.91256332 -43.12733841]
[-57.15514755 -50.17247391]
[-70.39773560 -57.21760559]
[-83.64031982 -64.26274109]
[-96.88290405 -71.30787659]
[-110.12548828 -78.35301208]
[-123.36807251 -85.39814758]
[-138.40773010 -80.54179382]
[-152.43807983 -87.81675720]
[-157.13514709 -102.90692139]
[-149.71226501 -116.85956573]
[-134.57327271 -121.39682770]
[-120.69989777 -113.82683563]
[-116.32293701 -98.64073181]
[-103.08035278 -91.59559631]
[-89.83776855 -84.55046082]
[-76.59518433 -77.50532532]
[-63.35259628 -70.46018982]
[-50.11001205 -63.41505814]
[-36.86742783 -56.36992264]
[-23.58227158 -63.05144119]
[-8.73457623 -60.59992599]
[1.94744313 -49.74876022]
[4.21794939 -34.51225662]
[17.46053505 -27.46712112]
[9.78696156 -40.35573196]
[5.49188137 -54.72766113]
[4.83518410 -69.71327972]
[7.85660505 -84.40583038]
[14.37332249 -97.91628265]
[23.99101830 -109.42713928]
[36.12773895 -118.24190521]
[50.04911041 -123.82719421]
[64.91276550 -125.84505463]
[79.81932068 -124.17339325]
[93.86681366 -118.91335297]
[106.20523834 -110.38321686]
[116.08802032 -99.09912109]
[122.91716003 -85.74386597]
[126.27943420 -71.12555695]
[125.97140503 -56.12871933]
[122.01170349 -41.66079712]
[114.63993073 -28.59722328]
[104.30213928 -17.72845840]
[91.62385559 -9.71215725]
[77.37222290 -5.03337288]
[62.40959167 -3.97521353]
[47.64133072 -6.60170698]
[33.96273804 -12.75290012]
[42.47382736 -0.40132758]
[54.34696579 2.11580300]
[61.53085709 12.39250851]
[59.70419312 25.20333099]
[67.95648193 37.72929382]
[76.20877075 50.25525665]
[84.46105957 62.78121567]
[90.91777039 60.70356750]
[97.63134003 59.73728943]
[104.41189575 59.90970612]
[111.06768036 61.21594620]
[117.41044617 63.61906052]
[123.26082611 67.05109406]
[128.45333862 71.41497040]
[132.84115601 76.58728790]
[136.30015564 82.42174530]
[138.73254395 88.75335693]
[140.06948853 95.40303802]
[155.02973938 96.49434662]
[169.98999023 97.58565521]
[184.95024109 98.67696381]
[192.97596741 85.64445496]
[206.14480591 77.84445190]
[221.43067932 77.06935120]
[235.32098389 83.49725342]
[244.62384033 95.65107727]
[247.20152283 110.73796082]
[242.46168518 125.29105377]
[231.49351501 135.96615601]
[216.81742859 140.31022644]
[201.80586243 137.32499695]
[189.90838623 127.69647217]
[183.85893250 113.63721466]
[168.89868164 112.54590607]
[153.93843079 111.45459747]
[138.97817993 110.36328125]
[132.48255920 123.90773773]
[121.48114777 134.13586426]
[107.50000000 139.62886047]
[107.50000000 154.62886047]
[122.17687225 158.00456238]
[135.72796631 164.55865479]
[147.47508240 173.95951843]
[156.83105469 185.73318481]
[163.32917786 199.28717041]
[166.64648438 213.94032288]
[166.61970520 228.95701599]
[163.25341797 243.58416748]
[156.71957397 257.08886719]
[147.34877014 268.79525757]
[135.61347961 278.11822510]
[122.10424805 284.59271240]
[107.50000000 287.89694214]
[107.50000000 302.89694214]
[107.50000000 317.89694214]
[107.50000000 332.89694214]
[107.50000000 347.89694214]
[107.50000000 362.89694214]
[107.50000000 377.89694214]
[107.50000000 392.89694214]
[107.50000000 407.89694214]
[107.50000000 422.89694214]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[23 128]
[24 127]
[28 95]
[29 94]
[30 93]
[31 92]
[33 89]
[34 88]
[35 64]
[36 63]
[40 59]
[41 58]
[42 57]
[43 56]
[44 55]
[45 54]
[46 53]
[106 124]
[107 123]
[108 122]
[109 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
