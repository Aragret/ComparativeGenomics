%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCACAGCAGUCCUACUUCUCCUAUCUCUCCCAGUCCUAGCUGCUGGCAUCACUAUACUACUxxxxxxxxxxCCCACUAAUCCAAACUCUAACACUAUGCUUAGGCGCUAUCACCACUCUGUUCGCAGCAGUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[116.45321655 282.00610352]
[116.45321655 267.00610352]
[116.45321655 252.00610352]
[116.45321655 237.00610352]
[116.45321655 222.00610352]
[116.45321655 207.00610352]
[116.45321655 192.00610352]
[116.45321655 177.00610352]
[116.45321655 162.00610352]
[116.45321655 147.00610352]
[112.20037079 132.62162781]
[104.04370880 120.03318024]
[83.85211945 116.56089020]
[74.56592560 95.53131866]
[59.74344635 97.83219147]
[44.92096329 100.13306427]
[30.09848213 102.43394470]
[15.27600002 104.73481750]
[0.45351771 107.03569031]
[-14.36896420 109.33657074]
[-21.86446953 124.46659088]
[-36.74313354 132.09245300]
[-53.07545853 129.39672852]
[-64.48345184 117.63204956]
[-79.25556946 120.23677063]
[-94.02768707 122.84149933]
[-96.94083405 137.73706055]
[-105.04146576 150.57234192]
[-117.23404694 159.61143494]
[-131.86962891 163.63191223]
[-146.96887207 162.09002686]
[-160.48971558 155.19429016]
[-170.60359192 143.87731934]
[-175.94267273 129.66961670]
[-175.78489685 114.49267578]
[-170.15159607 100.39904785]
[-159.80462646 89.29477692]
[-146.14334106 82.68163300]
[-131.01531982 81.45397949]
[-116.46648407 85.77784729]
[-104.46445465 95.06847382]
[-96.63240814 108.06938171]
[-81.86029053 105.46466064]
[-67.08817291 102.85993195]
[-62.35567856 90.33972931]
[-51.96134949 81.73595428]
[-38.56376266 79.38858795]
[-25.65932846 84.01923370]
[-16.66983986 94.51408386]
[-1.84735715 92.21321106]
[12.97512531 89.91233826]
[27.79760742 87.61145782]
[42.62009048 85.31058502]
[57.44256973 83.00971222]
[72.26505280 80.70883942]
[83.35018921 70.60340118]
[87.00889587 56.05644608]
[90.66759491 41.50949478]
[94.32630157 26.96253967]
[80.36057281 21.42961121]
[67.23653412 14.12107372]
[55.17877197 5.16198206]
[44.39360046 -5.29435968]
[35.06557083 -17.06903076]
[27.35429573 -29.96055031]
[21.39172935 -43.74832916]
[17.27989578 -58.19643784]
[15.08915710 -73.05764771]
[14.85699654 -88.07767487]
[16.58738708 -102.99949646]
[20.25072098 -117.56778717]
[25.78431320 -131.53324890]
[33.09347916 -144.65693665]
[42.05314255 -156.71427917]
[52.50999832 -167.49894714]
[64.28511047 -176.82641602]
[77.17700195 -184.53707886]
[90.96505737 -190.49899292]
[105.41336823 -194.61013794]
[120.27468109 -196.80017090]
[135.29472351 -197.03161621]
[150.21646118 -195.30050659]
[164.78457642 -191.63648987]
[178.74977112 -186.10223389]
[191.87312317 -178.79243469]
[203.93002319 -169.83219910]
[214.71420288 -159.37483215]
[224.04110718 -147.59927368]
[231.75115967 -134.70701599]
[237.71241760 -120.91867828]
[241.82287598 -106.47017670]
[244.01219177 -91.60875702]
[244.24291992 -76.58870697]
[242.51110840 -61.66704941]
[238.84638977 -47.09911346]
[233.31147766 -33.13416672]
[226.00105286 -20.01117706]
[217.04025269 -7.95469189]
[206.58236694 2.82898664]
[194.80636597 12.15533543]
[181.91374207 19.86476707]
[168.12510681 25.82536507]
[153.67642212 29.93513489]
[138.81489563 32.12375259]
[123.79483032 32.35376740]
[108.87326050 30.62124443]
[105.21455383 45.16819763]
[101.55584717 59.71515274]
[97.89714050 74.26210785]
[111.44570160 78.36387634]
[120.11763763 88.58520508]
[121.75437927 101.13225555]
[116.63214874 111.87651825]
[124.78881073 124.46495819]
[124.44007874 109.46900940]
[127.15908813 94.71749878]
[132.83140564 80.83135986]
[141.21824646 68.39508820]
[151.96659851 57.93216324]
[164.62403870 49.88298798]
[178.65777588 44.58638382]
[193.47711182 42.26528931]
[208.45823669 43.01741028]
[222.97058105 46.81108475]
[236.40327454 53.48662949]
[248.19088745 62.76305008]
[257.83728027 74.24988556]
[264.93637085 87.46362305]
[269.18936157 101.84805298]
[270.41723633 116.79771423]
[268.56832886 131.68333435]
[263.72042847 145.87832642]
[256.07760620 158.78518677]
[245.96157837 169.86065674]
[233.79814148 178.63851929]
[220.09930420 184.74931335]
[205.44166565 187.93579102]
[190.44221497 188.06384277]
[175.73231506 185.12808228]
[161.93113708 179.25205994]
[149.61961365 170.68315125]
[139.31596375 159.78201294]
[131.45321655 147.00610352]
[131.45321655 162.00610352]
[131.45321655 177.00610352]
[131.45321655 192.00610352]
[131.45321655 207.00610352]
[131.45321655 222.00610352]
[131.45321655 237.00610352]
[131.45321655 252.00610352]
[131.45321655 267.00610352]
[131.45321655 282.00610352]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 114]
[12 113]
[14 55]
[15 54]
[16 53]
[17 52]
[18 51]
[19 50]
[20 49]
[24 44]
[25 43]
[26 42]
[56 109]
[57 108]
[58 107]
[59 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
