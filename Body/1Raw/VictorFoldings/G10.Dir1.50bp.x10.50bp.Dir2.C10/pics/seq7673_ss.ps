%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAGUCCUCAUCGCCCUCCCAUCCCUACGCAUCCUUUACAUAACAGACGAGGUCAACGAUCCCUCCxxxxxxxxxxAACUAAAUACUACCGUAUGGCCCACCAUAAUUACCCCCAUACUCCUUACACUAUUCCUCAUCACCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-48.42609406 290.16174316]
[-58.01860428 301.69357300]
[-67.61111450 313.22543335]
[-76.97959900 324.94003296]
[-86.12057495 336.83300781]
[-95.26155090 348.72595215]
[-104.40252686 360.61892700]
[-113.54350281 372.51187134]
[-122.68447876 384.40484619]
[-131.82545471 396.29782104]
[-140.96643066 408.19076538]
[-134.49792480 422.06222534]
[-135.22833252 437.35028076]
[-142.98979187 450.54190063]
[-155.99876404 458.60571289]
[-171.26591492 459.68869019]
[-185.28294373 453.54202271]
[-194.82884216 441.57815552]
[-197.71003723 426.54626465]
[-193.26443481 411.90060425]
[-182.51362610 401.00662231]
[-167.92807007 396.36770630]
[-152.85939026 399.04980469]
[-143.71841431 387.15682983]
[-134.57743835 375.26388550]
[-125.43646240 363.37091064]
[-116.29548645 351.47793579]
[-107.15451050 339.58499146]
[-98.01353455 327.69201660]
[-88.87256622 315.79904175]
[-88.60243988 310.98712158]
[-85.27468872 306.30593872]
[-79.14297485 303.63293457]
[-69.55046082 292.10107422]
[-59.95795059 280.56921387]
[-73.22458649 267.88397217]
[-85.48828888 254.22673035]
[-96.67805481 239.67652893]
[-106.72908783 224.31762695]
[-115.58319855 208.23896790]
[-123.18913269 191.53361511]
[-129.50283813 174.29829407]
[-134.48776245 156.63281250]
[-138.11506653 138.63943481]
[-140.36372375 120.42233276]
[-141.22071838 102.08699799]
[-140.68109131 83.73957825]
[-138.74797058 65.48630524]
[-135.43254089 47.43286133]
[-130.75401306 29.68376541]
[-124.73946381 12.34179020]
[-117.42371368 -4.49266243]
[-108.84912872 -20.72212410]
[-99.06534576 -36.25262833]
[-88.12901306 -50.99425507]
[-76.10344696 -64.86165619]
[-63.05827713 -77.77453613]
[-49.06903458 -89.65814209]
[-34.21671295 -100.44366455]
[-42.17094803 -113.16098022]
[-50.12518692 -125.87829590]
[-58.07942200 -138.59561157]
[-73.50654602 -138.68200684]
[-86.42548370 -147.11434937]
[-92.71385956 -161.20193481]
[-90.36506653 -176.44944763]
[-80.12860107 -187.99147034]
[-65.27087402 -192.14498901]
[-50.53294754 -187.58460999]
[-40.61762619 -175.76556396]
[-38.68885803 -160.45924377]
[-45.36210632 -146.54985046]
[-37.40787125 -133.83253479]
[-29.45363426 -121.11521912]
[-21.49939728 -108.39790344]
[-9.44164753 -114.97515106]
[2.97089672 -120.85547638]
[15.69799519 -126.01982117]
[28.69838905 -130.45144653]
[41.92993164 -134.13597107]
[55.34973145 -137.06147766]
[68.91427612 -139.21844482]
[82.57960510 -140.59991455]
[96.30139923 -141.20138550]
[110.03518677 -141.02091980]
[123.73645020 -140.05909729]
[137.36074829 -138.31903076]
[150.86393738 -135.80638123]
[164.20223999 -132.52926636]
[177.33239746 -128.49833679]
[190.21185303 -123.72664642]
[202.79885864 -118.22966003]
[215.05259705 -112.02520752]
[226.93336487 -105.13339996]
[238.40261841 -97.57657623]
[249.42320251 -89.37923431]
[259.95938110 -80.56795502]
[269.97698975 -71.17130280]
[279.44354248 -61.21973801]
[288.32836914 -50.74551773]
[296.60269165 -39.78260422]
[304.23962402 -28.36653519]
[317.18154907 -35.94983673]
[330.12347412 -43.53313828]
[343.06539917 -51.11643982]
[356.00732422 -58.69974136]
[363.64077759 -73.21397400]
[380.03561401 -73.58988953]
[388.32623291 -59.44078064]
[379.98400879 -45.32203674]
[363.59063721 -45.75781250]
[350.64871216 -38.17451096]
[337.70678711 -30.59120941]
[324.76486206 -23.00790787]
[311.82290649 -15.42460632]
[317.92694092 -3.43903494]
[323.35345459 8.86811924]
[328.08560181 21.45859337]
[332.10861206 34.29324722]
[335.41003418 47.33217621]
[337.97961426 60.53484726]
[339.80929565 73.86020660]
[340.89346313 87.26683807]
[341.22869873 100.71305084]
[340.81396484 114.15705109]
[339.65057373 127.55703735]
[337.74212646 140.87135315]
[335.09457397 154.05859375]
[331.71612549 167.07778931]
[327.61727905 179.88842773]
[322.81082153 192.45071411]
[317.31161499 204.72557068]
[311.13684082 216.67485046]
[304.30566406 228.26138306]
[296.83932495 239.44917297]
[288.76101685 250.20343018]
[280.09585571 260.49072266]
[270.87078857 270.27905273]
[261.11453247 279.53802490]
[250.85736084 288.23880005]
[240.13119507 296.35437012]
[228.96937561 303.85949707]
[217.40660095 310.73083496]
[205.47882080 316.94702148]
[193.22311401 322.48873901]
[180.67758179 327.33877563]
[167.88122559 331.48202515]
[154.87384033 334.90560913]
[141.69586182 337.59890747]
[128.38824463 339.55352783]
[114.99237823 340.76339722]
[101.54989624 341.22476196]
[88.10260010 340.93618774]
[74.69229126 339.89852905]
[61.36066055 338.11508179]
[48.14915848 335.59133911]
[35.09885406 332.33517456]
[22.25032234 328.35668945]
[9.64350605 323.66827393]
[-2.68239927 318.28448486]
[-14.68907356 312.22207642]
[-26.33919144 305.49987793]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 35]
[2 34]
[3 33]
[4 30]
[5 29]
[6 28]
[7 27]
[8 26]
[9 25]
[10 24]
[11 23]
[59 75]
[60 74]
[61 73]
[62 72]
[102 115]
[103 114]
[104 113]
[105 112]
[106 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
