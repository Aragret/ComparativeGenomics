%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAAACCACAAAGACAUUGGAACACUAUACCUAUUAUUCGGCGCAUGAGCUGGAGUCCUAGGCxxxxxxxxxxCUAUUACUAUCCAUCCUCAUCCUAGCAAUAAUCCCCAUCCUCCAUAUAUCCAAACAACAAAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[99.40826416 533.54089355]
[99.40826416 518.54089355]
[99.40826416 503.54086304]
[99.40826416 488.54086304]
[99.40826416 473.54086304]
[99.40826416 458.54086304]
[99.40826416 443.54086304]
[99.40826416 428.54086304]
[99.40826416 413.54086304]
[99.40826416 398.54086304]
[84.36526489 394.94287109]
[70.60604858 387.85830688]
[58.92595291 377.69210815]
[50.00127792 365.02731323]
[44.35007095 350.59191895]
[42.30208969 335.21688843]
[43.97955704 319.78823853]
[49.28985977 305.19616699]
[57.93067932 292.28359985]
[69.40717316 281.79748535]
[83.06031799 274.34555054]
[98.10478210 270.36120605]
[97.80077362 255.36428833]
[89.80712128 242.79644775]
[97.26314545 228.84230042]
[96.95914459 213.84538269]
[96.50317383 198.85231018]
[95.89529419 183.86462402]
[95.28740692 168.87695312]
[94.67951965 153.88928223]
[81.83309174 151.01298523]
[70.06032562 145.12181091]
[60.05701065 136.56390381]
[52.41434860 125.84506226]
[47.58401871 113.59876251]
[45.85149765 100.54876709]
[47.31917953 87.46634674]
[51.90032196 75.12466431]
[59.32417679 64.25312805]
[69.15199280 55.49424744]
[80.80294037 49.36568069]
[93.58844757 46.22962189]
[93.89244843 31.23270416]
[94.19645691 16.23578453]
[94.50045776 1.23886597]
[94.80445862 -13.75805283]
[95.10846710 -28.75497246]
[92.80149841 -32.59131241]
[91.95841980 -36.56203079]
[92.43616486 -40.17925644]
[93.94474792 -43.05490875]
[96.09385681 -44.94077301]
[97.61138153 -59.86381149]
[98.52289581 -74.83609009]
[98.82690430 -89.83300781]
[99.13090515 -104.82992554]
[99.43490601 -119.82685089]
[99.73891449 -134.82376099]
[90.47692108 -150.70758057]
[100.06709290 -165.37443542]
[100.06709290 -180.37443542]
[100.06709290 -195.37443542]
[100.06709290 -210.37443542]
[97.68285370 -214.16323853]
[96.75946808 -218.11604309]
[97.16381073 -221.74221802]
[98.61380005 -224.64784241]
[100.72425079 -226.57688904]
[101.93901825 -241.52761841]
[103.15378571 -256.47833252]
[89.18507385 -262.28610229]
[77.69605255 -272.12774658]
[69.81230164 -285.03903198]
[66.30619812 -299.75509644]
[67.52122498 -314.83419800]
[73.33834839 -328.79901123]
[83.18766785 -340.28143311]
[96.10424805 -348.15652466]
[110.82265472 -351.65277100]
[125.90092468 -350.42764282]
[139.86184692 -344.60116577]
[151.33766174 -334.74414062]
[159.20410156 -321.82229614]
[162.69049072 -307.10153198]
[161.45524597 -292.02410889]
[155.61941528 -278.06707764]
[145.75471497 -266.59786987]
[132.82759094 -258.74008179]
[118.10451508 -255.26358032]
[116.88974762 -240.31285095]
[115.67498016 -225.36210632]
[115.06709290 -210.37443542]
[115.06709290 -195.37443542]
[115.06709290 -180.37443542]
[115.06709290 -165.37443542]
[123.41387939 -156.56822205]
[123.50179291 -144.03358459]
[114.73583221 -134.51976013]
[114.43183136 -119.52284241]
[114.12782288 -104.52592468]
[113.82382202 -89.52900696]
[113.51981354 -74.53208923]
[115.42427826 -72.39943695]
[116.57286835 -69.36202240]
[116.60828400 -65.71355438]
[115.28974152 -61.87443542]
[112.53442383 -58.34628677]
[111.01689911 -43.42324829]
[110.10538483 -28.45096779]
[109.80138397 -13.45404911]
[109.49737549 1.54287028]
[109.19337463 16.53978920]
[108.88936615 31.53670883]
[108.58536530 46.53362656]
[124.55567169 51.73634338]
[138.16351318 61.58245087]
[148.09968567 75.12466431]
[153.40823364 91.06010437]
[153.57844543 107.85563660]
[148.59394836 123.89539337]
[138.93428040 137.63619995]
[125.52878571 147.75607300]
[109.66719818 153.28138733]
[110.27508545 168.26907349]
[110.88296509 183.25674438]
[111.49085236 198.24443054]
[114.98262024 206.75022888]
[111.95606232 213.54136658]
[112.26006317 228.53828430]
[120.27546692 242.17881775]
[112.79769897 255.06028748]
[113.10169983 270.05722046]
[127.35188293 273.10388184]
[140.55433655 279.25411987]
[152.04304504 288.19400024]
[161.23922729 299.46884155]
[167.68058777 312.50656128]
[171.04449463 326.64651489]
[171.16416931 341.17309570]
[168.03689575 355.35183716]
[161.82409668 368.46667480]
[152.84286499 379.85604858]
[141.54992676 388.94619751]
[128.51829529 395.28018188]
[114.40826416 398.54086304]
[114.40826416 413.54086304]
[114.40826416 428.54086304]
[114.40826416 443.54086304]
[114.40826416 458.54086304]
[114.40826416 473.54086304]
[114.40826416 488.54086304]
[114.40826416 503.54086304]
[114.40826416 518.54089355]
[114.40826416 533.54089355]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[22 132]
[23 131]
[25 129]
[26 128]
[27 126]
[28 125]
[29 124]
[30 123]
[42 114]
[43 113]
[44 112]
[45 111]
[46 110]
[47 109]
[52 108]
[53 107]
[54 102]
[55 101]
[56 100]
[57 99]
[58 98]
[60 95]
[61 94]
[62 93]
[63 92]
[68 91]
[69 90]
[70 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
