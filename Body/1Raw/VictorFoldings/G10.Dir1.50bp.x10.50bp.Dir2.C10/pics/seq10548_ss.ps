%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCUGACAACAGAGGCUUACGACCCCUUAUUUACCGAGAAAGCUCACAAGAACUGCUAACUxxxxxxxxxxCCCUUAUUUACCGAGAAAGCUCACAAGAACUGCUAACUCAUGCCCCCAUGUCUAACAACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 255.93475342]
[92.50000000 240.93475342]
[92.50000000 225.93475342]
[92.50000000 210.93475342]
[92.50000000 195.93475342]
[92.50000000 180.93475342]
[92.50000000 165.93475342]
[92.50000000 150.93475342]
[92.50000000 135.93475342]
[92.50000000 120.93476105]
[78.37519836 115.88600159]
[68.86683655 127.48734283]
[59.35847855 139.08868408]
[49.85012054 150.69003296]
[47.72465897 166.95085144]
[32.47792435 172.98982239]
[19.79445076 162.59455872]
[22.72190857 146.45881653]
[38.24877930 141.18167114]
[47.75713730 129.58032227]
[57.26549911 117.97898102]
[66.77385712 106.37763977]
[69.71933746 91.66968536]
[65.41175079 77.30149841]
[61.10416794 62.93331528]
[46.10020828 64.14162445]
[31.17872810 62.20457458]
[16.99164009 57.20924377]
[4.15826273 49.37627792]
[-6.76171255 39.05013275]
[-15.29263878 26.68394470]
[-21.06362534 12.81962490]
[-23.82466125 -1.93587196]
[-23.45745468 -16.93712616]
[-19.98048401 -31.52848244]
[-13.54809856 -45.07270432]
[-4.44365740 -56.97880936]
[6.93294573 -66.72785187]
[20.08284950 -73.89554596]
[15.77526474 -88.26372528]
[11.46767998 -102.63191223]
[-2.16510820 -110.16748047]
[-6.32893133 -124.80022430]
[0.93909895 -137.75056458]
[-3.36848569 -152.11875916]
[-10.68759155 -165.21191406]
[-20.67031860 -176.40766907]
[-36.21110535 -177.46676636]
[-46.17552185 -188.96307373]
[-45.07005692 -203.77232361]
[-55.05278397 -214.96807861]
[-65.03550720 -226.16384888]
[-79.86887360 -222.39160156]
[-94.75352478 -225.95614624]
[-106.26906586 -236.03834534]
[-111.76931763 -250.32141113]
[-109.99035645 -265.52319336]
[-101.34098816 -278.15042114]
[-87.80875397 -285.30145264]
[-72.50328064 -285.33303833]
[-58.94164658 -278.23794556]
[-50.24021149 -265.64651489]
[-48.39850998 -250.45222473]
[-53.83974457 -236.14657593]
[-43.85701752 -224.95080566]
[-33.87429047 -213.75505066]
[-19.03568268 -213.16236877]
[-8.75228977 -201.95048523]
[-9.47455215 -186.39039612]
[0.50817454 -175.19462585]
[-2.22053599 -189.94435120]
[-0.94486016 -204.88999939]
[4.24407101 -218.96391296]
[12.97557068 -231.16067505]
[24.62588120 -240.60897827]
[38.36272812 -246.63383484]
[53.20478439 -248.80487061]
[68.09176636 -246.96697998]
[81.96017456 -241.25144958]
[93.81929016 -232.06660461]
[102.82191467 -220.06857300]
[108.32492065 -206.11447144]
[109.93519592 -191.20115662]
[107.53769684 -176.39399719]
[101.30370331 -162.75079346]
[91.67854309 -151.24615479]
[79.34983826 -142.70199585]
[65.19830322 -137.72865295]
[50.23490524 -136.68142700]
[35.52859116 -139.63511658]
[22.12994766 -146.37873840]
[10.99969864 -156.42633057]
[15.30728340 -142.05815125]
[28.50121880 -135.24230957]
[33.07440186 -120.73229218]
[25.83586311 -106.93949890]
[30.14344788 -92.57131195]
[34.45103455 -78.20312500]
[49.37537003 -79.45210266]
[64.23902130 -77.56989288]
[78.39199066 -72.63636017]
[91.21483612 -64.86486053]
[102.14579773 -54.59300995]
[110.70542145 -42.26802063]
[116.51755524 -28.42724037]
[119.32590485 -13.67472172]
[119.00532532 1.34515011]
[115.56739807 15.97579479]
[109.16003418 29.57713890]
[100.06109619 41.55362320]
[88.66637421 51.38027954]
[75.47235107 58.62572861]
[79.77993774 72.99391174]
[84.08752441 87.36209869]
[89.48123169 77.99845886]
[100.21785736 71.54790497]
[114.47415161 70.87968445]
[128.99409485 77.68792725]
[139.82283020 91.83362579]
[153.20912170 98.60173798]
[166.59539795 105.36985016]
[179.98168945 112.13796997]
[196.31668091 110.68884277]
[205.51641846 124.26443481]
[198.11698914 138.89935303]
[181.73030090 139.53843689]
[173.21356201 125.52425385]
[159.82728577 118.75613403]
[146.44099426 111.98802185]
[133.05471802 105.21990967]
[126.66603851 109.14862061]
[135.16879272 121.50592804]
[143.67156982 133.86323547]
[156.26728821 142.00865173]
[156.09713745 157.00769043]
[143.31987000 164.86528015]
[129.85751343 158.24977112]
[128.27143860 143.33352661]
[121.08006287 130.16978455]
[113.88867950 117.00604248]
[107.50000000 120.93476105]
[107.50000000 135.93475342]
[107.50000000 150.93475342]
[107.50000000 165.93475342]
[107.50000000 180.93475342]
[107.50000000 195.93475342]
[107.50000000 210.93475342]
[107.50000000 225.93475342]
[107.50000000 240.93475342]
[107.50000000 255.93475342]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 22]
[12 21]
[13 20]
[14 19]
[23 114]
[24 113]
[25 112]
[39 98]
[40 97]
[41 96]
[44 93]
[45 92]
[46 70]
[47 69]
[50 66]
[51 65]
[52 64]
[119 130]
[120 129]
[121 128]
[122 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
