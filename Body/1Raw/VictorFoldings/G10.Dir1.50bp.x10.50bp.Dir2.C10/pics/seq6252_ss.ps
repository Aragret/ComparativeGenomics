%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACCCCCACUGAUGUUCGCCGACCGUUGACUAUUCUCUACAAACCACAAAGACAUUGGAAxxxxxxxxxxAAUUAAUUCCCCUAAAAAUCUUUGAAAUAGGGCCCGUAUUUACCCUAUAGCACCCCCUCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[104.19352722 384.22235107]
[104.19352722 369.22235107]
[104.19352722 354.22235107]
[104.19352722 339.22235107]
[104.19352722 324.22235107]
[104.19352722 309.22235107]
[104.19352722 294.22235107]
[104.19352722 279.22235107]
[104.19352722 264.22235107]
[104.19352722 249.22235107]
[88.65696716 244.46870422]
[75.31958771 235.15744019]
[65.48024750 222.18144226]
[60.10142899 206.79113770]
[59.71508026 190.47396851]
[64.37004089 174.81076050]
[73.62620544 161.32244873]
[86.59610748 151.32241821]
[102.02998352 145.78869629]
[101.40600586 130.80166626]
[82.95352936 125.24901581]
[71.60224152 109.96544647]
[71.61849213 91.15959930]
[56.65824127 90.06829071]
[47.79890060 103.82794189]
[30.76512718 109.64619446]
[12.23967648 103.13084412]
[-2.17253971 107.28873444]
[-11.15515614 120.58129120]
[-27.15898323 121.70248413]
[-37.90725327 109.79222870]
[-35.15481567 93.98705292]
[-21.01310158 86.41133118]
[-6.33042717 92.87651825]
[8.08178902 88.71862793]
[7.92575264 73.71943665]
[-6.56984425 69.86228180]
[-21.06544113 66.00511932]
[-31.37694359 77.31580353]
[-45.76761627 82.52801514]
[-60.93058395 80.44403076]
[-73.38150787 71.54273987]
[-80.25926208 57.86958313]
[-79.98338318 42.56656265]
[-72.61726379 29.15019417]
[-59.85359573 20.70346260]
[-44.62536621 19.16736412]
[-30.43191338 24.89488411]
[-20.53479004 36.56988144]
[-17.20828056 51.50952530]
[-2.71268463 55.36668396]
[11.78291225 59.22384262]
[31.76258659 52.12076569]
[49.80596161 59.33396149]
[57.74955368 75.10803986]
[72.70980072 76.19935608]
[84.69663239 67.18182373]
[87.79495239 52.50529861]
[90.89328003 37.82877350]
[93.99160004 23.15224648]
[97.08992004 8.47572041]
[100.18824005 -6.20080519]
[91.82823181 -19.34416580]
[95.17944336 -34.18411255]
[107.76114655 -42.07310867]
[110.85946655 -56.74963379]
[113.34458923 -71.54234314]
[115.21220398 -86.42562103]
[117.07981110 -101.30889893]
[118.94742584 -116.19218445]
[105.44825745 -123.08770752]
[95.12387848 -134.18649292]
[89.22099304 -148.14828491]
[88.45240784 -163.28713989]
[92.91094208 -177.77497864]
[102.05819702 -189.86230469]
[114.78959656 -198.08952332]
[129.56776428 -201.46316528]
[144.60816956 -199.57583618]
[158.09460449 -192.65544128]
[168.39852905 -181.53765869]
[174.27566528 -167.56500244]
[175.01635742 -152.42475891]
[170.53112793 -137.94515991]
[161.36161804 -125.87471008]
[148.61506653 -117.67096710]
[133.83070374 -114.32456970]
[131.96308899 -99.44129181]
[130.09547424 -84.55800629]
[128.22787476 -69.67472839]
[129.90544128 -67.35242462]
[130.73333740 -64.20464325]
[130.38433838 -60.56320190]
[128.66168213 -56.87490845]
[125.53599548 -53.65131378]
[122.43767548 -38.97478867]
[130.75704956 -26.67342186]
[127.82398224 -11.74520016]
[114.86476898 -3.10248327]
[111.76644897 11.57404232]
[108.66812134 26.25056839]
[105.56980133 40.92709351]
[102.47148132 55.60361862]
[99.37316132 70.28014374]
[116.23603821 74.65964508]
[127.93901825 87.85477448]
[130.33088684 105.54592133]
[145.09693909 108.18478394]
[159.86299133 110.82364655]
[174.62905884 113.46250916]
[189.39511108 116.10137177]
[204.16116333 118.74024200]
[213.99935913 106.94593811]
[228.42216492 101.66594696]
[243.54991150 104.32054138]
[255.31330872 114.19565582]
[260.54806519 128.63493347]
[257.84606934 143.75428772]
[247.93412781 155.48667908]
[233.47851562 160.67616272]
[218.36770630 157.92677307]
[206.66644287 147.97810364]
[201.52230835 133.50630188]
[186.75624084 130.86743164]
[171.99018860 128.22856140]
[157.22413635 125.58969879]
[142.45808411 122.95083618]
[127.69202423 120.31197357]
[116.39302063 130.17770386]
[117.01699829 145.16471863]
[130.46212769 148.40257263]
[142.59002686 155.02191162]
[152.56800842 164.56066895]
[159.71296692 176.35659790]
[163.53817749 189.59327698]
[163.78639221 203.35655212]
[160.44717407 216.69770813]
[153.75712585 228.69888306]
[144.18315125 238.53617859]
[132.38987732 245.53623962]
[119.19352722 249.22235107]
[119.19352722 264.22235107]
[119.19352722 279.22235107]
[119.19352722 294.22235107]
[119.19352722 309.22235107]
[119.19352722 324.22235107]
[119.19352722 339.22235107]
[119.19352722 354.22235107]
[119.19352722 369.22235107]
[119.19352722 384.22235107]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[19 130]
[20 129]
[23 56]
[24 55]
[27 35]
[28 34]
[36 52]
[37 51]
[38 50]
[57 104]
[58 103]
[59 102]
[60 101]
[61 100]
[62 99]
[65 96]
[66 95]
[67 90]
[68 89]
[69 88]
[70 87]
[107 128]
[108 127]
[109 126]
[110 125]
[111 124]
[112 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
