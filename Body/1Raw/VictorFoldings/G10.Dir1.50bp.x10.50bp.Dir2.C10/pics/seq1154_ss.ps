%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAUACUAACCCCAGGGUUGGUCAAUUUCGUGCCAGCCACCGCGGUCACACGAUUAACCCAxxxxxxxxxxCCAACGCCACUUAUCCAGUGAACCACUAUCACGAAAAAAACUCUACCUCUCUAUACUAAUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[82.76403046 625.71307373]
[82.76403046 610.71307373]
[82.76403046 595.71307373]
[82.76403046 580.71307373]
[82.76403046 565.71307373]
[82.76403046 550.71307373]
[82.76403046 535.71307373]
[82.76403046 520.71307373]
[82.76403046 505.71307373]
[82.76403046 490.71307373]
[68.41336823 488.00149536]
[54.80642319 482.68490601]
[42.41181183 474.94479370]
[31.65669441 465.04608154]
[22.91206551 453.32821655]
[16.47994804 440.19329834]
[12.58296871 426.09249878]
[11.35664654 411.51043701]
[12.84468651 396.94863892]
[16.99741936 382.90808105]
[23.67346001 369.87225342]
[32.64452362 358.29019165]
[43.60322571 348.56127930]
[56.17361832 341.02130127]
[69.92408752 335.93093872]
[84.38215637 333.46670532]
[84.69013977 318.46984863]
[84.99811554 303.47302246]
[77.52375793 290.58956909]
[85.54277039 276.95117188]
[85.69676971 261.95196533]
[85.69676971 246.95195007]
[73.55834961 238.36145020]
[68.74903870 224.10191345]
[73.31179047 209.57487488]
[85.69676971 200.41416931]
[85.69676971 185.41416931]
[85.69676971 170.41416931]
[85.69676971 155.41416931]
[85.69676971 140.41416931]
[85.69676971 125.41416931]
[85.69676971 110.41416931]
[77.66976929 97.74265289]
[64.10787201 91.33367920]
[54.94959641 90.48413849]
[50.33539200 84.65135956]
[36.90793991 77.96528625]
[20.58211899 79.51434326]
[11.29948235 65.99529266]
[18.60921097 51.31537628]
[34.99168396 50.57603455]
[43.59401703 64.53783417]
[57.02146530 71.22391510]
[70.51685333 77.77178192]
[84.07874298 84.18075562]
[97.14543915 76.81452179]
[98.68273163 61.89350128]
[100.22002411 46.97248459]
[101.75731659 32.05146790]
[92.06111908 19.86042595]
[93.83271027 4.75029182]
[105.51476288 -4.41841936]
[107.05205536 -19.33943558]
[108.58934784 -34.26045227]
[94.23141479 -38.78092194]
[81.07752228 -46.09939194]
[69.66631317 -55.91617584]
[60.46507263 -67.82927704]
[53.85057831 -81.35086823]
[50.09369659 -95.92724609]
[49.34826660 -110.96150970]
[51.64481354 -125.83802795]
[56.88929367 -139.94761658]
[64.86695099 -152.71247864]
[75.25110626 -163.60992432]
[87.61653137 -172.19369507]
[101.45687103 -178.11228943]
[116.20537567 -181.12335205]
[131.25810242 -181.10359192]
[145.99864197 -178.05380249]
[159.82339478 -172.09886169]
[172.16622925 -163.48265076]
[182.52172852 -152.55796814]
[190.46583557 -139.77218628]
[195.67323303 -125.64888763]
[197.93070984 -110.76638794]
[197.14578247 -95.73413086]
[193.35063171 -81.16767120]
[186.70065308 -67.66349792]
[177.46815491 -55.77460480]
[166.03120422 -45.98783112]
[152.85812378 -38.70393372]
[138.48837280 -34.22118759]
[123.51036072 -32.72315979]
[121.97306824 -17.80214310]
[120.43577576 -2.88112712]
[130.00299072 8.47686768]
[128.65650940 23.63080025]
[116.67833710 33.58876038]
[115.14104462 48.50977707]
[113.60375214 63.43079376]
[112.06645966 78.35181427]
[116.53233337 83.73799896]
[119.03422546 89.79813385]
[119.57531738 95.89170837]
[118.35135651 101.43938446]
[115.71552277 105.97676849]
[112.12933350 109.19325256]
[108.10530853 110.95261383]
[104.14759827 111.29400635]
[100.69676971 110.41416931]
[100.69676971 125.41416931]
[100.69676971 140.41416931]
[100.69676971 155.41416931]
[100.69676971 170.41416931]
[100.69676971 185.41416931]
[100.69676971 200.41416931]
[113.08174133 209.57487488]
[117.64449310 224.10191345]
[112.83518219 238.36145020]
[100.69676971 246.95195007]
[100.69676971 261.95196533]
[103.84169006 270.59518433]
[100.53961182 277.25915527]
[107.99193573 291.21527100]
[99.99494934 303.78100586]
[99.68697357 318.77783203]
[99.37899780 333.77465820]
[114.45038605 337.06158447]
[128.59266663 343.21005249]
[141.26840210 351.98446655]
[151.99629211 363.04946899]
[160.36940002 375.98275757]
[166.07064819 390.29119873]
[168.88473511 405.42971802]
[168.70637512 420.82186890]
[165.54414368 435.88201904]
[159.52014160 450.03747559]
[150.86521912 462.75027466]
[139.91023254 473.53768921]
[127.07328033 481.99053955]
[112.84384155 487.78866577]
[97.76403046 490.71307373]
[97.76403046 505.71307373]
[97.76403046 520.71307373]
[97.76403046 535.71307373]
[97.76403046 550.71307373]
[97.76403046 565.71307373]
[97.76403046 580.71307373]
[97.76403046 595.71307373]
[97.76403046 610.71307373]
[97.76403046 625.71307373]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[26 128]
[27 127]
[28 126]
[30 124]
[31 122]
[32 121]
[36 117]
[37 116]
[38 115]
[39 114]
[40 113]
[41 112]
[42 111]
[43 55]
[44 54]
[46 53]
[47 52]
[56 102]
[57 101]
[58 100]
[59 99]
[62 96]
[63 95]
[64 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
