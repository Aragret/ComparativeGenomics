%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUUAGCAAUAAACGAAAGUUUAACUAAGCUAUACUAACCCCAGGGUUGGUCAAUUUCGUGCCAxxxxxxxxxxACCCCAGAAAACUACGAUAGCCCUUAUGAAACUUAAGGGUCGAAGGUGGAUUUAGCAGUAAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[102.86462402 237.47840881]
[102.26448059 222.49041748]
[101.66433716 207.50242615]
[101.06419373 192.51443481]
[100.46405029 177.52645874]
[99.86390686 162.53846741]
[87.15734100 154.56706238]
[73.40177155 160.54905701]
[59.64620590 166.53106689]
[45.89063644 172.51306152]
[32.13507080 178.49505615]
[18.37949944 184.47706604]
[4.87428331 191.00462341]
[-8.35895443 198.06730652]
[-21.59219170 205.12998962]
[-34.82543182 212.19265747]
[-39.57067871 231.66212463]
[-56.79577637 241.29667664]
[-75.29241943 235.33537292]
[-88.07809448 243.17924500]
[-100.86377716 251.02311707]
[-113.64945984 258.86700439]
[-126.43513489 266.71087646]
[-133.77302551 281.37673950]
[-150.15689087 282.08462524]
[-158.73240662 268.10635376]
[-150.67784119 253.82154846]
[-134.27900696 253.92520142]
[-121.49333191 246.08131409]
[-108.70765686 238.23744202]
[-95.92197418 230.39356995]
[-83.13629150 222.54969788]
[-83.51846313 212.19572449]
[-79.50993347 202.55369568]
[-71.78099060 195.41226196]
[-61.69861603 192.12666321]
[-51.08496857 193.36190796]
[-41.88810730 198.95942688]
[-28.65487099 191.89674377]
[-15.42163181 184.83407593]
[-2.18839407 177.77139282]
[-1.25756109 175.07078552]
[0.82927084 172.58746338]
[3.99066973 170.77502441]
[7.97856236 170.04754639]
[12.39750004 170.72149658]
[26.15306854 164.73950195]
[39.90863800 158.75749207]
[53.66420746 152.77549744]
[67.41977692 146.79348755]
[81.17534637 140.81149292]
[61.89895248 102.83688354]
[82.73262787 73.69126129]
[77.72788239 59.55080032]
[72.72313690 45.41034317]
[67.71839142 31.26988792]
[61.32627106 17.70003891]
[53.61071014 4.83652163]
[45.89514542 -8.02699566]
[38.75651169 -13.81732655]
[38.15686035 -21.22599030]
[30.70022774 -34.24131393]
[15.38442516 -38.14025497]
[7.38342571 -51.76961899]
[11.44407940 -67.04334259]
[25.15727234 -74.89979553]
[40.38721085 -70.67788696]
[48.09824371 -56.88239670]
[43.71554947 -41.69794846]
[51.17218399 -28.68262672]
[58.75866318 -15.74255943]
[66.47422791 -2.87904167]
[74.18978882 9.98447609]
[76.09738159 -4.89373302]
[85.08275604 -16.90469170]
[98.81704712 -22.93536949]
[113.74058533 -21.42271996]
[125.98543549 -12.75879765]
[132.37796021 0.81086189]
[131.26132202 15.76924133]
[122.92492676 28.23938942]
[109.52944183 34.98926544]
[94.54672241 34.26941681]
[81.85884857 26.26514244]
[86.86359406 40.40560150]
[91.86833954 54.54605865]
[96.87308502 68.68651581]
[108.26422882 67.31356812]
[120.15084076 70.21545410]
[130.89872742 77.52765656]
[138.85855103 88.75721741]
[142.60638428 102.79629517]
[141.17021179 118.02662659]
[152.62574768 107.11418915]
[166.87214661 111.46037292]
[181.40536499 107.74746704]
[192.86090088 96.83502960]
[207.10729980 101.18121338]
[221.64051819 97.46831512]
[236.17373657 93.75540924]
[239.98248291 90.02375031]
[244.40530396 88.33423615]
[248.54666138 88.57350159]
[251.69042969 90.28376007]
[266.42022705 87.44945526]
[281.15002441 84.61515045]
[295.87979126 81.78085327]
[310.60958862 78.94654846]
[325.33938599 76.11224365]
[332.78787231 62.36255646]
[347.35079956 56.66559601]
[362.15197754 61.71129608]
[370.20275879 75.11722565]
[367.70178223 90.55352020]
[355.82998657 100.73163605]
[340.19281006 100.84576416]
[328.17367554 90.84203339]
[313.44390869 93.67633820]
[298.71411133 96.51064301]
[283.98431396 99.34494019]
[269.25451660 102.17924500]
[254.52473450 105.01354980]
[239.88664246 108.28862762]
[225.35342407 112.00152588]
[210.82020569 115.71443176]
[200.40419006 126.36129761]
[185.11827087 122.28068542]
[170.58505249 125.99359131]
[160.16903687 136.64045715]
[144.88311768 132.55984497]
[140.30499268 146.84413147]
[149.97232056 158.31332397]
[164.44888306 153.67675781]
[179.59739685 154.93804932]
[193.10783386 161.90486145]
[202.91996765 173.51480103]
[207.53747559 187.99743652]
[206.25627136 203.14428711]
[199.27169800 216.64555359]
[187.64884949 226.44238281]
[173.16015625 231.04084778]
[158.01499939 229.73971558]
[144.52293396 222.73738098]
[134.74139404 211.10166931]
[130.16198730 196.60693359]
[131.48304749 181.46350098]
[138.50312805 167.98066711]
[128.83578491 156.51145935]
[114.85189819 161.93832397]
[115.45204163 176.92631531]
[116.05218506 191.91429138]
[116.65232849 206.90228271]
[117.25247192 221.89027405]
[117.85261536 236.87826538]
[124.52783203 252.46279907]
[111.40023041 263.19137573]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 51]
[8 50]
[9 49]
[10 48]
[11 47]
[12 46]
[13 41]
[14 40]
[15 39]
[16 38]
[19 32]
[20 31]
[21 30]
[22 29]
[23 28]
[53 87]
[54 86]
[55 85]
[56 84]
[57 73]
[58 72]
[59 71]
[61 70]
[62 69]
[93 130]
[95 128]
[96 127]
[98 125]
[99 124]
[100 123]
[104 122]
[105 121]
[106 120]
[107 119]
[108 118]
[109 117]
[131 148]
[132 147]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
