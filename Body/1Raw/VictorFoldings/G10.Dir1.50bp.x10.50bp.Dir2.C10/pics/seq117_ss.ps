%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCAUCCUAUUAUUUAUCGCACCUACGUUCAAUAUUACAGGCGAACAUACUUACUAAAGUGxxxxxxxxxxAUACCAAGGCCACCACACACCACCUGUCCAAAAAGGCCUUCGAUACGGGAUAAUCCUAUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[99.59621429 465.92846680]
[99.59621429 450.92846680]
[99.59621429 435.92846680]
[99.59621429 420.92846680]
[99.59621429 405.92846680]
[99.59621429 390.92846680]
[99.59621429 375.92846680]
[99.59621429 360.92846680]
[99.59621429 345.92846680]
[99.59621429 330.92846680]
[84.13753510 327.78479004]
[69.65233612 321.52346802]
[56.76221085 312.41076660]
[46.02081299 300.83529663]
[37.89007187 287.29156494]
[32.72032166 272.35882568]
[30.73521233 256.67620850]
[32.02203369 240.91546631]
[36.52787781 225.75212097]
[44.06180954 211.83659363]
[54.30296326 199.76626587]
[66.81420898 190.05979919]
[81.06078339 183.13491821]
[96.43318939 179.29035950]
[95.80921173 164.30334473]
[95.18523407 149.31632996]
[94.56125641 134.32929993]
[93.93728638 119.34229279]
[91.08998871 134.06958008]
[79.82347870 143.97238159]
[64.85259247 144.90655518]
[52.44241333 136.48115540]
[47.78639603 122.22206879]
[52.83300781 108.09649658]
[65.47032166 100.01576996]
[80.41098785 101.36204529]
[66.18421173 96.60822296]
[51.95742798 91.85440826]
[37.73065186 87.10059357]
[27.12843704 98.08039093]
[12.80924511 103.36465454]
[-2.38384056 101.90420532]
[-15.43422031 93.98900604]
[-23.75073242 81.19063568]
[-25.68212700 66.05020905]
[-20.84492493 51.57387543]
[-10.19955540 40.63592148]
[4.14033508 35.40808105]
[19.32755089 36.92835236]
[32.34666061 44.89487839]
[40.61270905 57.72590637]
[42.48446655 72.87381744]
[56.71124649 77.62763214]
[70.93802643 82.38144684]
[85.16480255 87.13526154]
[89.97906494 81.38436127]
[99.60758972 69.88256073]
[104.42185211 64.13165283]
[97.23934937 50.96307373]
[90.05683899 37.79449081]
[82.87432861 24.62590790]
[68.60122681 16.55060005]
[68.72869110 0.15194722]
[83.12558746 -7.70052099]
[96.98163605 1.07114089]
[96.04290771 17.44339943]
[103.22541809 30.61198235]
[110.40792847 43.78056335]
[117.59043884 56.94914627]
[117.60054779 41.94915009]
[117.61065674 26.94915390]
[110.72161102 13.62469959]
[109.49146271 -1.32477272]
[114.10973358 -15.59612942]
[123.86492157 -26.99070549]
[137.25411987 -33.75303650]
[152.21459961 -34.84130859]
[166.44149780 -30.08786392]
[177.74301147 -20.22502136]
[184.37802124 -6.77226591]
[185.32432556 8.19785500]
[180.43612671 22.37902260]
[170.46652222 33.58647156]
[156.94950867 40.09405518]
[147.94004822 52.08695984]
[138.93060303 64.07987213]
[152.58685303 57.87446213]
[166.24308777 51.66905594]
[179.89932251 45.46364594]
[193.55557251 39.25823975]
[207.21180725 33.05283356]
[207.25311279 15.93657112]
[214.71850586 0.59533662]
[228.07539368 -9.93096256]
[244.62908936 -13.57977962]
[261.06649780 -9.66993427]
[274.11904907 0.97181815]
[287.50534058 -5.79629660]
[300.89163208 -12.56441116]
[307.24276733 -27.29678154]
[322.75811768 -31.37756729]
[335.53567505 -21.67634201]
[335.77355957 -5.63505220]
[323.28930664 4.44079542]
[307.65972900 0.82187349]
[294.27346802 7.58998823]
[280.88717651 14.35810280]
[282.19586182 27.35109520]
[278.98410034 40.04176331]
[271.61627197 50.90104294]
[260.95895386 58.61284256]
[248.27883911 62.23354340]
[235.09236145 61.30739212]
[222.98428345 55.92377090]
[213.41722107 46.70907593]
[199.76097107 52.91448212]
[186.10473633 59.11988831]
[172.44850159 65.32529449]
[158.79225159 71.53070068]
[145.13601685 77.73610687]
[108.92430115 118.71831512]
[109.54827881 133.70532227]
[110.17225647 148.69235229]
[110.79623413 163.67936707]
[111.42021179 178.66638184]
[125.52464294 180.81884766]
[138.98060608 185.54994202]
[151.32115173 192.69378662]
[162.11837769 202.00082397]
[170.99824524 213.14653015]
[177.65351868 225.74272156]
[181.85440063 239.35107422]
[183.45646667 253.49835205]
[182.40563965 267.69293213]
[178.74003601 281.44180298]
[172.58851624 294.26776123]
[164.16622925 305.72589111]
[153.76704407 315.41912842]
[141.75328064 323.01187134]
[128.54318237 328.24172974]
[114.59621429 330.92846680]
[114.59621429 345.92846680]
[114.59621429 360.92846680]
[114.59621429 375.92846680]
[114.59621429 390.92846680]
[114.59621429 405.92846680]
[114.59621429 420.92846680]
[114.59621429 435.92846680]
[114.59621429 450.92846680]
[114.59621429 465.92846680]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[24 125]
[25 124]
[26 123]
[27 122]
[28 121]
[36 55]
[37 54]
[38 53]
[39 52]
[58 69]
[59 68]
[60 67]
[61 66]
[86 120]
[87 119]
[88 118]
[89 117]
[90 116]
[91 115]
[97 107]
[98 106]
[99 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
