%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAAAUCCCCUUGUAAAUUUAACUGUUAGUCCAAAGAGGAACAGCUCUUUGGACACUAGGxxxxxxxxxxCCCAAAAUUCAGAAUAAUAACACACCCGACCACACCGCUAACAAUCAAUACUAAACCCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[116.34567261 248.23095703]
[116.34567261 233.23095703]
[116.34567261 218.23095703]
[116.34567261 203.23095703]
[116.34567261 188.23095703]
[116.34567261 173.23095703]
[116.34567261 158.23095703]
[116.34567261 143.23095703]
[116.34567261 128.23095703]
[116.34567261 113.23095703]
[104.24497986 118.60620880]
[92.67337036 115.49420166]
[80.97373962 124.88136292]
[69.27411652 134.26852417]
[57.57449722 143.65568542]
[45.87487411 153.04284668]
[48.28839874 168.21092224]
[42.77955627 182.54786682]
[30.83019257 192.19712830]
[15.65462780 194.56311035]
[1.33501279 189.00935364]
[-8.27674770 177.02980042]
[-10.59513855 161.84689331]
[-4.99652481 147.54475403]
[7.01309538 137.97059631]
[22.20319366 135.69979858]
[36.48770905 141.34321594]
[48.18733597 131.95605469]
[59.88695908 122.56890106]
[71.58657837 113.18173981]
[83.28620148 103.79457855]
[86.05683899 87.93885040]
[101.55242157 80.32846069]
[117.86583710 88.90715790]
[119.73345184 74.02388000]
[121.60105896 59.14059830]
[123.46867371 44.25731659]
[125.33628845 29.37403679]
[118.98915863 15.78308582]
[106.37802887 7.66154432]
[93.76690674 -0.45999801]
[81.15577698 -8.58154011]
[68.54464722 -16.70308304]
[55.93351746 -24.82462502]
[43.32239151 -32.94616699]
[30.71126175 -41.06770706]
[18.10013390 -49.18925095]
[5.48900604 -57.31079483]
[-9.90228844 -53.72142029]
[-23.27934265 -62.13747406]
[-26.70578957 -77.56585693]
[-18.14877510 -90.85318756]
[-2.68502784 -94.11631775]
[10.51108742 -85.41930389]
[13.61054802 -69.92192078]
[26.22167587 -61.80038071]
[38.83280563 -53.67883682]
[51.44393158 -45.55729294]
[64.05506134 -37.43575287]
[76.66619110 -29.31421089]
[89.27732086 -21.19266891]
[101.88844299 -13.07112598]
[114.49957275 -4.94958401]
[127.11070251 3.17195821]
[120.17008209 -10.12570190]
[126.99083710 -23.48523903]
[141.83203125 -25.66211319]
[152.20204163 -14.82407856]
[149.37251282 -0.09329730]
[159.12016296 -11.49431801]
[149.13568115 -22.72035027]
[140.77285767 -35.20141602]
[134.18750000 -48.70500183]
[129.50227356 -62.97954178]
[126.80448151 -77.75910950]
[126.14437103 -92.76837158]
[127.53424072 -107.72772217]
[130.94819641 -122.35846710]
[136.32264709 -136.38804626]
[143.55744934 -149.55509949]
[152.51783752 -161.61433411]
[163.03689575 -172.34107971]
[174.91864014 -181.53553772]
[187.94172668 -189.02638245]
[201.86355591 -194.67408752]
[216.42475891 -198.37342834]
[231.35408020 -200.05549622]
[246.37336731 -199.68894958]
[261.20285034 -197.28062439]
[275.56628418 -192.87538147]
[289.19601440 -186.55528259]
[301.83819580 -178.43807983]
[313.25729370 -168.67497253]
[323.24057007 -157.44786072]
[331.60202026 -144.96589661]
[338.18594360 -131.46159363]
[342.86959839 -117.18654633]
[345.56579590 -102.40669250]
[346.22427368 -87.39735413]
[344.83279419 -72.43815613]
[341.41726685 -57.80778503]
[336.04129028 -43.77878571]
[328.80505371 -30.61251640]
[319.84335327 -18.55425262]
[309.32315063 -7.82863426]
[297.44039917 1.36452651]
[284.41650391 8.85396767]
[270.49407959 14.50016499]
[255.93246460 18.19793320]
[241.00297546 19.87838554]
[225.98371887 19.51021576]
[211.15447998 17.10028267]
[196.79154968 12.69348240]
[183.16249084 6.37191010]
[170.52117920 -1.74666619]
[160.77352905 9.65435505]
[157.25480652 20.66293907]
[149.66438293 28.24917030]
[140.21957397 31.24164963]
[138.35195923 46.12493134]
[136.48434448 61.00820923]
[134.61672974 75.89148712]
[132.74911499 90.77477264]
[139.49357605 77.37655640]
[150.13229370 66.80215454]
[163.57115173 60.13906097]
[178.42811584 58.07250214]
[193.17527771 60.81500626]
[206.29602051 68.08453369]
[216.44100952 79.13347626]
[222.56692505 92.82556152]
[224.04377747 107.75267792]
[220.71968079 122.37972260]
[212.93649292 135.20243835]
[201.49462891 144.90211487]
[187.57078552 150.48124695]
[172.59690857 151.36607361]
[158.11291504 147.46559143]
[145.60833740 139.18092346]
[136.36915588 127.36408234]
[131.34567261 113.23095703]
[131.34567261 128.23095703]
[131.34567261 143.23095703]
[131.34567261 158.23095703]
[131.34567261 173.23095703]
[131.34567261 188.23095703]
[131.34567261 203.23095703]
[131.34567261 218.23095703]
[131.34567261 233.23095703]
[131.34567261 248.23095703]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 31]
[13 30]
[14 29]
[15 28]
[16 27]
[34 123]
[35 122]
[36 121]
[37 120]
[38 119]
[39 64]
[40 63]
[41 62]
[42 61]
[43 60]
[44 59]
[45 58]
[46 57]
[47 56]
[48 55]
[69 116]
[70 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
