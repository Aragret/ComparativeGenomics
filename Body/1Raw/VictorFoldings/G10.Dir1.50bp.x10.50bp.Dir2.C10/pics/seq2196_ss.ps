%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACAAACCUACCGAGCCUGGUGAUAGCUGGUUGUCCAAGAUAGAAUCUUAGUUCAACUUUAxxxxxxxxxxGCUAUGUCCUCCCGUGAGGCCAAAUAUCAUUCUGAGGGGCCACAGUAAUUACAAACUUACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[70.09750366 475.78335571]
[70.09750366 460.78335571]
[70.09750366 445.78335571]
[70.09750366 430.78335571]
[70.09750366 415.78335571]
[70.09750366 400.78335571]
[70.09750366 385.78335571]
[70.09750366 370.78335571]
[70.09750366 355.78335571]
[70.09750366 340.78335571]
[55.36769104 338.04968262]
[41.38731766 332.65441895]
[28.63303757 324.77993774]
[17.53999329 314.69314575]
[8.48696327 302.73651123]
[1.78343582 289.31634521]
[-2.34097624 274.88906860]
[-3.74439883 259.94555664]
[-2.37757707 244.99468994]
[1.71439922 230.54571533]
[8.39358044 217.09115601]
[17.43380547 205.08985901]
[28.52836609 194.95146179]
[41.30039978 187.02230835]
[55.31570816 181.57369995]
[70.09750366 178.79255676]
[70.09750366 163.79255676]
[70.09750366 148.79255676]
[66.93192291 142.06019592]
[70.25678253 133.48130798]
[70.56884003 118.48455811]
[65.52008820 104.35975647]
[55.77243423 92.95873260]
[46.02478027 81.55771637]
[36.27713013 70.15669250]
[26.52947617 58.75567245]
[15.65065098 48.42846680]
[3.57066274 39.53611755]
[-8.69170570 30.89700127]
[-20.95407295 22.25788498]
[-33.21644211 13.61876869]
[-45.47880936 4.97965288]
[-60.85466385 7.47383022]
[-73.16738129 -1.46214390]
[-75.45043945 -16.13603973]
[-87.80200958 -24.64713097]
[-100.24145508 -33.02927399]
[-112.68089294 -41.41141510]
[-125.12033081 -49.79356003]
[-137.55976868 -58.17570114]
[-154.07385254 -62.01255417]
[-154.95849609 -78.94340515]
[-138.93420410 -84.48040771]
[-129.17762756 -70.61514282]
[-116.73818970 -62.23300171]
[-104.29875183 -53.85085678]
[-91.85931396 -45.46871185]
[-79.41986847 -37.08657074]
[-72.06778717 -35.94966125]
[-66.81132507 -28.39840889]
[-52.22515869 -31.18755150]
[-39.66630554 -22.60094070]
[-36.83969498 -7.28271532]
[-24.57732582 1.35640085]
[-12.31495762 9.99551678]
[-0.05258926 18.63463402]
[12.20977879 27.27374840]
[17.04415131 27.33973122]
[21.87371254 30.48721504]
[24.79238510 36.53608704]
[21.19876480 21.97291756]
[25.23580360 7.52638531]
[35.85852432 -3.06407118]
[50.31727219 -7.05714321]
[64.86944580 -3.41923642]
[75.74824524 6.90798807]
[80.13774872 21.25135994]
[76.90172577 35.89813995]
[66.87782288 47.05705643]
[52.66069794 51.83965302]
[37.93049622 49.00801849]
[47.67815018 60.40904236]
[57.42580032 71.81005859]
[67.17345428 83.21108246]
[76.92110443 94.61210632]
[81.30404663 82.45838928]
[92.03490448 73.60127258]
[106.76157379 71.27349091]
[116.97505188 60.28783035]
[127.18852997 49.30216599]
[137.40200806 38.31649780]
[140.53761292 22.21991348]
[156.13133240 17.14372635]
[168.14170837 28.30988503]
[164.21348572 44.23160172]
[148.38768005 48.52997971]
[138.17419434 59.51564407]
[127.96071625 70.50131226]
[117.74723816 81.48697662]
[125.06634521 94.58013153]
[139.77430725 91.63464355]
[129.19021606 81.00557709]
[130.68927002 66.08067322]
[143.17579651 57.76882553]
[157.52314758 62.14532471]
[163.24455261 76.01130676]
[156.15869141 89.23146057]
[171.09300232 87.82916260]
[186.02729797 86.42685699]
[201.23181152 78.92624664]
[212.64833069 91.46018219]
[203.76463318 105.90026855]
[187.42961121 101.36116028]
[172.49530029 102.76346588]
[157.56098938 104.16577148]
[142.71978760 106.34260559]
[128.01182556 109.28808594]
[119.61798859 120.06028748]
[107.80845642 125.43385315]
[95.53409576 124.75284576]
[85.56559753 118.79661560]
[85.25354004 133.79336548]
[85.09750366 148.79255676]
[85.09750366 163.79255676]
[85.09750366 178.79255676]
[99.87929535 181.57369995]
[113.89459991 187.02230835]
[126.66664124 194.95146179]
[137.76119995 205.08985901]
[146.80142212 217.09115601]
[153.48060608 230.54571533]
[157.57258606 244.99468994]
[158.93940735 259.94555664]
[157.53598022 274.88906860]
[153.41157532 289.31634521]
[146.70803833 302.73651123]
[137.65501404 314.69314575]
[126.56196594 324.77993774]
[113.80768585 332.65441895]
[99.82730865 338.04968262]
[85.09750366 340.78335571]
[85.09750366 355.78335571]
[85.09750366 370.78335571]
[85.09750366 385.78335571]
[85.09750366 400.78335571]
[85.09750366 415.78335571]
[85.09750366 430.78335571]
[85.09750366 445.78335571]
[85.09750366 460.78335571]
[85.09750366 475.78335571]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[26 125]
[27 124]
[28 123]
[30 122]
[31 121]
[32 85]
[33 84]
[34 83]
[35 82]
[36 81]
[37 70]
[38 67]
[39 66]
[40 65]
[41 64]
[42 63]
[45 60]
[46 58]
[47 57]
[48 56]
[49 55]
[50 54]
[88 99]
[89 98]
[90 97]
[91 96]
[100 117]
[101 116]
[107 115]
[108 114]
[109 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
