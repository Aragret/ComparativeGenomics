%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCACCCUGGAGCCUCCGUAGACCUAACCAUCUUCUCCUUACACCUAGCAGGUGUCUCCUxxxxxxxxxxCAGCCACAGAACUAAUCAUAUUUUAUAUCUUCUUCGAAACCACACUUAUCCCCACCUUGGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[28.17604256 303.24111938]
[22.68901062 317.20150757]
[17.20197868 331.16189575]
[19.35489464 346.83593750]
[7.49818420 355.85079956]
[2.01115251 369.81118774]
[-3.47587895 383.77157593]
[-3.64258289 400.72470093]
[-19.97932434 405.25762939]
[-28.85754013 390.81414795]
[-17.43626785 378.28454590]
[-11.94923687 364.32415771]
[-6.46220589 350.36376953]
[-9.00759125 335.68826294]
[3.24158907 325.67486572]
[8.72862053 311.71447754]
[14.21565247 297.75408936]
[-33.14281464 269.52471924]
[-71.79124451 230.20523071]
[-84.05361176 238.84434509]
[-96.31598663 247.48347473]
[-105.78199768 261.54870605]
[-121.91801453 256.34628296]
[-121.38578796 239.40068054]
[-104.95510101 235.22109985]
[-92.69273376 226.58198547]
[-80.43036652 217.94287109]
[-86.94042206 207.32621765]
[-92.82649994 196.35131836]
[-98.06896210 185.05482483]
[-102.65029907 173.47444153]
[-106.55522919 161.64880371]
[-109.77071381 149.61738586]
[-112.28601837 137.42036438]
[-114.09275055 125.09843445]
[-115.18487549 112.69273376]
[-115.55875397 100.24466705]
[-115.21313477 87.79578400]
[-114.14916992 75.38763428]
[-112.37041473 63.06163788]
[-109.88280487 50.85893250]
[-106.69464111 38.82025528]
[-102.81656647 26.98578262]
[-98.26152802 15.39502048]
[-93.04472351 4.08665466]
[-87.18357086 -6.90156984]
[-80.69763947 -17.53297424]
[-73.60855865 -27.77207565]
[-65.94001007 -37.58469772]
[-57.71758270 -46.93808365]
[-48.96871948 -55.80101395]
[-58.95144653 -66.99678040]
[-68.93417358 -78.19254303]
[-78.91690063 -89.38831329]
[-88.89962769 -100.58407593]
[-98.88235474 -111.77984619]
[-113.93642426 -119.57799530]
[-110.61041260 -136.20249939]
[-93.71487427 -137.60858154]
[-87.68658447 -121.76257324]
[-77.70385742 -110.56680298]
[-67.72113037 -99.37104034]
[-57.73840714 -88.17527008]
[-47.75568008 -76.97950745]
[-37.77295303 -65.78374481]
[-29.66233826 -72.20137787]
[-21.25322723 -78.22258759]
[-12.56498146 -83.83351135]
[-3.61759949 -89.02124023]
[5.56831932 -93.77381897]
[14.97162819 -98.08031464]
[24.57068062 -101.93081665]
[34.34337616 -105.31645203]
[44.26722336 -108.22942352]
[54.31937027 -110.66304016]
[64.47667694 -112.61168671]
[74.71575928 -114.07088470]
[85.01305389 -115.03726959]
[95.34484863 -115.50862122]
[105.68736267 -115.48384857]
[116.01677704 -114.96302032]
[126.30931854 -113.94731903]
[136.54130554 -112.43909454]
[146.68916321 -110.44181824]
[156.72953796 -107.96008301]
[166.63931274 -104.99960327]
[176.39567566 -101.56719971]
[185.97618103 -97.67076874]
[195.35874939 -93.31928253]
[204.52180481 -88.52275848]
[213.44422913 -83.29223633]
[222.10549927 -77.63975525]
[230.48567200 -71.57833099]
[238.56546021 -65.12192535]
[246.32624817 -58.28538895]
[253.75018311 -51.08446503]
[260.82019043 -43.53573227]
[267.51995850 -35.65656662]
[273.83407593 -27.46510696]
[279.74801636 -18.98021126]
[285.24813843 -10.22141171]
[290.32183838 -1.20887268]
[294.95736694 8.03665829]
[299.14410400 17.49389648]
[302.87240601 27.14107323]
[306.13366699 36.95597458]
[308.92037964 46.91601181]
[311.22613525 56.99825287]
[313.04565430 67.17948914]
[314.37469482 77.43627930]
[315.21023560 87.74501038]
[315.55035400 98.08195496]
[315.39425659 108.42331696]
[314.74227905 118.74529266]
[313.59597778 129.02410889]
[311.95791626 139.23611450]
[309.83193970 149.35778809]
[307.22290039 159.36582947]
[304.13684082 169.23721313]
[300.58081055 178.94920349]
[296.56301880 188.47946167]
[292.09274292 197.80601501]
[287.18023682 206.90740967]
[281.83682251 215.76269531]
[276.07482910 224.35150146]
[269.90747070 232.65402222]
[263.34896851 240.65115356]
[256.41442871 248.32450867]
[249.11981201 255.65640259]
[241.48190308 262.62997437]
[233.51829529 269.22912598]
[225.24731445 275.43872070]
[216.68800354 281.24444580]
[207.86006165 286.63290405]
[198.78382874 291.59173584]
[189.48017883 296.10949707]
[179.97053528 300.17581177]
[170.27677917 303.78128052]
[160.42126465 306.91763306]
[150.42663574 309.57763672]
[140.31593323 311.75518799]
[130.11241150 313.44525146]
[119.83956909 314.64395142]
[109.52105713 315.34851074]
[99.18062592 315.55734253]
[88.84207916 315.26992798]
[78.52922058 314.48693848]
[68.26578522 313.21017456]
[58.07541275 311.44256592]
[47.98155212 309.18823242]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 17]
[2 16]
[3 15]
[5 13]
[6 12]
[7 11]
[19 27]
[20 26]
[21 25]
[51 65]
[52 64]
[53 63]
[54 62]
[55 61]
[56 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
