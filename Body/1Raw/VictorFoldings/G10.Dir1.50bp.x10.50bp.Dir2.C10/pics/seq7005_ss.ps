%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCAUCACUAGACAUCGUACUACACGACACGUACUACGUUGUAGCCCACUUCCACUAUGUxxxxxxxxxxUACUAAACCCCAUUAAACGCCUGGCAGCCGGAAGCCUAUUCGCAGGAUUUCUCAUUACUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[84.98472595 222.72590637]
[84.04909515 207.75511169]
[83.11346436 192.78431702]
[82.17784119 177.81353760]
[81.24221039 162.84274292]
[80.30657959 147.87194824]
[79.37094879 132.90115356]
[67.38411713 123.88362885]
[52.74061966 127.13445282]
[38.09711838 130.38528442]
[23.45361519 133.63610840]
[8.81011391 136.88693237]
[22.03922081 143.95733643]
[29.47483253 156.98468018]
[28.83505249 171.97103882]
[20.31622314 184.31727600]
[6.53266382 190.23449707]
[-8.28562641 187.90676880]
[-19.59110451 178.04847717]
[-23.91426086 163.68496704]
[-19.92837715 149.22422791]
[-8.85594940 139.10372925]
[-23.84864616 139.57177734]
[-38.84134293 140.03982544]
[-53.59848404 182.24063110]
[-68.01070404 186.39851379]
[-82.42292023 190.55639648]
[-96.83513641 194.71427917]
[-105.81774902 208.00685120]
[-121.82157898 209.12803650]
[-132.56985474 197.21778870]
[-129.81741333 181.41259766]
[-115.67569733 173.83688354]
[-100.99301910 180.30207825]
[-86.58080292 176.14418030]
[-72.16858673 171.98629761]
[-57.75637054 167.82841492]
[-57.83438873 160.32881165]
[-58.06844711 137.83003235]
[-72.56404114 133.97286987]
[-87.05963898 130.11570740]
[-101.55523682 126.25855255]
[-118.41652679 128.02864075]
[-124.78510284 112.31629944]
[-111.44980621 101.84700012]
[-97.69807434 111.76295471]
[-83.20247650 115.62011719]
[-68.70688629 119.47727203]
[-54.21128464 123.33443451]
[-39.30938339 125.04712677]
[-24.31668663 124.57908630]
[-9.32399178 124.11103821]
[5.55928850 122.24343109]
[20.20278931 118.99259949]
[34.84629059 115.74177551]
[49.48979187 112.49095154]
[64.13329315 109.24012756]
[78.17913055 80.48535919]
[103.01590729 78.70214844]
[109.64440918 65.24618530]
[116.27291107 51.79021835]
[122.90140533 38.33425522]
[129.52990723 24.87829018]
[117.03533936 16.53916931]
[105.73618317 6.64047813]
[95.82577515 -4.64840317]
[87.47370148 -17.13430786]
[80.82286835 -30.60358429]
[75.98708344 -44.82575607]
[73.04908752 -59.55746460]
[72.05916595 -74.54663086]
[73.03425598 -89.53676605]
[75.95765686 -104.27137756]
[80.77936554 -118.49832916]
[87.41686249 -131.97418213]
[95.75657654 -144.46835327]
[105.65580750 -155.76702881]
[116.94515991 -165.67691040]
[129.43145752 -174.02838135]
[142.90106201 -180.67857361]
[157.12345886 -185.51368713]
[171.85530090 -188.45097351]
[186.84451294 -189.44018555]
[201.83460999 -188.46438599]
[216.56907654 -185.54028320]
[230.79580688 -180.71789551]
[244.27133179 -174.07975769]
[256.76510620 -165.73945618]
[268.06332397 -155.83967590]
[277.97265625 -144.54985046]
[286.32354736 -132.06315613]
[292.97308350 -118.59324646]
[297.80752563 -104.37061310]
[300.74411011 -89.63862610]
[301.73260498 -74.64936829]
[300.75610352 -59.65932465]
[297.83129883 -44.92499161]
[293.00823975 -30.69849968]
[286.36944580 -17.22327805]
[278.02853394 -4.72990704]
[268.12823486 6.56783581]
[256.83795166 16.47663116]
[244.35084534 24.82692719]
[230.88061523 31.47583771]
[216.65776062 36.30959320]
[201.92562866 39.24547958]
[186.93632507 40.23326111]
[171.94631958 39.25603485]
[157.21212769 36.33052444]
[142.98587036 31.50678825]
[136.35737610 44.96275330]
[129.72886658 58.41872025]
[123.10037231 71.87468719]
[116.47187805 85.33065033]
[122.39183807 99.11302948]
[136.71443176 103.56984711]
[151.03703308 108.02666473]
[164.90977478 100.45549011]
[180.04914856 104.99147034]
[187.47322083 118.94348145]
[182.77743530 134.03404236]
[168.74771118 141.31019592]
[153.70764160 136.45512390]
[146.58021545 122.34925842]
[132.25761414 117.89244080]
[117.93502045 113.43563080]
[112.03670502 118.06809998]
[122.46925354 128.84594727]
[132.90180969 139.62379456]
[143.33435059 150.40162659]
[157.63812256 154.91850281]
[165.37078857 167.77174377]
[162.66000366 182.52476501]
[150.86326599 191.78959656]
[135.88810730 190.92663574]
[125.23373413 180.36802673]
[124.23547363 165.40167236]
[116.23700714 152.71212769]
[108.23853302 140.02259827]
[100.24006653 127.33305359]
[94.34174347 131.96553040]
[95.27737427 146.93632507]
[96.21299744 161.90710449]
[97.14862823 176.87789917]
[98.08425903 191.84869385]
[99.01988983 206.81948853]
[99.95551300 221.79028320]
[109.47084808 235.14656067]
[102.41640472 249.95085144]
[86.04918671 250.97375488]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 147]
[2 146]
[3 145]
[4 144]
[5 143]
[6 142]
[7 141]
[8 57]
[9 56]
[10 55]
[11 54]
[12 53]
[22 52]
[23 51]
[24 50]
[25 37]
[26 36]
[27 35]
[28 34]
[39 49]
[40 48]
[41 47]
[42 46]
[59 114]
[60 113]
[61 112]
[62 111]
[63 110]
[115 126]
[116 125]
[117 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
