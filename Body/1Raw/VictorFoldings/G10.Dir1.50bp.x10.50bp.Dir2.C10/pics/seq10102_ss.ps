%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACUCACAACACCCUAGGCUCACUAAACAUUCUACUACUCACUCUCACUGCCCAAGAACUAxxxxxxxxxxCGGUUUCAUCCUCGCCUUAGCAUGAUUUAUCCUACACUCCAACUCAUGAGACCCACAACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[88.69422913 387.74508667]
[88.69422913 372.74508667]
[88.69422913 357.74508667]
[88.69422913 342.74508667]
[88.69422913 327.74508667]
[88.69422913 312.74508667]
[88.69422913 297.74508667]
[88.69422913 282.74508667]
[88.69422913 267.74508667]
[88.69422913 252.74508667]
[75.11653900 249.53308105]
[62.59813690 243.35409546]
[51.77843475 234.51983643]
[43.21098709 223.47769165]
[37.33512878 210.78813171]
[34.45346832 197.09628296]
[34.71629715 183.09907532]
[38.11374664 169.50978088]
[44.47613525 157.02169800]
[53.48242188 146.27275085]
[64.67639160 137.81289673]
[77.48980713 132.07604980]
[91.27120972 129.35774231]
[91.89518738 114.37072754]
[87.73729706 99.95851135]
[79.22620392 87.60694122]
[70.71511841 75.25537109]
[62.20402527 62.90379333]
[49.10025406 70.22674561]
[35.36832047 76.29045105]
[21.12890816 81.04161835]
[6.50715303 84.43849182]
[-8.36844349 86.45122528]
[-23.36715317 87.06211853]
[-38.35716248 86.26581573]
[-53.20673370 84.06931305]
[-67.78536987 80.49190521]
[-81.96495056 75.56503296]
[-95.62085724 69.33200836]
[-108.63307953 61.84759140]
[-120.88727570 53.17756653]
[-132.27572632 43.39812469]
[-142.69837952 32.59521103]
[-152.06361389 20.86376381]
[-160.28913879 8.30688286]
[-167.30265808 -4.96508121]
[-173.04252625 -18.83548927]
[-177.45832825 -33.18244934]
[-180.51124573 -47.87987137]
[-182.17443848 -62.79859161]
[-182.43328857 -77.80750275]
[-181.28553772 -92.77470398]
[-178.74125671 -107.56866455]
[-174.82281494 -122.05935669]
[-169.56465149 -136.11944580]
[-163.01296997 -149.62536621]
[-155.22534180 -162.45843506]
[-146.27021790 -174.50584412]
[-136.22628784 -185.66174316]
[-125.18183136 -195.82807922]
[-113.23390198 -204.91551208]
[-100.48750305 -212.84417725]
[-87.05464935 -219.54440308]
[-73.05339813 -224.95730591]
[-58.60679626 -229.03530884]
[-43.84179688 -231.74256897]
[-28.88816261 -233.05529785]
[-13.87730885 -232.96197510]
[1.05884743 -231.46340942]
[15.78904247 -228.57275391]
[30.18382263 -224.31544495]
[44.11668396 -218.72886658]
[57.46518326 -211.86213684]
[70.11201477 -203.77558899]
[81.94602203 -194.54028320]
[92.86321259 -184.23741150]
[102.76764679 -172.95748901]
[111.57228088 -160.79965210]
[119.19973755 -147.87075806]
[125.58297729 -134.28440857]
[130.66590881 -120.16002655]
[134.40386963 -105.62172699]
[136.76399231 -90.79727936]
[137.72555542 -75.81696320]
[137.28009033 -60.81242752]
[135.43153381 -45.91553879]
[132.19610596 -31.25721359]
[127.60225677 -16.96627235]
[121.69034576 -3.16830707]
[114.51234436 10.01542282]
[106.13132477 22.46905518]
[96.62094116 34.08314514]
[86.06477356 44.75562668]
[74.55559540 54.39270401]
[83.06668854 66.74427795]
[91.57778168 79.09584808]
[100.08886719 91.44742584]
[103.21172333 88.71005249]
[107.72241974 87.23078918]
[113.12361908 87.52378845]
[118.75335693 89.91634369]
[133.73307800 90.69618988]
[148.71278381 91.47603607]
[163.69250488 92.25587463]
[178.67221069 93.03572083]
[192.85598755 86.02635193]
[205.16378784 94.41487885]
[220.14350891 95.19471741]
[227.42666626 81.78136444]
[239.81343079 72.86335754]
[254.84439087 70.21138763]
[269.53515625 74.35199738]
[280.96881104 84.46307373]
[286.87527466 98.53704834]
[286.08172607 113.77951813]
[278.74581909 127.16409302]
[266.32400513 136.03324890]
[251.28273010 138.62600708]
[236.60839844 134.42758179]
[225.21463013 124.27156067]
[219.36366272 110.17443848]
[204.38394165 109.39459229]
[191.27162170 116.45973969]
[177.89237976 108.01543427]
[162.91265869 107.23558807]
[147.93293762 106.45574951]
[132.95323181 105.67590332]
[117.97351837 104.89605713]
[106.88220215 114.99470520]
[106.25822449 129.98171997]
[121.68209076 134.66542053]
[135.37629700 143.14820862]
[146.42475891 154.85615540]
[154.09007263 168.99984741]
[157.86267090 184.62754822]
[157.49472046 200.68925476]
[153.01640320 216.10729980]
[144.73350525 229.84855652]
[133.20655823 240.99374390]
[119.21289062 248.79891968]
[103.69422913 252.74508667]
[103.69422913 267.74508667]
[103.69422913 282.74508667]
[103.69422913 297.74508667]
[103.69422913 312.74508667]
[103.69422913 327.74508667]
[103.69422913 342.74508667]
[103.69422913 357.74508667]
[103.69422913 372.74508667]
[103.69422913 387.74508667]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[23 130]
[24 129]
[25 97]
[26 96]
[27 95]
[28 94]
[101 128]
[102 127]
[103 126]
[104 125]
[105 124]
[107 122]
[108 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
