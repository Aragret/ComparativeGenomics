%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUUACCAAAAACAUCACCUCUAGCAUCACCAGUAUUAGAGGCACCGCCUGCCCAGUGACAxxxxxxxxxxUACUUACAGGACUCAACAUACUAGUCACAGCCCUAUACUCCCUCUACAUAUUUACCACAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[113.22618866 241.32301331]
[112.91413116 226.32624817]
[112.60207367 211.32949829]
[112.29001617 196.33274841]
[111.97795868 181.33599854]
[111.66590881 166.33923340]
[111.35385132 151.34248352]
[111.04179382 136.34573364]
[110.72973633 121.34897614]
[96.50296021 116.59516144]
[87.23800659 128.39179993]
[77.97306061 140.18844604]
[68.70810699 151.98507690]
[69.18746948 168.02098083]
[56.85631180 178.28363037]
[41.17404556 174.90042114]
[34.17076492 160.46665955]
[41.21878433 146.05468750]
[56.91146851 142.72013855]
[66.17642212 130.92349243]
[75.44136810 119.12685394]
[84.70631409 107.33021545]
[81.18375397 100.70892334]
[67.94116211 107.75405884]
[57.52376556 118.54654694]
[44.04035568 111.97405243]
[46.12459183 97.11956024]
[60.89603043 94.51147461]
[74.13861847 87.46633911]
[70.61605072 80.84503937]
[55.65579987 81.93635559]
[48.37194824 95.53594971]
[34.88078690 103.01873779]
[19.48729706 101.99698639]
[7.10348272 92.79673767]
[1.68097508 78.35374451]
[4.95007658 63.27672577]
[15.86762905 52.37669754]
[30.94988060 49.13182449]
[45.38414001 54.57752609]
[54.56448746 66.97610474]
[69.52473450 65.88479614]
[81.96417999 57.50265121]
[88.59267426 44.04668427]
[95.22117615 30.59072113]
[101.70934296 17.06653023]
[108.05647278 3.47557950]
[114.40360260 -10.11537170]
[120.75072479 -23.70632172]
[127.09785461 -37.29727173]
[133.44499207 -50.88822556]
[121.83249664 -59.75440598]
[112.33190155 -70.84584808]
[105.36033630 -83.67164612]
[101.22309113 -97.66484070]
[100.10021973 -112.20746613]
[102.03872681 -126.65785217]
[106.95058441 -140.37892151]
[114.61673737 -152.76629639]
[124.69686127 -163.27490234]
[136.74450684 -171.44296265]
[150.22679138 -176.91227722]
[164.54808044 -179.44395447]
[179.07621765 -178.92881775]
[193.17044067 -175.39213562]
[199.79893494 -188.84809875]
[206.42742920 -202.30406189]
[213.05592346 -215.76002502]
[219.68443298 -229.21598816]
[207.55056763 -238.10083008]
[197.14401245 -248.95785522]
[188.78102112 -261.45712280]
[182.71571350 -275.21878052]
[179.13244629 -289.82464600]
[178.14007568 -304.83084106]
[179.76876831 -319.78137207]
[183.96902466 -334.22189331]
[190.61322021 -347.71359253]
[199.49945068 -359.84646606]
[210.35763550 -370.25177002]
[222.85784912 -378.61334229]
[236.62019348 -384.67709351]
[251.22647095 -388.25872803]
[266.23278809 -389.24938965]
[281.18313599 -387.61898804]
[295.62319946 -383.41708374]
[309.11413574 -376.77136230]
[321.24597168 -367.88375854]
[331.65005493 -357.02438354]
[340.01022339 -344.52322388]
[346.07238770 -330.76019287]
[349.65237427 -316.15353394]
[350.64132690 -301.14709473]
[349.00924683 -286.19692993]
[344.80569458 -271.75735474]
[338.15844727 -258.26718140]
[329.26947021 -246.13632202]
[318.40893555 -235.73345947]
[305.90682983 -227.37472534]
[292.14309692 -221.31410217]
[277.53601074 -217.73579407]
[262.52947998 -216.74853516]
[247.57949829 -218.38232422]
[233.14039612 -222.58749390]
[226.51190186 -209.13153076]
[219.88339233 -195.67556763]
[213.25489807 -182.21960449]
[206.62640381 -168.76364136]
[218.65840149 -159.11235046]
[228.25756836 -147.02984619]
[234.94439697 -133.11470032]
[238.38380432 -118.05711365]
[238.40184021 -102.60478210]
[234.99453735 -87.52565765]
[228.32821655 -73.56983185]
[218.73143005 -61.43222809]
[206.67868042 -51.71798706]
[192.76707458 -44.91228867]
[177.68663025 -41.35614395]
[162.18614197 -41.22928238]
[147.03593445 -44.54109573]
[140.68881226 -30.95014381]
[134.34167480 -17.35919380]
[127.99455261 -3.76824188]
[121.64742279 9.82270908]
[115.30029297 23.41366005]
[115.31975555 30.85309982]
[108.67713928 37.21921921]
[102.04864502 50.67518616]
[95.42014313 64.13114929]
[105.03288269 52.61614990]
[118.31093597 45.63809586]
[133.24676514 44.25202560]
[147.58215332 48.66749573]
[159.14971924 58.21692657]
[166.20050049 71.45650482]
[167.66848755 86.38449860]
[163.33172607 100.74389648]
[153.84588623 112.36367035]
[140.64518738 119.48697662]
[125.72649384 121.03691864]
[126.03854370 136.03367615]
[126.35060120 151.03042603]
[126.66265869 166.02717590]
[126.97471619 181.02394104]
[127.28677368 196.02069092]
[127.59883118 211.01744080]
[127.91088104 226.01419067]
[128.22294617 241.01095581]
[130.81393433 260.21868896]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 22]
[11 21]
[12 20]
[13 19]
[30 42]
[31 41]
[43 130]
[44 129]
[45 128]
[46 126]
[47 125]
[48 124]
[49 123]
[50 122]
[51 121]
[65 108]
[66 107]
[67 106]
[68 105]
[69 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
