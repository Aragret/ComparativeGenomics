%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAUCGCACCUACGUUCAAUAUUACAGGCGAACAUACUUACUAAAGUGUGUUAAUUAAUUAxxxxxxxxxxCCGCAUUCCUACUACUCAACUUAAACUCCAGCACCACGACCCUACUACUAUCUCGCACCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[112.91161346 265.51132202]
[112.91161346 250.51133728]
[112.91161346 235.51133728]
[112.91161346 220.51133728]
[112.91161346 205.51133728]
[112.91161346 190.51133728]
[112.91161346 175.51133728]
[112.91161346 160.51133728]
[112.91161346 145.51133728]
[112.91161346 130.51133728]
[106.52293396 126.58261871]
[93.74558258 118.72519684]
[87.35690308 114.79648590]
[73.97061920 121.56459808]
[60.58433151 128.33271790]
[47.19804764 135.10083008]
[49.95336914 149.95292664]
[48.41139221 164.97953796]
[42.69711304 178.96250916]
[33.27376175 190.76832581]
[20.90525246 199.43992615]
[6.59423923 204.27433777]
[-8.49914455 204.87966919]
[-23.15134811 201.20684814]
[-36.17457962 193.55361938]
[-46.51311111 182.54037476]
[-53.32883453 169.05992126]
[-56.06923676 154.20506287]
[-54.51216507 139.18000793]
[-48.78384018 125.20277405]
[-39.34863281 113.40644073]
[-26.97141838 104.74726868]
[-12.65555573 99.92723083]
[2.43842864 99.33705902]
[17.08693504 103.02460480]
[30.10247231 110.69091797]
[40.42993164 121.71454620]
[53.81621552 114.94642639]
[67.20249939 108.17831421]
[80.58878326 101.41020203]
[81.05683136 86.41750336]
[68.11877441 78.82759094]
[55.18071747 71.23768616]
[42.24266052 63.64777756]
[29.30460548 56.05786896]
[16.36654854 48.46796036]
[3.42849326 40.87805176]
[-9.50956249 33.28814316]
[-25.90313911 33.71554947]
[-34.23818207 19.59255028]
[-25.94031525 5.44767857]
[-9.54567051 5.83196449]
[-1.91965449 20.35008812]
[11.01840115 27.93999672]
[23.95645714 35.52990341]
[36.89451218 43.11981201]
[49.83256912 50.70972061]
[62.77062607 58.29962921]
[75.70867920 65.88954163]
[88.64673615 73.47944641]
[103.56565094 71.92186737]
[114.65696716 61.82321548]
[105.61787415 49.83908463]
[97.72310638 37.07204437]
[91.04002380 23.63102341]
[85.62564087 9.63069534]
[81.52616119 -4.80948830]
[78.77655792 -19.56632805]
[77.40028381 -34.51391983]
[77.40908813 -49.52473450]
[78.80289459 -64.47070312]
[81.56980133 -79.22430420]
[85.68621826 -93.65967560]
[91.11701202 -107.65364075]
[97.81585693 -121.08681488]
[105.72559357 -133.84458923]
[114.77873230 -145.81809998]
[124.89804840 -156.90522766]
[135.99719238 -167.01133728]
[147.98147583 -176.05023193]
[160.74864197 -183.94479370]
[174.18977356 -190.62763977]
[188.19020081 -196.04179382]
[202.63044739 -200.14103699]
[217.38732910 -202.89039612]
[232.33494568 -204.26641846]
[247.34576416 -204.25735474]
[262.29171753 -202.86331177]
[277.04525757 -200.09614563]
[291.48056030 -195.97949219]
[305.47442627 -190.54846191]
[318.90750122 -183.84941101]
[331.66513062 -175.93945312]
[343.63851929 -166.88610840]
[354.72546387 -156.76661682]
[364.83139038 -145.66729736]
[373.87008667 -133.68286133]
[381.76443481 -120.91556549]
[388.44705200 -107.47431946]
[393.86096191 -93.47381592]
[397.95996094 -79.03349304]
[400.70907593 -64.27655792]
[402.08486938 -49.32892227]
[402.07556152 -34.31810760]
[400.68127441 -19.37218666]
[397.91384888 -4.61867476]
[393.79696655 9.81655407]
[388.36569214 23.81033897]
[381.66641235 37.24328995]
[373.75625610 50.00079727]
[364.70269775 61.97401810]
[354.58303833 73.06079865]
[343.48355103 83.16654205]
[331.49896240 92.20503998]
[318.73153687 100.09916687]
[305.29016113 106.78157806]
[291.28958130 112.19525909]
[276.84918213 116.29401398]
[262.09219360 119.04288483]
[247.14454651 120.41841125]
[232.13372803 120.40885925]
[217.18783569 119.01430511]
[202.43437195 116.24665833]
[187.99920654 112.12952423]
[174.00550842 106.69802856]
[160.57267761 99.99851227]
[147.81529236 92.08814240]
[135.84222412 83.03440094]
[124.75561523 72.91452789]
[113.66429901 83.01318359]
[128.23939514 79.46823883]
[142.68486023 75.42740631]
[157.48965454 77.83951569]
[169.90534973 86.25678253]
[177.62707520 99.11660004]
[179.22134399 114.03163910]
[174.39219666 128.23301697]
[164.03611755 139.08436584]
[150.07563782 144.57119751]
[135.10299683 143.67507935]
[127.91161346 130.51133728]
[127.91161346 145.51133728]
[127.91161346 160.51133728]
[127.91161346 175.51133728]
[127.91161346 190.51133728]
[127.91161346 205.51133728]
[127.91161346 220.51133728]
[127.91161346 235.51133728]
[127.91161346 250.51133728]
[127.91161346 265.51132202]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[13 40]
[14 39]
[15 38]
[16 37]
[41 60]
[42 59]
[43 58]
[44 57]
[45 56]
[46 55]
[47 54]
[48 53]
[61 130]
[62 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
