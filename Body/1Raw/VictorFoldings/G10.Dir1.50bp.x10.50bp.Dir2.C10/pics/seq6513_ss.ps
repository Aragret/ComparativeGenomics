%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUGCUCGCAUCUGCUAUAGUGGAGGCCGGAGCAGGAACAGGUUGAACAGUCUACCCUCCCUxxxxxxxxxxCAUCACCCCGCUAAAUCCCCUAGAAGUCCCACUCCUAAACACAUCCGUAUUACUCGCAUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[105.21081543 255.08720398]
[105.21081543 240.08720398]
[105.21081543 225.08720398]
[105.21081543 210.08720398]
[105.21081543 195.08720398]
[105.21081543 180.08720398]
[105.21081543 165.08720398]
[105.21081543 150.08720398]
[105.21081543 135.08720398]
[105.21081543 120.08719635]
[92.43345642 112.22977448]
[79.04717255 118.99788666]
[65.66088867 125.76600647]
[52.27460098 132.53411865]
[38.88831711 139.30223083]
[25.64573097 146.34736633]
[12.55257607 153.66647339]
[4.28206539 167.15383911]
[-10.60261822 166.61029053]
[-23.69577217 173.92939758]
[-36.78892899 181.24848938]
[-49.88208008 188.56759644]
[-62.97523499 195.88670349]
[-70.90163422 210.24304199]
[-87.30072021 210.28617859]
[-95.30252838 195.97174072]
[-86.67547607 182.02519226]
[-70.29434204 182.79354858]
[-57.20118713 175.47444153]
[-44.10803223 168.15533447]
[-31.01487923 160.83624268]
[-17.92172432 153.51713562]
[-10.58772278 140.55326843]
[5.23347092 140.57331848]
[18.32662582 133.25421143]
[20.47719574 128.92402649]
[25.40400696 125.93105316]
[32.12020111 125.91594696]
[45.50648499 119.14783478]
[58.89277267 112.37971497]
[72.27905273 105.61160278]
[85.66534424 98.84349060]
[95.76399231 87.75217438]
[101.25102234 73.79178619]
[106.73805237 59.83139420]
[93.24406433 53.26281357]
[80.30703735 45.65574646]
[68.00673676 37.05709457]
[56.41900635 27.51987648]
[45.61528397 17.10288811]
[35.66217422 5.87035704]
[26.62105179 -6.10846424]
[18.54765129 -18.75972176]
[11.49175262 -32.00541306]
[5.49685717 -45.76387787]
[0.59992516 -59.95028687]
[-3.16885090 -74.47717285]
[-5.78623533 -89.25497437]
[-7.23609066 -104.19257355]
[-7.50947809 -119.19788361]
[-6.60471201 -134.17839050]
[-4.52737045 -149.04173279]
[-1.29026139 -163.69625854]
[3.08665705 -178.05162048]
[8.57639980 -192.01933289]
[15.14511967 -205.51325989]
[22.75231743 -218.45021057]
[31.35109329 -230.75041199]
[40.88843155 -242.33804321]
[51.30553055 -253.14166260]
[62.53816223 -263.09466553]
[74.51707458 -272.13565063]
[87.16841888 -280.20892334]
[100.41417694 -287.26470947]
[114.17270660 -293.25946045]
[128.35916138 -298.15625000]
[142.88609314 -301.92486572]
[157.66390991 -304.54208374]
[172.60153198 -305.99179077]
[187.60684204 -306.26504517]
[202.58734131 -305.36010742]
[217.45065308 -303.28262329]
[232.10514832 -300.04534912]
[246.46047974 -295.66830444]
[260.42813110 -290.17840576]
[273.92199707 -283.60955811]
[286.85885620 -276.00222778]
[299.15896606 -267.40332031]
[310.74652100 -257.86587524]
[321.55001831 -247.44865417]
[331.50289917 -236.21592712]
[340.54379272 -224.23692322]
[348.61691284 -211.58549500]
[355.67254639 -198.33966064]
[361.66717529 -184.58106995]
[366.56381226 -170.39456177]
[370.33227539 -155.86759949]
[372.94937134 -141.08975220]
[374.39892578 -126.15211487]
[374.67199707 -111.14679718]
[373.76693726 -96.16631317]
[371.68930054 -81.30302429]
[368.45187378 -66.64855957]
[364.07467651 -52.29327774]
[358.58462524 -38.32568359]
[352.01565552 -24.83189201]
[344.40817261 -11.89510059]
[335.80914307 0.40493333]
[326.27157593 11.99237347]
[315.85424805 22.79577827]
[304.62142944 32.74854279]
[292.64233398 41.78929901]
[279.99081421 49.86231232]
[266.74490356 56.91780472]
[252.98626709 62.91227722]
[238.79971313 67.80877686]
[224.27270508 71.57711029]
[209.49482727 74.19403839]
[194.55717468 75.64343262]
[179.55186462 75.91636658]
[164.57138062 75.01113892]
[149.70811462 72.93334198]
[135.05368042 69.69578552]
[120.69844055 65.31842804]
[115.21141052 79.27881622]
[109.72438049 93.23920441]
[121.23267365 83.61843109]
[131.39781189 72.58802795]
[144.92198181 66.09980774]
[159.88687134 65.07408142]
[174.16983032 69.65633392]
[185.74493408 79.19660950]
[192.97035217 92.34169769]
[194.82121277 107.22706604]
[191.03498840 121.74135590]
[182.14872742 133.82582092]
[169.42286682 141.76637268]
[154.66246033 144.43670654]
[139.96118164 141.45806885]
[127.40219879 133.25093079]
[120.21081543 120.08719635]
[120.21081543 135.08720398]
[120.21081543 150.08720398]
[120.21081543 165.08720398]
[120.21081543 180.08720398]
[120.21081543 195.08720398]
[120.21081543 210.08720398]
[120.21081543 225.08720398]
[120.21081543 240.08720398]
[120.21081543 255.08720398]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 42]
[12 41]
[13 40]
[14 39]
[15 38]
[16 35]
[17 34]
[19 32]
[20 31]
[21 30]
[22 29]
[23 28]
[43 126]
[44 125]
[45 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
