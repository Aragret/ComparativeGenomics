%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAAGUUUAACUAAGCUAUACUAACCCCAGGGUUGGUCAAUUUCGUGCCAGCCACCGCGGUxxxxxxxxxxAUCAACCCUGACCCCUCUCCUUCAUAAAUUAUUCAGCUUCCUACACUAUUAAAGUUUACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[121.32291412 369.89352417]
[121.32291412 354.89352417]
[121.32291412 339.89352417]
[121.32291412 324.89352417]
[121.32291412 309.89352417]
[121.32291412 294.89352417]
[121.32291412 279.89352417]
[121.32291412 264.89352417]
[121.32291412 249.89352417]
[121.32291412 234.89352417]
[119.76532745 219.97462463]
[116.66700745 205.29809570]
[113.41618347 190.65458679]
[110.01320648 176.04570007]
[106.61022949 161.43681335]
[96.18729401 150.79670715]
[100.59207153 135.60102844]
[97.18909454 120.99214172]
[85.67633820 115.60140228]
[79.32386780 104.59005737]
[80.42024231 91.92507935]
[88.57048798 82.16919708]
[85.47216797 67.49267578]
[82.37384033 52.81615067]
[79.27552032 38.13962555]
[76.17720032 23.46309853]
[72.77422333 8.85420513]
[69.06806183 -5.68073034]
[65.36190033 -20.21566582]
[44.40541458 -20.99548912]
[24.86310196 -28.55268860]
[8.86245155 -42.05173111]
[-1.85878670 -60.01091385]
[-6.14133024 -80.46501160]
[-3.52970862 -101.18030548]
[5.67932892 -119.89852905]
[20.47047615 -134.58305359]
[13.28796768 -147.75163269]
[6.10545921 -160.92021179]
[-1.07704973 -174.08880615]
[-8.25955868 -187.25738525]
[-15.44206715 -200.42596436]
[-22.62457657 -213.59454346]
[-29.80708504 -226.76312256]
[-44.84162903 -222.75196838]
[-60.39022064 -222.44023132]
[-75.55646515 -225.84172058]
[-89.46699524 -232.75630188]
[-101.32177734 -242.78166199]
[-110.44011688 -255.33673096]
[-116.29972839 -269.69528198]
[-118.56668091 -285.02807617]
[-117.11439514 -300.45059204]
[-112.03073120 -315.07418823]
[-103.61265564 -328.05725098]
[-92.34892273 -338.65362549]
[-99.80383301 -351.66992188]
[-107.25874329 -364.68624878]
[-114.28551483 -370.62564087]
[-114.73012543 -378.05178833]
[-121.91263580 -391.22036743]
[-136.18572998 -399.29568481]
[-136.05827332 -415.69433594]
[-121.66136932 -423.54681396]
[-107.80532837 -414.77514648]
[-108.74404907 -398.40289307]
[-101.56153870 -385.23431396]
[-94.24243164 -372.14114380]
[-86.78752136 -359.12484741]
[-79.33261108 -346.10852051]
[-65.46526337 -350.29220581]
[-51.00617981 -351.27178955]
[-36.68638611 -348.99438477]
[-23.23062515 -343.57183838]
[-11.32066536 -335.27529907]
[-1.56076348 -324.52154541]
[5.55298901 -311.85220337]
[9.65788555 -297.90640259]
[10.54309845 -283.38839722]
[8.16049767 -269.03231812]
[2.62726259 -255.56468201]
[-5.77988291 -243.66792297]
[-16.63850212 -233.94563293]
[-9.45599365 -220.77705383]
[-2.27348495 -207.60847473]
[4.90902376 -194.43989563]
[12.09153271 -181.27130127]
[19.27404213 -168.10272217]
[26.45655060 -154.93414307]
[33.63906097 -141.76556396]
[43.12274933 -144.73591614]
[52.95868683 -146.18066406]
[62.90296173 -146.06285095]
[72.70880890 -144.38432312]
[82.13272858 -141.18563843]
[90.94051361 -136.54513550]
[98.91310883 -130.57698059]
[105.85202026 -123.42838287]
[111.58427429 -115.27597046]
[115.96673584 -106.32139587]
[118.88967133 -96.78637695]
[120.27951050 -86.90718842]
[120.10066986 -76.92882538]
[118.35648346 -67.09889984]
[115.08915710 -57.66151810]
[110.37873077 -48.85122299]
[104.34110260 -40.88714981]
[97.12522888 -33.96757889]
[88.90939331 -28.26500130]
[79.89683533 -23.92182732]
[83.60299683 -9.38689137]
[87.30915833 5.14804459]
[90.94073486 8.33978081]
[92.56615448 13.87054062]
[90.85372162 20.36477661]
[93.95204926 35.04130173]
[97.05036926 49.71782684]
[100.14868927 64.39435577]
[103.24700928 79.07087708]
[117.26296997 87.72967529]
[120.83344269 103.81300354]
[111.79798889 117.58916473]
[115.20096588 132.19805908]
[125.86730194 143.88308716]
[121.21911621 158.03382874]
[124.62210083 172.64271545]
[128.02507019 187.25161743]
[133.05024719 194.95872498]
[131.34353638 202.19976807]
[134.44184875 216.87629700]
[141.17424011 203.47200012]
[153.63064575 195.11509705]
[168.58677673 193.96873474]
[182.17127991 200.32965088]
[190.86785889 212.55134583]
[192.42541504 227.47026062]
[186.44078064 241.22468567]
[174.46307373 250.25433350]
[159.59266663 252.22189331]
[145.67874146 246.61808777]
[136.32290649 234.89352417]
[136.32290649 249.89352417]
[136.32290649 264.89352417]
[136.32290649 279.89352417]
[136.32290649 294.89352417]
[136.32290649 309.89352417]
[136.32290649 324.89352417]
[136.32290649 339.89352417]
[136.32290649 354.89352417]
[136.32290649 369.89352417]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 130]
[12 129]
[13 127]
[14 126]
[15 125]
[17 123]
[18 122]
[22 119]
[23 118]
[24 117]
[25 116]
[26 115]
[27 112]
[28 111]
[29 110]
[37 90]
[38 89]
[39 88]
[40 87]
[41 86]
[42 85]
[43 84]
[44 83]
[56 70]
[57 69]
[58 68]
[60 67]
[61 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
