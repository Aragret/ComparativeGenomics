%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUUAACUAUUUAUAUUAUCCUAACUACUACCGCAUUCCUACUACUCAACUUAAACUCCAGCxxxxxxxxxxUCACUUUGGCUUCGAAGCCGCCGCCUGAUACUGGCAUUUUGUAGAUGUGGUUUGACUAUUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[87.11944580 269.99810791]
[86.81147003 255.00128174]
[86.50348663 240.00444031]
[86.19551086 225.00759888]
[85.88753510 210.01077271]
[85.57955933 195.01393127]
[85.27157593 180.01708984]
[84.96360016 165.02024841]
[84.65562439 150.02342224]
[71.09372711 143.61444092]
[59.31158829 152.89782715]
[47.52945328 162.18121338]
[36.13837814 171.94049072]
[25.15757561 182.15919495]
[14.17677402 192.37789917]
[17.01354599 207.54220581]
[11.18038654 221.82427979]
[-1.46136582 230.66677856]
[-16.87777328 231.24807739]
[-30.14951706 223.38267517]
[-37.04163361 209.58042908]
[-35.35486984 194.24554443]
[-25.62746620 182.27136230]
[-10.96340561 177.47877502]
[3.95806670 181.39709473]
[14.93886948 171.17839050]
[25.91967201 160.95968628]
[26.12421036 158.10499573]
[27.50727081 155.16282654]
[30.10678101 152.59587097]
[33.78774261 150.87132263]
[38.24606705 150.39907837]
[50.02820587 141.11569214]
[61.81034088 131.83230591]
[53.00696564 113.69100952]
[52.21636581 93.85651398]
[59.31974030 75.65767670]
[72.89429474 62.04854584]
[90.49031830 55.12926483]
[109.07070160 55.82410431]
[114.48932648 41.83702087]
[119.90795135 27.84993744]
[125.32657623 13.86285400]
[130.74519348 -0.12422976]
[136.16381836 -14.11131287]
[135.51873779 -20.79161644]
[138.00918579 -25.98638153]
[142.10273743 -28.55386543]
[148.09103394 -42.30669403]
[154.07933044 -56.05952454]
[160.06762695 -69.81235504]
[146.82260132 -62.77181625]
[131.82765198 -63.16129684]
[118.96598053 -70.87992859]
[111.56830597 -83.92885590]
[111.55037689 -98.92884064]
[118.91683197 -111.99541473]
[131.76002502 -119.74477386]
[146.75398254 -120.17009735]
[160.01580811 -113.16124725]
[168.11114502 -100.53327179]
[168.94374084 -85.55735779]
[177.61035156 -97.80030823]
[186.27696228 -110.04326630]
[183.00100708 -127.19713593]
[192.92430115 -141.15635681]
[209.53540039 -143.60061646]
[217.94882202 -156.01892090]
[226.36222839 -168.43724060]
[234.77563477 -180.85556030]
[224.54370117 -191.32566833]
[216.56533813 -203.59414673]
[211.14848328 -217.18391418]
[208.50149536 -231.56695557]
[208.72515869 -246.18484497]
[211.80885315 -260.47042847]
[217.63099670 -273.86984253]
[225.96392822 -285.86395264]
[236.48269653 -295.98846436]
[248.77781677 -303.85198975]
[262.37118530 -309.15106201]
[276.73464966 -311.68188477]
[291.31057739 -311.34817505]
[305.53347778 -308.16482544]
[318.85186768 -302.25729370]
[327.51846313 -314.50024414]
[336.18508911 -326.74319458]
[344.85168457 -338.98614502]
[353.51828003 -351.22909546]
[354.49182129 -367.59933472]
[369.27474976 -374.69839478]
[382.65969849 -365.22338867]
[380.87734985 -348.92138672]
[365.76123047 -342.56250000]
[357.09463501 -330.31954956]
[348.42803955 -318.07659912]
[339.76141357 -305.83364868]
[331.09481812 -293.59066772]
[341.59423828 -282.33682251]
[349.54028320 -269.14886475]
[354.58688354 -254.59667969]
[356.51333618 -239.30950928]
[355.23394775 -223.94900513]
[350.80172729 -209.18040466]
[343.40637207 -195.64382935]
[333.36602783 -183.92649841]
[321.11367798 -174.53726196]
[307.17834473 -167.88452148]
[292.16244507 -164.25840759]
[276.71554565 -163.81819153]
[261.50640869 -166.58528137]
[247.19395447 -172.44213867]
[238.78053284 -160.02383423]
[230.36712646 -147.60551453]
[221.95372009 -135.18719482]
[226.13636780 -122.96190643]
[222.44042969 -110.37744141]
[212.00573730 -102.11316681]
[198.51991272 -101.37665558]
[189.85330200 -89.13370514]
[181.18670654 -76.89074707]
[173.82046509 -63.82405472]
[167.83216858 -50.07122803]
[161.84387207 -36.31839752]
[155.85557556 -22.56556892]
[150.15090942 -8.69268799]
[144.73228455 5.29439545]
[139.31365967 19.28147888]
[133.89503479 33.26856232]
[128.47640991 47.25564575]
[123.05778503 61.24272919]
[131.14674377 66.85585785]
[137.88710022 74.14685822]
[142.93331909 82.79514313]
[146.01541138 92.40962219]
[146.95317078 102.54630280]
[145.66627502 112.72882843]
[142.17984009 122.47084045]
[136.62481689 131.29920959]
[129.23352051 138.77700806]
[120.33000183 144.52505493]
[110.31591034 148.24107361]
[99.65245819 149.71543884]
[99.96044159 164.71228027]
[100.26841736 179.70910645]
[100.57639313 194.70594788]
[100.88436890 209.70278931]
[101.19235229 224.69963074]
[101.50032806 239.69647217]
[101.80830383 254.69329834]
[102.11627960 269.69015503]
[104.70205688 288.89855957]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 151]
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 34]
[11 33]
[12 32]
[13 27]
[14 26]
[15 25]
[40 131]
[41 130]
[42 129]
[43 128]
[44 127]
[45 126]
[48 125]
[49 124]
[50 123]
[51 122]
[62 121]
[63 120]
[64 119]
[67 115]
[68 114]
[69 113]
[70 112]
[85 98]
[86 97]
[87 96]
[88 95]
[89 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
