%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAAAAAAUCCCAAACAUAUAACUGAACUCCUCACACCCAAUUGGACCAAUCUAUCACCCxxxxxxxxxxGCUAUCACCACUCUGUUCGCAGCAGUCUGCGCCCUUACACAAAAUGACAUCAAAAAAAUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[89.50926208 440.83166504]
[89.50926208 425.83166504]
[89.50926208 410.83166504]
[89.50926208 395.83166504]
[89.50926208 380.83166504]
[89.50926208 365.83166504]
[89.50926208 350.83166504]
[89.50926208 335.83166504]
[89.50926208 320.83166504]
[89.50926208 305.83166504]
[75.15724945 303.11968994]
[61.54913330 297.80224609]
[49.15366364 290.06088257]
[38.39810181 280.16058350]
[29.65353203 268.44091797]
[23.22202873 255.30413818]
[19.32623482 241.20155334]
[18.10165596 226.61796570]
[19.59194374 212.05496216]
[23.74734497 198.01374817]
[30.42635727 184.97784424]
[39.40054703 173.39645386]
[50.36236954 163.66893005]
[62.93569946 156.13111877]
[76.68873596 151.04365540]
[91.14884949 148.58300781]
[91.46090698 133.58625793]
[91.77295685 118.58950043]
[83.15405273 109.66860962]
[81.59803009 97.92910767]
[87.05500793 88.05677795]
[80.14801025 74.74162292]
[73.24101257 61.42646790]
[60.01826859 52.73913956]
[61.02600861 37.87866211]
[54.11901093 24.56350899]
[40.11074066 29.97013092]
[25.59271049 33.80288696]
[10.74115658 36.01524734]
[-4.26363707 36.58035660]
[-19.23952675 35.49135971]
[-34.00471878 32.76146698]
[-48.37997818 28.42382431]
[-62.19079971 22.53108215]
[-75.26953125 15.15477753]
[-87.45742035 6.38444805]
[-98.60649872 -3.67344093]
[-108.58144379 -14.89679623]
[-117.26116180 -27.14937592]
[-124.54028320 -40.28244400]
[-130.33045959 -54.13658142]
[-134.56138611 -68.54360962]
[-137.18173218 -83.32863617]
[-138.15965271 -98.31218719]
[-137.48329163 -113.31237793]
[-135.16087341 -128.14712524]
[-131.22058105 -142.63633728]
[-125.71023560 -156.60412598]
[-118.69673157 -169.88095093]
[-110.26522064 -182.30563354]
[-100.51803589 -193.72735596]
[-89.57350922 -204.00744629]
[-77.56449127 -213.02114868]
[-64.63677216 -220.65902710]
[-50.94726562 -226.82835388]
[-36.66216278 -231.45426941]
[-21.95486450 -234.48059082]
[-7.00390911 -235.87059021]
[8.00921535 -235.60739136]
[22.90226364 -233.69419861]
[37.49444580 -230.15423584]
[51.60863113 -225.03045654]
[65.07347870 -218.38508606]
[77.72554016 -210.29876709]
[89.41123962 -200.86967468]
[99.98870850 -190.21228027]
[109.32955933 -178.45591736]
[117.32039642 -165.74334717]
[123.86421967 -152.22885132]
[128.88159180 -138.07649231]
[132.31159973 -123.45806885]
[134.11262512 -108.55104065]
[134.26278687 -93.53636169]
[132.76026917 -78.59629059]
[129.62332153 -63.91219711]
[124.88999939 -49.66232300]
[118.61778259 -36.01965332]
[110.88279724 -23.14979362]
[101.77894592 -11.20897675]
[91.41674042 -0.34215140]
[79.92196655 9.31876850]
[67.43416595 17.65650940]
[74.34116364 30.97166443]
[87.06987000 38.70660400]
[86.55616760 54.51947021]
[93.46316528 67.83462524]
[100.37016296 81.14978027]
[114.38687897 86.49129486]
[128.40359497 81.14978027]
[142.42030334 75.80826569]
[156.43701172 70.46675873]
[170.45372009 65.12524414]
[180.37963867 52.07118988]
[196.61138916 54.40839005]
[202.45112610 69.73252869]
[191.89144897 82.27944946]
[175.79524231 79.14195251]
[161.77853394 84.48346710]
[147.76181030 89.82498169]
[133.74510193 95.16649628]
[119.72838593 100.50800323]
[134.59007263 102.54035950]
[149.45327759 100.51917267]
[163.64979553 105.36259460]
[174.17835999 116.04666138]
[178.81312561 130.31266785]
[176.57423401 145.14463806]
[167.93504333 157.40695190]
[154.72195435 164.50724792]
[139.72831726 164.94442749]
[126.12396240 158.62608337]
[116.78497314 146.88796997]
[113.68568420 132.21205139]
[106.76971436 118.90155792]
[106.45765686 133.89831543]
[106.14559937 148.89506531]
[121.21479797 152.18563843]
[135.35432434 158.33703613]
[148.02696228 167.11354065]
[158.75160217 178.17980957]
[167.12152100 191.11354065]
[172.81979370 205.42172241]
[175.63131714 220.55932617]
[175.45086670 235.95011902]
[172.28713989 251.00857544]
[166.26223755 265.16217041]
[157.60704041 277.87313843]
[146.65232849 288.65890503]
[133.81613159 297.11041260]
[119.58777618 302.90765381]
[104.50926208 305.83166504]
[104.50926208 320.83166504]
[104.50926208 335.83166504]
[104.50926208 350.83166504]
[104.50926208 365.83166504]
[104.50926208 380.83166504]
[104.50926208 395.83166504]
[104.50926208 410.83166504]
[104.50926208 425.83166504]
[104.50926208 440.83166504]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[26 126]
[27 125]
[28 124]
[31 97]
[32 96]
[33 95]
[35 93]
[36 92]
[98 111]
[99 110]
[100 109]
[101 108]
[102 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
