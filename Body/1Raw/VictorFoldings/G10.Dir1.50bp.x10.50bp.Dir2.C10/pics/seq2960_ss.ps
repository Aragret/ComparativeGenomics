%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:33:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACUUGACCAACGGAACAAGUUACCCUAGGGAUAACAGCGCAAUCCUAUUCUAGAGUCCAUAxxxxxxxxxxAUUUCGUACAUUACUGCCAGCCACCAUGAAUAUUGUACGGUACCAUAAAUACUUGACCACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[80.32481384 297.30294800]
[80.32481384 282.30294800]
[80.32481384 267.30294800]
[80.32481384 252.30294800]
[80.32481384 237.30294800]
[80.32481384 222.30294800]
[80.32481384 207.30294800]
[80.32481384 192.30294800]
[80.32481384 177.30294800]
[80.32481384 162.30294800]
[66.63418579 156.17376709]
[55.44589233 166.16487122]
[44.25759506 176.15596008]
[33.06929779 186.14706421]
[21.88100243 196.13815308]
[16.55981445 213.73689270]
[-0.70939267 216.70657349]
[-11.69019508 226.92529297]
[-19.16623497 242.14189148]
[-35.85774612 239.17039490]
[-37.62304688 222.30860901]
[-21.90890312 215.94448853]
[-10.92809963 205.72576904]
[-10.16707993 193.61450195]
[-1.04840684 185.01094055]
[11.88990593 184.94985962]
[23.07820320 174.95877075]
[34.26649857 164.96766663]
[45.45479584 154.97657776]
[56.64309311 144.98547363]
[41.18638611 114.71472931]
[44.09012222 81.87384796]
[30.52822685 75.46486664]
[14.74524879 76.56403351]
[6.54406357 64.13062286]
[-7.01783276 57.72164536]
[-20.57972908 51.31266785]
[-34.14162445 44.90369415]
[-47.95520782 39.05690384]
[-61.99718475 33.78216171]
[-76.03916168 28.50742149]
[-90.08113861 23.23267937]
[-102.39121246 32.53136826]
[-117.77606964 33.67580795]
[-131.32646179 26.30081367]
[-138.71849060 12.75971508]
[-137.59341431 -2.62656856]
[-128.31021118 -14.94833183]
[-113.83114624 -20.27374458]
[-98.77641296 -16.90348625]
[-87.94993591 -5.91299534]
[-84.80639648 9.19070339]
[-70.76441956 14.46544456]
[-56.72244263 19.74018669]
[-42.68046570 25.01492882]
[-40.03389359 23.92558479]
[-36.78368378 23.85220909]
[-33.32713318 25.03500366]
[-30.14263535 27.56136894]
[-27.73264885 31.34179688]
[-14.17075348 37.75077057]
[-0.60885710 44.15974808]
[12.95303917 50.56872177]
[27.76597977 49.01114273]
[36.93720245 61.90297318]
[50.49909973 68.31195068]
[55.08481216 62.09092712]
[60.44713974 56.52537537]
[66.49335480 51.71152496]
[73.11892700 47.73261261]
[80.20928192 44.65743637]
[87.64183807 42.53916550]
[95.28807068 41.41442490]
[103.01576996 41.30266571]
[110.69132996 42.20581818]
[118.18202972 44.10826874]
[125.35835266 46.97711945]
[132.09620667 50.76276779]
[138.27911377 55.39975739]
[143.80014038 60.80791473]
[148.56384277 66.89372253]
[152.48783875 73.55196381]
[166.63514709 68.56664276]
[180.78247070 63.58131790]
[194.92979431 58.59599686]
[208.68261719 52.60770035]
[221.96995544 45.64734268]
[235.25729370 38.68698502]
[248.54464722 31.72663116]
[261.83197021 24.76627350]
[275.11932373 17.80591774]
[271.65417480 3.12792110]
[271.94900513 -11.95066929]
[275.98522949 -26.48200226]
[283.50915527 -39.55262375]
[294.04785156 -50.34090424]
[306.93881226 -58.16868210]
[321.37170410 -62.54389954]
[336.43927002 -63.19152451]
[351.19433594 -60.07084656]
[364.70941162 -53.37803650]
[376.13488770 -43.53380585]
[384.75259399 -31.15697479]
[390.02081299 -17.02556229]
[391.60833740 -2.02787638]
[389.41540527 12.89331245]
[383.57986450 26.80004692]
[374.46853638 38.81813812]
[362.65417480 48.19211578]
[348.87942505 54.33272934]
[334.01019287 56.85396957]
[318.98117065 55.59735489]
[304.73706055 50.64187241]
[292.17330933 42.29902649]
[282.07968140 31.09325981]
[268.79232788 38.05361557]
[255.50498962 45.01397324]
[242.21765137 51.97432709]
[228.93031311 58.93468475]
[215.64297485 65.89504242]
[229.84429932 70.72436523]
[237.76605225 83.46194458]
[235.81797791 98.33490753]
[224.88298035 108.60260773]
[209.91694641 109.61157990]
[197.70272827 100.90453339]
[193.77597046 86.42764282]
[199.91511536 72.74330902]
[185.76779175 77.72863770]
[171.62048340 82.71395874]
[157.47315979 87.69927979]
[158.99031067 96.68522644]
[159.10363770 105.84531403]
[157.79573059 114.96041870]
[155.08337402 123.81022644]
[151.01744080 132.17855835]
[145.68206787 139.85865784]
[139.19291687 146.65829468]
[131.69468689 152.40451050]
[123.35794830 156.94812012]
[114.37524414 160.16744995]
[104.95663452 161.97158813]
[95.32481384 162.30294800]
[95.32481384 177.30294800]
[95.32481384 192.30294800]
[95.32481384 207.30294800]
[95.32481384 222.30294800]
[95.32481384 237.30294800]
[95.32481384 252.30294800]
[95.32481384 267.30294800]
[95.32481384 282.30294800]
[95.32481384 297.30294800]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 30]
[12 29]
[13 28]
[14 27]
[15 26]
[17 23]
[18 22]
[32 66]
[33 65]
[35 63]
[36 62]
[37 61]
[38 60]
[39 55]
[40 54]
[41 53]
[42 52]
[82 131]
[83 130]
[84 129]
[85 128]
[86 120]
[87 119]
[88 118]
[89 117]
[90 116]
[91 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
