%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAAGUUUAACUAAGCUAUACUAACCCCAGGGUUGGUCAAUUUCGUGCCAGCCACCGCGGUxxxxxxxxxxAAGAGGAACAGCUCUUUGGACACUAGGAAAAAACCUUGUAGAGAGAGUAAAAAAUUUAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[108.26738739 507.52169800]
[108.26738739 492.52169800]
[108.26738739 477.52169800]
[108.26738739 462.52169800]
[108.26738739 447.52169800]
[108.26738739 432.52169800]
[108.26738739 417.52169800]
[108.26738739 402.52169800]
[108.26738739 387.52169800]
[108.26738739 372.52169800]
[91.65417480 367.63394165]
[77.31091309 357.89978027]
[66.61194611 344.23925781]
[60.58627319 327.94924927]
[59.81860733 310.58029175]
[64.39265442 293.78909302]
[73.88210297 279.18041992]
[87.39036560 268.15374756]
[103.63526917 261.76919556]
[102.38838959 246.82112122]
[101.14151764 231.87303162]
[90.20983887 224.98136902]
[85.18717194 212.86331177]
[88.12409973 199.87861633]
[98.16262817 190.84060669]
[97.22699738 175.86981201]
[88.71089935 163.64993286]
[95.57234192 149.39402771]
[94.63671112 134.42323303]
[93.70108795 119.45243835]
[79.86257172 112.22943115]
[73.69390106 95.58985901]
[58.69471359 95.74589539]
[43.69552231 95.90193176]
[28.69633675 96.05796814]
[14.86341000 104.86604309]
[0.44590434 97.05147552]
[0.27531323 80.65321350]
[14.52712631 72.54039001]
[28.54029846 81.05878448]
[43.53948593 80.90274811]
[58.53867722 80.74671173]
[73.53786469 80.59067535]
[84.93888855 70.84301758]
[87.42400360 56.05031586]
[89.90912628 41.25760651]
[80.86335754 31.22606468]
[79.29061890 18.00659180]
[85.54445648 6.47559738]
[97.13266754 0.75631523]
[99.92499542 -13.98149109]
[102.71731567 -28.71929741]
[105.50964355 -43.45710373]
[107.84074402 -58.27486038]
[109.70835876 -73.15814209]
[111.57597351 -88.04141998]
[113.28865814 -102.94332123]
[114.84624481 -117.86223602]
[116.40382385 -132.78114319]
[107.33465576 -120.83333588]
[95.42468262 -111.71453094]
[81.52472687 -106.07617188]
[66.62776184 -104.32103729]
[51.79800034 -106.57452393]
[38.09484863 -112.67563629]
[26.49722672 -122.18852997]
[17.83364296 -134.43362427]
[12.72300625 -148.53614807]
[11.53040886 -163.48867798]
[14.34104729 -178.22299194]
[20.95413589 -191.68653870]
[30.89724922 -202.91749573]
[43.46007538 -211.11355591]
[57.74515152 -215.68920898]
[72.73198700 -216.31758118]
[87.34994507 -212.95378113]
[100.55476379 -205.83811951]
[111.40311432 -195.47889709]
[119.12001801 -182.61618042]
[123.15418243 -168.16885376]
[123.21814728 -153.17442322]
[130.94223022 -166.03283691]
[138.66632080 -178.89123535]
[146.39039612 -191.74963379]
[154.11448669 -204.60804749]
[150.04661560 -219.87983704]
[158.04116821 -233.51298523]
[173.35511780 -237.41917419]
[186.90298462 -229.28092957]
[190.64703369 -213.92652893]
[182.36601257 -200.46546936]
[166.97288513 -196.88395691]
[159.24880981 -184.02555847]
[151.52471924 -171.16714478]
[143.80062866 -158.30874634]
[136.07655334 -145.45034790]
[131.32273865 -131.22357178]
[129.76515198 -116.30465698]
[128.20758057 -101.38574219]
[130.65695190 -94.36106110]
[126.45925140 -86.17380524]
[124.59163666 -71.29052734]
[122.72402191 -56.40724945]
[124.64332581 -53.37677765]
[125.15269470 -49.24855423]
[123.74459839 -44.71317291]
[120.24744415 -40.66477966]
[117.45512390 -25.92697144]
[114.66279602 -11.18916607]
[111.87047577 3.54863977]
[121.92400360 16.99425316]
[119.11810303 33.88836670]
[104.70182800 43.74272537]
[102.21671295 58.53543091]
[99.73159027 73.32814026]
[119.18359375 84.60391235]
[121.93814850 105.09625244]
[108.67187500 118.51681519]
[109.60750580 133.48760986]
[110.54313660 148.45838928]
[119.12615967 161.74908447]
[112.19779205 174.93418884]
[113.13341522 189.90496826]
[126.44849396 201.20303345]
[127.48496246 218.29718018]
[116.08960724 230.62615967]
[117.33647919 245.57424927]
[118.58335114 260.52233887]
[131.23597717 262.64941406]
[143.07475281 267.57205200]
[153.49108887 275.03298950]
[161.95048523 284.64447021]
[168.01991272 295.90859985]
[171.39007568 308.24301147]
[171.89108276 321.01101685]
[169.50103760 333.55441284]
[164.34696960 345.22756958]
[156.69812012 355.43048096]
[146.95181274 363.63967896]
[135.61285400 369.43515015]
[123.26738739 372.52169800]
[123.26738739 387.52169800]
[123.26738739 402.52169800]
[123.26738739 417.52169800]
[123.26738739 432.52169800]
[123.26738739 447.52169800]
[123.26738739 462.52169800]
[123.26738739 477.52169800]
[123.26738739 492.52169800]
[123.26738739 507.52169800]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[19 128]
[20 127]
[21 126]
[25 123]
[26 122]
[28 120]
[29 119]
[30 118]
[32 43]
[33 42]
[34 41]
[35 40]
[44 115]
[45 114]
[46 113]
[50 110]
[51 109]
[52 108]
[53 107]
[54 103]
[55 102]
[56 101]
[57 99]
[58 98]
[59 97]
[81 96]
[82 95]
[83 94]
[84 93]
[85 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
