%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCCCAGUCCUAGCUGCUGGCAUCACUAUACUACUAACAGACCGCAACCUCAACACCACCxxxxxxxxxxCACCUCCUAUUCUUGCACGAAACGGGAUCAAACAACCCCCUAGGAAUCACCUCCCAUUCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[114.87615204 252.16912842]
[114.87615204 237.16912842]
[114.87615204 222.16912842]
[114.87615204 207.16912842]
[114.87615204 192.16912842]
[114.87615204 177.16912842]
[114.87615204 162.16912842]
[114.87615204 147.16912842]
[114.87615204 132.16912842]
[114.87615204 117.16913605]
[100.50796509 112.86154938]
[92.25567627 125.38751221]
[88.59082031 141.94061279]
[71.67008209 143.00132751]
[65.96669006 127.03550720]
[79.72971344 117.13522339]
[87.98200226 104.60926056]
[91.08032227 89.93273926]
[88.59520721 75.14002991]
[86.11009216 60.34732056]
[83.62496948 45.55461502]
[81.13985443 30.76190758]
[78.65473175 15.96920013]
[59.24443054 -2.54773998]
[73.90409851 -29.42787743]
[65.39301300 -41.77944946]
[56.88191986 -54.13102341]
[43.79864120 -46.77283096]
[30.10044289 -40.63486099]
[15.90084076 -35.76798248]
[1.31749642 -32.21251678]
[-13.52874374 -29.99793243]
[-28.51485825 -29.14257812]
[-43.51666260 -29.65354156]
[-58.40984726 -31.52658844]
[-73.07099915 -34.74619675]
[-87.37862396 -39.28569031]
[-101.21417236 -45.10745239]
[-114.46298981 -52.16323853]
[-127.01528931 -60.39458084]
[-138.76705933 -69.73327637]
[-149.62091064 -80.10192871]
[-159.48692322 -91.41462708]
[-168.28332520 -103.57762909]
[-175.93722534 -116.49015045]
[-182.38519287 -130.04518127]
[-187.57382202 -144.13040161]
[-191.46009827 -158.62908936]
[-194.01182556 -173.42111206]
[-195.20785522 -188.38389587]
[-195.03828430 -203.39343262]
[-193.50450134 -218.32537842]
[-190.61923218 -233.05596924]
[-186.40637207 -247.46316528]
[-180.90084839 -261.42755127]
[-174.14825439 -274.83343506]
[-166.20457458 -287.56973267]
[-157.13562012 -299.53088379]
[-147.01655579 -310.61779785]
[-135.93121338 -320.73858643]
[-123.97145081 -329.80938721]
[-111.23638153 -337.75503540]
[-97.83153534 -344.50970459]
[-83.86798859 -350.01739502]
[-69.46144867 -354.23245239]
[-54.73130035 -357.12002563]
[-39.79959869 -358.65609741]
[-24.79007912 -358.82800293]
[-9.82711601 -357.63427734]
[4.96530056 -355.08483887]
[19.46459389 -351.20080566]
[33.55061340 -346.01434326]
[47.10663986 -339.56845093]
[60.02033615 -331.91656494]
[72.18469238 -323.12203979]
[83.49891663 -313.25778198]
[93.86925507 -302.40551758]
[103.20976257 -290.65518188]
[111.44303894 -278.10415649]
[118.50087738 -264.85644531]
[124.32477570 -251.02178955]
[128.86647034 -236.71485901]
[132.08834839 -222.05421448]
[133.96369934 -207.16131592]
[134.47697449 -192.15959167]
[133.62393188 -177.17333984]
[131.41165161 -162.32676697]
[127.85843658 -147.74287415]
[122.99375153 -133.54251099]
[116.85789490 -119.84336853]
[109.50172424 -106.75895691]
[100.98619080 -94.39768982]
[91.38185120 -82.86200714]
[80.76830292 -72.24748993]
[69.23348999 -62.64211273]
[77.74458313 -50.29053879]
[86.25567627 -37.93896866]
[83.31590271 -52.64807129]
[90.99848175 -65.53131866]
[105.33687592 -69.93705750]
[118.92813873 -63.59059143]
[124.75507355 -49.76862335]
[119.80921936 -35.60746002]
[106.64209747 -28.41827202]
[121.57640839 -29.82057571]
[136.51071167 -31.22287941]
[143.51007080 -44.97106552]
[156.84263611 -52.73290253]
[172.25405884 -52.03161621]
[184.82658386 -43.09098053]
[190.54838562 -28.76392555]
[187.59365845 -13.62215996]
[176.90522766 -2.49736571]
[161.89373779 1.06057549]
[147.34931946 -4.08366251]
[137.91302490 -16.28857231]
[122.97871399 -14.88626862]
[108.04440308 -13.48396492]
[105.23956299 3.71056890]
[93.44744110 13.48408127]
[95.93255615 28.27678871]
[98.41767883 43.06949615]
[100.90279388 57.86220169]
[103.38791656 72.65490723]
[105.87303162 87.44761658]
[104.84369659 72.48297882]
[108.82709503 58.02156067]
[117.37387848 45.69466019]
[129.51994324 36.89278793]
[143.89518738 32.60882187]
[158.87803650 33.32600403]
[172.77838135 38.96343613]
[184.02819824 48.88519669]
[191.35850525 61.97208786]
[193.94241333 76.74785614]
[191.48843384 91.54576111]
[184.27339172 104.69655609]
[173.11117554 114.71678162]
[159.26091003 120.47612762]
[144.28494263 121.32492828]
[129.87614441 117.16913605]
[129.87614441 132.16912842]
[129.87614441 147.16912842]
[129.87614441 162.16912842]
[129.87614441 177.16912842]
[129.87614441 192.16912842]
[129.87614441 207.16912842]
[129.87614441 222.16912842]
[129.87614441 237.16912842]
[129.87614441 252.16912842]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 17]
[12 16]
[18 125]
[19 124]
[20 123]
[21 122]
[22 121]
[23 120]
[25 97]
[26 96]
[27 95]
[104 118]
[105 117]
[106 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
