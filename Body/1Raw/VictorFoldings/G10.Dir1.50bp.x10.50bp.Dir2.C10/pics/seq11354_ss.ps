%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACAACCACCACCCCAUCAUACUCUUUCACCCACAGCACCAAUCCUACCUCCAUCGCUAACxxxxxxxxxxCCCAUGCCUCAGGAUACUCCUCAAUAGCCAUCGCUGUAGUAUAUCCAAAGACAACCAUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-3.63772631 296.04269409]
[-11.09263611 309.05899048]
[-18.54754639 322.07531738]
[-26.00245667 335.09161377]
[-26.14698792 350.91217041]
[-39.18643951 358.11093140]
[-46.64134979 371.12722778]
[-46.78587723 386.94778442]
[-59.82532883 394.14651489]
[-67.28024292 407.16284180]
[-66.68232727 423.55108643]
[-80.71785736 432.03259277]
[-94.94828033 423.88229370]
[-94.73455811 407.48455811]
[-80.29654694 399.70791626]
[-72.84163666 386.69161987]
[-73.23033142 371.80209351]
[-59.65765762 363.67233276]
[-52.20274734 350.65600586]
[-52.59144211 335.76647949]
[-39.01876831 327.63671875]
[-31.56385612 314.62039185]
[-24.10894585 301.60409546]
[-16.65403557 288.58779907]
[-27.39986610 281.50149536]
[-37.71642685 273.80361938]
[-47.56895828 265.52014160]
[-56.92425919 256.67895508]
[-65.75080872 247.30982971]
[-74.01886749 237.44435120]
[-81.70057678 227.11575317]
[-88.77005768 216.35885620]
[-95.20347595 205.20988464]
[-100.97916412 193.70642090]
[-106.07765961 181.88720703]
[-110.48178864 169.79206848]
[-114.17670441 157.46177673]
[-117.14995575 144.93788147]
[-119.39153290 132.26255798]
[-120.89387512 119.47852325]
[-121.65192413 106.62886047]
[-121.66312408 93.75686646]
[-120.92743683 80.90590668]
[-119.44734192 68.11927795]
[-117.22782898 55.44007492]
[-114.27637482 42.91101456]
[-110.60292053 30.57431412]
[-106.21984863 18.47154045]
[-101.14192963 6.64347267]
[-95.38626862 -4.87003231]
[-88.97225952 -16.03018188]
[-81.92150879 -26.79937172]
[-74.25778961 -37.14131546]
[-66.00691223 -47.02116394]
[-57.19667435 -56.40563202]
[-47.85677338 -65.26309967]
[-38.01867294 -73.56371307]
[-27.71552277 -81.27951050]
[-16.98204041 -88.38449860]
[-5.85439157 -94.85472870]
[5.62993097 -100.66840363]
[17.43223000 -105.80593109]
[29.51273727 -110.25000000]
[41.83074951 -113.98564148]
[54.34476089 -117.00026703]
[67.01260376 -119.28371429]
[79.79160309 -120.82830048]
[92.63868713 -121.62880707]
[105.51058197 -121.68254089]
[118.36389923 -120.98932648]
[131.15534973 -119.55149841]
[143.84181213 -117.37390137]
[156.38056946 -114.46386719]
[168.72933960 -110.83119965]
[180.84652710 -106.48815155]
[192.69131470 -101.44934082]
[204.22377014 -95.73175812]
[215.40505981 -89.35466766]
[226.19749451 -82.33954620]
[236.56469727 -74.71004486]
[246.47177124 -66.49185944]
[255.88529968 -57.71268463]
[264.77359009 -48.40210342]
[273.10665894 -38.59148788]
[280.85647583 -28.31389236]
[287.99688721 -17.60394669]
[294.50384521 -6.49774075]
[300.35543823 4.96730661]
[305.53195190 16.75256348]
[310.01593018 28.81831932]
[313.79223633 41.12392044]
[316.84820557 53.62789917]
[331.61425781 50.98903656]
[346.38031006 48.35017014]
[361.14636230 45.71130753]
[375.85433960 42.76582336]
[390.49783325 39.51499939]
[405.14132690 36.26417542]
[394.33840942 25.85759735]
[395.52667236 10.90473461]
[407.83755493 2.33492017]
[422.27285767 6.41199350]
[428.28149414 20.15594482]
[421.47216797 33.52065277]
[436.37408447 31.80796432]
[451.27600098 30.09527397]
[466.17788696 28.38258553]
[481.07980347 26.66989517]
[493.92330933 16.47304153]
[509.07434082 22.74827576]
[510.94677734 39.04017639]
[497.61444092 48.58903122]
[482.79248047 41.57179642]
[467.89056396 43.28448868]
[452.98867798 44.99717712]
[438.08676147 46.70986557]
[423.18487549 48.42255783]
[408.39215088 50.90767670]
[393.74865723 54.15850067]
[379.10516357 57.40932846]
[375.80166626 60.93954086]
[370.22286987 62.39159775]
[363.78524780 60.47736359]
[349.01919556 63.11622620]
[334.25311279 65.75508881]
[319.48706055 68.39395905]
[321.37301636 87.05785370]
[321.67477417 105.81436157]
[320.39016724 124.52926636]
[317.52841187 143.06863403]
[313.10995483 161.29978943]
[307.16644287 179.09225464]
[299.74038696 196.31874084]
[290.88491821 212.85592651]
[280.66345215 228.58549500]
[269.14910889 243.39488220]
[256.42431641 257.17810059]
[242.58007812 269.83648682]
[227.71553040 281.27951050]
[211.93699646 291.42526245]
[195.35742188 300.20108032]
[178.09544373 307.54425049]
[160.27461243 313.40219116]
[142.02241516 317.73294067]
[123.46951294 320.50555420]
[104.74864960 321.70016479]
[85.99380493 321.30825806]
[67.33919525 319.33261108]
[48.91831207 315.78735352]
[30.86298180 310.69787598]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 24]
[2 23]
[3 22]
[4 21]
[6 19]
[7 18]
[9 16]
[10 15]
[92 126]
[93 125]
[94 124]
[95 123]
[96 120]
[97 119]
[98 118]
[104 117]
[105 116]
[106 115]
[107 114]
[108 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
