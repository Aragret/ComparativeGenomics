%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCCUACUCCUGCUCGCAUCUGCUAUAGUGGAGGCCGGAGCAGGAACAGGUUGAACAGUCUACCxxxxxxxxxxUCACACACCGCACAAUCCCCUAUCUAGGCCUUCUUACGAGCCAAAACCUGCCCCUACUCCUCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 251.97476196]
[92.50000000 236.97476196]
[92.50000000 221.97476196]
[92.50000000 206.97476196]
[92.50000000 191.97476196]
[92.50000000 176.97476196]
[92.50000000 161.97476196]
[92.50000000 146.97476196]
[92.50000000 131.97476196]
[92.50000000 116.97475433]
[86.86730957 112.02270508]
[86.14799500 127.00544739]
[73.98562622 135.78479004]
[59.53850174 131.74986267]
[53.68533325 117.93898010]
[60.83357239 104.75176239]
[75.60193634 102.11859894]
[69.96925354 97.16654205]
[55.09278488 99.08769989]
[40.21632385 101.00885773]
[25.33986092 102.93001556]
[10.46339703 104.85117340]
[-4.41306591 106.77233124]
[-19.28952980 108.69348145]
[-34.16599274 110.61463928]
[-49.00159454 112.82933807]
[-63.79054642 115.33671570]
[-76.10319519 125.27196503]
[-89.94474792 119.77099609]
[-104.73370361 122.27837372]
[-119.52265167 124.78575134]
[-134.31159973 127.29312897]
[-149.10055542 129.80050659]
[-161.38023376 140.66978455]
[-176.84524536 135.21400452]
[-179.58650208 119.04558563]
[-166.78404236 108.79722595]
[-151.60792542 115.01155090]
[-136.81898499 112.50417328]
[-122.03002930 109.99680328]
[-107.24107361 107.48942566]
[-92.45212555 104.98204803]
[-81.19728088 95.22614288]
[-66.29792023 100.54776764]
[-51.50897217 98.04039001]
[-48.03696442 94.69082642]
[-42.40707779 93.52085114]
[-36.08715057 95.73817444]
[-21.21068573 93.81702423]
[-6.33422279 91.89586639]
[8.54224014 89.97470856]
[23.41870308 88.05355072]
[38.29516602 86.13239288]
[53.17163086 84.21123505]
[68.04809570 82.29007721]
[89.27697754 77.40488434]
[102.39482880 86.72509766]
[111.25949860 74.62477875]
[120.12416077 62.52446365]
[128.98883057 50.42414093]
[137.85348511 38.32382202]
[146.71815491 26.22350502]
[153.03503418 12.61846828]
[156.55831909 -1.96187544]
[142.60299683 -7.53229713]
[129.58250427 -15.03214359]
[117.76194763 -24.30872726]
[107.38195038 -35.17318726]
[98.65386200 -47.40434265]
[91.75534821 -60.75317383]
[86.82688141 -74.94792175]
[83.96878052 -89.69960022]
[83.23923492 -104.70788574]
[84.65309906 -119.66722107]
[88.18159485 -134.27305603]
[93.75288391 -148.22804260]
[101.25353241 -161.24806213]
[110.53084564 -173.06805420]
[121.39595032 -183.44737244]
[133.62763977 -192.17471313]
[146.97691345 -199.07238770]
[161.17196655 -203.99998474]
[175.92381287 -206.85717773]
[190.93214417 -207.58578491]
[205.89138794 -206.17100525]
[220.49700928 -202.64160156]
[234.45164490 -197.06945801]
[247.47120667 -189.56799316]
[259.29061890 -180.28994751]
[269.66928101 -169.42419434]
[278.39584351 -157.19197083]
[285.29269409 -143.84228516]
[290.21942139 -129.64692688]
[293.07571411 -114.89488983]
[293.80337524 -99.88651276]
[292.38766479 -84.92735291]
[288.85736084 -70.32195282]
[283.28436279 -56.36766052]
[275.78207397 -43.34856796]
[266.50329590 -31.52972412]
[255.63691711 -21.15174866]
[243.40414429 -12.42592430]
[230.05403137 -5.52989626]
[215.85836792 -0.60405898]
[201.10615540 2.25130391]
[186.09774780 2.97806048]
[171.13867188 1.56141520]
[167.61537170 16.14175987]
[172.34103394 21.96568871]
[181.79235840 33.61354446]
[186.51802063 39.43747330]
[201.51142883 38.99297333]
[216.50483704 38.54847336]
[223.71600342 24.98770142]
[236.74995422 16.86292458]
[252.10058594 16.35966873]
[265.63870239 23.61330986]
[273.72256470 36.67265320]
[274.17770386 52.02479935]
[266.88168335 65.54010010]
[253.79705811 73.58300781]
[238.44355774 73.99002075]
[224.95118713 66.65164948]
[216.94934082 53.54188919]
[201.95593262 53.98638916]
[186.96250916 54.43088913]
[173.71376038 51.23848724]
[164.02810669 44.23731232]
[158.81846619 35.08816910]
[149.95381165 47.18848801]
[141.08914185 59.28880692]
[132.22447205 71.38912964]
[123.35981750 83.48944855]
[114.49514771 95.58976746]
[125.19284058 85.07504272]
[139.03057861 79.28565216]
[154.02873230 79.04985046]
[168.04162598 84.40135956]
[179.06457520 94.57458496]
[185.52062988 108.11413574]
[186.48616028 123.08303070]
[181.82304382 137.33979797]
[172.19839478 148.84484863]
[158.98912048 155.95225525]
[144.08496094 157.64521790]
[129.61813354 153.68154907]
[117.65825653 144.62829590]
[109.91634369 131.78062439]
[107.50000000 116.97475433]
[107.50000000 131.97476196]
[107.50000000 146.97476196]
[107.50000000 161.97476196]
[107.50000000 176.97476196]
[107.50000000 191.97476196]
[107.50000000 206.97476196]
[107.50000000 221.97476196]
[107.50000000 236.97476196]
[107.50000000 251.97476196]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 158]
[2 157]
[3 156]
[4 155]
[5 154]
[6 153]
[7 152]
[8 151]
[9 150]
[10 149]
[18 55]
[19 54]
[20 53]
[21 52]
[22 51]
[23 50]
[24 49]
[25 48]
[26 45]
[27 44]
[29 42]
[30 41]
[31 40]
[32 39]
[33 38]
[57 134]
[58 133]
[59 132]
[60 131]
[61 130]
[62 129]
[63 108]
[64 107]
[111 126]
[112 125]
[113 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
