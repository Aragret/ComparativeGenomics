%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACCCCCUUCGACCUUGCCGAAGGGGAGUCCGAACUAGUCUCAGGCUUCAACAUCGAAUAxxxxxxxxxxACCAUAAAUACUUGACCACCUGUAGUACAUAAAAACCCAAUCCACAUCAAAACCCCCUCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 271.18682861]
[92.50000000 256.18682861]
[92.50000000 241.18684387]
[92.50000000 226.18684387]
[92.50000000 211.18684387]
[92.50000000 196.18684387]
[92.50000000 181.18684387]
[92.50000000 166.18684387]
[92.50000000 151.18684387]
[92.50000000 136.18684387]
[81.30054474 131.87582397]
[72.07289124 124.20359802]
[58.97974014 131.52270508]
[45.96342850 138.97761536]
[33.02537155 146.56752014]
[20.08731651 154.15742493]
[7.14926100 161.74734497]
[-5.78879499 169.33724976]
[-18.72685051 176.92715454]
[-31.66490746 184.51705933]
[-44.60296249 192.10697937]
[-47.03296661 207.55459595]
[-58.85788727 217.78715515]
[-74.49436951 217.97314453]
[-86.55933380 208.02473450]
[-89.35607147 192.63928223]
[-81.56406403 179.08131409]
[-66.86244202 173.75248718]
[-52.19287109 179.16891479]
[-39.25481415 171.57901001]
[-26.31675911 163.98910522]
[-13.37870312 156.39918518]
[-0.44064716 148.80928040]
[12.49740887 141.21937561]
[25.43546486 133.62947083]
[38.37351990 126.03955841]
[42.57867432 119.90259552]
[51.66063309 118.42955017]
[64.75378418 111.11044312]
[65.73088074 86.16652679]
[82.34416962 67.53449249]
[107.01339722 63.71570969]
[112.78966522 49.87248993]
[115.58199310 35.13468552]
[115.26993561 20.13793182]
[114.95787811 5.14117813]
[114.64582062 -9.85557556]
[112.17485809 -13.60468483]
[111.16890717 -17.54919052]
[111.50388336 -21.19194603]
[112.90328217 -24.13059425]
[114.98384094 -26.10001373]
[115.91947174 -41.07080460]
[116.85509491 -56.04159546]
[117.79072571 -71.01239014]
[105.98595428 -83.88035583]
[107.08589935 -100.97053528]
[119.92763519 -111.78477478]
[120.55161285 -126.77178955]
[121.17559052 -141.75880432]
[121.79956818 -156.74581909]
[107.17311096 -160.28884888]
[93.51904297 -166.61756897]
[81.36217499 -175.48869324]
[71.16979980 -186.56124878]
[63.33367157 -199.40965271]
[58.15500259 -213.54002380]
[55.83283615 -228.40925598]
[56.45643616 -243.44578552]
[60.00183487 -258.07165527]
[66.33274841 -271.72470093]
[75.20584869 -283.88012695]
[86.28005981 -294.07073975]
[99.12972260 -301.90478516]
[113.26094055 -307.08114624]
[128.13053894 -309.40090942]
[143.16697693 -308.77487183]
[157.79228210 -305.22711182]
[171.44430542 -298.89398193]
[183.59829712 -290.01892090]
[193.78709412 -278.94305420]
[201.61904907 -266.09213257]
[206.79315186 -251.96008301]
[209.11050415 -237.09010315]
[208.48204041 -222.05377197]
[204.93190002 -207.42904663]
[198.59657288 -193.77804565]
[189.71954346 -181.62548828]
[178.64202881 -171.43849182]
[165.78982544 -163.60859680]
[151.65693665 -158.43679810]
[136.78659058 -156.12184143]
[136.16261292 -141.13482666]
[135.53863525 -126.14781189]
[134.91465759 -111.16079712]
[144.90321350 -102.96167755]
[148.37800598 -90.31256104]
[143.84722900 -77.79457092]
[132.76152039 -70.07675934]
[131.82589722 -55.10596848]
[130.89025879 -40.13517761]
[129.95463562 -25.16438484]
[129.64257812 -10.16763210]
[129.95463562 4.82912207]
[130.26669312 19.82587624]
[130.57875061 34.82262802]
[138.11083984 21.85082817]
[148.93727112 11.46871376]
[162.21315002 4.48651457]
[176.90240479 1.44912863]
[191.85867310 2.59359527]
[205.91477966 7.83059978]
[217.97373962 16.75144196]
[227.09448242 28.65993118]
[232.56520081 42.62671661]
[233.95896912 57.56182480]
[231.16702271 72.29969788]
[224.40722656 85.69019318]
[214.20713806 96.68828583]
[201.36277771 104.43569183]
[186.87652588 108.32779694]
[171.87889099 108.06084442]
[157.54032898 103.65567780]
[144.97981262 95.45607758]
[135.17758179 84.10194397]
[128.89860535 70.47937012]
[126.63288116 55.64876556]
[120.85661316 69.49198151]
[125.97656250 73.71395874]
[130.25888062 78.78354645]
[133.56547546 84.53727722]
[135.78974915 90.78960419]
[136.85995483 97.33892822]
[136.74159241 103.97406006]
[135.43847656 110.48104095]
[132.99261475 116.65006256]
[129.48289490 122.28218842]
[125.02249146 127.19581604]
[119.75521851 131.23249817]
[113.85092163 134.26206970]
[107.50000000 136.18684387]
[107.50000000 151.18684387]
[107.50000000 166.18684387]
[107.50000000 181.18684387]
[107.50000000 196.18684387]
[107.50000000 211.18684387]
[107.50000000 226.18684387]
[107.50000000 241.18684387]
[107.50000000 256.18682861]
[107.50000000 271.18682861]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 39]
[13 38]
[14 36]
[15 35]
[16 34]
[17 33]
[18 32]
[19 31]
[20 30]
[21 29]
[42 128]
[43 127]
[44 106]
[45 105]
[46 104]
[47 103]
[52 102]
[53 101]
[54 100]
[55 99]
[58 95]
[59 94]
[60 93]
[61 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
