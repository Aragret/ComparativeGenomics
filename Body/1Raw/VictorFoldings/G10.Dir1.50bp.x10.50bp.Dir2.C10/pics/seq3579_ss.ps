%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACCCCCCUCCCCAUACCCAACCCCCUGGUCAACCUCAACCUAGGCCUCCUAUUUAUUCUxxxxxxxxxxGGAUUUCUCAUUACUAACAACAUUUCCCCCGCAUCCCCCUUCCAAACAACAAUCCCCCUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-7.52749252 312.80651855]
[-14.71000099 325.97509766]
[-21.89250946 339.14367676]
[-29.07501984 352.31225586]
[-36.25752640 365.48083496]
[-43.44003677 378.64941406]
[-50.62254715 391.81799316]
[-57.80505371 404.98660278]
[-64.98756409 418.15518188]
[-72.17007446 431.32376099]
[-74.44627380 448.12420654]
[-91.22026825 450.58779907]
[-98.23108673 435.15130615]
[-85.33865356 424.14123535]
[-78.15614319 410.97265625]
[-70.97364044 397.80407715]
[-63.79113007 384.63549805]
[-56.60861969 371.46691895]
[-49.42610931 358.29833984]
[-42.24360275 345.12976074]
[-35.06109238 331.96118164]
[-27.87858391 318.79257202]
[-20.69607544 305.62399292]
[-42.38390350 291.24746704]
[-62.37599945 274.59326172]
[-80.43425751 255.85971069]
[-96.34362030 235.26994324]
[-109.91460419 213.06915283]
[-120.98558044 189.52175903]
[-129.42471313 164.90818787]
[-135.13148499 139.52159119]
[-138.03793335 113.66431427]
[-138.10945129 87.64429474]
[-135.34516907 61.77142334]
[-129.77801514 36.35384369]
[-144.10061646 31.89702606]
[-158.42321777 27.44021034]
[-172.79139709 23.13262558]
[-187.20361328 18.97473907]
[-201.61582947 14.81685162]
[-213.77569580 24.45621109]
[-229.28048706 25.07358551]
[-242.16828918 16.43158531]
[-247.48348999 1.85323310]
[-243.18226624 -13.05579662]
[-230.91854858 -22.56267738]
[-215.40797424 -23.01181984]
[-202.61468506 -14.23051929]
[-197.45794678 0.40463507]
[-183.04573059 4.56252241]
[-168.63351440 8.72041035]
[-161.28749084 7.54503775]
[-153.96640015 13.11761284]
[-139.64379883 17.57442856]
[-125.32120514 22.03124428]
[-121.14544678 10.87389183]
[-116.41760254 -0.06095727]
[-111.14945984 -10.74600315]
[-105.35418701 -21.15456963]
[-99.04624939 -31.26067352]
[-92.24138641 -41.03908539]
[-84.95658875 -50.46538925]
[-77.21004486 -59.51605606]
[-69.02109528 -68.16848755]
[-60.41018677 -76.40109253]
[-51.39881134 -84.19330597]
[-42.00946808 -91.52567291]
[-32.26559448 -98.37989807]
[-22.19152069 -104.73886871]
[-11.81239319 -110.58670807]
[-1.15412545 -115.90881348]
[9.75667477 -120.69190216]
[20.89276695 -124.92402649]
[32.22635269 -128.59463501]
[43.72913361 -131.69454956]
[55.37239838 -134.21603394]
[67.12707520 -136.15280151]
[78.96382141 -137.50000000]
[90.85308075 -138.25428772]
[102.76517487 -138.41377258]
[114.67037201 -137.97805786]
[126.53894043 -136.94821167]
[138.34124756 -135.32684326]
[150.04785156 -133.11796570]
[161.62950134 -130.32711792]
[173.05728149 -126.96124268]
[184.30268860 -123.02876282]
[195.33763123 -118.53948975]
[206.13455200 -113.50463104]
[216.66651917 -107.93675995]
[226.90722656 -101.84976959]
[236.83110046 -95.25885773]
[246.41339111 -88.18048096]
[255.63014221 -80.63230896]
[264.45837402 -72.63319397]
[272.87600708 -64.20309448]
[280.86209106 -55.36305618]
[288.39663696 -46.13515472]
[295.46084595 -36.54242706]
[302.03707886 -26.60881996]
[308.10891724 -16.35913277]
[313.66122437 -5.81895399]
[318.68014526 4.98540354]
[323.15310669 16.02696609]
[327.06893921 27.27816582]
[330.41793823 38.71091843]
[333.19165039 50.29668045]
[335.38323975 62.00652695]
[336.98718262 73.81121826]
[337.99948120 85.68129730]
[338.41760254 97.58712006]
[338.24050903 109.49897003]
[337.46865845 121.38710785]
[336.10397339 133.22184753]
[334.14984131 144.97364807]
[331.61114502 156.61317444]
[328.49423218 168.11135864]
[324.80688477 179.43951416]
[320.55831909 190.56933594]
[315.75909424 201.47305298]
[310.42126465 212.12344360]
[304.55807495 222.49392700]
[298.18423462 232.55859375]
[291.31561279 242.29232788]
[283.96939087 251.67082214]
[276.16387939 260.67068481]
[267.91854858 269.26940918]
[259.25402832 277.44555664]
[250.19192505 285.17871094]
[240.75486755 292.44958496]
[230.96640015 299.23999023]
[220.85099792 305.53298950]
[210.43386841 311.31286621]
[199.74105835 316.56521606]
[188.79922485 321.27691650]
[177.63572693 325.43615723]
[166.27839661 329.03262329]
[154.75559998 332.05731201]
[143.09609985 334.50265503]
[131.32902527 336.36257935]
[119.48372650 337.63238525]
[107.58979034 338.30899048]
[95.67691040 338.39062500]
[83.77481842 337.87710571]
[71.91323090 336.76974487]
[60.12176514 335.07125854]
[48.42985535 332.78594971]
[36.86669159 329.91946411]
[25.46113777 326.47897339]
[14.24167347 322.47311401]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 23]
[2 22]
[3 21]
[4 20]
[5 19]
[6 18]
[7 17]
[8 16]
[9 15]
[10 14]
[35 55]
[36 54]
[37 53]
[38 51]
[39 50]
[40 49]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
