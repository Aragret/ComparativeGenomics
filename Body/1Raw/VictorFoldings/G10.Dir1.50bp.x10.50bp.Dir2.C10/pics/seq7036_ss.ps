%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACUUCCACUAUGUCCUAUCAAUAGGAGCUGUAUUUGCCAUCAUAGGAGGCUUCAUUCACUGxxxxxxxxxxUCCUAUAUAUCUUAAUGGCACAUGCAGCGCAAGUAGGUCUACAAGACGCUACUUCCCCUAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[71.22079468 264.05813599]
[71.22079468 249.05815125]
[71.22079468 234.05815125]
[71.22079468 219.05815125]
[71.22079468 204.05815125]
[71.22079468 189.05815125]
[71.22079468 174.05815125]
[71.22079468 159.05815125]
[71.22079468 144.05815125]
[71.22079468 129.05815125]
[74.65567017 103.46568298]
[91.08576965 94.91474915]
[83.98936462 81.69956207]
[79.44165039 78.89358521]
[76.73595428 74.99681091]
[75.97753143 70.91093445]
[76.89149475 67.44511414]
[70.62208557 53.81813812]
[64.35268402 40.19115829]
[57.88310623 33.65354538]
[58.09765625 26.21942329]
[52.10935974 12.46659470]
[38.29577637 6.61980629]
[24.25380135 11.89454842]
[10.21182537 17.16928864]
[-3.83015156 22.44403076]
[-17.87212753 27.71877289]
[-27.86005592 40.72543716]
[-44.08049393 38.31101227]
[-49.84724426 22.95924759]
[-39.22797012 10.46272659]
[-23.14686966 13.67679596]
[-9.10489273 8.40205479]
[4.93708324 3.12731314]
[18.97905922 -2.14742851]
[33.02103806 -7.42217016]
[40.65400696 -20.33486748]
[38.50542831 -35.18019104]
[36.35684967 -50.02551270]
[34.20826721 -64.87083435]
[32.05968857 -79.71615601]
[29.91110992 -94.56148529]
[27.76253128 -109.40680695]
[18.12829971 -121.95639038]
[23.96277809 -135.66070557]
[21.81419754 -150.50602722]
[19.66561890 -165.35134888]
[17.51704025 -180.19667053]
[15.36846066 -195.04199219]
[13.21988201 -209.88731384]
[-8.15437222 -211.16856384]
[-24.26723480 -236.45559692]
[-28.52008057 -250.84007263]
[-32.77292633 -265.22454834]
[-37.02577591 -279.60903931]
[-41.27862167 -293.99353027]
[-45.53146744 -308.37799072]
[-60.59052658 -307.67929077]
[-75.37907410 -310.60543823]
[-89.03731537 -316.98632812]
[-100.77118683 -326.45098877]
[-109.89849854 -338.44915771]
[-115.88859558 -352.28323364]
[-118.39321899 -367.14898682]
[-117.26675415 -382.18209839]
[-112.57469940 -396.50857544]
[-104.58983612 -409.29550171]
[-93.77639771 -419.79946899]
[-80.76306152 -427.40975952]
[-66.30641174 -431.68392944]
[-51.24693298 -432.37350464]
[-36.46016312 -429.43838501]
[-22.80578995 -423.04922485]
[-11.07765770 -413.57745361]
[-1.95762479 -401.57376099]
[4.02408123 -387.73605347]
[6.51969194 -372.86880493]
[5.38411570 -357.83636475]
[0.68337399 -343.51272583]
[-7.30923843 -330.73065186]
[-18.12904167 -320.23324585]
[-31.14698792 -312.63085938]
[-26.89414024 -298.24636841]
[-22.64129448 -283.86187744]
[-18.38844681 -269.47741699]
[-14.13560009 -255.09292603]
[-9.88275337 -240.70845032]
[-2.49669552 -239.40608215]
[19.66147804 -235.49899292]
[28.57762909 -247.56143188]
[33.13033295 -263.89266968]
[50.08364868 -264.03881836]
[54.91723633 -247.78851318]
[40.64006042 -238.64527893]
[31.72391129 -226.58285522]
[28.06520462 -212.03588867]
[30.21378326 -197.19056702]
[32.36236191 -182.34524536]
[34.51094055 -167.49992371]
[36.65951920 -152.65460205]
[38.80810165 -137.80928040]
[48.28865051 -126.32153320]
[42.60785294 -111.55538177]
[44.75643158 -96.71006012]
[46.90501404 -81.86473846]
[49.05359268 -67.01941681]
[51.20217133 -52.17409134]
[53.35074997 -37.32876968]
[55.49932861 -22.48344612]
[69.02498627 -11.44936848]
[65.86219025 6.47829771]
[71.85048676 20.23112679]
[77.97966003 33.92175293]
[84.24906158 47.54873276]
[90.51847076 61.17570877]
[97.20454407 74.60315704]
[104.30094910 87.81834412]
[115.69202423 97.57761383]
[129.83934021 102.56294250]
[143.98664856 107.54826355]
[158.13397217 112.53358459]
[175.08224487 112.09516144]
[180.19528198 128.25973511]
[166.07786560 137.64775085]
[153.14865112 126.68090057]
[139.00132751 121.69557953]
[124.85401917 116.71025848]
[110.70670319 111.72493744]
[104.58522034 116.05823517]
[114.61057281 127.21585083]
[124.63591766 138.37347412]
[134.66127014 149.53108215]
[148.60421753 155.06227112]
[155.49307251 168.38682556]
[151.94470215 182.96109009]
[139.70172119 191.62767029]
[124.77664185 190.13041687]
[114.49913025 179.20463562]
[113.91641998 164.21606445]
[106.72503662 151.05232239]
[99.53365326 137.88858032]
[92.34226990 124.72484589]
[86.22079468 129.05815125]
[86.22079468 144.05815125]
[86.22079468 159.05815125]
[86.22079468 174.05815125]
[86.22079468 189.05815125]
[86.22079468 204.05815125]
[86.22079468 219.05815125]
[86.22079468 234.05815125]
[86.22079468 249.05815125]
[86.22079468 264.05813599]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[12 117]
[13 116]
[17 115]
[18 114]
[19 113]
[21 112]
[22 111]
[23 36]
[24 35]
[25 34]
[26 33]
[27 32]
[37 109]
[38 108]
[39 107]
[40 106]
[41 105]
[42 104]
[43 103]
[45 101]
[46 100]
[47 99]
[48 98]
[49 97]
[50 96]
[52 87]
[53 86]
[54 85]
[55 84]
[56 83]
[57 82]
[89 95]
[90 94]
[118 128]
[119 127]
[120 126]
[121 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
