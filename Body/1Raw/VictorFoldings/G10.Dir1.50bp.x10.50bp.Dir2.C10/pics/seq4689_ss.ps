%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACACUCAUCACAGCGCUAAGCUCGCACUGAUUUUUUACCUGAGUAGGCCUAGAAAUAAACxxxxxxxxxxUUCAACAAUAUACUCUCCGGACAAUGAACCAUAACCAAUACUACCAAUCAAUACUCAUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[99.81925201 276.07046509]
[99.81925201 261.07046509]
[99.81925201 246.07048035]
[99.81925201 231.07048035]
[99.81925201 216.07048035]
[99.81925201 201.07048035]
[99.81925201 186.07048035]
[99.81925201 171.07048035]
[99.81925201 156.07048035]
[99.81925201 141.07048035]
[85.71451569 135.03913879]
[75.91190338 124.84883118]
[71.32788086 112.74286652]
[56.56182098 115.38172913]
[41.79576874 118.02059174]
[27.02971077 120.65945435]
[12.26365662 123.29832458]
[-2.19103217 127.30606079]
[-16.20774460 132.64756775]
[-30.22445869 137.98908997]
[-36.74821854 152.13398743]
[-51.03925323 157.35136414]
[-64.48405457 151.04478455]
[-78.50076294 156.38630676]
[-92.51747894 161.72781372]
[-97.47317505 176.55937195]
[-110.82996368 184.69142151]
[-126.28115845 182.28428650]
[-136.53120422 170.47450256]
[-136.74031067 154.83831787]
[-126.80977631 142.75865173]
[-111.42847443 139.93914795]
[-97.85899353 147.71110535]
[-83.84227753 142.36958313]
[-69.82556152 137.02807617]
[-63.98770142 123.37322998]
[-49.84885025 117.75650024]
[-35.56597137 123.97237396]
[-21.54925728 118.63085938]
[-7.53254461 113.28934479]
[-21.64768028 108.21362305]
[-30.89513588 96.40326691]
[-32.43698502 81.48271942]
[-25.80005455 68.03091431]
[-13.02113342 60.17602921]
[1.97808993 60.32863617]
[14.59454536 68.44190216]
[20.95640373 82.02596283]
[19.11129189 96.91204834]
[9.62479210 108.53226471]
[24.39084816 105.89340210]
[39.15690231 103.25453949]
[53.92295837 100.61566925]
[68.68901062 97.97680664]
[77.47013855 78.16249847]
[97.00080109 68.76738739]
[91.34812927 53.99045181]
[100.85053253 42.52077103]
[103.02736664 27.67956734]
[95.82294464 10.76578045]
[107.16510773 -2.58919406]
[109.03271484 -17.47247314]
[110.90032959 -32.35575485]
[103.34559631 -49.11600113]
[114.40747070 -62.70404434]
[115.96504974 -77.62295532]
[117.52262878 -92.54187012]
[103.48307037 -98.09103394]
[91.46196747 -107.22315979]
[82.35138702 -119.26059723]
[76.82738495 -133.31007385]
[75.29988098 -148.32904053]
[77.88221741 -163.20298767]
[84.38278198 -176.82815552]
[94.31918335 -188.19348145]
[106.95407104 -196.45556641]
[121.34986115 -201.00132751]
[136.43827820 -201.49342346]
[151.09967041 -197.89535522]
[164.24606323 -190.47410583]
[174.90190125 -179.78039551]
[182.27647400 -166.60774231]
[185.82250977 -151.93368530]
[185.27687073 -136.84710693]
[180.68006897 -122.46753693]
[172.37319946 -109.86203766]
[160.97270203 -99.96602631]
[147.32455444 -93.51383972]
[132.44154358 -90.98429108]
[130.88395691 -76.06537628]
[129.32638550 -61.14646530]
[136.71502686 -51.51759338]
[135.49702454 -39.03819275]
[125.78361511 -30.48814011]
[123.91600037 -15.60486126]
[122.04838562 -0.72158098]
[129.23512268 9.05891800]
[127.75775909 21.51027870]
[117.86857605 29.85640335]
[115.69173431 44.69760895]
[121.50011444 58.41300201]
[111.84201050 70.94422913]
[125.74932861 76.87700653]
[136.36953735 89.55620575]
[140.46173096 107.04737091]
[155.22778320 109.68623352]
[169.99383545 112.32509613]
[176.72061157 98.80004120]
[186.98637390 87.71893311]
[199.95890808 79.98007202]
[214.58659363 76.21080780]
[229.68363953 76.71670532]
[244.02618408 81.45674133]
[256.45156860 90.04667664]
[265.95248413 101.79016113]
[271.75872803 115.73519135]
[273.39965820 130.75131226]
[270.74224854 145.62124634]
[264.00189209 159.13954163]
[253.72499084 170.21032715]
[240.74468994 177.93615723]
[226.11322021 181.69071960]
[211.01669312 181.16966248]
[196.67890930 176.41520691]
[184.26219177 167.81278992]
[174.77307129 156.05978394]
[168.98081970 142.10891724]
[167.35498047 127.09115601]
[152.58891296 124.45228577]
[137.82286072 121.81342316]
[132.07196045 126.62768555]
[143.76525879 136.02273560]
[158.44369507 139.11198425]
[167.13031006 151.34075928]
[165.21417236 166.21786499]
[153.71237183 175.84638977]
[138.73019409 175.11541748]
[128.22033691 164.41294861]
[127.76154327 149.41995239]
[120.57015991 136.25621033]
[114.81925201 141.07048035]
[114.81925201 156.07048035]
[114.81925201 171.07048035]
[114.81925201 186.07048035]
[114.81925201 201.07048035]
[114.81925201 216.07048035]
[114.81925201 231.07048035]
[114.81925201 246.07048035]
[114.81925201 261.07046509]
[114.81925201 276.07046509]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[13 54]
[14 53]
[15 52]
[16 51]
[17 50]
[18 40]
[19 39]
[20 38]
[23 35]
[24 34]
[25 33]
[56 102]
[58 100]
[59 99]
[61 96]
[62 95]
[63 94]
[65 91]
[66 90]
[67 89]
[105 130]
[106 129]
[107 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
