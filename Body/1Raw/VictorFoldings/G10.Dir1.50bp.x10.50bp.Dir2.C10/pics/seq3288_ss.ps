%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCCUACUCCUCAUUGUACCCAUUCUAAUCGCAAUGGCAUUCCUAAUGCUUACCGAACGAAAAxxxxxxxxxxCCUUUUCCUCCGACCCCCUAACAACCCCCCUCCUAAUACUAACUACCUGACUCCUACCCCUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[210.59996033 197.76620483]
[199.22804260 187.98460388]
[187.85614014 178.20300293]
[176.48423767 168.42140198]
[165.11233521 158.63978577]
[153.74041748 148.85818481]
[141.71189880 139.89634705]
[129.08572388 131.79821777]
[116.45954895 123.70008850]
[103.83337402 115.60195923]
[114.65159607 125.99263000]
[119.66445160 140.13021851]
[117.80829620 155.01492310]
[109.47696686 167.48846436]
[96.43825531 174.90411377]
[81.45877075 175.68840027]
[67.71694183 169.67491150]
[58.12856674 158.13961792]
[54.72816467 143.53012085]
[58.23724365 128.94635010]
[67.91123199 117.48275757]
[81.69725800 111.57176971]
[67.02712250 114.70023346]
[52.35699463 117.82869720]
[37.68686295 120.95715332]
[23.01673508 124.08561707]
[8.34660339 127.21408081]
[5.23156595 142.12100220]
[-3.68261981 154.46835327]
[-16.85151672 162.11688232]
[-31.99353600 163.74143982]
[-46.48522949 159.06054688]
[-57.81582260 148.88520813]
[-64.02222443 134.97836304]
[-64.02913666 119.74945068]
[-57.83536148 105.83696747]
[-46.51400757 95.65135193]
[-32.02656937 90.95730591]
[-16.88308144 92.56811523]
[-3.70724750 100.20468903]
[5.21814251 112.54394531]
[19.88827324 109.41548920]
[34.55840302 106.28702545]
[49.22853470 103.15856171]
[63.89866638 100.03010559]
[78.56879425 96.90164185]
[81.10780334 82.11808777]
[68.32212830 74.27421570]
[55.53644562 66.43033600]
[42.75076675 58.58646393]
[29.96508408 50.74258804]
[13.30236340 47.61367798]
[11.69629288 30.73597717]
[27.46980476 24.52045822]
[37.80895996 37.95690918]
[50.59463882 45.80078125]
[63.38032150 53.64465714]
[76.16600037 61.48853302]
[88.95168304 69.33241272]
[95.56829834 65.80107117]
[88.50584412 52.56771469]
[101.73931122 45.50547791]
[108.80153656 58.73839188]
[115.41815948 55.20705414]
[116.01830292 40.21906662]
[104.00975800 30.57017708]
[100.03188324 15.87222099]
[105.40785980 1.81651604]
[117.88025665 -6.28145933]
[118.48040009 -21.26944923]
[119.08055115 -36.25743866]
[119.68069458 -51.24542618]
[120.28083801 -66.23341370]
[106.78109741 -73.35520172]
[97.71518707 -85.63412476]
[94.88314819 -100.63220215]
[98.84728241 -115.37155151]
[108.82051086 -126.92566681]
[122.82263947 -133.00045776]
[138.07353210 -132.38978577]
[151.54512024 -125.21489716]
[160.56260681 -112.90036774]
[163.33555603 -97.89125824]
[159.31341553 -83.16763306]
[149.29476929 -71.65288544]
[135.26882935 -65.63327026]
[134.66868591 -50.64528275]
[134.06854248 -35.65729523]
[133.46839905 -20.66930389]
[132.86825562 -5.68131542]
[144.65324402 3.38796663]
[148.88818359 17.82851028]
[143.74786377 32.16135788]
[131.00628662 40.81921005]
[130.40614319 55.80719757]
[130.83467102 88.32809448]
[111.93150330 102.97578430]
[124.55767822 111.07391357]
[137.18385315 119.17205048]
[149.81002808 127.27017975]
[146.93229675 112.54881287]
[154.04261780 99.34111023]
[167.91598511 93.63762665]
[182.25991821 98.02526855]
[190.56852722 110.51394653]
[189.07328796 125.43923950]
[178.45242310 136.03153992]
[163.52201843 137.48628235]
[174.89393616 147.26788330]
[186.26583862 157.04948425]
[197.63774109 166.83108521]
[209.00964355 176.61270142]
[220.38156128 186.39430237]
[231.63731384 176.44332886]
[244.14324951 168.11775208]
[257.66641235 161.57269287]
[271.95486450 156.93005371]
[286.74240112 154.27633667]
[301.75357056 153.66098022]
[316.70870972 155.09544373]
[331.32919312 158.55300903]
[345.34271240 163.96926880]
[358.48812866 171.24330139]
[370.52059937 180.23960876]
[381.21594238 190.79060364]
[390.37490845 202.69970703]
[397.82690430 215.74507141]
[403.43307495 229.68368530]
[407.08898926 244.25584412]
[408.72653198 259.19009399]
[408.31518555 274.20825195]
[405.86267090 289.03048706]
[401.41461182 303.38070679]
[395.05389404 316.99154663]
[386.89904785 329.60946655]
[377.10192871 340.99938965]
[365.84509277 350.94915771]
[353.33825684 359.27337646]
[339.81439209 365.81695557]
[325.52545166 370.45806885]
[310.73760986 373.11016846]
[295.72637939 373.72390747]
[280.77139282 372.28781128]
[266.15127563 368.82867432]
[252.13836670 363.41091919]
[238.99372864 356.13543701]
[226.96223450 347.13784790]
[216.26803589 336.58569336]
[207.11035156 324.67559814]
[199.65977478 311.62942505]
[194.05511475 297.69021606]
[190.40077209 283.11764526]
[188.76484680 268.18319702]
[189.17779541 253.16510010]
[191.63192749 238.34312439]
[196.08154297 223.99339294]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 113]
[2 112]
[3 111]
[4 110]
[5 109]
[6 108]
[7 100]
[8 99]
[9 98]
[10 97]
[22 46]
[23 45]
[24 44]
[25 43]
[26 42]
[27 41]
[47 59]
[48 58]
[49 57]
[50 56]
[51 55]
[64 95]
[65 94]
[69 90]
[70 89]
[71 88]
[72 87]
[73 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
