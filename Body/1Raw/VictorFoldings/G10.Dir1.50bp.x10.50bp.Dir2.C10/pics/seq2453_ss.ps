%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACUCCUCACACCCAAUUGGACCAAUCUAUCACCCUAUAGAAGAACUAAUGUUAGUAUAAGUAACxxxxxxxxxxUCAAUAGUACUUGCCGCAGUACUCUUAAAACUAGGCGGCUAUGGUAUAAUACGCCUCACACUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 535.67950439]
[92.50000000 520.67950439]
[92.50000000 505.67950439]
[92.50000000 490.67950439]
[92.50000000 475.67950439]
[92.50000000 460.67950439]
[92.50000000 445.67950439]
[92.50000000 430.67950439]
[92.50000000 415.67950439]
[92.50000000 400.67950439]
[77.80443573 397.77874756]
[63.95278549 392.06475830]
[51.47812653 383.75543213]
[40.86095047 373.16857910]
[32.51063156 360.70977783]
[26.74966240 346.85681152]
[23.80118752 332.14135742]
[23.78036499 317.12866211]
[26.68986511 302.39566040]
[32.41970444 288.50900269]
[40.75139618 276.00311279]
[51.36627960 265.35968018]
[63.85771179 256.98907471]
[77.74665070 251.21455383]
[92.50000000 248.25981140]
[92.50000000 233.25981140]
[92.50000000 218.25981140]
[92.50000000 203.25981140]
[84.76270294 190.53254700]
[92.50000000 176.73237610]
[92.50000000 161.73237610]
[92.50000000 146.73237610]
[92.50000000 131.73237610]
[73.73082733 127.70043182]
[58.02133560 112.30417633]
[43.10982132 110.67730713]
[28.19830513 109.05044556]
[13.28678894 107.42357635]
[-1.62472665 105.79671478]
[-13.78766632 115.88821411]
[-29.51597214 114.34032440]
[-39.47831726 102.07136536]
[-37.76422119 86.36030579]
[-25.39062500 76.52823639]
[-9.69856453 78.40834045]
[0.00213848 90.88519287]
[14.91365433 92.51206207]
[29.82517052 94.13892365]
[44.73668671 95.76579285]
[59.64820099 97.39265442]
[62.87369156 90.62167358]
[54.37146759 78.26399231]
[69.32466888 77.07970428]
[72.55015564 70.30872345]
[61.89129257 59.75464249]
[51.23242950 49.20056152]
[40.57356644 38.64648056]
[24.58360863 35.00597000]
[20.00058174 19.26024246]
[31.53911018 7.60715580]
[47.32934189 12.03440571]
[51.12764359 27.98761749]
[61.78651047 38.54169846]
[72.44537354 49.09577560]
[83.10424042 59.64985657]
[90.33766937 59.16798401]
[97.26313019 59.91870880]
[103.68003845 61.78721619]
[105.15951538 46.86035538]
[106.63898468 31.93349648]
[108.11846161 17.00663567]
[109.59793854 2.07977605]
[95.65732574 -3.76408839]
[84.05963135 -13.45867157]
[75.83612061 -26.14193726]
[71.71800995 -40.68609619]
[72.07148743 -55.79789734]
[76.86512756 -70.13359833]
[85.67266846 -82.41849518]
[97.71096039 -91.56021118]
[111.90956116 -96.74587250]
[127.00595093 -97.51437378]
[141.65774536 -93.79737854]
[154.56214905 -85.92540741]
[164.57168579 -74.59842682]
[170.79632568 -60.82361984]
[172.68257141 -45.82584000]
[170.06271362 -30.93867302]
[163.16969299 -17.48587990]
[152.61643982 -6.66367149]
[139.34133911 0.56564689]
[124.52479553 3.55925012]
[123.04531860 18.48611069]
[121.56584930 33.41297150]
[120.08637238 48.33983231]
[118.60690308 63.26668930]
[130.52972412 72.36869049]
[144.53872681 67.00701141]
[158.54774475 61.64532852]
[172.55674744 56.28364563]
[186.56575012 50.92196655]
[200.46609497 45.28454971]
[214.25234985 39.37360764]
[228.03860474 33.46266174]
[230.48861694 18.23108482]
[240.80152893 6.75730896]
[255.68650818 2.70257592]
[270.39382935 7.36073542]
[280.23040771 19.24538612]
[282.05746460 34.56417847]
[275.29199219 48.42894363]
[262.09280396 56.41548157]
[246.67170715 55.97532272]
[233.94955444 47.24891281]
[220.16329956 53.15985870]
[206.37704468 59.07080460]
[203.78894043 63.14218140]
[198.59136963 65.60180664]
[191.92744446 64.93097687]
[177.91842651 70.29265594]
[163.90942383 75.65434265]
[149.90040588 81.01602173]
[135.89140320 86.37770081]
[135.70288086 107.40115356]
[124.75515747 124.07902527]
[107.50000000 131.73237610]
[107.50000000 146.73237610]
[107.50000000 161.73237610]
[107.50000000 176.73237610]
[115.23729706 190.53254700]
[107.50000000 203.25981140]
[107.50000000 218.25981140]
[107.50000000 233.25981140]
[107.50000000 248.25981140]
[122.25334930 251.21455383]
[136.14228821 256.98907471]
[148.63372803 265.35968018]
[159.24861145 276.00311279]
[167.58029175 288.50900269]
[173.31013489 302.39566040]
[176.21963501 317.12866211]
[176.19880676 332.14135742]
[173.25033569 346.85681152]
[167.48936462 360.70977783]
[159.13905334 373.16857910]
[148.52186584 383.75543213]
[136.04721069 392.06475830]
[122.19556427 397.77874756]
[107.50000000 400.67950439]
[107.50000000 415.67950439]
[107.50000000 430.67950439]
[107.50000000 445.67950439]
[107.50000000 460.67950439]
[107.50000000 475.67950439]
[107.50000000 490.67950439]
[107.50000000 505.67950439]
[107.50000000 520.67950439]
[107.50000000 535.67950439]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 158]
[2 157]
[3 156]
[4 155]
[5 154]
[6 153]
[7 152]
[8 151]
[9 150]
[10 149]
[25 134]
[26 133]
[27 132]
[28 131]
[30 129]
[31 128]
[32 127]
[33 126]
[35 50]
[36 49]
[37 48]
[38 47]
[39 46]
[54 65]
[55 64]
[56 63]
[57 62]
[68 96]
[69 95]
[70 94]
[71 93]
[72 92]
[97 123]
[98 122]
[99 121]
[100 120]
[101 119]
[102 116]
[103 115]
[104 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
