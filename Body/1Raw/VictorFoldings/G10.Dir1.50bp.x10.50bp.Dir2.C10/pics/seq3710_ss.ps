%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUUUAUUCUAGCCACCUCUAGCCUAGCCGUUUACUCAAUCCUCUGAUCAGGGUGAGCAUCxxxxxxxxxxAUCCUAUACAACCGUAUCGGCGAUAUCGGUUUCAUCCUCGCCUUAGCAUGAUUUAUCCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[73.64403534 527.80529785]
[73.64403534 512.80529785]
[73.64403534 497.80529785]
[73.64403534 482.80529785]
[73.64403534 467.80529785]
[73.64403534 452.80529785]
[73.64403534 437.80529785]
[73.64403534 422.80529785]
[73.64403534 407.80529785]
[73.64403534 392.80529785]
[60.06635284 389.59329224]
[47.54794693 383.41430664]
[36.72824478 374.58004761]
[28.16079712 363.53787231]
[22.28493881 350.84832764]
[19.40327835 337.15649414]
[19.66610527 323.15927124]
[23.06355667 309.56997681]
[29.42594719 297.08190918]
[38.43222809 286.33294678]
[49.62620544 277.87310791]
[62.43961716 272.13626099]
[76.22101593 269.41793823]
[76.84499359 254.43092346]
[66.85643768 246.23181152]
[63.38164520 233.58268738]
[67.91241455 221.06469727]
[78.99813080 213.34689331]
[79.93375397 198.37609863]
[80.86938477 183.40530396]
[79.05022430 181.19216919]
[78.02759552 178.10215759]
[78.14878082 174.44602966]
[79.63802338 170.65747070]
[82.55654907 167.24519348]
[84.73339081 152.40397644]
[78.92501068 138.68858337]
[88.58311462 126.15736389]
[90.75995636 111.31616211]
[85.62746429 125.41075134]
[73.46222687 134.18611145]
[58.46820450 134.60971069]
[45.82693100 126.53517914]
[39.90687180 112.75283813]
[42.75384140 98.02548981]
[53.38400269 87.44250488]
[68.12386322 84.66106415]
[81.88000488 90.64258575]
[69.61763763 82.00347137]
[57.35527039 73.36435699]
[40.98290253 72.42756653]
[33.85068130 57.66059494]
[43.29562378 44.25443649]
[59.60158539 46.00019455]
[65.99438477 61.10198593]
[78.25675964 69.74110413]
[90.51912689 78.38021851]
[94.68589783 84.77577972]
[97.79151154 91.64411163]
[105.51559448 78.78570557]
[113.23968506 65.92730713]
[120.96376801 53.06890106]
[128.68785095 40.21049881]
[136.41194153 27.35209656]
[144.13601685 14.49369431]
[130.85874939 21.47324944]
[116.31349945 25.13869476]
[101.31420898 25.28491020]
[86.70026398 21.90371132]
[73.28945923 15.18431473]
[61.83227158 5.50273943]
[52.96985626 -6.59922695]
[47.19815826 -20.44435310]
[44.84016037 -35.25785446]
[46.02782440 -50.21076202]
[50.69468307 -64.46630096]
[58.57957840 -77.22673035]
[69.24127197 -87.77795410]
[82.08311462 -95.52953339]
[96.38648224 -100.04767609]
[111.35095215 -101.07955170]
[126.13909149 -98.56741333]
[139.92335510 -92.65184784]
[151.93237305 -83.66387939]
[161.49411011 -72.10649109]
[168.07347107 -58.62643433]
[171.30229187 -43.97806549]
[170.99989319 -28.98111343]
[167.18316650 -14.47481728]
[160.06614685 -1.27156734]
[173.00419617 -8.86147594]
[185.94226074 -16.45138359]
[198.88031006 -24.04129219]
[211.81835938 -31.63120079]
[224.67677307 -39.35528564]
[237.45413208 -47.21271133]
[250.23149109 -55.07013702]
[263.00885010 -62.92756271]
[273.33374023 -76.37496948]
[289.11383057 -70.17617035]
[287.52566528 -53.29677582]
[270.86627197 -50.15020370]
[258.08889771 -42.29277802]
[245.31155396 -34.43535233]
[232.53419495 -26.57792854]
[228.45762634 -20.35480881]
[219.40827942 -18.69314384]
[206.47021484 -11.10323620]
[193.53216553 -3.51332784]
[180.59410095 4.07658052]
[167.65605164 11.66648865]
[156.99443054 22.21777916]
[149.27033997 35.07617950]
[141.54624939 47.93458176]
[133.82217407 60.79298782]
[126.09808350 73.65139008]
[118.37400055 86.50978851]
[110.64991760 99.36819458]
[105.60115814 113.49299622]
[103.42432404 128.33419800]
[109.07699585 143.11112976]
[99.57459259 154.58082581]
[97.39775848 169.42202759]
[95.84017944 184.34094238]
[94.90454865 199.31172180]
[93.96891785 214.28251648]
[105.77369690 227.15048218]
[104.67374420 244.24066162]
[91.83200836 255.05490112]
[91.20803070 270.04193115]
[106.63190460 274.72561646]
[120.32610321 283.20840454]
[131.37457275 294.91635132]
[139.03987122 309.06005859]
[142.81246948 324.68774414]
[142.44453430 340.74945068]
[137.96621704 356.16751099]
[129.68331909 369.90875244]
[118.15637207 381.05395508]
[104.16270447 388.85910034]
[88.64403534 392.80529785]
[88.64403534 407.80529785]
[88.64403534 422.80529785]
[88.64403534 437.80529785]
[88.64403534 452.80529785]
[88.64403534 467.80529785]
[88.64403534 482.80529785]
[88.64403534 497.80529785]
[88.64403534 512.80529785]
[88.64403534 527.80529785]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[23 130]
[24 129]
[28 126]
[29 125]
[30 124]
[35 123]
[36 122]
[38 120]
[39 119]
[48 57]
[49 56]
[50 55]
[59 118]
[60 117]
[61 116]
[62 115]
[63 114]
[64 113]
[65 112]
[90 111]
[91 110]
[92 109]
[93 108]
[94 107]
[95 105]
[96 104]
[97 103]
[98 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
