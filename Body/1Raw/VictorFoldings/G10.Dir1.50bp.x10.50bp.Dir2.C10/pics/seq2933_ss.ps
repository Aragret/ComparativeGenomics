%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAGACUUCACCAGUCAAAGCGAACUACUAUACUCAAUUGAUCCAAUAACUUGACCAACGGxxxxxxxxxxAGGAGGCCUGCCCCCGCUAACCGGCUUUUUGCCCAAAUGGGCCAUUAUCGAAGAAUUCACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[85.24406433 296.74484253]
[85.24406433 281.74484253]
[85.24406433 266.74484253]
[85.24406433 251.74484253]
[85.24406433 236.74484253]
[85.24406433 221.74484253]
[85.24406433 206.74484253]
[85.24406433 191.74484253]
[85.24406433 176.74484253]
[85.24406433 161.74484253]
[83.06723022 146.90362549]
[78.75964355 132.53544617]
[64.22470856 128.82928467]
[53.56307983 139.38056946]
[42.90145493 149.93186951]
[32.23982620 160.48315430]
[30.71886826 176.45394897]
[17.20588493 185.10142517]
[2.06688356 179.79197693]
[-3.08479023 164.59857178]
[5.70278645 151.17626953]
[21.68853760 149.82153320]
[32.35016251 139.27023315]
[43.01179123 128.71894836]
[53.67341614 118.16765594]
[56.92424011 103.52415466]
[51.72882462 89.45263672]
[46.53340912 75.38111877]
[41.33799362 61.30960083]
[36.14257812 47.23807907]
[23.79100800 38.72698975]
[8.79181862 38.88302612]
[1.32115710 52.30259323]
[-11.86664200 60.17517471]
[-27.22412682 60.38308334]
[-40.62021255 52.87039566]
[-48.45141602 39.65798569]
[-48.61118698 24.29992294]
[-41.05654526 10.92745304]
[-27.81965065 3.13770127]
[-12.46116447 3.02607203]
[0.88756001 10.62259293]
[8.63578224 23.88383865]
[23.63496971 23.72780228]
[26.52310753 16.80619240]
[32.29937744 2.96297550]
[35.18751526 -3.95863342]
[24.74770355 -14.72944164]
[14.30789089 -25.50024986]
[0.86662418 -24.16233635]
[-10.71180439 -30.73256874]
[-16.29066849 -42.60483170]
[-14.02683258 -55.32771683]
[-24.24031258 -66.31337738]
[-34.45379257 -77.29904938]
[-50.27959442 -81.59742737]
[-54.20782089 -97.51914215]
[-42.19745255 -108.68529510]
[-26.60372353 -103.60910797]
[-23.46812820 -87.51252747]
[-13.25464725 -76.52686310]
[-3.04116774 -65.54119873]
[13.74698830 -65.66675568]
[25.68896675 -53.39185333]
[25.07869911 -35.94006348]
[35.51851273 -25.16925430]
[45.95832443 -14.39844608]
[60.72438049 -17.03730965]
[66.78739166 -30.75736427]
[72.85040283 -44.47741699]
[60.64799881 -54.23268127]
[51.38105392 -66.79613495]
[45.67199326 -81.31428528]
[43.90178680 -96.80265045]
[46.18452072 -112.21258545]
[52.36006165 -126.50221252]
[62.00528336 -138.70690918]
[74.46305084 -148.00439453]
[88.88697815 -153.77017212]
[104.29895020 -155.61940002]
[119.65544891 -153.43266296]
[125.43172455 -167.27587891]
[131.20799255 -181.11909485]
[131.72735596 -198.06509399]
[148.15486145 -202.25715637]
[156.73066711 -187.63211060]
[145.05120850 -175.34283447]
[139.27493286 -161.49960327]
[133.49867249 -147.65638733]
[145.07250977 -139.03819275]
[154.24320984 -127.88475800]
[160.47019958 -114.84637451]
[163.38468933 -100.68465424]
[162.81152344 -86.22801971]
[158.77975464 -72.32327271]
[151.52108765 -59.78599548]
[141.45668030 -49.35267258]
[129.17266846 -41.63748169]
[115.38600159 -37.09609985]
[100.90265656 -35.99880600]
[86.57045746 -38.41440582]
[80.50744629 -24.69435120]
[74.44443512 -10.97429752]
[50.21409988 42.04266357]
[55.40951538 56.11418533]
[60.60493088 70.18570709]
[65.80034637 84.25722504]
[70.99575806 98.32874298]
[85.88784027 77.20762634]
[109.66599274 77.41906738]
[121.83930206 95.40245056]
[136.70234680 97.42478180]
[151.56539917 99.44712067]
[166.42843628 101.46945190]
[181.39317322 94.76209259]
[194.52398682 104.58624268]
[192.31301880 120.83566284]
[177.03472900 126.79434204]
[164.40611267 116.33249664]
[149.54306030 114.31016541]
[134.68000793 112.28782654]
[119.81696320 110.26549530]
[114.84466553 119.56951141]
[105.45910645 126.24582672]
[93.12782288 128.22785950]
[97.43540955 142.59603882]
[101.82440948 128.25251770]
[111.28565216 116.61272430]
[124.42990875 109.38578796]
[139.32713318 107.63286591]
[153.78990173 111.61135864]
[165.69456482 120.73707581]
[173.29312134 133.67005920]
[175.46983337 148.51127625]
[171.90509033 163.08154297]
[163.12229919 175.24142456]
[150.41110229 183.20542908]
[135.63792419 185.80416870]
[120.97200012 182.65603638]
[108.56678772 174.22332764]
[100.24406433 161.74484253]
[100.24406433 176.74484253]
[100.24406433 191.74484253]
[100.24406433 206.74484253]
[100.24406433 221.74484253]
[100.24406433 236.74484253]
[100.24406433 251.74484253]
[100.24406433 266.74484253]
[100.24406433 281.74484253]
[100.24406433 296.74484253]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 126]
[12 125]
[13 25]
[14 24]
[15 23]
[16 22]
[26 108]
[27 107]
[28 106]
[29 105]
[30 104]
[31 44]
[32 43]
[47 67]
[48 66]
[49 65]
[53 62]
[54 61]
[55 60]
[68 103]
[69 102]
[70 101]
[81 89]
[82 88]
[83 87]
[111 122]
[112 121]
[113 120]
[114 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
