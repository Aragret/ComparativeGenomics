%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACGCCUUCUUCAAAGCCAUACUAUUUAUGUGCUCCGGGUCCAUCAUCCACAACCUUAACAxxxxxxxxxxAACAUACUCGGAUUCUACCCUAGCAUCACACACCGCACAAUCCCCUAUCUAGGCCUUCUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[80.65610504 392.48526001]
[83.24710846 373.27752686]
[83.55916595 358.28079224]
[83.87122345 343.28402710]
[84.18327332 328.28729248]
[84.49533081 313.29052734]
[84.80738831 298.29376221]
[85.11944580 283.29702759]
[85.43150330 268.30026245]
[85.74356079 253.30351257]
[72.08789825 250.00247192]
[59.42258072 243.90808105]
[48.31213379 235.28901672]
[39.25240326 224.52656555]
[32.64842606 212.09779358]
[28.79630852 198.55426025]
[27.86996269 184.49772644]
[29.91324806 170.55325317]
[34.83790588 157.34153748]
[42.42736816 145.45115662]
[52.34628296 135.41249084]
[64.15532684 127.67392731]
[77.33066559 122.58193207]
[91.28719330 120.36548615]
[92.22281647 105.39469910]
[89.69415283 100.71937561]
[90.00251770 94.95833588]
[93.52157593 89.82465363]
[95.07915497 74.90574646]
[96.63673401 59.98683167]
[83.89468384 53.54936600]
[74.14356995 43.16364670]
[68.54478455 30.09654427]
[67.75489044 15.93244362]
[71.84875488 2.38113928]
[80.31291962 -8.92855358]
[92.10993195 -16.64457893]
[105.80548859 -19.85326195]
[107.67310333 -34.73654175]
[109.54071808 -49.61981964]
[111.40833282 -64.50310516]
[113.27593994 -79.38638306]
[111.71836090 -94.30529022]
[106.81681061 -108.48184967]
[101.91526031 -122.65840912]
[97.01371002 -136.83496094]
[92.11215973 -151.01152039]
[87.21060944 -165.18807983]
[82.30905914 -179.36463928]
[67.48506927 -176.85479736]
[52.45016098 -176.81927490]
[37.61448288 -179.25904846]
[23.38276672 -184.10757446]
[10.14326859 -191.23257446]
[-1.74283290 -200.43965149]
[-11.95127487 -211.47766113]
[-20.20356178 -224.04547119]
[-26.27456856 -237.80020142]
[-29.99867249 -252.36663818]
[-31.27427483 -267.34738159]
[-30.06657982 -282.33374023]
[-26.40853119 -296.91690063]
[-20.39992714 -310.69900513]
[-12.20468235 -323.30407715]
[-2.04637098 -334.38824463]
[9.79788017 -343.64910889]
[23.00495148 -350.83404541]
[37.21454620 -355.74700928]
[52.03901291 -358.25399780]
[67.07393646 -358.28662109]
[81.90914154 -355.84399414]
[96.13992310 -350.99270630]
[109.37804413 -343.86517334]
[121.26237488 -334.65579224]
[131.46868896 -323.61581421]
[139.71855164 -311.04641724]
[145.78691101 -297.29052734]
[149.50820923 -282.72338867]
[150.78092957 -267.74240112]
[149.57034302 -252.75625610]
[145.90948486 -238.17379761]
[139.89822388 -224.39285278]
[131.70054626 -211.78935242]
[121.54010773 -200.70715332]
[109.69406891 -191.44857788]
[96.48561096 -184.26618958]
[101.38716888 -170.08963013]
[106.28871918 -155.91307068]
[111.19026947 -141.73651123]
[116.09181976 -127.55995941]
[120.99337006 -113.38339996]
[125.89492035 -99.20684814]
[129.04711914 -113.87189484]
[135.82188416 -127.25480652]
[145.77459717 -138.47726440]
[158.25205994 -146.80270386]
[172.43534851 -151.68475342]
[187.39361572 -152.80296326]
[202.14512634 -150.08396912]
[215.72172546 -143.70620728]
[227.23239136 -134.08827209]
[235.92163086 -121.86138153]
[241.21920776 -107.82800293]
[242.77740479 -92.90915680]
[240.49397278 -78.08397675]
[234.51875305 -64.32545471]
[225.24394226 -52.53657532]
[213.27821350 -43.49105453]
[199.40692139 -37.78255081]
[184.54042053 -35.78572083]
[169.65443420 -37.63161850]
[155.72592163 -43.19909668]
[143.66905212 -52.12276077]
[134.27510071 -63.81693268]
[128.15922546 -77.51876831]
[126.29161072 -62.63548660]
[124.42399597 -47.75220871]
[122.55638123 -32.86892700]
[120.68876648 -17.98564911]
[134.55688477 -10.37905407]
[144.47854614 1.98877740]
[148.91787720 17.25035667]
[147.16966248 33.08673859]
[139.47122192 47.07987213]
[126.97061920 57.08181381]
[111.55564880 61.54441071]
[109.99806976 76.46332550]
[108.44048309 91.38224030]
[107.19361115 106.33032227]
[106.25798035 121.30111694]
[121.57283783 125.98033905]
[135.33267212 134.15579224]
[146.75349426 145.35704041]
[155.18565369 158.94136047]
[160.15083313 174.13063049]
[161.36918640 190.05590820]
[158.77507019 205.80714417]
[152.52061462 220.48519897]
[142.96676636 233.25312805]
[130.66247559 243.38392639]
[116.31317902 250.30194092]
[100.74031067 253.61557007]
[100.42825317 268.61233521]
[100.11619568 283.60906982]
[99.80414581 298.60583496]
[99.49208832 313.60256958]
[99.18003082 328.59933472]
[98.86797333 343.59609985]
[98.55591583 358.59283447]
[98.24385834 373.58959961]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 142]
[24 130]
[25 129]
[28 128]
[29 127]
[30 126]
[38 119]
[39 118]
[40 117]
[41 116]
[42 115]
[43 92]
[44 91]
[45 90]
[46 89]
[47 88]
[48 87]
[49 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
