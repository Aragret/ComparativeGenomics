%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUCCUAGUCCUCAUCGCCCUCCCAUCCCUACGCAUCCUUUACAUAACAGACGAGGUCAAxxxxxxxxxxGUAACCACGUUCUCCUGAUCAAAUAUCACUCUCCUACUUACAGGACUCAACAUACUAGUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[2.86632562 198.58334351]
[-8.22498989 208.68199158]
[-19.31630516 218.78063965]
[-30.19513130 229.10784912]
[-40.85675812 239.65913391]
[-51.51838303 250.21043396]
[-62.18000793 260.76171875]
[-72.84163666 271.31301880]
[-83.50326538 281.86428833]
[-94.16488647 292.41558838]
[-104.82651520 302.96688843]
[-98.74131012 316.87136841]
[-98.09381866 332.03530884]
[-102.97160339 346.40789795]
[-112.71498108 358.04537964]
[-126.00624084 365.37387085]
[-141.04785156 367.40225220]
[-155.80555725 363.85620117]
[-168.28350830 355.21530151]
[-176.79414368 342.64813232]
[-180.18649292 327.85433960]
[-178.00175476 312.83465576]
[-170.53540039 299.62033081]
[-158.79719543 289.99853516]
[-144.37461853 285.27053833]
[-129.21823120 286.07574463]
[-115.37780762 292.30523682]
[-104.71617889 281.75396729]
[-94.05455017 271.20266724]
[-83.39292908 260.65136719]
[-72.73130035 250.10009766]
[-62.06967163 239.54879761]
[-51.40804672 228.99751282]
[-40.74642181 218.44621277]
[-39.83098221 213.69885254]
[-35.88295364 209.49833679]
[-29.41495514 207.68933105]
[-18.32363892 197.59068298]
[-7.23232412 187.49201965]
[-15.43451786 176.34460449]
[-22.48233795 164.43371582]
[-28.30530357 151.87846375]
[-32.84518433 138.80442810]
[-36.05657959 125.34233093]
[-37.90737152 111.62680054]
[-38.37905884 97.79500580]
[-37.46691895 83.98526001]
[-35.18007660 70.33566284]
[-31.54139900 56.98272324]
[-26.58727455 44.05996323]
[-20.36724663 31.69661713]
[-12.94351387 20.01632309]
[-4.39031839 9.13588428]
[5.20680666 -0.83588910]
[15.75188732 -9.79927826]
[27.13947105 -17.66464806]
[39.25567627 -24.35334015]
[51.97934341 -29.79846954]
[65.18322754 -33.94557953]
[78.73529053 -36.75320053]
[92.50000000 -38.19325638]
[92.50000000 -53.19325638]
[92.50000000 -68.19325256]
[84.76270294 -81.99343109]
[92.50000000 -94.72070312]
[92.50000000 -109.72070312]
[92.50000000 -124.72070312]
[78.24732971 -129.88182068]
[66.62139893 -139.60877991]
[59.02610016 -152.72697449]
[56.37859344 -167.65234375]
[58.99858856 -182.58256531]
[66.56970215 -195.71473694]
[78.17768860 -205.46308899]
[92.42082214 -210.65048218]
[107.57917786 -210.65048218]
[121.82231140 -205.46308899]
[133.43029785 -195.71473694]
[141.00140381 -182.58256531]
[143.62139893 -167.65234375]
[140.97390747 -152.72697449]
[133.37860107 -139.60877991]
[121.75267029 -129.88182068]
[107.50000000 -124.72070312]
[107.50000000 -109.72070312]
[107.50000000 -94.72070312]
[115.23729706 -81.99343109]
[107.50000000 -68.19325256]
[107.50000000 -53.19325638]
[107.50000000 -38.19325638]
[130.19216919 -35.06316376]
[152.05720520 -28.23288727]
[172.49607849 -17.88954353]
[190.94885254 -4.31649971]
[206.90998840 12.11439514]
[219.94223022 30.95300293]
[233.32850647 24.18488884]
[246.71479797 17.41677284]
[260.10107422 10.64865875]
[266.45220947 -4.08371115]
[281.96759033 -8.16449833]
[294.74511719 1.53672862]
[294.98300171 17.57801819]
[282.49874878 27.65386581]
[266.86920166 24.03494263]
[253.48291016 30.80305862]
[240.09663391 37.57117462]
[226.71034241 44.33928680]
[233.40603638 63.16991043]
[237.31971741 82.76857758]
[238.36976624 102.72658539]
[236.53428650 122.62773132]
[251.17779541 125.87855530]
[265.82128906 129.12937927]
[280.46478271 132.38020325]
[293.66015625 123.68206787]
[309.12420654 126.94388580]
[317.68234253 140.23048401]
[314.25720215 155.65916443]
[300.88085938 164.07635498]
[285.48925781 160.48829651]
[277.21395874 147.02371216]
[262.57046509 143.77288818]
[247.92697144 140.52204895]
[233.28346252 137.27122498]
[230.02655029 147.39958191]
[226.00123596 157.24781799]
[221.23130798 166.75775146]
[215.74493408 175.87315369]
[209.57455444 184.54019165]
[202.75662231 192.70761108]
[195.33145142 200.32717896]
[187.34289551 207.35383606]
[178.83816528 213.74607849]
[169.86753845 219.46611023]
[160.48402405 224.48014832]
[150.74307251 228.75856018]
[140.70223999 232.27604675]
[130.42088318 235.01184082]
[119.95973206 236.94975281]
[109.38063812 238.07833862]
[98.74610901 238.39094543]
[88.11898804 237.88571167]
[77.56207275 236.56561279]
[67.13776398 234.43846130]
[56.90766144 231.51683044]
[46.93221664 227.81797791]
[37.27038193 223.36376953]
[27.97925758 218.18054199]
[19.11375046 212.29888916]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 39]
[2 38]
[3 37]
[4 34]
[5 33]
[6 32]
[7 31]
[8 30]
[9 29]
[10 28]
[11 27]
[61 90]
[62 89]
[63 88]
[65 86]
[66 85]
[67 84]
[96 108]
[97 107]
[98 106]
[99 105]
[112 125]
[113 124]
[114 123]
[115 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
