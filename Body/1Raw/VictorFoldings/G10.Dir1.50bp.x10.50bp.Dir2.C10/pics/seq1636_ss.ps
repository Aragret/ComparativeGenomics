%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUCUACCCCAGAAAACUACGAUAGCCCUUAUGAAACUUAAGGGUCGAAGGUGGAUUUAGCAxxxxxxxxxxUUAAAAUAAAAUCCCCACUAUGCACAUUUUAUUUCUCCAACAUACUCGGAUUCUACCCUAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[107.17298889 267.33187866]
[107.17298889 252.33187866]
[107.17298889 237.33187866]
[107.17298889 222.33187866]
[107.17298889 207.33187866]
[107.17298889 192.33187866]
[107.17298889 177.33187866]
[107.17298889 162.33187866]
[107.17298889 147.33187866]
[107.17298889 132.33187866]
[93.07759857 127.20156860]
[83.43578339 138.69224548]
[73.79397583 150.18290710]
[64.15216064 161.67356873]
[64.11237335 177.71658325]
[51.45559692 187.57484436]
[35.89101791 183.68595886]
[29.35845184 169.03314209]
[36.86912537 154.85678101]
[52.66149139 152.03175354]
[62.30330658 140.54109192]
[71.94512177 129.05043030]
[81.58693695 117.55976105]
[76.45663452 103.46437073]
[61.52254868 108.68774414]
[50.33219910 98.85792542]
[35.56008148 96.25320435]
[20.62599754 101.47658539]
[9.43564987 91.64675903]
[-5.33646584 89.04203796]
[-20.10858154 86.43731689]
[-25.12715912 88.27283478]
[-29.86251259 87.98641205]
[-33.54125214 86.05341339]
[-35.69792557 83.19055176]
[-50.28167343 79.68138885]
[-64.86542511 76.17221832]
[-79.44917297 72.66305542]
[-94.03292084 69.15388489]
[-108.61666870 65.64471436]
[-121.08343506 75.08473206]
[-136.69877625 74.25109100]
[-148.08963013 63.53742218]
[-149.87754822 48.00238800]
[-141.21836853 34.98115540]
[-126.20066071 30.62195396]
[-111.91534424 36.98306656]
[-105.10750580 51.06096649]
[-90.52375793 54.57013702]
[-75.94000244 58.07930374]
[-61.35625458 61.58847046]
[-46.77250671 65.09763336]
[-32.18875885 68.60680389]
[-17.50386047 71.66519928]
[-2.73174334 74.26992035]
[12.04037285 76.87464142]
[25.91785622 71.46495819]
[38.16480637 81.48108673]
[52.93692017 84.08580780]
[66.81440735 78.67612457]
[79.06135559 88.69225311]
[90.93817902 79.53031921]
[92.16879272 64.58087921]
[93.39940643 49.63144684]
[94.63001251 34.68201447]
[95.86062622 19.73257828]
[97.09123993 4.78314447]
[82.88279724 -0.29451475]
[70.47324371 -8.87737083]
[60.70868683 -20.38022995]
[54.25488281 -34.01880646]
[51.55186462 -48.86320496]
[52.78392792 -63.90130234]
[57.86707306 -78.10778046]
[66.45471954 -90.51402283]
[77.96134949 -100.27413940]
[91.60241699 -106.72267914]
[106.44785309 -109.41996002]
[121.48548126 -108.18209076]
[135.68998718 -103.09346008]
[148.09291077 -94.50102234]
[157.84858704 -82.99063110]
[164.29185486 -69.34706879]
[166.98341370 -54.50059128]
[165.73973083 -39.46344757]
[160.64562988 -25.26090050]
[152.04840088 -12.86129665]
[140.53424072 -3.11006689]
[126.88819122 3.32793570]
[112.04067230 6.01375675]
[110.81006622 20.96319199]
[109.57945251 35.91262436]
[108.34883881 50.86206055]
[107.11822510 65.81149292]
[105.88761139 80.76093292]
[116.43962860 91.42183685]
[131.40090942 90.34476471]
[142.57417297 76.92295074]
[159.65930176 75.72716522]
[172.09396362 87.00912476]
[187.02996826 85.62509918]
[201.96598816 84.24107361]
[216.90199280 82.85704803]
[220.21153259 68.09553528]
[227.92239380 55.08024597]
[239.27914429 45.08627319]
[253.16915894 39.09273529]
[268.23165894 37.68680954]
[282.99093628 41.00623703]
[296.00106812 48.72581482]
[305.98742676 60.08926010]
[311.97164917 73.98329163]
[313.36749268 89.04671478]
[310.03817749 103.80377960]
[302.30987549 116.80872345]
[290.93972778 126.78746796]
[277.04168701 132.76239014]
[261.97732544 134.14813232]
[247.22251892 130.80892944]
[234.22274780 123.07191467]
[224.25163269 111.69509888]
[218.28602600 97.79306030]
[203.35000610 99.17708588]
[188.41400146 100.56111145]
[173.47798157 101.94513702]
[166.68820190 112.93836212]
[154.61888123 118.07261658]
[141.60900879 115.25763702]
[132.47798157 105.30604553]
[117.51670074 106.38311768]
[131.16282654 112.61071777]
[144.80895996 118.83832550]
[158.45509338 125.06592560]
[173.23135376 127.64707184]
[184.30361938 137.76660156]
[188.20027161 152.25163269]
[183.69955444 166.56050110]
[172.21263123 176.20677185]
[157.34112549 178.16593933]
[143.74714661 171.82308960]
[136.55575562 158.65934753]
[129.36437988 145.49560547]
[122.17298889 132.33187866]
[122.17298889 147.33187866]
[122.17298889 162.33187866]
[122.17298889 177.33187866]
[122.17298889 192.33187866]
[122.17298889 207.33187866]
[122.17298889 222.33187866]
[122.17298889 237.33187866]
[122.17298889 252.33187866]
[122.17298889 267.33187866]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 23]
[12 22]
[13 21]
[14 20]
[24 61]
[26 59]
[27 58]
[29 56]
[30 55]
[31 54]
[35 53]
[36 52]
[37 51]
[38 50]
[39 49]
[40 48]
[62 95]
[63 94]
[64 93]
[65 92]
[66 91]
[67 90]
[96 130]
[97 129]
[100 125]
[101 124]
[102 123]
[103 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
