%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUAGCAUCAUCCCUCUACUAUUUUUUAACCAAAUCAACAACAACCUAUUUAGCUGUUCCCxxxxxxxxxxAGACCUCCUCAUUCUAACCUGAAUCGGAGGACAACCAGUAAGCUACCCUUUUACCAUCAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[113.46978760 257.50378418]
[113.46978760 242.50378418]
[113.46978760 227.50378418]
[113.46978760 212.50378418]
[113.46978760 197.50378418]
[113.46978760 182.50378418]
[113.46978760 167.50378418]
[113.46978760 152.50378418]
[113.46978760 137.50378418]
[113.46978760 122.50377655]
[93.99906921 122.54369354]
[82.18064117 109.99369049]
[67.31758881 112.01602936]
[52.45454407 114.03836060]
[52.24069977 129.06539917]
[49.78947449 143.89271545]
[45.15563583 158.18904114]
[38.44270325 171.63502502]
[29.80064774 183.93025208]
[19.42253494 194.80003357]
[7.54021692 204.00157166]
[-5.58085299 211.32926941]
[-19.64754486 216.61943054]
[-34.34560013 219.75387573]
[-49.34666443 220.66258240]
[-64.31560516 219.32525635]
[-78.91801453 215.77174377]
[-92.82765961 210.08145142]
[-105.73380280 202.38151550]
[-117.34811401 192.84393311]
[-127.41112518 181.68179321]
[-135.69802856 169.14443970]
[-142.02368164 155.51199341]
[-146.24676514 141.08898926]
[-148.27294922 126.19763947]
[-148.05696106 111.17063141]
[-145.60363770 96.34366608]
[-140.96775818 82.04799652]
[-134.25291443 68.60297394]
[-125.60910034 56.30898285]
[-115.22944641 45.44066620]
[-103.34580994 36.24082947]
[-90.22370148 28.91499901]
[-76.15625763 23.62683678]
[-61.45775223 20.49448204]
[-46.45655823 19.58791351]
[-31.48780823 20.92738342]
[-16.88591003 24.48296738]
[-2.97707176 30.17523384]
[9.92797470 37.87701416]
[21.54092789 47.41624832]
[31.60234833 58.57982635]
[39.88745880 71.11835480]
[46.21117401 84.75170135]
[50.43221283 99.17531586]
[65.29525757 97.15297699]
[80.15830231 95.13064575]
[89.84869385 80.07417297]
[109.18662262 77.50902557]
[124.86188507 91.64884949]
[134.60954285 80.24782562]
[144.35719299 68.84680939]
[154.10484314 57.44578552]
[163.85249329 46.04476547]
[172.99423218 34.15238571]
[181.50532532 21.80081177]
[190.01640320 9.44923973]
[176.08213806 15.00226212]
[161.08244324 14.90703773]
[147.21978760 9.17754936]
[136.52972412 -1.34491539]
[130.58187866 -15.11529255]
[130.24964905 -30.11161232]
[135.58178711 -44.13189316]
[145.79536438 -55.11747360]
[159.39065552 -61.45528412]
[174.37142944 -62.21471405]
[188.53794861 -57.28425598]
[199.81010437 -47.38786697]
[206.53274536 -33.97868729]
[207.71875000 -19.02564812]
[203.19430542 -4.72495890]
[209.11599731 -19.39615631]
[223.88504028 -21.32612038]
[235.58467102 -30.71328163]
[247.28428650 -40.10044479]
[258.98391724 -49.48760605]
[270.68353271 -58.87476730]
[272.87850952 -71.62764740]
[282.87072754 -79.20223236]
[294.94323730 -77.95228577]
[306.83560181 -87.09401703]
[318.72799683 -96.23574829]
[330.62036133 -105.37748718]
[332.42086792 -121.07888031]
[344.84838867 -130.84272766]
[360.52984619 -128.87629700]
[370.16177368 -116.34626007]
[368.02966309 -100.68644714]
[355.39849854 -91.18755341]
[339.76208496 -93.48510742]
[327.86972046 -84.34336853]
[315.97732544 -75.20163727]
[304.08496094 -66.05990601]
[298.30487061 -49.51933289]
[280.07070923 -47.17514420]
[268.37106323 -37.78798294]
[256.67144775 -28.40081978]
[244.97183228 -19.01365852]
[233.27220154 -9.62649632]
[228.18733215 4.37326813]
[212.58146667 6.97466469]
[202.36798096 17.96032906]
[193.85688782 30.31190109]
[185.34579468 42.66347504]
[200.34344482 42.92932129]
[209.65458679 54.68953705]
[206.47354126 69.34835052]
[193.12538147 76.19136047]
[179.36654663 70.21688080]
[175.25350952 55.79241562]
[165.50585938 67.19343567]
[155.75820923 78.59445953]
[146.01055908 89.99547577]
[136.26290894 101.39649963]
[147.06588745 90.98998260]
[160.83535767 85.04005432]
[175.81732178 84.30461884]
[190.10333252 88.87737274]
[201.87358093 98.17581940]
[209.62875366 111.01549530]
[212.38098145 125.76084137]
[209.77966309 140.53355408]
[202.15615845 153.45184326]
[190.48158264 162.87014771]
[176.24307251 167.58871460]
[161.25437927 167.00650024]
[147.42480469 161.19764709]
[136.51599121 150.90213013]
[129.91754150 137.43139648]
[128.46978760 122.50377655]
[128.46978760 137.50378418]
[128.46978760 152.50378418]
[128.46978760 167.50378418]
[128.46978760 182.50378418]
[128.46978760 197.50378418]
[128.46978760 212.50378418]
[128.46978760 227.50378418]
[128.46978760 242.50378418]
[128.46978760 257.50378418]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 57]
[13 56]
[14 55]
[60 125]
[61 124]
[62 123]
[63 122]
[64 121]
[65 115]
[66 114]
[67 113]
[82 112]
[84 110]
[85 109]
[86 108]
[87 107]
[88 106]
[91 104]
[92 103]
[93 102]
[94 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
