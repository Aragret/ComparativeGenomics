%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUACCCCCCAAUUAGGAGGGCACUGGCCCCCAACAGGCAUCACCCCGCUAAAUCCCCUAGxxxxxxxxxxAACAACAUAAAACCCUCAUUCACACGAGAAAACACCCUCAUGUUCAUACACCUAUCCCCCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[155.30810547 102.47346497]
[140.48562622 104.77434540]
[125.66313934 107.07521820]
[110.84065247 109.37609100]
[98.50936890 117.91654968]
[91.14312744 130.98324585]
[83.77689362 144.04994202]
[76.41065216 157.11663818]
[69.04441071 170.18333435]
[61.67817307 183.25003052]
[62.38750076 199.63381958]
[48.40996170 208.21055603]
[34.12445068 200.15722656]
[34.22667694 183.75839233]
[48.61147690 175.88378906]
[55.97771835 162.81709290]
[63.34395599 149.75039673]
[70.71019745 136.68370056]
[78.07643890 123.61700439]
[85.44267273 110.55030823]
[82.23818970 103.76936340]
[75.82921600 90.20746613]
[72.62472534 83.42652130]
[57.85260773 80.82179260]
[43.08049011 78.21707153]
[28.30837631 75.61235046]
[17.27584648 82.37155914]
[4.99380589 79.85703278]
[-2.02899265 69.96044159]
[-16.74451447 67.05297089]
[-31.46003723 64.14550018]
[-40.66381073 76.27199554]
[-54.16492844 83.17176056]
[-69.26116180 83.52395630]
[-82.95700073 77.31227875]
[-92.55808258 65.81755066]
[-96.20118713 51.35403442]
[-110.91670990 48.44656372]
[-125.63223267 45.53908920]
[-137.70092773 55.48296738]
[-153.33732605 55.29112244]
[-165.15841675 45.05413437]
[-167.58262634 29.60560036]
[-159.46533203 16.23984528]
[-144.63925171 11.26776695]
[-130.10482788 17.03703117]
[-122.72475433 30.82356834]
[-108.00923157 33.73104095]
[-93.29370880 36.63851166]
[-84.42372131 24.64731789]
[-71.17250824 17.66771698]
[-56.14342499 17.13146591]
[-42.31549072 23.19845772]
[-32.45291519 34.71438599]
[-28.55256462 49.42997742]
[-13.83704281 52.33745193]
[0.87847978 55.24492264]
[17.12439156 48.67873001]
[30.91309738 60.84023285]
[45.68521500 63.44495773]
[60.45733261 66.04968262]
[75.22944641 68.65440369]
[96.66120148 70.17569733]
[108.65348816 81.89175415]
[108.53977966 94.55361176]
[123.36225891 92.25273132]
[138.18473816 89.95185852]
[153.00723267 87.65098572]
[152.12043762 73.29737091]
[152.52743530 58.92260742]
[154.22485352 44.64306641]
[157.19886780 30.57435036]
[161.42530823 16.83034515]
[166.86987305 3.52230120]
[173.48843384 -9.24206829]
[181.22732544 -21.35945702]
[190.02380371 -32.73180771]
[199.80659485 -43.26708984]
[210.49645996 -52.88006973]
[222.00675964 -61.49298096]
[234.24429321 -69.03614807]
[247.10990906 -75.44857788]
[260.49942017 -80.67842102]
[274.30438232 -84.68341827]
[288.41302490 -87.43121338]
[302.71112061 -88.89965057]
[317.08285522 -89.07691193]
[331.41189575 -87.96164703]
[345.58224487 -85.56297302]
[359.47915649 -81.90038300]
[372.99020386 -77.00360107]
[386.00595093 -70.91236877]
[398.42111206 -63.67605972]
[410.13519287 -55.35333633]
[421.05337524 -46.01165009]
[431.08737183 -35.72668839]
[440.15594482 -24.58178139]
[448.18579102 -12.66721249]
[455.11190796 -0.07948628]
[460.87835693 13.07944298]
[465.43847656 26.70300674]
[468.75543213 40.68087769]
[470.80245972 54.89987183]
[485.78271484 54.13021088]
[500.76293945 53.36055374]
[514.14794922 44.92534637]
[527.25543213 51.99941254]
[542.23565674 51.22975159]
[557.21594238 50.46009064]
[565.56732178 37.38209152]
[580.02301025 31.74193192]
[595.02459717 35.70837402]
[604.80358887 47.75623703]
[605.59979248 63.25287247]
[597.10705566 76.23950958]
[582.59094238 81.72251892]
[567.63330078 77.59356689]
[557.98559570 65.44033051]
[543.00537109 66.20999146]
[528.02508545 66.97965240]
[515.71160889 75.35980225]
[501.53259277 68.34078979]
[486.55236816 69.11045074]
[471.57211304 69.88011169]
[470.87722778 85.53121185]
[468.65164185 101.03941345]
[464.91671753 116.25539398]
[459.70825195 131.03259277]
[453.07635498 145.22871399]
[445.08474731 158.70698547]
[435.81027222 171.33758545]
[425.34216309 182.99882507]
[413.78109741 193.57835388]
[401.23837280 202.97419739]
[387.83465576 211.09580994]
[373.69897461 217.86488342]
[358.96737671 223.21615601]
[343.78164673 227.09797668]
[328.28802490 229.47285461]
[312.63568115 230.31782532]
[296.97528076 229.62463379]
[281.45764160 227.39984131]
[266.23220825 223.66476440]
[251.44561768 218.45526123]
[237.24026489 211.82136536]
[223.75299072 203.82687378]
[211.11370850 194.54864502]
[199.44419861 184.07595825]
[188.85688782 172.50953674]
[179.45382690 159.96070862]
[171.32562256 146.55020142]
[164.55065918 132.40711975]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 68]
[2 67]
[3 66]
[4 65]
[5 20]
[6 19]
[7 18]
[8 17]
[9 16]
[10 15]
[23 62]
[24 61]
[25 60]
[26 59]
[29 57]
[30 56]
[31 55]
[37 49]
[38 48]
[39 47]
[103 124]
[104 123]
[105 122]
[107 120]
[108 119]
[109 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
