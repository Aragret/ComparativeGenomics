%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAAAGUUAAAUUAUAGGCUAAAUCCUAUAUAUCUUAAUGGCACAUGCAGCGCAAGUAGGUxxxxxxxxxxGUCACUUUCCUAGGACUUCUAACAGCCCUAGACCUCAACUACCUAACCAACAAACUUAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[113.08258057 263.89221191]
[113.08258057 248.89221191]
[113.08258057 233.89221191]
[113.08258057 218.89221191]
[113.08258057 203.89221191]
[113.08258057 188.89221191]
[113.08258057 173.89221191]
[113.08258057 158.89221191]
[113.08258057 143.89221191]
[113.08258057 128.89221191]
[107.13639069 124.32134247]
[102.11685944 138.45655823]
[87.12235260 138.05052185]
[82.87513733 123.66438293]
[95.24401093 115.17960358]
[89.29782104 110.60874176]
[74.80223083 114.46589661]
[60.30663300 118.32305908]
[45.81103516 122.18021393]
[31.35634613 126.18795776]
[16.94412994 130.34584045]
[2.57594633 134.65342712]
[-11.74665070 139.11024475]
[-26.06924820 143.56706238]
[-40.39184570 148.02388000]
[-54.71444321 152.48069763]
[-69.03704071 156.93751526]
[-76.16445923 171.04338074]
[-91.20452881 175.89845276]
[-105.23425293 168.62229919]
[-109.93003845 153.53172302]
[-102.50596619 139.57971191]
[-87.36659241 135.04373169]
[-73.49385834 142.61491394]
[-59.17125702 138.15809631]
[-44.84865952 133.70127869]
[-30.52606392 129.24446106]
[-16.20346642 124.78765106]
[-1.88086939 120.33083344]
[3.60690236 115.30788422]
[12.78624344 115.93363190]
[27.19845963 111.77574158]
[32.78953934 106.86804962]
[41.95387650 107.68462372]
[56.44947052 103.82746124]
[70.94506836 99.97029877]
[85.44066620 96.11314392]
[97.42749786 87.09561157]
[105.15158081 74.23721313]
[112.87567139 61.37880707]
[104.97930145 51.76625061]
[100.99978638 39.64552689]
[101.69425201 26.58937263]
[107.19696808 14.38016605]
[116.97074127 4.76665688]
[107.46238708 -6.83468437]
[97.95402527 -18.43602562]
[83.23737335 -26.85365295]
[87.25205994 -43.32540512]
[104.19146729 -44.02744675]
[109.55536652 -27.94438362]
[119.06372833 -16.34304237]
[128.57208252 -4.74170160]
[143.57208252 -4.74170160]
[153.08044434 -16.34304237]
[162.58880615 -27.94438362]
[171.85374451 -39.74102402]
[180.87127686 -51.72785568]
[189.88880920 -63.71468735]
[198.90634155 -75.70152283]
[184.95523071 -70.19092560]
[170.00630188 -68.95415497]
[155.33926392 -72.09708405]
[142.20970154 -79.35065460]
[131.74154663 -90.09392548]
[124.83095551 -103.40721893]
[122.06950378 -118.15084076]
[123.69358826 -133.06265259]
[129.56417847 -146.86614990]
[139.17872620 -158.37963867]
[151.71415710 -166.61753845]
[166.09738159 -170.87461853]
[181.09712219 -170.78645325]
[195.42932129 -166.36061096]
[207.86705017 -157.97593689]
[217.34559631 -146.35021973]
[223.05352783 -132.47868347]
[224.50222778 -117.54880524]
[221.56765747 -102.83866119]
[214.49902344 -89.60477448]
[227.43708801 -97.19467926]
[240.37513733 -104.78459167]
[253.31320190 -112.37449646]
[266.25125122 -119.96440887]
[264.95376587 -135.17227173]
[270.39126587 -149.43399048]
[281.48406982 -159.91787720]
[296.02975464 -164.54235840]
[311.14025879 -162.38923645]
[323.81533813 -153.88600159]
[331.53839111 -140.72100830]
[332.77597046 -125.50814056]
[327.28237915 -111.26794434]
[316.14834595 -100.82781982]
[301.58456421 -96.26065826]
[286.48266602 -98.47327423]
[273.84115601 -107.02635193]
[260.90310669 -99.43643951]
[247.96504211 -91.84653473]
[235.02699280 -84.25662994]
[222.08894348 -76.66671753]
[210.89317322 -66.68399048]
[201.87564087 -54.69715881]
[192.85810852 -42.71032715]
[183.84057617 -30.72349358]
[183.62377930 -25.89353371]
[180.32713318 -21.16453552]
[174.19013977 -18.43602562]
[164.68177795 -6.83468437]
[155.17343140 4.76665688]
[166.24211121 15.68345547]
[171.82385254 29.91779518]
[171.14884949 44.93540955]
[164.54193115 58.15196991]
[153.33081055 67.37779999]
[139.58468628 71.18010712]
[125.73406982 69.10289001]
[118.00998688 81.96129608]
[110.28590393 94.81969452]
[123.22907257 87.23851013]
[135.45559692 78.54874420]
[150.21435547 75.86934662]
[164.71516418 79.70685577]
[176.21662903 89.33577728]
[182.54437256 102.93576813]
[182.50213623 117.93570709]
[176.09790039 131.49983215]
[164.54238892 141.06384277]
[150.02018738 144.81962585]
[135.27397156 142.05593872]
[128.08258057 128.89221191]
[128.08258057 143.89221191]
[128.08258057 158.89221191]
[128.08258057 173.89221191]
[128.08258057 188.89221191]
[128.08258057 203.89221191]
[128.08258057 218.89221191]
[128.08258057 233.89221191]
[128.08258057 248.89221191]
[128.08258057 263.89221191]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[16 47]
[17 46]
[18 45]
[19 44]
[20 42]
[21 41]
[22 39]
[23 38]
[24 37]
[25 36]
[26 35]
[27 34]
[48 129]
[49 128]
[50 127]
[55 63]
[56 62]
[57 61]
[64 120]
[65 119]
[66 118]
[67 115]
[68 114]
[69 113]
[70 112]
[90 111]
[91 110]
[92 109]
[93 108]
[94 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
