%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUAACACCCAUAGUAGGCCUAAAAGCAGCCACCAAUUAAGAAAGCGUUCAAGCUCAACACxxxxxxxxxxGAAAACCUUUUUCCAAGGACAAAUCAGAGAAAAAGUCUUUAACUCCACCAUUAGCACCCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[89.41620636 539.04699707]
[89.41620636 524.04699707]
[89.41620636 509.04699707]
[89.41620636 494.04699707]
[89.41620636 479.04699707]
[89.41620636 464.04699707]
[89.41620636 449.04699707]
[89.41620636 434.04699707]
[89.41620636 419.04699707]
[89.41620636 404.04699707]
[74.81195831 400.74279785]
[61.30273056 394.26828003]
[49.56743622 384.94531250]
[40.19662857 373.23895264]
[33.66278839 359.73422241]
[30.29649925 345.10708618]
[30.26972389 330.09039307]
[33.58702087 315.43725586]
[40.08515549 301.88327026]
[49.44113159 290.10958862]
[61.18823624 280.70870972]
[74.73933411 274.15463257]
[89.41620636 270.77893066]
[89.41620636 255.77893066]
[86.25062561 249.04655457]
[89.57549286 240.46768188]
[89.88754272 225.47093201]
[77.07550049 217.87374878]
[69.73757172 204.79664612]
[69.93178558 189.70265198]
[77.70612335 176.64674377]
[91.05872345 169.18650818]
[91.37078094 154.18974304]
[91.68283844 139.19299316]
[91.99489594 124.19624329]
[76.25130463 117.05964661]
[67.00468445 99.82075500]
[70.38681030 78.23603821]
[56.37009430 72.89452362]
[45.95872498 83.97025299]
[32.09931946 90.21408081]
[16.90534019 90.67386627]
[2.69375491 85.27948761]
[-8.36827087 74.85355377]
[-14.59385967 60.98595047]
[-15.03365421 45.79137802]
[-9.62058830 31.58690262]
[0.81988430 20.53860092]
[14.69566727 14.33126068]
[29.89080429 13.91145420]
[44.08815002 19.34320068]
[55.12270737 29.79819870]
[61.31179047 43.68213654]
[61.71160507 58.87781143]
[75.72831726 64.21932220]
[87.23012543 54.59079742]
[84.43779755 39.85299301]
[81.64547729 25.11518669]
[66.59097290 24.43784142]
[52.09864426 20.30636787]
[38.95003510 12.94357109]
[27.85423470 2.74651647]
[19.40962410 -9.73488140]
[14.07161427 -23.82751656]
[12.12807369 -38.77138901]
[13.68381786 -53.76059723]
[18.65494537 -67.98679352]
[26.77337074 -80.68276978]
[37.60127640 -91.16385651]
[50.55472946 -98.86482239]
[64.93516541 -103.37035370]
[79.96706390 -104.43747711]
[94.83977509 -102.00865173]
[108.75122833 -96.21485138]
[120.95120239 -87.36853790]
[130.78176880 -75.94676971]
[137.71276855 -62.56551743]
[141.37043762 -47.94641113]
[141.55749512 -32.87784576]
[138.26388550 -18.17244339]
[131.66720581 -4.62325239]
[122.12322235 7.03903818]
[110.14661407 16.18549538]
[96.38327789 22.32286072]
[99.17560577 37.06066895]
[101.96792603 51.79847336]
[115.55887604 58.14560318]
[128.65203857 50.82649612]
[141.74519348 43.50739288]
[154.83834839 36.18828583]
[167.93150330 28.86918068]
[181.02465820 21.55007553]
[194.11781311 14.23096943]
[191.96887207 -0.79389334]
[195.39645386 -15.57956409]
[203.93701172 -28.12640381]
[216.43551636 -36.73755646]
[231.20162964 -40.24842834]
[246.23837280 -38.18421173]
[259.51214600 -30.82406807]
[269.22775269 -19.16339874]
[274.07125854 -4.77921486]
[273.38763428 10.38314247]
[267.26931763 24.27308846]
[256.54376221 35.01212311]
[242.66151428 41.14787674]
[227.50003052 41.85054398]
[213.10977173 37.02509308]
[201.43690491 27.32412338]
[188.34375000 34.64323044]
[175.25061035 41.96233368]
[162.15745544 49.28144073]
[149.06430054 56.60054398]
[135.97114563 63.91965103]
[122.87798309 71.23875427]
[130.51629639 106.09169006]
[106.99164581 124.50830078]
[106.67959595 139.50505066]
[106.36753845 154.50180054]
[106.05548096 169.49856567]
[119.08618927 177.50779724]
[126.31069183 190.87579346]
[125.87685394 205.96479797]
[118.00128174 218.72534180]
[104.88430023 225.78298950]
[104.57224274 240.77973938]
[104.41620636 255.77893066]
[104.41620636 270.77893066]
[119.09307861 274.15463257]
[132.64418030 280.70870972]
[144.39128113 290.10958862]
[153.74725342 301.88327026]
[160.24539185 315.43725586]
[163.56268311 330.09039307]
[163.53591919 345.10708618]
[160.16963196 359.73422241]
[153.63578796 373.23895264]
[144.26498413 384.94531250]
[132.52967834 394.26828003]
[119.02045441 400.74279785]
[104.41620636 404.04699707]
[104.41620636 419.04699707]
[104.41620636 434.04699707]
[104.41620636 449.04699707]
[104.41620636 464.04699707]
[104.41620636 479.04699707]
[104.41620636 494.04699707]
[104.41620636 509.04699707]
[104.41620636 524.04699707]
[104.41620636 539.04699707]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[23 128]
[24 127]
[26 126]
[27 125]
[32 120]
[33 119]
[34 118]
[35 117]
[38 55]
[39 54]
[56 86]
[57 85]
[58 84]
[87 115]
[88 114]
[89 113]
[90 112]
[91 111]
[92 110]
[93 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
