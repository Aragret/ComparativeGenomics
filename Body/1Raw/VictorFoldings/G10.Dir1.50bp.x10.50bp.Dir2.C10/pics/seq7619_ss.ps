%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAUACUAACAUCUCAGACGCUCAGGAAAUAGAAACCGUCUGAACUAUCCUGCCCGCCAUCxxxxxxxxxxUAAACCCCAUUAAACGCCUGGCAGCCGGAAGCCUAUUCGCAGGAUUUCUCAUUACUAACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 254.54603577]
[92.50000000 239.54603577]
[92.50000000 224.54603577]
[92.50000000 209.54603577]
[92.50000000 194.54603577]
[92.50000000 179.54603577]
[92.50000000 164.54603577]
[92.50000000 149.54603577]
[92.50000000 134.54603577]
[92.50000000 119.54602814]
[87.16918945 114.27038574]
[79.97780609 127.43412018]
[72.78642273 140.59785461]
[68.04669189 154.82933044]
[55.44104767 162.95939636]
[40.52157593 161.40719604]
[29.85946083 150.85639954]
[28.15077019 135.95404053]
[36.14808273 123.26376343]
[50.33112335 118.37495422]
[63.41934204 111.04701996]
[76.50756073 103.71909332]
[71.17675018 98.44345093]
[56.17755890 98.59948730]
[41.17837143 98.75552368]
[26.17918205 98.91156006]
[11.17999363 99.06759644]
[-3.81919456 99.22363281]
[-18.81838226 99.37966919]
[-23.83096504 113.68525696]
[-33.43645096 125.41174316]
[-46.47493362 133.14309692]
[-61.37194824 135.94570923]
[-76.32861328 133.48117065]
[-89.53884125 126.04707336]
[-99.40742493 114.54112244]
[-104.74268341 100.35272217]
[-104.90036774 85.19518280]
[-99.86143494 70.89885712]
[-90.23435211 59.19009399]
[-77.18164062 51.48278427]
[-62.27948761 48.70762253]
[-47.32738876 51.19972229]
[-34.13088989 58.65814972]
[-24.28352547 70.18226624]
[-18.97441864 84.38047791]
[-3.97523093 84.22444153]
[11.02395725 84.06840515]
[26.02314568 83.91236877]
[41.02233505 83.75633240]
[56.02152252 83.60029602]
[71.02071381 83.44425964]
[81.35186005 79.45284271]
[90.93527985 79.82208252]
[98.23109436 83.60186005]
[102.23651123 89.36663055]
[111.00271606 77.19479370]
[119.76892090 65.02295685]
[128.53512573 52.85112000]
[137.30134583 40.67928314]
[146.06755066 28.50744629]
[154.83375549 16.33560944]
[145.30833435 7.42392778]
[141.87063599 -8.18675900]
[148.45573425 -26.04959488]
[153.35728455 -40.22615433]
[158.25883484 -54.40270996]
[163.16038513 -68.57926941]
[150.16748047 -76.17337799]
[138.90596008 -86.15657806]
[129.80870056 -98.14516449]
[123.22536469 -111.67830658]
[119.40901184 -126.23583221]
[118.50631714 -141.25819397]
[120.55199432 -156.16796875]
[125.46740723 -170.39207458]
[133.06361389 -183.38375854]
[143.04864502 -194.64366150]
[155.03869629 -203.73898315]
[168.57290649 -210.32012939]
[183.13105774 -214.13412476]
[198.15356445 -215.03437805]
[213.06300354 -212.98628235]
[227.28631592 -208.06857300]
[240.27676392 -200.47026062]
[251.53504944 -190.48341370]
[260.62841797 -178.49188232]
[267.20739746 -164.95661926]
[271.01901245 -150.39784241]
[271.91683960 -135.37519836]
[269.86633301 -120.46607971]
[264.94631958 -106.24357605]
[257.34591675 -93.25434875]
[247.35723877 -81.99768066]
[235.36424255 -72.90624237]
[221.82791138 -66.32948303]
[207.26852417 -62.52019501]
[192.24572754 -61.62480164]
[177.33694458 -63.67771912]
[172.43539429 -49.50115967]
[167.53384399 -35.32460022]
[162.63229370 -21.14804459]
[167.01539612 -15.06212521]
[175.88275146 -27.16047859]
[190.12907410 -22.46554756]
[190.06608582 -7.46567869]
[175.78160095 -2.89028859]
[180.16470337 3.19562984]
[195.16389465 3.03959322]
[210.16308594 2.88355660]
[222.37069702 -7.52576447]
[238.09226990 -4.33025217]
[245.26759338 10.01877022]
[238.39233398 24.51395988]
[222.74063110 28.03585052]
[210.31912231 17.88274574]
[195.31993103 18.03878212]
[180.32073975 18.19481850]
[167.00558472 25.10181618]
[158.23937988 37.27365494]
[149.47317505 49.44549179]
[140.70697021 61.61732864]
[131.94076538 73.78916168]
[123.17455292 85.96099854]
[114.40834808 98.13283539]
[124.76908112 87.28594208]
[138.27912903 80.76837158]
[153.21752930 79.41034698]
[167.68138123 83.38486481]
[179.82824707 92.18563843]
[188.11082458 104.69159698]
[191.47404480 119.30969238]
[189.48950195 134.17782593]
[182.40998840 147.40206909]
[171.13729858 157.29785156]
[157.10740662 162.60464478]
[142.10746765 162.64643860]
[128.04821777 157.41790771]
[116.72056580 147.58508301]
[109.56746674 134.40051270]
[107.50000000 119.54602814]
[107.50000000 134.54603577]
[107.50000000 149.54603577]
[107.50000000 164.54603577]
[107.50000000 179.54603577]
[107.50000000 194.54603577]
[107.50000000 209.54603577]
[107.50000000 224.54603577]
[107.50000000 239.54603577]
[107.50000000 254.54603577]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[23 52]
[24 51]
[25 50]
[26 49]
[27 48]
[28 47]
[29 46]
[56 125]
[57 124]
[58 123]
[59 122]
[60 121]
[61 120]
[62 119]
[65 102]
[66 101]
[67 100]
[68 99]
[108 118]
[109 117]
[110 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
