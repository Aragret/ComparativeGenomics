%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAAUAGCCCACUAAUCCAAACUCUAACACUAUGCUUAGGCGCUAUCACCACUCUGUUCGCAxxxxxxxxxxAAAGUGAACUGUAUCCGACAUCUGGUUCCUACUUCAGGGUCAUAAAGCCUAAAUAGCCCACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[115.01107788 271.49975586]
[115.01107788 256.49975586]
[115.01107788 241.49975586]
[115.01107788 226.49975586]
[115.01107788 211.49975586]
[115.01107788 196.49975586]
[115.01107788 181.49975586]
[115.01107788 166.49975586]
[115.01107788 151.49975586]
[115.01107788 136.49975586]
[96.08744049 135.06120300]
[82.12633514 125.44061279]
[75.85686493 111.87278748]
[61.08475113 114.47750854]
[46.31263351 117.08222961]
[31.54051971 119.68695068]
[16.76840210 122.29167938]
[10.34049034 134.16987610]
[-1.58984232 140.07312012]
[-14.54693413 138.03781128]
[-23.81304741 129.03273010]
[-38.63552856 131.33360291]
[-53.45801163 133.63449097]
[-68.28049469 135.93536377]
[-76.54207611 145.89276123]
[-88.97856140 147.47557068]
[-98.81893921 140.37422180]
[-113.68553162 142.37028503]
[-117.93277740 156.99494934]
[-127.76617432 168.62353516]
[-141.48202515 175.24133301]
[-156.70397949 175.70176697]
[-170.79473877 169.92506409]
[-181.31300354 158.91206360]
[-186.43640137 144.57084656]
[-185.27728271 129.38610840]
[-178.03648376 115.98869324]
[-165.96850586 106.69979095]
[-151.16418457 103.12876129]
[-136.18849182 105.89430237]
[-123.63602448 114.51727295]
[-115.68159485 127.50367737]
[-100.81499481 125.50762177]
[-87.55657959 114.05079651]
[-70.58136749 121.11287689]
[-55.75888824 118.81200409]
[-40.93640518 116.51113129]
[-26.11392212 114.21025085]
[-16.80666351 100.23606110]
[0.05411223 97.22843170]
[14.16368008 107.51956177]
[28.93579674 104.91484070]
[43.70791245 102.31011200]
[58.48003006 99.70539093]
[73.25214386 97.10066986]
[94.17649078 67.32970428]
[135.35009766 82.45194244]
[138.70936584 67.83293152]
[142.06861877 53.21392822]
[145.42788696 38.59492111]
[133.95018005 29.97496414]
[127.60765839 16.43468666]
[128.38877869 0.90400046]
[136.66835022 -12.96059036]
[150.99288940 -21.63652802]
[151.60871887 -36.62388229]
[152.22454834 -51.61123657]
[152.84037781 -66.59858704]
[153.45619202 -81.58594513]
[154.07202148 -96.57329559]
[140.26417542 -102.93033600]
[129.94380188 -114.09090424]
[124.68467712 -128.35308838]
[125.28877258 -143.54202271]
[131.66397095 -157.34149170]
[142.83810425 -167.64717102]
[157.10719299 -172.88754272]
[172.29531860 -172.26345825]
[186.08638000 -165.87011719]
[196.37736511 -154.68243408]
[201.59895325 -140.40646362]
[200.95489502 -125.21916962]
[194.54341125 -111.43653107]
[183.34220886 -101.16027832]
[169.05937195 -95.95746613]
[168.44355774 -80.97011566]
[167.82772827 -65.98276520]
[167.21189880 -50.99541092]
[166.59606934 -36.00805664]
[165.98025513 -21.02070236]
[179.67086792 -14.89152908]
[190.43955994 -25.33353806]
[201.20823669 -35.77554703]
[202.89198303 -51.72999954]
[216.49246216 -60.23921585]
[231.57652283 -54.77565002]
[236.57298279 -39.53049088]
[227.64897156 -26.19851112]
[211.65023804 -25.00686836]
[200.88156128 -14.56485939]
[190.11288452 -4.12285042]
[191.82023621 18.76280785]
[179.47052002 36.44630814]
[160.04689026 41.95417786]
[156.68762207 56.57318497]
[153.32836914 71.19219208]
[149.96911621 85.81120300]
[159.92585754 74.59233093]
[167.63027954 61.72212982]
[181.29104614 55.52669525]
[196.04914856 58.20969391]
[206.65524292 68.81680298]
[209.33683777 83.57515717]
[203.14010620 97.23533630]
[190.26916504 104.93852234]
[175.30152893 103.94453430]
[160.40965271 105.74221039]
[174.34036255 111.30415344]
[188.27107239 116.86608887]
[203.95645142 114.79739380]
[212.90750122 126.70235443]
[228.15725708 121.71996307]
[241.48100281 130.65626526]
[242.65788269 146.65608215]
[230.78511047 157.44573975]
[214.97044373 154.74833679]
[207.34556580 140.63307190]
[192.65660095 143.09959412]
[182.70913696 130.79679871]
[168.77842712 125.23486328]
[154.84770203 119.67292786]
[148.63854980 123.87963104]
[158.19737244 135.43943787]
[167.75619507 146.99923706]
[181.38664246 153.26107788]
[185.73291016 167.61761475]
[177.86424255 180.38804626]
[163.08657837 182.96113586]
[151.36466980 173.60180664]
[150.60299683 158.62051392]
[143.41162109 145.45678711]
[136.22023010 132.29304504]
[130.01107788 136.49975586]
[130.01107788 151.49975586]
[130.01107788 166.49975586]
[130.01107788 181.49975586]
[130.01107788 196.49975586]
[130.01107788 211.49975586]
[130.01107788 226.49975586]
[130.01107788 241.49975586]
[130.01107788 256.49975586]
[130.01107788 271.49975586]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[13 55]
[14 54]
[15 53]
[16 52]
[17 51]
[21 48]
[22 47]
[23 46]
[24 45]
[27 43]
[28 42]
[57 107]
[58 106]
[59 105]
[60 104]
[65 90]
[66 89]
[67 88]
[68 87]
[69 86]
[70 85]
[91 101]
[92 100]
[93 99]
[117 131]
[118 130]
[119 129]
[121 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
