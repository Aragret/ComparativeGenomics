%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCCCUAACAACCCCCCUCCUAAUACUAACUACCUGACUCCUACCCCUCACAAUCAUGGCxxxxxxxxxxCUCAUCGCUACCUCCCUGACAAGCGCCUAUAGCACUCGAAUAAUUCUUCUCACCCUAACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-37.62345505 312.19796753]
[-50.25197983 303.45156860]
[-59.51692963 315.24819946]
[-68.78187561 327.04486084]
[-78.04682922 338.84149170]
[-87.31177521 350.63812256]
[-96.57672882 362.43478394]
[-105.84167480 374.23141479]
[-115.10662079 386.02804565]
[-124.37157440 397.82467651]
[-118.04861450 411.76309204]
[-118.93898010 427.04266357]
[-126.83808136 440.15231323]
[-139.93075562 448.07952881]
[-155.20838928 449.00268555]
[-169.16032410 442.70962524]
[-178.58047485 430.64651489]
[-181.30418396 415.58529663]
[-176.70555115 400.98696899]
[-165.84130859 390.20611572]
[-151.20799255 385.72009277]
[-136.16821289 388.55975342]
[-126.90326691 376.76309204]
[-117.63831329 364.96646118]
[-108.37336731 353.16983032]
[-99.10841370 341.37316895]
[-89.84346771 329.57653809]
[-80.57851410 317.77990723]
[-71.31356812 305.98327637]
[-62.04861832 294.18661499]
[-73.03500366 284.46432495]
[-83.43920898 274.12136841]
[-93.22622681 263.19259644]
[-102.36312103 251.71475220]
[-110.81916046 239.72645569]
[-118.56587982 227.26803589]
[-125.57723236 214.38142395]
[-131.82962036 201.10997009]
[-137.30200195 187.49832153]
[-141.97598267 173.59228516]
[-145.83581543 159.43864441]
[-148.86851501 145.08502197]
[-151.06390381 130.57971191]
[-152.41456604 115.97150421]
[-152.91596985 101.30956268]
[-152.56642151 86.64321899]
[-151.36709595 72.02181244]
[-149.32205200 57.49454117]
[-146.43814087 43.11028290]
[-142.72508240 28.91742897]
[-138.19537354 14.96373653]
[-132.86422729 1.29615307]
[-126.74961090 -12.03933716]
[-119.87208557 -24.99786568]
[-112.25478363 -37.53583527]
[-103.92334747 -49.61105728]
[-94.90579987 -61.18290710]
[-85.23248291 -72.21244812]
[-74.93594360 -82.66257477]
[-64.05081940 -92.49812317]
[-52.61374283 -101.68600464]
[-40.66319275 -110.19530487]
[-28.23937225 -117.99739075]
[-15.38408566 -125.06601715]
[-2.14058423 -131.37739563]
[11.44657421 -136.91029358]
[25.33167458 -141.64610291]
[39.46799850 -145.56887817]
[53.80798721 -148.66543579]
[68.30339050 -150.92533875]
[82.90543365 -152.34098816]
[97.56500244 -152.90763855]
[112.23275757 -152.62335205]
[126.85935211 -151.48912048]
[141.39558411 -149.50872803]
[155.79252625 -146.68885803]
[170.00177002 -143.03898621]
[183.97547913 -138.57141113]
[197.66665649 -133.30114746]
[211.02922058 -127.24592590]
[224.01821899 -120.42613220]
[236.58996582 -112.86470032]
[248.70213318 -104.58708191]
[260.31399536 -95.62111664]
[271.38647461 -85.99697113]
[281.88232422 -75.74703979]
[292.97363281 -85.84568787]
[304.06494141 -95.94433594]
[315.15628052 -106.04298401]
[310.74551392 -120.65489960]
[313.11990356 -135.73219299]
[321.80801392 -148.28128052]
[335.08480835 -155.81051636]
[350.31417847 -156.82495117]
[364.47232056 -151.12319946]
[374.74810791 -139.83732605]
[379.10128784 -125.20816803]
[376.66754150 -110.14033508]
[367.93008423 -97.62556458]
[354.62371826 -90.14867401]
[339.39047241 -89.19420624]
[325.25491333 -94.95166779]
[314.16360474 -84.85301971]
[303.07229614 -74.75437164]
[291.98095703 -64.65572357]
[301.62298584 -52.69700241]
[310.52120972 -40.17498398]
[318.64279175 -27.13585663]
[325.95782471 -13.62772369]
[332.43930054 0.29958147]
[338.06329346 14.59468269]
[342.80908203 29.20484543]
[346.65911865 44.07617188]
[349.59924316 59.15380096]
[351.61859131 74.38211060]
[352.70974731 89.70492554]
[352.86862183 105.06572723]
[352.09466553 120.40782928]
[350.39071655 135.67465210]
[347.76309204 150.80987549]
[344.22146606 165.75765991]
[339.77893066 180.46286011]
[334.45181274 194.87123108]
[328.25979614 208.92961121]
[321.22573853 222.58616638]
[313.37557983 235.79049683]
[304.73828125 248.49388123]
[295.34570312 260.64947510]
[285.23248291 272.21243286]
[274.43594360 283.14010620]
[262.99591064 293.39218140]
[250.95457458 302.93081665]
[238.35636902 311.72085571]
[225.24777222 319.72982788]
[211.67712402 326.92822266]
[197.69450378 333.28948975]
[183.35148621 338.79013062]
[168.70098877 343.40988159]
[153.79704285 347.13171387]
[138.69465637 349.94183350]
[123.44950867 351.82995605]
[108.11786652 352.78903198]
[92.75627136 352.81561279]
[77.42140198 351.90951538]
[62.16982269 350.07412720]
[47.05779648 347.31625366]
[32.14107895 343.64599609]
[17.47469330 339.07690430]
[3.11274314 333.62588501]
[-10.89178848 327.31301880]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 30]
[3 29]
[4 28]
[5 27]
[6 26]
[7 25]
[8 24]
[9 23]
[10 22]
[86 105]
[87 104]
[88 103]
[89 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
