%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUACCCUCCCUUAGCAGGGAACUACUCCCACCCUGGAGCCUCCGUAGACCUAACCAUCUUCUCxxxxxxxxxxAUCAACUGCAACUCCAAAGCCACCCCUCACCCACUAGGAUACCAACAAACCUACCCACCCUUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[234.00320435 223.32206726]
[223.03175354 213.09332275]
[212.06031799 202.86456299]
[200.78684998 192.96966553]
[189.22149658 183.41757202]
[177.65614319 173.86546326]
[166.09080505 164.31335449]
[151.35061646 162.17417908]
[145.63752747 147.42048645]
[134.07217407 137.86839294]
[122.50682831 128.31628418]
[110.94148254 118.76417542]
[104.39766693 122.84205627]
[96.35476685 124.53253174]
[87.71404266 123.30165863]
[79.55831909 118.96244049]
[73.01764679 111.73281097]
[60.90005875 120.57385254]
[48.78247070 129.41490173]
[36.66487885 138.25593567]
[24.54729271 147.09698486]
[18.40550995 162.30259705]
[2.13070297 164.31820679]
[-7.53500223 151.07032776]
[-0.64835721 136.18725586]
[15.70624828 134.97940063]
[27.82383728 126.13835144]
[39.94142532 117.29730988]
[52.05901337 108.45626831]
[64.17659760 99.61521912]
[49.30379486 101.56448364]
[36.02735901 108.54562378]
[21.04644775 109.30210876]
[7.13429308 103.69390106]
[-3.13371420 92.75918579]
[-7.85678291 78.52217102]
[-6.16058826 63.61838150]
[1.64087391 50.80677795]
[14.10341263 42.45901489]
[28.91999054 40.12041855]
[43.34778976 44.22389603]
[54.71597290 54.00982666]
[60.92042542 67.66828918]
[71.47113037 78.33049011]
[67.32375336 63.91524887]
[63.17636871 49.50000381]
[59.02898407 35.08476257]
[54.88160324 20.66951942]
[40.02697372 22.90445328]
[25.00770569 23.18128777]
[10.08080292 21.49528694]
[-4.49831676 17.87530136]
[-18.48018456 12.38327217]
[-31.62555313 5.11317635]
[-43.70948792 -3.81058598]
[-54.52521896 -14.23531723]
[-63.88766861 -25.98263550]
[-71.63664246 -38.85153198]
[-77.63953400 -52.62179947]
[-81.79364014 -67.05780792]
[-84.02786255 -81.91255188]
[-84.30398560 -96.93183136]
[-82.61727142 -111.85865021]
[-78.99658966 -126.43759918]
[-73.50389862 -140.41920471]
[-66.23317719 -153.56422424]
[-57.30883789 -165.64773560]
[-46.88359451 -176.46296692]
[-35.13582993 -185.82485962]
[-22.26656532 -193.57322693]
[-8.49601173 -199.57546997]
[5.94019842 -203.72888184]
[20.79504204 -205.96240234]
[35.81433487 -206.23780823]
[50.74107742 -204.55038452]
[65.31985474 -200.92900085]
[79.30120087 -195.43563843]
[92.44587708 -188.16429138]
[104.52896118 -179.23937988]
[115.34369659 -168.81362915]
[124.70503235 -157.06541443]
[132.45277405 -144.19578552]
[138.45436096 -130.42494202]
[142.60708618 -115.98853302]
[144.83990479 -101.13358307]
[145.11459351 -86.11428070]
[143.42645264 -71.18761444]
[139.80439758 -56.60901260]
[134.31036377 -42.62792969]
[127.03839111 -29.48360062]
[118.11290741 -17.40093994]
[107.68663025 -6.58669901]
[95.93797302 2.77407527]
[83.06797028 10.52120876]
[69.29684448 16.52213669]
[73.44422913 30.93737984]
[77.59161377 45.35262299]
[81.73899078 59.76786423]
[85.88637543 74.18310547]
[116.55509949 80.51005554]
[120.49359131 107.19882202]
[132.05892944 116.75093079]
[143.62428284 126.30303955]
[155.18963623 135.85514832]
[170.75704956 138.67755127]
[175.64291382 152.74800110]
[187.20825195 162.30010986]
[198.77360535 171.85221863]
[210.33894348 181.40432739]
[215.59841919 182.28172302]
[219.57009888 184.85885620]
[221.81773376 188.34542847]
[222.28907776 191.89311218]
[233.26051331 202.12187195]
[244.23196411 212.35063171]
[255.93714905 202.92887878]
[268.86407471 195.26892090]
[282.74960327 189.52670288]
[297.31100464 185.81913757]
[312.25186157 184.22169495]
[327.26797485 184.76689148]
[342.05364990 187.44364929]
[356.30783081 192.19746399]
[369.74035645 198.93153381]
[382.07775879 207.50878906]
[393.06884766 217.75460815]
[402.48989868 229.46037292]
[410.14904785 242.38778687]
[415.89041138 256.27365112]
[419.59707642 270.83529663]
[421.19357300 285.77624512]
[420.64746094 300.79232788]
[417.96978760 315.57781982]
[413.21508789 329.83172607]
[406.48019409 343.26382446]
[397.90216064 355.60070801]
[387.65567017 366.59115601]
[375.94934082 376.01147461]
[363.02142334 383.66983032]
[349.13519287 389.41030884]
[334.57333374 393.11608887]
[319.63229370 394.71170044]
[304.61624146 394.16461182]
[289.83093262 391.48602295]
[275.57730103 386.73046875]
[262.14559937 379.99472046]
[249.80928040 371.41595459]
[238.81944275 361.16876221]
[229.39987183 349.46185303]
[221.74230957 336.53347778]
[216.00267029 322.64688110]
[212.29780579 308.08477783]
[210.70314026 293.14364624]
[211.25112915 278.12762451]
[213.93063354 263.34246826]
[218.68708801 249.08915710]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 115]
[2 114]
[3 113]
[4 109]
[5 108]
[6 107]
[7 106]
[9 104]
[10 103]
[11 102]
[12 101]
[17 30]
[18 29]
[19 28]
[20 27]
[21 26]
[44 99]
[45 98]
[46 97]
[47 96]
[48 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
