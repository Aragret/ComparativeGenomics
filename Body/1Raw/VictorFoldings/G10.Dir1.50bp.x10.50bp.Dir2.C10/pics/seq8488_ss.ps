%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCACCCAACUAUCUAUAAACCUAGCCAUGGCCAUCCCCUUAUGAGCGGGCACAGUGAUUAUxxxxxxxxxxAACAGGUCAACCUCGCUUCCCCACCCUUACUAACAUUAACGAAAAUAACCCCACCCUACUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[142.83778381 138.48783875]
[130.16625977 130.46083069]
[117.49474335 122.43383789]
[104.82322693 114.40683746]
[89.83587646 113.79101562]
[76.54853058 120.75137329]
[63.26119232 127.71173096]
[49.97385025 134.67208862]
[36.83221817 141.90379333]
[23.84183884 149.40379333]
[10.85145760 156.90379333]
[-2.13892317 164.40379333]
[-15.12930393 171.90379333]
[-10.92700100 186.38150024]
[-10.31225491 201.44421387]
[-13.32080460 216.21621704]
[-19.77773857 229.83868408]
[-29.30765915 241.51960754]
[-41.35651016 250.57987976]
[-55.22378540 256.49276733]
[-70.10325623 258.91448975]
[-85.12985992 257.70422363]
[-99.42996216 252.93237305]
[-112.17217255 244.87634277]
[-122.61567688 234.00451660]
[-130.15330505 220.94895935]
[-134.34683228 206.46870422]
[-134.95243835 191.40562439]
[-131.93493652 176.63545227]
[-125.46974945 163.01690674]
[-115.93274689 151.34175110]
[-103.87841034 142.28878784]
[-90.00755310 136.38430786]
[-75.12660980 133.97161865]
[-60.10074615 135.19097900]
[-45.80354309 139.97149658]
[-33.06621552 148.03524780]
[-22.62930489 158.91340637]
[-9.63892269 151.41340637]
[3.35145783 143.91340637]
[16.34183884 136.41340637]
[29.33222008 128.91340637]
[31.42203331 124.55657959]
[36.30305099 121.49658966]
[43.01349640 121.38474274]
[56.30083847 114.42438507]
[69.58818054 107.46402740]
[82.87551880 100.50367737]
[67.88153076 100.07910156]
[58.08195496 88.72267914]
[59.85684967 73.82805634]
[72.05066681 65.09245300]
[86.72456360 68.20320892]
[94.32497406 81.13462830]
[94.01699829 66.13778687]
[93.70902252 51.14094925]
[93.40103912 36.14411163]
[92.93911743 21.15122604]
[92.32328796 6.16387367]
[77.43411255 4.01280403]
[63.19379044 -0.83774436]
[50.08733749 -8.22256279]
[38.56115723 -17.89012909]
[29.00782776 -29.51116753]
[21.75273132 -42.68986893]
[17.04297256 -56.97737503]
[15.03896427 -71.88705444]
[15.80896473 -86.91109467]
[19.32674408 -101.53778076]
[25.47249222 -115.26892853]
[34.03688431 -127.63686371]
[44.72822189 -138.22033691]
[57.18236160 -146.65888977]
[70.97512054 -152.66508484]
[85.63671875 -156.03437805]
[100.66779327 -156.65199280]
[115.55638885 -154.49691772]
[129.79541016 -149.64253235]
[142.89987183 -142.25418091]
[154.42344666 -132.58351135]
[163.97363281 -120.95989227]
[171.22518921 -107.77923584]
[175.93109131 -93.49046326]
[177.93107605 -78.58023834]
[177.15702820 -63.55640793]
[173.63529968 -48.93067551]
[167.48585510 -35.20118332]
[158.91813660 -22.83555794]
[148.22393799 -12.25496387]
[135.76753235 -3.81977534]
[121.97315216 2.18270946]
[107.31064606 5.54804802]
[107.92646790 20.53540230]
[111.36467743 27.13016510]
[108.39788055 35.83613586]
[108.70585632 50.83297348]
[109.01383209 65.82981110]
[109.32181549 80.82665253]
[115.10962677 91.90155029]
[112.85022736 101.73532104]
[125.52174377 109.76232147]
[138.19325256 117.78932190]
[150.86477661 125.81631470]
[160.37155151 114.18968201]
[171.21046448 103.79376221]
[183.22348022 94.78016663]
[196.23539734 87.28033447]
[210.05645752 81.40363312]
[224.48512268 77.23577118]
[239.31095886 74.83751678]
[254.31779480 74.24385834]
[269.28677368 75.46343994]
[283.99957275 78.47848511]
[298.24166870 83.24501801]
[311.80538940 89.69353485]
[324.49288940 97.72998810]
[336.11917114 107.23719788]
[346.51467896 118.07650757]
[355.52783203 130.08985901]
[363.02716064 143.10205078]
[368.90335083 156.92332458]
[373.07067871 171.35214233]
[375.46838379 186.17808533]
[376.06146240 201.18493652]
[374.84133911 216.15385437]
[371.82574463 230.86656189]
[367.05865479 245.10848999]
[360.60964966 258.67193604]
[352.57272339 271.35913086]
[343.06506348 282.98507690]
[332.22537231 293.38018799]
[320.21170044 302.39288330]
[307.19921875 309.89172363]
[293.37771606 315.76739502]
[278.94873047 319.93417358]
[264.12271118 322.33132935]
[249.11584473 322.92385864]
[234.14695740 321.70315552]
[219.43437195 318.68701172]
[205.19262695 313.91943359]
[191.62940979 307.46990967]
[178.94250488 299.43249512]
[167.31694031 289.92440796]
[156.92224121 279.08432007]
[147.90998840 267.07031250]
[140.41160583 254.05754089]
[134.53646851 240.23582458]
[130.37022400 225.80670166]
[127.97363281 210.98057556]
[127.38165283 195.97367859]
[128.60292053 181.00485229]
[131.61961365 166.29237366]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 103]
[2 102]
[3 101]
[4 100]
[5 48]
[6 47]
[7 46]
[8 45]
[9 42]
[10 41]
[11 40]
[12 39]
[13 38]
[54 98]
[55 97]
[56 96]
[57 95]
[58 93]
[59 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
