%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUACUAACAGACCGCAACCUCAACACCACCUUCUUCGACCCCGCCGGAGGAGGAGACCCCxxxxxxxxxxGAGAACUCUCUGUGCUAGUAACCACGUUCUCCUGAUCAAAUAUCACUCUCCUACUUACAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.34907532 121.88411713]
[83.08412170 133.68075562]
[73.81917572 145.47740173]
[64.55422974 157.27403259]
[62.39984131 175.53160095]
[45.92029572 181.48344421]
[43.80711365 197.16288757]
[29.97282791 202.68211365]
[20.95529747 214.66894531]
[18.84211540 230.34838867]
[5.00782967 235.86761475]
[-4.00969982 247.85444641]
[-1.54961896 263.46609497]
[-10.91660404 276.19540405]
[-26.55338860 278.49029541]
[-39.18294525 268.98922729]
[-41.31238556 253.32907104]
[-31.67834473 240.80065918]
[-15.99653244 238.83691406]
[-6.97900295 226.85008240]
[-5.51081419 212.02801514]
[8.96846485 205.65141296]
[17.98599434 193.66458130]
[19.45418358 178.84251404]
[33.93346405 172.46591187]
[32.55799484 160.40707397]
[40.02822876 150.33660889]
[52.75758743 148.00907898]
[62.02253723 136.21244812]
[71.28748322 124.41580200]
[80.55243683 112.61916351]
[79.23300171 105.23613739]
[69.33385468 116.50586700]
[54.35079956 115.79312134]
[45.56614304 103.63459015]
[49.59476852 89.18571472]
[63.40311050 83.32655334]
[76.59413910 90.47008514]
[75.27470398 83.08705139]
[62.49734879 75.22962952]
[49.71998978 67.37220001]
[36.94263458 59.51477814]
[24.16527748 51.65735245]
[11.38791943 43.79992676]
[-1.38943791 35.94250107]
[-14.16679478 28.08507347]
[-26.94415283 20.22764778]
[-41.72323227 25.33772087]
[-56.31081009 19.70419884]
[-63.81908035 5.98706007]
[-60.70286560 -9.33688259]
[-48.43354797 -19.03213120]
[-32.80432510 -18.52088737]
[-21.19483376 -8.04454327]
[-19.08672714 7.45029068]
[-6.30936956 15.30771637]
[6.46798801 23.16514206]
[19.24534607 31.02256775]
[32.02270126 38.87999344]
[44.80006027 46.73741913]
[57.57741547 54.59484482]
[70.35477448 62.45227051]
[83.13213348 70.30970001]
[75.68599701 57.28836441]
[68.23986053 44.26703262]
[56.84857178 34.50801086]
[49.64562225 21.35059738]
[47.56231308 6.49597359]
[50.86800385 -8.13523960]
[59.13528824 -20.65130997]
[71.29524994 -29.43398094]
[85.77568054 -33.34770203]
[100.70433807 -31.88644791]
[114.15102386 -25.23915672]
[124.37717438 -14.26528072]
[130.06059265 -0.38368249]
[130.46644592 14.61082554]
[125.54225922 28.77953911]
[115.92612457 40.28934860]
[110.74018860 54.36436844]
[105.55426025 68.43938446]
[116.85326385 58.57366180]
[128.15226746 48.70793915]
[139.45127869 38.84221649]
[150.75027466 28.97649193]
[162.04928589 19.11076927]
[147.58232117 15.14758492]
[141.46554565 1.45141387]
[148.16983032 -11.96695042]
[162.79489136 -15.29977036]
[174.65098572 -6.11102295]
[175.07254028 8.88245678]
[187.33489990 0.24334079]
[199.59727478 -8.39577579]
[199.68858337 -23.91258240]
[208.91011047 -36.39228821]
[223.71598816 -41.03619385]
[238.41304016 -36.05862045]
[247.34996033 -23.37354851]
[247.09031677 -7.85864496]
[237.73394775 4.52029181]
[222.87857056 9.00330830]
[208.23638916 3.86659288]
[195.97401428 12.50570869]
[183.71165466 21.14482498]
[171.91500854 30.40977478]
[160.61599731 40.27549744]
[149.31700134 50.14122009]
[138.01799011 60.00694275]
[126.71898651 69.87266541]
[115.41998291 79.73838806]
[119.08709717 90.51183319]
[117.16867065 99.95908356]
[131.74137878 103.51384735]
[146.31408691 107.06861115]
[160.88677979 110.62337494]
[175.28781128 103.55300903]
[189.73242188 110.53388977]
[193.13993835 126.21089172]
[182.89642334 138.55795288]
[166.85981750 138.10346985]
[157.33201599 125.19607544]
[142.75932312 121.64131165]
[128.18661499 118.08654785]
[113.61391449 114.53179169]
[124.69841766 124.63790894]
[135.78292847 134.74403381]
[146.86743164 144.85015869]
[160.93615723 150.05311584]
[173.31895447 158.51872253]
[183.27351379 169.73953247]
[190.20315552 183.04292297]
[193.69247437 197.63143921]
[193.53230286 212.63058472]
[189.73225403 227.14125061]
[182.52009583 240.29362488]
[172.32818604 251.29930115]
[159.76744080 259.49856567]
[145.59082031 264.39990234]
[130.64808655 265.70950317]
[115.83500671 263.34890747]
[102.03950500 257.45956421]
[90.08854675 248.39456177]
[80.69851685 236.69723511]
[74.43228149 223.06880188]
[71.66547394 208.32618713]
[72.56394196 193.35311890]
[77.07382202 179.04713440]
[84.92362976 166.26725769]
[87.39878082 151.47286987]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 31]
[2 30]
[3 29]
[4 28]
[6 25]
[8 23]
[9 22]
[11 20]
[12 19]
[39 63]
[40 62]
[41 61]
[42 60]
[43 59]
[44 58]
[45 57]
[46 56]
[47 55]
[81 111]
[82 110]
[83 109]
[84 108]
[85 107]
[86 106]
[92 105]
[93 104]
[94 103]
[113 125]
[114 124]
[115 123]
[116 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
