%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCUAGAGUCCAUAUCAACAAUAGGGUUUACGACCUCGAUGUUGGAUCAGGACAUCCCGAUGxxxxxxxxxxAAUCUUUGAAAUAGGGCCCGUAUUUACCCUAUAGCACCCCCUCUACCCCCUCUAGAGCCCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[205.56767273 283.97668457]
[199.29826355 270.34970093]
[193.02885437 256.72271729]
[186.75946045 243.09574890]
[180.49005127 229.46876526]
[173.66647339 216.11067200]
[166.30023193 203.04397583]
[158.93399048 189.97727966]
[151.56776428 176.91058350]
[144.20152283 163.84388733]
[136.83528137 150.77719116]
[129.33528137 137.78680420]
[121.70230865 124.87411499]
[106.33357239 130.99124146]
[90.64953613 128.77154541]
[78.69238281 119.48548126]
[73.19784546 106.13284302]
[58.21760941 105.36318207]
[43.23736572 104.59352112]
[28.25712585 103.82386017]
[16.57966042 114.13281250]
[1.39852893 113.13887024]
[-8.35751915 101.94266510]
[-23.33776093 101.17300415]
[-38.31800079 100.40334320]
[-53.30535507 99.78751373]
[-68.29824066 99.32559204]
[-83.29112244 98.86366272]
[-98.28401184 98.40174103]
[-106.42308807 111.35174561]
[-119.86261749 118.44228363]
[-134.94653320 117.85765839]
[-147.62773132 109.85494995]
[-154.55392456 96.66808319]
[-169.54679871 96.20615387]
[-184.53968811 95.74423218]
[-197.16569519 105.64187622]
[-212.74232483 101.80149078]
[-219.32049561 87.16908264]
[-211.85401917 72.96939850]
[-196.07052612 70.09519958]
[-184.07775879 80.75134277]
[-169.08488464 81.21327209]
[-154.09199524 81.67519379]
[-146.36714172 68.93972015]
[-133.21734619 61.73285675]
[-118.12605286 62.07791901]
[-105.14850616 69.98236084]
[-97.82208252 83.40885162]
[-82.82920074 83.87078094]
[-67.83631134 84.33270264]
[-52.84342957 84.79463196]
[-46.01880646 81.83882904]
[-37.54833984 85.42310333]
[-22.56809998 86.19276428]
[-7.58785868 86.96241760]
[3.26427460 76.82502747]
[18.46733284 77.39217377]
[29.02678680 88.84362030]
[44.00702667 89.61328125]
[58.98726654 90.38294220]
[73.96750641 91.15260315]
[81.26921082 79.87229156]
[93.04469299 73.39942169]
[93.35266876 58.40258408]
[81.01904297 46.03857040]
[81.40477753 28.91598892]
[93.78593445 17.57535172]
[93.78593445 2.57535148]
[93.78593445 -12.42464828]
[80.01206207 -19.00061226]
[70.46214294 -30.90698242]
[67.03230286 -45.77974319]
[70.40354156 -60.66588974]
[79.90650940 -72.60977936]
[93.65437317 -79.23992920]
[108.91749573 -79.23992920]
[122.66535950 -72.60977936]
[132.16831970 -60.66588974]
[135.53956604 -45.77974319]
[132.10972595 -30.90698242]
[122.55980682 -19.00061226]
[108.78593445 -12.42464828]
[108.78593445 2.57535148]
[108.78593445 17.57535172]
[119.10578918 25.35050201]
[123.10451508 37.84205246]
[119.10115051 50.53670502]
[108.34951019 58.71056366]
[108.04153442 73.70739746]
[121.14765167 78.36646271]
[131.33992004 89.63074493]
[144.48155212 82.39904022]
[157.62318420 75.16733551]
[170.76480103 67.93563843]
[183.90643311 60.70393372]
[197.04806519 53.47223282]
[197.28318787 38.11513901]
[205.17912292 24.94131088]
[218.61190796 17.49443817]
[233.96818542 17.77769661]
[247.11720276 25.71488762]
[254.52194214 39.17094803]
[254.19055176 54.52626419]
[246.21217346 67.65033722]
[232.73297119 75.01284790]
[217.37876892 74.63333130]
[204.27976990 66.61386108]
[191.13813782 73.84556580]
[177.99650574 81.07727051]
[164.85487366 88.30896759]
[151.71324158 95.54067230]
[138.57160950 102.77237701]
[134.61500549 117.24114227]
[142.24797058 130.15383911]
[149.35350037 135.99398804]
[149.90197754 143.41094971]
[157.26821899 156.47764587]
[164.63444519 169.54434204]
[172.00068665 182.61103821]
[179.36692810 195.67773438]
[186.73316956 208.74443054]
[190.67689514 210.87673950]
[193.42539978 213.87161255]
[194.85333252 217.23431396]
[195.01351929 220.48139954]
[194.11703491 223.19935608]
[200.38642883 236.82633972]
[206.65583801 250.45332336]
[212.92524719 264.08029175]
[219.19465637 277.70727539]
[234.06535339 275.15298462]
[249.09037781 276.53549194]
[263.24526978 281.76058960]
[275.56491089 290.47195435]
[285.20938110 302.07571411]
[291.52105713 315.78063965]
[294.06964111 330.65234375]
[292.68130493 345.67681885]
[287.45074463 359.82968140]
[278.73461914 372.14599609]
[267.12713623 381.78594971]
[253.41978455 388.09234619]
[238.54710388 390.63516235]
[223.52316284 389.24105835]
[209.37231445 384.00503540]
[197.05937195 375.28411865]
[187.42388916 363.67294312]
[181.12278748 349.96313477]
[178.58570862 335.08947754]
[179.98564148 320.06607056]
[185.22711182 305.91726685]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 131]
[2 130]
[3 129]
[4 128]
[5 127]
[6 122]
[7 121]
[8 120]
[9 119]
[10 118]
[11 117]
[12 115]
[13 114]
[17 62]
[18 61]
[19 60]
[20 59]
[23 56]
[24 55]
[25 54]
[26 52]
[27 51]
[28 50]
[29 49]
[34 44]
[35 43]
[36 42]
[64 90]
[65 89]
[68 85]
[69 84]
[70 83]
[92 113]
[93 112]
[94 111]
[95 110]
[96 109]
[97 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
