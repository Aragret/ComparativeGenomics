%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCGAUGAGGCAACCAGCCAGAACGCCUGAACGCAGGCACAUACUUCCUAUUCUACACCCUAxxxxxxxxxxCAUUCUCAACCCCCUGACAAAACACAUAGCCUACCCCUUCCUUGUACUAUCCCUAUGAGGCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[120.89178467 261.93206787]
[120.89178467 246.93208313]
[120.89178467 231.93208313]
[120.89178467 216.93208313]
[120.89178467 201.93208313]
[120.89178467 186.93208313]
[120.89178467 171.93208313]
[120.89178467 156.93208313]
[120.89178467 141.93208313]
[120.89178467 126.93208313]
[114.26176453 123.42596436]
[107.24953461 136.68600464]
[100.23730469 149.94604492]
[93.22485352 163.20596313]
[79.96504974 156.19329834]
[86.97726440 142.93382263]
[93.98949432 129.67378235]
[101.00172424 116.41374207]
[94.37170410 112.90762329]
[81.97404480 121.35144043]
[69.57638550 129.79525757]
[65.18555450 145.22575378]
[50.32888794 151.28042603]
[36.40315628 143.31465149]
[34.09098816 127.43909454]
[45.16608047 115.83211517]
[61.13256836 117.39760590]
[73.53022766 108.95378876]
[85.92788696 100.50996399]
[93.60272217 87.62210846]
[95.12024689 72.69907379]
[84.43754578 83.22901917]
[70.27193451 78.29589844]
[68.44086456 63.40808105]
[80.99009705 55.18939590]
[66.08319855 53.52071762]
[51.17630386 51.85203934]
[36.26940918 50.18336487]
[21.36251450 48.51468658]
[6.56134176 55.57565689]
[-6.79914236 46.06621552]
[-4.97481680 29.76885796]
[10.15760803 23.44890976]
[23.03119087 33.60779190]
[37.93808746 35.27647018]
[52.84498215 36.94514465]
[67.75187683 38.61382294]
[82.65876770 40.28250122]
[95.69952393 32.87043381]
[101.89301300 19.20878410]
[108.08650970 5.54713488]
[94.98309326 -1.77182639]
[82.53808594 -10.16159248]
[70.83876038 -19.56331444]
[59.96718979 -29.91104317]
[49.99962997 -41.13219833]
[41.00599670 -53.14806747]
[33.04937744 -65.87436676]
[26.18558311 -79.22183990]
[20.46275711 -93.09683990]
[15.92104053 -107.40206146]
[12.59229279 -122.03715515]
[10.49986267 -136.89947510]
[9.65842628 -151.88475037]
[10.07388783 -166.88787842]
[11.74333000 -181.80361938]
[14.65504551 -196.52735901]
[18.78860855 -210.95581055]
[24.11502647 -224.98776245]
[30.59693718 -238.52481079]
[38.18887329 -251.47196960]
[46.83758163 -263.73843384]
[56.48239899 -275.23818970]
[67.05567169 -285.89053345]
[78.48323059 -295.62075806]
[90.68492126 -304.36062622]
[103.57516479 -312.04882812]
[117.06352997 -318.63140869]
[131.05540466 -324.06222534]
[145.45266724 -328.30319214]
[160.15429688 -331.32452393]
[175.05718994 -333.10504150]
[190.05680847 -333.63229370]
[205.04794312 -332.90252686]
[219.92543030 -330.92089844]
[234.58491516 -327.70129395]
[248.92358398 -323.26626587]
[262.84085083 -317.64700317]
[276.23907471 -310.88284302]
[289.02432251 -303.02127075]
[301.10687256 -294.11740112]
[312.40197754 -284.23373413]
[322.83041382 -273.43957520]
[332.31903076 -261.81060791]
[340.80130005 -249.42845154]
[348.21768188 -236.37994385]
[354.51617432 -222.75660706]
[359.65261841 -208.65399170]
[363.59094238 -194.17103577]
[366.30355835 -179.40931702]
[367.77139282 -164.47238159]
[367.98419189 -149.46501160]
[366.94046021 -134.49246216]
[364.64749146 -119.65975952]
[361.12139893 -105.07096100]
[356.38690186 -90.82837677]
[350.47723389 -77.03192139]
[343.43380737 -63.77837372]
[335.30603027 -51.16068649]
[326.15093994 -39.26737213]
[316.03274536 -28.18185616]
[305.02243042 -17.98189354]
[293.19720459 -8.73903084]
[280.64001465 -0.51810223]
[267.43893433 6.62322712]
[253.68661499 12.63486576]
[239.47946167 17.47464561]
[224.91716003 21.10861778]
[210.10183716 23.51129341]
[195.13742065 24.66581917]
[180.12889099 24.56409454]
[165.18150330 23.20683670]
[150.40011597 20.60356331]
[135.88839722 16.77253532]
[121.74815369 11.74062443]
[115.55466461 25.40227509]
[109.36117554 39.06392288]
[122.71440887 55.99597549]
[110.04328918 74.21659851]
[108.52576447 89.13963318]
[110.12393188 74.22501373]
[116.65873718 60.72329712]
[127.36438751 50.21667862]
[140.98634338 43.93637466]
[155.92832947 42.61834335]
[170.43936157 46.41703796]
[182.81895447 54.88731003]
[191.61642456 67.03656769]
[195.80084229 81.44110107]
[194.88185120 96.41292572]
[188.96713257 110.19756317]
[178.74981689 121.17965698]
[165.42721558 128.07228088]
[150.56053162 130.06771851]
[135.89178467 126.93208313]
[135.89178467 141.93208313]
[135.89178467 156.93208313]
[135.89178467 171.93208313]
[135.89178467 186.93208313]
[135.89178467 201.93208313]
[135.89178467 216.93208313]
[135.89178467 231.93208313]
[135.89178467 246.93208313]
[135.89178467 261.93206787]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[19 29]
[20 28]
[21 27]
[30 130]
[31 129]
[35 48]
[36 47]
[37 46]
[38 45]
[39 44]
[49 127]
[50 126]
[51 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
