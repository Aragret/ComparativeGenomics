%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACUAUACUCAAUUGAUCCAAUAACUUGACCAACGGAACAAGUUACCCUAGGGAUAACAGCxxxxxxxxxxAAAGACGCCCUCGGCUUACUUCUCUUCCUUCUCUCCUUAAUGACAUUAACACUAUUCUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[93.60200500 486.08401489]
[93.60200500 471.08401489]
[93.60200500 456.08401489]
[93.60200500 441.08401489]
[93.60200500 426.08401489]
[93.60200500 411.08401489]
[93.60200500 396.08401489]
[93.60200500 381.08401489]
[93.60200500 366.08401489]
[93.60200500 351.08401489]
[79.05960846 347.53335571]
[65.78165436 340.60110474]
[54.54197693 330.68640137]
[45.99679565 318.36227417]
[40.64639282 304.34268188]
[38.80584335 289.44097900]
[40.58644104 274.52285767]
[45.88899231 260.45602417]
[54.40933228 248.05964661]
[65.65576172 238.05679321]
[78.97743225 231.03216553]
[93.60200500 227.39793396]
[93.60200500 212.39793396]
[93.60200500 197.39793396]
[93.60200500 182.39793396]
[93.60200500 167.39793396]
[84.01089478 152.73469543]
[93.26515198 136.84951782]
[92.95309448 121.85276794]
[82.39389038 114.73863220]
[77.24832916 103.09256744]
[62.54037094 100.14708710]
[47.83240891 97.20159912]
[33.12444687 94.25611877]
[18.41648483 91.31063843]
[3.70852375 88.36515808]
[-10.99943733 85.41967010]
[-28.26490593 91.73500824]
[-41.01214600 79.71386719]
[-55.77819824 77.07500458]
[-72.43399811 80.24055481]
[-80.08662415 65.11198425]
[-67.66773987 53.57041931]
[-53.13933563 62.30894852]
[-38.37327957 64.94781494]
[-28.23237228 58.27928162]
[-15.87465858 60.40198517]
[-8.05395508 70.71170807]
[6.65400648 73.65719604]
[21.36196709 76.60267639]
[36.06993103 79.54815674]
[50.77788925 82.49363708]
[65.48585510 85.43912506]
[80.19381714 88.38460541]
[84.71802521 82.86338043]
[90.71919250 78.99835968]
[97.61730957 77.16307068]
[104.74571228 77.53490448]
[112.46980286 64.67649841]
[120.19388580 51.81809998]
[127.91796875 38.95969772]
[135.64205933 26.10129356]
[143.36613464 13.24289131]
[143.83976746 -2.57122445]
[157.02615356 -9.49714565]
[146.28488159 -18.97281837]
[137.37492371 -30.18323135]
[130.57173157 -42.77982712]
[126.08521271 -56.37122726]
[124.05338287 -70.53540039]
[124.53800964 -84.83276367]
[127.52281189 -98.81981659]
[132.91395569 -112.06291962]
[140.54301453 -124.15170288]
[150.17227173 -134.71182251]
[161.50207520 -143.41653442]
[174.18016052 -149.99678040]
[187.81265259 -154.24954224]
[201.97627258 -156.04411316]
[216.23146057 -155.32606506]
[230.13604736 -152.11891174]
[243.25897217 -146.52339172]
[251.51127625 -159.04936218]
[259.76354980 -171.57531738]
[260.89462280 -187.35604858]
[274.35769653 -193.72743225]
[282.60998535 -206.25340271]
[283.03546143 -222.64701843]
[297.57269287 -230.23654175]
[311.26702881 -221.21450806]
[310.03091431 -204.86201477]
[295.13595581 -198.00111389]
[286.88366699 -185.47514343]
[286.34286499 -170.59036255]
[272.28952026 -163.32302856]
[264.03723145 -150.79705811]
[255.78494263 -138.27110291]
[267.05633545 -127.31996918]
[276.00338745 -114.39469147]
[282.28790283 -99.98085785]
[285.67166138 -84.62037659]
[286.02563477 -68.89109802]
[283.33477783 -53.38510513]
[277.69866943 -38.68640518]
[269.32781982 -25.34893990]
[258.53591919 -13.87570763]
[245.72796631 -4.69979668]
[231.38508606 1.83196712]
[216.04646301 5.47212410]
[200.28913879 6.08195877]
[184.70622253 3.63678527]
[169.88455200 -1.77306068]
[169.96340942 13.12133598]
[156.22454834 20.96697617]
[148.50045776 33.82537842]
[140.77636719 46.68378067]
[133.05229187 59.54218292]
[125.32820129 72.40058899]
[117.60411835 85.25898743]
[122.18878174 105.90425110]
[107.94984436 121.54071045]
[108.26190186 136.53746033]
[117.03498840 146.04992676]
[116.95056152 158.58834839]
[108.60200500 167.39793396]
[108.60200500 182.39793396]
[108.60200500 197.39793396]
[108.60200500 212.39793396]
[108.60200500 227.39793396]
[123.22657013 231.03216553]
[136.54823303 238.05679321]
[147.79467773 248.05964661]
[156.31501770 260.45602417]
[161.61756897 274.52285767]
[163.39816284 289.44097900]
[161.55760193 304.34268188]
[156.20721436 318.36227417]
[147.66203308 330.68640137]
[136.42234802 340.60110474]
[123.14439392 347.53335571]
[108.60200500 351.08401489]
[108.60200500 366.08401489]
[108.60200500 381.08401489]
[108.60200500 396.08401489]
[108.60200500 411.08401489]
[108.60200500 426.08401489]
[108.60200500 441.08401489]
[108.60200500 456.08401489]
[108.60200500 471.08401489]
[108.60200500 486.08401489]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[22 129]
[23 128]
[24 127]
[25 126]
[26 125]
[28 122]
[29 121]
[31 54]
[32 53]
[33 52]
[34 51]
[35 50]
[36 49]
[37 48]
[39 45]
[40 44]
[58 119]
[59 118]
[60 117]
[61 116]
[62 115]
[63 114]
[65 112]
[82 97]
[83 96]
[84 95]
[86 93]
[87 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
