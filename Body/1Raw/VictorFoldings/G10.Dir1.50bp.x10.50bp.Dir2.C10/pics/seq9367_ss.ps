%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUAAUUAUUACAUUUUGACUACCACAACUCAACGGCUACAUAGAAAAAUCCACCCCUUACxxxxxxxxxxUCGACUCAUUAAAUUAUGAUAAUCAUAUUUACCAAAUGCCCCUCAUUUACAUAAAUAUUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[78.98437500 293.88504028]
[78.98437500 278.88504028]
[78.98437500 263.88504028]
[78.98437500 248.88505554]
[78.98437500 233.88505554]
[78.98437500 218.88505554]
[78.98437500 203.88505554]
[78.98437500 188.88505554]
[78.98437500 173.88505554]
[78.98437500 158.88505554]
[66.82166290 115.60449982]
[89.84391022 96.30717468]
[77.23278046 88.18563080]
[64.62165833 80.06408691]
[52.01052856 71.94254303]
[42.84347153 83.82694244]
[32.70156097 94.89109802]
[21.65787697 105.05529022]
[9.79198647 114.24629211]
[-2.81061363 122.39788055]
[-16.05912018 129.45130920]
[-29.85807610 135.35577393]
[-44.10805893 140.06872559]
[-58.70639038 143.55619812]
[-73.54789734 145.79307556]
[-88.52563477 146.76322937]
[-103.53168488 146.45968628]
[-118.45793915 144.88461304]
[-133.19683838 142.04937744]
[-147.64219666 137.97441101]
[-161.68994141 132.68904114]
[-175.23883057 126.23138428]
[-188.19125366 118.64794922]
[-200.45390320 109.99338531]
[-211.93840027 100.33004761]
[-222.56201172 89.72756195]
[-232.24818420 78.26232147]
[-240.92713928 66.01692963]
[-248.53633118 53.07962036]
[-255.02095032 39.54360962]
[-260.33425903 25.50642204]
[-264.43798828 11.06920338]
[-267.30255127 -3.66402769]
[-268.90731812 -18.58711624]
[-269.24075317 -33.59253693]
[-268.30038452 -48.57217789]
[-266.09304810 -63.41810226]
[-262.63464355 -78.02334595]
[-257.95007324 -92.28268433]
[-252.07308960 -106.09336090]
[-245.04603577 -119.35588074]
[-236.91955566 -131.97468567]
[-227.75219727 -143.85884094]
[-217.61000061 -154.92274475]
[-206.56605530 -165.08665466]
[-194.69992065 -174.27734375]
[-182.09710693 -182.42860413]
[-168.84841919 -189.48168945]
[-155.04931641 -195.38578796]
[-140.79920959 -200.09837341]
[-126.20079041 -203.58547974]
[-111.35923004 -205.82196045]
[-96.38146210 -206.79173279]
[-81.37541962 -206.48780823]
[-66.44920349 -204.91235352]
[-51.71037674 -202.07673645]
[-37.26512146 -198.00138855]
[-23.21752548 -192.71566772]
[-9.66880131 -186.25764465]
[3.28343177 -178.67388916]
[15.54584980 -170.01901245]
[27.03009987 -160.35537720]
[37.65343857 -149.75260925]
[47.33931732 -138.28710938]
[56.01795578 -126.04150391]
[63.62681961 -113.10399628]
[70.11108398 -99.56781769]
[75.42403412 -85.53049469]
[79.52738190 -71.09317017]
[82.39157104 -56.35986328]
[83.99595642 -41.43673325]
[84.32897949 -26.43130302]
[83.38825226 -11.45168877]
[81.18053436 3.39418030]
[77.72174072 17.99933815]
[73.03680420 32.25854874]
[67.15946198 46.06908035]
[60.13206863 59.33141708]
[72.74319458 67.45295715]
[85.35432434 75.57450104]
[97.96545410 83.69604492]
[112.95815277 84.16408539]
[126.05130768 76.84497833]
[134.32182312 63.35760880]
[149.20649719 63.90116882]
[162.29965210 56.58206177]
[175.39280701 49.26295853]
[188.48596191 41.94385147]
[201.57911682 34.62474823]
[212.45448303 21.61848450]
[227.96304321 28.46833992]
[225.67408752 45.26705933]
[208.89822388 47.71789932]
[195.80506897 55.03700638]
[182.71191406 62.35611343]
[169.61875916 69.67521667]
[156.52560425 76.99432373]
[149.19160461 89.95818329]
[133.37040710 89.93813324]
[120.27725220 97.25724030]
[120.97840881 104.72439575]
[134.61317444 110.97683716]
[122.38071442 119.65869904]
[123.08186340 127.12585449]
[137.30863953 131.87966919]
[151.53541565 136.63348389]
[165.76220703 141.38729858]
[179.98898315 146.14111328]
[194.92788696 140.29229736]
[208.74221802 148.44973755]
[210.83480835 164.35572815]
[199.60038757 175.80856323]
[183.65705872 174.02261353]
[175.23516846 160.36788940]
[161.00839233 155.61407471]
[146.78160095 150.86026001]
[132.55482483 146.10644531]
[118.32804871 141.35263062]
[112.24212646 145.73573303]
[122.44820404 156.72828674]
[132.65428162 167.72082520]
[142.86035156 178.71337891]
[154.32658386 188.38423157]
[153.75296021 203.37326050]
[141.58114624 212.13949585]
[127.18296051 207.93328857]
[121.64443970 193.99316406]
[114.45305634 180.82942200]
[107.26167297 167.66567993]
[100.07028961 154.50195312]
[93.98437500 158.88505554]
[93.98437500 173.88505554]
[93.98437500 188.88505554]
[93.98437500 203.88505554]
[93.98437500 218.88505554]
[93.98437500 233.88505554]
[93.98437500 248.88505554]
[93.98437500 263.88504028]
[93.98437500 278.88504028]
[93.98437500 293.88504028]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 91]
[13 90]
[14 89]
[15 88]
[92 110]
[93 109]
[95 107]
[96 106]
[97 105]
[98 104]
[99 103]
[114 128]
[115 127]
[116 126]
[117 125]
[118 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
