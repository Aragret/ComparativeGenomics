%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAACCCCCCUCCUAAUACUAACUACCUGACUCCUACCCCUCACAAUCAUGGCAAGCCAACGxxxxxxxxxxACAAGAUAUUCGAAAAAUAGGAGGACUACUCAAAACCAUACCUCUCACUUCAACCUCCCUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[37.10589981 239.61091614]
[30.28232574 252.96902466]
[23.45874977 266.32711792]
[16.63517570 279.68521118]
[9.81159973 293.04330444]
[2.98802423 306.40142822]
[-3.83555102 319.75952148]
[-10.65912628 333.11761475]
[-17.48270226 346.47570801]
[-16.10133553 362.81658936]
[-29.71497345 371.95993042]
[-44.31906891 364.49987793]
[-44.89018250 348.11068726]
[-30.84080124 339.65213013]
[-24.01722527 326.29403687]
[-17.19365120 312.93594360]
[-10.37007523 299.57785034]
[-3.54649973 286.21972656]
[3.27707577 272.86163330]
[10.10065079 259.50354004]
[16.92422676 246.14544678]
[23.74780273 232.78733826]
[16.55493736 228.38923645]
[9.61504078 223.60192871]
[2.94915199 218.43989563]
[-3.42252159 212.91880798]
[-9.48066330 207.05540466]
[-15.20690823 200.86746216]
[-20.58389664 194.37371826]
[-25.59532738 187.59388733]
[-30.22600937 180.54850769]
[-34.46190262 173.25894165]
[-38.29016876 165.74728394]
[-41.69919586 158.03631592]
[-44.67865753 150.14939880]
[-47.21951675 142.11045837]
[-49.31406784 133.94384766]
[-50.95596695 125.67433929]
[-52.14023590 117.32700348]
[-52.86328125 108.92713165]
[-53.12290955 100.50019836]
[-52.91834259 92.07175446]
[-52.25019073 83.66733551]
[-51.12048340 75.31243896]
[-49.53264618 67.03237915]
[-47.49149323 58.85226440]
[-45.00320816 50.79689407]
[-42.07534027 42.89068222]
[-38.71675873 35.15760040]
[-34.93765259 27.62109375]
[-30.74947357 20.30400848]
[-26.16492081 13.22852516]
[-21.19789124 6.41609478]
[-15.86344242 -0.11263050]
[-10.17774773 -6.33785820]
[-4.15804195 -12.24071693]
[2.17742491 -17.80331039]
[8.80944633 -23.00877571]
[15.71791840 -27.84133530]
[8.08494759 -40.75403214]
[0.45197800 -53.66672897]
[-14.09147167 -61.24433517]
[-14.53037548 -77.63761139]
[-0.41322601 -85.98255920]
[13.73746300 -77.69461060]
[13.36467552 -61.29970169]
[20.99764633 -48.38700104]
[28.63061523 -35.47430420]
[36.56562042 -39.36626434]
[44.71195221 -42.79393387]
[53.04246902 -45.74589539]
[61.52942657 -48.21231842]
[70.14454651 -50.18497849]
[78.85912323 -51.65731049]
[87.64412689 -52.62440491]
[96.47029877 -53.08304214]
[105.30822754 -53.03169250]
[114.12847900 -52.47052765]
[122.90164948 -51.40142059]
[131.59854126 -49.82793045]
[140.19015503 -47.75529861]
[148.64787292 -45.19042969]
[156.94352722 -42.14186859]
[165.04948425 -38.61977005]
[172.93872070 -34.63587189]
[180.58497620 -30.20344353]
[187.96276855 -25.33725166]
[195.04751587 -20.05350685]
[204.92323303 -31.34378815]
[214.79893494 -42.63406754]
[224.67463684 -53.92434692]
[225.04380798 -69.96315002]
[237.90032959 -79.55947876]
[253.38177490 -75.35184479]
[259.61212158 -60.56798553]
[251.81196594 -46.54881668]
[235.96492004 -44.04864120]
[226.08921814 -32.75836182]
[216.21351624 -21.46808052]
[206.33779907 -10.17780113]
[237.76423645 33.15771103]
[252.35365295 84.66242981]
[267.33389282 83.89276886]
[282.31414795 83.12310791]
[297.29437256 82.35344696]
[301.71737671 67.85472870]
[310.83499146 55.74501801]
[323.54620361 47.48661804]
[338.31604004 44.07677460]
[353.36102295 45.92723465]
[366.86437988 52.81455612]
[377.19552612 63.90705490]
[383.10690308 77.86525726]
[383.88467407 93.00364685]
[379.43496704 107.49418640]
[370.29504395 119.58708191]
[357.56866455 127.82203674]
[342.79254150 131.20466614]
[327.75097656 129.32647705]
[314.26034546 122.41428375]
[303.94967651 111.30276489]
[298.06402588 97.33368683]
[283.08380127 98.10334778]
[268.10354614 98.87300873]
[253.12330627 99.64266968]
[252.78520203 110.17639160]
[251.72331238 120.66190338]
[249.94265747 131.04953003]
[247.45170593 141.29008484]
[244.26223755 151.33502197]
[240.38935852 161.13677979]
[235.85142517 170.64891052]
[230.66992188 179.82637024]
[224.86940002 188.62565613]
[218.47735596 197.00511169]
[211.52404785 204.92503357]
[204.04241943 212.34790039]
[196.06793213 219.23854065]
[187.63833618 225.56431580]
[178.79356384 231.29527283]
[169.57554626 236.40425110]
[160.02792358 240.86705017]
[150.19593811 244.66252136]
[140.12615967 247.77268982]
[129.86630249 250.18283081]
[119.46494293 251.88150024]
[108.97138977 252.86068726]
[98.43532562 253.11573792]
[87.90667725 252.64543152]
[77.43532562 251.45201111]
[67.07086182 249.54112244]
[56.86238861 246.92182922]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 22]
[2 21]
[3 20]
[4 19]
[5 18]
[6 17]
[7 16]
[8 15]
[9 14]
[59 68]
[60 67]
[61 66]
[88 100]
[89 99]
[90 98]
[91 97]
[102 125]
[103 124]
[104 123]
[105 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
