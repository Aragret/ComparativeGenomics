%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAAAAUAUUAAACACAAACUACCACCUACCUCCCUCACCAAAGCCCAUAAAAAUAAAAAAUUAxxxxxxxxxxUCGACUCAUUAAAUUAUGAUAAUCAUAUUUACCAAAUGCCCCUCAUUUACAUAAAUAUUAUACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[96.03266907 273.66021729]
[96.03266907 258.66021729]
[96.03266907 243.66023254]
[96.03266907 228.66023254]
[96.03266907 213.66023254]
[96.03266907 198.66023254]
[96.03266907 183.66023254]
[96.03266907 168.66023254]
[96.03266907 153.66023254]
[96.03266907 138.66023254]
[74.24363708 124.10327148]
[68.33284760 101.13977814]
[78.15564728 82.32441711]
[69.43627930 70.11898041]
[60.71691513 57.91354752]
[51.99754715 45.70811462]
[43.27818298 33.50267792]
[34.55881500 21.29724312]
[21.77588081 29.15709305]
[8.48114109 36.11630249]
[-5.26204538 42.14170456]
[-19.38818741 47.20458984]
[-33.82996368 51.28082657]
[-48.51855850 54.35099411]
[-63.38396454 56.40045547]
[-78.35534668 57.41944885]
[-93.36135864 57.40311813]
[-108.33049011 56.35153961]
[-123.19140625 54.26972198]
[-137.87327576 51.16759109]
[-152.30615234 47.05992889]
[-166.42123413 41.96630859]
[-180.15127563 35.91100311]
[-193.43083191 28.92287445]
[-206.19662476 21.03521729]
[-218.38783264 12.28562546]
[-229.94633484 2.71579289]
[-240.81706238 -7.62867498]
[-250.94819641 -18.69848251]
[-260.29147339 -30.44087410]
[-268.80236816 -42.79989243]
[-276.44030762 -55.71664429]
[-283.16891479 -69.12957001]
[-288.95611572 -82.97475433]
[-293.77432251 -97.18621063]
[-297.60058594 -111.69622040]
[-300.41665649 -126.43563843]
[-302.20910645 -141.33422852]
[-302.96942139 -156.32096863]
[-302.69396973 -171.32446289]
[-301.38409424 -186.27320862]
[-299.04595947 -201.09594727]
[-295.69076538 -215.72207642]
[-291.33450317 -230.08186340]
[-285.99789429 -244.10688782]
[-279.70642090 -257.73031616]
[-272.49002075 -270.88723755]
[-264.38311768 -283.51492310]
[-255.42430115 -295.55322266]
[-245.65631104 -306.94473267]
[-235.12567139 -317.63522339]
[-223.88258362 -327.57369995]
[-211.98060608 -336.71282959]
[-199.47645569 -345.00903320]
[-186.42974854 -352.42282104]
[-172.90263367 -358.91879272]
[-158.95957947 -364.46606445]
[-144.66703796 -369.03814697]
[-130.09312439 -372.61328125]
[-115.30728149 -375.17440796]
[-100.37996674 -376.70935059]
[-85.38232422 -377.21075439]
[-70.38582611 -376.67630005]
[-55.46193314 -375.10845947]
[-40.68177032 -372.51473999]
[-26.11576653 -368.90747070]
[-11.83334064 -364.30389404]
[2.09744620 -358.72592163]
[15.61020660 -352.20013428]
[28.64054489 -344.75759888]
[41.12636566 -336.43386841]
[53.00817108 -327.26852417]
[64.22933197 -317.30526733]
[74.73637390 -306.59161377]
[84.47923279 -295.17858887]
[93.41147614 -283.12054443]
[101.49053955 -270.47503662]
[108.67790985 -257.30224609]
[114.93935394 -243.66497803]
[120.24501801 -229.62821960]
[124.56962585 -215.25886536]
[127.89256287 -200.62538147]
[130.19799805 -185.79751587]
[131.47494507 -170.84591675]
[131.71733093 -155.84185791]
[130.92396545 -140.85682678]
[129.09866333 -125.96222687]
[126.25010681 -111.22905731]
[122.39187622 -96.72751617]
[117.54235840 -82.52671051]
[111.72465515 -68.69432068]
[104.96650696 -55.29625702]
[97.30010223 -42.39637756]
[88.76198578 -30.05614662]
[79.39284515 -18.33437920]
[69.23731995 -7.28693295]
[58.34381866 3.03354621]
[46.76425171 12.57787609]
[55.48361588 24.78331184]
[64.20298004 36.98874664]
[72.92234802 49.19418335]
[81.64171600 61.39961624]
[90.36108398 73.60505676]
[105.12014008 69.63798523]
[121.16377258 74.05564880]
[133.73323059 86.94194794]
[138.43917847 105.72557068]
[152.97239685 109.43847656]
[167.50561523 113.15137482]
[182.03883362 116.86428070]
[196.57203674 120.57717896]
[211.04904175 113.66371918]
[225.41694641 120.80115509]
[228.65393066 136.51425171]
[218.27684021 148.74928284]
[202.24610901 148.12055969]
[192.85914612 135.11039734]
[178.32592773 131.39749146]
[163.79270935 127.68459320]
[149.25949097 123.97168732]
[134.72627258 120.25878906]
[128.80287170 124.85914612]
[139.77691650 135.08512878]
[150.75094604 145.31109619]
[161.72499084 155.53706360]
[176.06959534 159.92250061]
[185.14657593 171.86437988]
[185.53298950 186.85940552]
[177.08312988 199.25294495]
[162.98342896 204.37138367]
[148.55088806 200.28454590]
[139.22805786 188.53359985]
[138.53022766 173.55108643]
[131.33883667 160.38734436]
[124.14745331 147.22360229]
[116.95606995 134.05986023]
[111.03266907 138.66023254]
[111.03266907 153.66023254]
[111.03266907 168.66023254]
[111.03266907 183.66023254]
[111.03266907 198.66023254]
[111.03266907 213.66023254]
[111.03266907 228.66023254]
[111.03266907 243.66023254]
[111.03266907 258.66021729]
[111.03266907 273.66021729]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 156]
[2 155]
[3 154]
[4 153]
[5 152]
[6 151]
[7 150]
[8 149]
[9 148]
[10 147]
[13 113]
[14 112]
[15 111]
[16 110]
[17 109]
[18 108]
[117 131]
[118 130]
[119 129]
[120 128]
[121 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
