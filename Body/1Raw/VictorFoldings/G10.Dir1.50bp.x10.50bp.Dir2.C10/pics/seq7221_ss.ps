%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUACACCACAUGAAACAUCCUAUCAUCUGUAGGCUCAUUCAUUUCUCUAACAGCAGUAAUxxxxxxxxxxAUCACCACCCAACAAUGACUAAUCAAACUAACCUCAAAACAAAUGAUAACCAUACACAACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.35114288 238.91207886]
[95.04315948 223.91523743]
[94.73518372 208.91839600]
[94.42720795 193.92155457]
[94.11923218 178.92472839]
[93.81125641 163.92788696]
[93.50327301 148.93104553]
[93.19529724 133.93420410]
[92.88732147 118.93737030]
[80.13406372 111.04088593]
[66.57216644 117.44985962]
[57.40094376 130.34169006]
[42.58800507 128.78411865]
[29.02610779 135.19308472]
[15.46421051 141.60206604]
[1.90231431 148.01103210]
[-0.09195227 157.33905029]
[-6.09557343 164.57286072]
[-14.64138699 168.14517212]
[-23.73173332 167.35969543]
[-31.30510330 162.52308655]
[-45.23582077 168.08502197]
[-59.16653442 173.64697266]
[-73.09725189 179.20890808]
[-75.93002319 194.37396240]
[-86.52856445 205.58442688]
[-101.51091766 209.26307678]
[-116.09628296 204.23606873]
[-125.63050842 192.10749817]
[-127.07125854 176.74755859]
[-119.95880890 163.05754089]
[-106.56269836 155.40588379]
[-91.15758514 156.23420715]
[-78.65918732 165.27818298]
[-64.72846985 159.71624756]
[-50.79775620 154.15431213]
[-36.86704254 148.59237671]
[-25.66234970 131.29942322]
[-4.50666142 134.44914246]
[9.05523491 128.04016113]
[22.61713219 121.63119507]
[36.17902756 115.22221375]
[44.38021088 102.78880310]
[60.16318893 103.88796997]
[73.72509003 97.47898865]
[78.55050659 91.19857025]
[84.50751495 87.39194489]
[90.61811829 86.10719299]
[95.99169159 87.05287170]
[99.93272400 89.65736389]
[107.02912903 76.44218445]
[114.12553406 63.22699738]
[121.22193909 50.01181793]
[128.31834412 36.79663467]
[135.41474915 23.58144951]
[122.90142059 15.29040527]
[111.20648956 5.88013315]
[100.42972565 -4.56907940]
[90.66307831 -15.96808052]
[81.98987579 -28.21961784]
[74.48410797 -41.21916199]
[68.20982361 -54.85580063]
[63.22054291 -69.01319122]
[59.55884171 -83.57054901]
[57.25595856 -98.40366364]
[56.33154297 -113.38599396]
[56.79347610 -128.38969421]
[58.63782501 -143.28678894]
[61.84884644 -157.95013428]
[66.39914703 -172.25465393]
[72.24990845 -186.07830811]
[79.35121155 -199.30314636]
[87.64246368 -211.81632996]
[97.05293274 -223.51109314]
[107.50232697 -234.28768921]
[118.90148926 -244.05413818]
[131.15316772 -252.72714233]
[144.15283203 -260.23269653]
[157.78958130 -266.50674438]
[171.94705200 -271.49578857]
[186.50447083 -275.15725708]
[201.33763123 -277.45989990]
[216.31997681 -278.38406372]
[231.32366943 -277.92187500]
[246.22071838 -276.07727051]
[260.88403320 -272.86599731]
[275.18847656 -268.31546021]
[289.01202393 -262.46447754]
[302.23672485 -255.36296082]
[314.74978638 -247.07148743]
[326.44439697 -237.66082764]
[337.22082520 -227.21125793]
[346.98709106 -215.81193542]
[355.65988159 -203.56010437]
[363.16522217 -190.56031799]
[369.43905640 -176.92346191]
[374.42785645 -162.76591492]
[378.08908081 -148.20843506]
[380.39144897 -133.37522888]
[381.31536865 -118.39287567]
[380.85293579 -103.38918304]
[379.00808716 -88.49216461]
[375.79656982 -73.82891846]
[371.24578857 -59.52454758]
[365.39459229 -45.70109558]
[358.29284668 -32.47649765]
[350.00115967 -19.96359253]
[340.59030151 -8.26913071]
[330.14056396 2.50710940]
[318.74105835 12.27318764]
[306.48910522 20.94578171]
[293.48919678 28.45089722]
[279.85223389 34.72450256]
[265.69458008 39.71307373]
[251.13705444 43.37404633]
[236.30381775 45.67618942]
[221.32144165 46.59985733]
[206.31776428 46.13717270]
[191.42077637 44.29207993]
[176.75758362 41.08032227]
[162.45327759 36.52930450]
[148.62992859 30.67785454]
[141.53352356 43.89303589]
[134.43711853 57.10821915]
[127.34071350 70.32340240]
[120.24430847 83.53858185]
[113.14791107 96.75376892]
[122.65579224 85.15203857]
[135.63238525 77.62820435]
[150.42468262 75.14067841]
[165.14840698 78.00632477]
[177.92800903 85.86010742]
[187.13557434 97.70159149]
[191.59822083 112.02237701]
[190.74748230 126.99822998]
[184.69172668 140.72149658]
[174.20236206 151.44404602]
[160.61555481 157.80003357]
[145.66201782 158.97979736]
[131.24659729 154.83305359]
[119.20555115 145.88803101]
[111.07271576 133.28419495]
[107.88415527 118.62939453]
[108.19213867 133.62623596]
[108.50011444 148.62306213]
[108.80809021 163.61990356]
[109.11606598 178.61674500]
[109.42404938 193.61358643]
[109.73202515 208.61041260]
[110.04000092 223.60725403]
[110.34797668 238.60409546]
[112.93375397 257.81253052]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 151]
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 45]
[11 44]
[13 42]
[14 41]
[15 40]
[16 39]
[21 37]
[22 36]
[23 35]
[24 34]
[50 127]
[51 126]
[52 125]
[53 124]
[54 123]
[55 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
