%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCAUACUAAUCUUAGUUACCGCUAACAACCUAUUCCAACUGUUCAUCGGCUGAGAGGGCxxxxxxxxxxCAGGUCAACCUCGCUUCCCCACCCUUACUAACAUUAACGAAAAUAACCCCACCCUACUAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[70.26632690 458.78918457]
[70.26632690 443.78918457]
[70.26632690 428.78918457]
[70.26632690 413.78918457]
[70.26632690 398.78918457]
[70.26632690 383.78918457]
[70.26632690 368.78918457]
[70.26632690 353.78918457]
[70.26632690 338.78918457]
[70.26632690 323.78918457]
[56.31936646 321.10244751]
[43.10926056 315.87261963]
[31.09550858 308.27987671]
[20.69631386 298.58663940]
[12.27402306 287.12847900]
[6.12250662 274.30255127]
[2.45690012 260.55368042]
[1.40608358 246.35910034]
[3.00814915 232.21180725]
[7.20902395 218.60345459]
[13.86429310 206.00726318]
[22.74416351 194.86155701]
[33.54139709 185.55451965]
[45.88194656 178.41067505]
[59.33790207 173.67959595]
[73.44233704 171.52711487]
[74.06631470 156.54010010]
[74.69029236 141.55308533]
[75.31427002 126.56606293]
[66.67515564 114.30369568]
[52.35255814 109.84688568]
[38.02996063 105.39006805]
[22.73100853 113.80905914]
[6.38834000 108.69034576]
[-1.07455337 93.65161896]
[-15.48676968 89.49373627]
[-29.89898491 85.33584595]
[-44.31120300 81.17796326]
[-54.44749451 92.58928680]
[-68.53447723 98.46463013]
[-83.77516174 97.63745880]
[-97.14350891 90.27198792]
[-105.98521423 77.83064270]
[-108.54475403 62.78366852]
[-104.31393433 48.11864471]
[-94.13278198 36.74732590]
[-80.02277374 30.92749596]
[-64.78546143 31.81468391]
[-51.44622421 39.23274231]
[-42.65358353 51.70880508]
[-40.15331268 66.76574707]
[-25.74109840 70.92362976]
[-11.32888222 75.08152008]
[3.08333397 79.23940277]
[13.41601849 71.47845459]
[26.52827644 71.10028076]
[37.61595154 78.46855164]
[42.48677444 91.06746674]
[56.80937195 95.52428436]
[71.13197327 99.98110199]
[74.66136169 84.88780212]
[85.65965271 73.49250031]
[101.26807404 69.25330353]
[95.30920410 54.59716034]
[104.57093811 42.93227768]
[106.43855286 28.04899788]
[108.30616760 13.16571712]
[110.17378235 -1.71756256]
[96.31729126 -7.73207855]
[84.71745300 -17.40784836]
[76.31462097 -29.96049881]
[71.78997040 -44.37244415]
[71.51029205 -59.47537231]
[75.49825287 -74.04496002]
[83.43058014 -86.90010834]
[94.66423035 -96.99871063]
[108.28853607 -103.52212524]
[123.19904327 -105.94152069]
[138.18702698 -104.06076813]
[152.03746033 -98.03234100]
[163.62756348 -88.34491730]
[172.01779175 -75.78383636]
[176.52795410 -61.36735153]
[176.79246521 -46.26414871]
[172.78987122 -31.69857597]
[164.84463501 -18.85140228]
[153.60084534 -8.76408672]
[139.96998596 -2.25436449]
[125.05706024 0.15005060]
[123.18944550 15.03333092]
[121.32183075 29.91661072]
[119.45422363 44.79988861]
[125.54666901 58.39147949]
[116.15135193 71.12091827]
[127.24266815 81.21956635]
[141.88616943 77.96874237]
[156.52967834 74.71791077]
[157.34335327 59.64341354]
[162.19500732 45.34782028]
[170.72459412 32.89195251]
[182.29917908 23.20012474]
[196.05984497 16.99153328]
[210.98545837 14.72689724]
[225.96844482 16.57426643]
[239.89695740 22.39655495]
[251.73742676 31.76171112]
[260.61117554 43.97477722]
[265.85974121 58.12945938]
[267.09365845 73.17539215]
[264.22131348 87.99606323]
[257.45590210 101.49168396]
[247.29945374 112.66078186]
[234.50561523 120.67454529]
[220.02380371 124.93829346]
[204.92864990 125.13563538]
[190.34031677 121.25191498]
[177.34136963 113.57534027]
[166.89639282 102.67556000]
[159.78050232 89.36141205]
[145.13699341 92.61224365]
[130.49349976 95.86306763]
[125.72610474 115.69907379]
[109.84233856 127.81282806]
[90.30128479 127.19004059]
[89.67730713 142.17706299]
[89.05332947 157.16407776]
[88.42935181 172.15109253]
[103.80176544 175.99565125]
[118.04833984 182.92054749]
[130.55958557 192.62699890]
[140.80073547 204.69734192]
[148.33467102 218.61285400]
[152.84051514 233.77619934]
[154.12733459 249.53695679]
[152.14222717 265.21957397]
[146.97247314 280.15231323]
[138.84173584 293.69601440]
[128.10034180 305.27148438]
[115.21021271 314.38421631]
[100.72500610 320.64553833]
[85.26632690 323.78918457]
[85.26632690 338.78918457]
[85.26632690 353.78918457]
[85.26632690 368.78918457]
[85.26632690 383.78918457]
[85.26632690 398.78918457]
[85.26632690 413.78918457]
[85.26632690 428.78918457]
[85.26632690 443.78918457]
[85.26632690 458.78918457]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[26 127]
[27 126]
[28 125]
[29 124]
[30 60]
[31 59]
[32 58]
[35 54]
[36 53]
[37 52]
[38 51]
[63 94]
[65 92]
[66 91]
[67 90]
[68 89]
[95 121]
[96 120]
[97 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
