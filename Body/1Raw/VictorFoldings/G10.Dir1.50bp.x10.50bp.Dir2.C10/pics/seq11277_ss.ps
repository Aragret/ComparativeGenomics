%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:33:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACUUUACUUCCUCUCUUUCUUCUUCCCACUCAUCCUAACCCUACUCCUAAUCACAUAACCxxxxxxxxxxGGACAACCAGUAAGCUACCCUUUUACCAUCAUUGGACAAGUAGCAUCCGUACUAUACUUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[89.26445770 297.32327271]
[89.26445770 282.32327271]
[89.26445770 267.32327271]
[89.26445770 252.32325745]
[89.26445770 237.32325745]
[89.26445770 222.32325745]
[89.26445770 207.32325745]
[89.26445770 192.32325745]
[89.26445770 177.32325745]
[89.26445770 162.32325745]
[87.70687866 147.40434265]
[84.60855865 132.72781372]
[79.38323975 110.86183929]
[89.69606781 98.32218170]
[77.80368805 89.18044281]
[65.91130829 80.03871155]
[54.01892853 70.89698029]
[42.12654877 61.75524521]
[31.97689247 72.81299591]
[20.90210533 82.94406128]
[8.98647404 92.07132721]
[-3.67931581 100.12534332]
[-16.99886703 107.04479980]
[-30.87080956 112.77704620]
[-45.18956375 117.27844238]
[-59.84615707 120.51473999]
[-74.72904205 122.46130371]
[-89.72494507 123.10331726]
[-104.71974182 122.43590546]
[-119.59931183 120.46412659]
[-134.25039673 117.20301056]
[-148.56150818 112.67736053]
[-162.42372131 106.92162323]
[-175.73153687 99.97961426]
[-188.38366699 91.90415192]
[-200.28381348 82.75671387]
[-211.34141541 72.60690308]
[-221.47233582 61.53197098]
[-230.59944153 49.61621094]
[-238.65327454 36.95030975]
[-245.57254028 23.63066101]
[-251.30459595 9.75863838]
[-255.80578613 -4.56018066]
[-259.04187012 -19.21681976]
[-260.98822021 -34.09973145]
[-261.63003540 -49.09564590]
[-260.96240234 -64.09043121]
[-258.99041748 -78.96997070]
[-255.72911072 -93.62101746]
[-251.20324707 -107.93206024]
[-245.44732666 -121.79418945]
[-238.50512695 -135.10191345]
[-230.42948914 -147.75392151]
[-221.28187561 -159.65394592]
[-211.13191223 -170.71141052]
[-200.05683899 -180.84216309]
[-188.14096069 -189.96910095]
[-175.47494507 -198.02276611]
[-162.15519714 -204.94184875]
[-148.28309631 -210.67370605]
[-133.96420288 -215.17469788]
[-119.30752563 -218.41058350]
[-104.42458344 -220.35673523]
[-89.42866516 -220.99832153]
[-74.43388367 -220.33049011]
[-59.55437469 -218.35829163]
[-44.90337372 -215.09675598]
[-30.59239197 -210.57070923]
[-16.73034286 -204.81459045]
[-3.42272735 -197.87220764]
[9.22917366 -189.79638672]
[21.12907028 -180.64860535]
[32.18639374 -170.49848938]
[42.31699371 -159.42327881]
[51.44376373 -147.50726318]
[59.49724197 -134.84114075]
[66.41614532 -121.52129364]
[72.14780426 -107.64910889]
[76.64859772 -93.33016205]
[79.88427734 -78.67343140]
[81.83021545 -63.79046631]
[82.47159576 -48.79453278]
[81.80355072 -33.79976654]
[79.83115387 -18.92028427]
[76.56941223 -4.26933002]
[72.04315948 10.04158878]
[66.28684235 23.90355873]
[59.34427261 37.21107483]
[51.26828384 49.86286545]
[63.16066360 59.00459671]
[75.05303955 68.14633179]
[86.94541931 77.28806305]
[98.83779907 86.42980194]
[113.41050720 89.98456573]
[128.17655945 87.34569550]
[142.94261169 84.70683289]
[157.70866394 82.06797028]
[172.47473145 79.42910767]
[176.55928040 75.97425842]
[181.10906982 74.61341858]
[185.23176575 75.16569519]
[188.24211121 77.11642456]
[203.14401245 75.40373230]
[212.96038818 63.30925369]
[228.09744263 61.78462601]
[239.56718445 71.21758270]
[254.46908569 69.50489044]
[269.37097168 67.79220581]
[282.21450806 57.59534836]
[297.36553955 63.87058640]
[299.23797607 80.16248322]
[285.90563965 89.71134186]
[271.08367920 82.69410706]
[256.18176270 84.40679932]
[241.27986145 86.11948395]
[232.24919128 97.90856934]
[217.16094971 99.85776520]
[204.85670471 90.30563354]
[189.95478821 92.01832581]
[175.11358643 94.19515991]
[160.34753418 96.83402252]
[145.58148193 99.47289276]
[130.81542969 102.11175537]
[116.04936981 104.75061798]
[111.85829926 110.97033691]
[124.29760742 119.35267639]
[115.91507721 131.79185486]
[103.47615051 123.40978241]
[99.28507996 129.62950134]
[102.38339996 144.30603027]
[109.11578369 130.90173340]
[121.57219696 122.54483032]
[136.52832031 121.39846802]
[150.11283875 127.75938416]
[158.80940247 139.98107910]
[160.36695862 154.89999390]
[154.38232422 168.65441895]
[142.40461731 177.68405151]
[127.53421783 179.65162659]
[113.62029266 174.04782104]
[104.26445770 162.32325745]
[104.26445770 177.32325745]
[104.26445770 192.32325745]
[104.26445770 207.32325745]
[104.26445770 222.32325745]
[104.26445770 237.32325745]
[104.26445770 252.32325745]
[104.26445770 267.32327271]
[104.26445770 282.32327271]
[104.26445770 297.32327271]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 130]
[12 129]
[14 93]
[15 92]
[16 91]
[17 90]
[18 89]
[94 124]
[95 123]
[96 122]
[97 121]
[98 120]
[102 119]
[103 118]
[106 115]
[107 114]
[108 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
