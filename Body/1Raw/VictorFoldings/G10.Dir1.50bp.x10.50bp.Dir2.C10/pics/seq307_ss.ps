%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAAACCCCCCCUCCCCCGCUUCUGGCCACAGCACUUAAACACAUCUCUGCCAAACCCCAAxxxxxxxxxxCACAUUCGAAGAACCCGUAUACAUAAAAUCUAGACAAAAAAGGAAGGAAUCGAACCCCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-21.61037064 317.01147461]
[-29.33445549 329.86987305]
[-37.05854034 342.72827148]
[-44.64844894 355.66635132]
[-52.10335922 368.68264771]
[-59.55826950 381.69894409]
[-67.01317596 394.71527100]
[-74.46808624 407.73156738]
[-81.92299652 420.74789429]
[-89.37790680 433.76419067]
[-88.77999878 450.15243530]
[-102.81552124 458.63394165]
[-117.04595184 450.48367310]
[-116.83222961 434.08590698]
[-102.39421844 426.30929565]
[-94.93930817 413.29296875]
[-87.48439789 400.27667236]
[-80.02948761 387.26034546]
[-72.57457733 374.24404907]
[-65.11966705 361.22772217]
[-57.66475677 348.21142578]
[-57.06575394 340.79611206]
[-49.91694260 335.00418091]
[-42.19285583 322.14578247]
[-34.46877289 309.28738403]
[-60.66954422 289.91671753]
[-84.11376953 267.28771973]
[-104.39923096 241.78863525]
[-121.17788696 213.85694885]
[-134.16189575 183.97184753]
[-143.12846375 152.64608765]
[-147.92378235 120.41709137]
[-162.90350342 121.19693756]
[-177.88322449 121.97677612]
[-191.33776855 131.35266113]
[-206.06787109 124.14459229]
[-206.92045593 107.76762390]
[-193.01846313 99.06896973]
[-178.66307068 106.99706268]
[-163.68334961 106.21721649]
[-148.70362854 105.43737793]
[-148.68286133 93.68379974]
[-148.10694885 81.94432831]
[-146.97715759 70.24516296]
[-145.29600525 58.61242294]
[-143.06727600 47.07207489]
[-140.29591370 35.64987946]
[-136.98811340 24.37134361]
[-133.15127563 13.26163673]
[-128.79396057 2.34556460]
[-123.92587280 -8.35250568]
[-118.55790710 -18.80869102]
[-112.70202637 -28.99964905]
[-106.37132263 -38.90262985]
[-99.57991028 -48.49552536]
[-92.34296417 -57.75692368]
[-84.67662811 -66.66614532]
[-76.59803009 -75.20330811]
[-68.12519073 -83.34934235]
[-59.27703476 -91.08607483]
[-50.07331085 -98.39623260]
[-40.53456116 -105.26348877]
[-30.68208885 -111.67251587]
[-20.53788185 -117.60900879]
[-10.12458706 -123.05972290]
[0.53454840 -128.01246643]
[11.41572857 -132.45620728]
[22.49466324 -136.38101196]
[33.74662018 -139.77813721]
[45.14648056 -142.63996887]
[56.66879272 -144.96014404]
[68.28784180 -146.73345947]
[79.97767639 -147.95597839]
[91.71221924 -148.62496948]
[103.46525574 -148.73892212]
[115.21055603 -148.29760742]
[126.92190552 -147.30198669]
[138.57315063 -145.75430298]
[150.13829041 -143.65798950]
[161.59149170 -141.01774597]
[172.90721130 -137.83944702]
[184.06016541 -134.13020325]
[195.02546692 -129.89828491]
[205.77864075 -125.15315247]
[216.29566956 -119.90539551]
[226.55307007 -114.16671753]
[236.52796936 -107.94993591]
[246.19808960 -101.26892853]
[255.54182434 -94.13861847]
[264.53833008 -86.57491302]
[273.16754150 -78.59469604]
[281.41015625 -70.21578979]
[289.24780273 -61.45689392]
[296.66299438 -52.33756638]
[303.63912964 -42.87816238]
[310.16067505 -33.09980011]
[316.21304321 -23.02430534]
[321.78277588 -12.67417431]
[326.85736084 -2.07251072]
[331.42553711 8.75701809]
[335.47708130 19.79023743]
[339.00296021 31.00251579]
[341.99526978 42.36882019]
[344.44735718 53.86378479]
[346.35375977 65.46173859]
[347.71017456 77.13679504]
[348.51364136 88.86289978]
[348.76229858 100.61385345]
[348.45565796 112.36344910]
[347.59432983 124.08543396]
[346.18029785 135.75366211]
[344.21670532 147.34207153]
[341.70788574 158.82478333]
[338.65951538 170.17619324]
[335.07836914 181.37092590]
[330.97241211 192.38401794]
[326.35086060 203.19087219]
[321.22399902 213.76736450]
[315.60327148 224.08987427]
[309.50122070 234.13537598]
[302.93151855 243.88143921]
[295.90875244 253.30628967]
[288.44866943 262.38891602]
[280.56790161 271.10900879]
[272.28402710 279.44714355]
[263.61553955 287.38467407]
[254.58180237 294.90390015]
[245.20298767 301.98800659]
[235.50003052 308.62121582]
[225.49456787 314.78866577]
[215.20895386 320.47665405]
[204.66615295 325.67245483]
[193.88970947 330.36447144]
[182.90365601 334.54220581]
[171.73252869 338.19635010]
[160.40126038 341.31878662]
[148.93516541 343.90246582]
[137.35981750 345.94168091]
[125.70108032 347.43185425]
[113.98496246 348.36965942]
[102.23762512 348.75299072]
[90.48529053 348.58105469]
[78.75419617 347.85415649]
[67.07053375 346.57394409]
[55.46038055 344.74331665]
[43.94965744 342.36630249]
[32.56406021 339.44824219]
[21.32900620 335.99563599]
[10.26957512 332.01620483]
[-0.58954126 327.51879883]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 25]
[2 24]
[3 23]
[4 21]
[5 20]
[6 19]
[7 18]
[8 17]
[9 16]
[10 15]
[32 41]
[33 40]
[34 39]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
