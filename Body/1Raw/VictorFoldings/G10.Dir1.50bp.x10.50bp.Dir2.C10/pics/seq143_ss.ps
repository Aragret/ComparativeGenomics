%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCGAACAUACUUACUAAAGUGUGUUAAUUAAUUAAUGCUUGUAGGACAUAAUAAUAACAAUxxxxxxxxxxCCUAACCAACAAACUUAAAAUAAAAUCCCCACUAUGCACAUUUUAUUUCUCCAACAUACUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.41829681 240.32522583]
[95.10623932 225.32847595]
[94.79418945 210.33172607]
[94.48213196 195.33496094]
[94.17007446 180.33821106]
[93.85801697 165.34146118]
[93.54595947 150.34471130]
[93.23390198 135.34796143]
[92.92185211 120.35120392]
[80.39588928 112.09890747]
[66.49333191 117.73086548]
[52.59077454 123.36282349]
[39.34819031 130.40795898]
[26.90874863 138.79010010]
[14.46930885 147.17224121]
[2.02986884 155.55438232]
[-10.40957165 163.93653870]
[-22.84901237 172.31867981]
[-35.28845215 180.70082092]
[-47.72789383 189.08296204]
[-60.16733170 197.46510315]
[-66.87292480 212.43063354]
[-83.21167755 213.83679199]
[-92.37567902 200.23704529]
[-84.93778992 185.62164307]
[-68.54947662 185.02566528]
[-56.11003494 176.64352417]
[-43.67059708 168.26138306]
[-31.23115540 159.87924194]
[-18.79171562 151.49708557]
[-6.35227442 143.11494446]
[6.08716583 134.73280334]
[18.52660561 126.35066223]
[30.96604729 117.96852112]
[16.01468658 116.76152039]
[3.59226656 108.35417175]
[-3.08570838 94.92269897]
[-2.29066491 79.94377899]
[5.77160263 67.29467773]
[19.01420021 60.24956512]
[34.00932312 60.63205338]
[46.87553024 68.34313202]
[54.28244019 81.38681793]
[54.31279755 96.38678741]
[46.95882034 109.46026611]
[60.86137390 103.82830811]
[74.76393127 98.19635773]
[81.67092896 84.88120270]
[78.26795197 70.27230835]
[74.86497498 55.66341400]
[71.46199799 41.05452347]
[60.79565811 29.36949730]
[65.44384003 15.21875000]
[62.04086304 0.60985702]
[47.00567245 1.19254100]
[32.13195419 -1.08099937]
[17.95738220 -6.12857723]
[4.99436188 -13.76772594]
[-6.28850412 -23.72229385]
[-15.48334694 -35.63243103]
[-22.25777817 -49.06759262]
[-26.36690521 -63.54210663]
[-27.66218948 -78.53273010]
[-26.09680367 -93.49755859]
[-21.72733688 -107.89562225]
[-14.71174240 -121.20644379]
[-5.30363035 -132.94883728]
[6.15690327 -142.69833374]
[19.25556755 -150.10249329]
[33.51885223 -154.89364624]
[48.43114853 -156.89862061]
[63.45338821 -156.04490662]
[78.04252625 -152.36338806]
[91.67117310 -145.98715210]
[103.84666443 -137.14668274]
[114.12886047 -126.16155243]
[122.14606476 -113.42888641]
[127.60846710 -99.40895081]
[130.31860352 -84.60855103]
[130.17849731 -69.56272888]
[127.19322205 -54.81536865]
[121.47068787 -40.89958191]
[113.21776581 -28.31841660]
[102.73278046 -17.52667236]
[90.39477539 -8.91446590]
[76.64975739 -2.79312086]
[80.05273438 11.81577110]
[90.47566986 22.45586967]
[86.07088470 37.65154266]
[89.47386932 52.26043701]
[92.87684631 66.86933136]
[96.27982330 81.47821808]
[100.29730225 67.02623749]
[110.13266754 55.70079422]
[124.98496246 53.60098267]
[137.57446289 61.75600433]
[141.73040771 76.17041016]
[128.64219666 83.49833679]
[143.64137268 83.34230042]
[158.64056396 83.18626404]
[173.63975525 83.03022766]
[188.63894653 82.87419128]
[203.63813782 82.71815491]
[218.63732910 82.56211853]
[233.63650513 82.40608215]
[248.63569641 82.25004578]
[254.64604187 68.25734711]
[265.83251953 57.92378235]
[280.25701904 53.03969574]
[295.42034912 54.45129013]
[308.69543457 61.91400146]
[317.78225708 74.13486481]
[321.10650635 88.99653625]
[318.09216309 103.92415619]
[309.26153564 116.33141327]
[296.14459229 124.06867981]
[281.01388550 125.79541779]
[266.49090576 121.21247864]
[255.09188843 111.11386871]
[248.79173279 97.24923706]
[233.79254150 97.40527344]
[218.79336548 97.56130981]
[203.79417419 97.71734619]
[188.79498291 97.87338257]
[173.79579163 98.02941895]
[158.79660034 98.18545532]
[143.79740906 98.34149170]
[128.79823303 98.49752808]
[123.57832336 103.88293457]
[136.81616211 110.93698883]
[150.05398560 117.99105072]
[164.33399963 122.58248138]
[172.59474182 135.10287476]
[171.19783020 150.03767395]
[160.75851440 160.80897522]
[145.87474060 162.67259216]
[133.10195923 154.80772400]
[128.06587219 140.67630005]
[120.60218811 127.66502380]
[113.13851166 114.65373993]
[107.91860199 120.03914642]
[108.23065948 135.03590393]
[108.54271698 150.03265381]
[108.85477448 165.02940369]
[109.16682434 180.02615356]
[109.47888184 195.02291870]
[109.79093933 210.01966858]
[110.10299683 225.01641846]
[110.41505432 240.01316833]
[113.00605011 259.22088623]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 47]
[11 46]
[12 45]
[13 34]
[14 33]
[15 32]
[16 31]
[17 30]
[18 29]
[19 28]
[20 27]
[21 26]
[48 92]
[49 91]
[50 90]
[51 89]
[53 87]
[54 86]
[98 128]
[99 127]
[100 126]
[101 125]
[102 124]
[103 123]
[104 122]
[105 121]
[106 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
