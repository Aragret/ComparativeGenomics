%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCAUCAUAGCAGGCAGUUGAGGUGGAUUAAACCAAACCCAGCUACGCAAAAUCUUAGCAUACUCxxxxxxxxxxCUACGUUGUAGCCCACUUCCACUAUGUCCUAUCAAUAGGAGCUGUAUUUGCCAUCAUAGGAGGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[109.24063110 273.89855957]
[108.94427490 258.90148926]
[108.64791107 243.90441895]
[108.35155487 228.90734863]
[108.05519867 213.91027832]
[107.75884247 198.91319275]
[107.46248627 183.91612244]
[107.16613007 168.91905212]
[106.86977386 153.92198181]
[103.34648132 139.34164429]
[96.76203156 125.86405945]
[87.07732391 117.95428467]
[83.61410522 107.86719513]
[85.78703308 99.26453400]
[91.23527527 94.61402130]
[81.89949036 82.87336731]
[72.56370544 71.13270569]
[63.22791672 59.39204407]
[53.89212799 47.65138626]
[41.15607834 45.40335083]
[33.62474060 35.38763046]
[34.91621399 23.32670975]
[25.81421089 11.40389252]
[11.29023647 5.12975931]
[9.71735382 -9.68156433]
[0.61535138 -21.60438156]
[-8.48665047 -33.52719879]
[-22.02861786 -39.97817612]
[-37.02202988 -39.53367615]
[-45.55986404 -36.13638687]
[-52.31541824 -39.23146439]
[-67.31468201 -39.08327866]
[-82.30809784 -38.63877869]
[-97.28980255 -37.89813614]
[-112.27150726 -37.15749741]
[-122.69430542 -25.27722931]
[-138.47018433 -24.33003235]
[-150.23959351 -34.87785721]
[-151.01994324 -50.66286850]
[-140.34828186 -62.32009888]
[-124.55590057 -62.93352127]
[-113.01214600 -52.13919830]
[-98.03044128 -52.87984085]
[-83.04873657 -53.62047958]
[-79.20493317 -56.53588867]
[-73.47618866 -57.03178787]
[-67.46286774 -54.08254623]
[-52.46360397 -54.23073196]
[-37.46652985 -54.52708817]
[-22.47311783 -54.97158813]
[-13.37111568 -66.89440155]
[-16.89440727 -81.47474670]
[-20.41769791 -96.05509186]
[-23.94098854 -110.63543701]
[-27.46427917 -125.21578217]
[-42.46034622 -124.13514709]
[-57.42974091 -125.53767395]
[-71.96408844 -129.38510132]
[-85.66687012 -135.57246399]
[-98.16427612 -143.93096924]
[-109.11536407 -154.23260498]
[-118.22138214 -166.19631958]
[-125.23390961 -179.49572754]
[-129.96163940 -193.76802063]
[-132.27558899 -208.62384033]
[-132.11264038 -223.65791321]
[-129.47724915 -238.46009827]
[-124.44128418 -252.62657166]
[-117.14215088 -265.77087402]
[-107.77896881 -277.53439331]
[-96.60717010 -287.59625244]
[-83.93153381 -295.68191528]
[-70.09786224 -301.57083130]
[-55.48353958 -305.10232544]
[-40.48726273 -306.18008423]
[-25.51813889 -304.77465820]
[-10.98453617 -300.92443848]
[2.71705747 -294.73443604]
[15.21285343 -286.37350464]
[26.16195679 -276.06979370]
[35.26566696 -264.10430908]
[42.27563095 -250.80355835]
[47.00060654 -236.53034973]
[49.31169891 -221.67408752]
[49.14585876 -206.64004517]
[46.50760651 -191.83836365]
[41.46891785 -177.67286682]
[34.16725159 -164.52998352]
[24.80180168 -152.76824951]
[13.62806702 -142.70855713]
[0.95087373 -134.62532043]
[-12.88393497 -128.73907471]
[-9.36064434 -114.15872955]
[-5.83735371 -99.57838440]
[-2.31406307 -84.99803925]
[1.20922768 -70.41769409]
[6.71531010 -61.24179840]
[7.30640459 -51.20477676]
[3.43616581 -42.62919998]
[12.53816795 -30.70638275]
[21.64017105 -18.78356743]
[35.51310730 -13.36223316]
[37.73702621 2.30189037]
[46.83903122 14.22470665]
[63.36304092 20.06666756]
[65.63278961 38.31559753]
[74.96857452 50.05625916]
[84.30435944 61.79691696]
[93.64015198 73.53757477]
[102.97593689 85.27823639]
[116.70311737 91.32508850]
[131.66726685 90.28859711]
[146.63140869 89.25210571]
[161.59556580 88.21561432]
[176.55970764 87.17912292]
[189.85157776 77.57399750]
[204.70306396 84.52851868]
[205.83622742 100.88847351]
[192.08537292 109.82413483]
[177.59619141 102.14326477]
[162.63204956 103.17976379]
[147.66790771 104.21625519]
[132.70375061 105.25274658]
[117.73960876 106.28923798]
[110.23960876 119.27961731]
[116.82405853 132.75718689]
[117.96327209 117.80051422]
[122.86869049 103.62529755]
[131.21774292 91.16362000]
[142.46145630 81.23491669]
[155.86047363 74.49205017]
[170.53375244 71.37838745]
[185.51644897 72.09867859]
[199.82336426 76.60555267]
[212.51376343 84.60266876]
[222.75317383 95.56416321]
[229.86830139 108.76927185]
[233.39131165 123.34968567]
[233.09051514 138.34666443]
[228.98570251 152.77409363]
[221.34678650 165.68328857]
[210.67608643 176.22538757]
[197.67521667 183.70719910]
[183.19909668 187.63677979]
[168.19955444 187.75570679]
[153.66293335 184.05618286]
[140.54507446 176.78146362]
[129.70852661 166.40989685]
[121.86684418 153.62562561]
[122.16320038 168.62269592]
[122.45955658 183.61976624]
[122.75591278 198.61683655]
[123.05226898 213.61390686]
[123.34863281 228.61099243]
[123.64498901 243.60806274]
[123.94134521 258.60513306]
[124.23770142 273.60220337]
[126.80859375 292.81262207]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 157]
[2 156]
[3 155]
[4 154]
[5 153]
[6 152]
[7 151]
[8 150]
[9 149]
[10 126]
[11 125]
[15 110]
[16 109]
[17 108]
[18 107]
[19 106]
[22 104]
[23 103]
[25 101]
[26 100]
[27 99]
[28 50]
[29 49]
[31 48]
[32 47]
[33 44]
[34 43]
[35 42]
[51 96]
[52 95]
[53 94]
[54 93]
[55 92]
[111 124]
[112 123]
[113 122]
[114 121]
[115 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
