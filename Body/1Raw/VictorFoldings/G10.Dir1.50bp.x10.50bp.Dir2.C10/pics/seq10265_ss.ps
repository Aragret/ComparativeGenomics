%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACAGCCAUUCUCAUCCAAACCCCCUGAAGCUUCACCGGCGCAGUCAUUCUCAUAAUCGCCxxxxxxxxxxAUAUCCUUCUUGCUCAUCAGUUGAUGAUACGCCCGAGCAGAUGCCAACACAGCAGCCAUUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[1.49952769 232.29888916]
[-8.04373455 224.62701416]
[-18.37463760 235.50231934]
[-28.70553970 246.37763977]
[-39.03644180 257.25296021]
[-49.36734390 268.12826538]
[-48.58226776 285.57449341]
[-60.40273666 297.96835327]
[-77.19265747 298.00805664]
[-87.29809570 309.09320068]
[-97.40352631 320.17834473]
[-96.85269928 335.74542236]
[-107.25895691 346.84338379]
[-122.10319519 347.27258301]
[-132.20863342 358.35769653]
[-132.90702820 374.38555908]
[-145.95785522 383.71588135]
[-161.34965515 379.19128418]
[-167.27514648 364.28262329]
[-159.18879700 350.42654419]
[-143.29376221 348.25228882]
[-133.18832397 337.16714478]
[-134.13061523 322.34661865]
[-124.04017639 310.96075439]
[-108.48866272 310.07290649]
[-98.38323212 298.98776245]
[-88.27779388 287.90261841]
[-90.66617584 275.20428467]
[-85.20576477 263.27899170]
[-73.69490814 256.59457397]
[-60.24266052 257.79736328]
[-49.91175842 246.92204285]
[-39.58085251 236.04673767]
[-29.24995232 225.17141724]
[-18.91904831 214.29611206]
[-31.99612999 198.90582275]
[-43.09428406 182.03271484]
[-52.04712296 163.92974854]
[-58.72042847 144.86831665]
[-63.01414490 125.13421631]
[-64.86390686 105.02329254]
[-64.24197388 84.83705902]
[-61.15767670 64.87815094]
[-55.65725327 45.44580460]
[-47.82316971 26.83134842]
[-37.77287292 9.31385899]
[-25.65704346 -6.84403563]
[-11.65732670 -21.40009117]
[-21.29914093 -32.89075851]
[-30.94095421 -44.38142395]
[-40.58276749 -55.87208939]
[-44.81300735 -41.48094559]
[-58.62111282 -35.62123489]
[-71.91054535 -42.57760239]
[-74.96401215 -57.26352692]
[-65.54881287 -68.94059753]
[-50.54993439 -69.07075500]
[-58.96334457 -81.48906708]
[-67.37675476 -93.90737915]
[-82.79644012 -98.33602142]
[-88.81468964 -113.20748138]
[-80.81480408 -127.11364746]
[-64.93362427 -129.38690186]
[-53.35382843 -118.28339386]
[-54.95844269 -102.32079315]
[-46.54503250 -89.90248108]
[-38.13162231 -77.48416138]
[-29.09210205 -65.51390839]
[-19.45028877 -54.02323914]
[-9.80847359 -42.53257370]
[-0.16665977 -31.04190445]
[11.54290581 -39.21452332]
[23.91546249 -46.34371948]
[36.85827637 -52.37606049]
[50.27434158 -57.26633453]
[64.06310272 -60.97788620]
[78.12121582 -63.48290253]
[92.34330750 -64.76260376]
[106.62278748 -64.80740356]
[120.85263062 -63.61695480]
[134.92617798 -61.20019150]
[148.73796082 -57.57522583]
[162.18444824 -52.76922226]
[175.16485596 -46.81820679]
[187.58189392 -39.76677704]
[199.34251404 -31.66778946]
[210.35853577 -22.58194351]
[220.54742432 -12.57733917]
[229.83280945 -1.72896171]
[238.14508057 9.88188076]
[245.42195129 22.16816330]
[251.60888672 35.03779984]
[265.65084839 29.76305962]
[279.69284058 24.48831749]
[293.73480225 19.21357536]
[307.77679443 13.93883419]
[321.46740723 7.80966043]
[334.75476074 0.84930408]
[348.04208374 -6.11105204]
[361.32943726 -13.07140827]
[367.46755981 -27.89379120]
[382.92248535 -32.19778442]
[395.83856201 -22.68173790]
[396.30761719 -6.64554310]
[383.96987915 3.60920119]
[368.28979492 0.21593314]
[355.00244141 7.17628956]
[341.71511841 14.13664532]
[328.42776489 21.09700203]
[342.22943115 26.97188759]
[348.01022339 40.81321335]
[342.48672485 54.75921249]
[328.79620361 60.88865662]
[314.71481323 55.72006607]
[308.24066162 42.18916321]
[313.05154419 27.98081017]
[299.00955200 33.25555038]
[284.96759033 38.53029251]
[270.92559814 43.80503464]
[256.88363647 49.07977676]
[260.22888184 60.85861206]
[262.69110107 72.85315704]
[264.25668335 84.99731445]
[264.91705322 97.22415161]
[264.66854858 109.46629333]
[263.51254272 121.65625763]
[261.45538330 133.72686768]
[258.50842285 145.61161804]
[254.68791199 157.24499512]
[250.01490784 168.56288147]
[244.51515198 179.50291443]
[238.21894836 190.00479126]
[231.16101074 200.01065063]
[223.38023376 209.46533203]
[214.91947937 218.31674194]
[205.82540894 226.51609802]
[196.14811707 234.01821899]
[185.94093323 240.78173828]
[175.26013184 246.76939392]
[164.16455078 251.94818115]
[152.71536255 256.28958130]
[140.97564697 259.76962280]
[129.01011658 262.36920166]
[116.88471222 264.07391357]
[104.66624451 264.87438965]
[92.42206573 264.76623535]
[80.21964264 263.75006104]
[68.12623596 261.83142090]
[56.20849228 259.02090454]
[44.53208542 255.33399963]
[33.16136932 250.79104614]
[22.15900803 245.41705322]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 35]
[3 34]
[4 33]
[5 32]
[6 31]
[9 27]
[10 26]
[11 25]
[14 22]
[15 21]
[48 71]
[49 70]
[50 69]
[51 68]
[57 67]
[58 66]
[59 65]
[92 120]
[93 119]
[94 118]
[95 117]
[96 116]
[97 109]
[98 108]
[99 107]
[100 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
