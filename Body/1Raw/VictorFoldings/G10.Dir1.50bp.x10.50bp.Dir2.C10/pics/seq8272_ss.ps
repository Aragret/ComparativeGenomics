%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACCUCCAAAUAUCUCAUCAACAACCGACUAAUCACCACCCAACAAUGACUAAUCAAACUAAxxxxxxxxxxUUUAAAGGAUAACAGCUAUCCAUUGGUCUUAGGCCCCAAAAAUUUUGGUGCAACUCCAAAUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[93.17401886 271.77008057]
[93.17401886 256.77008057]
[93.17401886 241.77009583]
[93.17401886 226.77009583]
[93.17401886 211.77009583]
[93.17401886 196.77009583]
[93.17401886 181.77009583]
[93.17401886 166.77009583]
[93.17401886 151.77009583]
[93.17401886 136.77009583]
[73.98984528 121.12907410]
[70.38465118 99.32446289]
[80.78547668 82.87943268]
[72.98042297 70.07001495]
[65.17537689 57.26059723]
[56.85762787 44.77800751]
[48.04084778 32.64274979]
[39.22406769 20.50749588]
[30.40728951 8.37224102]
[8.93428898 2.65069795]
[3.35681725 -18.19500351]
[-9.04084015 -26.63882256]
[-18.66657448 -15.11874962]
[-29.37513351 -4.59765053]
[-41.06338882 4.82314968]
[-53.61877060 13.05292130]
[-66.92036438 20.01240540]
[-80.84006500 25.63457489]
[-95.24381256 29.86528587]
[-109.99288177 32.66379166]
[-124.94523621 34.00314331]
[-139.95687866 33.87043762]
[-154.88320923 32.26695633]
[-169.58050537 29.20813942]
[-183.90721130 24.72344780]
[-197.72534180 18.85607147]
[-210.90180969 11.66251850]
[-223.30973816 3.21206784]
[-234.82962036 -6.41389561]
[-245.35050964 -17.12266541]
[-254.77107239 -28.81110954]
[-263.00057983 -41.36665726]
[-269.95980835 -54.66838837]
[-275.58169556 -68.58820343]
[-279.81213379 -82.99202728]
[-282.61035156 -97.74115753]
[-283.94940186 -112.69354248]
[-283.81637573 -127.70517731]
[-282.21261597 -142.63148499]
[-279.15350342 -157.32872009]
[-274.66851807 -171.65531921]
[-268.80087280 -185.47334290]
[-261.60705566 -198.64967346]
[-253.15634155 -211.05743408]
[-243.53015137 -222.57711792]
[-232.82116699 -233.09779358]
[-221.13253784 -242.51812744]
[-208.57682800 -250.74739075]
[-195.27494812 -257.70632935]
[-181.35502625 -263.32794189]
[-166.95111084 -267.55807495]
[-152.20193481 -270.35601807]
[-137.24952698 -271.69476318]
[-122.23789215 -271.56146240]
[-107.31161499 -269.95736694]
[-92.61444855 -266.89797974]
[-78.28792572 -262.41271973]
[-64.47003174 -256.54476929]
[-51.29384232 -249.35069275]
[-38.88625336 -240.89974976]
[-27.36675835 -231.27333069]
[-16.84630013 -220.56413269]
[-7.42620134 -208.87532043]
[0.80281699 -196.31944275]
[7.76150274 -183.01742554]
[13.38283825 -169.09739685]
[17.61268425 -154.69338989]
[20.41030693 -139.94415283]
[21.74876022 -124.99171448]
[21.61515427 -109.98008728]
[20.01077652 -95.05384064]
[16.95107841 -80.35673523]
[12.46552753 -66.03030396]
[6.59732199 -52.21252823]
[-0.59702164 -39.03647995]
[11.80063629 -30.59266090]
[18.16341591 -33.62748337]
[25.16913605 -34.41170502]
[32.04545593 -32.85886383]
[42.26925278 -43.83492661]
[52.49305344 -54.81099319]
[62.71685028 -65.78705597]
[72.94064331 -76.76311493]
[73.81098175 -92.78254700]
[86.96118927 -101.97230530]
[102.30355072 -97.28279877]
[108.06871796 -82.31141663]
[99.83415985 -68.54291534]
[83.91670990 -66.53932190]
[73.69290924 -55.56325912]
[63.46911621 -44.58719254]
[53.24531937 -33.61112976]
[43.02151871 -22.63506699]
[45.81374741 -11.64912415]
[42.54254532 -0.44453773]
[51.35932159 11.69071674]
[60.17610168 23.82597160]
[68.99288177 35.96122742]
[71.79886627 36.51040268]
[74.54901123 38.23721695]
[76.78113556 41.12342834]
[78.04939270 44.97945023]
[77.98479462 49.45554733]
[85.78984070 62.26496506]
[93.59489441 75.07437897]
[111.52076721 72.70903015]
[129.07507324 83.33850098]
[137.07978821 104.87068939]
[151.34562683 109.50594330]
[165.61148071 114.14119720]
[179.87731934 118.77645111]
[194.14317322 123.41170502]
[211.07550049 122.55586243]
[216.58525085 138.58953857]
[202.70339966 148.32252502]
[189.50791931 137.67755127]
[175.24206543 133.04229736]
[160.97622681 128.40704346]
[146.71037292 123.77178955]
[132.44453430 119.13653564]
[126.37689972 123.54492950]
[136.67410278 134.45216370]
[146.97129822 145.35939026]
[157.26849365 156.26661682]
[171.16123962 161.92274475]
[178.02525330 175.26010132]
[174.55349731 189.85279846]
[162.41862488 198.67012024]
[147.46719360 197.46388245]
[136.90278625 186.81526184]
[135.81579590 171.85292053]
[128.62440491 158.68917847]
[121.43302917 145.52543640]
[114.24164581 132.36170959]
[108.17401886 136.77009583]
[108.17401886 151.77009583]
[108.17401886 166.77009583]
[108.17401886 181.77009583]
[108.17401886 196.77009583]
[108.17401886 211.77009583]
[108.17401886 226.77009583]
[108.17401886 241.77009583]
[108.17401886 256.77008057]
[108.17401886 271.77008057]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[13 115]
[14 114]
[15 113]
[16 108]
[17 107]
[18 106]
[19 105]
[21 86]
[22 85]
[89 103]
[90 102]
[91 101]
[92 100]
[93 99]
[118 130]
[119 129]
[120 128]
[121 127]
[122 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
