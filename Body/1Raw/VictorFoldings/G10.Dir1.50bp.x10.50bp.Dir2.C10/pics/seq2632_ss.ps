%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAUUACCCUCACUGUCAACCCAACACAGGCAUGCUCAUAAGGAAAGGUUAAAAAAAGUAAxxxxxxxxxxCGAAACCAAAUAAUUCAAGCACUGCUUAUUACAAUUUUACUGGGUCUCUAUUUUACCCUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[139.29783630 374.37002563]
[139.29783630 359.37002563]
[139.29783630 344.37002563]
[139.29783630 329.37002563]
[139.29783630 314.37002563]
[139.29783630 299.37002563]
[139.29783630 284.37002563]
[139.29783630 269.37002563]
[139.29783630 254.37002563]
[139.29783630 239.37002563]
[137.74024963 224.45111084]
[134.64193726 209.77458191]
[120.18601990 201.23733521]
[116.26985931 184.56556702]
[125.77960968 169.91967773]
[122.37662506 155.31079102]
[118.97364807 140.70188904]
[115.57067108 126.09300232]
[109.02409363 122.43344879]
[96.13899994 130.11293030]
[95.93093872 115.11434174]
[89.38436127 111.45478821]
[75.15758514 116.20860291]
[60.93080521 120.96241760]
[46.70402527 125.71623230]
[43.00616074 140.69386292]
[31.78211021 151.27801514]
[16.61343193 154.09132385]
[2.34039307 148.23608398]
[-6.48253059 135.58065796]
[-7.03997612 120.16337585]
[0.84593487 106.90381622]
[14.65883732 100.03305817]
[29.99108315 101.74354553]
[41.95021057 111.48945618]
[56.17699051 106.73564148]
[70.40377045 101.98182678]
[84.63054657 97.22801208]
[92.48797607 84.45065308]
[90.31113434 69.60945129]
[88.13430023 54.76824188]
[85.80319977 39.95048523]
[83.31807709 25.15777779]
[80.83296204 10.36507034]
[78.34783936 -4.42763662]
[63.33859253 -5.89652824]
[49.23199463 -11.19646645]
[36.98753357 -19.96054840]
[27.43638229 -31.58647537]
[21.22496605 -45.27793121]
[18.77122688 -60.09913635]
[20.23650169 -75.03880310]
[25.51493073 -89.07911682]
[34.24108124 -101.26512909]
[45.81523514 -110.76963806]
[59.44461060 -116.94941711]
[56.95949173 -131.74212646]
[54.47437286 -146.53482056]
[51.98925400 -161.32752991]
[36.95598984 -162.45199585]
[22.62888718 -167.14215088]
[9.84090137 -175.12532043]
[-0.66448766 -185.93734741]
[-8.27651215 -198.94967651]
[-12.55261803 -213.40576172]
[-13.24419880 -228.46514893]
[-10.31104660 -243.25230408]
[-3.92369103 -256.90753174]
[5.54651546 -268.63693237]
[17.54898834 -277.75854492]
[31.38591766 -283.74209595]
[46.25284195 -286.23968506]
[61.28542328 -285.10610962]
[75.60968018 -280.40725708]
[88.39282227 -272.41635132]
[98.89165497 -261.59793091]
[106.49578857 -248.58100891]
[110.76313019 -234.12232971]
[111.44557953 -219.06253052]
[108.50346375 -204.27716064]
[102.10783386 -190.62580872]
[92.63051605 -178.90216064]
[80.62251282 -169.78781128]
[66.78195953 -163.81265259]
[69.26708221 -149.01994324]
[71.75219727 -134.22723389]
[74.23731995 -119.43453217]
[89.13785553 -118.04767609]
[103.18242645 -112.84700775]
[115.41156769 -104.18141174]
[124.98818970 -92.63668823]
[131.25485229 -78.99595642]
[133.77894592 -64.18656921]
[132.38246155 -49.21701813]
[127.15464020 -35.10828018]
[118.44619751 -22.82418823]
[106.84585571 -13.20558357]
[93.14054871 -6.91275549]
[95.62566376 7.87995195]
[98.11078644 22.67265892]
[100.59590149 37.46536636]
[104.83311462 43.58023834]
[102.97550201 52.59140778]
[105.15234375 67.43260956]
[107.32917786 82.27381897]
[109.42934418 67.42156982]
[115.97132874 53.92333221]
[126.32818604 43.07273102]
[139.50733948 35.90964508]
[154.24575806 33.12055969]
[169.13096619 34.97277069]
[182.73641968 41.28876495]
[193.75820923 51.46324539]
[201.14006042 64.52112579]
[204.17453003 79.21099091]
[202.57078552 94.12500763]
[196.48252869 107.83388519]
[186.49325562 119.02380371]
[173.56028748 126.62237549]
[158.92306519 129.90136719]
[143.98437500 128.54653931]
[130.17956543 122.69002533]
[133.58255005 137.29891968]
[136.98551941 151.90780640]
[140.38850403 166.51670837]
[152.59965515 172.29124451]
[159.14172363 183.88560486]
[157.81059265 196.93559265]
[149.31845093 206.67625427]
[152.41677856 221.35278320]
[159.14916992 207.94848633]
[171.60557556 199.59158325]
[186.56170654 198.44522095]
[200.14620972 204.80613708]
[208.84277344 217.02783203]
[210.40032959 231.94674683]
[204.41569519 245.70117188]
[192.43798828 254.73081970]
[177.56759644 256.69839478]
[163.65367126 251.09457397]
[154.29783630 239.37002563]
[154.29783630 254.37002563]
[154.29783630 269.37002563]
[154.29783630 284.37002563]
[154.29783630 299.37002563]
[154.29783630 314.37002563]
[154.29783630 329.37002563]
[154.29783630 344.37002563]
[154.29783630 359.37002563]
[154.29783630 374.37002563]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 130]
[12 129]
[15 125]
[16 124]
[17 123]
[18 122]
[22 38]
[23 37]
[24 36]
[25 35]
[39 105]
[40 104]
[41 103]
[42 101]
[43 100]
[44 99]
[45 98]
[56 87]
[57 86]
[58 85]
[59 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
