%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUUCGCCCUAUUCUUCAUAGCCGAAUACACAAACAUUAUUAUAAUAAACACCCUCACCACxxxxxxxxxxGUUAACUUCCAAUUAACUAGUUUUGACAACAUUCAAAAAAGAGUAAUAAACUUCGCCUUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 298.21682739]
[92.50000000 283.21682739]
[92.50000000 268.21682739]
[92.50000000 253.21681213]
[92.50000000 238.21681213]
[92.50000000 223.21681213]
[92.50000000 208.21681213]
[92.50000000 193.21681213]
[92.50000000 178.21681213]
[92.50000000 163.21681213]
[70.10037231 156.20167542]
[51.76561356 141.54588318]
[39.32617569 149.92802429]
[26.88673401 158.31016541]
[14.44729424 166.69230652]
[11.19983387 179.21859741]
[0.61255288 185.93637085]
[-11.31424999 183.68721008]
[-23.92537880 191.80876160]
[-36.53650665 199.93029785]
[-49.14763641 208.05184937]
[-53.93463898 223.36405945]
[-68.94239044 229.03388977]
[-82.65823364 220.71191406]
[-84.56053925 204.78204346]
[-73.19002533 193.46430969]
[-57.26917648 195.44071960]
[-44.65805054 187.31916809]
[-32.04692078 179.19763184]
[-19.43579292 171.07609558]
[-12.30076504 155.07324219]
[6.06515121 154.25286865]
[18.50459099 145.87072754]
[30.94403267 137.48858643]
[43.38347244 129.10644531]
[38.38613510 116.01087189]
[36.37578583 102.13909912]
[37.44988632 88.16363525]
[41.55636215 74.76198578]
[48.49613953 62.58385086]
[57.93277740 52.21961975]
[69.40879822 44.17174149]
[82.36785126 38.83037186]
[96.18170166 36.45445251]
[110.18065643 37.15916824]
[123.68606567 40.91035080]
[130.86857605 27.74176979]
[138.05108643 14.57318783]
[145.23359680 1.40460479]
[152.41610718 -11.76397800]
[159.59861755 -24.93255997]
[162.69692993 -39.60908508]
[161.45005798 -54.55717087]
[160.20318604 -69.50525665]
[158.95631409 -84.45334625]
[143.97180176 -85.68398285]
[129.39425659 -89.36435699]
[115.62136841 -95.39405060]
[103.02885437 -103.60858917]
[91.96026611 -113.78385162]
[82.71754456 -125.64227295]
[75.55284882 -138.86032104]
[70.66163635 -153.07742310]
[68.17734528 -167.90571594]
[68.16773987 -182.94067383]
[70.63308716 -197.77210999]
[75.50613403 -211.99545288]
[82.65393829 -225.22265625]
[91.88150024 -237.09286499]
[102.93708801 -247.28227234]
[115.51908875 -255.51287842]
[129.28427124 -261.56018066]
[143.85710144 -265.25915527]
[158.84001160 -266.50894165]
[173.82427979 -265.27542114]
[188.40112305 -261.59222412]
[202.17285156 -255.55989075]
[214.76377869 -247.34292603]
[225.83041382 -237.16552734]
[235.07084656 -225.30532837]
[242.23298645 -212.08589172]
[247.12145996 -197.86784363]
[249.60290527 -183.03907776]
[249.60960388 -168.00413513]
[247.14140320 -153.17315674]
[242.26562500 -138.95075989]
[235.11526489 -125.72493744]
[225.88542175 -113.85649872]
[214.82786560 -103.66922760]
[202.24427795 -95.44104004]
[188.47793579 -89.39640045]
[173.90438843 -85.70021820]
[175.15127563 -70.75213623]
[176.39814758 -55.80404663]
[177.64501953 -40.85596085]
[193.13795471 -44.29853821]
[204.74937439 -35.86231613]
[219.51544189 -38.50117874]
[227.54891968 -48.64597702]
[239.94812012 -50.51113129]
[249.94810486 -43.63307571]
[264.76586914 -45.96417999]
[279.58361816 -48.29528427]
[294.40139771 -50.62638855]
[309.21914673 -52.95749283]
[324.03689575 -55.28859329]
[333.13592529 -68.21078491]
[348.72137451 -70.83181000]
[361.54663086 -61.59665298]
[364.00274658 -45.98437881]
[354.63250732 -33.25746536]
[338.99514771 -30.96656990]
[326.36801147 -40.47083664]
[311.55023193 -38.13973236]
[296.73248291 -35.80862808]
[281.91473389 -33.47752380]
[267.09698486 -31.14642143]
[252.27922058 -28.81531715]
[239.28465271 -17.06196785]
[222.15429688 -23.73512459]
[207.38824463 -21.09626007]
[199.49905396 -9.89931107]
[184.95069885 -7.88236570]
[172.76719666 -17.75005150]
[165.58468628 -4.58146858]
[158.40217590 8.58711338]
[151.21966553 21.75569534]
[144.03715515 34.92427826]
[136.85464478 48.09286118]
[146.45446777 56.47301483]
[154.19291687 66.59724426]
[159.75991821 78.05987549]
[162.93240356 90.40162659]
[163.58326721 103.12797546]
[161.68643188 115.72898865]
[157.31788635 127.69976044]
[150.65267944 138.56063843]
[141.95788574 147.87643433]
[131.58187866 155.27386475]
[119.94043732 160.45655823]
[107.50000000 163.21681213]
[107.50000000 178.21681213]
[107.50000000 193.21681213]
[107.50000000 208.21681213]
[107.50000000 223.21681213]
[107.50000000 238.21681213]
[107.50000000 253.21681213]
[107.50000000 268.21682739]
[107.50000000 283.21682739]
[107.50000000 298.21682739]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 35]
[13 34]
[14 33]
[15 32]
[18 30]
[19 29]
[20 28]
[21 27]
[46 129]
[47 128]
[48 127]
[49 126]
[50 125]
[51 124]
[52 95]
[53 94]
[54 93]
[55 92]
[97 121]
[98 120]
[101 118]
[102 117]
[103 116]
[104 115]
[105 114]
[106 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
