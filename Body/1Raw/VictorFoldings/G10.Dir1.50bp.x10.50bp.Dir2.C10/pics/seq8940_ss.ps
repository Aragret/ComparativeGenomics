%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUACCAAUGAUGGCGCGAUGUAACACGAGAAAGCACAUACCAAGGCCACCACACACCACCxxxxxxxxxxCAACCACGACCAAUGAUAUGAAAAACCAUCGUUGUAUUUCAACUACAAGAACACCAAUGACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[172.54603577 416.31552124]
[172.54603577 401.31552124]
[172.54603577 386.31552124]
[172.54603577 371.31552124]
[172.54603577 356.31552124]
[172.54603577 341.31552124]
[172.54603577 326.31552124]
[172.54603577 311.31552124]
[172.54603577 296.31552124]
[172.54603577 281.31552124]
[168.99127197 266.74282837]
[162.08427429 253.42765808]
[155.17727661 240.11250305]
[148.27027893 226.79734802]
[142.36024475 222.27882385]
[141.36135864 213.13256836]
[134.73284912 199.67660522]
[128.10435486 186.22062683]
[121.47586060 172.76466370]
[114.84735870 159.30870056]
[108.21886444 145.85273743]
[101.59036255 132.39677429]
[94.96186066 118.94080353]
[81.30562592 112.73539734]
[69.95910645 123.76114655]
[55.67021561 119.55677032]
[41.17461777 123.41393280]
[35.71453476 137.93864441]
[22.74132538 146.45188904]
[7.24345207 145.68016052]
[-4.81983566 135.92021179]
[-8.80995846 120.92492676]
[-3.19263124 106.46030426]
[9.87216759 98.08828735]
[25.36075783 99.02809143]
[37.31745911 108.91833496]
[51.81305313 105.06117249]
[62.12274933 94.31130981]
[77.44846344 98.23979950]
[62.45558548 98.70201874]
[51.02318954 88.99118805]
[49.05384445 74.12102509]
[57.56432724 61.76903534]
[72.16065979 58.31257248]
[85.30671692 65.53622437]
[90.21509552 79.71244049]
[88.65751648 64.79353333]
[87.09993744 49.87461853]
[85.54235840 34.95570755]
[76.41388702 22.03356743]
[82.78778076 8.57166481]
[81.23020172 -6.34724712]
[70.07012939 -20.95658302]
[77.76091766 -36.69989014]
[75.89331055 -51.58316803]
[60.87273407 -52.32710266]
[46.20957947 -55.66821671]
[32.34944153 -61.50497437]
[19.71351814 -69.66000366]
[8.68579578 -79.88548279]
[-0.39860213 -91.87067413]
[-7.26361275 -105.25136566]
[-11.70061493 -119.62091827]
[-13.57477474 -134.54266357]
[-12.82913780 -149.56315613]
[-9.48636246 -164.22593689]
[-3.64803314 -178.08540344]
[4.50843096 -190.72041321]
[14.73516369 -201.74697876]
[26.72138596 -210.83001709]
[40.10284805 -217.69349670]
[54.47290802 -222.12887573]
[69.39487457 -224.00134277]
[84.41527557 -223.25399780]
[99.07767487 -219.90956116]
[112.93648529 -214.06967163]
[125.57056427 -205.91177368]
[136.59596252 -195.68379211]
[145.67764282 -183.69653320]
[152.53961182 -170.31428528]
[156.97335815 -155.94372559]
[158.84413147 -141.02154541]
[158.09509277 -126.00122833]
[154.74899292 -111.33921814]
[148.90751648 -97.48106384]
[140.74818420 -84.84791565]
[130.51895142 -73.82367706]
[118.53067017 -64.74335480]
[105.14765167 -57.88289642]
[90.77658844 -53.45078278]
[92.64420319 -38.56750107]
[102.02465820 -30.86592102]
[103.66955566 -18.43558311]
[96.14910889 -7.90482807]
[97.70669556 7.01408434]
[106.72374725 18.86912346]
[100.46126556 33.39812469]
[102.01885223 48.31703568]
[103.57643127 63.23595047]
[105.13401031 78.15486145]
[112.24091339 82.70809174]
[116.78480530 89.25066376]
[118.36081696 96.57471466]
[117.07345581 103.47418213]
[113.47213745 108.94097900]
[108.41783142 112.31230927]
[115.04632568 125.76827240]
[121.67482758 139.22424316]
[128.30332947 152.68020630]
[134.93182373 166.13616943]
[141.56031799 179.59213257]
[148.18882751 193.04809570]
[154.81732178 206.50405884]
[161.58543396 219.89035034]
[168.49243164 233.20550537]
[175.39942932 246.52066040]
[182.30642700 259.83581543]
[183.30079651 244.86880493]
[187.91877747 230.59736633]
[195.88095093 217.88502502]
[206.70555115 207.50099182]
[219.73757935 200.07359314]
[234.18849182 196.05224609]
[249.18386841 195.68028259]
[263.81637573 198.98020935]
[277.20065308 205.75234985]
[288.52676392 215.58692932]
[297.10940552 227.88888550]
[302.42929077 241.91381836]
[304.16448975 256.81311035]
[302.21002197 271.68524170]
[296.68411255 285.63031006]
[287.92117310 297.80447388]
[276.45141602 307.47116089]
[262.96887207 314.04541016]
[248.28933716 317.12945557]
[233.30105591 316.53665161]
[218.91094971 312.30288696]
[205.98974609 304.68432617]
[195.31929016 294.14196777]
[187.54603577 281.31552124]
[187.54603577 296.31552124]
[187.54603577 311.31552124]
[187.54603577 326.31552124]
[187.54603577 341.31552124]
[187.54603577 356.31552124]
[187.54603577 371.31552124]
[187.54603577 386.31552124]
[187.54603577 401.31552124]
[187.54603577 416.31552124]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 117]
[12 116]
[13 115]
[14 114]
[16 113]
[17 112]
[18 111]
[19 110]
[20 109]
[21 108]
[22 107]
[23 106]
[24 39]
[26 37]
[27 36]
[46 100]
[47 99]
[48 98]
[49 97]
[51 95]
[52 94]
[54 91]
[55 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
