%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUCAAACUCAAACUACGCCCUGAUCGGCGCACUGCGAGCAGUAGCCCAAACAAUCUCAUAUGAAGUCxxxxxxxxxxGUCAUUCUCAUAAUCGCCCACGGGCUUACAUCCUCAUUACUAUUCUGCCUAGCAAACUCAAACUACGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[109.57969666 279.18252563]
[109.57969666 264.18252563]
[109.57969666 249.18251038]
[109.57969666 234.18251038]
[109.57969666 219.18251038]
[109.57969666 204.18251038]
[109.57969666 189.18251038]
[109.57969666 174.18251038]
[109.57969666 159.18251038]
[109.57969666 144.18251038]
[106.18224335 129.57232666]
[99.56392670 116.11135864]
[98.74072266 131.08874512]
[86.05413818 139.09191895]
[72.18231201 133.38470459]
[68.80096436 118.77078247]
[78.75620270 107.55047607]
[64.58119202 112.45649719]
[50.40618134 117.36251831]
[49.43789673 132.50642395]
[42.76338196 146.08927917]
[31.42767715 156.05499268]
[17.17872429 160.90834045]
[2.19788170 159.93922424]
[-11.23401546 153.32638550]
[-21.08390999 142.10548401]
[-35.25892258 147.01148987]
[-49.43393326 151.91751099]
[-63.60894775 156.82353210]
[-70.28823090 171.14703369]
[-85.16781616 176.47372437]
[-99.41989899 169.64337158]
[-104.58897400 154.70831299]
[-97.60832214 140.52923584]
[-82.61943817 135.51835632]
[-68.51496887 142.64852905]
[-54.33995438 137.74250793]
[-40.16494370 132.83648682]
[-25.98992920 127.93046570]
[-25.18369675 113.02143097]
[-18.71329308 99.52034760]
[-7.53662586 89.49802399]
[6.66394567 84.50489044]
[21.73480797 85.33120728]
[35.37769318 91.88214111]
[45.50016022 103.18750763]
[59.67517471 98.28148651]
[73.85018921 93.37546539]
[86.56571198 87.58513641]
[96.91413116 90.90021515]
[100.58912659 76.35736847]
[104.26412201 61.81452179]
[106.25740814 46.94755173]
[106.54298401 31.95026970]
[106.82856750 16.95298767]
[107.11415100 1.95570707]
[107.39973450 -13.04157448]
[93.99231720 -16.81545639]
[81.89594269 -23.70038033]
[71.81939697 -33.28741837]
[64.35179138 -45.00948334]
[59.92812347 -58.17485809]
[58.80392456 -72.00801849]
[61.04052353 -85.69532013]
[66.50171661 -98.43284607]
[74.86203766 -109.47364044]
[85.62616730 -118.17148590]
[98.15827942 -124.01875305]
[111.71956635 -126.67601013]
[112.57590485 -141.65155029]
[113.43223572 -156.62707520]
[114.28856659 -171.60261536]
[115.14489746 -186.57815552]
[100.86058044 -191.46290588]
[88.42450714 -200.02133179]
[78.75952148 -211.61834717]
[72.58282471 -225.39335632]
[70.35276794 -240.32417297]
[72.23484802 -255.30284119]
[78.08938599 -269.21783447]
[87.48194885 -281.03656006]
[99.71553802 -289.88201904]
[113.88233948 -295.09777832]
[128.93109131 -296.29681396]
[143.74507141 -293.39016724]
[157.22497559 -286.59350586]
[168.37051392 -276.41119385]
[176.35462952 -263.59881592]
[180.58480835 -249.10716248]
[180.74717712 -234.01159668]
[176.82968140 -219.43231201]
[169.12301636 -206.45117188]
[158.19906616 -196.03147888]
[144.86846924 -188.94644165]
[130.12043762 -185.72181702]
[129.26409912 -170.74627686]
[128.40777588 -155.77075195]
[127.55143738 -140.79521179]
[126.69510651 -125.81967163]
[141.97064209 -120.61885071]
[155.18782043 -111.33735657]
[165.28280640 -98.71273804]
[171.44036865 -83.75199127]
[173.15977478 -67.65125275]
[170.29545593 -51.70018387]
[163.06930542 -37.17864609]
[152.05354309 -25.25402832]
[138.12532043 -16.88738441]
[122.39701843 -12.75599194]
[122.11143494 2.24128914]
[121.82585144 17.23857117]
[121.54026794 32.23585129]
[121.25468445 47.23313141]
[130.04571533 35.07920456]
[143.18669128 27.84632874]
[158.15814209 26.92124939]
[172.08959961 32.48133469]
[182.30999756 43.46055222]
[186.85981750 57.75387955]
[184.86671448 72.62087250]
[176.71281433 85.21111298]
[163.96147156 93.11067963]
[149.05747986 94.80501556]
[134.85833740 89.96925354]
[124.08644867 79.53055573]
[118.80696869 65.48951721]
[115.13197327 80.03236389]
[111.45697784 94.57521057]
[113.02490234 109.49304199]
[119.64321899 122.95401764]
[120.59144592 107.98401642]
[125.03494263 93.65727997]
[132.72427368 80.77806854]
[143.22778320 70.06937408]
[155.95585632 62.13233948]
[170.19395447 57.41253662]
[185.14280701 56.17490768]
[199.96324158 58.48893738]
[213.82328796 64.22472382]
[225.94487000 73.06027222]
[235.64755249 84.49958801]
[242.38664246 97.90051270]
[245.78384399 112.51074982]
[245.64842224 127.51013947]
[241.98800659 142.05665588]
[235.00805664 155.33372498]
[225.10041809 166.59599304]
[212.82127380 175.21125793]
[198.85993958 180.69586182]
[184.00013733 182.74192810]
[169.07606506 181.23460388]
[154.92550659 176.25849915]
[142.34281921 168.09297180]
[132.03436279 157.19638062]
[124.57969666 144.18251038]
[124.57969666 159.18251038]
[124.57969666 174.18251038]
[124.57969666 189.18251038]
[124.57969666 204.18251038]
[124.57969666 219.18251038]
[124.57969666 234.18251038]
[124.57969666 249.18251038]
[124.57969666 264.18252563]
[124.57969666 279.18252563]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 164]
[2 163]
[3 162]
[4 161]
[5 160]
[6 159]
[7 158]
[8 157]
[9 156]
[10 155]
[11 130]
[12 129]
[17 48]
[18 47]
[19 46]
[26 39]
[27 38]
[28 37]
[29 36]
[50 128]
[51 127]
[52 126]
[53 113]
[54 112]
[55 111]
[56 110]
[57 109]
[69 99]
[70 98]
[71 97]
[72 96]
[73 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
