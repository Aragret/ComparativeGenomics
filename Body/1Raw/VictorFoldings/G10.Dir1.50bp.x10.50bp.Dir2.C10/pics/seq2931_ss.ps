%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAAGACUUCACCAGUCAAAGCGAACUACUAUACUCAAUUGAUCCAAUAACUUGACCAACxxxxxxxxxxAAACAACAAUCCCCCUCUACCUAAAACUCACAGCCCUCGCUGUCACUUUCCUAGGACUUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 420.04916382]
[92.50000000 405.04916382]
[92.50000000 390.04916382]
[92.50000000 375.04916382]
[92.50000000 360.04916382]
[92.50000000 345.04916382]
[92.50000000 330.04916382]
[92.50000000 315.04916382]
[92.50000000 300.04916382]
[92.50000000 285.04916382]
[77.84561920 281.95968628]
[64.14855957 275.88830566]
[52.00850296 267.09826660]
[41.95753098 255.97172546]
[34.43677902 242.99346924]
[29.77709579 228.72953796]
[28.18446350 213.80265808]
[29.73092079 198.86505127]
[34.35128784 184.56990051]
[41.84592056 171.54278564]
[51.88933182 160.35437012]
[64.04432678 151.49530029]
[77.78102875 145.35481262]
[92.50000000 142.20350647]
[92.50000000 127.20349884]
[92.50000000 112.20349884]
[85.67605591 100.00000000]
[92.50000000 87.79650116]
[84.76270294 73.99633026]
[92.50000000 61.26905823]
[92.50000000 46.26905823]
[92.50000000 31.26905632]
[92.50000000 16.26905632]
[92.50000000 1.26905644]
[77.53487396 0.14783408]
[62.69537735 -2.08860469]
[48.06451035 -5.42775297]
[33.72409058 -9.85093594]
[19.75431442 -15.33341789]
[6.23331165 -21.84453773]
[-6.76330423 -29.34788322]
[-19.16284943 -37.80149078]
[-30.89598083 -47.15808487]
[-41.89707947 -57.36533737]
[-52.10462570 -68.36616516]
[-61.46152878 -80.09905243]
[-69.91546631 -92.49837494]
[-77.41915131 -105.49478912]
[-83.93063354 -119.01562500]
[-89.41348267 -132.98524475]
[-93.83704376 -147.32556152]
[-97.17658234 -161.95632935]
[-99.41341400 -176.79577637]
[-100.53502655 -191.76086426]
[-100.53516388 -206.76794434]
[-99.41381073 -221.73306274]
[-97.17723846 -236.57252502]
[-93.83795929 -251.20336914]
[-89.41464996 -265.54376221]
[-83.93204498 -279.51348877]
[-77.42080688 -293.03442383]
[-69.91735077 -306.03097534]
[-61.46363068 -318.43045044]
[-52.10693359 -330.16348267]
[-41.89958191 -341.16448975]
[-30.89866257 -351.37194824]
[-19.16569710 -360.72875977]
[-6.76630020 -369.18258667]
[6.23018360 -376.68615723]
[19.75107193 -383.19750977]
[33.72074890 -388.68023682]
[48.06109238 -393.10366821]
[62.69190216 -396.44308472]
[77.53135681 -398.67977905]
[92.49646759 -399.80126953]
[107.50353241 -399.80126953]
[122.46864319 -398.67977905]
[137.30810547 -396.44308472]
[151.93890381 -393.10366821]
[166.27925110 -388.68023682]
[180.24893188 -383.19750977]
[193.76982117 -376.68615723]
[206.76629639 -369.18258667]
[219.16569519 -360.72875977]
[230.89866638 -351.37194824]
[241.89958191 -341.16448975]
[252.10693359 -330.16348267]
[261.46362305 -318.43045044]
[269.91735840 -306.03097534]
[277.42080688 -293.03442383]
[283.93203735 -279.51348877]
[289.41464233 -265.54376221]
[293.83795166 -251.20336914]
[297.17724609 -236.57252502]
[299.41381836 -221.73306274]
[300.53515625 -206.76794434]
[300.53503418 -191.76086426]
[299.41342163 -176.79577637]
[297.17657471 -161.95632935]
[293.83703613 -147.32556152]
[289.41348267 -132.98524475]
[283.93063354 -119.01562500]
[277.41915894 -105.49478912]
[269.91546631 -92.49837494]
[261.46151733 -80.09905243]
[252.10462952 -68.36616516]
[241.89707947 -57.36533737]
[230.89598083 -47.15808487]
[219.16285706 -37.80149078]
[206.76330566 -29.34788322]
[193.76669312 -21.84453773]
[180.24568176 -15.33341789]
[166.27590942 -9.85093594]
[151.93548584 -5.42775297]
[137.30462646 -2.08860469]
[122.46512604 0.14783408]
[107.50000000 1.26905644]
[107.50000000 16.26905632]
[107.50000000 31.26905632]
[107.50000000 46.26905823]
[107.50000000 61.26905823]
[115.23729706 73.99633026]
[107.50000000 87.79650116]
[114.32394409 100.00000000]
[107.50000000 112.20349884]
[107.50000000 127.20349884]
[107.50000000 142.20350647]
[122.21897125 145.35481262]
[135.95567322 151.49530029]
[148.11067200 160.35437012]
[158.15408325 171.54278564]
[165.64871216 184.56990051]
[170.26907349 198.86505127]
[171.81553650 213.80265808]
[170.22290039 228.72953796]
[165.56321716 242.99346924]
[158.04246521 255.97172546]
[147.99150085 267.09826660]
[135.85144043 275.88830566]
[122.15438080 281.95968628]
[107.50000000 285.04916382]
[107.50000000 300.04916382]
[107.50000000 315.04916382]
[107.50000000 330.04916382]
[107.50000000 345.04916382]
[107.50000000 360.04916382]
[107.50000000 375.04916382]
[107.50000000 390.04916382]
[107.50000000 405.04916382]
[107.50000000 420.04916382]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[24 127]
[25 126]
[26 125]
[28 123]
[30 121]
[31 120]
[32 119]
[33 118]
[34 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
