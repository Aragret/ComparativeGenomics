%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGGAAUACUAGUAUAUCGCUCACACCUCAUAUCCUCCCUACUAUGCCUAGAAGGAAUAAUxxxxxxxxxxGGAAUACUAGUAUAUCGCUCACACCUCAUAUCCUCCCUACUAUGCCUAGAAGGAAUAAUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[98.99032593 204.08445740]
[98.05469513 189.11366272]
[97.11907196 174.14286804]
[96.18344116 159.17207336]
[95.24781036 144.20127869]
[94.31217957 129.23049927]
[93.37655640 114.25970459]
[88.91973877 99.93710327]
[81.19565582 87.07870483]
[73.47157288 74.22029877]
[65.74748230 61.36189651]
[58.02339935 48.50349426]
[50.29931259 35.64509201]
[42.57522964 22.78668976]
[32.70950699 11.48768520]
[21.00988197 2.10052347]
[9.31025887 -7.28663826]
[-2.38936448 -16.67379951]
[-14.08898830 -26.06096268]
[-25.78861237 -35.44812393]
[-37.48823547 -44.83528519]
[-49.18785858 -54.22244644]
[-60.88748169 -63.60960770]
[-72.58710480 -72.99677277]
[-81.29951477 -75.95410919]
[-84.42980957 -82.70294952]
[-95.93161774 -92.33147430]
[-108.17184448 -82.37533569]
[-122.10031891 -74.97235870]
[-137.19190979 -70.39969635]
[-152.87797546 -68.82781982]
[-168.56788635 -70.31418610]
[-183.67115784 -74.80111694]
[-197.61972046 -82.11804962]
[-209.88931274 -91.98799896]
[-220.01913452 -104.03808594]
[-227.62918091 -117.81356049]
[-232.43447876 -132.79502869]
[-234.25581360 -148.41799927]
[-233.02630615 -164.09416199]
[-228.79400635 -179.23352051]
[-221.71987915 -193.26663208]
[-233.61225891 -202.40837097]
[-245.50463867 -211.55009460]
[-257.39700317 -220.69183350]
[-270.30679321 -219.80204773]
[-280.03359985 -227.71456909]
[-281.68023682 -239.73937988]
[-293.37985229 -249.12654114]
[-305.07949829 -258.51370239]
[-320.37979126 -255.28350830]
[-334.15246582 -262.68945312]
[-339.89440918 -277.23468018]
[-334.89450073 -292.05139160]
[-321.51351929 -300.14358521]
[-306.06958008 -297.69036865]
[-295.85479736 -285.85006714]
[-295.69232178 -270.21331787]
[-283.99270630 -260.82617188]
[-272.29309082 -251.43901062]
[-254.85389709 -249.74340820]
[-248.25527954 -232.58421326]
[-236.36289978 -223.44247437]
[-224.47052002 -214.30075073]
[-212.57814026 -205.15901184]
[-202.00405884 -214.73553467]
[-189.91076660 -222.31022644]
[-176.67277527 -227.64703369]
[-162.70028687 -230.57922363]
[-148.42648315 -231.01460266]
[-134.29414368 -228.93841553]
[-120.74186707 -224.41380310]
[-108.19049072 -217.57994080]
[-97.02997589 -208.64773560]
[-87.60733795 -197.89329529]
[-80.21584320 -185.64941406]
[-75.08586884 -172.29528809]
[-72.37773132 -158.24472046]
[-72.17668915 -143.93338013]
[-74.49023438 -129.80520630]
[-79.24783325 -116.29870605]
[-86.30309296 -103.83328247]
[-74.80128479 -94.20475006]
[-63.19994354 -84.69639587]
[-51.50032043 -75.30923462]
[-39.80069733 -65.92207336]
[-28.10107422 -56.53490829]
[-16.40144920 -47.14774704]
[-4.70182610 -37.76058578]
[6.99779749 -28.37342453]
[18.69742012 -18.98626137]
[30.39704514 -9.59910011]
[42.09666824 -0.21193844]
[37.16131210 -14.37676334]
[37.00118256 -29.37590790]
[41.63299942 -43.64287186]
[50.57302475 -55.68762207]
[62.88756180 -64.25221252]
[77.29048920 -68.44216156]
[92.27757263 -67.81987000]
[106.28357697 -62.45033264]
[117.84571838 -52.89434433]
[125.75644684 -40.14992142]
[129.18959045 -25.54808807]
[127.78656769 -10.61384678]
[121.69393158 3.09307694]
[111.54798126 14.14114094]
[98.40835571 21.37649155]
[83.64735413 24.04347229]
[68.80660248 21.86354828]
[55.43363190 15.06260490]
[63.15771866 27.92100716]
[70.88180542 40.77941132]
[78.60588837 53.63781357]
[86.32997131 66.49621582]
[94.05405426 79.35461426]
[101.77814484 92.21302032]
[110.23279572 83.03963470]
[123.99530792 79.39379883]
[140.16738892 83.43321228]
[153.55366516 90.20132446]
[166.93995667 96.96943665]
[183.27494812 95.52030945]
[192.47468567 109.09590912]
[185.07527161 123.73081970]
[168.68858337 124.36990356]
[160.17184448 110.35572052]
[146.78555298 103.58760834]
[133.39927673 96.81949615]
[127.13629150 100.94564056]
[135.63905334 113.30294800]
[144.14181519 125.66025543]
[152.64457703 138.01756287]
[163.85711670 147.98144531]
[158.32946777 161.92579651]
[143.33547974 161.50120544]
[138.60574341 147.26655579]
[130.60726929 134.57701111]
[122.60879517 121.88746643]
[114.61032867 109.19792938]
[108.34734344 113.32407379]
[109.28297424 128.29486084]
[110.21860504 143.26565552]
[111.15422821 158.23645020]
[112.08985901 173.20724487]
[113.02548981 188.17802429]
[113.96112061 203.14881897]
[123.47644806 216.50511169]
[116.42200470 231.30940247]
[100.05478668 232.33229065]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 147]
[2 146]
[3 145]
[4 144]
[5 143]
[6 142]
[7 141]
[8 117]
[9 116]
[10 115]
[11 114]
[12 113]
[13 112]
[14 111]
[15 93]
[16 92]
[17 91]
[18 90]
[19 89]
[20 88]
[21 87]
[22 86]
[23 85]
[24 84]
[26 83]
[27 82]
[42 65]
[43 64]
[44 63]
[45 62]
[48 60]
[49 59]
[50 58]
[120 129]
[121 128]
[122 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
