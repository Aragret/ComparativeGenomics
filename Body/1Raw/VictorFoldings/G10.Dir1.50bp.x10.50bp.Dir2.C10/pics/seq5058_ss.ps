%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUCUUCUCACAUGACAAAAACUAGCCCCCAUCUCAAUCAUAUACCAAAUCUCUCCCUCACxxxxxxxxxxAAGCAAUAUGAAAUGAUCUGCUGCAGUGCUCUGAGCCCUAGGAUUCAUCUUUCUUUUCACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[83.67228699 460.97833252]
[83.67228699 445.97833252]
[83.67228699 430.97833252]
[83.67228699 415.97833252]
[83.67228699 400.97833252]
[83.67228699 385.97833252]
[83.67228699 370.97833252]
[83.67228699 355.97833252]
[83.67228699 340.97833252]
[83.67228699 325.97833252]
[68.15362549 322.03216553]
[54.15995407 314.22698975]
[42.63300705 303.08178711]
[34.35011292 289.34054565]
[29.87179756 273.92251587]
[29.50385094 257.86077881]
[33.27644730 242.23309326]
[40.94175720 228.08940125]
[51.99022293 216.38145447]
[65.68442535 207.89866638]
[81.10829163 203.21496582]
[80.48431396 188.22795105]
[79.86033630 173.24093628]
[79.23635864 158.25392151]
[71.59347534 171.16075134]
[59.86703110 180.51438904]
[45.58410263 185.09674072]
[30.60469246 184.31108093]
[16.87949371 178.25973511]
[6.19587231 167.73071289]
[-0.05489401 154.09516907]
[-1.05879891 139.12879944]
[3.31489134 124.78060913]
[12.49661160 112.91907501]
[25.29067230 105.08887482]
[40.03096390 102.30970001]
[54.79792786 104.94346619]
[67.66854095 112.64719391]
[76.96671295 124.41766357]
[81.48137665 138.72030640]
[85.48912048 124.26560974]
[89.49685669 109.81092072]
[89.65289307 94.81173706]
[85.94673157 80.27679443]
[82.24057007 65.74185944]
[69.07850647 52.90676117]
[74.40317535 36.21401215]
[70.39543152 21.75932312]
[66.38769531 7.30463457]
[62.37995148 -7.15005398]
[58.37221146 -21.60474205]
[54.36447144 -36.05942917]
[39.38568497 -34.68984604]
[24.40308571 -36.01704407]
[9.89829826 -39.99836731]
[-3.66240597 -46.50583267]
[-15.84310722 -55.33024597]
[-26.25224686 -66.18794250]
[-34.55521393 -78.72989655]
[-40.48509979 -92.55292511]
[-43.85128784 -107.21268463]
[-44.54556656 -122.23792267]
[-42.54561615 -137.14564514]
[-37.91572952 -151.45660400]
[-30.80473709 -164.71080017]
[-21.44122696 -176.48214722]
[-10.12619972 -186.39224243]
[2.77661490 -194.12251282]
[16.85244560 -199.42446899]
[31.64880943 -202.12768555]
[46.69007111 -202.14524841]
[61.49270630 -199.47659302]
[75.58087921 -194.20751953]
[88.50171661 -186.50740051]
[99.83985138 -176.62376404]
[109.23082733 -164.87432861]
[116.37275696 -151.63677979]
[121.03604889 -137.33665466]
[123.07081604 -122.43364716]
[122.41162872 -107.40682983]
[119.07968140 -92.73925018]
[113.18209839 -78.90240479]
[104.90843964 -66.34110260]
[94.52468872 -55.45912170]
[82.36463165 -46.60628510]
[68.81916046 -40.06717300]
[72.82689667 -25.61248207]
[76.83464050 -11.15779400]
[80.84237671 3.29689407]
[84.85012054 17.75158310]
[88.85786438 32.20627213]
[99.25668335 38.46500778]
[102.68808746 50.52503967]
[96.77551270 62.03570175]
[100.48167419 76.57063293]
[104.18783569 91.10557556]
[108.09448242 89.37842560]
[112.81620789 89.01818085]
[127.63396454 86.68707275]
[142.37178040 83.89475250]
[157.01527405 80.64392090]
[171.65878296 77.39309692]
[179.41773987 72.44837189]
[186.64064026 74.23031616]
[201.34860229 71.28483582]
[216.05656433 68.33934784]
[228.00802612 57.11016846]
[243.62825012 62.10425949]
[246.84848022 78.18412781]
[234.35601807 88.80818176]
[219.00204468 83.04730988]
[204.29408264 85.99279785]
[189.58612061 88.93827820]
[174.90960693 92.03659821]
[160.26609802 95.28742218]
[145.62260437 98.53825378]
[143.41494751 101.36557770]
[139.69903564 103.23471069]
[134.95434570 103.43531036]
[129.96507263 101.50482941]
[115.14731598 103.83593750]
[103.95154572 113.81866455]
[99.94380951 128.27334595]
[95.93606567 142.72804260]
[94.22338104 157.62994385]
[94.84735107 172.61695862]
[95.47132874 187.60397339]
[96.09530640 202.59098816]
[109.87670898 205.30929565]
[122.69012451 211.04614258]
[133.88409424 219.50598145]
[142.89038086 230.25494385]
[149.25276184 242.74302673]
[152.65022278 256.33230591]
[152.91304016 270.32952881]
[150.03138733 284.02139282]
[144.15553284 296.71093750]
[135.58807373 307.75308228]
[124.76837921 316.58734131]
[112.24997711 322.76632690]
[98.67228699 325.97833252]
[98.67228699 340.97833252]
[98.67228699 355.97833252]
[98.67228699 370.97833252]
[98.67228699 385.97833252]
[98.67228699 400.97833252]
[98.67228699 415.97833252]
[98.67228699 430.97833252]
[98.67228699 445.97833252]
[98.67228699 460.97833252]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[21 128]
[22 127]
[23 126]
[24 125]
[40 124]
[41 123]
[42 122]
[43 96]
[44 95]
[45 94]
[47 91]
[48 90]
[49 89]
[50 88]
[51 87]
[52 86]
[98 121]
[99 120]
[100 116]
[101 115]
[102 114]
[104 113]
[105 112]
[106 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
