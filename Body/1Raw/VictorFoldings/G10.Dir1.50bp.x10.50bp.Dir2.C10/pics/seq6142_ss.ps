%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGCUUCAAUCUACUUCUCCCGCCGCCGGGAAAAAAGGCGGGAGAAGCCCCGGCAGGUUUGAAxxxxxxxxxxUAUCUCGAACUGACACUGAGCCACAACCCAAACAACCCAGCUCUCCCUAAGCUUCAAACUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[87.65063477 319.65393066]
[90.23641205 300.44552612]
[90.54438782 285.44866943]
[90.85237122 270.45184326]
[91.16034698 255.45500183]
[91.46832275 240.45816040]
[91.77629852 225.46131897]
[92.08428192 210.46449280]
[92.39225769 195.46765137]
[92.70023346 180.47080994]
[93.00820923 165.47396851]
[87.78720856 160.08963013]
[80.32706451 173.10295105]
[77.60713196 187.85427856]
[65.74530029 197.03562927]
[50.78315353 195.97064209]
[40.34135056 185.20176697]
[39.73820496 170.21389771]
[49.28091812 158.64079285]
[64.10832214 156.37681580]
[77.34519958 149.32095337]
[72.12419128 143.93661499]
[57.12498474 143.78262329]
[42.12577438 143.62861633]
[27.12656593 143.47462463]
[12.12735558 143.32063293]
[-2.87185383 143.16662598]
[-17.87106323 143.01263428]
[-32.87027359 142.85864258]
[-47.86948395 142.70463562]
[-62.86869049 142.55064392]
[-77.86790466 142.39665222]
[-84.58493042 156.10227966]
[-96.58871460 165.52946472]
[-111.49590302 168.80642700]
[-126.34665680 165.28253174]
[-138.19235229 155.65745544]
[-144.68101501 141.84223938]
[-144.52430725 126.57993317]
[-137.75337219 112.90085602]
[-125.71254730 103.52101135]
[-110.79257202 100.30277252]
[-95.95581055 103.88512421]
[-84.14810944 113.55678558]
[-77.71390533 127.39743805]
[-62.71469498 127.55143738]
[-47.71548462 127.70542908]
[-32.71627426 127.85942841]
[-17.71706581 128.01342773]
[-2.71785688 128.16741943]
[12.28135204 128.32142639]
[27.28056145 128.47541809]
[42.27976990 128.62940979]
[57.27898026 128.78341675]
[72.27819061 128.93740845]
[64.20918274 113.91724396]
[63.34829330 97.60929871]
[69.25292969 83.15775299]
[80.23185730 73.09580231]
[93.77140808 68.90367889]
[86.60720062 54.79748535]
[94.86049652 42.39860153]
[95.47631836 27.41124725]
[96.09214783 12.42389393]
[93.30471802 3.65884590]
[96.87760925 -2.86393523]
[97.80102539 -17.83548546]
[98.72443390 -32.80703354]
[99.64785004 -47.77858353]
[100.57126617 -62.75013351]
[86.77056122 -69.06717682]
[76.18656921 -79.94575500]
[70.25068665 -93.91464233]
[69.76569366 -109.08465576]
[74.79718018 -123.40416718]
[84.66468048 -134.93659973]
[98.03369904 -142.12226868]
[113.09617615 -143.98937988]
[127.81504822 -140.28541565]
[140.19970703 -131.51130676]
[148.57521057 -118.85369873]
[151.80886841 -104.02440643]
[149.46333313 -89.02897644]
[141.85581970 -75.89541626]
[130.01519775 -66.39994049]
[115.54281616 -61.82672119]
[114.61940002 -46.85517120]
[113.69598389 -31.88362122]
[112.77257538 -16.91207123]
[111.84915924 -1.94052172]
[111.07949829 13.03971958]
[110.46367645 28.02707291]
[109.84784698 43.01442719]
[117.05610657 56.04862213]
[108.75875854 69.51950836]
[125.56046295 77.87849426]
[135.56309509 95.13986969]
[134.33712769 116.23906708]
[120.99563599 134.13290405]
[135.86224365 132.13685608]
[150.72883606 130.14079285]
[165.59542847 128.14474487]
[168.29614258 113.25980377]
[175.46615601 99.93891144]
[186.40303040 89.48711395]
[200.03527832 82.92837524]
[215.02734375 80.90524292]
[229.91047668 83.61592865]
[243.22654724 90.79486847]
[253.67102051 101.73873901]
[260.22061157 115.37537384]
[262.23370361 130.36880493]
[259.51306152 145.25010681]
[252.32519531 158.56137085]
[241.37431335 168.99850464]
[227.73330688 175.53897095]
[212.73852539 177.54200745]
[197.85905457 174.81137085]
[184.55261230 167.61459351]
[174.12281799 156.65673828]
[167.59149170 143.01133728]
[152.72489929 145.00740051]
[137.85829163 147.00344849]
[122.99169159 148.99951172]
[136.99533081 154.37522888]
[150.99894714 159.75094604]
[165.00257874 165.12667847]
[179.95977783 166.25912476]
[193.49078369 172.73303223]
[203.75750732 183.66896057]
[209.36526489 197.58129883]
[209.55223083 212.58013916]
[204.29304504 226.62794495]
[194.30213928 237.81640625]
[180.93670654 244.62561035]
[166.01239014 246.13056946]
[151.55659485 242.12684631]
[139.53305054 233.15832520]
[131.57511902 220.44332886]
[128.76382446 205.70779419]
[121.84423065 192.39918518]
[114.92464447 179.09056091]
[108.00505066 165.78195190]
[107.69707489 180.77879333]
[107.38909149 195.77563477]
[107.08111572 210.77246094]
[106.77313995 225.76930237]
[106.46516418 240.76614380]
[106.15718079 255.76298523]
[105.84920502 270.75982666]
[105.54122925 285.75665283]
[105.23325348 300.75347900]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 152]
[3 151]
[4 150]
[5 149]
[6 148]
[7 147]
[8 146]
[9 145]
[10 144]
[11 143]
[22 55]
[23 54]
[24 53]
[25 52]
[26 51]
[27 50]
[28 49]
[29 48]
[30 47]
[31 46]
[32 45]
[60 95]
[62 93]
[63 92]
[64 91]
[66 90]
[67 89]
[68 88]
[69 87]
[70 86]
[99 124]
[100 123]
[101 122]
[102 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
