%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUAAACACCCUCACCACUACAAUCUUCCUAGGAACAACAUAUGACGCACUCUCCCCUGAAxxxxxxxxxxGCCACCAUGAAUAUUGUACGGUACCAUAAAUACUUGACCACCUGUAGUACAUAAAAACCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[72.04230499 506.49011230]
[72.04230499 491.49011230]
[72.04230499 476.49011230]
[72.04230499 461.49011230]
[72.04230499 446.49011230]
[72.04230499 431.49011230]
[72.04230499 416.49011230]
[72.04230499 401.49011230]
[72.04230499 386.49011230]
[72.04230499 371.49011230]
[58.53147507 368.83270264]
[45.74871063 363.70156860]
[34.14277649 356.27508545]
[24.12144089 346.81216431]
[16.03717995 335.64340210]
[10.17475605 323.15936279]
[6.74119949 309.79696655]
[5.85849571 296.02426147]
[7.55925131 282.32400513]
[11.78549290 269.17672729]
[18.39064407 257.04379272]
[27.14460182 246.35137939]
[37.74176025 237.47540283]
[49.81167603 230.72830200]
[62.93201447 226.34806824]
[76.64333344 224.48985291]
[77.57896423 209.51905823]
[78.51458740 194.54826355]
[79.45021820 179.57746887]
[80.38584900 164.60668945]
[81.32147980 149.63589478]
[70.86111450 160.38674927]
[56.28315735 163.91990662]
[42.06139755 159.15109253]
[32.56031418 147.54379272]
[30.69566154 132.66014099]
[37.03968430 119.06774139]
[49.64547729 110.93791962]
[64.64449310 110.76562500]
[77.43370819 118.60372925]
[84.08843231 132.04760742]
[87.79459381 117.51266479]
[78.65830231 99.55591583]
[88.53366089 81.99476624]
[85.43534088 67.31824493]
[82.33702087 52.64171600]
[79.23869324 37.96519089]
[64.26167297 39.12438202]
[49.26147461 38.31870651]
[34.49478149 35.56194305]
[20.21426392 30.90126610]
[6.66428661 24.41642952]
[-5.92329550 16.21839333]
[-17.33309174 6.44743776]
[-27.36986542 -4.72924232]
[-35.86187363 -17.12039948]
[-42.66381073 -30.51400566]
[-47.65928268 -44.68087769]
[-50.76280975 -59.37860489]
[-51.92128754 -74.35568237]
[-51.11489487 -89.35584259]
[-48.35742950 -104.12240601]
[-43.69607544 -118.40270233]
[-37.21059418 -131.95236206]
[-29.01195717 -144.53956604]
[-19.24045944 -155.94889832]
[-8.06330204 -165.98513794]
[4.32826042 -174.47654724]
[17.72219086 -181.27784729]
[31.88930130 -186.27264404]
[46.58717346 -189.37547302]
[61.56430817 -190.53324890]
[76.56443024 -189.72613525]
[91.33086395 -186.96797180]
[105.61093140 -182.30593872]
[119.16029358 -175.81980896]
[131.74710083 -167.62057495]
[143.15596008 -157.84852600]
[153.19166565 -146.67089844]
[161.68249512 -134.27893066]
[168.48315430 -120.88467407]
[173.47727966 -106.71732330]
[176.57940674 -92.01930237]
[177.73646545 -77.04211426]
[176.92864990 -62.04203415]
[174.16976929 -47.27573395]
[169.50706482 -32.99588394]
[163.02029419 -19.44683075]
[154.82044983 -6.86042023]
[145.04786682 4.54798079]
[133.86975098 14.58315849]
[121.47738647 23.07339859]
[108.08280945 29.87342072]
[93.91522217 34.86687088]
[97.01354218 49.54339600]
[100.11186218 64.21991730]
[103.21018982 78.89644623]
[109.33398438 80.80255127]
[114.61517334 84.44165802]
[118.57701111 89.48525238]
[133.39477539 87.15415192]
[148.21252441 84.82304382]
[151.74246216 70.03765106]
[160.66587830 57.73150253]
[173.62199402 49.78120804]
[188.63513184 47.39912796]
[203.41587830 50.94850922]
[215.71026611 59.88809586]
[223.64350891 72.85467529]
[226.00584412 87.87092590]
[222.43702698 102.64698792]
[213.48127747 114.92961121]
[200.50427246 122.84579468]
[185.48492432 125.18836975]
[170.71357727 121.60011292]
[158.44273376 112.62820435]
[150.54364014 99.64080811]
[135.72587585 101.97190857]
[120.90811920 104.30301666]
[114.37126923 115.78391266]
[102.32953644 121.21882629]
[98.62337494 135.75376892]
[96.29226685 150.57151794]
[95.35663605 165.54231262]
[94.42101288 180.51310730]
[93.48538208 195.48390198]
[92.54975128 210.45468140]
[91.61412811 225.42547607]
[107.30603027 229.87738037]
[121.63330078 237.66026306]
[133.89923096 248.39242554]
[143.50808716 261.54885864]
[149.99400330 276.48684692]
[153.04354858 292.47747803]
[152.51095581 308.74108887]
[148.42501831 324.48538208]
[140.98754883 338.94400024]
[130.56344604 351.41375732]
[117.66278839 361.28894043]
[102.91584778 368.09066772]
[87.04230499 371.49011230]
[87.04230499 386.49011230]
[87.04230499 401.49011230]
[87.04230499 416.49011230]
[87.04230499 431.49011230]
[87.04230499 446.49011230]
[87.04230499 461.49011230]
[87.04230499 476.49011230]
[87.04230499 491.49011230]
[87.04230499 506.49011230]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[26 128]
[27 127]
[28 126]
[29 125]
[30 124]
[31 123]
[41 122]
[42 121]
[44 97]
[45 96]
[46 95]
[47 94]
[100 119]
[101 118]
[102 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
