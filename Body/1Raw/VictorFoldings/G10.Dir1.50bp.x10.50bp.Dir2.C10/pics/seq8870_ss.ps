%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGGCCUAGCCAUGUGAUUUCACUUCCACUCCAUAACGCUCCUCAUACUAGGCCUACUAACCAxxxxxxxxxxAUAUUGUGCCUAUUGCCAUACUAGUCUUUGCCGCCUGCGAAGCAGCGGUGGGCCUAGCCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[88.82849884 290.21911621]
[88.82849884 275.21911621]
[88.82849884 260.21911621]
[88.82849884 245.21913147]
[88.82849884 230.21913147]
[88.82849884 215.21913147]
[88.82849884 200.21913147]
[88.82849884 185.21913147]
[88.82849884 170.21913147]
[88.82849884 155.21913147]
[77.84770203 145.00041199]
[62.88641739 146.07748413]
[47.92513657 147.15455627]
[32.96385574 148.23162842]
[18.00257683 149.30870056]
[3.04129601 150.38577271]
[-11.91998482 151.46284485]
[-20.97063255 160.70889282]
[-33.49504471 161.26606750]
[-42.71965027 153.38133240]
[-57.69989014 154.15100098]
[-72.68013000 154.92065430]
[-74.94471741 169.80207825]
[-80.15888214 183.92288208]
[-88.10910034 196.70486450]
[-98.46982574 207.62458801]
[-110.81678009 216.23489380]
[-124.64437866 222.18321228]
[-139.38638306 225.22595215]
[-154.43911743 225.23852539]
[-169.18617249 222.22039795]
[-183.02368164 216.29516602]
[-195.38499451 207.70549011]
[-205.76393127 196.80308533]
[-213.73548889 184.03439331]
[-218.97322083 169.92230225]
[-221.26264954 155.04469299]
[-220.51002502 140.01078796]
[-216.74617004 125.43620300]
[-210.12519836 111.91778564]
[-200.91825867 100.00908661]
[-189.50236511 90.19776154]
[-176.34497070 82.88558960]
[-161.98487854 78.37198639]
[-147.01011658 76.84178925]
[-132.03390503 78.35765839]
[-117.66949463 82.85751343]
[-104.50511169 90.15709686]
[-93.07981873 99.95748901]
[-83.86148834 111.85736847]
[-77.22759247 125.36945343]
[-73.44979095 139.94041443]
[-58.46955109 139.17076111]
[-43.48930740 138.40109253]
[-29.33565903 128.07061768]
[-12.99705410 136.50155640]
[1.96422625 135.42448425]
[16.92550659 134.34741211]
[31.88678741 133.27035522]
[46.84806824 132.19328308]
[61.80934906 131.11621094]
[76.77062988 130.03913879]
[69.89888763 88.69522095]
[101.58634186 73.71302795]
[106.71664429 59.61763763]
[111.84694672 45.52225113]
[116.97724915 31.42686081]
[105.26977539 40.80423355]
[91.34886932 46.39066696]
[76.40679932 47.70769119]
[61.72331238 44.64251709]
[48.55601120 37.45766068]
[38.03263092 26.76848793]
[31.05446625 13.49048996]
[28.21917725 -1.23911071]
[29.76959801 -16.15876961]
[35.57294083 -29.99065971]
[45.13216400 -41.55012512]
[57.62855148 -49.84713364]
[71.99182129 -54.17106628]
[86.99181366 -54.15159225]
[101.34381104 -49.79038620]
[113.81861115 -41.46096420]
[123.34779358 -29.87671852]
[129.11520386 -16.02980804]
[130.62689209 -1.10617495]
[127.75263977 13.61807346]
[137.85807800 2.53293991]
[147.61735535 -8.85813332]
[157.02120972 -20.54434204]
[156.73158264 -36.58478165]
[169.18328857 -46.70084000]
[184.82443237 -43.13234329]
[191.65647888 -28.61673737]
[184.43844604 -14.28915215]
[168.70741272 -11.14048576]
[159.30355835 0.54572332]
[159.34455872 4.12978983]
[157.61244202 7.90727282]
[154.03797913 11.02639198]
[148.94320679 12.63837433]
[138.83776855 23.72350883]
[131.07263184 36.55716324]
[125.94233704 50.65254974]
[120.81203461 64.74794006]
[115.68173218 78.84333038]
[123.28906250 83.29205322]
[129.49681091 90.49606323]
[133.31773376 99.96401978]
[133.95132446 110.85831451]
[130.90194702 122.06860352]
[145.48568726 125.57777405]
[160.06944275 129.08694458]
[174.65319824 132.59611511]
[189.23693848 136.10527039]
[198.37605286 135.06965637]
[204.08258057 139.83911133]
[218.59121704 143.64695740]
[233.09983826 147.45481873]
[249.95501709 145.62742615]
[256.37698364 161.31802368]
[243.07734680 171.83259583]
[229.29197693 161.96345520]
[214.78335571 158.15559387]
[200.27473450 154.34773254]
[185.72776794 150.68902588]
[171.14402771 147.17985535]
[156.56027222 143.67068481]
[141.97653198 140.16152954]
[127.39277649 136.65235901]
[121.50170898 141.29405212]
[132.61776733 151.36544800]
[143.73382568 161.43685913]
[157.98133850 166.12815857]
[165.61592102 179.03991699]
[162.86077881 193.78471375]
[151.07885742 203.06837463]
[136.09863281 202.29832458]
[125.33076477 191.85548401]
[124.10233307 176.90490723]
[116.91095734 163.74116516]
[109.71957397 150.57743835]
[103.82849884 155.21913147]
[103.82849884 170.21913147]
[103.82849884 185.21913147]
[103.82849884 200.21913147]
[103.82849884 215.21913147]
[103.82849884 230.21913147]
[103.82849884 245.21913147]
[103.82849884 260.21911621]
[103.82849884 275.21911621]
[103.82849884 290.21911621]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 62]
[12 61]
[13 60]
[14 59]
[15 58]
[16 57]
[17 56]
[20 54]
[21 53]
[22 52]
[64 106]
[65 105]
[66 104]
[67 103]
[87 102]
[88 101]
[89 97]
[90 96]
[111 130]
[112 129]
[113 128]
[114 127]
[115 126]
[117 125]
[118 124]
[119 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
