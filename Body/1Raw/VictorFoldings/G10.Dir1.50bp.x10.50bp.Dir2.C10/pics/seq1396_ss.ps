%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGCCCUAAACCUCAACAGUUAAAUCAACAAAACUGCUCGCCAGAACACUACGAGCCACAGCUUAAAxxxxxxxxxxCUCUACCUAAAACUCACAGCCCUCGCUGUCACUUUCCUAGGACUUCUAACAGCCCUAGACCUCAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[164.20346069 392.43963623]
[164.20346069 377.43963623]
[164.20346069 362.43963623]
[164.20346069 347.43963623]
[164.20346069 332.43963623]
[164.20346069 317.43963623]
[164.20346069 302.43963623]
[164.20346069 287.43963623]
[164.20346069 272.43963623]
[164.20346069 257.43963623]
[161.04708862 242.77548218]
[154.87568665 229.10383606]
[142.58724976 220.68698120]
[143.96159363 204.92558289]
[137.79019165 191.25393677]
[131.61880493 177.58229065]
[125.05477905 164.09475708]
[118.10363770 150.80259705]
[111.15248871 137.51043701]
[103.87709808 139.63087463]
[96.19982910 140.32824707]
[88.40119171 139.52708435]
[80.77566528 137.20758057]
[73.62054443 133.40815735]
[67.22443390 128.22564697]
[61.85569763 121.81339264]
[57.75136948 114.37693024]
[43.05747986 117.39184570]
[28.36359406 120.40675354]
[13.66970634 123.42166138]
[8.89663792 138.02006531]
[-2.54687190 148.26417542]
[-17.58257675 151.39836121]
[-32.16594696 146.57955933]
[-42.37413025 135.10398865]
[-45.46117783 120.05854034]
[-40.59668350 105.49034119]
[-29.08917809 95.31818390]
[-14.03412056 92.27831268]
[0.51875430 97.18844604]
[10.65479660 108.72777557]
[25.34868431 105.71286774]
[40.04257202 102.69795990]
[54.73645782 99.68304443]
[57.32536316 84.90814972]
[44.53198242 77.07683563]
[31.73860741 69.24552155]
[18.94522858 61.41420364]
[6.15185213 53.58288956]
[-6.58001232 55.83475113]
[-17.08588982 49.00999069]
[-20.00899696 37.24101639]
[-32.64907074 29.16459846]
[-49.04704285 28.96828842]
[-56.83899689 14.53854465]
[-48.00923538 0.71945006]
[-31.64106369 1.72690403]
[-24.57265091 16.52452469]
[-11.93257713 24.60094452]
[5.59507990 24.42168808]
[13.98316669 40.78951263]
[26.77654457 48.62082672]
[39.56992340 56.45214081]
[52.36330032 64.28345490]
[65.15667725 72.11476898]
[85.19721985 60.82274628]
[106.74990082 61.45327759]
[112.12091827 47.44784546]
[117.49193573 33.44241333]
[122.86296082 19.43698120]
[128.23397827 5.43154812]
[115.18545532 -2.02742887]
[103.42852020 -11.39092636]
[93.23879242 -22.43944931]
[84.85513306 -34.91400909]
[78.47405243 -48.52217484]
[74.24514008 -62.94496155]
[72.26753235 -77.84427643]
[72.58757782 -92.87084961]
[75.19778442 -107.67244720]
[80.03695679 -121.90209198]
[86.99166107 -135.22622681]
[95.89886475 -147.33250427]
[106.54978180 -157.93714905]
[118.69472504 -166.79156494]
[132.04901123 -173.68820190]
[146.29959106 -178.46537781]
[161.11241150 -181.01110840]
[176.14024353 -181.26573181]
[191.03080750 -179.22326660]
[205.43504333 -174.93161011]
[219.01530457 -168.49134827]
[231.45323181 -160.05345154]
[242.45729065 -149.81571960]
[251.76951599 -138.01812744]
[259.17160034 -124.93724823]
[264.49008179 -110.87970734]
[267.60021973 -96.17503357]
[268.42913818 -81.16792297]
[266.95739746 -66.21016693]
[263.21951294 -51.65240097]
[257.30310059 -37.83586884]
[249.34686279 -25.08445740]
[239.53727722 -13.69707680]
[228.10430908 -3.94066262]
[215.31594849 3.95607996]
[201.47200012 9.80804062]
[186.89697266 13.47803974]
[171.93251038 14.88004875]
[156.92942810 13.98120117]
[142.23941040 10.80256844]
[136.86839294 24.80800056]
[131.49737549 38.81343460]
[126.12635040 52.81886673]
[120.75533295 66.82429504]
[133.66935730 80.05545044]
[139.06784058 97.73854828]
[135.74575806 115.92643738]
[124.44464874 130.55929565]
[131.39579773 143.85145569]
[138.34693909 157.14361572]
[142.83934021 159.98564148]
[145.49543762 163.88887024]
[146.22001648 167.96276855]
[145.29043579 171.41090393]
[151.46183777 185.08255005]
[157.63323975 198.75418091]
[170.36309814 208.14892578]
[168.54733276 222.93243408]
[174.71873474 236.60408020]
[176.21449280 221.67884827]
[181.45823669 207.62525940]
[190.10485840 195.36819458]
[201.58534241 185.71424866]
[215.14416504 179.29878235]
[229.88902283 176.54396057]
[244.84957886 177.63108826]
[259.04129028 182.48863220]
[271.53018188 190.79689026]
[281.49438477 202.00914001]
[288.27819824 215.38748169]
[291.43511963 230.05151367]
[290.75744629 245.03619385]
[286.28973389 259.35540771]
[278.32601929 272.06680298]
[267.39041138 282.33383179]
[254.20252991 289.48086548]
[239.63029480 293.03756714]
[224.63269043 292.76983643]
[210.19668579 288.69528198]
[197.27230835 281.08212280]
[186.71011353 270.43130493]
[179.20346069 257.43963623]
[179.20346069 272.43963623]
[179.20346069 287.43963623]
[179.20346069 302.43963623]
[179.20346069 317.43963623]
[179.20346069 332.43963623]
[179.20346069 347.43963623]
[179.20346069 362.43963623]
[179.20346069 377.43963623]
[179.20346069 392.43963623]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 162]
[2 161]
[3 160]
[4 159]
[5 158]
[6 157]
[7 156]
[8 155]
[9 154]
[10 153]
[11 130]
[12 129]
[14 127]
[15 126]
[16 125]
[17 121]
[18 120]
[19 119]
[27 44]
[28 43]
[29 42]
[30 41]
[45 65]
[46 64]
[47 63]
[48 62]
[49 61]
[52 59]
[53 58]
[67 115]
[68 114]
[69 113]
[70 112]
[71 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
