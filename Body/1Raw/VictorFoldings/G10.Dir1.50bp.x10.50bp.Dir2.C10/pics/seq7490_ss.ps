%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCACCUUUCAUGAUCACGCCCUCAUAAUCAUUUUCCUUAUCUGCUUCCUAGUCCUGUAUGxxxxxxxxxxAUGAAUCUGAGGAGGCUACUCAGUAGACAGUCCCACCCUCACACGAUUCUUUACCUUUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-6.07037830 235.60298157]
[-15.81803036 247.00399780]
[-25.56568336 258.40502930]
[-35.31333542 269.80603027]
[-45.06098557 281.20706177]
[-48.14806366 296.72415161]
[-62.29967499 301.36972046]
[-65.38674927 316.88681030]
[-79.53836060 321.53237915]
[-89.28601074 332.93341064]
[-99.03366089 344.33441162]
[-108.78131866 355.73544312]
[-118.52896881 367.13647461]
[-115.77774811 382.53012085]
[-123.60984039 396.06500244]
[-138.32716370 401.35031128]
[-152.98063660 395.89050293]
[-160.65136719 382.26354980]
[-157.71743774 366.90365601]
[-145.56417847 357.06329346]
[-129.92999268 357.38882446]
[-120.18233490 345.98779297]
[-110.43468475 334.58676147]
[-100.68703461 323.18576050]
[-90.93938446 311.78472900]
[-88.54952240 297.08309937]
[-73.70069122 291.62207031]
[-71.31083679 276.92044067]
[-56.46200943 271.45941162]
[-46.71435547 260.05838013]
[-36.96670532 248.65736389]
[-27.21905136 237.25634766]
[-17.47139931 225.85531616]
[-26.25867844 217.03776550]
[-34.38582230 207.60827637]
[-41.81034088 197.61618042]
[-48.49341965 187.11369324]
[-54.40010834 176.15574646]
[-59.49953079 164.79962158]
[-63.76501846 153.10470581]
[-67.17427826 141.13212585]
[-69.70948029 128.94450378]
[-71.35736847 116.60553741]
[-72.10932922 104.17974854]
[-71.96143341 91.73210907]
[-70.91444397 79.32769775]
[-68.97384644 67.03137207]
[-66.14978027 54.90741730]
[-62.45701981 43.01922607]
[-57.91485977 31.42895317]
[-52.54705811 20.19719887]
[-46.38167572 9.38268852]
[-39.45094681 -0.95803744]
[-31.79111099 -10.77091217]
[-23.44221497 -20.00463104]
[-14.44791222 -28.61091423]
[-4.85522747 -36.54476547]
[5.28568459 -43.76470566]
[15.92180252 -50.23297882]
[26.99751663 -55.91577530]
[38.45491791 -60.78337860]
[50.23410416 -64.81034088]
[62.27348709 -67.97560120]
[74.51011658 -70.26261139]
[86.88002014 -71.65942383]
[99.31851959 -72.15872955]
[111.76058197 -71.75791168]
[124.14115906 -70.45907593]
[136.39550781 -68.26900482]
[148.45957947 -65.19915771]
[160.27027893 -61.26557541]
[171.76585388 -56.48883057]
[182.88621521 -50.89389801]
[193.57319641 -44.51002502]
[203.77095032 -37.37059784]
[213.42614746 -29.51293755]
[222.48829651 -20.97812843]
[230.91003418 -11.81079578]
[238.64732361 -2.05886960]
[245.65969849 8.22666359]
[251.91050720 18.99202538]
[257.36706543 30.18093300]
[262.00082397 41.73488235]
[276.32342529 37.27806473]
[290.64602661 32.82125092]
[304.96862793 28.36443520]
[319.29122925 23.90761948]
[333.46777344 19.00606918]
[347.48449707 13.66455555]
[361.50119019 8.32304382]
[375.51791382 2.98153090]
[389.53463745 -2.35998178]
[400.78295898 -16.90147591]
[417.97448730 -13.51759720]
[431.87704468 -19.14955330]
[445.40124512 -25.63771820]
[458.49438477 -32.95682526]
[471.58755493 -40.27592850]
[484.68069458 -47.59503555]
[495.55606079 -60.60129929]
[511.06463623 -53.75144196]
[508.77569580 -36.95272446]
[491.99981689 -34.50188065]
[478.90664673 -27.18277550]
[465.81350708 -19.86367035]
[452.72033691 -12.54456425]
[466.66943359 -7.02888775]
[472.80892944 6.65712357]
[467.65304565 20.74318123]
[454.12911987 27.23187065]
[439.91537476 22.43921280]
[433.08172607 9.08625603]
[437.50900269 -5.24699736]
[423.60644531 0.38495916]
[418.57598877 11.43039513]
[406.98660278 16.21636391]
[394.87612915 11.65673161]
[380.85943604 16.99824333]
[366.84271240 22.33975601]
[352.82598877 27.68126869]
[338.80929565 33.02278137]
[337.03530884 36.14055634]
[333.63000488 38.52916718]
[328.96463013 39.41620636]
[323.74801636 38.23021698]
[309.42544556 42.68703079]
[295.10284424 47.14384842]
[280.78024292 51.60066223]
[266.45764160 56.05747986]
[270.23410034 74.32035828]
[272.01296997 92.88456726]
[271.77340698 111.53227234]
[269.51815796 130.04464722]
[265.27377319 148.20448303]
[259.08999634 165.79866028]
[251.03941345 182.62074280]
[241.21649170 198.47332764]
[229.73648071 213.17037964]
[216.73411560 226.53947449]
[202.36193848 238.42370605]
[186.78863525 248.68363953]
[170.19691467 257.19888306]
[152.78147888 263.86947632]
[134.74670410 268.61718750]
[116.30418396 271.38629150]
[97.67034912 272.14431763]
[79.06385803 270.88232422]
[60.70303345 267.61514282]
[42.80333328 262.38113403]
[25.57479477 255.24168396]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 33]
[2 32]
[3 31]
[4 30]
[5 29]
[7 27]
[9 25]
[10 24]
[11 23]
[12 22]
[13 21]
[83 129]
[84 128]
[85 127]
[86 126]
[87 125]
[88 121]
[89 120]
[90 119]
[91 118]
[92 117]
[94 114]
[95 113]
[96 106]
[97 105]
[98 104]
[99 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
