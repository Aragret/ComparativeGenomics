%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAUUAACCACUCACGGGAGCUCUCCAUGCAUUUGGUAUUUUCGUCUGGGGGGUAUGCACGxxxxxxxxxxCCUACUUACAGGACUCAACAUACUAGUCACAGCCCUAUACUCCCUCUACAUAUUUACCACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[99.41994476 481.84539795]
[99.41994476 466.84539795]
[99.41994476 451.84539795]
[99.41994476 436.84539795]
[99.41994476 421.84539795]
[99.41994476 406.84539795]
[99.41994476 391.84539795]
[99.41994476 376.84539795]
[99.41994476 361.84539795]
[99.41994476 346.84539795]
[83.98281860 343.90148926]
[69.40057373 338.03030396]
[56.22280884 329.45126343]
[44.94652939 318.48587036]
[35.99742508 305.54565430]
[29.71380806 291.11676025]
[26.33380699 275.74166870]
[25.98634720 259.99880981]
[28.68624115 244.48074341]
[34.33355713 229.77192688]
[42.71732712 216.42671204]
[53.52341080 204.94836426]
[66.34628296 195.77018738]
[80.70424652 189.23907471]
[96.05751801 185.60246277]
[95.43354034 170.61544800]
[94.80956268 155.62843323]
[94.18558502 140.64141846]
[93.56161499 125.65440369]
[83.71813965 122.14732361]
[75.66275024 114.88150024]
[70.81647491 104.73243713]
[70.18406677 93.10406494]
[74.16239166 81.73561859]
[60.03759003 76.68686676]
[45.91278839 71.63810730]
[36.86817551 83.74952698]
[24.65450668 92.65557098]
[10.35781193 97.56433868]
[-4.75065565 98.03932190]
[-19.32746124 94.03830719]
[-32.07644653 85.91705322]
[-41.86397934 74.39769745]
[-47.81975937 60.50452805]
[-49.41420364 45.47292328]
[-46.50553131 30.63947868]
[-39.35238266 17.32317734]
[-28.59081268 6.70809412]
[-15.17772865 -0.26188493]
[-0.30581614 -2.96699405]
[14.70252609 -1.16669655]
[28.51276588 4.97892618]
[39.89690781 14.92340946]
[47.84267807 27.78249741]
[51.64354706 42.41276550]
[50.96154404 57.51330566]
[65.08634949 62.56206131]
[79.21115112 67.61081696]
[93.17153931 62.12378693]
[100.07853699 48.80863190]
[106.98553467 35.49347687]
[106.47183228 19.68061256]
[119.20053864 11.94567299]
[114.72414398 -8.85337257]
[129.61042786 -23.14955139]
[130.85729980 -38.09763718]
[116.65438843 -43.19075012]
[104.25418091 -51.78710175]
[94.50214386 -63.30057526]
[88.06317902 -76.94616699]
[85.37631226 -91.79349518]
[86.62473297 -106.83024597]
[91.72332764 -121.03118896]
[100.32446289 -133.42807007]
[111.84170532 -143.17567444]
[125.48978424 -149.60935974]
[140.33815002 -152.29049683]
[155.37442017 -151.03627014]
[169.57337952 -145.93218994]
[181.96694946 -137.32626343]
[191.71009827 -125.80526733]
[198.13851929 -112.15470886]
[200.81391907 -97.30530548]
[199.55389404 -82.26952362]
[194.44433594 -68.07252502]
[185.83361816 -55.68228531]
[174.30885315 -45.94358444]
[160.65582275 -39.52043152]
[145.80538940 -36.85076523]
[144.55851746 -21.90267754]
[146.39585876 -20.89626503]
[148.12301636 -19.71068573]
[160.90037537 -27.56811142]
[173.67773438 -35.42553711]
[186.45509338 -43.28296280]
[186.65863037 -58.70898438]
[195.18885803 -71.56351471]
[209.32379150 -77.74471283]
[224.55302429 -75.28019714]
[236.01698303 -64.95636749]
[240.05752563 -50.06753159]
[235.38537598 -35.36465836]
[223.49136353 -25.53938293]
[208.17083740 -23.72691536]
[194.31251526 -30.50560570]
[181.53515625 -22.64818001]
[168.75779724 -14.79075432]
[155.98043823 -6.93332863]
[154.68666077 6.05894899]
[145.80784607 15.99629021]
[132.51568604 18.85267067]
[133.52343750 33.71314621]
[120.30068970 42.40047455]
[113.39369202 55.71562958]
[106.48669434 69.03078461]
[120.35511017 77.14801025]
[128.04598999 90.64605713]
[127.96191406 105.64727783]
[120.65702057 118.13533783]
[108.54862976 125.03042603]
[109.17260742 140.01744080]
[109.79658508 155.00445557]
[110.42056274 169.99147034]
[111.04454041 184.97848511]
[125.22725677 186.98193359]
[138.83508301 191.44152832]
[151.44622803 198.21768188]
[162.67010498 207.09910583]
[172.15927124 217.80929565]
[179.62030029 230.01512146]
[184.82283020 243.33731079]
[187.60659790 257.36209106]
[187.88652039 271.65414429]
[185.65515137 285.77008057]
[180.98295593 299.27218628]
[174.01608276 311.74200439]
[164.97174072 322.79330444]
[154.13150024 332.08401489]
[141.83247375 339.32693481]
[128.45681763 344.29840088]
[114.41994476 346.84539795]
[114.41994476 361.84539795]
[114.41994476 376.84539795]
[114.41994476 391.84539795]
[114.41994476 406.84539795]
[114.41994476 421.84539795]
[114.41994476 436.84539795]
[114.41994476 451.84539795]
[114.41994476 466.84539795]
[114.41994476 481.84539795]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[25 124]
[26 123]
[27 122]
[28 121]
[29 120]
[34 58]
[35 57]
[36 56]
[59 115]
[60 114]
[61 113]
[63 111]
[65 90]
[66 89]
[92 108]
[93 107]
[94 106]
[95 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
