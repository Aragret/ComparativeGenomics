%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACCAUCGCUCUUCUACUAUGAACCCCCCUCCCCAUACCCAACCCCCUGGUCAACCUCAAxxxxxxxxxxACCACAACCACCACCCCAUCAUACUCUUUCACCCACAGCACCAAUCCUACCUCCAUCGCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[147.36233521 74.44844818]
[135.28234863 83.34079742]
[123.20236206 92.23314667]
[111.12236786 101.12549591]
[99.13553619 110.14302826]
[87.24315643 119.28475952]
[75.35077667 128.42649841]
[63.45840073 137.56822205]
[51.56602097 146.70996094]
[39.67364120 155.85169983]
[39.46809006 169.35781860]
[31.61880875 180.11035156]
[19.18719864 184.29716492]
[6.80600166 180.59544373]
[-5.27398682 189.48779297]
[-17.35397530 198.38014221]
[-14.48434162 213.37106323]
[-18.41151047 228.12030029]
[-28.35573959 239.69938660]
[-42.34259415 245.80926514]
[-57.59497070 245.23683167]
[-71.08450317 238.09573364]
[-80.13283539 225.80384827]
[-82.94341278 210.80174255]
[-78.95819092 196.06808472]
[-68.96844482 184.52824402]
[-54.95763779 178.47349548]
[-39.70763397 179.10598755]
[-26.24632454 186.30014038]
[-14.16633606 177.40779114]
[-2.08634806 168.51544189]
[-0.29422519 151.82275391]
[13.26392841 141.36041260]
[30.53190613 143.95932007]
[42.42428589 134.81758118]
[54.31666565 125.67584991]
[66.20904541 116.53411865]
[78.10142517 107.39237976]
[89.99380493 98.25064850]
[93.98976898 91.18550110]
[102.23001862 89.04550934]
[114.31001282 80.15316010]
[126.38999939 71.26081085]
[138.46998596 62.36845779]
[122.83841705 34.50703430]
[112.05799866 4.43725538]
[106.42789459 -27.00340652]
[106.10383606 -58.93947601]
[111.09383392 -90.48185730]
[121.25796509 -120.75257874]
[136.31228638 -148.90924072]
[155.83679199 -174.16845703]
[145.17517090 -184.71975708]
[134.51354980 -195.27104187]
[118.52263641 -198.90737915]
[113.93548584 -214.65190125]
[125.47096252 -226.30799866]
[141.26235962 -221.88488770]
[145.06483459 -205.93266296]
[155.72645569 -195.38137817]
[166.38809204 -184.83009338]
[173.92401123 -191.50968933]
[181.80101013 -197.78358459]
[189.99725342 -203.63441467]
[198.49005127 -209.04595947]
[207.25587463 -214.00320435]
[216.27044678 -218.49243164]
[225.50881958 -222.50117493]
[234.94538879 -226.01834106]
[244.55401611 -229.03416443]
[254.30809021 -231.54028320]
[264.18057251 -233.52976990]
[274.14416504 -234.99707031]
[284.17123413 -235.93812561]
[294.23400879 -236.35032654]
[304.30462646 -236.23252869]
[314.35519409 -235.58502197]
[324.35784912 -234.40962219]
[334.28488159 -232.70954895]
[344.10879517 -230.48951721]
[353.80239868 -227.75567627]
[363.33880615 -224.51556396]
[372.69161987 -220.77818298]
[381.83489990 -216.55384827]
[390.74337769 -211.85426331]
[399.39227295 -206.69244385]
[407.75772095 -201.08267212]
[415.81649780 -195.04048157]
[423.54626465 -188.58261108]
[430.92559814 -181.72694397]
[437.93408203 -174.49244690]
[444.55230713 -166.89916992]
[450.76187134 -158.96812439]
[456.54562378 -150.72129822]
[461.88751221 -142.18151855]
[466.77276611 -133.37243652]
[471.18777466 -124.31844330]
[475.12036133 -115.04462433]
[478.55957031 -105.57666779]
[481.49594116 -95.94078827]
[483.92126465 -86.16368866]
[485.82882690 -76.27243805]
[487.21334839 -66.29444122]
[488.07101440 -56.25733185]
[488.39938354 -46.18891525]
[488.19757080 -36.11708450]
[487.46609497 -26.06973648]
[486.20700073 -16.07470512]
[484.42376709 -6.15967846]
[482.12133789 3.64787626]
[479.30606079 13.32078838]
[475.98571777 22.83226204]
[472.16949463 32.15594482]
[467.86798096 41.26600647]
[463.09307861 50.13721085]
[457.85800171 58.74497223]
[452.17724609 67.06544495]
[446.06652832 75.07557678]
[439.54278564 82.75318146]
[432.62405396 90.07696533]
[425.32955933 97.02664948]
[417.67941284 103.58297729]
[409.69485474 109.72777557]
[401.39797974 115.44400787]
[392.81179810 120.71585083]
[383.96005249 125.52867126]
[374.86724854 129.86915588]
[365.55862427 133.72523499]
[356.05990601 137.08625793]
[346.39743042 139.94288635]
[336.59799194 142.28720093]
[326.68865967 144.11270142]
[316.69692993 145.41432190]
[306.65048218 146.18844604]
[296.57711792 146.43292236]
[286.50479126 146.14706421]
[276.46133423 145.33164978]
[266.47463989 143.98893738]
[256.57232666 142.12261963]
[246.78181458 139.73788452]
[237.13027954 136.84130859]
[227.64440918 133.44091797]
[218.35052490 129.54612732]
[209.27433777 125.16769409]
[200.44102478 120.31776428]
[191.87504578 115.00975800]
[183.60012817 109.25836182]
[175.63920593 103.07950592]
[168.01434326 96.49031067]
[160.74665833 89.50900269]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 44]
[2 43]
[3 42]
[4 41]
[5 39]
[6 38]
[7 37]
[8 36]
[9 35]
[10 34]
[14 31]
[15 30]
[16 29]
[52 61]
[53 60]
[54 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
