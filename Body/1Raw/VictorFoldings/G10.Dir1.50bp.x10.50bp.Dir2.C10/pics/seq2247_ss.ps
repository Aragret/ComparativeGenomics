%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAAAUCCCCUUGUAAAUUUAACUGUUAGUCCAAAGAGGAACAGCUCUUUGGACACUAGGAxxxxxxxxxxGCUAUCGGGCCCAUACCCCGAAAAUGUUGGUUAUACCCUUCCCGUACUAAUUAAUCCCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[152.83833313 504.20385742]
[152.83833313 489.20385742]
[152.83833313 474.20385742]
[152.83833313 459.20385742]
[152.83833313 444.20385742]
[152.83833313 429.20385742]
[152.83833313 414.20385742]
[152.83833313 399.20385742]
[152.83833313 384.20385742]
[152.83833313 369.20385742]
[137.33776855 365.56695557]
[123.13549805 358.35192871]
[111.04463196 347.96734619]
[101.75846863 335.00341797]
[95.81072235 320.19842529]
[93.54486084 304.39663696]
[95.09425354 288.50015259]
[100.37435150 273.41744995]
[109.08729553 260.01150513]
[120.73867035 249.05027771]
[134.66560364 241.16284180]
[150.07449341 236.80323792]
[149.45051575 221.81622314]
[148.82653809 206.82920837]
[123.22097015 182.56872559]
[134.45108032 155.31890869]
[128.38807678 141.59886169]
[122.32505798 127.87879944]
[116.26204681 114.15874481]
[108.15881348 121.29579926]
[97.05690002 123.86753845]
[85.48547363 120.71192932]
[76.35453796 112.04045868]
[72.22667694 99.51190186]
[58.98408890 92.46676636]
[52.26966095 92.31194305]
[47.40618134 89.21712494]
[45.34616089 84.84313202]
[32.40810394 77.25321960]
[19.47004890 69.66331482]
[6.53199196 62.07340622]
[-6.40606403 54.48349762]
[-19.34412003 46.89358902]
[-32.28217697 39.30368042]
[-45.22023010 31.71377373]
[-58.15828705 24.12386513]
[-71.09634399 16.53395653]
[-86.32500458 20.76047707]
[-100.04057312 12.90817356]
[-104.10585022 -2.36432076]
[-96.10897827 -15.99610615]
[-80.79435730 -19.89968491]
[-67.24787903 -11.75913525]
[-63.50643539 3.59590054]
[-50.56837845 11.18580914]
[-37.63032532 18.77571678]
[-24.69226837 26.36562538]
[-11.75421143 33.95553207]
[1.18384445 41.54544067]
[14.12190056 49.13534927]
[27.05995560 56.72525787]
[39.99801254 64.31517029]
[52.93606949 71.90507507]
[66.02922058 79.22418213]
[79.27180481 86.26931763]
[92.04916382 78.41188812]
[91.73710632 63.41513443]
[91.42505646 48.41838074]
[77.37059021 42.55391693]
[66.92121887 31.47553825]
[61.88734436 17.10264587]
[63.14112854 1.92542863]
[70.46533966 -11.42656803]
[82.59101868 -20.64002991]
[97.41730499 -24.11867142]
[112.37547302 -21.25979424]
[124.87391663 -12.55871582]
[132.74720764 0.47704774]
[134.63125610 15.58897209]
[130.19963074 30.15882492]
[120.22015381 41.66229248]
[106.42180634 48.10632706]
[106.73386383 63.10308075]
[107.04592133 78.09983063]
[121.11743927 83.29524994]
[131.10015869 72.09947968]
[141.08288574 60.90371704]
[151.06561279 49.70795059]
[161.04833984 38.51218414]
[158.61796570 23.06461906]
[166.72993469 9.69562721]
[181.55403137 4.71763659]
[196.09075928 10.48110294]
[203.47631836 24.26469421]
[200.22349548 39.56021881]
[187.86814880 49.14559937]
[172.24411011 48.49491119]
[162.26138306 59.69067764]
[152.27865601 70.88644409]
[142.29592896 82.08220673]
[132.31320190 93.27797699]
[129.98210144 108.09573364]
[136.04512024 121.81578827]
[142.10812378 135.53584290]
[148.17114258 149.25588989]
[158.07745361 147.68601990]
[168.73472595 150.50326538]
[178.15731812 157.96945190]
[184.31193542 169.44839478]
[199.31111145 169.29235840]
[214.31030273 169.13632202]
[230.08567810 162.92553711]
[240.42080688 176.36509705]
[230.36750793 190.01675415]
[214.46633911 184.13551331]
[199.46714783 184.29154968]
[184.46797180 184.44758606]
[179.30436707 189.88699341]
[194.24868774 191.17813110]
[202.55699158 203.66700745]
[197.97308350 217.94944763]
[183.94866943 223.27069092]
[171.04418945 215.62384033]
[168.97715759 200.76582336]
[163.81355286 206.20523071]
[164.43753052 221.19224548]
[165.06150818 236.17926025]
[178.96890259 238.68557739]
[192.03546143 244.05056763]
[203.68095398 252.03312683]
[213.38888550 262.27597046]
[220.72933960 274.32165527]
[225.37808228 287.63296509]
[227.13082886 301.61694336]
[225.91224670 315.65115356]
[221.77920532 329.11160278]
[214.91809082 341.40032959]
[205.63642883 351.97195435]
[194.34907532 360.35800171]
[181.55970764 366.18762207]
[167.83833313 369.20385742]
[167.83833313 384.20385742]
[167.83833313 399.20385742]
[167.83833313 414.20385742]
[167.83833313 429.20385742]
[167.83833313 444.20385742]
[167.83833313 459.20385742]
[167.83833313 474.20385742]
[167.83833313 489.20385742]
[167.83833313 504.20385742]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[22 127]
[23 126]
[24 125]
[26 105]
[27 104]
[28 103]
[29 102]
[34 65]
[35 64]
[38 63]
[39 62]
[40 61]
[41 60]
[42 59]
[43 58]
[44 57]
[45 56]
[46 55]
[47 54]
[66 84]
[67 83]
[68 82]
[85 101]
[86 100]
[87 99]
[88 98]
[89 97]
[109 117]
[110 116]
[111 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
