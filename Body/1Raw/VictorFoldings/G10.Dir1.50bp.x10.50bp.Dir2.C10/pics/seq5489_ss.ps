%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:33:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCACCCUCCUCUCCCUAGGAGGCCUGCCCCCGCUAACCGGCUUUUUGCCCAAAUGGGCCAxxxxxxxxxxCAACAACCUAUUUAGCUGUUCCCCAACCUUUUCCUCCGACCCCCUAACAACCCCCCUCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[133.86874390 155.92044067]
[141.18780518 142.80424500]
[129.10781860 133.91189575]
[117.02783203 125.01953888]
[104.94784546 116.12718964]
[89.95108795 115.81513214]
[77.51165009 124.19728088]
[65.07220459 132.57942200]
[52.63276672 140.96156311]
[40.19332504 149.34370422]
[27.75388718 157.72584534]
[27.07779312 173.11575317]
[17.58029175 185.01747131]
[3.06742144 188.99749756]
[-10.83971596 183.73161316]
[-23.27915573 192.11375427]
[-35.71859741 200.49589539]
[-48.15803528 208.87803650]
[-60.59747696 217.26017761]
[-73.03691864 225.64233398]
[-75.81330109 241.20083618]
[-88.82563019 250.17050171]
[-104.35391998 247.22976685]
[-113.18550873 234.12333679]
[-110.08077240 218.62701416]
[-96.88169861 209.93449402]
[-81.41905975 213.20288086]
[-68.97962189 204.82073975]
[-56.54018021 196.43859863]
[-44.10073853 188.05645752]
[-31.66129875 179.67431641]
[-19.22185898 171.29217529]
[-18.88084984 156.42536926]
[-9.74295616 144.46865845]
[4.85396338 140.13468933]
[19.37174416 145.28640747]
[31.81118393 136.90426636]
[44.25062561 128.52212524]
[56.69006348 120.13998413]
[69.12950134 111.75783539]
[81.56894684 103.37569427]
[86.76435852 89.30417633]
[82.75662231 74.84948730]
[78.74887848 60.39479828]
[74.74114227 45.94010925]
[70.73339844 31.48542023]
[55.37179184 23.18129921]
[50.82680130 6.66987562]
[59.42980576 -7.74699879]
[55.12221909 -22.11518288]
[49.62610245 -29.49383736]
[50.87783051 -36.82724380]
[46.87009048 -51.28193283]
[35.72690201 -62.51313782]
[39.78241348 -76.84499359]
[35.77467346 -91.29968262]
[29.85471153 -105.08206177]
[22.13062668 -117.94046783]
[14.40654182 -130.79887390]
[6.68245649 -143.65727234]
[-7.91421080 -151.13185120]
[-8.46901989 -167.52160645]
[5.58876896 -175.96617126]
[19.79770851 -167.77848816]
[19.54085922 -151.38136292]
[27.26494408 -138.52294922]
[34.98902893 -125.66455078]
[42.71311569 -112.80615234]
[43.64621735 -127.77709961]
[50.48734283 -141.12622070]
[62.09523392 -150.62657166]
[76.53343964 -154.69329834]
[91.39334106 -152.64796448]
[104.19596863 -144.83178711]
[112.80556488 -132.54867554]
[115.78585052 -117.84772491]
[112.63964844 -103.18138885]
[103.89181519 -90.99634552]
[91.00168610 -83.32531738]
[76.11962128 -81.44802094]
[61.72829056 -85.67762756]
[50.22936249 -95.30742645]
[54.23710251 -80.85273743]
[65.09362793 -70.65542603]
[61.32477570 -55.28967285]
[65.33251953 -40.83498383]
[69.49040222 -26.42276764]
[73.79798889 -12.05458355]
[85.91743469 -7.56952381]
[93.33483124 3.24974561]
[93.14328766 16.56106567]
[85.18808746 27.47768021]
[89.19583130 41.93236923]
[93.20356750 56.38705826]
[97.21131134 70.84174347]
[101.21904755 85.29643250]
[106.21905518 86.69449615]
[110.40355682 89.72770691]
[113.26157379 94.00544739]
[114.45114899 98.98644257]
[113.84019470 104.04720306]
[125.92018127 112.93955231]
[138.00016785 121.83190155]
[150.08015442 130.72425842]
[160.42938232 119.83862305]
[172.06135559 110.33597565]
[184.79263306 102.36617279]
[198.42242432 96.05491638]
[212.73577881 91.50173950]
[227.50692749 88.77845001]
[242.50292969 87.92800903]
[257.48727417 88.96381378]
[272.22360229 91.86953735]
[286.47955322 96.59934998]
[300.03027344 103.07865906]
[312.66204834 111.20527649]
[324.17562866 120.85102844]
[334.38946533 131.86378479]
[343.14242554 144.06987000]
[350.29653931 157.27676392]
[355.73889160 171.27619934]
[359.38369751 185.84735107]
[361.17349243 200.76042175]
[361.07998657 215.78022766]
[359.10470581 230.66987610]
[355.27877808 245.19451904]
[349.66253662 259.12512207]
[342.34457397 272.24191284]
[333.44033813 284.33810425]
[323.09017944 295.22283936]
[311.45739746 304.72451782]
[298.72546387 312.69323730]
[285.09512329 319.00335693]
[270.78140259 323.55532837]
[256.01004028 326.27737427]
[241.01396179 327.12655640]
[226.02970886 326.08950806]
[211.29360962 323.18252563]
[197.03805542 318.45150757]
[183.48788452 311.97106934]
[170.85681152 303.84338379]
[159.34402466 294.19665527]
[149.13113403 283.18304443]
[140.37916565 270.97622681]
[133.22619629 257.76873779]
[127.78499603 243.76884460]
[124.14141083 229.19738770]
[122.35289764 214.28414917]
[122.44765472 199.26435852]
[124.42419434 184.37487793]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 104]
[3 103]
[4 102]
[5 101]
[6 41]
[7 40]
[8 39]
[9 38]
[10 37]
[11 36]
[15 32]
[16 31]
[17 30]
[18 29]
[19 28]
[20 27]
[42 96]
[43 95]
[44 94]
[45 93]
[46 92]
[49 88]
[50 87]
[52 86]
[53 85]
[55 83]
[56 82]
[57 68]
[58 67]
[59 66]
[60 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
