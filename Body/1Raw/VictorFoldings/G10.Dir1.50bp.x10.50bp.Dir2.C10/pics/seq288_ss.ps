%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCAAACCCCCCCUCCCCCGCUUCUGGCCACAGCACUUAAACACAUCUCUGCCAAACCCCAxxxxxxxxxxAUCAUGACCCUUGGCCAUAAUAUGAUUUAUCUCCACACUAGCAGAGACCAACCGAACCCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[43.37742996 192.96919250]
[34.71082306 205.21214294]
[26.04421616 217.45509338]
[17.37760925 229.69805908]
[8.71100044 241.94100952]
[0.17054197 254.27229309]
[-8.24286842 266.69061279]
[-16.65627861 279.10891724]
[-25.06968880 291.52722168]
[-33.48309708 303.94555664]
[-28.07945824 318.49133301]
[-32.29004288 333.42623901]
[-44.49579239 343.00741577]
[-60.00335312 343.55075073]
[-72.84974670 334.84732056]
[-78.09527588 320.24377441]
[-73.72292328 305.35543823]
[-61.41395569 295.90722656]
[-45.90141296 295.53213501]
[-37.48800278 283.11383057]
[-29.07459259 270.69549561]
[-20.66118240 258.27719116]
[-12.24777222 245.85888672]
[-11.09265518 238.51191711]
[-3.53195286 233.27439880]
[5.13465452 221.03144836]
[13.80126190 208.78849792]
[22.46786880 196.54553223]
[31.13447762 184.30258179]
[18.19190025 171.81100464]
[7.48311043 157.35861206]
[-0.69948834 141.34004211]
[-6.13246870 124.19266510]
[-8.66748142 106.38470459]
[-23.66669083 106.23070526]
[-38.66590118 106.07671356]
[-52.67791367 114.59700775]
[-66.93083191 106.48612976]
[-66.76246643 90.08784485]
[-52.34602737 82.27130890]
[-38.51190186 91.07749939]
[-23.51269341 91.23149872]
[-8.51348400 91.38549805]
[-5.79624844 74.37696838]
[-0.43018866 58.00996399]
[7.45034456 42.69426346]
[17.64804649 28.81333160]
[29.90759659 16.71470070]
[43.92205429 6.70128727]
[59.34053421 -0.97620398]
[75.77700806 -6.12555122]
[92.81995392 -8.61782932]
[110.04266357 -8.39064026]
[127.01393890 -5.44967127]
[143.30886841 0.13144426]
[158.51945496 8.21297169]
[167.43560791 -3.84945965]
[176.35176086 -15.91189098]
[185.26791382 -27.97432327]
[194.18406677 -40.03675461]
[203.10021973 -52.09918594]
[212.01637268 -64.16161346]
[200.92424011 -74.27935791]
[190.93122864 -85.48399353]
[182.14328003 -97.65674591]
[174.65353394 -110.66857910]
[168.54141235 -124.38156128]
[163.87167358 -138.65032959]
[160.69384766 -153.32362366]
[159.04159546 -168.24588013]
[158.93244934 -183.25895691]
[160.36756897 -198.20365906]
[163.33172607 -212.92160034]
[167.79351807 -227.25675964]
[173.70564270 -241.05714417]
[181.00540161 -254.17649841]
[189.61544800 -266.47573853]
[199.44448853 -277.82446289]
[210.38835144 -288.10241699]
[222.33100891 -297.20059204]
[235.14585876 -305.02258301]
[248.69706726 -311.48547363]
[262.84097290 -316.52072144]
[277.42767334 -320.07498169]
[292.30249023 -322.11056519]
[307.30776978 -322.60589600]
[322.28445435 -321.55569458]
[337.07379150 -318.97113037]
[351.51898193 -314.87960815]
[365.46688843 -309.32446289]
[378.76968384 -302.36459351]
[391.28634644 -294.07382202]
[402.88418579 -284.53997803]
[413.44024658 -273.86413574]
[422.84265137 -262.15948486]
[430.99172974 -249.55009460]
[437.80108643 -236.16963196]
[443.19851685 -222.15992737]
[447.12683105 -207.66950989]
[449.54440308 -192.85197449]
[450.42556763 -177.86439514]
[449.76101685 -162.86564636]
[447.55776978 -148.01472473]
[443.83920288 -133.46907043]
[438.64471436 -119.38285828]
[432.02935791 -105.90541840]
[424.06329346 -93.17961884]
[414.83096313 -81.34036255]
[404.43023682 -70.51314545]
[392.97134399 -60.81274796]
[380.57574463 -52.34199905]
[367.37487793 -45.19068909]
[353.50866699 -39.43462753]
[339.12411499 -35.13483810]
[324.37365723 -32.33689117]
[309.41372681 -31.07045555]
[294.40283203 -31.34894943]
[279.50015259 -33.16942596]
[264.86364746 -36.51258087]
[250.64846802 -41.34298325]
[237.00531006 -47.60941696]
[224.07879639 -55.24546432]
[215.16264343 -43.18303299]
[206.24649048 -31.12060356]
[197.33035278 -19.05817223]
[188.41419983 -6.99574041]
[179.49804688 5.06669140]
[170.58189392 17.12912178]
[179.60528564 25.75457191]
[187.58187866 35.35635376]
[194.40675354 45.80820084]
[199.99017334 56.97267532]
[204.25872803 68.70295715]
[207.15626526 80.84480286]
[208.64468384 93.23853302]
[208.70443726 105.72118378]
[207.33471680 118.12860107]
[204.55352783 130.29762268]
[200.39746094 142.06822205]
[194.92115784 153.28562927]
[188.19664001 163.80233765]
[180.31233215 173.48002625]
[171.37191772 182.19145203]
[161.49295044 189.82206726]
[150.80535889 196.27149963]
[139.44966125 201.45497131]
[127.57520294 205.30429077]
[115.33812714 207.76885986]
[102.89935303 208.81626892]
[90.42245483 208.43272400]
[78.07150269 206.62329102]
[66.00891113 203.41175842]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 29]
[2 28]
[3 27]
[4 26]
[5 25]
[6 23]
[7 22]
[8 21]
[9 20]
[10 19]
[34 43]
[35 42]
[36 41]
[56 128]
[57 127]
[58 126]
[59 125]
[60 124]
[61 123]
[62 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
