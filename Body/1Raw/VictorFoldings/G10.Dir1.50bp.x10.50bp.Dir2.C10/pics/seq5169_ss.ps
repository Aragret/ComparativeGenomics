%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUCACUCUCUCAAUCUUAUCCAUCAUAGCAGGCAGUUGAGGUGGAUUAAACCAAACCCAGCxxxxxxxxxxCCCCCGAUAUGGCGUUUCCCCGCAUAAACAACAUAAGCUUCUGACUCUUACCUCCCUCUCUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[94.95082092 271.65472412]
[94.64681244 256.65780640]
[94.34281158 241.66087341]
[94.03881073 226.66395569]
[93.73480225 211.66703796]
[93.43080139 196.67012024]
[93.12679291 181.67320251]
[92.82279205 166.67628479]
[92.51878357 151.67935181]
[79.63092804 144.00451660]
[66.30050659 150.88201904]
[52.97008896 157.75950623]
[39.63966751 164.63699341]
[34.95859909 176.69694519]
[23.66622543 182.13819885]
[12.08408928 178.52262878]
[-1.38297892 185.12854004]
[1.19272792 200.01283264]
[-0.53066224 215.01971436]
[-6.41344166 228.93264771]
[-15.97871971 240.62376404]
[-28.45108223 249.14530945]
[-42.81945038 253.80650330]
[-57.91904831 254.22946167]
[-72.52581024 250.37989807]
[-85.45564270 242.56990051]
[-95.66037750 231.43257141]
[-102.31275940 217.87077332]
[-104.87351227 202.98388672]
[-103.13504791 187.97874451]
[-97.23828888 174.07173157]
[-87.66127014 162.39022827]
[-75.18035889 153.88121033]
[-60.80731201 149.23446655]
[-45.70729828 148.82667542]
[-31.10440826 152.69090271]
[-18.18243027 160.51388550]
[-7.98889112 171.66146851]
[5.47817707 165.05555725]
[14.42268753 149.98625183]
[32.76217651 151.30657959]
[46.09259796 144.42907715]
[59.42301559 137.55158997]
[72.75344086 130.67410278]
[67.95590210 91.34962463]
[94.98876953 75.14558411]
[96.50629425 60.22254181]
[98.02381897 45.29950333]
[99.54134369 30.37646294]
[77.24612427 10.49352360]
[80.48552704 -21.65402412]
[69.40641785 -31.76606560]
[58.32730865 -41.87810516]
[42.85256958 -39.62724686]
[29.57865906 -47.89389038]
[24.77311897 -62.77477646]
[30.70497322 -77.24360657]
[44.57338715 -84.46864319]
[59.83011246 -81.03844452]
[69.27140045 -68.57264709]
[68.43935394 -52.95721436]
[79.51845551 -42.84517288]
[90.59756470 -32.73313141]
[104.76654053 -37.65655899]
[107.18809509 -52.45980453]
[109.60965729 -67.26305389]
[112.03121185 -82.06629181]
[114.30262756 -96.89331818]
[116.42367554 -111.74259949]
[118.54471588 -126.59188080]
[104.72520447 -132.66836548]
[93.05830383 -142.24887085]
[84.40978241 -154.62246704]
[79.42141724 -168.87092590]
[78.46336365 -183.93693542]
[81.60673523 -198.70249939]
[88.61826324 -212.07191467]
[98.97763824 -223.05307007]
[111.91614532 -230.83110046]
[126.47364044 -234.82881165]
[141.56987000 -234.74957275]
[156.08460999 -230.59924316]
[168.94073486 -222.68580627]
[179.18426514 -211.59651184]
[186.05505371 -198.15422058]
[189.04322815 -183.35647583]
[187.92707825 -168.30134583]
[182.78939819 -154.10604858]
[174.01144409 -141.82392883]
[162.24461365 -132.36643982]
[148.36207581 -126.43536377]
[133.39399719 -124.47084045]
[131.27294922 -109.62155914]
[129.15191650 -94.77227783]
[131.33227539 -87.66413879]
[126.83445740 -79.64473724]
[124.41290283 -64.84149170]
[121.99134064 -50.03824997]
[119.56978607 -35.23500443]
[127.23268127 -31.75821877]
[133.82254028 -26.69252014]
[139.02243042 -20.34038544]
[142.59588623 -13.06432247]
[144.39741516 -5.26634836]
[144.37800598 2.63416147]
[142.58531189 10.22299957]
[139.15878296 17.11284447]
[134.31988525 22.96301651]
[128.35848999 27.49627876]
[121.61566925 30.51184273]
[114.46438599 31.89398766]
[112.94686127 46.81702805]
[111.42933655 61.74006653]
[109.91181183 76.66310883]
[131.28388977 88.91075897]
[136.24153137 119.23089600]
[150.50737000 123.86614990]
[164.77322388 128.50140381]
[179.03906250 133.13665771]
[190.91667175 123.29156494]
[206.23416138 121.45354462]
[220.10375977 128.20910645]
[228.09974670 141.40258789]
[227.67062378 156.82397461]
[218.95332336 169.55238342]
[204.72950745 175.52619934]
[189.53793335 172.83921814]
[178.22619629 162.34884644]
[174.40380859 147.40251160]
[160.13796997 142.76725769]
[145.87211609 138.13200378]
[131.60627747 133.49674988]
[125.58362579 137.96640015]
[135.88082886 148.87362671]
[146.17802429 159.78085327]
[156.47523499 170.68809509]
[168.20140076 180.04206848]
[167.93951416 195.03977966]
[155.89393616 203.97868347]
[141.46368408 199.88383484]
[135.90843201 185.95156860]
[128.45173645 172.93627930]
[120.99504089 159.92098999]
[113.53834534 146.90570068]
[107.51570129 151.37535095]
[107.81970978 166.37226868]
[108.12371063 181.36918640]
[108.42771912 196.36611938]
[108.73171997 211.36303711]
[109.03572845 226.35995483]
[109.33972931 241.35687256]
[109.64373779 256.35379028]
[109.94773865 271.35070801]
[112.52842712 290.55981445]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 153]
[2 152]
[3 151]
[4 150]
[5 149]
[6 148]
[7 147]
[8 146]
[9 145]
[10 44]
[11 43]
[12 42]
[13 41]
[16 39]
[17 38]
[46 114]
[47 113]
[48 112]
[49 111]
[51 63]
[52 62]
[53 61]
[64 99]
[65 98]
[66 97]
[67 96]
[68 94]
[69 93]
[70 92]
[116 132]
[117 131]
[118 130]
[119 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
