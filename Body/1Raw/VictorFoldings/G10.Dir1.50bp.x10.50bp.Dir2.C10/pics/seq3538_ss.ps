%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCUUAGCUCUCACCAUCGCUCUUCUACUAUGAACCCCCCUCCCCAUACCCAACCCCCUGxxxxxxxxxxAAGUCCCACUCCUAAACACAUCCGUAUUACUCGCAUCAGGAGUAUCAAUCACCUGAGCUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[151.92417908 85.85954285]
[138.14179993 91.77950287]
[124.35941315 97.69946289]
[110.57703400 103.61943054]
[96.85697937 109.68244171]
[83.20073700 115.88784790]
[69.54449463 122.09325409]
[55.88825607 128.29866028]
[42.23201370 134.50407410]
[28.57577324 140.70947266]
[22.94700623 155.23376465]
[9.00923729 161.33238220]
[-4.80275679 155.87670898]
[-14.16578197 168.62991333]
[-28.95376778 166.85095215]
[-42.61000824 173.05635071]
[-56.26625061 179.26176453]
[-54.13113785 194.21562195]
[-56.29686356 209.16508484]
[-62.58786774 222.89825439]
[-72.49416351 234.30184937]
[-85.21269989 242.45143127]
[-99.71242523 246.68634033]
[-114.81792450 246.66328430]
[-129.30465698 242.38414001]
[-141.99826050 234.19577026]
[-151.86970520 222.76199341]
[-158.11875916 209.00968933]
[-160.23886108 194.05369568]
[-158.05810547 179.10641479]
[-151.75331116 165.37957764]
[-141.83557129 153.98594666]
[-129.10885620 145.84913635]
[-114.60487366 141.62879944]
[-99.49940491 141.66702271]
[-85.01697540 145.96072388]
[-72.33161163 154.16183472]
[-62.47165680 165.60551453]
[-48.81541824 159.40011597]
[-35.15917587 153.19470215]
[-26.77293587 140.88534546]
[-11.00816345 142.22047424]
[-6.03339148 128.22807312]
[7.72758055 121.74036407]
[22.37036514 127.05323792]
[36.02660751 120.84783173]
[49.68284988 114.64242554]
[63.33908844 108.43701935]
[76.99533081 102.23160553]
[90.65157318 96.02619934]
[96.14617920 90.05181122]
[104.65706635 89.83705139]
[118.43945312 83.91708374]
[132.22183228 77.99712372]
[146.00421143 72.07715607]
[141.60687256 58.29403687]
[138.53326416 44.15724945]
[136.81088257 29.79361916]
[136.45504761 15.33199501]
[137.46885681 0.90209240]
[139.84312439 -13.36666489]
[143.55645752 -27.34630966]
[148.57545471 -40.91147614]
[154.85498047 -53.94052505]
[162.33865356 -66.31663513]
[170.95924377 -77.92885590]
[180.63934326 -88.67308044]
[191.29206848 -98.45301056]
[202.82179260 -107.18099976]
[215.12504578 -114.77883148]
[228.09140015 -121.17845917]
[241.60452271 -126.32255554]
[255.54318237 -130.16508484]
[269.78231812 -132.67166138]
[284.19418335 -133.81991577]
[298.64953613 -133.59965515]
[313.01867676 -132.01293945]
[327.17272949 -129.07409668]
[340.98480225 -124.80959320]
[354.33102417 -119.25778198]
[367.09170532 -112.46854401]
[379.15246582 -104.50286865]
[390.40512085 -95.43228149]
[400.74887085 -85.33822632]
[410.09097290 -74.31130981]
[418.34771729 -62.45050430]
[425.44509888 -49.86225128]
[431.31958008 -36.65951538]
[445.54635620 -41.41333008]
[459.77316284 -46.16714478]
[473.99993896 -50.92095947]
[488.22671509 -55.67477417]
[502.45349121 -60.42858887]
[501.22802734 -75.45395660]
[503.63464355 -90.33587646]
[509.53347778 -104.20912933]
[518.58154297 -116.26715088]
[530.25280762 -125.80889893]
[543.86871338 -132.27963257]
[558.63769531 -135.30314636]
[573.70098877 -134.70365906]
[588.18298340 -130.51602173]
[601.24157715 -122.98369598]
[612.11767578 -112.54460907]
[620.17889404 -99.80567932]
[624.95654297 -85.50751495]
[626.17291260 -70.48141479]
[623.75726318 -55.60095215]
[617.84997559 -41.73127747]
[608.79461670 -29.67874336]
[597.11755371 -20.14407349]
[583.49774170 -13.68159962]
[568.72698975 -10.66704273]
[553.66400146 -11.27566433]
[539.18457031 -15.47207928]
[526.13049316 -23.01231575]
[515.26080322 -33.45799255]
[507.20730591 -46.20180893]
[492.98052979 -41.44799423]
[478.75375366 -36.69417953]
[464.52697754 -31.94036484]
[450.30017090 -27.18655014]
[436.07339478 -22.43273544]
[439.51138306 -7.24953604]
[441.38446045 8.20559311]
[441.67300415 23.77178764]
[440.37390137 39.28701019]
[437.50048828 54.58974075]
[433.08261108 69.52066040]
[427.16607666 83.92430878]
[419.81240845 97.65070343]
[411.09796143 110.55688477]
[401.11340332 122.50843811]
[389.96255493 133.38085938]
[377.76141357 143.06089783]
[364.63687134 151.44766235]
[350.72549438 158.45373535]
[336.17202759 164.00608826]
[321.12792969 168.04679871]
[305.74975586 170.53366089]
[290.19760132 171.44065857]
[274.63333130 170.75822449]
[259.21893311 168.49334717]
[244.11494446 164.66943359]
[229.47857666 159.32620239]
[215.46226501 152.51911926]
[202.21194458 144.31895447]
[189.86564636 134.81092834]
[178.55194092 124.09391022]
[168.38871765 112.27938843]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 55]
[2 54]
[3 53]
[4 52]
[5 50]
[6 49]
[7 48]
[8 47]
[9 46]
[10 45]
[13 42]
[15 40]
[16 39]
[17 38]
[88 123]
[89 122]
[90 121]
[91 120]
[92 119]
[93 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
