%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCCCACUAUUAACCUACUGGGAGAACUCUCUGUGCUAGUAACCACGUUCUCCUGAUCAAxxxxxxxxxxAUUCCCCCCAUCCUUACCACCCUCGUUAACCCUAACAAAAAAAACUCAUACCCCCAUUAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[35.32632446 310.00500488]
[30.42477226 324.18154907]
[25.52322197 338.35812378]
[20.62166977 352.53466797]
[15.72011948 366.71121216]
[21.41321182 381.71017456]
[13.11251640 395.43890381]
[-2.81438470 397.36590576]
[-14.14973545 386.01296997]
[-12.19802475 370.08908081]
[1.54356158 361.80966187]
[6.44511223 347.63311768]
[11.34666348 333.45657349]
[16.24821472 319.27999878]
[21.14976501 305.10345459]
[1.62546659 296.48724365]
[-16.97093201 286.01770020]
[-34.46402359 273.79357910]
[-50.68880844 259.93017578]
[-65.49224854 244.55828857]
[-78.73471832 227.82286072]
[-90.29129791 209.88177490]
[-100.05299377 190.90423584]
[-107.92772675 171.06927490]
[-113.84121704 150.56396484]
[-117.73769379 129.58171082]
[-119.58039856 108.32044220]
[-119.35195160 86.98069000]
[-117.05451202 65.76374054]
[-112.70973969 44.86971283]
[-106.35862732 24.49569511]
[-120.26117706 18.86373901]
[-134.16374207 13.23178196]
[-148.06628418 7.59982491]
[-161.96884155 1.96786809]
[-175.87139893 -3.66408849]
[-189.77395630 -9.29604530]
[-186.78317261 5.40277100]
[-196.24595642 17.04131126]
[-211.24578857 17.11274529]
[-220.81900024 5.56485987]
[-217.96835327 -9.16177559]
[-204.77809143 -16.30314445]
[-218.02067566 -23.34827995]
[-231.26325989 -30.39341545]
[-245.15196228 -23.47360611]
[-260.44992065 -26.07213402]
[-271.27474976 -37.18980789]
[-273.46408081 -52.55165482]
[-266.17608643 -66.25073242]
[-252.21313477 -73.01947021]
[-236.94427490 -70.25514221]
[-226.24069214 -59.02069473]
[-224.21812439 -43.63600159]
[-210.97554016 -36.59086609]
[-197.73295593 -29.54573059]
[-184.14199829 -23.19860077]
[-170.23944092 -17.56664467]
[-156.33688354 -11.93468761]
[-142.43434143 -6.30273104]
[-128.53178406 -0.67077446]
[-114.62922668 4.96118212]
[-100.72666931 10.59313869]
[-94.87391663 -1.53294313]
[-88.28946686 -13.27779579]
[-80.99803925 -24.59732056]
[-73.02700806 -35.44901657]
[-64.40631104 -45.79213333]
[-55.16831207 -55.58784485]
[-45.34769440 -64.79936218]
[-34.98133469 -73.39209747]
[-24.10815811 -81.33380127]
[-12.76898766 -88.59463501]
[-1.00639927 -95.14735413]
[11.13544178 -100.96733856]
[23.61094475 -106.03275299]
[36.37326813 -110.32456207]
[49.37449646 -113.82666016]
[62.56580734 -116.52589417]
[75.89767456 -118.41213226]
[89.32003784 -119.47828674]
[102.78250122 -119.72036743]
[116.23451996 -119.13745117]
[129.62557983 -117.73172760]
[142.90541077 -115.50848389]
[156.02412415 -112.47606659]
[168.93249512 -108.64585114]
[181.58204651 -104.03222656]
[193.92527771 -98.65251923]
[205.91584778 -92.52692413]
[217.50871277 -85.67843628]
[228.66038513 -78.13278198]
[239.32896423 -69.91828156]
[249.47439575 -61.06578445]
[259.05859375 -51.60852814]
[268.04556274 -41.58201981]
[276.40158081 -31.02391052]
[284.09524536 -19.97384071]
[291.09768677 -8.47330093]
[297.38259888 3.43452740]
[302.92639160 15.70493317]
[307.70825195 28.29184532]
[311.71023560 41.14800262]
[314.91729736 54.22513199]
[317.31738281 67.47413635]
[332.21929932 65.76144409]
[347.12118530 64.04875946]
[362.02310181 62.33606720]
[374.86663818 52.13921356]
[390.01763916 58.41444778]
[391.89010620 74.70634460]
[378.55773926 84.25520325]
[363.73577881 77.23796844]
[348.83389282 78.95066071]
[333.93197632 80.66334534]
[319.03009033 82.37603760]
[319.66299438 94.25919342]
[319.65164185 106.15918732]
[318.99612427 118.04111481]
[317.69830322 129.87013245]
[315.76205444 141.61155701]
[313.19299316 153.23092651]
[309.99868774 164.69418335]
[306.18847656 175.96771240]
[301.77355957 187.01844788]
[296.76690674 197.81396484]
[291.18313599 208.32260132]
[285.03869629 218.51356506]
[278.35156250 228.35694885]
[271.14132690 237.82388306]
[263.42919922 246.88661194]
[255.23776245 255.51853943]
[246.59104919 263.69436646]
[237.51440430 271.39010620]
[228.03445435 278.58319092]
[218.17900085 285.25253296]
[207.97695923 291.37857056]
[197.45823669 296.94332886]
[186.65368652 301.93048096]
[175.59500122 306.32540894]
[164.31460571 310.11523438]
[152.84559631 313.28881836]
[141.22160339 315.83688354]
[129.47669983 317.75192261]
[117.64535522 319.02835083]
[105.76226044 319.66241455]
[93.86226654 319.65225220]
[81.98027039 318.99789429]
[70.15113068 317.70123291]
[58.40952301 315.76611328]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 15]
[2 14]
[3 13]
[4 12]
[5 11]
[31 63]
[32 62]
[33 61]
[34 60]
[35 59]
[36 58]
[37 57]
[43 56]
[44 55]
[45 54]
[105 116]
[106 115]
[107 114]
[108 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
