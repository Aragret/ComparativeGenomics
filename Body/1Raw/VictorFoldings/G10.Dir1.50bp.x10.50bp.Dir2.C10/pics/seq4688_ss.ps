%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACACUCAUCACAGCGCUAAGCUCGCACUGAUUUUUUACCUGAGUAGGCCUAGAAAUAAACxxxxxxxxxxUAAAUAGGAGAAGGCUUAGAAGAAAACCCCACAAACCCCAUUACUAAACCCACACUCAACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[125.29604340 257.81875610]
[125.29604340 242.81877136]
[125.29604340 227.81877136]
[125.29604340 212.81877136]
[125.29604340 197.81877136]
[125.29604340 182.81877136]
[125.29604340 167.81877136]
[125.29604340 152.81877136]
[125.29604340 137.81877136]
[125.29604340 122.81876373]
[110.88690948 130.34495544]
[95.51858521 130.07824707]
[82.92481995 122.92055511]
[75.77400208 111.35039520]
[60.95151901 113.65126801]
[46.12903595 115.95214081]
[31.30655289 118.25301361]
[16.48407173 120.55389404]
[1.93711698 124.21260071]
[-12.21019936 129.19792175]
[-26.35751534 134.18324280]
[-33.23691559 148.15863037]
[-47.65532303 153.01292419]
[-60.93632889 146.36834717]
[-75.08364868 151.35366821]
[-89.23096466 156.33898926]
[-94.56016541 171.04046631]
[-108.11833954 178.83213806]
[-123.50372314 176.03500366]
[-133.45181274 163.96977234]
[-133.26542664 148.33329773]
[-123.03256226 136.50863647]
[-107.58487701 134.07904053]
[-94.21628571 142.19168091]
[-80.06896973 137.20634460]
[-65.92165375 132.22102356]
[-59.74032593 118.71818542]
[-45.46395111 113.46082306]
[-31.34283829 120.03592682]
[-17.19552231 115.05060577]
[-3.04820490 110.06528473]
[-17.04015160 104.65922546]
[-26.00584412 92.63356781]
[-27.19252586 77.68058777]
[-20.23584938 64.39131927]
[-7.27173567 56.84600449]
[7.71941090 57.36129761]
[20.13482285 65.77899170]
[26.16256905 79.51457214]
[23.95193672 94.35078430]
[14.18319607 105.73140717]
[29.00567818 103.43053436]
[43.82815933 101.12966156]
[58.65064240 98.82878876]
[73.47312164 96.52790833]
[82.63144684 76.53810883]
[105.23056793 68.80619049]
[128.09252930 80.72837067]
[128.40051270 65.73152924]
[128.70848083 50.73469162]
[129.01646423 35.73785400]
[114.30260468 32.59161758]
[100.45017242 26.71737480]
[87.95993805 18.32747459]
[77.28340149 7.72520542]
[68.80651855 -4.70616579]
[62.83572769 -18.51725197]
[59.58686066 -33.20879364]
[59.17736816 -48.24969864]
[61.62205124 -63.09624863]
[66.83253479 -77.21174622]
[74.62046814 -90.08592987]
[84.70431519 -101.25341034]
[96.71955109 -110.31047821]
[110.23184204 -116.92973328]
[124.75271606 -120.87189484]
[139.75726318 -121.99445343]
[154.70306396 -120.25682831]
[169.04986572 -115.72183990]
[182.27900696 -108.55341339]
[193.91227722 -99.01069641]
[203.52914429 -87.43864441]
[210.78195190 -74.25557709]
[215.40852356 -59.93806076]
[217.24162292 -45.00366211]
[216.21496582 -29.99225235]
[212.36569214 -15.44647980]
[205.83291626 -1.89216805]
[196.85281372 10.18070316]
[185.75000000 20.33570671]
[172.92584229 28.20574760]
[158.84391785 33.50632858]
[144.01330566 36.04583359]
[143.70532227 51.04267120]
[143.39733887 66.03951263]
[143.08937073 81.03634644]
[154.07017517 91.25505066]
[169.00617981 89.87102509]
[183.94219971 88.48700714]
[198.87820435 87.10298157]
[201.11166382 72.19408417]
[206.84881592 58.25318909]
[215.75608826 46.09078979]
[227.31564331 36.41400146]
[240.85540771 29.78541374]
[255.58821106 26.59040642]
[270.65750122 27.01473236]
[285.18716431 31.03372192]
[298.33245850 38.41371536]
[309.32916260 48.72565460]
[317.53793335 61.37000656]
[322.48147583 75.61165619]
[323.87246704 90.62260437]
[321.62997437 105.53014374]
[315.88436890 119.46755981]
[306.96972656 131.62455750]
[295.40429688 141.29432678]
[281.86053467 147.91471863]
[267.12579346 151.10078430]
[252.05676270 150.66732788]
[237.52954102 146.63952637]
[224.38870239 139.25157166]
[213.39825439 128.93296814]
[205.19717407 116.28363037]
[200.26223755 102.03899384]
[185.32621765 103.42301941]
[170.39021301 104.80704498]
[155.45419312 106.19107056]
[169.22531128 112.13717651]
[182.99644470 118.08328247]
[197.96371460 119.07349396]
[211.01919556 126.45959473]
[219.57716370 138.77873230]
[221.94265747 153.59104919]
[217.64720154 167.96286011]
[207.54151917 179.04776001]
[193.62709045 184.65032959]
[178.65975952 183.66094971]
[165.60386658 176.27555847]
[157.04522705 163.95689392]
[154.67881775 149.14624023]
[147.48742676 135.98251343]
[140.29605103 122.81876373]
[140.29605103 137.81877136]
[140.29605103 152.81877136]
[140.29605103 167.81877136]
[140.29605103 182.81877136]
[140.29605103 197.81877136]
[140.29605103 212.81877136]
[140.29605103 227.81877136]
[140.29605103 242.81877136]
[140.29605103 257.81875610]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[14 55]
[15 54]
[16 53]
[17 52]
[18 51]
[19 41]
[20 40]
[21 39]
[24 36]
[25 35]
[26 34]
[58 96]
[59 95]
[60 94]
[61 93]
[97 128]
[98 127]
[99 126]
[100 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
