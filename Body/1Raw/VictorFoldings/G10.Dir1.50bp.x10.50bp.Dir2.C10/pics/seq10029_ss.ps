%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCUUCGAAACCACACUUAUCCCCACCUUGGCUAUCAUCACCCGAUGAGGCAACCAGCCAGAACGxxxxxxxxxxAGCAUUAGCAGGAAUACCUUUCCUCACAGGUUUCUACUCCAAAGACCACAUCAUCGAAACCGCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[176.40159607 414.37786865]
[175.80900574 399.38958740]
[175.21640015 384.40127563]
[174.62379456 369.41299438]
[174.03120422 354.42471313]
[173.43859863 339.43640137]
[172.84600830 324.44812012]
[172.25340271 309.45983887]
[169.16372681 294.78149414]
[163.66390991 280.82614136]
[158.16409302 266.87078857]
[152.66427612 252.91542053]
[147.16445923 238.96005249]
[141.66464233 225.00469971]
[133.19857788 206.40589905]
[140.70085144 191.40260315]
[133.58909607 178.19567871]
[126.47734070 164.98875427]
[119.36558533 151.78182983]
[112.25382233 138.57490540]
[105.14206696 125.36797333]
[77.36605835 119.50595856]
[68.15769958 88.44247437]
[54.04549026 93.52633667]
[52.97524261 108.71759796]
[45.81295013 122.15715027]
[33.79952621 131.51649475]
[19.01636124 135.17408752]
[4.02473354 132.49621582]
[-8.57796764 123.94684601]
[-16.60824966 111.00719452]
[-18.67481422 95.91914368]
[-14.41962147 81.29679108]
[-4.57990503 69.67354584]
[9.13954258 63.06320190]
[24.36174583 62.61104584]
[38.44936371 68.39541626]
[48.96163177 79.41413116]
[63.07384109 74.33026886]
[68.29686737 60.26897430]
[60.92556381 47.20513535]
[53.55426025 34.14129639]
[46.18296051 21.07745552]
[35.11545944 10.95271015]
[21.44868469 4.77054262]
[7.78190708 -1.41162562]
[-5.88487005 -7.59379387]
[-19.55164719 -13.77596188]
[-35.80857849 -11.62092113]
[-45.58748627 -24.78545761]
[-38.82866669 -39.72702408]
[-22.48501587 -41.07501602]
[-13.36947918 -27.44273949]
[0.29729781 -21.26057053]
[13.96407509 -15.07840252]
[27.63085175 -8.89623451]
[41.29763031 -2.71406674]
[50.63341522 -14.45472622]
[41.53141403 -26.37754250]
[32.42941284 -38.30035782]
[16.78402138 -41.85019302]
[9.93467045 -56.35763550]
[17.13559532 -70.69382477]
[32.86286163 -73.86125946]
[45.05185699 -63.43015289]
[44.35222626 -47.40236282]
[53.45423126 -35.47954559]
[62.55623245 -23.55672836]
[76.66906738 -28.64081955]
[90.78064728 -33.72444153]
[76.33520508 -38.31846237]
[64.33407593 -47.57851791]
[56.22644424 -60.38641357]
[52.99135971 -75.19553375]
[55.01946259 -90.21760559]
[62.06586075 -103.63863373]
[73.27965546 -113.83797455]
[87.30673981 -119.58400726]
[102.45326233 -120.18286133]
[116.89021301 -115.56222534]
[128.87425232 -106.28006744]
[136.95826721 -93.45725250]
[140.16606140 -78.64219666]
[138.11027527 -63.62389374]
[131.03915405 -50.21586990]
[119.80657959 -40.03721237]
[105.76893616 -34.31704330]
[97.71410370 -5.32000494]
[79.50363922 11.45070744]
[59.24679947 13.70615387]
[66.61810303 26.76999474]
[73.98940277 39.83383560]
[81.36070251 52.89767456]
[96.14965820 55.40504837]
[107.41503143 45.50094223]
[118.68040466 35.59683609]
[129.94578552 25.69272995]
[141.21115112 15.78862476]
[143.67141724 -0.06466150]
[157.67089844 -7.90009737]
[172.47039795 -1.70700741]
[176.71701050 13.76379967]
[167.15309143 26.64444542]
[151.11526489 27.05399895]
[139.84988403 36.95810699]
[128.58451843 46.86221313]
[117.31913757 56.76631927]
[106.05376434 66.67042542]
[118.60838318 73.62741852]
[126.60006714 84.71582031]
[128.97097778 97.48101044]
[125.83409119 109.37361145]
[118.34899139 118.25621796]
[125.46075439 131.46315002]
[132.57250977 144.67007446]
[139.68426514 157.87699890]
[146.79602051 171.08392334]
[153.90779114 184.29084778]
[166.34887695 192.67054749]
[179.70658875 183.78511047]
[194.93724060 188.82560730]
[200.35719299 203.92539978]
[191.80870056 217.50122070]
[175.84944153 219.13887024]
[164.72200012 207.58206177]
[155.61999512 219.50488281]
[161.11981201 233.46023560]
[166.61962891 247.41560364]
[172.11944580 261.37097168]
[177.61926270 275.32632446]
[183.11907959 289.28167725]
[185.69377136 274.50430298]
[192.85083008 261.32186890]
[203.84143066 251.11369324]
[217.51559448 244.94787598]
[232.44256592 243.46955872]
[247.06053162 246.83341980]
[259.83993530 254.68746948]
[269.44372559 266.20996094]
[274.86697388 280.19525146]
[275.54223633 295.18005371]
[271.39892578 309.59646606]
[262.87048340 321.93606567]
[250.84931946 330.90774536]
[236.59318542 335.57281494]
[221.59373474 335.44311523]
[207.42041016 330.53225708]
[195.55616760 321.35403442]
[187.24169922 308.86724854]
[187.83428955 323.85552979]
[188.42689514 338.84381104]
[189.01948547 353.83209229]
[189.61209106 368.82040405]
[190.20469666 383.80868530]
[190.79728699 398.79696655]
[191.38989258 413.78527832]
[198.05725098 429.37316895]
[184.92425537 440.09512329]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 156]
[2 155]
[3 154]
[4 153]
[5 152]
[6 151]
[7 150]
[8 149]
[9 131]
[10 130]
[11 129]
[12 128]
[13 127]
[14 126]
[16 118]
[17 117]
[18 116]
[19 115]
[20 114]
[21 113]
[23 39]
[24 38]
[40 93]
[41 92]
[42 91]
[43 90]
[44 57]
[45 56]
[46 55]
[47 54]
[48 53]
[58 68]
[59 67]
[60 66]
[70 87]
[94 108]
[95 107]
[96 106]
[97 105]
[98 104]
[119 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
