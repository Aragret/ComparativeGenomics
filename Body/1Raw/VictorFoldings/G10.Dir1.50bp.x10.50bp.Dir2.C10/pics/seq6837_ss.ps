%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCUUAUCCUACCAGGCUUCGGAAUAAUCUCCCAUAUUGUAACUUACUACUCCGGAAAAAAxxxxxxxxxxACCUCAAAACAAAUGAUAACCAUACACAACACUAAAGGACGAACCUGAUCUCUUAUACUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[111.86869049 481.56427002]
[111.55663300 466.56753540]
[111.24457550 451.57077026]
[110.93251801 436.57403564]
[110.62046814 421.57727051]
[110.30841064 406.58050537]
[109.99635315 391.58377075]
[109.68429565 376.58700562]
[109.37223816 361.59024048]
[94.24761200 358.56338501]
[80.16307068 352.25811768]
[67.81985474 342.98501587]
[57.83325958 331.20245361]
[50.70196533 317.49407959]
[46.78311920 302.53973389]
[46.27446747 287.08187866]
[49.20436478 271.88858032]
[55.43022156 257.71560669]
[64.64544678 245.26850891]
[76.39451599 235.16775513]
[90.09552765 227.91769409]
[105.06900024 223.88134766]
[104.44502258 208.89433289]
[103.82104492 193.90730286]
[103.19706726 178.92028809]
[99.75417328 172.32543945]
[102.71928406 163.61567688]
[102.40722656 148.61892700]
[102.09517670 133.62217712]
[101.78311920 118.62541962]
[90.38209534 108.87776184]
[75.51905060 110.90010071]
[62.89043427 121.36193848]
[47.61214066 115.40325928]
[45.40117264 99.15383911]
[58.53197861 89.32968903]
[73.49671173 96.03704834]
[88.35976410 94.01471710]
[99.02138519 83.46342468]
[101.19822693 68.62222290]
[103.37506104 53.78101730]
[94.21150970 41.18470383]
[96.63054657 26.16462135]
[108.69567871 17.50620079]
[110.87251282 2.66499543]
[105.21984100 -12.11194038]
[114.72224426 -23.58162117]
[116.89907837 -38.42282867]
[119.07592010 -53.26403046]
[104.52398682 -56.95798111]
[90.42900085 -62.12861633]
[76.94038391 -68.72113037]
[64.20111847 -76.66563416]
[52.34624481 -85.87791443]
[41.50143814 -96.26030731]
[31.78165627 -107.70276642]
[23.28993416 -120.08399200]
[16.11628914 -133.27273560]
[10.33676529 -147.12918091]
[6.01262951 -161.50645447]
[3.18971920 -176.25213623]
[1.89795959 -191.20991516]
[2.15104365 -206.22125244]
[3.94628882 -221.12698364]
[7.26466417 -235.76913452]
[12.07099342 -249.99246216]
[18.31432724 -263.64620972]
[25.92848015 -276.58563232]
[34.83274078 -288.67358398]
[44.93272018 -299.78189087]
[56.12134933 -309.79281616]
[68.28002167 -318.60021973]
[81.27985382 -326.11077881]
[94.98303223 -332.24484253]
[109.24430847 -336.93740845]
[123.91249084 -340.13873291]
[138.83209229 -341.81484985]
[153.84497070 -341.94802856]
[168.79196167 -340.53683472]
[183.51463318 -337.59622192]
[197.85690308 -333.15737915]
[211.66673279 -327.26736450]
[224.79776001 -319.98858643]
[237.11074829 -311.39825439]
[248.47520447 -301.58737183]
[258.77066040 -290.65997314]
[267.88793945 -278.73190308]
[275.73043823 -265.92956543]
[282.21499634 -252.38873291]
[287.27285767 -238.25289917]
[290.85046387 -223.67192078]
[292.90985107 -208.80036926]
[293.42916870 -193.79589844]
[292.40295410 -178.81755066]
[289.84207153 -164.02410889]
[285.77365112 -149.57238770]
[280.24084473 -135.61560059]
[273.30227661 -122.30168152]
[265.03152466 -109.77176666]
[255.51626587 -98.15869141]
[244.85734558 -87.58554840]
[233.16775513 -78.16442108]
[220.57142639 -69.99518585]
[207.20187378 -63.16442871]
[193.20083618 -57.74457169]
[178.71672058 -53.79306412]
[163.90306091 -51.35179520]
[148.91691589 -50.44664001]
[133.91712952 -51.08719635]
[131.74028015 -36.24599075]
[129.56344604 -21.40478516]
[135.37182617 -7.68939114]
[125.71372223 4.84183264]
[123.53688049 19.68303871]
[132.60736084 31.44152832]
[130.61116028 46.52363205]
[118.21627045 55.95785141]
[116.03942871 70.79905701]
[113.86259460 85.64026642]
[116.77986908 118.31336212]
[117.09192657 133.31011963]
[117.40398407 148.30686951]
[117.71604156 163.30361938]
[118.18408203 178.29631042]
[118.80805969 193.28334045]
[119.43203735 208.27035522]
[120.05601501 223.25737000]
[134.44673157 225.78050232]
[147.98744202 231.25141907]
[160.08178711 239.42640686]
[170.19772339 249.94277954]
[177.89085388 262.33489990]
[182.82400513 276.05477905]
[184.78196716 290.49642944]
[183.68086243 305.02239990]
[179.57183838 318.99221802]
[172.63853455 331.79034424]
[163.18905640 342.85348511]
[151.64212036 351.69528198]
[138.50863647 357.92770386]
[124.36899567 361.27819824]
[124.68105316 376.27496338]
[124.99310303 391.27169800]
[125.30516052 406.26846313]
[125.61721802 421.26522827]
[125.92927551 436.26196289]
[126.24133301 451.25872803]
[126.55339050 466.25546265]
[126.86544037 481.25222778]
[129.45643616 500.45996094]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[22 127]
[23 126]
[24 125]
[25 124]
[27 123]
[28 122]
[29 121]
[30 120]
[31 38]
[32 37]
[39 119]
[40 118]
[41 117]
[44 114]
[45 113]
[47 111]
[48 110]
[49 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
