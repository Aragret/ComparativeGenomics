%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGAAAUAACUUUGCAAGGAGAGCCAAAGCUAAGACCCCCGAAACCAGACGAGCUACCUAAGxxxxxxxxxxUCGAACAGCAUACCCCCGAUUCCGCUACGACCAACUCAUACACCUCCUAUGAAAAAACUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[85.67153168 322.77352905]
[88.26252747 303.56579590]
[88.57458496 288.56903076]
[88.88664246 273.57229614]
[89.19869995 258.57553101]
[89.51074982 243.57878113]
[89.82280731 228.58203125]
[90.13486481 213.58526611]
[90.44692230 198.58851624]
[90.75897980 183.59176636]
[91.07103729 168.59501648]
[76.94400787 165.21827698]
[63.83354187 158.96600342]
[52.31768799 150.11386108]
[42.90419388 139.05215454]
[36.00810623 126.26860809]
[31.93348122 112.32685089]
[30.85997200 97.84158325]
[32.83491135 83.45149231]
[37.77122498 69.79103851]
[45.45125961 57.46252060]
[55.53640366 47.00952530]
[67.58198547 38.89292526]
[81.05690765 33.47059631]
[95.36705017 30.98161125]
[95.99102783 15.99459553]
[96.61500549 1.00757980]
[97.23898315 -13.97943592]
[97.86296082 -28.96645164]
[82.94345093 -30.56969643]
[68.16073608 -33.14529419]
[53.57812881 -36.68221664]
[39.25807190 -41.16532135]
[25.26188469 -46.57540512]
[11.64950180 -52.88930130]
[-1.52078450 -60.07997513]
[-14.19257832 -68.11663818]
[-26.31161499 -76.96486664]
[-37.82600021 -86.58677673]
[-48.68642807 -96.94116974]
[-58.84638977 -107.98369598]
[-68.26237488 -119.66707611]
[-76.89407349 -131.94128418]
[-84.70451355 -144.75375366]
[-91.66025543 -158.04960632]
[-97.73150635 -171.77192688]
[-102.89227295 -185.86195374]
[-107.12045288 -200.25933838]
[-110.39794159 -214.90243530]
[-112.71070862 -229.72854614]
[-114.04884338 -244.67416382]
[-114.40662384 -259.67532349]
[-113.78250885 -274.66772461]
[-112.17917633 -289.58724976]
[-109.60349274 -304.36993408]
[-106.06648254 -318.95251465]
[-101.58329773 -333.27255249]
[-96.17313385 -347.26870728]
[-89.85915375 -360.88104248]
[-82.66840363 -374.05130005]
[-74.63166809 -386.72305298]
[-65.78336334 -398.84201050]
[-56.16138458 -410.35635376]
[-45.80693054 -421.21670532]
[-34.76433945 -431.37661743]
[-23.08090401 -440.79254150]
[-10.80664825 -449.42416382]
[2.00586319 -457.23452759]
[15.30176640 -464.19018555]
[29.02412605 -470.26135254]
[43.11417770 -475.42202759]
[57.51158905 -479.65014648]
[72.15470886 -482.92755127]
[86.98082733 -485.24020386]
[101.92645264 -486.57827759]
[116.92759705 -486.93594360]
[131.92001343 -486.31173706]
[146.83950806 -484.70834351]
[161.62219238 -482.13256836]
[176.20475769 -478.59545898]
[190.52476501 -474.11218262]
[204.52088928 -468.70193481]
[218.13319397 -462.38787842]
[231.30339050 -455.19705200]
[243.97509766 -447.16024780]
[256.09402466 -438.31185913]
[267.60830688 -428.68981934]
[278.46859741 -418.33529663]
[288.62844849 -407.29266357]
[298.04428101 -395.60916138]
[306.67584229 -383.33486938]
[314.48611450 -370.52230835]
[321.44171143 -357.22634888]
[327.51278687 -343.50396729]
[332.67340088 -329.41387939]
[336.90139771 -315.01644897]
[340.17874146 -300.37332153]
[342.49133301 -285.54718018]
[343.82928467 -270.60153198]
[344.18688965 -255.60038757]
[343.56259155 -240.60797119]
[341.95907593 -225.68849182]
[339.38320923 -210.90582275]
[335.84603882 -196.32328796]
[331.36267090 -182.00329590]
[325.95236206 -168.00721741]
[319.63821411 -154.39494324]
[312.44729614 -141.22477722]
[304.41043091 -128.55313110]
[295.56198120 -116.43424988]
[285.93984985 -104.92003632]
[275.58526611 -94.05979156]
[264.54257202 -83.90002441]
[252.85902405 -74.48424530]
[240.58467102 -65.85276794]
[227.77206421 -58.04255295]
[214.47607422 -51.08704758]
[200.75364685 -45.01603699]
[186.66352844 -39.85552216]
[172.26606750 -35.62759399]
[157.62290955 -32.35036087]
[142.79676819 -30.03785896]
[127.85112762 -28.69998741]
[112.84997559 -28.34247589]
[112.22599792 -13.35545921]
[111.60202026 1.63155723]
[110.97804260 16.61857414]
[110.35406494 31.60558891]
[125.24591064 35.59777832]
[138.88360596 42.78927612]
[150.58969116 52.82283020]
[159.78262329 65.20000458]
[166.00573730 79.30593872]
[168.94989014 94.43988800]
[168.46881104 109.85005188]
[164.58641052 124.77088928]
[157.49555969 138.46118164]
[147.54849243 150.24084473]
[135.23936462 159.52470398]
[121.17964172 165.85153198]
[106.06778717 168.90707397]
[105.75572968 183.90382385]
[105.44367218 198.90057373]
[105.13162231 213.89732361]
[104.81956482 228.89408875]
[104.50750732 243.89083862]
[104.19544983 258.88760376]
[103.88339233 273.88433838]
[103.57133484 288.88110352]
[103.25928497 303.87783813]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 142]
[11 141]
[25 128]
[26 127]
[27 126]
[28 125]
[29 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
