%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAAAAAUCUUUGAAAUAGGGCCCGUAUUUACCCUAUAGCACCCCCUCUACCCCCUCUAGAxxxxxxxxxxUUACGAGUGCGGCUUCGACCCUAUAUCCCCCGCCCGCGUCCCUUUCUCCAUAAAAUUCUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[253.53898621 68.67675018]
[238.89549255 71.92757416]
[224.25198364 75.17839813]
[209.60848999 78.42922974]
[194.96498108 81.68005371]
[180.46939087 85.53721619]
[166.14678955 89.99402618]
[151.82418823 94.45084381]
[137.50160217 98.90766144]
[123.17900085 103.36447906]
[108.85639954 107.82128906]
[96.41696167 116.20343781]
[86.90859985 127.80477905]
[77.40024567 139.40611267]
[75.27478027 155.66694641]
[60.02804565 161.70590210]
[47.34457016 151.31063843]
[50.27202988 135.17491150]
[65.79890442 129.89775085]
[75.30725861 118.29641724]
[84.81562042 106.69507599]
[81.29305267 100.07378387]
[66.30207062 99.55378723]
[74.24791718 86.83119965]
[70.72534943 80.20990753]
[55.79104233 81.61220551]
[40.85673523 83.01451111]
[25.92242622 84.41681671]
[10.98811913 85.81912231]
[-3.94618869 87.22142029]
[-10.27549458 101.21554565]
[-22.76324463 110.15711212]
[-38.05029678 111.64089203]
[-52.02450943 105.26775360]
[-60.92689514 92.75203705]
[-62.36275101 77.46041107]
[-55.94583893 63.50624466]
[-43.40227890 54.64313507]
[-28.10622597 53.25521851]
[-14.17223930 59.71583557]
[-5.34849215 72.28711700]
[9.58581543 70.88481140]
[24.52012253 69.48250580]
[39.45442963 68.08020782]
[54.38873672 66.67790222]
[69.32304382 65.27559662]
[85.90772247 66.09918976]
[98.25839233 72.96390533]
[104.58093262 83.14015961]
[104.39958191 93.49869537]
[118.72218323 89.04187775]
[133.04478455 84.58506012]
[147.36737061 80.12825012]
[161.68997192 75.67143250]
[176.01257324 71.21461487]
[178.92984009 67.80125427]
[182.44093323 65.74133301]
[186.03379822 65.05343628]
[189.24519348 65.58342743]
[191.71415710 67.03655243]
[206.35766602 63.78572464]
[221.00115967 60.53490067]
[235.64466858 57.28407288]
[250.28816223 54.03324890]
[248.74433899 36.12647247]
[249.78071594 18.18487740]
[253.37542725 0.57828987]
[259.45388794 -16.33043480]
[267.89035034 -32.19289780]
[278.51046753 -46.68233109]
[291.09494019 -59.50033188]
[305.38394165 -70.38300323]
[321.08267212 -79.10639191]
[337.86724854 -85.49108887]
[355.39151001 -89.40594482]
[373.29406738 -90.77072144]
[391.20587158 -89.55776978]
[408.75765991 -85.79258728]
[425.58776855 -79.55326080]
[441.34939575 -70.96887207]
[455.71783447 -60.21680832]
[468.39724731 -47.51910782]
[479.12652588 -33.13787079]
[492.21966553 -40.45697403]
[505.31283569 -47.77608109]
[513.58331299 -61.26345444]
[528.46801758 -60.71989059]
[536.73852539 -74.20726776]
[551.62322998 -73.66370392]
[564.71636963 -80.98281097]
[577.80950928 -88.30191040]
[590.90264893 -95.62101746]
[588.18536377 -110.51715088]
[590.45446777 -125.48812103]
[597.46392822 -138.90997314]
[608.45336914 -149.32681274]
[622.23077393 -155.60871887]
[637.30163574 -157.07424927]
[652.03118896 -153.56443787]
[664.82171631 -145.46000671]
[674.28576660 -133.64007568]
[679.39672852 -119.38677216]
[679.60021973 -104.24619293]
[674.87420654 -89.86066437]
[665.73126221 -77.79062653]
[653.16320801 -69.34535217]
[638.53332520 -65.44091034]
[623.42852783 -66.50083923]
[609.48724365 -72.41015625]
[598.22180176 -82.52786255]
[585.12860107 -75.20876312]
[572.03546143 -67.88965607]
[558.94232178 -60.57054901]
[551.60833740 -47.60668564]
[535.78710938 -47.62673569]
[528.45312500 -34.66287613]
[512.63195801 -34.68292618]
[499.53878784 -27.36382103]
[486.44561768 -20.04471588]
[491.32919312 -8.49469280]
[495.03082275 3.48726869]
[497.51309204 15.78055573]
[498.75088501 28.26140594]
[498.73162842 40.80415344]
[497.45532227 53.28249741]
[494.93469238 65.57077026]
[491.19500732 77.54521179]
[486.27380371 89.08519745]
[480.22048950 100.07446289]
[473.09591675 110.40229797]
[464.97167969 119.96461487]
[455.92950439 128.66503906]
[446.06036377 136.41586304]
[435.46353149 143.13893127]
[424.24566650 148.76643372]
[412.51962280 153.24157715]
[400.40344238 156.51914978]
[388.01913452 158.56605530]
[375.49133301 159.36151123]
[362.94622803 158.89738464]
[350.51010132 157.17820740]
[338.30822754 154.22117615]
[326.46350098 150.05590820]
[315.09524536 144.72422791]
[304.31799316 138.27969360]
[294.24032593 130.78709412]
[284.96380615 122.32175446]
[276.58193970 112.96882629]
[269.17922974 102.82239532]
[262.83035278 91.98455048]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 64]
[2 63]
[3 62]
[4 61]
[5 60]
[6 55]
[7 54]
[8 53]
[9 52]
[10 51]
[11 50]
[12 21]
[13 20]
[14 19]
[25 46]
[26 45]
[27 44]
[28 43]
[29 42]
[30 41]
[83 119]
[84 118]
[85 117]
[87 115]
[89 113]
[90 112]
[91 111]
[92 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
