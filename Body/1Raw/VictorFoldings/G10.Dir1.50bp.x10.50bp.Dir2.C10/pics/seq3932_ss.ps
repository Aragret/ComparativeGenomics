%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACAACACAAGAACACCUCUGAUUACUCCUGCCAUCAUGACCCUUGGCCAUAAUAUGAUUxxxxxxxxxxAUAUUCAUGUGCCUAGACCAAGAAGUUAUUAUCUCGAACUGACACUGAGCCACAACCCAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[98.41805267 279.29763794]
[98.41805267 264.29763794]
[98.41805267 249.29763794]
[98.41805267 234.29763794]
[98.41805267 219.29763794]
[98.41805267 204.29763794]
[98.41805267 189.29763794]
[98.41805267 174.29763794]
[98.41805267 159.29763794]
[98.41805267 144.29763794]
[86.96015167 141.28147888]
[76.97532654 135.43466187]
[69.12495422 127.31615448]
[63.88183594 117.62802124]
[61.50295258 107.15625000]
[62.01975632 96.70770264]
[65.24616241 87.04815674]
[70.80283356 78.84618378]
[78.15525818 72.62697601]
[71.52676392 59.17100906]
[58.48760986 50.21047974]
[59.80428696 35.37418365]
[53.17578888 21.91821861]
[46.54729080 8.46225357]
[31.85444832 3.28942633]
[25.32389259 -10.45126152]
[30.34593964 -24.42676353]
[23.71744156 -37.88272858]
[16.85125923 -33.51967239]
[7.43760157 -32.30768967]
[-7.55509424 -32.77573395]
[-22.54779053 -33.24377441]
[-37.54048538 -33.71181488]
[-45.56291580 -20.61463356]
[-59.06678772 -13.29745960]
[-74.41962433 -13.72857857]
[-87.49160004 -21.79202080]
[-94.76641083 -35.31876373]
[-94.28717041 -50.67017746]
[-86.18279266 -63.71680832]
[-72.63331604 -70.94918060]
[-57.28347778 -70.42182922]
[-44.26231384 -62.27659225]
[-37.07244492 -48.70451355]
[-22.07974815 -48.23646927]
[-7.08705235 -47.76842880]
[7.90564394 -47.30038452]
[18.34545708 -58.07119370]
[17.40982819 -73.04198456]
[6.32411623 -80.75980377]
[1.79334474 -93.27778625]
[5.26813936 -105.92690277]
[15.25669384 -114.12602234]
[14.63271618 -129.11303711]
[6.32804728 -142.57940674]
[13.52921486 -155.61752319]
[12.90523720 -170.60453796]
[12.28126049 -185.59155273]
[11.50141525 -200.57127380]
[10.56578636 -215.54206848]
[9.63015842 -230.51284790]
[8.53884792 -245.47309875]
[7.29197311 -260.42120361]
[6.04509830 -275.36926270]
[4.79822397 -290.31735229]
[3.55134940 -305.26544189]
[-10.93804932 -309.86172485]
[-22.56236839 -319.65679932]
[-29.54898262 -333.15701294]
[-30.83248711 -348.30368042]
[-26.21715355 -362.78701782]
[-16.40678787 -374.39843750]
[-2.89739943 -381.36727905]
[12.25092793 -382.63085938]
[26.72818375 -377.99649048]
[38.32669067 -368.17083740]
[45.27776718 -354.65231323]
[46.52141571 -339.50231934]
[41.86799240 -325.03118896]
[32.02711105 -313.44561768]
[18.49943542 -306.51232910]
[19.74631119 -291.56423950]
[20.99318504 -276.61614990]
[22.24006081 -261.66806030]
[23.48693466 -246.71997070]
[27.20118523 -240.27404785]
[24.60095024 -231.44848633]
[25.53657722 -216.47769165]
[26.47220612 -201.50689697]
[30.05155373 -194.98509216]
[27.26827621 -186.21553040]
[27.89225388 -171.22851562]
[28.51623154 -156.24150085]
[36.77626801 -143.84710693]
[29.61973190 -129.73701477]
[30.24370956 -114.75000000]
[43.08544540 -103.93576050]
[44.18539429 -86.84558105]
[32.38061905 -73.97761536]
[33.31624603 -59.00682449]
[37.17340851 -44.51122665]
[43.80190659 -31.05526161]
[57.94271851 -26.51951408]
[64.85664368 -12.96767616]
[60.00325394 1.83375525]
[66.63175201 15.28972054]
[73.26025391 28.74568558]
[85.82528687 36.74375534]
[84.98272705 52.54251099]
[91.61122894 65.99847412]
[116.85393524 65.80522156]
[137.75755310 83.45283508]
[142.51553345 112.53845215]
[156.74232483 117.29226685]
[170.96910095 122.04608154]
[181.96603394 111.40060425]
[196.65379333 107.09616852]
[211.65724182 110.12188721]
[223.52870178 119.78247070]
[229.54019165 133.85800171]
[228.31033325 149.11401367]
[220.12170410 162.04479980]
[206.85601807 169.67893982]
[191.56163025 170.26219177]
[177.75306702 163.66050720]
[168.60345459 151.39089966]
[166.21528625 136.27285767]
[151.98851013 131.51904297]
[137.76171875 126.76522827]
[131.67581177 131.14833069]
[141.88188171 142.14088440]
[152.08795166 153.13342285]
[165.66204834 159.51654053]
[170.09599304 173.84622192]
[162.49906921 186.78016663]
[147.82412720 189.88598633]
[135.63859558 181.13882446]
[133.88673401 166.24201965]
[126.69535065 153.07827759]
[119.50396729 139.91453552]
[113.41805267 144.29763794]
[113.41805267 159.29763794]
[113.41805267 174.29763794]
[113.41805267 189.29763794]
[113.41805267 204.29763794]
[113.41805267 219.29763794]
[113.41805267 234.29763794]
[113.41805267 249.29763794]
[113.41805267 264.29763794]
[113.41805267 279.29763794]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[19 110]
[20 109]
[22 107]
[23 106]
[24 105]
[27 102]
[28 101]
[30 47]
[31 46]
[32 45]
[33 44]
[48 100]
[49 99]
[53 96]
[54 95]
[56 93]
[57 92]
[58 91]
[59 89]
[60 88]
[61 87]
[62 85]
[63 84]
[64 83]
[65 82]
[66 81]
[113 129]
[114 128]
[115 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
