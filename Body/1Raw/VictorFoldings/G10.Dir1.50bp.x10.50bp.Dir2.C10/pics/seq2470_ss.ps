%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACCCAAUUGGACCAAUCUAUCACCCUAUAGAAGAACUAAUGUUAGUAUAAGUAACAUGAAAxxxxxxxxxxCCCUGGCCGUACGCCUAACCGCUAACAUUACUGCAGGCCACCUACUCAUGCACCUAAUUGGACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[142.15632629 426.39874268]
[142.15632629 411.39874268]
[142.15632629 396.39874268]
[142.15632629 381.39874268]
[142.15632629 366.39874268]
[142.15632629 351.39874268]
[142.15632629 336.39874268]
[142.15632629 321.39874268]
[142.15632629 306.39874268]
[142.15632629 291.39874268]
[140.33666992 276.50952148]
[136.72424316 261.95101929]
[120.25316620 259.88128662]
[105.79630280 251.64749146]
[95.56867218 238.47891235]
[91.14964294 222.36338806]
[93.23906708 205.74722290]
[101.54661560 191.16383362]
[114.83174133 180.84754944]
[110.63227844 166.44738770]
[106.43281555 152.04724121]
[101.51203918 146.47358704]
[102.29734802 137.31254578]
[98.39059448 122.83023834]
[86.06542206 120.44895935]
[75.98556519 111.44854736]
[71.63552094 97.64279938]
[56.85757828 100.21424866]
[42.07963181 102.78569794]
[27.30168724 105.35714722]
[12.52374268 107.92859650]
[3.63576841 120.99685669]
[-11.90504360 123.87065887]
[-24.87860680 114.84500885]
[-27.58793449 99.27468872]
[-18.42563057 86.39727020]
[-2.82752967 83.85271454]
[9.95229340 93.15065002]
[24.73023796 90.57920837]
[39.50818253 88.00775909]
[54.28612900 85.43630981]
[69.06407166 82.86486053]
[78.94949341 71.58308411]
[79.55738068 56.59540939]
[77.07086182 51.87207413]
[76.72090149 47.14580154]
[78.14099121 43.24429703]
[80.68521118 40.72349548]
[82.20273590 25.80045509]
[83.72026062 10.87741470]
[85.23778534 -4.04562521]
[86.75531006 -18.96866417]
[88.27283478 -33.89170456]
[89.79035950 -48.81474304]
[91.30788422 -63.73778534]
[92.82540894 -78.66082764]
[94.34294128 -93.58386230]
[77.19042969 -104.54148865]
[69.12891388 -124.14404297]
[73.97635651 -145.64157104]
[90.91426849 -161.02220154]
[88.49271393 -175.82545471]
[73.47802734 -177.31594849]
[59.36106110 -182.64263916]
[47.10433960 -191.44236755]
[37.54354477 -203.11514282]
[31.33054352 -216.86508179]
[28.88895226 -231.75471497]
[30.38524055 -246.76882935]
[35.71739197 -260.88372803]
[44.52185059 -273.13705444]
[56.19831085 -282.69335938]
[69.95065308 -288.90103149]
[84.84122467 -291.33688354]
[99.85475922 -289.83477783]
[113.96760559 -284.49719238]
[126.21752930 -275.68798828]
[135.76930237 -264.00784302]
[141.97169495 -250.25311279]
[144.40177917 -235.36160278]
[142.89389038 -220.34864807]
[137.55084229 -206.23786926]
[128.73693848 -193.99134827]
[117.05309296 -184.44407654]
[103.29595947 -178.24700928]
[105.71751404 -163.44375610]
[120.37911224 -160.27554321]
[128.69685364 -172.75813293]
[137.01460266 -185.24072266]
[135.28739929 -201.19052124]
[146.78153992 -212.38267517]
[162.67971802 -210.23150635]
[170.78620911 -196.38722229]
[164.88240051 -181.46995544]
[149.49719238 -176.92297363]
[141.17944336 -164.44038391]
[132.86170959 -151.95779419]
[139.87698364 -139.74168396]
[141.93702698 -126.15298462]
[139.00660706 -113.07650757]
[131.72599792 -102.23693085]
[121.29167175 -94.97147369]
[109.26597595 -92.06633759]
[107.74845123 -77.14330292]
[106.23092651 -62.22026062]
[104.71340179 -47.29721832]
[103.19587708 -32.37417984]
[101.67835236 -17.45113945]
[100.16082764 -2.52810025]
[98.64330292 12.39493942]
[97.12577820 27.31797981]
[95.60825348 42.24102020]
[94.54505920 57.20329285]
[93.93717194 72.19097137]
[112.38102722 75.92907715]
[123.58737183 89.85999298]
[123.31002808 106.79682159]
[112.87290192 118.92349243]
[116.77965546 133.40579224]
[120.83296967 147.84777832]
[125.03243256 162.24792480]
[129.23190308 176.64808655]
[142.71524048 177.36997986]
[155.29281616 182.21864319]
[165.73620605 190.70539856]
[173.03013611 201.98695374]
[176.47114563 214.94924927]
[175.73542786 228.31741333]
[170.90927124 240.78120422]
[162.47914124 251.12336731]
[151.28274536 258.33856201]
[154.89518738 272.89709473]
[160.37692261 258.93463135]
[171.29382324 248.64765930]
[185.55709839 244.00447083]
[200.43766785 245.89344788]
[213.08840942 253.95317078]
[221.08874512 266.64154053]
[222.90797424 281.53079224]
[218.19801331 295.77215576]
[207.86001587 306.64071655]
[193.87200928 312.05697632]
[178.91038513 310.98458862]
[165.83782959 303.62878418]
[157.15632629 291.39874268]
[157.15632629 306.39874268]
[157.15632629 321.39874268]
[157.15632629 336.39874268]
[157.15632629 351.39874268]
[157.15632629 366.39874268]
[157.15632629 381.39874268]
[157.15632629 396.39874268]
[157.15632629 411.39874268]
[157.15632629 426.39874268]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[11 132]
[12 131]
[19 122]
[20 121]
[21 120]
[23 119]
[24 118]
[27 42]
[28 41]
[29 40]
[30 39]
[31 38]
[43 114]
[44 113]
[48 112]
[49 111]
[50 110]
[51 109]
[52 108]
[53 107]
[54 106]
[55 105]
[56 104]
[57 103]
[61 86]
[62 85]
[87 97]
[88 96]
[89 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
