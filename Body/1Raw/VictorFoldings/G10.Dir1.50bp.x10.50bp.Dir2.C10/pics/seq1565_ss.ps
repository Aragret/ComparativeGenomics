%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUCACCACCUCUUGCUCAGCCUAUAUACCGCCAUCUUCAGCAAACCCUGAUGAAGGCUAxxxxxxxxxxAAUACUACCGUAUGGCCCACCAUAAUUACCCCCAUACUCCUUACACUAUUCCUCAUCACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[17.23865318 301.19622803]
[6.54118776 296.45562744]
[-0.36581081 309.77078247]
[-7.27280951 323.08593750]
[-6.75910330 338.89880371]
[-19.48781013 346.63372803]
[-26.39480972 359.94888306]
[-25.88110352 375.76174927]
[-38.60980988 383.49667358]
[-37.33068466 399.84588623]
[-51.00124741 408.90390015]
[-65.55839539 401.35263062]
[-66.02698517 384.96017456]
[-51.92496490 376.58969116]
[-52.93270493 361.72921753]
[-39.70996475 353.04187012]
[-32.80296707 339.72671509]
[-33.81070709 324.86624146]
[-20.58796501 316.17892456]
[-13.68096638 302.86376953]
[-6.77396774 289.54861450]
[-22.66305351 279.67507935]
[-37.64517593 268.47302246]
[-51.60956192 256.02529907]
[-64.45295715 242.42395020]
[-76.08039856 227.76951599]
[-86.40591431 212.17037964]
[-95.35315704 195.74183655]
[-102.85597992 178.60540771]
[-108.85889435 160.88777161]
[-113.31752014 142.71992493]
[-116.19889832 124.23622131]
[-117.48171234 105.57331085]
[-117.15648651 86.86919403]
[-115.22561646 68.26216125]
[-111.70339203 49.88980103]
[-106.61584473 31.88795090]
[-100.00059509 14.38971615]
[-91.90655518 -2.47552323]
[-82.39356995 -18.58306503]
[-71.53198242 -33.81381226]
[-83.03378296 -43.44234085]
[-94.53559113 -53.07086563]
[-110.08396912 -55.99636078]
[-114.87648773 -70.09887695]
[-126.37828827 -79.72740936]
[-141.92666626 -82.65290070]
[-146.71919250 -96.75541687]
[-158.22099304 -106.38394165]
[-169.72279358 -116.01247406]
[-181.22459412 -125.64099884]
[-196.94302368 -123.99588776]
[-209.16813660 -134.01199341]
[-210.64695740 -149.74694824]
[-200.50216675 -161.86546326]
[-184.75245667 -163.17785645]
[-172.74186707 -152.90550232]
[-171.59606934 -137.14280701]
[-160.09426880 -127.51427460]
[-148.59246826 -117.88574982]
[-137.09065247 -108.25722504]
[-122.36496735 -106.02042389]
[-116.74976349 -91.22920990]
[-105.24795532 -81.60068512]
[-90.52227020 -79.36388397]
[-84.90705872 -64.57266998]
[-73.40525818 -54.94414520]
[-61.90345383 -45.31561661]
[-50.59202194 -57.00764465]
[-38.43851852 -67.82173157]
[-25.51090813 -77.69741058]
[-11.88147640 -86.57945251]
[2.37356329 -94.41819763]
[17.17450142 -101.16981506]
[32.43857574 -106.79654694]
[48.08043671 -111.26692963]
[64.01261139 -114.55596924]
[80.14602661 -116.64527893]
[96.39044952 -117.52317047]
[112.65505981 -117.18473053]
[128.84890747 -115.63185883]
[144.88143921 -112.87323761]
[160.66300964 -108.92428589]
[176.10536194 -103.80709076]
[191.12216187 -97.55027008]
[205.62944031 -90.18879700]
[219.54605103 -81.76385498]
[232.79420471 -72.32253265]
[245.29981995 -61.91763306]
[256.99295044 -50.60734177]
[267.80822754 -38.45489502]
[279.70059204 -47.59662628]
[291.59298706 -56.73836136]
[303.48535156 -65.88009644]
[315.37774658 -75.02182770]
[321.13681030 -90.37648010]
[337.35601807 -92.79903412]
[347.35046387 -79.79737091]
[340.83871460 -64.74649811]
[324.51947021 -63.12945175]
[312.62710571 -53.98771667]
[300.73471069 -44.84598160]
[288.84234619 -35.70424652]
[276.94995117 -26.56251335]
[283.49856567 -16.86587524]
[289.51638794 -6.83118105]
[294.98596191 3.51254320]
[299.89154053 14.13537598]
[304.21887207 25.00658798]
[307.95547485 36.09473038]
[311.09051514 47.36773300]
[313.61492920 58.79298782]
[315.52142334 70.33743286]
[316.80450439 81.96768951]
[317.46041870 93.65010834]
[317.48730469 105.35089111]
[316.88504028 117.03620148]
[315.65542603 128.67222595]
[313.80197144 140.22531128]
[311.33004761 151.66203308]
[308.24682617 162.94932556]
[304.56121826 174.05451965]
[300.28384399 184.94549561]
[295.42712402 195.59074402]
[290.00512695 205.95948792]
[284.03347778 216.02171326]
[277.52947998 225.74833679]
[270.51193237 235.11120605]
[263.00115967 244.08323669]
[255.01887512 252.63848877]
[246.58816528 260.75219727]
[237.73342896 268.40087891]
[228.48027039 275.56246948]
[218.85545349 282.21618652]
[208.88682556 288.34280396]
[198.60322571 293.92462158]
[188.03439331 298.94546509]
[177.21090698 303.39083862]
[166.16407776 307.24786377]
[154.92584229 310.50537109]
[143.52873230 313.15396118]
[132.00570679 315.18594360]
[120.39010620 316.59548950]
[108.71551514 317.37847900]
[97.01571655 317.53265381]
[85.32454681 317.05755615]
[73.67583466 315.95462036]
[62.10326385 314.22695923]
[50.64031982 311.87963867]
[39.32015610 308.91940308]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 21]
[3 20]
[4 19]
[6 17]
[7 16]
[9 14]
[41 68]
[42 67]
[43 66]
[45 64]
[46 63]
[48 61]
[49 60]
[50 59]
[51 58]
[91 104]
[92 103]
[93 102]
[94 101]
[95 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
