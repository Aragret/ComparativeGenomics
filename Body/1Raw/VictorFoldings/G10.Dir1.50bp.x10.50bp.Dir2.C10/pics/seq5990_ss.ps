%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCAAAGCCCUCAGUAAGUUGCAAUACUUAAUUUCUGUAACAGCUAAGGACUGCAAAACCCxxxxxxxxxxUUAACAGUACAUAGUACAUAAAGCCAUUUACCGUACAUAGCACAUUACAGUCAAAUCCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-13.67600727 472.66186523]
[-13.67600727 457.66186523]
[-13.67600727 442.66186523]
[-13.67600727 427.66186523]
[-13.67600727 412.66186523]
[-13.67600727 397.66186523]
[-13.67600727 382.66186523]
[-13.67600727 367.66186523]
[-13.67600727 352.66186523]
[-13.67600727 337.66186523]
[-19.62219620 333.09100342]
[-26.81357956 346.25473022]
[-34.00496292 359.41848755]
[-36.81830215 374.15228271]
[-49.47002411 382.21044922]
[-64.01158142 378.53033447]
[-71.30710602 365.42404175]
[-66.77313232 351.12567139]
[-53.25830078 344.61834717]
[-42.38644028 334.28378296]
[-31.51457596 323.94924927]
[-37.46076584 319.37838745]
[-48.80728149 330.40414429]
[-63.09617615 326.19976807]
[-77.59177399 330.05691528]
[-92.08737183 333.91409302]
[-106.58296204 337.77124023]
[-121.07855988 341.62841797]
[-128.78659058 355.42556763]
[-144.01560974 359.65078735]
[-157.73051453 351.79733276]
[-161.79449463 336.52447510]
[-153.79646301 322.89337158]
[-138.48150635 318.99111938]
[-124.93572235 327.13281250]
[-110.44012451 323.27563477]
[-95.94452667 319.41848755]
[-81.44892883 315.56134033]
[-66.95333099 311.70416260]
[-56.64364243 300.95431519]
[-41.31792450 304.88281250]
[-36.49350739 274.75048828]
[-14.55372334 256.32516479]
[12.22868252 256.74545288]
[19.13568115 243.43029785]
[26.04267883 230.11514282]
[32.94967651 216.79998779]
[39.85667801 203.48483276]
[46.76367569 190.16967773]
[40.99482346 174.40330505]
[48.53404999 159.02656555]
[65.17299652 153.72724915]
[71.80149841 140.27127075]
[78.42999268 126.81531525]
[85.05849457 113.35934448]
[73.98632812 93.59152222]
[88.24243927 68.58852386]
[79.38478088 55.47927856]
[86.03734589 42.15288925]
[84.79047394 27.20480347]
[83.54360199 12.25671577]
[82.29672241 -2.69137144]
[67.44629669 -5.36103916]
[53.79325485 -11.78419304]
[42.26848984 -21.52289200]
[33.65778351 -33.91313553]
[28.54822159 -48.11013412]
[27.28818512 -63.14591599]
[29.96358681 -77.99531555]
[36.39200974 -91.64587402]
[46.13515854 -103.16687775]
[58.52872467 -111.77279663]
[72.72769928 -116.87687683]
[87.76396179 -118.13111115]
[102.61232758 -115.44997406]
[116.26040649 -109.01628113]
[127.77764130 -99.26868439]
[136.37878418 -86.87179565]
[141.47737122 -72.67085266]
[142.72579956 -57.63410187]
[140.03894043 -42.78677368]
[133.59997559 -29.14118385]
[123.84793091 -17.62770844]
[111.44772339 -9.03135872]
[97.24481201 -3.93824601]
[98.49168396 11.00984097]
[99.73856354 25.95792770]
[100.98543549 40.90601349]
[109.75391388 52.94607544]
[103.19052887 67.34165192]
[109.49609375 71.40242004]
[122.83510590 64.54161072]
[122.10722351 79.52396393]
[128.41278076 83.58473206]
[142.53758240 78.53598022]
[156.66238403 73.48722076]
[170.78718567 68.43846893]
[182.33560181 54.13412857]
[199.45303345 57.87492371]
[213.46974182 52.53340912]
[227.48645020 47.19189835]
[241.50317383 41.85038376]
[251.42907715 28.79633141]
[267.66082764 31.13353157]
[273.50057983 46.45767593]
[262.94088745 59.00459671]
[246.84468079 55.86709595]
[232.82797241 61.20861053]
[218.81126404 66.55012512]
[204.79454041 71.89163208]
[199.53536987 82.83002472]
[187.84895325 87.37385559]
[175.83595276 82.56327057]
[161.71115112 87.61202240]
[147.58634949 92.66078186]
[133.46154785 97.70954132]
[118.88896942 118.99964142]
[98.51445770 119.98784637]
[91.88595581 133.44381714]
[85.25746155 146.89978027]
[78.62895966 160.35574341]
[84.41292572 172.56243896]
[82.12315369 185.67674255]
[72.82135010 194.92610168]
[60.07883072 197.07667542]
[53.17183304 210.39183044]
[46.26483536 223.70698547]
[39.35783386 237.02214050]
[32.45083618 250.33729553]
[25.54383850 263.65246582]
[31.96744156 269.15145874]
[37.08715820 276.08740234]
[40.58127975 284.14849854]
[42.20317459 292.95114136]
[41.79730606 302.05792236]
[39.31079102 310.99951172]
[34.79979706 319.29870605]
[28.43020821 326.49591064]
[20.47237587 332.17437744]
[11.29006004 335.98391724]
[1.32399297 337.66186523]
[1.32399297 352.66186523]
[1.32399297 367.66186523]
[1.32399297 382.66186523]
[1.32399297 397.66186523]
[1.32399297 412.66186523]
[1.32399297 427.66186523]
[1.32399297 442.66186523]
[1.32399297 457.66186523]
[1.32399297 472.66186523]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[22 41]
[24 39]
[25 38]
[26 37]
[27 36]
[28 35]
[44 130]
[45 129]
[46 128]
[47 127]
[48 126]
[49 125]
[52 121]
[53 120]
[54 119]
[55 118]
[57 90]
[59 88]
[60 87]
[61 86]
[62 85]
[94 116]
[95 115]
[96 114]
[97 113]
[99 110]
[100 109]
[101 108]
[102 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
