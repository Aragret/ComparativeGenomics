%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUGGGGGGUAUGCACGCGAUAGCAUUGCGAGACGCUGGAGCCGGAGCACCCUAUGUCGCAxxxxxxxxxxAUCAAUAUCCCGCACAAGAGUGCUACUCUCCUCGCUCCGGGCCCAUAACACUUGGGGGUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[113.94224548 263.81890869]
[113.94224548 248.81890869]
[113.94224548 233.81890869]
[113.94224548 218.81890869]
[113.94224548 203.81890869]
[113.94224548 188.81890869]
[113.94224548 173.81890869]
[113.94224548 158.81890869]
[113.94224548 143.81890869]
[113.94224548 128.81890869]
[107.90225220 124.37273407]
[103.17786407 138.60931396]
[88.17816162 138.51531982]
[83.63256836 124.22064972]
[95.82225800 115.48038483]
[89.78226471 111.03421021]
[78.90422821 122.52241516]
[64.45280457 118.91606903]
[50.13020706 123.37288666]
[37.99675751 137.18444824]
[21.04975510 132.73483276]
[6.82297659 137.48864746]
[-7.40380239 142.24246216]
[-21.63058090 146.99627686]
[-33.47407532 161.05726624]
[-50.50997925 156.96118164]
[-64.63478088 162.00993347]
[-74.83011627 174.85467529]
[-91.00972748 172.18029785]
[-96.52941132 156.73797607]
[-85.71099854 144.41345215]
[-69.68354034 147.88513184]
[-55.55873489 142.83638000]
[-50.07314301 132.00976562]
[-38.29471588 127.71003723]
[-26.38439560 132.76950073]
[-12.15761757 128.01568604]
[2.06916165 123.26187134]
[16.29594040 118.50805664]
[22.00558090 107.79790497]
[33.87090683 103.74414062]
[45.67339325 109.05029297]
[59.99599075 104.59347534]
[69.84957886 93.42404938]
[85.32544708 96.71161652]
[96.52121735 86.72888947]
[102.58422852 73.00883484]
[108.64723969 59.28878021]
[103.18233490 44.70205307]
[109.52654266 30.87433815]
[123.46643829 25.75428009]
[129.52944946 12.03422642]
[135.59246826 -1.68582737]
[141.65547180 -15.40588093]
[147.71849060 -29.12593460]
[153.78149414 -42.84598923]
[159.84451294 -56.56604004]
[149.32612610 -66.60032654]
[143.22314453 -80.07441711]
[142.59629822 -95.10799408]
[147.72694397 -109.52369690]
[158.04876709 -121.16242981]
[172.20420837 -128.20643616]
[188.22120667 -129.46168518]
[191.01353455 -144.19947815]
[193.80584717 -158.93728638]
[192.32470703 -168.01792908]
[196.81262207 -173.95124817]
[199.91093445 -188.62777710]
[186.45268250 -195.44963074]
[175.21926880 -205.52301025]
[166.97662354 -218.16108704]
[162.28674316 -232.50219727]
[161.46939087 -247.56852722]
[164.58029175 -262.33282471]
[171.40733337 -275.78845215]
[181.48504639 -287.01797485]
[194.12631226 -295.25573730]
[208.46923828 -299.94009399]
[223.53588867 -300.75161743]
[238.29898071 -297.63504028]
[251.75196838 -290.80279541]
[262.97760010 -280.72073364]
[271.21047974 -268.07629395]
[275.88928223 -253.73155212]
[276.69500732 -238.66459656]
[273.57272339 -223.90269470]
[266.73526001 -210.45234680]
[256.64889526 -199.23062134]
[244.00126648 -191.00262451]
[229.65472412 -186.32936096]
[214.58746338 -185.52944946]
[211.48913574 -170.85292053]
[208.54365540 -156.14495850]
[205.75132751 -141.40716553]
[202.95901489 -126.66935730]
[214.75564575 -117.40440369]
[228.41189575 -123.60980988]
[242.06813049 -129.81521606]
[255.72438049 -136.02062988]
[269.38061523 -142.22602844]
[281.29946899 -154.28326416]
[296.18499756 -146.16796875]
[292.50756836 -129.61766052]
[275.58602905 -128.56979370]
[261.92977905 -122.36438751]
[248.27354431 -116.15897369]
[234.61729431 -109.95356750]
[220.96105957 -103.74816132]
[223.23367310 -85.67212677]
[217.76188660 -68.72058105]
[205.90173340 -55.97896957]
[190.13691711 -49.61271667]
[173.56455994 -50.50302887]
[167.50155640 -36.78297424]
[161.43853760 -23.06292152]
[155.37553406 -9.34286785]
[149.31251526 4.37718582]
[143.24949646 18.09723854]
[137.18649292 31.81729317]
[142.78555298 45.57178879]
[136.83224487 59.57224274]
[122.36729431 65.35179138]
[116.30428314 79.07184601]
[110.24127197 92.79190063]
[122.13980865 83.65818024]
[131.61407471 72.02898407]
[144.43914795 64.24967957]
[159.13018799 61.22093582]
[173.98632812 63.29340744]
[187.28756714 70.22714996]
[197.49395752 81.21940613]
[203.42384338 94.99752045]
[204.39065552 109.96633148]
[200.28248596 124.39279938]
[191.57495117 136.60667419]
[179.27619934 145.19390869]
[164.81008911 149.16026306]
[149.85150146 148.04656982]
[136.13362122 141.98265076]
[128.94224548 128.81890869]
[128.94224548 143.81890869]
[128.94224548 158.81890869]
[128.94224548 173.81890869]
[128.94224548 188.81890869]
[128.94224548 203.81890869]
[128.94224548 218.81890869]
[128.94224548 233.81890869]
[128.94224548 248.81890869]
[128.94224548 263.81890869]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[16 45]
[18 43]
[19 42]
[21 39]
[22 38]
[23 37]
[24 36]
[26 33]
[27 32]
[46 125]
[47 124]
[48 123]
[51 120]
[52 119]
[53 118]
[54 117]
[55 116]
[56 115]
[57 114]
[64 96]
[65 95]
[66 94]
[68 93]
[69 92]
[97 109]
[98 108]
[99 107]
[100 106]
[101 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
