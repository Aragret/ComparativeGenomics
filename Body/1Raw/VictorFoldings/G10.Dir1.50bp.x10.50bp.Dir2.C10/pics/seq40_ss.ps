%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUUAACCACUCACGGGAGCUCUCCAUGCAUUUGGUAUUUUCGUCUGGGGGGUAUGCACGCGAxxxxxxxxxxCAAGAACACCAAUGACCCCAAUACGCAAAACUAACCCCCUAAUAAAAUUAAUUAACCACUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[115.23780823 263.61175537]
[115.23780823 248.61175537]
[115.23780823 233.61175537]
[115.23780823 218.61175537]
[115.23780823 203.61175537]
[115.23780823 188.61175537]
[115.23780823 173.61175537]
[115.23780823 158.61175537]
[115.23780823 143.61175537]
[115.23780823 128.61175537]
[109.08208466 124.32723999]
[100.51287079 136.63856506]
[88.20168304 128.06915283]
[96.77062988 115.75821686]
[90.61490631 111.47370911]
[76.54862213 116.68328857]
[62.48234177 121.89286041]
[48.41606140 127.10243988]
[35.15602112 134.11466980]
[22.93203926 142.80801392]
[10.70805836 151.50137329]
[4.38221025 166.63133240]
[-11.91585827 168.44929504]
[-21.42008972 155.08509827]
[-14.35334778 140.28668213]
[2.01471114 139.27738953]
[14.23869228 130.58404541]
[26.46267319 121.89069366]
[11.46559620 122.18678284]
[-2.39787793 116.45929718]
[-12.81294346 105.66455841]
[-18.04058266 91.60498047]
[-17.20792770 76.62810516]
[-10.45401001 63.23465347]
[1.09345996 53.66094208]
[15.50638485 49.50551224]
[30.37821579 51.46219635]
[43.22578430 59.20429230]
[51.90391159 71.43907928]
[54.96359634 86.12371063]
[51.89396286 100.80626678]
[43.20648193 113.03616333]
[57.27276230 107.82658386]
[71.33904266 102.61700439]
[85.40532684 97.40742493]
[96.38139343 87.18362427]
[102.57488251 73.52198029]
[108.76837158 59.86032867]
[114.96186066 46.19867706]
[121.15534973 32.53702545]
[112.41507721 21.57507896]
[109.27801514 7.97870159]
[112.30310822 -5.57511950]
[120.84175873 -16.44306183]
[133.17587280 -22.53096390]
[146.86331177 -22.69724274]
[153.33241272 -36.23056412]
[159.80151367 -49.76388550]
[166.27061462 -63.29720688]
[172.73971558 -76.83052826]
[171.71060181 -92.61822510]
[184.18028259 -100.76415253]
[190.64938354 -114.29747772]
[181.18690491 -126.22319794]
[177.85424805 -141.01441956]
[181.26019287 -155.72563171]
[190.67698669 -167.45103455]
[204.19511414 -173.89848328]
[219.11027527 -173.83750916]
[225.57936096 -187.37083435]
[232.04846191 -200.90414429]
[219.81050110 -209.64505005]
[209.27642822 -220.37838745]
[200.76638794 -232.77799988]
[194.53895569 -246.46705627]
[190.78341675 -261.02957153]
[189.61386108 -276.02301025]
[191.06585693 -290.99172974]
[195.09526062 -305.48086548]
[201.57963562 -319.05010986]
[210.32191467 -331.28707886]
[221.05644226 -341.81991577]
[233.45701599 -350.32858276]
[247.14678955 -356.55444336]
[261.70971680 -360.30834961]
[276.70330811 -361.47619629]
[291.67187500 -360.02249146]
[306.16055298 -355.99145508]
[319.72903442 -349.50555420]
[331.96502686 -340.76187134]
[342.49664307 -330.02615356]
[351.00387573 -317.62460327]
[357.22821045 -303.93414307]
[360.98043823 -289.37075806]
[362.14660645 -274.37704468]
[360.69122314 -259.40866089]
[356.65853882 -244.92044067]
[350.17108154 -231.35267639]
[341.42602539 -219.11769104]
[330.68908691 -208.58728027]
[318.28659058 -200.08143616]
[304.59542847 -193.85867310]
[290.03161621 -190.10807800]
[275.03778076 -188.94363403]
[260.06954956 -190.40071106]
[245.58178711 -194.43505859]
[239.11268616 -180.90173340]
[232.64358521 -167.36840820]
[242.05786133 -155.79960632]
[245.52987671 -141.23065186]
[242.31889343 -126.53880310]
[233.00947571 -114.64952850]
[219.40589905 -107.95403290]
[204.18270874 -107.82837677]
[197.71360779 -94.29505920]
[199.20542908 -79.47534943]
[186.27302551 -70.36142731]
[179.80392456 -56.82810974]
[173.33483887 -43.29478836]
[166.86573792 -29.76146698]
[160.39663696 -16.22814560]
[169.85304260 -3.15851283]
[171.45408630 12.98791790]
[164.67062378 27.83056641]
[151.26113892 37.29482651]
[134.81700134 38.73051834]
[128.62350464 52.39216614]
[122.43002319 66.05381775]
[116.23653412 79.71546936]
[110.04303741 93.37711334]
[122.02808380 84.35720825]
[131.81994629 72.99413300]
[144.99688721 65.82697296]
[159.85676575 63.78153610]
[174.48007202 67.12205505]
[186.97781372 75.41700745]
[195.73561096 87.59490204]
[199.62216187 102.08264160]
[198.13542175 117.00878143]
[191.46745300 130.44522095]
[180.47956848 140.65632629]
[166.59114075 146.32304382]
[151.59622192 146.71339417]
[137.42919922 141.77549744]
[130.23780823 128.61175537]
[130.23780823 143.61175537]
[130.23780823 158.61175537]
[130.23780823 173.61175537]
[130.23780823 188.61175537]
[130.23780823 203.61175537]
[130.23780823 218.61175537]
[130.23780823 233.61175537]
[130.23780823 248.61175537]
[130.23780823 263.61175537]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[15 45]
[16 44]
[17 43]
[18 42]
[19 28]
[20 27]
[21 26]
[46 130]
[47 129]
[48 128]
[49 127]
[50 126]
[56 121]
[57 120]
[58 119]
[59 118]
[60 117]
[62 115]
[63 114]
[69 108]
[70 107]
[71 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
