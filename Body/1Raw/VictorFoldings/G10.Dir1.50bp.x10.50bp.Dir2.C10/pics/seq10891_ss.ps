%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCAGCCAUAGAAGGCCCCACCCCAGUCUCAGCCCUACUCCACUCAAGCACUAUAGUUGUxxxxxxxxxxUUAGGUCUCCACCCCUGACUCCCCUCAGCCAUAGAAGGCCCCACCCCAGUCUCAGCCCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-53.90579987 283.87695312]
[-63.88852692 295.07272339]
[-73.87125397 306.26849365]
[-83.85398102 317.46423340]
[-87.26319885 332.91375732]
[-101.50839233 337.26391602]
[-111.49111938 348.45968628]
[-121.47384644 359.65545654]
[-131.45657349 370.85122681]
[-134.86579895 386.30075073]
[-149.11099243 390.65087891]
[-159.09371948 401.84664917]
[-154.20057678 416.40524292]
[-157.25802612 431.45675659]
[-167.44361877 442.95236206]
[-182.01747131 447.79983521]
[-197.05932617 444.69525146]
[-208.52294922 434.47366333]
[-213.32473755 419.88467407]
[-210.17298889 404.85263062]
[-199.91552734 393.42111206]
[-185.31156921 388.66506958]
[-170.28947449 391.86392212]
[-160.30674744 380.66815186]
[-157.61155701 366.01943970]
[-142.65234375 360.86849976]
[-132.66961670 349.67272949]
[-122.68688965 338.47695923]
[-112.70416260 327.28118896]
[-110.00897217 312.63247681]
[-95.04974365 307.48153687]
[-85.06701660 296.28576660]
[-75.08428955 285.08999634]
[-65.10156250 273.89422607]
[-74.87718201 264.06005859]
[-84.06800842 253.67724609]
[-92.64330292 242.78054810]
[-100.57439423 231.40638733]
[-107.83476257 219.59280396]
[-114.40013123 207.37930298]
[-120.24853516 194.80671692]
[-125.36042023 181.91708374]
[-129.71870422 168.75354004]
[-133.30879211 155.36006165]
[-136.11869812 141.78146362]
[-138.13900757 128.06315613]
[-139.36297607 114.25100708]
[-139.78651428 100.39118958]
[-139.40820312 86.53007507]
[-138.22930908 72.71399689]
[-136.25376892 58.98916626]
[-133.48817444 45.40147781]
[-129.94180298 31.99636650]
[-125.62650299 18.81866074]
[-120.55670166 5.91242790]
[-114.74934387 -6.67917395]
[-108.22386932 -18.91403770]
[-101.00208282 -30.75125122]
[-93.10814667 -42.15122604]
[-84.56845093 -53.07584763]
[-75.41155243 -63.48857880]
[-65.66807556 -73.35459900]
[-55.37059784 -82.64092255]
[-44.55355835 -91.31648254]
[-33.25312805 -99.35227966]
[-21.50709534 -106.72144318]
[-9.35474205 -113.39931488]
[3.16329694 -119.36357880]
[16.00515938 -124.59429169]
[29.12790489 -129.07394409]
[42.48764420 -132.78758240]
[56.03971100 -135.72276306]
[69.73877716 -137.86968994]
[83.53903961 -139.22116089]
[97.39434814 -139.77267456]
[111.25837708 -139.52239990]
[125.08474731 -138.47114563]
[138.82723999 -136.62243652]
[152.43989563 -133.98245239]
[165.87718201 -130.56002808]
[179.09417725 -126.36660767]
[192.04667664 -121.41620636]
[204.69137573 -115.72539520]
[216.98597717 -109.31318665]
[224.71006775 -122.17158508]
[232.43414307 -135.02998352]
[232.17730713 -151.42712402]
[246.38624573 -159.61480713]
[260.44403076 -151.17024231]
[259.88922119 -134.78048706]
[245.29255676 -127.30590057]
[237.56846619 -114.44750214]
[229.84437561 -101.58909607]
[242.69889832 -92.70379639]
[254.94738770 -83.00009918]
[266.53781128 -72.51922607]
[277.42098999 -61.30567169]
[287.55065918 -49.40707397]
[296.88385010 -36.87395859]
[305.38085938 -23.75955200]
[313.00567627 -10.11955166]
[319.72583008 3.98811555]
[325.51287842 18.50353622]
[330.34216309 33.36506271]
[334.19320679 48.50958252]
[337.04968262 63.87277603]
[338.89941406 79.38939667]
[339.73455811 94.99355316]
[354.73376465 95.14958954]
[369.73294067 95.30562592]
[380.84710693 84.06949615]
[396.65139771 84.06680298]
[407.76940918 95.29915619]
[407.60501099 111.10258484]
[396.25573730 122.10121155]
[380.45492554 121.76972961]
[369.57690430 110.30481720]
[354.57772827 110.14878082]
[339.57852173 109.99274445]
[338.36013794 126.11850739]
[336.05755615 142.12547302]
[332.68130493 157.94084167]
[328.24670410 173.49266052]
[322.77392578 188.71020508]
[316.28790283 203.52426147]
[308.81808472 217.86744690]
[300.39846802 231.67451477]
[291.06738281 244.88265991]
[280.86721802 257.43182373]
[269.84439087 269.26492310]
[258.04904175 280.32812500]
[245.53479004 290.57110596]
[232.35861206 299.94729614]
[218.58039856 308.41406250]
[204.26283264 315.93283081]
[189.47102356 322.46945190]
[174.27227783 327.99420166]
[158.73570251 332.48193359]
[142.93196106 335.91223145]
[126.93296051 338.26947021]
[110.81144714 339.54296875]
[94.64076233 339.72692871]
[78.49445343 338.82052612]
[62.44596481 336.82781982]
[46.56828690 333.75796509]
[30.93363762 329.62484741]
[15.61313343 324.44729614]
[0.67645776 318.24884033]
[-13.80845070 311.05773926]
[-27.77570915 302.90661621]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 34]
[2 33]
[3 32]
[4 31]
[6 29]
[7 28]
[8 27]
[9 26]
[11 24]
[12 23]
[84 93]
[85 92]
[86 91]
[108 119]
[109 118]
[110 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
