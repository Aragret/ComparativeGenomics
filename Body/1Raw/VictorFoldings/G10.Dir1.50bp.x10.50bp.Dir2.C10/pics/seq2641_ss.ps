%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCCUCACUGUCAACCCAACACAGGCAUGCUCAUAAGGAAAGGUUAAAAAAAGUAAAAGGxxxxxxxxxxCCCCUGUCUUUAGAUUUACAGUCCAAUGCUUCACUCAGCCAUUUUACCUCACCCCCACUGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 271.49911499]
[92.50000000 256.49911499]
[92.50000000 241.49913025]
[92.50000000 226.49913025]
[92.50000000 211.49913025]
[92.50000000 196.49913025]
[92.50000000 181.49913025]
[92.50000000 166.49913025]
[92.50000000 151.49913025]
[92.50000000 136.49913025]
[82.44412231 132.86682129]
[73.83367920 126.52847290]
[67.37758636 118.00595856]
[53.05498886 122.46277618]
[38.73239136 126.91958618]
[24.71567917 132.26110840]
[11.05943775 138.46650696]
[-2.39652801 145.09500122]
[-15.63911343 152.14013672]
[-28.88169861 159.18527222]
[-42.12428665 166.23040771]
[-43.28963470 181.61369324]
[-52.60504913 193.91111755]
[-67.09800720 199.19862366]
[-82.14386749 195.78897095]
[-92.94154358 184.77017212]
[-96.04553986 169.65830994]
[-90.46537781 155.27548218]
[-77.98167419 146.21124268]
[-62.57792664 145.35792542]
[-49.16941833 152.98782349]
[-35.92683411 145.94268799]
[-22.68424797 138.89755249]
[-9.44166279 131.85241699]
[-8.06968498 128.53804016]
[-4.98826170 125.74401855]
[-0.46965152 124.28301239]
[4.85403013 124.81026459]
[18.51027107 118.60485840]
[5.06794071 111.94875336]
[0.08736777 97.79976654]
[6.39629316 84.19104004]
[20.41279984 78.84898376]
[34.17895889 84.80657196]
[39.87897873 98.68135834]
[34.27557755 112.59699249]
[48.59817505 108.14017487]
[62.92076874 103.68335724]
[69.06164551 79.23333740]
[89.36359406 64.28861237]
[114.53404236 65.68968201]
[123.04512787 53.33810806]
[131.55621338 40.98653412]
[140.06730652 28.63496208]
[140.98777771 21.98212242]
[144.61766052 17.50381470]
[149.19825745 15.95668507]
[158.21578979 3.96985245]
[167.23332214 -8.01698017]
[176.25083923 -20.00381279]
[167.73214722 -39.96692657]
[176.81448364 -62.45967484]
[201.48196411 -72.97304535]
[204.88494873 -87.58193970]
[208.28791809 -102.19083405]
[211.69090271 -116.79972839]
[215.09388733 -131.40861511]
[217.11621094 -146.27166748]
[217.74018860 -161.25868225]
[218.36416626 -176.24569702]
[204.87577820 -183.38894653]
[195.82940674 -195.68226624]
[193.02120972 -210.68482971]
[197.00878906 -225.41786194]
[207.00036621 -236.95610046]
[221.01214600 -243.00862122]
[236.26203918 -242.37370300]
[249.72221375 -235.17738342]
[258.72009277 -222.84854126]
[261.46917725 -207.83503723]
[257.42364502 -193.11782837]
[247.38668823 -181.61901855]
[233.35118103 -175.62171936]
[232.72720337 -160.63470459]
[232.10322571 -145.64768982]
[242.33767700 -156.61383057]
[256.83895874 -160.44949341]
[271.15686035 -155.97758484]
[280.89736938 -144.57044983]
[283.07125854 -129.72882080]
[277.01138306 -116.00737762]
[264.57742310 -107.61707306]
[249.58525085 -107.13278198]
[236.63574219 -114.70311737]
[229.70277405 -128.00564575]
[226.29978943 -113.39675140]
[222.89682007 -98.78785706]
[219.49383545 -84.17896271]
[216.09086609 -69.57006836]
[220.72334290 -63.67175293]
[230.71360779 -74.86078644]
[238.08998108 -87.92176056]
[253.04689026 -89.05798340]
[262.31161499 -77.26117706]
[257.66268921 -62.99977875]
[243.22612000 -58.92916870]
[229.98828125 -51.87511063]
[234.62075806 -45.97679138]
[249.61994934 -45.82075500]
[264.61914062 -45.66471863]
[275.73330688 -56.90084839]
[291.53759766 -56.90354156]
[302.65560913 -45.67119217]
[302.49121094 -29.86775780]
[291.14193726 -18.86913490]
[275.34112549 -19.20061302]
[264.46310425 -30.66552925]
[249.46391296 -30.82156563]
[234.46472168 -30.97760201]
[222.67803955 -13.47037125]
[204.81430054 -6.67101288]
[188.23768616 -10.98628330]
[179.22015381 1.00054979]
[170.20262146 12.98738194]
[161.18508911 24.97421455]
[152.41888428 37.14605331]
[143.90779114 49.49762344]
[135.39669800 61.84919739]
[126.88561249 74.20076752]
[131.02355957 79.36083221]
[134.18397522 85.17121887]
[136.26725769 91.44885254]
[137.20779419 97.99593353]
[136.97593689 104.60615540]
[135.57897949 111.07124329]
[133.06095886 117.18748474]
[129.50120544 122.76215363]
[125.01187897 127.61959839]
[119.73444366 131.60676575]
[113.83518982 134.59803772]
[107.50000000 136.49913025]
[107.50000000 151.49913025]
[107.50000000 166.49913025]
[107.50000000 181.49913025]
[107.50000000 196.49913025]
[107.50000000 211.49913025]
[107.50000000 226.49913025]
[107.50000000 241.49913025]
[107.50000000 256.49911499]
[107.50000000 271.49911499]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[13 48]
[14 47]
[15 46]
[16 39]
[17 38]
[18 34]
[19 33]
[20 32]
[21 31]
[51 129]
[52 128]
[53 127]
[54 126]
[57 125]
[58 124]
[59 123]
[60 122]
[63 99]
[64 98]
[65 97]
[66 96]
[67 95]
[68 85]
[69 84]
[70 83]
[108 119]
[109 118]
[110 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
