%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAUAGAAACCGUCUGAACUAUCCUGCCCGCCAUCAUCCUAGUCCUCAUCGCCCUCCCAUCxxxxxxxxxxUCCGUAUUACUCGCAUCAGGAGUAUCAAUCACCUGAGCUCACCAUAGUCUAAUAGAAAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[125.67355347 88.28892517]
[114.17174530 97.91745758]
[109.19456482 110.98341370]
[95.45677948 113.58435059]
[83.95497894 123.21287537]
[72.45317078 132.84140015]
[66.83796692 147.63261414]
[52.11227798 149.86941528]
[40.61047363 159.49794006]
[29.10866928 169.12646484]
[17.60686684 178.75498962]
[12.99629021 186.71705627]
[5.76416016 188.46116638]
[-5.93546343 197.84832764]
[-17.63508606 207.23548889]
[-14.14433765 222.09407043]
[-17.45456123 236.99391174]
[-26.90851021 248.97663879]
[-40.62909317 255.66307068]
[-55.89208221 255.72560120]
[-69.66699982 249.15184021]
[-79.21882629 237.24697876]
[-82.65103149 222.37477112]
[-79.28215790 207.48808289]
[-69.78109741 195.54267883]
[-56.03428650 188.91033936]
[-40.77117157 188.90791321]
[-27.02224922 195.53587341]
[-15.32262516 186.14871216]
[-3.62300158 176.76155090]
[7.97833967 167.25318909]
[19.48014259 157.62466431]
[30.98194695 147.99613953]
[42.48374939 138.36761475]
[47.27626801 124.26509094]
[62.82464600 121.33959961]
[74.32644653 111.71107483]
[85.82825470 102.08254242]
[90.80543518 89.01658630]
[104.54322052 86.41564941]
[116.04502106 76.78712463]
[107.93466187 65.60964203]
[100.58195496 53.92003250]
[94.01911926 41.76956558]
[88.27492523 29.21153641]
[83.37453461 16.30102730]
[79.33940887 3.09465837]
[76.18724060 -10.34965038]
[73.93181610 -23.97293663]
[72.58300018 -37.71545410]
[72.14669800 -51.51694107]
[72.62479401 -65.31687164]
[74.01516724 -79.05473328]
[76.31169891 -92.67027283]
[79.50429535 -106.10380554]
[83.57893372 -119.29641724]
[88.51772308 -132.19026184]
[94.29899597 -144.72880554]
[100.89736176 -156.85707092]
[108.28387451 -168.52189636]
[116.42612457 -179.67213440]
[125.28839111 -190.25889587]
[134.83178711 -200.23577881]
[145.01443481 -209.55903625]
[155.79170227 -218.18780518]
[167.11627197 -226.08427429]
[178.93849182 -233.21382141]
[191.20651245 -239.54521179]
[203.86651611 -245.05070496]
[216.86297607 -249.70616150]
[230.13890076 -253.49119568]
[243.63604736 -256.38922119]
[257.29522705 -258.38757324]
[271.05657959 -259.47750854]
[284.85971069 -259.65426636]
[298.64410400 -258.91708374]
[312.34930420 -257.26919556]
[325.91522217 -254.71791077]
[339.28237915 -251.27439880]
[352.39215088 -246.95378113]
[365.18704224 -241.77503967]
[377.61099243 -235.76091003]
[389.60949707 -228.93777466]
[401.12997437 -221.33557129]
[412.12191772 -212.98765564]
[422.53710938 -203.93066406]
[432.32992554 -194.20433044]
[441.45739746 -183.85131836]
[449.87954712 -172.91703796]
[457.55944824 -161.44944763]
[464.46347046 -149.49887085]
[470.56130981 -137.11772156]
[475.82629395 -124.36027527]
[490.05307007 -129.11408997]
[497.25662231 -134.83776855]
[504.62551880 -133.81547546]
[518.94812012 -138.27229309]
[533.27069092 -142.72911072]
[547.59332275 -147.18591309]
[561.91589355 -151.64273071]
[564.61804199 -166.70782471]
[574.02093506 -178.78442383]
[587.96386719 -185.09741211]
[603.24279785 -184.19610596]
[616.34680176 -176.28764343]
[624.26464844 -163.18930054]
[625.17687988 -147.91101074]
[618.87384033 -133.96357727]
[606.80401611 -124.55205536]
[591.74084473 -121.83911896]
[577.14581299 -126.44818878]
[566.37274170 -137.32014465]
[552.05010986 -132.86332703]
[537.72753906 -128.40650940]
[523.40490723 -123.94969177]
[509.08233643 -119.49287415]
[494.80688477 -114.88731384]
[480.58010864 -110.13349915]
[484.61972046 -94.11897278]
[487.37857056 -77.83454895]
[488.83932495 -61.38248825]
[488.99270630 -44.86610413]
[487.83773804 -28.38912010]
[485.38159180 -12.05502510]
[481.63967896 4.03359604]
[476.63540649 19.77569008]
[470.40020752 35.07238007]
[462.97317505 49.82757568]
[454.40087891 63.94859695]
[444.73715210 77.34672546]
[434.04260254 89.93779755]
[422.38439941 101.64270020]
[409.83572388 112.38788605]
[396.47531128 122.10584259]
[382.38705444 130.73550415]
[367.65942383 138.22261047]
[352.38488770 144.52012634]
[336.65933228 149.58842468]
[320.58151245 153.39564514]
[304.25241089 155.91783142]
[287.77453613 157.13908386]
[271.25137329 157.05169678]
[254.78669739 155.65615845]
[238.48393250 152.96118164]
[222.44544983 148.98365784]
[206.77200317 143.74848938]
[191.56202698 137.28854370]
[176.91107178 129.64431763]
[162.91117859 120.86378479]
[149.65026855 111.00204468]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 41]
[2 40]
[4 38]
[5 37]
[6 36]
[8 34]
[9 33]
[10 32]
[11 31]
[13 30]
[14 29]
[15 28]
[93 118]
[94 117]
[96 116]
[97 115]
[98 114]
[99 113]
[100 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
