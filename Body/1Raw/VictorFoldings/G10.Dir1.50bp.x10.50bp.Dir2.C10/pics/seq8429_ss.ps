%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAUUGCCACAACUAACCUCCUCGGACUCCUGCCUCACUCAUUUACACCAACCACCCAACUxxxxxxxxxxGCUACUCUCAUAACCCUCAACACCCACUCCCUCUUAGCCAAUAUUGUGCCUAUUGCCAUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 242.69361877]
[92.50000000 227.69361877]
[92.50000000 212.69361877]
[92.50000000 197.69361877]
[92.50000000 182.69361877]
[92.50000000 167.69361877]
[92.50000000 152.69361877]
[92.50000000 137.69361877]
[92.50000000 122.69362640]
[92.50000000 107.69362640]
[89.86113739 92.92756653]
[84.66571808 78.85604858]
[79.47030640 64.78453064]
[74.27488708 50.71300888]
[69.07947540 36.64149094]
[54.71814728 40.98750687]
[40.12261581 44.46687698]
[25.34512901 47.06713867]
[10.43858528 48.77899170]
[-4.54365492 49.59630585]
[-19.54795837 49.51615143]
[-34.52061081 48.53882217]
[-49.40801620 46.66780853]
[-64.15688324 43.90981674]
[-78.71440887 40.27471161]
[-93.02848053 35.77551270]
[-107.04785919 30.42832184]
[-120.72236633 24.25228119]
[-134.00303650 17.26950264]
[-146.84234619 9.50497913]
[-159.19430542 0.98650819]
[-171.01473999 -8.25541687]
[-182.26129150 -18.18771362]
[-192.89372253 -28.77482414]
[-202.87396240 -39.97885132]
[-212.16630554 -51.75968552]
[-220.73745728 -64.07515717]
[-228.55674744 -76.88117218]
[-235.59619141 -90.13189697]
[-241.83059692 -103.77989960]
[-247.23762512 -117.77630615]
[-251.79792786 -132.07102966]
[-255.49517822 -146.61289978]
[-258.31616211 -161.34985352]
[-260.25073242 -176.22912598]
[-261.29202271 -191.19746399]
[-261.43624878 -206.20129395]
[-260.68295288 -221.18688965]
[-259.03479004 -236.10060120]
[-256.49768066 -250.88906860]
[-253.08068848 -265.49932861]
[-248.79605103 -279.87908936]
[-243.65911865 -293.97686768]
[-237.68827820 -307.74218750]
[-230.90489197 -321.12582397]
[-223.33323669 -334.07980347]
[-215.00044250 -346.55780029]
[-205.93632507 -358.51510620]
[-196.17333984 -369.90893555]
[-185.74641418 -380.69851685]
[-174.69290161 -390.84518433]
[-163.05235291 -400.31265259]
[-150.86643982 -409.06704712]
[-138.17878723 -417.07696533]
[-125.03481293 -424.31381226]
[-111.48158264 -430.75158691]
[-97.56759644 -436.36734009]
[-83.34266663 -441.14089966]
[-68.85771942 -445.05523682]
[-54.16460800 -448.09628296]
[-39.31592560 -450.25314331]
[-24.36483002 -451.51815796]
[-9.36484241 -451.88677979]
[5.63034201 -451.35766602]
[20.56704330 -449.93273926]
[35.39179230 -447.61706543]
[50.05152130 -444.41894531]
[64.49374390 -440.34982300]
[78.66677094 -435.42431641]
[92.51986694 -429.66000366]
[106.00343323 -423.07751465]
[119.06919861 -415.70043945]
[131.67041016 -407.55517578]
[143.76193237 -398.67089844]
[155.30049133 -389.07940674]
[166.24479675 -378.81500244]
[176.55564880 -367.91445923]
[186.19615173 -356.41680908]
[195.13179016 -344.36315918]
[203.33056641 -331.79672241]
[210.76315308 -318.76245117]
[217.40292358 -305.30700684]
[223.22612000 -291.47857666]
[228.21188354 -277.32659912]
[232.34237671 -262.90182495]
[235.60281372 -248.25582886]
[237.98153687 -233.44107056]
[239.47000122 -218.51055908]
[240.06289673 -203.51776123]
[239.75808716 -188.51634216]
[238.55668640 -173.55999756]
[236.46296692 -158.70228577]
[233.48445129 -143.99636841]
[229.63179016 -129.49490356]
[224.91876221 -115.24980164]
[219.36225891 -101.31204987]
[212.98216248 -87.73155212]
[205.80131531 -74.55692291]
[197.84542847 -61.83531570]
[189.14295959 -49.61227798]
[179.72508240 -37.93156052]
[169.62550354 -26.83498192]
[158.88038635 -16.36226273]
[147.52818298 -6.55089331]
[135.60954285 2.56400418]
[123.16711426 10.94980049]
[110.24545288 18.57647705]
[96.89080811 25.41673088]
[83.15099335 31.44607544]
[88.34640503 45.51759338]
[93.54182434 59.58911514]
[98.73723602 73.66063690]
[103.93265533 87.73215485]
[106.99595642 73.04827881]
[114.58233643 60.10815048]
[125.89946747 50.26322937]
[139.76541138 44.54171371]
[154.73199463 43.54115295]
[169.23614502 47.36605072]
[181.76303101 55.61692810]
[191.00436401 67.43207550]
[195.99499512 81.57752228]
[196.21368408 96.57592773]
[191.63761902 110.86086273]
[182.74468994 122.94042969]
[170.46368408 131.55303955]
[156.07722473 135.79917908]
[141.08781433 135.23541260]
[127.06095886 129.92060852]
[115.46160126 120.40983582]
[107.50000000 107.69362640]
[107.50000000 122.69362640]
[107.50000000 137.69361877]
[107.50000000 152.69361877]
[107.50000000 167.69361877]
[107.50000000 182.69361877]
[107.50000000 197.69361877]
[107.50000000 212.69361877]
[107.50000000 227.69361877]
[107.50000000 242.69361877]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 123]
[12 122]
[13 121]
[14 120]
[15 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
