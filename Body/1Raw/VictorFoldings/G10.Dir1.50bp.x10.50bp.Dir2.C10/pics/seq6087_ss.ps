%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCAAUGGGACUUAAACCCACAAACACUUAGUUAACAGCUAAGCACCCUAAUCAACUGGCUUxxxxxxxxxxCAUAACAGACGAGGUCAACGAUCCCUCCCUUACCAUCAAAUCAAUUGGCCACCAAUGGUACUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[113.97842407 290.60189819]
[113.97842407 275.60189819]
[113.97842407 260.60189819]
[113.97842407 245.60188293]
[113.97842407 230.60188293]
[113.97842407 215.60188293]
[113.97842407 200.60188293]
[113.97842407 185.60188293]
[113.97842407 170.60188293]
[113.97842407 155.60188293]
[107.27870941 152.23086548]
[105.00710297 167.05786133]
[90.20380402 169.47904968]
[83.32680511 156.14837646]
[93.87927246 145.48881531]
[87.17955780 142.11778259]
[75.13427734 151.05709839]
[63.08899307 159.99639893]
[51.04371262 168.93569946]
[50.29170227 184.55519104]
[39.63771439 196.00187683]
[24.11223602 197.87098694]
[11.04592419 189.27996826]
[6.60828972 174.28526306]
[12.89464951 159.96688843]
[26.93677711 153.08555603]
[42.10440826 156.89042664]
[54.14968872 147.95111084]
[66.19496918 139.01181030]
[78.24025726 130.07250977]
[76.80504608 122.71111298]
[62.08224869 125.58153534]
[47.35940933 128.45173645]
[44.48944092 113.72885132]
[59.21182251 110.85874176]
[73.93461609 107.98831940]
[72.49940491 100.62692261]
[57.97824860 96.86713409]
[43.45709229 93.10734558]
[28.93593597 89.34755707]
[14.41477871 85.58776855]
[-0.10637779 81.82798004]
[-14.60561752 88.69467926]
[-28.95040894 81.51091766]
[-32.13665771 65.78745270]
[-21.72014236 53.58598328]
[-5.69152641 54.26643372]
[3.65341020 67.30682373]
[18.17456627 71.06661224]
[32.69572449 74.82640076]
[47.21688080 78.58618927]
[61.73803711 82.34597778]
[76.25919342 86.10576630]
[82.23622894 81.57530975]
[71.29525757 71.31397247]
[58.32230759 63.78385162]
[57.40320587 48.81203842]
[69.35768127 39.75165558]
[83.52371979 44.68352127]
[87.26718903 59.20761108]
[94.19030762 72.51439667]
[100.16734314 67.98394012]
[100.47134399 52.98701859]
[89.80466461 41.63537979]
[90.32660675 26.43070412]
[101.21439362 16.33160973]
[101.51839447 1.33469069]
[101.82240295 -13.66222858]
[87.46633148 -18.39453888]
[75.14390564 -27.14948845]
[65.95081329 -39.14859390]
[60.70450592 -53.32489777]
[59.87147522 -68.41786194]
[63.52580261 -83.08541870]
[71.34253693 -96.02334595]
[82.62663269 -106.08121490]
[96.37470245 -112.36468506]
[111.36428833 -114.31502533]
[126.26251221 -111.75881958]
[139.74464417 -104.92337036]
[150.61187744 -94.41647339]
[157.89787292 -81.17239380]
[160.95478821 -66.36878967]
[159.51078796 -51.32198715]
[153.69429016 -37.36993408]
[144.02247620 -25.75324249]
[131.35537720 -17.50485992]
[116.81932068 -13.35822392]
[116.51531219 1.63869488]
[116.21131134 16.63561440]
[126.68087769 27.16764450]
[126.58621216 42.38098526]
[115.46826172 53.29102325]
[115.16426086 68.28794098]
[126.24337006 78.39998627]
[141.15026855 76.73130798]
[156.05715942 75.06262970]
[170.96405029 73.39395142]
[185.87094116 71.72527313]
[200.77784729 70.05659485]
[215.30732727 58.78831482]
[231.10687256 66.36869812]
[245.97689819 64.39824677]
[260.84689331 62.42779160]
[263.81878662 47.58034515]
[271.45272827 34.50359344]
[282.92071533 24.61600494]
[296.97872925 18.99011612]
[312.10189819 18.23617554]
[326.64974976 22.43596840]
[339.04428101 31.13393402]
[347.94100952 43.38657761]
[352.37484741 57.86482620]
[351.86486816 72.99819183]
[346.46643066 87.14511108]
[336.76504517 98.77104187]
[323.81311035 106.61488342]
[309.01553345 109.82579041]
[293.97741699 108.05548096]
[280.33001709 101.49597931]
[269.55368042 90.85880280]
[262.81735229 77.29780579]
[247.94734192 79.26825714]
[233.07733154 81.23870850]
[225.44389343 90.66997528]
[213.02941895 92.40372467]
[202.44651794 84.96349335]
[187.53962708 86.63217163]
[172.63273621 88.30084991]
[157.72583008 89.96952057]
[142.81893921 91.63819885]
[127.91204071 93.30687714]
[141.79408264 98.98921967]
[155.67611694 104.67156982]
[170.37046814 107.68421936]
[182.88540649 115.95323181]
[191.41992188 128.28862000]
[194.74584961 142.91525269]
[192.38456726 157.72822571]
[184.67587280 170.59585571]
[172.72909546 179.66641235]
[158.26348877 183.63453674]
[143.36119080 181.92936707]
[136.16979980 168.76562500]
[128.97842407 155.60188293]
[128.97842407 170.60188293]
[128.97842407 185.60188293]
[128.97842407 200.60188293]
[128.97842407 215.60188293]
[128.97842407 230.60188293]
[128.97842407 245.60188293]
[128.97842407 260.60189819]
[128.97842407 275.60189819]
[128.97842407 290.60189819]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[16 30]
[17 29]
[18 28]
[19 27]
[37 53]
[38 52]
[39 51]
[40 50]
[41 49]
[42 48]
[62 94]
[63 93]
[66 90]
[67 89]
[68 88]
[95 132]
[96 131]
[97 130]
[98 129]
[99 128]
[100 127]
[102 124]
[103 123]
[104 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
