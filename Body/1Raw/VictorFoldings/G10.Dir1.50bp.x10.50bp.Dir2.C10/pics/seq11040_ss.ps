%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCUCACCAUUGGCAGCCUAGCAUUAGCAGGAAUACCUUUCCUCACAGGUUUCUACUCCAxxxxxxxxxxUAAAUACUUGACCACCUGUAGUACAUAAAAACCCAAUCCACAUCAAAACCCCCUCCCCAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[65.67277527 290.54171753]
[65.36071777 275.54495239]
[65.04866028 260.54821777]
[64.73661041 245.55145264]
[64.42455292 230.55470276]
[64.11249542 215.55795288]
[63.80043793 200.56120300]
[63.48838425 185.56443787]
[63.17632675 170.56768799]
[49.05152512 165.51893616]
[39.30387115 176.91995239]
[29.55621910 188.32096863]
[34.09887314 203.06437683]
[29.92751122 217.91709900]
[18.37319565 228.13967896]
[3.12286949 230.47015381]
[-10.95714474 224.16485596]
[-19.37396622 211.23579407]
[-19.44181633 195.80857849]
[-11.13904476 182.80598450]
[2.88496327 176.37709045]
[18.15519905 178.57331848]
[27.90285110 167.17230225]
[37.65050125 155.77128601]
[34.05924988 149.18699646]
[20.89066505 156.36949158]
[7.72197199 163.55180359]
[0.53987014 150.38299561]
[13.70815659 143.20091248]
[26.87673950 136.01840210]
[23.28548431 129.43411255]
[8.42243767 131.45645142]
[-4.20617771 141.91828918]
[-19.48446846 135.95960999]
[-21.69544029 119.71018982]
[-8.56463242 109.88603973]
[6.40010357 116.59339905]
[21.26315117 114.57106781]
[22.82073212 99.65215302]
[8.69592857 94.60340118]
[-5.42887449 89.55464172]
[-19.55367851 84.50588989]
[-33.67848206 79.45713043]
[-48.73583221 84.99388885]
[-62.37747192 76.55083466]
[-64.13870239 60.60474777]
[-52.66845322 49.38810730]
[-36.76572418 51.50535965]
[-28.62972450 65.33232880]
[-14.50492096 70.38108063]
[-0.38011834 75.42984009]
[13.74468422 80.47859955]
[27.86948776 85.52735138]
[42.36710358 60.65671539]
[64.34077454 44.46875000]
[89.48397064 38.68730545]
[113.38191223 43.13199997]
[132.27957153 55.92093658]
[142.71939087 45.15012741]
[153.15921021 34.37931824]
[163.59901428 23.60851097]
[174.03883362 12.83770180]
[164.31779480 1.39842570]
[155.74620056 -10.92567253]
[148.40409851 -24.01952362]
[142.36001587 -37.76087189]
[137.67041016 -52.02141190]
[134.37904358 -66.66799927]
[132.51666260 -81.56387329]
[132.10064697 -96.56995392]
[133.13488770 -111.54612732]
[135.60972595 -126.35256958]
[139.50205994 -140.85102844]
[144.77554321 -154.90612793]
[151.38093567 -168.38664246]
[159.25656128 -181.16670227]
[168.32890320 -193.12698364]
[178.51322937 -204.15580750]
[189.71444702 -214.15020752]
[201.82798767 -223.01686096]
[214.74075317 -230.67298889]
[228.33215332 -237.04708862]
[242.47531128 -242.07965088]
[257.03814697 -245.72370911]
[271.88473511 -247.94520569]
[286.87637329 -248.72341919]
[301.87316895 -248.05107117]
[316.73504639 -245.93444824]
[331.32324219 -242.39331055]
[345.50158691 -237.46073914]
[359.13766479 -231.18275452]
[372.10415649 -223.61799622]
[384.27999878 -214.83708191]
[395.55151367 -204.92202759]
[405.81344604 -193.96537781]
[414.97000122 -182.06944275]
[422.93566895 -169.34530640]
[429.63607788 -155.91177368]
[435.00866699 -141.89425659]
[439.00326538 -127.42363739]
[441.58258057 -112.63504028]
[442.72253418 -97.66654205]
[442.41250610 -82.65789795]
[440.65533447 -67.74924469]
[437.46746826 -53.07978439]
[432.87866211 -38.78648758]
[426.93173218 -25.00280952]
[419.68225098 -11.85744572]
[411.19790649 0.52686518]
[401.55789185 12.03449154]
[390.85220337 22.55798721]
[379.18081665 31.99909401]
[366.65274048 40.26966095]
[353.38488770 47.29246902]
[339.50115967 53.00194168]
[325.13122559 57.34477234]
[310.40921021 60.28041077]
[295.47259521 61.78145218]
[280.46084595 61.83387375]
[265.51412964 60.43719101]
[250.77197266 57.60444260]
[236.37203979 53.36207962]
[222.44879150 47.74971390]
[209.13221741 40.81974411]
[196.54666138 32.63687515]
[184.80963135 23.27751350]
[174.36982727 34.04832077]
[163.93000793 44.81912994]
[153.49020386 55.58993912]
[143.05038452 66.36074829]
[151.15930176 76.36313629]
[156.89236450 88.32953644]
[159.77455139 101.68354034]
[159.47326660 115.73461151]
[155.82543945 129.71379089]
[148.85563660 142.81568909]
[138.78364563 154.24459839]
[126.02075195 163.26203918]
[111.15438080 169.23284912]
[94.92166901 171.66719055]
[78.17308044 170.25563049]
[78.48513794 185.25238037]
[78.79719543 200.24914551]
[79.10924530 215.24589539]
[79.42130280 230.24264526]
[79.73336029 245.23939514]
[80.04541779 260.23614502]
[80.35747528 275.23291016]
[80.66953278 290.22967529]
[83.26052856 309.43737793]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 24]
[11 23]
[12 22]
[31 38]
[32 37]
[39 53]
[40 52]
[41 51]
[42 50]
[43 49]
[58 130]
[59 129]
[60 128]
[61 127]
[62 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
