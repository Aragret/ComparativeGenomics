%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAACCUGGCGCAAUAGAUAUAGUACCGCAAGGGAAAGAUGAAAAAUUAUAACCAAGCAUAxxxxxxxxxxGAAGCCUUCGCUUCGAAGCGAAAAGUCCUAAUAGUAGAAGAACCCUCCAUAAACCUGGAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 250.46896362]
[92.50000000 235.46896362]
[92.50000000 220.46896362]
[92.50000000 205.46896362]
[92.50000000 190.46896362]
[92.50000000 175.46896362]
[92.50000000 160.46896362]
[92.50000000 145.46896362]
[92.50000000 130.46896362]
[92.50000000 115.46895599]
[86.23702240 111.34281158]
[79.04563904 124.50655365]
[74.04553986 138.64865112]
[59.04915237 138.97781372]
[53.43336487 125.06871033]
[64.45406342 114.89340973]
[73.71105957 103.09052277]
[67.44807434 98.96437836]
[53.66569519 104.88434601]
[39.88331223 110.80430603]
[40.46047592 125.97109222]
[35.51609039 140.32092285]
[25.71884537 151.91308594]
[12.39373970 159.17985535]
[-2.65711808 161.13845825]
[-17.39822197 157.52400208]
[-29.83595848 148.82531738]
[-38.28822708 136.21882629]
[-41.61192703 121.40946198]
[-39.35755539 106.40005493]
[-31.82999611 93.22051239]
[-20.04729271 83.65325928]
[-5.60295630 78.99218750]
[9.54953480 79.86766815]
[23.36092949 86.16130066]
[33.96334839 97.02192688]
[47.74573135 91.10195923]
[61.52811432 85.18199921]
[82.07353210 80.44707489]
[96.72119141 88.63675690]
[101.32675934 74.36129761]
[105.93232727 60.08583450]
[110.53788757 45.81037521]
[98.23294830 38.07504654]
[88.15306854 27.61715698]
[80.88527679 15.05230808]
[76.85124969 1.11861205]
[76.28287506 -13.36666584]
[79.20886993 -27.55504799]
[85.45343018 -40.61654282]
[94.64674377 -51.78819275]
[106.24691010 -60.41864777]
[119.57186890 -66.00614166]
[133.83952332 -68.22764587]
[148.21359253 -66.95757294]
[153.11514282 -81.13412476]
[158.01670837 -95.31068420]
[162.91825867 -109.48724365]
[156.25973511 -123.56921387]
[161.43255615 -137.87643433]
[174.89860535 -144.13752747]
[179.80015564 -158.31408691]
[170.43214417 -170.26524353]
[168.88235474 -185.22615051]
[175.47410583 -198.58511353]
[188.04473877 -206.30625916]
[188.04473877 -221.30625916]
[173.79206848 -226.46739197]
[162.16613770 -236.19433594]
[154.57084656 -249.31254578]
[151.92333984 -264.23791504]
[154.54333496 -279.16812134]
[162.11444092 -292.30029297]
[173.72242737 -302.04864502]
[187.96556091 -307.23605347]
[203.12391663 -307.23605347]
[217.36705017 -302.04864502]
[228.97503662 -292.30029297]
[236.54615784 -279.16812134]
[239.16615295 -264.23791504]
[236.51864624 -249.31254578]
[228.92333984 -236.19433594]
[217.29740906 -226.46739197]
[203.04473877 -221.30625916]
[203.04473877 -206.30625916]
[205.74584961 -205.34721375]
[208.32751465 -204.10195923]
[218.98913574 -214.65324402]
[229.65077209 -225.20452881]
[240.31239319 -235.75582886]
[250.97401428 -246.30711365]
[261.63565063 -256.85839844]
[265.43811035 -272.81063843]
[281.22952271 -277.23373413]
[292.76498413 -265.57763672]
[288.17785645 -249.83311462]
[272.18692017 -246.19677734]
[261.52529907 -235.64549255]
[250.86367798 -225.09420776]
[240.20205688 -214.54290771]
[229.54043579 -203.99162292]
[218.87879944 -193.44032288]
[221.77114868 -175.20466614]
[211.99638367 -159.25820923]
[193.97671509 -153.41253662]
[189.07516479 -139.23597717]
[195.79818726 -125.99450684]
[191.02926636 -111.54763794]
[177.09480286 -104.58569336]
[172.19325256 -90.40913391]
[167.29170227 -76.23257446]
[162.39015198 -62.05601883]
[175.30731201 -53.46818542]
[185.57987976 -41.83104324]
[192.50846863 -27.92821693]
[195.61912537 -12.69788551]
[194.69575500 2.83054805]
[189.79512024 17.60601807]
[181.24337769 30.62694359]
[169.61437988 41.00912476]
[155.69117737 48.04577255]
[140.41331482 51.25564957]
[124.81334686 50.41593933]
[120.20778656 64.69139862]
[115.60221863 78.96685791]
[110.99665833 93.24232483]
[119.88136292 81.15670776]
[132.61924744 73.23545074]
[147.38800049 70.61176300]
[162.07479858 73.66100311]
[174.57853699 81.94693756]
[183.11039734 94.28416443]
[186.44981384 108.90772247]
[184.11904907 123.72553253]
[176.45152283 136.61775208]
[164.54418945 145.73999023]
[150.10050964 149.78721619]
[135.18681335 148.18043518]
[121.93668365 141.14950562]
[112.24568176 129.70028687]
[107.50000000 115.46895599]
[107.50000000 130.46896362]
[107.50000000 145.46896362]
[107.50000000 160.46896362]
[107.50000000 175.46896362]
[107.50000000 190.46896362]
[107.50000000 205.46896362]
[107.50000000 220.46896362]
[107.50000000 235.46896362]
[107.50000000 250.46896362]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[18 38]
[19 37]
[20 36]
[40 126]
[41 125]
[42 124]
[43 123]
[55 112]
[56 111]
[57 110]
[58 109]
[61 106]
[62 105]
[66 85]
[67 84]
[87 102]
[88 101]
[89 100]
[90 99]
[91 98]
[92 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
