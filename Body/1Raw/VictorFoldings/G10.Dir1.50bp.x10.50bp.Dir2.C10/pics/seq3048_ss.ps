%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCGGAGUAAUCCAGGUCGGUUUCUAUCUACXUUCAAAUUCCUCCCUGUACGAAAGGACAAGxxxxxxxxxxUUCUGAUUUUUCGGUCACCCUGAAGUUUAUAUUCUUAUCCUACCAGGCUUCGGAAUAAUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[103.77689362 269.41036987]
[103.77689362 254.41036987]
[103.77689362 239.41036987]
[103.77689362 224.41036987]
[103.77689362 209.41036987]
[103.77689362 194.41036987]
[103.77689362 179.41036987]
[103.77689362 164.41036987]
[103.77689362 149.41036987]
[103.77689362 134.41036987]
[85.79403687 127.27548218]
[76.41680908 112.91800690]
[61.77330399 116.16883087]
[47.12980270 119.41965485]
[32.48630142 122.67048645]
[20.69095421 133.21469116]
[6.58932400 128.41955566]
[-8.05417728 131.67037964]
[-22.69767952 134.92120361]
[-36.54089737 140.69747925]
[-49.15202332 148.81903076]
[-53.93902969 164.13124084]
[-68.94678497 169.80107117]
[-82.66262054 161.47909546]
[-84.56492615 145.54922485]
[-73.19441223 134.23149109]
[-57.27356720 136.20790100]
[-44.66243744 128.08634949]
[-59.66121292 128.27816772]
[-73.93792725 123.67650604]
[-86.00154114 114.76194763]
[-94.59212494 102.46553040]
[-98.81249237 88.07148743]
[-98.22186279 73.08311462]
[-92.88192749 59.06580353]
[-83.35038757 47.48350143]
[-70.62270355 39.54586029]
[-56.02815628 36.08188629]
[-41.09098434 37.45335007]
[-27.37121964 43.51701736]
[-16.30174637 53.63960266]
[-9.03865433 66.76391602]
[-6.34049416 81.51924896]
[-8.48906231 96.36457062]
[-15.25996208 109.74945068]
[-25.94850349 120.27770996]
[-11.30500317 117.02687836]
[3.33849835 113.77605438]
[14.08644581 103.46437073]
[29.23547554 108.02698517]
[43.87897873 104.77615356]
[58.52248001 101.52532959]
[73.16597748 98.27450562]
[79.20309448 82.95503998]
[93.03882599 74.02724457]
[93.35088348 59.03049088]
[82.69029236 47.67313004]
[83.22039795 32.46873474]
[94.11360931 22.37548637]
[94.42566681 7.37873316]
[94.73771667 -7.61802053]
[95.04977417 -22.61477470]
[95.36183167 -37.61152649]
[80.77188873 -41.38384247]
[67.44546509 -48.41968155]
[56.10122299 -58.33961105]
[47.35095215 -70.60865784]
[41.66654587 -84.56517029]
[39.35454941 -99.45648956]
[40.53964996 -114.47954559]
[45.15793610 -128.82415771]
[52.96035004 -141.71676636]
[63.52611923 -152.46205139]
[76.28543854 -160.48056030]
[90.55022430 -165.33984375]
[105.55117798 -166.77787781]
[120.47933960 -164.71707153]
[134.52963257 -159.26860046]
[146.94435120 -150.72627258]
[157.05398560 -139.55075073]
[164.31333923 -126.34474945]
[168.33090210 -111.82043457]
[168.89004517 -96.76107788]
[165.96060181 -81.97882843]
[159.70053101 -68.27085876]
[150.44746399 -56.37643051]
[138.70039368 -46.93699265]
[125.09281921 -40.46160126]
[110.35858917 -37.29947281]
[110.04653168 -22.30271721]
[109.73447418 -7.30596447]
[109.42241669 7.69078922]
[109.11035919 22.68754387]
[119.57427216 33.22519302]
[119.47144318 48.43848038]
[108.34763336 59.34254837]
[108.03557587 74.33930206]
[125.65290070 83.03858185]
[134.44779968 103.41873932]
[149.44697571 103.26270294]
[164.44616699 103.10666656]
[179.44535828 102.95063019]
[194.39344788 101.70375061]
[209.21119690 99.37265015]
[224.02896118 97.04154968]
[230.96775818 83.16232300]
[244.75483704 76.04221344]
[260.08880615 78.41904449]
[271.07342529 89.37887573]
[273.48486328 104.70742798]
[266.39593506 118.51055908]
[252.53240967 125.48069000]
[237.22514343 122.93765259]
[226.36006165 111.85930634]
[211.54231262 114.19040680]
[196.72454834 116.52151489]
[208.61335754 125.66789246]
[212.01229858 140.27772522]
[205.38162231 153.73260498]
[191.72508240 159.93736267]
[177.22923279 156.08116150]
[168.46083069 143.91090393]
[169.39204407 128.93983459]
[179.60139465 117.94981384]
[164.60220337 118.10585022]
[149.60301208 118.26188660]
[134.60383606 118.41792297]
[147.84165955 125.47198486]
[161.07949829 132.52604675]
[175.91204834 134.76106262]
[187.95455933 143.70411682]
[194.38197327 157.25727844]
[193.68650818 172.24114990]
[186.03132629 185.14068604]
[173.21223450 192.92982483]
[158.23641968 193.78132629]
[144.61703491 187.49543762]
[135.54902649 175.54675293]
[133.15965271 160.73783875]
[125.96827698 147.57411194]
[118.77689362 134.41036987]
[118.77689362 149.41036987]
[118.77689362 164.41036987]
[118.77689362 179.41036987]
[118.77689362 194.41036987]
[118.77689362 209.41036987]
[118.77689362 224.41036987]
[118.77689362 239.41036987]
[118.77689362 254.41036987]
[118.77689362 269.41036987]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 53]
[13 52]
[14 51]
[15 50]
[17 48]
[18 47]
[19 46]
[20 28]
[21 27]
[55 97]
[56 96]
[59 93]
[60 92]
[61 91]
[62 90]
[63 89]
[99 127]
[100 126]
[101 125]
[102 124]
[103 116]
[104 115]
[105 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
