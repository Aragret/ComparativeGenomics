%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCACCACCCCAUCAUACUCUUUCACCCACAGCACCAAUCCUACCUCCAUCGCUAACCCCxxxxxxxxxxAAAUCCCUUCUCGUCCCCAUGGAUGACCCCCCUCAGAUAGGGGUCCCUUGACCACCAUCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[37.86069489 297.13952637]
[26.24829102 293.09576416]
[14.89688778 288.36865234]
[3.84665418 282.97494507]
[-3.60825634 295.99124146]
[-11.06316662 309.00753784]
[-18.51807594 322.02386475]
[-18.66260719 337.84442139]
[-31.70205879 345.04315186]
[-39.15696716 358.05947876]
[-38.55905151 374.44772339]
[-52.59458160 382.92919922]
[-66.82500458 374.77893066]
[-66.61128998 358.38119507]
[-52.17327881 350.60455322]
[-44.71836853 337.58825684]
[-45.10706329 322.69869995]
[-31.53438568 314.56893921]
[-24.07947540 301.55264282]
[-16.62456512 288.53631592]
[-9.16965580 275.52001953]
[-17.81992531 269.83450317]
[-26.17471123 263.72305298]
[-34.21305847 257.20098877]
[-41.91481018 250.28465271]
[-49.26064682 242.99143982]
[-56.23214340 235.33959961]
[-62.81182480 227.34834290]
[-68.98318481 219.03770447]
[-74.73073578 210.42852783]
[-80.04008484 201.54240417]
[-84.89789581 192.40161133]
[-89.29199982 183.02909851]
[-93.21137238 173.44833374]
[-96.64617920 163.68338013]
[-99.58780670 153.75869751]
[-102.02888489 143.69920349]
[-103.96328735 133.53010559]
[-105.38616180 123.27692413]
[-106.29394531 112.96536255]
[-106.68434906 102.62128448]
[-106.55640411 92.27062988]
[-105.91043091 81.93936157]
[-104.74804688 71.65338898]
[-103.07216644 61.43851089]
[-100.88698578 51.32033920]
[-98.19800568 41.32425690]
[-95.01194763 31.47532463]
[-91.33681488 21.79825020]
[-87.18182373 12.31730080]
[-82.55739594 3.05625415]
[-77.47512054 -5.96166372]
[-71.94774628 -14.71383667]
[-65.98914337 -23.17831421]
[-59.61424255 -31.33386803]
[-52.83904266 -39.16004562]
[-45.68053436 -46.63721848]
[-38.15666580 -53.74663162]
[-30.28631210 -60.47045898]
[-22.08920479 -66.79183960]
[-13.58590794 -72.69491577]
[-4.79774332 -78.16487885]
[4.25324678 -83.18801880]
[13.54436398 -87.75173950]
[23.05230713 -91.84458160]
[32.75323105 -95.45629883]
[42.62280273 -98.57781219]
[52.63627625 -101.20131683]
[62.76853180 -103.32021332]
[72.99416351 -104.92919922]
[83.28752136 -106.02423096]
[93.62279510 -106.60256958]
[103.97406769 -106.66276550]
[114.31536865 -106.20465851]
[124.62076569 -105.22940826]
[134.86441040 -103.73944855]
[145.02062988 -101.73853302]
[155.06393433 -99.23165894]
[164.96914673 -96.22512817]
[174.71141052 -92.72647858]
[184.26631165 -88.74448395]
[193.60987854 -84.28913116]
[202.71867371 -79.37158966]
[211.56985474 -74.00419617]
[220.14122009 -68.20040894]
[228.41128540 -61.97478485]
[236.35931396 -55.34294128]
[243.96534729 -48.32150650]
[251.21032715 -40.92809296]
[258.07608032 -33.18123627]
[264.54541016 -25.10037231]
[276.80776978 -33.73948669]
[289.07012939 -42.37860489]
[301.33248901 -51.01771927]
[313.59487915 -59.65683746]
[325.85723877 -68.29595184]
[332.25003052 -83.39774323]
[348.55599976 -85.14350128]
[358.00094604 -71.73734283]
[350.86871338 -56.97037506]
[334.49636841 -56.03358459]
[322.23397827 -47.39446640]
[309.97161865 -38.75535202]
[297.70925903 -30.11623573]
[285.44686890 -21.47711945]
[273.18450928 -12.83800411]
[293.52862549 27.39169884]
[304.66714478 71.07515717]
[306.07031250 116.13448334]
[320.97219849 117.84717560]
[335.87411499 119.55986023]
[350.77600098 121.27255249]
[365.67791748 122.98524475]
[379.08657837 114.17685699]
[394.28796387 119.30496216]
[399.62088013 134.43571472]
[390.99435425 147.96208191]
[375.02593994 149.50781250]
[363.96520996 137.88714600]
[349.06332397 136.17445374]
[334.16140747 134.46176147]
[319.25952148 132.74906921]
[304.35760498 131.03639221]
[302.15051270 143.13302612]
[299.22805786 155.07702637]
[295.60052490 166.82611084]
[291.28079224 178.33869934]
[286.28411865 189.57406616]
[280.62823486 200.49244690]
[274.33312988 211.05517578]
[267.42105103 221.22491455]
[259.91650391 230.96563721]
[251.84605408 240.24288940]
[243.23820496 249.02384949]
[234.12347412 257.27740479]
[224.53408813 264.97439575]
[214.50398254 272.08755493]
[204.06866455 278.59173584]
[193.26506042 284.46386719]
[182.13140869 289.68322754]
[170.70709229 294.23129272]
[159.03254700 298.09201050]
[147.14910889 301.25170898]
[135.09880066 303.69921875]
[122.92429352 305.42581177]
[110.66865540 306.42547607]
[98.37525940 306.69458008]
[86.08761597 306.23223877]
[73.84920502 305.04006958]
[61.70333862 303.12228394]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 21]
[5 20]
[6 19]
[7 18]
[9 16]
[10 15]
[91 106]
[92 105]
[93 104]
[94 103]
[95 102]
[96 101]
[109 123]
[110 122]
[111 121]
[112 120]
[113 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
