%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCAACCCCCUGGUCAACCUCAACCUAGGCCUCCUAUUUAUUCUAGCCACCUCUAGCCUAGCxxxxxxxxxxGCAUACUCUUCAAUCAGCCACAUAGCCCUCGUAGUAACAGCCAUUCUCAUCCAAACCCCCUGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[45.04534531 325.30514526]
[33.61386871 322.20553589]
[22.35555267 318.52633667]
[11.29976559 314.27713013]
[0.47534418 309.46899414]
[-10.08947659 304.11450195]
[-17.63331604 317.07946777]
[-25.17715645 330.04443359]
[-32.72099686 343.00939941]
[-40.26483536 355.97436523]
[-37.57158279 371.78973389]
[-48.36436844 383.65969849]
[-64.36388397 382.47857666]
[-73.29667664 369.15249634]
[-68.31026459 353.90405273]
[-53.22980499 348.43054199]
[-45.68596649 335.46557617]
[-38.14212799 322.50061035]
[-30.59828758 309.53561401]
[-23.05444908 296.57064819]
[-42.75680161 282.76464844]
[-60.92285538 266.99179077]
[-77.35710907 249.42179871]
[-91.88270569 230.24380493]
[-104.34332275 209.66415405]
[-114.60485840 187.90434265]
[-122.55689240 165.19853210]
[-128.11384583 141.79107666]
[-131.21591187 117.93387604]
[-131.82969666 93.88367462]
[-129.94862366 69.89929962]
[-125.59290314 46.23885727]
[-118.80943298 23.15697670]
[-109.67121124 0.90205532]
[-98.27657318 -20.28640747]
[-110.84281158 -28.47723007]
[-123.40905762 -36.66805267]
[-135.97529602 -44.85887146]
[-148.54153442 -53.04969406]
[-161.10778809 -61.24051666]
[-172.02111816 -50.84840775]
[-185.03715515 -43.25372696]
[-199.45399475 -38.86604309]
[-214.49412537 -37.92198563]
[-229.34645081 -40.47246552]
[-243.21002197 -46.37993240]
[-255.33717346 -55.32580948]
[-265.07394409 -66.82765198]
[-271.89517212 -80.26518250]
[-275.43307495 -94.91373444]
[-275.49679565 -109.98332977]
[-272.08291626 -124.66128540]
[-265.37557983 -138.15602112]
[-255.73645020 -149.73980713]
[-243.68537903 -158.78793335]
[-229.87226868 -164.81243896]
[-215.04205322 -167.48844910]
[-199.99447632 -166.67163086]
[-185.54104614 -162.40603638]
[-172.46122742 -154.92172241]
[-161.46040344 -144.62228394]
[-153.13180542 -132.06315613]
[-147.92462158 -117.92166901]
[-146.11964417 -102.96042633]
[-147.81422424 -87.98627472]
[-152.91696167 -73.80676270]
[-140.35072327 -65.61593628]
[-127.78447723 -57.42511368]
[-115.21823120 -49.23429489]
[-102.65199280 -41.04347229]
[-90.08574677 -32.85264969]
[-83.05493164 -42.38437653]
[-75.54663086 -51.54470444]
[-67.58043671 -60.30974579]
[-59.17712784 -68.65663147]
[-50.35861969 -76.56359863]
[-41.14791107 -84.01001740]
[-31.56903648 -90.97645569]
[-21.64697647 -97.44475555]
[-11.40760994 -103.39804077]
[-0.87764901 -108.82077789]
[9.91544151 -113.69882965]
[20.94351006 -118.01947021]
[32.17778778 -121.77143097]
[43.58897400 -124.94491577]
[55.14730453 -127.53165436]
[66.82262421 -129.52490234]
[78.58448792 -130.91944885]
[90.40221405 -131.71166992]
[102.24497223 -131.89950562]
[114.08187103 -131.48243713]
[125.88204193 -130.46157837]
[137.61470032 -128.83958435]
[149.24925232 -126.62067413]
[160.75534058 -123.81065369]
[172.10295105 -120.41683960]
[183.26248169 -116.44809723]
[194.20483398 -111.91476440]
[204.90145874 -106.82867432]
[215.32446289 -101.20309448]
[225.44665527 -95.05269623]
[235.24163818 -88.39351654]
[244.68385315 -81.24293518]
[253.74867249 -73.61959839]
[262.41244507 -65.54339600]
[270.65258789 -57.03538513]
[278.44760132 -48.11776352]
[285.77716064 -38.81378937]
[292.62213135 -29.14773560]
[298.96466064 -19.14481163]
[304.78820801 -8.83110905]
[310.07757568 1.76646793]
[314.81900024 12.62027740]
[319.00009155 23.70200920]
[322.60992432 34.98275375]
[325.63909912 46.43309402]
[328.07974243 58.02315521]
[329.92544556 69.72270966]
[331.17138672 81.50124359]
[331.81436157 93.32802582]
[331.85269165 105.17221069]
[331.28622437 117.00289917]
[330.11648560 128.78924561]
[328.34649658 140.50048828]
[325.98092651 152.10610962]
[323.02587891 163.57580566]
[319.48907471 174.87966919]
[315.37976074 185.98820496]
[310.70867920 196.87246704]
[305.48794556 207.50404358]
[299.73126221 217.85519409]
[293.45355225 227.89894104]
[286.67126465 237.60906982]
[279.40206909 246.96026611]
[271.66488647 255.92813110]
[263.47998047 264.48925781]
[254.86860657 272.62133789]
[245.85330200 280.30316162]
[236.45755005 287.51467896]
[226.70585632 294.23709106]
[216.62365723 300.45285034]
[206.23725891 306.14572144]
[195.57376099 311.30090332]
[184.66096497 315.90493774]
[173.52732849 319.94580078]
[162.20191956 323.41293335]
[150.71424866 326.29733276]
[139.09429932 328.59146118]
[127.37238312 330.28930664]
[115.57906342 331.38650513]
[103.74510193 331.88012695]
[91.90138245 331.76892090]
[80.07878113 331.05316162]
[68.30814362 329.73474121]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 20]
[7 19]
[8 18]
[9 17]
[10 16]
[35 71]
[36 70]
[37 69]
[38 68]
[39 67]
[40 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
