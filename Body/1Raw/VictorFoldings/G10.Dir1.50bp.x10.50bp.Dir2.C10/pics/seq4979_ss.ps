%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAAUAGCUAUAGCAAUAAAACUAGGAAUAGCCCCCUUUCACUUCUGAGUCCCAGAGGUUAxxxxxxxxxxCUUCGACCCUAUAUCCCCCGCCCGCGUCCCUUUCUCCAUAAAAUUCUUCUUAGUAGCUAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[261.67114258 260.45147705]
[268.74798584 247.20390320]
[256.48562622 238.56478882]
[244.22325134 229.92567444]
[229.36257935 228.92068481]
[222.53729248 214.64743042]
[210.27491760 206.00831604]
[198.01255798 197.36920166]
[185.75018311 188.73007202]
[173.48782349 180.09095764]
[158.90165710 182.88011169]
[146.34280396 174.29350281]
[143.51618958 158.97526550]
[131.25381470 150.33615112]
[118.99145508 141.69703674]
[106.72908783 133.05792236]
[91.74936676 132.27807617]
[78.65621948 139.59718323]
[65.56306458 146.91629028]
[66.54388428 162.14785767]
[60.81087875 176.29336548]
[49.50234604 186.54421997]
[34.86360550 190.86508179]
[19.80118179 188.39807129]
[7.30573368 179.63299561]
[-0.14175746 166.31016541]
[-1.06258798 151.07485962]
[4.72607374 136.95202637]
[16.07488441 126.74579620]
[30.73053169 122.48260498]
[45.78312302 125.00891876]
[58.24395752 133.82313538]
[71.33711243 126.50402832]
[84.43026733 119.18492126]
[81.94514465 104.39221191]
[67.17909241 101.75334930]
[52.41303635 99.11448669]
[43.34829330 100.69001770]
[37.36861038 96.26406860]
[22.66065025 93.31858826]
[7.30667973 99.07946014]
[-5.18577480 88.45539856]
[-1.96554804 72.37553406]
[13.65466690 67.38143921]
[25.60613251 78.61062622]
[40.31409454 81.55610657]
[55.05189896 84.34843445]
[69.81795502 86.98729706]
[84.58400726 89.62615967]
[88.37896729 83.15713501]
[80.96896362 70.11520386]
[95.96887207 70.21907806]
[99.76382446 63.75004578]
[90.25547028 52.14870453]
[80.74710846 40.54736328]
[71.23875427 28.94602394]
[55.48009109 25.93866539]
[48.13377380 11.67643642]
[54.83526230 -2.89990044]
[70.44374847 -6.60862732]
[82.98574066 3.39527345]
[82.84009552 19.43766594]
[92.34844971 31.03900719]
[101.85681152 42.64034653]
[111.36516571 54.24168777]
[125.64063263 49.63612366]
[126.57625580 34.66533279]
[127.51188660 19.69454193]
[113.51681519 13.91381359]
[102.15869141 3.90023994]
[94.66954803 -9.25998306]
[91.86175537 -24.13933182]
[94.03988647 -39.12380600]
[100.96766663 -52.58800507]
[111.89362335 -63.07142639]
[125.63259125 -69.43691254]
[140.69427490 -70.99398041]
[155.44488525 -67.57373810]
[168.28439331 -59.54717636]
[177.82006836 -47.78496552]
[183.01754761 -33.56297684]
[183.31304932 -18.42390633]
[178.67451477 -4.00993061]
[169.60510254 8.11543274]
[157.08859253 16.63691521]
[142.48268127 20.63017082]
[141.54704285 35.60095978]
[140.61141968 50.57175446]
[115.36820221 120.79555511]
[127.63056946 129.43467712]
[139.89294434 138.07379150]
[152.15530396 146.71290588]
[167.53115845 144.21871948]
[179.84387207 153.15469360]
[182.12693787 167.82859802]
[194.38929749 176.46771240]
[206.65167236 185.10682678]
[218.91404724 193.74594116]
[231.17640686 202.38505554]
[246.91415405 204.00796509]
[252.86236572 217.66329956]
[265.12472534 226.30241394]
[277.38708496 234.94154358]
[287.47976685 223.81869507]
[298.86282349 214.02046204]
[311.36373901 205.69537354]
[324.79296875 198.96963501]
[338.94692993 193.94523621]
[353.61108398 190.69830322]
[368.56307983 189.27809143]
[383.57629395 189.70610046]
[398.42309570 191.97587585]
[412.87844849 196.05297852]
[426.72317505 201.87562561]
[439.74740601 209.35552979]
[451.75369263 218.37930298]
[462.56002808 228.81015015]
[472.00262451 240.48992920]
[479.93826294 253.24159241]
[486.24670410 266.87182617]
[490.83227539 281.17401123]
[493.62548828 295.93130493]
[494.58398438 310.91998291]
[493.69323730 325.91287231]
[490.96673584 340.68261719]
[486.44583130 355.00537109]
[480.19903564 368.66397095]
[472.32107544 381.45135498]
[462.93139648 393.17367554]
[452.17227173 403.65325928]
[440.20687866 412.73120117]
[427.21658325 420.26986694]
[413.39831543 426.15499878]
[398.96154785 430.29739380]
[384.12512207 432.63421631]
[369.11401367 433.13006592]
[354.15573120 431.77743530]
[339.47708130 428.59680176]
[325.30053711 423.63638306]
[311.84106445 416.97140503]
[299.30267334 408.70288086]
[287.87545776 398.95620728]
[277.73263550 387.87905884]
[269.02795410 375.63943481]
[261.89343262 362.42285156]
[256.43719482 348.42968750]
[252.74194336 333.87203979]
[250.86370850 318.97064209]
[250.83096313 303.95135498]
[252.64421082 289.04190063]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 103]
[3 102]
[4 101]
[6 99]
[7 98]
[8 97]
[9 96]
[10 95]
[13 92]
[14 91]
[15 90]
[16 89]
[17 34]
[18 33]
[19 32]
[35 49]
[36 48]
[37 47]
[39 46]
[40 45]
[53 65]
[54 64]
[55 63]
[56 62]
[66 88]
[67 87]
[68 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
