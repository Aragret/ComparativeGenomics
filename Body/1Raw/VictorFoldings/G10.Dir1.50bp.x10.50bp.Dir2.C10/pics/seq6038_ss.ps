%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCCCACUCUGCAUCAACUGAACGCAAAUCAGCCACUUUAAUUAAGCUAAGCCCUUACUAxxxxxxxxxxCAGCCCAAUUAGGUCUCCACCCCUGACUCCCCUCAGCCAUAGAAGGCCCCACCCCAGUCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[87.98501587 472.11392212]
[87.98501587 457.11392212]
[87.98501587 442.11392212]
[87.98501587 427.11392212]
[87.98501587 412.11392212]
[87.98501587 397.11392212]
[87.98501587 382.11392212]
[87.98501587 367.11392212]
[87.98501587 352.11392212]
[87.98501587 337.11392212]
[72.00053406 333.12420654]
[57.55881119 325.17453003]
[45.62279129 313.78894043]
[36.98986816 299.72082520]
[32.23862839 283.90295410]
[31.69008255 267.38574219]
[35.38596725 251.26742554]
[43.08562851 236.62109375]
[54.28168106 224.42318726]
[68.23344421 215.48846436]
[84.01594543 210.41551208]
[83.08032227 195.44471741]
[77.32942200 190.63044739]
[71.72622681 204.54463196]
[56.76159286 203.51519775]
[53.11648560 188.96482849]
[65.82761383 181.00192261]
[60.07671356 176.18766785]
[45.17481232 177.90036011]
[30.27290916 179.61303711]
[15.37100697 181.32572937]
[6.90441275 194.47300720]
[-8.04750061 199.05278015]
[-22.42489815 192.90261841]
[-29.43921089 178.92643738]
[-25.77849579 163.72337341]
[-13.17122936 154.47184753]
[2.42982054 155.54013062]
[13.65831661 166.42382812]
[28.56021881 164.71113586]
[43.46212006 162.99845886]
[58.36402512 161.28576660]
[67.73689270 161.48910522]
[75.92306519 163.93820190]
[82.44902802 168.18240356]
[86.96992493 173.68002319]
[93.03293610 159.95996094]
[99.09594727 146.23991394]
[77.44845581 83.60744476]
[74.04547882 68.99855042]
[70.64250183 54.38965988]
[67.23952484 39.78076553]
[63.83654404 25.17187500]
[50.70033646 16.80062675]
[47.45734024 1.93665648]
[55.51900101 -10.53512192]
[52.11602020 -25.14401436]
[48.71304321 -39.75290680]
[33.63516998 -40.08228683]
[19.11312675 -44.15182495]
[6.05978870 -51.70570755]
[-4.70430374 -62.26909637]
[-12.50251007 -75.17796326]
[-16.84462929 -89.62084198]
[-17.45771027 -104.68984985]
[-14.30321598 -119.43772888]
[-7.57944012 -132.93742371]
[2.29095531 -144.34031677]
[14.68750858 -152.92962646]
[28.83096313 -158.16542053]
[43.83224869 -159.71856689]
[58.74837112 -157.49143982]
[72.64169312 -151.62403870]
[84.63886261 -142.48518372]
[93.98573303 -130.64935303]
[100.09474945 -116.86055756]
[102.58190155 -101.98558807]
[101.29083252 -86.95947266]
[96.30271149 -72.72678375]
[87.93108368 -60.18219757]
[76.70220947 -50.11426926]
[63.32193756 -43.15588379]
[66.72491455 -28.54699326]
[70.12789154 -13.93809986]
[82.87099457 -6.31255817]
[86.53021240 8.45446014]
[78.44543457 21.76889610]
[81.84841156 36.37778854]
[85.25139618 50.98668289]
[88.65437317 65.59557343]
[92.05735016 80.20446777]
[106.28412628 84.95828247]
[117.78593445 75.32975769]
[129.28773499 65.70122528]
[134.40307617 50.12030029]
[150.50749207 47.02515030]
[161.03413391 59.59980011]
[155.15409851 74.90853119]
[138.91625977 77.20303345]
[127.41445923 86.83155823]
[115.91265106 96.46008301]
[119.01535797 103.28820801]
[128.32347107 123.77256775]
[143.14122009 121.44145966]
[157.95898438 119.11035919]
[172.77674866 116.77925873]
[181.87577820 103.85706329]
[197.46121216 101.23604584]
[210.28648376 110.47119904]
[212.74258423 126.08347321]
[203.37234497 138.81037903]
[187.73498535 141.10127258]
[175.10784912 131.59701538]
[160.29008484 133.92811584]
[145.47233582 136.25921631]
[130.65457153 138.59033203]
[145.06517029 142.75381470]
[152.96376038 155.50576782]
[150.27229309 170.26231384]
[138.38035583 179.40463257]
[123.42780304 178.21252441]
[113.13465881 167.30145264]
[112.81600189 152.30293274]
[106.75299072 166.02297974]
[100.68997955 179.74302673]
[98.05110931 194.50909424]
[98.98674011 209.47987366]
[112.41703796 211.68615723]
[125.07573700 216.66784668]
[136.39653015 224.19906616]
[145.87355042 233.93995667]
[153.08409119 245.45199585]
[157.70732117 258.21774292]
[159.53868103 271.66409302]
[158.49885559 285.18801880]
[154.63722229 298.18365479]
[148.12956238 310.06927490]
[139.26995850 320.31359863]
[128.45761108 328.45925903]
[116.17879486 334.14346313]
[102.98501587 337.11392212]
[102.98501587 352.11392212]
[102.98501587 367.11392212]
[102.98501587 382.11392212]
[102.98501587 397.11392212]
[102.98501587 412.11392212]
[102.98501587 427.11392212]
[102.98501587 442.11392212]
[102.98501587 457.11392212]
[102.98501587 472.11392212]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[21 127]
[22 126]
[28 42]
[29 41]
[30 40]
[31 39]
[46 125]
[47 124]
[48 123]
[49 91]
[50 90]
[51 89]
[52 88]
[53 87]
[56 84]
[57 83]
[58 82]
[92 101]
[93 100]
[94 99]
[103 116]
[104 115]
[105 114]
[106 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
