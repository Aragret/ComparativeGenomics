%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCACUAGACAUCGUACUACACGACACGUACUACGUUGUAGCCCACUUCCACUAUGUCCUAUxxxxxxxxxxGCUCCCUUCCCCUACUCAUCGCACUAAUUUACACUCACAACACCCUAGGCUCACUAAACAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 251.63754272]
[92.50000000 236.63754272]
[92.50000000 221.63754272]
[92.50000000 206.63754272]
[92.50000000 191.63754272]
[92.50000000 176.63754272]
[92.50000000 161.63754272]
[92.50000000 146.63754272]
[92.50000000 131.63754272]
[92.50000000 116.63755035]
[86.65689850 111.93561554]
[86.59107208 126.93547821]
[74.82277679 136.23640442]
[60.21356964 132.83479309]
[53.76420975 119.29205322]
[60.33107758 105.80590057]
[74.97068787 102.53176117]
[69.12758636 97.82983398]
[54.47485733 101.03882599]
[39.82213211 104.24782562]
[33.07580566 148.49194336]
[19.64835739 155.17802429]
[6.22090769 161.86408997]
[-7.20654154 168.55017090]
[-13.64770031 183.24340820]
[-29.18775177 187.22917175]
[-41.90569687 177.44993591]
[-42.04541779 161.40750122]
[-29.49973297 151.40823364]
[-13.89261723 155.12272644]
[-0.46516755 148.43664551]
[12.96228218 141.75056458]
[26.38973045 135.06449890]
[24.93599510 127.70673370]
[20.57478714 105.63345337]
[5.61350584 104.55638123]
[-9.34777451 103.47930908]
[-24.30905533 102.40224457]
[-40.54145813 107.29565430]
[-49.73720551 93.05224609]
[-38.59607697 80.27290344]
[-23.23198509 87.44096375]
[-8.27070522 88.51802826]
[6.69057560 89.59510040]
[21.65185547 90.67217255]
[36.61313629 89.59510040]
[51.26586151 86.38610840]
[65.91858673 83.17710876]
[87.57759094 77.63510895]
[101.29083252 86.90415955]
[109.44749451 74.31571960]
[117.60416412 61.72728348]
[105.70617676 52.57936859]
[94.58288574 42.50372314]
[84.30641937 31.56569290]
[74.94342804 19.83621216]
[66.55463409 7.39135361]
[59.19444656 -5.68817139]
[52.91059875 -19.31753540]
[47.74384308 -33.40834808]
[43.72768784 -47.86922073]
[40.88818359 -62.60636520]
[39.24374008 -77.52421570]
[38.80502701 -92.52600861]
[39.57489014 -107.51445770]
[41.54833221 -122.39235687]
[44.71255493 -137.06321716]
[49.04703903 -151.43188477]
[54.52367783 -165.40516663]
[61.10694122 -178.89245605]
[68.75414276 -191.80627441]
[77.41568756 -204.06286621]
[87.03539276 -215.58273315]
[97.55088043 -226.29118347]
[108.89394379 -236.11875916]
[120.99102020 -245.00172424]
[133.76365662 -252.88246155]
[147.12901306 -259.70986938]
[161.00041199 -265.43966675]
[175.28790283 -270.03469849]
[189.89878845 -273.46514893]
[204.73835754 -275.70877075]
[219.71032715 -276.75103760]
[234.71762085 -276.58514404]
[249.66290283 -275.21221924]
[264.44924927 -272.64114380]
[278.98074341 -268.88858032]
[293.16317749 -263.97888184]
[306.90454102 -257.94387817]
[320.11572266 -250.82273865]
[332.71105957 -242.66160583]
[344.60882568 -233.51342773]
[355.73190308 -223.43754578]
[366.00811768 -212.49928284]
[375.37084961 -200.76959229]
[383.75936890 -188.32455444]
[391.11929321 -175.24487305]
[397.40283203 -161.61537170]
[402.56927490 -147.52444458]
[406.58511353 -133.06347656]
[409.42428589 -118.32627106]
[411.06838989 -103.40838623]
[411.50677490 -88.40657806]
[410.73660278 -73.41814423]
[408.76281738 -58.54029465]
[405.59826660 -43.86950684]
[401.26345825 -29.50093651]
[395.78652954 -15.52777004]
[389.20297241 -2.04062724]
[381.55548096 10.87301922]
[372.89367676 23.12941933]
[363.27371216 34.64908218]
[352.75799561 45.35730362]
[341.41470337 55.18462753]
[329.31744385 64.06732178]
[316.54461670 71.94778442]
[303.17910767 78.77489471]
[289.30758667 84.50438690]
[275.01998901 89.09909058]
[260.40902710 92.52922058]
[245.56942749 94.77252197]
[230.59742737 95.81445312]
[215.59013367 95.64824677]
[200.64488220 94.27498627]
[185.85859680 91.70358276]
[171.32717896 87.95070648]
[157.14486694 83.04069519]
[143.40362549 77.00539398]
[130.19259644 69.88394928]
[122.03593445 82.47238922]
[113.87927246 95.06082916]
[125.36947632 85.41845703]
[139.96286011 81.94957733]
[154.56292725 85.39021301]
[166.07176208 95.01033020]
[172.04737854 108.76867676]
[171.22181702 123.74594116]
[163.77026367 136.76417542]
[151.27383423 145.06111145]
[136.38406372 146.87625122]
[122.26033783 141.82446289]
[111.89951324 130.97764587]
[107.50000000 116.63755035]
[107.50000000 131.63754272]
[107.50000000 146.63754272]
[107.50000000 161.63754272]
[107.50000000 176.63754272]
[107.50000000 191.63754272]
[107.50000000 206.63754272]
[107.50000000 221.63754272]
[107.50000000 236.63754272]
[107.50000000 251.63754272]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[18 48]
[19 47]
[20 46]
[21 33]
[22 32]
[23 31]
[24 30]
[35 45]
[36 44]
[37 43]
[38 42]
[50 131]
[51 130]
[52 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
