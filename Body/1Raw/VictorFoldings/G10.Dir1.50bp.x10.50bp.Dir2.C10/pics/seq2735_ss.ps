%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCUAGCAUCACCAGUAUUAGAGGCACCGCCUGCCCAGUGACACAUGUUUAACGGCCGCGGUAxxxxxxxxxxUCGCUGACGCCAUAAAACUCUUCACCAAAGAGCCCCUAAAACCCGCCACAUCUACCAUCACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[77.18753052 287.02450562]
[77.18753052 272.02450562]
[77.18753052 257.02450562]
[77.18753052 242.02450562]
[77.18753052 227.02450562]
[77.18753052 212.02450562]
[77.18753052 197.02450562]
[77.18753052 182.02450562]
[77.18753052 167.02450562]
[77.18753052 152.02450562]
[63.52588272 145.83100891]
[52.24411011 155.71643066]
[40.96233749 165.60186768]
[29.68056488 175.48728943]
[34.23072052 190.02055359]
[32.46982956 205.14732361]
[24.70298195 218.24679565]
[12.27582550 227.04937744]
[-2.65855622 230.03001404]
[-17.51269341 226.67225647]
[-29.71301460 217.55786133]
[-37.14574051 204.26597595]
[-38.52310944 189.09947205]
[-33.60648346 174.68605042]
[-23.24769402 163.52293396]
[-9.24146652 157.54417419]
[5.98553514 157.78564453]
[19.79514122 164.20550537]
[31.07691383 154.32008362]
[42.35868454 144.43466187]
[53.64045715 134.54924011]
[48.14686966 120.59143066]
[33.15380096 121.04739380]
[18.16073227 121.50336456]
[3.16766429 121.95932770]
[-8.82932663 132.61070251]
[-24.61167336 129.73023987]
[-32.07250977 115.52758026]
[-25.48852348 100.89779663]
[-9.91038132 97.06359863]
[2.71169686 106.96626282]
[17.70476532 106.51029205]
[32.69783401 106.05432892]
[47.69090271 105.59835815]
[58.20497894 74.51651001]
[83.65879822 57.75564194]
[111.70935059 60.04201889]
[118.45140076 46.64258575]
[125.19344330 33.24315262]
[117.07630157 23.11548805]
[113.42556763 10.70921612]
[114.75389862 -2.10753298]
[120.82694244 -13.41886044]
[130.70379639 -21.54749870]
[142.88256836 -25.30349350]
[155.52877808 -24.15830803]
[162.80830383 -37.27350616]
[170.08782959 -50.38870621]
[177.36735535 -63.50390625]
[163.85359192 -84.73526001]
[169.24531555 -111.62924957]
[193.58837891 -128.63198853]
[192.98048401 -143.61965942]
[184.69029236 -157.09494019]
[191.90545654 -170.12532043]
[183.61524963 -183.60058594]
[190.83041382 -196.63096619]
[190.22253418 -211.61865234]
[189.61463928 -226.60632324]
[175.33457947 -231.81669617]
[164.13880920 -242.09887695]
[157.73463440 -255.88491821]
[157.09861755 -271.07254028]
[162.32777405 -285.34576416]
[172.62467957 -296.52798462]
[186.41914368 -302.91403198]
[201.60758972 -303.53005981]
[215.87390137 -298.28213501]
[227.04257202 -287.97052002]
[233.41046143 -274.16766357]
[234.00650024 -258.97842407]
[228.73982239 -244.71902466]
[218.41352844 -233.56393433]
[204.60232544 -227.21420288]
[205.21020508 -212.22653198]
[205.81808472 -197.23884583]
[214.06481934 -184.83558655]
[206.89312744 -170.73320007]
[215.13984680 -158.32994080]
[207.96817017 -144.22755432]
[208.57604980 -129.23986816]
[214.85917664 -125.14446259]
[221.51118469 -138.58882141]
[223.66018677 -153.43408203]
[237.32780457 -159.61439514]
[249.89367676 -151.42301941]
[249.75480652 -136.42366028]
[237.04078674 -128.46644592]
[227.42541504 -116.95363617]
[233.70854187 -112.85822296]
[247.66635132 -118.35181427]
[261.62414551 -123.84540558]
[275.58197021 -129.33898926]
[289.53976440 -134.83258057]
[297.23376465 -148.91030884]
[313.06146240 -151.53016663]
[324.88119507 -140.68244934]
[323.62591553 -124.68858337]
[310.25851440 -115.81769562]
[295.03335571 -120.87477112]
[281.07556152 -115.38118744]
[267.11773682 -109.88759613]
[253.15994263 -104.39400482]
[239.20211792 -98.90041351]
[239.49169922 -86.45521545]
[236.11938477 -74.88552094]
[229.62841797 -65.20664978]
[220.82376099 -58.19281006]
[210.67922974 -54.31644821]
[200.23298645 -53.72044754]
[190.48255920 -56.22437668]
[183.20303345 -43.10917664]
[175.92350769 -29.99397659]
[168.64396667 -16.87877846]
[178.02543640 -2.49964237]
[178.87170410 14.73714924]
[170.86204529 30.12336922]
[156.10694885 39.41105270]
[138.59288025 39.98520279]
[131.85083008 53.38463211]
[125.10877991 66.78406525]
[131.47831726 71.56184387]
[136.92616272 77.56867981]
[141.21420288 84.62419128]
[144.14012146 92.50180054]
[145.54638672 100.93590546]
[145.32769775 109.63080597]
[143.43675232 118.27108765]
[139.88783264 126.53306580]
[134.75825500 134.09683228]
[128.18724060 140.65863037]
[120.37261200 145.94284058]
[111.56498718 149.71327209]
[102.05981445 151.78334045]
[92.18753052 152.02450562]
[92.18753052 167.02450562]
[92.18753052 182.02450562]
[92.18753052 197.02450562]
[92.18753052 212.02450562]
[92.18753052 227.02450562]
[92.18753052 242.02450562]
[92.18753052 257.02450562]
[92.18753052 272.02450562]
[92.18753052 287.02450562]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[11 31]
[12 30]
[13 29]
[14 28]
[32 44]
[33 43]
[34 42]
[35 41]
[47 131]
[48 130]
[49 129]
[56 124]
[57 123]
[58 122]
[59 121]
[62 91]
[63 90]
[65 88]
[67 86]
[68 85]
[69 84]
[100 114]
[101 113]
[102 112]
[103 111]
[104 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
