%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACACUAGGAAAAAACCUUGUAGAGAGAGUAAAAAAUUUAACACCCAUAGUAGGCCUAAAAxxxxxxxxxxAUACUACCAAUCAAUACUCAUCAUUAAUAAUCAUAAUAGCUAUAGCAAUAAAACUAGGAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[78.70588684 267.38504028]
[78.70588684 252.38505554]
[78.70588684 237.38505554]
[78.70588684 222.38505554]
[78.70588684 207.38505554]
[78.70588684 192.38505554]
[78.70588684 177.38505554]
[78.70588684 162.38505554]
[78.70588684 147.38505554]
[78.70588684 132.38505554]
[65.04964447 126.17964935]
[53.75064087 136.04536438]
[42.45163345 145.91108704]
[39.91594315 152.13023376]
[35.29211426 155.57284546]
[30.47126961 155.94023132]
[18.77164650 165.32739258]
[7.07202291 174.71456909]
[5.59854507 190.45001221]
[-6.62314606 200.47027588]
[-22.34213829 198.83052063]
[-32.23263168 186.50357056]
[-30.42677498 170.80279541]
[-17.99594688 161.04318237]
[-2.31513906 163.01493835]
[9.38448429 153.62777710]
[21.08410835 144.24061584]
[32.58591080 134.61209106]
[43.88491821 124.74636841]
[55.18392181 114.88064575]
[62.12953949 73.29978943]
[98.99969482 54.55993652]
[93.80427551 40.48841476]
[82.40441895 34.36493301]
[78.38703156 22.48724174]
[83.39857483 11.43320465]
[78.49702454 -2.74335384]
[73.59547424 -16.91991234]
[68.69392395 -31.09646988]
[63.79236984 -45.27302933]
[49.14073944 -41.98522186]
[34.21311188 -40.35858536]
[19.19721985 -40.41357040]
[4.28190517 -42.14948654]
[-10.34525681 -45.54450989]
[-24.50031281 -50.55593491]
[-38.00524902 -57.12073898]
[-50.69022751 -65.15637207]
[-62.39572144 -74.56176758]
[-72.97451782 -85.21864319]
[-82.29358673 -96.99298096]
[-90.23571777 -109.73670197]
[-96.70103455 -123.28955078]
[-101.60823822 -137.48107910]
[-104.89560699 -152.13281250]
[-106.52179718 -167.06048584]
[-106.46636200 -182.07637024]
[-104.72999573 -196.99163818]
[-101.33454132 -211.61869812]
[-96.32269287 -225.77360535]
[-89.75748444 -239.27835083]
[-81.72147369 -251.96308899]
[-72.31572723 -263.66830444]
[-61.65853500 -274.24676514]
[-49.88391876 -283.56549072]
[-37.13995361 -291.50723267]
[-23.58691597 -297.97213745]
[-9.39524364 -302.87893677]
[5.25658560 -306.16586304]
[20.18431091 -307.79159546]
[35.20019913 -307.73571777]
[50.11540985 -305.99890137]
[64.74237061 -302.60302734]
[78.89712524 -297.59072876]
[92.40166473 -291.02511597]
[105.08616638 -282.98873901]
[116.79109955 -273.58264160]
[127.36925507 -262.92514038]
[136.68762207 -251.15023804]
[144.62898254 -238.40603638]
[151.09350586 -224.85281372]
[155.99984741 -210.66098022]
[159.28634644 -196.00906372]
[160.91163635 -181.08128357]
[160.85530090 -166.06539917]
[159.11805725 -151.15023804]
[155.72172546 -136.52339172]
[150.70903015 -122.36878204]
[144.14300537 -108.86443329]
[136.10623169 -96.18017578]
[126.69979095 -84.47552490]
[116.04196930 -73.89768219]
[104.26679230 -64.57967377]
[91.52235413 -56.63868332]
[77.96892548 -50.17457962]
[82.87048340 -35.99802017]
[87.77203369 -21.82146263]
[92.67358398 -7.64490461]
[97.57513428 6.53165340]
[111.43123627 17.25585175]
[107.87579346 35.29299927]
[113.07121277 49.36452103]
[125.92961121 57.08860397]
[140.79266357 55.06626892]
[155.65570068 53.04393768]
[170.51875305 51.02160263]
[178.71000671 37.70103836]
[193.56340027 32.81120300]
[208.06564331 38.66092682]
[215.36918640 52.48815155]
[212.02554321 67.76408386]
[199.61347961 77.27589417]
[183.99357605 76.53239441]
[172.54109192 65.88465118]
[157.67803955 67.90698242]
[142.81500244 69.92931366]
[127.95195007 71.95165253]
[127.01814270 79.39329529]
[124.21672058 101.71820831]
[138.11927795 107.35016632]
[154.27728271 104.54821014]
[164.57365417 117.31209564]
[158.41636658 132.51142883]
[142.13951111 134.51045227]
[132.48731995 121.25272369]
[118.58476257 115.62076569]
[112.36504364 119.81183624]
[121.86558533 131.41958618]
[131.36611938 143.02732849]
[140.86665344 154.63508606]
[150.36718750 166.24282837]
[161.52775574 176.26490784]
[160.48764038 191.22879028]
[148.04786682 199.61044312]
[133.78860474 194.95494080]
[128.69113159 180.84893799]
[121.49975586 167.68519592]
[114.30837250 154.52145386]
[107.11698914 141.35772705]
[99.92560577 128.19398499]
[93.70588684 132.38505554]
[93.70588684 147.38505554]
[93.70588684 162.38505554]
[93.70588684 177.38505554]
[93.70588684 192.38505554]
[93.70588684 207.38505554]
[93.70588684 222.38505554]
[93.70588684 237.38505554]
[93.70588684 252.38505554]
[93.70588684 267.38504028]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 30]
[12 29]
[13 28]
[16 27]
[17 26]
[18 25]
[32 102]
[33 101]
[36 99]
[37 98]
[38 97]
[39 96]
[40 95]
[103 117]
[104 116]
[105 115]
[106 114]
[119 126]
[120 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
