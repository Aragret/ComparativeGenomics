%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCUAAUAAUCGGUGCCCCCGAUAUGGCGUUUCCCCGCAUAAACAACAUAAGCUUCUGACUxxxxxxxxxxAGACGCUACUUCCCCUAUCAUAGAAGAGCUUAUCACCUUUCAUGAUCACGCCCUCAUAAUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[118.65262604 262.77362061]
[118.65262604 247.77362061]
[118.65262604 232.77362061]
[118.65262604 217.77362061]
[118.65262604 202.77362061]
[118.65262604 187.77362061]
[118.65262604 172.77362061]
[118.65262604 157.77362061]
[118.65262604 142.77362061]
[118.65262604 127.77362061]
[112.19627380 123.95713806]
[105.00489044 137.12088013]
[104.46145630 152.11102295]
[91.30019379 159.30696106]
[78.38752747 151.67393494]
[78.34681702 136.67399597]
[91.21777344 128.97102356]
[99.28357697 116.32416534]
[92.82723236 112.50768280]
[79.68560028 119.73938751]
[66.54396820 126.97108459]
[53.40233612 134.20278931]
[40.26070404 141.43449402]
[34.42820740 156.37977600]
[19.06489182 161.00018311]
[5.95618200 151.75132751]
[5.15795565 135.72814941]
[17.28254318 125.22225189]
[33.02899933 128.29286194]
[46.17063141 121.06115723]
[59.31226349 113.82945251]
[72.45389557 106.59775543]
[85.59552765 99.36605072]
[93.88100433 86.86201477]
[95.41829681 71.94100189]
[96.95558929 57.01998138]
[87.91606903 45.04972458]
[73.14395142 42.44499969]
[58.37183380 39.84027863]
[45.57110214 49.10941315]
[29.97877121 46.52973175]
[20.84549332 33.63172150]
[23.58987808 18.06753349]
[36.58373260 9.07113075]
[52.11803436 11.97991657]
[60.97655487 25.06816101]
[75.74867249 27.67288399]
[90.52079010 30.27760696]
[94.58374023 32.53716660]
[98.30958557 35.22415924]
[101.66242981 38.30565643]
[107.36708832 24.43277550]
[113.07175446 10.55989552]
[103.81094360 -1.61321306]
[101.89926910 -16.68777084]
[107.75080872 -30.60272408]
[119.70172882 -39.65984344]
[134.48196411 -41.50651169]
[140.18663025 -55.37939072]
[145.89129639 -69.25227356]
[151.59596252 -83.12515259]
[157.30061340 -96.99803162]
[163.00527954 -110.87091827]
[168.70994568 -124.74379730]
[156.65307617 -115.82011414]
[142.88894653 -109.85785675]
[128.13233948 -107.16664886]
[113.14961243 -107.88624573]
[98.71884918 -111.97929382]
[85.58946991 -119.23322296]
[74.44332123 -129.27131653]
[65.85923767 -141.57226562]
[60.28302002 -155.49726868]
[58.00425339 -170.32316589]
[59.14127731 -185.28001404]
[63.63504028 -199.59106445]
[71.25217438 -212.51310730]
[81.59710693 -223.37507629]
[94.13259888 -231.61288452]
[108.20764923 -236.79872131]
[123.09131622 -238.66328430]
[138.01065063 -237.10972595]
[152.19084167 -232.21873474]
[164.89550781 -224.24430847]
[175.46485901 -213.60057068]
[183.34999084 -200.84030151]
[188.14141846 -186.62614441]
[189.59031677 -171.69628906]
[187.62142944 -156.82606506]
[182.33895874 -142.79153442]
[194.12109375 -152.07492065]
[205.90322876 -161.35829163]
[217.68537903 -170.64167786]
[215.40600586 -185.83050537]
[221.04135132 -200.11819458]
[233.07554626 -209.66146851]
[248.27142334 -211.89321899]
[262.54138184 -206.21310425]
[272.04690552 -194.14906311]
[274.23098755 -178.94625854]
[268.50619507 -164.69416809]
[256.41241455 -155.22653198]
[241.20283508 -153.09008789]
[226.96876526 -158.85954285]
[215.18661499 -149.57615662]
[203.40447998 -140.29277039]
[191.62234497 -131.00938416]
[182.58282471 -119.03913116]
[176.87815857 -105.16625214]
[171.17350769 -91.29337311]
[165.46884155 -77.42049408]
[159.76417542 -63.54761124]
[154.05950928 -49.67472839]
[148.35484314 -35.80184937]
[157.56048584 -24.09195137]
[159.68295288 -9.24772167]
[154.05307007 4.75837994]
[142.08993530 14.12748241]
[126.94463348 16.26455879]
[121.23997498 30.13743973]
[115.53530884 44.01031876]
[111.87660217 58.55727386]
[110.33930969 73.47829437]
[108.80201721 88.39930725]
[117.30463409 76.04190063]
[124.61334229 62.94293976]
[135.31632996 52.43360138]
[148.54653931 45.36524963]
[163.23219299 42.31049347]
[178.18360901 43.51679230]
[192.18957520 48.88642502]
[204.11546326 57.98440170]
[212.99514771 70.07369232]
[218.10931396 84.17494965]
[219.04364014 99.14582062]
[215.72244263 113.77352142]
[208.41477966 126.87306213]
[197.71263123 137.38325500]
[184.48298645 144.45265198]
[169.79757690 147.50857544]
[154.84605408 146.30346680]
[140.84400940 140.93736267]
[133.65261841 127.77362061]
[133.65261841 142.77362061]
[133.65261841 157.77362061]
[133.65261841 172.77362061]
[133.65261841 187.77362061]
[133.65261841 202.77362061]
[133.65261841 217.77362061]
[133.65261841 232.77362061]
[133.65261841 247.77362061]
[133.65261841 262.77362061]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[19 33]
[20 32]
[21 31]
[22 30]
[23 29]
[34 124]
[35 123]
[36 122]
[37 48]
[38 47]
[39 46]
[51 121]
[52 120]
[53 119]
[58 114]
[59 113]
[60 112]
[61 111]
[62 110]
[63 109]
[64 108]
[90 107]
[91 106]
[92 105]
[93 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
