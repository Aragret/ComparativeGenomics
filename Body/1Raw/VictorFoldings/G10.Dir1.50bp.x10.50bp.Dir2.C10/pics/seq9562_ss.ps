%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUAAAUAUUAUACUAGCAUUUACCAUCUCACUUCUAGGAAUACUAGUAUAUCGCUCACAxxxxxxxxxxGACUCACCCAUCAACAACCGCUAUGUAUUUCGUACAUUACUGCCAGCCACCAUGAAUAUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 280.29858398]
[92.50000000 265.29858398]
[92.50000000 250.29858398]
[92.50000000 235.29858398]
[92.50000000 220.29858398]
[92.50000000 205.29858398]
[92.50000000 190.29858398]
[92.50000000 175.29858398]
[92.50000000 160.29858398]
[92.50000000 145.29858398]
[86.44049072 143.86743164]
[80.63031006 141.62963867]
[75.17630768 138.62635803]
[70.17875671 134.91282654]
[65.72956085 130.55729675]
[61.91053391 125.63989258]
[58.79189682 120.25102234]
[56.43099213 114.48976898]
[54.87124252 108.46208191]
[54.14131546 102.27879333]
[39.23941422 100.56610107]
[24.33751106 98.85340881]
[9.43560982 97.14072418]
[-5.46629286 95.42803192]
[-20.36819458 93.71533966]
[-35.27009583 92.00265503]
[-50.17200089 90.28996277]
[-64.76535797 96.40097046]
[-76.52595520 87.26107788]
[-91.42786407 85.54838562]
[-106.32976532 83.83570099]
[-112.63546753 86.14775085]
[-118.29396057 85.04650116]
[-121.81122589 81.72921753]
[-136.62898254 79.39811707]
[-145.26560974 91.98268890]
[-158.51144409 99.56625366]
[-173.73652649 100.64309692]
[-187.91790771 94.99939728]
[-198.23985291 83.75572968]
[-202.65293884 69.14451599]
[-200.28094482 54.06683731]
[-191.59483337 41.51637268]
[-178.31922913 33.98502731]
[-163.09002686 32.96815109]
[-148.93098450 38.66764832]
[-138.65339661 49.95188141]
[-134.29788208 64.58035278]
[-119.48011780 66.91146088]
[-104.61707306 68.93379211]
[-89.71517181 70.64648438]
[-74.81327057 72.35917664]
[-61.28579330 66.12566376]
[-48.45930862 75.38806152]
[-33.55740738 77.10074615]
[-18.65550613 78.81343842]
[-3.75360322 80.52613068]
[11.14829922 82.23881531]
[26.05020142 83.95150757]
[40.95210266 85.66419983]
[55.85400772 87.37688446]
[72.62326813 63.13909531]
[100.67298126 54.08966446]
[128.44540405 63.95737457]
[139.53671265 53.85872269]
[150.62803650 43.76007462]
[151.52540588 28.20911217]
[162.91744995 18.12564468]
[177.73738098 19.07699585]
[188.82868958 8.97834682]
[174.06723022 11.64276505]
[159.07031250 11.33872223]
[144.42897034 8.07820225]
[130.72019958 1.98969972]
[118.48428345 -6.68683815]
[108.20342255 -17.60947227]
[100.28279114 -30.34774208]
[95.03453064 -44.39963531]
[92.66547394 -59.21137619]
[93.26898956 -74.19922638]
[96.82129669 -88.77252960]
[103.18238831 -102.35694885]
[112.10158539 -114.41712952]
[123.22737885 -124.47778320]
[136.12130737 -132.14241028]
[150.27522278 -137.10896301]
[165.13133240 -139.18171692]
[180.10414124 -138.27896118]
[194.60357666 -134.43629456]
[208.05824280 -127.80514526]
[219.93786621 -118.64684296]
[229.77429199 -107.32232666]
[237.17987061 -94.27788544]
[241.86273193 -80.02759552]
[243.63833618 -65.13305664]
[242.43672180 -50.18126678]
[238.30522156 -35.76146317]
[231.40666199 -22.44193268]
[222.01290894 -10.74759293]
[210.49595642 -1.14051437]
[220.05860901 -13.43659115]
[235.16065979 -15.27579594]
[246.82415771 -6.08349609]
[261.68719482 -8.10583019]
[276.55026245 -10.12816525]
[291.41329956 -12.15049934]
[306.27633667 -14.17283440]
[317.09292603 -26.02109528]
[333.09002686 -24.80790520]
[341.99606323 -11.46391678]
[336.97909546 3.77450132]
[321.88766479 9.21774006]
[308.29867554 0.69021297]
[293.43563843 2.71254730]
[278.57260132 4.73488188]
[263.70953369 6.75721645]
[248.84649658 8.77955055]
[240.06303406 20.75395775]
[225.01860046 23.01662254]
[212.51829529 13.72253227]
[198.92733765 20.06966209]
[187.83602905 30.16831207]
[187.39775085 45.01228333]
[176.29342651 55.41175079]
[160.72668457 54.85139084]
[149.63536072 64.95004272]
[138.54405212 75.04869080]
[141.67797852 80.73452759]
[143.97860718 86.80554962]
[145.39996338 93.14037323]
[145.91363525 99.61234283]
[145.50932312 106.09207153]
[144.19512939 112.44998932]
[141.99732971 118.55899048]
[138.95985413 124.29693604]
[135.14344788 129.54910278]
[130.62440491 134.21049500]
[125.49307251 138.18788147]
[119.85205078 141.40177917]
[113.81412506 143.78791809]
[107.50000000 145.29858398]
[107.50000000 160.29858398]
[107.50000000 175.29858398]
[107.50000000 190.29858398]
[107.50000000 205.29858398]
[107.50000000 220.29858398]
[107.50000000 235.29858398]
[107.50000000 250.29858398]
[107.50000000 265.29858398]
[107.50000000 280.29858398]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[20 61]
[21 60]
[22 59]
[23 58]
[24 57]
[25 56]
[26 55]
[27 54]
[29 52]
[30 51]
[31 50]
[34 49]
[35 48]
[64 127]
[65 126]
[66 125]
[69 122]
[70 121]
[100 120]
[103 117]
[104 116]
[105 115]
[106 114]
[107 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
