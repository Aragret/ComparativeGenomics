%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGCCUAGCCGUUUACUCAAUCCUCUGAUCAGGGUGAGCAUCAAACUCAAACUACGCCCUGAxxxxxxxxxxUAUUGUGCCUAUUGCCAUACUAGUCUUUGCCGCCUGCGAAGCAGCGGUGGGCCUAGCCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[105.11915588 377.48071289]
[107.71015167 358.27297974]
[108.02220917 343.27621460]
[108.33426666 328.27947998]
[108.64632416 313.28271484]
[108.95838165 298.28594971]
[109.27043915 283.28921509]
[109.58248901 268.29244995]
[109.89454651 253.29570007]
[110.20660400 238.29895020]
[110.51866150 223.30218506]
[109.27178955 208.35411072]
[106.47946167 193.61630249]
[103.05404663 190.20425415]
[101.77677155 184.58288574]
[103.89094543 178.20809937]
[101.71410370 163.36689758]
[99.53726959 148.52569580]
[97.36043549 133.68449402]
[95.18359375 118.84328461]
[80.48516846 108.28077698]
[80.06095886 88.63812256]
[96.70978546 75.52114868]
[89.52727509 62.35256577]
[82.34476471 49.18398285]
[45.19621658 24.43949318]
[34.10490036 14.34084320]
[23.01358414 4.24219322]
[11.92226887 -5.85645628]
[-3.56978655 2.80562568]
[-21.05718040 5.70242453]
[-38.46854019 2.50698590]
[-53.74698639 -6.38697958]
[-65.09309387 -19.91352844]
[-71.17684937 -36.46221542]
[-71.29350281 -54.06982422]
[-65.44520569 -70.65326691]
[-77.33758545 -79.79499817]
[-89.22996521 -88.93672943]
[-101.12234497 -98.07846832]
[-113.01472473 -107.22019958]
[-124.90710449 -116.36193848]
[-137.43307495 -124.61422729]
[-150.52622986 -131.93333435]
[-163.61938477 -139.25244141]
[-176.71253967 -146.57154846]
[-191.26625061 -140.85110474]
[-206.07554626 -145.87292480]
[-214.14793396 -159.26586914]
[-211.67185974 -174.70617676]
[-199.81646729 -184.90341187]
[-184.17950439 -185.04277039]
[-172.14427185 -175.05842590]
[-169.39343262 -159.66470337]
[-156.30027771 -152.34559631]
[-143.20712280 -145.02648926]
[-130.11396790 -137.70738220]
[-133.81445312 -152.24375916]
[-127.46356201 -165.83296204]
[-113.93832397 -172.31892395]
[-99.36579132 -168.76347351]
[-90.34746552 -156.77723694]
[-90.96874237 -141.79010010]
[-100.94817352 -130.59140015]
[-115.76537323 -128.25431824]
[-103.87299347 -119.11257935]
[-91.98061371 -109.97084808]
[-80.08823395 -100.82910919]
[-68.19585419 -91.68737793]
[-56.30347443 -82.54564667]
[-46.38365173 -90.08021545]
[-34.92564774 -94.99591064]
[-22.60787201 -96.99581909]
[-10.16105175 -95.95584869]
[1.67511225 -91.93241119]
[12.19589996 -85.15937805]
[20.77353859 -76.03450012]
[26.89465332 -65.09603882]
[30.19099998 -52.99103546]
[30.46160889 -40.43704224]
[27.68502808 -28.17955399]
[22.02091789 -16.94777107]
[33.11223602 -6.84912205]
[44.20354843 3.24952745]
[55.29486465 13.34817696]
[70.22983551 11.94580364]
[85.16348267 10.54356956]
[94.18100739 -1.44326282]
[93.36814880 -17.46570969]
[105.48313141 -27.98267937]
[121.23239136 -24.92645264]
[128.53443909 -10.64150429]
[121.78775787 3.91397452]
[106.16783905 7.57426691]
[97.15031433 19.56110001]
[109.84834290 11.57611561]
[124.62283325 14.16734600]
[133.84567261 25.99693298]
[132.75509644 40.95723724]
[121.91417694 51.32421494]
[106.92008972 51.74537659]
[95.51334381 42.00147247]
[102.69585419 55.17005539]
[109.87836456 68.33863831]
[122.81642151 75.92854309]
[137.81561279 75.77250671]
[152.81480408 75.61647034]
[167.81398010 75.46043396]
[182.81317139 75.30439758]
[197.81236267 75.14836121]
[210.01997375 64.73904419]
[225.74154663 67.93455505]
[232.91687012 82.28357697]
[226.04162598 96.77877045]
[210.38990784 100.30065918]
[197.96839905 90.14755249]
[182.96920776 90.30358887]
[167.97001648 90.45962524]
[152.97084045 90.61566162]
[137.97164917 90.77169800]
[122.97245789 90.92773438]
[122.85123444 102.11625671]
[117.95185852 111.27523041]
[110.02480316 116.66644287]
[112.20163727 131.50764465]
[114.37847137 146.34886169]
[116.55531311 161.19006348]
[118.73214722 176.03126526]
[121.21726990 190.82397461]
[124.00959015 205.56178284]
[131.01937866 192.30044556]
[143.64694214 184.20449829]
[158.62368774 183.36952209]
[172.07292175 190.01167297]
[180.51335144 202.41163635]
[181.76019287 217.35972595]
[175.49072266 230.98667908]
[163.32775879 239.76518250]
[148.41964722 241.42295837]
[134.62530518 235.53089905]
[125.51541138 223.61424255]
[125.20336151 238.61100769]
[124.89130402 253.60775757]
[124.57924652 268.60452271]
[124.26718903 283.60125732]
[123.95513153 298.59802246]
[123.64307404 313.59475708]
[123.33102417 328.59152222]
[123.01896667 343.58828735]
[122.70690918 358.58502197]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 142]
[11 141]
[12 130]
[13 129]
[16 128]
[17 127]
[18 126]
[19 125]
[20 124]
[23 104]
[24 103]
[25 102]
[26 85]
[27 84]
[28 83]
[29 82]
[37 70]
[38 69]
[39 68]
[40 67]
[41 66]
[42 65]
[43 57]
[44 56]
[45 55]
[46 54]
[87 95]
[88 94]
[105 121]
[106 120]
[107 119]
[108 118]
[109 117]
[110 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
