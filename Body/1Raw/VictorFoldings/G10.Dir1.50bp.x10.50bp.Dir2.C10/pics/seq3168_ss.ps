%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACACCCACCCAAGAACAGGGUUUGUUAAGAUGGCAGAGCCCGGUAAUCGCAUAAAACUUAxxxxxxxxxxGGCCGGAGCAGGAACAGGUUGAACAGUCUACCCUCCCUUAGCAGGGAACUACUCCCACCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[94.12199402 272.69461060]
[94.12199402 257.69461060]
[94.12199402 242.69459534]
[94.12199402 227.69459534]
[94.12199402 212.69459534]
[94.12199402 197.69459534]
[94.12199402 182.69459534]
[94.12199402 167.69459534]
[94.12199402 152.69459534]
[94.12199402 137.69459534]
[89.37833405 132.70942688]
[86.03794861 127.26436615]
[84.11262512 121.67254639]
[72.22024536 130.81428528]
[60.32786560 139.95602417]
[48.43548584 149.09774780]
[51.11854172 164.16625977]
[46.48053741 178.75212097]
[35.58724594 189.50363159]
[20.94187355 193.95014954]
[5.90981245 191.06991577]
[-6.05467606 181.52478027]
[-12.20224190 167.50814819]
[-11.12021732 152.24093628]
[-3.05724573 139.23143005]
[10.13386250 131.46913147]
[25.42188644 130.73776245]
[39.29375076 137.20536804]
[51.18613052 128.06364441]
[63.07851028 118.92190552]
[74.97088623 109.78016663]
[74.06436157 85.94949341]
[93.45092773 68.55274200]
[86.82242584 55.09677505]
[80.19393158 41.64080811]
[73.56542969 28.18484306]
[57.07405472 26.68727303]
[44.01898575 16.78516006]
[38.25442123 1.63275373]
[23.15338707 8.02734184]
[10.22980022 -2.06785321]
[12.77834129 -18.26775932]
[28.17728996 -23.90730286]
[40.58552551 -13.18500423]
[42.67030334 -17.08543015]
[45.31907272 -20.62713432]
[48.47132492 -23.72921753]
[52.05506516 -26.32082748]
[47.74748230 -40.68901062]
[43.29066467 -55.01160812]
[38.68510056 -69.28707123]
[34.07953644 -83.56253052]
[29.47397232 -97.83798981]
[24.86840820 -112.11344910]
[9.87714958 -110.67253113]
[-5.07332182 -112.48842621]
[-19.28374481 -117.47620392]
[-32.08947372 -125.40257263]
[-42.89156342 -135.89680481]
[-51.18477631 -148.46807861]
[-56.58122253 -162.52838135]
[-58.82850647 -177.42012024]
[-57.82151794 -192.44676208]
[-53.60734940 -206.90550232]
[-46.38311005 -220.12005615]
[-36.48669052 -231.47236633]
[-24.38096237 -240.43145752]
[-10.63213348 -246.57830811]
[4.11673832 -249.62541199]
[19.17582130 -249.43026733]
[33.84077454 -246.00196838]
[47.42569351 -239.50088501]
[59.29518509 -230.23107910]
[68.89409637 -218.62612915]
[75.77346039 -205.22879028]
[79.61151886 -190.66571045]
[80.22876740 -175.61802673]
[77.59632874 -160.78952026]
[71.83732605 -146.87377930]
[63.22111893 -134.52165222]
[52.15070343 -124.31086731]
[39.14386749 -116.71901703]
[43.74943161 -102.44355774]
[48.35499573 -88.16809082]
[52.96056366 -73.89263153]
[57.56612778 -59.61717224]
[62.64588928 -54.18194962]
[62.11566544 -44.99659348]
[66.42324829 -30.62841034]
[83.63154602 -25.98783493]
[95.08202362 -12.14299679]
[96.43278503 5.91641283]
[87.02139282 21.55634499]
[93.64989471 35.01231003]
[100.27838898 48.46827698]
[106.90689087 61.92424011]
[120.86727905 67.41127014]
[134.88398743 62.06975937]
[148.90071106 56.72824860]
[159.04098511 44.58389282]
[173.68920898 47.28180313]
[187.70591736 41.94028854]
[197.63183594 28.88623619]
[213.86358643 31.22343636]
[219.70332336 46.54758072]
[209.14364624 59.09450150]
[193.04743958 55.95700455]
[179.03073120 61.29851532]
[169.89302063 73.06080627]
[154.24221802 70.74495697]
[140.22550964 76.08647156]
[126.20879364 81.42798615]
[134.17234802 91.82732391]
[137.73878479 105.58730316]
[152.06138611 110.04412079]
[166.38397217 114.50093842]
[180.70657349 118.95774841]
[195.02917480 123.41456604]
[210.89834595 119.27917480]
[222.22007751 131.14300537]
[217.34754944 146.80155945]
[201.29319763 150.14666748]
[190.57235718 137.73716736]
[176.24975586 133.28034973]
[161.92716980 128.82353210]
[147.60456848 124.36671448]
[133.28196716 119.90990448]
[127.24197388 124.35607910]
[137.67453003 135.13391113]
[148.10707092 145.91175842]
[158.53962708 156.68960571]
[171.48367310 164.26928711]
[175.19680786 178.80244446]
[167.47489929 191.66215515]
[152.90168762 195.21485901]
[140.12788391 187.35165405]
[136.73612976 172.73963928]
[129.54475403 159.57589722]
[122.35337067 146.41217041]
[115.16198730 133.24842834]
[109.12199402 137.69459534]
[109.12199402 152.69459534]
[109.12199402 167.69459534]
[109.12199402 182.69459534]
[109.12199402 197.69459534]
[109.12199402 212.69459534]
[109.12199402 227.69459534]
[109.12199402 242.69459534]
[109.12199402 257.69461060]
[109.12199402 272.69461060]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[13 31]
[14 30]
[15 29]
[16 28]
[33 96]
[34 95]
[35 94]
[36 93]
[39 44]
[48 89]
[49 88]
[50 86]
[51 85]
[52 84]
[53 83]
[54 82]
[97 112]
[98 111]
[99 110]
[101 108]
[102 107]
[114 127]
[115 126]
[116 125]
[117 124]
[118 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
