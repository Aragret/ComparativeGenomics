%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUCACUCUCUCAAUCUUAUCCAUCAUAGCAGGCAGUUGAGGUGGAUUAAACCAAACCCAxxxxxxxxxxAUAGUACUUGCCGCAGUACUCUUAAAACUAGGCGGCUAUGGUAUAAUACGCCUCACACUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 247.56187439]
[92.50000000 232.56187439]
[92.50000000 217.56187439]
[92.50000000 202.56187439]
[92.50000000 187.56187439]
[92.50000000 172.56187439]
[92.50000000 157.56187439]
[92.50000000 142.56187439]
[92.50000000 127.56187439]
[92.50000000 112.56187439]
[80.60762024 103.42013550]
[66.11202240 107.27729797]
[51.61642838 111.13446045]
[37.12083054 114.99161530]
[22.62523460 118.84877777]
[8.17054558 122.85651398]
[-6.24167061 127.01440430]
[-20.56426811 131.47122192]
[-34.79104614 136.22503662]
[-48.96760559 141.12658691]
[-63.09240723 146.17533875]
[-63.15518188 161.33357239]
[-68.40149689 175.55509949]
[-78.19784546 187.12261963]
[-91.36125946 194.63928223]
[-106.30220032 197.19741821]
[-121.21647644 194.48814392]
[-134.30311584 186.83857727]
[-143.98182678 175.17247009]
[-149.08389282 160.89854431]
[-148.99317932 145.74046326]
[-143.72067261 131.52862549]
[-133.90301514 119.97917938]
[-120.72577667 112.48678589]
[-105.78014374 109.95617676]
[-90.87088776 112.69294739]
[-77.79837036 120.36660767]
[-68.14116669 132.05053711]
[-54.01636124 127.00178528]
[-48.74228668 121.75489807]
[-39.54486084 121.99825287]
[-25.31808281 117.24443817]
[-22.39901543 113.39027405]
[-17.00116920 111.36677551]
[-10.39955807 112.60218811]
[4.01265812 108.44429779]
[9.60373783 103.53660583]
[18.76807404 104.35317993]
[33.26367188 100.49601746]
[47.75926590 96.63886261]
[62.25486374 92.78170013]
[76.75045776 88.92453766]
[103.05568695 82.03208923]
[112.32063293 70.23544312]
[114.75955200 54.60335541]
[128.70565796 49.37313080]
[137.97061157 37.57649231]
[147.23556519 25.77985191]
[156.50051880 13.98321152]
[158.93942261 -1.64887881]
[172.88554382 -6.87910223]
[182.15048218 -18.67574120]
[191.41543579 -30.47238159]
[200.68038940 -42.26902390]
[186.64282227 -36.98254776]
[171.73944092 -35.28282547]
[156.87200928 -37.27270508]
[142.94015503 -42.83177948]
[130.78686523 -51.62367630]
[121.14751434 -63.11641312]
[114.60536957 -76.61457825]
[111.55629730 -91.30141449]
[112.18478394 -106.28823853]
[116.45280457 -120.66822815]
[124.10210419 -133.57125854]
[134.66983032 -144.21659851]
[147.51655579 -151.96009827]
[161.86492920 -156.33320618]
[176.84675598 -157.07133484]
[191.55549622 -154.12979126]
[205.10116577 -147.68659973]
[216.66412354 -138.13159180]
[225.54470825 -126.04295349]
[231.20556641 -112.15213776]
[233.30416870 -97.29966736]
[231.71354675 -82.38424683]
[226.52992249 -68.30838013]
[218.06826782 -55.92526245]
[227.43128967 -68.67847443]
[242.21926880 -66.89950562]
[255.87551880 -73.10491180]
[269.53176880 -79.31031799]
[283.18798828 -85.51572418]
[296.84423828 -91.72113037]
[310.36843872 -98.20929718]
[323.75469971 -104.97740936]
[337.14099121 -111.74552917]
[338.62612915 -127.10124207]
[348.19534302 -139.20220947]
[362.79516602 -144.18705750]
[377.76684570 -140.46513367]
[388.33294678 -129.22409058]
[391.12188721 -114.05091095]
[385.24371338 -99.78730011]
[372.57415771 -90.98471832]
[357.15597534 -90.45204163]
[343.90911865 -98.35923767]
[330.52282715 -91.59112549]
[317.13653564 -84.82301331]
[314.80770874 -80.58602905]
[309.76065063 -77.80059814]
[303.04965210 -78.06488800]
[289.39340210 -71.85948181]
[275.73715210 -65.65407562]
[262.08093262 -59.44866943]
[248.42468262 -53.24326324]
[240.03843689 -40.93390656]
[224.27366638 -42.26902390]
[212.47703552 -33.00407410]
[203.21208191 -21.20743370]
[193.94712830 -9.41079330]
[184.68217468 2.38584709]
[182.90596008 17.17416382]
[168.29714966 23.24816132]
[159.03219604 35.04479980]
[149.76725769 46.84144211]
[140.50230408 58.63808060]
[138.72607422 73.42639923]
[124.11727905 79.50039673]
[114.85232544 91.29703522]
[127.18659210 82.76088715]
[142.10621643 81.21017456]
[155.93232727 87.02727509]
[165.25569153 98.77780151]
[167.77734375 113.56432343]
[162.87550354 127.74078369]
[151.75888062 137.81155396]
[137.16857910 141.29338074]
[122.70228577 137.32774353]
[111.92709351 126.89244843]
[107.50000000 112.56187439]
[107.50000000 127.56187439]
[107.50000000 142.56187439]
[107.50000000 157.56187439]
[107.50000000 172.56187439]
[107.50000000 187.56187439]
[107.50000000 202.56187439]
[107.50000000 217.56187439]
[107.50000000 232.56187439]
[107.50000000 247.56187439]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 52]
[12 51]
[13 50]
[14 49]
[15 48]
[16 46]
[17 45]
[18 42]
[19 41]
[20 39]
[21 38]
[53 130]
[54 129]
[56 127]
[57 126]
[58 125]
[59 124]
[61 122]
[62 121]
[63 120]
[64 119]
[88 118]
[90 116]
[91 115]
[92 114]
[93 113]
[94 112]
[95 109]
[96 108]
[97 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
