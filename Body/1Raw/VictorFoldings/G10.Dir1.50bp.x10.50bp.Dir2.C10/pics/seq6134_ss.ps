%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAUCAACUGGCUUCAAUCUACUUCUCCCGCCGCCGGGAAAAAAGGCGGGAGAAGCCCCGGCxxxxxxxxxxACGCAUCCUUUACAUAACAGACGAGGUCAACGAUCCCUCCCUUACCAUCAAAUCAAUUGGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 253.90379333]
[92.50000000 238.90379333]
[92.50000000 223.90379333]
[92.50000000 208.90379333]
[92.50000000 193.90379333]
[92.50000000 178.90379333]
[92.50000000 163.90379333]
[92.50000000 148.90379333]
[92.50000000 133.90379333]
[92.50000000 118.90379333]
[91.64858246 133.87960815]
[82.52955627 145.78941345]
[68.29420471 150.51750183]
[53.86187363 146.42997742]
[44.21998215 134.93937683]
[42.70049667 120.01653290]
[49.82851410 106.81837463]
[63.14078522 99.90581512]
[78.03727722 101.66779327]
[63.26516342 99.06307220]
[48.49304581 96.45835114]
[33.72092819 93.85362244]
[43.66469193 105.08401489]
[46.79400253 119.75395966]
[42.29848099 134.06445312]
[31.34231186 144.30957031]
[16.76276779 147.83616638]
[2.33545232 143.73098755]
[-8.20345402 133.05711365]
[-12.12473392 118.57872772]
[-8.41291046 104.04524231]
[1.97078061 93.22031403]
[16.33633041 88.90727997]
[2.40561438 83.34534454]
[-11.52510166 77.78340912]
[-25.45581818 72.22146606]
[-39.38653564 66.65953064]
[-53.31724930 61.09759521]
[-67.24796295 55.53565598]
[-81.17868042 49.97372055]
[-95.10939789 44.41178131]
[-106.32388306 54.76543427]
[-120.92257690 59.21975327]
[-136.00689697 56.89033890]
[-148.58183289 48.23969269]
[-156.15063477 34.98540878]
[-157.21049500 19.75913620]
[-151.55099487 5.58405828]
[-140.29582214 -4.72534943]
[-125.67971039 -9.12214756]
[-110.60468292 -6.73334885]
[-98.06390381 1.96674931]
[-90.54736328 15.25073624]
[-89.54746246 30.48106575]
[-75.61674500 36.04300308]
[-61.68602753 41.60494232]
[-47.75531387 47.16687775]
[-33.82459641 52.72881699]
[-19.89388084 58.29075241]
[-5.96316433 63.85269165]
[7.96755171 69.41462708]
[21.89826775 74.97656250]
[36.32565308 79.08151245]
[51.09777069 81.68623352]
[65.86988831 84.29095459]
[80.64199829 86.89567566]
[90.58090210 81.66802979]
[100.47184753 82.16221619]
[107.59012604 86.97190094]
[119.17917633 77.44856262]
[112.46907043 63.96596527]
[108.92932892 49.33522415]
[108.73436737 34.29085922]
[111.89073181 19.58742905]
[118.23699188 5.96167231]
[127.45194244 -5.90440464]
[139.07089233 -15.41765976]
[152.50907898 -22.10346603]
[167.09112549 -25.62939453]
[182.08494568 -25.82173538]
[196.73851013 -22.67405891]
[210.31759644 -16.34737206]
[222.14251709 -7.16189098]
[233.73156738 -16.68522835]
[232.48490906 -33.52405548]
[241.41262817 -47.65998077]
[256.84399414 -53.65032196]
[272.65118408 -49.32786179]
[284.04223633 -59.08713531]
[295.43331909 -68.84641266]
[290.68045044 -83.28520203]
[291.81985474 -98.44337463]
[298.67779541 -112.00941467]
[310.20843506 -121.91459656]
[324.65347290 -126.64846039]
[339.81011963 -125.48911285]
[353.36712646 -118.61335754]
[363.25714111 -107.06969452]
[367.97198486 -92.61844635]
[366.79269409 -77.46331787]
[359.89910889 -63.91537094]
[348.34246826 -54.04055786]
[333.88500977 -49.34471893]
[318.73147583 -50.54393768]
[305.19259644 -57.45533371]
[293.80151367 -47.69606018]
[282.41043091 -37.93678665]
[284.70758057 -24.75060844]
[280.13781738 -12.05477142]
[269.79904175 -3.21649289]
[256.33392334 -0.63615853]
[243.25489807 -5.09617996]
[231.66584778 4.42715740]
[238.38508606 17.80825424]
[241.95973206 32.35611343]
[242.20739746 47.34189224]
[239.11242676 62.01406479]
[232.82690430 75.63612366]
[223.66314697 87.52354431]
[212.07820129 97.07817078]
[198.65101624 103.81833649]
[184.05357361 107.40313721]
[169.01719666 107.64965820]
[154.29592896 104.54231262]
[140.62878418 98.23381042]
[128.70251465 89.03761292]
[117.11346436 98.56095123]
[128.78712463 89.14152527]
[143.02517700 84.42158508]
[158.01393127 85.00235748]
[171.84407043 90.80987549]
[182.75387573 101.10434723]
[189.35362244 114.57443237]
[190.80262756 129.50428772]
[186.91627502 143.99208069]
[178.18966675 156.19233704]
[165.73439026 164.55093384]
[151.13705444 168.00314331]
[136.25711060 166.10920715]
[122.98999023 159.11036682]
[113.02571869 147.89817810]
[107.63356781 133.90086365]
[107.50000000 118.90379333]
[107.50000000 133.90379333]
[107.50000000 148.90379333]
[107.50000000 163.90379333]
[107.50000000 178.90379333]
[107.50000000 193.90379333]
[107.50000000 208.90379333]
[107.50000000 223.90379333]
[107.50000000 238.90379333]
[107.50000000 253.90379333]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[19 66]
[20 65]
[21 64]
[22 63]
[33 62]
[34 61]
[35 60]
[36 59]
[37 58]
[38 57]
[39 56]
[40 55]
[41 54]
[69 127]
[70 126]
[83 113]
[84 112]
[88 107]
[89 106]
[90 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
