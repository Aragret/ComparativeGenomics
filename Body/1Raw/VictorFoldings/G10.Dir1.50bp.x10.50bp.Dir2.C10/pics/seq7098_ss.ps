%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUACACCCUAGACCAAACCUACGCCAAAAUCCAUUUCACUAUCAUAUUCAUCGGCGUAAAUxxxxxxxxxxCGAUGAGGCAACCAGCCAGAACGCCUGAACGCAGGCACAUACUUCCUAUUCUACACCCUAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[125.20559692 296.48327637]
[125.20559692 281.48327637]
[125.20559692 266.48327637]
[125.20559692 251.48327637]
[125.20559692 236.48327637]
[125.20559692 221.48327637]
[125.20559692 206.48327637]
[125.20559692 191.48327637]
[125.20559692 176.48327637]
[125.20559692 161.48327637]
[90.09576416 158.00553894]
[65.93262482 138.27563477]
[58.12783432 112.28235626]
[65.30088043 90.29013824]
[52.01354218 83.32978058]
[42.17048264 95.66453552]
[30.13382530 105.86303711]
[16.35797119 113.54254150]
[1.36253691 118.41538239]
[-14.28724384 120.29969025]
[-30.00181961 119.12622833]
[-45.18954086 114.94091797]
[-59.27892303 107.90304565]
[-71.74015808 98.27917480]
[-82.10504150 86.43311310]
[-89.98455048 72.81208801]
[-95.08345795 57.92991638]
[-97.21138763 42.34759521]
[-96.28992462 26.65215874]
[-92.35548401 11.43456745]
[-105.91738129 5.02559233]
[-119.47927856 -1.38338351]
[-133.04116821 -7.79235888]
[-146.60307312 -14.20133495]
[-160.16496277 -20.61030960]
[-174.59234619 -24.71525574]
[-189.49679565 -26.40565300]
[-204.40124512 -28.09605026]
[-217.79670715 -19.26762009]
[-233.00575256 -24.37297821]
[-238.36129761 -39.49573135]
[-229.75502014 -53.03499985]
[-213.78894043 -54.60461044]
[-202.71084595 -43.00049591]
[-187.80639648 -41.31010056]
[-172.90196228 -39.61970139]
[-184.59512329 -49.01490784]
[-192.45069885 -61.79340363]
[-195.55484009 -76.46869659]
[-193.54647827 -91.33364105]
[-186.65922546 -104.65901947]
[-175.69425964 -114.89471436]
[-161.92710876 -120.85003662]
[-146.95930481 -121.83220673]
[-132.53199768 -117.72697449]
[-120.32350159 -109.01189423]
[-111.75400543 -96.70077515]
[-107.82038116 -82.22573853]
[-108.98021698 -67.27065277]
[-115.09859467 -53.57519531]
[-125.46377563 -42.73254776]
[-138.86999512 -36.00400543]
[-153.75599670 -34.17220688]
[-140.19409180 -27.76323128]
[-126.63220215 -21.35425568]
[-113.07030487 -14.94528008]
[-99.50840759 -8.53630447]
[-85.94651031 -2.12732840]
[-77.64805603 -13.72801590]
[-67.44076538 -23.69565773]
[-55.64029312 -31.72024345]
[-42.61187744 -37.55188370]
[-28.75902939 -41.00857544]
[-14.51103878 -41.98191071]
[-0.30966377 -40.44044495]
[13.40455914 -36.43072891]
[26.20598221 -30.07589722]
[37.69706345 -21.57189369]
[47.52069473 -11.18142509]
[55.37132645 0.77415401]
[61.00444794 13.92477894]
[64.24420929 27.86313057]
[64.98891449 42.15725327]
[63.21421432 56.36392975]
[58.97389603 70.04244232]
[72.26123810 77.00279999]
[96.89102173 48.85369873]
[145.64143372 51.70532990]
[155.04528809 40.01912308]
[164.44914246 28.33291435]
[164.15953064 12.29247570]
[176.61122131 2.17641687]
[192.25236511 5.74491310]
[199.08441162 20.26051903]
[191.86639404 34.58810425]
[176.13534546 37.73677063]
[166.73149109 49.42298126]
[157.32763672 61.10918808]
[161.14411926 67.56553650]
[171.06613159 56.31592560]
[184.83120728 62.27601242]
[183.41644287 77.20914459]
[168.77709961 80.47823334]
[172.59358215 86.93458557]
[187.36569214 84.32986450]
[202.13781738 81.72513580]
[216.90992737 79.12041473]
[231.68203735 76.51569366]
[243.88987732 65.56576538]
[259.39047241 70.91958618]
[262.23815918 87.06958771]
[249.50346375 97.40204620]
[234.28675842 91.28781128]
[219.51464844 93.89253235]
[204.74253845 96.49725342]
[189.97041321 99.10197449]
[175.19830322 101.70670319]
[174.27664185 109.14985657]
[172.43331909 124.03616333]
[171.51165771 131.47930908]
[185.20227051 137.60848999]
[198.89289856 143.73767090]
[214.33436584 139.38554382]
[227.27998352 148.86132812]
[227.79901123 164.89598083]
[215.49327087 175.18910217]
[199.80268860 171.84469604]
[192.76373291 157.42828369]
[179.07310486 151.29911804]
[165.38247681 145.16993713]
[159.08825684 149.24827576]
[168.16442871 161.19076538]
[177.24060059 173.13325500]
[186.31677246 185.07574463]
[198.33374023 194.05307007]
[197.83404541 209.04475403]
[185.24595642 217.20195007]
[171.35826111 211.53343201]
[168.07397461 196.89614868]
[160.88258362 183.73242188]
[153.69120789 170.56867981]
[146.49981689 157.40493774]
[140.20559692 161.48327637]
[140.20559692 176.48327637]
[140.20559692 191.48327637]
[140.20559692 206.48327637]
[140.20559692 221.48327637]
[140.20559692 236.48327637]
[140.20559692 251.48327637]
[140.20559692 266.48327637]
[140.20559692 281.48327637]
[140.20559692 296.48327637]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[14 86]
[15 85]
[30 68]
[31 67]
[32 66]
[33 65]
[34 64]
[35 63]
[36 46]
[37 45]
[38 44]
[88 98]
[89 97]
[90 96]
[104 117]
[105 116]
[106 115]
[107 114]
[108 113]
[120 130]
[121 129]
[122 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
