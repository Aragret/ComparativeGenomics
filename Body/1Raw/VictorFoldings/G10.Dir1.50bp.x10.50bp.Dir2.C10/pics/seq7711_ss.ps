%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCGAUCCCUCCCUUACCAUCAAAUCAAUUGGCCACCAAUGGUACUGAACCUACGAGUACACCGxxxxxxxxxxCUCCCCACAUCAAGCCCGAAUGAUAUUUCCUAUUCGCCUACACAAUUCUCCGAUCCGUCCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[50.68340683 262.84274292]
[41.61714172 259.81655884]
[32.73511124 256.28604126]
[24.06534576 252.26232910]
[16.78581619 265.37753296]
[9.50628757 278.49273682]
[2.22675824 291.60794067]
[-5.05277109 304.72311401]
[-12.33230114 317.83831787]
[-19.61182976 330.95352173]
[-18.79400063 347.33227539]
[-32.71442413 356.00140381]
[-47.05296326 348.04284668]
[-47.05935669 331.64370728]
[-32.72702789 323.67398071]
[-25.44750023 310.55880737]
[-18.16797066 297.44360352]
[-10.88844109 284.32839966]
[-3.60891151 271.21319580]
[3.67061782 258.09799194]
[10.95014763 244.98280334]
[0.49659103 238.01797485]
[-9.41464138 230.30090332]
[-18.72953033 221.87365723]
[-27.39730835 212.78215027]
[-35.37073135 203.07595825]
[-42.60634232 192.80796814]
[-49.06470871 182.03414917]
[-54.71062469 170.81321716]
[-59.51331711 159.20632935]
[-63.44661713 147.27674866]
[-66.48908234 135.08950806]
[-68.62413788 122.71100616]
[-69.84013367 110.20872498]
[-70.13044739 97.65080261]
[-69.49350739 85.10568237]
[-84.36351776 83.13523102]
[-99.23353577 81.16477966]
[-114.10354614 79.19432831]
[-128.97355652 77.22387695]
[-145.46969604 81.13713837]
[-153.79661560 66.36896515]
[-141.91072083 54.27923584]
[-127.00310516 62.35386276]
[-112.13309479 64.32431030]
[-97.26308441 66.29476166]
[-82.39306641 68.26521301]
[-67.52305603 70.23566437]
[-51.20843887 21.98784447]
[-21.34498215 -19.26979446]
[-31.56877899 -30.24585724]
[-41.79257584 -41.22192001]
[-52.01637268 -52.19798279]
[-62.24017334 -63.17404938]
[-77.40316010 -60.33024597]
[-91.68794250 -66.15678406]
[-100.53629303 -78.79443359]
[-101.12474060 -94.21057129]
[-93.26550293 -107.48596191]
[-79.46644592 -114.38447571]
[-64.13079071 -112.70481873]
[-52.15209198 -102.98297119]
[-47.35271072 -88.32112885]
[-51.26410675 -73.39784241]
[-41.04030991 -62.42178345]
[-30.81651306 -51.44571686]
[-20.59271622 -40.46965408]
[-10.36891937 -29.49359131]
[-2.14929771 -36.07133865]
[6.46138191 -42.12816620]
[15.43015575 -47.64088058]
[24.72268867 -52.58838272]
[34.30340576 -56.95173264]
[44.13563156 -60.71422195]
[54.18172073 -63.86144638]
[64.40321350 -66.38136292]
[74.76098633 -68.26432037]
[85.21537781 -69.50310516]
[95.72637177 -70.09298706]
[106.25373077 -70.03170013]
[116.75714111 -69.31948090]
[127.19640350 -67.95905304]
[137.53155518 -65.95562744]
[147.72300720 -63.31687927]
[157.73178101 -60.05289841]
[167.51953125 -56.17618942]
[177.04879761 -51.70158768]
[186.28309631 -46.64622879]
[195.18707275 -41.02946472]
[203.72665405 -34.87279510]
[211.86912537 -28.19979095]
[219.58334351 -21.03599930]
[226.83975220 -13.40884686]
[233.61058044 -5.34752989]
[239.86990356 3.11708951]
[245.59376526 11.95260525]
[250.76025391 21.12519455]
[255.34957886 30.59973907]
[259.34417725 40.33996964]
[273.61004639 35.70471573]
[287.87588501 31.06945992]
[302.14172363 26.43420410]
[316.40756226 21.79895020]
[319.52233887 6.75920868]
[329.75164795 -4.69752455]
[344.34387207 -9.48944664]
[359.37377930 -6.32755423]
[370.79840088 3.93761969]
[375.54455566 18.54479408]
[372.33557129 33.56471252]
[362.03463745 44.95709229]
[347.41265869 49.65744400]
[332.40286255 46.40139008]
[321.04281616 36.06479645]
[306.77697754 40.70005035]
[292.51113892 45.33530807]
[278.24530029 49.97056198]
[263.97943115 54.60581589]
[266.26971436 63.88534546]
[268.03530884 73.27883911]
[269.27066040 82.75665283]
[269.97183228 92.28887939]
[270.13665771 101.84543610]
[269.76458740 111.39617920]
[268.85681152 120.91094971]
[267.41616821 130.35974121]
[265.44723511 139.71272278]
[262.95620728 148.94038391]
[259.95095825 158.01362610]
[256.44094849 166.90377808]
[252.43728638 175.58280945]
[247.95259094 184.02333069]
[243.00099182 192.19871521]
[237.59815979 200.08314514]
[231.76109314 207.65176392]
[225.50825500 214.88066101]
[218.85935974 221.74703979]
[211.83538818 228.22923279]
[204.45849609 234.30677795]
[196.75198364 239.96051025]
[188.74015808 245.17256165]
[180.44828796 249.92651367]
[171.90257263 254.20735168]
[163.12994385 258.00158691]
[154.15811157 261.29721069]
[145.01536560 264.08383179]
[135.73057556 266.35269165]
[126.33303070 268.09658813]
[116.85238647 269.31002808]
[107.31856537 269.98919678]
[97.76165009 270.13195801]
[88.21179962 269.73782349]
[78.69914246 268.80807495]
[69.25370789 267.34561157]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 21]
[5 20]
[6 19]
[7 18]
[8 17]
[9 16]
[10 15]
[36 48]
[37 47]
[38 46]
[39 45]
[40 44]
[50 68]
[51 67]
[52 66]
[53 65]
[54 64]
[99 118]
[100 117]
[101 116]
[102 115]
[103 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
