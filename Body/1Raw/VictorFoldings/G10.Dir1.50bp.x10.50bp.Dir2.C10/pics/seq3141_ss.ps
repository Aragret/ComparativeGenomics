%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:33:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUUAUACCCACACCCACCCAAGAACAGGGUUUGUUAAGAUGGCAGAGCCCGGUAAUCGCAxxxxxxxxxxGUUCAAUUCCUCUUCUUAACAACAUACCCAUGGCCAACCUCCUACUCCUCAUUGUACCCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[106.43020630 141.34498596]
[97.66400146 153.51681519]
[88.89779663 165.68865967]
[87.11125946 181.40867615]
[73.39479065 187.21450806]
[64.62857819 199.38633728]
[55.86237335 211.55818176]
[47.48023224 223.99761963]
[39.49031448 236.69255066]
[31.50039864 249.38748169]
[35.24968338 264.74060059]
[26.97323990 278.20449829]
[11.58133411 281.79122925]
[-1.79428852 273.37289429]
[-5.21810818 257.94393921]
[3.34116602 244.65806580]
[18.80546951 241.39756775]
[26.79538536 228.70263672]
[34.78530121 216.00770569]
[34.32860947 212.44976807]
[35.61391830 208.49380493]
[38.80884933 204.98028564]
[43.69053650 202.79197693]
[52.45674515 190.62013245]
[61.22294998 178.44830322]
[62.38246918 163.59889221]
[76.72595978 156.92245483]
[85.49216461 144.75061035]
[94.25836945 132.57878113]
[84.55773926 128.43362427]
[76.85929108 121.56579590]
[71.86901855 112.80294037]
[69.98023224 103.13397980]
[71.24558258 93.59826660]
[75.38638306 85.17403412]
[81.83676910 78.67802429]
[89.81644440 74.68666840]
[88.25886536 59.76775742]
[86.70128632 44.84884644]
[85.14369965 29.92993355]
[83.12136841 15.06688690]
[80.63624573 0.27417946]
[78.15113068 -14.51852798]
[75.66601562 -29.31123543]
[73.18089294 -44.10394287]
[70.69577789 -58.89664841]
[68.21065521 -73.68935394]
[65.72554016 -88.48206329]
[63.24042130 -103.27477264]
[60.25153351 -106.62560272]
[58.68379593 -110.38236237]
[58.48657608 -114.03516388]
[59.44470215 -117.14579010]
[61.21742630 -119.39629364]
[59.97055054 -134.34437561]
[58.72367859 -149.29246521]
[57.47680283 -164.24055481]
[42.51020432 -165.76225281]
[28.07811928 -170.00837708]
[14.67210007 -176.83430481]
[2.74874926 -186.00755310]
[-7.28582716 -197.21566772]
[-15.08985519 -210.07691956]
[-20.39753342 -224.15325928]
[-23.02808380 -238.96524048]
[-22.89191055 -254.00837708]
[-19.99365234 -268.77032471]
[-14.43202114 -282.74826050]
[-6.39644575 -295.46612549]
[3.83938551 -306.49075317]
[15.92684460 -315.44665527]
[29.45423698 -322.02877808]
[43.96082306 -326.01293945]
[58.95251846 -327.26342773]
[73.91870117 -325.73770142]
[88.34964752 -321.48770142]
[101.75382233 -314.65814209]
[113.67469788 -305.48168945]
[123.70625305 -294.27087402]
[131.50682068 -281.40753174]
[136.81069946 -267.32974243]
[139.43725586 -252.51705933]
[139.29702759 -237.47395325]
[136.39479065 -222.71279907]
[130.82939148 -208.73635864]
[122.79039001 -196.02066040]
[112.55158997 -184.99879456]
[100.46171570 -176.04615784]
[86.93254852 -169.46768188]
[72.42488861 -165.48742676]
[73.67176819 -150.53933716]
[74.91864014 -135.59126282]
[76.16551208 -120.64316559]
[78.03312683 -105.75988770]
[80.51824188 -90.96718597]
[83.00336456 -76.17447662]
[85.48847961 -61.38176727]
[87.97360229 -46.58906174]
[90.45871735 -31.79635429]
[92.94384003 -17.00364685]
[95.42895508 -2.21093917]
[97.91407776 12.58176804]
[100.62280273 14.93342209]
[102.29622650 18.74148560]
[102.24987793 23.49019432]
[100.06261444 28.37235260]
[101.62019348 43.29126358]
[103.17778015 58.21017838]
[104.73535919 73.12908936]
[121.38176727 80.08896637]
[130.98306274 96.79017639]
[128.31687927 117.10256958]
[143.25117493 118.50486755]
[157.92395020 111.18080139]
[171.45205688 120.45023346]
[169.91894531 136.77755737]
[154.90176392 143.36663818]
[141.84887695 133.43917847]
[126.91456604 132.03688049]
[139.34835815 140.42739868]
[151.78215027 148.81793213]
[164.21592712 157.20845032]
[179.05334473 159.41102600]
[193.17004395 164.48239136]
[206.01710510 172.22532654]
[217.09495544 182.33874512]
[225.97280884 194.42938232]
[232.30545044 208.02708435]
[235.84664917 222.60310364]
[236.45866394 237.59060669]
[234.11773682 252.40681458]
[228.91485596 266.47558594]
[221.05238342 279.24981689]
[210.83601379 290.23281860]
[198.66305542 298.99746704]
[185.00685120 305.20294189]
[170.39843750 308.60794067]
[155.40586853 309.08007812]
[140.61215210 306.60098267]
[126.59254456 301.26705933]
[113.89222717 293.28570557]
[103.00505829 282.96731567]
[94.35438538 270.71307373]
[88.27661133 256.99957275]
[85.00807190 242.36001587]
[84.67585754 227.36369324]
[87.29290009 212.59375000]
[92.75742340 198.62454224]
[100.85746765 185.99859619]
[102.71504211 171.11405945]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 29]
[2 28]
[3 27]
[5 25]
[6 24]
[7 23]
[8 19]
[9 18]
[10 17]
[37 109]
[38 108]
[39 107]
[40 106]
[41 102]
[42 101]
[43 100]
[44 99]
[45 98]
[46 97]
[47 96]
[48 95]
[49 94]
[54 93]
[55 92]
[56 91]
[57 90]
[112 119]
[113 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
