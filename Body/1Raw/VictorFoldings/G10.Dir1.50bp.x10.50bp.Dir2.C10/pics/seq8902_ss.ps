%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUACUAGGCCUACUAACCAACACACUAACCAUAUACCAAUGAUGGCGCGAUGUAACACGAGAxxxxxxxxxxCAUCUCACUUCUAGGAAUACUAGUAUAUCGCUCACACCUCAUAUCCUCCCUACUAUGCCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[138.68783569 363.25646973]
[138.68783569 348.25646973]
[138.68783569 333.25646973]
[138.68783569 318.25646973]
[138.68783569 303.25646973]
[138.68783569 288.25646973]
[138.68783569 273.25646973]
[138.68783569 258.25646973]
[138.68783569 243.25646973]
[138.68783569 228.25646973]
[135.93159485 213.51187134]
[130.51296997 199.52479553]
[116.82617950 193.76222229]
[111.13167572 179.65451050]
[117.26879120 165.33761597]
[111.85016632 151.35054016]
[106.43154144 137.36344910]
[99.66378021 137.91146851]
[92.90679932 137.24349976]
[86.37732697 135.38099670]
[80.28479004 132.38368225]
[74.82459259 128.34768677]
[70.17187500 123.40246582]
[66.47586823 117.70663452]
[63.85511398 111.44288635]
[62.39367294 104.81211090]
[47.43239212 103.73503876]
[32.47111130 102.65797424]
[18.15098572 109.38438416]
[6.01214170 100.75318146]
[-8.94913960 99.67610931]
[-14.86187077 113.61592102]
[-24.98233795 124.87890625]
[-38.21274948 132.24334717]
[-53.11796951 134.91038513]
[-68.08119202 132.59074402]
[-81.47931671 125.53603363]
[-91.85901642 114.51148987]
[-98.09437561 100.71297455]
[-99.50903320 85.63725281]
[-95.94953918 70.91961670]
[-87.80199432 58.15653610]
[-75.95018768 48.73244476]
[-61.67971420 43.66960526]
[-46.53853226 43.51719666]
[-32.16903305 48.29174423]
[-20.12992477 57.47534561]
[-11.72711086 70.07183075]
[-7.87206936 84.71482849]
[7.08921146 85.79190063]
[20.33920479 78.98844910]
[33.54817963 87.69669342]
[48.50946045 88.77375793]
[63.47074127 89.85083008]
[78.73484802 68.61233521]
[104.11921692 62.31148148]
[108.66650391 48.01735306]
[113.21379852 33.72322083]
[117.76108551 19.42909241]
[122.30838013 5.13496256]
[126.85566711 -9.15916729]
[131.40295410 -23.45329857]
[135.95024109 -37.74742889]
[128.34504700 -38.40065002]
[120.54619598 -42.20175171]
[113.69821167 -49.21165085]
[108.94172668 -59.10767365]
[107.29219818 -71.19547272]
[107.90802002 -86.18283081]
[108.52384949 -101.17018127]
[109.13967133 -116.15753937]
[95.64739227 -123.29344177]
[86.59433746 -135.58184814]
[83.77799225 -150.58288574]
[87.75754547 -165.31806946]
[97.74285126 -176.86174011]
[111.75132751 -182.92189026]
[127.00157928 -182.29525757]
[140.46565247 -175.10627747]
[149.47024536 -162.78231812]
[152.22749329 -147.77030945]
[148.18995667 -133.05090332]
[138.15925598 -121.54664612]
[124.12702942 -115.54170990]
[123.51119995 -100.55435944]
[122.89537811 -85.56700134]
[122.27954865 -70.57965088]
[128.99327087 -67.23661041]
[135.67958069 -80.66394806]
[149.10679626 -73.97743225]
[142.42073059 -60.55053711]
[149.13444519 -57.20750046]
[160.72349548 -66.73083496]
[172.31254578 -76.25417328]
[183.90159607 -85.77751160]
[186.88859558 -101.54004669]
[201.14132690 -108.90477753]
[215.72630310 -102.22212982]
[219.45518494 -86.61844635]
[209.46749878 -74.06353760]
[193.42492676 -74.18846130]
[181.83589172 -64.66513062]
[170.24684143 -55.14178848]
[158.65779114 -45.61845016]
[150.24438477 -33.20013809]
[145.69708252 -18.90600777]
[141.14979553 -4.61187744]
[136.60250854 9.68225288]
[132.05522156 23.97638321]
[127.50792694 38.27051163]
[122.96063995 52.56464386]
[118.41334534 66.85877228]
[128.51879883 75.01860809]
[135.27708435 86.11044312]
[137.89497375 98.83246613]
[136.06523132 111.69152069]
[130.00259399 123.17836761]
[120.41862488 131.94482422]
[125.83724976 145.93191528]
[131.25587463 159.91899109]
[145.43649292 166.36476135]
[150.73249817 180.62684631]
[144.50006104 194.10617065]
[149.91868591 208.09324646]
[152.61938477 193.33837891]
[159.67153931 180.09953308]
[170.40965271 169.62608337]
[183.82031250 162.90641785]
[198.63798523 160.57469177]
[213.46426392 162.85093689]
[226.89999390 169.52035522]
[237.67723083 179.95353699]
[244.77890015 193.16589355]
[247.53480530 207.91055298]
[245.68487549 222.79603577]
[239.40370178 236.41758728]
[229.28402710 247.48973083]
[216.28086853 254.96755981]
[201.62135315 258.14538574]
[186.68891907 256.72329712]
[172.89276123 250.83554077]
[161.53482056 241.03770447]
[153.68783569 228.25646973]
[153.68783569 243.25646973]
[153.68783569 258.25646973]
[153.68783569 273.25646973]
[153.68783569 288.25646973]
[153.68783569 303.25646973]
[153.68783569 318.25646973]
[153.68783569 333.25646973]
[153.68783569 348.25646973]
[153.68783569 363.25646973]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 124]
[12 123]
[15 120]
[16 119]
[17 118]
[26 54]
[27 53]
[28 52]
[30 50]
[31 49]
[56 112]
[57 111]
[58 110]
[59 109]
[60 108]
[61 107]
[62 106]
[63 105]
[68 87]
[69 86]
[70 85]
[71 84]
[92 104]
[93 103]
[94 102]
[95 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
