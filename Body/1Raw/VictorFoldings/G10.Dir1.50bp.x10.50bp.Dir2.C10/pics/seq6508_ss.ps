%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCCUGCUCGCAUCUGCUAUAGUGGAGGCCGGAGCAGGAACAGGUUGAACAGUCUACCCUCxxxxxxxxxxAACUAAUACUAACAUCUCAGACGCUCAGGAAAUAGAAACCGUCUGAACUAUCCUGCCCGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 252.49238586]
[92.50000000 237.49238586]
[92.50000000 222.49238586]
[92.50000000 207.49238586]
[92.50000000 192.49238586]
[92.50000000 177.49238586]
[92.50000000 162.49238586]
[92.50000000 147.49238586]
[92.50000000 132.49238586]
[92.50000000 117.49239349]
[80.23763275 108.85327148]
[66.11283112 113.90203094]
[51.98802567 118.95078278]
[37.86322403 123.99954224]
[23.73842049 129.04829407]
[9.61361694 134.09706116]
[-4.51118612 139.14581299]
[-18.63598824 144.19456482]
[-32.65270233 149.53608704]
[-46.55525970 155.16804504]
[-56.44069290 167.52072144]
[-71.14187622 165.12812805]
[-85.04443359 170.76008606]
[-98.94699097 176.39204407]
[-112.84954834 182.02400208]
[-126.75209808 187.65596008]
[-136.40429688 200.91368103]
[-152.68115234 198.91467285]
[-158.83842468 183.71533203]
[-148.54206848 170.95144653]
[-132.38406372 173.75340271]
[-118.48149872 168.12144470]
[-104.57894897 162.48948669]
[-90.67639160 156.85752869]
[-76.77383423 151.22557068]
[-67.88280487 139.27572632]
[-52.18721390 141.26548767]
[-38.28466034 135.63352966]
[-35.61167908 131.60479736]
[-30.35056114 129.24853516]
[-23.68474579 130.06976318]
[-9.55994225 125.02101135]
[4.56486082 119.97225189]
[18.68966293 114.92349243]
[32.81446838 109.87474060]
[46.93927002 104.82598114]
[61.06407166 99.77722931]
[75.18887329 94.72846985]
[84.00536346 86.20455933]
[94.10554504 84.18344879]
[101.83364868 87.49740601]
[110.34474182 75.14582825]
[114.05090332 60.61089325]
[112.49332428 45.69198227]
[110.93573761 30.77307129]
[108.16168213 27.24233437]
[106.83132935 23.39510155]
[106.86233521 19.73710823]
[108.01261902 16.69230461]
[109.92227173 14.55675411]
[109.61021423 -0.43999931]
[109.29815674 -15.43675327]
[94.56392670 -18.59888458]
[80.95635223 -25.07427216]
[69.20927429 -34.51371002]
[59.95620728 -46.40813828]
[53.69614792 -60.11610794]
[50.76669693 -74.89836121]
[51.32583618 -89.95771027]
[55.34341049 -104.48203278]
[62.60276031 -117.68803406]
[72.71239471 -128.86354065]
[85.12711334 -137.40588379]
[99.17740631 -142.85435486]
[114.10556030 -144.91516113]
[129.10652161 -143.47712708]
[143.37130737 -138.61784363]
[156.13063049 -130.59933472]
[166.69639587 -119.85404205]
[174.49880981 -106.96144867]
[179.11709595 -92.61682129]
[180.30220032 -77.59376526]
[177.99020386 -62.70244980]
[172.30578613 -48.74593735]
[163.55552673 -36.47689056]
[152.21127319 -26.55696297]
[138.88485718 -19.52112579]
[124.29491425 -15.74880886]
[124.60697174 -0.75205553]
[124.91902161 14.24469852]
[125.85465240 29.21549034]
[127.41223145 44.13440323]
[128.96981812 59.05331421]
[137.41180420 46.65440750]
[152.26445007 48.75171661]
[156.94317627 63.00336838]
[146.22251892 73.49610138]
[161.18276978 72.40479279]
[176.14302063 71.31348419]
[191.10327148 70.22217560]
[206.06350708 69.13085938]
[221.02375793 68.03955078]
[235.98400879 66.94824219]
[240.09451294 52.35784912]
[248.94985962 40.05505371]
[261.48071289 31.52547836]
[276.17388916 27.79911041]
[291.25515747 29.32592583]
[304.90338135 35.92155838]
[315.47042847 46.78954697]
[321.68029785 60.61753464]
[322.78314209 75.73571777]
[318.64575195 90.31851196]
[309.76776123 102.60496521]
[297.22119141 111.11143494]
[282.52117920 114.81072235]
[267.44274902 113.25611115]
[253.80671692 106.63533783]
[243.25970459 95.74789429]
[237.07531738 81.90848541]
[222.11506653 82.99980164]
[207.15483093 84.09111023]
[192.19458008 85.18241882]
[177.23432922 86.27372742]
[162.27407837 87.36504364]
[147.31382751 88.45635223]
[132.91149902 89.46947479]
[122.69631195 83.65692139]
[114.18522644 96.00849152]
[125.81127930 86.53037262]
[140.45248413 83.26920319]
[155.00218201 86.91696167]
[166.37316895 96.69963837]
[172.15266418 110.54151154]
[171.11437988 125.50553131]
[163.47859192 138.41656494]
[150.86552429 146.53509521]
[135.95146179 148.13847351]
[121.90095520 142.88650513]
[111.69529724 131.89355469]
[107.50000000 117.49239349]
[107.50000000 132.49238586]
[107.50000000 147.49238586]
[107.50000000 162.49238586]
[107.50000000 177.49238586]
[107.50000000 192.49238586]
[107.50000000 207.49238586]
[107.50000000 222.49238586]
[107.50000000 237.49238586]
[107.50000000 252.49238586]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 48]
[12 47]
[13 46]
[14 45]
[15 44]
[16 43]
[17 42]
[18 41]
[19 38]
[20 37]
[22 35]
[23 34]
[24 33]
[25 32]
[26 31]
[51 129]
[52 128]
[53 93]
[54 92]
[55 91]
[60 90]
[61 89]
[62 88]
[97 126]
[98 125]
[99 124]
[100 123]
[101 122]
[102 121]
[103 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
