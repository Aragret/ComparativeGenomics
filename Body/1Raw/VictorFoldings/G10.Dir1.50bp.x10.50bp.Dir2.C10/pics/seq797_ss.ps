%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAACCCCAAAGACACCCCCCACAGUUUAUGUAGCUUACCUCCUCAAAGCAAUACACUGAAxxxxxxxxxxAAGCAGCCACCAAUUAAGAAAGCGUUCAAGCUCAACACCCACUACCUAAAAAAUCCCAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[98.53387451 115.65039062]
[89.51634979 127.63722229]
[80.49881744 139.62405396]
[71.48128510 151.61088562]
[62.46375656 163.59771729]
[53.44622803 175.58454895]
[45.32468796 188.19567871]
[38.14217758 201.36425781]
[30.95966911 214.53285217]
[23.77715874 227.70143127]
[21.50095940 244.50187683]
[4.72695971 246.96546936]
[-2.28385186 231.52899170]
[10.60857677 220.51892090]
[17.79108620 207.35034180]
[24.97359467 194.18176270]
[32.15610504 181.01316833]
[17.65900230 184.86466980]
[4.00447607 178.65548706]
[-2.62184024 165.19845581]
[0.78183925 150.58972168]
[12.67361450 141.44720459]
[27.66639519 141.91253662]
[38.96830368 151.77493286]
[41.45939636 166.56701660]
[50.47692490 154.58018494]
[59.49445343 142.59335327]
[68.51198578 130.60652161]
[77.52951813 118.61968994]
[86.54704285 106.63285828]
[84.41520691 103.14493561]
[83.23139191 98.99565887]
[70.13823700 91.67655182]
[57.04508209 84.35744476]
[52.56104279 84.59172058]
[48.64975739 83.46349335]
[45.67723846 81.33135223]
[43.85063171 78.63738251]
[43.20468521 75.84630585]
[30.76524544 67.46416473]
[18.32580566 59.08201981]
[5.88636494 50.69987869]
[-6.72476339 42.57833481]
[-19.50212097 34.72090912]
[-32.27947617 26.86348534]
[-45.05683517 19.00605965]
[-58.91514969 25.78474998]
[-74.23567963 23.97228050]
[-86.12968445 14.14700603]
[-90.80184937 -0.55586576]
[-86.76129150 -15.44470215]
[-75.29734039 -25.76852798]
[-60.06810760 -28.23305130]
[-45.93317413 -22.05184746]
[-37.40295410 -9.19731903]
[-37.19940948 6.22870159]
[-24.42205238 14.08612728]
[-11.64469528 21.94355202]
[1.13266253 29.80097771]
[5.96173763 29.56528664]
[10.97821808 32.40539551]
[14.26850796 38.26043701]
[26.70794868 46.64258194]
[39.14738846 55.02472305]
[51.58683014 63.40686798]
[64.36418915 71.26428986]
[77.45734406 78.58339691]
[90.55049896 85.90250397]
[82.56913757 73.20219421]
[74.58777618 60.50188065]
[62.19333649 52.05334473]
[51.61580658 41.41775131]
[43.23524475 28.97724533]
[37.35277176 15.17881966]
[34.17974854 0.51826280]
[33.83018875 -14.47766304]
[36.31664276 -29.27014542]
[41.54977417 -43.32768250]
[49.34155655 -56.14517593]
[59.41202545 -67.26208496]
[71.39933777 -76.27897644]
[84.87278748 -82.87185669]
[99.34826660 -86.80385590]
[114.30565643 -87.93367767]
[129.20753479 -86.22074127]
[143.51844788 -81.72658539]
[156.72422791 -74.61269379]
[168.35037231 -65.13466644]
[177.97912598 -53.63305664]
[185.26454163 -40.52112961]
[189.94483948 -26.26999664]
[191.85186768 -11.39171505]
[190.91709900 3.57913017]
[187.17410278 18.10462761]
[180.75740051 31.66286469]
[171.89752197 43.76668930]
[160.91281128 53.98120117]
[148.19796753 61.93938828]
[134.21237183 67.35459137]
[123.55786133 77.91306305]
[112.90335083 88.47154236]
[127.31556702 84.31365204]
[141.72778320 80.15576172]
[149.14710999 66.20122528]
[164.28492737 61.66009521]
[178.16024780 69.22654724]
[182.54107666 84.41153717]
[174.82835388 98.20607758]
[159.59790039 102.42611694]
[145.88566589 94.56797791]
[131.47344971 98.72586823]
[117.06123352 102.88375854]
[131.70254517 106.14444733]
[146.34385681 109.40514374]
[161.07286072 106.56678772]
[176.06396484 106.05014801]
[190.95343018 107.86774445]
[205.38002014 111.97549438]
[218.99369812 118.27372742]
[231.46417236 126.60963440]
[242.48886108 136.78096008]
[251.80030823 148.54093933]
[259.17257690 161.60423279]
[264.42681885 175.65390015]
[267.43551636 190.34906006]
[268.12570190 205.33317566]
[266.48062134 220.24269104]
[262.54016113 234.71586609]
[256.39999390 248.40156555]
[248.20903015 260.96771240]
[238.16603088 272.10943604]
[226.51464844 281.55642700]
[213.53759766 289.07946777]
[199.54971313 294.49600220]
[184.89036560 297.67465210]
[169.91525269 298.53826904]
[154.98768616 297.06594849]
[140.46984863 293.29333496]
[126.71398926 287.31201172]
[114.05384064 279.26712036]
[102.79657745 269.35379028]
[93.21532440 257.81256104]
[85.54254150 244.92349243]
[79.96440125 230.99925232]
[76.61623383 216.37770081]
[75.57927704 201.41358948]
[76.87868500 186.46997070]
[80.48293304 171.90943909]
[86.30458069 158.08523560]
[94.20021057 145.33572388]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 30]
[2 29]
[3 28]
[4 27]
[5 26]
[6 25]
[7 17]
[8 16]
[9 15]
[10 14]
[32 68]
[33 67]
[34 66]
[39 65]
[40 64]
[41 63]
[42 62]
[43 59]
[44 58]
[45 57]
[46 56]
[101 112]
[102 111]
[103 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
