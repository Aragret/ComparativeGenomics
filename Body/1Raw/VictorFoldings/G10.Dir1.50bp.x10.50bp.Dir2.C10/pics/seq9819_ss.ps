%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCAACAACAACCUAUUUAGCUGUUCCCCAACCUUUUCCUCCGACCCCCUAACAACCCCCCxxxxxxxxxxUCGCACGGACUACAACCACGACCAAUGAUAUGAAAAACCAUCGUUGUAUUUCAACUACAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[167.93130493 99.74195862]
[153.02940369 101.45465088]
[138.12750244 103.16734314]
[123.22560120 104.88002777]
[108.32369995 106.59272003]
[93.55764771 109.23158264]
[78.98493958 112.78634644]
[64.41223907 116.34111023]
[49.83953857 119.89587402]
[35.26683426 123.45063019]
[20.69413185 127.00539398]
[6.12142849 130.56015015]
[-7.59862518 136.62316895]
[-20.03806496 145.00531006]
[-32.47750473 153.38745117]
[-44.91694641 161.76959229]
[-41.85896683 176.65977478]
[-44.73689651 191.58578491]
[-53.11186600 204.27154541]
[-65.70675659 212.78254700]
[-80.60093689 215.82093811]
[-95.52315521 212.92337036]
[-108.19788361 204.53172302]
[-116.69230652 191.92564392]
[-119.71109772 177.02748108]
[-116.79391479 162.10908508]
[-108.38559723 149.44541931]
[-95.76835632 140.96757507]
[-80.86623383 137.96838379]
[-65.95169067 140.90519714]
[-53.29908752 149.33015442]
[-40.85964966 140.94801331]
[-28.42020798 132.56587219]
[-15.98076820 124.18373108]
[-30.97230530 124.68753815]
[-45.34166336 120.38387299]
[-57.58811951 111.72221375]
[-66.43265533 99.60717773]
[-70.95156097 85.30404663]
[-70.67287445 70.30663300]
[-65.62570953 56.18126297]
[-56.33718491 44.40317535]
[-43.77738953 36.20247269]
[-29.25806427 32.43562317]
[-14.29559326 33.49604034]
[-0.45265147 39.27297211]
[10.82501411 49.16308212]
[18.35956955 62.13345337]
[21.36411095 76.82946014]
[19.52484703 91.71627045]
[13.03386879 105.23911285]
[2.56666660 115.98745728]
[17.13936996 112.43269348]
[31.71207237 108.87792969]
[46.28477478 105.32316589]
[60.85747910 101.76840973]
[75.43018341 98.21364594]
[90.00288391 94.65888214]
[78.03458405 85.61676788]
[75.77497864 70.78794098]
[84.50695801 58.59152222]
[99.27291107 55.95208740]
[111.68940735 64.36817932]
[114.70693207 79.06153107]
[106.61100769 91.69081879]
[121.51291656 89.97812653]
[136.41481018 88.26544189]
[151.31671143 86.55274963]
[166.21862793 84.84005737]
[165.99740601 70.95825958]
[167.08419800 57.11782455]
[169.46923828 43.44173050]
[173.13125610 30.05147362]
[178.03759766 17.06600380]
[184.14457703 4.60066605]
[191.39784241 -7.23382616]
[199.73287964 -18.33237267]
[209.07553101 -28.59642029]
[219.34271240 -37.93483734]
[230.44313049 -46.26472092]
[242.27810669 -53.51214218]
[254.74241638 -59.61278534]
[267.72528076 -64.51254272]
[281.11129761 -68.16796112]
[294.78149414 -70.54666138]
[308.61441040 -71.62760925]
[322.48712158 -71.40129852]
[336.27636719 -69.86984253]
[349.85964966 -67.04693604]
[363.11627197 -62.95777512]
[375.92849731 -57.63877869]
[388.18249512 -51.13730240]
[399.76947021 -43.51119995]
[410.58648682 -34.82831573]
[420.53753662 -25.16587830]
[429.53424072 -14.60981083]
[437.49673462 -3.25397229]
[444.35437012 8.80068111]
[450.04629517 21.44698906]
[454.52200317 34.57254791]
[457.74185181 48.06069946]
[459.67733765 61.79157639]
[460.31134033 75.64315796]
[475.29104614 76.42300415]
[490.27075195 77.20285034]
[505.25045776 77.98269653]
[520.23016357 78.76254272]
[535.20989990 79.54238129]
[550.18963623 80.32222748]
[558.48278809 67.39477539]
[572.13592529 60.36011887]
[587.47650146 61.11054230]
[600.37786865 69.44418335]
[607.36968994 83.11933899]
[606.57122803 98.45746613]
[598.19720459 111.33267212]
[584.50018311 118.28160095]
[569.16461182 117.43502045]
[556.31573486 109.02066040]
[549.40979004 95.30194092]
[534.43005371 94.52210236]
[519.45031738 93.74225616]
[504.47061157 92.96240997]
[489.49090576 92.18256378]
[474.51119995 91.40271759]
[459.53149414 90.62287140]
[456.97784424 106.66867828]
[452.66998291 122.33576965]
[446.66027832 137.43296814]
[439.02191162 151.77601624]
[429.84786987 165.18986511]
[419.24993896 177.51077271]
[407.35726929 188.58830261]
[394.31481934 198.28718567]
[380.28161621 206.48896790]
[365.42874146 213.09341431]
[349.93734741 218.01982117]
[333.99636841 221.20788574]
[317.80020142 222.61856079]
[301.54644775 222.23445129]
[285.43341064 220.06005859]
[269.65765381 216.12174988]
[254.41168213 210.46737671]
[239.88157654 203.16575623]
[226.24467468 194.30581665]
[213.66741943 183.99548340]
[202.30335999 172.36039734]
[192.29129028 159.54238892]
[183.75344849 145.69770813]
[176.79418945 130.99517822]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 69]
[2 68]
[3 67]
[4 66]
[5 65]
[6 58]
[7 57]
[8 56]
[9 55]
[10 54]
[11 53]
[12 52]
[13 34]
[14 33]
[15 32]
[16 31]
[103 126]
[104 125]
[105 124]
[106 123]
[107 122]
[108 121]
[109 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
