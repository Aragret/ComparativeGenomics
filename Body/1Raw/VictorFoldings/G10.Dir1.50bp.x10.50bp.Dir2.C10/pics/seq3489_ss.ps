%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUCUACCAUCACCCUCUACAUCACCGCCCCGACCUUAGCUCUCACCAUCGCUCUUCUACUxxxxxxxxxxUGAUAAUCAUAUUUACCAAAUGCCCCUCAUUUACAUAAAUAUUAUACUAGCAUUUACCAUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-3.67992759 198.70367432]
[-15.07100105 208.46295166]
[-26.46207428 218.22222900]
[-37.85314941 227.98150635]
[-43.29903793 242.83589172]
[-57.99821854 245.24073792]
[-69.38929749 255.00001526]
[-79.83130646 265.76870728]
[-89.23516083 277.45489502]
[-98.63901520 289.14111328]
[-92.03069305 302.89947510]
[-92.05491638 318.16259766]
[-98.70687866 331.89990234]
[-110.66583252 341.38391113]
[-125.55731964 344.73150635]
[-140.42460632 341.27807617]
[-152.31581116 331.70925903]
[-158.86990356 317.92498779]
[-158.78558350 302.66207886]
[-152.07955933 288.95108032]
[-140.08335876 279.51425171]
[-125.17881012 276.22528076]
[-110.32522583 279.73724365]
[-100.92137146 268.05105591]
[-91.51750946 256.36483765]
[-106.25962830 259.13433838]
[-120.21310425 253.62974548]
[-129.09378052 241.54116821]
[-130.17498779 226.58018494]
[-123.12477112 213.34030151]
[-110.10777283 205.88658142]
[-95.12063599 206.50758362]
[-82.76488495 215.01260376]
[-76.83414459 228.79035950]
[-79.14856720 243.60894775]
[-67.75749207 233.84967041]
[-63.12636948 219.69332886]
[-47.61242294 216.59042358]
[-36.22134781 206.83114624]
[-24.83027649 197.07188416]
[-13.43920231 187.31260681]
[-27.72139168 164.64665222]
[-37.53016663 139.71646118]
[-42.52196884 113.39521027]
[-42.52196884 86.60478973]
[-37.53016663 60.28353882]
[-27.72139168 35.35334778]
[-13.43920231 12.68739605]
[-24.83027649 2.92812133]
[-36.22134781 -6.83115292]
[-50.68029022 -1.65094483]
[-65.78932953 -4.41001225]
[-77.48421478 -14.36617947]
[-82.61907959 -28.84128761]
[-79.81266785 -43.94160843]
[-69.81988525 -55.60522461]
[-55.32875443 -60.69468689]
[-40.23730850 -57.84095764]
[-28.60506821 -47.81166840]
[-23.56105232 -33.30465698]
[-26.46207428 -18.22222710]
[-15.07100105 -8.46295261]
[-3.67992759 1.29632211]
[3.86807299 -6.06882668]
[11.93781853 -12.85829926]
[20.48551178 -19.03524590]
[29.46476173 -24.56614113]
[38.82683563 -29.42096901]
[48.52091599 -33.57337952]
[58.49439621 -37.00083160]
[68.69313812 -39.68473053]
[79.06180573 -41.61050415]
[89.54410553 -42.76770401]
[100.08315277 -43.15004730]
[110.62174988 -42.75546265]
[121.10269928 -41.58608627]
[131.46911621 -39.64826584]
[141.66473389 -36.95252228]
[151.63423157 -33.51348114]
[161.32347107 -29.34981346]
[170.67990112 -24.48411369]
[179.65272522 -18.94279099]
[188.19323730 -12.75591850]
[196.25508118 -5.95707560]
[203.79452515 1.41683722]
[210.77062988 9.32579899]
[217.14553833 17.72688484]
[222.88465881 26.57449913]
[227.95683289 35.82062149]
[232.33453369 45.41506958]
[246.48185730 40.42974854]
[260.62918091 35.44442749]
[274.77648926 30.45910454]
[288.92379761 25.47378349]
[303.07110596 20.48846054]
[317.21844482 15.50313950]
[324.45565796 -0.39055920]
[340.62030029 -6.05060816]
[355.59045410 1.55185819]
[369.63244629 -3.72288346]
[383.67440796 -8.99762535]
[397.71640015 -14.27236652]
[411.75836182 -19.54710770]
[419.67144775 -33.50284195]
[435.53817749 -35.87498093]
[447.18692017 -24.84383011]
[445.68176270 -8.87153816]
[432.17736816 -0.21068311]
[417.03311157 -5.50513172]
[402.99111938 -0.23039009]
[388.94915771 5.04435158]
[374.90716553 10.31909275]
[360.86520386 15.59383488]
[357.21560669 27.98870277]
[346.92800903 36.12469101]
[333.63638306 36.84107590]
[322.20376587 29.65045547]
[308.05642700 34.63577652]
[293.90911865 39.62110138]
[279.76181030 44.60642242]
[265.61450195 49.59174347]
[251.46717834 54.57706451]
[237.31985474 59.56238937]
[240.28677368 71.51203918]
[242.21586609 83.67244720]
[243.09288025 95.95363617]
[242.91128540 108.26476288]
[241.67247009 120.51474762]
[239.38557434 132.61297607]
[236.06752014 144.46992493]
[231.74285889 155.99789429]
[226.44357300 167.11160278]
[220.20887756 177.72882080]
[213.08488464 187.77101135]
[205.12431335 197.16389465]
[196.38604736 205.83795166]
[186.93472290 213.72904968]
[176.84027100 220.77879333]
[166.17736816 226.93502808]
[155.02488708 232.15220642]
[143.46533203 236.39173889]
[131.58424377 239.62226868]
[119.46948242 241.81990051]
[107.21069336 242.96835327]
[94.89855957 243.05914307]
[82.62416840 242.09159851]
[70.47832489 240.07289124]
[58.55087280 237.01792908]
[46.93006134 232.94932556]
[35.70185089 227.89718628]
[24.94931030 221.89888000]
[14.75198555 214.99877930]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 41]
[2 40]
[3 39]
[4 38]
[6 36]
[7 35]
[8 25]
[9 24]
[10 23]
[48 63]
[49 62]
[50 61]
[90 123]
[91 122]
[92 121]
[93 120]
[94 119]
[95 118]
[96 117]
[99 113]
[100 112]
[101 111]
[102 110]
[103 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
