%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUGAACACACAAUAGCUAAGACCCAAACUGGGAUUAGAUACCCCACUAUGCUUAGCCCUAAAxxxxxxxxxxUCAAUCACACUACUCCCCAUAUCUAACAACGUAAAAAUAAAAUGACAGUUUGAACAUACAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[151.73616028 132.51333618]
[147.68904114 118.06323242]
[144.65977478 103.36601257]
[129.79316711 105.36206818]
[114.92657471 107.35812378]
[85.11178589 139.77394104]
[71.06980896 145.04869080]
[57.02783585 150.32342529]
[42.98585892 155.59815979]
[31.20372200 164.88154602]
[22.79031181 177.29986572]
[14.37690163 189.71818542]
[13.73969555 206.10494995]
[-0.89436728 213.50604248]
[-14.47101879 204.30786133]
[-13.02376270 187.97270203]
[1.95858717 181.30476379]
[10.37199783 168.88645935]
[18.78540802 156.46813965]
[14.90283966 150.05131531]
[7.13770437 137.21766663]
[3.25513649 130.80084229]
[-11.64931107 132.49122620]
[-24.48963356 141.73443604]
[-38.00777054 135.48069763]
[-52.91222000 137.17109680]
[-67.81666565 138.86149597]
[-82.72111511 140.55187988]
[-91.38453674 150.16171265]
[-103.87551117 151.23260498]
[-113.41604614 143.73324585]
[-128.35205078 145.11727905]
[-143.28807068 146.50129700]
[-158.22409058 147.88533020]
[-173.43775940 155.36732483]
[-184.83892822 142.81942749]
[-175.93756104 128.39021301]
[-159.60810852 132.94931030]
[-144.67210388 131.56529236]
[-129.73608398 130.18125916]
[-114.80007172 128.79724121]
[-101.08247375 117.89439392]
[-84.41151428 125.64743805]
[-69.50706482 123.95703888]
[-54.60261536 122.26664734]
[-39.69816971 120.57624817]
[-27.92391205 111.45395660]
[-13.33970833 117.58678436]
[1.56473911 115.89638519]
[37.71111679 141.55619812]
[51.75309372 136.28144836]
[65.79506683 131.00671387]
[79.83704376 125.73196411]
[81.74097443 118.47765350]
[87.45276642 96.71471405]
[77.81095123 85.22404480]
[68.16913605 73.73338318]
[52.58230591 68.63604736]
[49.46854401 52.53522873]
[62.03101730 41.99405670]
[77.34653473 47.85639572]
[79.65980530 64.09156799]
[89.30161285 75.58223724]
[98.94342804 87.07289886]
[112.93051147 92.49152374]
[127.79711151 90.49546814]
[142.66371155 88.49941254]
[141.70895386 73.52365875]
[141.80119324 58.51778793]
[142.93995667 43.55490112]
[145.11972046 28.70790291]
[148.32983398 14.04912281]
[152.55470276 -0.35002017]
[157.77369690 -14.41937447]
[163.96142578 -28.09039497]
[171.08772278 -41.29647827]
[179.11787415 -53.97328568]
[188.01275635 -66.05905151]
[197.72903442 -77.49490356]
[208.21937561 -88.22512054]
[219.43266296 -98.19742584]
[231.31427002 -107.36322784]
[243.80632019 -115.67788696]
[256.84793091 -123.10089111]
[270.37557983 -129.59606934]
[284.32336426 -135.13177490]
[298.62332153 -139.68104553]
[313.20581055 -143.22171021]
[327.99972534 -145.73652649]
[342.93304443 -147.21324158]
[357.93301392 -147.64465332]
[372.92651367 -147.02867126]
[387.84051514 -145.36830139]
[402.60238647 -142.67160034]
[417.14016724 -138.95175171]
[431.38308716 -134.22683716]
[445.26168823 -128.51989746]
[458.70837402 -121.85873413]
[471.65765381 -114.27579498]
[484.04641724 -105.80803680]
[495.81433105 -96.49669647]
[506.90405273 -86.38715363]
[517.26153564 -75.52864838]
[526.83636475 -63.97409058]
[535.58184814 -51.77976990]
[543.45538330 -39.00510025]
[550.41857910 -25.71231842]
[556.43762207 -11.96618176]
[561.48303223 2.16633558]
[565.53039551 16.61638260]
[568.55987549 31.31355667]
[570.55676270 46.18625641]
[571.51129150 61.16202164]
[571.41882324 76.16789246]
[570.27984619 91.13076019]
[568.09991455 105.97772980]
[564.88952637 120.63646698]
[560.66448975 135.03555298]
[555.44531250 149.10482788]
[549.25738525 162.77575684]
[542.13085938 175.98173523]
[534.10052490 188.65843201]
[525.20550537 200.74407959]
[515.48907471 212.17977905]
[504.99856567 222.90985107]
[493.78512573 232.88198853]
[481.90338135 242.04763794]
[469.41122437 250.36210632]
[456.36950684 257.78491211]
[442.84176636 264.27990723]
[428.89389038 269.81539917]
[414.59387207 274.36447144]
[400.01135254 277.90493774]
[385.21737671 280.41955566]
[370.28402710 281.89605713]
[355.28408813 282.32723999]
[340.29058838 281.71105957]
[325.37658691 280.05044556]
[310.61474609 277.35354614]
[296.07702637 273.63348389]
[281.83419800 268.90835571]
[267.95568848 263.20123291]
[254.50907898 256.53988647]
[241.55990601 248.95675659]
[229.17126465 240.48881531]
[217.40347290 231.17730713]
[206.31390381 221.06759644]
[195.95657349 210.20895386]
[186.38192749 198.65425110]
[177.63662720 186.45980835]
[169.76327515 173.68502808]
[162.80023193 160.39215088]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 67]
[4 66]
[5 65]
[6 53]
[7 52]
[8 51]
[9 50]
[10 19]
[11 18]
[12 17]
[22 49]
[23 48]
[25 46]
[26 45]
[27 44]
[28 43]
[31 41]
[32 40]
[33 39]
[34 38]
[55 64]
[56 63]
[57 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
