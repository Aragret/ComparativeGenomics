%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAACAAAACUGCUCGCCAGAACACUACGAGCCACAGCUUAAAACUCAAAGGACCUGGCGGxxxxxxxxxxAACCAAUACUACCAAUCAAUACUCAUCAUUAAUAAUCAUAAUAGCUAUAGCAAUAAAACUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[88.88594055 385.55633545]
[88.88594055 370.55633545]
[88.88594055 355.55633545]
[88.88594055 340.55633545]
[88.88594055 325.55633545]
[88.88594055 310.55633545]
[88.88594055 295.55633545]
[88.88594055 280.55633545]
[88.88594055 265.55633545]
[88.88594055 250.55633545]
[73.34937286 245.80268860]
[60.01199341 236.49143982]
[50.17265701 223.51544189]
[44.79383469 208.12512207]
[44.40748978 191.80796814]
[49.06245041 176.14476013]
[58.31861877 162.65643311]
[71.28851318 152.65641785]
[86.72238922 147.12268066]
[86.09841156 132.13566589]
[73.92657471 123.36945343]
[59.51435852 127.52734375]
[45.10214233 131.68522644]
[30.68992615 135.84310913]
[16.27770996 140.00100708]
[9.34106922 150.92514038]
[-2.79742646 154.06773376]
[-13.45755959 148.26524353]
[-27.95315552 152.12240601]
[-39.18092728 164.07519531]
[-55.08223343 160.06515503]
[-59.29917526 144.21745300]
[-47.49372101 132.83486938]
[-31.81031609 137.62681580]
[-17.31471825 133.76965332]
[-5.61085320 120.73049927]
[12.11982346 125.58879089]
[26.53203964 121.43090057]
[40.94425583 117.27301025]
[55.35647202 113.11512756]
[69.76868439 108.95723724]
[70.73974609 93.93714905]
[78.34572601 81.88356781]
[90.09584808 75.32920074]
[102.75242615 75.21636963]
[108.81543732 61.49631882]
[114.87845612 47.77626419]
[120.94146729 34.05621338]
[107.76119232 26.87708282]
[95.21878815 18.63404655]
[83.39993286 9.38341522]
[72.38536072 -0.81162101]
[62.25032043 -11.88141918]
[53.06403351 -23.75035858]
[44.88926315 -36.33736420]
[37.78184891 -49.55644608]
[31.79034233 -63.31731033]
[26.95567131 -77.52595520]
[23.31086349 -92.08531189]
[20.88081551 -106.89592743]
[19.68212700 -121.85663605]
[19.72298813 -136.86521912]
[21.00311852 -151.81918335]
[23.51377296 -166.61634827]
[27.23780251 -181.15563965]
[32.14976501 -195.33775330]
[38.21611404 -209.06578064]
[45.39539719 -222.24597168]
[53.63858414 -234.78828430]
[62.88935471 -246.60702515]
[73.08452606 -257.62149048]
[84.15444183 -267.75637817]
[96.02349091 -276.94253540]
[108.61059570 -285.11715698]
[121.82976532 -292.22439575]
[135.59069824 -298.21575928]
[149.79939270 -303.05026245]
[164.35879517 -306.69488525]
[179.16944885 -309.12475586]
[194.13015747 -310.32327271]
[209.13876343 -310.28222656]
[224.09269714 -309.00192261]
[238.88983154 -306.49108887]
[253.42909241 -302.76687622]
[267.61114502 -297.85476685]
[281.33911133 -291.78823853]
[294.51919556 -284.60879517]
[307.06140137 -276.36547852]
[318.88003540 -267.11456299]
[329.89437866 -256.91925049]
[340.02914429 -245.84921265]
[349.21514893 -233.98005676]
[357.38961792 -221.39285278]
[364.49673462 -208.17359924]
[370.48791504 -194.41259766]
[375.32223511 -180.20384216]
[378.96670532 -165.64439392]
[381.39639282 -150.83372498]
[382.59472656 -135.87298584]
[382.55349731 -120.86439514]
[381.27301025 -105.91046906]
[378.76202393 -91.11336517]
[375.03762817 -76.57415771]
[370.12533569 -62.39216614]
[364.05865479 -48.66427612]
[356.87905884 -35.48425674]
[348.63555908 -22.94214630]
[339.38452148 -11.12362194]
[329.18908691 -0.10941600]
[318.11892700 10.02523232]
[306.24966431 19.21109200]
[293.66235352 27.38541222]
[280.44302368 34.49235535]
[266.68194580 40.48336792]
[252.47312927 45.31753159]
[237.91365051 48.96181870]
[223.10293579 51.39133835]
[208.14219666 52.58949280]
[193.13360596 52.54809570]
[178.17968750 51.26742935]
[163.38261414 48.75624466]
[148.84344482 45.03169632]
[134.66151428 40.11922455]
[128.59851074 53.83927917]
[122.53549194 67.55933380]
[116.47248077 81.27938843]
[127.09455872 98.53530884]
[121.63760376 119.80390930]
[101.08542633 131.51168823]
[101.70940399 146.49870300]
[115.15454102 149.73655701]
[127.28244019 156.35589600]
[137.26040649 165.89465332]
[144.40538025 177.69059753]
[148.23059082 190.92726135]
[148.47880554 204.69053650]
[145.13958740 218.03169250]
[138.44952393 230.03286743]
[128.87556458 239.87016296]
[117.08229065 246.87022400]
[103.88594055 250.55633545]
[103.88594055 265.55633545]
[103.88594055 280.55633545]
[103.88594055 295.55633545]
[103.88594055 310.55633545]
[103.88594055 325.55633545]
[103.88594055 340.55633545]
[103.88594055 355.55633545]
[103.88594055 370.55633545]
[103.88594055 385.55633545]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[19 130]
[20 129]
[21 41]
[22 40]
[23 39]
[24 38]
[25 37]
[28 35]
[29 34]
[45 126]
[46 125]
[47 124]
[48 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
