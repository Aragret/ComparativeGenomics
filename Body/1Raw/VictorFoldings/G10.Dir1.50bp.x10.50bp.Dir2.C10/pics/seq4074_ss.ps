%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUUCAUAGCCGAAUACACAAACAUUAUUAUAAUAAACACCCUCACCACUACAAUCUUCCUxxxxxxxxxxGAAACCUGAAACAUCGGCAUUAUCCUCCUGCUUGCAACUAUAGCAACAGCCUUCAUAGGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 303.43069458]
[92.50000000 288.43069458]
[92.50000000 273.43069458]
[92.50000000 258.43069458]
[92.50000000 243.43070984]
[92.50000000 228.43070984]
[92.50000000 213.43070984]
[92.50000000 198.43070984]
[92.50000000 183.43070984]
[92.50000000 168.43070984]
[74.23891449 163.83868408]
[57.90516663 154.47052002]
[44.72079086 141.02706909]
[35.67218018 124.51415253]
[31.43632317 106.16718292]
[32.33012390 87.35880280]
[38.28671646 69.49619293]
[48.86044693 53.91574860]
[38.87771988 42.71998215]
[28.89499474 31.52421761]
[18.91226768 20.32845306]
[8.92954063 9.13268661]
[-3.09021854 18.12194824]
[-15.83824921 26.04464722]
[-29.22016716 32.84212494]
[-43.13689423 38.46405792]
[-57.48539734 42.86882019]
[-72.15943909 46.02379990]
[-87.05038452 47.90563583]
[-102.04797363 48.50040054]
[-117.04116821 47.80368423]
[-131.91897583 45.82065201]
[-146.57122803 42.56597900]
[-160.88945007 38.06377029]
[-174.76763916 32.34735107]
[-188.10302734 25.45904732]
[-200.79690552 17.44986153]
[-212.75526428 8.37908840]
[-223.88958740 -1.68611324]
[-234.11743164 -12.67122269]
[-243.36308289 -24.49490738]
[-251.55805969 -37.06962967]
[-258.64172363 -50.30228806]
[-264.56161499 -64.09490967]
[-269.27386475 -78.34538269]
[-272.74365234 -92.94818878]
[-274.94525146 -107.79522705]
[-275.86236572 -122.77655792]
[-275.48822021 -137.78126526]
[-273.82556152 -152.69827271]
[-270.88671875 -167.41712952]
[-266.69342041 -181.82885742]
[-261.27673340 -195.82675171]
[-254.67678833 -209.30717468]
[-246.94239807 -222.17033386]
[-238.13085938 -234.32098389]
[-228.30740356 -245.66915894]
[-217.54476929 -256.13085938]
[-205.92262268 -265.62860107]
[-193.52702332 -274.09207153]
[-180.44973755 -281.45864868]
[-166.78759766 -287.67373657]
[-152.64175415 -292.69134521]
[-138.11692810 -296.47433472]
[-123.32067108 -298.99465942]
[-108.36252594 -300.23370361]
[-93.35323334 -300.18228149]
[-78.40392303 -298.84075928]
[-63.62528610 -296.21908569]
[-49.12672424 -292.33666992]
[-35.01559448 -287.22222900]
[-21.39636421 -280.91366577]
[-8.36987019 -273.45767212]
[3.96744180 -264.90945435]
[15.52422905 -255.33227539]
[26.21492958 -244.79708862]
[35.96038818 -233.38185120]
[44.68845749 -221.17111206]
[52.33451080 -208.25524902]
[58.84194183 -194.72991943]
[64.16256714 -180.69523621]
[68.25700378 -166.25511169]
[71.09492493 -151.51646423]
[72.65532684 -136.58842468]
[72.92665100 -121.58149719]
[71.90689850 -106.60679626]
[69.60360718 -91.77519989]
[66.03384399 -77.19651031]
[61.22402191 -62.97866440]
[55.20976639 -49.22693253]
[48.03559875 -36.04312515]
[39.75463486 -23.52485657]
[30.42818832 -11.76480484]
[20.12530708 -0.85004002]
[30.10803413 10.34572601]
[40.09075928 21.54149246]
[50.07348633 32.73725891]
[60.05621338 43.93302155]
[73.88439941 36.30551529]
[89.08695221 32.03002548]
[104.86383057 31.33155632]
[120.38473511 34.24686432]
[134.83287048 40.62253189]
[147.44786072 50.12302780]
[157.56584167 62.24837112]
[164.65434265 76.36045074]
[168.34030151 91.71659851]
[168.42976379 107.50866699]
[183.07325745 110.75949860]
[197.71676636 114.01032257]
[206.83920288 112.81323242]
[212.62959290 117.48410034]
[227.20228577 121.03885651]
[241.77499390 124.59362030]
[256.34768677 128.14837646]
[268.84393311 118.74740601]
[284.45657349 119.62988281]
[295.81387329 130.37911987]
[297.55319214 145.91967773]
[288.85333252 158.91375732]
[273.82205200 163.22596741]
[259.55670166 156.82020569]
[252.79293823 142.72108459]
[238.22023010 139.16632080]
[223.64753723 135.61155701]
[209.07482910 132.05680847]
[194.46594238 128.65382385]
[179.82243347 125.40299988]
[165.17893982 122.15216827]
[162.79782104 128.20364380]
[159.85630798 134.00343323]
[156.38066101 139.49978638]
[152.40187073 144.64364624]
[147.95547485 149.38911438]
[143.08111572 153.69384766]
[137.82231140 157.51942444]
[132.22599792 160.83171082]
[126.34209442 163.60115051]
[120.22312927 165.80302429]
[113.92369080 167.41767883]
[107.50000000 168.43070984]
[107.50000000 183.43070984]
[107.50000000 198.43070984]
[107.50000000 213.43070984]
[107.50000000 228.43070984]
[107.50000000 243.43070984]
[107.50000000 258.43069458]
[107.50000000 273.43069458]
[107.50000000 288.43069458]
[107.50000000 303.43069458]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[18 98]
[19 97]
[20 96]
[21 95]
[22 94]
[108 129]
[109 128]
[110 127]
[112 126]
[113 125]
[114 124]
[115 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
