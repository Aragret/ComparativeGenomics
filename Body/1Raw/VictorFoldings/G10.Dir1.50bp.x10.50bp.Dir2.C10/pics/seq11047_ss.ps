%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGCAUUAGCAGGAAUACCUUUCCUCACAGGUUUCUACUCCAAAGACCACAUCAUCGAAACxxxxxxxxxxAGAUGAAAACCUUUUUCCAAGGACAAAUCAGAGAAAAAGUCUUUAACUCCACCAUUAGCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 294.45092773]
[92.50000000 279.45092773]
[92.50000000 264.45092773]
[92.50000000 249.45092773]
[92.50000000 234.45092773]
[92.50000000 219.45092773]
[92.50000000 204.45092773]
[92.50000000 189.45092773]
[92.50000000 174.45092773]
[92.50000000 159.45092773]
[80.03918457 158.58290100]
[67.64653778 155.05560303]
[58.62900543 167.04243469]
[57.18180847 183.37760925]
[42.19948196 190.04557800]
[29.09456062 180.18693542]
[31.34826279 163.94338989]
[46.64217377 158.02490234]
[55.65970230 146.03807068]
[46.15134430 134.43673706]
[32.62715530 140.92489624]
[19.10296440 147.41307068]
[5.57877541 153.90122986]
[-7.94541454 160.38938904]
[-14.60165691 174.98645020]
[-30.19856644 178.74357605]
[-42.77152634 168.77862549]
[-42.67564011 152.73585510]
[-29.98446465 142.92192078]
[-14.43357944 146.86520386]
[-0.90938985 140.37704468]
[12.61480045 133.88887024]
[26.13899040 127.40071106]
[39.66318130 120.91254425]
[36.80845261 98.84146118]
[41.69336319 77.36466980]
[53.56356812 59.08485413]
[70.82833862 46.16102982]
[91.27215576 40.05389023]
[112.33850098 41.36192703]
[117.24005127 27.18536949]
[122.14160156 13.00881100]
[108.86138153 19.98274612]
[93.99597931 17.97780609]
[83.03786469 7.73477507]
[80.03584290 -6.96175003]
[86.09909821 -20.68169594]
[98.98738098 -28.35581589]
[113.93872833 -27.14867592]
[125.42891693 -17.50628853]
[129.21258545 -2.99220061]
[136.39509583 -16.16078377]
[143.57760620 -29.32936478]
[150.76011658 -42.49794769]
[157.94262695 -55.66653061]
[165.12513733 -68.83511353]
[158.86027527 -70.94719696]
[152.93673706 -75.37609863]
[148.10545349 -82.02846527]
[145.08055115 -90.58618164]
[144.47564697 -100.52127075]
[143.22875977 -115.46935272]
[141.98188782 -130.41744995]
[140.73501587 -145.36552429]
[139.48814392 -160.31361389]
[124.85578156 -164.27212524]
[112.46153259 -172.99900818]
[103.80207062 -185.44044495]
[99.92305756 -200.09408569]
[101.29290771 -215.19041443]
[107.74620819 -228.90649414]
[118.50368500 -239.58602905]
[132.26632690 -245.93942261]
[147.37222290 -247.19946289]
[161.99726868 -243.21398926]
[174.37541199 -234.46427917]
[183.01193237 -222.00689697]
[186.86393738 -207.34614563]
[185.46626282 -192.25234985]
[178.98770142 -178.54820251]
[168.21055603 -167.88850403]
[154.43623352 -161.56048584]
[155.68310547 -146.61241150]
[156.92997742 -131.66432190]
[158.17684937 -116.71623230]
[159.42372131 -101.76814270]
[165.72929382 -97.70737457]
[169.55630493 -112.21095276]
[184.53265381 -113.05307770]
[189.96147156 -99.06995392]
[178.34042358 -89.58583069]
[184.64598083 -85.52506256]
[198.77078247 -90.57381439]
[212.89558411 -95.62257385]
[227.02038574 -100.67132568]
[241.14520264 -105.72008514]
[255.27000427 -110.76884460]
[255.63999939 -125.94209290]
[261.46981812 -139.95556641]
[271.97103882 -150.91406250]
[285.72348022 -157.33552551]
[300.86718750 -158.35151672]
[315.35415649 -153.82461548]
[327.22506714 -144.36706543]
[334.87457275 -131.25790405]
[337.26803589 -116.27005768]
[334.08184814 -101.43049622]
[325.74688721 -88.74615479]
[313.39035034 -79.93247986]
[298.68341064 -76.18144989]
[283.61502075 -78.00036621]
[270.22308350 -85.14323425]
[260.31875610 -96.64403534]
[246.19395447 -91.59528351]
[232.06915283 -86.54652405]
[217.94435120 -81.49777222]
[203.81954956 -76.44901276]
[189.69474792 -71.40025330]
[178.29371643 -61.65260315]
[171.11120605 -48.48402023]
[163.92869568 -35.31544113]
[156.74618530 -22.14685631]
[149.56369019 -8.97827435]
[142.38117981 4.19030857]
[136.31816101 17.91036224]
[131.41661072 32.08692169]
[126.51506042 46.26347733]
[135.83663940 51.97503662]
[143.96542358 59.28508759]
[150.63081360 67.95031738]
[155.61099243 77.68230438]
[158.74017334 88.15713501]
[159.91421509 99.02614594]
[159.09403992 109.92757416]
[156.30693054 120.49856567]
[151.64567566 130.38726807]
[145.26541138 139.26454163]
[137.37850952 146.83491516]
[128.24746704 152.84640503]
[118.17623138 157.09892273]
[107.50000000 159.45092773]
[107.50000000 174.45092773]
[107.50000000 189.45092773]
[107.50000000 204.45092773]
[107.50000000 219.45092773]
[107.50000000 234.45092773]
[107.50000000 249.45092773]
[107.50000000 264.45092773]
[107.50000000 279.45092773]
[107.50000000 294.45092773]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 19]
[13 18]
[20 34]
[21 33]
[22 32]
[23 31]
[24 30]
[40 127]
[41 126]
[42 125]
[51 124]
[52 123]
[53 122]
[54 121]
[55 120]
[56 119]
[61 86]
[62 85]
[63 84]
[64 83]
[65 82]
[92 118]
[93 117]
[94 116]
[95 115]
[96 114]
[97 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
