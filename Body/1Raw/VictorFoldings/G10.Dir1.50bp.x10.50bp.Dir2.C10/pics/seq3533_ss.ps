%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUCACCGCCCCGACCUUAGCUCUCACCAUCGCUCUUCUACUAUGAACCCCCCUCCCCAUAxxxxxxxxxxCACUCCACCUCCUAUUCUUGCACGAAACGGGAUCAAACAACCCCCUAGGAAUCACCUCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-186.08015442 147.49295044]
[-200.89790344 149.82405090]
[-215.71566772 152.15515137]
[-230.53341675 154.48625183]
[-245.32612610 156.97137451]
[-260.09219360 159.61024475]
[-274.85824585 162.24909973]
[-289.62429810 164.88796997]
[-304.39035034 167.52682495]
[-319.15640259 170.16569519]
[-331.38015747 180.21011353]
[-345.27011108 174.83251953]
[-360.03616333 177.47138977]
[-374.80224609 180.11024475]
[-375.51232910 193.13072205]
[-378.95431519 205.70083618]
[-384.97009277 217.25436401]
[-393.28567505 227.27148438]
[-403.52371216 235.30223083]
[-415.22055054 240.98666382]
[-427.84729004 244.07101440]
[-440.83364868 244.41902161]
[-453.59371948 242.01791382]
[-465.55252075 236.97891235]
[-476.17169189 229.53202820]
[-484.97396851 220.01559448]
[-491.56439209 208.86088562]
[-495.64825439 196.57255554]
[-510.58258057 197.97486877]
[-525.51690674 199.37716675]
[-531.84619141 213.37129211]
[-544.33392334 222.31285095]
[-559.62097168 223.79663086]
[-573.59521484 217.42349243]
[-582.49755859 204.90777588]
[-583.93341064 189.61614990]
[-577.51654053 175.66198730]
[-564.97296143 166.79887390]
[-549.67694092 165.41096497]
[-535.74291992 171.87158203]
[-526.91918945 184.44285583]
[-511.98486328 183.04055786]
[-497.05056763 181.63824463]
[-494.19735718 164.78439331]
[-486.77261353 149.37312317]
[-475.35336304 136.61868286]
[-460.83166504 127.52818298]
[-444.34497070 122.82208252]
[-427.18698120 122.87709808]
[-410.70605469 127.69606018]
[-396.19946289 136.90713501]
[-384.81100464 149.79246521]
[-377.44110107 165.34419250]
[-362.67504883 162.70532227]
[-347.90899658 160.06646729]
[-336.74139404 150.21080017]
[-321.79525757 155.39964294]
[-307.02920532 152.76077271]
[-292.26315308 150.12191772]
[-277.49710083 147.48304749]
[-262.73104858 144.84417725]
[-247.96499634 142.20532227]
[-241.89453125 137.90472412]
[-232.86453247 139.66850281]
[-218.04676819 137.33738708]
[-203.22900391 135.00628662]
[-188.41125488 132.67518616]
[-188.76588440 117.91727448]
[-187.17953491 103.23914337]
[-183.67927551 88.89499664]
[-178.32536316 75.13330078]
[-171.21015930 62.19247818]
[-162.45651245 50.29680252]
[-152.21572876 39.65246964]
[-140.66482544 30.44405556]
[-128.00361633 22.83130455]
[-114.45112610 16.94635773]
[-100.24187469 12.89146137]
[-85.62180328 10.73719311]
[-70.84401703 10.52122593]
[-56.16439056 12.24767590]
[-41.83715820 15.88702297]
[-28.11050034 21.37661362]
[-15.22223854 28.62174034]
[-3.39572906 37.49727631]
[7.16402006 47.84984207]
[16.27389526 59.50043869]
[23.77585983 72.24756622]
[29.53968430 85.87068176]
[33.46521759 100.13404846]
[48.32826614 98.11170959]
[63.19131088 96.08937836]
[78.05435944 94.06704712]
[92.91740417 92.04470825]
[107.09396362 87.14315796]
[120.03202057 79.55325317]
[132.97007751 71.96334076]
[136.71151733 56.60830688]
[150.25799561 48.46775436]
[165.57261658 52.37133408]
[173.56948853 66.00312042]
[169.50421143 81.27561188]
[155.78865051 89.12791443]
[140.55998230 84.90139771]
[127.62192535 92.49130249]
[114.68387604 100.08121490]
[116.23303223 107.41947937]
[119.33135223 122.09600067]
[120.88051605 129.43426514]
[135.78242493 131.14695740]
[150.68432617 132.85964966]
[160.37248230 120.85368347]
[175.02078247 116.01313782]
[189.95500183 119.88260651]
[200.40968323 131.22735596]
[203.04876709 146.42730713]
[197.03015137 160.63223267]
[184.27433777 169.30937195]
[168.85166931 169.68989563]
[155.68345642 161.65237427]
[148.97163391 147.76155090]
[134.06973267 146.04885864]
[119.16782379 144.33616638]
[102.14742279 134.98992920]
[93.85828400 120.92668915]
[94.93974304 106.90775299]
[80.07669067 108.93009186]
[65.21364594 110.95242310]
[50.35060120 112.97476196]
[35.48755264 114.99709320]
[35.48514557 130.25001526]
[33.41830826 145.36070251]
[29.32550430 160.05105591]
[23.28247261 174.05076599]
[15.40083504 187.10232544]
[5.82603025 198.96568298]
[-5.26536942 209.42272949]
[-17.66891289 218.28129578]
[-31.15603828 225.37864685]
[-45.47828674 230.58450317]
[-60.37188339 233.80343628]
[-75.56258392 234.97662354]
[-90.77072906 234.08285522]
[-105.71641541 231.13900757]
[-120.12459564 226.19969177]
[-133.73019409 219.35621643]
[-146.28295898 210.73492432]
[-157.55204773 200.49485779]
[-167.33032227 188.82482910]
[-175.43811035 175.93989563]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 67]
[2 66]
[3 65]
[4 64]
[5 62]
[6 61]
[7 60]
[8 59]
[9 58]
[10 57]
[12 55]
[13 54]
[14 53]
[28 43]
[29 42]
[30 41]
[90 130]
[91 129]
[92 128]
[93 127]
[94 126]
[95 106]
[96 105]
[97 104]
[109 123]
[110 122]
[111 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
