%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAGCCCCCUUUCACUUCUGAGUCCCAGAGGUUACCCAAGGCACCCCUCUGACAUCCGGCCxxxxxxxxxxAUGAGCGGGCACAGUGAUUAUAGGCUUUCGCUCUAAGAUUAAAAAUGCCCUAGCCCACUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[252.97215271 462.68243408]
[252.97215271 447.68243408]
[252.97215271 432.68243408]
[252.97215271 417.68243408]
[252.97215271 402.68243408]
[252.97215271 387.68243408]
[252.97215271 372.68243408]
[252.97215271 357.68243408]
[252.97215271 342.68243408]
[252.97215271 327.68243408]
[230.92272949 304.30215454]
[237.97683716 278.16018677]
[228.46847534 266.55883789]
[218.96012878 254.95748901]
[209.45176697 243.35615540]
[194.98101807 246.97044373]
[180.31573486 243.93090820]
[168.37554932 234.78797913]
[161.56130981 221.31257629]
[161.27238464 206.15330505]
[167.61961365 192.31588745]
[158.11125183 180.71455383]
[148.60289001 169.11320496]
[139.09452820 157.51187134]
[129.58618164 145.91052246]
[117.54489136 144.38905334]
[109.53161621 134.74508667]
[110.28705597 121.82675171]
[101.02210999 110.03011322]
[87.15735626 121.71691895]
[62.82736969 115.76673889]
[48.81065750 110.42522430]
[42.12919998 111.10759735]
[36.91823578 108.64240265]
[34.32965088 104.55893707]
[20.54726982 98.63896942]
[6.76488781 92.71900940]
[-7.01749372 86.79904938]
[-20.79987526 80.87908173]
[-34.58225632 74.95912170]
[-45.44534683 85.59216309]
[-59.55249023 91.25405884]
[-74.75244141 91.08139801]
[-88.72732544 85.10050964]
[-99.34607697 74.22344208]
[-104.98940277 60.10886002]
[-104.79674530 44.90914536]
[-98.79748535 30.94214058]
[-87.90645599 20.33771133]
[-73.78446960 14.71295452]
[-58.58501816 14.92560673]
[-44.62591553 20.94323921]
[-34.03582001 31.84820747]
[-28.42964745 45.97758484]
[-28.66229248 61.17673874]
[-14.87991142 67.09670258]
[-1.09753048 73.01666260]
[12.68485069 78.93663025]
[26.46723175 84.85659027]
[40.24961472 90.77655029]
[54.15216827 96.40850830]
[68.16888428 101.75002289]
[74.47444916 97.68925476]
[87.08557129 89.56771088]
[93.39113617 85.50693512]
[94.32676697 70.53614807]
[87.46532440 56.28023148]
[95.98142242 44.06035614]
[96.91705322 29.08956718]
[83.12150574 22.76126862]
[72.54639435 11.87405396]
[66.62191010 -2.09966946]
[66.14929199 -17.27007103]
[71.19246674 -31.58547783]
[81.06937408 -43.10984802]
[94.44424438 -50.28460693]
[109.50824738 -52.13942719]
[124.22409058 -48.42345810]
[136.60157776 -39.63925552]
[144.96675110 -26.97481155]
[148.18830872 -12.14288425]
[145.83053589 2.85062647]
[138.21232605 15.97797298]
[126.36396027 25.46378899]
[111.88784027 30.02519417]
[110.95221710 44.99598694]
[117.88058472 58.18109131]
[109.29756165 71.47177887]
[108.36193085 86.44256592]
[112.81874847 100.76516724]
[122.08369446 112.56180573]
[139.31060791 118.98156738]
[141.18751526 136.40216064]
[150.69587708 148.00350952]
[160.20423889 159.60484314]
[169.71258545 171.20619202]
[179.22094727 182.80752563]
[194.03533936 179.30107117]
[208.84272766 182.56114197]
[220.71769714 191.88880920]
[227.33798218 205.39187622]
[227.43858337 220.36849976]
[221.05310059 233.84779358]
[230.56146240 245.44912720]
[240.06982422 257.05047607]
[249.57818604 268.65182495]
[262.47323608 264.29898071]
[277.11773682 267.23773193]
[289.36004639 277.94912720]
[295.12017822 294.57983398]
[309.69290161 298.13458252]
[318.34945679 285.66751099]
[330.92730713 277.17263794]
[345.72534180 273.79888916]
[360.74227905 276.00247192]
[373.94720459 283.48541260]
[383.55426025 295.23571777]
[388.26416016 309.66418457]
[387.43991089 324.81954956]
[381.19302368 338.65216064]
[370.36831665 349.29125977]
[356.42974854 355.29797363]
[341.26242065 355.85998535]
[326.91754150 350.90127563]
[315.33514404 341.09246826]
[308.08169556 327.76010132]
[306.13812256 312.70727539]
[291.56542969 309.15252686]
[285.66711426 313.78500366]
[296.75161743 323.89111328]
[307.83612061 333.99725342]
[322.08471680 338.68530273]
[329.71444702 351.59991455]
[326.94482422 366.34197998]
[315.14819336 375.60696411]
[300.16970825 374.80407715]
[289.43106079 364.33117676]
[288.25323486 349.37744141]
[281.06185913 336.21368408]
[273.87045288 323.04995728]
[267.97213745 327.68243408]
[267.97213745 342.68243408]
[267.97213745 357.68243408]
[267.97213745 372.68243408]
[267.97213745 387.68243408]
[267.97213745 402.68243408]
[267.97213745 417.68243408]
[267.97213745 432.68243408]
[267.97213745 447.68243408]
[267.97213745 462.68243408]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 106]
[13 105]
[14 104]
[15 103]
[21 97]
[22 96]
[23 95]
[24 94]
[25 93]
[28 91]
[29 90]
[31 62]
[32 61]
[35 60]
[36 59]
[37 58]
[38 57]
[39 56]
[40 55]
[65 89]
[66 88]
[68 86]
[69 85]
[110 128]
[111 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
