%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUAUAGUUUAAACAAAACGAAUGAUUUCGACUCAUUAAAUUAUGAUAAUCAUAUUUACCAAAUGCCCCxxxxxxxxxxCUCCUCCUAUCCCUCAACCCCGACAUCAUUACCGGGUUUUCCUCUUGUAAAUAUAGUUUAACCAAAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 247.44621277]
[92.50000000 232.44621277]
[92.50000000 217.44621277]
[92.50000000 202.44621277]
[92.50000000 187.44621277]
[92.50000000 172.44621277]
[92.50000000 157.44621277]
[92.50000000 142.44621277]
[92.50000000 127.44620514]
[92.50000000 112.44620514]
[78.17371368 107.99901581]
[63.84870529 103.55220795]
[55.35454941 115.91542816]
[56.85510635 131.88815308]
[45.20319748 142.91596985]
[29.33716965 140.53926086]
[21.42807961 126.58126068]
[27.54310608 111.74933624]
[42.99132538 107.42127228]
[51.48548126 95.05805206]
[71.99381256 88.44611359]
[90.81204224 92.55427551]
[88.28454590 77.76874542]
[85.75704956 62.98322296]
[83.22955322 48.19769669]
[66.57559204 36.36210632]
[67.07153320 14.60317898]
[86.48399353 2.08586121]
[81.76830292 -12.15359974]
[76.78558350 -26.30183601]
[71.53761292 -40.35383987]
[66.28964233 -54.40584183]
[61.04167557 -68.45784760]
[55.79370117 -82.50984955]
[50.54573059 -96.56185150]
[38.46923447 -106.78285217]
[41.26471329 -121.41276550]
[36.01674271 -135.46476746]
[30.76877213 -149.51676941]
[14.73684406 -156.46513367]
[8.78721237 -172.53479004]
[16.13420296 -187.64143372]
[6.95621347 -199.50584412]
[-5.16243410 -208.34544373]
[-17.28108215 -217.18502808]
[-29.39972878 -226.02462769]
[-41.84230042 -234.40211487]
[-54.59118652 -242.30566406]
[-67.34007263 -250.20919800]
[-80.08895874 -258.11273193]
[-89.07365417 -259.98803711]
[-93.00135803 -266.28677368]
[-105.59931946 -274.42871094]
[-118.19727325 -282.57067871]
[-130.79524231 -290.71261597]
[-147.37988281 -294.23196411]
[-148.58917236 -311.14273071]
[-132.67405701 -316.98611450]
[-122.65328217 -303.31057739]
[-110.05532074 -295.16864014]
[-97.45735931 -287.02667236]
[-84.85940552 -278.88473511]
[-72.18542480 -270.86163330]
[-59.43653488 -262.95806885]
[-46.68764877 -255.05455017]
[-33.93876266 -247.15100098]
[-31.14646530 -247.69087219]
[-27.96801376 -247.13301086]
[-24.82947731 -245.32310486]
[-22.20529556 -242.26707458]
[-20.56013680 -238.14328003]
[-8.44148922 -229.30368042]
[3.67715788 -220.46409607]
[15.79580498 -211.62449646]
[9.79768562 -225.37304688]
[6.54752016 -240.01669312]
[6.16596222 -255.01184082]
[8.66717529 -269.80184937]
[13.95831013 -283.83764648]
[21.84294891 -296.59823608]
[32.02839661 -307.60989380]
[44.13655090 -316.46383667]
[57.71792984 -322.83142090]
[72.26836395 -326.47625732]
[87.24771881 -327.26303101]
[102.09992218 -325.16253662]
[116.27362823 -320.25277710]
[129.24269104 -312.71597290]
[140.52566528 -302.83190918]
[149.70370483 -290.96752930]
[156.43609619 -277.56323242]
[160.47293091 -263.11666870]
[161.66435242 -248.16404724]
[159.96612549 -233.26048279]
[155.44129944 -218.95922852]
[148.25782776 -205.79116821]
[138.68238831 -194.24513245]
[127.07044983 -184.74972534]
[113.85305786 -177.65744019]
[99.52087402 -173.23155212]
[84.60593414 -171.63635254]
[69.66191864 -172.93109131]
[55.24357224 -177.06767273]
[41.88613510 -183.89254761]
[30.08500290 -193.15280151]
[42.52998352 -189.71867371]
[50.83837891 -179.58406067]
[51.79325867 -166.31855774]
[44.82077408 -154.76473999]
[50.06874847 -140.71273804]
[55.31671906 -126.66073608]
[67.01784515 -117.44483948]
[64.59773254 -101.80982208]
[69.84570312 -87.75782013]
[75.09367371 -73.70581818]
[80.34165192 -59.65381241]
[85.58962250 -45.60181046]
[90.83759308 -31.54980659]
[94.77191162 -28.77412415]
[96.98001099 -23.47899055]
[96.00775909 -16.86929131]
[100.72344971 -2.62982988]
[112.67367554 6.43615961]
[127.65708923 7.14134693]
[141.97279358 -0.85818344]
[155.91796875 7.77108431]
[155.14700317 24.15209961]
[140.45300293 31.43347740]
[126.95190430 22.12476158]
[111.96849060 21.41957474]
[110.85974121 31.90205002]
[105.74985504 40.42982101]
[98.01508331 45.67020416]
[100.54257202 60.45572662]
[103.07006836 75.24125671]
[105.59756470 90.02677917]
[109.52891541 75.55112457]
[117.29706573 62.71929932]
[128.30047607 52.52494049]
[141.68708801 45.75746918]
[156.42028809 42.94093323]
[171.35919189 44.29343414]
[185.34696960 49.71023941]
[197.30049133 58.77189255]
[206.29408264 70.77668762]
[211.63134766 84.79502869]
[212.89895630 99.74137115]
[209.99876404 114.45832825]
[203.15534973 127.80627441]
[192.89865112 138.75160217]
[180.02290344 146.44673157]
[165.52514648 150.29577637]
[150.52804565 150.00070190]
[136.19293213 145.58433533]
[123.62984467 137.38867188]
[113.81163025 126.04835510]
[107.50000000 112.44620514]
[107.50000000 127.44620514]
[107.50000000 142.44621277]
[107.50000000 157.44621277]
[107.50000000 172.44621277]
[107.50000000 187.44621277]
[107.50000000 202.44621277]
[107.50000000 217.44621277]
[107.50000000 232.44621277]
[107.50000000 247.44621277]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 166]
[2 165]
[3 164]
[4 163]
[5 162]
[6 161]
[7 160]
[8 159]
[9 158]
[10 157]
[12 20]
[13 19]
[22 136]
[23 135]
[24 134]
[25 133]
[28 122]
[29 121]
[30 118]
[31 117]
[32 116]
[33 115]
[34 114]
[35 113]
[37 111]
[38 110]
[39 109]
[42 105]
[43 74]
[44 73]
[45 72]
[46 71]
[47 66]
[48 65]
[49 64]
[50 63]
[52 62]
[53 61]
[54 60]
[55 59]
[123 130]
[124 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
