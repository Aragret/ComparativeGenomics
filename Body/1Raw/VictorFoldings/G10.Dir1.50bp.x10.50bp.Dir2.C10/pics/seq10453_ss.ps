%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACAACACAAUGGGGCUCACUCACCCACCACAUUAACAACAUAAAACCCUCAUUCACACGAxxxxxxxxxxCAACCCCCUAGGAAUCACCUCCCAUUCCGAUAAAAUCACCUUCCACCCUUACUACACAAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 298.95401001]
[92.50000000 283.95401001]
[92.50000000 268.95401001]
[92.50000000 253.95402527]
[92.50000000 238.95402527]
[92.50000000 223.95402527]
[92.50000000 208.95402527]
[92.50000000 193.95402527]
[92.50000000 178.95402527]
[92.50000000 163.95402527]
[77.47617340 160.32449341]
[63.75003433 153.21942139]
[52.11240387 143.04817200]
[43.23376846 130.39672852]
[37.62566757 115.99402618]
[35.61119843 100.66983795]
[37.30643082 85.30705261]
[42.61368942 70.79079437]
[51.22720337 57.95739365]
[62.65071869 47.54623413]
[76.22607422 40.15715027]
[91.17114258 36.21585083]
[90.85908508 21.21909714]
[90.54702759 6.22234392]
[75.55445099 5.61950970]
[60.62650681 4.10378695]
[45.81873703 1.68081391]
[31.18622398 -1.64039552]
[16.78340149 -5.84748602]
[2.66385317 -10.92480755]
[-11.11989784 -16.85346985]
[-24.51657486 -23.61142159]
[-37.47634125 -31.17351913]
[-49.95098495 -39.51163101]
[-61.89410019 -48.59474182]
[-73.26125336 -58.38905716]
[-84.01016235 -68.85814667]
[-94.10083771 -79.96305847]
[-103.49574280 -91.66249084]
[-112.15993500 -103.91290283]
[-120.06116486 -116.66873932]
[-127.17005157 -129.88253784]
[-133.46014404 -143.50515747]
[-138.90805054 -157.48590088]
[-143.49349976 -171.77276611]
[-147.19943237 -186.31260681]
[-150.01206970 -201.05133057]
[-151.92092896 -215.93411255]
[-152.91893005 -230.90557861]
[-153.00234985 -245.91003418]
[-152.17086792 -260.89166260]
[-150.42761230 -275.79476929]
[-147.77902222 -290.56384277]
[-144.23498535 -305.14398193]
[-139.80868530 -319.48095703]
[-134.51655579 -333.52142334]
[-128.37832642 -347.21310425]
[-121.41679382 -360.50515747]
[-113.65787506 -373.34805298]
[-105.13043976 -385.69403076]
[-95.86619568 -397.49722290]
[-85.89962006 -408.71362305]
[-75.26777649 -419.30157471]
[-64.01022339 -429.22167969]
[-52.16884232 -438.43704224]
[-39.78768158 -446.91333008]
[-26.91279793 -454.61904907]
[-13.59208965 -461.52554321]
[0.12488993 -467.60711670]
[14.18711281 -472.84109497]
[28.54226494 -477.20806885]
[43.13694382 -480.69177246]
[57.91685867 -483.27923584]
[72.82702637 -484.96084595]
[87.81197357 -485.73034668]
[102.81596375 -485.58486938]
[117.78318024 -484.52496338]
[132.65792847 -482.55456543]
[147.38490295 -479.68096924]
[161.90928650 -475.91494751]
[176.17706299 -471.27044678]
[190.13514709 -465.76473999]
[203.73162842 -459.41836548]
[216.91590881 -452.25488281]
[229.63896179 -444.30096436]
[241.85343933 -435.58618164]
[253.51390076 -426.14297485]
[264.57699585 -416.00643921]
[275.00152588 -405.21432495]
[284.74874878 -393.80676270]
[293.78237915 -381.82617188]
[302.06881714 -369.31713867]
[309.57723999 -356.32620239]
[316.27972412 -342.90170288]
[322.15133667 -329.09353638]
[327.17019653 -314.95309448]
[331.31768799 -300.53302002]
[334.57833862 -285.88687134]
[336.94003296 -271.06921387]
[338.39401245 -256.13513184]
[338.93481445 -241.14019775]
[338.56048584 -226.14016724]
[337.27236938 -211.19087219]
[335.07528687 -196.34790039]
[331.97738647 -181.66648865]
[327.99023438 -167.20123291]
[323.12863159 -153.00596619]
[317.41064453 -139.13349915]
[310.85757446 -125.63540649]
[303.49380493 -112.56193542]
[295.34674072 -99.96170044]
[286.44662476 -87.88158417]
[276.82662964 -76.36653137]
[266.52252197 -65.45936584]
[255.57264709 -55.20066833]
[244.01771545 -45.62860489]
[231.90072632 -36.77878571]
[219.26673889 -28.68412590]
[206.16278076 -21.37474251]
[192.63758850 -14.87782860]
[178.74147034 -9.21755028]
[164.52612305 -4.41496563]
[150.04443359 -0.48794073]
[135.35028076 2.54891586]
[120.49830627 4.68430662]
[105.54377747 5.91028786]
[105.85583496 20.90704155]
[106.16789246 35.90379333]
[120.33112335 38.90162277]
[133.46669006 44.98775482]
[144.91062927 53.85456467]
[154.08450317 65.05385590]
[160.52459717 78.01956177]
[163.90538025 92.09629059]
[164.05598450 106.57252502]
[160.96876526 120.71654510]
[154.79980469 133.81341553]
[145.86091614 145.20114136]
[134.60391235 154.30410767]
[121.59780121 160.66218567]
[107.50000000 163.95402527]
[107.50000000 178.95402527]
[107.50000000 193.95402527]
[107.50000000 208.95402527]
[107.50000000 223.95402527]
[107.50000000 238.95402527]
[107.50000000 253.95402527]
[107.50000000 268.95401001]
[107.50000000 283.95401001]
[107.50000000 298.95401001]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[22 128]
[23 127]
[24 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
