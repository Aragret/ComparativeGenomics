%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACCAAACCCCAAAGACACCCCCCACAGUUUAUGUAGCUUACCUCCUCAAAGCAAUACACxxxxxxxxxxUCCUCACUCUCUCAAUCUUAUCCAUCAUAGCAGGCAGUUGAGGUGGAUUAAACCAAACCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[9.38227367 212.89849854]
[-0.60045242 224.09426880]
[-10.58317852 235.29003906]
[-20.56590462 246.48579407]
[-30.54863167 257.68154907]
[-40.53135681 268.87731934]
[-49.67309189 280.76971436]
[-57.92538071 293.29568481]
[-66.17767334 305.82162476]
[-74.42996216 318.34759521]
[-69.78352356 333.27893066]
[-75.86947632 347.68362427]
[-89.81421661 354.76022339]
[-105.03346252 351.16735840]
[-114.34115601 338.60150146]
[-113.34248352 322.99584961]
[-102.50898743 311.71890259]
[-86.95592499 310.09530640]
[-78.70363617 297.56933594]
[-70.45134735 285.04339600]
[-62.19905472 272.51742554]
[-76.96614075 275.15051270]
[-90.05727386 267.82778931]
[-95.54203796 253.86651611]
[-90.93579102 239.59127808]
[-78.32519531 231.46890259]
[-63.42298508 233.17890930]
[-52.98000336 243.94664001]
[-51.72712326 258.89459229]
[-41.74439621 247.69883728]
[-31.76167107 236.50306702]
[-21.77894402 225.30731201]
[-11.79621792 214.11154175]
[-1.81349182 202.91577148]
[-17.46044159 184.62084961]
[-29.85931587 163.98594666]
[-38.66725540 141.58168030]
[-43.64069748 118.02756500]
[-44.64211655 93.97495270]
[-41.64382172 70.08894348]
[-34.72871780 47.03004837]
[-24.08803177 25.43590736]
[-10.01599884 5.90364790]
[-20.89482498 -4.42355728]
[-31.77364922 -14.75076199]
[-42.65247345 -25.07796669]
[-53.74378967 -35.17661667]
[-65.04279327 -45.04233932]
[-76.34179688 -54.90806198]
[-87.64080811 -64.77378845]
[-102.43066406 -60.38474274]
[-117.23918152 -64.71038818]
[-127.34102631 -76.37041473]
[-129.51272583 -91.64415741]
[-123.06130981 -105.65782166]
[-110.04539490 -113.93968964]
[-94.61830902 -113.84706116]
[-81.70278168 -105.40947723]
[-75.42011261 -91.31935120]
[-77.77507782 -76.07279205]
[-66.47607422 -66.20706940]
[-55.17707062 -56.34134293]
[-43.87806702 -46.47562027]
[-39.07667923 -45.90800095]
[-34.60005951 -42.27603531]
[-32.32527161 -35.95679092]
[-21.44644547 -25.62958717]
[-10.56761932 -15.30238247]
[0.31120571 -4.97517729]
[8.40204239 -12.10467339]
[17.00114441 -18.61211395]
[26.06079674 -24.46139145]
[35.53072739 -29.62004662]
[45.35839081 -34.05945969]
[55.48925400 -37.75498962]
[65.86710358 -40.68613815]
[76.43434906 -42.83663177]
[87.13236237 -44.19454575]
[97.90177155 -44.75234222]
[108.68282318 -44.50692749]
[119.41569519 -43.45965958]
[130.04083252 -41.61635208]
[140.49928284 -38.98723602]
[150.73300171 -35.58689499]
[160.68521118 -31.43419838]
[170.30068970 -26.55219078]
[179.52607727 -20.96796227]
[188.31018066 -14.71249580]
[196.60426331 -7.82050419]
[204.36228943 -0.33023062]
[211.54124451 7.71676302]
[218.10125732 16.27582550]
[224.00593567 25.29946136]
[229.22253418 34.73760223]
[233.72209167 44.53787613]
[237.47962952 54.64590073]
[240.47431946 65.00559235]
[242.68952942 75.55946350]
[244.11299133 86.24894714]
[244.73677063 97.01473999]
[259.72946167 97.48278046]
[274.72216797 97.95082092]
[289.71484375 98.41886902]
[304.70755005 98.88690948]
[319.70672607 99.04294586]
[334.70593262 98.88690948]
[349.70510864 98.73087311]
[356.61975098 85.07632446]
[369.09463501 76.20866394]
[384.26318359 74.16559601]
[398.63973999 79.41662598]
[408.92068481 90.75508118]
[412.74353027 105.57549286]
[409.22982788 120.47221375]
[399.18698120 132.02210999]
[384.92279053 137.57107544]
[369.71502686 135.84402466]
[357.05834961 127.23780060]
[349.86114502 113.73005676]
[334.86196899 113.88609314]
[319.86276245 114.04213715]
[315.90133667 116.81386566]
[310.14291382 117.08228302]
[304.23950195 113.87960815]
[289.24682617 113.41156006]
[274.25411987 112.94351959]
[259.26141357 112.47547913]
[244.26872253 112.00743866]
[242.60134888 124.94992828]
[239.77528381 137.68969727]
[235.81349182 150.12322998]
[230.74816895 162.14949036]
[224.62048340 173.67076111]
[217.48019409 184.59342957]
[209.38534546 194.82873535]
[200.40170288 204.29353333]
[190.60224915 212.91091919]
[180.06663513 220.61085510]
[168.88044739 227.33078003]
[157.13456726 233.01611328]
[144.92446899 237.62062073]
[132.34931946 241.10693359]
[119.51133728 243.44668579]
[106.51481628 244.62088013]
[93.46536255 244.61999512]
[80.46900177 243.44401550]
[67.63133240 241.10249329]
[55.05667877 237.61447144]
[42.84720230 233.00827026]
[31.10210991 227.32135010]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 34]
[2 33]
[3 32]
[4 31]
[5 30]
[6 29]
[7 21]
[8 20]
[9 19]
[10 18]
[43 69]
[44 68]
[45 67]
[46 66]
[47 63]
[48 62]
[49 61]
[50 60]
[100 128]
[101 127]
[102 126]
[103 125]
[104 124]
[105 121]
[106 120]
[107 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
