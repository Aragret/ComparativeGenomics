%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAGUUACCCUAGGGAUAACAGCGCAAUCCUAUUCUAGAGUCCAUAUCAACAAUAGGGUUUxxxxxxxxxxCUCCUAGCCGCAGACCUCCUCAUUCUAACCUGAAUCGGAGGACAACCAGUAAGCUACCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[104.72084808 287.43743896]
[104.72084808 272.43743896]
[104.72084808 257.43743896]
[104.72084808 242.43745422]
[104.72084808 227.43745422]
[104.72084808 212.43745422]
[104.72084808 197.43745422]
[104.72084808 182.43745422]
[104.72084808 167.43745422]
[104.72084808 152.43745422]
[92.26022339 146.85650635]
[82.84680176 138.70243835]
[76.89491272 129.12307739]
[65.39311218 138.75160217]
[53.89130402 148.38012695]
[42.38950348 158.00865173]
[36.77429581 172.79988098]
[22.04860497 175.03666687]
[10.54680252 184.66519165]
[2.28271914 199.46861267]
[-14.22990417 195.62548828]
[-15.10811901 178.69430542]
[0.91827601 173.16339111]
[12.42007923 163.53486633]
[17.21259880 149.43234253]
[32.76097488 146.50685120]
[44.26277924 136.87832642]
[55.76458359 127.24980164]
[67.26638794 117.62127686]
[63.16417313 94.98794556]
[73.16448975 74.27347565]
[64.65339661 61.92190170]
[56.14230728 49.57032776]
[47.50319290 37.30796051]
[36.73238373 26.86814880]
[24.29294205 18.48600578]
[11.85350227 10.10386276]
[-0.58593839 1.72171915]
[-13.02537823 -6.66042423]
[-25.46481895 -15.04256725]
[-37.90425873 -23.42471123]
[-50.34370041 -31.80685425]
[-62.78313828 -40.18899536]
[-74.85064697 -31.04274559]
[-89.23487091 -26.31274605]
[-104.37551117 -26.51207542]
[-118.63022614 -31.61911011]
[-130.45277405 -41.07987976]
[-138.56072998 -53.86814499]
[-142.07460022 -68.59674072]
[-140.61323547 -83.66800690]
[-134.33514404 -97.44713593]
[-123.92133331 -108.43946075]
[-110.50141907 -115.45262146]
[-95.53108215 -117.72589111]
[-80.63419342 -115.01266479]
[-67.42666626 -107.60726929]
[-57.34114838 -96.31298065]
[-51.47164154 -82.35491180]
[-50.45482635 -67.24713898]
[-54.40099716 -52.62843704]
[-41.96155548 -44.24629211]
[-29.52211571 -35.86415100]
[-17.08267593 -27.48200798]
[-4.64323568 -19.09986496]
[7.79620504 -10.71772099]
[20.23564529 -2.33557796]
[32.67508698 6.04656506]
[45.11452484 14.42870808]
[39.01879883 0.72315753]
[37.61241913 -14.21076679]
[41.04226685 -28.81337357]
[48.95013046 -41.55957794]
[60.51011658 -51.11817169]
[74.51490784 -56.49085999]
[89.50185394 -57.11652374]
[103.90572357 -52.92982101]
[116.22219086 -44.36800766]
[125.16492462 -32.32527161]
[129.79995728 -18.05935097]
[129.64320374 -3.06017041]
[124.71104431 11.10576534]
[115.51857758 22.95897484]
[103.02586365 31.26151657]
[88.53764343 35.14627457]
[73.56704712 34.20753098]
[59.67502975 28.54175377]
[66.17824554 32.15476227]
[68.49388123 41.05923843]
[77.00496674 53.41081238]
[85.51605988 65.76238251]
[102.84513855 59.05491638]
[123.05104828 61.45429230]
[141.27153015 73.99533844]
[152.42364502 95.12831116]
[167.06715393 91.87748718]
[181.71064758 88.62666321]
[196.35415649 85.37583923]
[210.99765015 82.12500763]
[218.60218811 71.65481567]
[230.91307068 69.27548218]
[241.19050598 75.73160553]
[255.89846802 72.78612518]
[270.60644531 69.84063721]
[285.31439209 66.89515686]
[293.86801147 53.60564423]
[309.33093262 50.33856201]
[322.52926636 59.03221130]
[325.63269043 74.52880096]
[316.79998779 87.63448334]
[301.27145386 90.57389069]
[288.25988770 81.60311890]
[273.55191040 84.54859924]
[258.84396362 87.49407959]
[244.13598633 90.43956757]
[231.64160156 102.72329712]
[214.24848938 96.76850891]
[199.60498047 100.01934052]
[184.96148682 103.27016449]
[170.31797791 106.52098846]
[155.67448425 109.77181244]
[153.34336853 124.58957672]
[166.28143311 132.17947388]
[182.10627747 129.54249573]
[193.93774414 140.37744141]
[192.69975281 156.37265015]
[179.34196472 165.25799561]
[164.11134338 160.21737671]
[158.69151306 145.11753845]
[145.75346375 137.52763367]
[139.24531555 141.25508118]
[146.96072388 154.11868286]
[154.67614746 166.98229980]
[167.40147400 174.92370605]
[167.11801147 189.92103577]
[154.10166931 197.37590027]
[141.02253723 190.03176880]
[140.61177063 175.03747559]
[133.42037964 161.87373352]
[126.22900391 148.70999146]
[119.72084808 152.43745422]
[119.72084808 167.43745422]
[119.72084808 182.43745422]
[119.72084808 197.43745422]
[119.72084808 212.43745422]
[119.72084808 227.43745422]
[119.72084808 242.43745422]
[119.72084808 257.43743896]
[119.72084808 272.43743896]
[119.72084808 287.43743896]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[13 29]
[14 28]
[15 27]
[16 26]
[18 24]
[19 23]
[31 91]
[32 90]
[33 89]
[34 87]
[35 69]
[36 68]
[37 67]
[38 66]
[39 65]
[40 64]
[41 63]
[42 62]
[43 61]
[95 121]
[96 120]
[97 119]
[98 118]
[99 117]
[102 115]
[103 114]
[104 113]
[105 112]
[122 130]
[123 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
