%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAUUACUCUCAUCGCUACCUCCCUGACAAGCGCCUAUAGCACUCGAAUAAUUCUUCUCACxxxxxxxxxxCCUACACAAUUCUCCGAUCCGUCCCUAACAAACUAGGAGGCGUCCUUGCCCUAUUACUAUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[116.23573303 263.42813110]
[116.23573303 248.42811584]
[116.23573303 233.42811584]
[116.23573303 218.42811584]
[116.23573303 203.42811584]
[116.23573303 188.42811584]
[116.23573303 173.42811584]
[116.23573303 158.42811584]
[116.23573303 143.42811584]
[116.23573303 128.42811584]
[109.98371887 124.28537750]
[102.79233551 137.44911194]
[95.60095215 150.61285400]
[89.51465607 164.32260132]
[74.51490784 164.23583984]
[68.58761597 150.45661926]
[78.84075928 139.50715637]
[88.16022491 127.75353241]
[97.47968292 115.99990845]
[91.22766113 111.85717010]
[77.41407776 117.70395660]
[63.60049820 123.55074310]
[62.91351700 138.79840088]
[55.67130280 152.23391724]
[43.31179810 161.18966675]
[28.28899765 163.88746643]
[13.58568573 159.79170227]
[2.12121630 149.71554565]
[-3.82813120 135.65966797]
[-3.08111000 120.41483307]
[4.21395826 107.00794220]
[16.60863304 98.10093689]
[31.64194107 95.46230316]
[46.32901001 99.61595154]
[57.75371170 109.73715973]
[71.56729126 103.89037323]
[85.38087463 98.04358673]
[95.37197113 86.85529327]
[99.62481689 72.47080994]
[103.87767029 58.08632660]
[108.13051605 43.70184708]
[112.08712006 29.23307991]
[115.74582672 14.68612480]
[119.40453339 0.13917108]
[123.06324005 -14.40778255]
[126.72194672 -28.95473671]
[121.25626373 -46.50913620]
[133.88755798 -58.65389252]
[137.24681091 -73.27290344]
[140.60606384 -87.89190674]
[126.36811066 -92.64965057]
[112.65582275 -98.75936127]
[99.59722137 -106.16398621]
[87.31424713 -114.79440308]
[75.92157745 -124.57001495]
[65.52558899 -135.39955139]
[56.22335052 -147.18191528]
[48.10171127 -159.80706787]
[41.23650742 -173.15713501]
[35.69183731 -187.10748291]
[31.51947021 -201.52784729]
[28.75836563 -216.28358459]
[27.43430138 -231.23692322]
[27.55964088 -246.24824524]
[29.13321686 -261.17739868]
[32.14033127 -275.88497925]
[36.55291367 -290.23364258]
[42.32975769 -304.08944702]
[49.41692734 -317.32302856]
[57.74825287 -329.81082153]
[67.24594116 -341.43618774]
[77.82131195 -352.09063721]
[89.37563324 -361.67465210]
[101.80101013 -370.09875488]
[114.98143005 -377.28427124]
[128.79383850 -383.16418457]
[143.10925293 -387.68350220]
[157.79402161 -390.80007935]
[172.71102905 -392.48480225]
[187.72100830 -392.72195435]
[202.68379211 -391.50930786]
[217.45968628 -388.85815430]
[231.91072083 -384.79333496]
[245.90197754 -379.35272217]
[259.30282593 -372.58712769]
[271.98809814 -364.55975342]
[283.83941650 -355.34552002]
[294.74609375 -345.03048706]
[304.60629272 -333.71093750]
[313.32794189 -321.49258423]
[320.82965088 -308.48950195]
[327.04132080 -294.82308960]
[331.90496826 -280.62097168]
[335.37518311 -266.01574707]
[337.41958618 -251.14375305]
[338.01910400 -236.14387512]
[337.16806030 -221.15617371]
[334.87448120 -206.32057190]
[331.15972900 -191.77560425]
[326.05853271 -177.65705872]
[319.61846924 -164.09677124]
[311.89971924 -151.22135925]
[302.97433472 -139.15103149]
[292.92565918 -127.99848175]
[281.84747314 -117.86784363]
[269.84326172 -108.85372162]
[257.02511597 -101.04026031]
[243.51266479 -94.50042725]
[229.43211365 -89.29528046]
[214.91491699 -85.47341919]
[200.09663391 -83.07052612]
[185.11561584 -82.10903931]
[170.11172485 -82.59793091]
[155.22508240 -84.53264618]
[151.86581421 -69.91364288]
[148.50656128 -55.29463577]
[154.66966248 -44.84100723]
[151.94610596 -32.60362244]
[141.26890564 -25.29603195]
[137.61019897 -10.74907684]
[133.95149231 3.79787683]
[130.29278564 18.34483147]
[126.63407898 32.89178467]
[128.30709839 37.42501831]
[127.10606384 43.05932236]
[122.51499176 47.95469284]
[118.26214600 62.33917618]
[114.00930023 76.72365570]
[109.75645447 91.10813904]
[120.38496399 80.52349091]
[131.19053650 70.11966705]
[145.04280090 64.36511993]
[160.03948975 64.05007172]
[174.12120056 69.21780396]
[185.35417175 79.15865326]
[192.19583130 92.50749969]
[193.70666504 107.43122101]
[189.67918396 121.88041687]
[180.66647339 133.87088013]
[167.90620422 141.75601196]
[153.15065002 144.45298767]
[138.42712402 141.59185791]
[131.23573303 128.42811584]
[131.23573303 143.42811584]
[131.23573303 158.42811584]
[131.23573303 173.42811584]
[131.23573303 188.42811584]
[131.23573303 203.42811584]
[131.23573303 218.42811584]
[131.23573303 233.42811584]
[131.23573303 248.42811584]
[131.23573303 263.42813110]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[20 37]
[21 36]
[22 35]
[38 129]
[39 128]
[40 127]
[41 126]
[42 123]
[43 122]
[44 121]
[45 120]
[46 119]
[48 116]
[49 115]
[50 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
