%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCCUACUCCUCAUUGUACCCAUUCUAAUCGCAAUGGCAUUCCUAAUGCUUACCGAACGAAAAAxxxxxxxxxxUCACACACCGCACAAUCCCCUAUCUAGGCCUUCUUACGAGCCAAAACCUGCCCCUACUCCUCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[155.93222046 329.31777954]
[155.33963013 314.32949829]
[154.74702454 299.34121704]
[154.15443420 284.35290527]
[153.56182861 269.36462402]
[152.96922302 254.37634277]
[152.37663269 239.38804626]
[151.78402710 224.39976501]
[147.97335815 209.89187622]
[141.12391663 196.54701233]
[134.27449036 183.20216370]
[127.42504883 169.85729980]
[120.57560730 156.51245117]
[109.49496460 159.80505371]
[97.91113281 160.93080139]
[86.24673462 159.81840515]
[74.93311310 156.47877502]
[64.39435577 151.00575256]
[55.03144455 143.57368469]
[47.20697784 134.43200684]
[41.23118973 123.89691162]
[37.34973145 112.34050751]
[22.73529053 115.71958923]
[8.12085247 119.09867096]
[-6.49358654 122.47774506]
[-21.10802650 125.85682678]
[-35.72246552 129.23590088]
[-38.58191681 144.19395447]
[-47.28347778 156.69206238]
[-60.31954193 164.56486511]
[-75.43154144 166.44833374]
[-90.00122070 162.01614380]
[-101.50430298 152.03622437]
[-107.94780731 138.23762512]
[-108.21535492 123.01106262]
[-102.26059723 108.99461365]
[-91.11522675 98.61672211]
[-76.71025085 93.67542267]
[-61.54141235 95.02681732]
[-48.23680878 102.43676758]
[-39.10154343 114.62146759]
[-24.48710442 111.24238586]
[-9.87266541 107.86330414]
[4.74177361 104.48423004]
[19.35621262 101.10514832]
[33.97065353 97.72607422]
[36.18534851 82.89047241]
[23.19496918 75.39047241]
[10.20458794 67.89047241]
[-2.78579307 60.39046860]
[-15.77617455 52.89046860]
[-32.51643372 50.20718765]
[-34.57218170 33.37833405]
[-18.97009468 26.74423790]
[-8.27617455 39.90008926]
[4.71420670 47.40008926]
[17.70458794 54.90008926]
[30.69496918 62.40008926]
[43.68534851 69.90008545]
[56.54984283 54.48339844]
[73.34525299 44.02449417]
[92.28582764 39.41945267]
[111.42346191 40.95326996]
[116.08689880 26.69660759]
[102.54064178 20.20400620]
[89.95775604 11.99875927]
[78.55355835 2.22126865]
[68.52319336 -8.96116066]
[60.03828049 -21.35718155]
[53.24402237 -34.75468445]
[48.25666809 -48.92441559]
[45.16156387 -63.62391663]
[44.01166534 -78.60166168]
[44.82665253 -93.60134888]
[47.59257889 -108.36633301]
[52.26211548 -122.64395142]
[58.75535965 -136.18991089]
[66.96120453 -148.77239990]
[76.73923492 -160.17613220]
[87.92214203 -170.20596313]
[100.31857300 -178.69027710]
[113.71639252 -185.48390198]
[127.88636780 -190.47058105]
[142.58601379 -193.56498718]
[157.56381226 -194.71417236]
[172.56346130 -193.89846802]
[187.32830811 -191.13185120]
[201.60571289 -186.46162415]
[215.15135193 -179.96774292]
[227.73345947 -171.76129150]
[239.13671875 -161.98271179]
[249.16603088 -150.79933167]
[257.64974976 -138.40251160]
[264.44274902 -125.00435638]
[269.42874146 -110.83415222]
[272.52246094 -96.13435364]
[273.67092896 -81.15650177]
[272.85449219 -66.15689087]
[270.08718872 -51.39216995]
[265.41629028 -37.11499405]
[258.92175293 -23.56966019]
[250.71470642 -10.98795033]
[240.93557739 0.41484985]
[229.75172424 10.44362164]
[217.35449219 18.92675972]
[203.95600891 25.71910667]
[189.78556824 30.70443726]
[175.08563232 33.79744339]
[160.10772705 34.94520187]
[145.10813904 34.12807465]
[130.34356689 31.36003876]
[125.68013000 45.61669922]
[136.45840454 52.16907501]
[145.63294983 60.82543182]
[152.80018616 71.20499420]
[157.64486694 82.85119629]
[159.95387268 95.25173187]
[159.62562561 107.86112976]
[156.67457581 120.12474060]
[151.23052979 131.50309753]
[143.53295898 141.49571228]
[133.92047119 149.66300964]
[140.76989746 163.00785828]
[147.61933899 176.35272217]
[154.46878052 189.69757080]
[161.31822205 203.04243469]
[162.16171265 188.06616211]
[166.78610229 173.79679871]
[174.88732910 161.17260742]
[185.93267822 151.02369690]
[199.19586182 144.01741028]
[213.80474854 140.61445618]
[228.79875183 141.03858948]
[243.19192505 145.26191711]
[256.03784180 153.00674438]
[266.49182129 163.76380920]
[273.86648560 176.82575989]
[277.67684937 191.33372498]
[277.67239380 206.33372498]
[273.85345459 220.83943176]
[266.47106934 233.89701843]
[256.01074219 244.64788818]
[243.16023254 252.38511658]
[228.76455688 256.59991455]
[213.77030945 257.01519775]
[199.16342163 253.60357666]
[185.90438843 246.58944702]
[174.86505127 236.43400574]
[166.77232361 223.80715942]
[167.36491394 238.79545593]
[167.95751953 253.78373718]
[168.55010986 268.77203369]
[169.14271545 283.76031494]
[169.73532104 298.74859619]
[170.32791138 313.73690796]
[170.92051697 328.72518921]
[177.58789062 344.31307983]
[164.45487976 355.03503418]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 156]
[2 155]
[3 154]
[4 153]
[5 152]
[6 151]
[7 150]
[8 149]
[9 126]
[10 125]
[11 124]
[12 123]
[13 122]
[22 46]
[23 45]
[24 44]
[25 43]
[26 42]
[27 41]
[47 59]
[48 58]
[49 57]
[50 56]
[51 55]
[63 112]
[64 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
