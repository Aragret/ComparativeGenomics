%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAUUACCCACAUAGGAUGAAUAAUAGCAGUUCUACCGUACAACCCUAACAUAACCAUUCUUAAxxxxxxxxxxCCUCUUUACAGUGAAAUGCCCCAACUAAAUACUACCGUAUGGCCCACCAUAAUUACCCCCAUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[68.97750854 263.46859741]
[68.97750854 248.46859741]
[68.97750854 233.46859741]
[68.97750854 218.46859741]
[68.97750854 203.46859741]
[68.97750854 188.46859741]
[68.97750854 173.46859741]
[68.97750854 158.46859741]
[68.97750854 143.46859741]
[68.97750854 128.46859741]
[53.98048401 128.16972351]
[41.10813141 120.46891022]
[33.75318146 107.39585114]
[33.85417175 92.39619446]
[41.38447952 79.42335510]
[54.35935593 71.89656830]
[69.35903931 71.79964447]
[82.43009949 79.15813446]
[90.12783051 92.03399658]
[85.12308502 77.89353943]
[70.85398865 66.29521179]
[74.65849304 49.18801880]
[69.37181854 35.15053177]
[64.08513641 21.11304283]
[51.98051834 10.92536736]
[54.73566818 -3.71220088]
[49.44899368 -17.74968910]
[33.67686462 -16.94899750]
[18.44568253 -21.04777336]
[5.23800421 -29.63466072]
[-4.66439867 -41.86205292]
[-10.30493355 -56.52973938]
[-11.14458370 -72.20272064]
[-7.11339903 -87.35160065]
[1.38384950 -100.50180817]
[13.50827885 -110.37715149]
[7.94178724 -124.30604553]
[2.37529516 -138.23493958]
[-9.93074512 -148.17837524]
[-7.46902466 -162.86814880]
[-13.03551674 -176.79704285]
[-18.60200882 -190.72593689]
[-24.72640228 -197.58012390]
[-24.13745499 -204.98965454]
[-29.42413139 -219.02713013]
[-41.52875137 -229.21481323]
[-38.77360153 -243.85238647]
[-44.06027603 -257.88986206]
[-49.34695435 -271.92736816]
[-64.04309845 -268.78393555]
[-79.04360199 -267.86608887]
[-94.01335907 -269.19430542]
[-108.61792755 -272.73889160]
[-122.53104401 -278.42068481]
[-135.44187927 -286.11276245]
[-147.06201172 -295.64324951]
[-157.13182068 -306.79925537]
[-165.42637634 -319.33154297]
[-171.76034546 -332.96011353]
[-175.99223328 -347.38055420]
[-178.02749634 -362.27066040]
[-177.82067871 -377.29779053]
[-175.37638855 -392.12625122]
[-170.74923706 -406.42477417]
[-164.04258728 -419.87387085]
[-155.40629578 -432.17312622]
[-145.03326416 -443.04779053]
[-133.15524292 -452.25485229]
[-120.03760529 -459.58871460]
[-105.97338867 -464.88543701]
[-91.27679443 -468.02676392]
[-76.27616119 -468.94247437]
[-61.30659485 -467.61215210]
[-46.70252991 -464.06546021]
[-32.79022217 -458.38168335]
[-19.88047981 -450.68777466]
[-8.26171017 -441.15563965]
[1.80651867 -429.99819946]
[10.09927845 -417.46472168]
[16.43130684 -403.83523560]
[20.66114235 -389.41421509]
[22.69429207 -374.52380371]
[22.48533058 -359.49670410]
[20.03892899 -344.66857910]
[15.40973949 -330.37075806]
[8.70118046 -316.92260742]
[0.06312383 -304.62457275]
[-10.31145382 -293.75140381]
[-22.19078064 -284.54598999]
[-35.30946732 -277.21401978]
[-30.02278900 -263.17654419]
[-24.73611259 -249.13905334]
[-13.00963116 -239.95542908]
[-15.38664436 -224.31381226]
[-10.09996796 -210.27632141]
[-4.67311144 -196.29243469]
[0.89338017 -182.36354065]
[6.45987225 -168.43464661]
[18.36775970 -159.48748779]
[16.30419159 -143.80143738]
[21.87068367 -129.87254333]
[27.43717575 -115.94364166]
[41.66072845 -117.23432922]
[55.68561172 -114.45339966]
[68.36878967 -107.81832123]
[78.67396545 -97.86105347]
[85.75630188 -85.38540649]
[89.03162384 -71.40216827]
[88.22463226 -57.04717255]
[83.39201355 -43.48908997]
[74.91854858 -31.83424759]
[63.48648071 -23.03636551]
[68.77315521 -8.99887753]
[80.49964142 0.18474300]
[78.12262726 15.82636642]
[83.40930176 29.86385345]
[88.69597626 43.90134048]
[99.60951233 49.19948196]
[104.11048126 60.89653015]
[99.26354218 72.88879395]
[104.26828766 87.02925110]
[114.60630035 97.89780426]
[128.47880554 103.60337830]
[142.35131836 109.30894470]
[156.22383118 115.01451874]
[172.39645386 112.29824829]
[182.62501526 125.11653137]
[176.38725281 140.28302002]
[160.10003662 142.19572449]
[150.51824951 128.88702393]
[136.64575195 123.18144989]
[122.77323914 117.47588348]
[108.90073395 111.77030945]
[102.66992188 115.94488525]
[112.10880280 127.60282898]
[121.54767609 139.26077271]
[130.98654175 150.91871643]
[144.23283386 157.95687866]
[148.04885864 172.46336365]
[139.98037720 185.10850525]
[125.21654510 187.75975037]
[113.25251770 178.71197510]
[111.78246307 163.78524780]
[104.59107971 150.62150574]
[97.39969635 137.45776367]
[90.20831299 124.29402924]
[83.97750854 128.46859741]
[83.97750854 143.46859741]
[83.97750854 158.46859741]
[83.97750854 173.46859741]
[83.97750854 188.46859741]
[83.97750854 203.46859741]
[83.97750854 218.46859741]
[83.97750854 233.46859741]
[83.97750854 248.46859741]
[83.97750854 263.46859741]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 156]
[2 155]
[3 154]
[4 153]
[5 152]
[6 151]
[7 150]
[8 149]
[9 148]
[10 147]
[19 121]
[20 120]
[22 117]
[23 116]
[24 115]
[26 113]
[27 112]
[36 102]
[37 101]
[38 100]
[40 98]
[41 97]
[42 96]
[44 95]
[45 94]
[47 92]
[48 91]
[49 90]
[122 133]
[123 132]
[124 131]
[125 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
