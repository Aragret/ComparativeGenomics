%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUACUCCUCAUUGUACCCAUUCUAAUCGCAAUGGCAUUCCUAAUGCUUACCGAACGAAAAAUxxxxxxxxxxAGCAGGCAGUUGAGGUGGAUUAAACCAAACCCAGCUACGCAAAAUCUUAGCAUACUCCUCAAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.24320221 237.14747620]
[94.94306946 222.15048218]
[94.64294434 207.15347290]
[94.34281158 192.15647888]
[94.04267883 177.15948486]
[93.74254608 162.16249084]
[93.44241333 147.16549683]
[93.14228058 132.16848755]
[92.84214783 117.17149353]
[84.61809540 104.62697601]
[70.98497772 98.37094116]
[57.35185242 92.11490631]
[43.71873093 85.85887146]
[27.94911385 87.13548279]
[19.60860634 74.79508972]
[5.97548437 68.53905487]
[-2.86316800 80.71567535]
[-13.90411663 90.93061066]
[-26.72174454 98.79264069]
[-40.82244492 104.00119019]
[-55.66362762 106.35783386]
[-70.67459869 105.77384186]
[-85.27849579 102.27354431]
[-98.91448212 95.99328613]
[-111.05925751 87.17613220]
[-121.24716187 76.16248322]
[-129.08799744 63.37691116]
[-134.28201294 49.31177902]
[-136.63134766 34.50831985]
[-136.04756165 19.53577423]
[-132.55494690 4.96952057]
[-146.18806458 -1.28651500]
[-159.82118225 -7.54255056]
[-171.85916138 -1.42661655]
[-185.02691650 -3.35047674]
[-194.52931213 -12.38627148]
[-197.03732300 -25.05815315]
[-210.54254150 -31.58572006]
[-224.04776001 -38.11328506]
[-235.21995544 -29.64593887]
[-248.88769531 -26.84363365]
[-262.36190796 -30.19931412]
[-273.01675415 -39.00006866]
[-278.80130005 -51.47766876]
[-278.63421631 -65.16360474]
[-292.00610352 -71.96008301]
[-305.37802124 -78.75656891]
[-318.74993896 -85.55304718]
[-332.12182617 -92.34953308]
[-348.98138428 -94.13615417]
[-351.93176270 -110.83140564]
[-336.70571899 -118.28820038]
[-325.32534790 -105.72143555]
[-311.95343018 -98.92495728]
[-298.58154297 -92.12847137]
[-285.20962524 -85.33199310]
[-271.83773804 -78.53550720]
[-258.54052734 -87.67144775]
[-242.35852051 -88.87794495]
[-227.68505859 -81.73283386]
[-218.55160522 -68.09427643]
[-217.52018738 -51.61850357]
[-204.01496887 -45.09093475]
[-190.50976562 -38.56336975]
[-174.90827942 -44.77497864]
[-159.32362366 -37.66576385]
[-153.56515503 -21.17567253]
[-139.93202209 -14.91963673]
[-126.29890442 -8.66360188]
[-117.53339386 -20.81020164]
[-106.56299591 -31.01649094]
[-93.80807495 -38.88883591]
[-79.75786591 -44.12307739]
[-64.95170593 -46.51628494]
[-49.95836639 -45.97463989]
[-35.35415268 -42.51707840]
[-21.70079613 -36.27466965]
[-9.52381992 -27.48562431]
[0.70767099 -16.48622513]
[8.59907150 -3.69794011]
[13.84549332 10.38871288]
[16.24354172 25.23298645]
[15.69920063 40.26465607]
[12.23151970 54.90593719]
[25.86464119 61.16197205]
[40.65912628 59.43788528]
[49.97476578 72.22574615]
[63.60789108 78.48178101]
[77.24101257 84.73781586]
[90.87413025 90.99385071]
[95.75494385 84.67790985]
[104.72164917 81.61976624]
[115.40328217 84.21549988]
[129.49296570 79.06953430]
[143.58264160 73.92356873]
[157.51153564 68.35707092]
[171.26710510 62.37507248]
[180.83674622 49.77616501]
[195.59378052 51.79592896]
[209.34934998 45.81392670]
[223.10491943 39.83192825]
[233.67628479 24.78618050]
[251.00776672 27.38422203]
[264.64089966 21.12818718]
[271.54568481 6.64704704]
[287.20452881 3.15708256]
[299.60531616 13.33549595]
[299.23519897 29.37427902]
[286.37814331 38.96985245]
[270.89691162 34.76131058]
[257.26379395 41.01734543]
[252.74235535 52.27487564]
[241.38896179 57.58335495]
[229.08691406 53.58749390]
[215.33134460 59.56949615]
[201.57577515 65.55149841]
[192.99002075 77.72253418]
[177.24909973 76.13064575]
[163.49353027 82.11264038]
[161.86552429 85.29978180]
[158.58338928 87.83663940]
[153.97943115 88.94094086]
[148.72860718 88.01324463]
[134.63893127 93.15921021]
[120.54925537 98.30518341]
[135.38121033 100.54412079]
[150.21318054 102.78305817]
[164.41079712 97.94284058]
[179.40188599 97.42578888]
[193.89924622 101.27629089]
[206.65809631 109.16373444]
[216.58291626 120.41086578]
[222.82150269 134.05197144]
[224.83822632 148.91578674]
[222.45988464 163.72604370]
[215.89071655 177.21107483]
[205.69476318 188.21299744]
[192.74748230 195.78717041]
[178.16058350 199.28323364]
[163.18655396 198.40101624]
[149.11111450 193.21624756]
[137.14282227 184.17411804]
[128.30932617 172.05102539]
[123.36910248 157.88789368]
[122.74581146 142.90579224]
[115.29248047 129.88858032]
[107.83914185 116.87136841]
[108.13927460 131.86836243]
[108.43940735 146.86535645]
[108.73954010 161.86235046]
[109.03967285 176.85935974]
[109.33980560 191.85635376]
[109.63993835 206.85334778]
[109.94007111 221.85034180]
[110.24020386 236.84733582]
[112.81592560 256.05712891]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 155]
[2 154]
[3 153]
[4 152]
[5 151]
[6 150]
[7 149]
[8 148]
[9 147]
[10 90]
[11 89]
[12 88]
[13 87]
[15 85]
[16 84]
[31 69]
[32 68]
[33 67]
[37 64]
[38 63]
[39 62]
[45 57]
[46 56]
[47 55]
[48 54]
[49 53]
[93 125]
[94 124]
[95 123]
[96 119]
[97 118]
[99 116]
[100 115]
[101 114]
[103 111]
[104 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
