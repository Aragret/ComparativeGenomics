%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGUCCCACUCCUAAACACAUCCGUAUUACUCGCAUCAGGAGUAUCAAUCACCUGAGCUCAxxxxxxxxxxACAUUGGGACAGACCUAGUUCAAUGAAUCUGAGGAGGCUACUCAGUAGACAGUCCCACCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[188.58120728 384.93273926]
[188.26914978 369.93597412]
[187.95709229 354.93920898]
[187.64503479 339.94247437]
[187.33297729 324.94570923]
[187.02091980 309.94897461]
[186.70887756 294.95220947]
[186.39682007 279.95544434]
[186.08476257 264.95870972]
[183.13928223 250.25073242]
[177.65223694 236.29034424]
[172.16520691 222.32995605]
[166.67817688 208.36956787]
[153.46586609 206.21768188]
[142.96829224 197.73754883]
[138.00765991 185.07096863]
[139.98568726 171.50259399]
[148.48957825 160.60842896]
[143.29415894 146.53691101]
[138.09873962 132.46539307]
[132.90332031 118.39386749]
[127.70790863 104.32234955]
[106.10691833 124.40429688]
[82.20571136 113.39183807]
[67.88311768 117.84864807]
[57.00507736 129.33685303]
[42.55365753 125.73051453]
[28.23105812 130.18733215]
[17.51022530 142.59683228]
[1.45587146 139.25172424]
[-3.41666031 123.59316254]
[7.90507317 111.72933960]
[23.77424240 115.86473083]
[38.09683990 111.40791321]
[47.95043182 100.23849487]
[63.42630005 103.52605438]
[77.74890137 99.06923676]
[81.35841370 84.57678986]
[94.04033661 74.57014465]
[111.41413116 74.38498688]
[104.78562927 60.92902374]
[91.74648285 51.96849442]
[93.06315613 37.13219833]
[86.43465424 23.67623520]
[77.29292297 11.78385448]
[65.99391937 1.91813147]
[54.69491196 -7.94759130]
[43.39590836 -17.81331444]
[32.09690475 -27.67903709]
[17.84863281 -22.08928299]
[2.63599825 -23.77282906]
[-10.04524803 -32.34280777]
[-17.28104973 -45.82990646]
[-17.40867043 -61.13488007]
[-10.39878464 -74.74076843]
[2.13778615 -83.52102661]
[17.32023048 -85.45802307]
[31.65973473 -80.10665131]
[41.86118317 -68.69660950]
[45.58036041 -53.84984589]
[41.96262741 -38.97804260]
[53.26163101 -29.11231995]
[64.56063843 -19.24659538]
[75.85964203 -9.38087368]
[87.15864563 0.48484984]
[82.67765808 -13.83020210]
[82.53175354 -28.82949257]
[86.73343658 -43.22900009]
[94.92301941 -55.79605484]
[106.39942169 -65.45484161]
[120.18020630 -71.37852478]
[135.08566284 -73.05999756]
[149.83979797 -70.35532379]
[163.17959595 -63.49603271]
[173.96308899 -53.06932068]
[181.26715088 -39.96776581]
[184.46650696 -25.31293488]
[183.28729248 -10.35935783]
[177.83044434 3.61285734]
[168.56309509 15.40761471]
[156.27859497 24.01522064]
[142.02853394 28.69881630]
[127.03282928 29.05746269]
[112.57517242 25.06045723]
[99.89062500 17.04773521]
[106.51911926 30.50370026]
[119.08415985 38.50177002]
[118.24160004 54.30052567]
[124.87009430 67.75649261]
[139.23828125 72.06407928]
[152.17633057 64.47416687]
[165.11439514 56.88425827]
[178.05244446 49.29434967]
[164.57612610 42.70734406]
[161.11587524 28.11190796]
[170.20088196 16.17612839]
[185.19071960 15.62409306]
[195.12902832 26.85929489]
[192.75210571 41.66916656]
[206.40834045 35.46376038]
[220.06459045 29.25835419]
[231.98345947 17.20111847]
[246.86895752 25.31641579]
[243.19152832 41.86672974]
[226.26998901 42.91459274]
[212.61375427 49.12000275]
[198.95750427 55.32540894]
[185.64234924 62.23240662]
[172.70429993 69.82231903]
[159.76625061 77.41222382]
[146.82818604 85.00212860]
[141.77943420 99.12693787]
[146.97485352 113.19845581]
[152.17025757 127.26997375]
[157.36567688 141.34149170]
[162.56109619 155.41300964]
[178.87608337 159.75733948]
[189.30227661 172.82548523]
[189.90260315 189.36650085]
[180.63856506 202.88253784]
[186.12559509 216.84292603]
[191.61264038 230.80331421]
[197.09967041 244.76370239]
[199.85682678 230.01928711]
[207.17234802 216.92413330]
[218.28222656 206.84590149]
[232.02613831 200.83715820]
[246.96867371 199.52545166]
[261.54925537 203.04777527]
[274.24508667 211.03627014]
[283.73022461 222.65660095]
[289.01403809 236.69515991]
[289.54470825 251.68577576]
[285.26681519 266.06283569]
[276.62710571 278.32476807]
[264.52792358 287.19100952]
[250.23292542 291.73553467]
[235.23503113 291.48373413]
[221.10064697 286.46188354]
[209.30593872 277.19448853]
[201.08151245 264.64663696]
[201.39356995 279.64340210]
[201.70562744 294.64016724]
[202.01768494 309.63690186]
[202.32974243 324.63366699]
[202.64179993 339.63040161]
[202.95384216 354.62716675]
[203.26589966 369.62393188]
[203.57795715 384.62066650]
[206.16896057 403.82839966]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 123]
[11 122]
[12 121]
[13 120]
[18 116]
[19 115]
[20 114]
[21 113]
[22 112]
[24 37]
[25 36]
[27 34]
[28 33]
[40 89]
[41 88]
[43 86]
[44 85]
[45 65]
[46 64]
[47 63]
[48 62]
[49 61]
[90 111]
[91 110]
[92 109]
[93 108]
[99 107]
[100 106]
[101 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
