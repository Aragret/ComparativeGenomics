%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUCAAACUCAAACUACGCCCUGAUCGGCGCACUGCGAGCAGUAGCCCAAACAAUCUCAUxxxxxxxxxxAUAAAUUAUUCAGCUUCCUACACUAUUAAAGUUUACCACAACCACCACCCCAUCAUACUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[166.22814941 397.96762085]
[166.22814941 382.96762085]
[166.22814941 367.96762085]
[166.22814941 352.96762085]
[166.22814941 337.96762085]
[166.22814941 322.96762085]
[166.22814941 307.96762085]
[166.22814941 292.96762085]
[166.22814941 277.96762085]
[166.22814941 262.96762085]
[153.55345154 270.98959351]
[139.67317200 265.30294800]
[136.27015686 250.69406128]
[146.20867920 239.45904541]
[161.12367249 241.05427551]
[154.49517822 227.59831238]
[147.86668396 214.14234924]
[141.23818970 200.68638611]
[134.60968018 187.23042297]
[120.46887207 182.69467163]
[113.55494690 169.14283752]
[118.40833282 154.34140015]
[111.77983856 140.88543701]
[96.01484680 142.36157227]
[80.80174255 137.97117615]
[68.24734497 128.32229614]
[60.09026337 114.75115204]
[45.32420731 117.39002228]
[30.55815125 120.02888489]
[15.79209614 122.66774750]
[6.96385479 135.77644348]
[-8.56368065 138.72113037]
[-21.57829857 129.75479126]
[-24.35865593 114.19698334]
[-15.25521755 101.27789307]
[0.33110863 98.66217804]
[13.15323257 107.90169525]
[27.91928864 105.26282501]
[42.68534470 102.62396240]
[57.45139694 99.98509979]
[56.71010971 88.37620544]
[59.22838974 76.42257690]
[45.44601059 70.50261688]
[31.66362762 64.58265686]
[17.88124657 58.66268921]
[1.66844869 61.12789536]
[-8.36015701 48.15256882]
[-1.88800013 33.08461380]
[14.42691803 31.42465210]
[23.80120850 44.88031006]
[37.58359146 50.80027390]
[51.36597061 56.72023392]
[65.14835358 62.64019775]
[77.49992371 54.12910843]
[76.87594604 39.14209366]
[76.25196838 24.15507698]
[61.33163071 22.30216980]
[46.91980362 18.01858330]
[33.40965652 11.42117119]
[21.16975975 2.68991947]
[10.53402328 -7.93697834]
[1.79259753 -20.16961288]
[-4.81604385 -33.67426682]
[-9.11161327 -48.08252716]
[-10.97692299 -63.00132370]
[-10.36108685 -78.02365875]
[-7.28090572 -92.73971558]
[-1.82040870 -106.74803162]
[5.87143755 -119.66644287]
[15.58479500 -131.14253235]
[27.05467415 -140.86322021]
[39.96817017 -148.56330872]
[53.97299194 -154.03276062]
[68.68708038 -157.12232971]
[83.70902252 -157.74777222]
[98.62900543 -155.89198303]
[113.04000854 -151.60562134]
[126.54888153 -145.00561523]
[138.78709412 -136.27200317]
[149.42077637 -125.64305115]
[158.15985107 -113.40873718]
[164.76589966 -99.90280914]
[169.05868530 -85.49372101]
[170.92112732 -70.57456207]
[170.30238342 -55.55234528]
[167.21937561 -40.83688354]
[161.75617981 -26.82962227]
[154.06184387 -13.91269207]
[144.34628296 -2.43847704]
[132.87452698 7.27999830]
[119.95954132 14.97760677]
[105.95366669 20.44435310]
[91.23899078 23.53109932]
[91.86296844 38.51811600]
[92.48693848 53.50513077]
[103.83499908 53.47339249]
[114.76083374 56.14676666]
[124.63507080 61.32184982]
[132.90086365 68.65261078]
[139.10523987 77.67316437]
[142.92382812 87.82720947]
[144.17753601 98.50221252]
[142.84048462 109.06635284]
[139.03874207 118.90591431]
[133.04010010 127.46090698]
[125.23580170 134.25694275]
[131.86430359 147.71290588]
[146.55714417 152.88572693]
[153.08769226 166.62641907]
[148.06564331 180.60192871]
[154.69415283 194.05789185]
[161.32264709 207.51385498]
[167.95114136 220.96981812]
[174.57965088 234.42578125]
[175.96827698 219.49020386]
[180.53895569 205.20353699]
[188.07743835 192.23544312]
[198.23034668 181.19378662]
[210.52182007 172.59611511]
[224.37568665 166.84542847]
[239.14259338 164.21130371]
[254.13034058 164.81718445]
[268.63644409 168.63467407]
[281.98092651 175.48484802]
[293.53829956 185.04660034]
[302.76681519 196.87174988]
[309.23394775 210.40602112]
[312.63650513 225.01499939]
[312.81503296 240.01394653]
[309.76116943 254.69978333]
[303.61804199 268.38415527]
[294.67361450 280.42562866]
[283.34710693 290.25976562]
[270.16946411 297.42562866]
[255.75836182 301.58734131]
[240.78926086 302.54980469]
[225.96385193 300.26791382]
[211.97702026 294.84863281]
[199.48439026 286.54598999]
[189.07151794 275.74911499]
[181.22814941 262.96762085]
[181.22814941 277.96762085]
[181.22814941 292.96762085]
[181.22814941 307.96762085]
[181.22814941 322.96762085]
[181.22814941 337.96762085]
[181.22814941 352.96762085]
[181.22814941 367.96762085]
[181.22814941 382.96762085]
[181.22814941 397.96762085]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[15 114]
[16 113]
[17 112]
[18 111]
[19 110]
[22 107]
[23 106]
[27 40]
[28 39]
[29 38]
[30 37]
[42 53]
[43 52]
[44 51]
[45 50]
[54 95]
[55 94]
[56 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
