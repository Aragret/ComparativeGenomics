%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUACAAUCUUCCUAGGAACAACAUAUGACGCACUCUCCCCUGAACUCUACACAACAUAUUxxxxxxxxxxUUAUACCCUUCCCGUACUAAUUAAUCCCCUGGCCCAACCCGUCAUCUACUCUACCAUCUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 301.42300415]
[92.50000000 286.42300415]
[92.50000000 271.42300415]
[92.50000000 256.42300415]
[92.50000000 241.42298889]
[92.50000000 226.42298889]
[92.50000000 211.42298889]
[92.50000000 196.42298889]
[92.50000000 181.42298889]
[92.50000000 166.42298889]
[77.90982819 163.08952332]
[64.42700195 156.59352112]
[52.72736740 147.26057434]
[43.39741898 135.55856323]
[36.90484238 122.07408142]
[33.57509613 107.48306274]
[33.57509613 92.51693726]
[36.90484238 77.92591858]
[43.39741898 64.44142914]
[52.72736740 52.73941803]
[64.42700195 43.40648651]
[77.90982819 36.91047287]
[92.50000000 33.57700729]
[92.50000000 18.57700539]
[92.50000000 3.57700539]
[82.73059082 14.95938969]
[68.40140533 19.39497375]
[53.90988541 15.52253151]
[43.70329285 4.53046846]
[40.91389847 -10.20789337]
[46.39773941 -24.16953659]
[58.47188950 -33.06981277]
[73.43094635 -34.17734146]
[86.68416595 -27.15223312]
[94.16449738 -14.14962673]
[96.95682526 -28.88743210]
[99.74914551 -43.62524033]
[102.54147339 -58.36304474]
[105.33379364 -73.10085297]
[108.12612152 -87.83865356]
[93.64159393 -91.76636505]
[79.50499725 -96.80471039]
[65.80134583 -102.92339325]
[52.61306000 -110.08560944]
[40.01945114 -118.24829102]
[28.09626198 -127.36233521]
[16.91520119 -137.37294006]
[6.54351425 -148.21989441]
[-2.95642257 -159.83796692]
[-11.52747440 -172.15727234]
[-19.11809349 -185.10372925]
[-25.68262672 -198.59948730]
[-31.18159676 -212.56335449]
[-35.58192825 -226.91136169]
[-38.85715866 -241.55722046]
[-40.98759079 -256.41284180]
[-41.96041107 -271.38888550]
[-41.76977158 -286.39529419]
[-40.41681290 -301.34179688]
[-37.90967560 -316.13848877]
[-34.26343536 -330.69641113]
[-29.50002480 -344.92800903]
[-23.64809227 -358.74768066]
[-16.74283028 -372.07229614]
[-8.82576942 -384.82174683]
[0.05547663 -396.91934204]
[9.84749317 -408.29232788]
[20.49139023 -418.87231445]
[31.92315292 -428.59564209]
[44.07402802 -437.40383911]
[56.87093735 -445.24395752]
[70.23691559 -452.06881714]
[84.09158325 -457.83740234]
[98.35161591 -462.51501465]
[112.93124390 -466.07348633]
[127.74278259 -468.49142456]
[142.69715881 -469.75433350]
[157.70443726 -469.85458374]
[172.67434692 -468.79156494]
[187.51687622 -466.57168579]
[202.14273071 -463.20828247]
[216.46397400 -458.72158813]
[230.39447021 -453.13861084]
[243.85043335 -446.49288940]
[256.75091553 -438.82443237]
[269.01837158 -430.17932129]
[280.57901001 -420.60955811]
[291.36328125 -410.17272949]
[301.30636597 -398.93157959]
[310.34841919 -386.95370483]
[318.43508911 -374.31115723]
[325.51773071 -361.07995605]
[331.55374146 -347.33969116]
[336.50683594 -333.17300415]
[340.34722900 -318.66506958]
[343.05181885 -303.90316772]
[344.60430908 -288.97610474]
[344.99539185 -273.97357178]
[344.22271729 -258.98587036]
[342.29092407 -244.10311890]
[339.21163940 -229.41481018]
[335.00335693 -215.00930786]
[329.69140625 -200.97322083]
[323.30776978 -187.39097595]
[315.89074707 -174.34428406]
[307.48504639 -161.91157532]
[298.14114380 -150.16763306]
[287.91528320 -139.18310547]
[276.86895752 -129.02403259]
[265.06857300 -119.75151825]
[252.58512878 -111.42133331]
[239.49369812 -104.08358002]
[225.87300110 -97.78238678]
[211.80497742 -92.55564117]
[197.37420654 -88.43479156]
[182.66751099 -85.44461823]
[167.77331543 -83.60309601]
[152.78118896 -82.92131042]
[137.78132629 -83.40335083]
[122.86392975 -85.04633331]
[120.07160187 -70.30852509]
[117.27927399 -55.57072067]
[114.48695374 -40.83291245]
[111.69462585 -26.09510803]
[108.90230560 -11.35730171]
[107.50000000 3.57700539]
[107.50000000 18.57700539]
[107.50000000 33.57700729]
[122.09017181 36.91047287]
[135.57299805 43.40648651]
[147.27262878 52.73941803]
[156.60258484 64.44142914]
[163.09515381 77.92591858]
[166.42491150 92.51693726]
[166.42491150 107.48306274]
[163.09515381 122.07408142]
[156.60258484 135.55856323]
[147.27262878 147.26057434]
[135.57299805 156.59352112]
[122.09017181 163.08952332]
[107.50000000 166.42298889]
[107.50000000 181.42298889]
[107.50000000 196.42298889]
[107.50000000 211.42298889]
[107.50000000 226.42298889]
[107.50000000 241.42298889]
[107.50000000 256.42300415]
[107.50000000 271.42300415]
[107.50000000 286.42300415]
[107.50000000 301.42300415]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[23 128]
[24 127]
[25 126]
[35 125]
[36 124]
[37 123]
[38 122]
[39 121]
[40 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
