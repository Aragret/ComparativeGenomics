%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAAGCCAACCCCAUGGCCUCCAUGACUUUUUCAAAAAGGUAUUAGAAAAACCAUUUCAUAACUxxxxxxxxxxAACCCCCCUCCUAAUACUAACUACCUGACUCCUACCCCUCACAAUCAUGGCAAGCCAACGCCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[72.28759766 406.45046997]
[72.28759766 391.45046997]
[72.28759766 376.45046997]
[72.28759766 361.45046997]
[72.28759766 346.45046997]
[72.28759766 331.45046997]
[72.28759766 316.45046997]
[72.28759766 301.45046997]
[72.28759766 286.45046997]
[72.28759766 271.45046997]
[67.95365143 270.37429810]
[63.76591110 268.82376099]
[59.77612305 266.81805420]
[56.03358078 264.38195801]
[45.06213760 274.61071777]
[34.09069443 284.83947754]
[23.11925316 295.06820679]
[22.81648445 310.86959839]
[11.37134933 321.76843262]
[-4.42595482 321.29861450]
[-15.20316887 309.73889160]
[-14.56636238 293.94744873]
[-2.89334226 283.29306030]
[12.89049625 284.09677124]
[23.86193848 273.86801147]
[34.83338165 263.63925171]
[45.80482483 253.41050720]
[39.70711136 226.86277771]
[51.96498489 202.36270142]
[77.15341949 191.19819641]
[78.95000458 176.30618286]
[80.74659729 161.41415405]
[82.54318237 146.52214050]
[84.33977509 131.63012695]
[86.13636780 116.73809814]
[76.81758118 104.98394012]
[61.90832901 103.33643341]
[46.99908066 101.68892670]
[32.08983231 100.04141998]
[17.18058205 98.39391327]
[0.77318466 102.66400146]
[-7.87204599 88.07988739]
[3.74887538 75.73523712]
[18.82808876 83.48466492]
[33.73733902 85.13217163]
[48.64658737 86.77967834]
[63.55583572 88.42718506]
[78.46508789 90.07469177]
[88.80310059 79.20613861]
[86.41212463 64.39791870]
[84.02114868 49.58970642]
[81.63017273 34.78149033]
[79.23919678 19.97327423]
[76.84822083 5.16505909]
[74.45725250 -9.64315605]
[68.20121765 -23.27627754]
[58.53387451 -34.74547958]
[48.86653900 -46.21467972]
[33.06792831 -49.00457764]
[25.52575493 -63.16421127]
[32.02572632 -77.83152008]
[47.58161926 -81.75499725]
[60.26028824 -71.92489624]
[60.33573914 -55.88201904]
[70.00307465 -44.41281891]
[79.67041779 -32.94361496]
[77.27603912 -47.75128174]
[78.06180573 -62.73068619]
[81.99229431 -77.20657349]
[88.89031982 -90.52637482]
[98.44493103 -102.08965302]
[110.22541046 -111.37514496]
[123.70069885 -117.96426392]
[138.26335144 -121.55998230]
[153.25689697 -122.00020599]
[168.00541687 -119.26508331]
[181.84408569 -113.47792053]
[194.14906311 -104.89959717]
[204.36564636 -93.91681671]
[212.03327942 -81.02466583]
[216.80630493 -66.80432129]
[218.46957397 -51.89682388]
[216.94808960 -36.97418594]
[212.31047058 -22.70911217]
[204.76574707 -9.74465561]
[194.65402222 1.33475387]
[182.43116760 10.02966690]
[168.64813232 15.94812298]
[153.92626953 18.82332420]
[138.92922974 18.52565765]
[124.33304596 15.06854248]
[110.79572296 8.60782337]
[98.92750549 -0.56525743]
[89.26546478 -12.03413105]
[91.65644073 2.77408409]
[94.04741669 17.58230019]
[96.43839264 32.39051437]
[98.82936096 47.19873047]
[101.22033691 62.00694656]
[103.61131287 76.81516266]
[101.58460999 61.95270920]
[108.25911713 48.51950455]
[121.32830811 41.15769577]
[136.27583313 42.41131973]
[147.93623352 51.84715652]
[152.27999878 66.20444489]
[147.80604553 80.52169800]
[136.06045532 89.85126495]
[121.10182190 90.96903992]
[136.08305359 90.21897125]
[151.06428528 89.46890259]
[157.99751282 75.76393890]
[170.86309814 67.37513733]
[186.20030212 66.55904388]
[199.88346863 73.53518677]
[208.23190308 86.42700958]
[208.99990845 101.76669312]
[201.98091125 115.42792511]
[189.06297302 123.73590851]
[173.72096252 124.45583344]
[160.08180237 117.39405060]
[151.81436157 104.45013428]
[136.83311462 105.20020294]
[121.85189056 105.95027161]
[118.11062622 111.81983185]
[112.95946503 116.01977539]
[107.04190063 118.27445221]
[101.02838898 118.53469086]
[99.23179626 133.42671204]
[97.43520355 148.31872559]
[95.63861847 163.21075439]
[93.84202576 178.10276794]
[92.04544067 192.99479675]
[99.13664246 196.04006958]
[105.52065277 200.35966492]
[110.97152710 205.79640198]
[115.29711914 212.15370178]
[118.34592438 219.20257568]
[120.01231384 226.69000244]
[120.24023438 234.34785461]
[119.02507019 241.90261841]
[116.41368866 249.08514404]
[112.50263214 255.64016724]
[107.43457031 261.33547974]
[101.39307404 265.97009277]
[94.59599304 269.38128662]
[87.28759766 271.45046997]
[87.28759766 286.45046997]
[87.28759766 301.45046997]
[87.28759766 316.45046997]
[87.28759766 331.45046997]
[87.28759766 346.45046997]
[87.28759766 361.45046997]
[87.28759766 376.45046997]
[87.28759766 391.45046997]
[87.28759766 406.45046997]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 156]
[2 155]
[3 154]
[4 153]
[5 152]
[6 151]
[7 150]
[8 149]
[9 148]
[10 147]
[14 27]
[15 26]
[16 25]
[17 24]
[30 133]
[31 132]
[32 131]
[33 130]
[34 129]
[35 128]
[36 48]
[37 47]
[38 46]
[39 45]
[40 44]
[49 100]
[50 99]
[51 98]
[52 97]
[53 96]
[54 95]
[55 94]
[56 66]
[57 65]
[58 64]
[109 124]
[110 123]
[111 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
