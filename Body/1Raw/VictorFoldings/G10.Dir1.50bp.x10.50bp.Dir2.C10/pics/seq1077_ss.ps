%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAGCCACACCCCCACGGGAAACAGCAGUGAUUAACCUUUAGCAAUAAACGAAAGUUUAACxxxxxxxxxxCUGAGCUAAACCUAGCCCCAAACCCACUCCACCUUACUACCAGACAACCUUAGCCAAACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-15.46011639 327.35037231]
[-22.64262581 340.51895142]
[-29.82513428 353.68753052]
[-37.00764465 366.85610962]
[-44.19015121 380.02468872]
[-44.00552368 395.84481812]
[-56.89239120 403.31329346]
[-56.70776367 419.13342285]
[-69.59463501 426.60186768]
[-76.77713776 439.77047729]
[-79.05333710 456.57092285]
[-95.82733917 459.03451538]
[-102.83815002 443.59802246]
[-89.94572449 432.58795166]
[-82.76321411 419.41937256]
[-83.46158600 404.54113770]
[-70.06097412 396.13079834]
[-70.75934601 381.25256348]
[-57.35873413 372.84219360]
[-50.17622375 359.67361450]
[-42.99371719 346.50503540]
[-35.81120682 333.33645630]
[-28.62869835 320.16787720]
[-42.13494110 311.69998169]
[-55.08566284 302.40472412]
[-67.43023682 292.31835938]
[-79.12042236 281.48031616]
[-90.11052704 269.93298340]
[-100.35760498 257.72146606]
[-109.82158661 244.89352417]
[-118.46549988 231.49925232]
[-126.25555420 217.59104919]
[-133.16130066 203.22323608]
[-139.15576172 188.45198059]
[-144.21548462 173.33502197]
[-148.32072449 157.93142700]
[-151.45539856 142.30142212]
[-153.60728455 126.50608063]
[-154.76797485 110.60714722]
[-154.93290710 94.66674805]
[-154.10145569 78.74720001]
[-152.27685547 62.91071320]
[-149.46626282 47.21918869]
[-145.68064880 31.73395729]
[-140.93479919 16.51553535]
[-135.24726868 1.62340927]
[-128.64028931 -12.88421917]
[-121.13969421 -26.95064735]
[-112.77478027 -40.52089691]
[-103.57825470 -53.54193115]
[-93.58605957 -65.96285248]
[-82.83724213 -77.73512268]
[-71.37381744 -88.81272888]
[-59.24058914 -99.15236664]
[-46.48497772 -108.71363831]
[-54.73726654 -121.23959351]
[-62.98955536 -133.76556396]
[-71.24184418 -146.29151917]
[-79.49413300 -158.81748962]
[-94.38909912 -165.67839050]
[-95.62522125 -182.03088379]
[-81.93087769 -191.05291748]
[-67.39364624 -183.46339417]
[-66.96817017 -167.06977844]
[-58.71588516 -154.54380798]
[-50.46359634 -142.01785278]
[-42.21130753 -129.49188232]
[-33.95901871 -116.96592712]
[-19.01497078 -125.50979614]
[-3.52851796 -133.02590942]
[12.42976093 -139.48002625]
[28.78713799 -144.84272766]
[45.46906281 -149.08955383]
[62.39950943 -152.20117188]
[79.50131989 -154.16340637]
[96.69655609 -154.96728516]
[113.90684509 -154.60917664]
[131.05375671 -153.09068298]
[148.05912781 -150.41874695]
[164.84548950 -146.60554504]
[181.33630371 -141.66844177]
[197.45645142 -135.62994385]
[213.13243103 -128.51757812]
[228.29281616 -120.36375427]
[242.86851501 -111.20562744]
[251.63471985 -123.37746429]
[260.40093994 -135.54930115]
[269.16714478 -147.72113037]
[270.27420044 -164.08287048]
[285.11456299 -171.06109619]
[298.42175293 -161.47721863]
[296.50643921 -145.19029236]
[281.33898926 -138.95492554]
[272.57278442 -126.78309631]
[263.80654907 -114.61125946]
[255.04035950 -102.43942261]
[265.51202393 -93.97164154]
[275.52203369 -84.96282196]
[285.04244995 -75.43807220]
[294.04675293 -65.42398071]
[302.50976562 -54.94846344]
[310.40792847 -44.04074860]
[317.71917725 -32.73125458]
[324.42315674 -21.05153465]
[330.50115967 -9.03416252]
[335.93618774 3.28733969]
[340.71316528 15.87860489]
[344.81866455 28.70450974]
[348.24133301 41.72928238]
[350.97155762 54.91658783]
[353.00173950 68.22964478]
[354.32620239 81.63132477]
[354.94128418 95.08423615]
[354.84527588 108.55086517]
[354.03839111 121.99363708]
[352.52294922 135.37506104]
[350.30310059 148.65782166]
[347.38510132 161.80484009]
[343.77706909 174.77947998]
[339.48904419 187.54553223]
[334.53305054 200.06739807]
[328.92282104 212.31015015]
[322.67407227 224.23962402]
[315.80422974 235.82255554]
[308.33242798 247.02662659]
[300.27951050 257.82061768]
[291.66796875 268.17437744]
[282.52178955 278.05905151]
[272.86651611 287.44705200]
[262.72906494 296.31219482]
[252.13769531 304.62979126]
[241.12197876 312.37658691]
[229.71261597 319.53100586]
[217.94145203 326.07308960]
[205.84130859 331.98458862]
[193.44593811 337.24899292]
[180.78991699 341.85165405]
[167.90855408 345.77969360]
[154.83776855 349.02218628]
[141.61401367 351.57006836]
[128.27420044 353.41625977]
[114.85550690 354.55557251]
[101.39538574 354.98486328]
[87.93137360 354.70291138]
[74.50102234 353.71054077]
[61.14179230 352.01046753]
[47.89095688 349.60745239]
[34.78546524 346.50820923]
[21.86187744 342.72137451]
[9.15624332 338.25750732]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 23]
[2 22]
[3 21]
[4 20]
[5 19]
[7 17]
[9 15]
[10 14]
[55 68]
[56 67]
[57 66]
[58 65]
[59 64]
[85 96]
[86 95]
[87 94]
[88 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
