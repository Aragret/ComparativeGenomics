%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUUAACCAAAUCAACAACAACCUAUUUAGCUGUUCCCCAACCUUUUCCUCCGACCCCCUAACAxxxxxxxxxxCUAUCCCUCAACCCCGACAUCAUUACCGGGUUUUCCUCUUGUAAAUAUAGUUUAACCAAAACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[224.34574890 64.75891876]
[209.61595154 67.59322357]
[194.88616943 70.42752838]
[180.15637207 73.26183319]
[165.42657471 76.09613037]
[151.28611755 81.10087585]
[138.05288696 88.16355896]
[124.81964874 95.22623444]
[111.58641052 102.28890991]
[99.92607117 111.72483063]
[90.25873566 123.19403076]
[80.59140015 134.66322327]
[85.88773346 149.08004761]
[83.25028229 164.21078491]
[73.38849640 175.98536682]
[58.95516205 181.23649597]
[43.83275604 178.55162048]
[32.08914185 168.65298462]
[26.88328934 154.20324707]
[29.61554527 139.08934021]
[39.55094528 127.37680817]
[54.01692200 122.21627808]
[69.12219238 124.99589539]
[78.78953552 113.52669525]
[88.45687103 102.05748749]
[81.00023651 89.04216766]
[66.21668243 91.58117676]
[51.43313217 94.12018585]
[36.64957809 96.65920258]
[28.55217552 106.74578094]
[16.14682579 108.53102112]
[6.19337130 101.59530640]
[-8.63802433 103.83800507]
[-21.10997963 114.48612213]
[-36.47502518 108.75485229]
[-38.92691422 92.54003906]
[-25.94335938 82.52208710]
[-10.88072491 89.00661469]
[3.95067096 86.76390839]
[17.02058792 75.08882904]
[34.11056900 81.87564850]
[48.89412308 79.33663940]
[63.67767334 76.79762268]
[78.46122742 74.25861359]
[104.52373505 89.05567169]
[117.75697327 81.99299622]
[130.99020386 74.93032074]
[144.22344971 67.86763763]
[129.26921082 66.69686127]
[115.70583344 60.29101944]
[105.30200195 49.48545074]
[99.41439819 35.68921280]
[98.81076813 20.70136452]
[103.56983185 6.47634125]
[113.07099915 -5.13089085]
[126.07530212 -12.60672951]
[140.88694763 -14.97631359]
[155.57449341 -11.93064404]
[168.22265625 -3.86688304]
[177.18206787 8.16344357]
[181.28443909 22.59156036]
[179.99479675 37.53601837]
[173.48132324 51.04803467]
[162.59228516 61.36634445]
[177.32206726 58.53203964]
[192.05186462 55.69773865]
[206.78164673 52.86343384]
[221.51144409 50.02913284]
[219.82450867 33.00050735]
[219.79489136 15.88910389]
[221.42280579 -1.14415741]
[224.69279480 -17.93910599]
[229.57402039 -34.33782196]
[236.02046204 -50.18612289]
[243.97142029 -65.33500671]
[253.35202026 -79.64206696]
[264.07394409 -92.97281647]
[276.03631592 -105.20195770]
[289.12649536 -116.21456146]
[303.22140503 -125.90714264]
[318.18835449 -134.18865967]
[333.88656616 -140.98129272]
[350.16839600 -146.22128296]
[366.88067627 -149.85946655]
[383.86621094 -151.86170959]
[400.96527100 -152.20930481]
[418.01702881 -150.89907837]
[434.86117554 -147.94346619]
[451.33932495 -143.37036133]
[467.29650879 -137.22288513]
[482.58270264 -129.55894470]
[497.05422974 -120.45070648]
[510.57507324 -109.98390961]
[523.01806641 -98.25708008]
[534.26635742 -85.38056183]
[544.21423340 -71.47552490]
[557.15429688 -79.06200409]
[570.09436035 -86.64848328]
[583.03442383 -94.23496246]
[582.85174561 -109.59277344]
[590.38641357 -122.97649384]
[603.61169434 -130.78598022]
[618.96997070 -130.92051697]
[632.33001709 -123.34391785]
[640.09802246 -110.09424591]
[640.18444824 -94.73559570]
[632.56597900 -81.39936829]
[619.29205322 -73.67294312]
[603.93316650 -73.63468933]
[590.62091064 -81.29489899]
[577.68084717 -73.70841980]
[564.74078369 -66.12194061]
[551.80072021 -58.53546143]
[557.59063721 -46.55674362]
[562.46087646 -34.17526627]
[566.38360596 -21.46152306]
[569.33648682 -8.48790455]
[571.30261230 4.67171478]
[572.27087402 17.94239998]
[572.23553467 31.24857712]
[571.19689941 44.51447296]
[569.16082764 57.66453171]
[566.13879395 70.62386322]
[562.14801025 83.31866455]
[557.21118164 95.67661285]
[551.35638428 107.62732697]
[544.61688232 119.10272217]
[537.03106689 130.03744507]
[528.64208984 140.36918640]
[519.49774170 150.03907776]
[509.64996338 158.99203491]
[499.15487671 167.17704773]
[488.07220459 174.54745483]
[476.46508789 181.06126404]
[464.39953613 186.68133545]
[451.94430542 191.37564087]
[439.17025757 195.11738586]
[426.15017700 197.88523865]
[412.95819092 199.66339111]
[399.66937256 200.44168091]
[386.35946655 200.21563721]
[373.10421753 198.98651123]
[359.97912598 196.76124573]
[347.05899048 193.55249023]
[334.41732788 189.37847900]
[322.12622070 184.26292419]
[310.25561523 178.23493958]
[298.87313843 171.32881165]
[288.04367065 163.58384705]
[277.82888794 155.04409790]
[268.28698730 145.75817871]
[259.47232056 135.77893066]
[251.43515015 125.16317749]
[244.22125244 113.97133636]
[237.87174988 102.26712799]
[232.42283630 90.11717987]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 68]
[2 67]
[3 66]
[4 65]
[5 64]
[6 48]
[7 47]
[8 46]
[9 45]
[10 25]
[11 24]
[12 23]
[26 44]
[27 43]
[28 42]
[29 41]
[32 39]
[33 38]
[96 113]
[97 112]
[98 111]
[99 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
