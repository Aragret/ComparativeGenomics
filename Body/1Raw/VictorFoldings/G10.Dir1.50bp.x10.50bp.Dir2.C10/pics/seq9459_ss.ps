%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAACUAACCUGCCACUAAUAGUUAUGUCAUCCCUCUUAUUAAUCAUCAUCCUAGCCCUAAxxxxxxxxxxUAUCACACAUCAACUGCAACUCCAAAGCCACCCCUCACCCACUAGGAUACCAACAAACCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[114.15499878 258.14962769]
[114.15499878 243.14964294]
[114.15499878 228.14964294]
[114.15499878 213.14964294]
[114.15499878 198.14964294]
[114.15499878 183.14964294]
[114.15499878 168.14964294]
[114.15499878 153.14964294]
[114.15499878 138.14964294]
[114.15499878 123.14963531]
[98.80219269 128.51889038]
[82.28633118 124.15480042]
[70.20634460 133.04714966]
[58.12635422 141.93949890]
[46.04636383 150.83184814]
[33.96637726 159.72419739]
[36.83600998 174.71511841]
[32.90884018 189.46437073]
[22.96461296 201.04344177]
[8.97775841 207.15333557]
[-6.27462053 206.58090210]
[-19.76415443 199.43980408]
[-28.81248665 187.14791870]
[-31.62306404 172.14579773]
[-27.63784218 157.41213989]
[-17.64809418 145.87231445]
[-3.63728833 139.81755066]
[11.61271858 140.45004272]
[25.07402611 147.64421082]
[37.15401459 138.75186157]
[49.23400497 129.85951233]
[61.31399155 120.96715546]
[73.39398193 112.07480621]
[70.90885925 97.28210449]
[56.58626556 92.82528687]
[42.26366806 88.36846924]
[33.33100128 100.59492493]
[20.91098404 109.25644684]
[6.35084200 113.41348267]
[-8.77004910 112.61511993]
[-22.81148720 106.94795990]
[-34.25036240 97.02672577]
[-41.84587097 83.92760468]
[-44.77410889 69.07148743]
[-42.71744537 54.06986237]
[-35.89896774 40.54998398]
[-25.05829620 29.97839355]
[-11.37134361 23.50181580]
[3.67722988 21.82278061]
[18.45506859 25.12341881]
[31.35918236 33.04570007]
[40.98983002 44.73027802]
[46.30234909 58.90969467]
[46.72048187 74.04587555]
[61.04307938 78.50268555]
[75.36567688 82.95950317]
[104.42563629 71.80114746]
[125.97150421 92.14183807]
[135.95423889 80.94607544]
[145.93695068 69.75030518]
[155.91967773 58.55454254]
[165.90240479 47.35877609]
[175.88513184 36.16300964]
[185.86785889 24.96724510]
[175.78640747 13.84086514]
[166.94474792 1.70590937]
[159.44306946 -11.30012321]
[153.36636353 -25.02986336]
[148.78349304 -39.32774353]
[145.74638367 -54.03176117]
[144.28944397 -68.97530365]
[144.42919922 -83.98904419]
[146.16403198 -98.90287781]
[149.47431946 -113.54781342]
[154.32252502 -127.75791168]
[160.65374756 -141.37216187]
[168.39622498 -154.23631287]
[177.46221924 -166.20458984]
[187.74903870 -177.14138794]
[199.14010620 -186.92277527]
[211.50634766 -195.43794250]
[224.70765686 -202.59039307]
[238.59445190 -208.29908752]
[253.00936890 -212.49934387]
[267.78909302 -215.14356995]
[282.76614380 -216.20179749]
[297.77084351 -215.66203308]
[312.63314819 -213.53041077]
[327.18469238 -209.83106995]
[341.26055908 -204.60592651]
[354.70126343 -197.91418457]
[367.35452271 -189.83168030]
[379.07696533 -180.44998169]
[389.73577881 -169.87538147]
[399.21017456 -158.22772217]
[407.39279175 -145.63897705]
[414.19094849 -132.25177002]
[419.52758789 -118.21778870]
[423.34222412 -103.69606781]
[425.59167480 -88.85112762]
[426.25045776 -73.85119629]
[425.31106567 -58.86621094]
[422.78414917 -44.06597900]
[418.69839478 -29.61819458]
[413.10003662 -15.68655872]
[406.05252075 -2.42893004]
[397.63571167 10.00447273]
[387.94497681 21.47276878]
[377.09011841 31.84601593]
[365.19415283 41.00667191]
[352.39181519 48.85094833]
[338.82821655 55.28995514]
[324.65701294 60.25073624]
[310.03881836 63.67708588]
[295.13919067 65.53017426]
[280.12704468 65.78900909]
[265.17239380 64.45065308]
[250.44476318 61.53028107]
[236.11097717 57.06097031]
[222.33346558 51.09336853]
[209.26834106 43.69509506]
[197.06362915 34.94997025]
[187.08090210 46.14573669]
[177.09817505 57.34150314]
[167.11544800 68.53726959]
[157.13272095 79.73303223]
[147.14999390 90.92880249]
[137.16726685 102.12456512]
[148.99600220 92.90063477]
[163.60296631 89.48937225]
[178.29360962 92.52006531]
[190.35794067 101.43363953]
[197.57048035 114.58580780]
[198.60069275 129.55038452]
[193.25857544 143.56686401]
[182.52955627 154.04962158]
[168.39283752 159.06491089]
[153.45620728 157.68756104]
[140.47502136 150.17163086]
[131.84393311 137.90362549]
[129.15499878 123.14963531]
[129.15499878 138.14964294]
[129.15499878 153.14964294]
[129.15499878 168.14964294]
[129.15499878 183.14964294]
[129.15499878 198.14964294]
[129.15499878 213.14964294]
[129.15499878 228.14964294]
[129.15499878 243.14964294]
[129.15499878 258.14962769]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 33]
[13 32]
[14 31]
[15 30]
[16 29]
[34 56]
[35 55]
[36 54]
[58 128]
[59 127]
[60 126]
[61 125]
[62 124]
[63 123]
[64 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
