%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAAUAGCUAUCCUCUUCAACAAUAUACUCUCCGGACAAUGAACCAUAACCAAUACUACCAAUxxxxxxxxxxUAACUCAUGCCCCCAUGUCUAACAACAUGGCUUUCUCAACUUUUAAAGGAUAACAGCUAUCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[116.40132904 282.44677734]
[116.40132904 267.44677734]
[116.40132904 252.44677734]
[116.40132904 237.44677734]
[116.40132904 222.44677734]
[116.40132904 207.44677734]
[116.40132904 192.44677734]
[116.40132904 177.44677734]
[116.40132904 162.44677734]
[116.40132904 147.44677734]
[97.46730042 147.83518982]
[80.63318634 141.28610229]
[68.21125793 129.40512085]
[61.63530731 114.47340393]
[61.30744171 99.03374481]
[66.62194061 85.46569824]
[54.39796448 76.77234650]
[44.70676804 88.23303223]
[34.09055328 98.84258270]
[22.62377548 108.52656555]
[10.38687515 117.21707153]
[-2.53431606 124.85312653]
[-16.04916382 131.38117981]
[-30.06287003 136.75543213]
[-44.47713852 140.93818665]
[-59.19085693 143.90010071]
[-74.10082245 145.62042236]
[-89.10244751 146.08705139]
[-104.09050751 145.29673767]
[-118.95986938 143.25502014]
[-133.60623169 139.97621155]
[-147.92686462 135.48332214]
[-161.82131958 129.80786133]
[-175.19210815 122.98963165]
[-187.94548035 115.07646942]
[-199.99195862 106.12387848]
[-211.24705505 96.19464874]
[-221.63180542 85.35844421]
[-231.07337952 73.69125366]
[-239.50555420 61.27493286]
[-246.86917114 48.19656754]
[-253.11257935 34.54788971]
[-258.19198608 20.42464447]
[-262.07177734 5.92589235]
[-264.72473145 -8.84666348]
[-266.13223267 -23.78940392]
[-266.28439331 -38.79751587]
[-265.18017578 -53.76572418]
[-262.82733154 -68.58903503]
[-259.24230957 -83.16347504]
[-254.45033264 -97.38681030]
[-248.48495483 -111.15927887]
[-241.38803101 -124.38426971]
[-233.20936584 -136.96902466]
[-224.00630188 -148.82525635]
[-213.84341431 -159.86979675]
[-202.79197693 -170.02520752]
[-190.92950439 -179.22021484]
[-178.33920288 -187.39035034]
[-165.10940552 -194.47828674]
[-151.33290100 -200.43432617]
[-137.10630798 -205.21667480]
[-122.52944183 -208.79179382]
[-107.70453644 -211.13459778]
[-92.73558044 -212.22865295]
[-77.72757721 -212.06629944]
[-62.78579712 -210.64866638]
[-48.01504517 -207.98570251]
[-33.51892853 -204.09608459]
[-19.39912987 -199.00709534]
[-5.75469112 -192.75442505]
[7.31867933 -185.38194275]
[19.72928047 -176.94134521]
[31.39006042 -167.49186707]
[42.21922302 -157.09976196]
[52.14081192 -145.83795166]
[61.08522797 -133.78540039]
[68.98973846 -121.02666473]
[75.79889679 -107.65123749]
[81.46493530 -93.75294495]
[85.94811249 -79.42927551]
[89.21697998 -64.78068542]
[91.24861908 -49.90994263]
[92.02877045 -34.92135239]
[91.55195618 -19.92004585]
[89.82153320 -5.01125002]
[86.84963226 9.70045757]
[82.65709686 24.11188507]
[77.27334595 38.12194061]
[70.73612976 51.63235855]
[63.09131241 64.54837036]
[75.31529236 73.24171448]
[97.26229095 59.08748245]
[126.17960358 62.66042328]
[148.23229980 86.07718658]
[161.27305603 78.66512299]
[174.31381226 71.25305939]
[187.35456848 63.84099579]
[200.39532471 56.42892838]
[213.43608093 49.01686478]
[217.38739014 33.71448898]
[231.04405212 25.76016617]
[246.30378723 29.87304878]
[254.11328125 43.61303711]
[249.83929443 58.82844543]
[236.01751709 66.49223328]
[220.84814453 62.05762100]
[207.80738831 69.46968079]
[194.76663208 76.88175201]
[181.72587585 84.29381561]
[168.68511963 91.70587921]
[155.64436340 99.11794281]
[157.91578674 113.94496918]
[172.57737732 117.11318970]
[187.23896790 120.28141022]
[201.90057373 123.44963074]
[212.15658569 112.01679993]
[226.75994873 107.25893402]
[241.78244019 110.45588684]
[253.18307495 120.74768829]
[257.89514160 135.36589050]
[254.65110779 150.37829590]
[244.32362366 161.74659729]
[229.69071960 166.41282654]
[214.68856812 163.12176514]
[203.35267639 152.75868225]
[198.73234558 138.11122131]
[184.07075500 134.94300842]
[169.40916443 131.77478027]
[154.74755859 128.60656738]
[148.91101074 133.31661987]
[160.25883484 143.12612915]
[171.60667419 152.93565369]
[182.95451355 162.74517822]
[196.63671875 168.89309692]
[203.40852356 182.27751160]
[200.25657654 196.94261169]
[188.58343506 206.36270142]
[173.58343506 206.34597778]
[161.93132019 196.89991760]
[158.81204224 182.22793579]
[151.62065125 169.06419373]
[144.42927551 155.90045166]
[137.23788452 142.73672485]
[131.40133667 147.44677734]
[131.40133667 162.44677734]
[131.40133667 177.44677734]
[131.40133667 192.44677734]
[131.40133667 207.44677734]
[131.40133667 222.44677734]
[131.40133667 237.44677734]
[131.40133667 252.44677734]
[131.40133667 267.44677734]
[131.40133667 282.44677734]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[16 92]
[17 91]
[95 112]
[96 111]
[97 110]
[98 109]
[99 108]
[100 107]
[113 130]
[114 129]
[115 128]
[116 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
