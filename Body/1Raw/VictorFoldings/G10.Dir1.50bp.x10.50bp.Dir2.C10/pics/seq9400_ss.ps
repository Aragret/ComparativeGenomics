%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCACCCCUUACGAGUGCGGCUUCGACCCUAUAUCCCCCGCCCGCGUCCCUUUCUCCAUAAxxxxxxxxxxACACUAUUCUCACCAGACCUCCUAGGCGACCCAGACAAUUAUACCCUAGCCAACCCCUUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[149.04298401 110.39151001]
[142.05984497 94.05812073]
[127.73725128 98.51493835]
[113.41464996 102.97175598]
[101.91284943 112.60028076]
[95.00585175 125.91543579]
[88.09885406 139.23059082]
[81.19185638 152.54574585]
[74.28485870 165.86090088]
[75.56398010 182.21008301]
[61.89341736 191.26811218]
[47.33626938 183.71685791]
[46.86768341 167.32440186]
[60.96969986 158.95390320]
[67.87670135 145.63874817]
[74.78369904 132.32359314]
[81.69069672 119.00843811]
[88.59769440 105.69328308]
[80.87326050 92.83431244]
[73.14952087 79.97647858]
[58.15033340 79.82044220]
[43.15114594 79.66440582]
[29.27123451 87.25772858]
[16.62513733 79.38845062]
[2.74522543 86.98178101]
[-9.90087128 79.11250305]
[-24.90005875 78.95646667]
[-39.89924622 78.80043030]
[-54.89843750 78.64439392]
[-59.94374847 92.92107391]
[-69.35327148 104.78443909]
[-82.10633850 112.94765472]
[-96.81958771 116.52522278]
[-111.89704132 115.12907410]
[-125.70320129 108.91066742]
[-136.74047852 98.54450989]
[-143.81164551 85.15505981]
[-146.14965820 70.19470215]
[-143.50091553 55.28621674]
[-136.15274048 42.04677200]
[-124.90219116 31.91247940]
[-110.96965027 25.98263550]
[-95.86641693 24.90046120]
[-81.23078156 28.78334427]
[-68.65029907 37.21009827]
[-59.48960876 49.26665497]
[-54.74240112 63.64520645]
[-39.74320984 63.80124283]
[-24.74402237 63.95727921]
[-9.74483490 64.11331177]
[3.06223559 56.50882721]
[16.78117371 64.38926697]
[29.58824539 56.78477859]
[43.30718231 64.66521454]
[58.30637360 64.82125092]
[73.30555725 64.97728729]
[108.95783997 88.64915466]
[123.28043365 84.19233704]
[137.60302734 79.73552704]
[134.86105347 67.15852356]
[133.13401794 54.40279770]
[132.43293762 41.55012512]
[132.76226807 28.68288612]
[134.11984253 15.88355350]
[136.49690247 3.23416114]
[139.87815857 -9.18422222]
[144.24188232 -21.29201317]
[149.56007385 -33.01162338]
[155.79858398 -44.26795197]
[162.91738892 -54.98887634]
[170.87081909 -65.10570526]
[179.60783386 -74.55363464]
[189.07240295 -83.27213287]
[199.20384216 -91.20536041]
[209.93716431 -98.30251312]
[221.20355225 -104.51812744]
[232.93075562 -109.81242371]
[245.04357910 -114.15151215]
[257.46438599 -117.50762939]
[270.11355591 -119.85931396]
[282.91000366 -121.19153595]
[295.77166748 -121.49581909]
[308.61611938 -120.77026367]
[321.36105347 -119.01956940]
[333.92477417 -116.25501251]
[346.22674561 -112.49435425]
[358.18817139 -107.76175690]
[369.73236084 -102.08760834]
[380.78540039 -95.50830841]
[391.27639771 -88.06609344]
[401.13818359 -79.80869293]
[410.30758667 -70.78907776]
[418.72583008 -61.06509781]
[426.33901978 -50.69911957]
[433.09841919 -39.75761032]
[438.96072388 -28.31073380]
[443.88839722 -16.43187904]
[447.84994507 -4.19720888]
[450.81997681 8.31484127]
[452.77951050 21.02406120]
[453.71606445 33.84897995]
[453.62365723 46.70739365]
[468.55798340 48.10969925]
[483.49227905 49.51200104]
[498.42657471 50.91430664]
[513.36090088 52.31660843]
[519.34350586 38.42187881]
[529.32855225 27.05727577]
[542.33776855 19.33618355]
[557.09667969 16.01503944]
[572.15930176 17.41921234]
[586.05004883 23.41113853]
[597.40795898 33.40378571]
[605.12030029 46.41818237]
[608.43157959 61.17930603]
[607.01733398 76.24101257]
[601.01611328 90.12771606]
[591.01580811 101.47892761]
[577.99627686 109.18257904]
[563.23291016 112.48394012]
[548.17218018 111.05957794]
[534.28948975 105.04904938]
[522.94500732 95.04118347]
[515.25006104 82.01646423]
[511.95858765 67.25091553]
[497.02429199 65.84860992]
[482.08996582 64.44631195]
[467.15567017 63.04400635]
[452.22137451 61.64170074]
[448.77954102 79.04974365]
[443.43817139 95.97262573]
[436.26226807 112.20374298]
[427.33920288 127.54489899]
[416.77783203 141.80874634]
[404.70684814 154.82106018]
[391.27349854 166.42289734]
[376.64163208 176.47251892]
[360.98977661 184.84709167]
[344.50885010 191.44422913]
[327.39996338 196.18327332]
[309.87194824 199.00617981]
[292.13870239 199.87832642]
[274.41665649 198.78889465]
[256.92214966 195.75099182]
[239.86877441 190.80152893]
[223.46472168 184.00074768]
[207.91029358 175.43150330]
[193.39544678 165.19824219]
[180.09744263 153.42570496]
[168.17871094 140.25749207]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 59]
[3 58]
[4 57]
[5 18]
[6 17]
[7 16]
[8 15]
[9 14]
[20 56]
[21 55]
[22 54]
[24 52]
[26 50]
[27 49]
[28 48]
[29 47]
[102 129]
[103 128]
[104 127]
[105 126]
[106 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
