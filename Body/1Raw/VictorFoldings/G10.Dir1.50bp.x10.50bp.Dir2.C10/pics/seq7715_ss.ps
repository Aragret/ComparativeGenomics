%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCUCCCUUACCAUCAAAUCAAUUGGCCACCAAUGGUACUGAACCUACGAGUACACCGACxxxxxxxxxxAACUGCAACUCCAAAGCCACCCCUCACCCACUAGGAUACCAACAAACCUACCCACCCUUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[46.83313751 255.77278137]
[41.34610748 269.73315430]
[35.85907364 283.69354248]
[30.37204361 297.65393066]
[24.88501167 311.61434937]
[19.39797974 325.57473755]
[13.91094875 339.53512573]
[13.74424458 356.48825073]
[-2.59249663 361.02114868]
[-11.47071266 346.57769775]
[-0.04944112 334.04809570]
[5.43759060 320.08770752]
[10.92462158 306.12728882]
[16.41165352 292.16690063]
[21.89868546 278.20651245]
[27.38571548 264.24612427]
[32.87274933 250.28575134]
[21.89193916 244.88272095]
[11.34292984 238.67875671]
[1.28404057 231.70812988]
[-8.22912121 224.00939941]
[-17.14396477 215.62510681]
[-25.41120720 206.60160828]
[-32.98514557 196.98878479]
[-39.82390594 186.83978271]
[-45.88968277 176.21070862]
[-51.14894485 165.16033936]
[-55.57262039 153.74972534]
[-59.13624573 142.04197693]
[-61.82012939 130.10180664]
[-63.60942459 117.99523163]
[-64.49424744 105.78916931]
[-79.49343872 105.63313293]
[-94.49263000 105.47709656]
[-109.49181366 105.32106018]
[-124.49100494 105.16502380]
[-140.39218140 111.04627228]
[-150.44546509 97.39461517]
[-140.11035156 83.95506287]
[-124.33496857 90.16584015]
[-109.33577728 90.32187653]
[-94.33659363 90.47791290]
[-79.33740234 90.63394928]
[-64.33821106 90.78998566]
[-53.80641174 41.38719559]
[-28.78888130 -2.49534941]
[-40.08788681 -12.36107254]
[-51.38689041 -22.22679520]
[-62.68589783 -32.09251785]
[-73.98490143 -41.95824051]
[-88.77475739 -37.56919861]
[-103.58328247 -41.89484406]
[-113.68512726 -53.55487061]
[-115.85682678 -68.82861328]
[-109.40541077 -82.84227753]
[-96.38948822 -91.12414551]
[-80.96240234 -91.03151703]
[-68.04687500 -82.59393311]
[-61.76420975 -68.50380707]
[-64.11917877 -53.25724792]
[-52.82017136 -43.39152527]
[-41.52116776 -33.52579880]
[-30.22216415 -23.66007805]
[-18.92315865 -13.79435444]
[-12.44991970 -20.19520950]
[-5.63269711 -26.22838783]
[1.50765502 -31.87543678]
[8.94929409 -37.11907959]
[16.66945648 -41.94327545]
[24.64452553 -46.33326721]
[32.85010910 -50.27563095]
[41.26110077 -53.75829697]
[49.85177231 -56.77062225]
[58.59585190 -59.30338669]
[67.46658325 -61.34884262]
[76.43683624 -62.90073776]
[85.47916412 -63.95431519]
[94.56591034 -64.50636292]
[103.66928864 -64.55518341]
[112.76143646 -64.10063171]
[121.81454468 -63.14410400]
[130.80091858 -61.68851471]
[139.69308472 -59.73832321]
[148.46382141 -57.29949188]
[157.08631897 -54.37948608]
[165.53417969 -50.98723221]
[173.78157043 -47.13311005]
[181.80326843 -42.82891083]
[189.57473755 -38.08779526]
[197.07218933 -32.92427444]
[204.27270508 -27.35413933]
[211.15423584 -21.39442825]
[217.69577026 -15.06337261]
[223.87725830 -8.38033962]
[229.67980957 -1.36577249]
[235.08567810 5.95887184]
[240.07830811 13.57118702]
[244.64245605 21.44788742]
[248.76412964 29.56487846]
[252.43074036 37.89732742]
[255.63107300 46.41975021]
[258.35531616 55.10607529]
[260.59515381 63.92972946]
[262.34375000 72.86371613]
[263.59573364 81.88072205]
[264.34729004 90.95314789]
[264.59606934 100.05325317]
[264.34140015 109.15319061]
[263.58398438 118.22513580]
[262.32617188 127.24132538]
[260.57180786 136.17417908]
[258.32623291 144.99638367]
[272.55300903 149.75019836]
[286.77978516 154.50401306]
[301.00659180 159.25782776]
[312.00350952 148.61235046]
[326.69128418 144.30790710]
[341.69473267 147.33363342]
[353.56619263 156.99421692]
[359.57766724 171.06974792]
[358.34780884 186.32577515]
[350.15917969 199.25654602]
[336.89349365 206.89070129]
[321.59912109 207.47393799]
[307.79055786 200.87225342]
[298.64093018 188.60264587]
[296.25277710 173.48460388]
[282.02597046 168.73078918]
[267.79919434 163.97697449]
[253.57241821 159.22315979]
[249.08059692 169.76281738]
[243.86645508 179.96446228]
[237.95529175 189.77867126]
[231.37573242 199.15791321]
[224.15963745 208.05671692]
[216.34201050 216.43200684]
[207.96067810 224.24316406]
[199.05628967 231.45236206]
[189.67196655 238.02467346]
[179.85319519 243.92825317]
[169.64750671 249.13449097]
[159.10440063 253.61817932]
[148.27491760 257.35757446]
[137.21154785 260.33456421]
[125.96787262 262.53472900]
[114.59839630 263.94741821]
[103.15818787 264.56579590]
[91.70267487 264.38681030]
[80.28736877 263.41140747]
[68.96756744 261.64425659]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 17]
[2 16]
[3 15]
[4 14]
[5 13]
[6 12]
[7 11]
[32 44]
[33 43]
[34 42]
[35 41]
[36 40]
[46 64]
[47 63]
[48 62]
[49 61]
[50 60]
[112 130]
[113 129]
[114 128]
[115 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
