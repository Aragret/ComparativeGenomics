%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAACCUCCUACUCCUCAUUGUACCCAUUCUAAUCGCAAUGGCAUUCCUAAUGCUUACCGAACGxxxxxxxxxxUUUACCUUUCACUUCAUCUUGCCCUUCAUUAUUGCAGCCCUAGCAACACUCCACCUCCUAUUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[100.92913818 179.77598572]
[100.33279419 164.78784180]
[99.73645020 149.79969788]
[99.14010620 134.81155396]
[98.54376984 119.82341766]
[91.88140869 133.26264954]
[85.21904755 146.70187378]
[78.55669403 160.14111328]
[71.89433289 173.58035278]
[73.47221375 189.90341187]
[59.96957397 199.20989990]
[45.27677917 191.92610168]
[44.50851059 175.54496765]
[58.45510483 166.91798401]
[65.11746216 153.47875977]
[71.77981567 140.03952026]
[78.44217682 126.60028839]
[85.10453033 113.16105652]
[80.99250793 106.88879395]
[68.70262909 115.48873138]
[59.00882339 126.93556976]
[45.02910995 121.49795532]
[45.61769485 106.50951385]
[59.98078918 102.18490601]
[72.76845551 94.34427643]
[68.65643311 88.07201385]
[53.67519760 88.82208252]
[38.69396210 89.57215118]
[23.71272850 90.32221985]
[8.73149395 91.07228088]
[-6.24974155 91.82234955]
[-11.70108986 106.04215240]
[-22.46945000 116.81072998]
[-36.68913651 122.26236725]
[-51.89650726 121.45253754]
[-65.45678711 114.52154541]
[-75.02058411 102.67022705]
[-78.93090057 87.95189667]
[-76.51026154 72.91658783]
[-68.17804718 60.16926956]
[-55.37787628 51.91848373]
[-40.32744980 49.59373093]
[-25.63434029 53.59778976]
[-13.84422493 63.23693085]
[-6.99980879 76.84111786]
[7.98142624 76.09104919]
[22.96266174 75.34098053]
[37.94389725 74.59091187]
[52.92512894 73.84085083]
[67.90636444 73.09078217]
[72.76938629 58.90095901]
[61.39748001 49.11935425]
[50.02557373 39.33775330]
[38.65366745 29.55615044]
[27.28176117 19.77454758]
[11.33082581 14.02963543]
[12.43556690 -2.88828015]
[28.99814796 -6.51005793]
[37.06336212 8.40264225]
[48.43526840 18.18424416]
[59.80717468 27.96584702]
[71.17908478 37.74744797]
[82.55098724 47.52905273]
[77.26074982 33.49290466]
[71.97051239 19.45676041]
[66.68027496 5.42061377]
[61.31070328 -8.58537197]
[57.58786392 -23.11604500]
[55.56118393 -37.97850037]
[55.25756836 -52.97542572]
[56.68104935 -67.90773010]
[59.81273270 -82.57717133]
[64.61103821 -96.78900909]
[71.01226044 -110.35456848]
[78.93142700 -123.09375000]
[88.26340485 -134.83743286]
[98.88430023 -145.42971802]
[110.65312195 -154.72999573]
[123.41361237 -162.61477661]
[136.99638367 -168.97938538]
[151.22111511 -173.73933411]
[165.89895630 -176.83143616]
[180.83503723 -178.21464539]
[195.83110046 -177.87057495]
[210.68803406 -175.80381775]
[225.20860291 -172.04179382]
[239.20005798 -166.63446045]
[252.47663879 -159.65359497]
[264.86209106 -151.19187927]
[276.19198608 -141.36164856]
[286.31591797 -130.29339600]
[295.09945679 -118.13407898]
[302.42602539 -105.04510498]
[308.19836426 -91.20024109]
[312.33984375 -76.78329468]
[314.79544067 -61.98566055]
[315.53256226 -47.00378418]
[314.54147339 -32.03656387]
[311.83529663 -17.28269577]
[307.44995117 -2.93805385]
[301.44366455 10.80692959]
[293.89617920 23.76977921]
[284.90768433 35.77840424]
[274.59753418 46.67337799]
[263.10256958 56.31006622]
[250.57539368 64.56053925]
[237.18234253 71.31525421]
[223.10121155 76.48454285]
[208.51892090 79.99977875]
[193.62907410 81.81430054]
[178.62934875 81.90401459]
[163.71379089 80.26687622]
[149.52273560 85.12629700]
[135.33168030 89.98571777]
[121.14063263 94.84513855]
[135.92417908 97.38414764]
[150.70773315 99.92315674]
[165.49128723 102.46216583]
[177.30784607 92.21994781]
[192.94416809 92.02117920]
[205.01725769 101.95970917]
[207.82658386 117.34287262]
[200.04565430 130.90721130]
[185.34838867 136.24804688]
[170.67439270 130.84362793]
[162.95228577 117.24571991]
[148.16873169 114.70671082]
[133.38517761 112.16770172]
[118.60162354 109.62869263]
[130.35813904 118.94449615]
[142.11466980 128.26029968]
[153.87118530 137.57609558]
[165.62771606 146.89190674]
[177.38423157 156.20770264]
[191.73361206 160.57751465]
[204.81317139 167.92088318]
[216.01518250 177.89660645]
[224.81915283 190.04115295]
[230.81600952 203.79026794]
[233.72711182 218.50506592]
[233.41719055 233.50186157]
[229.90065002 248.08383179]
[223.34089661 261.57345581]
[214.04270935 273.34390259]
[202.43814087 282.84832764]
[189.06636047 289.64505005]
[174.54870605 293.41830444]
[159.55970764 293.99276733]
[144.79582214 291.34176636]
[130.94306946 285.58840942]
[118.64506531 277.00009155]
[108.47325897 265.97583008]
[100.90026855 253.02786255]
[96.27796936 238.75781250]
[94.82112122 223.82872009]
[96.59742737 208.93426514]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 18]
[6 17]
[7 16]
[8 15]
[9 14]
[26 50]
[27 49]
[28 48]
[29 47]
[30 46]
[31 45]
[51 63]
[52 62]
[53 61]
[54 60]
[55 59]
[115 129]
[116 128]
[117 127]
[118 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
