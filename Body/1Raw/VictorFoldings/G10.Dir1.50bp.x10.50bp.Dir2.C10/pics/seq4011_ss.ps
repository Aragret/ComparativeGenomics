%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACCCCCUUCGACCUUGCCGAAGGGGAGUCCGAACUAGUCUCAGGCUUCAACAUCGAAUAxxxxxxxxxxAACAACAACCUAUUUAGCUGUUCCCCAACCUUUUCCUCCGACCCCCUAACAACCCCCCUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 253.51420593]
[92.50000000 238.51420593]
[92.50000000 223.51420593]
[92.50000000 208.51420593]
[92.50000000 193.51420593]
[92.50000000 178.51420593]
[92.50000000 163.51420593]
[92.50000000 148.51420593]
[92.50000000 133.51420593]
[92.50000000 118.51420593]
[85.99184418 114.78675079]
[73.02756500 122.33177185]
[72.97553253 107.33184052]
[66.46738434 103.60438538]
[53.52932358 111.19429016]
[40.59127045 118.78420258]
[27.65321350 126.37410736]
[14.71515751 133.96401978]
[1.77710128 141.55392456]
[-11.16095448 149.14382935]
[-24.09901047 156.73374939]
[-26.52901268 172.18136597]
[-38.35393524 182.41392517]
[-53.99041367 182.59991455]
[-66.05538177 172.65150452]
[-68.85211945 157.26605225]
[-61.06011200 143.70808411]
[-46.35848999 138.37925720]
[-31.68891907 143.79568481]
[-18.75086212 136.20578003]
[-5.81280708 128.61587524]
[7.12524891 121.02596283]
[20.06330490 113.43605042]
[33.00136185 105.84614563]
[45.93941498 98.25623322]
[58.87747192 90.66632843]
[56.08514786 75.92852020]
[41.26739120 73.59741974]
[26.44963264 71.26631165]
[11.34859657 77.66090393]
[-1.57498968 67.56570435]
[0.97355133 51.36580276]
[16.37249947 45.72625732]
[28.78073692 56.44855499]
[43.59849548 58.77965927]
[58.41625214 61.11076355]
[83.74324036 71.02066040]
[98.07500458 90.67598724]
[103.85128021 76.83277130]
[109.62754822 62.98955536]
[103.86036682 48.51967621]
[109.91553497 34.56296921]
[123.74589539 29.15401840]
[129.52217102 15.31080055]
[135.29843140 1.46758246]
[122.11036682 -5.70729256]
[109.72993469 -14.20016956]
[98.28838348 -23.92101860]
[87.90699768 -34.76679230]
[78.69582367 -46.62252426]
[70.75251007 -59.36252975]
[64.16125488 -72.85176086]
[58.99193192 -86.94722748]
[55.29933929 -101.49950409]
[53.12261963 -116.35433197]
[52.48484802 -131.35424805]
[53.39278793 -146.34022522]
[55.83680725 -161.15342712]
[59.79100800 -175.63681030]
[65.21346283 -189.63684082]
[72.04669952 -203.00512695]
[80.21827698 -215.59992981]
[89.64157104 -227.28776550]
[100.21669006 -237.94473267]
[111.83154297 -247.45785522]
[124.36299133 -255.72627258]
[137.67819214 -262.66235352]
[151.63601685 -268.19256592]
[166.08848572 -272.25830078]
[180.88240051 -274.81643677]
[195.86093140 -275.83987427]
[210.86531067 -275.31777954]
[225.73648071 -273.25561523]
[240.31678772 -269.67532349]
[254.45169067 -264.61480713]
[267.99133301 -258.12774658]
[280.79220581 -250.28288269]
[292.71856689 -241.16337585]
[303.64407349 -230.86590576]
[313.45281982 -219.49961853]
[322.04089355 -207.18502808]
[329.31719971 -194.05265808]
[335.20468140 -180.24172974]
[339.64083862 -165.89863586]
[342.57870483 -151.17543030]
[343.98715210 -136.22816467]
[343.85119629 -121.21532440]
[342.17230225 -106.29602814]
[338.96826172 -91.62844086]
[334.27304077 -77.36804199]
[328.13641357 -63.66599655]
[320.62347412 -50.66756058]
[311.81378174 -38.51052094]
[301.80078125 -27.32375145]
[290.69058228 -17.22583771]
[278.60101318 -8.32382107]
[265.66018677 -0.71206999]
[252.00526428 5.52872753]
[237.78103638 10.33241558]
[223.13827515 13.64807224]
[208.23220825 15.44054890]
[193.22082520 15.69084549]
[178.26327515 14.39630890]
[163.51812744 11.57066059]
[149.14166260 7.24385500]
[143.36538696 21.08707237]
[137.58911133 34.93029022]
[143.47309875 48.56532669]
[137.81234741 62.68660355]
[123.47077179 68.76583099]
[117.69449615 82.60904694]
[111.91822052 96.45226288]
[120.16089630 83.91996765]
[131.79960632 74.45739746]
[145.75035095 68.94587708]
[160.71376038 67.89875031]
[175.29615784 71.41354370]
[188.13934326 79.16290283]
[198.04711914 90.42504120]
[204.09669495 104.15102386]
[205.72462463 119.06242371]
[202.77925110 133.77041626]
[195.53492737 146.90509033]
[184.66638184 157.24311829]
[171.18589783 163.82160950]
[156.34902954 166.02784729]
[141.53768921 163.65635681]
[128.13136292 156.92800903]
[117.37873077 146.46948242]
[110.28126526 133.25486755]
[107.50000000 118.51420593]
[107.50000000 133.51420593]
[107.50000000 148.51420593]
[107.50000000 163.51420593]
[107.50000000 178.51420593]
[107.50000000 193.51420593]
[107.50000000 208.51420593]
[107.50000000 223.51420593]
[107.50000000 238.51420593]
[107.50000000 253.51420593]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[14 36]
[15 35]
[16 34]
[17 33]
[18 32]
[19 31]
[20 30]
[21 29]
[37 46]
[38 45]
[39 44]
[48 122]
[49 121]
[50 120]
[53 117]
[54 116]
[55 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
