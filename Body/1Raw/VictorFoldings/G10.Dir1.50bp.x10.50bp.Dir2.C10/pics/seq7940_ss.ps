%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUUAGCAUUAACCUUUUAAGUUAAAGAUUAAGAGAACCAACACCUCUUUACAGUGAAAUGxxxxxxxxxxAUUCAAGCAAUCCUAUACAACCGUAUCGGCGAUAUCGGUUUCAUCCUCGCCUUAGCAUGACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[103.44668579 360.11962891]
[103.44668579 345.11962891]
[103.44668579 330.11962891]
[103.44668579 315.11962891]
[103.44668579 300.11962891]
[103.44668579 285.11962891]
[103.44668579 270.11962891]
[103.44668579 255.11962891]
[103.44668579 240.11962891]
[103.44668579 225.11962891]
[85.34747314 216.34390259]
[74.05776978 199.60589600]
[72.69140625 179.38743591]
[81.69283295 161.14808655]
[98.69667816 149.85093689]
[96.82906342 134.96765137]
[83.83249664 131.16734314]
[73.24052429 122.73152161]
[59.99794006 129.77665710]
[46.75535202 136.82179260]
[33.51276779 143.86692810]
[20.27018166 150.91206360]
[17.19968605 166.24522400]
[4.95933914 175.97703552]
[-10.67133999 175.51240540]
[-22.31202316 165.07072449]
[-24.46633530 149.58224487]
[-16.11707687 136.36015320]
[-1.20651114 131.64750671]
[13.22504711 137.66947937]
[26.46763229 130.62434387]
[39.71022034 123.57920837]
[52.95280457 116.53407288]
[66.19538879 109.48893738]
[66.47449493 89.56774139]
[77.54807281 73.00550842]
[70.64107513 59.69035339]
[63.73407745 46.37519836]
[56.82707596 33.06004333]
[46.16545105 22.50875282]
[32.77916718 15.74063778]
[19.39288139 8.97252274]
[6.00659609 2.20440793]
[-7.37968874 -4.56370687]
[-20.62656403 3.34349561]
[-36.04472733 2.81081843]
[-48.71430206 -5.99176311]
[-54.59247208 -20.25537682]
[-51.80353165 -35.42855453]
[-41.23742294 -46.66959381]
[-26.26575661 -50.39151764]
[-11.66593266 -45.40667343]
[-2.09670258 -33.30570602]
[-0.61157382 -17.94999123]
[12.77471066 -11.18187714]
[26.16099548 -4.41376209]
[39.54727936 2.35435271]
[52.93356705 9.12246704]
[59.23912811 5.06169653]
[47.61804581 -4.42252350]
[53.04698563 -18.40560722]
[68.02332306 -17.56336403]
[71.85025787 -3.05984569]
[78.15582275 -7.12061691]
[77.53184509 -22.10763359]
[76.90786743 -37.09465027]
[76.28388977 -52.08166504]
[61.99822998 -57.27670288]
[50.79143524 -67.54685974]
[44.37245560 -81.32601929]
[43.72014236 -96.51294708]
[48.93396378 -110.79176331]
[59.21885681 -121.98503876]
[73.00644684 -128.38587952]
[88.19422150 -129.01821899]
[102.46616364 -123.78562164]
[113.64590454 -113.48601532]
[120.02861023 -99.69001770]
[120.64096069 -84.50141907]
[115.38958740 -70.23637390]
[105.07528687 -59.07019424]
[91.27090454 -52.70564270]
[91.89488220 -37.71862793]
[92.51885986 -22.73161125]
[93.14283752 -7.74459410]
[91.97676849 5.88246727]
[86.65283203 16.67185020]
[78.77177429 23.55416489]
[70.14223480 26.15304375]
[77.04923248 39.46820068]
[83.95623016 52.78335571]
[90.86322784 66.09851074]
[107.81048584 65.76861572]
[122.93740845 73.41679382]
[132.71846008 87.26054382]
[147.53622437 84.92944336]
[156.84100342 72.43708801]
[171.90151978 70.28410339]
[183.75372314 79.23176575]
[198.57148743 76.90066528]
[213.38923645 74.56955719]
[228.20700073 72.23845673]
[243.02476501 69.90735626]
[257.81747437 67.42223358]
[272.58352661 64.78337097]
[287.34957886 62.14450455]
[302.11563110 59.50564194]
[316.64404297 50.76711273]
[329.06292725 62.30867767]
[321.41030884 77.43724823]
[304.75448608 74.27169800]
[289.98843384 76.91056061]
[275.22238159 79.54942322]
[260.45632935 82.18828583]
[254.38586426 86.48888397]
[245.35586548 84.72511292]
[230.53810120 87.05621338]
[215.72035217 89.38732147]
[200.90258789 91.71842194]
[186.08482361 94.04952240]
[177.55238342 106.20407104]
[162.55827332 108.77922821]
[149.86732483 99.74720001]
[135.04956055 102.07830811]
[133.60946655 110.15851593]
[130.33283997 117.68363190]
[125.39871979 124.24245453]
[119.07673645 129.47659302]
[111.71234131 133.10003662]
[113.57995605 147.98332214]
[123.62619019 150.06370544]
[132.77659607 154.66523743]
[140.41175842 161.46653748]
[146.01747131 169.99763489]
[149.21923828 179.67251587]
[149.80734253 189.82928467]
[147.75057983 199.77551270]
[143.19772339 208.83541870]
[136.46687317 216.39578247]
[128.02316284 221.94744873]
[118.44668579 225.11962891]
[118.44668579 240.11962891]
[118.44668579 255.11962891]
[118.44668579 270.11962891]
[118.44668579 285.11962891]
[118.44668579 300.11962891]
[118.44668579 315.11962891]
[118.44668579 330.11962891]
[118.44668579 345.11962891]
[118.44668579 360.11962891]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[15 130]
[16 129]
[18 34]
[19 33]
[20 32]
[21 31]
[22 30]
[36 92]
[37 91]
[38 90]
[39 89]
[40 58]
[41 57]
[42 56]
[43 55]
[44 54]
[64 85]
[65 84]
[66 83]
[67 82]
[95 124]
[96 123]
[99 120]
[100 119]
[101 118]
[102 117]
[103 116]
[104 114]
[105 113]
[106 112]
[107 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
