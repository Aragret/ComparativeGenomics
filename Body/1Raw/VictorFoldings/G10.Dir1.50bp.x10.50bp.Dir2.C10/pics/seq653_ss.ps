%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUCUCAUCAAUACAACCCCCGCCCAUCCUACCCAGCACACACACACCGCUGCUAACCCCAUAxxxxxxxxxxCGCAGUACUGAUCAUUCUAUUUCCCCCUCUAUUGAUCCCCACCUCCAAAUAUCUCAUCAACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-7.34514380 236.55627441]
[-17.11573029 247.93765259]
[-26.88631821 259.31903076]
[-30.00463104 274.82986450]
[-44.16556549 279.44692993]
[-53.93615341 290.82830811]
[-63.70674133 302.20968628]
[-73.47732544 313.59103394]
[-83.24791718 324.97241211]
[-75.79540253 338.17227173]
[-73.30999756 353.12548828]
[-76.09183502 368.02639771]
[-83.80499268 381.07565308]
[-95.51806641 390.69747925]
[-109.81665039 395.73001099]
[-124.97411346 395.56552124]
[-139.16012573 390.22390747]
[-150.66165161 380.35015869]
[-158.08982849 367.13662720]
[-160.54766846 352.17886353]
[-157.73837280 337.28308105]
[-150.00119019 324.24807739]
[-138.27040100 314.64785767]
[-123.96256256 309.64166260]
[-108.80542755 309.83407593]
[-94.62928772 315.20184326]
[-84.85869598 303.82046509]
[-75.08811188 292.43908691]
[-65.31752777 281.05770874]
[-55.54693604 269.67633057]
[-53.12748337 254.97955322]
[-38.26768875 249.54843140]
[-28.49710274 238.16705322]
[-18.72651672 226.78569031]
[-35.88592911 208.19247437]
[-50.16214752 187.30364990]
[-61.25225449 164.56242371]
[-68.92094421 140.45133972]
[-73.00550842 115.48196411]
[-73.41927338 90.18409729]
[-70.15346527 65.09449768]
[-63.27737808 40.74552155]
[-52.93690872 17.65378952]
[-65.82476807 9.97895145]
[-78.71262360 2.30411220]
[-91.60047913 -5.37072659]
[-104.61241913 2.68830156]
[-119.87995911 3.76569796]
[-133.89472961 -2.38611531]
[-143.43623352 -14.35349655]
[-146.31192017 -29.38642883]
[-141.86094666 -44.03045654]
[-131.10614014 -54.92048645]
[-116.51887512 -59.55406952]
[-101.45118713 -56.86644363]
[-89.36552429 -47.47520828]
[-83.03908539 -33.53839493]
[-83.92563629 -18.25858307]
[-71.03778076 -10.58374405]
[-58.14992523 -2.90890551]
[-45.26206970 4.76593351]
[-38.54223633 -4.76948595]
[-31.19752502 -13.83235645]
[-23.26106644 -22.38180161]
[-14.76865673 -30.37926102]
[-5.75859737 -37.78866196]
[3.72847176 -44.57658386]
[13.64976025 -50.71241760]
[23.96051979 -56.16847992]
[34.61424637 -60.92016602]
[45.56288528 -64.94604492]
[56.75705719 -68.22795105]
[68.14627075 -70.75109100]
[79.67915344 -72.50408173]
[91.30368805 -73.47901917]
[102.96745300 -73.67150116]
[114.61782837 -73.08065796]
[126.20227051 -71.70916748]
[137.66853333 -69.56319427]
[148.96490479 -66.65243530]
[160.04042053 -62.99001312]
[170.84512329 -58.59244537]
[181.33030701 -53.47956848]
[191.44865417 -47.67444229]
[201.15452576 -41.20325089]
[210.40415955 -34.09518051]
[219.15583801 -26.38229179]
[227.37007141 -18.09937477]
[235.00981140 -9.28378487]
[242.04061890 0.02471395]
[248.43077087 9.78413773]
[254.15144348 19.95046806]
[267.74963379 13.61884975]
[281.34780884 7.28723049]
[294.94598389 0.95561147]
[308.54418945 -5.37600756]
[306.69088745 -20.39001846]
[309.56988525 -35.24150085]
[316.89910889 -48.47546387]
[327.96051025 -58.79537582]
[341.67041016 -65.19019318]
[356.68566895 -67.03342438]
[371.53521729 -64.14448547]
[384.76425171 -56.80640030]
[395.07675171 -45.73808670]
[401.46237183 -32.02389908]
[403.29556274 -17.00741959]
[400.39666748 -2.15980721]
[393.04971313 11.06432056]
[381.97448730 21.36939812]
[368.25604248 27.74584007]
[353.23831177 29.56894684]
[338.39266968 26.66010666]
[325.17346191 19.30430031]
[314.87579346 8.22217655]
[301.27761841 14.55379486]
[287.67944336 20.88541412]
[274.08123779 27.21703339]
[260.48306274 33.54865265]
[264.79663086 45.11226273]
[268.27819824 56.95298386]
[270.91015625 69.01103973]
[272.67922974 81.22555542]
[273.57647705 93.53485107]
[273.59741211 105.87679291]
[272.74188232 118.18906403]
[271.01419067 130.40950012]
[268.42312622 142.47640991]
[264.98171997 154.32887268]
[260.70736694 165.90702820]
[255.62164307 177.15245056]
[249.75022888 188.00833130]
[243.12274170 198.41989136]
[235.77267456 208.33454895]
[227.73713684 217.70225525]
[219.05667114 226.47570801]
[209.77511597 234.61062622]
[199.93933105 242.06591797]
[189.59898376 248.80395508]
[178.80627441 254.79072571]
[167.61569214 259.99597168]
[156.08374023 264.39346313]
[144.26861572 267.96096802]
[132.23001099 270.68048096]
[120.02867126 272.53823853]
[107.72621155 273.52493286]
[95.38475037 273.63552856]
[83.06658936 272.86947632]
[70.83391571 271.23065186]
[58.74850082 268.72732544]
[46.87135315 265.37213135]
[35.26243591 261.18200684]
[23.98036575 256.17813110]
[13.08209991 250.38575745]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 34]
[2 33]
[3 32]
[5 30]
[6 29]
[7 28]
[8 27]
[9 26]
[43 61]
[44 60]
[45 59]
[46 58]
[92 119]
[93 118]
[94 117]
[95 116]
[96 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
