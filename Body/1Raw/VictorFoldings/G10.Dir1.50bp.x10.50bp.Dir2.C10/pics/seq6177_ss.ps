%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAAUAUGAAAAUCACCUCGGAGCUGGUAAAAAGAGGCCUAACCCCUGUCUUUAGAUUUACxxxxxxxxxxAUCCCCACCGGCGUCAAAGUAUUUAGCUGACUCGCCACACUCCACGGAAGCAAUAUGAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[88.49951172 500.82778931]
[88.49951172 485.82778931]
[88.49951172 470.82778931]
[88.49951172 455.82778931]
[88.49951172 440.82778931]
[88.49951172 425.82778931]
[88.49951172 410.82778931]
[88.49951172 395.82778931]
[88.49951172 380.82778931]
[88.49951172 365.82778931]
[74.21450043 362.95407104]
[60.76543427 357.33380127]
[48.67499542 349.18325806]
[38.41347504 338.81710815]
[30.38048935 326.63632202]
[24.88941002 313.11245728]
[22.15514183 298.76968384]
[22.28571320 284.16421509]
[25.27801323 269.86285400]
[31.01782799 256.42102051]
[39.28420639 244.36111450]
[49.75795746 234.15228271]
[62.03398132 226.19209290]
[75.63694000 220.79109192]
[90.03965759 218.16070557]
[90.35171509 203.16395569]
[79.88780212 192.62631226]
[79.99063873 177.41302490]
[91.11444092 166.50895691]
[91.42649841 151.51220703]
[91.73855591 136.51544189]
[92.05061340 121.51869202]
[77.14465332 109.84099579]
[75.32932281 89.45994568]
[89.95349121 73.03923035]
[81.96357727 60.34430313]
[73.97366333 47.64937210]
[54.63311005 46.08512497]
[41.16437912 32.44831848]
[39.87252045 13.56239414]
[27.09516335 5.70496798]
[14.31780624 -2.15245771]
[1.54044878 -10.00988293]
[-11.23690891 -17.86730957]
[-24.33006287 -25.18641472]
[-37.71634674 -31.95452881]
[-53.34590149 -28.33560753]
[-65.83016205 -38.41145325]
[-65.59227753 -54.45274353]
[-52.81473160 -64.15396881]
[-37.29936218 -60.07318497]
[-30.94823265 -45.34081268]
[-17.56194878 -38.57270050]
[-14.81050110 -39.37074280]
[-11.56771946 -39.09084320]
[-8.25621223 -37.53655624]
[-5.36293650 -34.67299271]
[-3.37948275 -30.64466667]
[9.39787483 -22.78724098]
[22.17523193 -14.92981529]
[34.95259094 -7.07238913]
[47.72994614 0.78503644]
[51.76321411 -2.24825644]
[56.29002380 -4.47897530]
[55.04314804 -19.42706299]
[53.79627228 -34.37514877]
[39.30687332 -38.97142792]
[27.68255615 -48.76651001]
[20.69594002 -62.26671982]
[19.41243744 -77.41336823]
[24.02777100 -91.89671326]
[33.83813477 -103.50813293]
[47.34752274 -110.47698212]
[62.49584961 -111.74056244]
[76.97310638 -107.10617828]
[88.57161713 -97.28054810]
[95.52268982 -83.76200104]
[96.76634216 -68.61203003]
[92.11291504 -54.14088058]
[82.27203369 -42.55530930]
[68.74436188 -35.62202454]
[69.99123383 -20.67393684]
[71.23810577 -5.72584963]
[84.03249359 0.36711264]
[92.09007263 12.18608284]
[93.10556030 26.58778381]
[86.66858673 39.65945816]
[94.65850830 52.35438538]
[102.64842224 65.04931641]
[117.01660919 69.35690308]
[130.67285156 63.15149307]
[144.32908630 56.94608688]
[157.98533630 50.74068069]
[171.50952148 44.25251389]
[184.89579773 37.48440170]
[198.28208923 30.71628571]
[198.45100403 15.41170883]
[205.72317505 1.94418561]
[218.42750549 -6.59154654]
[233.64462280 -8.23403835]
[247.87776184 -2.60585833]
[257.85623169 8.99967957]
[261.28707886 23.91570854]
[257.38189697 38.71463394]
[247.03808594 49.99576950]
[232.63256836 55.16679382]
[217.47561646 53.03944397]
[205.05020142 44.10256958]
[191.66392517 50.87068558]
[178.27763367 57.63879776]
[175.94879150 61.87578201]
[170.90174866 64.66120911]
[164.19073486 64.39691925]
[150.53450012 70.60232544]
[136.87825012 76.80773163]
[123.22201538 83.01314545]
[126.96918488 95.67453766]
[124.59577179 107.97351837]
[117.24133301 117.26264191]
[107.04736328 121.83074951]
[106.73530579 136.82749939]
[106.42324829 151.82424927]
[106.11119843 166.82101440]
[116.77178192 178.17837524]
[116.24167633 193.38276672]
[105.34846497 203.47601318]
[105.03641510 218.47276306]
[120.09989929 221.96540833]
[134.10948181 228.49719238]
[146.45968628 237.78324890]
[156.61729431 249.41972351]
[164.14431763 262.90133667]
[168.71697998 277.64334106]
[170.13952637 293.00689697]
[168.35273743 308.32669067]
[163.43624878 322.93975830]
[155.60513306 336.21432495]
[145.20037842 347.57690430]
[132.67413330 356.53717041]
[118.57001495 362.70913696]
[103.49951172 365.82778931]
[103.49951172 380.82778931]
[103.49951172 395.82778931]
[103.49951172 410.82778931]
[103.49951172 425.82778931]
[103.49951172 440.82778931]
[103.49951172 455.82778931]
[103.49951172 470.82778931]
[103.49951172 485.82778931]
[103.49951172 500.82778931]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[25 127]
[26 126]
[29 123]
[30 122]
[31 121]
[32 120]
[35 89]
[36 88]
[37 87]
[40 62]
[41 61]
[42 60]
[43 59]
[44 58]
[45 53]
[46 52]
[64 83]
[65 82]
[66 81]
[90 116]
[91 115]
[92 114]
[93 113]
[94 110]
[95 109]
[96 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
