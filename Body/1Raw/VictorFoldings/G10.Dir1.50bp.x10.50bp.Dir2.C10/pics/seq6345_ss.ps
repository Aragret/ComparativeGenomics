%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGUAAUAAUCUUCUUCAUAGUAAUACCCAUCAUAAUCGGAGGCUUUGGCAACUGACUAGUUCCxxxxxxxxxxAUAGUACCGUUAACUUCCAAUUAACUAGUUUUGACAACAUUCAAAAAAGAGUAAUAAACUUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[98.17269897 444.83883667]
[100.75337982 425.62973022]
[101.05738831 410.63281250]
[101.36138916 395.63586426]
[101.66539764 380.63894653]
[101.96939850 365.64202881]
[102.27340698 350.64511108]
[102.57740784 335.64819336]
[102.88141632 320.65127563]
[103.18541718 305.65435791]
[103.48941803 290.65744019]
[87.53234863 285.96115112]
[73.50740814 276.99291992]
[62.53199768 264.45840454]
[55.48302841 249.34777832]
[52.92686081 232.85742188]
[55.07378387 216.29533386]
[61.76076508 200.97724915]
[72.46379089 188.12222290]
[86.33892059 178.75553894]
[102.28882599 173.62695312]
[101.68094635 158.63928223]
[101.07305908 143.65159607]
[100.46517944 128.66392517]
[81.35229492 118.50830841]
[76.12751007 99.43338776]
[85.48616791 84.15851593]
[79.85140991 70.25709534]
[74.21665955 56.35567093]
[68.58190155 42.45424652]
[53.66321564 44.57990265]
[38.67839813 43.07403946]
[24.49806595 38.02851486]
[11.94504166 29.74070358]
[1.74662256 18.69599152]
[-5.50756264 5.53933764]
[-9.39964008 -8.96238708]
[-9.70756435 -23.96509171]
[-6.41777515 -38.59660339]
[0.27425906 -52.00736618]
[9.97565556 -63.41976929]
[22.11917877 -72.17324066]
[16.48442268 -86.07466125]
[10.84966755 -99.97608185]
[4.69000721 -106.80248260]
[5.24473429 -114.21678925]
[-0.10712487 -128.22955322]
[-5.45898390 -142.24232483]
[-16.92333031 -148.23594666]
[-21.07458878 -160.06353760]
[-16.19299889 -171.17156982]
[-21.25976181 -185.28993225]
[-26.32652473 -199.40827942]
[-38.27053452 -209.78378296]
[-35.28707886 -224.37654114]
[-41.75617599 -237.90985107]
[-49.56122589 -250.71926880]
[-56.74212646 -256.46173096]
[-57.39162064 -263.86834717]
[-64.93545532 -276.83331299]
[-72.47929382 -289.79827881]
[-80.02313995 -302.76324463]
[-94.51404572 -310.44085693]
[-94.84001160 -326.83676147]
[-80.66571045 -335.08425903]
[-66.57244873 -326.69903564]
[-67.05816650 -310.30709839]
[-59.51432419 -297.34213257]
[-51.97048569 -284.37713623]
[-44.42664719 -271.41217041]
[-36.75180817 -258.52432251]
[-28.94675827 -245.71490479]
[-27.11516762 -260.60266113]
[-18.19247818 -272.66024780]
[-4.49040031 -278.76379395]
[10.44110298 -277.33193970]
[22.73354530 -268.73565674]
[29.20217514 -255.20211792]
[28.17108536 -240.23759460]
[19.90741158 -227.71914673]
[6.55212688 -220.89006042]
[-8.43465424 -221.51963806]
[-21.16872406 -229.44329834]
[-9.58712292 -220.07762146]
[-12.20817184 -204.47503662]
[-7.14140844 -190.35668945]
[-2.07464457 -176.23834229]
[11.90608311 -165.67295837]
[8.55378246 -147.59417725]
[13.90564060 -133.58142090]
[19.25749969 -119.56864929]
[24.75108910 -105.61083984]
[30.38584518 -91.70941925]
[36.02059937 -77.80799103]
[50.83173752 -79.98023224]
[65.74133301 -78.54357147]
[79.88229370 -73.57718658]
[92.43119812 -65.36567688]
[102.65621185 -54.38273239]
[109.95979309 -41.26381302]
[113.91360474 -26.76939583]
[114.28362274 -11.74087238]
[111.04399872 2.94827533]
[104.37881470 16.44325447]
[94.67160797 27.95769882]
[82.48332214 36.81949234]
[88.11808014 50.72091293]
[93.75283051 64.62233734]
[99.38758850 78.52375793]
[118.41741180 82.98172760]
[128.50241089 103.07398224]
[143.37242126 105.04443359]
[158.24244690 107.01488495]
[173.11245728 108.98533630]
[187.98246765 110.95578766]
[202.85247803 112.92623901]
[215.24501038 103.11803436]
[230.93341064 105.02838135]
[240.61004639 117.52390289]
[238.53395081 133.19123840]
[225.93681335 142.73522949]
[210.29229736 140.49359131]
[200.88203430 127.79625702]
[186.01202393 125.82580566]
[171.14199829 123.85535431]
[156.27198792 121.88490295]
[141.40197754 119.91445160]
[126.53195953 117.94400024]
[115.45285034 128.05604553]
[116.06073761 143.04371643]
[116.66861725 158.03140259]
[117.27650452 173.01907349]
[130.46234131 175.71913147]
[142.69577026 181.31175232]
[153.35168457 189.50706482]
[161.88653564 199.88233948]
[167.86598206 211.90373230]
[170.98707581 224.95381165]
[171.09355164 238.36325073]
[168.18367004 251.44511414]
[162.41011047 263.53012085]
[154.07197571 274.00079346]
[143.59928894 282.32315063]
[131.53080750 288.07379150]
[118.48634338 290.96145630]
[118.18233490 305.95837402]
[117.87833405 320.95529175]
[117.57432556 335.95220947]
[117.27032471 350.94912720]
[116.96631622 365.94604492]
[116.66231537 380.94296265]
[116.35831451 395.93988037]
[116.05430603 410.93679810]
[115.75030518 425.93371582]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 154]
[3 153]
[4 152]
[5 151]
[6 150]
[7 149]
[8 148]
[9 147]
[10 146]
[11 145]
[21 132]
[22 131]
[23 130]
[24 129]
[27 109]
[28 108]
[29 107]
[30 106]
[42 94]
[43 93]
[44 92]
[46 91]
[47 90]
[48 89]
[51 87]
[52 86]
[53 85]
[55 83]
[56 72]
[57 71]
[59 70]
[60 69]
[61 68]
[62 67]
[111 128]
[112 127]
[113 126]
[114 125]
[115 124]
[116 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
