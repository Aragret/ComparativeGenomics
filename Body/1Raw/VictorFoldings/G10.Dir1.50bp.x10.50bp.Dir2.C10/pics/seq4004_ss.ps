%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCGAACCCCCUUCGACCUUGCCGAAGGGGAGUCCGAACUAGUCUCAGGCUUCAACAUCGAAxxxxxxxxxxGCAUACUCUUCAAUCAGCCACAUAGCCCUCGUAGUAACAGCCAUUCUCAUCCAAACCCCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[113.69731140 254.86160278]
[113.69731140 239.86160278]
[113.69731140 224.86160278]
[113.69731140 209.86160278]
[113.69731140 194.86160278]
[113.69731140 179.86160278]
[113.69731140 164.86160278]
[113.69731140 149.86160278]
[113.69731140 134.86160278]
[113.69731140 119.86159515]
[101.67756653 122.22454071]
[91.04920959 118.38576508]
[84.52951813 110.34356689]
[69.75740051 112.94828796]
[55.01280594 115.70452881]
[40.29728317 118.61199951]
[26.00315094 123.15929413]
[12.31252670 129.28846741]
[-1.37809920 135.41763306]
[-15.06872463 141.54681396]
[-28.75934982 147.67597961]
[-42.44997406 153.80516052]
[-56.14060211 159.93434143]
[-69.83123016 166.06350708]
[-73.93634033 181.15264893]
[-86.80957794 190.03036499]
[-102.37257385 188.50488281]
[-113.27696991 177.29649353]
[-114.37403870 161.69743347]
[-105.14577484 149.07312012]
[-89.94949341 145.38436890]
[-75.96040344 152.37287903]
[-62.26977539 146.24371338]
[-48.57915115 140.11453247]
[-34.88852310 133.98536682]
[-21.19789886 127.85618591]
[-7.50727320 121.72701263]
[6.18335247 115.59783936]
[19.87397766 109.46866608]
[18.64336586 94.51923370]
[4.13473988 90.71137238]
[-10.37388515 86.90351105]
[-26.04091263 91.74874878]
[-37.88499069 80.40635681]
[-33.72194672 64.54441833]
[-17.83436584 60.48033524]
[-6.56602669 72.39488983]
[7.94259882 76.20274353]
[22.45122337 80.01060486]
[34.96491241 90.98043060]
[37.38980865 103.89647675]
[52.10533142 100.98900604]
[58.09465790 96.57990265]
[67.15267944 98.17617035]
[81.92479706 95.57144928]
[98.16048431 78.71105194]
[122.10147858 90.32403564]
[129.99795532 77.57077789]
[137.89443970 64.81752014]
[145.79092407 52.06426620]
[140.08349609 37.75582886]
[143.85165405 23.00271606]
[155.44729614 13.41078472]
[170.28991699 12.49704170]
[178.18638611 -0.25621542]
[174.78450012 -15.45703220]
[182.97431946 -28.27816010]
[197.48693848 -31.42767525]
[205.38342285 -44.18093109]
[213.27990723 -56.93418884]
[201.85729980 -66.70272827]
[192.05979919 -78.10051727]
[184.11708069 -90.86036682]
[178.21534729 -104.68316650]
[174.49291992 -119.24489594]
[173.03706360 -134.20420837]
[173.88191223 -149.21041870]
[177.00765991 -163.91178894]
[182.34101868 -177.96368408]
[189.75700378 -191.03669739]
[199.08174133 -202.82438660]
[210.09664917 -213.05044556]
[222.54353333 -221.47512817]
[236.13061523 -227.90098572]
[250.53941345 -232.17735291]
[265.43212891 -234.20401001]
[280.45968628 -233.93344116]
[295.26977539 -231.37197876]
[309.51528931 -226.57969666]
[322.86224365 -219.66888428]
[334.99780273 -210.80158997]
[345.63745117 -200.18565369]
[354.53179932 -188.06991577]
[361.47235107 -174.73841858]
[366.29641724 -160.50364685]
[368.89093018 -145.69927979]
[369.19503784 -130.67237854]
[367.20159912 -115.77516937]
[362.95739746 -101.35688019]
[356.56185913 -87.75549316]
[348.16497803 -75.28984070]
[337.96353149 -64.25213623]
[326.19665527 -54.90111923]
[313.14022827 -47.45599365]
[299.10028076 -42.09128571]
[284.40591431 -38.93274689]
[269.40161133 -38.05441666]
[254.43910217 -39.47689056]
[239.86909485 -43.16682053]
[226.03317261 -49.03770828]
[218.13668823 -36.28445053]
[210.24020386 -23.53119278]
[213.88970947 -9.13616753]
[206.06321716 3.90993667]
[190.93965149 7.64026690]
[183.04316711 20.39352417]
[188.84114075 34.08737564]
[185.42341614 48.74285507]
[173.89659119 58.69200897]
[158.54417419 59.96074677]
[150.64768982 72.71400452]
[142.75122070 85.46726227]
[134.85473633 98.22052002]
[143.85322571 86.21939087]
[155.92684937 77.31838989]
[170.05242920 72.27183533]
[185.03294373 71.50738525]
[199.59886169 75.08981323]
[212.51583862 82.71554565]
[222.68923950 93.73833466]
[229.25692749 107.22408295]
[231.66233826 122.02996063]
[229.70164490 136.90126038]
[223.54096985 150.57774353]
[213.70240784 161.90042114]
[201.01972961 169.90974426]
[186.56768799 173.92701721]
[171.57099915 173.61175537]
[157.30053711 168.99072266]
[144.96563721 160.45547485]
[135.61160278 148.72935486]
[130.03111267 134.80606079]
[128.69731140 119.86159515]
[128.69731140 134.86160278]
[128.69731140 149.86160278]
[128.69731140 164.86160278]
[128.69731140 179.86160278]
[128.69731140 194.86160278]
[128.69731140 209.86160278]
[128.69731140 224.86160278]
[128.69731140 239.86160278]
[128.69731140 254.86160278]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[13 55]
[14 54]
[15 52]
[16 51]
[17 39]
[18 38]
[19 37]
[20 36]
[21 35]
[22 34]
[23 33]
[24 32]
[40 49]
[41 48]
[42 47]
[57 123]
[58 122]
[59 121]
[60 120]
[64 116]
[65 115]
[68 112]
[69 111]
[70 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
