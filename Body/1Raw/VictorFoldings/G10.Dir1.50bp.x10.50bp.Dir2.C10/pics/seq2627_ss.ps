%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCAUUAUUACCCUCACUGUCAACCCAACACAGGCAUGCUCAUAAGGAAAGGUUAAAAAAAxxxxxxxxxxAAACUUCGCCUUAAUUUUAAUAAUCAACACCCUCCUAGCCUUACUACUAAUAAUUAUUACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[99.74296570 254.17391968]
[99.74296570 239.17391968]
[99.74296570 224.17391968]
[99.74296570 209.17391968]
[99.74296570 194.17391968]
[99.74296570 179.17391968]
[99.74296570 164.17391968]
[99.74296570 149.17391968]
[99.74296570 134.17391968]
[99.74296570 119.17391968]
[88.34194183 109.42626953]
[73.52418518 111.75737000]
[61.09410858 121.54531097]
[47.31903839 115.87992096]
[32.50127792 118.21102142]
[17.68352127 120.54212952]
[2.86576295 122.87322998]
[0.44080871 137.79225159]
[-6.46737528 151.21310425]
[-17.17106056 161.82722473]
[-30.61314392 168.60406494]
[-45.47153091 170.89117432]
[-60.28918457 168.47702026]
[-73.61698151 161.61044312]
[-84.15545654 150.97509766]
[-90.88148499 137.62138367]
[-105.69924927 139.95248413]
[-120.51700592 142.28359985]
[-135.33476257 144.61470032]
[-141.46293640 158.77270508]
[-154.28540039 167.35104370]
[-169.71055603 167.61241150]
[-182.81628418 159.47340393]
[-189.42059326 145.53114319]
[-187.41607666 130.23455811]
[-177.44238281 118.46473694]
[-162.68205261 113.97737885]
[-147.84507751 118.20438385]
[-137.66586304 129.79693604]
[-122.84810638 127.46583557]
[-108.03034973 125.13472748]
[-93.21259308 122.80362701]
[-90.91153717 108.02979279]
[-84.14755249 94.67245483]
[-73.57181549 84.04541016]
[-60.21113205 77.19828796]
[-45.36821365 74.81285095]
[-30.49467659 77.13511658]
[-17.04907227 83.95011139]
[-6.35386276 94.60163879]
[0.53465897 108.05547333]
[15.35241699 105.72436523]
[30.17017555 103.39326477]
[44.98793411 101.06216431]
[56.35814667 91.44095612]
[71.19308472 96.93961334]
[86.01084137 94.60850525]
[98.70577240 86.61859131]
[107.21685791 74.26702118]
[115.72795105 61.91544724]
[124.23904419 49.56387329]
[130.30204773 35.84382248]
[133.70503235 21.23492813]
[137.10801697 6.62603569]
[140.51098633 -7.98285675]
[143.91397095 -22.59174919]
[147.31694031 -37.20064163]
[133.72404480 -43.68503189]
[121.84317780 -52.94024658]
[112.23002625 -64.53340149]
[105.33420563 -77.92227173]
[101.47825623 -92.48062897]
[100.84252930 -107.52754974]
[103.45674896 -122.35926819]
[109.19865417 -136.28207397]
[117.79968262 -148.64477539]
[128.85754395 -158.86915588]
[141.85504150 -166.47697449]
[156.18426514 -171.11242676]
[171.17500305 -172.55870056]
[186.12612915 -170.74813843]
[200.33833313 -165.76542664]
[213.14688110 -157.84362793]
[223.95271301 -147.35324097]
[232.25041199 -134.78494263]
[237.65187073 -120.72655487]
[239.90447998 -105.83562469]
[238.90284729 -90.80861664]
[234.69383240 -76.34838867]
[227.47430420 -63.13125610]
[217.58193970 -51.77541733]
[205.47940063 -42.81200409]
[191.73277283 -36.66024780]
[176.98498535 -33.60787964]
[161.92584229 -33.79766464]
[158.52285767 -19.18877029]
[155.11988831 -4.57987881]
[151.71690369 10.02901363]
[148.31391907 24.63790703]
[144.91094971 39.24679947]
[155.48785400 28.61059189]
[168.79382324 21.68590355]
[183.57376099 19.12590408]
[198.43354797 21.17206764]
[211.97152710 27.63138962]
[222.91075134 37.89459229]
[230.21937561 50.99360657]
[233.20800781 65.69286346]
[231.59474182 80.60585022]
[225.53175354 94.32592010]
[215.59092712 105.55891418]
[202.70994568 113.24528503]
[188.10380554 116.66001129]
[173.15020752 115.48101044]
[159.25967407 109.81948853]
[147.74240112 100.20945740]
[139.68478394 87.55739594]
[135.84683228 73.05670166]
[136.59060669 58.07496643]
[128.07952881 70.42653656]
[119.56843567 82.77810669]
[111.05734253 95.12968445]
[124.44818878 88.37059021]
[133.99774170 76.80313873]
[146.64973450 68.74540710]
[161.17027283 64.98323059]
[176.14323425 65.88351440]
[190.10836792 71.35846710]
[201.70372009 80.87413025]
[209.79843140 93.50248718]
[213.60308838 108.01195526]
[212.74661255 122.98748779]
[207.31256104 136.96858215]
[197.83087158 148.59172058]
[185.22624207 156.72335815]
[170.72798157 160.57046509]
[155.75000000 159.75781250]
[141.75306702 154.36470032]
[130.10223389 144.91705322]
[121.93434906 132.33766174]
[114.74296570 119.17391968]
[114.74296570 134.17391968]
[114.74296570 149.17391968]
[114.74296570 164.17391968]
[114.74296570 179.17391968]
[114.74296570 194.17391968]
[114.74296570 209.17391968]
[114.74296570 224.17391968]
[114.74296570 239.17391968]
[114.74296570 254.17391968]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 57]
[12 56]
[14 54]
[15 53]
[16 52]
[17 51]
[26 42]
[27 41]
[28 40]
[29 39]
[58 122]
[59 121]
[60 120]
[61 119]
[62 100]
[63 99]
[64 98]
[65 97]
[66 96]
[67 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
