%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGCCCCAACGUUGUAGGCCCCUACGGGCUACUACAACCCUUCGCUGACGCCAUAAAACUCUUxxxxxxxxxxGGCGUAAAUCUAACUUUCUUCCCACAACACUUUCUCGGCCUAUCCGGAAUGCCCCGACGUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 254.86338806]
[92.50000000 239.86338806]
[92.50000000 224.86338806]
[92.50000000 209.86338806]
[92.50000000 194.86338806]
[92.50000000 179.86338806]
[92.50000000 164.86338806]
[92.50000000 149.86338806]
[92.50000000 134.86338806]
[92.50000000 119.86338043]
[80.62317657 110.70144653]
[66.11454773 114.50930786]
[63.93769836 128.50672913]
[56.60257339 140.57466125]
[45.24953461 148.90077209]
[31.61936760 152.24948120]
[17.78637695 150.14530945]
[5.84273481 142.94003296]
[-2.41795945 131.75436401]
[-17.00170898 135.26353455]
[-31.58545876 138.77270508]
[-46.16920853 142.28187561]
[-60.75295639 145.79103088]
[-75.33670807 149.30020142]
[-89.92045593 152.80937195]
[-104.42908478 156.61723328]
[-118.85646820 160.72216797]
[-133.28384399 164.82711792]
[-147.71124268 168.93206787]
[-158.73257446 181.07546997]
[-174.70024109 177.33843994]
[-179.18807983 161.56532288]
[-167.57939148 149.98213196]
[-151.81617737 154.50468445]
[-137.38879395 150.39973450]
[-122.96141052 146.29478455]
[-108.53402710 142.18984985]
[-105.44464111 138.47434998]
[-99.96467590 136.69732666]
[-93.42962646 138.22561646]
[-78.84587097 134.71646118]
[-64.26212311 131.20729065]
[-49.67837524 127.69812012]
[-35.09462738 124.18894958]
[-20.51087570 120.67978668]
[-5.92712688 117.17061615]
[-2.86780357 101.51544189]
[6.73552179 88.70623779]
[21.00840950 81.32743835]
[37.12809753 80.89524841]
[51.88172531 87.54637909]
[62.30669403 100.00067902]
[76.81531525 96.19281769]
[87.25732422 85.42414093]
[90.61658478 70.80513763]
[90.61658478 55.80513382]
[87.25732422 41.18612671]
[83.89807129 26.56711960]
[80.53881073 11.94811249]
[77.17955017 -2.67089486]
[62.09943771 -3.37283683]
[47.76827621 -8.11840916]
[35.24954224 -16.55545998]
[25.47220039 -28.05790329]
[19.16180038 -41.77218246]
[16.78661346 -56.68060303]
[18.52289391 -71.67686462]
[24.24179840 -85.64814758]
[33.51894760 -97.55768585]
[45.66591263 -106.52171326]
[59.78131104 -111.87503815]
[74.81768799 -113.22041321]
[89.65924072 -110.45800018]
[103.20462036 -103.79278564]
[114.44868469 -93.71937561]
[122.55704498 -80.98528290]
[126.92800140 -66.53546143]
[127.23720551 -51.44218445]
[123.46170807 -36.82547379]
[115.88167572 -23.76998711]
[105.05960846 -13.24452782]
[91.79856110 -6.03015375]
[95.15781403 8.58885384]
[98.51707458 23.20786095]
[101.87633514 37.82686996]
[105.23559570 52.44587708]
[109.88390350 38.18427658]
[118.00404358 25.57224655]
[129.06280518 15.43796062]
[142.33401489 8.44688797]
[156.94619751 5.05810165]
[171.93986511 5.49412632]
[186.33042908 9.72633076]
[199.17294312 17.47680664]
[209.62409973 28.23661423]
[216.99760437 41.29920959]
[220.80928040 55.80683136]
[220.80885315 70.80683136]
[216.99632263 85.31423187]
[209.62205505 98.37638855]
[199.17027283 109.13558960]
[186.32730103 116.88531494]
[171.93649292 121.11667633]
[156.94281006 121.55182648]
[142.33081055 118.16219330]
[129.06001282 111.17034149]
[118.00183868 101.03540802]
[109.88243866 88.42290497]
[105.23559570 74.16439056]
[101.87633514 88.78340149]
[110.01902008 82.50897217]
[122.20741272 81.43985748]
[135.54545593 87.35695648]
[149.97283936 91.46190643]
[164.40023804 95.56684875]
[173.57415771 94.90731049]
[179.08006287 99.90702057]
[193.42013550 104.30731964]
[207.76019287 108.70761871]
[222.54978943 102.49092102]
[236.56175232 110.30400085]
[239.04731750 126.15334320]
[228.09974670 137.88067627]
[212.11711121 136.48980713]
[203.35989380 123.04768372]
[189.01982117 118.64737701]
[174.67976379 114.24707794]
[160.29528809 109.99423218]
[145.86790466 105.88928986]
[131.44052124 101.78433990]
[125.45539093 106.30410004]
[136.14859009 116.82338715]
[146.84179688 127.34267426]
[161.10421753 131.98844910]
[168.67771912 144.93611145]
[165.73637390 159.64491272]
[153.76606750 168.68437195]
[138.81385803 167.48803711]
[128.43313599 156.66026306]
[127.86789703 141.67109680]
[120.67651367 128.50735474]
[113.48513031 115.34362030]
[107.50000000 119.86338043]
[107.50000000 134.86338806]
[107.50000000 149.86338806]
[107.50000000 164.86338806]
[107.50000000 179.86338806]
[107.50000000 194.86338806]
[107.50000000 209.86338806]
[107.50000000 224.86338806]
[107.50000000 239.86338806]
[107.50000000 254.86338806]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 53]
[12 52]
[19 46]
[20 45]
[21 44]
[22 43]
[23 42]
[24 41]
[25 40]
[26 37]
[27 36]
[28 35]
[29 34]
[54 110]
[55 109]
[56 86]
[57 85]
[58 84]
[59 83]
[60 82]
[113 130]
[114 129]
[115 128]
[117 127]
[118 126]
[119 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
