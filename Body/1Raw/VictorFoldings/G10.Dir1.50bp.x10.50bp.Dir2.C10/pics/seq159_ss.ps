%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAAUUAAUUAAUGCUUGUAGGACAUAAUAAUAACAAUUGAAUGUCUGCACAGCCACUUUCCxxxxxxxxxxAAUUAUAACCAAGCAUAAUAUAGCAAGGACUAACCCCUAUACCUUCUGCAUAAUGAAUUAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[99.92050171 273.63226318]
[99.92050171 258.63226318]
[99.92050171 243.63224792]
[99.92050171 228.63224792]
[99.92050171 213.63224792]
[99.92050171 198.63224792]
[99.92050171 183.63224792]
[99.92050171 168.63224792]
[99.92050171 153.63224792]
[99.92050171 138.63224792]
[77.66831970 127.27838135]
[68.76580811 106.35829163]
[74.76552582 86.76200867]
[63.78472137 76.54330444]
[52.80391693 66.32460022]
[50.37424469 81.12651062]
[37.39088821 88.63866425]
[23.34732819 83.36813354]
[18.51227570 69.16876221]
[26.42114067 56.42317963]
[41.29033661 54.45082092]
[31.41462898 43.16054153]
[21.53892326 31.87026215]
[11.66321659 20.57998085]
[1.78751028 9.28970146]
[-8.08819580 -2.00057912]
[-17.96390152 -13.29085922]
[-28.06933594 -24.37599373]
[-38.40023804 -35.25130844]
[-51.54187012 -42.48300934]
[-66.25739288 -45.39048004]
[-80.97291565 -48.29795456]
[-95.68843842 -51.20542526]
[-110.40396118 -54.11289978]
[-125.11948395 -57.02037048]
[-136.28846741 -50.48910141]
[-148.51629639 -53.25527191]
[-155.33441162 -63.29396820]
[-169.98713684 -66.50296021]
[-184.63986206 -69.71195984]
[-199.29258728 -72.92095184]
[-214.74748230 -67.43659210]
[-227.04724121 -78.28316498]
[-223.53892517 -94.30264282]
[-207.83158875 -99.01556396]
[-196.08358765 -87.57367706]
[-181.43086243 -84.36468506]
[-166.77813721 -81.15568542]
[-152.12541199 -77.94669342]
[-135.74810791 -84.17794037]
[-122.21201324 -71.73589325]
[-107.49649048 -68.82842255]
[-92.78096771 -65.92095184]
[-78.06544495 -63.01347733]
[-63.34992218 -60.10600281]
[-48.63439941 -57.19853210]
[-59.56329727 -67.47273254]
[-68.32262421 -79.64952087]
[-74.58821869 -93.27825165]
[-78.12819672 -107.85455322]
[-78.81154633 -122.83898163]
[-76.61298370 -137.67698669]
[-71.61386871 -151.81942749]
[-63.99921417 -164.74293518]
[-54.05082703 -175.96922302]
[-42.13687897 -185.08283997]
[-28.69828033 -191.74647522]
[-14.23237610 -195.71354675]
[0.72547656 -196.83721924]
[15.62171268 -195.07592773]
[29.90504646 -190.49484253]
[43.04687881 -183.26348877]
[54.56084824 -173.64952087]
[64.02084351 -162.00871277]
[71.07677460 -148.77188110]
[75.46749878 -134.42887878]
[77.03053284 -119.51053619]
[75.70803070 -104.56895447]
[71.54892731 -90.15708160]
[64.70715332 -76.80829620]
[55.43591309 -65.01660156]
[44.07831192 -55.21839142]
[31.05467796 -47.77628326]
[16.84699631 -42.96569443]
[1.98106682 -40.96465683]
[-12.99294662 -41.84722900]
[-27.52492523 -45.58221054]
[-17.19402313 -34.70689392]
[-12.46920300 -33.69432831]
[-8.35223770 -29.66463089]
[-6.67362213 -23.16656494]
[3.20208430 -11.87628555]
[13.07779026 -0.58600515]
[22.95349693 10.70427513]
[32.82920456 21.99455452]
[42.70491028 33.28483582]
[52.58061600 44.57511520]
[63.02262497 55.34379578]
[74.00342560 65.56250000]
[84.98423004 75.78121185]
[99.97005463 68.96991730]
[117.63131714 71.43969727]
[132.28654480 83.85491943]
[138.47479248 103.48537445]
[153.41079712 104.86940002]
[168.34681702 106.25342560]
[183.30809021 107.33049011]
[198.28834534 108.10015106]
[213.26858521 108.86981201]
[220.13078308 95.27458954]
[231.93350220 85.65087891]
[246.63182068 81.66603851]
[261.67919922 84.01047516]
[274.46856689 92.27799225]
[282.78411865 105.03620148]
[285.18508911 120.07465363]
[281.25552368 134.78785706]
[271.67623901 146.62666321]
[258.10690308 153.53991699]
[242.89848328 154.32984924]
[228.68592834 148.85961914]
[217.93167114 138.07696533]
[212.49891663 123.85005188]
[197.51867676 123.08039093]
[182.53843689 122.31073761]
[178.41546631 124.83071136]
[172.65521240 124.74456024]
[166.96279907 121.18943787]
[152.02677917 119.80541229]
[137.09075928 118.42138672]
[131.54820251 123.47410583]
[143.99224854 131.84941101]
[156.43629456 140.22470093]
[170.63850403 145.05142212]
[178.49935913 157.82667542]
[176.40663147 172.67997742]
[165.32197571 182.78594971]
[150.33901978 183.50068665]
[138.34271240 174.49575806]
[134.84582520 159.90701294]
[127.65444946 146.74327087]
[120.46306610 133.57954407]
[114.92050171 138.63224792]
[114.92050171 153.63224792]
[114.92050171 168.63224792]
[114.92050171 183.63224792]
[114.92050171 198.63224792]
[114.92050171 213.63224792]
[114.92050171 228.63224792]
[114.92050171 243.63224792]
[114.92050171 258.63226318]
[114.92050171 273.63226318]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[13 100]
[14 99]
[15 98]
[21 97]
[22 96]
[23 95]
[24 94]
[25 93]
[26 92]
[27 91]
[28 88]
[29 87]
[30 56]
[31 55]
[32 54]
[33 53]
[34 52]
[35 51]
[38 49]
[39 48]
[40 47]
[41 46]
[104 130]
[105 129]
[106 128]
[107 125]
[108 124]
[109 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
