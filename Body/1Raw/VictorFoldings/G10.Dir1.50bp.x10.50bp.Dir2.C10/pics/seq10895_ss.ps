%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCCACCCCAGUCUCAGCCCUACUCCACUCAAGCACUAUAGUUGUAGCAGGAAUCUUCUUxxxxxxxxxxUCUCCUUCAUAAAUUAUUCAGCUUCCUACACUAUUAAAGUUUACCACAACCACCACCCCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 388.69085693]
[92.50000000 373.69085693]
[92.50000000 358.69085693]
[92.50000000 343.69085693]
[92.50000000 328.69085693]
[92.50000000 313.69085693]
[92.50000000 298.69085693]
[92.50000000 283.69085693]
[92.50000000 268.69085693]
[92.50000000 253.69087219]
[78.03514099 249.85453796]
[65.04627991 242.39891052]
[54.42181396 231.82701111]
[46.89020538 218.85522461]
[42.97005844 204.36477661]
[42.93439102 189.34187317]
[46.79164505 174.81054688]
[54.28468323 161.76290894]
[64.90794373 151.09133911]
[77.94152832 143.52754211]
[92.50000000 139.59230042]
[92.50000000 124.59230042]
[84.59912109 121.70342255]
[77.80849457 116.26603699]
[72.95013428 108.70633698]
[70.68294525 99.71447754]
[71.41872406 90.18243408]
[56.48442078 91.58473969]
[52.03911591 106.12116241]
[42.36548615 117.84674835]
[28.93868446 124.97341919]
[13.80620289 126.41441345]
[-0.72436374 121.94998932]
[-12.43721104 112.26094818]
[-19.54621506 98.82478333]
[-20.96730232 83.69041443]
[-16.48377037 69.16573334]
[-6.77932358 57.46564484]
[6.66618061 50.37432098]
[21.80240059 48.97314453]
[36.32117081 53.47577667]
[48.00848770 63.19561005]
[55.08211517 76.65042877]
[70.01642609 75.24812317]
[81.61776733 65.73976898]
[85.92534637 51.37158203]
[90.23293304 37.00339890]
[94.09009552 22.50780296]
[97.49307251 7.89890957]
[100.89604950 -6.70998287]
[104.29902649 -21.31887627]
[107.70200348 -35.92776871]
[106.59987640 -45.06216431]
[111.33072662 -50.80365372]
[115.03688812 -65.33859253]
[118.13520813 -80.01511383]
[120.62032318 -94.80782318]
[123.10544586 -109.60053253]
[116.25650787 -120.57987213]
[118.67354584 -132.88340759]
[128.51611328 -139.98487854]
[131.30844116 -154.72268677]
[134.10076904 -169.46049500]
[136.89309692 -184.19828796]
[122.90532684 -189.74256897]
[110.21974945 -197.83407593]
[99.29492950 -208.18032837]
[90.52578735 -220.40728760]
[84.22933197 -234.07298279]
[80.63317108 -248.68339539]
[79.86730194 -263.71035767]
[81.95941925 -278.61068726]
[86.83388519 -292.84570312]
[94.31449127 -305.90087891]
[104.13082123 -317.30419922]
[115.92802429 -326.64352417]
[129.27963257 -333.58117676]
[143.70300293 -337.86639404]
[158.67671204 -339.34423828]
[173.65951538 -337.96133423]
[188.10975647 -333.76766968]
[201.50508118 -326.91479492]
[213.36126709 -317.65048218]
[223.24969482 -306.30963135]
[230.81292725 -293.30215454]
[235.77754211 -279.09832764]
[237.96409607 -264.21157837]
[237.29351807 -249.18003845]
[233.79006958 -234.54711914]
[227.58038330 -220.84178162]
[218.88894653 -208.55946350]
[208.02993774 -198.14414978]
[195.39591980 -189.97238159]
[181.44358826 -184.33952332]
[166.67732239 -181.44923401]
[151.63090515 -181.40597534]
[148.83857727 -166.66816711]
[146.04624939 -151.93035889]
[143.25392151 -137.19255066]
[149.94775391 -121.00019073]
[137.89814758 -107.11540985]
[135.41304016 -92.32270813]
[132.92791748 -77.52999878]
[134.50743103 -75.13992310]
[135.20367432 -71.96041870]
[134.70349121 -68.33664703]
[132.82890320 -64.72321320]
[129.57182312 -61.63242722]
[125.86566162 -47.09749222]
[122.31089783 -32.52479172]
[118.90792084 -17.91589737]
[115.50494385 -3.30700493]
[112.10196686 11.30188751]
[108.69898987 25.91077995]
[110.29323578 29.12416649]
[110.37117767 33.28296661]
[108.49974823 37.64761353]
[104.60112000 41.31098175]
[100.29353333 55.67916870]
[95.98594666 70.04734802]
[105.83900452 70.85992432]
[114.73890686 74.77165985]
[121.75769043 81.25763702]
[126.20211792 89.53134155]
[127.68148804 98.63897705]
[126.14003754 107.56906891]
[121.85167694 115.36470032]
[115.37864685 121.22608948]
[107.50000000 124.59230042]
[107.50000000 139.59230042]
[122.05847168 143.52754211]
[135.09205627 151.09133911]
[145.71531677 161.76290894]
[153.20835876 174.81054688]
[157.06561279 189.34187317]
[157.02993774 204.36477661]
[153.10978699 218.85522461]
[145.57818604 231.82701111]
[134.95372009 242.39891052]
[121.96485901 249.85453796]
[107.50000000 253.69087219]
[107.50000000 268.69085693]
[107.50000000 283.69085693]
[107.50000000 298.69085693]
[107.50000000 313.69085693]
[107.50000000 328.69085693]
[107.50000000 343.69085693]
[107.50000000 358.69085693]
[107.50000000 373.69085693]
[107.50000000 388.69085693]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[21 130]
[22 129]
[27 44]
[28 43]
[45 120]
[46 119]
[47 118]
[48 114]
[49 113]
[50 112]
[51 111]
[52 110]
[54 109]
[55 108]
[56 103]
[57 102]
[58 101]
[61 99]
[62 98]
[63 97]
[64 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
