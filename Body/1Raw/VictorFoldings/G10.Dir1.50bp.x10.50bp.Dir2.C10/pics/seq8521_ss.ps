%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCCCCUUAUGAGCGGGCACAGUGAUUAUAGGCUUUCGCUCUAAGAUUAAAAAUGCCCUAGCxxxxxxxxxxAUGACUAGCUUACACAAUAGCUUUUAUAGUAAAGAUACCUCUUUACGGACUCCACUUAUGACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[123.88465881 313.25286865]
[123.57668304 298.25604248]
[123.26869965 283.25918579]
[122.96072388 268.26235962]
[122.65274811 253.26551819]
[122.34477234 238.26867676]
[122.03678894 223.27185059]
[121.72881317 208.27500916]
[121.42083740 193.27816772]
[119.42478180 178.41157532]
[115.76607513 163.86460876]
[112.10736847 149.31765747]
[108.44866180 134.77070618]
[85.42955780 129.30287170]
[72.78525543 111.81433105]
[57.96277618 114.11520386]
[43.14029312 116.41608429]
[28.31781197 118.71695709]
[20.25928497 123.15045929]
[13.16767120 120.90965271]
[-1.69892728 122.90570831]
[-16.56552505 124.90176392]
[-31.43212509 126.89781952]
[-46.29872513 128.89387512]
[-61.12120438 131.19474792]
[-75.89331818 133.79948425]
[-90.66543579 136.40420532]
[-94.30868530 151.19090271]
[-103.65637970 163.21340942]
[-117.08897400 170.38873291]
[-132.27919006 171.47370911]
[-146.59523010 166.28036499]
[-157.55676270 155.70848083]
[-163.26461792 141.58969116]
[-162.72990417 126.37017059]
[-156.04522705 112.68678284]
[-144.36877441 102.91026306]
[-129.72355652 98.73445129]
[-114.64694214 100.88283539]
[-101.75104523 108.98319244]
[-93.27015686 121.63208008]
[-78.49804688 119.02735901]
[-63.72592926 116.42263794]
[-60.27202606 113.04331970]
[-54.63879013 111.83727264]
[-48.29478073 114.02728271]
[-33.42818069 112.03122711]
[-18.56158257 110.03516388]
[-3.69498420 108.03910828]
[11.17161465 106.04305267]
[26.01693726 103.89447021]
[40.83942032 101.59359741]
[55.66189957 99.29272461]
[70.48438263 96.99185181]
[75.20634460 83.70597839]
[85.52833557 74.10035706]
[99.11897278 70.34457397]
[102.47823334 55.72556686]
[105.83749390 41.10655594]
[109.19674683 26.48755074]
[98.70841980 37.21112061]
[86.19336700 45.47994614]
[72.21523285 50.92162323]
[57.40356064 53.29107666]
[42.42541885 52.48159027]
[27.95538330 48.52962112]
[14.64514256 41.61315918]
[3.09415221 32.04369354]
[-6.17736387 20.25221443]
[-12.75184250 6.76977348]
[-16.33318710 -7.79641914]
[-16.76010513 -22.79034233]
[-14.01336956 -37.53671265]
[-8.21668434 -51.37139511]
[0.36888388 -63.67131424]
[11.35666466 -73.88251495]
[24.25180054 -81.54512024]
[38.47352982 -86.31402588]
[53.38134766 -87.97444153]
[68.30384827 -86.45160675]
[82.56895447 -81.81408691]
[95.53422546 -74.27075958]
[106.61573029 -64.16133881]
[115.31438446 -51.94113922]
[121.23843384 -38.16051102]
[124.12107849 -23.44010544]
[123.83248138 -8.44288254]
[120.38655090 6.15316200]
[130.93856812 -4.50774670]
[141.49058533 -15.16865540]
[152.04260254 -25.82956505]
[149.40374756 -41.12060928]
[156.28691101 -55.02750397]
[170.04537964 -62.20275497]
[185.38873291 -59.88734055]
[196.41714478 -48.97158051]
[198.88995361 -33.65280533]
[191.85632324 -19.82140160]
[178.02084351 -12.79582310]
[162.70350647 -15.27754879]
[152.15148926 -4.61664057]
[141.59947205 6.04426861]
[131.04745483 16.70517731]
[123.81575775 29.84680939]
[120.45649719 44.46581650]
[117.09723663 59.08482361]
[113.73798370 73.70383453]
[124.70210266 80.12270355]
[132.55932617 91.13555145]
[135.40193176 105.20438385]
[150.22441101 107.50526428]
[165.04689026 109.80613708]
[179.86936951 112.10700989]
[194.69184875 114.40788269]
[209.51434326 116.70876312]
[224.33682251 119.00963593]
[239.42477417 112.58425903]
[252.36892700 122.65306854]
[249.85343933 138.85813904]
[234.46601868 144.52908325]
[222.03594971 133.83212280]
[207.21345520 131.53125000]
[192.39097595 129.23036194]
[177.56849670 126.92948914]
[162.74601746 124.62861633]
[147.92353821 122.32774353]
[133.10105896 120.02687073]
[122.99562073 131.11199951]
[126.65431976 145.65895081]
[130.31303406 160.20591736]
[133.97174072 174.75286865]
[139.76229858 160.91561890]
[151.23878479 151.25692749]
[165.86157227 147.91416931]
[180.39479065 151.62705994]
[191.62239075 161.57397461]
[197.05982971 175.55375671]
[195.50384521 190.47283936]
[187.29876709 203.02976990]
[174.26029968 210.44584656]
[159.27369690 211.07997131]
[145.65536499 204.79180908]
[136.41767883 192.97018433]
[136.72564697 207.96702576]
[137.03363037 222.96386719]
[137.34161377 237.96070862]
[137.64958191 252.95755005]
[137.95756531 267.95437622]
[138.26554871 282.95123291]
[138.57351685 297.94805908]
[138.88150024 312.94488525]
[141.46726990 332.15332031]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 151]
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 131]
[11 130]
[12 129]
[13 128]
[15 54]
[16 53]
[17 52]
[18 51]
[20 50]
[21 49]
[22 48]
[23 47]
[24 46]
[25 43]
[26 42]
[27 41]
[57 107]
[58 106]
[59 105]
[60 104]
[88 103]
[89 102]
[90 101]
[91 100]
[110 127]
[111 126]
[112 125]
[113 124]
[114 123]
[115 122]
[116 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
