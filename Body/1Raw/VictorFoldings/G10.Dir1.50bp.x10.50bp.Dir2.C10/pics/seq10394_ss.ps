%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCCCCACUAUUAACCUACUGGGAGAACUCUCUGUGCUAGUAACCACGUUCUCCUGAUCAAAUxxxxxxxxxxAACUCAUGAGACCCACAACAAAUAGCCCUUCUAAACGCUAAUCCAAGCCUCACCCCACUACUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[33.77825165 309.58227539]
[28.77350616 323.72271729]
[23.76876068 337.86318970]
[18.76401711 352.00363159]
[13.75927162 366.14410400]
[8.75452614 380.28454590]
[12.27610207 396.30111694]
[-0.01467268 407.15786743]
[-15.47410202 401.68630981]
[-18.19885063 385.51510620]
[-5.38593054 375.27981567]
[-0.38118562 361.13934326]
[4.62355947 346.99890137]
[9.62830448 332.85842896]
[14.63304901 318.71798706]
[19.63779449 304.57751465]
[0.68588752 296.07843018]
[-17.37914276 285.82836914]
[-34.39597702 273.91885376]
[-50.21265411 260.45623779]
[-64.68792725 245.56074524]
[-77.69254303 229.36540222]
[-89.11035156 212.01481628]
[-98.83940887 193.66394043]
[-106.79283142 174.47663879]
[-112.89958954 154.62426758]
[-117.10514832 134.28410339]
[-119.37195587 113.63777161]
[-119.67977905 92.86965942]
[-118.02584839 72.16522217]
[-114.42494965 51.70935059]
[-108.90923309 31.68471527]
[-122.99890900 26.53874779]
[-137.08859253 21.39277840]
[-151.17826843 16.24680901]
[-165.26794434 11.10084152]
[-179.35762024 5.95487309]
[-193.44729614 0.80890453]
[-189.89936829 15.38327217]
[-198.91886902 27.36861610]
[-213.90580750 27.99467087]
[-223.89347839 16.80332375]
[-221.57344055 1.98383021]
[-208.64361572 -5.61963415]
[-222.14883423 -12.14719963]
[-235.65405273 -18.67476463]
[-249.26466370 -11.22284698]
[-264.65167236 -13.22761917]
[-275.89849854 -23.91820717]
[-278.68048096 -39.18386078]
[-271.92791748 -53.15462494]
[-258.23727417 -60.45845795]
[-242.87289429 -58.28688431]
[-231.74270630 -47.47491837]
[-229.12649536 -32.17998123]
[-215.62127686 -25.65241623]
[-202.11605835 -19.12485123]
[-188.30133057 -13.28077316]
[-174.21165466 -8.13480473]
[-160.12197876 -2.98883605]
[-146.03230286 2.15713263]
[-131.94261169 7.30310106]
[-117.85294342 12.44906902]
[-103.76326752 17.59503746]
[-98.29055786 5.17964125]
[-92.06223297 -6.87442827]
[-85.10202789 -18.52123642]
[-77.43647003 -29.71640205]
[-69.09475708 -40.41726685]
[-60.10868454 -50.58304596]
[-50.51249695 -60.17501068]
[-40.34275818 -69.15660095]
[-29.63822174 -77.49359894]
[-18.43968010 -85.15422821]
[-6.78980589 -92.10929871]
[5.26700640 -98.33231354]
[17.68481255 -103.79954529]
[30.41629410 -108.49017334]
[43.41293335 -112.38632202]
[56.62520599 -115.47313690]
[70.00276184 -117.73886108]
[83.49463654 -119.17485809]
[97.04940033 -119.77565765]
[110.61540222 -119.53897095]
[124.14096069 -118.46569061]
[137.57452393 -116.55992126]
[150.86489868 -113.82891846]
[163.96145630 -110.28308868]
[176.81427002 -105.93594360]
[189.37437439 -100.80404663]
[201.59391785 -94.90695953]
[213.42630005 -88.26715088]
[224.82646179 -80.90991974]
[235.75096130 -72.86330414]
[246.15815735 -64.15796661]
[256.00839233 -54.82708359]
[265.26412964 -44.90620804]
[273.89013672 -34.43314362]
[281.85348511 -23.44780540]
[289.12384033 -11.99205017]
[295.67352295 -0.10953177]
[301.47756958 12.15446854]
[306.51385498 24.75321770]
[310.76318359 37.63870621]
[314.20935059 50.76182938]
[316.83926392 64.07258606]
[331.71255493 62.12709045]
[346.58587646 60.18159866]
[361.45916748 58.23610687]
[367.27441406 44.02067184]
[379.42807007 34.63005447]
[394.65090942 32.59029007]
[408.84805298 38.45005798]
[418.20053101 50.63311005]
[420.19256592 65.86227417]
[414.28833008 80.04096985]
[402.07601929 89.35520935]
[386.84069824 91.29950714]
[372.68057251 85.35085297]
[363.40466309 73.10940552]
[348.53137207 75.05490112]
[333.65805054 77.00038910]
[318.78475952 78.94588470]
[319.62338257 91.30460358]
[319.76446533 103.69094086]
[319.20755005 116.06555176]
[317.95434570 128.38912964]
[316.00891113 140.62255859]
[313.37741089 152.72694397]
[310.06814575 164.66386414]
[306.09170532 176.39540100]
[301.46066284 187.88429260]
[296.18972778 199.09405518]
[290.29568481 209.98907471]
[283.79724121 220.53474426]
[276.71499634 230.69757080]
[269.07147217 240.44529724]
[260.89096069 249.74693298]
[252.19943237 258.57293701]
[243.02449036 266.89529419]
[233.39527893 274.68756104]
[223.34237671 281.92498779]
[212.89772034 288.58459473]
[202.09448242 294.64523315]
[190.96696472 300.08761597]
[179.55053711 304.89450073]
[167.88142395 309.05059814]
[155.99671936 312.54272461]
[143.93415833 315.35977173]
[131.73204041 317.49279785]
[119.42915344 318.93505859]
[107.06455231 319.68191528]
[94.67750549 319.73101807]
[82.30737305 319.08221436]
[69.99343109 317.73757935]
[57.77479553 315.70135498]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 16]
[2 15]
[3 14]
[4 13]
[5 12]
[6 11]
[32 64]
[33 63]
[34 62]
[35 61]
[36 60]
[37 59]
[38 58]
[44 57]
[45 56]
[46 55]
[106 123]
[107 122]
[108 121]
[109 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
