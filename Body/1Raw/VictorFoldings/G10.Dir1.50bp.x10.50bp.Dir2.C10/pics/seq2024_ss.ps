%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAGAUGAAAAAUUAUAACCAAGCAUAAUAUAGCAAGGACUAACCCCUAUACCUUCUGCAUAAxxxxxxxxxxCCAUGGCCAUCCCCUUAUGAGCGGGCACAGUGAUUAUAGGCUUUCGCUCUAAGAUUAAAAAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[131.38973999 265.20956421]
[131.38973999 250.20954895]
[131.38973999 235.20954895]
[131.38973999 220.20954895]
[131.38973999 205.20954895]
[131.38973999 190.20954895]
[131.38973999 175.20954895]
[131.38973999 160.20954895]
[131.38973999 145.20954895]
[131.38973999 130.20954895]
[128.51930237 115.48676300]
[122.88455200 101.58534241]
[117.24979401 87.68391418]
[112.83602905 114.93272400]
[87.32898712 113.04712677]
[73.37117767 118.54071808]
[67.00158691 132.75570679]
[52.76812363 138.12815857]
[39.25555038 131.96812439]
[29.24790955 144.22201538]
[14.57121563 141.68351746]
[0.61340553 147.17710876]
[-13.34440517 152.67070007]
[-27.30221558 158.16429138]
[-41.26002502 163.65788269]
[-45.01890564 178.71278381]
[-56.93056488 188.65724182]
[-72.41472626 189.66737366]
[-85.51741791 181.35478210]
[-91.20037842 166.91581726]
[-87.27840424 151.90257263]
[-75.25956726 142.08792114]
[-59.76535797 141.24581909]
[-46.75361633 149.70007324]
[-32.79580688 144.20648193]
[-18.83799362 138.71289062]
[-4.88018370 133.21929932]
[9.07762623 127.72570801]
[18.08691406 115.86476135]
[33.76196289 118.01031494]
[39.45102310 104.29280090]
[53.52796936 98.52268982]
[67.87758636 104.58290863]
[81.83539581 99.08931732]
[85.54587555 86.62733459]
[97.29898071 78.97749329]
[83.83190918 72.37158203]
[68.24721527 76.17904663]
[55.64214325 66.25474548]
[55.68622971 50.21175385]
[68.34564972 40.35687637]
[83.90918732 44.24993896]
[90.43782043 58.90451050]
[103.90489197 65.51042175]
[118.07386780 60.58699417]
[124.54296112 47.05367279]
[131.01205444 33.52035522]
[137.48115540 19.98703194]
[143.95025635 6.45371199]
[150.41935730 -7.07960892]
[141.85150146 -19.75000763]
[140.78308105 -34.90768814]
[147.40116882 -48.47483063]
[159.83837891 -56.85169601]
[174.69857788 -57.87161255]
[181.16766357 -71.40493011]
[187.63676453 -84.93825531]
[175.06768799 -76.75177765]
[160.60639954 -72.76794434]
[145.61819458 -73.36286926]
[131.51815796 -78.48038483]
[119.63749695 -87.63734436]
[111.09788513 -99.96920776]
[106.70555115 -114.31171417]
[106.87519836 -129.31076050]
[111.59080505 -143.55024719]
[120.40716553 -155.68580627]
[132.49191284 -164.57170105]
[146.70408630 -169.36898804]
[161.70190430 -169.62475586]
[176.06939697 -165.31484985]
[188.45008850 -156.84617615]
[197.67510986 -145.01828003]
[202.87350464 -130.94786072]
[203.55447388 -115.96333313]
[199.65235901 -101.47630310]
[210.52426147 -111.81080627]
[215.19577026 -126.92660522]
[229.75115967 -130.08734131]
[240.62304688 -140.42184448]
[235.13088989 -154.59593201]
[235.48599243 -169.79270935]
[241.63418579 -183.69480896]
[252.63792419 -194.18223572]
[266.81921387 -199.65573120]
[282.01553345 -199.28065491]
[295.90951538 -193.11416626]
[306.38247681 -182.09664917]
[311.83731079 -167.90815735]
[311.44223022 -152.71235657]
[305.25747681 -138.82649231]
[294.22619629 -128.36805725]
[280.03054810 -122.93187714]
[264.83526611 -123.34693909]
[250.95755005 -129.54995728]
[240.08566284 -119.21544647]
[236.19177246 -104.83883667]
[220.85876465 -100.93891144]
[209.98686218 -90.60440826]
[201.17008972 -78.46915436]
[194.70098877 -64.93583679]
[188.23188782 -51.40251541]
[196.77049255 -39.19768143]
[198.06219482 -24.25822067]
[191.66035461 -10.58771706]
[179.19355774 -1.90003347]
[163.95268250 -0.61051106]
[157.48358154 12.92280960]
[151.01448059 26.45613098]
[144.54537964 39.98945236]
[138.07627869 53.52277374]
[131.60719299 67.05609131]
[131.15121460 82.04916382]
[136.78598022 95.95058441]
[142.42073059 109.85200500]
[144.78277588 95.03914642]
[151.33300781 81.54491425]
[161.51017761 70.52559662]
[174.44219971 62.92542267]
[189.02096558 59.39562988]
[203.99726868 60.23868179]
[218.08778381 65.38233948]
[230.08514404 74.38585663]
[238.96131897 86.47773743]
[243.95573425 100.62184906]
[244.64041138 115.60621643]
[240.95668030 130.14685059]
[233.22021484 142.99780273]
[222.09391785 153.05790710]
[208.53118896 159.46511841]
[193.69419861 161.67042542]
[178.85426331 159.48486328]
[165.28303528 153.09568787]
[154.14337158 143.05039978]
[146.38973999 130.20954895]
[146.38973999 145.20954895]
[146.38973999 160.20954895]
[146.38973999 175.20954895]
[146.38973999 190.20954895]
[146.38973999 205.20954895]
[146.38973999 220.20954895]
[146.38973999 235.20954895]
[146.38973999 250.20954895]
[146.38973999 265.20956421]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[11 125]
[12 124]
[13 123]
[15 44]
[16 43]
[19 40]
[21 38]
[22 37]
[23 36]
[24 35]
[25 34]
[46 54]
[47 53]
[55 122]
[56 121]
[57 120]
[58 119]
[59 118]
[60 117]
[65 112]
[66 111]
[67 110]
[86 109]
[87 108]
[89 106]
[90 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
