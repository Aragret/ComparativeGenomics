%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUAAGAACAGCUAAAAGAGCACACCCGUCUAUGUAGCAAAAUAGUGGGAAGAUUUAUAGxxxxxxxxxxGCCGAAUACACAAACAUUAUUAUAAUAAACACCCUCACCACUACAAUCUUCCUAGGAACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[64.98313904 445.01303101]
[64.98313904 430.01303101]
[64.98313904 415.01303101]
[64.98313904 400.01303101]
[64.98313904 385.01303101]
[64.98313904 370.01303101]
[64.98313904 355.01303101]
[64.98313904 340.01303101]
[64.98313904 325.01303101]
[64.98313904 310.01303101]
[52.45701599 307.42910767]
[40.63503647 302.53561401]
[29.93906784 295.50521851]
[20.75115967 286.58682251]
[13.39991379 276.09686279]
[8.14872456 264.40795898]
[5.18633986 251.93579102]
[4.62008142 239.12426758]
[6.47195482 226.42971802]
[10.67780209 214.30464172]
[17.08952141 203.18162537]
[25.48028564 193.45783997]
[35.55255508 185.48088074]
[46.94864655 179.53637695]
[59.26341629 175.83772278]
[72.05867767 174.51846313]
[73.61625671 159.59954834]
[75.17383575 144.68063354]
[76.73142242 129.76171875]
[66.98376465 118.36070251]
[52.00405502 117.58085632]
[37.01703644 116.95687866]
[22.02434158 116.48883820]
[7.03164530 116.02079773]
[-2.36954665 128.36572266]
[-17.24108124 132.79484558]
[-31.86454964 127.60506439]
[-40.61693192 114.79196167]
[-40.13275528 99.28244781]
[-30.59819603 87.04022980]
[-15.67948914 82.77269745]
[-1.11318052 88.12081146]
[7.49968767 101.02809906]
[22.49238396 101.49613953]
[37.48508072 101.96417999]
[44.31294250 99.01021576]
[52.78389740 102.60114288]
[67.76361084 103.38098907]
[69.92712402 91.42927551]
[76.19534302 81.53367615]
[85.37519073 74.97550201]
[95.92892456 72.45743561]
[106.22677612 74.03730011]
[113.68168640 61.02099228]
[121.13659668 48.00468063]
[128.59150696 34.98837280]
[136.04641724 21.97206306]
[143.50132751 8.95575237]
[150.82043457 -4.13740158]
[158.00294495 -17.30598450]
[157.10273743 -35.66815948]
[172.36846924 -44.26799774]
[171.08647156 -62.60747147]
[186.16999817 -71.52303314]
[192.79849243 -84.97899628]
[199.42698669 -98.43495941]
[206.05548096 -111.89093018]
[212.68399048 -125.34689331]
[200.47256470 -134.11793518]
[189.87147522 -144.77938843]
[181.16990662 -157.04040527]
[174.60525513 -170.56649780]
[170.35659790 -184.98866272]
[168.53985596 -199.91345215]
[169.20457458 -214.93371582]
[172.33264160 -229.63966370]
[177.83869934 -243.63012695]
[185.57255554 -256.52343750]
[195.32321167 -267.96786499]
[206.82466125 -277.65115356]
[219.76315308 -285.30917358]
[233.78570557 -290.73303223]
[248.50976562 -293.77468872]
[263.53366089 -294.35122681]
[278.44754028 -292.44689941]
[292.84451294 -288.11364746]
[306.33181763 -281.46972656]
[318.54153442 -272.69631958]
[329.14059448 -262.03280640]
[337.83978271 -249.77012634]
[344.40185547 -236.24276733]
[348.64770508 -221.81977844]
[350.46157837 -206.89465332]
[349.79397583 -191.87452698]
[346.66308594 -177.16917419]
[341.15432739 -163.17976379]
[333.41799927 -150.28794861]
[323.66513062 -138.84541321]
[312.16180420 -129.16432190]
[299.22183228 -121.50878906]
[285.19824219 -116.08765411]
[270.47360229 -113.04882050]
[255.44958496 -112.47517395]
[240.53608704 -114.38237762]
[226.13995361 -118.71839905]
[219.51145935 -105.26242828]
[212.88294983 -91.80646515]
[206.25445557 -78.35050201]
[199.62596130 -64.89453125]
[203.22219849 -53.30253601]
[197.75720215 -42.01746368]
[185.68362427 -37.36100006]
[189.03793335 -25.69669533]
[183.33935547 -14.52775764]
[171.17152405 -10.12347507]
[163.98901367 3.04510713]
[163.54440308 10.47127533]
[156.51763916 16.41066360]
[149.06272888 29.42697334]
[141.60781860 42.44328308]
[134.15290833 55.45959091]
[126.69799042 68.47589874]
[119.24308014 81.49221039]
[127.93650818 96.72751617]
[125.46067047 115.01052856]
[111.74491882 128.67237854]
[91.65032959 131.31930542]
[90.09275055 146.23822021]
[88.53517151 161.15713501]
[86.97759247 176.07603455]
[103.35533142 181.95143127]
[117.70333099 191.77749634]
[129.08888245 204.90957642]
[136.77336121 220.48832703]
[140.26011658 237.49589539]
[139.32661438 254.82246399]
[134.03854370 271.33865356]
[124.74531555 285.96914673]
[112.05693817 297.76266479]
[96.80396271 305.95388794]
[79.98313904 310.01303101]
[79.98313904 325.01303101]
[79.98313904 340.01303101]
[79.98313904 355.01303101]
[79.98313904 370.01303101]
[79.98313904 385.01303101]
[79.98313904 400.01303101]
[79.98313904 415.01303101]
[79.98313904 430.01303101]
[79.98313904 445.01303101]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[26 130]
[27 129]
[28 128]
[29 127]
[30 48]
[31 47]
[32 45]
[33 44]
[34 43]
[53 123]
[54 122]
[55 121]
[56 120]
[57 119]
[58 118]
[59 116]
[60 115]
[62 112]
[64 109]
[65 108]
[66 107]
[67 106]
[68 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
