%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACCCUAGCCAUCAUUCUACUAUCAACAUUACUAAUAAGUGGCUCCUUUAACCUCUCCACxxxxxxxxxxUUUGCCAUCAUAGGAGGCUUCAUUCACUGAUUUCCCCUAUUCUCAGGCUACACCCUAGACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[135.54071045 597.45318604]
[135.54071045 582.45318604]
[135.54071045 567.45318604]
[135.54071045 552.45318604]
[135.54071045 537.45318604]
[135.54071045 522.45318604]
[135.54071045 507.45321655]
[135.54071045 492.45321655]
[135.54071045 477.45321655]
[135.54071045 462.45321655]
[118.06958008 455.16381836]
[105.44375610 440.99334717]
[100.18340302 422.70712280]
[103.36580658 403.89813232]
[114.40503693 388.28103638]
[131.15931702 378.95855713]
[129.60174561 364.03964233]
[128.04415894 349.12072754]
[126.48657990 334.20181274]
[124.92900085 319.28289795]
[108.70609283 317.28555298]
[93.40625000 311.51046753]
[79.89642334 302.28082275]
[68.94312286 290.11566162]
[61.16887283 275.70065308]
[57.01688385 259.84957886]
[56.72575760 243.45820618]
[60.31578064 227.45387268]
[67.58757782 212.74288940]
[78.13315582 200.15922546]
[91.35881042 190.41728210]
[106.51856232 184.07128906]
[104.03343964 169.27859497]
[101.54832458 154.48588562]
[99.06320190 139.69317627]
[85.79508972 137.91143799]
[73.62455750 131.73709106]
[63.98983002 121.70819092]
[58.09124756 108.82752228]
[56.74346161 94.46361542]
[60.26723099 80.20561218]
[46.04045105 75.45179749]
[31.81367302 70.69798279]
[15.86190605 74.50234222]
[4.78943491 62.40555191]
[9.98666859 46.85174942]
[26.10713959 43.84135437]
[36.56748962 56.47120667]
[50.79426575 61.22502136]
[65.02104950 65.97883606]
[77.00788116 56.96130753]
[68.70320892 43.49493790]
[75.90438080 30.45682335]
[75.28040314 15.46980762]
[74.65642548 0.48279172]
[74.03244781 -14.50422478]
[73.40847015 -29.49124146]
[58.50171661 -31.48118401]
[44.16703796 -36.02960587]
[30.84005165 -42.99828720]
[18.92574501 -52.17545700]
[8.78618145 -63.28223038]
[0.72949171 -75.98107910]
[-4.99949074 -89.88611603]
[-8.22666836 -104.57476044]
[-8.85397243 -119.60066223]
[-6.86233759 -134.50718689]
[-2.31228876 -148.84135437]
[4.65790367 -162.16754150]
[13.83642292 -174.08081055]
[24.94434547 -184.21911621]
[37.64411163 -192.27436829]
[51.54979324 -198.00177002]
[66.23880768 -201.22727966]
[81.26477814 -201.85287476]
[96.17107391 -199.85955811]
[110.50472260 -195.30787659]
[123.83013153 -188.33618164]
[135.74235535 -179.15631104]
[145.87939453 -168.04724121]
[153.93321228 -155.34655762]
[159.65904236 -141.44023132]
[162.88288879 -126.75084686]
[163.50677490 -111.72480774]
[161.51176453 -96.81873322]
[156.95846558 -82.48560333]
[149.98524475 -69.16098785]
[140.80403137 -57.24980164]
[129.69380188 -47.11401749]
[116.99221039 -39.06164932]
[103.08522797 -33.33739853]
[88.39548492 -30.11521721]
[89.01946259 -15.12820148]
[89.64344025 -0.14118567]
[90.26741791 14.84583092]
[90.89139557 29.83284569]
[99.15142822 42.22724152]
[91.99489594 56.33732986]
[105.05374908 56.36990356]
[117.39898682 60.18222809]
[127.97330475 67.36309814]
[135.89602661 77.21664429]
[140.53627014 88.82910156]
[141.56271362 101.15326691]
[138.96607971 113.10282135]
[133.05291748 123.64811707]
[124.41186523 131.90483093]
[113.85591125 137.20805359]
[116.34102631 152.00076294]
[118.82614899 166.79347229]
[121.31126404 181.58618164]
[135.02978516 182.18737793]
[148.35327148 185.48820496]
[160.75604248 191.35623169]
[171.74917603 199.55776978]
[180.89976501 209.76719666]
[187.84802246 221.57986450]
[192.32138062 234.52816772]
[194.14518738 248.10000610]
[193.24952698 261.75909424]
[189.67190552 274.96612549]
[183.55569458 287.20007324]
[175.14434814 297.97866821]
[164.77175903 306.87759399]
[152.84896851 313.54699707]
[139.84791565 317.72531128]
[141.40548706 332.64422607]
[142.96307373 347.56314087]
[144.52066040 362.48205566]
[146.07823181 377.40097046]
[157.17262268 379.73171997]
[167.26502991 384.86074829]
[175.66444397 392.42779541]
[181.79812622 401.90591431]
[185.25070190 412.63830566]
[185.79228210 423.88369751]
[183.39367676 434.86761475]
[178.22795105 444.83578491]
[170.65791321 453.10577393]
[161.21061707 459.11383057]
[150.54071045 462.45321655]
[150.54071045 477.45321655]
[150.54071045 492.45321655]
[150.54071045 507.45321655]
[150.54071045 522.45318604]
[150.54071045 537.45318604]
[150.54071045 552.45318604]
[150.54071045 567.45318604]
[150.54071045 582.45318604]
[150.54071045 597.45318604]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[16 130]
[17 129]
[18 128]
[19 127]
[20 126]
[32 111]
[33 110]
[34 109]
[35 108]
[41 50]
[42 49]
[43 48]
[51 98]
[53 96]
[54 95]
[55 94]
[56 93]
[57 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
