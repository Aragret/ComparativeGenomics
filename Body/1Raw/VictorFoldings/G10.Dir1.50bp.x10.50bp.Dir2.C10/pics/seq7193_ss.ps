%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCACAACACUUUCUCGGCCUAUCCGGAAUGCCCCGACGUUACUCGGACUACCCCGAUGCxxxxxxxxxxAUGCCUAGAAGGAAUAAUACUAUCGCUGUUCAUUAUAGCUACUCUCAUAACCCUCAACACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[136.92996216 357.94799805]
[136.92996216 342.94799805]
[136.92996216 327.94799805]
[136.92996216 312.94799805]
[136.92996216 297.94799805]
[136.92996216 282.94799805]
[136.92996216 267.94799805]
[136.92996216 252.94799805]
[136.92996216 237.94799805]
[136.92996216 222.94799805]
[122.49546814 217.06095886]
[111.74920654 206.58747864]
[105.96495056 193.37500000]
[105.59535217 179.53926086]
[110.26139832 167.12892151]
[118.86898041 157.82257080]
[111.41407013 144.80625916]
[103.95915985 131.78994751]
[96.50424957 118.77364349]
[82.54386139 113.28661346]
[71.66582489 124.77481842]
[57.21440125 121.16847229]
[42.89180374 125.62528992]
[28.56920624 130.08210754]
[21.24812317 135.65467834]
[13.90209293 134.47930908]
[-0.51012266 138.63719177]
[-14.92233849 142.79508972]
[-23.90495491 156.08764648]
[-39.90878296 157.20883179]
[-50.65705490 145.29858398]
[-47.90461349 129.49340820]
[-33.76290131 121.91768646]
[-19.08022690 128.38287354]
[-4.66801023 124.22498322]
[9.74420643 120.06709290]
[24.11239052 115.75950623]
[38.43498611 111.30269623]
[52.75758362 106.84587860]
[62.61117554 95.67645264]
[78.08704376 98.96401215]
[78.94338989 91.51306152]
[80.65608215 76.61116028]
[81.51242065 69.16020966]
[68.57437134 61.57030106]
[55.63631058 53.98039246]
[42.69825745 46.39048386]
[27.46959686 50.61700439]
[13.75402546 42.76470184]
[9.68874931 27.49220848]
[17.68562317 13.86042309]
[33.00024414 9.95684338]
[46.54671860 18.09739304]
[50.28816605 33.45243073]
[63.22621918 41.04233932]
[76.16427612 48.63224411]
[89.10233307 56.22215271]
[96.21572113 53.84524536]
[83.62869263 45.68640518]
[82.15947723 30.75853157]
[92.91439056 20.30234909]
[107.79496765 22.19138336]
[115.59609985 35.00318909]
[110.44250488 49.09143066]
[117.55589294 46.71452332]
[123.33216095 32.87130737]
[129.10842896 19.02808952]
[134.88470459 5.18487120]
[122.76646423 14.02501774]
[108.73948669 19.33951187]
[93.80582428 20.74869728]
[79.03231049 18.15190315]
[65.47433472 11.73464298]
[54.10044479 1.95534825]
[45.72316742 -10.48736858]
[40.94095230 -24.70462799]
[40.09543991 -39.68077850]
[43.24702454 -54.34595871]
[50.17056656 -67.65251923]
[60.37145996 -78.64987183]
[73.12097931 -86.55238342]
[87.50833130 -90.79552460]
[102.50570679 -91.07616425]
[117.04172516 -87.37426758]
[130.07797241 -79.95427704]
[140.68316650 -69.34626770]
[148.09968567 -56.30804825]
[151.79772949 -41.77104568]
[151.51310730 -26.77374649]
[147.26838684 -12.39253998]
[158.35971069 -22.49118996]
[163.35476685 -37.50318527]
[177.97465515 -40.35061264]
[182.43742371 -56.13084412]
[198.39915466 -59.89323425]
[209.43975830 -47.76736069]
[204.20164490 -32.22727966]
[188.07330322 -29.25929832]
[183.87158203 -14.96962547]
[168.45835876 -11.39987373]
[157.36703491 -1.30122435]
[148.72792053 10.96114349]
[142.95166016 24.80436134]
[137.17538452 38.64757919]
[131.39910889 52.49079514]
[135.80937195 97.93293762]
[109.52056122 111.31873322]
[116.97547150 124.33504486]
[124.43038177 137.35134888]
[131.88528442 150.36766052]
[155.33308411 148.95307922]
[175.70130920 164.45487976]
[181.50344849 191.54496765]
[195.62825012 196.59371948]
[209.75305176 201.64247131]
[223.87785339 206.69123840]
[238.05441284 211.59278870]
[252.28118896 216.34660339]
[267.22009277 210.49778748]
[281.03442383 218.65522766]
[283.12701416 234.56121826]
[271.89260864 246.01405334]
[255.94926453 244.22808838]
[247.52737427 230.57337952]
[233.30059814 225.81956482]
[225.91203308 226.68833923]
[218.82910156 220.81604004]
[204.70429993 215.76727295]
[190.57949829 210.71852112]
[176.45469666 205.66976929]
[170.32350159 209.98931885]
[180.29869080 221.19181824]
[190.27386475 232.39430237]
[202.61460876 240.92108154]
[202.68290710 255.92092896]
[190.42031860 264.55972290]
[176.31890869 259.44598389]
[172.44390869 244.95591736]
[165.25251770 231.79217529]
[158.06114197 218.62844849]
[151.92996216 222.94799805]
[151.92996216 237.94799805]
[151.92996216 252.94799805]
[151.92996216 267.94799805]
[151.92996216 282.94799805]
[151.92996216 297.94799805]
[151.92996216 312.94799805]
[151.92996216 327.94799805]
[151.92996216 342.94799805]
[151.92996216 357.94799805]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[16 110]
[17 109]
[18 108]
[19 107]
[20 41]
[22 39]
[23 38]
[24 37]
[26 36]
[27 35]
[28 34]
[44 57]
[45 56]
[46 55]
[47 54]
[65 105]
[66 104]
[67 103]
[68 102]
[90 101]
[91 100]
[93 98]
[113 130]
[114 129]
[115 128]
[116 127]
[117 125]
[118 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
