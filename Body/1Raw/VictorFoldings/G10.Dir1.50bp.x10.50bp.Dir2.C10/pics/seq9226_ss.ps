%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCAAACAUCACUUUGGCUUCGAAGCCGCCGCCUGAUACUGGCAUUUUGUAGAUGUGGUUUxxxxxxxxxxCUCAACCCCGACAUCAUUACCGGGUUUUCCUCUUGUAAAUAUAGUUUAACCAAAACAUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[102.58354187 288.80358887]
[102.27148438 273.80685425]
[101.95942688 258.81008911]
[101.64736938 243.81333923]
[101.33531952 228.81658936]
[101.02326202 213.81983948]
[100.71120453 198.82307434]
[100.39914703 183.82632446]
[100.08708954 168.82957458]
[86.12670135 163.34254456]
[75.68688965 174.11334229]
[65.24707794 184.88415527]
[54.80726242 195.65496826]
[44.36745071 206.42578125]
[33.92763901 217.19657898]
[34.42480850 232.99305725]
[23.54581833 244.45704651]
[7.74497795 244.78717041]
[-3.60335350 233.78758240]
[-3.76641202 217.98414612]
[7.35254192 206.75273132]
[23.15682983 206.75677490]
[33.59664154 195.98596191]
[44.03645706 185.21514893]
[54.47626877 174.44435120]
[64.91607666 163.67353821]
[75.35589600 152.90272522]
[56.52754211 135.18553162]
[47.86684418 111.98760223]
[50.26623917 88.43881989]
[62.27617264 69.31765747]
[80.59465027 58.08153152]
[76.58690643 43.62684250]
[65.44372559 32.39563751]
[69.49922943 18.06377983]
[65.49149323 3.60909224]
[61.48375320 -10.84559631]
[53.62827301 -4.28364038]
[42.49377823 -1.09264910]
[29.39604568 -2.42799211]
[15.27124310 -7.47674847]
[1.14643967 -12.52550507]
[-14.45279121 -9.88456249]
[-23.83322144 -21.45421219]
[-40.78329468 -21.09184837]
[-45.82374573 -37.27919769]
[-31.66434097 -46.60376740]
[-18.78446579 -35.57901382]
[-4.19553518 -38.58107758]
[6.19519615 -26.65030861]
[20.31999969 -21.60155106]
[34.44480133 -16.55279541]
[40.87400436 -20.41483688]
[29.55451393 -30.25704956]
[35.41712189 -44.06392670]
[50.35988235 -42.75479126]
[53.73240662 -28.13892174]
[60.16160583 -32.00096512]
[62.33844376 -46.84217072]
[64.51528168 -61.68337631]
[66.38289642 -76.56665802]
[67.94047546 -91.48556519]
[69.49805450 -106.40447998]
[71.05563354 -121.32339478]
[72.61322021 -136.24230957]
[73.70452881 -151.20256042]
[74.32850647 -166.18957520]
[74.95248413 -181.17658997]
[75.57646179 -196.16360474]
[61.77207947 -202.52815247]
[51.45777512 -213.69433594]
[46.20640182 -227.95938110]
[46.81875992 -243.14797974]
[53.20146561 -256.94396973]
[64.38120270 -267.24359131]
[78.65314484 -272.47616577]
[93.84091949 -271.84384155]
[107.62850952 -265.44299316]
[117.91339874 -254.24972534]
[123.12722778 -239.97090149]
[122.47490692 -224.78398132]
[116.05593109 -211.00482178]
[104.84913635 -200.73466492]
[90.56347656 -195.53962708]
[89.93949890 -180.55261230]
[89.31552124 -165.56559753]
[88.69154358 -150.57858276]
[90.85610962 -147.71813965]
[91.70687103 -143.64654541]
[90.68065643 -139.00981140]
[87.53212738 -134.68472290]
[85.97454834 -119.76580811]
[84.41696930 -104.84690094]
[82.85939026 -89.92798615]
[81.30180359 -75.00907135]
[83.60309601 -70.75706482]
[83.21226501 -65.00566864]
[79.35648346 -59.50653839]
[77.17964935 -44.66533279]
[75.00281525 -29.82412720]
[75.93843842 -14.85333633]
[79.94618225 -0.39864799]
[83.95391846 14.05604076]
[94.81044769 24.25335121]
[91.04159546 39.61910248]
[95.04933167 54.07379150]
[106.12702942 52.98842621]
[117.42882538 54.60474014]
[128.28979492 58.96334839]
[138.03987122 65.94010925]
[146.04473877 75.24642181]
[151.74636841 86.43967438]
[154.70033264 98.94362640]
[154.60769653 112.07790375]
[151.33923340 125.09494781]
[144.95008850 137.22256470]
[158.96681213 142.56408691]
[172.98352051 147.90559387]
[187.00022888 153.24711609]
[202.16950989 148.02479553]
[215.63255310 156.74983215]
[217.06166077 172.72909546]
[205.36054993 183.70468140]
[189.50531006 181.25706482]
[181.65872192 167.26382446]
[167.64201355 161.92230225]
[153.62528992 156.58079529]
[139.60858154 151.23928833]
[133.47740173 155.55883789]
[143.21736145 166.96643066]
[152.95732117 178.37402344]
[162.69729614 189.78160095]
[174.70504761 198.77125549]
[174.48855591 213.76969910]
[162.22631836 222.40901184]
[148.02996826 217.56509399]
[143.60607910 203.23179626]
[136.14239502 190.22052002]
[128.67871094 177.20924377]
[121.21502686 164.19795227]
[115.08384705 168.51751709]
[115.39590454 183.51426697]
[115.70795441 198.51101685]
[116.02001190 213.50778198]
[116.33206940 228.50453186]
[116.64412689 243.50128174]
[116.95618439 258.49804688]
[117.26824188 273.49478149]
[117.58029175 288.49154663]
[120.17129517 307.69927979]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 27]
[11 26]
[12 25]
[13 24]
[14 23]
[15 22]
[32 106]
[33 105]
[35 103]
[36 102]
[37 101]
[40 52]
[41 51]
[42 50]
[44 48]
[58 100]
[59 99]
[60 98]
[61 95]
[62 94]
[63 93]
[64 92]
[65 91]
[66 87]
[67 86]
[68 85]
[69 84]
[116 128]
[117 127]
[118 126]
[119 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
