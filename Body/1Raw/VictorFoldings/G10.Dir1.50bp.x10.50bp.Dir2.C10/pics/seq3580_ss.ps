%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACCCCCCUCCCCAUACCCAACCCCCUGGUCAACCUCAACCUAGGCCUCCUAUUUAUUCUAGCCACxxxxxxxxxxCACCAGACCUCCUAGGCGACCCAGACAAUUAUACCCUAGCCAACCCCUUAAACACCCCUCCCCACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[99.97933960 121.28781128]
[93.28565216 134.71147156]
[86.59196472 148.13511658]
[79.89827728 161.55877686]
[73.20458984 174.98243713]
[66.51091003 188.40609741]
[59.81722260 201.82975769]
[53.12353516 215.25340271]
[46.42984772 228.67706299]
[39.73616409 242.10072327]
[38.07895279 258.97348022]
[21.40682411 262.05187988]
[13.83342838 246.88348389]
[26.31250572 235.40702820]
[33.00619125 221.98338318]
[39.69987869 208.55972290]
[46.39356232 195.13606262]
[53.08724976 181.71240234]
[59.78093719 168.28875732]
[66.47462463 154.86509705]
[73.16830444 141.44143677]
[79.86199188 128.01777649]
[86.55567932 114.59412384]
[74.24577332 123.16536713]
[64.30468750 134.39811707]
[50.39766312 140.01904297]
[35.44341278 138.84843445]
[22.58041954 131.13200378]
[14.50828362 118.48918915]
[12.92112446 103.57339478]
[18.15204430 89.51503754]
[29.10321617 79.26457977]
[43.47628403 74.97332001]
[58.25473022 77.54187775]
[70.33715057 86.43139648]
[84.17504120 92.22042084]
[74.80655670 80.50583649]
[65.43807220 68.79124451]
[56.06958771 57.07666397]
[46.70110703 45.36207581]
[33.23780060 52.09395599]
[18.67466927 55.87786865]
[3.64889097 56.55077744]
[-11.18263912 54.08569336]
[-25.17202377 48.59276962]
[-37.70866776 40.31436920]
[-48.24592209 29.61437416]
[-56.32493210 16.96219635]
[-61.59460831 2.91217947]
[-63.82688522 -11.92068672]
[-62.92659760 -26.88768578]
[-58.93552017 -41.33474350]
[-52.03045273 -54.63101959]
[-42.51537704 -66.19644928]
[-51.88385773 -77.91103363]
[-61.25234222 -89.62561798]
[-75.72087860 -85.04021454]
[-90.86857605 -85.99499512]
[-104.64684296 -92.36083221]
[-115.19226837 -103.27680206]
[-121.07868195 -117.26660156]
[-121.50999451 -132.43823242]
[-116.42786407 -146.73985291]
[-106.51961517 -158.23728943]
[-93.12525177 -165.37561035]
[-78.05625916 -167.18940735]
[-63.35058975 -163.43338013]
[-50.99706268 -154.61550903]
[-42.66639709 -141.92832947]
[-39.48524094 -127.08769226]
[-41.88382339 -112.10065460]
[-49.53775787 -98.99410248]
[-40.16927338 -87.27951813]
[-30.80079079 -75.56492615]
[-17.42653656 -82.30474091]
[-2.93754745 -86.11789703]
[12.03347301 -86.83535767]
[26.83224869 -84.42333984]
[40.81152344 -78.98487854]
[53.35936737 -70.75541687]
[63.92597961 -60.09264374]
[72.04775238 -47.46092224]
[77.36763763 -33.41107559]
[79.65081787 -18.55637360]
[78.79509735 -3.54575467]
[74.83544922 10.96451664]
[67.94260406 24.33954811]
[58.41569138 35.99359131]
[67.78417206 47.70817947]
[77.15265656 59.42276382]
[86.52114105 71.13735199]
[95.88962555 82.85193634]
[91.96623993 68.37412262]
[100.00898743 55.71260071]
[114.78160095 53.11070633]
[126.66630554 62.26242065]
[127.92550659 77.20947266]
[117.73979950 88.22034454]
[131.47027588 82.18097687]
[145.20075989 76.14161682]
[158.93124390 70.10225677]
[172.66172791 64.06288910]
[171.12994385 49.01268387]
[174.32588196 34.22616196]
[181.93644714 21.15196991]
[193.21601868 11.07097530]
[207.05953979 4.97081518]
[222.11077881 3.44912028]
[236.89515686 6.65497065]
[249.96424866 14.27429008]
[260.03768921 25.56061363]
[266.12857056 39.40822601]
[267.64016724 54.46047592]
[264.42440796 69.24269867]
[256.79632568 82.30667877]
[245.50326538 92.37255096]
[231.65158081 98.45415497]
[216.59831238 99.95567322]
[201.81825256 96.73001099]
[188.75938416 89.09318542]
[178.70108032 77.79337311]
[164.97061157 83.83273315]
[151.24012756 89.87210083]
[137.50964355 95.91146088]
[123.77916718 101.95082092]
[138.72421265 103.23352814]
[153.66928101 104.51622772]
[168.12925720 100.52762604]
[183.03649902 98.86200714]
[198.02020264 99.56080627]
[212.70771790 102.60662842]
[226.73370361 107.92372894]
[239.74931335 115.37985992]
[251.43081665 124.78955841]
[261.48767090 135.91879272]
[269.66973877 148.49073792]
[275.77346802 162.19271851]
[279.64712524 176.68392944]
[281.19427490 191.60391235]
[280.37652588 206.58160400]
[277.21414185 221.24446106]
[271.78579712 235.22778320]
[264.22653198 248.18377686]
[254.72436523 259.79016113]
[243.51560974 269.75833130]
[230.87907410 277.84027100]
[217.12905884 283.83499146]
[202.60754395 287.59341431]
[187.67573547 289.02206421]
[172.70500183 288.08535767]
[158.06773376 284.80661011]
[144.12796021 279.26742554]
[131.23242188 271.60549927]
[119.70185089 262.01144409]
[109.82303619 250.72386169]
[101.84170532 238.02354431]
[95.95635986 224.22633362]
[92.31338501 209.67543030]
[91.00339508 194.73275757]
[92.05895996 179.76994324]
[95.45384216 165.15916443]
[101.10210419 151.26678467]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 23]
[2 22]
[3 21]
[4 20]
[5 19]
[6 18]
[7 17]
[8 16]
[9 15]
[10 14]
[36 92]
[37 91]
[38 90]
[39 89]
[40 88]
[54 74]
[55 73]
[56 72]
[98 125]
[99 124]
[100 123]
[101 122]
[102 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
