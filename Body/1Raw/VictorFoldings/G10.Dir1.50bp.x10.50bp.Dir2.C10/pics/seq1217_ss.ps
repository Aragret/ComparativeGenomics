%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACCCCCUCCCCAAUAAAGCUAAAACUCACCUGAGUUGUAAAAAACUCCAGUUGACACAAxxxxxxxxxxGAGAAUCGAACCCAUCCCUGAGAAUCCAAAAUUCUCCGUGCCACCUAUCACACCCCAUCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[13.56506634 282.91513062]
[6.65806818 296.23028564]
[-0.24893045 309.54544067]
[-7.15592909 322.86059570]
[-13.92404366 336.24688721]
[-20.55254173 349.70285034]
[-27.18104172 363.15881348]
[-33.80953979 376.61477661]
[-40.43803787 390.07073975]
[-42.01339340 406.95135498]
[-58.67039490 410.11056519]
[-66.31726837 394.97909546]
[-53.89400482 383.44226074]
[-47.26550674 369.98629761]
[-40.63700485 356.53033447]
[-34.00850677 343.07437134]
[-27.38000870 329.61837769]
[-27.24470520 322.18014526]
[-20.47108459 315.95361328]
[-13.56408596 302.63845825]
[-6.65708780 289.32330322]
[0.24991098 276.00814819]
[-17.58677292 264.62774658]
[-34.13735199 251.44674683]
[-49.22080231 236.60928345]
[-62.67214966 220.27766418]
[-74.34426880 202.63050842]
[-84.10949707 183.86082458]
[-91.86102295 164.17391968]
[-97.51407623 143.78511047]
[-101.00681305 122.91740417]
[-102.30103302 101.79903412]
[-101.38259125 80.66098785]
[-98.26152039 59.73446274]
[-92.97196960 39.24834061]
[-85.57178497 19.42669106]
[-76.14190674 0.48631209]
[-88.91926575 -7.37111378]
[-101.69662476 -15.22853947]
[-117.50495148 -15.86664486]
[-124.29332733 -29.12436676]
[-137.07069397 -36.98179245]
[-149.84803772 -44.83921814]
[-162.70645142 -52.56330490]
[-175.64450073 -60.15321350]
[-188.58256531 -67.74311829]
[-201.52061462 -75.33303070]
[-216.74926758 -71.10650635]
[-230.46484375 -78.95880890]
[-234.53012085 -94.23130798]
[-226.53324890 -107.86309052]
[-211.21862793 -111.76667023]
[-197.67214966 -103.62612152]
[-193.93070984 -88.27108765]
[-180.99264526 -80.68117523]
[-168.05459595 -73.09127045]
[-155.11654663 -65.50135803]
[-147.70785522 -64.82524872]
[-141.99061584 -57.61657715]
[-129.21325684 -49.75915146]
[-116.43590546 -41.90172577]
[-101.54149628 -41.82563400]
[-93.83919525 -28.00589752]
[-81.06183624 -20.14847183]
[-68.28447723 -12.29104519]
[-60.55574799 -23.08857536]
[-52.13534927 -33.35584641]
[-43.05955505 -43.04862213]
[-33.36746979 -52.12515640]
[-23.10084343 -60.54634094]
[-12.30390453 -68.27590179]
[-1.02316606 -75.28053284]
[10.69277573 -81.53006744]
[22.79344940 -86.99757385]
[35.22672653 -91.65950775]
[47.93904114 -95.49578857]
[60.87563324 -98.48986816]
[73.98076630 -100.62887573]
[87.19799805 -101.90357971]
[100.47037506 -102.30848694]
[113.74073029 -101.84186554]
[126.95188141 -100.50571442]
[140.04693604 -98.30579376]
[152.96946716 -95.25158691]
[165.66380310 -91.35623932]
[178.07527161 -86.63654327]
[190.15037537 -81.11282349]
[201.83714294 -74.80887604]
[213.08518982 -67.75186157]
[223.84606934 -59.97217941]
[234.07342529 -51.50334549]
[243.72319031 -42.38184357]
[252.75381470 -32.64696503]
[261.12637329 -22.34065056]
[268.80480957 -11.50729942]
[275.75607300 -0.19357929]
[281.95013428 11.55177021]
[287.36041260 23.67815018]
[291.96353149 36.13331985]
[295.73965454 48.86362839]
[310.38317871 45.61280060]
[325.02667236 42.36197662]
[339.67016602 39.11114883]
[354.31365967 35.86032486]
[368.95718384 32.60949707]
[378.75143433 19.90311432]
[394.79403687 19.78234673]
[404.77847290 32.33983994]
[401.04553223 47.94255447]
[386.45880127 54.62142944]
[372.20800781 47.25299835]
[357.56448364 50.50382614]
[342.92098999 53.75465012]
[328.27749634 57.00547791]
[313.63400269 60.25630188]
[298.99047852 63.50712967]
[300.84344482 75.69256592]
[301.95092773 87.96823120]
[302.30883789 100.28855133]
[301.91580200 112.60780334]
[300.77328491 124.88026428]
[298.88558960 137.06036377]
[296.25964355 149.10290527]
[292.90524292 160.96319580]
[288.83483887 172.59719849]
[284.06350708 183.96174622]
[278.60897827 195.01464844]
[272.49148560 205.71487427]
[265.73376465 216.02270508]
[258.36087036 225.89990234]
[250.40016174 235.30978394]
[241.88122559 244.21742249]
[232.83564758 252.58976746]
[223.29702759 260.39572144]
[213.30075073 267.60632324]
[202.88394165 274.19482422]
[192.08523560 280.13677979]
[180.94473267 285.41006470]
[169.50379944 289.99517822]
[157.80487061 293.87506104]
[145.89138794 297.03533936]
[133.80755615 299.46426392]
[121.59825134 301.15283203]
[109.30877686 302.09475708]
[96.98474884 302.28656006]
[84.67191315 301.72753906]
[72.41596985 300.41973877]
[60.26241684 298.36801147]
[48.25635910 295.58001709]
[36.44235992 292.06607056]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 22]
[2 21]
[3 20]
[4 19]
[5 17]
[6 16]
[7 15]
[8 14]
[9 13]
[37 65]
[38 64]
[39 63]
[41 61]
[42 60]
[43 59]
[44 57]
[45 56]
[46 55]
[47 54]
[100 116]
[101 115]
[102 114]
[103 113]
[104 112]
[105 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
