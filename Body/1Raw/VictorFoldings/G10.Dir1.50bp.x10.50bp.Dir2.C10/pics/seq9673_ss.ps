%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUACUAGUCUUUGCCGCCUGCGAAGCAGCGGUGGGCCUAGCCCUACUAGUCUCAAUCUCCxxxxxxxxxxAACGCCACUUAUCCAGUGAACCACUAUCACGAAAAAAACUCUACCUCUCUAUACUAAUCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[81.03782654 236.26853943]
[80.41384888 221.28152466]
[79.78987122 206.29449463]
[79.16589355 191.30747986]
[78.54191589 176.32046509]
[77.91793823 161.33345032]
[77.29396820 146.34643555]
[76.66999054 131.35942078]
[69.21508026 118.34310913]
[56.60395050 110.22157288]
[43.99282074 102.10002899]
[31.38169289 93.97848511]
[16.88609505 90.12132263]
[1.90638137 90.90116882]
[-13.07333279 91.68101501]
[-28.05304718 92.46086121]
[-43.03276062 93.24070740]
[-58.01247406 94.02055359]
[-61.90315247 104.52322388]
[-70.47167969 112.70994568]
[-82.37798309 116.52318573]
[-95.39912415 114.66054535]
[-106.84339142 106.93863678]
[-121.48689270 110.18946838]
[-136.13038635 113.44029236]
[-150.77389526 116.69111633]
[-165.41738892 119.94194031]
[-173.17636108 124.88666534]
[-180.39926147 123.10472870]
[-195.10722351 126.05020905]
[-209.81518555 128.99569702]
[-224.15864563 138.03457642]
[-236.81495667 126.75386810]
[-229.47871399 111.46936798]
[-212.76066589 114.28772736]
[-198.05270386 111.34224701]
[-183.34474182 108.39676666]
[-168.66822815 105.29843903]
[-154.02471924 102.04761505]
[-139.38122559 98.79679108]
[-124.73771667 95.54596710]
[-110.09421539 92.29513550]
[-108.53663635 77.37622833]
[-122.19287872 71.17082214]
[-135.84912109 64.96541595]
[-149.50535583 58.76000595]
[-166.42689514 57.71213913]
[-170.10432434 41.16182709]
[-155.21882629 33.04652786]
[-143.29995728 45.10376358]
[-129.64370728 51.30916977]
[-115.98747253 57.51457977]
[-102.33123016 63.71998596]
[-74.70570374 60.52177429]
[-58.79232025 79.04084015]
[-43.81260681 78.26099396]
[-28.83289146 77.48114777]
[-13.85317802 76.70130157]
[1.12653625 75.92145538]
[16.10625076 75.14160919]
[3.03145838 67.78975677]
[-8.39404583 58.07081223]
[-17.74760818 46.34430695]
[-24.68321800 33.04403305]
[-28.94431496 18.66199493]
[-30.37327003 3.73021317]
[-28.91722107 -11.19895077]
[-24.63003349 -25.57323456]
[-17.67029953 -38.86090088]
[-8.29547310 -50.57041168]
[3.14764881 -60.26860428]
[16.23575974 -67.59672546]
[30.48470497 -72.28368378]
[45.36737823 -74.15610504]
[60.33324432 -73.14472961]
[74.82868195 -69.28695679]
[88.31746674 -62.72550201]
[100.30062103 -53.70308685]
[110.33486176 -42.55347061]
[118.04901123 -29.68910217]
[123.15768433 -15.58586216]
[125.47192383 -0.76546031]
[124.90610504 14.22386456]
[121.48116302 28.82762337]
[115.32379150 42.50559235]
[106.66177368 54.75179291]
[95.81552887 65.11320496]
[83.18628693 73.20655060]
[69.24122620 78.73242950]
[54.49620819 81.48642731]
[39.50323486 81.36735535]
[52.11436081 89.48889923]
[64.72549438 97.61044312]
[77.33661652 105.73198700]
[81.33055878 78.80204773]
[112.11145020 69.17684174]
[125.76769257 62.97143173]
[139.42393494 56.76602554]
[153.08016968 50.56061935]
[157.10110474 35.44882965]
[169.92463684 26.49947548]
[185.49589539 27.93816566]
[196.46261597 39.08559418]
[197.64663696 54.67828751]
[188.48890686 67.35385132]
[173.31341553 71.12727356]
[159.28558350 64.21685791]
[145.62934875 70.42226410]
[131.97309875 76.62767029]
[118.31685638 82.83308411]
[119.40817261 97.79332733]
[133.82038879 101.95121765]
[142.98808289 89.85502625]
[155.90840149 81.89073944]
[170.83396912 79.13547516]
[185.74626160 81.96184540]
[198.62846375 89.98761749]
[207.73840332 102.12736511]
[211.84402466 116.73928833]
[210.39006042 131.84724426]
[203.57316589 145.40802002]
[192.31526184 155.58760071]
[178.13888550 161.00930786]
[162.96128845 160.93989563]
[148.83509827 155.38874817]
[137.67077637 145.10661316]
[130.97821045 131.48405457]
[129.66250610 116.36343384]
[115.25028229 112.20554352]
[109.35196686 116.83802032]
[120.00647736 127.39649200]
[130.66098022 137.95497131]
[144.48886108 143.76789856]
[149.51506042 157.90072632]
[142.46275330 171.13949585]
[127.92971039 174.85308838]
[115.39085388 166.62039185]
[113.02082062 151.80935669]
[105.28807068 138.95616150]
[97.55532074 126.10296631]
[91.65700531 130.73544312]
[92.28098297 145.72245789]
[92.90496063 160.70947266]
[93.52893829 175.69648743]
[94.15291595 190.68350220]
[94.77689362 205.67053223]
[95.40087128 220.65754700]
[96.02484131 235.64456177]
[102.72483826 251.21846008]
[89.61430359 261.96789551]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 148]
[2 147]
[3 146]
[4 145]
[5 144]
[6 143]
[7 142]
[8 141]
[9 94]
[10 93]
[11 92]
[12 91]
[13 60]
[14 59]
[15 58]
[16 57]
[17 56]
[18 55]
[23 42]
[24 41]
[25 40]
[26 39]
[27 38]
[29 37]
[30 36]
[31 35]
[43 53]
[44 52]
[45 51]
[46 50]
[96 110]
[97 109]
[98 108]
[99 107]
[111 129]
[112 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
