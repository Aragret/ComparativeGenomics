%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAACAUCUCAGACGCUCAGGAAAUAGAAACCGUCUGAACUAUCCUGCCCGCCAUCAUCCUxxxxxxxxxxAAUCAUAUUUACCAAAUGCCCCUCAUUUACAUAAAUAUUAUACUAGCAUUUACCAUCUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[128.21731567 100.25258636]
[113.72171021 104.10974121]
[103.68331909 113.84227753]
[90.13544464 110.38585663]
[75.63984680 114.24301147]
[61.14425278 118.10017395]
[49.79773712 129.12593079]
[35.50884247 124.92154694]
[21.01324844 128.77870178]
[6.51765108 132.63586426]
[4.95937395 145.82719421]
[-0.99266714 157.66621399]
[-10.60430717 166.74130249]
[-22.70652008 171.97875977]
[-35.83757782 172.76986694]
[-48.41960144 169.04142761]
[-58.94815063 161.26208496]
[-66.17211914 150.38345337]
[-80.81562042 153.63427734]
[-95.45912170 156.88510132]
[-110.10263062 160.13592529]
[-124.74613190 163.38676453]
[-139.38963318 166.63758850]
[-154.03312683 169.88841248]
[-155.98272705 184.92086792]
[-162.95890808 198.37854004]
[-174.11927795 208.63632202]
[-188.11613464 214.45555115]
[-203.25932312 215.13352966]
[-217.72021484 210.58837891]
[-229.75259399 201.36895752]
[-237.90348816 188.58856201]
[-241.18862915 173.79046631]
[-239.21133423 158.76161194]
[-232.21037292 145.31683350]
[-221.03112793 135.07963562]
[-207.02354431 129.28620911]
[-191.87913513 128.63613892]
[-177.42665100 133.20791626]
[-165.41128540 142.44950867]
[-157.28395081 155.24490356]
[-142.64045715 151.99407959]
[-127.99695587 148.74325562]
[-113.35345459 145.49243164]
[-98.70995331 142.24160767]
[-84.06645203 138.99078369]
[-69.42295074 135.73995972]
[-66.07350159 119.23547363]
[-55.83885956 105.79200745]
[-40.72289658 98.12084961]
[-23.71985817 97.79532623]
[-8.22128296 104.92833710]
[2.66049147 118.14026642]
[17.15608788 114.28311157]
[31.65168381 110.42594910]
[41.96137619 99.67608643]
[57.28709412 103.60457611]
[71.78269196 99.74741364]
[86.27828979 95.89025879]
[96.31668091 86.15772247]
[109.86455536 89.61414337]
[124.36015320 85.75698853]
[121.91726685 68.98382568]
[121.53290558 52.03913498]
[123.21251678 35.17459106]
[126.93088531 18.64064598]
[132.63253784 2.68281412]
[140.23254395 -12.46198177]
[149.61778259 -26.56892204]
[160.64865112 -39.42862701]
[173.16111755 -50.85027313]
[186.96917725 -60.66440964]
[201.86756897 -68.72548676]
[217.63491821 -74.91400909]
[234.03692627 -79.13830566]
[250.82992554 -81.33588409]
[267.76446533 -81.47436523]
[284.58905029 -79.55194855]
[301.05377197 -75.59745789]
[316.91418457 -69.66987610]
[331.93481445 -61.85747528]
[345.89266968 -52.27653503]
[358.58059692 -41.06956100]
[369.81036377 -28.40320396]
[379.41531372 -14.46576023]
[392.65789795 -21.51089478]
[405.90048218 -28.55603027]
[419.14306641 -35.60116577]
[432.38565063 -42.64630127]
[445.62823486 -49.69143295]
[458.87081909 -56.73656845]
[463.64837646 -73.53276825]
[478.78240967 -81.54812622]
[494.72109985 -76.27403259]
[507.81423950 -83.59313965]
[520.90740967 -90.91224670]
[534.00054932 -98.23135376]
[547.09368896 -105.55045319]
[552.82647705 -120.53427124]
[568.15869141 -125.25694275]
[581.32873535 -116.09564209]
[582.23370361 -100.07813263]
[570.17938232 -89.49167633]
[554.41284180 -92.45729828]
[541.31964111 -85.13819885]
[528.22650146 -77.81909180]
[515.13336182 -70.49998474]
[502.04019165 -63.18087769]
[500.28826904 -50.37746048]
[491.33364868 -40.79158020]
[478.29718018 -38.09371948]
[465.91595459 -43.49398422]
[452.67337036 -36.44884872]
[439.43078613 -29.40371513]
[426.18820190 -22.35857964]
[412.94561768 -15.31344414]
[399.70303345 -8.26830959]
[386.46044922 -1.22317469]
[391.49279785 11.11168861]
[395.32037354 23.87249374]
[397.90786743 36.94187164]
[399.23135376 50.19959641]
[399.27859497 63.52370834]
[398.04898071 76.79161835]
[395.55374146 89.88124847]
[391.81573486 102.67214966]
[386.86926270 115.04660797]
[380.75970459 126.89073944]
[373.54315186 138.09552002]
[365.28594971 148.55781555]
[356.06399536 158.18127441]
[345.96200562 166.87730408]
[335.07287598 174.56579590]
[323.49670410 181.17594910]
[311.33996582 186.64685059]
[298.71447754 190.92803955]
[285.73632812 193.98004150]
[272.52490234 195.77468872]
[259.20172119 196.29533386]
[245.88940430 195.53707886]
[232.71040344 193.50680542]
[219.78599548 190.22306824]
[207.23510742 185.71600342]
[195.17324829 180.02693176]
[183.71144104 173.20812988]
[172.95520020 165.32221985]
[163.00355530 156.44168091]
[153.94812012 146.64811707]
[145.87229919 136.03157043]
[138.85046387 124.68965912]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 62]
[2 61]
[4 59]
[5 58]
[6 57]
[8 55]
[9 54]
[10 53]
[18 47]
[19 46]
[20 45]
[21 44]
[22 43]
[23 42]
[24 41]
[85 118]
[86 117]
[87 116]
[88 115]
[89 114]
[90 113]
[91 112]
[94 108]
[95 107]
[96 106]
[97 105]
[98 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
