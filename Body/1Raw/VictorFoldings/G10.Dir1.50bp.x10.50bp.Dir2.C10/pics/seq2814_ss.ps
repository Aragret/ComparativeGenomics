%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACGAGAAGACCCUAUGGAGCUUUAAUUUAUUAAUGCAAACAGUACCUAACAAACCCACAGxxxxxxxxxxCAAUGGGGCUCACUCACCCACCACAUUAACAACAUAAAACCCUCAUUCACACGAGAAAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[112.81962585 340.78247070]
[112.81962585 325.78247070]
[112.81962585 310.78247070]
[112.81962585 295.78247070]
[112.81962585 280.78247070]
[112.81962585 265.78247070]
[112.81962585 250.78248596]
[112.81962585 235.78248596]
[112.81962585 220.78248596]
[112.81962585 205.78248596]
[110.64279175 190.94126892]
[99.57646942 180.97203064]
[103.02484131 165.53118896]
[98.71725464 151.16300964]
[94.40967560 136.79483032]
[80.33815002 131.59941101]
[67.72702789 139.72094727]
[55.11589813 147.84249878]
[47.11375427 164.39379883]
[29.59398651 164.63388062]
[17.15454674 173.01603699]
[10.44895172 187.98155212]
[-5.88979864 189.38771057]
[-15.05379868 175.78796387]
[-7.61591101 161.17257690]
[8.77240276 160.57658386]
[21.21184349 152.19444275]
[23.85234642 140.34814453]
[34.20322800 133.27154541]
[46.99435425 135.23136902]
[59.60548401 127.10982513]
[72.21661377 118.98828125]
[68.09782410 103.54164124]
[71.61666107 88.71597290]
[81.24804688 77.89144897]
[94.16075134 73.19257355]
[95.09637451 58.22178268]
[96.03200531 43.25099182]
[96.96763611 28.28019905]
[97.12367249 13.28101063]
[96.49969482 -1.70600498]
[95.87571716 -16.69302177]
[95.25173950 -31.68003654]
[94.62776184 -46.66705322]
[94.00378418 -61.65406799]
[79.77747345 -66.93496704]
[68.68672943 -77.23246002]
[62.40040970 -90.95455170]
[61.84813690 -105.99724579]
[67.08295441 -120.06712341]
[77.27797699 -131.03102112]
[90.85682678 -137.23941040]
[90.23284912 -152.22642517]
[76.78771210 -155.46427917]
[64.65981293 -162.08361816]
[54.68183899 -171.62237549]
[47.53687286 -183.41831970]
[43.71166611 -196.65499878]
[43.46344757 -210.41825867]
[46.80266953 -223.75941467]
[53.49272156 -235.76058960]
[63.06669235 -245.59788513]
[74.85996246 -252.59796143]
[88.05631256 -256.28405762]
[88.05631256 -271.28405762]
[88.05631256 -286.28405762]
[88.05631256 -301.28405762]
[73.80364227 -306.44519043]
[62.17771149 -316.17214966]
[54.58240891 -329.29034424]
[51.93490601 -344.21569824]
[54.55490112 -359.14593506]
[62.12601471 -372.27810669]
[73.73400116 -382.02645874]
[87.97713470 -387.21383667]
[103.13549042 -387.21383667]
[117.37862396 -382.02645874]
[128.98660278 -372.27810669]
[136.55772400 -359.14593506]
[139.17771912 -344.21569824]
[136.53021240 -329.29034424]
[128.93490601 -316.17214966]
[117.30898285 -306.44519043]
[103.05631256 -301.28405762]
[103.05631256 -286.28405762]
[103.05631256 -271.28405762]
[103.05631256 -256.28405762]
[118.59288025 -251.53041077]
[131.93025208 -242.21916199]
[141.76959229 -229.24316406]
[147.14842224 -213.85284424]
[147.53475952 -197.53569031]
[142.87980652 -181.87248230]
[133.62362671 -168.38415527]
[120.65373230 -158.38414001]
[105.21986389 -152.85040283]
[105.84384155 -137.86338806]
[119.89176941 -132.80522156]
[130.96287537 -122.72673798]
[137.34913635 -109.14069366]
[138.04919434 -94.10415649]
[132.92527771 -79.90699768]
[122.72889709 -68.72322845]
[108.99079895 -62.27804565]
[109.61477661 -47.29103088]
[110.23875427 -32.30401611]
[110.86273193 -17.31699944]
[111.48670959 -2.32998252]
[112.11068726 12.65703392]
[124.25545502 3.85336542]
[138.76606750 7.65364790]
[145.03643799 21.28018188]
[138.48342896 34.77307510]
[123.89677429 38.27011108]
[111.93842316 29.21582794]
[111.00279999 44.18661880]
[110.06716919 59.15740967]
[109.13153839 74.12820435]
[123.97726440 83.70538330]
[130.52239990 101.15140533]
[125.11323547 119.99044037]
[108.77785492 132.48724365]
[113.08544159 146.85542297]
[117.39302826 161.22360229]
[128.76745605 172.22056580]
[125.01097107 186.63368225]
[129.39997864 172.29016113]
[138.86122131 160.65037537]
[152.00546265 153.42343140]
[166.90269470 151.67051697]
[181.36546326 155.64900208]
[193.27012634 164.77471924]
[200.86868286 177.70770264]
[203.04539490 192.54891968]
[199.48065186 207.11918640]
[190.69786072 219.27906799]
[177.98666382 227.24307251]
[163.21348572 229.84181213]
[148.54756165 226.69367981]
[136.14234924 218.26097107]
[127.81962585 205.78248596]
[127.81962585 220.78248596]
[127.81962585 235.78248596]
[127.81962585 250.78248596]
[127.81962585 265.78247070]
[127.81962585 280.78247070]
[127.81962585 295.78247070]
[127.81962585 310.78247070]
[127.81962585 325.78247070]
[127.81962585 340.78247070]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 126]
[13 124]
[14 123]
[15 122]
[16 32]
[17 31]
[18 30]
[20 27]
[21 26]
[36 118]
[37 117]
[38 116]
[39 115]
[40 109]
[41 108]
[42 107]
[43 106]
[44 105]
[45 104]
[52 97]
[53 96]
[64 87]
[65 86]
[66 85]
[67 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
