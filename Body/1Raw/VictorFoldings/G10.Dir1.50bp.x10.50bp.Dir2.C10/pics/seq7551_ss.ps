%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUAACACUCACAACAAAACUAACUAAUACUAACAUCUCAGACGCUCAGGAAAUAGAAACCxxxxxxxxxxAUAGUACUUGCCGCAGUACUCUUAAAACUAGGCGGCUAUGGUAUAAUACGCCUCACACUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[104.34725189 290.76687622]
[104.34725189 275.76687622]
[104.34725189 260.76687622]
[104.34725189 245.76686096]
[104.34725189 230.76686096]
[104.34725189 215.76686096]
[104.34725189 200.76686096]
[104.34725189 185.76686096]
[104.34725189 170.76686096]
[104.34725189 155.76686096]
[101.28885651 141.08197021]
[95.30056000 127.32913208]
[83.83718872 112.00480652]
[87.55798340 98.46408081]
[74.88646698 90.43708038]
[56.50333405 90.13515472]
[48.92107773 74.33787537]
[36.08742523 66.57273865]
[23.25377083 58.80760574]
[14.29745102 70.85456085]
[4.23653889 81.99559784]
[-6.83785105 92.12982941]
[-18.82542610 101.16547394]
[-31.61762047 109.02069855]
[-45.09858322 115.62435913]
[-59.14622879 120.91665649]
[-73.63333130 124.84966278]
[-88.42870331 127.38775635]
[-103.39833069 128.50794983]
[-118.40666199 128.20010376]
[-133.31776428 126.46699524]
[-147.99661255 123.32433319]
[-162.31025696 118.80056763]
[-176.12905884 112.93667603]
[-189.32789612 105.78576660]
[-201.78721619 97.41259003]
[-213.39419556 87.89297485]
[-224.04370117 77.31314850]
[-233.63929749 65.76891327]
[-242.09407043 53.36482620]
[-249.33146667 40.21321869]
[-255.28594971 26.43319893]
[-259.90356445 12.14955997]
[-263.14251709 -2.50833726]
[-264.97348022 -17.40774727]
[-265.37982178 -32.41373444]
[-264.35791016 -47.39039612]
[-261.91699219 -62.20210266]
[-258.07916260 -76.71471405]
[-252.87921143 -90.79679871]
[-246.36418152 -104.32081604]
[-238.59309387 -117.16429901]
[-229.63633728 -129.21092224]
[-219.57501221 -140.35160828]
[-208.50025940 -150.48542786]
[-196.51235962 -159.52062988]
[-183.71987915 -167.37539673]
[-170.23866272 -173.97856140]
[-156.19082642 -179.27035522]
[-141.70358276 -183.20281982]
[-126.90812683 -185.74037170]
[-111.93845367 -186.86003113]
[-96.93013000 -186.55163574]
[-82.01908875 -184.81797791]
[-67.34036255 -181.67478943]
[-53.02688217 -177.15049744]
[-39.20828629 -171.28610229]
[-26.00971413 -164.13470459]
[-13.55069923 -155.76107788]
[-1.94407463 -146.24104309]
[8.70504570 -135.66082764]
[18.30022049 -124.11624908]
[26.75455093 -111.71185303]
[33.99147034 -98.55998230]
[39.94544220 -84.77973938]
[44.56254578 -70.49593353]
[47.80096054 -55.83791733]
[49.63136292 -40.93844223]
[50.03717422 -25.93244171]
[49.01472473 -10.95581436]
[46.57326508 3.85580420]
[42.73491287 18.36827469]
[37.53442764 32.45016861]
[31.01890564 45.97395325]
[43.85255814 53.73908615]
[56.68621445 61.50422287]
[68.54341125 58.92178345]
[79.31398010 65.33788300]
[82.91345978 77.76556396]
[95.58497620 85.79256439]
[110.55652618 86.71598053]
[124.11842346 80.30699921]
[137.68032837 73.89802551]
[151.24221802 67.48905182]
[164.80410767 61.08007431]
[178.23156738 54.39400101]
[191.51890564 47.43364334]
[204.80624390 40.47328568]
[206.06988525 25.09776306]
[215.46369934 12.86012650]
[229.99015808 7.66536379]
[245.01391602 11.17110443]
[255.74095154 22.25867844]
[258.74829102 37.39008331]
[253.07633972 51.73694229]
[240.53495789 60.72122192]
[225.12606812 61.47607422]
[211.76660156 53.76062775]
[198.47926331 60.72098541]
[185.19192505 67.68134308]
[182.92500305 71.94869232]
[177.92247009 74.80571747]
[171.21308899 74.64196777]
[157.65119934 81.05094910]
[144.08929443 87.45992279]
[130.52740479 93.86889648]
[116.96550751 100.27787781]
[131.46087646 104.13589478]
[134.40213013 118.84469604]
[122.50505829 127.98031616]
[109.05339050 121.34083557]
[115.04168701 135.09367371]
[117.02805328 120.22576904]
[123.05058289 106.48789978]
[132.63905334 94.95268250]
[145.04481506 86.52077484]
[159.29924011 81.85051727]
[174.28938293 81.30656433]
[188.84481812 84.93138123]
[201.82908630 92.44195557]
[212.22840881 103.25186920]
[219.23080444 116.51709747]
[222.28956604 131.20191956]
[221.16584778 146.15977478]
[215.94738770 160.22276306]
[207.04164124 172.29287720]
[195.14396667 181.42771912]
[181.18328857 186.91401672]
[166.24964905 188.32345581]
[151.50904846 185.54595947]
[138.11239624 178.79840088]
[127.10567474 168.60760498]
[119.34725189 155.76686096]
[119.34725189 170.76686096]
[119.34725189 185.76686096]
[119.34725189 200.76686096]
[119.34725189 215.76686096]
[119.34725189 230.76686096]
[119.34725189 245.76686096]
[119.34725189 260.76687622]
[119.34725189 275.76687622]
[119.34725189 290.76687622]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 122]
[12 121]
[14 90]
[15 89]
[17 86]
[18 85]
[19 84]
[91 117]
[92 116]
[93 115]
[94 114]
[95 113]
[96 110]
[97 109]
[98 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
