%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACCAUUUACCCAAAUAAAGUAUAGGCGAUAGAAAUUGAAACCUGGCGCAAUAGAUAUAGUxxxxxxxxxxGCAGGCCACCUACUCAUGCACCUAAUUGGAAGCGCCACCCUAGCAAUAUCAACCAUUAACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 250.06759644]
[92.50000000 235.06759644]
[92.50000000 220.06759644]
[92.50000000 205.06759644]
[92.50000000 190.06759644]
[92.50000000 175.06759644]
[92.50000000 160.06759644]
[92.50000000 145.06759644]
[92.50000000 130.06759644]
[92.50000000 115.06759644]
[85.92918396 111.45174408]
[72.78755188 104.22004700]
[66.21673584 100.60419464]
[53.54521942 108.63118744]
[41.57496262 117.67070770]
[30.38666534 127.66180420]
[19.19836998 137.65290833]
[8.01007271 147.64399719]
[3.39515638 163.38040161]
[-12.60214233 166.98852539]
[-23.52517319 154.75662231]
[-18.13726044 139.26783752]
[-1.98102427 136.45570374]
[9.20727253 126.46460724]
[20.39556885 116.47351074]
[31.58386612 106.48241425]
[16.58810806 106.12565613]
[4.57051277 97.14916992]
[-0.02672248 82.87102509]
[4.49573135 68.56901550]
[16.46618843 59.52975845]
[31.45987320 59.09453583]
[43.93450165 67.42422485]
[49.27893066 81.43981934]
[45.51822281 95.95967102]
[58.18973923 87.93267822]
[80.58837128 79.91768646]
[96.98163605 88.03066254]
[101.82145691 73.83290863]
[106.66127014 59.63515854]
[105.62493134 55.27331543]
[106.02806091 51.22843933]
[107.58514404 47.92355728]
[109.90039825 45.64127350]
[112.52481842 44.49959183]
[118.51311493 30.74676514]
[124.50141144 16.99393463]
[130.48971558 3.24110651]
[119.78190613 -8.97087288]
[115.47257233 -24.57012367]
[118.37226868 -40.43275070]
[127.85308075 -53.40488052]
[141.98376465 -60.92972946]
[157.92294312 -61.55147171]
[163.62760925 -75.42435455]
[169.33227539 -89.29723358]
[175.03694153 -103.17011261]
[180.74160767 -117.04299164]
[186.44625854 -130.91587830]
[174.47834778 -140.09216309]
[165.30072021 -152.04441833]
[159.53422546 -165.95425415]
[157.56637573 -180.87117004]
[159.52539062 -195.77754211]
[165.27174377 -209.65803528]
[174.40820312 -221.56878662]
[186.30718994 -230.70149231]
[200.15393066 -236.43841553]
[215.00224304 -238.39401245]
[229.83918762 -236.44093323]
[235.54385376 -250.31381226]
[222.44616699 -243.00280762]
[207.44639587 -243.08433533]
[194.42895508 -250.53726196]
[186.76490784 -263.43154907]
[186.43901062 -278.42800903]
[193.53562927 -291.64306641]
[206.21701050 -299.65447998]
[221.19908142 -300.38757324]
[234.60202026 -293.65249634]
[242.95491028 -281.19338989]
[244.09481812 -266.23773193]
[252.50823975 -278.65603638]
[260.92163086 -291.07437134]
[262.25646973 -306.83917236]
[275.80072021 -313.03610229]
[269.63995361 -327.17996216]
[272.12646484 -342.40560913]
[282.46685791 -353.85464478]
[297.36151123 -357.87368774]
[312.05761719 -353.18029785]
[321.86569214 -341.27209473]
[323.65603638 -325.94897461]
[316.85733032 -312.10046387]
[303.63903809 -304.14556885]
[288.21905518 -304.62271118]
[287.48602295 -289.74615479]
[273.33996582 -282.66094971]
[264.92654419 -270.24264526]
[256.51315308 -257.82434082]
[249.41673279 -244.60914612]
[243.71206665 -230.73626709]
[255.63102722 -221.68705750]
[264.80844116 -209.85185242]
[270.61395264 -196.03373718]
[272.64630127 -181.17231750]
[270.76101685 -166.27983093]
[265.08062744 -152.37219238]
[255.98680115 -140.39973450]
[244.09463501 -131.18218994]
[230.21110535 -125.35263824]
[215.28028870 -123.31401062]
[200.31915283 -125.21121216]
[194.61448669 -111.33833313]
[188.90982056 -97.46545410]
[183.20515442 -83.59256744]
[177.50048828 -69.71968842]
[171.79583740 -55.84680939]
[181.58198547 -45.96809006]
[186.86994934 -33.06056595]
[186.82734680 -19.06851768]
[181.42752075 -6.11332083]
[171.45848083 3.82820368]
[158.40821838 9.22540092]
[144.24253845 9.22940350]
[138.25424194 22.98223114]
[132.26594543 36.73506165]
[126.27764893 50.48788834]
[120.85902405 64.47497559]
[116.01921082 78.67272949]
[111.17938995 92.87047577]
[121.39756775 81.88918304]
[135.45405579 76.65323639]
[150.36628723 78.27362061]
[162.97009277 86.40652466]
[170.59114075 99.32625580]
[171.61238098 114.29145050]
[165.81709290 128.12672424]
[154.43496704 137.89642334]
[139.88111877 141.52758789]
[125.24363708 138.24972534]
[113.62839508 128.75836182]
[107.50000000 115.06759644]
[107.50000000 130.06759644]
[107.50000000 145.06759644]
[107.50000000 160.06759644]
[107.50000000 175.06759644]
[107.50000000 190.06759644]
[107.50000000 205.06759644]
[107.50000000 220.06759644]
[107.50000000 235.06759644]
[107.50000000 250.06759644]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[13 36]
[14 35]
[15 26]
[16 25]
[17 24]
[18 23]
[38 131]
[39 130]
[40 129]
[45 128]
[46 127]
[47 126]
[48 125]
[54 118]
[55 117]
[56 116]
[57 115]
[58 114]
[59 113]
[70 102]
[71 101]
[82 100]
[83 99]
[84 98]
[86 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
