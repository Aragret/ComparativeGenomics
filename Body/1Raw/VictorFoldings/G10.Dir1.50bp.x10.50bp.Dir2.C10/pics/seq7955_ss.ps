%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAGAGAACCAACACCUCUUUACAGUGAAAUGCCCCAACUAAAUACUACCGUAUGGCCCACxxxxxxxxxxACCCCCAUGCCUCAGGAUACUCCUCAAUAGCCAUCGCUGUAGUAUAUCCAAAGACAACCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[85.45290375 286.47390747]
[85.45290375 271.47390747]
[85.45290375 256.47390747]
[85.45290375 241.47390747]
[85.45290375 226.47390747]
[85.45290375 211.47390747]
[85.45290375 196.47390747]
[85.45290375 181.47390747]
[85.45290375 166.47390747]
[85.45290375 151.47390747]
[71.73284912 145.41088867]
[60.64153671 155.50953674]
[49.55022049 165.60818481]
[38.45890427 175.70683289]
[27.36758995 185.80548096]
[30.03923225 200.99975586]
[24.05105209 215.21752930]
[11.31385517 223.92198181]
[-4.10796452 224.33554077]
[-17.29336166 216.32623291]
[-24.03492165 202.44982910]
[-22.18143845 187.13420105]
[-12.32435417 175.26654053]
[2.39097524 170.63375854]
[17.26893997 174.71417236]
[28.36025429 164.61552429]
[39.45156860 154.51687622]
[50.54288483 144.41822815]
[61.63420105 134.31956482]
[57.18833160 126.46559143]
[54.27756119 118.13402557]
[52.92891312 109.61424255]
[53.11651611 101.18992615]
[38.25347137 99.16758728]
[23.39042282 97.14525604]
[14.56742191 109.65178680]
[0.93768913 116.61518860]
[-14.36676216 116.43532562]
[-27.82908058 109.15352631]
[-36.35572433 96.44309998]
[-37.98733521 81.22480774]
[-32.34897614 66.99570465]
[-20.73630524 57.02552414]
[-5.81782722 53.60535049]
[8.97830105 57.52111053]
[20.25203705 67.87299347]
[25.41275787 82.28221130]
[40.27580643 84.30454254]
[55.13885117 86.32688141]
[68.96337128 64.84029388]
[91.99936676 53.78889084]
[117.40989685 56.45264435]
[125.13398743 43.59424210]
[132.85806274 30.73583794]
[140.58215332 17.87743568]
[148.30624390 5.01903343]
[156.03031921 -7.83936882]
[163.75440979 -20.69777107]
[171.20932007 -33.71408081]
[178.39183044 -46.88266373]
[179.77030945 -55.97945404]
[185.86320496 -60.24821854]
[193.31811523 -73.26452637]
[200.77302551 -86.28083801]
[208.22793579 -99.29714966]
[215.68284607 -112.31345367]
[203.81008911 -121.52125549]
[193.33439636 -132.29187012]
[184.45970154 -144.41564941]
[177.35873413 -157.65658569]
[172.16973877 -171.75695801]
[168.99371338 -186.44229126]
[167.89247131 -201.42672729]
[168.88745117 -216.41859436]
[171.95930481 -231.12606812]
[177.04820251 -245.26287842]
[184.05511475 -258.55383301]
[192.84364319 -270.74020386]
[203.24270630 -281.58480835]
[215.04989624 -290.87655640]
[228.03538513 -298.43453979]
[241.94639587 -304.11169434]
[256.51214600 -307.79748535]
[271.44912720 -309.42016602]
[286.46655273 -308.94812012]
[301.27212524 -306.39059448]
[315.57766724 -301.79736328]
[329.10467529 -295.25781250]
[341.58987427 -286.89923096]
[352.79025269 -276.88433838]
[362.48773193 -265.40805054]
[370.49359131 -252.69380188]
[376.65200806 -238.98904419]
[380.84304810 -224.56056213]
[382.98519897 -209.68920898]
[383.03671265 -194.66444397]
[380.99661255 -179.77873230]
[376.90460205 -165.32185364]
[370.84033203 -151.57518005]
[362.92184448 -138.80633545]
[353.30328369 -127.26382446]
[342.17187500 -117.17234802]
[329.74429321 -108.72834778]
[316.26245117 -102.09617615]
[301.98873901 -97.40493011]
[287.20104980 -94.74592590]
[272.18719482 -94.17092896]
[257.23947144 -95.69113159]
[242.64877319 -99.27693939]
[228.69915771 -104.85854340]
[221.24424744 -91.84223938]
[213.78933716 -78.82592773]
[206.33442688 -65.80961609]
[198.87951660 -52.79330826]
[191.56040955 -39.70015335]
[184.37789917 -26.53157234]
[184.86433411 -21.72128105]
[182.28887939 -16.56392860]
[176.61280823 -12.97368622]
[168.88873291 -0.11528383]
[161.16464233 12.74311829]
[153.44055176 25.60152054]
[145.71647644 38.45992279]
[137.99238586 51.31832504]
[130.26829529 64.17672729]
[135.55764771 68.98313141]
[140.08448792 74.56959534]
[143.73396301 80.81524658]
[146.41036987 87.58232880]
[148.03961182 94.71923828]
[148.57124329 102.06394196]
[147.97984314 109.44760895]
[146.26600647 116.69852448]
[143.45655823 123.64608765]
[139.60423279 130.12478638]
[134.78678894 135.97819519]
[129.10539246 141.06266785]
[122.68261719 145.25091553]
[115.65967560 148.43515015]
[108.19344330 150.52983093]
[100.45290375 151.47390747]
[100.45290375 166.47390747]
[100.45290375 181.47390747]
[100.45290375 196.47390747]
[100.45290375 211.47390747]
[100.45290375 226.47390747]
[100.45290375 241.47390747]
[100.45290375 256.47390747]
[100.45290375 271.47390747]
[100.45290375 286.47390747]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 29]
[12 28]
[13 27]
[14 26]
[15 25]
[33 49]
[34 48]
[35 47]
[52 125]
[53 124]
[54 123]
[55 122]
[56 121]
[57 120]
[58 119]
[59 116]
[60 115]
[62 114]
[63 113]
[64 112]
[65 111]
[66 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
