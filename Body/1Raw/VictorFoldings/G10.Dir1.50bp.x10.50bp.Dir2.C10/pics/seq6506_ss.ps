%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUACUCCUGCUCGCAUCUGCUAUAGUGGAGGCCGGAGCAGGAACAGGUUGAACAGUCUACCCUCCxxxxxxxxxxCCUAUAUUACGGAUCAUUUCUCUACUCAGAAACCUGAAACAUCGGCAUUAUCCUCCUGCUUGCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[107.63583374 271.54895020]
[107.63583374 256.54895020]
[107.63583374 241.54895020]
[107.63583374 226.54895020]
[107.63583374 211.54895020]
[107.63583374 196.54895020]
[107.63583374 181.54895020]
[107.63583374 166.54895020]
[107.63583374 151.54895020]
[107.63583374 136.54895020]
[103.82516479 122.04106903]
[95.56484222 121.92646790]
[87.90935516 118.82170868]
[81.90268707 113.15019989]
[67.51409149 117.38911438]
[53.12549973 121.62802887]
[38.73690796 125.86694336]
[24.34831238 130.10585022]
[9.95971966 134.34477234]
[-4.42887402 138.58367920]
[-18.81746674 142.82258606]
[-33.11950302 147.34495544]
[-47.32939911 152.14900208]
[-57.92464066 163.89852905]
[-72.45954895 160.64494324]
[-86.66944122 165.44898987]
[-100.87933350 170.25303650]
[-115.08923340 175.05708313]
[-129.29913330 179.86112976]
[-139.71478271 192.52786255]
[-155.84579468 189.57444763]
[-161.09794617 174.03909302]
[-150.06828308 161.90325928]
[-134.10317993 165.65124512]
[-119.89328003 160.84719849]
[-105.68338776 156.04313660]
[-91.47348785 151.23908997]
[-77.26359558 146.43504333]
[-67.68473816 135.02914429]
[-52.13344574 137.93910217]
[-37.92354965 133.13505554]
[-35.02208328 129.28073120]
[-29.64655113 127.23913574]
[-23.05637932 128.43400574]
[-8.66778660 124.19508362]
[5.72080708 119.95617676]
[20.10939980 115.71726227]
[34.49799347 111.47834778]
[48.88658524 107.23943329]
[63.27518082 103.00052643]
[77.66377258 98.76161194]
[84.10370636 84.25997925]
[98.54100800 77.67710114]
[102.63757324 63.24732971]
[106.73413086 48.81756210]
[110.83068848 34.38779449]
[114.92724609 19.95802689]
[119.02381134 5.52825928]
[110.77758026 -25.49144363]
[111.96185303 -40.44462204]
[113.14612579 -55.39779663]
[98.50819397 -58.80198669]
[84.54115295 -64.34992218]
[71.55704498 -71.91765594]
[59.84593582 -81.33612061]
[49.66945648 -92.39491272]
[41.25494766 -104.84696960]
[34.79039764 -118.41410828]
[30.42022705 -132.79322815]
[28.24206543 -147.66311646]
[28.30457306 -162.69154358]
[30.60635757 -177.54278564]
[35.09598923 -191.88505554]
[41.67317581 -205.39794922]
[50.19097519 -217.77958679]
[60.45909882 -228.75334167]
[72.24815369 -238.07406616]
[85.29476929 -245.53352356]
[99.30747223 -250.96507263]
[113.97321320 -254.24737549]
[128.96437073 -255.30711365]
[143.94601440 -254.12057495]
[158.58346558 -250.71430969]
[172.54971313 -245.16438293]
[185.53274536 -237.59480286]
[197.24250793 -228.17466736]
[207.41741943 -217.11442566]
[215.83015442 -204.66116333]
[222.29277039 -191.09310913]
[226.66088867 -176.71336365]
[228.83694458 -161.84317017]
[228.77229309 -146.81475830]
[226.46839905 -131.96383667]
[221.97671509 -117.62220001]
[215.39759827 -104.11024475]
[206.87803650 -91.72982788]
[196.60835266 -80.75753784]
[184.81797791 -71.43849182]
[171.77029419 -63.98088837]
[157.75682068 -58.55133057]
[143.09060669 -55.27111435]
[128.09930420 -54.21352386]
[126.91503143 -39.26034927]
[125.73075867 -24.30717087]
[137.83108521 -15.44250679]
[151.73141479 -21.07991982]
[165.63175964 -26.71733475]
[175.27874756 -39.97884750]
[191.55638123 -37.98622131]
[197.71963501 -22.78930283]
[187.42828369 -10.02137661]
[171.26918030 -12.81698990]
[157.36883545 -7.17957640]
[143.46849060 -1.54216266]
[133.45358276 9.62481976]
[129.35700989 24.05458641]
[125.26045990 38.48435593]
[121.16389465 52.91412354]
[117.06733704 67.34388733]
[112.97077942 81.77365875]
[122.21351624 97.35416412]
[116.88900757 114.66976929]
[117.18784332 99.67274475]
[120.75762177 85.10371399]
[127.42568207 71.66730499]
[136.86952209 60.01338959]
[148.63238525 50.70560074]
[162.14537048 44.19411850]
[176.75489807 40.79387283]
[191.75437927 40.66931915]
[206.41836548 43.82647705]
[220.03761292 50.11265564]
[231.95343018 59.22381973]
[241.58950806 70.71929932]
[248.47978210 84.04311371]
[252.29101562 98.55085754]
[252.83885193 113.54084778]
[250.09683228 128.28810120]
[244.19754028 142.07934570]
[235.42631531 154.24755859]
[224.20738220 164.20423889]
[211.08334351 171.46781921]
[196.68894958 175.68699646]
[181.72039795 176.65769958]
[166.90162659 174.33299255]
[152.94937134 168.82528687]
[140.53845215 160.40100098]
[130.26908875 149.46754456]
[122.63583374 136.54895020]
[122.63583374 151.54895020]
[122.63583374 166.54895020]
[122.63583374 181.54895020]
[122.63583374 196.54895020]
[122.63583374 211.54895020]
[122.63583374 226.54895020]
[122.63583374 241.54895020]
[122.63583374 256.54895020]
[122.63583374 271.54895020]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 158]
[2 157]
[3 156]
[4 155]
[5 154]
[6 153]
[7 152]
[8 151]
[9 150]
[10 149]
[11 122]
[14 51]
[15 50]
[16 49]
[17 48]
[18 47]
[19 46]
[20 45]
[21 44]
[22 41]
[23 40]
[25 38]
[26 37]
[27 36]
[28 35]
[29 34]
[53 120]
[54 119]
[55 118]
[56 117]
[57 116]
[58 115]
[59 104]
[60 103]
[61 102]
[105 114]
[106 113]
[107 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
