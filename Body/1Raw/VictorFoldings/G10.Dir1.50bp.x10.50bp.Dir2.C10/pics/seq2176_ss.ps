%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGAACAGCUAAAAGAGCACACCCGUCUAUGUAGCAAAAUAGUGGGAAGAUUUAUAGGUAGxxxxxxxxxxCUUCUUACGAGCCAAAACCUGCCCCUACUCCUCCUAGACCUAACCUGACUAGAAAAGCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[149.31762695 446.17501831]
[149.31762695 431.17501831]
[149.31762695 416.17501831]
[149.31762695 401.17501831]
[149.31762695 386.17501831]
[149.31762695 371.17501831]
[149.31762695 356.17501831]
[149.31762695 341.17501831]
[149.31762695 326.17501831]
[149.31762695 311.17501831]
[147.76004028 296.25610352]
[144.66172791 281.57955933]
[134.67353821 274.68438721]
[132.00106812 262.43380737]
[138.62011719 251.31436157]
[135.82778931 236.57655334]
[133.03546143 221.83874512]
[129.17829895 207.34315491]
[124.27675629 193.16659546]
[119.37520599 178.99003601]
[105.90915680 172.72894287]
[100.73633575 158.42172241]
[107.39485168 144.33975220]
[102.49330139 130.16319275]
[83.87844086 125.61503601]
[71.72602081 110.79892731]
[56.82411957 112.51161957]
[41.94083786 114.37922668]
[27.07779121 116.40156555]
[12.21474457 118.42389679]
[4.98871279 132.15576172]
[-8.94351196 138.98750305]
[-24.22470665 136.29219055]
[-34.97893524 125.10620880]
[-37.07098389 109.73080444]
[-29.69641495 96.07814026]
[-15.69089794 89.39793396]
[-0.43984234 92.25886536]
[10.19240952 103.56085205]
[25.05545616 101.53852081]
[39.91850281 99.51618195]
[46.16261292 95.47183228]
[55.11142731 97.60971069]
[70.01332855 95.89702606]
[72.04903412 88.39058685]
[75.93049622 81.65077972]
[81.40139771 76.12267303]
[88.10045624 72.17131805]
[95.58531189 70.05763245]
[97.14289093 55.13872147]
[98.70047760 40.21981049]
[96.46961975 31.29371643]
[100.44879913 25.00787544]
[102.31640625 10.12459469]
[104.18402100 -4.75868464]
[98.22515106 -19.41482544]
[107.48689270 -31.07971001]
[109.35449982 -45.96298981]
[101.79976654 -62.72323608]
[112.86164093 -76.31127930]
[114.41921997 -91.23019409]
[115.97679901 -106.14910889]
[113.78954315 -111.03126526]
[113.74319458 -115.77997589]
[115.41661072 -119.58803558]
[118.12534332 -121.93968964]
[120.61045837 -136.73239136]
[123.09558105 -151.52510071]
[109.36518860 -157.78120422]
[97.72246552 -167.37857056]
[88.96123505 -179.66284180]
[83.67884064 -193.79644775]
[82.23545837 -208.81573486]
[84.72949219 -223.69667053]
[90.99089813 -237.42463684]
[100.59275818 -249.06365967]
[112.88040161 -257.82015991]
[127.01604462 -263.09707642]
[142.03588867 -264.53466797]
[156.91586304 -262.03488159]
[170.64141846 -255.76818848]
[182.27671814 -246.16183472]
[191.02847290 -233.87080383]
[196.29994202 -219.73312378]
[197.73173523 -204.71272278]
[195.22621155 -189.83370972]
[188.95420837 -176.11058044]
[179.34335327 -164.47898865]
[167.04895020 -155.73199463]
[152.90924072 -150.46597290]
[137.88829041 -149.03997803]
[135.40316772 -134.24728394]
[132.91804504 -119.45457458]
[130.89572144 -104.59152222]
[129.33813477 -89.67261505]
[127.78055573 -74.75370026]
[135.16920471 -65.12483215]
[133.95120239 -52.64542770]
[124.23778534 -44.09537506]
[122.37017059 -29.21209717]
[128.46261597 -15.62050819]
[119.06729889 -2.89107180]
[117.19969177 11.99220848]
[115.33207703 26.87548828]
[113.61938477 41.77738953]
[112.06180573 56.69630432]
[110.50422668 71.61521149]
[123.80951691 81.31466675]
[130.06813049 96.54424286]
[127.42776489 112.79658508]
[116.66986084 125.26164246]
[121.57141113 139.43820190]
[135.50585938 146.40014648]
[140.27478027 160.84701538]
[133.55175781 174.08848572]
[138.45330811 188.26504517]
[143.35485840 202.44160461]
[150.26705933 189.12915039]
[164.05107117 183.21299744]
[178.46261597 187.37321472]
[186.97311401 199.72518921]
[185.72723389 214.67337036]
[175.28935242 225.44606018]
[160.38795471 227.16313171]
[147.77326965 219.04643250]
[150.56559753 233.78422546]
[153.35792542 248.52203369]
[165.69377136 262.15313721]
[159.33825684 278.48126221]
[162.43656921 293.15777588]
[169.16896057 279.75347900]
[181.62536621 271.39657593]
[196.58149719 270.25021362]
[210.16600037 276.61114502]
[218.86256409 288.83282471]
[220.42012024 303.75173950]
[214.43550110 317.50616455]
[202.45777893 326.53579712]
[187.58738708 328.50338745]
[173.67346191 322.89956665]
[164.31762695 311.17501831]
[164.31762695 326.17501831]
[164.31762695 341.17501831]
[164.31762695 356.17501831]
[164.31762695 371.17501831]
[164.31762695 386.17501831]
[164.31762695 401.17501831]
[164.31762695 416.17501831]
[164.31762695 431.17501831]
[164.31762695 446.17501831]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 130]
[12 129]
[15 127]
[16 126]
[17 125]
[18 117]
[19 116]
[20 115]
[23 112]
[24 111]
[26 44]
[27 43]
[28 41]
[29 40]
[30 39]
[49 107]
[50 106]
[51 105]
[53 104]
[54 103]
[55 102]
[57 100]
[58 99]
[60 96]
[61 95]
[62 94]
[66 93]
[67 92]
[68 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
