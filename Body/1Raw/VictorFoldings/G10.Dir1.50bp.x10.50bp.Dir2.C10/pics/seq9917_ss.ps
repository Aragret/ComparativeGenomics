%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUGACUCCUACCCCUCACAAUCAUGGCAAGCCAACGCCACUUAUCCAGUGAACCACUAUxxxxxxxxxxGCCCAUAAUCAUACAAAGCCCCCGCACCAAUAGGAUCCUCCCGAAUCAACCCUGACCCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[3.37645483 275.41552734]
[-4.34763002 288.27392578]
[-12.07171535 301.13232422]
[-19.79579926 313.99072266]
[-20.26942635 329.80484009]
[-33.45581436 336.73077393]
[-41.17990112 349.58917236]
[-48.90398407 362.44757080]
[-56.62807083 375.30596924]
[-64.35215759 388.16436768]
[-61.87993622 404.01580811]
[-72.83736420 415.73391724]
[-88.81883240 414.32958984]
[-97.56473541 400.88012695]
[-92.36595917 385.70275879]
[-77.21055603 380.44030762]
[-69.48647308 367.58187866]
[-61.76238632 354.72348022]
[-54.03830338 341.86508179]
[-46.31421661 329.00668335]
[-46.39307022 314.11227417]
[-32.65420151 306.26666260]
[-24.93011665 293.40823364]
[-17.20603180 280.54983521]
[-9.48194790 267.69143677]
[-28.04075241 253.98793030]
[-44.90045547 238.24099731]
[-59.83733749 220.65960693]
[-72.65317535 201.47708130]
[-83.17790985 180.94793701]
[-91.27188110 159.34461975]
[-96.82767487 136.95381165]
[-99.77156067 114.07261658]
[-100.06449127 91.00468445]
[-97.70256805 68.05611420]
[-112.41053009 65.11063385]
[-127.11849213 62.16514969]
[-141.82644653 59.21966553]
[-153.14295959 69.83645630]
[-168.54277039 71.74053192]
[-182.10433960 64.19973755]
[-188.61296082 50.11366272]
[-185.56594849 34.89869308]
[-174.13491821 24.40529060]
[-158.71536255 22.66838837]
[-145.23640442 30.35585403]
[-138.88096619 44.51170349]
[-124.17300415 47.45718765]
[-109.46504211 50.40267181]
[-94.75708008 53.34815216]
[-89.30630493 34.65599060]
[-82.06610870 16.58149147]
[-73.10494232 -0.70449501]
[-62.50750351 -17.03857422]
[-50.37396240 -32.26634979]
[-36.81901932 -46.24388123]
[-21.97079277 -58.83904266]
[-5.96964264 -69.93278503]
[-13.42455292 -82.94909668]
[-20.87946320 -95.96540070]
[-28.33437347 -108.98171234]
[-41.45306396 -119.72119141]
[-34.76490402 -135.30017090]
[-17.94328308 -133.18608093]
[-15.31806374 -116.43662262]
[-7.86315393 -103.42031097]
[-0.40824357 -90.40400696]
[7.04666662 -77.38769531]
[16.19271278 -81.88748169]
[25.55586624 -85.91607666]
[35.11186981 -89.46305084]
[44.83596802 -92.51921082]
[54.70297241 -95.07663727]
[64.68731689 -97.12871552]
[74.76314545 -98.67012024]
[84.90435028 -99.69686127]
[95.08466339 -100.20628357]
[105.27770233 -100.19705963]
[115.45707703 -99.66921234]
[125.59640503 -98.62411499]
[135.66941833 -97.06447601]
[145.65003967 -94.99433136]
[155.51240540 -92.41904449]
[165.23095703 -89.34529114]
[174.78051758 -85.78102875]
[184.13636780 -81.73548889]
[193.27424622 -77.21915436]
[202.17050171 -72.24372864]
[210.80209351 -66.82210541]
[219.14662170 -60.96831131]
[227.18251038 -54.69752502]
[234.88893127 -48.02598953]
[242.24591064 -40.97098541]
[249.23439026 -33.55078888]
[255.83627319 -25.78462219]
[262.03445435 -17.69260597]
[267.81289673 -9.29570293]
[273.15658569 -0.61566317]
[286.39916992 -7.66079807]
[294.62252808 -21.84912491]
[311.01895142 -21.55108452]
[318.72125244 -7.07327747]
[309.80590820 6.69077110]
[293.44430542 5.58178759]
[280.20172119 12.62692261]
[285.96499634 25.67816544]
[290.78445435 39.10660934]
[294.63565063 52.84409714]
[297.49902344 66.82091522]
[299.36004639 80.96612549]
[300.20925903 95.20793152]
[300.04238892 109.47406006]
[298.86026001 123.69210815]
[313.67800903 126.02320862]
[328.49575806 128.35430908]
[345.08212280 124.84294891]
[353.04782104 139.80903625]
[340.87170410 151.60646057]
[326.16467285 143.17207336]
[311.34689331 140.84097290]
[296.52914429 138.50987244]
[293.83258057 150.35516357]
[290.42279053 162.01515198]
[286.31225586 173.44696045]
[281.51617432 184.60848999]
[276.05212402 195.45869446]
[269.94027710 205.95762634]
[263.20309448 216.06665039]
[255.86534119 225.74859619]
[247.95407104 234.96781921]
[239.49835205 243.69038391]
[230.52931213 251.88421631]
[221.07997131 259.51913452]
[211.18507385 266.56707764]
[200.88104248 273.00210571]
[190.20581055 278.80053711]
[179.19863892 283.94100952]
[167.90002441 288.40463257]
[156.35156250 292.17495728]
[144.59574890 295.23815918]
[132.67582703 297.58291626]
[120.63567352 299.20062256]
[108.51957703 300.08532715]
[96.37213898 300.23376465]
[84.23804474 299.64538574]
[72.16194916 298.32235718]
[60.18829346 296.26956177]
[48.36113739 293.49456787]
[36.72399521 290.00753784]
[25.31969261 285.82131958]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 25]
[2 24]
[3 23]
[4 22]
[6 20]
[7 19]
[8 18]
[9 17]
[10 16]
[35 50]
[36 49]
[37 48]
[38 47]
[58 68]
[59 67]
[60 66]
[61 65]
[98 105]
[99 104]
[113 121]
[114 120]
[115 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
