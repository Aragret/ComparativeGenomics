%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACUUAAAACUUUACAGUCAGAGGUUCAAUUCCUCUUCUUAACAACAUACCCAUGGCCAACxxxxxxxxxxUACUAACAACAUUUCCCCCGCAUCCCCCUUCCAAACAACAAUCCCCCUCUACCUAAAACUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[113.64781189 238.88056946]
[113.33575439 223.88381958]
[113.02369690 208.88705444]
[112.71164703 193.89030457]
[112.39958954 178.89355469]
[112.08753204 163.89680481]
[111.77547455 148.90003967]
[111.46341705 133.90328979]
[111.15135956 118.90653992]
[97.24880981 113.27458191]
[86.58718109 123.82587433]
[75.92555237 134.37716675]
[65.26393127 144.92845154]
[54.71263885 155.59007263]
[44.27282715 166.36088562]
[33.83301163 177.13169861]
[30.36322594 193.15956116]
[14.66726875 197.91024780]
[2.89179683 186.49664307]
[7.15040636 170.66009521]
[23.06220436 166.69187927]
[33.50201797 155.92108154]
[43.94182968 145.15026855]
[46.35441589 138.11285400]
[54.71263885 134.26683044]
[65.37426758 123.71553802]
[76.03588867 113.16424561]
[86.69751740 102.61295319]
[93.60451508 89.29779816]
[96.08963013 74.50509644]
[98.57475281 59.71238708]
[101.05986786 44.91967773]
[103.54499054 30.12697220]
[88.94577026 26.65823364]
[74.61084747 22.22211838]
[60.60422897 16.83843803]
[46.98848724 10.53123856]
[33.82442474 3.32868862]
[21.17083740 -4.73704338]
[9.08424282 -13.62993240]
[-2.38137913 -23.31026268]
[-13.17481995 -33.73479462]
[-23.24787140 -44.85697556]
[-32.55554581 -56.62712479]
[-41.05627441 -68.99268341]
[-48.71208572 -81.89840698]
[-55.48879242 -95.28666687]
[-61.35612488 -109.09766388]
[-66.28787994 -123.26972198]
[-70.26202393 -137.73953247]
[-73.26081085 -152.44247437]
[-75.27085876 -167.31288147]
[-76.28317261 -182.28433228]
[-76.29323578 -197.28997803]
[-75.30101776 -212.26277161]
[-73.31092834 -227.13586426]
[-70.33187103 -241.84281921]
[-66.37714386 -256.31796265]
[-61.46441650 -270.49661255]
[-55.61562347 -284.31546021]
[-48.85688782 -297.71279907]
[-41.21839905 -310.62878418]
[-32.73427582 -323.00573730]
[-23.44240189 -334.78839111]
[-13.38428307 -345.92407227]
[-2.60484099 -356.36306763]
[8.84778118 -366.05877686]
[20.92243195 -374.96786499]
[33.56518173 -383.05059814]
[46.71956635 -390.27078247]
[60.32683563 -396.59625244]
[74.32621765 -401.99871826]
[88.65517426 -406.45407104]
[103.24972534 -409.94241333]
[118.04467773 -412.44812012]
[132.97395325 -413.96005249]
[147.97088623 -414.47143555]
[162.96847534 -413.97998047]
[177.89974976 -412.48791504]
[192.69801331 -410.00186157]
[207.29719543 -406.53292847]
[221.63206482 -402.09664917]
[235.63861084 -396.71276855]
[249.25427246 -390.40539551]
[262.41824341 -383.20269775]
[275.07171631 -375.13681030]
[287.15820312 -366.24377441]
[298.62371826 -356.56329346]
[309.41702271 -346.13861084]
[319.48992920 -335.01632690]
[328.79745483 -323.24603271]
[337.29803467 -310.88037109]
[344.95367432 -297.97454834]
[351.73022461 -284.58621216]
[357.59738159 -270.77514648]
[362.52896118 -256.60302734]
[366.50292969 -242.13316345]
[369.50152588 -227.43019104]
[371.51138306 -212.55975342]
[372.52349854 -197.58828735]
[372.53338623 -182.58264160]
[371.54098511 -167.60986328]
[369.55068970 -152.73680115]
[366.57147217 -138.02987671]
[362.61654663 -123.55479431]
[357.70364380 -109.37619781]
[351.85467529 -95.55741882]
[345.09576416 -82.16015625]
[337.45712280 -69.24426270]
[328.97283936 -56.86742401]
[319.68081665 -45.08490753]
[309.62255859 -33.94934845]
[298.84298706 -23.51047516]
[287.39025879 -13.81491375]
[275.31549072 -4.90596437]
[262.67263794 3.17658114]
[249.51815796 10.39662457]
[235.91081238 16.72191811]
[221.91136169 22.12421417]
[207.58233643 26.57938004]
[192.98774719 30.06752205]
[178.19276428 32.57305908]
[163.26347351 34.08480072]
[148.26654053 34.59599686]
[133.26895142 34.10435867]
[118.33769989 32.61209106]
[115.85257721 47.40479660]
[113.36746216 62.19750595]
[110.88233948 76.99021149]
[108.39722443 91.78292084]
[111.10397339 77.02915955]
[120.25937653 65.14730072]
[133.83569336 58.76893616]
[148.82604980 59.30674744]
[161.91038513 66.64161682]
[170.19076538 79.14902496]
[171.83328247 94.05883026]
[166.47412109 108.06880188]
[155.30024719 118.07602692]
[140.78643799 121.86410522]
[126.14811707 118.59448242]
[126.46017456 133.59123230]
[126.77223206 148.58799744]
[127.08428192 163.58474731]
[127.39633942 178.58149719]
[127.70839691 193.57824707]
[128.02044678 208.57501221]
[128.33250427 223.57176208]
[128.64456177 238.56851196]
[131.23556519 257.77624512]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 28]
[11 27]
[12 26]
[13 25]
[14 23]
[15 22]
[16 21]
[29 130]
[30 129]
[31 128]
[32 127]
[33 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
