%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAACCUCACCACCUCUUGCUCAGCCUAUAUACCGCCAUCUUCAGCAAACCCUGAUGAAGGCUxxxxxxxxxxCCCUUCGCCCUAUUCUUCAUAGCCGAAUACACAAACAUUAUUAUAAUAAACACCCUCACCACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[16.10501671 274.68777466]
[9.09278774 287.94781494]
[9.48124981 303.76425171]
[-3.30831337 311.39816284]
[-10.32054234 324.65820312]
[-9.93208027 340.47463989]
[-22.72164345 348.10852051]
[-29.73387337 361.36856079]
[-36.74610138 374.62860107]
[-43.75833130 387.88864136]
[-45.81785965 404.71704102]
[-62.55872345 407.39654541]
[-69.76786041 392.05169678]
[-57.01837158 380.87640381]
[-50.00614166 367.61636353]
[-42.99391174 354.35632324]
[-35.98168182 341.09628296]
[-36.87170792 326.22830200]
[-23.58058167 317.64596558]
[-16.56835175 304.38592529]
[-17.45837593 289.51794434]
[-4.16725159 280.93560791]
[2.84497762 267.67556763]
[-10.90332127 258.91708374]
[-23.86688995 249.03416443]
[-35.95399857 238.09671021]
[-47.07912445 226.18209839]
[-57.16354752 213.37464905]
[-66.13591003 199.76498413]
[-73.93272400 185.44938660]
[-80.49882507 170.52917480]
[-85.78775024 155.10992432]
[-89.76206970 139.30070496]
[-92.39367676 123.21341705]
[-93.66394043 106.96186829]
[-93.56387329 90.66106415]
[-92.09419250 74.42633820]
[-89.26528168 58.37256241]
[-85.09716797 42.61333847]
[-79.61933899 27.26017189]
[-72.87055969 12.42169666]
[-64.89858246 -1.79708993]
[-55.75981522 -15.29557991]
[-45.51891708 -27.97826004]
[-56.39080811 -38.31276321]
[-67.26270294 -48.64726639]
[-82.59571075 -52.54719162]
[-86.48960114 -66.92379761]
[-97.36149597 -77.25830078]
[-112.69450378 -81.15822601]
[-116.58839417 -95.53483582]
[-127.46028137 -105.86933899]
[-138.33218384 -116.20384216]
[-149.20407104 -126.53834534]
[-164.99494934 -125.88748169]
[-176.56427002 -136.65438843]
[-177.04814148 -152.45127869]
[-166.15951538 -163.90611267]
[-150.35839844 -164.22294617]
[-139.01933289 -153.21382141]
[-138.86956787 -137.41023254]
[-127.99767303 -127.07573700]
[-117.12577820 -116.74123383]
[-106.25389099 -106.40672302]
[-91.69850922 -103.24599457]
[-87.02698517 -88.13019562]
[-76.15509796 -77.79569244]
[-61.59972000 -74.63496399]
[-56.92819595 -59.51916122]
[-46.05630493 -49.18465424]
[-35.18441391 -38.85015106]
[-20.20135689 -52.00600052]
[-3.94578624 -63.55263138]
[13.41020870 -73.36781311]
[31.68288803 -81.34762573]
[50.67881012 -87.40760803]
[70.19686890 -91.48358917]
[90.03044128 -93.53242493]
[109.96955872 -93.53242493]
[129.80313110 -91.48358917]
[149.32119751 -87.40760803]
[168.31710815 -81.34762573]
[186.58979797 -73.36781311]
[203.94578552 -63.55263138]
[220.20135498 -52.00600052]
[235.18441772 -38.85015106]
[246.05630493 -49.18465424]
[256.92819214 -59.51916122]
[267.80007935 -69.85366058]
[268.91760254 -82.74187469]
[278.23504639 -91.12699127]
[290.36624146 -90.89858246]
[301.44537354 -101.01062775]
[312.52447510 -111.12266541]
[323.60357666 -121.23471069]
[325.76837158 -137.13102722]
[339.61962891 -145.22564697]
[354.53179932 -139.30905151]
[359.06558228 -123.91995239]
[349.74304199 -110.86354828]
[333.71560669 -110.15560150]
[322.63650513 -100.04355621]
[311.55740356 -89.93151855]
[300.47830200 -79.81947327]
[296.11032104 -62.84865189]
[278.13458252 -58.98176956]
[267.26269531 -48.64726639]
[256.39080811 -38.31276321]
[245.51892090 -27.97826004]
[252.72802734 -19.28260994]
[259.41824341 -10.18171120]
[265.56689453 -0.70648479]
[271.15301514 9.11087894]
[276.15768433 19.23702621]
[280.56387329 29.63755608]
[284.35662842 40.27713394]
[287.52307129 51.11961365]
[290.05239868 62.12815475]
[291.93606567 73.26536560]
[293.16763306 84.49340057]
[293.74295044 95.77411652]
[293.66006470 107.06919098]
[292.91921997 118.34024811]
[291.52297974 129.54899597]
[289.47604370 140.65734863]
[286.78540039 151.62759399]
[283.46017456 162.42242432]
[279.51165771 173.00518799]
[274.95327759 183.33992004]
[269.80050659 193.39151001]
[264.07089233 203.12582397]
[257.78384399 212.50978088]
[250.96073914 221.51150513]
[243.62477112 230.10040283]
[235.80085754 238.24729919]
[227.51557922 245.92451477]
[218.79708862 253.10598755]
[209.67498779 259.76727295]
[200.18029785 265.88580322]
[190.34524536 271.44073486]
[180.20326233 276.41323853]
[169.78878784 280.78637695]
[159.13722229 284.54531860]
[148.28474426 287.67730713]
[137.26821899 290.17169189]
[126.12509155 292.01995850]
[114.89320374 293.21588135]
[103.61071777 293.75540161]
[92.31596375 293.63662720]
[81.04731750 292.86001587]
[69.84305573 291.42819214]
[58.74125290 289.34600830]
[47.77962112 286.62054443]
[36.99539948 283.26104736]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 23]
[2 22]
[4 20]
[5 19]
[7 17]
[8 16]
[9 15]
[10 14]
[44 71]
[45 70]
[46 69]
[48 67]
[49 66]
[51 64]
[52 63]
[53 62]
[54 61]
[86 109]
[87 108]
[88 107]
[89 106]
[92 104]
[93 103]
[94 102]
[95 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
