%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACUACGCCCUGAUCGGCGCACUGCGAGCAGUAGCCCAAACAAUCUCAUAUGAAGUCACCxxxxxxxxxxUGGAGGCCGGAGCAGGAACAGGUUGAACAGUCUACCCUCCCUUAGCAGGGAACUACUCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[82.11207581 438.61791992]
[82.11207581 423.61791992]
[82.11207581 408.61791992]
[82.11207581 393.61791992]
[82.11207581 378.61791992]
[82.11207581 363.61791992]
[82.11207581 348.61791992]
[82.11207581 333.61791992]
[82.11207581 318.61791992]
[82.11207581 303.61791992]
[65.96560669 298.22866821]
[52.59428406 287.65536499]
[43.60166931 273.14486694]
[40.07342148 256.41732788]
[42.44624329 239.46252441]
[50.45388794 224.30293274]
[63.15693283 212.75268555]
[79.05297089 206.20036316]
[78.11734009 191.22956848]
[77.18170929 176.25878906]
[76.24608612 161.28799438]
[75.31045532 146.31719971]
[66.79435730 134.09732056]
[73.65579987 119.84141541]
[67.59278870 106.12136078]
[57.15297318 95.35054779]
[46.71316147 84.57974243]
[36.27334976 73.80892944]
[22.37079239 68.17697906]
[7.37809658 68.64501953]
[-7.60891962 69.26899719]
[-22.58863449 70.04884338]
[-37.56834793 70.82868958]
[-52.54806137 71.60852814]
[-66.00260925 80.98441315]
[-80.73271179 73.77634430]
[-81.58529663 57.39937592]
[-67.68330383 48.70072556]
[-53.32790756 56.62881851]
[-38.34819412 55.84897232]
[-23.36847878 55.06912613]
[-8.38876438 54.28927994]
[-1.83008027 50.77796936]
[6.91005421 53.65232086]
[21.90275002 53.18428040]
[29.62683487 40.32587814]
[22.99833679 26.86991310]
[16.36983871 13.41394711]
[1.88389373 17.47252464]
[-13.10118294 18.79997444]
[-28.07500648 17.35108566]
[-42.52757263 13.17520332]
[-55.96663284 6.41455889]
[-67.93445587 -2.70058346]
[-78.02342224 -13.85976505]
[-85.88991547 -26.68290901]
[-91.26599121 -40.73326111]
[-93.96855164 -55.53227615]
[-93.90554047 -70.57590485]
[-91.07911682 -85.35176086]
[-85.58553314 -99.35659027]
[-77.61190796 -112.11338806]
[-67.42981720 -123.18766785]
[-55.38605881 -132.20223999]
[-41.89083862 -138.85008240]
[-27.40380287 -142.90475464]
[-12.41836834 -144.22816467]
[2.55506301 -142.77523804]
[17.00650215 -138.59545898]
[30.44373894 -131.83119202]
[42.40910721 -122.71282196]
[52.49506760 -111.55091858]
[60.35810089 -98.72565460]
[65.73039246 -84.67385864]
[68.42896271 -69.87411499]
[68.36190033 -54.83050537]
[65.53148651 -40.05541229]
[60.03413010 -26.05206490]
[52.05706787 -13.29741383]
[41.87199020 -2.22587919]
[29.82580376 6.78544807]
[36.45430374 20.24141312]
[43.08280182 33.69738007]
[49.79907608 43.63383865]
[50.86007690 54.43353653]
[47.04415894 63.36912155]
[57.48397064 74.13993073]
[67.92378235 84.91073608]
[78.36359406 95.68154907]
[83.15969849 87.02429962]
[91.01421356 81.62355804]
[100.09241486 80.34815979]
[108.43856812 83.14618683]
[114.39669800 89.12137604]
[129.04020691 85.87055206]
[143.68370056 82.61972046]
[148.23857117 69.57164764]
[158.57508850 60.56223679]
[171.91029358 57.87469864]
[184.72364807 62.10900116]
[193.68646240 72.05204010]
[208.39442444 69.10655212]
[223.10238647 66.16107178]
[235.11454773 55.86453247]
[249.11335754 60.95199966]
[263.82131958 58.00651550]
[275.77279663 46.77733231]
[291.39300537 51.77142334]
[294.61322021 67.85128784]
[282.12078857 78.47534943]
[266.76681519 72.71447754]
[252.05885315 75.65995789]
[241.09870911 85.74581909]
[226.04786682 80.86903381]
[211.33990479 83.81451416]
[196.63194275 86.76000214]
[190.28433228 101.86672211]
[176.05256653 110.31791687]
[159.42051697 108.62773895]
[146.93452454 97.26322174]
[132.29103088 100.51405334]
[117.64752960 103.76487732]
[107.98472595 118.39574432]
[88.62658691 118.90578461]
[97.20960999 132.19647217]
[90.28124237 145.38157654]
[91.21687317 160.35237122]
[92.15250397 175.32315063]
[93.08813477 190.29394531]
[94.02375793 205.26473999]
[106.79261017 208.17854309]
[118.34886169 214.31301880]
[127.89714050 223.23796082]
[134.78236389 234.33134460]
[138.53468323 246.82278442]
[138.90151978 259.84689331]
[135.86460876 272.50335693]
[129.64070129 283.91909790]
[120.66616058 293.30850220]
[109.56635284 300.02755737]
[97.11207581 303.61791992]
[97.11207581 318.61791992]
[97.11207581 333.61791992]
[97.11207581 348.61791992]
[97.11207581 363.61791992]
[97.11207581 378.61791992]
[97.11207581 393.61791992]
[97.11207581 408.61791992]
[97.11207581 423.61791992]
[97.11207581 438.61791992]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[18 130]
[19 129]
[20 128]
[21 127]
[22 126]
[24 124]
[25 89]
[26 88]
[27 87]
[28 86]
[29 45]
[30 44]
[31 42]
[32 41]
[33 40]
[34 39]
[46 83]
[47 82]
[48 81]
[94 122]
[95 121]
[96 120]
[101 116]
[102 115]
[103 114]
[105 112]
[106 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
