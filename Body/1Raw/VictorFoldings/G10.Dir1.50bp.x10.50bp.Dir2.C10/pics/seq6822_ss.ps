%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCAACACCUAUUCUGAUUUUUCGGUCACCCUGAAGUUUAUAUUCUUAUCCUACCAGGCUUCxxxxxxxxxxCUUUGCCGCCUGCGAAGCAGCGGUGGGCCUAGCCCUACUAGUCUCAAUCUCCAACACAUAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[86.77020264 445.44647217]
[86.77020264 430.44647217]
[86.77020264 415.44647217]
[86.77020264 400.44647217]
[86.77020264 385.44647217]
[86.77020264 370.44647217]
[86.77020264 355.44647217]
[86.77020264 340.44647217]
[86.77020264 325.44647217]
[86.77020264 310.44647217]
[72.93003082 307.60504150]
[59.91544342 302.09222412]
[48.23674393 294.12194824]
[38.35228729 284.00457764]
[30.65049362 272.13473511]
[25.43458748 258.97604370]
[22.91066360 245.04286194]
[23.17953682 230.88031006]
[26.23271942 217.04283142]
[31.95267868 204.07263184]
[40.11735535 192.47825623]
[50.40877533 182.71481323]
[62.42545700 175.16600037]
[75.69804382 170.12905884]
[89.70766449 167.80310059]
[90.32348633 152.81575012]
[90.93931580 137.82839966]
[91.55513763 122.84104156]
[79.63420868 115.12734222]
[73.66275787 101.61045074]
[76.17417908 86.46171570]
[86.96982574 74.74233246]
[102.98327637 70.71374512]
[92.35194397 58.99686432]
[97.04244232 44.86008453]
[93.68318176 30.24107742]
[90.32392120 15.62207031]
[86.96466064 1.00306296]
[83.60540771 -13.61594486]
[80.09623718 -28.19969368]
[76.43753052 -42.74664688]
[72.77882385 -57.29360199]
[63.37496948 -68.97981262]
[49.94751740 -75.66588593]
[36.52006912 -82.35195923]
[22.82269669 -75.06076050]
[7.46033525 -77.24650574]
[-3.65987301 -88.06873322]
[-6.26198101 -103.36607361]
[0.65457445 -117.25639343]
[14.43023682 -124.39857483]
[29.76798248 -122.04630280]
[40.77013779 -111.10408020]
[43.20614624 -95.77941132]
[56.63359451 -89.09333801]
[70.06104279 -82.40725708]
[76.63185883 -86.02310944]
[76.93952942 -101.01995850]
[89.77349091 -93.25481415]
[96.34430695 -96.87066650]
[97.88159943 -111.79167938]
[91.59936523 -126.31215668]
[100.60029602 -138.17944336]
[101.98432159 -153.11546326]
[103.21493530 -168.06489563]
[104.44554138 -183.01432800]
[105.67615509 -197.96376038]
[106.90676880 -212.91319275]
[92.80617523 -218.33076477]
[80.80390167 -227.50256348]
[71.87290955 -239.68510437]
[66.73720551 -253.89077759]
[65.81310272 -268.96798706]
[69.17552948 -283.69451904]
[76.55189514 -296.87655640]
[87.34424591 -307.44546509]
[100.67768097 -314.54449463]
[115.47132111 -317.59814453]
[130.52592468 -316.35888672]
[144.62106323 -310.92715454]
[156.61412048 -301.74328613]
[165.53286743 -289.55178833]
[170.65429688 -275.34097290]
[171.56324768 -260.26281738]
[168.18603516 -245.53967285]
[160.79643250 -232.36506653]
[149.99346924 -221.80699158]
[136.65290833 -214.72137451]
[121.85620117 -211.68258667]
[120.62559509 -196.73315430]
[119.39498138 -181.78370667]
[118.16436768 -166.83427429]
[116.93375397 -151.88484192]
[119.53548431 -144.91754150]
[115.52130890 -136.64215088]
[121.91349792 -123.18892670]
[112.80261230 -110.25438690]
[111.26531982 -95.33337402]
[87.32578278 -60.95230865]
[90.98448181 -46.40535355]
[94.64318848 -31.85840034]
[99.35379791 -26.10319710]
[98.22441101 -16.97520256]
[101.58367157 -2.35619593]
[104.94293213 12.26281166]
[108.30218506 26.88181877]
[111.66144562 41.50082779]
[122.05250549 52.17205811]
[117.60227966 67.35448456]
[129.09295654 76.99629974]
[144.07319641 77.76596069]
[159.05343628 78.53562164]
[174.03367615 79.30528259]
[186.86024475 69.66896057]
[202.35472107 73.82835388]
[208.63107300 88.59273529]
[200.87463379 102.63613129]
[185.03544617 105.18565369]
[173.26400757 94.28552246]
[158.28376770 93.51586151]
[143.30352783 92.74620056]
[128.32328796 91.97653961]
[128.39915466 101.10584259]
[125.70542908 109.49663544]
[120.70098114 116.36194611]
[114.05059052 121.12303925]
[106.54249573 123.45687103]
[105.92666626 138.44422913]
[105.31084442 153.43157959]
[104.69501495 168.41893005]
[120.09095001 172.49472046]
[134.20307922 179.86230469]
[146.33789062 190.15628052]
[155.89981079 202.86753845]
[162.42037964 217.36840820]
[165.58123779 232.94367981]
[165.22962952 248.82585144]
[161.38583374 264.23297119]
[154.24198914 278.40710449]
[144.15248108 290.65170288]
[131.61639404 300.36572266]
[117.25280762 307.07318115]
[101.77020264 310.44647217]
[101.77020264 325.44647217]
[101.77020264 340.44647217]
[101.77020264 355.44647217]
[101.77020264 370.44647217]
[101.77020264 385.44647217]
[101.77020264 400.44647217]
[101.77020264 415.44647217]
[101.77020264 430.44647217]
[101.77020264 445.44647217]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[25 130]
[26 129]
[27 128]
[28 127]
[33 109]
[35 107]
[36 106]
[37 105]
[38 104]
[39 103]
[40 101]
[41 100]
[42 99]
[43 56]
[44 55]
[45 54]
[60 98]
[61 97]
[63 95]
[64 93]
[65 92]
[66 91]
[67 90]
[68 89]
[110 122]
[111 121]
[112 120]
[113 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
