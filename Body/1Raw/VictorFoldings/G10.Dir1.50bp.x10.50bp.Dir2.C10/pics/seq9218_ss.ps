%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACAUCCAAACAUCACUUUGGCUUCGAAGCCGCCGCCUGAUACUGGCAUUUUGUAGAUGUGxxxxxxxxxxGUACGGUACCAUAAAUACUUGACCACCUGUAGUACAUAAAAACCCAAUCCACAUCAAAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[113.38941193 281.07772827]
[113.38941193 266.07772827]
[113.38941193 251.07772827]
[113.38941193 236.07772827]
[113.38941193 221.07772827]
[113.38941193 206.07772827]
[113.38941193 191.07772827]
[113.38941193 176.07772827]
[113.38941193 161.07772827]
[113.38941193 146.07772827]
[109.23152924 131.66551208]
[101.24160767 118.97058868]
[100.45993805 133.95021057]
[90.03043365 144.73098755]
[75.08491516 146.00828552]
[62.97729874 137.15357971]
[59.66512680 122.52383423]
[66.77813721 109.31758118]
[80.81670380 104.03294373]
[66.32110596 100.17578125]
[51.82551193 96.31862640]
[37.32991791 92.46146393]
[22.83432007 88.60430908]
[8.29938316 84.89814758]
[-6.27331972 81.34338379]
[-18.12778854 96.24539948]
[-36.86660004 102.76560974]
[-56.96801758 98.08269501]
[-72.02082062 82.81728363]
[-86.88386536 84.83962250]
[-101.74691010 86.86195374]
[-116.60996246 88.88428497]
[-129.23857117 99.34613037]
[-144.51686096 93.38745117]
[-146.72782898 77.13803101]
[-133.59703064 67.31388092]
[-118.63229370 74.02124023]
[-103.76924896 71.99890900]
[-88.90619659 69.97657013]
[-74.04315186 67.95423889]
[-71.71205139 53.13647842]
[-85.23623657 46.64831543]
[-98.76042938 40.16014862]
[-111.39219666 48.89707947]
[-126.70139313 50.13160706]
[-140.56991577 43.53164291]
[-149.26721191 30.87254906]
[-150.45375061 15.55955601]
[-143.81034851 1.71178472]
[-131.12405396 -6.94578600]
[-115.80741882 -8.08431244]
[-101.98053741 -1.39753747]
[-93.36277771 11.31583118]
[-92.27226257 26.63595963]
[-78.74806976 33.12412643]
[-65.22388458 39.61228943]
[-52.08756256 31.30285072]
[-37.12318420 28.87683105]
[-22.78029633 32.42710114]
[-11.28943062 41.09218597]
[-4.31541920 53.24058533]
[-2.71855760 66.77068329]
[11.85414505 70.32543945]
[19.14492226 68.84550476]
[26.69147873 74.10871124]
[41.18707657 77.96586609]
[55.68267059 81.82302856]
[70.17826843 85.68019104]
[84.67386627 89.53734589]
[70.46367645 84.73416138]
[59.57900238 74.41312408]
[54.02772903 60.47815704]
[54.83390808 45.49983597]
[61.84881973 32.24121475]
[73.77841949 23.14810944]
[88.42206573 19.89792633]
[103.07843781 23.09022331]
[115.04387665 32.13611984]
[122.11112213 45.36691666]
[122.97647858 60.34193420]
[117.48031616 74.29872894]
[106.63911438 84.66110992]
[118.14092255 75.03258514]
[129.64273071 65.40405273]
[141.04374695 55.65640259]
[152.34274292 45.79067993]
[163.64175415 35.92495728]
[157.90614319 21.91133690]
[157.03402710 6.79452133]
[161.11997986 -7.78572989]
[169.72079468 -20.24785995]
[181.90351868 -29.24007225]
[196.34666443 -33.78695679]
[211.48355103 -33.39529800]
[225.67224121 -28.10758781]
[237.37364197 -18.49739265]
[245.31848145 -5.60715628]
[248.64497375 9.16488647]
[246.99226379 24.21637344]
[240.53962708 37.91463470]
[229.98701477 48.77378082]
[216.47908020 55.61589432]
[201.48107910 57.69879532]
[186.61985779 54.79654694]
[173.50747681 47.22396088]
[162.20846558 57.08968735]
[150.90946960 66.95540619]
[147.92024231 73.76791382]
[139.27125549 76.90586090]
[127.76944733 86.53438568]
[116.26764679 96.16291046]
[113.93653870 110.98066711]
[121.92645264 123.67559814]
[121.79239655 108.67620087]
[124.82576752 93.98611450]
[130.89001465 80.26660156]
[139.71215820 68.13525391]
[150.89509583 58.13814163]
[163.93539429 50.72529221]
[178.24607849 46.23038483]
[193.18296814 44.85575867]
[208.07366943 46.66328812]
[222.24787903 51.57160950]
[235.06756592 59.35977936]
[245.95565796 69.67721558]
[254.42202759 82.05947876]
[260.08557129 95.94920349]
[262.69134521 110.72113037]
[262.12203979 125.71032715]
[258.40332031 140.24205017]
[251.70252991 153.66217041]
[242.32133484 165.36657715]
[230.68202209 174.82841492]
[217.30851746 181.62174988]
[202.80282593 185.44079590]
[187.81793213 186.11363220]
[173.02835083 183.60998535]
[159.09983826 178.04254150]
[146.65936279 169.66191101]
[136.26695251 158.84536743]
[128.38941956 146.07772827]
[128.38941956 161.07772827]
[128.38941956 176.07772827]
[128.38941956 191.07772827]
[128.38941956 206.07772827]
[128.38941956 221.07772827]
[128.38941956 236.07772827]
[128.38941956 251.07772827]
[128.38941956 266.07772827]
[128.38941956 281.07772827]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 113]
[12 112]
[19 69]
[20 68]
[21 67]
[22 66]
[23 65]
[24 63]
[25 62]
[29 40]
[30 39]
[31 38]
[32 37]
[41 56]
[42 55]
[43 54]
[82 111]
[83 110]
[84 109]
[85 107]
[86 106]
[87 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
