%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAUCCAUCAUAGCAGGCAGUUGAGGUGGAUUAAACCAAACCCAGCUACGCAAAAUCUUAGCxxxxxxxxxxCAACGUUAUCGUCACAGCCCAUGCAUUUGUAAUAAUCUUCUUCAUAGUAAUACCCAUCAUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[219.20352173 447.41186523]
[219.20352173 432.41186523]
[219.20352173 417.41186523]
[219.20352173 402.41186523]
[219.20352173 387.41186523]
[219.20352173 372.41186523]
[219.20352173 357.41186523]
[219.20352173 342.41186523]
[219.20352173 327.41186523]
[219.20352173 312.41186523]
[215.09858704 297.98446655]
[207.20210266 285.23123169]
[199.30561829 272.47796631]
[183.43133545 265.05828857]
[182.94068909 246.67922974]
[174.78402710 234.09078979]
[162.98889160 231.23822021]
[156.09948730 220.76409912]
[158.28604126 208.01173401]
[150.38957214 195.25848389]
[144.15592957 191.20213318]
[142.46498108 182.16131592]
[134.83201599 169.24861145]
[127.19905090 156.33592224]
[119.30256653 143.58265686]
[111.14589691 130.99421692]
[102.98923492 118.40577698]
[80.46357727 111.42309570]
[79.19828033 83.39752960]
[68.42959595 72.95552063]
[57.66091919 62.51351166]
[46.89223862 52.07150269]
[33.82554626 44.70526123]
[19.31691933 40.89740372]
[4.00464821 44.87797165]
[-6.34152985 34.16321945]
[-20.85015488 30.35536194]
[-35.35877991 26.54750252]
[-52.96836853 31.83267593]
[-64.98280334 19.07736969]
[-79.56655884 15.56820202]
[-93.94539642 22.68357277]
[-108.41177368 15.74789619]
[-111.86830902 0.08163123]
[-101.66345978 -12.29740524]
[-85.62550354 -11.89307594]
[-76.05738831 0.98445249]
[-61.47364044 4.49361992]
[-50.95728683 -1.56183767]
[-38.74850845 1.28720737]
[-31.55092239 12.03887749]
[-17.04229736 15.84673595]
[-2.53367138 19.65459442]
[11.74084663 15.40166569]
[23.12477875 26.38877869]
[37.63340378 30.19663811]
[27.18467522 19.43447876]
[19.44384003 6.58615351]
[14.81289577 -7.68109417]
[13.53234005 -22.62633324]
[15.66867542 -37.47342300]
[21.11095619 -51.45132065]
[29.57655144 -63.83411789]
[40.62582397 -73.97875214]
[53.68495941 -81.35838318]
[68.07576752 -85.58977509]
[83.05089569 -86.45317841]
[97.83265686 -83.90375519]
[111.65339661 -78.07390594]
[123.79537201 -69.26638031]
[133.62802124 -57.93858337]
[140.64071655 -44.67878723]
[144.46926880 -30.17560959]
[144.91484070 -15.18222904]
[141.95431519 -0.47728822]
[135.74142456 13.17555046]
[126.59882355 25.06726265]
[115.00130463 34.58028793]
[101.55116272 41.22058487]
[86.94688416 44.64331818]
[71.94690704 44.67072678]
[57.33425140 41.30282211]
[68.10292816 51.74483109]
[78.87160492 62.18684387]
[89.64028931 72.62885284]
[104.56130219 71.09156036]
[112.97471619 58.67324448]
[108.52154541 43.68313599]
[114.79306793 29.35826302]
[128.82806396 22.46239090]
[143.99961853 26.25153923]
[153.14421082 38.93658829]
[151.94403076 54.52804565]
[140.96577454 65.66410828]
[125.39302826 67.08665466]
[116.97961426 79.50496674]
[122.38185883 96.65166473]
[115.57767487 110.24911499]
[123.73433685 122.83755493]
[131.89100647 135.42599487]
[137.68164062 138.81880188]
[140.43084717 143.88139343]
[140.11174011 148.70294189]
[147.74472046 161.61564636]
[155.37768555 174.52833557]
[163.14282227 187.36199951]
[171.03930664 200.11524963]
[187.44667053 208.41159058]
[187.37246704 225.93411255]
[195.52912903 238.52255249]
[207.99311829 241.99426270]
[214.51945496 252.69839478]
[212.05886841 264.58148193]
[219.95535278 277.33474731]
[227.85183716 290.08798218]
[227.76249695 275.08825684]
[230.84043884 260.40744019]
[236.94702148 246.70672607]
[245.80725098 234.60316467]
[257.02206421 224.64184570]
[270.08639526 217.27142334]
[284.41186523 212.82380676]
[299.35327148 211.49934387]
[314.23773193 213.35765076]
[328.39483643 218.31506348]
[341.18704224 226.14828491]
[352.03820801 236.50456238]
[360.45962524 248.91744995]
[366.07202148 262.82791138]
[368.62261963 277.60946655]
[367.99655151 292.59640503]
[364.22201538 307.11373901]
[357.46902466 320.50765991]
[348.04168701 332.17492676]
[336.36459351 341.59008789]
[322.96365356 348.32913208]
[308.44238281 352.08853149]
[293.45480347 352.69897461]
[278.67590332 350.13296509]
[264.77130127 344.50607300]
[252.36720276 336.07171631]
[242.02226257 325.20977783]
[234.20352173 312.41186523]
[234.20352173 327.41186523]
[234.20352173 342.41186523]
[234.20352173 357.41186523]
[234.20352173 372.41186523]
[234.20352173 387.41186523]
[234.20352173 402.41186523]
[234.20352173 417.41186523]
[234.20352173 432.41186523]
[234.20352173 447.41186523]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 115]
[12 114]
[13 113]
[15 110]
[16 109]
[19 107]
[20 106]
[22 105]
[23 104]
[24 103]
[25 100]
[26 99]
[27 98]
[29 85]
[30 84]
[31 83]
[32 82]
[33 56]
[34 55]
[36 53]
[37 52]
[38 51]
[40 48]
[41 47]
[86 96]
[87 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
