%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:33:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUUAUCGAAACCAUCAGCCUACUCAUUCAACCAAUAGCCCUGGCCGUACGCCUAACCGCUAAxxxxxxxxxxUAGCAUUAGCAGGAAUACCUUUCCUCACAGGUUUCUACUCCAAAGACCACAUCAUCGAAACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[186.73834229 403.46133423]
[186.13046265 388.47366333]
[185.52258301 373.48599243]
[184.91470337 358.49832153]
[184.30680847 343.51062012]
[183.69892883 328.52294922]
[183.09104919 313.53527832]
[182.48316956 298.54760742]
[178.72337341 284.02642822]
[171.98132324 270.62701416]
[165.23927307 257.22756958]
[152.60705566 249.33604431]
[153.31599426 233.53073120]
[146.57394409 220.13130188]
[142.34692383 217.79550171]
[139.57290649 212.75067139]
[139.84262085 206.04942322]
[133.64913940 192.38777161]
[127.45564270 178.72612000]
[121.26215363 165.06446838]
[115.06866455 151.40281677]
[108.87517548 137.74116516]
[83.82504272 139.45257568]
[60.63661194 124.77027130]
[49.70838165 97.06055450]
[34.70915222 97.21257019]
[19.70992088 97.36457825]
[4.11498928 107.10512543]
[-10.83660507 97.96522522]
[-25.82967377 98.42118835]
[-40.82274246 98.87715912]
[-46.55205536 112.98725128]
[-57.52964020 123.54246521]
[-71.85356140 128.71405029]
[-87.04210663 127.60597992]
[-100.46378326 120.41024017]
[-109.79319000 108.37355042]
[-113.41396332 93.58132172]
[-110.69876862 78.59641266]
[-102.11804199 66.01503754]
[-89.15843964 58.01699829]
[-74.06529236 55.98800659]
[-59.45358276 60.27959824]
[-47.85486984 70.14822388]
[-41.27870941 83.88408661]
[-26.28564072 83.42812347]
[-11.29257298 82.97215271]
[-2.74415064 74.36153412]
[9.78202534 73.89263916]
[19.55791092 82.36534882]
[34.55714035 82.21334076]
[49.55636978 82.06132507]
[54.90822983 68.04856110]
[43.82912064 57.93651962]
[27.80169678 57.22857285]
[18.47914505 44.17217255]
[23.01292992 28.78307343]
[37.92512131 22.86647606]
[51.77635956 30.96108627]
[53.94116211 46.85741425]
[65.02027130 56.96945572]
[78.61845398 50.63783646]
[78.01057434 35.65015793]
[77.40268707 20.66247940]
[76.79479980 5.67480278]
[67.83782959 -3.65939975]
[67.67168427 -16.19324875]
[75.83827972 -25.16681862]
[75.53427124 -40.16373825]
[75.23027039 -55.16065598]
[74.92626953 -70.15757751]
[61.20417023 -76.93714905]
[52.21386337 -89.32395935]
[50.02125549 -104.47159576]
[55.13019180 -118.89926147]
[66.36667633 -129.29156494]
[81.14864349 -133.26043701]
[96.07930756 -129.89387512]
[107.72771454 -119.96546936]
[113.41714478 -105.75670624]
[111.84020233 -90.53264618]
[103.35926056 -77.79167938]
[89.92318726 -70.46157837]
[90.22718811 -55.46466064]
[90.53119659 -40.46774292]
[90.83519745 -25.47082329]
[100.72064972 -11.00134754]
[91.78247833 5.06691885]
[92.39036560 20.05459595]
[92.99824524 35.04227448]
[93.60613251 50.02995300]
[112.96244812 57.35235596]
[125.48899841 70.78569031]
[137.35063171 61.60410309]
[149.21226501 52.42251205]
[161.07389832 43.24092102]
[172.93553162 34.05933380]
[176.38058472 18.39053535]
[190.84187317 11.44425011]
[205.22592163 18.54907036]
[208.49853516 34.25478745]
[198.14924622 46.51332092]
[182.11712646 45.92096710]
[170.25549316 55.10255814]
[158.39385986 64.28414917]
[146.53222656 73.46573639]
[134.67057800 82.64733124]
[138.13633728 93.01538086]
[138.57008362 103.93874359]
[135.93734741 114.54895782]
[130.44743347 124.00246429]
[122.53682709 131.54768372]
[128.73031616 145.20933533]
[134.92381287 158.87098694]
[141.11729431 172.53262329]
[147.31079102 186.19427490]
[153.50427246 199.85592651]
[159.97337341 213.38925171]
[166.71542358 226.78868103]
[179.82987976 235.63862610]
[178.63870239 250.48553467]
[185.38075256 263.88494873]
[192.12280273 277.28439331]
[193.20332336 262.32336426]
[198.20993042 248.18356323]
[206.78465271 235.87606812]
[218.31431580 226.28092957]
[231.97451782 220.08424377]
[246.78848267 217.72911072]
[261.69692993 219.38392639]
[275.63381958 224.93037415]
[287.60260010 233.97183228]
[296.74743652 245.86181641]
[302.41445923 259.75012207]
[304.19842529 274.64364624]
[301.97174072 289.47747803]
[295.89367676 303.19085693]
[286.39883423 314.80325317]
[274.16610718 323.48431396]
[260.07022095 328.61325073]
[245.11911011 329.82339478]
[230.38186646 327.02816772]
[216.91224670 320.42745972]
[205.67341614 310.49322510]
[197.47084045 297.93972778]
[198.07872009 312.92739868]
[198.68659973 327.91506958]
[199.29449463 342.90274048]
[199.90237427 357.89041138]
[200.51025391 372.87811279]
[201.11814880 387.86578369]
[201.72602844 402.85345459]
[208.40928650 418.43453979]
[195.28723145 429.16989136]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 123]
[10 122]
[11 121]
[13 119]
[14 118]
[17 117]
[18 116]
[19 115]
[20 114]
[21 113]
[22 112]
[25 52]
[26 51]
[27 50]
[29 47]
[30 46]
[31 45]
[53 61]
[54 60]
[62 91]
[63 90]
[64 89]
[65 88]
[68 86]
[69 85]
[70 84]
[71 83]
[93 107]
[94 106]
[95 105]
[96 104]
[97 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
