%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCCCUGAGAAUCCAAAAUUCUCCGUGCCACCUAUCACACCCCAUCCUAAAGUAAGGUCAGxxxxxxxxxxACAUAUCAUACACAAACGCCUGAGCCCUAUCUAUUACUCUCAUCGCUACCUCCCUGACAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[151.59214783 85.26285553]
[138.20585632 92.03097534]
[124.81958008 98.79908752]
[111.43329620 105.56719971]
[101.21981049 116.55286407]
[95.44354248 130.39608765]
[89.66726685 144.23930359]
[92.30098724 160.42558289]
[79.43068695 170.58862305]
[64.29622650 164.27355957]
[62.46663666 147.97679138]
[75.82405090 138.46302795]
[81.60031891 124.61981201]
[87.37659454 110.77659607]
[75.87427521 101.14764404]
[64.37298584 91.51953888]
[51.76185989 99.64108276]
[39.15073013 107.76262665]
[26.53960419 115.88417053]
[13.92847538 124.00570679]
[1.31734753 132.12725830]
[-3.46965671 147.43946838]
[-18.47740936 153.10929871]
[-32.19324875 144.78732300]
[-34.09555435 128.85745239]
[-22.72504234 117.53971863]
[-6.80419445 119.51612091]
[5.80693340 111.39458466]
[18.41806221 103.27304077]
[31.02919006 95.15149689]
[43.64031982 87.02995300]
[56.25144577 78.90841675]
[54.54995728 71.60396576]
[49.44549179 49.69062805]
[34.54358673 47.97793961]
[19.64168549 46.26524734]
[9.24685764 57.78597641]
[-5.94137812 60.96356964]
[-20.08283615 54.57617950]
[-27.73983765 41.07988358]
[-25.96810913 25.66428947]
[-15.44891644 14.25700188]
[-0.22710244 11.24435902]
[13.84423351 17.78478241]
[21.35437584 31.36334610]
[36.25627899 33.07603455]
[51.15818024 34.78872681]
[97.62561798 54.77269363]
[104.66517639 92.18091583]
[118.05146027 85.41280365]
[131.43774414 78.64468384]
[144.82403564 71.87657166]
[142.59680176 69.58293152]
[140.67802429 66.79270935]
[139.15196228 63.54981613]
[130.38575745 51.37797928]
[121.61955261 39.20614243]
[105.98198700 36.91657639]
[96.61067200 24.19046211]
[99.06543732 8.57797813]
[111.88992310 -0.65826690]
[127.47557831 1.96142805]
[136.57571411 14.88284397]
[133.79139709 30.43993378]
[142.55760193 42.61177063]
[151.32380676 54.78360748]
[149.46623230 39.89907074]
[147.60864258 25.01453781]
[145.75106812 10.13000202]
[138.17236328 -2.81462336]
[133.46685791 -17.05745316]
[131.84243774 -31.96923447]
[133.37084961 -46.89116287]
[137.98460388 -61.16398239]
[145.47984314 -74.15711212]
[155.52542114 -85.29651642]
[167.67752075 -94.09004974]
[181.39927673 -100.14921570]
[196.08444214 -103.20631409]
[211.08422852 -103.12628937]
[225.73594666 -99.91266632]
[239.39225769 -93.70742798]
[251.44984436 -84.78472137]
[261.37600708 -73.53876495]
[268.73214722 -60.46639252]
[273.19335938 -46.14515686]
[274.56246948 -31.20777130]
[272.77902222 -16.31417084]
[267.92178345 -2.12236190]
[260.20541382 10.74065876]
[249.97074890 21.70659828]
[237.66999817 30.29097939]
[223.84660339 36.11454010]
[209.10952759 38.92014313]
[196.67575073 47.31066895]
[184.24195862 55.70119095]
[171.80816650 64.09172058]
[186.74247742 62.68941498]
[195.59144592 53.24751282]
[208.10278320 52.41949463]
[217.49641418 60.10499573]
[232.45666504 59.01368332]
[247.41691589 57.92237473]
[262.37716675 56.83106232]
[267.12390137 42.39026260]
[277.03939819 30.86846352]
[290.61154175 24.02266121]
[305.77072144 22.89678955]
[320.20526123 27.66253662]
[331.71401978 37.59315872]
[338.54196167 51.17430878]
[339.64788818 66.33496094]
[334.86315918 80.76322174]
[324.91741943 92.25889587]
[311.32730103 99.06896973]
[296.16519165 100.15495300]
[281.74322510 95.35124207]
[270.26065063 85.39038086]
[263.46847534 71.79131317]
[248.50822449 72.88262177]
[233.54797363 73.97393036]
[218.58772278 75.06524658]
[204.66113281 85.69774628]
[188.14477539 77.62372589]
[173.21046448 79.02602386]
[188.21029663 78.95244598]
[202.86325073 82.16039276]
[216.46020508 88.49462891]
[228.34317017 97.64860535]
[237.93705750 109.17932129]
[244.77755737 122.52875519]
[248.53366089 137.05087280]
[249.02357483 152.04286194]
[246.22358704 166.77922058]
[240.26922607 180.54676819]
[231.44860840 192.67924500]
[220.18864441 202.58949280]
[207.03422546 209.79791260]
[192.62197876 213.95567322]
[177.64935303 214.86154175]
[162.84095764 212.47167969]
[148.91343689 206.90174866]
[136.54080200 198.42131042]
[126.32181549 187.44076538]
[118.75102997 174.49151611]
[114.19483185 160.20022583]
[112.87370300 145.25851440]
[114.85159302 130.38948059]
[120.03277588 116.31272125]
[128.16651917 103.70944977]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 52]
[2 51]
[3 50]
[4 49]
[5 14]
[6 13]
[7 12]
[16 32]
[17 31]
[18 30]
[19 29]
[20 28]
[21 27]
[34 47]
[35 46]
[36 45]
[55 66]
[56 65]
[57 64]
[97 125]
[98 124]
[101 122]
[102 121]
[103 120]
[104 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
