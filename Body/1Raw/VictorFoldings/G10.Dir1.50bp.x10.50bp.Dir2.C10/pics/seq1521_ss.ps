%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUAUCCCUCUAGAGGAGCCUGUUCUGUAAUCGAUAAACCCCGAUCAACCUCACCACCUCUxxxxxxxxxxUAACCUACUGGGAGAACUCUCUGUGCUAGUAACCACGUUCUCCUGAUCAAAUAUCACUCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[108.89188385 278.94378662]
[108.57983398 263.94705200]
[108.26777649 248.95028687]
[107.95571899 233.95353699]
[107.64366150 218.95678711]
[107.33160400 203.96003723]
[107.01954651 188.96327209]
[106.70749664 173.96652222]
[106.39543915 158.96977234]
[104.21859741 144.12857056]
[100.21086121 129.67387390]
[96.20311737 115.21918488]
[92.14147949 129.65882874]
[80.09078217 138.59083557]
[65.09406281 138.27731323]
[53.42719269 128.84947205]
[49.97257233 114.25270844]
[56.17590714 100.59552765]
[69.44120026 93.59323883]
[84.21824646 96.17679596]
[71.20193481 88.72188568]
[56.97515488 83.96807098]
[42.74837875 79.21425629]
[28.52159691 74.46044159]
[14.29481888 69.70662689]
[5.63908529 82.07425690]
[-6.13902330 91.49224091]
[-20.07964325 97.20399475]
[-35.04974747 98.75454712]
[-49.83524704 96.02672577]
[-63.23943329 89.25000763]
[-74.17986298 78.98123169]
[-81.77573395 66.05883026]
[-85.41883087 51.53439713]
[-84.82220459 36.58711243]
[-99.04898834 31.83329582]
[-105.69627380 32.79301834]
[-111.00527191 30.54672813]
[-113.76148987 26.57447433]
[-127.77819824 21.23296165]
[-141.79490662 15.89144897]
[-155.81163025 10.54993629]
[-168.73068237 19.14514542]
[-184.23312378 18.47154999]
[-196.35795593 8.78816032]
[-200.44293213 -6.18156338]
[-194.91729736 -20.68145561]
[-181.90576172 -29.13601303]
[-166.41152954 -28.29428482]
[-154.39245605 -18.47993279]
[-150.47010803 -3.46677685]
[-136.45339966 1.87473571]
[-122.43669128 7.21624804]
[-108.41997528 12.55776119]
[-94.29517365 17.60651779]
[-80.06838989 22.36033249]
[-71.55933380 10.05695152]
[-59.91641617 0.64027429]
[-46.07783890 -5.11990404]
[-31.16183662 -6.74887228]
[-16.37630463 -4.10611773]
[-2.92100382 2.60259867]
[8.10979843 12.84123516]
[15.81632614 25.78629112]
[19.56667709 40.39304352]
[19.04863358 55.47984314]
[33.27541351 60.23365784]
[47.50219345 64.98747253]
[61.72896957 69.74128723]
[75.95574951 74.49510193]
[66.30781555 63.00957489]
[60.39717102 49.22319412]
[58.72979355 34.31615448]
[61.44842148 19.56457520]
[68.32032013 6.23127270]
[78.75722504 -4.54235172]
[91.86568451 -11.83401871]
[106.52353668 -15.01952076]
[121.47599030 -13.82616425]
[135.44303894 -8.35610485]
[147.22901917 0.92239070]
[155.82501221 13.21503258]
[160.49513245 27.46950531]
[160.83959961 42.46554947]
[156.82891846 56.91942215]
[148.80644226 69.59379578]
[137.45890808 79.40367889]
[123.75776672 85.50928497]
[108.87587738 87.38795471]
[94.08396912 84.87779236]
[108.69286346 88.28076935]
[123.18845367 84.42360687]
[137.68405151 80.56644440]
[152.17965698 76.70928955]
[166.67524719 72.85212708]
[181.17083740 68.99497223]
[195.66644287 65.13780975]
[184.43997192 55.18962479]
[185.00517273 40.20027924]
[196.94891357 31.12576675]
[211.54130554 34.59882355]
[218.11648560 48.08092880]
[211.86901855 61.71732712]
[226.68678284 59.38622284]
[241.50453186 57.05511856]
[248.44332886 43.17589951]
[262.23040771 36.05578995]
[277.56436157 38.43262100]
[288.54898071 49.39245224]
[290.96044922 64.72100067]
[283.87149048 78.52413177]
[270.00799561 85.49426270]
[254.70071411 82.95122528]
[243.83564758 71.87287903]
[229.01788330 74.20397949]
[214.20011902 76.53508759]
[199.52360535 79.63340759]
[185.02799988 83.49056244]
[170.53240967 87.34772491]
[156.03680420 91.20488739]
[141.54121399 95.06204224]
[127.04561615 98.91920471]
[112.55001831 102.77636719]
[112.55809021 105.53867340]
[111.93892670 108.39856720]
[110.65780640 111.21144867]
[114.66555023 125.66613770]
[118.67328644 140.12081909]
[123.83521271 126.03698730]
[134.51254272 115.50157928]
[148.66418457 110.52854919]
[163.58491516 112.06855011]
[176.42250061 119.82717896]
[184.72290039 132.32130432]
[186.89941406 147.16256714]
[182.53599548 161.51388550]
[172.46672058 172.63188171]
[158.61645508 178.39123535]
[143.63281250 177.69099426]
[130.38005066 170.66500854]
[121.39218903 158.65771484]
[121.70424652 173.65446472]
[122.01630402 188.65121460]
[122.32836151 203.64797974]
[122.64041901 218.64472961]
[122.95246887 233.64147949]
[123.26452637 248.63822937]
[123.57658386 263.63497925]
[123.88864136 278.63174438]
[126.47963715 297.83947754]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 128]
[11 127]
[12 126]
[20 90]
[21 70]
[22 69]
[23 68]
[24 67]
[25 66]
[35 56]
[36 55]
[39 54]
[40 53]
[41 52]
[42 51]
[91 123]
[92 122]
[93 121]
[94 120]
[95 119]
[96 118]
[97 117]
[103 116]
[104 115]
[105 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
