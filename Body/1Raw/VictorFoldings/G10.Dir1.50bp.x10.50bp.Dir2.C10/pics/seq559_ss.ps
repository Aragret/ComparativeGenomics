%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAUUUUCCCCUCCCACUCCCAUACUACUAAUCUCAUCAAUACAACCCCCGCCCAUCCUACCCxxxxxxxxxxAUUCAUUGCCCCCACAAUCCUAGGCCUACCCGCCGCAGUACUGAUCAUUCUAUUUCCCCCUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-58.24028778 152.20184326]
[-72.68226624 156.25515747]
[-87.12423706 160.30848694]
[-98.32023621 171.48703003]
[-112.66481781 167.47674561]
[-127.10678864 171.53007507]
[-141.54876709 175.58338928]
[-155.99073792 179.63670349]
[-170.43270874 183.69001770]
[-184.78958130 188.03518677]
[-199.05541992 192.67044067]
[-213.32127380 197.30569458]
[-227.58711243 201.94096375]
[-241.85296631 206.57621765]
[-239.83045959 221.48088074]
[-240.50199890 236.50715637]
[-243.84599304 251.17199707]
[-249.75494385 265.00396729]
[-258.03894043 277.55847168]
[-268.43161011 288.43191528]
[-280.59896851 297.27474976]
[-294.14978027 303.80273438]
[-308.64852905 307.80599976]
[-323.62911987 309.15588379]
[-338.60995483 307.80895996]
[-353.10949707 303.80856323]
[-366.66162109 297.28326416]
[-378.83068848 288.44284058]
[-389.22555542 277.57144165]
[-397.51199341 265.01858521]
[-403.42367554 251.18775940]
[-406.77056885 236.52357483]
[-407.44509888 221.49743652]
[-405.42553711 206.59237671]
[-400.77682495 192.28750610]
[-393.64837646 179.04267883]
[-384.26937866 167.28367615]
[-372.94134521 157.38847351]
[-360.02835083 149.67518616]
[-345.94555664 144.39175415]
[-331.14566040 141.70800781]
[-316.10437012 141.71023560]
[-301.30526733 144.39836121]
[-287.22402954 149.68597412]
[-274.31335449 157.40309143]
[-262.98822021 167.30163574]
[-253.61271667 179.06343079]
[-246.48822021 192.31036377]
[-232.22236633 187.67510986]
[-217.95652771 183.03985596]
[-203.69067383 178.40460205]
[-189.42483521 173.76934814]
[-186.47589111 169.94477844]
[-181.06915283 167.96667480]
[-174.48602295 169.24803162]
[-160.04405212 165.19471741]
[-145.60208130 161.14140320]
[-131.16011047 157.08808899]
[-116.71813202 153.03477478]
[-106.55511475 142.14614868]
[-91.17755127 145.86650085]
[-76.73558044 141.81318665]
[-62.29360199 137.75987244]
[-65.25513458 121.34856415]
[-66.56143188 104.72341919]
[-66.19940186 88.05096436]
[-64.17267609 71.49819183]
[-60.50155640 55.23090363]
[-55.22280884 39.41203308]
[-48.38930511 24.20002747]
[-40.06949615 9.74725533]
[-30.34671402 -3.80152130]
[-19.31834412 -16.31059456]
[-7.09485102 -27.65466881]
[6.20133352 -37.72012329]
[20.43703079 -46.40613174]
[35.46965027 -53.62570190]
[51.14862442 -59.30651093]
[67.31690979 -63.39166641]
[83.81255341 -65.84024811]
[100.47033691 -66.62773132]
[117.12340546 -65.74622345]
[133.60496521 -63.20455933]
[149.74992371 -59.02819443]
[165.39657593 -53.25896072]
[180.38819885 -45.95464325]
[194.57464600 -37.18840790]
[203.63555908 -49.14248276]
[212.69645691 -61.09655380]
[221.75737000 -73.05062866]
[219.35389709 -88.67108917]
[228.76695251 -101.36636353]
[244.41194153 -103.60456085]
[257.00698853 -94.05780792]
[259.07965088 -78.39002228]
[249.40026855 -65.89662170]
[233.71145630 -63.98971558]
[224.65054321 -52.03564072]
[215.58963013 -40.08156967]
[206.52871704 -28.12749481]
[221.07981873 -14.47576046]
[233.89483643 0.81736851]
[244.79002380 17.53261185]
[253.60916138 35.43030167]
[260.22579956 54.25381470]
[274.82019043 50.78909683]
[289.41455078 47.32438278]
[297.49197388 33.74016953]
[312.82943726 29.92730904]
[326.32748413 38.14789963]
[329.97796631 53.52481461]
[321.61514282 66.93519592]
[306.20050049 70.42291260]
[292.87927246 61.91875458]
[278.28488159 65.38346863]
[263.69052124 68.84819031]
[265.56973267 81.24659729]
[266.51116943 93.75121307]
[266.50958252 106.29122925]
[265.56494141 118.79560852]
[263.68258667 131.19352722]
[260.87316895 143.41479492]
[257.15264893 155.39016724]
[252.54203796 167.05181885]
[247.06750488 178.33372498]
[240.76000977 189.17196655]
[233.65531921 199.50517273]
[225.79362488 209.27481079]
[217.21949768 218.42555237]
[207.98146057 226.90557861]
[198.13186646 234.66683960]
[187.72648621 241.66540527]
[176.82424927 247.86161804]
[165.48689270 253.22038269]
[153.77865601 257.71136475]
[141.76582336 261.30914307]
[129.51644897 263.99328613]
[117.09990692 265.74865723]
[104.58651733 266.56524658]
[92.04714203 266.43850708]
[79.55281067 265.36907959]
[67.17429352 263.36306763]
[54.98168182 260.43182373]
[43.04404449 256.59194946]
[31.42898369 251.86518860]
[20.20228767 246.27832031]
[9.42753887 239.86297607]
[-0.83423716 232.65548706]
[-10.52492142 224.69668579]
[-19.58963013 216.03164673]
[-27.97702217 206.70944214]
[-35.63959503 196.78286743]
[-42.53394699 186.30813599]
[-48.62103653 175.34460449]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 63]
[2 62]
[3 61]
[5 59]
[6 58]
[7 57]
[8 56]
[9 55]
[10 52]
[11 51]
[12 50]
[13 49]
[14 48]
[87 100]
[88 99]
[89 98]
[90 97]
[105 116]
[106 115]
[107 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
