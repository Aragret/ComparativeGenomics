%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCAUCCCUGAGAAUCCAAAAUUCUCCGUGCCACCUAUCACACCCCAUCCUAAAGUAAGGxxxxxxxxxxUACCUCUUUACGGACUCCACUUAUGACUCCCUAAAGCCCAUGUCGAAGCCCCCAUCGCUGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 318.62097168]
[92.50000000 303.62097168]
[92.50000000 288.62097168]
[92.50000000 273.62097168]
[92.50000000 258.62097168]
[92.50000000 243.62097168]
[92.50000000 228.62097168]
[92.50000000 213.62097168]
[92.50000000 198.62097168]
[92.50000000 183.62097168]
[84.30316925 182.47621155]
[76.25888062 180.52996826]
[68.44530487 177.80113220]
[60.93837738 174.31625366]
[53.81103897 170.10917664]
[47.13256454 165.22077942]
[40.96784210 159.69857788]
[35.37678909 153.59623718]
[30.41373634 146.97305298]
[26.12691307 139.89338684]
[12.34453201 145.81335449]
[-1.43784964 151.73332214]
[-15.22023106 157.65327454]
[-29.00261307 163.57324219]
[-42.78499222 169.49320984]
[-50.04269028 183.80073547]
[-65.78238678 186.90580750]
[-77.92993927 176.42646790]
[-77.16678619 160.40156555]
[-64.07834625 151.12405396]
[-48.70495605 155.71083069]
[-34.92257690 149.79086304]
[-21.14019394 143.87089539]
[-7.35781288 137.95094299]
[6.42456865 132.03097534]
[20.20694923 126.11100769]
[16.11604309 103.49246979]
[18.31262589 80.61215210]
[4.08584738 75.85833740]
[-10.14093208 71.10452271]
[-21.58659554 81.34621429]
[-36.62295914 84.47724915]
[-51.20531845 79.65537262]
[-61.41108704 68.17766571]
[-64.49496460 53.13156128]
[-59.62741089 38.56438828]
[-48.11776733 28.39464760]
[-33.06207275 25.35794258]
[-18.51022911 30.27113533]
[-8.37661362 41.81259918]
[-5.38711691 56.87774277]
[8.83966255 61.63155746]
[23.06644058 66.38536835]
[32.15954971 50.53901672]
[44.46523666 37.03488159]
[59.40077209 26.51246071]
[76.25888062 19.47003555]
[94.24124908 16.24110413]
[94.55330658 1.24435103]
[94.86536407 -13.75240231]
[95.02140045 -28.75159073]
[95.02140045 -43.75159073]
[95.02140045 -58.75159073]
[95.02140045 -73.75159454]
[95.02140045 -88.75159454]
[92.00448608 -94.75206757]
[92.45245361 -100.49929810]
[95.34644318 -104.37232208]
[95.97042084 -119.35933685]
[96.59439850 -134.34635925]
[83.10600281 -141.48959351]
[74.05962372 -153.78292847]
[71.25144196 -168.78549194]
[75.23900604 -183.51850891]
[85.23059845 -195.05674744]
[99.24236298 -201.10926819]
[114.49227142 -200.47434998]
[127.95243073 -193.27804565]
[136.95033264 -180.94918823]
[139.69941711 -165.93568420]
[135.65385437 -151.21847534]
[125.61690521 -139.71968079]
[111.58141327 -133.72238159]
[110.95743561 -118.73535919]
[110.33345795 -103.74834442]
[110.02140045 -88.75159454]
[110.02140045 -73.75159454]
[110.02140045 -58.75159073]
[110.02140045 -43.75159073]
[110.02140045 -28.75159073]
[113.18698120 -22.01922417]
[109.86212158 -13.44034672]
[109.55006409 1.55640733]
[109.23800659 16.55316162]
[128.31265259 20.96134186]
[145.84779358 29.66725349]
[160.88996887 42.19751358]
[172.62124634 57.87078094]
[180.40373230 75.83483124]
[183.81427002 95.11286163]
[198.80696106 95.58090210]
[213.79966736 96.04894257]
[223.75537109 87.78227997]
[236.27243042 88.51845551]
[244.63607788 97.31373596]
[259.61578369 98.09358215]
[274.59548950 98.87342072]
[281.10330200 85.13599396]
[292.37619019 74.93840790]
[306.69506836 69.83570862]
[321.87649536 70.60603333]
[335.60534668 77.13190460]
[345.78808594 88.41817474]
[350.87194824 102.74377441]
[350.08166504 117.92415619]
[343.53771973 131.64440918]
[332.23806763 141.81231689]
[317.90579224 146.87731934]
[302.72647095 146.06706238]
[289.01483154 139.50509644]
[278.86181641 128.19206238]
[273.81564331 113.85313416]
[258.83593750 113.07329559]
[243.85623169 112.29344940]
[228.71417236 121.10924530]
[213.33161926 111.04164124]
[198.33892822 110.57360077]
[183.34622192 110.10556030]
[181.83428955 118.75802612]
[179.42665100 127.20518494]
[176.14965820 135.35456848]
[172.03916931 143.11698914]
[167.14016724 150.40747070]
[161.50630188 157.14622498]
[155.19921875 163.25947571]
[148.28796387 168.68032837]
[140.84817505 173.34945679]
[132.96127319 177.21574402]
[124.71360779 180.23686218]
[116.19543457 182.37974548]
[107.50000000 183.62097168]
[107.50000000 198.62097168]
[107.50000000 213.62097168]
[107.50000000 228.62097168]
[107.50000000 243.62097168]
[107.50000000 258.62097168]
[107.50000000 273.62097168]
[107.50000000 288.62097168]
[107.50000000 303.62097168]
[107.50000000 318.62097168]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[20 36]
[21 35]
[22 34]
[23 33]
[24 32]
[25 31]
[38 53]
[39 52]
[40 51]
[58 94]
[59 93]
[60 92]
[61 90]
[62 89]
[63 88]
[64 87]
[65 86]
[68 85]
[69 84]
[70 83]
[100 128]
[101 127]
[102 126]
[105 124]
[106 123]
[107 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
