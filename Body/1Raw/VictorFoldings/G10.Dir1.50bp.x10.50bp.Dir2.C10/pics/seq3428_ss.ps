%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCGCUGACGCCAUAAAACUCUUCACCAAAGAGCCCCUAAAACCCGCCACAUCUACCAUCACxxxxxxxxxxCUCUACACUUAUCAUCUUCACAAUUCUAAUUCUACUGACUAUCCUAGAAAUCGCUGUCGCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[228.65765381 49.18044281]
[214.72692871 54.74237823]
[205.77589417 66.64733887]
[190.09051514 64.57864380]
[176.15979004 70.14057922]
[162.22908020 75.70252228]
[148.60209656 81.97192383]
[135.31475830 88.93228149]
[122.02742004 95.89263916]
[108.74008179 102.85299683]
[120.31533813 119.29442596]
[116.81002045 143.72108459]
[107.89386749 155.78352356]
[106.58444214 172.13031006]
[91.65886688 178.92436218]
[78.47129059 169.17654419]
[80.58796692 152.91456604]
[95.83143616 146.86737061]
[104.74758911 134.80493164]
[100.93110657 128.34858704]
[88.01840210 135.98155212]
[75.10570526 143.61453247]
[62.19288254 151.24728394]
[54.56034088 138.33433533]
[67.47274017 130.70182800]
[80.38543701 123.06886292]
[93.29813385 115.43589020]
[89.48165131 108.97953796]
[74.61505127 110.97560120]
[59.74845123 112.97165680]
[44.88185120 114.96771240]
[30.01525307 116.96376801]
[19.17775345 128.79289246]
[3.18280649 127.55142212]
[-5.69963121 114.19171143]
[-0.65571404 98.96218872]
[14.44529629 93.54563141]
[28.01919746 102.09716797]
[42.88579559 100.10111237]
[57.75239563 98.10505676]
[72.61899567 96.10900116]
[87.48558807 94.11294556]
[101.77972412 89.56565094]
[115.06706238 82.60529327]
[128.35440063 75.64494324]
[141.64173889 68.68458557]
[128.48876953 61.47354126]
[125.71872711 46.73152924]
[135.35710144 35.23796844]
[150.35624695 35.39699936]
[159.74874878 47.09233475]
[156.66714478 61.77180481]
[170.59785461 56.20986557]
[184.52857971 50.64793015]
[194.47604370 38.34513855]
[209.16499329 40.81166458]
[223.09571838 35.24972534]
[219.33992004 23.31173325]
[216.40490723 11.14610672]
[214.30424500 -1.19079578]
[213.04762268 -13.64182186]
[212.64085388 -26.14929390]
[213.08578491 -38.65527344]
[214.38034058 -51.10182953]
[216.51847839 -63.43131256]
[219.49028015 -75.58661652]
[223.28195190 -87.51143646]
[227.87591553 -99.15055084]
[233.25085449 -110.45004272]
[239.38183594 -121.35758972]
[246.24046326 -131.82267761]
[253.79493713 -141.79684448]
[262.01022339 -151.23390198]
[270.84829712 -160.09016418]
[280.26812744 -168.32461548]
[290.22610474 -175.89912415]
[300.67608643 -182.77864075]
[311.56967163 -188.93130493]
[322.85632324 -194.32865906]
[334.48382568 -198.94569397]
[346.39822388 -202.76107788]
[358.54440308 -205.75715637]
[370.86602783 -207.92007446]
[383.30606079 -209.23982239]
[395.80688477 -209.71032715]
[408.31051636 -209.32943726]
[420.75912476 -208.09893799]
[433.09500122 -206.02456665]
[445.26101685 -203.11593628]
[457.20080566 -199.38656616]
[468.85910034 -194.85374451]
[480.18191528 -189.53849792]
[491.11676025 -183.46546936]
[501.61303711 -176.66281128]
[511.62213135 -169.16206360]
[521.09765625 -160.99800110]
[529.99584961 -152.20843506]
[538.27532959 -142.83410645]
[545.89794922 -132.91847229]
[552.82830811 -122.50746918]
[559.03436279 -111.64933777]
[564.48736572 -100.39438629]
[569.16210938 -88.79476166]
[573.03692627 -76.90420532]
[576.09393311 -64.77780914]
[578.31903076 -52.47174835]
[579.70184326 -40.04302979]
[580.23602295 -27.54923248]
[579.91912842 -15.04822826]
[578.75268555 -2.59792376]
[576.74206543 9.74400997]
[591.32580566 13.25317764]
[605.90954590 16.76234436]
[620.49328613 20.27151108]
[635.07702637 23.78067970]
[645.59680176 12.59005070]
[660.30712891 8.17393208]
[675.25097656 11.72023582]
[686.40863037 22.27502441]
[690.77856445 36.99911118]
[687.18548584 51.93179703]
[676.59576416 63.05625534]
[661.85803223 67.38006592]
[646.93670654 63.74015045]
[635.84545898 53.11562347]
[631.56787109 38.36442947]
[616.98413086 34.85526276]
[602.40039062 31.34609413]
[587.81665039 27.83692741]
[573.23291016 24.32775879]
[567.21630859 42.03507233]
[559.43054199 59.03962326]
[549.95623779 75.16517639]
[538.89129639 90.24459839]
[526.35040283 104.12156677]
[512.46325684 116.65222168]
[497.37374878 127.70664215]
[481.23809814 137.17018127]
[464.22338867 144.94468689]
[446.50592041 150.94947815]
[428.26916504 155.12222290]
[409.70205688 157.41955566]
[390.99694824 157.81755066]
[372.34762573 156.31195068]
[353.94735718 152.91821289]
[335.98675537 147.67137146]
[318.65197754 140.62567139]
[302.12265015 131.85397339]
[286.57009888 121.44706726]
[272.15554810 109.51264954]
[259.02844238 96.17426300]
[247.32482910 81.57002258]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 57]
[2 56]
[4 54]
[5 53]
[6 52]
[7 46]
[8 45]
[9 44]
[10 43]
[12 19]
[13 18]
[28 42]
[29 41]
[30 40]
[31 39]
[32 38]
[111 130]
[112 129]
[113 128]
[114 127]
[115 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
