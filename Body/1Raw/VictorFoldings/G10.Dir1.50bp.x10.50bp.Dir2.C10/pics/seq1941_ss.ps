%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCAGACAACCUUAGCCAAACCAUUUACCCAAAUAAAGUAUAGGCGAUAGAAAUUGAAACCUGxxxxxxxxxxGAGUCCUAGGCACAGCUCUAAGCCUCCUUAUUCGAGCCGAGCUGGGCCAGCCAGGCAACCUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[88.10510254 256.16989136]
[88.10510254 241.16989136]
[88.10510254 226.16989136]
[88.10510254 211.16989136]
[88.10510254 196.16989136]
[88.10510254 181.16989136]
[88.10510254 166.16989136]
[88.10510254 151.16989136]
[88.10510254 136.16989136]
[88.10510254 121.16988373]
[85.93271637 114.74999237]
[86.02893829 108.74533081]
[88.01551056 103.83229065]
[91.33331299 100.51802063]
[78.00289154 93.64052582]
[64.67247772 86.76303101]
[56.62264252 99.43215179]
[47.46955490 111.32867432]
[37.28691101 122.35681915]
[26.15669441 132.42779541]
[14.16852188 141.46051025]
[1.41891670 149.38223267]
[-11.98946667 156.12919617]
[-25.94866943 161.64706421]
[-40.34629822 165.89141846]
[-55.06642914 168.82807922]
[-69.99054718 170.43339539]
[-84.99848175 170.69445801]
[-99.96939850 169.60916138]
[-114.78275299 167.18621826]
[-129.31929016 163.44517517]
[-143.46194458 158.41612244]
[-157.09687805 152.13957214]
[-170.11427307 144.66604614]
[-182.40934753 136.05572510]
[-193.88308716 126.37794495]
[-204.44311523 115.71060944]
[-214.00440979 104.13961792]
[-222.48999023 91.75813293]
[-229.83152771 78.66584778]
[-235.96990967 64.96816254]
[-240.85572815 50.77538300]
[-244.44963074 36.20177460]
[-246.72268677 21.36467552]
[-247.65658569 6.38355112]
[-247.24382019 -8.62097740]
[-245.48770142 -23.52809906]
[-242.40237427 -38.21779251]
[-238.01269531 -52.57177353]
[-232.35398865 -66.47447968]
[-225.47181702 -79.81397247]
[-217.42158508 -92.48284149]
[-208.26814270 -104.37908173]
[-198.08515930 -115.40691376]
[-186.95463562 -125.47755432]
[-174.96618652 -134.50990295]
[-162.21633911 -142.43124390]
[-148.80775452 -149.17779541]
[-134.84838867 -154.69523621]
[-120.45062256 -158.93914795]
[-105.73040009 -161.87536621]
[-90.80623627 -163.48022461]
[-75.79829407 -163.74082947]
[-60.82741165 -162.65505981]
[-46.01412582 -160.23167419]
[-31.47770691 -156.49018860]
[-17.33519745 -151.46070862]
[-3.70046616 -145.18373108]
[9.31670666 -137.70980835]
[21.61151123 -129.09912109]
[33.08495712 -119.42098999]
[43.64466095 -108.75333405]
[53.20560455 -97.18204498]
[61.69080353 -84.80030060]
[69.03194427 -71.70778656]
[75.16991425 -58.00992203]
[80.05529785 -43.81698990]
[83.64875031 -29.24327087]
[85.92134857 -14.40610313]
[86.85479736 0.57504886]
[86.44156647 15.57956409]
[84.68499756 30.48663330]
[81.59922791 45.17623138]
[77.20909882 59.53008270]
[71.54996490 73.43261719]
[84.88038635 80.31010437]
[98.21080780 87.18759918]
[113.11769867 88.85627747]
[127.63885498 85.09648895]
[135.21525574 79.88694763]
[142.49244690 81.41083527]
[157.08682251 77.94611359]
[171.68118286 74.48139954]
[183.32101440 63.76575089]
[197.49128723 68.35406494]
[212.08566284 64.88934326]
[226.68003845 61.42462921]
[241.27441406 57.95991516]
[255.86877441 54.49519730]
[270.46316528 51.03048325]
[284.72900391 46.39522552]
[298.57260132 40.61988449]
[312.41619873 34.84453964]
[326.25982666 29.06919670]
[335.77447510 15.71242237]
[352.07110596 17.54310226]
[358.38516235 32.67798996]
[348.22125244 45.54761124]
[332.03515625 42.91280365]
[318.19155884 48.68814468]
[304.34796143 54.46348953]
[290.50433350 60.23883057]
[304.56442261 65.46515656]
[312.99707031 77.87041473]
[312.68392944 92.86714172]
[303.74078369 104.90958405]
[289.47482300 109.54444885]
[275.16156006 105.05777740]
[266.09399414 93.10872650]
[265.62536621 78.11605072]
[273.92785645 65.62485504]
[259.33349609 69.08956909]
[244.73912048 72.55429077]
[230.14474487 76.01900482]
[215.55036926 79.48371887]
[200.95600891 82.94843292]
[190.36006165 93.41626740]
[175.14590454 89.07577515]
[160.55152893 92.54048920]
[145.95715332 96.00520325]
[131.39865112 99.61764526]
[116.87748718 103.37743378]
[131.42353821 107.03971863]
[146.32617188 105.33335876]
[160.39241028 110.54304504]
[170.58824158 121.54508972]
[174.71449280 135.96640015]
[171.88113403 150.69636536]
[162.69932556 162.55783081]
[149.14952087 168.99232483]
[134.15434265 168.61195374]
[120.94817352 161.49877930]
[112.37952423 149.18707275]
[110.29648590 134.33361816]
[103.10510254 121.16988373]
[103.10510254 136.16989136]
[103.10510254 151.16989136]
[103.10510254 166.16989136]
[103.10510254 181.16989136]
[103.10510254 196.16989136]
[103.10510254 211.16989136]
[103.10510254 226.16989136]
[103.10510254 241.16989136]
[103.10510254 256.16989136]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[14 87]
[15 86]
[16 85]
[88 132]
[89 131]
[91 130]
[92 129]
[93 128]
[95 126]
[96 125]
[97 124]
[98 123]
[99 122]
[100 121]
[101 112]
[102 111]
[103 110]
[104 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
