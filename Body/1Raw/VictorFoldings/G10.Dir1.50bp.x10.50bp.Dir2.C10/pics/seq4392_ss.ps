%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACCCUAGCAUUACUUAUAUGAUAUGUCUCCAUACCCAUUACAAUCUCCAGCAUUCCCCCxxxxxxxxxxUGAGGCAACCAGCCAGAACGCCUGAACGCAGGCACAUACUUCCUAUUCUACACCCUAGUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[100.92094421 500.54937744]
[100.92094421 485.54937744]
[100.92094421 470.54937744]
[100.92094421 455.54937744]
[100.92094421 440.54937744]
[100.92094421 425.54937744]
[100.92094421 410.54937744]
[100.92094421 395.54937744]
[100.92094421 380.54937744]
[100.92094421 365.54937744]
[86.19113159 362.81573486]
[72.21076202 357.42047119]
[59.45648193 349.54595947]
[48.36343384 339.45919800]
[39.31040573 327.50256348]
[32.60687637 314.08239746]
[28.48246574 299.65509033]
[27.07904243 284.71160889]
[28.44586563 269.76071167]
[32.53784180 255.31173706]
[39.21702194 241.85717773]
[48.25724792 229.85589600]
[59.35180664 219.71749878]
[72.12384033 211.78834534]
[86.13915253 206.33973694]
[100.92094421 203.55857849]
[100.92094421 188.55857849]
[100.14109802 173.57887268]
[98.58351898 158.65995789]
[97.02593994 143.74104309]
[95.46835327 128.82212830]
[73.17813873 120.92068481]
[61.30153275 96.50733185]
[46.30883408 96.03929138]
[31.31613922 95.57125092]
[16.32344246 95.10321045]
[2.13608789 103.32823181]
[-11.94386292 94.92066956]
[-11.43216419 78.52951050]
[3.14479375 71.01656342]
[16.79148483 80.11051178]
[31.78418159 80.57855225]
[46.77687836 81.04659271]
[61.76957321 81.51464081]
[67.20898438 76.35103607]
[54.27605057 68.75241089]
[39.55429459 65.87665558]
[30.49908257 53.91826630]
[31.72269821 38.96825409]
[42.60189056 28.64143944]
[57.59532928 28.19779205]
[69.06608582 37.86328888]
[71.17183685 52.71333313]
[78.08781433 66.02382660]
[83.52722168 60.86022568]
[83.83927917 45.86347198]
[84.15133667 30.86672020]
[76.04762268 43.48931503]
[65.38286591 54.03743744]
[52.67192459 62.00185394]
[38.52845001 66.99806976]
[23.63525200 68.78486633]
[8.71133423 67.27599335]
[-5.52281523 62.54429626]
[-18.38001060 54.81820297]
[-29.23954201 44.47071075]
[-37.57713699 32.00136948]
[-42.99028397 18.01216316]
[-45.21764374 3.17845702]
[-44.15169144 -11.78361988]
[-39.84388351 -26.15173721]
[-32.50219727 -39.23224258]
[-22.48106003 -50.39364243]
[-10.26426983 -59.09709167]
[3.55837822 -64.92241669]
[18.31956482 -67.58837891]
[33.30665970 -66.96628571]
[47.79612350 -63.08615494]
[61.08844757 -56.13531494]
[72.54190826 -46.44933701]
[81.60356903 -34.49583435]
[87.83596039 -20.85188293]
[90.93818665 -6.17618322]
[90.76074219 8.82067585]
[98.75066376 -3.87425375]
[106.74057770 -16.56918335]
[104.59866333 -32.46860886]
[115.79750061 -43.95623779]
[131.74629211 -42.21974564]
[140.21051025 -28.59121895]
[134.69709778 -13.52529716]
[119.43550873 -8.57926750]
[111.44558716 4.11566257]
[103.45567322 16.81059265]
[99.14808655 31.17877579]
[98.83603668 46.17552948]
[98.52397919 61.17228317]
[111.13960266 66.15694427]
[120.22222137 74.68205261]
[125.01195526 84.97824097]
[139.42416382 80.82035065]
[153.83638000 76.66246033]
[168.24859619 72.50457764]
[182.66081238 68.34668732]
[193.63749695 56.16290283]
[209.61878967 59.84127808]
[214.16450500 75.59781647]
[202.59840393 87.22354126]
[186.81871033 82.75890350]
[172.40649414 86.91679382]
[157.99427795 91.07467651]
[143.58206177 95.23256683]
[129.16984558 99.39045715]
[124.19571686 116.30394745]
[110.38726807 127.26454926]
[111.94484711 142.18347168]
[113.50243378 157.10237122]
[115.06001282 172.02128601]
[126.63200378 162.47723389]
[141.35139465 165.36500549]
[148.45951843 178.57389832]
[142.76089478 192.44926453]
[128.42076111 196.84933472]
[115.92094421 188.55857849]
[115.92094421 203.55857849]
[130.70274353 206.33973694]
[144.71804810 211.78834534]
[157.49008179 219.71749878]
[168.58464050 229.85589600]
[177.62486267 241.85717773]
[184.30404663 255.31173706]
[188.39602661 269.76071167]
[189.76284790 284.71160889]
[188.35942078 299.65509033]
[184.23501587 314.08239746]
[177.53147888 327.50256348]
[168.47845459 339.45919800]
[157.38540649 349.54595947]
[144.63113403 357.42047119]
[130.65075684 362.81573486]
[115.92094421 365.54937744]
[115.92094421 380.54937744]
[115.92094421 395.54937744]
[115.92094421 410.54937744]
[115.92094421 425.54937744]
[115.92094421 440.54937744]
[115.92094421 455.54937744]
[115.92094421 470.54937744]
[115.92094421 485.54937744]
[115.92094421 500.54937744]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[26 125]
[27 124]
[28 118]
[29 117]
[30 116]
[31 115]
[33 44]
[34 43]
[35 42]
[36 41]
[55 97]
[56 96]
[57 95]
[84 94]
[85 93]
[86 92]
[100 113]
[101 112]
[102 111]
[103 110]
[104 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
