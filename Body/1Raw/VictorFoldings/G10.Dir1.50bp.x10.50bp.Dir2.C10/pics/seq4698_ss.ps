%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACUCAUCACAGCGCUAAGCUCGCACUGAUUUUUUACCUGAGUAGGCCUAGAAAUAAACAUxxxxxxxxxxAACGCAGGCACAUACUUCCUAUUCUACACCCUAGUAGGCUCCCUUCCCCUACUCAUCGCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 251.90452576]
[92.50000000 236.90452576]
[92.50000000 221.90452576]
[92.50000000 206.90452576]
[92.50000000 191.90452576]
[92.50000000 176.90452576]
[92.50000000 161.90452576]
[92.50000000 146.90452576]
[92.50000000 131.90452576]
[92.50000000 116.90452576]
[80.60762024 107.76279449]
[66.11202240 111.61994934]
[51.61642838 115.47711182]
[37.12083054 119.33427429]
[22.62523460 123.19142914]
[8.55371475 128.38684082]
[-4.97047567 134.87501526]
[-18.49466515 141.36317444]
[-23.82005501 156.00141907]
[-37.62793350 162.38867188]
[-51.55043411 157.22152710]
[-65.07462311 163.70968628]
[-78.59881592 170.19786072]
[-82.30448914 185.39001465]
[-94.93907166 194.60421753]
[-110.53689575 193.48977661]
[-121.73313904 182.57290649]
[-123.24129486 167.00822449]
[-114.34924316 154.14488220]
[-99.25554657 150.05657959]
[-85.08698273 156.67366028]
[-71.56278992 150.18550110]
[-58.03860092 143.69732666]
[-53.35599899 129.60446167]
[-39.73297501 122.83188629]
[-24.98283005 127.83898926]
[-11.45864105 121.35082245]
[2.06554937 114.86265564]
[-12.42265415 110.97782135]
[-22.61984062 99.97702789]
[-25.39662552 85.23628998]
[-19.90084457 71.27934265]
[-7.81908703 62.38939667]
[7.14091158 61.29466248]
[20.38811874 68.33110809]
[27.85713387 81.33932495]
[27.25581360 96.32727051]
[18.76807404 108.69583130]
[33.26367188 104.83867645]
[47.75926590 100.98151398]
[62.25486374 97.12435913]
[76.75045776 93.26719666]
[84.60504913 87.08683014]
[92.95086670 85.65601349]
[99.51699066 88.13847351]
[106.42398834 74.82331848]
[113.33098602 61.50816345]
[120.23798370 48.19300842]
[127.14498138 34.87784958]
[120.79750824 26.22308350]
[119.77561188 14.36163425]
[125.55035400 2.62309432]
[129.85794067 -11.74508953]
[134.16552734 -26.11327362]
[123.03073883 -16.06257248]
[109.63143158 -9.32026482]
[94.92483521 -6.36800528]
[79.96153259 -7.41669750]
[65.81048584 -12.39142418]
[53.48261261 -20.93680382]
[43.85858536 -32.44237137]
[37.62592316 -46.08619308]
[35.22987747 -60.89358902]
[36.84160995 -75.80674744]
[42.34598541 -89.76030731]
[51.34978867 -101.75745392]
[63.20979691 -110.94114685]
[77.07876587 -116.65531158]
[91.96592712 -118.49174500]
[106.80776978 -116.31925964]
[120.54402924 -110.29304504]
[132.19342041 -100.84361267]
[140.92372131 -88.64600372]
[146.11126709 -74.57157898]
[147.38548279 -59.62579727]
[144.65704346 -44.88156891]
[154.63977051 -56.07733536]
[164.62249756 -67.27310181]
[160.38754272 -82.10781860]
[164.86698914 -96.87053680]
[176.63148499 -106.85054779]
[191.92698669 -108.86324310]
[205.87278748 -102.26639557]
[214.01879883 -89.16503143]
[213.76570129 -73.73974609]
[205.19421387 -60.91268921]
[191.03950500 -54.77693558]
[175.81826782 -57.29037476]
[165.83554077 -46.09460831]
[155.85281372 -34.89884186]
[148.53370667 -21.80568886]
[144.22612000 -7.43750525]
[139.91853333 6.93067884]
[149.90126038 18.12644577]
[164.66731262 15.48758030]
[179.43336487 12.84871674]
[189.74771118 0.56075746]
[205.78144836 1.10744250]
[215.23486328 14.06940174]
[210.85612488 29.50332832]
[196.00419617 35.56963730]
[182.07223511 27.61477089]
[167.30618286 30.25363541]
[152.54013062 32.89250183]
[140.46014404 41.78485107]
[133.55313110 55.10000610]
[126.64614105 68.41516113]
[119.73914337 81.73031616]
[112.83214569 95.04547119]
[120.97900391 82.45068359]
[132.16325378 72.45506287]
[145.59049988 65.76857758]
[160.30702209 62.86616135]
[175.26753235 63.95397186]
[189.40939331 68.95474243]
[201.72813416 77.51327515]
[211.34878540 89.02166748]
[217.58799744 102.66249084]
[220.00260925 117.46687317]
[218.42111206 132.38327026]
[212.95584106 146.35218811]
[203.99497986 158.38145447]
[192.17501831 167.61662292]
[178.33549500 173.40174866]
[163.45942688 175.32591248]
[148.60342407 173.25247192]
[134.82269287 167.32865906]
[123.09606171 157.97526550]
[114.25645447 145.85662842]
[108.93172455 131.83352661]
[107.50000000 116.90452576]
[107.50000000 131.90452576]
[107.50000000 146.90452576]
[107.50000000 161.90452576]
[107.50000000 176.90452576]
[107.50000000 191.90452576]
[107.50000000 206.90452576]
[107.50000000 221.90452576]
[107.50000000 236.90452576]
[107.50000000 251.90452576]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 52]
[12 51]
[13 50]
[14 49]
[15 48]
[16 38]
[17 37]
[18 36]
[21 33]
[22 32]
[23 31]
[55 119]
[56 118]
[57 117]
[58 116]
[59 115]
[62 103]
[63 102]
[64 101]
[86 100]
[87 99]
[88 98]
[104 114]
[105 113]
[106 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
