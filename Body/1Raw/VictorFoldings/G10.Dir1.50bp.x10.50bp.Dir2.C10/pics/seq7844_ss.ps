%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCAAACCACUUUCACCGCUACACGACCGGGGGUAUACUACGGUCAAUGCUCUGAAAUCUxxxxxxxxxxACCGCUACACGACCGGGGGUAUACUACGGUCAAUGCUCUGAAAUCUGUGGAGCAAACCACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[121.93243408 523.64117432]
[121.93243408 508.64117432]
[121.93243408 493.64117432]
[121.93243408 478.64117432]
[121.93243408 463.64117432]
[121.93243408 448.64117432]
[121.93243408 433.64117432]
[121.93243408 418.64117432]
[121.93243408 403.64117432]
[121.93243408 388.64117432]
[105.13339996 382.43441772]
[91.93742371 370.27700806]
[84.34907532 353.98101807]
[83.53427887 335.98968506]
[89.64131165 319.01126099]
[101.77455139 305.61120605]
[118.12576294 297.82470703]
[116.87889099 282.87661743]
[115.63201904 267.92852783]
[114.38513947 252.98043823]
[112.67245483 238.07853699]
[110.49561310 223.23733521]
[108.31877899 208.39613342]
[106.14193726 193.55491638]
[103.96510315 178.71371460]
[91.89997864 170.05529785]
[89.48093414 155.03521729]
[98.64448547 142.43890381]
[96.46765137 127.59769440]
[85.05961609 123.47115326]
[76.49200439 114.88234711]
[72.39366150 103.46414948]
[73.54375458 91.38735962]
[79.72364044 80.94798279]
[89.75839996 74.13071442]
[88.20082092 59.21180344]
[86.64324188 44.29288864]
[85.08565521 29.37397766]
[83.52807617 14.45506573]
[73.99463654 5.70478916]
[73.03651428 -6.79724932]
[80.62388611 -16.27032471]
[79.37700653 -31.21841240]
[78.13013458 -46.16650009]
[76.88325500 -61.11458588]
[75.63638306 -76.06267548]
[74.38951111 -91.01075745]
[73.14263153 -105.95884705]
[71.89575958 -120.90693665]
[61.04203415 -135.74528503]
[69.05868530 -151.32518005]
[67.50109863 -166.24409485]
[65.94351959 -181.16300964]
[64.38594055 -196.08192444]
[62.82835770 -211.00082397]
[53.29491806 -219.75111389]
[52.33679581 -232.25314331]
[59.92416382 -241.72622681]
[58.67728806 -256.67431641]
[43.74001694 -258.56417847]
[29.52221489 -263.51873779]
[16.64542389 -271.32144165]
[5.67256117 -281.63113403]
[-2.91668510 -293.99716187]
[-8.74683094 -307.87890625]
[-11.56300735 -322.66955566]
[-11.24210262 -337.72247314]
[-7.79814625 -352.37963867]
[-1.38169289 -366.00033569]
[7.72675800 -377.98907471]
[19.12902260 -387.82177734]
[32.32664490 -395.06860352]
[46.74268341 -399.41275024]
[61.74692535 -400.66430664]
[76.68344879 -398.76855469]
[90.89930725 -393.80838013]
[103.77302551 -386.00064087]
[114.74182892 -375.68661499]
[123.32621002 -363.31719971]
[129.15089417 -349.43316650]
[131.96125793 -334.64141846]
[131.63442993 -319.58862305]
[128.18470764 -304.93280029]
[121.76289368 -291.31466675]
[112.64972687 -279.32949829]
[101.24359131 -269.50128174]
[88.04312134 -262.25964355]
[73.62537384 -257.92117310]
[74.87225342 -242.97309875]
[85.64904785 -229.15786743]
[77.74726868 -212.55841064]
[79.30485535 -197.63949585]
[80.86243439 -182.72058105]
[82.42001343 -167.80166626]
[83.97759247 -152.88276672]
[93.19580078 -144.98770142]
[94.58174133 -132.52583313]
[86.84384918 -122.15380859]
[88.09072113 -107.20571899]
[89.33759308 -92.25763702]
[90.58447266 -77.30954742]
[91.83134460 -62.36146164]
[93.07821655 -47.41337204]
[94.32509613 -32.46528625]
[95.57196808 -17.51719856]
[106.34876251 -3.70196772]
[98.44699097 12.89748478]
[100.00457001 27.81639671]
[101.56214905 42.73530960]
[103.11973572 57.65422058]
[104.67731476 72.57313538]
[120.10252380 80.76464844]
[127.60633850 96.53585052]
[124.23188019 113.67209625]
[111.30885315 125.42086029]
[113.48569489 140.26206970]
[125.88057709 149.69628906]
[127.87678528 164.77838135]
[118.80631256 176.53688049]
[120.98314667 191.37808228]
[123.15998077 206.21928406]
[125.33682251 221.06050110]
[127.51365662 235.90170288]
[130.83937073 240.09207153]
[132.05758667 244.68209839]
[131.37693787 248.78555298]
[129.33322144 251.73356628]
[130.58010864 266.68164062]
[131.82698059 281.62973022]
[133.07385254 296.57781982]
[145.06623840 299.18798828]
[155.95111084 304.82662964]
[164.97964478 313.09738159]
[171.53295898 323.42306519]
[175.16450500 335.08596802]
[175.63050842 347.27780151]
[172.90628052 359.15567017]
[167.18748474 369.90029907]
[158.87602234 378.77267456]
[148.55183411 385.16476440]
[136.93243408 388.64117432]
[136.93243408 403.64117432]
[136.93243408 418.64117432]
[136.93243408 433.64117432]
[136.93243408 448.64117432]
[136.93243408 463.64117432]
[136.93243408 478.64117432]
[136.93243408 493.64117432]
[136.93243408 508.64117432]
[136.93243408 523.64117432]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[17 130]
[18 129]
[19 128]
[20 127]
[21 123]
[22 122]
[23 121]
[24 120]
[25 119]
[28 116]
[29 115]
[35 111]
[36 110]
[37 109]
[38 108]
[39 107]
[42 105]
[43 104]
[44 103]
[45 102]
[46 101]
[47 100]
[48 99]
[49 98]
[51 95]
[52 94]
[53 93]
[54 92]
[55 91]
[58 89]
[59 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
