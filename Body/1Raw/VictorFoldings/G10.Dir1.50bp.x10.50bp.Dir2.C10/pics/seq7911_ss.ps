%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCCCCUCUACCCCCUCUAGAGCCCACUGUAAAGCUAACUUAGCAUUAACCUUUUAAGUUAxxxxxxxxxxAAAUAUCACUCUCCUACUUACAGGACUCAACAUACUAGUCACAGCCCUAUACUCCCUCUACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-7.27526474 296.21630859]
[-14.90823460 309.12899780]
[-22.54120445 322.04168701]
[-30.17417526 334.95437622]
[-37.80714417 347.86709595]
[-44.90354919 361.08227539]
[-51.45141983 374.57766724]
[-57.99929047 388.07302856]
[-64.54715729 401.56842041]
[-66.02148438 418.45812988]
[-82.65928650 421.71697998]
[-90.39656067 406.63153076]
[-78.04254150 395.02053833]
[-71.49467468 381.52517700]
[-64.94680023 368.02978516]
[-58.39893341 354.53439331]
[-59.23943329 351.79861450]
[-59.01260376 348.55548096]
[-57.51592636 345.22280884]
[-54.70650864 342.28500366]
[-50.71984100 340.23413086]
[-43.08687210 327.32141113]
[-35.45390320 314.40872192]
[-27.82093239 301.49603271]
[-20.18796349 288.58331299]
[-37.37348938 276.45776367]
[-53.34382248 262.77127075]
[-67.95770264 247.64494324]
[-81.08584595 231.21255493]
[-92.61212921 213.61947632]
[-102.43458557 195.02133179]
[-110.46633911 175.58265686]
[-116.63632965 155.47537231]
[-120.88998413 134.87736511]
[-123.18968201 113.97083282]
[-123.51506042 92.94071960]
[-121.86326599 71.97305298]
[-118.24888611 51.25330734]
[-112.70391083 30.96476936]
[-105.27738190 11.28690815]
[-118.83927917 4.87793255]
[-132.40118408 -1.53104317]
[-148.18415833 -0.43187672]
[-156.38534546 -12.86529255]
[-169.94723511 -19.27426910]
[-183.50914001 -25.68324471]
[-197.07102966 -32.09222031]
[-213.97499084 -33.39307022]
[-217.40446472 -49.99653625]
[-202.39924622 -57.88827896]
[-190.66204834 -45.65411758]
[-177.10015869 -39.24514008]
[-163.53825378 -32.83616638]
[-149.97636414 -26.42718887]
[-135.16342163 -27.98476791]
[-125.99220276 -15.09293938]
[-112.43030548 -8.68396378]
[-98.86840820 -2.27498817]
[-93.00270081 -12.95475101]
[-86.56401062 -23.29917717]
[-79.57145691 -33.27756119]
[-72.04580688 -42.86027527]
[-64.00939178 -52.01887131]
[-55.48606873 -60.72616196]
[-46.50114822 -68.95629883]
[-37.08130264 -76.68484497]
[-27.25449753 -83.88885498]
[-17.04990578 -90.54694366]
[-6.49781895 -96.63934326]
[4.37043285 -102.14797211]
[15.52258492 -107.05647278]
[26.92552948 -111.35027313]
[38.54541397 -115.01663208]
[50.34774399 -118.04465485]
[62.29747772 -120.42535400]
[74.35913849 -122.15166473]
[86.49692535 -123.21846771]
[98.67479706 -123.62258911]
[110.85660553 -123.36282349]
[123.00617981 -122.43995667]
[135.08746338 -120.85671234]
[147.06455994 -118.61780548]
[158.90194702 -115.72987366]
[170.56446838 -112.20149231]
[182.01750183 -108.04313660]
[193.22705078 -103.26715088]
[204.15982056 -97.88771057]
[214.78337097 -91.92079926]
[225.06616211 -85.38411713]
[234.97766113 -78.29708099]
[244.48843384 -70.68071747]
[253.57026672 -62.55765152]
[262.19619751 -53.95198822]
[270.34057617 -44.88927841]
[277.97927856 -35.39642715]
[285.08959961 -25.50162125]
[291.65042114 -15.23422909]
[297.64230347 -4.62473536]
[303.04742432 6.29536343]
[307.84976196 17.49364853]
[312.03500366 28.93687439]
[315.59082031 40.59106827]
[318.50656128 52.42163467]
[320.77362061 64.39344788]
[322.38525391 76.47097015]
[337.34652710 75.39389801]
[352.30783081 74.31682587]
[367.26910400 73.23976135]
[374.56588745 59.64710236]
[388.06417847 52.17715836]
[403.45666504 53.21356201]
[415.83172607 62.42559814]
[421.24047852 76.87374115]
[417.95703125 91.94764709]
[407.02911377 102.83727264]
[391.94378662 106.06779480]
[377.51470947 100.60835266]
[368.34616089 88.20104218]
[353.38488770 89.27810669]
[338.42361450 90.35517883]
[323.46231079 91.43225098]
[323.55322266 105.72427368]
[322.73101807 119.99291229]
[320.99899292 134.17988586]
[318.36425781 148.22724915]
[314.83758545 162.07762146]
[310.43334961 175.67442322]
[305.16958618 188.96211243]
[299.06774902 201.88642883]
[292.15280151 214.39457703]
[284.45297241 226.43544006]
[275.99969482 237.95986938]
[266.82751465 248.92077637]
[256.97390747 259.27337646]
[246.47909546 268.97540283]
[235.38598633 277.98724365]
[223.73985291 286.27203369]
[211.58828735 293.79595947]
[198.98091125 300.52828979]
[185.96923828 306.44152832]
[172.60639954 311.51153564]
[158.94699097 315.71755981]
[145.04679871 319.04248047]
[130.96261597 321.47265625]
[116.75194550 322.99816895]
[102.47286224 323.61285400]
[88.18367004 323.31411743]
[73.94274902 322.10321045]
[59.80825806 319.98510742]
[45.83794022 316.96841431]
[32.08885956 313.06546021]
[18.61717033 308.29223633]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 25]
[2 24]
[3 23]
[4 22]
[5 21]
[6 16]
[7 15]
[8 14]
[9 13]
[40 58]
[41 57]
[42 56]
[44 54]
[45 53]
[46 52]
[47 51]
[105 121]
[106 120]
[107 119]
[108 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
