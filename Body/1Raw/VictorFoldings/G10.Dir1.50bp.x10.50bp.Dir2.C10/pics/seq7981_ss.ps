%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCAACUAAAUACUACCGUAUGGCCCACCAUAAUUACCCCCAUACUCCUUACACUAUUCCUCxxxxxxxxxxCGUAUGGCCCACCAUAAUUACCCCCAUACUCCUUACACUAUUCCUCAUCACCCAACUAAAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[162.41996765 73.14872742]
[149.37921143 80.56079102]
[136.33845520 87.97285461]
[123.29770660 95.38492584]
[110.25695038 102.79698944]
[97.77436066 111.11473846]
[85.91271973 120.29632568]
[74.14474487 129.59765625]
[62.47162628 139.01774597]
[50.79850769 148.43785095]
[39.12538910 157.85795593]
[27.45227432 167.27806091]
[42.32592392 169.22088623]
[52.59595490 180.15370178]
[53.60601425 195.11965942]
[44.89814758 207.33329773]
[30.42043686 211.25704956]
[16.73696327 205.11192322]
[10.05171204 191.68406677]
[13.39555836 177.06182861]
[0.50770152 184.73666382]
[-12.38015461 192.41149902]
[-25.26801109 200.08633423]
[-32.79837418 214.65431213]
[-49.19013596 215.14640808]
[-57.58086014 201.05642700]
[-49.33888245 186.87890625]
[-32.94285202 187.19848633]
[-20.05499458 179.52365112]
[-7.16713762 171.84880066]
[5.72071886 164.17396545]
[18.03217125 155.60494995]
[29.70528793 146.18484497]
[41.37840271 136.76473999]
[53.05152130 127.34463501]
[64.72463989 117.92453003]
[67.97399139 111.23712921]
[76.73113251 108.43469238]
[88.59276581 99.25309753]
[73.76155090 97.00923157]
[63.71520233 85.87052155]
[63.00866699 70.88716888]
[71.96227264 58.85251617]
[86.51653290 55.22298050]
[100.07265472 61.64416885]
[106.48439026 75.20475769]
[102.84488678 89.75623322]
[115.88563538 82.34416962]
[128.92639160 74.93210602]
[141.96714783 67.52003479]
[155.00790405 60.10797119]
[147.74040222 44.86037064]
[141.65332031 29.10461044]
[136.78186035 12.93192101]
[133.15420532 -3.56405950]
[130.79129028 -20.28782654]
[129.70675659 -37.14255524]
[129.90684509 -54.03067398]
[131.39035034 -70.85441589]
[134.14863586 -87.51638794]
[138.16571045 -103.92013550]
[143.41825867 -119.97071075]
[149.87582397 -135.57521057]
[157.50100708 -150.64331055]
[166.24961853 -165.08781433]
[176.07096863 -178.82508850]
[186.90817261 -191.77568054]
[198.69844055 -203.86459351]
[211.37351990 -215.02191162]
[224.85997009 -225.18307495]
[239.07972717 -234.28927612]
[253.95040894 -242.28782654]
[269.38595581 -249.13249207]
[285.29693604 -254.78367615]
[301.59124756 -259.20867920]
[318.17456055 -262.38195801]
[334.95086670 -264.28518677]
[351.82302856 -264.90734863]
[368.69338989 -264.24493408]
[385.46426392 -262.30178833]
[402.03857422 -259.08920288]
[418.32037354 -254.62585449]
[434.21542358 -248.93757629]
[449.63171387 -242.05737305]
[464.48004150 -234.02510071]
[472.54309082 -246.67370605]
[480.60617065 -259.32229614]
[488.66921997 -271.97091675]
[496.73226929 -284.61950684]
[496.91125488 -301.01766968]
[511.33273315 -308.82489014]
[525.16113281 -300.00973511]
[524.17102051 -283.64050293]
[509.38085938 -276.55645752]
[501.31781006 -263.90786743]
[493.25476074 -251.25924683]
[485.19171143 -238.61065674]
[477.12866211 -225.96205139]
[488.11749268 -217.91864014]
[498.59228516 -209.21615601]
[508.51354980 -199.88735962]
[517.84393311 -189.96739197]
[526.54827881 -179.49360657]
[534.59368896 -168.50543213]
[541.94995117 -157.04426575]
[548.58929443 -145.15328979]
[554.48675537 -132.87727356]
[559.61999512 -120.26245880]
[563.96972656 -107.35636139]
[567.51953125 -94.20759583]
[570.25598145 -80.86569977]
[572.16882324 -67.38091278]
[573.25085449 -53.80404663]
[573.49786377 -40.18624115]
[572.90899658 -26.57879639]
[571.48645020 -13.03297424]
[569.23553467 0.40019399]
[566.16473389 13.67010021]
[562.28558350 26.72675133]
[557.61267090 39.52095795]
[552.16363525 52.00451279]
[545.95892334 64.13038635]
[539.02197266 75.85289001]
[531.37884521 87.12784576]
[523.05834961 97.91278839]
[514.09173584 108.16706085]
[504.51290894 117.85203552]
[494.35784912 126.93120575]
[483.66479492 135.37037659]
[472.47406006 143.13771057]
[460.82778931 150.20396423]
[448.76983643 156.54248047]
[436.34558105 162.12939453]
[423.60189819 166.94361877]
[410.58670044 170.96701050]
[397.34909058 174.18438721]
[383.93890381 176.58363342]
[370.40664673 178.15568542]
[356.80331421 178.89460754]
[343.18011475 178.79759216]
[329.58840942 177.86499023]
[316.07937622 176.10029602]
[302.70391846 173.51014709]
[289.51242065 170.10429382]
[276.55459595 165.89552307]
[263.87927246 160.89970398]
[251.53416443 155.13562012]
[239.56581116 148.62498474]
[228.01930237 141.39230347]
[216.93814087 133.46479797]
[206.36408997 124.87234497]
[196.33699036 115.64728546]
[186.89462280 105.82435608]
[178.07258606 95.44055176]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 51]
[2 50]
[3 49]
[4 48]
[5 47]
[6 39]
[7 38]
[8 36]
[9 35]
[10 34]
[11 33]
[12 32]
[20 31]
[21 30]
[22 29]
[23 28]
[85 98]
[86 97]
[87 96]
[88 95]
[89 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
