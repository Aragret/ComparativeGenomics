%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUUCGCCUUAAUUUUAAUAAUCAACACCCUCCUAGCCUUACUACUAAUAAUUAUUACAUUxxxxxxxxxxGCAGCCAUUCAAGCAAUCCUAUACAACCGUAUCGGCGAUAUCGGUUUCAUCCUCGCCUUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.40668488 239.76718140]
[95.09462738 224.77043152]
[94.78257751 209.77366638]
[94.47052002 194.77691650]
[94.15846252 179.78016663]
[93.84640503 164.78341675]
[93.53434753 149.78665161]
[93.22229004 134.78990173]
[92.91024017 119.79315186]
[85.72772980 106.62456512]
[73.28829193 98.24242401]
[60.84884644 89.86028290]
[48.40940857 81.47814178]
[39.06070328 93.21874237]
[28.80875587 104.17947388]
[17.71837807 114.29103088]
[5.85968781 123.48948669]
[-6.69233799 131.71669006]
[-19.85834122 138.92060852]
[-33.55508041 145.05570984]
[-47.69595718 150.08319092]
[-62.19157028 153.97128296]
[-76.95027161 156.69540405]
[-91.87875366 158.23831177]
[-106.88262939 158.59027100]
[-121.86703491 157.74905396]
[-136.73722839 155.71997070]
[-151.39921570 152.51585388]
[-165.76028442 148.15695190]
[-179.72962952 142.67085266]
[-193.21893311 136.09220886]
[-206.14292908 128.46261597]
[-218.41989136 119.83033752]
[-229.97219849 110.24993134]
[-240.72682190 99.78197479]
[-250.61576843 88.49263763]
[-259.57650757 76.45330811]
[-267.55236816 63.74010849]
[-274.49295044 50.43340302]
[-280.35437012 36.61732864]
[-285.09954834 22.37923813]
[-288.69851685 7.80914640]
[-291.12850952 -7.00082541]
[-292.37414551 -21.95704460]
[-292.42755127 -36.96495056]
[-291.28842163 -51.92965698]
[-288.96392822 -66.75655365]
[-285.46878052 -81.35189056]
[-280.82504272 -95.62340546]
[-275.06213379 -109.48085022]
[-268.21646118 -122.83662415]
[-260.33129883 -135.60629272]
[-251.45649719 -147.70909119]
[-241.64817810 -159.06854248]
[-230.96833801 -169.61279297]
[-219.48452759 -179.27519226]
[-207.26931763 -187.99465942]
[-194.39996338 -195.71604919]
[-180.95782471 -202.39054871]
[-167.02789307 -207.97596741]
[-152.69821167 -212.43698120]
[-138.05941772 -215.74539185]
[-123.20404053 -217.88027954]
[-108.22599792 -218.82814026]
[-93.22000122 -218.58300781]
[-78.28091431 -217.14639282]
[-63.50319672 -214.52740479]
[-48.98027039 -210.74259949]
[-34.80396271 -205.81590271]
[-21.06389618 -199.77847290]
[-7.84694481 -192.66845703]
[4.76332951 -184.53082275]
[16.68719864 -175.41702271]
[27.84927750 -165.38465881]
[38.17899323 -154.49719238]
[47.61103439 -142.82342529]
[56.08577347 -130.43719482]
[63.54962540 -117.41678619]
[69.95540619 -103.84452820]
[75.26260376 -89.80623627]
[79.43767548 -75.39065552]
[82.45422363 -60.68894196]
[84.29317474 -45.79402924]
[84.94290161 -30.80010033]
[84.39929199 -15.80194664]
[82.66578674 -0.89439654]
[79.75334930 13.82829952]
[75.68038940 28.27305984]
[70.47265625 42.34855652]
[64.16307831 55.96580124]
[56.79154968 69.03869629]
[69.23098755 77.42083740]
[81.67043304 85.80298615]
[94.10987091 94.18512726]
[93.96987915 89.50273895]
[96.04199982 84.56427002]
[100.38336945 80.23948669]
[106.74221039 77.39051056]
[114.57145691 76.76931000]
[123.07470703 78.92345428]
[131.28062439 84.11982727]
[146.21493530 85.52213287]
[158.31779480 75.71609497]
[173.44332886 77.35097504]
[182.71730042 88.94963837]
[197.65161133 90.35193634]
[212.58592224 91.75424194]
[227.52023315 93.15654755]
[242.45454407 94.55885315]
[257.40261841 95.80572510]
[272.36288452 96.89703369]
[287.32312012 97.98834229]
[302.28335571 99.07965851]
[318.52041626 94.20169830]
[327.70260620 108.45384979]
[316.54931641 121.22257996]
[301.19204712 114.03990173]
[286.23181152 112.94859314]
[271.27157593 111.85728455]
[256.31130981 110.76597595]
[249.36648560 113.43335724]
[241.05223083 109.49315643]
[226.11791992 108.09085083]
[211.18362427 106.68855286]
[196.24931335 105.28624725]
[181.31500244 103.88394165]
[170.04399109 113.55346680]
[154.87849426 112.34407806]
[144.81262207 100.45643616]
[129.87832642 99.05413818]
[124.38549042 104.16087341]
[136.81927490 112.55139923]
[151.59388733 115.14190674]
[160.76148987 127.01435852]
[159.53074646 141.96379089]
[148.54489136 152.17706299]
[133.54554749 152.31637573]
[122.37189484 142.30889893]
[120.86350250 127.38563538]
[113.39982605 114.37435150]
[107.90699005 119.48109436]
[108.21904755 134.47784424]
[108.53110504 149.47459412]
[108.84316254 164.47135925]
[109.15521240 179.46810913]
[109.46726990 194.46485901]
[109.77932739 209.46160889]
[110.09138489 224.45837402]
[110.40344238 239.45512390]
[112.99443817 258.66284180]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 94]
[11 93]
[12 92]
[13 91]
[101 130]
[102 129]
[105 126]
[106 125]
[107 124]
[108 123]
[109 122]
[110 120]
[111 119]
[112 118]
[113 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
