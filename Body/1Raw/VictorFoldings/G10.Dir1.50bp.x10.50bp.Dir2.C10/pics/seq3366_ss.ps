%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAAAAUUCUAGGCUAUAUACAACUACGCAAAGGCCCCAACGUUGUAGGCCCCUACGGGCUxxxxxxxxxxUAUUAAACACAAACUACCACCUACCUCCCUCACCAAAGCCCAUAAAAAUAAAAAAUUAUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[78.29704285 386.43032837]
[78.29704285 371.43032837]
[78.29704285 356.43032837]
[78.29704285 341.43032837]
[78.29704285 326.43032837]
[78.29704285 311.43032837]
[78.29704285 296.43032837]
[78.29704285 281.43032837]
[78.29704285 266.43032837]
[78.29704285 251.43034363]
[62.76047516 246.67669678]
[49.42309570 237.36543274]
[39.58375549 224.38943481]
[34.20493698 208.99911499]
[33.81858826 192.68196106]
[38.47355270 177.01875305]
[47.72971725 163.53044128]
[60.69961548 153.53041077]
[76.13349152 147.99667358]
[75.50951385 133.00965881]
[65.29603577 122.02400208]
[50.39413071 120.31130981]
[35.49222946 118.59861755]
[20.59032631 116.88593292]
[15.68567848 119.02228546]
[10.93674469 119.01923370]
[7.14629507 117.30628967]
[4.82294559 114.57324982]
[-9.94310951 111.93437958]
[-24.70916557 109.29551697]
[-39.47521973 106.65665436]
[-54.24127579 104.01779175]
[-69.00733185 101.37892151]
[-76.34819794 114.62242889]
[-87.59315491 124.76293182]
[-101.52241516 130.70046997]
[-116.62504578 131.79098511]
[-131.26283264 127.91618347]
[-143.84796143 119.49638367]
[-153.01530457 107.44488525]
[-157.77046204 93.06896210]
[-157.59761047 77.92799377]
[-152.51551819 63.66436768]
[-143.07543945 51.82529449]
[-130.30137634 43.69498062]
[-115.57895660 40.15534973]
[-100.50514984 41.59035492]
[-86.71506500 47.84432983]
[-75.70454407 58.23889923]
[-68.66791534 71.64653015]
[-66.36846924 86.61286926]
[-51.60241318 89.25173187]
[-36.83635712 91.89059448]
[-22.07030106 94.52946472]
[-7.30424547 97.16832733]
[7.46181011 99.80718994]
[22.30301476 101.98402405]
[37.20491791 103.69671631]
[52.10681915 105.40940857]
[67.00872040 107.12209320]
[67.49108124 94.55773926]
[72.47866058 83.33952332]
[81.05953217 74.97900391]
[91.85593414 70.51255035]
[103.24239349 70.37545013]
[113.58955383 74.36816406]
[123.80303192 63.38249588]
[134.01651001 52.39683151]
[144.22999573 41.41116714]
[154.44346619 30.42550087]
[144.86996460 18.84954071]
[136.88935852 6.12298918]
[130.63824463 -7.53638697]
[126.22357178 -21.89485741]
[123.72088623 -36.70672989]
[123.17299652 -51.71855164]
[124.58930206 -66.67345428]
[127.94554901 -81.31553650]
[133.18431091 -95.39425659]
[140.21595764 -108.66870880]
[148.92015076 -120.91174316]
[159.14796448 -131.91387939]
[170.72438049 -141.48684692]
[183.45130920 -149.46682739]
[197.11097717 -155.71730042]
[211.46966553 -160.13128662]
[226.28166199 -162.63327026]
[241.29350281 -163.18043518]
[256.24835205 -161.76342773]
[270.89025879 -158.40647888]
[284.96875000 -153.16705322]
[298.24285889 -146.13478088]
[310.48547363 -137.42999268]
[321.48712158 -127.20166016]
[331.05953979 -115.62478638]
[339.03890991 -102.89747620]
[345.28872681 -89.23750305]
[349.70202637 -74.87861633]
[352.20330811 -60.06650543]
[352.74975586 -45.05463028]
[351.33206177 -30.09986115]
[347.97439575 -15.45809746]
[342.73431396 -1.37987626]
[335.70138550 11.89390469]
[326.99603271 24.13611412]
[316.76718140 35.13727188]
[305.18984985 44.70912933]
[292.46215820 52.68790817]
[278.80187988 58.93707275]
[264.44277954 63.34969711]
[249.63055420 65.85027313]
[234.61865234 66.39601135]
[219.66395569 64.97757721]
[205.02235413 61.61923981]
[190.94438171 56.37846375]
[177.67092896 49.34492493]
[165.42913818 40.63898087]
[155.21565247 51.62464523]
[145.00218201 62.61030960]
[134.78869629 73.59597778]
[124.57521820 84.58164215]
[128.62225342 92.43945312]
[130.16746521 101.32272339]
[128.96545410 110.43839264]
[125.02099609 118.94046783]
[118.59803009 126.00848389]
[110.20419312 130.92637634]
[100.55156708 133.15422058]
[90.49652863 132.38568115]
[91.12050629 147.37269592]
[104.56564331 150.61054993]
[116.69354248 157.22988892]
[126.67151642 166.76866150]
[133.81648254 178.56459045]
[137.64169312 191.80126953]
[137.88990784 205.56454468]
[134.55068970 218.90570068]
[127.86063385 230.90687561]
[118.28665924 240.74417114]
[106.49339294 247.74423218]
[93.29704285 251.43034363]
[93.29704285 266.43032837]
[93.29704285 281.43032837]
[93.29704285 296.43032837]
[93.29704285 311.43032837]
[93.29704285 326.43032837]
[93.29704285 341.43032837]
[93.29704285 356.43032837]
[93.29704285 371.43032837]
[93.29704285 386.43032837]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[19 130]
[20 129]
[21 60]
[22 59]
[23 58]
[24 57]
[28 56]
[29 55]
[30 54]
[31 53]
[32 52]
[33 51]
[66 121]
[67 120]
[68 119]
[69 118]
[70 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
