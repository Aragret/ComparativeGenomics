%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAACAAAGAACCCUAACACCAGCCUAACCAGAUUUCAAAUUUUAUCUUUUGGCGGUAUGCACxxxxxxxxxxAUCCUACCAGGCUUCGGAAUAAUCUCCCAUAUUGUAACUUACUACUCCGGAAAAAAAGAACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[136.63789368 343.55667114]
[136.63789368 328.55667114]
[136.63789368 313.55667114]
[136.63789368 298.55667114]
[136.63789368 283.55667114]
[136.63789368 268.55667114]
[136.63789368 253.55668640]
[136.63789368 238.55668640]
[136.63789368 223.55668640]
[136.63789368 208.55668640]
[133.32125854 193.92794800]
[126.85216522 180.39462280]
[119.97467041 167.06420898]
[112.69514465 153.94900513]
[105.41561127 140.83380127]
[98.13608551 127.71860504]
[81.71239471 112.18368530]
[84.69546509 94.78759766]
[73.82357788 84.45308685]
[62.95168304 74.11858368]
[47.61867523 70.21866608]
[43.72478104 55.84205627]
[32.85289001 45.50754929]
[21.98099899 35.17304611]
[9.09314251 27.49820900]
[-2.77083087 32.65581512]
[-14.58217621 28.45854378]
[-20.16086006 17.68373489]
[-34.32983398 12.76030636]
[-48.49880981 7.83687782]
[-57.69246292 7.97087717]
[-62.90331268 2.66742110]
[-76.96959686 -2.54215765]
[-91.03588104 -7.75173664]
[-106.66422272 -5.28893900]
[-115.91204834 -16.96485710]
[-129.97833252 -22.17443657]
[-136.64360046 -21.43040657]
[-141.87237549 -23.83987617]
[-144.50190735 -27.89070129]
[-158.34550476 -33.66604614]
[-172.18911743 -39.44138718]
[-186.03271484 -45.21673203]
[-198.19255066 -35.83407974]
[-213.41671753 -33.80428314]
[-227.61001587 -39.67334747]
[-236.95451355 -51.86252594]
[-238.93656921 -67.09298706]
[-233.02305603 -81.26781464]
[-220.80464172 -90.57405853]
[-205.56803894 -92.50836945]
[-191.41181946 -86.55044556]
[-182.14392090 -74.30292511]
[-180.25737000 -59.06033707]
[-166.41377258 -53.28499222]
[-152.57015991 -47.50965118]
[-138.72656250 -41.73430634]
[-124.76874542 -36.24071884]
[-110.70246887 -31.03113937]
[-96.08023834 -33.86656189]
[-85.82630157 -21.81801796]
[-71.76001740 -16.60844040]
[-57.69373703 -11.39886093]
[-43.57538223 -6.33209705]
[-29.40640640 -1.40866911]
[-15.23743153 3.51475906]
[1.76462066 -0.73002285]
[13.72839737 13.23236084]
[3.84576750 1.94814062]
[-2.84381151 -11.47756386]
[-5.90086222 -26.16274071]
[-5.12454987 -41.14263916]
[-0.56587499 -55.43314362]
[7.47567749 -68.09542847]
[18.47181129 -78.29763031]
[31.70012856 -85.36952209]
[46.29158783 -88.84650421]
[61.28758621 -88.50014496]
[75.70295715 -84.35321045]
[88.59067535 -76.67813110]
[99.10406494 -65.97913361]
[106.55244446 -52.95908737]
[110.44648743 -38.47335434]
[110.53038025 -23.47359085]
[106.79859924 -8.94521046]
[99.49630737 4.15733099]
[89.10324097 14.97325420]
[76.30217743 22.79199791]
[61.93409348 27.09990692]
[46.94290161 27.61396790]
[32.31550217 24.30115509]
[43.18739319 34.63565826]
[54.05928802 44.97016144]
[68.61466217 48.13089371]
[73.28618622 63.24669266]
[84.15808105 73.58119965]
[95.02996826 83.91570282]
[109.91918945 85.73535919]
[122.95994568 78.32329559]
[136.00070190 70.91123199]
[139.95201111 55.60885620]
[153.60867310 47.65452957]
[168.86842346 51.76741409]
[176.67791748 65.50740051]
[172.40391541 80.72280884]
[158.58213806 88.38660431]
[143.41276550 83.95198822]
[130.37200928 91.36405182]
[117.33125305 98.77611542]
[132.30262756 97.84987640]
[141.72848511 109.51834869]
[137.67520142 123.96033478]
[123.55438232 129.02021790]
[111.25128174 120.43907928]
[118.53080750 133.55427551]
[125.81034088 146.66947937]
[133.08987427 159.78466797]
[137.67098999 162.52439880]
[140.42909241 166.37835693]
[141.24649048 170.44900513]
[140.38548279 173.92552185]
[146.85458374 187.45884705]
[148.22450256 172.52153015]
[153.34645081 158.42311096]
[161.88395691 146.08978271]
[173.27613831 136.33178711]
[186.77456665 129.79020691]
[201.49246216 126.89476776]
[216.46292114 127.83570099]
[230.70243835 132.55119324]
[243.27555847 140.73144531]
[253.35627747 151.83906555]
[260.28231812 165.14433289]
[263.59869385 179.77313232]
[263.08752441 194.76441956]
[258.78234863 209.13333130]
[250.96607971 221.93589783]
[240.15214539 232.33103943]
[227.05101013 239.63584900]
[212.52334595 243.37042236]
[197.52357483 243.28941345]
[183.03709412 239.39814758]
[170.01560974 231.95227051]
[159.31459045 221.44093323]
[151.63789368 208.55668640]
[151.63789368 223.55668640]
[151.63789368 238.55668640]
[151.63789368 253.55668640]
[151.63789368 268.55667114]
[151.63789368 283.55667114]
[151.63789368 298.55667114]
[151.63789368 313.55667114]
[151.63789368 328.55667114]
[151.63789368 343.55667114]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[11 122]
[12 121]
[13 117]
[14 116]
[15 115]
[16 114]
[18 97]
[19 96]
[20 95]
[22 93]
[23 92]
[24 91]
[25 68]
[28 66]
[29 65]
[30 64]
[32 63]
[33 62]
[34 61]
[36 59]
[37 58]
[40 57]
[41 56]
[42 55]
[43 54]
[98 109]
[99 108]
[100 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
