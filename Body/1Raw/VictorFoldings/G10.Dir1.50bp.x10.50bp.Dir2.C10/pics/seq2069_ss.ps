%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAGCAUAAUAUAGCAAGGACUAACCCCUAUACCUUCUGCAUAAUGAAUUAACUAGAAAUAxxxxxxxxxxUCCGGACAAUGAACCAUAACCAAUACUACCAAUCAAUACUCAUCAUUAAUAAUCAUAAUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[113.09585571 255.16784668]
[113.09585571 240.16784668]
[113.09585571 225.16784668]
[113.09585571 210.16784668]
[113.09585571 195.16784668]
[113.09585571 180.16784668]
[113.09585571 165.16784668]
[113.09585571 150.16784668]
[113.09585571 135.16784668]
[113.09585571 120.16783905]
[102.08791351 122.04443359]
[92.36045074 118.74230957]
[86.00273895 111.84404755]
[71.59052277 116.00193787]
[57.17831039 120.15982819]
[46.06362534 131.41923523]
[31.69035912 127.51303101]
[17.27814293 131.67092896]
[2.95554495 136.12773132]
[-11.27123451 140.88154602]
[-25.49801254 145.63536072]
[-39.72479248 150.38917542]
[-53.95157242 155.14299011]
[-55.37532043 170.30522156]
[-62.84866714 183.57431030]
[-75.07681274 192.65133667]
[-89.94114685 195.96365356]
[-104.86634064 192.93736267]
[-117.26651764 184.09680176]
[-124.99326324 170.97363281]
[-126.70787811 155.84155273]
[-122.11329651 141.32226562]
[-112.00554657 129.93133545]
[-98.13587189 123.64229584]
[-82.90727234 123.54477692]
[-68.95818329 129.65567017]
[-58.70538712 140.91621399]
[-44.47860718 136.16239929]
[-30.25182915 131.40858459]
[-16.02504921 126.65476990]
[-1.79826999 121.90095520]
[1.12079668 118.04679871]
[6.51864338 116.02330017]
[13.12025452 117.25870514]
[27.53247070 113.10081482]
[37.61629486 102.13880157]
[53.02042007 105.74761200]
[67.43264008 101.58972168]
[81.84485626 97.43183899]
[97.12883759 79.00411224]
[122.03127289 90.36327362]
[130.28355408 77.83731842]
[138.53584290 65.31135559]
[146.78813171 52.78539276]
[155.04042053 40.25942993]
[163.29270935 27.73346710]
[151.57286072 18.35424995]
[140.76841736 7.93366146]
[130.97157288 -3.43939281]
[122.26589203 -15.66787910]
[114.72567749 -28.64746666]
[108.41523743 -42.26741791]
[103.38842010 -56.41152191]
[99.68811798 -70.95911407]
[97.34589386 -85.78607178]
[96.38173676 -100.76589203]
[96.80387115 -115.77077484]
[98.60869598 -130.67269897]
[101.78081512 -145.34451294]
[106.29315948 -159.66105652]
[112.10723114 -173.50018311]
[119.17342377 -186.74380493]
[127.43145752 -199.27893066]
[136.81086731 -210.99862671]
[147.23162842 -221.80290222]
[158.60485840 -231.59956360]
[170.83348083 -240.30502319]
[183.81320190 -247.84503174]
[197.43325806 -254.15524292]
[211.57743835 -259.18182373]
[226.12509155 -262.88189697]
[240.95208740 -265.22384644]
[255.93193054 -266.18777466]
[270.93679810 -265.76538086]
[285.83868408 -263.96029663]
[300.51046753 -260.78796387]
[314.82693481 -256.27536011]
[328.66595459 -250.46107483]
[341.90945435 -243.39465332]
[354.44445801 -235.13641357]
[366.16400146 -225.75680542]
[376.96807861 -215.33586121]
[386.76455688 -203.96247864]
[395.46981812 -191.73370361]
[403.00961304 -178.75386047]
[409.31961060 -165.13369751]
[414.34594727 -150.98942566]
[418.04574585 -136.44171143]
[420.38748169 -121.61467743]
[421.35113525 -106.63481903]
[420.92849731 -91.62995911]
[419.12319946 -76.72809601]
[415.95059204 -62.05638123]
[411.43777466 -47.73998642]
[405.62322998 -33.90106201]
[398.55661011 -20.65767479]
[390.29815674 -8.12281704]
[380.91833496 3.59656668]
[370.49722290 14.40048790]
[359.12368774 24.19676971]
[346.89474487 32.90183258]
[333.91479492 40.44140625]
[320.29452515 46.75116348]
[306.15017700 51.77727127]
[291.60238647 55.47684860]
[276.77532959 57.81832886]
[261.79544067 58.78173828]
[246.79058838 58.35885239]
[231.88874817 56.55328369]
[217.21708679 53.38043594]
[202.90077209 48.86737442]
[189.06195068 43.05261230]
[175.81867981 35.98575592]
[167.56639099 48.51171875]
[159.31410217 61.03768158]
[151.06181335 73.56364441]
[142.80952454 86.08960724]
[134.55723572 98.61556244]
[145.68354797 88.55548859]
[160.00361633 84.09055328]
[174.87580872 86.04441071]
[187.55668640 94.05663300]
[195.70697021 106.64920807]
[197.82319641 121.49917603]
[193.51498413 135.86717224]
[183.57705688 147.10272217]
[169.84268188 153.13322449]
[154.84542847 152.84622192]
[141.35183716 146.29466248]
[131.85107422 134.68708801]
[128.09585571 120.16783905]
[128.09585571 135.16784668]
[128.09585571 150.16784668]
[128.09585571 165.16784668]
[128.09585571 180.16784668]
[128.09585571 195.16784668]
[128.09585571 210.16784668]
[128.09585571 225.16784668]
[128.09585571 240.16784668]
[128.09585571 255.16784668]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[13 49]
[14 48]
[15 47]
[17 45]
[18 44]
[19 41]
[20 40]
[21 39]
[22 38]
[23 37]
[51 128]
[52 127]
[53 126]
[54 125]
[55 124]
[56 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
