%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACAUGAAAACAUUCUCCUCCGCAUAAGCCUGCGUCAGAUUAAAACACUGAACUGACAAUUxxxxxxxxxxCAGCCACCAUGAAUAUUGUACGGUACCAUAAAUACUUGACCACCUGUAGUACAUAAAAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[130.37120056 293.80160522]
[130.37120056 278.80160522]
[130.37120056 263.80160522]
[130.37120056 248.80158997]
[130.37120056 233.80158997]
[130.37120056 218.80158997]
[130.37120056 203.80158997]
[130.37120056 188.80158997]
[130.37120056 173.80158997]
[130.37120056 158.80158997]
[123.48000336 155.84161377]
[117.55982971 169.62390137]
[103.77762604 163.70350647]
[109.69762421 149.92164612]
[102.80642700 146.96166992]
[91.92760468 157.28886414]
[81.04878235 167.61607361]
[76.91526031 183.48573303]
[61.03527069 187.57937622]
[49.74477768 175.68580627]
[54.65847778 160.04011536]
[70.72157288 156.73724365]
[81.60040283 146.41004944]
[92.47922516 136.08283997]
[89.51924133 129.19165039]
[78.24077606 139.08084106]
[65.35036469 131.41027832]
[68.66217041 116.78044891]
[83.59928131 115.40926361]
[80.63929749 108.51807404]
[65.65958405 109.29792023]
[50.67987061 110.07776642]
[35.70015717 110.85761261]
[25.30847931 122.76511383]
[9.53513336 123.75359344]
[-2.26183605 113.23660278]
[-3.08349586 97.45368958]
[7.55763006 85.76856995]
[23.34835052 85.11382294]
[34.92031097 95.87789917]
[49.90002441 95.09805298]
[64.87973785 94.31820679]
[79.85945129 93.53836060]
[83.86719513 79.08367157]
[71.42775726 70.70153046]
[58.98831558 62.31938553]
[46.54887390 53.93724442]
[32.42057037 60.13358307]
[17.18870163 57.68537140]
[5.71370220 47.37382889]
[1.65720153 32.48932648]
[6.31361437 17.78146172]
[18.19709778 7.94345331]
[33.51567078 6.11457777]
[47.38124084 12.87842178]
[55.36934662 26.07666779]
[54.93101501 41.49780273]
[67.37046051 49.87994766]
[79.80989838 58.26208878]
[92.24933624 66.64423370]
[107.20958710 65.55292511]
[118.30090332 55.45427322]
[129.39221191 45.35562515]
[125.50623322 33.83162308]
[130.19139099 20.11166573]
[134.19914246 5.65697670]
[138.20687866 -8.79771233]
[142.21461487 -23.25239944]
[146.22236633 -37.70708847]
[133.01683044 -44.96729279]
[121.84196472 -55.07764816]
[113.30043793 -67.49291992]
[107.85286713 -81.54357147]
[105.79303741 -96.47185516]
[107.23203278 -111.47272491]
[112.09224701 -125.73719025]
[120.11157990 -138.49598694]
[130.85755920 -149.06106567]
[143.75065613 -156.86264038]
[158.09558105 -161.47999573]
[173.11871338 -162.66412354]
[188.00988770 -160.35116577]
[201.96601868 -154.66586304]
[214.23451233 -145.91479492]
[224.15370178 -134.56991577]
[231.18867493 -121.24302673]
[234.96003723 -106.65284729]
[235.26441956 -91.58618927]
[232.08540344 -76.85559082]
[225.59442139 -63.25545120]
[216.14152527 -51.51920700]
[204.23648071 -42.27978134]
[190.52134705 -36.03544235]
[175.73574829 -33.12294388]
[160.67704773 -33.69934845]
[156.66931152 -19.24465942]
[152.66156006 -4.78997135]
[148.65382385 9.66471672]
[144.64608765 24.11940575]
[153.66362000 36.10623932]
[168.66281128 36.26227570]
[183.66281128 36.26227570]
[198.66198730 36.10623932]
[213.66117859 35.95020294]
[218.40838623 21.57165146]
[227.56907654 9.51509571]
[240.14956665 1.08834040]
[254.78520203 -2.79454327]
[269.88842773 -1.71236932]
[283.82098389 4.21747589]
[295.07153320 14.35176754]
[302.41970825 27.59121323]
[305.06845093 42.49969864]
[302.73043823 57.46006012]
[295.65927124 70.84951019]
[284.62197876 81.21566010]
[270.81582642 87.43407440]
[255.73837280 88.83021545]
[241.02511597 85.25264740]
[228.27204895 77.08943939]
[218.86253357 65.22606659]
[213.81721497 50.94939041]
[198.81802368 51.10542679]
[183.81884766 51.26146317]
[177.11976624 54.49690247]
[168.50677490 51.26146317]
[153.50758362 51.10542679]
[139.49085999 56.44693756]
[128.39955139 66.54558563]
[117.30823517 76.64424133]
[130.93330383 70.37068939]
[145.86296082 68.91973114]
[160.44105530 72.45233154]
[173.05043030 80.57661438]
[182.29229736 92.39134216]
[187.14147949 106.58589935]
[187.06002808 121.58567810]
[182.05699158 135.72674561]
[172.68736267 147.44041443]
[159.99052429 155.42727661]
[145.37120056 158.80158997]
[145.37120056 173.80158997]
[145.37120056 188.80158997]
[145.37120056 203.80158997]
[145.37120056 218.80158997]
[145.37120056 233.80158997]
[145.37120056 248.80158997]
[145.37120056 263.80160522]
[145.37120056 278.80160522]
[145.37120056 293.80160522]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[15 24]
[16 23]
[17 22]
[30 43]
[31 42]
[32 41]
[33 40]
[44 60]
[45 59]
[46 58]
[47 57]
[61 130]
[62 129]
[63 128]
[65 99]
[66 98]
[67 97]
[68 96]
[69 95]
[100 127]
[101 126]
[102 124]
[103 123]
[104 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
