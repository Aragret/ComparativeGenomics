%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUGAGCACACCAUAUAUUUACAGUAGGAAUAGACGUAGACACACGAGCAUAUUUCACCUCCGCUxxxxxxxxxxUCCCACUCCUAAACACAUCCGUAUUACUCGCAUCAGGAGUAUCAAUCACCUGAGCUCACCAUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[123.56520844 306.76721191]
[123.56520844 291.76721191]
[123.56520844 276.76721191]
[123.56520844 261.76721191]
[123.56520844 246.76721191]
[123.56520844 231.76721191]
[123.56520844 216.76721191]
[123.56520844 201.76721191]
[123.56520844 186.76721191]
[123.56520844 171.76721191]
[120.73090363 157.03741455]
[115.16441345 143.10852051]
[109.59792328 129.17962646]
[86.71436310 125.05272675]
[74.99948120 107.13008118]
[79.57643127 88.10047150]
[69.68154907 76.82699585]
[56.42554855 82.33992004]
[42.13573456 83.47948456]
[28.21534729 80.14712524]
[16.02722549 72.68275452]
[6.76037836 61.83015060]
[1.31400359 48.66285706]
[0.21023959 34.47798920]
[3.54413819 20.66846275]
[10.97563839 8.58621883]
[1.30830002 -2.88298273]
[-8.35903835 -14.35218334]
[-18.02637672 -25.82138443]
[-35.46763229 -31.64640236]
[-37.93660355 -48.99674606]
[-47.83149338 -60.27022171]
[-57.72637939 -71.54369354]
[-69.57318115 -80.74441528]
[-82.94509125 -87.54089355]
[-96.31699371 -94.33737946]
[-109.88684082 -100.72949982]
[-123.64241028 -106.71149445]
[-137.39797974 -112.69349670]
[-151.15354919 -118.67549896]
[-164.96827698 -124.51957703]
[-183.12774658 -121.62790680]
[-193.33320618 -135.87496948]
[-207.31710815 -141.30183411]
[-221.30099487 -146.72868347]
[-235.65950012 -140.12496948]
[-250.45281982 -145.68672180]
[-256.90435791 -160.11424255]
[-251.18652344 -174.84793091]
[-236.69160461 -181.14657593]
[-222.01918030 -175.27328491]
[-215.87414551 -160.71257019]
[-201.89024353 -155.28572083]
[-187.90635681 -149.85885620]
[-176.67871094 -154.45402527]
[-164.96244812 -150.00328064]
[-159.26271057 -138.39208984]
[-151.83885193 -138.75840759]
[-145.17155457 -132.43106079]
[-131.41598511 -126.44906616]
[-117.66040802 -120.46706390]
[-103.90483856 -114.48506927]
[-100.46350098 -115.46765900]
[-96.36982727 -114.79692841]
[-92.42259216 -112.18250275]
[-89.52050781 -107.70928192]
[-76.14860535 -100.91279602]
[-62.77670288 -94.11631775]
[-70.74984741 -106.82178497]
[-74.70122528 -121.29198456]
[-74.29209137 -136.28640747]
[-69.55751038 -150.51959229]
[-60.90338516 -162.77137756]
[-49.07161331 -171.99140930]
[-35.07651138 -177.38929749]
[-20.11785698 -178.50227356]
[-5.47803497 -175.23490906]
[7.58790922 -167.86734009]
[17.95985222 -157.03115845]
[24.74862480 -143.65534973]
[27.37223625 -128.88656616]
[25.60576820 -113.99094391]
[19.60065842 -100.24545288]
[9.87171364 -88.82846069]
[-2.74701858 -80.71874237]
[-17.17375565 -76.61151886]
[-32.17171478 -76.85890198]
[-46.45290756 -81.43858337]
[-36.55801773 -70.16510773]
[-26.66313171 -58.89163589]
[-14.58259201 -57.77988052]
[-6.24786425 -48.41975021]
[-6.55717516 -35.48872375]
[3.11016321 -24.01952171]
[12.77750111 -12.55032063]
[22.44483948 -1.08111954]
[37.13238525 -6.68087435]
[52.87612534 -6.92314482]
[67.77964020 -1.76043487]
[80.04145050 8.20258713]
[88.17279053 21.77985382]
[91.17834473 37.34506989]
[88.67803955 53.02651596]
[80.95501709 66.93210602]
[90.84990692 78.20558167]
[105.53266144 74.59815979]
[120.85687256 80.78703308]
[130.44854736 95.94334412]
[145.41177368 94.89366913]
[160.37500000 93.84399414]
[175.33822632 92.79431915]
[190.30145264 91.74464417]
[199.34317017 78.98606110]
[214.48359680 75.07434845]
[228.57389832 81.85650635]
[234.96104431 96.13019562]
[230.62924194 111.15582275]
[217.62382507 119.83874512]
[202.08555603 118.07915497]
[191.35113525 106.70787048]
[176.38790894 107.75754547]
[161.42468262 108.80722046]
[146.46145630 109.85689545]
[131.49822998 110.90657043]
[123.52681732 123.61312866]
[129.09330750 137.54202271]
[134.65980530 151.47093201]
[137.04875183 136.66238403]
[143.62443542 123.18052673]
[153.82313538 112.18113708]
[166.77052307 104.60717773]
[181.35665894 101.10794830]
[196.33108521 101.98342133]
[210.41007996 107.15856171]
[222.38665771 116.18970490]
[231.23410034 128.30262756]
[236.19390869 142.45890808]
[236.84091187 157.44494629]
[233.11964417 171.97601318]
[225.34909058 184.80639648]
[214.19544983 194.83616638]
[200.61486816 201.20545959]
[185.77162170 203.36828613]
[170.93817139 201.13920593]
[157.38616943 194.70932007]
[146.27742004 184.62985229]
[138.56521606 171.76721191]
[138.56521606 186.76721191]
[138.56521606 201.76721191]
[138.56521606 216.76721191]
[138.56521606 231.76721191]
[138.56521606 246.76721191]
[138.56521606 261.76721191]
[138.56521606 276.76721191]
[138.56521606 291.76721191]
[138.56521606 306.76721191]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 156]
[2 155]
[3 154]
[4 153]
[5 152]
[6 151]
[7 150]
[8 149]
[9 148]
[10 147]
[11 127]
[12 126]
[13 125]
[16 105]
[17 104]
[26 96]
[27 95]
[28 94]
[29 93]
[31 90]
[32 89]
[33 88]
[34 68]
[35 67]
[36 66]
[37 62]
[38 61]
[39 60]
[40 59]
[41 57]
[43 54]
[44 53]
[45 52]
[108 124]
[109 123]
[110 122]
[111 121]
[112 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
