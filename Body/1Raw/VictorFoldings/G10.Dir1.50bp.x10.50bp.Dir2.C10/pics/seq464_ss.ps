%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUAACACCAGCCUAACCAGAUUUCAAAUUUUAUCUUUUGGCGGUAUGCACUUUUAACAGxxxxxxxxxxACCAUCAUUGGACAAGUAGCAUCCGUACUAUACUUCACAACAAUCCUAAUCCUAAUACCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 257.07431030]
[92.50000000 242.07429504]
[92.50000000 227.07429504]
[92.50000000 212.07429504]
[92.50000000 197.07429504]
[92.50000000 182.07429504]
[92.50000000 167.07429504]
[92.50000000 152.07429504]
[92.50000000 137.07429504]
[92.50000000 122.07429504]
[87.00716400 116.96755219]
[83.65496063 131.58818054]
[69.31704712 135.99548340]
[58.33119202 125.78220367]
[61.68313217 111.16151428]
[76.02149963 106.75407410]
[70.52867126 101.64733887]
[55.56842041 102.73864746]
[40.60817337 103.82995605]
[32.21375656 107.59633636]
[25.32591629 104.78504944]
[10.34620190 105.56489563]
[-4.63351250 106.34474182]
[-18.01276207 114.78904724]
[-31.12508202 107.72389221]
[-46.10479736 108.50373840]
[-51.94031143 111.82853699]
[-57.70305634 111.67997742]
[-61.72130203 108.99125671]
[-76.72048950 109.14729309]
[-91.71968079 109.30332947]
[-106.71886444 109.45936584]
[-114.18952942 122.87892914]
[-127.37732697 130.75151062]
[-142.73481750 130.95942688]
[-156.13088989 123.44673157]
[-163.96209717 110.23432159]
[-164.12187195 94.87625885]
[-156.56723022 81.50379181]
[-143.33033752 73.71404266]
[-127.97184753 73.60240936]
[-114.62312317 81.19892883]
[-106.87490082 94.46017456]
[-91.87571716 94.30413818]
[-76.87652588 94.14810181]
[-61.87733841 93.99206543]
[-46.88463974 93.52402496]
[-31.90492630 92.74417877]
[-19.59712601 84.35565948]
[-5.41335773 91.36502838]
[9.56635666 90.58518219]
[24.54607201 89.80533600]
[39.51686096 88.86970520]
[54.47711182 87.77839661]
[69.43736267 86.68708801]
[80.42302704 76.47360992]
[82.59986115 61.63240051]
[84.77669525 46.79119492]
[86.95353699 31.94999123]
[88.97586823 17.08694267]
[90.84348297 2.20366359]
[92.71109772 -12.67961597]
[94.57871246 -27.56289673]
[88.61984253 -42.21903610]
[97.88157654 -53.88392258]
[88.31523895 -42.33034134]
[75.42314911 -34.66262054]
[60.70425034 -31.77227592]
[45.86990356 -33.99536896]
[32.64488602 -41.07342148]
[22.56685257 -52.18347549]
[16.80757332 -66.03377533]
[16.03667450 -81.01394653]
[20.34378624 -95.38227844]
[29.22812462 -107.46815491]
[41.65671539 -115.86637878]
[56.18449783 -119.60048676]
[71.12233734 -118.23631287]
[84.73342133 -111.93247986]
[95.43521118 -101.42192078]
[101.98340607 -87.92669678]
[103.61647797 -73.01299286]
[110.24497223 -86.46895599]
[116.87347412 -99.92491913]
[115.25450134 -116.24395752]
[128.73365784 -125.58441925]
[143.44474792 -118.33763885]
[144.25425720 -101.95848083]
[130.32943726 -93.29642487]
[123.70094299 -79.84045410]
[117.07244110 -66.38449097]
[112.76485443 -52.01630783]
[118.85730743 -38.42472076]
[109.46199036 -25.69528389]
[107.59437561 -10.81200314]
[105.72676086 4.07127666]
[103.85915375 18.95455742]
[106.16186523 26.02867508]
[101.79473877 34.12682724]
[99.61790466 48.96803284]
[97.44107056 63.80923843]
[95.26422882 78.65044403]
[105.77864075 77.88774109]
[115.89039612 82.22644043]
[123.17089844 91.08266449]
[138.17008972 90.92662811]
[144.18043518 76.93393707]
[155.36691284 66.60036469]
[169.79139709 61.71628189]
[184.95474243 63.12787628]
[198.22982788 70.59058380]
[207.31666565 82.81144714]
[210.64088440 97.67312622]
[207.62655640 112.60073853]
[198.79592896 125.00799561]
[185.67897034 132.74525452]
[170.54827881 134.47200012]
[156.02529907 129.88906860]
[144.62626648 119.79045105]
[138.32612610 105.92581940]
[123.32693481 106.08185577]
[136.56477356 113.13591766]
[149.80259705 120.18997192]
[163.04043579 127.24403381]
[178.04020691 127.32839966]
[192.04431152 132.70288086]
[203.24923706 142.67530823]
[210.21199036 155.96139526]
[212.03584290 170.85011292]
[208.48591614 185.42398071]
[200.01939392 197.80615234]
[187.72663879 206.40197754]
[173.19076538 210.10443115]
[158.28375244 208.43670654]
[144.92543030 201.61358643]
[134.83612061 190.51376343]
[129.31518555 176.56675720]
[129.07414246 161.56550598]
[121.88276672 148.40177917]
[114.69138336 135.23803711]
[107.50000000 122.07429504]
[107.50000000 137.07429504]
[107.50000000 152.07429504]
[107.50000000 167.07429504]
[107.50000000 182.07429504]
[107.50000000 197.07429504]
[107.50000000 212.07429504]
[107.50000000 227.07429504]
[107.50000000 242.07429504]
[107.50000000 257.07431030]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[17 55]
[18 54]
[19 53]
[21 52]
[22 51]
[23 50]
[25 48]
[26 47]
[29 46]
[30 45]
[31 44]
[32 43]
[56 102]
[57 101]
[58 100]
[59 99]
[60 97]
[61 96]
[62 95]
[63 94]
[65 92]
[82 91]
[83 90]
[84 89]
[105 121]
[106 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
