%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACCCACCCAAGAACAGGGUUUGUUAAGAUGGCAGAGCCCGGUAAUCGCAUAAAACUUAAxxxxxxxxxxAGUCACAGCCCUAUACUCCCUCUACAUAUUUACCACAACACAAUGGGGCUCACUCACCCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[106.12179565 266.85696411]
[106.12179565 251.85696411]
[106.12179565 236.85696411]
[106.12179565 221.85696411]
[106.12179565 206.85696411]
[106.12179565 191.85696411]
[106.12179565 176.85696411]
[106.12179565 161.85696411]
[106.12179565 146.85696411]
[106.12179565 131.85696411]
[94.60560608 128.17239380]
[86.58498383 121.01120758]
[75.08318329 130.63973999]
[63.58137894 140.26826477]
[52.07957840 149.89678955]
[55.38713837 164.84063721]
[51.35989761 179.60681152]
[40.92328644 190.80215454]
[26.47555542 195.85404968]
[11.33669376 193.60162354]
[-1.01450169 184.56245422]
[-7.73981619 170.81369019]
[-7.29382229 155.51467896]
[0.22099486 142.18103027]
[13.07778454 133.87672424]
[28.32215118 132.51002502]
[42.45104980 138.39498901]
[53.95285416 128.76646423]
[65.45465851 119.13793182]
[76.95645905 109.50940704]
[75.15770721 97.92781067]
[78.85037994 86.80428314]
[69.10272980 75.40325928]
[57.90695953 65.42053223]
[45.46752167 57.03839111]
[33.02807999 48.65624619]
[20.58864021 40.27410507]
[8.14919949 31.89196014]
[-11.91718006 41.90796280]
[-35.04503250 35.76561737]
[-49.18047333 14.62300777]
[-63.50307083 10.16619205]
[-77.82566833 5.70937681]
[-94.74599457 6.77652264]
[-100.45545197 -9.18713760]
[-86.69618988 -19.09264565]
[-73.36885071 -8.61322117]
[-59.04625702 -4.15640497]
[-44.72365952 0.30041063]
[-37.67852402 -12.94217491]
[-49.37814713 -22.32933617]
[-65.41815948 -22.01681519]
[-75.55197906 -34.45406342]
[-72.00582123 -50.10028458]
[-57.49998474 -56.95304108]
[-43.16210938 -49.75548172]
[-39.99098587 -34.02896118]
[-28.29136086 -24.64179802]
[-17.71146202 -27.01071167]
[-7.13651609 -26.20322418]
[2.52094960 -22.42664719]
[10.46757221 -16.13854790]
[16.09416389 -7.99591970]
[19.02167320 1.21139741]
[19.12470055 10.63639545]
[16.53134155 19.45252037]
[28.97078323 27.83466339]
[41.41022491 36.21680832]
[53.84966278 44.59894943]
[66.28910065 52.98109436]
[60.79971695 39.02162933]
[61.34963608 24.03171349]
[67.84712219 10.51199913]
[79.20825195 0.71787864]
[93.53772736 -3.71676874]
[108.44507599 -2.05214453]
[121.44341278 5.43405485]
[130.36433411 17.49296188]
[133.71961975 32.11288452]
[130.94952393 46.85488510]
[122.51618195 59.25967026]
[109.82645416 67.25785065]
[94.99727631 69.51513672]
[80.50374603 65.65560913]
[90.25139618 77.05662537]
[115.73417664 76.01627350]
[132.43884277 99.74699402]
[147.14680481 96.80151367]
[161.85476685 93.85603333]
[176.56272888 90.91055298]
[191.27069092 87.96506500]
[205.97865295 85.01958466]
[220.68661499 82.07410431]
[235.39457703 79.12861633]
[235.56655884 64.07324982]
[238.86534119 49.38272095]
[245.14674377 35.69923782]
[254.13615417 23.62098122]
[265.44058228 13.67596340]
[278.56588745 6.29893684]
[292.93823242 1.81239343]
[307.92935181 0.41246587]
[322.88391113 2.16035295]
[337.14813232 6.97964430]
[350.09844971 14.65966129]
[361.16876221 24.86466789]
[369.87509155 37.14854050]
[375.83682251 50.97428894]
[378.79339600 65.73750305]
[378.61547852 80.79280090]
[375.31091309 95.48203278]
[369.02413940 109.16304779]
[360.02996826 121.23776245]
[348.72161865 131.17832947]
[335.59344482 138.55020142]
[321.21932983 143.03108215]
[306.22763062 144.42510986]
[291.27377319 142.67134094]
[277.01144409 137.84643555]
[264.06414795 130.16133118]
[252.99786377 119.95197296]
[244.29637146 107.66467285]
[238.34005737 93.83657837]
[223.63209534 96.78206635]
[208.92413330 99.72754669]
[194.21617126 102.67302704]
[179.50820923 105.61851501]
[164.80024719 108.56399536]
[150.09230042 111.50947571]
[135.38433838 114.45495605]
[149.70391846 118.92142487]
[164.68444824 119.68536377]
[177.04286194 128.18653870]
[183.11332703 141.90328979]
[181.09523010 156.76690674]
[171.58717346 168.36849976]
[157.40946960 173.26673889]
[142.76756287 170.00869751]
[132.00460815 159.56079102]
[128.31317139 145.02070618]
[121.12179565 131.85696411]
[121.12179565 146.85696411]
[121.12179565 161.85696411]
[121.12179565 176.85696411]
[121.12179565 191.85696411]
[121.12179565 206.85696411]
[121.12179565 221.85696411]
[121.12179565 236.85696411]
[121.12179565 251.85696411]
[121.12179565 266.85696411]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 30]
[13 29]
[14 28]
[15 27]
[32 85]
[33 84]
[34 70]
[35 69]
[36 68]
[37 67]
[38 66]
[41 49]
[42 48]
[43 47]
[50 58]
[51 57]
[87 130]
[88 129]
[89 128]
[90 127]
[91 126]
[92 125]
[93 124]
[94 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
