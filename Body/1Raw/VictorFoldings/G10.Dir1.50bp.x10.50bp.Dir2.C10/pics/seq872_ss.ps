%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUGAAAAUGUUUAGACGGGCUCACAUCACCCCAUAAACAAAUAGGUUUGGUCCUAGCCUUUxxxxxxxxxxACACCCCAUCCUAAAGUAAGGUCAGCUAAAUAAGCUAUCGGGCCCAUACCCCGAAAAUGUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 290.17889404]
[92.50000000 275.17889404]
[92.50000000 260.17889404]
[92.50000000 245.17889404]
[92.50000000 230.17889404]
[92.50000000 215.17889404]
[92.50000000 200.17889404]
[92.50000000 185.17889404]
[92.50000000 170.17889404]
[92.50000000 155.17889404]
[84.97042084 153.61970520]
[77.72740173 151.03814697]
[70.90905762 147.48345947]
[64.64538574 143.02339172]
[59.05582047 137.74301147]
[54.24692917 131.74299622]
[50.31040955 125.13773346]
[47.32131195 118.05316925]
[32.60578918 120.96063995]
[17.89026833 123.86811066]
[3.17474508 126.77558899]
[-11.54077721 129.68305969]
[-26.25629997 132.59053040]
[-32.43897629 144.59820557]
[-44.24559021 150.74516296]
[-57.24173737 148.97631836]
[-66.69078827 140.16337585]
[-81.46290588 142.76809692]
[-96.23502350 145.37283325]
[-102.10033417 159.64173889]
[-114.76197052 168.45573425]
[-130.17964172 169.00230408]
[-143.43363953 161.10704041]
[-150.29464722 147.28930664]
[-148.57336426 131.95826721]
[-138.81901550 120.00601196]
[-124.14419556 115.24646759]
[-109.23159027 119.19837952]
[-98.83974457 130.60070801]
[-84.06762695 127.99598694]
[-69.29550934 125.39126587]
[-60.27713013 111.22892761]
[-43.48166275 107.87574768]
[-29.16377258 117.87500763]
[-14.44824982 114.96753693]
[0.26727274 112.06006622]
[14.98279572 109.15259552]
[29.69831848 106.24511719]
[44.41384125 103.33764648]
[48.09376144 79.83310699]
[61.24790955 60.00954437]
[81.47531128 47.48527145]
[105.08393860 44.54628372]
[127.76462555 51.72902679]
[136.92655945 39.85220337]
[146.08848572 27.97537994]
[148.39128113 12.32265663]
[162.29133606 6.97126198]
[171.45327759 -4.90556192]
[180.61521912 -16.78238487]
[182.91799927 -32.43510818]
[196.81805420 -37.78650284]
[205.97999573 -49.66332626]
[215.14193726 -61.54014969]
[214.43907166 -85.13501740]
[234.27803040 -96.72480774]
[239.11784363 -110.92255402]
[243.95765686 -125.12030792]
[248.79747009 -139.31806946]
[253.63729858 -153.51580811]
[240.70481873 -161.22587585]
[229.65824890 -171.45654297]
[220.98045349 -183.76060486]
[215.05082703 -197.60014343]
[212.12855530 -212.37019348]
[212.34140015 -227.42503357]
[215.68006897 -242.10655212]
[221.99858093 -255.77293396]
[231.02075195 -267.82675171]
[242.35214233 -277.74102783]
[255.49740601 -285.08239746]
[269.88189697 -289.52990723]
[284.87677002 -290.88912964]
[299.82650757 -289.10064697]
[314.07760620 -284.24264526]
[327.00701904 -276.52752686]
[338.04959106 -266.29248047]
[346.72253418 -253.98503113]
[352.64672852 -240.14314270]
[355.56317139 -225.37196350]
[355.34442139 -210.31719971]
[351.99996948 -195.63699341]
[345.67608643 -181.97309875]
[336.64916992 -169.92283630]
[325.31387329 -160.01300049]
[312.16574097 -152.67681885]
[297.77951050 -148.23497009]
[282.78408813 -146.88163757]
[267.83505249 -148.67599487]
[262.99523926 -134.47824097]
[258.15542603 -120.28049469]
[253.31559753 -106.08274078]
[248.47578430 -91.88498688]
[251.63914490 -88.79942322]
[254.12852478 -85.14831543]
[268.95098877 -87.44918823]
[283.77349854 -89.75006104]
[298.59597778 -92.05093384]
[309.18832397 -104.10007477]
[325.20538330 -103.18727875]
[334.36022949 -90.01275635]
[329.63006592 -74.68287659]
[314.64346313 -68.95742035]
[300.89685059 -77.22845459]
[286.07437134 -74.92758179]
[271.25189209 -72.62670135]
[256.42938232 -70.32582855]
[252.97094727 -61.48476410]
[246.05935669 -54.78732681]
[236.86737061 -51.52109146]
[227.01875305 -52.37821579]
[217.85682678 -40.50139236]
[208.69488525 -28.62456894]
[207.04742432 -13.82135487]
[192.49203491 -7.62045002]
[183.33009338 4.25637341]
[174.16816711 16.13319778]
[172.52070618 30.93641090]
[157.96531677 37.13731766]
[148.80337524 49.01414108]
[139.64144897 60.89096451]
[146.14428711 68.82845306]
[151.08033752 77.82434082]
[154.28199768 87.57318878]
[155.64054871 97.74398041]
[155.10987854 107.99137115]
[152.70799255 117.96742249]
[148.51644897 127.33340454]
[142.67756653 135.77130127]
[135.38960266 142.99461365]
[126.90001678 148.75807190]
[117.49705505 152.86599731]
[107.50000000 155.17889404]
[107.50000000 170.17889404]
[107.50000000 185.17889404]
[107.50000000 200.17889404]
[107.50000000 215.17889404]
[107.50000000 230.17889404]
[107.50000000 245.17889404]
[107.50000000 260.17889404]
[107.50000000 275.17889404]
[107.50000000 290.17889404]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[18 49]
[19 48]
[20 47]
[21 46]
[22 45]
[23 44]
[27 41]
[28 40]
[29 39]
[54 131]
[55 130]
[56 129]
[58 127]
[59 126]
[60 125]
[62 123]
[63 122]
[64 121]
[66 103]
[67 102]
[68 101]
[69 100]
[70 99]
[105 117]
[106 116]
[107 115]
[108 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
