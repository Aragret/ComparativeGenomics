%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACUAUACUACUAACAGACCGCAACCUCAACACCACCUUCUUCGACCCCGCCGGAGGAGGAGxxxxxxxxxxAACUGACACUGAGCCACAACCCAAACAACCCAGCUCUCCCUAAGCUUCAAACUAGACUACUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[77.69580078 485.55471802]
[80.28157806 466.34628296]
[80.58955383 451.34942627]
[80.89753723 436.35260010]
[81.20551300 421.35577393]
[81.51348877 406.35891724]
[81.82146454 391.36209106]
[82.12944031 376.36523438]
[82.43742371 361.36840820]
[82.74539948 346.37158203]
[68.45343018 343.36590576]
[54.95851517 337.77105713]
[42.72543716 329.77807617]
[32.17582321 319.66067505]
[23.67362976 307.76571655]
[17.51255226 294.50149536]
[13.90590954 280.32363892]
[12.97924137 265.71951294]
[14.76594830 251.19129944]
[19.20608330 237.23898315]
[26.14836884 224.34295654]
[35.35534286 212.94754028]
[46.51148605 203.44567871]
[59.23403931 196.16539001]
[73.08612061 191.35841370]
[87.59174347 189.19154358]
[88.20756531 174.20419312]
[80.22855377 165.06103516]
[80.65711975 152.53155518]
[89.80976105 143.38645935]
[90.73317719 128.41491699]
[78.35142517 120.60631561]
[71.16277313 107.85463715]
[70.89164734 93.21877289]
[57.60430908 86.25841522]
[44.31696701 79.29805756]
[31.02962494 72.33769989]
[21.15258598 83.71929932]
[8.91665268 92.51581573]
[-5.01830482 98.25286102]
[-19.90079308 100.62104797]
[-34.92821503 99.49265289]
[-49.29016495 94.92854309]
[-62.21212006 87.17484283]
[-72.99721527 76.64971161]
[-81.06381989 63.92074203]
[-85.97691345 49.67440414]
[-87.47154999 34.67897797]
[-85.46710968 19.74314880]
[-80.07170105 5.67238998]
[-71.57627869 -6.77448225]
[-60.43900681 -16.92622375]
[-47.26049423 -24.23536301]
[-32.75144577 -28.30772781]
[-17.69431114 -28.92370224]
[-2.90110493 -26.05006409]
[10.83039284 -19.84178734]
[22.75966072 -10.63367748]
[32.24336624 1.07768536]
[38.77006912 14.66072178]
[41.98778915 29.38291550]
[41.72299957 44.45031738]
[37.98998260 59.05036163]
[51.27732086 66.01071930]
[64.56466675 72.97107697]
[77.85200500 79.93142700]
[94.50813293 70.62108612]
[113.40278625 73.28583527]
[123.27849579 61.99555588]
[133.15420532 50.70527649]
[143.02990723 39.41499710]
[128.74681091 43.99683380]
[113.76020813 44.63073349]
[99.14122009 41.27138901]
[85.93469238 34.15890121]
[75.08451080 23.80160713]
[67.36615753 10.93976402]
[63.33127594 -3.50737190]
[63.26824951 -18.50724030]
[67.18157959 -32.98777390]
[74.79158020 -45.91402054]
[85.55434418 -56.36212921]
[98.70063782 -63.58534622]
[113.29087830 -67.06742096]
[128.28227234 -66.55947876]
[142.60337830 -62.09783173]
[155.23060608 -54.00135422]
[165.26148987 -42.84872055]
[171.97911072 -29.43702126]
[174.90333557 -14.72481728]
[173.82516479 0.23638394]
[168.82167053 14.37728214]
[160.25344849 26.68392754]
[173.94406128 20.55475235]
[187.63468933 14.42557907]
[186.00436401 -0.61427456]
[189.10337830 -15.42141056]
[196.62812805 -28.54517746]
[207.84143066 -38.69984055]
[221.64469910 -44.89055252]
[236.68563843 -46.51080704]
[251.49069214 -43.40187073]
[264.60940552 -35.86832047]
[274.75656128 -24.64822388]
[280.93801880 -10.84080887]
[282.54821777 4.20121670]
[279.42935181 19.00418663]
[271.88702393 32.11785889]
[260.66012573 42.25748444]
[246.84855652 48.42969131]
[231.80546570 50.02978897]
[217.00457764 46.90101242]
[203.89596558 39.34989166]
[193.76387024 28.11620522]
[180.07324219 34.24538040]
[166.38261414 40.37455368]
[154.32019043 49.29070282]
[144.44447327 60.58098221]
[134.56877136 71.87126160]
[124.69306946 83.16154480]
[129.27388000 93.97330475]
[129.33627319 105.71528625]
[124.87060547 116.57511139]
[116.56616211 124.87656403]
[105.70472717 129.33831787]
[104.78131104 144.30987549]
[113.37954712 160.56106567]
[103.19492340 174.82002258]
[102.57909393 189.80737305]
[117.57981873 193.40303040]
[131.59288025 199.84057617]
[144.08578491 208.87339783]
[154.58422852 220.15632629]
[162.69003296 233.25880432]
[168.09629822 247.68130493]
[170.59898376 262.87438965]
[170.10462952 278.25964355]
[166.63385010 293.25170898]
[160.32046509 307.28048706]
[151.40635681 319.81289673]
[140.23219299 330.37310791]
[127.22439575 338.56060791]
[112.87890625 344.06533813]
[97.74224091 346.67953491]
[97.43425751 361.67639160]
[97.12628174 376.67321777]
[96.81830597 391.67007446]
[96.51033020 406.66690063]
[96.20234680 421.66372681]
[95.89437103 436.66058350]
[95.58639526 451.65740967]
[95.27841949 466.65426636]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 152]
[3 151]
[4 150]
[5 149]
[6 148]
[7 147]
[8 146]
[9 145]
[10 144]
[26 129]
[27 128]
[30 126]
[31 125]
[34 66]
[35 65]
[36 64]
[37 63]
[68 120]
[69 119]
[70 118]
[71 117]
[93 116]
[94 115]
[95 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
