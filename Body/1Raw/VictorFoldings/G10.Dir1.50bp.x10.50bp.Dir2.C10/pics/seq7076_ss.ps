%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUUUCCCCUAUUCUCAGGCUACACCCUAGACCAAACCUACGCCAAAAUCCAUUUCACUAUCxxxxxxxxxxCCCAUCGUCCUAGAAUUAAUUCCCCUAAAAAUCUUUGAAAUAGGGCCCGUAUUUACCCUAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[100.57283783 278.53051758]
[100.57283783 263.53051758]
[100.57283783 248.53053284]
[100.57283783 233.53053284]
[100.57283783 218.53053284]
[100.57283783 203.53053284]
[100.57283783 188.53053284]
[100.57283783 173.53053284]
[100.57283783 158.53053284]
[100.57283783 143.53053284]
[98.88244629 128.62608337]
[84.74905396 124.25098419]
[74.68333435 113.40776825]
[71.36997223 98.98848724]
[75.69268799 84.83898926]
[86.49855042 74.73317719]
[83.13928986 60.11416626]
[79.78002930 45.49515915]
[76.42077637 30.87615204]
[73.06151581 16.25714493]
[69.70225525 1.63813782]
[66.34299469 -12.98086929]
[61.34230042 -20.70024872]
[63.06811142 -27.93445778]
[60.00971603 -42.61935425]
[56.95132065 -57.30425262]
[42.08613586 -55.25411987]
[27.11569977 -54.22320938]
[12.10981083 -54.21632004]
[-2.86156559 -55.23349380]
[-17.72862434 -57.26998138]
[-32.42205048 -60.31629181]
[-46.87333298 -64.35821533]
[-61.01509476 -69.37691498]
[-74.78139496 -75.34898376]
[-88.10806274 -82.24658203]
[-100.93294525 -90.03754425]
[-113.19625092 -98.68555450]
[-124.84080505 -108.15028381]
[-135.81231689 -118.38760376]
[-146.05963135 -129.34977722]
[-155.53495789 -140.98570251]
[-164.19413757 -153.24113464]
[-171.99678040 -166.05891418]
[-178.90652466 -179.37927246]
[-184.89112854 -193.14013672]
[-189.92271423 -207.27731323]
[-193.97779846 -221.72491455]
[-197.03749084 -236.41555786]
[-199.08752441 -251.28076172]
[-200.11834717 -266.25119019]
[-200.12512207 -281.25708008]
[-199.10784912 -296.22845459]
[-197.07127380 -311.09548950]
[-194.02485657 -325.78890991]
[-189.98283386 -340.24017334]
[-184.96405029 -354.38189697]
[-178.99188232 -368.14816284]
[-172.09419250 -381.47476196]
[-164.30314636 -394.29959106]
[-155.65505981 -406.56283569]
[-146.19024658 -418.20733643]
[-135.95285034 -429.17877197]
[-124.99060822 -439.42602539]
[-113.35462189 -448.90127563]
[-101.09913635 -457.56036377]
[-88.28130341 -465.36294556]
[-74.96089172 -472.27258301]
[-61.19999313 -478.25711060]
[-47.06277466 -483.28857422]
[-32.61515427 -487.34356689]
[-17.92448997 -490.40316772]
[-3.05927873 -492.45309448]
[11.91117096 -493.48382568]
[26.91706085 -493.49050903]
[41.88842392 -492.47314453]
[56.75545502 -490.43643188]
[71.44883728 -487.38992310]
[85.90007019 -483.34780884]
[100.04176331 -478.32891846]
[113.80798340 -472.35668945]
[127.13455200 -465.45889282]
[139.95933533 -457.66775513]
[152.22251892 -449.01959229]
[163.86695862 -439.55471802]
[174.83833313 -429.31723022]
[185.08549500 -418.35491943]
[194.56066895 -406.71887207]
[203.21968079 -394.46331787]
[211.02215576 -381.64544678]
[217.93171692 -368.32498169]
[223.91613770 -354.56405640]
[228.94752502 -340.42678833]
[233.00242615 -325.97915649]
[236.06192017 -311.28845215]
[238.11175537 -296.42324829]
[239.14236450 -281.45278931]
[239.14895630 -266.44689941]
[238.13148499 -251.47554016]
[236.09469604 -236.60852051]
[233.04809570 -221.91516113]
[229.00587463 -207.46395874]
[223.98689270 -193.32229614]
[218.01454163 -179.55610657]
[211.11668396 -166.22958374]
[203.32545471 -153.40486145]
[194.67720032 -141.14172363]
[185.21223450 -129.49736023]
[174.97470093 -118.52605438]
[164.01231384 -108.27896881]
[152.37619019 -98.80386353]
[140.12060547 -90.14493561]
[127.30266571 -82.34254456]
[113.98215485 -75.43308258]
[100.22117615 -69.44874573]
[86.08389282 -64.41744995]
[71.63621521 -60.36264801]
[74.69461060 -45.67774963]
[77.75300598 -30.99285316]
[80.96200562 -16.34012794]
[84.32126617 -1.72112095]
[87.68051910 12.89788628]
[91.03977966 27.51689339]
[94.39904022 42.13590240]
[97.75830078 56.75490952]
[101.11755371 71.37391663]
[115.25094604 75.74901581]
[125.31666565 86.59223175]
[128.63002014 101.01151276]
[124.30731201 115.16101074]
[113.50144958 125.26682281]
[119.57489777 111.55138397]
[131.24728394 102.13037109]
[145.93562317 99.08855438]
[160.38954163 103.09905243]
[171.41055298 113.27438354]
[176.55979919 127.36286163]
[174.69783020 142.24684143]
[166.23666382 154.63267517]
[153.04867554 161.77947998]
[138.05221558 162.10577393]
[124.56586456 155.53932190]
[115.57283783 143.53053284]
[115.57283783 158.53053284]
[115.57283783 173.53053284]
[115.57283783 188.53053284]
[115.57283783 203.53053284]
[115.57283783 218.53053284]
[115.57283783 233.53053284]
[115.57283783 248.53053284]
[115.57283783 263.53051758]
[115.57283783 278.53051758]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 131]
[16 126]
[17 125]
[18 124]
[19 123]
[20 122]
[21 121]
[22 120]
[24 119]
[25 118]
[26 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
