%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAUCCCCACCGGCGUCAAAGUAUUUAGCUGACUCGCCACACUCCACGGAAGCAAUAUGAAxxxxxxxxxxUUCACAGCCACAGAACUAAUCAUAUUUUAUAUCUUCUUCGAAACCACACUUAUCCCCACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[122.58937073 287.26547241]
[122.58937073 272.26547241]
[122.58937073 257.26547241]
[122.58937073 242.26547241]
[122.58937073 227.26547241]
[122.58937073 212.26547241]
[122.58937073 197.26547241]
[122.58937073 182.26547241]
[122.58937073 167.26547241]
[122.58937073 152.26547241]
[118.13255310 137.94287109]
[109.62145996 125.59130096]
[101.11037445 113.23973083]
[106.13031006 127.37480164]
[98.48138428 140.27804565]
[83.67141724 142.65814209]
[72.36473083 132.80122375]
[72.70301819 117.80503845]
[84.44343567 108.46782684]
[69.45074463 107.99978638]
[54.45804596 107.53174591]
[39.48725510 108.46736908]
[24.66949654 110.79847717]
[9.85173893 113.12957764]
[-4.91431665 115.76844025]
[-19.62227821 118.71392822]
[-34.33023834 121.65940857]
[-38.58213425 136.36247253]
[-49.18821716 147.39739990]
[-63.71128464 152.22843933]
[-78.81404877 149.74546814]
[-91.02600098 140.51905823]
[-97.54092407 126.66934967]
[-96.86173248 111.37891388]
[-89.14450836 98.16138458]
[-76.16260529 90.05405426]
[-60.89917755 88.91992188]
[-46.86164093 95.01960754]
[-37.27572250 106.95144653]
[-22.56776047 104.00596619]
[-7.85979939 101.06048584]
[-4.48357487 97.59975433]
[1.12421048 96.26407623]
[7.52063465 98.31182098]
[22.33839226 95.98072052]
[37.15615082 93.64961243]
[24.39382362 85.76779938]
[17.78527451 72.30202484]
[19.35858536 57.38476562]
[28.63092613 45.59393311]
[42.75673294 40.54798889]
[57.40097809 43.79546738]
[68.06952667 54.33975601]
[71.48834229 68.94495392]
[66.60822296 83.12890625]
[54.92609024 92.53904724]
[69.91878510 93.00708771]
[84.91148376 93.47512817]
[97.26305389 84.96404266]
[102.16460419 70.78748322]
[101.27407837 64.13056946]
[103.57547760 58.84522629]
[107.57618713 56.13048172]
[113.06321716 42.17009354]
[118.55024719 28.20970345]
[124.03728485 14.24931335]
[129.52430725 0.28892380]
[135.01135254 -13.67146587]
[140.49838257 -27.63185501]
[127.83261108 -35.75987244]
[116.99613190 -46.20290375]
[108.40544891 -58.55953598]
[102.39076996 -72.35482025]
[99.18329620 -87.05850983]
[98.90629578 -102.10541534]
[101.57042694 -116.91719055]
[107.07328033 -130.92449951]
[115.20334625 -143.58894348]
[125.64813232 -154.42373657]
[138.00614929 -163.01242065]
[151.80241394 -169.02487183]
[166.50662231 -172.22996521]
[181.55357361 -172.50453186]
[196.36491394 -169.83799744]
[210.37133789 -164.33288574]
[223.03446960 -156.20075989]
[233.86756897 -145.75422668]
[242.45425415 -133.39480591]
[248.46446228 -119.59757996]
[251.66717529 -104.89286041]
[251.93931580 -89.84585571]
[249.27038574 -75.03495026]
[243.76298523 -61.02941895]
[235.62882996 -48.36760330]
[225.18054199 -37.53619003]
[212.81973267 -28.95150948]
[199.02153015 -22.94353485]
[184.31628418 -19.74319458]
[169.26924133 -19.47350311]
[154.45877075 -22.14482498]
[148.97174072 -8.18443489]
[143.48471069 5.77595520]
[137.99766541 19.73634529]
[132.51063538 33.69673538]
[127.02361298 47.65712357]
[121.53657532 61.61751556]
[116.34116364 75.68903351]
[111.43961334 89.86559296]
[113.46194458 104.72863770]
[121.97303772 117.08021545]
[130.48413086 129.43177795]
[129.83421326 114.44586945]
[132.15739441 99.62686920]
[137.36212158 85.55879211]
[145.24328613 72.79605865]
[155.49028015 61.84165192]
[167.69927979 53.12726974]
[181.38911438 46.99635696]
[196.02030945 43.69052124]
[211.01620483 43.34004974]
[225.78585815 45.95875168]
[239.74716187 51.44342804]
[252.34994507 59.57792664]
[263.09750366 70.04167175]
[271.56628418 82.42228699]
[277.42254639 96.23185730]
[280.43548584 110.92614746]
[280.48638916 125.92605591]
[277.57321167 140.64045715]
[271.81079102 154.48944092]
[263.42617798 166.92723083]
[252.74986267 177.46365356]
[240.20257568 185.68347168]
[226.27879333 191.26274109]
[211.52725220 193.98159790]
[196.52931213 193.73287964]
[181.87603760 190.52639771]
[168.14491272 184.48849487]
[155.87707520 175.85716248]
[145.55598450 164.97251892]
[137.58937073 152.26547241]
[137.58937073 167.26547241]
[137.58937073 182.26547241]
[137.58937073 197.26547241]
[137.58937073 212.26547241]
[137.58937073 227.26547241]
[137.58937073 242.26547241]
[137.58937073 257.26547241]
[137.58937073 272.26547241]
[137.58937073 287.26547241]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 111]
[12 110]
[13 109]
[19 58]
[20 57]
[21 56]
[22 46]
[23 45]
[24 44]
[25 41]
[26 40]
[27 39]
[59 108]
[60 107]
[63 106]
[64 105]
[65 104]
[66 103]
[67 102]
[68 101]
[69 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
