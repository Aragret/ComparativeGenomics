%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGGCUCAACAUUUUUUGUAGCCACAGGCUUCCACGGACUUCACGUCAUUAUUGGCUCAACUUxxxxxxxxxxGCUCAACAUUUUUUGUAGCCACAGGCUUCCACGGACUUCACGUCAUUAUUGGCUCAACUUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[100.46940613 292.93933105]
[100.46940613 277.93933105]
[100.46940613 262.93933105]
[100.46940613 247.93933105]
[100.46940613 232.93933105]
[100.46940613 217.93933105]
[100.46940613 202.93933105]
[100.46940613 187.93933105]
[100.46940613 172.93933105]
[100.46940613 157.93933105]
[86.84242249 151.66992188]
[75.45135498 161.42919922]
[64.06027985 171.18847656]
[52.66920471 180.94775391]
[50.07712555 187.13836670]
[45.42540359 190.53680420]
[40.60426712 190.86215210]
[28.82213020 200.14553833]
[17.03999329 209.42892456]
[13.72999001 225.12680054]
[-0.67094356 232.19735718]
[-15.11564350 225.21664429]
[-18.52337265 209.53968811]
[-8.28001213 197.19250488]
[7.75660753 197.64678955]
[19.53874397 188.36340332]
[31.32088280 179.08001709]
[42.90993118 169.55667114]
[54.30100250 159.79739380]
[65.69207764 150.03813171]
[77.08315277 140.27885437]
[60.39540482 113.59290314]
[65.43836975 85.70101166]
[85.50888062 70.42627716]
[82.14962006 55.80727005]
[71.51828766 44.09038925]
[76.20878601 29.95360947]
[72.84952545 15.33460140]
[61.77057648 14.67075253]
[51.09241867 8.70243645]
[43.37459946 -2.21802258]
[40.88516617 -16.51900864]
[27.07158470 -22.36579514]
[13.25800133 -28.21258354]
[-0.58465290 -20.93831825]
[-15.85347176 -24.31428909]
[-25.33898735 -36.74646759]
[-24.56242561 -52.36475754]
[-13.89046001 -63.79467773]
[1.63793695 -65.63937378]
[14.69073009 -57.02783585]
[19.10478973 -42.02616501]
[32.91837311 -36.17937851]
[46.73195648 -30.33259010]
[53.37562561 -33.81276703]
[40.70416641 -41.83985901]
[41.32020950 -56.82720184]
[54.60770416 -63.78726959]
[67.27898407 -55.75990295]
[66.66296387 -40.77312469]
[73.30664062 -44.25330353]
[76.36503601 -58.93820190]
[79.42343140 -73.62310028]
[82.48182678 -88.30799866]
[85.54022217 -102.99288940]
[75.34809113 -91.98741913]
[62.60436630 -84.07556152]
[48.21986008 -79.82279205]
[33.22266006 -79.53308105]
[18.68463707 -83.22711182]
[5.64485121 -90.64088440]
[-4.96472263 -101.24451447]
[-12.38580036 -114.28014374]
[-16.08798409 -128.81608582]
[-15.80667305 -143.81346130]
[-11.56197262 -158.20034790]
[-3.65725994 -170.94850159]
[7.34250307 -181.14678955]
[20.65114403 -188.06632996]
[35.31747055 -191.21257019]
[50.29325867 -190.36064148]
[64.50816345 -185.57142639]
[76.94621277 -177.18722534]
[86.71845245 -165.80728149]
[93.12643433 -152.24490356]
[95.71216583 -137.46945190]
[94.29186249 -122.54127502]
[103.20800781 -134.60369873]
[112.12416077 -146.66613770]
[111.17624664 -162.68116760]
[123.20213318 -173.29989624]
[138.97659302 -170.37655640]
[146.39881897 -156.15367126]
[139.77510071 -141.54183960]
[124.18659210 -137.74998474]
[115.27043915 -125.68755341]
[106.35429382 -113.62512207]
[100.22512054 -99.93449402]
[97.16672516 -85.24960327]
[94.10832977 -70.56470490]
[91.04993439 -55.87980652]
[87.99153900 -41.19490814]
[104.49597931 -11.04590893]
[87.46853638 11.97534275]
[90.82778931 26.59435081]
[101.21884918 37.26558304]
[96.76863098 52.44800949]
[100.12789154 67.06701660]
[118.26354980 68.64601898]
[134.40252686 80.31240845]
[142.98939514 100.16268921]
[140.04602051 123.32131958]
[154.91262817 125.31737518]
[169.77922058 127.31343079]
[181.21286011 116.64545441]
[196.83142090 115.87435150]
[209.26029968 125.36420441]
[212.63093567 140.63420105]
[205.35183716 154.47431946]
[190.85997009 160.34967041]
[175.99794006 155.48609924]
[167.78315735 142.18003845]
[152.91656494 140.18397522]
[138.04997253 138.18791199]
[132.40483093 143.12577820]
[144.49453735 152.00489807]
[156.58424377 160.88403320]
[168.67395020 169.76316833]
[180.76365662 178.64230347]
[194.95758057 183.49334717]
[204.82644653 194.78959656]
[207.72773743 209.50634766]
[202.88459778 223.70295715]
[191.59385681 233.57812500]
[176.87872314 236.48762512]
[162.67941284 231.65240479]
[152.79795837 220.36714172]
[149.88008118 205.65643311]
[142.68869019 192.49269104]
[135.49731445 179.32894897]
[128.30592346 166.16522217]
[121.11454773 153.00148010]
[115.46940613 157.93933105]
[115.46940613 172.93933105]
[115.46940613 187.93933105]
[115.46940613 202.93933105]
[115.46940613 217.93933105]
[115.46940613 232.93933105]
[115.46940613 247.93933105]
[115.46940613 262.93933105]
[115.46940613 277.93933105]
[115.46940613 292.93933105]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 31]
[12 30]
[13 29]
[14 28]
[17 27]
[18 26]
[19 25]
[34 108]
[35 107]
[37 105]
[38 104]
[42 54]
[43 53]
[44 52]
[61 102]
[62 101]
[63 100]
[64 99]
[65 98]
[87 97]
[88 96]
[89 95]
[112 124]
[113 123]
[114 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
