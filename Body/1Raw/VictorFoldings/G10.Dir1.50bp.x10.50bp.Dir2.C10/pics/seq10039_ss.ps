%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAUCCCCACCUUGGCUAUCAUCACCCGAUGAGGCAACCAGCCAGAACGCCUGAACGCAGGxxxxxxxxxxACCCUAACAGGUCAACCUCGCUUCCCCACCCUUACUAACAUUAACGAAAAUAACCCCACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[123.30479431 137.64050293]
[127.15019226 123.14177704]
[132.39074707 109.07817078]
[125.48374176 122.39332581]
[125.99744415 138.20619202]
[113.26873779 145.94113159]
[106.36174011 159.25628662]
[99.45474243 172.57144165]
[92.54774475 185.88659668]
[93.82686615 202.23577881]
[80.15630341 211.29380798]
[65.59915924 203.74253845]
[65.13056946 187.35009766]
[79.23258972 178.97959900]
[86.13958740 165.66444397]
[93.04658508 152.34928894]
[99.95358276 139.03413391]
[98.94584656 124.17365265]
[112.16858673 115.48632812]
[119.07558441 102.17117310]
[109.87847137 128.68106079]
[70.42292786 129.06877136]
[55.42373657 129.22480774]
[40.42454910 129.38084412]
[25.42535973 129.53688049]
[10.42617130 129.69291687]
[8.13104153 144.76338196]
[-8.25242615 156.65061951]
[-23.11547279 158.67295837]
[-37.97851944 160.69528198]
[-52.84156799 162.71762085]
[-67.70461273 164.73995972]
[-80.33322906 175.20179749]
[-95.61151886 169.24311829]
[-97.82249451 152.99369812]
[-84.69168854 143.16954041]
[-69.72695160 149.87690735]
[-54.86390305 147.85456848]
[-40.00085449 145.83224487]
[-25.13780785 143.80990601]
[-10.27476120 141.78756714]
[-9.02788639 126.83948517]
[-23.35048294 122.38266754]
[-40.27081299 123.44981384]
[-45.98026657 107.48615265]
[-32.22100830 97.58064270]
[-18.89366722 108.06006622]
[-4.57107067 112.51688385]
[10.27013493 114.69372559]
[25.26932335 114.53768921]
[40.26851273 114.38165283]
[55.26770020 114.22560883]
[70.26689148 114.06957245]
[74.19560242 107.68090057]
[59.61553955 104.15644073]
[58.46203613 89.20085907]
[72.32920074 83.48230743]
[82.05302429 94.90354156]
[85.98174286 88.51486206]
[79.35324097 75.05889893]
[72.72473907 61.60293198]
[66.09624481 48.14696503]
[52.17141724 39.48490524]
[52.98092651 23.10575104]
[67.69201660 15.85896969]
[81.17118073 25.19942856]
[79.55220795 41.51846695]
[86.18070984 54.97443008]
[92.80920410 68.43039703]
[99.43770599 81.88636017]
[106.93730164 81.96437836]
[107.09333801 66.96519470]
[107.24937439 51.96600342]
[107.40541077 36.96681595]
[107.56144714 21.96762657]
[107.71772766 6.96844149]
[122.71691132 7.12497568]
[122.56063080 22.12366486]
[122.40459442 37.12285233]
[122.24855804 52.12203979]
[122.09252167 67.12123108]
[121.93648529 82.12041473]
[129.43608093 82.19843292]
[136.34307861 68.88327789]
[143.25007629 55.56812286]
[145.17626953 38.72395325]
[161.89538574 35.91194153]
[169.22583008 51.19922638]
[156.56523132 62.47512436]
[149.65823364 75.79027557]
[142.75123596 89.10543060]
[151.22485352 76.72812653]
[160.86209106 65.23361969]
[171.57157898 54.73090363]
[183.25175476 45.31955719]
[195.79188538 37.08881760]
[209.07307434 30.11672211]
[222.96937561 24.46937943]
[237.34906006 20.20033264]
[252.07577515 17.35006142]
[267.00988770 15.94559097]
[282.00976562 16.00023651]
[296.93325806 17.51347923]
[311.63879395 20.47097206]
[325.98699951 24.84467316]
[339.84179688 30.59311485]
[353.07183838 37.66178894]
[365.55166626 45.98367691]
[377.16296387 55.47987366]
[387.79562378 66.06034088]
[397.34887695 77.62475586]
[405.73208618 90.06347656]
[412.86578369 103.25856018]
[418.68234253 117.08489990]
[423.12661743 131.41139221]
[426.15646362 146.10220337]
[427.74313354 161.01805115]
[427.87161255 176.01750183]
[426.54064941 190.95834351]
[423.76290894 205.69889832]
[419.56469727 220.09942627]
[413.98580933 234.02336121]
[407.07919312 247.33869934]
[398.91024780 259.91918945]
[389.55651855 271.64556885]
[379.10662842 282.40658569]
[367.65969849 292.10028076]
[355.32424927 300.63473511]
[342.21725464 307.92898560]
[328.46295166 313.91390991]
[314.19177246 318.53274536]
[299.53903198 321.74169922]
[284.64367676 323.51034546]
[269.64691162 323.82192993]
[254.69093323 322.67346191]
[239.91757202 320.07586670]
[225.46687317 316.05377197]
[211.47586060 310.64526367]
[198.07719421 303.90170288]
[185.39791870 295.88696289]
[173.55824280 286.67706299]
[162.67044067 276.35934448]
[152.83772278 265.03161621]
[144.15333557 252.80125427]
[136.69961548 239.78427124]
[130.54722595 226.10404968]
[125.75451660 211.89033508]
[122.36692810 197.27786255]
[120.41657257 182.40519714]
[119.92195129 167.41336060]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 20]
[4 19]
[6 17]
[7 16]
[8 15]
[9 14]
[22 53]
[23 52]
[24 51]
[25 50]
[26 49]
[28 41]
[29 40]
[30 39]
[31 38]
[32 37]
[42 48]
[43 47]
[59 70]
[60 69]
[61 68]
[62 67]
[83 91]
[84 90]
[85 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
