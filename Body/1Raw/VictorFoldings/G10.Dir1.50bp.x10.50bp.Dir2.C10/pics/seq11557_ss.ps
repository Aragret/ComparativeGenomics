%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCACAUCAAGCCCGAAUGAUAUUUCCUAUUCGCCUACACAAUUCUCCGAUCCGUCCCUAxxxxxxxxxxAACCCCCUCCCCAUGCUUACAAGCAAGUACAGCAAUCAACCCUCAACUAUCACACAUCAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[88.59760284 103.83092499]
[74.58088684 98.48941040]
[60.56417465 93.14789581]
[46.54745865 87.80638885]
[32.53074646 82.46487427]
[18.51403427 77.12335968]
[4.49732113 71.78184509]
[-9.51939201 66.44033813]
[-23.53610420 61.09882355]
[-37.55281830 55.75730896]
[-44.06740952 69.27892303]
[-51.70525360 82.19934082]
[-60.41131973 94.42546844]
[-70.12287903 105.86922455]
[-80.76995087 116.44814301]
[-92.27583313 126.08601379]
[-104.55762482 134.71337891]
[-117.52682495 142.26809692]
[-131.08998108 148.69572449]
[-145.14939880 153.94995117]
[-159.60374451 157.99290466]
[-174.34889221 160.79547119]
[-189.27861023 162.33746338]
[-204.28529358 162.60775757]
[-219.26084900 161.60441589]
[-234.09736633 159.33467102]
[-248.68792725 155.81484985]
[-262.92742920 151.07034302]
[-276.71328735 145.13531494]
[-289.94610596 138.05255127]
[-302.53063965 129.87306213]
[-314.37612915 120.65579224]
[-325.39724731 110.46715546]
[-335.51461792 99.38055420]
[-344.65533447 87.47587585]
[-352.75350952 74.83889008]
[-359.75082397 61.56065369]
[-365.59683228 47.73683548]
[-370.24942017 33.46703720]
[-373.67507935 18.85407257]
[-375.84912109 4.00323677]
[-376.75588989 -10.97847271]
[-376.38885498 -25.98310852]
[-374.75064087 -40.90256119]
[-371.85305786 -55.62933731]
[-367.71697998 -70.05731964]
[-362.37222290 -84.08255768]
[-355.85726929 -97.60400391]
[-348.21908569 -110.52422333]
[-339.51272583 -122.75012970]
[-329.80087280 -134.19363403]
[-319.15350342 -144.77227783]
[-307.64736938 -154.40985107]
[-295.36538696 -163.03689575]
[-282.39596558 -170.59127808]
[-268.83264160 -177.01855469]
[-254.77310181 -182.27241516]
[-240.31864929 -186.31500244]
[-225.57342529 -189.11718750]
[-210.64367676 -190.65879822]
[-195.63697815 -190.92871094]
[-180.66145325 -189.92497253]
[-165.82499695 -187.65483093]
[-151.23451233 -184.13464355]
[-136.99513245 -179.38977051]
[-123.20944977 -173.45439148]
[-109.97679138 -166.37127686]
[-97.39249420 -158.19146729]
[-85.54723358 -148.97389221]
[-74.52635956 -138.78497314]
[-64.40927887 -127.69811249]
[-55.26888275 -115.79319763]
[-47.17103195 -103.15599823]
[-40.17407227 -89.87757874]
[-34.32841873 -76.05361176]
[-29.67618752 -61.78369141]
[-26.25089836 -47.17064285]
[-24.07723427 -32.31974792]
[-23.17085457 -17.33801651]
[-23.53829002 -2.33338952]
[-25.17689323 12.58602142]
[-28.07485962 27.31271935]
[-32.21130371 41.74059677]
[-18.19459152 47.08211136]
[-4.17787933 52.42362213]
[9.83883381 57.76513290]
[23.85554695 63.10664749]
[37.87226105 68.44815826]
[51.88897324 73.78967285]
[65.90568542 79.13118744]
[79.92240143 84.47269440]
[93.93910980 89.81420898]
[99.71065521 88.24485779]
[105.46442413 89.69431305]
[119.36698151 84.06235504]
[133.26953125 78.43039703]
[147.17208862 72.79843903]
[161.01530457 67.02217102]
[174.79769897 61.10220718]
[188.58007812 55.18224335]
[194.20422363 40.41252899]
[208.65884399 34.02196121]
[223.36827087 39.80195236]
[229.60566711 54.32333374]
[223.67048645 68.97083282]
[209.08396912 75.05433655]
[194.50003052 68.96462250]
[180.71765137 74.88459015]
[166.93527222 80.80455017]
[161.99874878 86.37018585]
[152.80404663 86.70099640]
[138.90148926 92.33295441]
[124.99893951 97.96491241]
[111.09638214 103.59687042]
[125.83045197 106.40882874]
[139.93315125 111.51901245]
[153.04841614 118.79840851]
[164.84515381 128.06323242]
[175.02552795 139.07958984]
[183.33251953 151.56933594]
[189.55639648 165.21717834]
[193.54003906 179.67852783]
[195.18287659 194.58828735]
[194.44342041 209.57005310]
[191.34033203 224.24557495]
[185.95198059 238.24433899]
[178.41439819 251.21295166]
[168.91786194 262.82397461]
[157.70213318 272.78427124]
[145.05039978 280.84240723]
[131.28202820 286.79489136]
[116.74465942 290.49148560]
[101.80529022 291.83883667]
[86.84110260 290.80294800]
[72.22988892 287.40997314]
[58.34052277 281.74557495]
[45.52366638 273.95272827]
[34.10290909 264.22821045]
[24.36657906 252.81753540]
[16.56048584 240.00874329]
[10.88170719 226.12524414]
[7.47361326 211.51754761]
[6.42224646 196.55444336]
[7.75415039 181.61369324]
[11.43569851 167.07249451]
[17.37394524 153.29798889]
[25.41896820 140.63790894]
[35.36766052 129.41189575]
[46.96884918 119.90334320]
[59.92964935 112.35234070]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 92]
[2 91]
[3 90]
[4 89]
[5 88]
[6 87]
[7 86]
[8 85]
[9 84]
[10 83]
[94 114]
[95 113]
[96 112]
[97 111]
[98 109]
[99 108]
[100 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
