%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCCAUUACUAAACCCACACUCAACAGAAACAAAGCAUACAUCAUUAUUCUCGCACGGACUxxxxxxxxxxCGCCUACACAAUUCUCCGAUCCGUCCCUAACAAACUAGGAGGCGUCCUUGCCCUAUUACUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[94.13078308 396.22756958]
[94.13078308 381.22756958]
[94.13078308 366.22756958]
[94.13078308 351.22756958]
[94.13078308 336.22756958]
[94.13078308 321.22756958]
[94.13078308 306.22756958]
[94.13078308 291.22756958]
[94.13078308 276.22756958]
[94.13078308 261.22756958]
[79.08902740 257.63003540]
[65.33074188 250.54656982]
[53.65108490 240.38186646]
[44.72618484 227.71885681]
[39.07402420 213.28527832]
[37.02434540 197.91177368]
[38.69945145 182.48420715]
[44.00688934 167.89251709]
[52.64454269 154.97944641]
[64.11785889 144.49180603]
[77.76811218 137.03735352]
[92.81027985 133.04953003]
[92.50229645 118.05269623]
[85.58271027 131.36131287]
[81.92053223 145.90739441]
[72.15911865 157.29663086]
[58.34473419 163.14152527]
[43.37326431 162.21681213]
[30.38315392 154.71635437]
[22.09749413 142.21243286]
[20.25319672 127.32625580]
[25.23687744 113.17835999]
[36.00381470 102.73455048]
[50.29695511 98.18415833]
[65.12094879 100.48142242]
[80.07408905 99.29664612]
[66.38346100 93.16747284]
[52.69283676 87.03829956]
[39.00220871 80.90911865]
[28.87010765 92.14280701]
[15.76149464 99.69393158]
[0.96061808 102.82270813]
[-14.08248234 101.22261047]
[-27.89403725 95.05039978]
[-39.12092972 84.91077423]
[-46.66326904 71.79710388]
[-49.78212357 56.99413300]
[-48.17194748 41.95211029]
[-41.99048996 28.14469337]
[-31.84334183 16.92459679]
[-18.72461891 9.39104843]
[-3.91956329 6.28211117]
[11.12137985 7.90236568]
[24.92465019 14.09307671]
[36.13794708 24.24773979]
[43.66270065 37.37150574]
[46.76171875 52.17864227]
[45.13138580 67.21849823]
[58.82201004 73.34767151]
[72.51263428 79.47684479]
[86.20326233 85.60601807]
[100.82226562 82.24675751]
[110.46408081 70.75609589]
[120.10589600 59.26542664]
[127.60589600 46.27504349]
[132.73620605 32.17965698]
[137.86650085 18.08426666]
[142.99679565 3.98887730]
[148.12710571 -10.10651207]
[135.21533203 -17.83197021]
[123.99913025 -27.86158752]
[114.88394928 -39.83280182]
[108.19929504 -53.31285858]
[104.18682098 -67.81446075]
[102.99157715 -82.81339264]
[104.65676117 -97.76744080]
[109.12218475 -112.13603973]
[116.22641754 -125.39975739]
[125.71266174 -137.07913208]
[137.23797607 -146.75195312]
[150.38574219 -154.06855774]
[164.68067932 -158.76446533]
[179.60601807 -160.66989136]
[194.62222290 -159.71598816]
[209.18647766 -155.93722534]
[222.77229309 -149.47021484]
[234.88853455 -140.54870605]
[245.09721375 -129.49523926]
[253.02929688 -116.70936584]
[258.39804077 -102.65329742]
[261.00936890 -87.83515167]
[260.76892090 -72.79059601]
[257.68530273 -58.06348038]
[251.87007141 -44.18618011]
[243.53340149 -31.66035271]
[232.97665405 -20.93879700]
[220.58148193 -12.40909100]
[206.79591370 -6.37957859]
[192.11833191 -3.06822348]
[177.07931519 -2.59472823]
[162.22248840 -4.97620964]
[157.09219360 9.11917973]
[151.96188354 23.21456909]
[146.83158875 37.30995941]
[141.70127869 51.40534592]
[154.33110046 51.63219070]
[162.68879700 59.60044479]
[177.66903687 58.83078384]
[192.64927673 58.06112289]
[207.62951660 57.29146576]
[218.02929688 45.39102936]
[233.80331421 44.41327286]
[245.59312439 54.93828201]
[246.40405273 70.72175598]
[235.75498962 82.39963531]
[219.96382141 83.04364777]
[208.39918518 72.27170563]
[193.41894531 73.04136658]
[178.43870544 73.81102753]
[163.45846558 74.58068848]
[153.62391663 83.56762695]
[139.57597351 81.64949799]
[131.59655762 68.90724182]
[121.95475006 80.39790344]
[112.31293488 91.88857269]
[115.70988464 97.71958923]
[116.27375793 104.93111420]
[113.48197937 112.12811279]
[107.49913788 117.74472046]
[107.80711365 132.74156189]
[122.05944061 135.78488159]
[135.26461792 141.93261719]
[146.75633240 150.87088013]
[155.95558167 162.14501953]
[162.39982605 175.18287659]
[165.76623535 189.32366943]
[165.88783264 203.85160828]
[162.76185608 218.03207397]
[156.54965210 231.14874268]
[147.56838989 242.53982544]
[136.27482605 251.63142395]
[123.24213409 257.96643066]
[109.13078308 261.22756958]
[109.13078308 276.22756958]
[109.13078308 291.22756958]
[109.13078308 306.22756958]
[109.13078308 321.22756958]
[109.13078308 336.22756958]
[109.13078308 351.22756958]
[109.13078308 366.22756958]
[109.13078308 381.22756958]
[109.13078308 396.22756958]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[22 130]
[23 129]
[36 61]
[37 60]
[38 59]
[39 58]
[62 125]
[63 124]
[64 123]
[65 105]
[66 104]
[67 103]
[68 102]
[69 101]
[107 120]
[108 119]
[109 118]
[110 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
