%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACAAAACCCACCCCAUUCCUCCCCACACUCAUCGCCCUUACCACGCUACUCCUACCUAUCxxxxxxxxxxAACUAGGCGGCUAUGGUAUAAUACGCCUCACACUCAUUCUCAACCCCCUGACAAAACACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-20.09402084 324.77545166]
[-27.54893112 337.79177856]
[-35.00384140 350.80807495]
[-42.45875168 363.82440186]
[-42.60328293 379.64492798]
[-55.64273071 386.84368896]
[-63.09764099 399.85998535]
[-70.55255127 412.87631226]
[-64.06948090 426.97415161]
[-67.14408112 442.18359375]
[-78.59410858 452.65625000]
[-94.01679230 454.36517334]
[-107.48178864 446.65328979]
[-113.81154633 432.48593140]
[-110.57213593 417.31076050]
[-99.00917816 406.96292114]
[-83.56886292 405.42138672]
[-76.11395264 392.40509033]
[-68.65904236 379.38876343]
[-69.04773712 364.49923706]
[-55.47505951 356.36947632]
[-48.02014923 343.35317993]
[-40.56523895 330.33685303]
[-33.11032867 317.32055664]
[-45.13537216 309.48104858]
[-56.69993591 300.97689819]
[-67.76732635 291.83511353]
[-78.30243683 282.08465576]
[-88.27183533 271.75650024]
[-97.64389038 260.88342285]
[-106.38887787 249.49989319]
[-114.47903442 237.64202881]
[-121.88871002 225.34745789]
[-128.59437561 212.65519714]
[-134.57478333 199.60549927]
[-139.81092834 186.23979187]
[-144.28622437 172.60046387]
[-147.98645020 158.73078918]
[-150.89987183 144.67477417]
[-153.01725769 130.47702026]
[-154.33187866 116.18256378]
[-154.83956909 101.83676910]
[-154.53872681 87.48514557]
[-153.43028259 73.17322540]
[-151.51776123 58.94642639]
[-148.80725098 44.84987640]
[-145.30732727 30.92830658]
[-141.02909851 17.22588348]
[-135.98616028 3.78608274]
[-130.19447327 -9.34845543]
[-123.67245483 -22.13605690]
[-116.44077301 -34.53615189]
[-108.52237701 -46.50939560]
[-99.94238281 -58.01780319]
[-90.72802734 -69.02485657]
[-80.90853882 -79.49563599]
[-70.51507568 -89.39691925]
[-59.58060455 -98.69729614]
[-48.13982391 -107.36724854]
[-36.22903061 -115.37928009]
[-23.88601875 -122.70796204]
[-11.14994621 -129.33004761]
[1.93877792 -135.22453308]
[15.33862686 -140.37269592]
[29.00708389 -144.75822449]
[42.90078735 -148.36718750]
[56.97565079 -151.18815613]
[71.18701935 -153.21215820]
[85.48980713 -154.43276978]
[99.83863068 -154.84614563]
[114.18796539 -154.45094299]
[128.49227905 -153.24844360]
[142.70620728 -151.24244690]
[156.78462219 -148.43930054]
[170.68289185 -144.84793091]
[184.35688782 -140.47972107]
[197.76324463 -135.34852600]
[210.85942078 -129.47062683]
[223.60388184 -122.86467743]
[235.95616150 -115.55163574]
[247.87709045 -107.55469513]
[259.32882690 -98.89923096]
[270.27508545 -89.61271667]
[280.68109131 -79.72460175]
[290.51382446 -69.26626587]
[302.01562500 -78.89479065]
[313.51742554 -88.52331543]
[325.01922607 -98.15184021]
[336.52102661 -107.78037262]
[331.93341064 -122.27251434]
[333.24588013 -137.41668701]
[340.25830078 -150.90350342]
[351.90133667 -160.67633057]
[366.39950562 -165.24488831]
[381.54193115 -163.91249084]
[395.01950073 -156.88233948]
[404.77700806 -145.22645569]
[409.32650757 -130.72230530]
[407.97418213 -115.58163452]
[400.92630005 -102.11331177]
[389.25759888 -92.37114716]
[374.74746704 -87.84074402]
[359.60861206 -89.21297455]
[346.14956665 -96.27856445]
[334.64776611 -86.65003967]
[323.14596558 -77.02151489]
[311.64413452 -67.39299011]
[300.14233398 -57.76446152]
[309.53634644 -45.05552673]
[318.12451172 -31.78875160]
[325.87387085 -18.01515770]
[332.75457764 -3.78771639]
[338.74017334 10.83886051]
[343.80767822 25.80832291]
[347.93753052 41.06310272]
[351.11392212 56.54453659]
[353.32461548 72.19308472]
[354.56109619 87.94857025]
[354.81860352 103.75040436]
[354.09616089 119.53781891]
[352.39654541 135.25009155]
[349.72628784 150.82679749]
[346.09567261 166.20805359]
[341.51864624 181.33468628]
[336.01281738 196.14852905]
[329.59933472 210.59262085]
[322.30291748 224.61140442]
[314.15158081 238.15097046]
[305.17666626 251.15925598]
[295.41271973 263.58621216]
[284.89727783 275.38409424]
[273.67077637 286.50747681]
[261.77639771 296.91363525]
[249.25988770 306.56250000]
[236.16935730 315.41702271]
[222.55516052 323.44308472]
[208.46965027 330.60989380]
[193.96701050 336.88980103]
[179.10299683 342.25875854]
[163.93478394 346.69601440]
[148.52069092 350.18457031]
[132.92001343 352.71102905]
[117.19272614 354.26559448]
[101.39932251 354.84234619]
[85.60054016 354.43905640]
[69.85713196 353.05728149]
[54.22964096 350.70233154]
[38.77817154 347.38323975]
[23.56214142 343.11279297]
[8.64006710 337.90744019]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 24]
[2 23]
[3 22]
[4 21]
[6 19]
[7 18]
[8 17]
[85 108]
[86 107]
[87 106]
[88 105]
[89 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
