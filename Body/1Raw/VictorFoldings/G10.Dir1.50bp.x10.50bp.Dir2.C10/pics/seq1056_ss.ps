%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACGCUUAGCCUAGCCACACCCCCACGGGAAACAGCAGUGAUUAACCUUUAGCAAUAAACGxxxxxxxxxxUAUCUGAACACACAAUAGCUAAGACCCAAACUGGGAUUAGAUACCCCACUAUGCUUAGCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[106.81843567 272.15216064]
[106.81843567 257.15216064]
[106.81843567 242.15216064]
[106.81843567 227.15216064]
[106.81843567 212.15216064]
[106.81843567 197.15216064]
[106.81843567 182.15216064]
[106.81843567 167.15216064]
[106.81843567 152.15216064]
[106.81843567 137.15216064]
[103.26367188 122.57946014]
[87.04205322 118.77699280]
[77.73155212 104.95982361]
[80.29791260 88.49733734]
[70.55025482 77.09631348]
[60.80260468 65.69529724]
[51.05495453 54.29427338]
[41.30730057 42.89325333]
[31.55964851 31.49223328]
[17.99395943 35.11857224]
[4.20972300 32.94159317]
[-7.43218756 25.40557480]
[-14.96684837 13.86646652]
[-29.78460693 16.19757080]
[-35.54634476 31.66304970]
[-48.23642349 42.06772995]
[-64.34626007 44.65681458]
[-79.48265839 38.81973648]
[-89.56586456 26.23083115]
[-104.33191681 28.86969566]
[-119.09797668 31.50856018]
[-131.28045654 42.48667526]
[-146.79339600 37.16870880]
[-149.67840576 21.02532768]
[-136.96763611 10.66345882]
[-121.73683929 16.74250412]
[-106.97077942 14.10364056]
[-92.20472717 11.46477604]
[-88.40455627 -1.68885803]
[-79.25352478 -11.96201420]
[-66.50270844 -17.30283737]
[-52.62945557 -16.61160660]
[-40.35608673 -9.96664715]
[-32.11571121 1.37981260]
[-17.29795265 -0.95129132]
[-11.73075485 -17.06443787]
[1.11322510 -28.27422523]
[-2.28975272 -42.88311768]
[-5.69273090 -57.49200821]
[-20.66840553 -56.24822235]
[-35.66558075 -57.19825745]
[-50.36459351 -60.32186890]
[-64.45212555 -65.55246735]
[-77.62791443 -72.77857208]
[-89.61109924 -81.84615326]
[-100.14627075 -92.56193542]
[-109.00887299 -104.69751740]
[-116.00998688 -117.99421692]
[-121.00038910 -132.16862488]
[-123.87371826 -146.91859436]
[-124.56871033 -161.92974854]
[-123.07056427 -176.88212585]
[-119.41121674 -191.45700073]
[-113.66865540 -205.34371948]
[-105.96529388 -218.24627686]
[-96.46531677 -229.88966370]
[-85.37123108 -240.02568054]
[-72.91950226 -248.43830872]
[-59.37553406 -254.94821167]
[-45.02802277 -259.41662598]
[-30.18278694 -261.74835205]
[-15.15625191 -261.89361572]
[-0.26870990 -259.84936523]
[14.16251087 -255.65917969]
[27.82980728 -249.41233826]
[40.44186020 -241.24203491]
[51.72984695 -231.32238770]
[61.45315552 -219.86486816]
[69.40454102 -207.11364746]
[75.41451263 -193.34056091]
[79.35497284 -178.83915710]
[81.14192200 -163.91854858]
[80.73728180 -148.89675903]
[78.14967346 -134.09397888]
[73.43424988 -119.82574463]
[66.69152069 -106.39617157]
[58.06520844 -94.09150696]
[47.73918533 -83.17404175]
[35.93354797 -73.87647247]
[22.89993668 -66.39698029]
[8.91616154 -60.89498901]
[12.31913948 -46.28609467]
[15.72211742 -31.67720222]
[29.97453880 -28.64638901]
[41.61536789 -19.76054192]
[48.36449051 -6.68089485]
[48.86611557 8.10246372]
[42.96067047 21.74458122]
[52.70832062 33.14560318]
[62.45597458 44.54662323]
[72.20362854 55.94764328]
[81.95127869 67.34866333]
[91.69892883 78.74968719]
[108.12412262 78.68141174]
[120.33819580 89.66358185]
[135.20124817 87.64125061]
[150.06428528 85.61891174]
[164.92733765 83.59658051]
[179.80667114 75.46997833]
[191.73469543 87.51815796]
[183.45936584 102.31529236]
[166.94967651 98.45962524]
[152.08662415 100.48196411]
[137.22357178 102.50429535]
[122.36052704 104.52663422]
[120.25156403 110.50513458]
[116.57882690 115.67246246]
[117.57318878 100.70545959]
[122.19117737 86.43401337]
[130.15335083 73.72166443]
[140.97795105 63.33763123]
[154.00997925 55.91023254]
[168.46089172 51.88888931]
[183.45626831 51.51692581]
[198.08879089 54.81685257]
[211.47303772 61.58899689]
[222.79914856 71.42358398]
[231.38182068 83.72552490]
[236.70169067 97.75046539]
[238.43688965 112.64976501]
[236.48240662 127.52188873]
[230.95652771 141.46693420]
[222.19358826 153.64112854]
[210.72383118 163.30781555]
[197.24127197 169.88206482]
[182.56173706 172.96609497]
[167.57345581 172.37329102]
[153.18334961 168.13952637]
[140.26214600 160.52096558]
[129.59169006 149.97860718]
[121.81843567 137.15216064]
[121.81843567 152.15216064]
[121.81843567 167.15216064]
[121.81843567 182.15216064]
[121.81843567 197.15216064]
[121.81843567 212.15216064]
[121.81843567 227.15216064]
[121.81843567 242.15216064]
[121.81843567 257.15216064]
[121.81843567 272.15216064]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 117]
[14 103]
[15 102]
[16 101]
[17 100]
[18 99]
[19 98]
[23 45]
[24 44]
[29 38]
[30 37]
[31 36]
[47 93]
[48 92]
[49 91]
[105 115]
[106 114]
[107 113]
[108 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
