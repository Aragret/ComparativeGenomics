%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAUAGCCCCCUUUCACUUCUGAGUCCCAGAGGUUACCCAAGGCACCCCUCUGACAUCCGGCxxxxxxxxxxUAGUUGUAGCAGGAAUCUUCUUACUCAUCCGCUUCCACCCCCUAGCAGAAAAUAGCCCACUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 423.43215942]
[92.50000000 408.43215942]
[92.50000000 393.43215942]
[92.50000000 378.43215942]
[92.50000000 363.43215942]
[92.50000000 348.43215942]
[92.50000000 333.43215942]
[92.50000000 318.43215942]
[92.50000000 303.43215942]
[92.50000000 288.43215942]
[77.95760345 284.88150024]
[64.67964935 277.94924927]
[53.43997574 268.03454590]
[44.89479446 255.71041870]
[39.54439163 241.69082642]
[37.70384216 226.78912354]
[39.48443985 211.87100220]
[44.78699112 197.80415344]
[53.30733109 185.40777588]
[64.55376434 175.40493774]
[77.87543488 168.38031006]
[92.50000000 164.74607849]
[92.50000000 149.74607849]
[92.50000000 134.74607849]
[79.52052307 129.05392456]
[69.79671478 118.74302673]
[64.87437439 105.45250702]
[65.53601837 91.29519653]
[71.67647552 78.52169800]
[82.31957245 69.16265106]
[77.77227783 54.86852264]
[73.22499084 40.57439423]
[68.67769623 26.28026390]
[64.13040924 11.98613358]
[40.03093719 6.58566236]
[24.20435524 -12.17097282]
[22.95140457 -36.52487946]
[9.52395439 -43.21095657]
[-3.90349460 -49.89702988]
[-17.33094406 -56.58310699]
[-30.75839424 -63.26918030]
[-44.18584442 -69.95525360]
[-55.63001251 -59.95028687]
[-70.03337860 -55.09112930]
[-85.19953918 -56.11877060]
[-98.81575775 -62.87650681]
[-108.80567169 -74.33382416]
[-113.64587402 -88.74357605]
[-112.59828186 -103.90837097]
[-105.82263947 -117.51568604]
[-94.35218811 -127.49051666]
[-79.93608856 -132.31176758]
[-64.77268219 -131.24421692]
[-51.17428970 -124.45069122]
[-41.21455765 -112.96712494]
[-36.41228104 -98.54469299]
[-37.49976730 -83.38270569]
[-24.07231712 -76.69663239]
[-10.64486885 -70.01055145]
[2.78258061 -63.32447815]
[16.21002960 -56.63840485]
[29.63747978 -49.95232773]
[35.43702316 -55.93618011]
[42.39889145 -60.51587296]
[50.18996811 -63.47227097]
[58.43746185 -64.66391754]
[60.89038849 -79.46199799]
[63.34331894 -94.26007843]
[57.96689606 -109.13974762]
[67.68131256 -120.43041992]
[70.13423920 -135.22850037]
[56.69644165 -142.17694092]
[46.06496811 -152.93923950]
[39.28137589 -166.46099854]
[37.01025391 -181.41751099]
[39.47410583 -196.34347534]
[46.43154907 -209.77661133]
[57.20096207 -220.40087891]
[70.72726440 -227.17539978]
[85.68529510 -229.43650818]
[100.60961151 -226.96264648]
[114.03808594 -219.99621582]
[124.65512848 -209.21968079]
[131.42059326 -195.68884277]
[133.67166138 -180.72929382]
[131.18782043 -165.80664062]
[124.21237946 -152.38284302]
[113.42873383 -141.77302551]
[99.89336395 -135.01661682]
[84.93231964 -132.77557373]
[82.47939301 -117.97749329]
[88.03126526 -104.15628052]
[78.14139557 -91.80714417]
[75.68846893 -77.00907135]
[73.23554230 -62.21098709]
[81.76787567 -57.76305389]
[88.93050385 -51.30731583]
[94.26055145 -43.24716187]
[97.41012573 -34.09007263]
[98.16901398 -24.41569519]
[96.47866058 -14.83913422]
[92.43658447 -5.97186279]
[86.29077911 1.61733580]
[78.42453766 7.43884325]
[82.97183228 21.73297310]
[87.51911926 36.02710342]
[92.06641388 50.32123184]
[96.61370087 64.61536407]
[111.07233429 66.22215271]
[123.67643738 73.48649597]
[132.31489563 85.19166565]
[135.54084778 99.37712097]
[150.25636292 102.28459167]
[164.97189331 105.19207001]
[175.02334595 93.57898712]
[189.53996277 88.56265259]
[204.61683655 91.49244690]
[216.19834900 101.58026123]
[221.16914368 116.11252594]
[218.19210815 131.18013000]
[208.06803894 142.72998047]
[193.52026367 147.65519714]
[178.46206665 144.63095093]
[166.94401550 134.47073364]
[162.06442261 119.90759277]
[147.34889221 117.00011444]
[132.63337708 114.09264374]
[122.56796265 127.46318817]
[107.50000000 134.74607849]
[107.50000000 149.74607849]
[107.50000000 164.74607849]
[122.12456512 168.38031006]
[135.44624329 175.40493774]
[146.69267273 185.40777588]
[155.21301270 197.80415344]
[160.51556396 211.87100220]
[162.29615784 226.78912354]
[160.45561218 241.69082642]
[155.10520935 255.71041870]
[146.56002808 268.03454590]
[135.32034302 277.94924927]
[122.04239655 284.88150024]
[107.50000000 288.43215942]
[107.50000000 303.43215942]
[107.50000000 318.43215942]
[107.50000000 333.43215942]
[107.50000000 348.43215942]
[107.50000000 363.43215942]
[107.50000000 378.43215942]
[107.50000000 393.43215942]
[107.50000000 408.43215942]
[107.50000000 423.43215942]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[22 131]
[23 130]
[24 129]
[30 108]
[31 107]
[32 106]
[33 105]
[34 104]
[37 62]
[38 61]
[39 60]
[40 59]
[41 58]
[42 57]
[66 95]
[67 94]
[68 93]
[70 91]
[71 90]
[112 127]
[113 126]
[114 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
