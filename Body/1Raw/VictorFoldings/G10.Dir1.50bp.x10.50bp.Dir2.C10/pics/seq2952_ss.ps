%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUACUCAAUUGAUCCAAUAACUUGACCAACGGAACAAGUUACCCUAGGGAUAACAGCGCAAxxxxxxxxxxUCACAACAAUCCUAAUCCUAAUACCAACUAUCUCCCUAAUUGAAAACAAAAUACUCAAAUGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[114.73497009 494.45648193]
[114.73497009 479.45648193]
[114.73497009 464.45648193]
[114.73497009 449.45648193]
[114.73497009 434.45648193]
[114.73497009 419.45648193]
[114.73497009 404.45648193]
[114.73497009 389.45648193]
[114.73497009 374.45648193]
[114.73497009 359.45648193]
[98.11756897 354.56616211]
[83.77224731 344.82659912]
[73.07456207 331.15902710]
[67.05419159 314.86196899]
[66.29578400 297.48785400]
[70.88220978 280.69506836]
[80.38566589 266.08978271]
[93.90754700 255.07221985]
[110.16340637 248.70243835]
[108.93279266 233.75300598]
[107.70217896 218.80357361]
[98.94680786 206.75398254]
[105.52584076 192.36555481]
[94.76440430 178.53674316]
[102.68819427 161.94625854]
[101.15090179 147.02523804]
[99.61360931 132.10421753]
[98.07631683 117.18320465]
[87.20100403 106.85230255]
[72.22076416 106.08264160]
[57.24052048 105.31298065]
[42.26028061 104.54331970]
[27.28003883 103.77365875]
[12.29979801 103.00399780]
[-3.86225939 111.76862335]
[-18.22502899 101.73092651]
[-33.21791458 101.26899719]
[-49.23573303 106.82469940]
[-59.00849152 92.97084045]
[-48.40141296 79.74487305]
[-32.75598907 86.27611542]
[-17.76310349 86.73803711]
[-8.70233345 78.66557312]
[3.83087873 78.96548462]
[13.06945801 88.02375793]
[28.04969978 88.79341888]
[43.02994156 89.56307983]
[58.01018143 90.33274078]
[72.99042511 91.10240173]
[87.97066498 91.87206268]
[76.41394806 82.30950928]
[77.51634979 67.35007477]
[90.34998322 59.58490753]
[104.11296082 65.54984283]
[107.22114563 80.22435760]
[113.49054718 66.59738159]
[119.75995636 52.97039795]
[126.02935791 39.34341812]
[132.29876709 25.71644020]
[138.56817627 12.08946133]
[125.73002625 4.29974127]
[113.86354065 -4.90266895]
[103.12342834 -15.39779758]
[93.64970398 -27.04881859]
[85.56587219 -39.70383453]
[78.97733307 -53.19786835]
[73.96997070 -67.35498810]
[70.60907745 -81.99063873]
[68.93846130 -96.91400146]
[68.97990417 -111.93052673]
[70.73286438 -126.84444427]
[74.17449188 -141.46131897]
[79.25991821 -155.59059143]
[85.92283630 -169.04804993]
[94.07639313 -181.65824890]
[103.61428070 -193.25680542]
[114.41216278 -203.69248962]
[126.32926178 -212.82926941]
[139.21020508 -220.54800415]
[152.88706970 -226.74807739]
[167.18156433 -231.34866333]
[181.90731812 -234.28977966]
[196.87232971 -235.53308105]
[211.88154602 -235.06236267]
[226.73924255 -232.88375854]
[241.25175476 -229.02566528]
[255.22985840 -223.53839111]
[268.49133301 -216.49346924]
[280.86331177 -207.98274231]
[292.18444824 -198.11717224]
[302.30715942 -187.02536011]
[311.09951782 -174.85192871]
[318.44686890 -161.75558472]
[324.25341797 -147.90705872]
[328.44345093 -133.48689270]
[330.96240234 -118.68308258]
[331.77737427 -103.68862915]
[330.87774658 -88.69902039]
[328.27526855 -73.90966797]
[324.00387573 -59.51338577]
[318.11923218 -45.69786072]
[310.69805908 -32.64320374]
[301.83712769 -20.51960945]
[291.65194702 -9.48513508]
[280.27526855 0.31636369]
[267.85546875 8.75710297]
[254.55442810 15.72704124]
[240.54556274 21.13531113]
[226.01150513 24.91140556]
[211.14172363 27.00609207]
[196.13011169 27.39206505]
[181.17234802 26.06429291]
[166.46343994 23.04008484]
[152.19514465 18.35886574]
[145.92575073 31.98584557]
[139.65634155 45.61282349]
[133.38693237 59.23980331]
[127.11753082 72.86678314]
[120.84812164 86.49375916]
[112.99733734 115.64591217]
[114.53462982 130.56692505]
[116.07192230 145.48794556]
[117.60921478 160.40896606]
[127.12959290 169.17057800]
[128.07218933 181.67190552]
[120.47528076 191.13493347]
[129.31867981 204.25381470]
[122.65161133 217.57295227]
[123.88222504 232.52238464]
[125.11283875 247.47183228]
[137.75715637 249.61128235]
[149.58547974 254.54312134]
[159.99021912 262.00973511]
[168.43786621 271.62344360]
[174.49632263 282.88653564]
[177.85710144 295.21716309]
[178.35089111 307.97933960]
[175.95622253 320.51565552]
[170.80026245 332.18127441]
[163.15214539 342.37710571]
[153.40882874 350.58041382]
[142.07461548 356.37179565]
[129.73497009 359.45648193]
[129.73497009 374.45648193]
[129.73497009 389.45648193]
[129.73497009 404.45648193]
[129.73497009 419.45648193]
[129.73497009 434.45648193]
[129.73497009 449.45648193]
[129.73497009 464.45648193]
[129.73497009 479.45648193]
[129.73497009 494.45648193]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[19 130]
[20 129]
[21 128]
[23 126]
[25 123]
[26 122]
[27 121]
[28 120]
[29 50]
[30 49]
[31 48]
[32 47]
[33 46]
[34 45]
[36 42]
[37 41]
[55 119]
[56 118]
[57 117]
[58 116]
[59 115]
[60 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
