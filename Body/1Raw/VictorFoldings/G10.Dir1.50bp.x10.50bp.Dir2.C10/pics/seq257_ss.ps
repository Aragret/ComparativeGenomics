%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACAAAAAAUUUCCACCAAACCCCCCCUCCCCCGCUUCUGGCCACAGCACUUAAACACAUCxxxxxxxxxxACUCCUCAUUGUACCCAUUCUAAUCGCAAUGGCAUUCCUAAUGCUUACCGAACGAAAAAUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[89.86824036 137.07287598]
[78.08610535 146.35626221]
[66.30397034 155.63964844]
[54.52183151 164.92303467]
[42.73969650 174.20642090]
[31.05348587 183.61027527]
[19.46443748 193.13362122]
[7.87538910 202.65695190]
[-3.71365905 212.18028259]
[-15.30270767 221.70362854]
[-9.05704117 235.43876648]
[-6.58006477 250.32255554]
[-8.04066181 265.34017944]
[-13.33924770 279.46771240]
[-22.11455345 291.74194336]
[-33.76826859 301.32595825]
[-47.50581741 307.56631470]
[-62.39055634 310.03753662]
[-77.40761566 308.57113647]
[-91.53311157 303.26712036]
[-103.80393982 294.48706055]
[-113.38345337 282.82965088]
[-119.61851501 269.08969116]
[-122.08399200 254.20399475]
[-120.61180115 239.18750000]
[-115.30230713 225.06405640]
[-106.51752472 212.79661560]
[-94.85641479 203.22160339]
[-81.11405182 196.99185181]
[-66.22740936 194.53211975]
[-51.21148300 196.01011658]
[-37.09008789 201.32505798]
[-24.82604408 210.11457825]
[-13.23699665 200.59124756]
[-1.64794827 191.06790161]
[9.94110012 181.54457092]
[21.53014946 172.02122498]
[24.72089958 165.30323792]
[33.45631027 162.42428589]
[45.23844528 153.14089966]
[57.02058411 143.85751343]
[68.80271912 134.57412720]
[80.58485413 125.29074097]
[80.27694702 117.79706573]
[65.28958130 118.41264343]
[64.67425537 103.42527008]
[79.66111755 102.80970764]
[79.35321045 95.31603241]
[66.84917450 87.03055573]
[54.34513474 78.74508667]
[37.95269394 78.27614594]
[30.40174675 63.71883774]
[39.46006012 50.04846954]
[55.80921936 51.32794571]
[62.63061142 66.24105072]
[75.13464355 74.52651978]
[87.63867950 82.81199646]
[80.63762665 69.54605865]
[73.63657379 56.28011322]
[66.63551331 43.01417160]
[59.63446045 29.74822998]
[48.20412445 20.03496742]
[39.17660522 8.05565643]
[32.98957825 -5.60892105]
[29.94299889 -20.29627419]
[30.18457603 -35.29433060]
[33.70259476 -49.87594604]
[40.32649994 -63.33417511]
[49.73514175 -75.01653290]
[61.47237396 -84.35662842]
[74.96914673 -90.90163422]
[89.57110596 -94.33423615]
[104.57032013 -94.48801422]
[119.23958588 -91.35551453]
[132.86770630 -85.08860016]
[144.79397583 -75.99111176]
[154.44015503 -64.50411224]
[161.33859253 -51.18452072]
[165.15484619 -36.67809677]
[165.70387268 -21.68814850]
[162.95906067 -6.94141912]
[157.05348206 6.84713650]
[148.27348328 19.00901794]
[137.04631042 28.95344162]
[130.31910706 42.36033249]
[123.59190369 55.76722336]
[116.86470032 69.17411041]
[110.13749695 82.58100128]
[122.46878052 74.04054260]
[134.80006409 65.50008392]
[147.13134766 56.95962524]
[159.46263123 48.41916656]
[171.79391479 39.87870789]
[168.92341614 24.92276764]
[172.39054871 10.09377766]
[181.59458923 -2.03904796]
[194.94090271 -9.37362480]
[210.11714172 -10.63919258]
[224.49392700 -5.61648512]
[235.58042908 4.82428408]
[241.45579529 18.87418938]
[241.10212708 34.09899902]
[234.58067322 47.86091995]
[223.02131653 57.77561951]
[208.42680359 62.12531662]
[193.32569885 60.15639877]
[180.33438110 52.20999146]
[168.00308228 60.75045013]
[155.67179871 69.29090881]
[143.34051514 77.83136749]
[131.00923157 86.37182617]
[118.67795563 94.91228485]
[121.88694763 109.56501007]
[136.65907288 112.16973114]
[151.43118286 114.77445984]
[166.20329285 117.37918091]
[180.97541809 119.98390198]
[197.62385559 116.77985382]
[205.31143188 131.89070129]
[192.91925049 143.46093750]
[178.37069702 134.75601196]
[163.59857178 132.15129089]
[148.82646179 129.54656982]
[134.05435181 126.94184875]
[119.28222656 124.33712769]
[130.99720764 133.70512390]
[142.71218872 143.07310486]
[157.11604309 147.25985718]
[170.32107544 154.37515259]
[181.73959351 164.10229492]
[190.86341858 176.00842285]
[197.28652954 189.56362915]
[200.72305298 204.16467285]
[201.02003479 219.16172791]
[198.16427612 233.88737488]
[192.28288269 247.68624878]
[183.63757324 259.94424438]
[172.61311340 270.11584473]
[159.70013428 277.74835205]
[145.47332764 282.50207520]
[130.56584167 284.16549683]
[115.64112854 282.66455078]
[101.36339569 278.06604004]
[88.36806488 270.57461548]
[77.23348236 260.52368164]
[68.45518494 248.36056519]
[62.42384720 234.62655640]
[59.40788651 219.93289185]
[59.54152679 204.93348694]
[62.81882095 190.29588318]
[69.09391785 176.67152405]
[78.09003448 164.66406250]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 43]
[2 42]
[3 41]
[4 40]
[5 39]
[6 37]
[7 36]
[8 35]
[9 34]
[10 33]
[48 57]
[49 56]
[50 55]
[88 112]
[89 111]
[90 110]
[91 109]
[92 108]
[93 107]
[113 125]
[114 124]
[115 123]
[116 122]
[117 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
