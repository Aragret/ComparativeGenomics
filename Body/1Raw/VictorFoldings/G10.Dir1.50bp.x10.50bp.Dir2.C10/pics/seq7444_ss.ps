%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUAUAGGCUAAAUCCUAUAUAUCUUAAUGGCACAUGCAGCGCAAGUAGGUCUACAAGACGxxxxxxxxxxAACCUGAAACAUCGGCAUUAUCCUCCUGCUUGCAACUAUAGCAACAGCCUUCAUAGGCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 297.77825928]
[92.50000000 282.77825928]
[92.50000000 267.77825928]
[92.50000000 252.77825928]
[92.50000000 237.77825928]
[92.50000000 222.77825928]
[92.50000000 207.77825928]
[92.50000000 192.77825928]
[92.50000000 177.77825928]
[92.50000000 162.77825928]
[73.84433746 157.56076050]
[57.64406967 146.93969727]
[46.34506226 156.80541992]
[35.04605865 166.67114258]
[23.74705505 176.53686523]
[12.44804955 186.40258789]
[1.14904487 196.26831055]
[0.33141384 212.05143738]
[-11.46287060 222.57144165]
[-27.23646927 221.58699036]
[-37.63118362 209.68214417]
[-36.48001862 193.91983032]
[-24.46593475 183.65156555]
[-8.71667862 184.96931458]
[2.58232641 175.10359192]
[13.88133144 165.23786926]
[25.18033600 155.37214661]
[36.47933960 145.50642395]
[47.77834702 135.64070129]
[40.79334641 122.17954254]
[37.21486664 107.44226837]
[37.24880600 92.27679443]
[40.89320755 77.55568695]
[47.93838501 64.12593842]
[57.97898865 52.76023865]
[70.43731689 44.11254120]
[84.59657288 38.68038940]
[99.64208221 36.77633286]
[114.70818329 38.50992203]
[119.90360260 24.43840408]
[125.09901428 10.36688423]
[116.65356445 -2.51645947]
[117.40483856 -17.72464752]
[126.85540771 -29.43578339]
[141.21789551 -33.29027557]
[146.41331482 -47.36179352]
[151.60871887 -61.43331528]
[156.36253357 -75.66009521]
[160.67012024 -90.02827454]
[155.99653625 -107.80853271]
[169.15673828 -119.37612152]
[173.16447449 -133.83081055]
[177.17221069 -148.28550720]
[181.17996216 -162.74018860]
[185.18769836 -177.19488525]
[189.19543457 -191.64956665]
[193.20317078 -206.10426331]
[197.21092224 -220.55894470]
[201.21865845 -235.01362610]
[187.40560913 -240.91984558]
[174.50308228 -248.61451721]
[162.74130249 -257.96032715]
[152.33018494 -268.79046631]
[143.45553589 -280.91168213]
[136.27572632 -294.10766602]
[130.91889954 -308.14291382]
[127.48064423 -322.76690674]
[126.02231598 -337.71871948]
[126.56994629 -352.73150635]
[129.11376953 -367.53732300]
[133.60836792 -381.87197876]
[139.97355652 -395.47961426]
[148.09571838 -408.11740112]
[157.82991028 -419.55984497]
[169.00242615 -429.60266113]
[181.41386414 -438.06668091]
[194.84272766 -444.80084229]
[209.04937744 -449.68496704]
[223.78027344 -452.63186646]
[238.77252197 -453.58898926]
[253.75856018 -452.53924561]
[268.47094727 -449.50134277]
[282.64715576 -444.52951050]
[296.03414917 -437.71249390]
[308.39303589 -429.17193604]
[319.50326538 -419.06024170]
[329.16656494 -407.55789185]
[337.21047974 -394.87014771]
[343.49145508 -381.22341919]
[347.89736938 -366.86129761]
[350.34963989 -352.04003906]
[350.80447388 -337.02413940]
[349.25378418 -322.08163452]
[345.72521973 -307.47915649]
[340.28173828 -293.47729492]
[333.02053833 -280.32592773]
[324.07113647 -268.25979614]
[313.59329224 -257.49417114]
[301.77398682 -248.22123718]
[288.82412720 -240.60646057]
[274.97485352 -234.78572083]
[260.47329712 -230.86291504]
[245.57827759 -228.90803528]
[230.55558777 -228.95597839]
[215.67333984 -231.00588989]
[211.66560364 -216.55120850]
[207.65786743 -202.09651184]
[203.65013123 -187.64183044]
[199.64237976 -173.18713379]
[195.63464355 -158.73245239]
[191.62690735 -144.27775574]
[187.61915588 -129.82307434]
[183.61141968 -115.36838531]
[189.30270386 -104.64846802]
[186.03401184 -92.54331970]
[175.03829956 -85.72069550]
[170.73072815 -71.35250854]
[172.12142944 -68.04593658]
[171.93981934 -63.89037323]
[169.79978943 -59.65095901]
[165.68023682 -56.23789978]
[160.48483276 -42.16637802]
[155.28941345 -28.09486008]
[163.70106506 -15.83181858]
[163.27372742 -0.78916639]
[153.96180725 11.25830269]
[139.17053223 15.56229973]
[133.97511292 29.63381958]
[128.77970886 43.70533752]
[140.00552368 51.04166794]
[149.43150330 60.58063126]
[156.63356018 71.89306641]
[161.28768921 84.47002411]
[163.18447876 97.74568176]
[162.23861694 111.12275696]
[158.49263000 123.99942017]
[152.11508179 135.79635620]
[143.39286804 145.98281860]
[132.71842957 154.10050964]
[120.57197571 159.78422546]
[107.50000000 162.77825928]
[107.50000000 177.77825928]
[107.50000000 192.77825928]
[107.50000000 207.77825928]
[107.50000000 222.77825928]
[107.50000000 237.77825928]
[107.50000000 252.77825928]
[107.50000000 267.77825928]
[107.50000000 282.77825928]
[107.50000000 297.77825928]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 29]
[13 28]
[14 27]
[15 26]
[16 25]
[17 24]
[39 129]
[40 128]
[41 127]
[45 123]
[46 122]
[47 121]
[48 117]
[49 116]
[51 113]
[52 112]
[53 111]
[54 110]
[55 109]
[56 108]
[57 107]
[58 106]
[59 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
