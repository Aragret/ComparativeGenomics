%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCAUAUUCAUCGGCGUAAAUCUAACUUUCUUCCCACAACACUUUCUCGGCCUAUCCGGAAxxxxxxxxxxCACCCACCACAUUAACAACAUAAAACCCUCAUUCACACGAGAAAACACCCUCAUGUUCAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 385.88958740]
[92.50000000 370.88958740]
[92.50000000 355.88958740]
[92.50000000 340.88958740]
[92.50000000 325.88958740]
[92.50000000 310.88958740]
[92.50000000 295.88958740]
[92.50000000 280.88958740]
[92.50000000 265.88958740]
[92.50000000 250.88957214]
[77.95760345 247.33891296]
[64.67964935 240.40667725]
[53.43997574 230.49195862]
[44.89479446 218.16784668]
[39.54439163 204.14825439]
[37.70384216 189.24655151]
[39.48443985 174.32843018]
[44.78699112 160.26158142]
[53.30733109 147.86520386]
[64.55376434 137.86236572]
[77.87543488 130.83773804]
[92.50000000 127.20349884]
[92.50000000 112.20349884]
[85.67605591 100.00000000]
[92.50000000 87.79650116]
[92.50000000 72.79650116]
[84.69049072 85.60319519]
[74.18492126 96.30987549]
[61.52859116 104.36080170]
[47.37844467 109.33808136]
[32.46894836 110.98336792]
[17.57399559 109.21126556]
[3.46671724 104.11374664]
[-9.12063694 95.95540619]
[-19.53471184 85.15970612]
[-27.23495483 72.28701782]
[-31.82168198 58.00548935]
[-33.05681610 43.05642700]
[-30.87624168 28.21577072]
[-25.39314651 14.25383472]
[-16.89213562 1.89532268]
[-5.81446028 -8.21828651]
[7.26488638 -15.56203842]
[21.66700935 -19.75474930]
[36.64435959 -20.57879639]
[51.41951752 -17.99140358]
[65.22557831 -12.12687206]
[77.34592438 -3.28960586]
[87.15143585 8.06169128]
[94.13315582 21.33782005]
[97.92868805 35.84967422]
[98.34085083 50.84599304]
[105.79576111 37.82968521]
[113.25067139 24.81337547]
[120.70558167 11.79706573]
[128.16049194 -1.21924412]
[135.61540222 -14.23555374]
[143.07031250 -27.25186348]
[130.87818909 -36.01292419]
[119.65151978 -45.98117065]
[109.50931549 -57.05093765]
[100.55908966 -69.10488129]
[92.89572144 -82.01521301]
[86.60044098 -95.64508820]
[81.73999023 -109.85002136]
[78.36588287 -124.47942352]
[76.51389313 -139.37821960]
[76.20365143 -154.38847351]
[77.43844604 -169.35107422]
[80.20518494 -184.10740662]
[84.47454071 -198.50103760]
[90.20126343 -212.37937927]
[97.32463837 -225.59535217]
[105.76914978 -238.00881958]
[115.44528961 -249.48820496]
[126.25048065 -259.91180420]
[138.07019043 -269.16915894]
[150.77911377 -277.16213989]
[164.24252319 -283.80593872]
[178.31771851 -289.03021240]
[192.85548401 -292.77957153]
[207.70170593 -295.01422119]
[222.69902039 -295.71047974]
[237.68843079 -294.86102295]
[252.51104736 -292.47479248]
[267.00973511 -288.57714844]
[281.03082275 -283.20935059]
[294.42565918 -276.42831421]
[307.05224609 -268.30593872]
[318.77676392 -258.92828369]
[329.47488403 -248.39482117]
[339.03326416 -236.81718445]
[347.35049438 -224.31808472]
[354.33847046 -211.03002930]
[359.92309570 -197.09390259]
[364.04519653 -182.65739441]
[366.66101074 -167.87358093]
[367.74288940 -152.89913940]
[367.27929688 -137.89283752]
[365.27517700 -123.01374054]
[361.75180054 -108.41957855]
[356.74645996 -94.26504517]
[350.31225586 -80.70020294]
[342.51739502 -67.86883545]
[333.44448853 -55.90696335]
[323.18969727 -44.94139099]
[311.86178589 -35.08836365]
[299.58078003 -26.45232773]
[286.47689819 -19.12482643]
[272.68902588 -13.18353558]
[258.36337280 -8.69143867]
[243.65171814 -5.69615364]
[228.71008301 -4.22943163]
[213.69682312 -4.30682087]
[198.77108765 -5.92750120]
[184.09111023 -9.07429218]
[169.81250000 -13.71383667]
[156.08662415 -19.79695320]
[148.63171387 -6.78064346]
[141.17680359 6.23566628]
[133.72189331 19.25197601]
[126.26698303 32.26828384]
[118.81207275 45.28459549]
[111.35716248 58.30090332]
[107.50000000 72.79650116]
[107.50000000 87.79650116]
[114.32394409 100.00000000]
[107.50000000 112.20349884]
[107.50000000 127.20349884]
[122.12456512 130.83773804]
[135.44624329 137.86236572]
[146.69267273 147.86520386]
[155.21301270 160.26158142]
[160.51556396 174.32843018]
[162.29615784 189.24655151]
[160.45561218 204.14825439]
[155.10520935 218.16784668]
[146.56002808 230.49195862]
[135.32034302 240.40667725]
[122.04239655 247.33891296]
[107.50000000 250.88957214]
[107.50000000 265.88958740]
[107.50000000 280.88958740]
[107.50000000 295.88958740]
[107.50000000 310.88958740]
[107.50000000 325.88958740]
[107.50000000 340.88958740]
[107.50000000 355.88958740]
[107.50000000 370.88958740]
[107.50000000 385.88958740]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[22 129]
[23 128]
[25 126]
[26 125]
[52 124]
[53 123]
[54 122]
[55 121]
[56 120]
[57 119]
[58 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
