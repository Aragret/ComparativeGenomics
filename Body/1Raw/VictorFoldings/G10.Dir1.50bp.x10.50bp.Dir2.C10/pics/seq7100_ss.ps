%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUACACCCUAGACCAAACCUACGCCAAAAUCCAUUUCACUAUCAUAUUCAUCGGCGUAAAUCUxxxxxxxxxxUACACCCUAGUAGGCUCCCUUCCCCUACUCAUCGCACUAAUUUACACUCACAACACCCUAGGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[59.59391403 285.76339722]
[50.05765533 283.42968750]
[40.65459442 280.60681152]
[31.40980339 277.30221558]
[22.34794235 273.52478027]
[15.68558407 286.96401978]
[9.02322674 300.40325928]
[9.82600689 316.20407104]
[-2.75912762 324.17047119]
[-1.18124962 340.49356079]
[-14.68388844 349.80004883]
[-29.37668610 342.51623535]
[-30.14495277 326.13510132]
[-16.19836044 317.50811768]
[-17.47767830 302.66857910]
[-4.41600657 293.74090576]
[2.24635077 280.30166626]
[8.90870857 266.86242676]
[-10.17733097 254.92465210]
[-27.71839523 240.81443787]
[-43.46851349 224.72962952]
[-57.20682526 206.89578247]
[-68.74068451 187.56297302]
[-77.90835571 167.00230408]
[-84.58129120 145.50209045]
[-88.66590881 123.36381531]
[-90.10493469 100.89791870]
[-88.87819672 78.41943359]
[-85.00288391 56.24356079]
[-78.53334808 34.68126678]
[-92.40585327 28.97569656]
[-106.27836609 23.27012634]
[-120.15087128 17.56455612]
[-134.02337646 11.85898590]
[-147.89588928 6.15341520]
[-162.50048828 2.73204851]
[-177.46371460 1.68237460]
[-192.42694092 0.63270068]
[-205.43147278 10.02746582]
[-220.84545898 5.57903433]
[-226.84460449 -9.30013847]
[-218.82688904 -23.19602394]
[-202.94279480 -25.44888878]
[-191.37725830 -14.33052731]
[-176.41403198 -13.28085327]
[-161.45080566 -12.23117924]
[-173.58439636 -21.05024529]
[-182.04652405 -33.43541718]
[-185.85192871 -47.94469070]
[-184.55754089 -62.88873672]
[-178.31407166 -76.52761841]
[-167.84846497 -87.27336121]
[-154.37921143 -93.87483215]
[-139.47456360 -95.56341553]
[-124.86985779 -92.14250946]
[-112.26553345 -84.01041412]
[-103.12911224 -72.11395264]
[-98.52435303 -57.83823013]
[-98.98738861 -42.84537888]
[-104.46430969 -28.88101959]
[-114.31743622 -17.57102776]
[-127.39955902 -10.23222923]
[-142.19030762 -7.71909237]
[-128.31781006 -2.01352167]
[-114.44529724 3.69204879]
[-100.57279205 9.39761925]
[-86.70028687 15.10318947]
[-72.82777405 20.80875969]
[-65.47226715 6.40715170]
[-56.91942215 -7.31723022]
[-47.23112488 -20.26507759]
[-36.47748184 -32.34270096]
[-24.73630142 -43.46270752]
[-12.09254456 -53.54463196]
[1.36230040 -62.51552963]
[15.53087616 -70.31047821]
[30.31066132 -76.87308502]
[45.59471130 -82.15586090]
[61.27243042 -86.12057495]
[77.23037720 -88.73854065]
[93.35308075 -89.99082184]
[109.52388763 -89.86834717]
[125.62577057 -88.37200928]
[141.54223633 -85.51262665]
[157.15811157 -81.31090546]
[172.36038208 -75.79723358]
[187.03907776 -69.01152039]
[201.08795166 -61.00285339]
[214.40538025 -51.82918930]
[226.89497375 -41.55690765]
[238.46636963 -30.26033783]
[249.03585815 -18.02121735]
[261.15344238 -26.86226273]
[273.27102661 -35.70330429]
[285.38861084 -44.54434967]
[297.50619507 -53.38539505]
[309.62377930 -62.22643661]
[308.60961914 -77.62042999]
[316.09902954 -91.10791016]
[329.70220947 -98.38506317]
[345.07843018 -97.12978363]
[357.32116699 -87.74263000]
[362.52383423 -73.21900177]
[359.02627563 -58.19333649]
[347.94454956 -47.46026993]
[332.81478882 -44.44469070]
[318.46484375 -50.10884857]
[306.34725952 -41.26780701]
[294.22964478 -32.42676163]
[282.11206055 -23.58571815]
[269.99447632 -14.74467373]
[257.87689209 -5.90363026]
[263.13369751 2.38807368]
[267.95544434 10.94010639]
[272.32922363 19.72966003]
[276.24343872 28.73329163]
[279.68759155 37.92699051]
[282.65255737 47.28623581]
[285.13037109 56.78606796]
[287.11444092 66.40115356]
[288.59948730 76.10584259]
[289.58154297 85.87425995]
[290.05798340 95.68034363]
[290.02752686 105.49795532]
[289.49029541 115.30090332]
[288.44769287 125.06304169]
[286.90252686 134.75833130]
[284.85885620 144.36093140]
[282.32220459 153.84521484]
[279.29928589 163.18589783]
[275.79818726 172.35807800]
[271.82824707 181.33726501]
[267.40002441 190.09953308]
[262.52536011 198.62150574]
[257.21725464 206.88044739]
[251.48983765 214.85435486]
[245.35839844 222.52194214]
[238.83930969 229.86277771]
[231.94993591 236.85725403]
[224.70864868 243.48675537]
[217.13476562 249.73356628]
[209.24848938 255.58103943]
[201.07084656 261.01358032]
[192.62365723 266.01672363]
[183.92942810 270.57708740]
[175.01138306 274.68252563]
[165.89326477 278.32208252]
[156.59942627 281.48608398]
[147.15463257 284.16604614]
[137.58407593 286.35485840]
[127.91328430 288.04666138]
[118.16805267 289.23693848]
[108.37435913 289.92251587]
[98.55833435 290.10159302]
[88.74616241 289.77365112]
[78.96399689 288.93960571]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 18]
[6 17]
[7 16]
[9 14]
[30 68]
[31 67]
[32 66]
[33 65]
[34 64]
[35 63]
[36 46]
[37 45]
[38 44]
[92 112]
[93 111]
[94 110]
[95 109]
[96 108]
[97 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
