%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUGUCGCAGUAUCUGUCUUUGAUUCCUGCCUCAUCCUAUUAUUUAUCGCACCUACGUUCAAxxxxxxxxxxUGACUCCCUAAAGCCCAUGUCGAAGCCCCCAUCGCUGGGUCAAUAGUACUUGCCGCAGUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[58.58216858 316.34286499]
[58.27011490 301.34613037]
[57.95805740 286.34936523]
[57.64599991 271.35263062]
[57.33394623 256.35586548]
[57.02188873 241.35911560]
[56.70983124 226.36235046]
[56.39777756 211.36560059]
[56.08572006 196.36885071]
[43.22731781 188.64476013]
[29.84103203 195.41287231]
[16.45474815 202.18099976]
[11.43504143 216.92684937]
[-2.23696899 223.59999084]
[-16.26395607 218.72358704]
[-29.65023994 225.49169922]
[-43.03652573 232.25982666]
[-56.42280960 239.02793884]
[-66.10035706 254.65882874]
[-83.55034637 253.07839966]
[-96.79293823 260.12353516]
[-110.03552246 267.16867065]
[-113.10601807 282.50183105]
[-125.34636688 292.23364258]
[-140.97703552 291.76901245]
[-152.61772156 281.32733154]
[-154.77203369 265.83886719]
[-146.42277527 252.61676025]
[-131.51220703 247.90411377]
[-117.08065796 253.92608643]
[-103.83806610 246.88095093]
[-90.59548187 239.83581543]
[-86.73915100 228.32772827]
[-75.70939636 222.36419678]
[-63.19092560 225.64164734]
[-49.80464172 218.87353516]
[-36.41835403 212.10542297]
[-23.03207016 205.33731079]
[-18.64366722 191.15007019]
[-5.16448450 184.09555054]
[9.68663311 188.79470825]
[23.07291794 182.02659607]
[36.45920181 175.25848389]
[49.15774918 167.12236023]
[61.78064346 167.93183899]
[67.84365845 154.21177673]
[73.90666962 140.49172974]
[79.96968079 126.77167511]
[86.03269958 113.05162048]
[78.11946869 93.15069580]
[94.35971069 73.86287689]
[91.87459564 59.07017136]
[89.38947296 44.27746201]
[86.90435791 29.48475456]
[63.27291107 20.69773674]
[54.93639755 -8.77955055]
[46.17019272 -20.95138741]
[30.53262711 -23.24095345]
[21.16131020 -35.96706772]
[23.61607742 -51.57955170]
[36.44055939 -60.81579590]
[52.02621841 -58.19610214]
[61.12635803 -45.27468491]
[58.34202957 -29.71759415]
[67.10823822 -17.54575729]
[81.33564758 -22.29979134]
[95.56179047 -27.05338860]
[95.24974060 -42.05014038]
[94.93768311 -57.04689407]
[81.21194458 -63.81909943]
[72.21498871 -76.20108032]
[70.01425171 -91.34754181]
[75.11544037 -105.77793884]
[86.34633636 -116.17627716]
[101.12617493 -120.15309143]
[116.05864716 -116.79454041]
[127.71237946 -106.87239075]
[133.40943909 -92.66668701]
[131.84066772 -77.44178772]
[123.36657715 -64.69626617]
[109.93443298 -57.35895157]
[110.24649048 -42.36219788]
[110.55854797 -27.36544418]
[118.64879608 -17.15352249]
[122.38704681 -5.44079924]
[121.77062225 6.10543633]
[117.38244629 16.00891113]
[110.25784302 23.17274094]
[101.69705963 26.99963760]
[104.18218231 41.79234314]
[106.66729736 56.58505249]
[109.15242004 71.37776184]
[121.84735107 79.36767578]
[136.25956726 75.20978546]
[150.67178345 71.05190277]
[165.08399963 66.89401245]
[179.49621582 62.73612595]
[186.93164062 57.31706238]
[194.25163269 58.64500427]
[201.79818726 53.38179779]
[209.08895874 54.86173630]
[223.66166687 51.30697632]
[238.23437500 47.75221252]
[243.99543762 33.34423828]
[257.14294434 25.10272217]
[272.62139893 26.19669151]
[284.47903442 36.20549393]
[288.15634155 51.28054428]
[282.23931885 65.62517548]
[269.00317383 73.72357941]
[253.53749084 72.46176147]
[241.78912354 62.32491684]
[227.21643066 65.87967682]
[212.64372253 69.43444061]
[198.10879517 73.14060211]
[183.65409851 77.14833832]
[169.24188232 81.30622864]
[154.82966614 85.46411896]
[140.41744995 89.62200165]
[126.00523376 93.77989197]
[117.90715027 114.31797791]
[99.75274658 119.11463165]
[93.68973541 132.83468628]
[87.62672424 146.55474854]
[81.56371307 160.27479553]
[75.50069427 173.99484253]
[84.88045502 162.28929138]
[97.93682861 154.90476990]
[112.80194092 152.89770508]
[127.34918976 156.55525208]
[139.49742126 165.35415649]
[147.50868225 178.03561401]
[150.23689270 192.78543091]
[147.29173279 207.49345398]
[139.09455872 220.05555725]
[126.81805420 228.67457581]
[112.21852112 232.11746216]
[97.38457489 229.89167786]
[84.43838501 222.31565857]
[75.23204803 210.47322083]
[71.08247375 196.05679321]
[71.39453125 211.05354309]
[71.70658875 226.05029297]
[72.01864624 241.04705811]
[72.33069611 256.04379272]
[72.64275360 271.04055786]
[72.95481110 286.03732300]
[73.26686859 301.03405762]
[73.57892609 316.03082275]
[76.16992188 335.23855591]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 43]
[11 42]
[12 41]
[15 38]
[16 37]
[17 36]
[18 35]
[20 32]
[21 31]
[22 30]
[45 126]
[46 125]
[47 124]
[48 123]
[49 122]
[51 92]
[52 91]
[53 90]
[54 89]
[56 65]
[57 64]
[67 83]
[68 82]
[69 81]
[93 120]
[94 119]
[95 118]
[96 117]
[97 116]
[99 115]
[101 114]
[102 113]
[103 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
