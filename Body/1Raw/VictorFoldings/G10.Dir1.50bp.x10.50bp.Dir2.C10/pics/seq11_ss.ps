%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAUCACCCUAUUAACCACUCACGGGAGCUCUCCAUGCAUUUGGUAUUUUCGUCUGGGGGxxxxxxxxxxCGAAGAAUUCACAAAAAACAAUAGCCUCAUCAUCCCCACCAUCAUAGCCACCAUCACCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[128.51235962 326.47183228]
[127.88838196 311.48480225]
[127.26440430 296.49780273]
[126.64042664 281.51077271]
[126.01644897 266.52377319]
[125.39247131 251.53674316]
[124.76849365 236.54972839]
[124.14451599 221.56271362]
[121.81340790 206.74496460]
[117.80567169 192.29026794]
[113.79792786 177.83558655]
[109.79019165 163.38088989]
[105.78244781 148.92620850]
[101.77471161 134.47151184]
[91.11772156 133.35476685]
[81.31671906 129.02360535]
[73.31622314 121.89546204]
[59.92993927 128.66357422]
[46.54365540 135.43168640]
[47.72389984 150.58673096]
[43.00996399 165.03828430]
[33.12069321 176.58258057]
[19.56412125 183.45919800]
[4.40753508 184.61950684]
[-10.03779984 179.88656616]
[-21.56907463 169.98211670]
[-28.42785263 156.41650391]
[-29.56822205 141.25840759]
[-24.81628227 126.81931305]
[-14.89667034 115.30107117]
[-1.32205606 108.46014404]
[13.83753109 107.33972168]
[28.27036476 112.11064911]
[39.77553940 122.04540253]
[53.16182709 115.27729034]
[66.54811096 108.50917053]
[65.75141907 104.29764557]
[65.48283386 100.01985168]
[50.83933640 96.76902771]
[38.54138947 106.42794037]
[22.91374588 105.87046051]
[11.33530140 95.35981750]
[9.27304268 79.85881042]
[17.70070457 66.68654633]
[32.63900375 62.06256485]
[47.03453064 68.17016602]
[54.09016037 82.12552643]
[68.73366547 85.37635040]
[75.47303772 75.71289825]
[85.06979370 68.87888336]
[96.40590668 65.67045593]
[108.16073608 66.46140289]
[114.78923035 53.00543976]
[121.41773224 39.54947281]
[107.84375763 45.93283463]
[92.88574982 44.81119537]
[80.41555023 36.47488785]
[73.66101837 23.08174324]
[74.37055206 8.09853268]
[82.36049652 -4.59638214]
[95.56266785 -11.71696281]
[110.55972290 -11.42006969]
[123.46973419 -3.78255057]
[130.95097351 9.21864414]
[131.06697083 24.21809387]
[140.33192444 12.42145348]
[149.59686279 0.62481332]
[158.86181641 -11.17182636]
[168.12677002 -22.96846581]
[157.68394470 -33.76944351]
[148.80915833 -45.89182281]
[141.66777039 -59.10977936]
[136.39282227 -73.17706299]
[133.08255005 -87.83161926]
[131.79864502 -102.80043030]
[132.56501770 -117.80464172]
[135.36741638 -132.56474304]
[140.15359497 -146.80574036]
[146.83441162 -160.26235962]
[155.28540039 -172.68388367]
[165.34913635 -183.83894348]
[176.83811951 -193.51968384]
[189.53833008 -201.54579163]
[203.21316528 -207.76774597]
[217.60787964 -212.06961060]
[232.45429993 -214.37126160]
[247.47584534 -214.62980652]
[262.39266968 -212.84045410]
[276.92691040 -209.03651428]
[290.80776978 -203.28886414]
[303.77667236 -195.70457458]
[315.59201050 -186.42494202]
[326.03366089 -175.62283325]
[334.90713501 -163.49949646]
[342.04708862 -150.28076172]
[347.32052612 -136.21290588]
[350.62921143 -121.55799866]
[351.91149902 -106.58905029]
[351.14349365 -91.58492279]
[348.33950806 -76.82512665]
[343.55178833 -62.58464050]
[336.86950684 -49.12874985]
[328.41717529 -36.70813370]
[318.35223389 -25.55417442]
[306.86218262 -15.87466621]
[294.16110229 -7.84993315]
[280.48559570 -1.62947106]
[266.09042358 2.67083716]
[251.24375916 4.97087908]
[236.22218323 5.22780657]
[221.30554199 3.43683338]
[206.77172852 -0.36867601]
[192.89147949 -6.11782742]
[179.92340088 -13.70351696]
[170.65846252 -1.90687740]
[161.39350891 9.88976288]
[152.12855530 21.68640327]
[142.86361694 33.48304367]
[134.87368774 46.17797089]
[128.24519348 59.63393784]
[121.61669922 73.08990479]
[133.56359863 91.94274139]
[131.47702026 114.16445160]
[116.22940063 130.46377563]
[120.23713684 144.91845703]
[124.24488068 159.37315369]
[128.25262451 173.82783508]
[132.26036072 188.28253174]
[136.26809692 202.73721313]
[141.75337219 188.77613831]
[153.01388550 178.86651611]
[167.55894470 175.20027161]
[182.17129517 178.58834839]
[193.61883545 188.28132629]
[199.36947632 202.13520813]
[198.15119934 217.08566284]
[190.23352051 229.82575989]
[177.36772156 237.53752136]
[162.39961243 238.51518250]
[148.63999939 232.54248047]
[139.13153076 220.93873596]
[139.75550842 235.92575073]
[140.37948608 250.91276550]
[141.00346375 265.89978027]
[141.62744141 280.88681030]
[142.25141907 295.87380981]
[142.87539673 310.86083984]
[143.49937439 325.84783936]
[150.19935608 341.42175293]
[137.08883667 352.17120361]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 148]
[2 147]
[3 146]
[4 145]
[5 144]
[6 143]
[7 142]
[8 141]
[9 129]
[10 128]
[11 127]
[12 126]
[13 125]
[14 124]
[17 36]
[18 35]
[19 34]
[38 48]
[39 47]
[52 121]
[53 120]
[54 119]
[65 118]
[66 117]
[67 116]
[68 115]
[69 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
