%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUUACUAGACCAAUGGGACUUAAACCCACAAACACUUAGUUAACAGCUAAGCACCCUAAxxxxxxxxxxUCUAGGCCUUCUUACGAGCCAAAACCUGCCCCUACUCCUCCUAGACCUAACCUGACUAGACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 318.73211670]
[92.50000000 303.73211670]
[92.50000000 288.73211670]
[92.50000000 273.73211670]
[92.50000000 258.73211670]
[92.50000000 243.73210144]
[92.50000000 228.73210144]
[92.50000000 213.73210144]
[92.50000000 198.73210144]
[92.50000000 183.73210144]
[73.60178375 179.81509399]
[56.09490204 171.69140625]
[40.90205002 159.78919983]
[28.82397652 144.73577881]
[20.49726105 127.32453918]
[16.36076546 108.47315216]
[16.63250542 89.17518616]
[1.98900318 85.92436218]
[-12.65449810 82.67353058]
[-20.01409912 95.81684875]
[-32.22327805 105.55641937]
[-47.73635101 110.12820435]
[-64.38037872 108.45893097]
[-79.65911102 100.38152313]
[-91.12700653 86.71894836]
[-105.69970703 90.27371216]
[-120.27241516 93.82846832]
[-134.84510803 97.38323212]
[-141.60888672 111.48236084]
[-155.87425232 117.88811493]
[-170.90550232 113.57590485]
[-179.60537720 100.58182526]
[-177.86604309 85.04126740]
[-166.50877380 74.29203033]
[-150.89610291 73.40955353]
[-138.39987183 82.81053162]
[-123.82717133 79.25576782]
[-109.25447083 75.70100403]
[-94.68177032 72.14624786]
[-93.05635834 64.82449341]
[-107.69985962 61.57366943]
[-122.34330750 58.32259750]
[-119.09199524 43.67920685]
[-104.44902802 46.93016815]
[-89.80552673 50.18099213]
[-88.18011475 42.85924149]
[-99.87973785 33.47208023]
[-111.57936096 24.08491898]
[-123.27898407 14.69775677]
[-134.97860718 5.31059456]
[-146.67823792 -4.07656717]
[-162.71824646 -3.76404619]
[-172.85206604 -16.20129395]
[-169.30590820 -31.84751701]
[-154.80007935 -38.70027161]
[-140.46220398 -31.50271416]
[-137.29107666 -15.77619076]
[-125.59144592 -6.38902903]
[-113.89182281 2.99813271]
[-102.19219971 12.38529491]
[-90.49257660 21.77245712]
[-78.79295349 31.15961838]
[-59.17149734 22.92320633]
[-38.73323059 24.27453232]
[-21.74530602 34.22177124]
[-11.43967724 50.05208206]
[-9.40367222 68.03002930]
[5.23982906 71.28086090]
[19.88332939 74.53168488]
[26.26237106 59.62577820]
[35.38417816 46.22164154]
[46.90946198 34.81786728]
[60.40951538 25.83862686]
[75.38218689 19.61791611]
[91.27055359 16.38712502]
[107.48362732 16.26642609]
[123.41833496 19.26030922]
[138.48196411 25.25741196]
[152.11421204 34.03466415]
[163.80799866 45.26558304]
[173.12835693 58.53242493]
[186.78459167 52.32701874]
[200.44084167 46.12161255]
[214.09707642 39.91620255]
[227.75331116 33.71079636]
[241.40956116 27.50539017]
[238.84500122 13.19909954]
[239.79158020 -1.29488146]
[244.18930054 -15.12804031]
[251.77629089 -27.49164772]
[262.10433960 -37.66403580]
[274.56542969 -45.05272675]
[288.42749023 -49.22893143]
[302.87738037 -49.95244217]
[317.06866455 -47.18543243]
[330.17111206 -41.09441376]
[341.41934204 -32.04022980]
[350.15747070 -20.55666161]
[363.93984985 -26.47662544]
[367.23428345 -41.63994980]
[378.83468628 -51.94578171]
[394.28048706 -53.43131638]
[407.63244629 -45.52533722]
[413.75650024 -31.26785660]
[410.29776001 -16.14116096]
[398.58624268 -5.96177769]
[383.12524414 -4.64388657]
[369.85980225 -12.69424343]
[356.07742310 -6.77428055]
[358.42379761 8.55863762]
[356.73498535 23.98901749]
[351.11956787 38.47214508]
[341.95217896 51.02595139]
[329.84848022 60.79760742]
[315.62387085 67.12145996]
[300.23849487 69.56436920]
[284.73257446 67.95538330]
[270.15582275 62.39765167]
[257.49664307 53.26189804]
[247.61495972 41.16163254]
[233.95872498 47.36703873]
[220.30249023 53.57244492]
[206.64624023 59.77785110]
[192.99000549 65.98326111]
[179.33375549 72.18866730]
[181.97619629 81.36618805]
[183.56066895 90.78419495]
[184.06671143 100.32113647]
[183.48782349 109.85393524]
[181.83145142 119.25955963]
[179.11897278 128.41662598]
[175.38540649 137.20695496]
[170.67892456 145.51708984]
[165.06027222 153.23979187]
[158.60197449 160.27540588]
[151.38737488 166.53309631]
[143.50956726 171.93214417]
[135.07025146 176.40283203]
[126.17831421 179.88749695]
[116.94852448 182.34114075]
[107.50000000 183.73210144]
[107.50000000 198.73210144]
[107.50000000 213.73210144]
[107.50000000 228.73210144]
[107.50000000 243.73210144]
[107.50000000 258.73211670]
[107.50000000 273.73211670]
[107.50000000 288.73211670]
[107.50000000 303.73211670]
[107.50000000 318.73211670]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[17 69]
[18 68]
[19 67]
[25 39]
[26 38]
[27 37]
[28 36]
[46 62]
[47 61]
[48 60]
[49 59]
[50 58]
[51 57]
[81 125]
[82 124]
[83 123]
[84 122]
[85 121]
[86 120]
[98 109]
[99 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
