%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAUAGAGGAGACAAGUCGUAACAUGGUAAGUGUACUGGAAAGUGCACUUGGACGAACCAGxxxxxxxxxxAUAAGCUUCUGACUCUUACCUCCCUCUCUCCUACUCCUGCUCGCAUCUGCUAUAGUGGAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.44080353 275.73519897]
[92.44080353 260.73519897]
[92.44080353 245.73519897]
[92.44080353 230.73519897]
[92.44080353 215.73519897]
[92.44080353 200.73519897]
[92.44080353 185.73519897]
[92.44080353 170.73519897]
[92.44080353 155.73519897]
[92.44080353 140.73519897]
[73.66741180 128.43881226]
[65.13103485 109.28910065]
[68.11106110 90.02623749]
[80.09875488 76.57230377]
[73.47026062 63.11634064]
[66.70214081 49.73005295]
[59.79514313 36.41489792]
[52.88814545 23.09974289]
[45.98114777 9.78458691]
[39.07415009 -3.53056860]
[32.16714859 -16.84572411]
[16.18811798 -15.36020374]
[0.89517659 -20.09619141]
[-11.38843346 -30.30338860]
[-18.80846214 -44.40269470]
[-20.25952721 -60.23044968]
[-15.54968452 -75.37046814]
[-5.42524290 -87.52285004]
[-12.60775185 -100.69143677]
[-19.79026031 -113.86001587]
[-26.97276878 -127.02860260]
[-34.69685364 -139.88700867]
[-42.94914246 -152.41296387]
[-53.61077118 -162.96424866]
[-66.22190094 -171.08580017]
[-78.83302307 -179.20733643]
[-91.44415283 -187.32888794]
[-104.53730774 -194.64797974]
[-118.06150055 -201.13615417]
[-131.58569336 -207.62431335]
[-145.10987854 -214.11248779]
[-158.63406372 -220.60064697]
[-172.15826416 -227.08880615]
[-185.68244934 -233.57698059]
[-199.20663452 -240.06513977]
[-212.73083496 -246.55331421]
[-229.03213501 -244.76466370]
[-238.51231384 -258.14593506]
[-231.41896057 -272.93161011]
[-215.04910278 -273.91146851]
[-206.24266052 -260.07748413]
[-192.71847534 -253.58934021]
[-179.19429016 -247.10116577]
[-165.67008972 -240.61300659]
[-152.14590454 -234.12483215]
[-138.62171936 -227.63667297]
[-125.09752655 -221.14851379]
[-111.57333374 -214.66033936]
[-98.04914093 -208.17218018]
[-101.57398224 -222.75215149]
[-93.92176056 -235.65344238]
[-79.43705750 -239.55131531]
[-66.34362030 -232.23271179]
[-62.07530212 -217.85281372]
[-69.05545807 -204.57586670]
[-83.32260895 -199.94000244]
[-70.71148682 -191.81846619]
[-58.10035706 -183.69692993]
[-45.48922729 -175.57537842]
[-52.03768921 -189.07048035]
[-54.59761810 -203.85043335]
[-52.96924210 -218.76177979]
[-47.27963638 -232.64083862]
[-37.97282410 -244.40447998]
[-25.77511787 -253.13465881]
[-11.63843632 -258.15005493]
[3.33398271 -259.05926514]
[17.97367859 -255.79135132]
[31.13815498 -248.60131836]
[41.80004883 -238.05029297]
[49.12729263 -224.96170044]
[52.54806519 -210.35696411]
[51.79540253 -195.37585449]
[46.92804718 -181.18751526]
[38.32585144 -168.89921570]
[26.66013527 -159.46995544]
[12.84130383 -153.63558960]
[-2.05221105 -151.85142517]
[-16.85810661 -154.25672913]
[-30.42318153 -160.66525269]
[-22.17089272 -148.13929749]
[-19.38669014 -147.46434021]
[-16.71186256 -145.60981750]
[-14.61076069 -142.61528015]
[-13.52328396 -138.69247437]
[-13.80418682 -134.21110535]
[-6.62167835 -121.04252625]
[0.56083077 -107.87394714]
[7.74333954 -94.70536041]
[21.66343498 -96.72892761]
[35.46537018 -93.86305237]
[47.48001099 -86.43341064]
[56.24723434 -75.31885529]
[60.69335175 -61.84748840]
[60.26257324 -47.63798523]
[54.98640060 -34.40509415]
[45.48230743 -23.75272369]
[52.38930511 -10.43756676]
[59.29630280 2.87758851]
[66.20330048 16.19274330]
[73.11029816 29.50790024]
[80.01729584 42.82305527]
[85.92733765 47.34157944]
[86.92622375 56.48783875]
[93.55471802 69.94380951]
[110.04708099 68.13408661]
[126.43497467 75.43733978]
[137.71917725 91.08740234]
[139.76362610 111.63406372]
[153.14991760 118.40217590]
[166.89164734 111.19493103]
[182.24035645 113.47463989]
[193.29412842 124.36470795]
[195.80258179 139.67768860]
[188.80116272 153.52542114]
[174.98204041 160.58317566]
[159.65898132 158.13710022]
[148.72399902 147.12774658]
[146.38180542 131.78846741]
[132.99551392 125.02034760]
[126.60684204 128.94906616]
[135.10960388 141.30636597]
[143.61236572 153.66368103]
[156.20808411 161.80909729]
[156.03793335 176.80813599]
[143.26068115 184.66571045]
[129.79830933 178.05021667]
[128.21224976 163.13395691]
[121.02086639 149.97023010]
[113.82948303 136.80648804]
[107.44080353 140.73519897]
[107.44080353 155.73519897]
[107.44080353 170.73519897]
[107.44080353 185.73519897]
[107.44080353 200.73519897]
[107.44080353 215.73519897]
[107.44080353 230.73519897]
[107.44080353 245.73519897]
[107.44080353 260.73519897]
[107.44080353 275.73519897]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[14 115]
[15 114]
[16 112]
[17 111]
[18 110]
[19 109]
[20 108]
[21 107]
[28 99]
[29 98]
[30 97]
[31 96]
[32 91]
[33 90]
[34 69]
[35 68]
[36 67]
[37 66]
[38 59]
[39 58]
[40 57]
[41 56]
[42 55]
[43 54]
[44 53]
[45 52]
[46 51]
[119 130]
[120 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
