%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCUAGCCUAGCCGUUUACUCAAUCCUCUGAUCAGGGUGAGCAUCAAACUCAAACUACGCCCxxxxxxxxxxUAAAAUAAAAUCCCCACUAUGCACAUUUUAUUUCUCCAACAUACUCGGAUUCUACCCUAGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[101.16268158 277.92864990]
[101.16268158 262.92864990]
[101.16268158 247.92864990]
[101.16268158 232.92864990]
[101.16268158 217.92864990]
[101.16268158 202.92864990]
[101.16268158 187.92864990]
[101.16268158 172.92864990]
[101.16268158 157.92864990]
[101.16268158 142.92864990]
[99.31935883 128.04234314]
[95.66065216 113.49539185]
[84.07160187 103.97205353]
[69.09136200 103.20240021]
[54.11111832 102.43273926]
[49.92885590 117.36752319]
[42.54484177 130.99836731]
[32.32883453 142.64915466]
[19.79096603 151.74281311]
[5.55628681 157.82977295]
[-9.66641426 160.61030579]
[-25.11988831 159.94923401]
[-40.03609848 155.88247681]
[-53.67440033 148.61518860]
[-65.35830688 138.51130676]
[-74.50904083 126.07541656]
[-80.67422485 111.92751312]
[-83.55020905 96.77208710]
[-98.54309845 96.31016541]
[-113.53598022 95.84823608]
[-128.52886963 95.38630676]
[-138.47944641 103.65610504]
[-150.99502563 102.92677307]
[-159.36297607 94.13816833]
[-174.34321594 93.36850739]
[-189.32345581 92.59884644]
[-200.88809204 103.37078857]
[-216.67926025 102.72677612]
[-227.32832336 91.04889679]
[-226.51739502 75.26542664]
[-214.72758484 64.74041748]
[-198.95356750 65.71817780]
[-188.55380249 77.61860657]
[-173.57354736 78.38826752]
[-158.59330750 79.15792847]
[-143.45545959 70.33240509]
[-128.06694031 80.39342499]
[-113.07405853 80.85534668]
[-98.08116913 81.31727600]
[-83.08828735 81.77920532]
[-79.59712219 67.67509460]
[-73.23472595 54.60564423]
[-64.27940369 43.14834213]
[-53.12409973 33.81005096]
[-40.25915909 27.00455093]
[-26.25076866 23.03422928]
[-11.71603107 22.07662582]
[2.70420790 24.17650795]
[16.37361908 29.24378204]
[28.68847084 37.05735016]
[39.10429001 47.27476501]
[47.15994263 59.44722366]
[52.49803162 73.03930664]
[54.88077927 87.45249939]
[69.86102295 88.22215271]
[84.84126282 88.99181366]
[104.99562073 84.15148163]
[116.38669586 74.39221191]
[109.61840057 62.32893372]
[105.21826172 49.21986008]
[103.33889008 35.52484131]
[104.04447174 21.72395706]
[107.30863953 8.30069065]
[113.01539612 -4.27502108]
[120.96326447 -15.56322956]
[130.87240601 -25.16936874]
[142.39447021 -32.75804901]
[155.12481689 -38.06475830]
[168.61674500 -40.90509796]
[182.39717102 -41.18117142]
[195.98323059 -38.88496780]
[208.89915466 -34.09858704]
[220.69297791 -26.99129295]
[230.95228577 -17.81354332]
[242.92254639 -26.85306358]
[254.89280701 -35.89258194]
[266.86306763 -44.93210220]
[278.83331299 -53.97162247]
[290.80358887 -63.01114273]
[302.77383423 -72.05065918]
[314.74411011 -81.09017944]
[326.71435547 -90.12969971]
[323.23226929 -104.95518494]
[326.08767700 -119.91400909]
[334.78582764 -132.41447449]
[347.81976318 -140.29080200]
[362.93124390 -142.17837524]
[377.50213623 -137.75013733]
[389.00793457 -127.77332306]
[395.45516968 -113.97647858]
[395.72683716 -98.74998474]
[389.77587891 -84.73192596]
[378.63333130 -74.35102081]
[364.22970581 -69.40580750]
[349.06048584 -70.75308990]
[335.75387573 -78.15943909]
[323.78363037 -69.11991882]
[311.81335449 -60.08040237]
[299.84310913 -51.04088211]
[287.87283325 -42.00136185]
[275.90258789 -32.96184158]
[263.93234253 -23.92232323]
[251.96206665 -14.88280392]
[239.99180603 -5.84328461]
[246.84603882 8.87643814]
[250.30444336 24.74781799]
[250.19563293 40.99774170]
[246.52207947 56.83401108]
[239.46009827 71.48397827]
[229.35137939 84.23222351]
[216.68650818 94.45552063]
[202.08110046 101.65327454]
[186.24588013 105.47204590]
[169.95216370 105.72290039]
[153.99421692 102.39077759]
[139.15055847 95.63533020]
[126.14596558 85.78328705]
[114.75489807 95.54255676]
[110.20760345 109.83668518]
[113.86631012 124.38364410]
[119.33416748 110.41573334]
[130.23973083 100.11676025]
[144.49737549 95.45633698]
[159.38043213 97.32572937]
[172.04261780 105.36743164]
[180.06239319 118.04352570]
[181.90600586 132.92979431]
[177.22090149 147.17935181]
[166.90306091 158.06706238]
[152.92570496 163.51072693]
[137.96191406 162.46928406]
[124.87337494 155.14192200]
[116.16268158 142.92864990]
[116.16268158 157.92864990]
[116.16268158 172.92864990]
[116.16268158 187.92864990]
[116.16268158 202.92864990]
[116.16268158 217.92864990]
[116.16268158 232.92864990]
[116.16268158 247.92864990]
[116.16268158 262.92864990]
[116.16268158 277.92864990]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 130]
[12 129]
[13 66]
[14 65]
[15 64]
[28 50]
[29 49]
[30 48]
[31 47]
[34 45]
[35 44]
[36 43]
[67 128]
[68 127]
[84 114]
[85 113]
[86 112]
[87 111]
[88 110]
[89 109]
[90 108]
[91 107]
[92 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
