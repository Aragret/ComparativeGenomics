%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:33:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUAGAGUAAAUAAUAGGAGCUUAAACCCCCUUAUUUCUAGGACUAUGAGAAUCGAACCCAxxxxxxxxxxGCCUCUACCUGCACGACAACACAUAAUGACCCACCAAUCACAUGCCUAUCAUAUAGUAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[105.27257538 324.94653320]
[104.96051788 309.94976807]
[104.64846039 294.95300293]
[104.33640289 279.95626831]
[104.02434540 264.95950317]
[103.71229553 249.96275330]
[103.40023804 234.96600342]
[103.08818054 219.96923828]
[102.77612305 204.97248840]
[100.90850830 190.08920288]
[97.50553131 175.48031616]
[94.10255432 160.87142944]
[90.69957733 146.26252747]
[87.29660034 131.65364075]
[74.94502258 123.14254761]
[60.08197784 125.16488647]
[45.21893311 127.18721771]
[30.48112679 129.97953796]
[15.90842342 133.53430176]
[1.33572066 137.08906555]
[-13.23698235 140.64382935]
[-27.80968475 144.19859314]
[-42.38238907 147.75335693]
[-50.61653137 160.97593689]
[-65.44596863 164.37336731]
[-78.00093079 156.44189453]
[-92.57363129 159.99664307]
[-97.50371552 174.61505127]
[-109.56872559 184.22958374]
[-124.91876221 185.77226257]
[-138.65568542 178.75082397]
[-146.39610291 165.40580750]
[-145.67005920 149.99554443]
[-136.70922852 137.43737793]
[-122.37300110 131.73860168]
[-107.23600006 134.71766663]
[-96.12839508 145.42395020]
[-81.55569458 141.86918640]
[-74.06311798 129.04743958]
[-59.33496857 125.23481750]
[-45.93714905 133.18064880]
[-31.36444664 129.62588501]
[-16.79174423 126.07112885]
[-2.21904135 122.51636505]
[12.35366154 118.96160126]
[26.92636490 115.40683746]
[15.90928268 105.22725677]
[16.78619385 90.25291443]
[28.91614532 81.42884064]
[43.43312454 85.20471954]
[49.72639465 98.82069397]
[43.19659805 112.32417297]
[58.05964279 110.30183411]
[72.92269135 108.27950287]
[78.17886353 81.36484528]
[104.04489136 71.20660400]
[105.91250610 56.32332230]
[95.15883636 47.64244080]
[90.15419769 34.87660217]
[92.11187744 21.41487885]
[100.41189575 10.77433205]
[112.79152679 5.68113470]
[114.96836090 -9.16007042]
[117.14520264 -24.00127602]
[102.99470520 -29.13434982]
[90.16733551 -37.01111603]
[79.18836212 -47.30902863]
[70.50736237 -59.60639572]
[64.47982788 -73.39964294]
[61.35256958 -88.12394714]
[61.25365829 -103.17636108]
[64.18713379 -117.94049072]
[70.03288269 -131.81175232]
[78.55152130 -144.22215271]
[89.39421082 -154.66345215]
[102.11695862 -162.70811462]
[116.19876862 -168.02671814]
[131.06300354 -170.40145874]
[146.10098267 -169.73507690]
[160.69691467 -166.05488586]
[174.25309753 -159.51158142]
[186.21441650 -150.37310791]
[196.09104919 -139.01367188]
[203.47859192 -125.89844513]
[208.07449341 -111.56447601]
[209.69056702 -96.59874725]
[208.26063538 -81.61408234]
[203.84324646 -67.22409821]
[196.61929321 -54.01805496]
[186.88461304 -42.53673553]
[175.03779602 -33.25029373]
[161.56399536 -26.53899765]
[147.01493835 -22.67767334]
[131.98640442 -21.82444000]
[129.80957031 -6.98323393]
[127.63272858 7.85797167]
[139.72152710 18.91990471]
[142.88943481 35.16583633]
[135.69979858 50.25857162]
[120.79578400 58.19093704]
[118.92817688 73.07421875]
[128.91090393 84.26998138]
[143.91009521 84.11394501]
[158.90927124 83.95790863]
[168.51248169 75.28425598]
[181.04934692 75.49910736]
[189.77160645 83.93885040]
[204.77079773 84.09488678]
[219.76998901 84.25092316]
[228.91232300 71.71308899]
[243.68849182 66.97554779]
[258.41677856 71.85997772]
[267.43380737 84.48822021]
[267.27239990 100.00445557]
[257.99459839 112.44237518]
[243.16789246 117.01934814]
[228.49346924 111.97543335]
[219.61395264 99.25011444]
[204.61476135 99.09407806]
[189.61557007 98.93804169]
[174.85336304 108.37609863]
[159.06530762 98.95709991]
[144.06613159 99.11313629]
[129.06694031 99.26917267]
[121.20704651 119.33111572]
[101.90549469 128.25065613]
[105.30847168 142.85955811]
[108.71144867 157.46844482]
[112.11442566 172.07734680]
[115.51740265 186.68623352]
[121.96946716 173.14479065]
[134.24932861 164.53054810]
[149.17837524 163.07328796]
[162.89227295 169.15022278]
[171.84121704 181.18833923]
[173.70880127 196.07162476]
[168.01161194 209.94758606]
[156.22434998 219.22445679]
[141.39810181 221.50094604]
[127.37060547 216.18782043]
[117.77288055 204.66043091]
[118.08493042 219.65718079]
[118.39698792 234.65394592]
[118.70904541 249.65069580]
[119.02110291 264.64746094]
[119.33316040 279.64419556]
[119.64521790 294.64096069]
[119.95726776 309.63769531]
[120.26932526 324.63446045]
[122.86032867 343.84219360]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 130]
[11 129]
[12 128]
[13 127]
[14 126]
[15 54]
[16 53]
[17 52]
[18 46]
[19 45]
[20 44]
[21 43]
[22 42]
[23 41]
[26 38]
[27 37]
[56 101]
[57 100]
[62 96]
[63 95]
[64 94]
[102 124]
[103 123]
[104 122]
[107 120]
[108 119]
[109 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
