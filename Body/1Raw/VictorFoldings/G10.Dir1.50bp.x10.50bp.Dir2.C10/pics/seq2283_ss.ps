%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGGAACAGCUCUUUGGACACUAGGAAAAAACCUUGUAGAGAGAGUAAAAAAUUUAACACCCAxxxxxxxxxxAAAGACAUUGGAACACUAUACCUAUUAUUCGGCGCAUGAGCUGGAGUCCUAGGCACAGCUCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[166.54786682 498.59606934]
[166.54786682 483.59606934]
[166.54786682 468.59606934]
[166.54786682 453.59606934]
[166.54786682 438.59606934]
[166.54786682 423.59606934]
[166.54786682 408.59606934]
[166.54786682 393.59606934]
[166.54786682 378.59606934]
[166.54786682 363.59606934]
[164.72821045 348.70684814]
[161.11576843 334.14834595]
[157.50332642 319.58984375]
[153.89089966 305.03131104]
[139.47576904 292.19515991]
[145.18896484 272.90356445]
[140.98950195 258.50341797]
[136.79003906 244.10327148]
[132.59057617 229.70310974]
[128.39111328 215.30294800]
[124.19165039 200.90280151]
[113.71322632 194.78553772]
[110.11957550 182.77676392]
[115.87145996 171.18923950]
[111.96471405 156.70693970]
[107.91139221 142.26495361]
[96.92032623 132.21281433]
[100.48466492 116.79833984]
[88.26068115 108.10498810]
[73.27993011 108.86472321]
[59.88936234 117.29106140]
[46.78653717 110.20832062]
[31.80578995 110.96805573]
[16.82504082 111.72779846]
[6.41739130 123.62133789]
[-9.35726738 124.58864594]
[-21.14011002 114.05583191]
[-21.94058418 98.27182770]
[-11.28378296 86.60100555]
[4.50780201 85.96745300]
[16.06530380 96.74704742]
[31.04605103 95.98731232]
[46.02679825 95.22756958]
[58.34584808 86.85557556]
[72.52019501 93.88397980]
[87.50094604 93.12424469]
[73.38843536 88.04122162]
[67.62272644 74.19360352]
[73.95760345 60.59693909]
[88.26872253 56.10340118]
[101.23876190 63.63852692]
[104.42359924 78.29610443]
[107.14467621 63.54497910]
[109.86575317 48.79384995]
[112.58683014 34.04272461]
[115.30790710 19.29159737]
[118.02898407 4.54047108]
[103.70529175 0.02256015]
[90.04538727 -6.22136354]
[77.25634766 -14.09664345]
[65.53205109 -23.48389435]
[55.05023193 -34.24080276]
[45.96979523 -46.20430374]
[38.42840195 -59.19302750]
[32.54037094 -73.01007080]
[28.39496613 -87.44597626]
[26.05503082 -102.28188324]
[25.55603790 -117.29290009]
[26.90555191 -132.25146484]
[30.08311462 -146.93078613]
[35.04055405 -161.10835266]
[41.70272064 -174.56922913]
[49.96860886 -187.10935974]
[59.71292114 -198.53862000]
[70.78792572 -208.68376160]
[83.02573395 -217.39097595]
[96.24082947 -224.52827454]
[110.23286438 -229.98744202]
[124.78972626 -233.68574524]
[139.69073486 -235.56709290]
[154.71000671 -235.60298157]
[169.61982727 -233.79284668]
[184.19419861 -230.16415405]
[198.21215820 -224.77189636]
[211.46119690 -217.69783020]
[223.74047852 -209.04919434]
[234.86383057 -198.95709229]
[244.66264343 -187.57450867]
[252.98837280 -175.07403564]
[259.71478271 -161.64514160]
[264.73989868 -147.49142456]
[267.98757935 -132.82745361]
[269.40853882 -117.87551117]
[268.98129272 -102.86228180]
[266.71228027 -88.01535797]
[262.63589478 -73.55981445]
[256.81396484 -59.71479034]
[249.33470154 -46.69017792]
[240.31153870 -34.68342590]
[229.88124084 -23.87655258]
[218.20193481 -14.43338776]
[205.45066833 -6.49708748]
[191.82075500 -0.18796350]
[177.51881409 4.39833927]
[162.76167297 7.19229317]
[147.77302551 8.15154362]
[132.78010559 7.26154757]
[130.05903625 22.01267433]
[127.33795929 36.76380157]
[124.61688232 51.51492691]
[121.89580536 66.26605225]
[119.17472839 81.01718140]
[114.88481903 112.59887695]
[126.17626190 123.68101501]
[122.31155396 138.06550598]
[127.74899292 145.48004150]
[126.44702148 152.80018616]
[130.35377502 167.28248596]
[143.69227600 179.93809509]
[138.59181213 196.70333862]
[142.79127502 211.10348511]
[146.99072266 225.50364685]
[151.19018555 239.90380859]
[155.38964844 254.30395508]
[159.58911133 268.70413208]
[169.47656250 273.41177368]
[174.99870300 282.61245728]
[174.52230835 293.11199951]
[168.44940186 301.41888428]
[172.06184387 315.97738647]
[175.67428589 330.53591919]
[179.28672791 345.09442139]
[184.76846313 331.13195801]
[195.68536377 320.84500122]
[209.94862366 316.20181274]
[224.82920837 318.09078979]
[237.47993469 326.15051270]
[245.48028564 338.83886719]
[247.29951477 353.72814941]
[242.58953857 367.96948242]
[232.25154114 378.83807373]
[218.26354980 384.25433350]
[203.30192566 383.18194580]
[190.22937012 375.82611084]
[181.54786682 363.59606934]
[181.54786682 378.59606934]
[181.54786682 393.59606934]
[181.54786682 408.59606934]
[181.54786682 423.59606934]
[181.54786682 438.59606934]
[181.54786682 453.59606934]
[181.54786682 468.59606934]
[181.54786682 483.59606934]
[181.54786682 498.59606934]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[11 132]
[12 131]
[13 130]
[14 129]
[16 125]
[17 124]
[18 123]
[19 122]
[20 121]
[21 120]
[24 118]
[25 117]
[26 115]
[28 113]
[29 46]
[30 45]
[32 43]
[33 42]
[34 41]
[52 112]
[53 111]
[54 110]
[55 109]
[56 108]
[57 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
