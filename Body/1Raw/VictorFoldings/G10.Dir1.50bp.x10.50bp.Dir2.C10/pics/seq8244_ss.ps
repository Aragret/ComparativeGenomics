%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUUUCCCCCUCUAUUGAUCCCCACCUCCAAAUAUCUCAUCAACAACCGACUAAUCACCACCxxxxxxxxxxAACGCCUGGCAGCCGGAAGCCUAUUCGCAGGAUUUCUCAUUACUAACAACAUUUCCCCCGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-74.65500641 279.80377197]
[-85.42369080 290.24578857]
[-96.19236755 300.68780518]
[-106.96104431 311.12982178]
[-117.72972870 321.57180786]
[-122.25083923 336.73327637]
[-136.77409363 340.03848267]
[-147.54277039 350.48049927]
[-158.31144714 360.92248535]
[-169.08012390 371.36450195]
[-179.84881592 381.80651855]
[-190.61749268 392.24853516]
[-184.98478699 406.36734009]
[-185.18887329 421.56689453]
[-191.19863892 435.52938843]
[-202.09765625 446.12564087]
[-216.22386169 451.73974609]
[-231.42314148 451.51568604]
[-245.37771606 445.48754883]
[-255.95960999 434.57461548]
[-261.55514526 420.44100952]
[-261.31106567 405.24203491]
[-255.26458740 391.29541016]
[-244.33773804 380.72787476]
[-230.19680786 375.15093994]
[-214.99815369 375.41500854]
[-201.05949402 381.47985840]
[-190.29081726 371.03784180]
[-179.52214050 360.59582520]
[-168.75346375 350.15380859]
[-157.98478699 339.71179199]
[-147.21611023 329.26980591]
[-143.46524048 314.85522461]
[-128.17173767 310.80313110]
[-117.40305328 300.36114502]
[-106.63437653 289.91912842]
[-95.86569977 279.47711182]
[-85.09702301 269.03509521]
[-94.90370941 257.62716675]
[-104.00839996 245.65145874]
[-112.37829590 233.15116882]
[-119.98326111 220.17129517]
[-126.79589081 206.75859070]
[-132.79165649 192.96136475]
[-137.94897461 178.82933044]
[-142.24923706 164.41336060]
[-145.67698669 149.76538086]
[-148.21986389 134.93817139]
[-149.86869812 119.98510742]
[-150.61758423 104.96007538]
[-150.46379089 89.91716766]
[-149.40788269 74.91058350]
[-147.45367432 59.99436188]
[-144.60820007 45.22223282]
[-140.88169861 30.64740181]
[-136.28759766 16.32236290]
[-130.84243774 2.29870892]
[-124.56584167 -11.37304688]
[-117.48041534 -24.64366341]
[-109.61167145 -37.46534348]
[-100.98796082 -49.79190445]
[-91.64033508 -61.57894897]
[-81.60246277 -72.78402710]
[-70.91050720 -83.36677551]
[-59.60296631 -93.28907776]
[-47.72057343 -102.51519775]
[-35.30612564 -111.01190948]
[-22.40434074 -118.74860382]
[-9.06168079 -125.69741821]
[4.67379284 -131.83331299]
[18.75260925 -137.13421631]
[33.12406158 -141.58100891]
[47.73638153 -145.15768433]
[62.53694534 -147.85134888]
[77.47244263 -149.65232849]
[92.48907471 -150.55410767]
[107.53276825 -150.55345154]
[122.54932404 -149.65036011]
[137.48466492 -147.84808350]
[152.28498840 -145.15312195]
[166.89700317 -141.57518005]
[181.26806641 -137.12713623]
[195.34642029 -131.82501221]
[209.08135986 -125.68790436]
[222.42341614 -118.73793030]
[235.32452393 -111.00011444]
[247.73823547 -102.50231934]
[259.61981201 -93.27516174]
[270.92648315 -83.35187531]
[281.47851562 -94.01277924]
[292.03051758 -104.67369080]
[289.39166260 -119.96473694]
[296.27484131 -133.87162781]
[310.03329468 -141.04687500]
[325.37664795 -138.73146057]
[336.40505981 -127.81570435]
[338.87786865 -112.49693298]
[331.84426880 -98.66552734]
[318.00875854 -91.63994598]
[302.69143677 -94.12167358]
[292.13940430 -83.46076202]
[281.58740234 -72.79985809]
[291.56732178 -61.66550446]
[300.86563110 -49.95592117]
[309.44918823 -37.71276855]
[317.28753662 -24.97961426]
[324.35272217 -11.80176163]
[330.61962891 1.77390003]
[336.06594849 15.69906521]
[340.67230225 29.92418671]
[344.42230225 44.39865112]
[347.30261230 59.07095337]
[349.30300903 73.88888550]
[350.41632080 88.79972839]
[350.63861084 103.75041962]
[349.96908569 118.68776703]
[348.41012573 133.55862427]
[345.96728516 148.31007385]
[342.64926147 162.88961792]
[338.46786499 177.24540710]
[333.43795776 191.32633972]
[327.57742310 205.08230591]
[320.90713501 218.46438599]
[313.45083618 231.42494202]
[305.23501587 243.91787720]
[296.28897095 255.89872742]
[286.64450073 267.32485962]
[276.33587646 278.15563965]
[265.39987183 288.35247803]
[253.87532043 297.87915039]
[241.80325317 306.70175171]
[229.22663879 314.78884888]
[216.19021606 322.11169434]
[202.74035645 328.64425659]
[188.92494202 334.36325073]
[174.79310608 339.24832153]
[160.39515686 343.28213501]
[145.78231812 346.45031738]
[131.00656128 348.74157715]
[116.12048340 350.14776611]
[101.17704773 350.66390991]
[86.22942352 350.28811646]
[71.33080292 349.02178955]
[56.53418732 346.86938477]
[41.89222717 343.83859253]
[27.45702744 339.94018555]
[13.27994633 335.18801880]
[-0.58857095 329.59902954]
[-14.09917831 323.19308472]
[-27.20380211 315.99298096]
[-39.85581589 308.02435303]
[-52.01019669 299.31552124]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 38]
[2 37]
[3 36]
[4 35]
[5 34]
[7 32]
[8 31]
[9 30]
[10 29]
[11 28]
[12 27]
[89 102]
[90 101]
[91 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
