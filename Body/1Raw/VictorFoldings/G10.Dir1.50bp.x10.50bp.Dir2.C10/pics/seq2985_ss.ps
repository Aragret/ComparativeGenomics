%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCGCAAUCCUAUUCUAGAGUCCAUAUCAACAAUAGGGUUUACGACCUCGAUGUUGGAUCAGxxxxxxxxxxACCCUGAGAACCAAAAUGAACGAAAAUCUGUUCGCUUCAUUCAUUGCCCCCACAAUCCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[40.16529465 316.39947510]
[40.16529465 301.39947510]
[40.16529465 286.39947510]
[40.16529465 271.39947510]
[40.16529465 256.39947510]
[40.16529465 241.39945984]
[40.16529465 226.39945984]
[40.16529465 211.39945984]
[40.16529465 196.39945984]
[40.16529465 181.39945984]
[28.27291489 172.25773621]
[13.77731800 176.11489868]
[1.07982898 189.40975952]
[-15.66740608 184.25903320]
[-30.07962227 188.41691589]
[-44.49183655 192.57479858]
[-58.90405273 196.73269653]
[-73.31626892 200.89057922]
[-87.72848511 205.04846191]
[-102.14070129 209.20635986]
[-116.55291748 213.36424255]
[-130.96513367 217.52212524]
[-131.69805908 232.64633179]
[-137.30442810 246.71215820]
[-147.17607117 258.19384766]
[-160.24220276 265.84597778]
[-175.08551025 268.83847046]
[-190.09590149 266.84671021]
[-203.64514160 260.08679199]
[-214.26354980 249.29197693]
[-220.79928589 235.63317871]
[-222.54341125 220.59201050]
[-219.30674744 205.80001831]
[-211.44036865 192.86175537]
[-199.79756165 183.18063354]
[-185.64126587 177.80682373]
[-170.50704956 177.32319641]
[-156.03652954 181.78224182]
[-143.79939270 190.70027161]
[-135.12301636 203.10990906]
[-120.71080780 198.95202637]
[-106.29859161 194.79414368]
[-91.88637543 190.63624573]
[-77.47415924 186.47836304]
[-63.06194305 182.32048035]
[-48.64972687 178.16258240]
[-34.23751068 174.00469971]
[-19.82529259 169.84681702]
[-13.67506981 159.38345337]
[-1.65138257 155.82678223]
[9.92015839 161.61929321]
[24.41575623 157.76213074]
[28.78339005 153.65295410]
[33.95827484 150.81706238]
[39.58631897 149.39389038]
[45.29561615 149.42813110]
[50.72098160 150.86967468]
[59.98593140 139.07304382]
[69.25087738 127.27639771]
[78.51583099 115.47975922]
[87.78077698 103.68312073]
[82.90684509 78.77434540]
[84.46442413 63.85543442]
[86.02200317 48.93651962]
[87.57958984 34.01760864]
[81.31710815 19.48860741]
[90.33415985 7.63356781]
[91.89174652 -7.28534412]
[77.98191071 -13.20209408]
[66.43511963 -22.95724678]
[58.27809906 -35.68338013]
[54.23617172 -50.24889374]
[54.66874313 -65.35863495]
[59.53734589 -79.66905975]
[68.40906525 -91.90768433]
[80.49504089 -100.98625946]
[94.72059631 -106.09753418]
[109.82079315 -106.78701782]
[124.45294189 -102.99338531]
[137.31596375 -95.05397797]
[147.26608276 -83.67476654]
[153.41853333 -69.86756897]
[155.22625732 -54.86011887]
[152.52851868 -39.98686981]
[145.56517029 -26.57033730]
[134.95541382 -15.80351353]
[121.64265442 -8.64377594]
[106.81065369 -5.72776318]
[105.25307465 9.19114876]
[111.62696838 22.65305138]
[102.49849701 35.57519150]
[100.94091797 50.49410248]
[99.38333893 65.41301727]
[97.82575226 80.33192444]
[109.02152252 90.31465149]
[123.66502380 87.06382751]
[138.30851746 83.81300354]
[152.95202637 80.56217194]
[167.59552002 77.31134796]
[182.23902893 74.06052399]
[196.84791565 70.65754700]
[211.42062378 67.10278320]
[225.99333191 63.54802322]
[240.56602478 59.99325943]
[248.55941772 46.35943604]
[263.87304688 42.45194626]
[277.42160034 50.58903885]
[281.16696167 65.94311523]
[272.88708496 79.40488434]
[257.49426270 82.98770905]
[244.12078857 74.56596375]
[229.54809570 78.12072754]
[214.97538757 81.67548370]
[200.40267944 85.23024750]
[194.61228943 89.90111542]
[185.48985291 88.70402527]
[170.84635925 91.95484924]
[156.20285034 95.20567322]
[141.55935669 98.45650482]
[126.91584778 101.70732880]
[112.27234650 104.95815277]
[99.57741547 112.94806671]
[90.31246948 124.74471283]
[81.04751587 136.54135132]
[71.78256989 148.33799744]
[62.51762009 160.13462830]
[73.38990784 149.80055237]
[87.32266998 144.24372864]
[102.32266235 144.25915527]
[116.24397278 149.84458923]
[127.09499359 160.20100403]
[133.32337952 173.84678650]
[134.03807068 188.82974243]
[129.13684082 203.00642395]
[119.32084656 214.34866333]
[105.99440002 221.23384094]
[91.06398010 222.67695618]
[76.66555786 218.47154236]
[64.85898590 209.21925354]
[57.33332825 196.24372864]
[55.16529465 181.39945984]
[55.16529465 196.39945984]
[55.16529465 211.39945984]
[55.16529465 226.39945984]
[55.16529465 241.39945984]
[55.16529465 256.39947510]
[55.16529465 271.39947510]
[55.16529465 286.39947510]
[55.16529465 301.39947510]
[55.16529465 316.39947510]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 52]
[12 51]
[14 48]
[15 47]
[16 46]
[17 45]
[18 44]
[19 43]
[20 42]
[21 41]
[22 40]
[57 126]
[58 125]
[59 124]
[60 123]
[61 122]
[62 94]
[63 93]
[64 92]
[65 91]
[67 89]
[68 88]
[95 121]
[96 120]
[97 119]
[98 118]
[99 117]
[100 116]
[101 114]
[102 113]
[103 112]
[104 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
