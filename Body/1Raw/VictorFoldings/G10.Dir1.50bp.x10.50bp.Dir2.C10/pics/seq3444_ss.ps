%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAAAACUCUUCACCAAAGAGCCCCUAAAACCCGCCACAUCUACCAUCACCCUCUACAUCAxxxxxxxxxxCUGUGGAGCAAACCACAGUUUCAUGCCCAUCGUCCUAGAAUUAAUUCCCCUAAAAAUCUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[126.55818176 90.46356964]
[114.29581451 99.10268402]
[108.24974823 111.70970154]
[94.34330750 113.15968323]
[82.08094025 121.79879761]
[69.81856537 130.43791199]
[58.02192688 139.70286560]
[46.72292328 149.56858826]
[35.42391968 159.43431091]
[24.12491417 169.30003357]
[38.59188080 173.26321411]
[44.70865250 186.95938110]
[38.00436401 200.37774658]
[23.37930679 203.71057129]
[11.52321434 194.52182007]
[11.10166740 179.52835083]
[-1.16070104 188.16746521]
[-13.42306900 196.80657959]
[-25.68543816 205.44569397]
[-37.94780731 214.08480835]
[-42.09370041 229.58290100]
[-56.85260773 235.87213135]
[-70.90275574 228.12789917]
[-73.46607208 212.29095459]
[-62.57620239 200.51002502]
[-46.58692169 201.82243347]
[-34.32455444 193.18331909]
[-22.06218529 184.54420471]
[-9.79981709 175.90509033]
[2.46255112 167.26597595]
[14.25919056 158.00102234]
[25.55819511 148.13529968]
[36.85720062 138.26957703]
[48.15620422 128.40385437]
[33.68923569 124.44067383]
[27.57246590 110.74449921]
[34.27675247 97.32613373]
[48.90181351 93.99331665]
[60.75790405 103.18206787]
[61.17945099 118.17554474]
[73.44181824 109.53643036]
[85.70418549 100.89731598]
[91.75025177 88.29029846]
[105.65669250 86.84031677]
[117.91905975 78.20120239]
[109.48229218 64.18080902]
[102.11924744 49.56823730]
[95.87123108 34.44556427]
[90.77330017 18.89772987]
[86.85403442 3.01205182]
[84.13541412 -13.12224960]
[82.63265991 -29.41456604]
[82.35417175 -45.77339935]
[83.30147552 -62.10689163]
[85.46921539 -78.32331848]
[88.84516907 -94.33161163]
[93.41033936 -110.04190063]
[99.13906097 -125.36596680]
[105.99912262 -140.21777344]
[113.95195770 -154.51391602]
[122.95288086 -168.17416382]
[132.95130920 -181.12181091]
[143.89105225 -193.28417969]
[155.71066284 -204.59298706]
[168.34375000 -214.98477173]
[181.71931458 -224.40119934]
[195.76223755 -232.78942871]
[210.39364624 -240.10238647]
[225.53135681 -246.29904175]
[241.09033203 -251.34461975]
[256.98321533 -255.21086121]
[273.12072754 -257.87606812]
[289.41223145 -259.32531738]
[305.76623535 -259.55050659]
[322.09094238 -258.55041504]
[338.29464722 -256.33071899]
[354.28637695 -252.90386963]
[369.97631836 -248.28921509]
[385.27639771 -242.51266479]
[400.10070801 -235.60670471]
[414.36599731 -227.61015320]
[422.61828613 -240.13612366]
[430.87057495 -252.66207886]
[439.12286377 -265.18804932]
[447.37515259 -277.71398926]
[455.62744141 -290.23995972]
[452.19836426 -305.66775513]
[460.75314331 -318.95654297]
[476.21630859 -322.22232056]
[489.41390991 -313.52755737]
[492.51602173 -298.03070068]
[483.68218994 -284.92575073]
[468.15341187 -281.98767090]
[459.90112305 -269.46170044]
[451.64883423 -256.93576050]
[443.39654541 -244.40979004]
[435.14425659 -231.88383484]
[426.89196777 -219.35786438]
[437.99224854 -210.94265747]
[448.53314209 -201.83633423]
[458.47174072 -192.07598877]
[467.76751709 -181.70135498]
[476.38259888 -170.75469971]
[484.28182983 -159.28060913]
[491.43307495 -147.32580566]
[497.80712891 -134.93899536]
[503.37802124 -122.17064667]
[508.12301636 -109.07275391]
[512.02282715 -95.69867706]
[515.06146240 -82.10291290]
[517.22662354 -68.34082794]
[518.50933838 -54.46850204]
[518.90447998 -40.54244614]
[518.41040039 -26.61940002]
[517.02905273 -12.75608540]
[514.76605225 0.99101239]
[511.63058472 14.56588364]
[507.63546753 27.91321564]
[502.79690552 40.97862625]
[497.13461304 53.70887756]
[490.67163086 66.05209351]
[483.43429565 77.95797729]
[475.45202637 89.37802124]
[466.75738525 100.26567841]
[457.38577271 110.57657623]
[447.37530518 120.26869965]
[436.76681519 129.30255127]
[425.60348511 137.64129639]
[413.93078613 145.25096130]
[401.79623413 152.10050964]
[389.24932861 158.16203308]
[376.34109497 163.41081238]
[363.12417603 167.82545471]
[349.65240479 171.38795471]
[335.98062134 174.08375549]
[322.16458130 175.90188599]
[308.26052856 176.83489990]
[294.32513428 176.87898254]
[280.41516113 176.03392029]
[266.58728027 174.30317688]
[252.89784241 171.69374084]
[239.40261841 168.21624756]
[226.15658569 163.88484192]
[213.21371460 158.71714783]
[200.62677002 152.73420715]
[188.44700623 145.96037292]
[176.72409058 138.42323303]
[165.50576782 130.15345764]
[154.83776855 121.18476105]
[144.76356506 111.55363464]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 45]
[2 44]
[4 42]
[5 41]
[6 40]
[7 34]
[8 33]
[9 32]
[10 31]
[16 30]
[17 29]
[18 28]
[19 27]
[20 26]
[81 98]
[82 97]
[83 96]
[84 95]
[85 94]
[86 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
