%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCACCCUCUAAAUCACCACGAUCAAAAGGAACAAGCAUCAAGCACGCAGCAAUGCAGCUCxxxxxxxxxxAAAAUCCCAAACAUAUAACUGAACUCCUCACACCCAAUUGGACCAAUCUAUCACCCUAUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[141.77403259 272.15353394]
[141.15005493 257.16650391]
[140.52607727 242.17948914]
[139.90209961 227.19247437]
[139.27812195 212.20545959]
[138.65414429 197.21844482]
[138.03016663 182.23143005]
[137.40618896 167.24440002]
[134.30786133 152.56788635]
[128.82083130 138.60749817]
[123.33380127 124.64710236]
[117.84677124 110.68671417]
[108.76477814 117.46601105]
[98.15569305 118.18862915]
[89.46688080 113.37164307]
[75.94268799 119.85980988]
[62.41849899 126.34796906]
[61.15045929 141.59065247]
[52.48035431 154.06968689]
[38.81888580 160.49078369]
[23.87761879 159.22013855]
[11.66076374 150.69874573]
[-1.86342573 157.18692017]
[-15.38761616 163.67507935]
[-22.04385757 178.27214050]
[-37.64076614 182.02926636]
[-50.21372986 172.06431580]
[-50.11784363 156.02154541]
[-37.42666626 146.20759583]
[-21.87578011 150.15089417]
[-8.35159111 143.66271973]
[5.17259884 137.17456055]
[6.17157078 122.31294250]
[14.53089905 109.86394501]
[28.08869934 103.22674561]
[43.24787140 104.27378845]
[55.93033218 112.82378387]
[69.45452118 106.33561707]
[82.97871399 99.84745026]
[87.59173584 86.57379913]
[101.36295319 80.50576019]
[116.10695648 86.83645630]
[119.50993347 72.22756195]
[120.91223907 57.29325485]
[120.28826141 42.30623627]
[111.31918335 32.97834778]
[111.14273834 20.44089127]
[119.30622101 11.45952606]
[118.99416351 -3.53722739]
[118.68210602 -18.53398132]
[113.78055573 -32.71054077]
[104.76303101 -44.69737244]
[95.74549866 -56.68420410]
[83.06731415 -59.27603531]
[75.80820465 -69.49974060]
[77.43424225 -81.52735138]
[68.66803741 -93.69918823]
[59.90182877 -105.87102509]
[44.73435211 -112.10638428]
[42.81906509 -128.39331055]
[56.12624741 -137.97718811]
[70.96661377 -130.99896240]
[72.07366180 -114.63722992]
[80.83987427 -102.46539307]
[89.60607910 -90.29355621]
[105.95823669 -84.00016022]
[107.73233032 -65.70173645]
[116.74986267 -53.71490097]
[125.76738739 -41.72806931]
[124.55793762 -56.67922974]
[126.23313904 -71.58539581]
[130.73101807 -85.89514923]
[137.88519287 -99.07913971]
[147.43103027 -110.64967346]
[159.01538086 -120.17871857]
[172.20973206 -127.31378937]
[186.52598572 -131.79092407]
[201.43455505 -133.44451904]
[216.38395691 -132.21339417]
[230.82115173 -128.14311218]
[244.21209717 -121.38420868]
[256.06143188 -112.18673706]
[265.93078613 -100.89092255]
[273.45513916 -87.91461945]
[278.35607910 -73.73785400]
[280.45236206 -58.88505936]
[279.66641235 -43.90566254]
[276.02731323 -29.35379219]
[269.66967773 -15.76775074]
[260.82867432 -3.65011716]
[249.83140564 6.55085087]
[237.08464050 14.45779705]
[223.05990601 19.77822685]
[208.27601624 22.31532478]
[193.27987671 21.97523880]
[178.62620544 18.77054977]
[164.85708618 12.81980610]
[152.48187256 4.34313726]
[141.95832825 -6.34588432]
[133.67886353 -18.84603691]
[133.99092102 -3.84928370]
[134.30297852 11.14747047]
[144.19705200 25.60800552]
[135.27526855 41.68225861]
[135.89924622 56.66927719]
[143.88702393 43.97299957]
[156.28489685 35.52949524]
[171.02462769 32.74732971]
[185.64729309 36.09063339]
[197.71350098 45.00166702]
[205.21035767 57.99386597]
[206.88719177 72.89984894]
[202.46427917 87.23294830]
[192.67947388 98.60209656]
[179.16510010 105.11066437]
[164.17562866 105.67286682]
[150.21166992 100.19491577]
[139.60272217 89.59066772]
[134.11882019 75.63053894]
[130.71585083 90.23943329]
[131.80715942 105.19968414]
[137.29418945 119.16007233]
[142.78121948 133.12045288]
[148.26824951 147.08085632]
[151.13433838 132.35720825]
[158.78082275 119.45250702]
[170.31861877 109.86714935]
[184.40626526 104.71562958]
[199.40580750 104.59690094]
[213.57322693 109.52477264]
[225.26132202 118.92628479]
[233.11111450 131.70832825]
[236.20993042 146.38476562]
[234.19744873 161.24914551]
[227.30766296 174.57321167]
[216.34165955 184.80780029]
[202.57444763 190.76293945]
[187.60670471 191.74621582]
[173.17874146 187.64332581]
[160.96807861 178.93128967]
[152.39320374 166.62042236]
[153.01718140 181.60745239]
[153.64115906 196.59446716]
[154.26513672 211.58148193]
[154.88911438 226.56849670]
[155.51309204 241.55551147]
[156.13706970 256.54254150]
[156.76104736 271.52954102]
[163.46102905 287.10345459]
[150.35050964 297.85287476]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 148]
[2 147]
[3 146]
[4 145]
[5 144]
[6 143]
[7 142]
[8 141]
[9 124]
[10 123]
[11 122]
[12 121]
[15 39]
[16 38]
[17 37]
[22 32]
[23 31]
[24 30]
[42 120]
[43 119]
[44 105]
[45 104]
[48 102]
[49 101]
[50 100]
[51 69]
[52 68]
[53 67]
[56 65]
[57 64]
[58 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
