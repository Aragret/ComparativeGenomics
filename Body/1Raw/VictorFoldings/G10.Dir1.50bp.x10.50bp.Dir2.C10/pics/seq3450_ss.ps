%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACUCUUCACCAAAGAGCCCCUAAAACCCGCCACAUCUACCAUCACCCUCUACAUCACCGxxxxxxxxxxCCUCACCACUACAAUCUUCCUAGGAACAACAUAUGACGCACUCUCCCCUGAACUCUACACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[166.33300781 56.39358521]
[154.63337708 65.78074646]
[149.54850769 79.78050995]
[133.94264221 82.38190460]
[122.24301910 91.76906586]
[110.54339600 101.15622711]
[99.34762573 111.13895416]
[88.68600464 121.69024658]
[78.02437592 132.24153137]
[67.36274719 142.79283142]
[65.21991730 149.15803528]
[60.81982422 152.88233948]
[56.03128433 153.54972839]
[44.93996811 163.64837646]
[33.84865189 173.74702454]
[22.75733566 183.84567261]
[11.66602135 193.94432068]
[9.48201656 209.83801270]
[-4.37899113 217.91589355]
[-19.28402328 211.98127747]
[-23.79921532 196.58671570]
[-14.46089745 183.54159546]
[1.56737137 182.85301208]
[12.65868664 172.75434875]
[23.75000191 162.65570068]
[34.84131622 152.55705261]
[45.93263245 142.45840454]
[56.81145859 132.13119507]
[67.47308350 121.57991028]
[78.13471222 111.02861786]
[88.79633331 100.47733307]
[74.11033630 97.42424011]
[67.15116882 84.13627625]
[73.00543213 70.32585907]
[87.39412689 66.08728790]
[99.80028534 74.51861572]
[101.15623474 89.45660400]
[112.85585785 80.06944275]
[124.55548096 70.68228149]
[130.47718811 56.01108551]
[145.24621582 54.08112335]
[156.94584656 44.69396210]
[148.23318481 32.47877502]
[140.22555542 19.79022980]
[132.94860840 6.66897631]
[126.42566681 -6.84295607]
[120.67760468 -20.70228386]
[115.72283936 -34.86461258]
[111.57724762 -49.28457260]
[108.25410461 -63.91597748]
[105.76406860 -78.71195221]
[104.11509705 -93.62510681]
[103.31248474 -108.60765839]
[103.35879517 -123.61162567]
[104.25388336 -138.58894348]
[105.99488831 -153.49163818]
[108.57622528 -168.27195740]
[111.98962402 -182.88256836]
[116.22415924 -197.27665710]
[121.26625061 -211.40812683]
[127.09976959 -225.23170471]
[133.70600891 -238.70310974]
[141.06381226 -251.77919006]
[149.14961243 -264.41806030]
[157.93751526 -276.57922363]
[167.39936829 -288.22375488]
[177.50485229 -299.31430054]
[188.22158813 -309.81536865]
[199.51527405 -319.69332886]
[211.34971619 -328.91653442]
[223.68699646 -337.45541382]
[236.48762512 -345.28262329]
[249.71055603 -352.37310791]
[263.31347656 -358.70416260]
[277.25277710 -364.25546265]
[291.48382568 -369.00927734]
[305.96099854 -372.95034790]
[320.63796997 -376.06604004]
[335.46771240 -378.34640503]
[350.40270996 -379.78411865]
[365.39514160 -380.37457275]
[380.39694214 -380.11587524]
[395.36010742 -379.00888062]
[410.23663330 -377.05712891]
[424.97894287 -374.26681519]
[439.53979492 -370.64697266]
[453.87249756 -366.20910645]
[467.93118286 -360.96749878]
[481.67080688 -354.93890381]
[495.04736328 -348.14263916]
[508.01797485 -340.60046387]
[520.54113770 -332.33657837]
[532.57666016 -323.37741089]
[544.08612061 -313.75170898]
[555.03253174 -303.49023438]
[565.38085938 -292.62594604]
[575.09796143 -281.19357300]
[584.15270996 -269.22976685]
[592.51611328 -256.77282715]
[600.16131592 -243.86271667]
[607.06396484 -230.54074097]
[613.20178223 -216.84957886]
[618.55523682 -202.83308411]
[623.10717773 -188.53619385]
[626.84289551 -174.00465393]
[629.75054932 -159.28504944]
[631.82073975 -144.42451477]
[633.04693604 -129.47067261]
[633.42510986 -114.47138977]
[632.95410156 -99.47474670]
[631.63543701 -84.52877045]
[629.47326660 -69.68133545]
[626.47460938 -54.98000336]
[622.64898682 -40.47187042]
[618.00872803 -26.20340919]
[612.56860352 -12.22032642]
[606.34613037 1.43258679]
[599.36120605 14.71159458]
[591.63623047 27.57416153]
[583.19592285 39.97908401]
[574.06726074 51.88662338]
[564.27960205 63.25864029]
[553.86425781 74.05870056]
[542.85455322 84.25221252]
[531.28576660 93.80652618]
[519.19500732 102.69102478]
[506.62094116 110.87725830]
[493.60391235 118.33900452]
[480.18554688 125.05235291]
[466.40887451 130.99580383]
[452.31802368 136.15032959]
[437.95812988 140.49938965]
[423.37518311 144.02908325]
[408.61587524 146.72807312]
[393.72753906 148.58773804]
[378.75781250 149.60212708]
[363.75469971 149.76795959]
[348.76623535 149.08473206]
[333.84042358 147.55462646]
[319.02505493 145.18252563]
[304.36764526 141.97605896]
[289.91513062 137.94546509]
[275.71377563 133.10368347]
[261.80911255 127.46621704]
[248.24563599 121.05111694]
[235.06681824 113.87892914]
[222.31489563 105.97264099]
[210.03068542 97.35757446]
[198.25354004 88.06131744]
[187.02120972 78.11366272]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 42]
[2 41]
[4 39]
[5 38]
[6 37]
[7 31]
[8 30]
[9 29]
[10 28]
[13 27]
[14 26]
[15 25]
[16 24]
[17 23]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
