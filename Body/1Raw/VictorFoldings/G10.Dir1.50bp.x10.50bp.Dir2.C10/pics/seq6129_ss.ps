%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUAAUCAACUGGCUUCAAUCUACUUCUCCCGCCGCCGGGAAAAAAGGCGGGAGAAGCCCxxxxxxxxxxACAACCACCCACAGCCUAAUUAUUAGCAUCAUCCCUCUACUAUUUUUUAACCAAAUCAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[224.56723022 133.76225281]
[210.34045410 129.00843811]
[196.11367798 124.25463104]
[181.59034729 127.55954742]
[170.95365906 115.84752655]
[156.72688293 111.09371185]
[141.96083069 108.45484161]
[126.96813202 107.98680115]
[111.97544098 107.51876068]
[98.25538635 113.58177185]
[88.50772858 124.98279572]
[78.76007843 136.38381958]
[83.30273438 151.12721252]
[79.13137054 165.97993469]
[67.57705688 176.20252991]
[52.32672882 178.53298950]
[38.24671555 172.22770691]
[29.82989502 159.29862976]
[29.76204491 143.87142944]
[38.06481552 130.86882019]
[52.08882523 124.43992615]
[67.35906219 126.63616180]
[77.10671234 115.23514557]
[86.85436249 103.83412170]
[85.61180115 96.43776703]
[71.59149170 101.76982880]
[60.19440079 111.52207947]
[45.33507156 109.47260284]
[37.00344467 96.99926758]
[40.80087662 82.48791504]
[54.17435074 75.69452667]
[68.13367462 81.18712616]
[83.12668610 81.64505768]
[81.88412476 74.24871063]
[68.94606781 66.65879822]
[56.00801468 59.06888962]
[43.06995773 51.47898102]
[30.13190269 43.88907242]
[17.19384575 36.29916382]
[4.25579023 28.70925713]
[-8.68226528 21.11934853]
[-21.62032127 13.52944088]
[-34.55837631 5.93953228]
[-47.49643326 -1.65037584]
[-60.13793945 6.90269899]
[-75.23983002 9.11531448]
[-89.80361176 4.54815292]
[-100.93763733 -5.89197159]
[-106.43124390 -20.13216400]
[-105.19365692 -35.34502411]
[-97.47061157 -48.51002884]
[-84.79552460 -57.01325607]
[-69.68503571 -59.16638565]
[-55.13935471 -54.54190826]
[-44.04652405 -44.05801773]
[-38.60904312 -29.79630089]
[-39.90652466 -14.58843136]
[-26.96846962 -6.99852371]
[-14.03041363 0.59138477]
[-1.09235740 8.18129349]
[11.84569836 15.77120113]
[24.78375435 23.36110878]
[37.72180939 30.95101738]
[50.65986633 38.54092789]
[63.59792328 46.13083267]
[76.53598022 53.72074127]
[89.47403717 61.31064987]
[112.44348145 92.52606201]
[127.43617249 92.99411011]
[142.42887878 93.46215057]
[130.21569824 84.75363159]
[122.17437744 72.09119415]
[119.48565674 57.33413696]
[122.54434204 42.64929962]
[130.90130615 30.19293022]
[143.32945251 21.79405403]
[158.00390625 18.68591881]
[172.76994324 21.32490730]
[185.45938110 29.32352638]
[194.20899963 41.50729752]
[197.73402405 56.08722305]
[195.51687622 70.92245483]
[187.88308716 83.83467865]
[175.95359802 92.92791748]
[161.48069763 96.86692810]
[175.70747375 101.62074280]
[191.24839783 98.65585327]
[200.86749268 110.02784729]
[215.09426880 114.78166199]
[229.32104492 119.53547668]
[220.86155701 107.14850616]
[224.30116272 92.54819489]
[237.40048218 85.24014282]
[251.63116455 89.98229218]
[257.72824097 103.68724060]
[251.72250366 117.43202209]
[264.81567383 110.11291504]
[277.90881348 102.79380798]
[291.00198364 95.47470856]
[301.87731934 82.46844482]
[317.38589478 89.31829834]
[315.09695435 106.11701965]
[298.32107544 108.56786346]
[285.22790527 115.88696289]
[272.13476562 123.20606995]
[259.04162598 130.52517700]
[273.93020630 132.35000610]
[288.45642090 136.09016418]
[302.37496948 141.68244934]
[315.45080566 149.03245544]
[327.46310425 158.01605225]
[338.20898438 168.48150635]
[347.50701904 180.25210571]
[355.20013428 193.12905884]
[361.15844727 206.89489746]
[365.28131104 221.31716919]
[367.49911499 236.15231323]
[367.77441406 251.14978027]
[366.10253906 266.05633545]
[362.51171875 280.62017822]
[357.06262207 294.59542847]
[349.84725952 307.74603271]
[340.98748779 319.84994507]
[330.63290405 330.70269775]
[318.95840454 340.12109375]
[306.16113281 347.94601440]
[292.45718384 354.04534912]
[278.07800293 358.31607056]
[263.26638794 360.68609619]
[248.27255249 361.11535645]
[233.34962463 359.59661865]
[218.74966431 356.15551758]
[204.71920776 350.85021973]
[191.49520874 343.77023315]
[179.30099487 335.03521729]
[168.34246826 324.79260254]
[158.80471802 313.21542358]
[150.84881592 300.49914551]
[144.60910034 286.85855103]
[140.19096375 272.52395630]
[137.66900635 257.73748779]
[137.08583069 242.74884033]
[138.45126343 227.81111145]
[141.74226379 213.17658997]
[146.90324402 199.09240723]
[153.84706116 185.79640198]
[162.45643616 173.51313782]
[172.58598328 162.45004272]
[184.06463623 152.79393005]
[196.69854736 144.70787048]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 90]
[2 89]
[3 88]
[5 86]
[6 85]
[7 70]
[8 69]
[9 68]
[10 24]
[11 23]
[12 22]
[34 67]
[35 66]
[36 65]
[37 64]
[38 63]
[39 62]
[40 61]
[41 60]
[42 59]
[43 58]
[44 57]
[96 106]
[97 105]
[98 104]
[99 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
