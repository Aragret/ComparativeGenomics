%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCACACCCACCCAAGAACAGGGUUUGUUAAGAUGGCAGAGCCCGGUAAUCGCAUAAAACUxxxxxxxxxxACAGCAAUCAACCCUCAACUAUCACACAUCAACUGCAACUCCAAAGCCACCCCUCACCCACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 293.11312866]
[92.50000000 278.11312866]
[92.50000000 263.11312866]
[92.50000000 248.11314392]
[92.50000000 233.11314392]
[92.50000000 218.11314392]
[92.50000000 203.11314392]
[92.50000000 188.11314392]
[92.50000000 173.11314392]
[92.50000000 158.11314392]
[77.99382782 154.30575562]
[64.92930603 146.94075012]
[54.16230392 136.50059509]
[41.32865143 144.26573181]
[33.52695465 158.02958679]
[18.63237953 157.99833679]
[5.79872656 165.76347351]
[-7.03492737 173.52861023]
[-19.86858177 181.29374695]
[-18.87476921 196.56695557]
[-25.10320282 210.54783630]
[-37.12263107 220.02369690]
[-52.17107773 222.81704712]
[-66.79051971 218.28599548]
[-77.62152100 207.47174072]
[-82.17519379 192.85932922]
[-79.40512848 177.80657959]
[-69.94788361 165.77250671]
[-55.97665024 159.52244568]
[-40.70191956 160.49261475]
[-27.63371658 168.46008301]
[-14.80006313 160.69496155]
[-1.96640885 152.92982483]
[10.86724472 145.16468811]
[17.75099373 131.95622253]
[33.56351471 131.43206787]
[46.39716721 123.66693115]
[41.63534927 105.19183350]
[43.06129456 86.16630554]
[50.52381897 68.60740662]
[63.23175430 54.37672043]
[79.83782196 44.98296356]
[98.58146667 41.42205811]
[117.47550201 44.07152557]
[123.74490356 30.44454575]
[130.01431274 16.81756783]
[136.28372192 3.19058776]
[123.17675781 -4.11940718]
[110.67568970 -12.42311668]
[98.85569000 -21.67059898]
[87.78784943 -31.80624008]
[77.53873444 -42.76908112]
[68.16997528 -54.49319077]
[59.73793030 -66.90805817]
[52.29330444 -79.93901062]
[45.88086700 -93.50769043]
[40.53919220 -107.53248596]
[36.30040359 -121.92904663]
[33.18999100 -136.61079407]
[31.22666359 -151.48942566]
[30.42222786 -166.47544861]
[30.78152084 -181.47875977]
[32.30238724 -196.40910339]
[34.97567368 -211.17671204]
[38.78530502 -225.69273376]
[43.70837021 -239.86988831]
[49.71525955 -253.62290955]
[56.76984406 -266.86907959]
[64.82970428 -279.52874756]
[73.84635925 -291.52575684]
[83.76558685 -302.78796387]
[94.52772522 -313.24761963]
[106.06804657 -322.84185791]
[118.31715393 -331.51293945]
[131.20137024 -339.20874023]
[144.64321899 -345.88293457]
[158.56184387 -351.49545288]
[172.87355042 -356.01245117]
[187.49224854 -359.40682983]
[202.33003235 -361.65817261]
[217.29766846 -362.75289917]
[232.30511475 -362.68447876]
[247.26213074 -361.45327759]
[262.07876587 -359.06671143]
[276.66589355 -355.53912354]
[290.93582153 -350.89178467]
[304.80267334 -345.15255737]
[318.18310547 -338.35604858]
[330.99658203 -330.54306030]
[343.16610718 -321.76062012]
[354.61843872 -312.06152344]
[365.28472900 -301.50415039]
[375.10083008 -290.15194702]
[384.00769043 -278.07318115]
[391.95175171 -265.34054565]
[398.88525391 -252.03057861]
[404.76644897 -238.22334290]
[409.55999756 -224.00187683]
[413.23709106 -209.45172119]
[415.77557373 -194.66035461]
[417.16018677 -179.71675110]
[417.38265991 -164.71080017]
[416.44155884 -149.73272705]
[414.34262085 -134.87261963]
[411.09841919 -120.21984863]
[406.72851562 -105.86254883]
[401.25915527 -91.88705444]
[394.72323608 -78.37742615]
[387.16006470 -65.41490936]
[378.61514282 -53.07746506]
[369.13983154 -41.43928909]
[358.79116821 -30.57038116]
[347.63134766 -20.53610420]
[335.72750854 -11.39680958]
[323.15121460 -3.20746112]
[309.97811890 3.98268867]
[296.28747559 10.13039684]
[282.16159058 15.19868946]
[267.68542480 19.15708542]
[252.94604492 21.98177719]
[238.03208923 23.65577698]
[223.03324890 24.16901779]
[208.03974915 23.51841354]
[193.14175415 21.70787430]
[178.42886353 18.74829102]
[163.98956299 14.65746307]
[149.91069031 9.45999336]
[143.64129639 23.08697128]
[137.37188721 36.71395111]
[131.10247803 50.34093094]
[139.86749268 57.05852890]
[147.21644592 65.30137634]
[152.88830566 74.77670288]
[156.68159485 85.14793396]
[158.46160889 96.04670715]
[158.16508484 107.08589935]
[155.80258179 117.87340546]
[151.45802307 128.02606201]
[145.28569031 137.18324280]
[137.50485229 145.01969910]
[128.39186096 151.25709534]
[118.27040100 155.67387390]
[107.50000000 158.11314392]
[107.50000000 173.11314392]
[107.50000000 188.11314392]
[107.50000000 203.11314392]
[107.50000000 218.11314392]
[107.50000000 233.11314392]
[107.50000000 248.11314392]
[107.50000000 263.11312866]
[107.50000000 278.11312866]
[107.50000000 293.11312866]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[13 37]
[14 36]
[16 34]
[17 33]
[18 32]
[19 31]
[44 130]
[45 129]
[46 128]
[47 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
