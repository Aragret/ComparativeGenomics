%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAGCCCUUCUAAACGCUAAUCCAAGCCUCACCCCACUACUAGGCCUCCUCCUAGCAGCAGxxxxxxxxxxCAACAUACUCGGAUUCUACCCUAGCAUCACACACCGCACAAUCCCCUAUCUAGGCCUUCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-6.28017187 187.54814148]
[-18.36016083 196.44049072]
[-30.44014740 205.33283997]
[-42.52013779 214.22518921]
[-49.04701233 228.63734436]
[-63.88355255 229.95127869]
[-75.96353912 238.84362793]
[-88.04352570 247.73597717]
[-100.12351227 256.62832642]
[-106.65039062 271.04049683]
[-121.48693085 272.35440063]
[-132.98873901 281.98294067]
[-143.86755371 292.31015015]
[-154.74638367 302.63732910]
[-151.08036804 317.55230713]
[-155.37838745 332.29754639]
[-166.48429871 342.90670776]
[-181.41067505 346.52597046]
[-196.14237976 342.18173218]
[-206.71667480 331.04263306]
[-210.28912354 316.10498047]
[-205.89875793 301.38696289]
[-194.72654724 290.84762573]
[-179.77777100 287.32202148]
[-165.07359314 291.75851440]
[-154.19476318 281.43130493]
[-143.31593323 271.10409546]
[-158.19535828 269.20596313]
[-167.52598572 257.46118164]
[-166.01031494 242.53796387]
[-154.50888062 232.90898132]
[-139.55166626 234.04115295]
[-129.63069153 245.29167175]
[-130.37927246 260.27441406]
[-124.71644592 246.49829102]
[-109.01586914 244.54832458]
[-96.93587494 235.65597534]
[-84.85588837 226.76362610]
[-72.77590179 217.87127686]
[-67.11306763 204.09515381]
[-51.41248703 202.14520264]
[-39.33249664 193.25285339]
[-27.25251007 184.36048889]
[-15.17252159 175.46813965]
[-30.75284767 143.17225647]
[-37.46624756 107.94866180]
[-34.85746002 72.18604279]
[-23.10339355 38.30960464]
[-3.00114703 8.61666203]
[-13.66277313 -1.93462861]
[-24.32439995 -12.48591900]
[-34.98602676 -23.03720856]
[-45.64765167 -33.58850098]
[-61.44843674 -33.25567627]
[-72.79863739 -44.25333405]
[-72.96438599 -60.05675507]
[-61.84734344 -71.29004669]
[-46.04305649 -71.28870392]
[-34.92792511 -60.05351639]
[-35.09636307 -44.25012589]
[-24.43473625 -33.69883347]
[-13.77310944 -23.14754486]
[-3.11148310 -12.59625530]
[7.55014324 -2.04496455]
[13.91636276 -7.46980190]
[20.60020828 -12.49810600]
[27.57701492 -17.11132240]
[34.82104111 -21.29243279]
[42.30556107 -25.02600861]
[50.00295639 -28.29827118]
[57.88483047 -31.09715080]
[65.92209625 -33.41231918]
[74.08509064 -35.23523331]
[82.34371185 -36.55916977]
[90.66748047 -37.37923813]
[99.02568054 -37.69241714]
[107.38748169 -37.49754715]
[115.72201538 -36.79535294]
[123.99855042 -35.58842468]
[132.18652344 -33.88121033]
[140.25575256 -31.68001175]
[148.17643738 -28.99295044]
[155.91937256 -25.82994270]
[163.45597839 -22.20265770]
[170.75845337 -18.12447929]
[177.79983521 -13.61045551]
[184.55416870 -8.67724037]
[190.99652100 -3.34303737]
[197.10311890 2.37247252]
[202.85144043 8.44820023]
[208.22026062 14.86172867]
[213.18978882 21.58939362]
[225.96714783 13.73196793]
[238.74450684 5.87454224]
[246.44679260 -7.94519663]
[261.34121704 -8.02128601]
[274.11856079 -15.87871170]
[286.89593506 -23.73613739]
[297.22082520 -37.18354034]
[313.00091553 -30.98474693]
[311.41275024 -14.10535145]
[294.75335693 -10.95878029]
[281.97598267 -3.10135436]
[269.19863892 4.75607109]
[262.41024780 18.01379395]
[246.60192871 18.65189934]
[233.82456970 26.50932503]
[221.04721069 34.36675262]
[225.17156982 42.62203979]
[228.73370361 51.13504028]
[231.71763611 59.86751938]
[234.10995483 68.78025818]
[235.89990234 77.83321381]
[237.07946777 86.98574066]
[237.64332581 96.19671631]
[237.58895874 105.42477417]
[236.91661072 114.62847137]
[235.62930298 123.76645660]
[233.73280334 132.79769897]
[231.23564148 141.68164062]
[228.14903259 150.37834167]
[224.48683167 158.84878540]
[220.26550293 167.05491638]
[215.50398254 174.95985413]
[210.22369385 182.52810669]
[204.44831848 189.72569275]
[198.20382690 196.52026367]
[191.51823425 202.88130188]
[184.42158508 208.78025818]
[176.94577026 214.19062805]
[169.12432861 219.08810425]
[160.99243164 223.45069885]
[152.58657837 227.25880432]
[143.94453430 230.49531555]
[135.10510254 233.14572144]
[126.10800171 235.19808960]
[116.99363708 236.64320374]
[107.80294037 237.47459412]
[98.57720184 237.68850708]
[89.35785675 237.28399658]
[80.18630219 236.26286316]
[71.10374451 234.62969971]
[62.15097809 232.39184570]
[53.36821365 229.55935669]
[44.79489136 226.14494324]
[36.46952820 222.16394043]
[28.42951012 217.63424683]
[20.71095467 212.57618713]
[13.34852886 207.01249695]
[6.37530041 200.96813965]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 44]
[2 43]
[3 42]
[4 41]
[6 39]
[7 38]
[8 37]
[9 36]
[11 34]
[12 27]
[13 26]
[14 25]
[49 64]
[50 63]
[51 62]
[52 61]
[53 60]
[92 108]
[93 107]
[94 106]
[96 104]
[97 103]
[98 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
