%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUUUACCCUAUAGCACCCCCUCUACCCCCUCUAGAGCCCACUGUAAAGCUAACUUAGCAUxxxxxxxxxxAGGAUACCAACAAACCUACCCACCCUUAACAGUACAUAGUACAUAAAGCCAUUUACCGUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-54.59820175 250.90483093]
[-65.68951416 261.00347900]
[-76.78083038 271.10214233]
[-87.87214661 281.20077515]
[-98.96346283 291.29943848]
[-109.62509155 301.85070801]
[-119.83856964 312.83639526]
[-130.05204773 323.82205200]
[-140.26553345 334.80770874]
[-150.47900391 345.79336548]
[-143.82066345 359.43267822]
[-142.54293823 374.55657959]
[-146.81861877 389.11965942]
[-156.06945801 401.15237427]
[-169.04437256 409.02740479]
[-183.98858643 411.67974854]
[-198.88102722 408.75067139]
[-211.70762634 400.63629150]
[-220.73367310 388.43405151]
[-224.73847961 373.79415894]
[-223.18041992 358.69659424]
[-216.27023315 345.18313599]
[-204.94242859 335.08135986]
[-190.72903442 329.75750732]
[-175.55226135 329.93151855]
[-161.46467590 335.57989502]
[-151.25119019 324.59423828]
[-141.03771973 313.60858154]
[-130.82423401 302.62289429]
[-120.61075592 291.63723755]
[-120.61484528 288.77239990]
[-119.44703674 285.73428345]
[-117.03573608 282.98336792]
[-113.48238373 280.99722290]
[-109.06211090 280.20809937]
[-97.97079468 270.10946655]
[-86.87947845 260.01080322]
[-75.78816986 249.91217041]
[-64.69685364 239.81350708]
[-76.66071320 224.35377502]
[-87.17816162 207.87590027]
[-96.16306305 190.51477051]
[-103.54187775 172.41253662]
[-109.25417328 153.71743774]
[-113.25318909 134.58251953]
[-115.50617218 115.16444397]
[-115.99468994 95.62221527]
[-114.71473694 76.11582947]
[-111.67678833 56.80499649]
[-106.90572357 37.84782791]
[-100.44060516 19.39953232]
[-92.33436584 1.61115980]
[-82.65337372 -15.37164783]
[-71.47689056 -31.40984154]
[-58.89643478 -46.37210846]
[-45.01500320 -60.13594437]
[-29.94624901 -72.58865356]
[-13.81355095 -83.62828827]
[-21.26846123 -96.64459229]
[-28.72337151 -109.66090393]
[-36.17828369 -122.67721558]
[-49.29697037 -133.41668701]
[-42.60881424 -148.99568176]
[-25.78719139 -146.88159180]
[-23.16197205 -130.13212585]
[-15.70706177 -117.11581421]
[-8.25215149 -104.09950256]
[-0.79724151 -91.08319855]
[8.77884674 -95.83557892]
[18.57830620 -100.10842133]
[28.57714081 -103.89126587]
[38.75086594 -107.17484283]
[49.07456970 -109.95111847]
[59.52297592 -112.21329498]
[70.07049561 -113.95582581]
[80.69129944 -115.17445374]
[91.35939026 -115.86618805]
[102.04863739 -116.02933502]
[112.73286438 -115.66349792]
[123.38591003 -114.76957703]
[133.98170471 -113.34974670]
[144.49427795 -111.40750122]
[154.89790344 -108.94758606]
[165.16709900 -105.97602081]
[175.27671814 -102.50009155]
[185.20201111 -98.52830505]
[194.91868591 -94.07038879]
[204.40292358 -89.13725281]
[213.63151550 -83.74098969]
[222.58186340 -77.89479828]
[231.23204041 -71.61300659]
[239.56088257 -64.91098785]
[247.54797363 -57.80515671]
[255.17378235 -50.31291199]
[262.41961670 -42.45259857]
[269.26773071 -34.24346542]
[275.70135498 -25.70561600]
[281.70477295 -16.85995293]
[287.26324463 -7.72813988]
[292.36315918 1.66746509]
[296.99203491 11.30385399]
[301.13854980 21.15743065]
[304.79257202 31.20406723]
[307.94506836 41.41916275]
[310.58840942 51.77770233]
[312.71609497 62.25432587]
[314.32290649 72.82337189]
[315.40487671 83.45896912]
[315.95944214 94.13506317]
[315.98513794 104.82552338]
[315.48199463 115.50416565]
[314.45120239 126.14485168]
[329.26895142 128.47595215]
[344.08673096 130.80705261]
[358.90447998 133.13815308]
[375.49081421 129.62678528]
[383.45651245 144.59288025]
[371.28042603 156.39030457]
[356.57336426 147.95591736]
[341.75561523 145.62481689]
[326.93786621 143.29371643]
[312.12008667 140.96260071]
[308.59094238 156.23776245]
[303.96334839 171.21676636]
[298.26162720 185.82073975]
[291.51583862 199.97276306]
[283.76150513 213.59831238]
[275.03945923 226.62565613]
[265.39566040 238.98616028]
[254.88082886 250.61474609]
[243.55038452 261.45016479]
[231.46398926 271.43539429]
[218.68528748 280.51779175]
[205.28158569 288.64956665]
[191.32344055 295.78790283]
[176.88438416 301.89517212]
[162.04043579 306.93927002]
[146.86978149 310.89355469]
[131.45230103 313.73727417]
[115.86918640 315.45541382]
[100.20250702 316.03897095]
[84.53475952 315.48480225]
[68.94844818 313.79586792]
[53.52566910 310.98104858]
[38.34762192 307.05520630]
[23.49424934 302.03897095]
[9.04376316 295.95877075]
[-4.92773438 288.84661865]
[-18.34666824 280.73995972]
[-31.14237595 271.68154907]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 39]
[2 38]
[3 37]
[4 36]
[5 35]
[6 30]
[7 29]
[8 28]
[9 27]
[10 26]
[58 68]
[59 67]
[60 66]
[61 65]
[112 122]
[113 121]
[114 120]
[115 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
