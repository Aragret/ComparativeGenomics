%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAAACUCACCUGAGUUGUAAAAAACUCCAGUUGACACAAAAUAGACUACGAAAGUGGCUUxxxxxxxxxxUACUCUUUCACCCACAGCACCAAUCCUACCUCCAUCGCUAACCCCACUAAAACACUCACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[116.32859802 267.84753418]
[116.32859802 252.84753418]
[116.32859802 237.84753418]
[116.32859802 222.84753418]
[116.32859802 207.84753418]
[116.32859802 192.84753418]
[116.32859802 177.84753418]
[116.32859802 162.84753418]
[116.32859802 147.84753418]
[116.32859802 132.84753418]
[109.43740845 129.88755798]
[95.65502930 123.96759033]
[88.76383972 121.00761414]
[77.88501740 131.33482361]
[67.00618744 141.66201782]
[56.12736511 151.98922729]
[45.24853897 162.31643677]
[41.11501694 178.18609619]
[25.23502731 182.27972412]
[13.94453621 170.38616943]
[18.85823631 154.74047852]
[34.92133331 151.43760681]
[45.80015945 141.11039734]
[56.67898178 130.78320312]
[67.55780792 120.45599365]
[78.43663025 110.12878418]
[70.98171997 97.11248016]
[56.56950760 101.27036285]
[47.58689117 114.56292725]
[31.58306313 115.68412018]
[20.83479309 103.77385712]
[23.58723259 87.96868134]
[37.72894669 80.39296722]
[52.41162109 86.85814667]
[66.82383728 82.70026398]
[68.07070923 67.75217438]
[54.54652023 61.26400757]
[36.25597763 63.11763763]
[26.87411118 48.31964493]
[13.21786976 42.11423874]
[-0.43837118 35.90883255]
[-11.80502701 46.04387283]
[-26.31324959 50.67327118]
[-41.44940567 48.99496078]
[-54.59105682 41.29971313]
[-63.46134186 28.92078018]
[-66.52342224 14.00288773]
[-63.24678040 -0.86935163]
[-54.19911194 -13.11923122]
[-40.94797897 -20.62438583]
[-25.78921890 -22.08450317]
[-11.34918308 -17.24660683]
[-0.12969260 -6.94889164]
[5.92540789 7.02449894]
[5.76703596 22.25259209]
[19.42327690 28.45799828]
[33.07951736 34.66340637]
[44.55365753 30.70721626]
[56.00375748 35.81741714]
[61.03468704 47.73981857]
[74.55887604 54.22798538]
[121.65673065 64.76636505]
[130.32447815 101.17613983]
[141.41578674 91.07749176]
[152.50709534 80.97884369]
[163.59841919 70.88019562]
[174.68972778 60.78154373]
[165.84005737 48.65181351]
[158.35372925 35.63635254]
[152.31852722 21.88776588]
[147.80522156 7.56724501]
[144.86672974 -7.15730762]
[143.53747559 -22.11325455]
[143.83308411 -37.12524414]
[145.75006104 -52.01727295]
[149.26593018 -66.61473083]
[154.33949280 -80.74648285]
[160.91123962 -94.24682617]
[168.90412903 -106.95748901]
[178.22445679 -118.72943878]
[188.76293945 -129.42465210]
[200.39601135 -138.91773987]
[212.98728943 -147.09739685]
[226.38916016 -153.86773682]
[240.44447327 -159.14935303]
[254.98843384 -162.88034058]
[269.85052490 -165.01693726]
[284.85653687 -165.53411865]
[299.83047485 -164.42581177]
[314.59680176 -161.70498657]
[328.98239136 -157.40357971]
[342.81857300 -151.57200623]
[355.94311523 -144.27864075]
[368.20217896 -135.60897827]
[379.45199585 -125.66469574]
[389.56066895 -114.56236267]
[398.40969849 -102.43215179]
[405.89532471 -89.41629028]
[411.92977905 -75.66737366]
[416.44232178 -61.34661484]
[419.38003540 -46.62190247]
[420.70846558 -31.66588402]
[420.41204834 -16.65390968]
[418.49426270 -1.76198685]
[414.97763062 12.83528423]
[409.90328979 26.96675873]
[403.33081055 40.46675110]
[395.33724976 53.17698288]
[386.01629639 64.94843292]
[375.47723389 75.64308167]
[363.84365845 85.13554382]
[351.25192261 93.31452942]
[337.84970093 100.08413696]
[323.79409790 105.36499786]
[309.24993896 109.09519958]
[294.38772583 111.23101044]
[279.38168335 111.74737549]
[264.40780640 110.63825989]
[249.64163208 107.91664886]
[235.25628662 103.61446381]
[221.42041016 97.78214264]
[208.29624939 90.48806763]
[196.03765869 81.81775665]
[184.78837585 71.87285614]
[173.69706726 81.97151184]
[162.60575867 92.07015991]
[151.51443481 102.16880798]
[140.42312622 112.26745605]
[152.71540833 103.67096710]
[167.47996521 101.02373505]
[181.99317932 104.81409454]
[193.57778931 114.34283447]
[200.09678650 127.85218811]
[200.34761047 142.85008240]
[194.28399658 156.56988525]
[183.02449036 166.48066711]
[168.64614868 170.75421143]
[153.80133057 168.60215759]
[141.22845459 160.42152405]
[133.24684143 147.72135925]
[131.32859802 132.84753418]
[131.32859802 147.84753418]
[131.32859802 162.84753418]
[131.32859802 177.84753418]
[131.32859802 192.84753418]
[131.32859802 207.84753418]
[131.32859802 222.84753418]
[131.32859802 237.84753418]
[131.32859802 252.84753418]
[131.32859802 267.84753418]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[13 26]
[14 25]
[15 24]
[16 23]
[17 22]
[27 35]
[28 34]
[36 61]
[37 60]
[39 57]
[40 56]
[41 55]
[63 128]
[64 127]
[65 126]
[66 125]
[67 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
