%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCUAUCCCCCAUUCUCCUCCUAUCCCUCAACCCCGACAUCAUUACCGGGUUUUCCUCUUGxxxxxxxxxxUUCCUCUCUUUCUUCUUCCCACUCAUCCUAACCCUACUCCUAAUCACAUAACCUAUUCCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-33.22279358 284.97879028]
[-42.38473129 296.85562134]
[-51.54666519 308.73242188]
[-60.70860291 320.60925293]
[-69.87053680 332.48608398]
[-78.41099548 344.81735229]
[-86.30747986 357.57061768]
[-94.20396423 370.32388306]
[-102.10044098 383.07711792]
[-109.99692535 395.83038330]
[-117.89340973 408.58364868]
[-117.85731506 424.98275757]
[-132.17518616 432.97842407]
[-146.11802673 424.34536743]
[-145.34263611 407.96456909]
[-130.64666748 400.68716431]
[-122.75018311 387.93389893]
[-114.85369873 375.18066406]
[-106.95721436 362.42739868]
[-99.06073761 349.67413330]
[-91.16425323 336.92086792]
[-106.15639496 337.40637207]
[-116.04266357 326.12533569]
[-113.59416962 311.32650757]
[-100.60128021 303.83087158]
[-86.56443024 309.11926270]
[-81.74736023 323.32412720]
[-72.58542633 311.44732666]
[-63.42348862 299.57049561]
[-54.26155472 287.69366455]
[-45.09961700 275.81683350]
[-64.47418976 257.84075928]
[-81.63791656 237.74298096]
[-96.36008453 215.79368591]
[-108.44281006 192.28791809]
[-117.72366333 167.54161072]
[-124.07790375 141.88742065]
[-127.42011261 115.67018127]
[-127.70536804 89.24230957]
[-124.92983246 62.95904160]
[-119.13082123 37.17367172]
[-110.38626862 12.23280811]
[-98.81373596 -11.52829933]
[-111.64739227 -19.29343414]
[-124.48104095 -27.05857086]
[-137.31469727 -34.82370758]
[-150.73188782 -27.34877968]
[-166.08872986 -27.59994698]
[-179.25430298 -35.50964355]
[-186.68713379 -48.95020294]
[-186.38783264 -64.30617523]
[-178.43690491 -77.44689178]
[-164.97311401 -84.83755493]
[-149.61814880 -84.49011993]
[-136.50242615 -76.49804688]
[-129.15400696 -63.01115799]
[-129.54956055 -47.65736008]
[-116.71591187 -39.89222336]
[-103.88225555 -32.12709045]
[-91.04859924 -24.36195374]
[-84.50962067 -33.87181854]
[-77.49771118 -43.03854752]
[-70.03084564 -51.83864975]
[-62.12816238 -60.24956131]
[-53.80992126 -68.24972534]
[-45.09743881 -75.81864166]
[-36.01305008 -82.93691254]
[-26.58003807 -89.58628082]
[-16.82258034 -95.74971008]
[-6.76568842 -101.41139984]
[3.56486154 -106.55683899]
[14.14259052 -111.17283630]
[24.94038582 -115.24757385]
[35.93056870 -118.77059174]
[47.08497620 -121.73286438]
[58.37501144 -124.12680054]
[69.77173615 -125.94626617]
[81.24594116 -127.18659210]
[92.76821899 -127.84460449]
[104.30902863 -127.91861725]
[115.83879852 -127.40843201]
[127.32797241 -126.31536865]
[138.74710083 -124.64221954]
[150.06690979 -122.39327240]
[161.25837708 -119.57430267]
[172.29284668 -116.19252777]
[183.14201355 -112.25661469]
[193.77807617 -107.77664948]
[204.17376709 -102.76412201]
[214.30244446 -97.23188019]
[224.13813782 -91.19409943]
[233.65565491 -84.66625977]
[242.83059692 -77.66509247]
[251.63943481 -70.20853424]
[260.05960083 -62.31570816]
[268.06948853 -54.00683975]
[275.64862061 -45.30323029]
[282.77749634 -36.22718048]
[289.43792725 -26.80196190]
[295.61276245 -17.05172920]
[301.28622437 -7.00147390]
[306.44375610 3.32304358]
[311.07214355 13.89535999]
[315.15951538 24.68837547]
[318.69540405 35.67442703]
[321.67074585 46.82535553]
[324.07791138 58.11257935]
[325.91070557 69.50717163]
[327.16448975 80.97991180]
[327.83596802 92.50141144]
[327.92349243 104.04212952]
[327.42681885 115.57248688]
[326.34719849 127.06292725]
[324.68743896 138.48400879]
[322.45175171 149.80644226]
[319.64587402 161.00120544]
[316.27703857 172.03962708]
[312.35382080 182.89340210]
[307.88632202 193.53469849]
[302.88598633 203.93624878]
[297.36560059 214.07139587]
[291.33932495 223.91416931]
[284.82266235 233.43931580]
[277.83221436 242.62245178]
[270.38598633 251.44001770]
[262.50302124 259.86941528]
[254.20355225 267.88903809]
[245.50881958 275.47833252]
[236.44113159 282.61785889]
[227.02371216 289.28930664]
[217.28071594 295.47555542]
[207.23710632 301.16079712]
[196.91864014 306.33041382]
[186.35174561 310.97119141]
[175.56353760 315.07119751]
[164.58161926 318.61993408]
[153.43418884 321.60833740]
[142.14979553 324.02868652]
[130.75735474 325.87484741]
[119.28608704 327.14205933]
[107.76538849 327.82705688]
[96.22477722 327.92807007]
[84.69384766 327.44491577]
[73.20214844 326.37875366]
[61.77913666 324.73236084]
[50.45409393 322.50991821]
[39.25604248 319.71716309]
[28.21368790 316.36123657]
[17.35533142 312.45074463]
[6.70880890 307.99572754]
[-3.69859385 303.00753784]
[-13.84020042 297.49905396]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 31]
[2 30]
[3 29]
[4 28]
[5 27]
[6 21]
[7 20]
[8 19]
[9 18]
[10 17]
[11 16]
[43 60]
[44 59]
[45 58]
[46 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
