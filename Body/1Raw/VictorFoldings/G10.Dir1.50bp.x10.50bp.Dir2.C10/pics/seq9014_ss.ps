%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUUUUACCACUCCAGCCUAGCCCCUACCCCCCAAUUAGGAGGGCACUGGCCCCCAACAGGCxxxxxxxxxxUUCUUCUUAGUAGCUAUUACCUUCUUAUUAUUUGAUCUAGAAAUUGCCCUCCUUUUACCCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-24.00124741 209.70544434]
[-35.67436600 219.12554932]
[-47.34748077 228.54565430]
[-59.02059937 237.96575928]
[-70.69371796 247.38586426]
[-82.36682892 256.80596924]
[-93.84663391 266.46072388]
[-105.12840271 276.34613037]
[-116.41017914 286.23156738]
[-127.69194794 296.11697388]
[-138.97372437 306.00241089]
[-132.79110718 319.79611206]
[-130.95057678 334.79959106]
[-133.61579895 349.67871094]
[-140.54980469 363.11041260]
[-151.13600159 373.90042114]
[-164.43307495 381.08923340]
[-179.25866699 384.03765869]
[-194.29449463 382.48352051]
[-208.20358276 376.56500244]
[-219.74913025 366.80838013]
[-227.90454102 354.08120728]
[-231.94461060 339.51519775]
[-231.51013184 324.40551758]
[-226.63970947 310.09570312]
[-217.76643372 297.85818481]
[-205.67930603 288.78115845]
[-191.45310974 283.67169189]
[-176.35282898 282.98413086]
[-161.72116089 286.77960205]
[-148.85914612 294.72064209]
[-137.57737732 284.83520508]
[-126.29560089 274.94979858]
[-115.01383209 265.06436157]
[-103.73205566 255.17893982]
[-102.53034210 250.50138855]
[-98.34186554 246.55142212]
[-91.78693390 245.13284302]
[-80.11381531 235.71273804]
[-68.44070435 226.29264832]
[-56.76758575 216.87254333]
[-45.09446716 207.45243835]
[-33.42134857 198.03233337]
[-51.68941498 166.34693909]
[-62.55503464 131.42381287]
[-65.48796082 94.96720123]
[-60.34507370 58.75619125]
[-47.37734222 24.55788040]
[-27.21759415 -5.95885277]
[-38.29670334 -16.07089424]
[-46.79812622 -19.57332420]
[-49.49522781 -26.50190735]
[-60.36711884 -36.83641052]
[-71.23901367 -47.17091370]
[-82.11090088 -57.50541687]
[-98.17178345 -60.81906891]
[-103.07498169 -76.46805573]
[-91.77651215 -88.35403442]
[-75.89926910 -84.24974060]
[-71.77639771 -68.37731171]
[-60.90450668 -58.04280472]
[-50.03261566 -47.70830154]
[-39.16072464 -37.37379837]
[-28.18466187 -27.15000153]
[-17.10555458 -17.03796005]
[-10.80757523 -23.01738167]
[-4.20472860 -28.65834427]
[2.68481779 -33.94532394]
[9.84210873 -38.86378098]
[17.24745369 -43.40017700]
[24.88047600 -47.54203415]
[32.72017670 -51.27795792]
[40.74498749 -54.59766769]
[48.93282700 -57.49202728]
[57.26116562 -59.95307922]
[65.70709229 -61.97404480]
[74.24737549 -63.54937363]
[82.85850525 -64.67472076]
[91.51679993 -65.34700012]
[100.19843292 -65.56435394]
[108.87952423 -65.32618713]
[117.53618622 -64.63315582]
[126.14459229 -63.48717117]
[134.68107605 -61.89137650]
[143.12213135 -59.85017014]
[151.44454956 -57.36916351]
[159.62542725 -54.45518112]
[167.64225769 -51.11624908]
[175.47297668 -47.36154175]
[183.09605408 -43.20140076]
[190.49049377 -38.64726639]
[197.63598633 -33.71166611]
[204.51283264 -28.40818596]
[211.10214233 -22.75141335]
[217.38577271 -16.75691223]
[223.34643555 -10.44117546]
[228.96772766 -3.82157993]
[234.23419189 3.08366179]
[239.13133240 10.25555134]
[243.64569092 17.67435646]
[247.76481628 25.31966591]
[251.47740173 33.17044449]
[254.77323914 41.20509338]
[257.64321899 49.40150452]
[260.07949829 57.73712540]
[262.07531738 66.18902588]
[263.62524414 74.73395538]
[264.72497559 83.34839630]
[265.37149048 92.00865173]
[265.56301880 100.69089508]
[265.29904175 109.37123871]
[264.58026123 118.02579498]
[263.40869141 126.63076019]
[261.78750610 135.16246033]
[259.72119141 143.59741211]
[257.21545410 151.91241455]
[254.27714539 160.08457947]
[250.91438293 168.09144592]
[247.13639832 175.91096497]
[242.95359802 183.52162170]
[238.37748718 190.90249634]
[233.42066956 198.03326416]
[228.09675598 204.89431763]
[222.42041016 211.46676636]
[216.40724182 217.73252869]
[210.07380676 223.67439270]
[203.43751526 229.27597046]
[196.51663208 234.52186584]
[189.33021545 239.39765930]
[181.89801025 243.88992310]
[174.24047852 247.98629761]
[166.37869263 251.67552185]
[158.33428955 254.94743347]
[150.12936401 257.79302979]
[141.78654480 260.20449829]
[133.32873535 262.17517090]
[124.77923584 263.69967651]
[116.16156006 264.77377319]
[107.49942017 265.39453125]
[98.81664276 265.56024170]
[90.13713074 265.27044678]
[81.48474884 264.52593994]
[72.88330078 263.32873535]
[64.35646820 261.68218994]
[55.92770386 259.59082031]
[47.62018967 257.06033325]
[39.45679474 254.09774780]
[31.45997047 250.71118164]
[23.65172195 246.90995789]
[16.05353355 242.70454407]
[8.68630600 238.10649109]
[1.57031310 233.12847900]
[-5.27486849 227.78417969]
[-11.83040619 222.08830261]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 43]
[2 42]
[3 41]
[4 40]
[5 39]
[6 38]
[7 35]
[8 34]
[9 33]
[10 32]
[11 31]
[49 65]
[50 64]
[52 63]
[53 62]
[54 61]
[55 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
