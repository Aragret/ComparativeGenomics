%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACAUACUUACUAAAGUGUGUUAAUUAAUUAAUGCUUGUAGGACAUAAUAAUAACAAUUGAxxxxxxxxxxUCUCCUACUUACAGGACUCAACAUACUAGUCACAGCCCUAUACUCCCUCUACAUAUUUACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[107.14348602 256.84866333]
[107.14348602 241.84864807]
[107.14348602 226.84864807]
[107.14348602 211.84864807]
[107.14348602 196.84864807]
[107.14348602 181.84864807]
[107.14348602 166.84864807]
[107.14348602 151.84864807]
[107.14348602 136.84864807]
[107.14348602 121.84864807]
[93.48724365 115.64324188]
[82.18824005 125.50896454]
[70.88922882 135.37469482]
[59.59022903 145.24041748]
[48.29122162 155.10614014]
[36.99221802 164.97186279]
[25.69321251 174.83758545]
[14.39420795 184.70330811]
[9.60411263 200.38728333]
[-6.43242264 203.81678772]
[-17.21838570 191.46385193]
[-11.65810204 176.03611755]
[4.52848530 173.40429688]
[15.82748985 163.53857422]
[27.12649536 153.67285156]
[38.42549896 143.80712891]
[49.72450256 133.94140625]
[61.02350998 124.07568359]
[72.32251740 114.20996094]
[83.62152100 104.34423828]
[80.95075989 97.33588409]
[75.60925293 83.31916809]
[72.93849182 76.31081390]
[57.93930435 76.46685028]
[42.94011688 76.62288666]
[29.10719109 85.43096161]
[14.68968487 77.61638641]
[14.51909351 61.21812439]
[28.77090645 53.10530472]
[42.78408051 61.62369537]
[57.78326797 61.46765900]
[72.78245544 61.31162262]
[84.18347931 51.56397247]
[86.66859436 36.77126312]
[89.15371704 21.97855759]
[71.42744446 0.93731773]
[84.97982025 -29.24355125]
[80.07826996 -43.42010880]
[75.17671967 -57.59666824]
[70.27516937 -71.77322388]
[65.37361908 -85.94978333]
[60.47206497 -100.12634277]
[45.56328201 -98.07342529]
[30.54048347 -98.96881866]
[15.98110294 -102.77810669]
[2.44476414 -109.35486603]
[-9.54823208 -118.44630432]
[-19.53690529 -129.70297241]
[-27.13731956 -142.69219971]
[-32.05733490 -156.91470337]
[-34.10783768 -171.82382202]
[-33.21001434 -186.84646606]
[-29.39837074 -201.40522766]
[-22.81942177 -214.94050598]
[-13.72603989 -226.93203735]
[-2.46775317 -236.91888428]
[10.52270031 -244.51719666]
[24.74600410 -249.43490601]
[39.65544891 -251.48300171]
[54.67795563 -250.58274841]
[69.23610687 -246.76873779]
[82.77031708 -240.18760681]
[94.76036835 -231.09228516]
[104.74539185 -219.83238220]
[112.34160614 -206.84069824]
[117.25701141 -192.61659241]
[119.30268860 -177.70681763]
[118.40000153 -162.68446350]
[114.58364868 -148.12692261]
[108.00032043 -134.59378052]
[98.90305328 -122.60520172]
[87.64153290 -112.62200165]
[74.64862061 -105.02789307]
[79.55017090 -90.85133362]
[84.45172119 -76.67477417]
[89.35327148 -62.49821854]
[94.25482941 -48.32165909]
[99.15637970 -34.14509964]
[106.04756927 -31.18511963]
[104.28312683 -46.08098221]
[116.30104065 -55.05704117]
[130.08352661 -49.13733292]
[131.84825134 -34.24150085]
[119.82994843 -25.26515579]
[126.72113800 -22.30517578]
[140.37738037 -28.51058197]
[154.03361511 -34.71598816]
[167.68986511 -40.92139816]
[169.81248474 -56.20203781]
[179.87681580 -67.89446259]
[194.67135620 -72.26766205]
[209.47523499 -67.92616272]
[219.56459045 -56.25532150]
[221.71994019 -40.97926331]
[215.25350952 -26.97251701]
[202.22872925 -18.70459175]
[186.80175781 -18.81374741]
[173.89526367 -27.26515579]
[160.23902893 -21.05974770]
[146.58279419 -14.85434055]
[132.92654419 -8.64893436]
[129.69622803 9.60199070]
[118.20761108 21.50645256]
[103.94641876 24.46367455]
[101.46130371 39.25638199]
[98.97618866 54.04909134]
[103.38609314 39.71197891]
[110.68117523 26.60542679]
[120.54244232 15.30253601]
[132.53869629 6.29754782]
[146.14538574 -0.01577879]
[160.76753235 -3.36138272]
[175.76574707 -3.59297180]
[190.48420715 -0.70041907]
[204.27932739 5.18979311]
[216.54789734 13.82010555]
[226.75343323 24.81314087]
[234.44970703 37.68821335]
[239.30017090 51.88233185]
[241.09272766 66.77484131]
[239.74899292 81.71453094]
[235.32772827 96.04814148]
[228.02226257 109.14891815]
[218.15203857 120.44399261]
[206.14865112 129.43946838]
[192.53697205 135.74201965]
[177.91218567 139.07603455]
[162.91380310 139.29574585]
[148.19763184 136.39154053]
[134.40718079 130.49040222]
[122.14348602 121.84864807]
[122.14348602 136.84864807]
[122.14348602 151.84864807]
[122.14348602 166.84864807]
[122.14348602 181.84864807]
[122.14348602 196.84864807]
[122.14348602 211.84864807]
[122.14348602 226.84864807]
[122.14348602 241.84864807]
[122.14348602 256.84866333]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 30]
[12 29]
[13 28]
[14 27]
[15 26]
[16 25]
[17 24]
[18 23]
[33 42]
[34 41]
[35 40]
[43 116]
[44 115]
[45 114]
[47 88]
[48 87]
[49 86]
[50 85]
[51 84]
[52 83]
[95 111]
[96 110]
[97 109]
[98 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
