%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUACAUAAAAUCUAGACAAAAAAGGAAGGAAUCGAACCCCCCAAAGCUGGUUUCAAGCCAAxxxxxxxxxxCCCCUUACGAGUGCGGCUUCGACCCUAUAUCCCCCGCCCGCGUCCCUUUCUCCAUAAAAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[66.36088562 458.27859497]
[66.36088562 443.27859497]
[66.36088562 428.27859497]
[66.36088562 413.27859497]
[66.36088562 398.27859497]
[66.36088562 383.27859497]
[66.36088562 368.27859497]
[66.36088562 353.27859497]
[66.36088562 338.27859497]
[66.36088562 323.27859497]
[54.37033463 321.18930054]
[42.84663391 317.26361084]
[32.06928635 311.59585571]
[22.29982185 304.32260132]
[13.77546883 295.61938477]
[6.70339012 285.69647217]
[1.25564528 274.79376221]
[-2.43499279 263.17507935]
[-4.27827454 251.12162781]
[-4.22868156 238.92536926]
[-2.28654790 226.88180542]
[1.50192487 215.28289795]
[7.04576731 204.40992737]
[14.21142673 194.52674866]
[22.82598305 185.87333679]
[32.68132401 178.65997314]
[43.53916931 173.06214905]
[55.13682938 169.21624756]
[67.19358063 167.21627808]
[79.41742706 167.11157227]
[81.90254211 152.31886292]
[84.38765717 137.52615356]
[86.87277985 122.73344421]
[89.35789490 107.94073486]
[85.95491791 93.33184814]
[77.18871307 81.16001129]
[68.42250824 68.98817444]
[59.65629959 56.81633377]
[46.38389206 63.85600662]
[32.27651215 69.02278137]
[17.59697151 72.22041321]
[2.61873984 73.38932800]
[-12.37914562 72.50775146]
[-27.11728477 69.59209442]
[-41.32111359 64.69669342]
[-54.72602463 57.91273499]
[-67.08229828 49.36660385]
[-78.15972900 39.21750641]
[-87.75196838 27.65451622]
[-95.68030548 14.89304352]
[-101.79705048 1.17082834]
[-105.98825073 -13.25649357]
[-108.17581940 -28.12015152]
[-108.31900787 -43.14324188]
[-106.41515350 -58.04589462]
[-102.49971008 -72.55048370]
[-96.64563751 -86.38679504]
[-88.96198273 -99.29707336]
[-79.59188843 -111.04079437]
[-68.70991516 -121.39919281]
[-56.51878357 -130.17929077]
[-43.24561691 -137.21752930]
[-29.13767624 -142.38278198]
[-14.45778942 -145.57882690]
[0.52056742 -146.74610901]
[15.51835728 -145.86291504]
[30.25618172 -142.94566345]
[44.45948029 -138.04872131]
[57.86365891 -131.26332092]
[70.21900177 -122.71584320]
[81.29534149 -112.56555176]
[90.88632202 -101.00151825]
[98.81328583 -88.23918915]
[104.92854309 -74.51631165]
[109.11817932 -60.08853912]
[111.30413818 -45.22464371]
[111.44570160 -30.20153809]
[109.54022980 -15.29909039]
[105.62322235 -0.79492581]
[99.76764679 13.04075336]
[92.08259583 25.95019531]
[82.71122742 37.69290543]
[71.82813263 48.05012894]
[80.59434509 60.22196579]
[89.36054993 72.39379883]
[98.12675476 84.56563568]
[112.44935608 89.02245331]
[126.57415771 83.97369385]
[140.69895935 78.92494202]
[151.08969116 66.99417114]
[165.67861938 69.99623108]
[176.06935120 58.06546402]
[190.65827942 61.06752777]
[204.78308105 56.01877213]
[218.90788269 50.97001648]
[233.03268433 45.92125702]
[232.82081604 30.78078842]
[237.53889465 16.39265251]
[246.67515564 4.31756926]
[259.23852539 -4.13464785]
[273.86627197 -8.04716492]
[288.97167969 -6.99558163]
[302.91619873 -1.09396589]
[314.18725586 9.01751900]
[321.56222534 22.24205589]
[324.24114990 37.14514542]
[321.93344116 52.11021042]
[314.88940430 65.51395416]
[303.87313843 75.90243530]
[290.07962036 82.14879608]
[275.00503540 83.57547760]
[260.28454590 80.02771759]
[247.51498413 71.89035034]
[238.08145142 60.04606247]
[223.95664978 65.09481812]
[209.83184814 70.14357758]
[195.70704651 75.19232941]
[186.32661438 86.76197815]
[170.72737122 84.12104034]
[161.34693909 95.69068909]
[145.74771118 93.04974365]
[131.62290955 98.09850311]
[117.49810791 103.14725494]
[111.22983551 109.17327881]
[104.15060425 110.42585754]
[101.66548920 125.21856689]
[99.18036652 140.01127625]
[96.69525146 154.80397034]
[94.21012878 169.59667969]
[111.08952332 176.33245850]
[125.96279144 186.76408386]
[138.03512573 200.33024597]
[146.66227722 216.30216980]
[151.38496399 233.82287598]
[151.95332336 251.95307922]
[148.34005737 269.72161865]
[140.74185181 286.17742920]
[129.56855774 300.44036865]
[115.42113495 311.74853516]
[99.05933380 319.49868774]
[81.36088562 323.27859497]
[81.36088562 338.27859497]
[81.36088562 353.27859497]
[81.36088562 368.27859497]
[81.36088562 383.27859497]
[81.36088562 398.27859497]
[81.36088562 413.27859497]
[81.36088562 428.27859497]
[81.36088562 443.27859497]
[81.36088562 458.27859497]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[30 129]
[31 128]
[32 127]
[33 126]
[34 125]
[35 86]
[36 85]
[37 84]
[38 83]
[87 123]
[88 122]
[89 121]
[91 119]
[93 117]
[94 116]
[95 115]
[96 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
