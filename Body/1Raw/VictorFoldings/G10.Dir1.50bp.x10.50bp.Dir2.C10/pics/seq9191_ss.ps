%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCAACUUUCCUCACUAUCUGCUUCAUCCGCCAACUAAUAUUUCACUUUACAUCCAAACAxxxxxxxxxxCCACAUCAAAACCCCCUCCCCAUGCUUACAAGCAAGUACAGCAAUCAACCCUCAACUAUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[87.86329651 101.38949585]
[75.08593750 93.53206635]
[62.30858231 85.67464447]
[49.53122711 77.81721497]
[36.75386810 69.95979309]
[23.97651100 62.10236740]
[11.19915390 54.24494171]
[-1.57820296 46.38751602]
[-14.35556030 38.53009033]
[-27.13291740 30.67266464]
[-35.93820953 42.82520294]
[-45.63737106 54.27700043]
[-56.17484283 64.96246338]
[-67.49026489 74.82038116]
[-79.51882935 83.79428864]
[-92.19163513 91.83277893]
[-105.43608856 98.88982391]
[-119.17633057 104.92498779]
[-133.33364868 109.90369415]
[-147.82696533 113.79744720]
[-162.57325745 116.58392334]
[-177.48803711 118.24716949]
[-192.48590088 118.77766418]
[-207.48094177 118.17236328]
[-222.38725281 116.43473053]
[-237.11944580 113.57472229]
[-251.59315491 109.60871887]
[-265.72546387 104.55944061]
[-279.43542480 98.45581055]
[-292.64450073 91.33278656]
[-305.27706909 83.23117065]
[-317.26071167 74.19737244]
[-328.52682495 64.28312683]
[-339.01086426 53.54523087]
[-348.65277100 42.04518890]
[-357.39730835 29.84887505]
[-365.19442749 17.02614784]
[-371.99945068 3.65045357]
[-377.77337646 -10.20158958]
[-382.48315430 -24.45063972]
[-386.10180664 -39.01507568]
[-388.60858154 -53.81147385]
[-389.98913574 -68.75508118]
[-390.23556519 -83.76030731]
[-389.34646606 -98.74118805]
[-387.32693481 -113.61192322]
[-384.18850708 -128.28733826]
[-379.94918823 -142.68336487]
[-374.63323975 -156.71752930]
[-368.27111816 -170.30947876]
[-360.89929199 -183.38133240]
[-352.55993652 -195.85821533]
[-343.30087280 -207.66868591]
[-333.17507935 -218.74505615]
[-322.24063110 -229.02391052]
[-310.56008911 -238.44636536]
[-298.20040894 -246.95843506]
[-285.23233032 -254.51136780]
[-271.73019409 -261.06192017]
[-257.77133179 -266.57254028]
[-243.43565369 -271.01168823]
[-228.80531311 -274.35394287]
[-213.96411133 -276.58010864]
[-198.99703979 -277.67752075]
[-183.98985291 -277.63980103]
[-169.02847290 -276.46722412]
[-154.19863892 -274.16647339]
[-139.58528137 -270.75076294]
[-125.27210999 -266.23962402]
[-111.34109497 -260.65893555]
[-97.87204742 -254.04060364]
[-84.94210815 -246.42259216]
[-72.62535095 -237.84852600]
[-60.99230957 -228.36749268]
[-50.10963440 -218.03382874]
[-40.03964996 -206.90670776]
[-30.84004402 -195.04986572]
[-22.56350899 -182.53123474]
[-15.25745010 -169.42250061]
[-8.96371937 -155.79875183]
[-3.71836662 -141.73803711]
[0.44856340 -127.32089233]
[3.51320243 -112.62989807]
[5.45799637 -97.74919891]
[6.27180529 -82.76403809]
[5.94996834 -67.76024628]
[4.49432802 -52.82376099]
[1.91322255 -38.04014587]
[-1.77856326 -23.49407768]
[-6.55988312 -9.26887608]
[-12.40334988 4.55397797]
[-19.27549171 17.89530563]
[-6.49813461 25.75273132]
[6.27922249 33.61015701]
[19.05657959 41.46758270]
[31.83393669 49.32500839]
[44.61129379 57.18243408]
[57.38865280 65.03986359]
[70.16600800 72.89728546]
[82.94336700 80.75471497]
[95.72072601 88.61213684]
[103.18070984 88.30282593]
[109.38929749 92.40191650]
[124.38848114 92.24588013]
[139.38766479 92.08984375]
[154.38685608 91.93380737]
[169.38360596 91.62174988]
[184.37631226 91.15370941]
[199.36900330 90.68566895]
[210.00614929 78.99692535]
[225.79664612 78.33680725]
[237.37226868 89.09693909]
[237.86541748 104.89353180]
[226.98348999 116.35474396]
[211.18257141 116.68084717]
[199.83705139 105.67835999]
[184.84434509 106.14640808]
[169.85165405 106.61444855]
[163.22134399 109.98855591]
[154.54289246 106.93299866]
[139.54370117 107.08903503]
[124.54451752 107.24507141]
[109.54533386 107.40110779]
[122.50035095 114.96201324]
[133.63507080 125.01279449]
[142.47869873 137.12849426]
[148.65733337 150.79687500]
[151.90974426 165.44001770]
[152.09841919 180.43882751]
[149.21539307 195.15916443]
[143.38253784 208.97863770]
[134.84648132 221.31295776]
[123.96811676 231.64065552]
[111.20738220 239.52505493]
[97.10381317 244.63281250]
[82.25369263 246.74798584]
[67.28488159 245.78111267]
[52.83027267 241.77310181]
[39.50099182 234.89340210]
[27.86060333 225.43289185]
[18.40126419 213.79153442]
[11.52291203 200.46156311]
[7.51636267 186.00654602]
[6.55101299 171.03764343]
[8.66767693 156.18772888]
[13.77686405 142.08467102]
[21.66255760 129.32475281]
[31.99135017 118.44742584]
[44.32654190 109.91262054]
[58.14660645 104.08116150]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 101]
[2 100]
[3 99]
[4 98]
[5 97]
[6 96]
[7 95]
[8 94]
[9 93]
[10 92]
[103 123]
[104 122]
[105 121]
[106 120]
[107 118]
[108 117]
[109 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
