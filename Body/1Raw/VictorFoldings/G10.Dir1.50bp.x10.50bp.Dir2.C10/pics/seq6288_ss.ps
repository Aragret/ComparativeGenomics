%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACUAUACCUAUUAUUCGGCGCAUGAGCUGGAGUCCUAGGCACAGCUCUAAGCCUCCUUAUUxxxxxxxxxxACACUCAUUCUCAACCCCCUGACAAAACACAUAGCCUACCCCUUCCUUGUACUAUCCCUAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[135.11090088 448.13031006]
[135.11090088 433.13031006]
[135.11090088 418.13031006]
[135.11090088 403.13031006]
[135.11090088 388.13031006]
[135.11090088 373.13031006]
[135.11090088 358.13031006]
[135.11090088 343.13031006]
[135.11090088 328.13031006]
[135.11090088 313.13031006]
[133.42050171 298.22589111]
[130.06123352 283.60687256]
[115.93625641 283.93710327]
[102.01763153 281.47894287]
[88.85062408 276.32656860]
[76.95143127 268.67977905]
[66.78701019 258.83627319]
[58.75668716 247.17990112]
[53.17652130 234.16584778]
[50.26685333 220.30279541]
[50.14357758 206.13302612]
[52.81356812 192.21127319]
[58.17429733 179.08291626]
[66.01779175 167.26268005]
[76.03869629 157.21446228]
[87.84613800 149.33305359]
[100.97901917 143.92871094]
[98.22277832 129.18411255]
[95.46653748 114.43952179]
[85.59082794 103.14923859]
[71.34413910 98.45543671]
[55.90597916 106.61940765]
[39.64987946 101.22768402]
[32.44023514 86.06443024]
[18.10017586 81.66413116]
[3.76011443 77.26383209]
[-10.57994652 72.86352539]
[-24.92000771 68.46322632]
[-39.26007080 64.06292725]
[-51.03960800 69.41513824]
[-62.91954803 65.41035461]
[-68.67294312 54.72575378]
[-82.91963196 50.03195572]
[-97.83375549 55.94368744]
[-111.68235016 47.84455872]
[-113.84197235 31.94752693]
[-102.65592957 20.44743538]
[-86.70520782 22.16616821]
[-78.22583771 35.78526306]
[-63.97914124 40.47906113]
[-47.04945755 35.95906830]
[-34.85976791 49.72286606]
[-20.51970863 54.12316895]
[-6.17964649 58.52346802]
[8.16041470 62.92376709]
[22.50047684 67.32406616]
[36.84053802 71.72436523]
[47.30097580 64.13941193]
[60.41599274 63.98104858]
[71.37772369 71.53230286]
[76.03794098 84.20874786]
[90.28462982 88.90254974]
[79.17435455 78.82476044]
[79.12120819 63.82485580]
[90.15978241 53.66858673]
[105.10337067 54.96824265]
[114.22288513 66.87767029]
[111.58126068 81.64282227]
[119.99466705 69.22451019]
[128.40808105 56.80619431]
[117.32573700 46.65732574]
[107.83925629 35.00294876]
[100.15083313 22.09147835]
[94.42436218 8.19812298]
[90.78189087 -6.38098097]
[89.30105591 -21.33507729]
[90.01343536 -36.34542084]
[92.90383911 -51.09206009]
[97.91065216 -65.26067352]
[104.92716217 -78.54926300]
[113.80380249 -90.67456818]
[124.35137939 -101.37814331]
[136.34506226 -110.43183899]
[149.52920532 -117.64268494]
[163.62278748 -122.85697174]
[178.32540894 -125.96355438]
[193.32366943 -126.89622498]
[208.29789734 -125.63509369]
[222.92890930 -122.20705414]
[236.90483093 -116.68516541]
[249.92778015 -109.18712616]
[261.72018433 -99.87276459]
[272.03063965 -88.94061279]
[280.63943481 -76.62368774]
[287.36303711 -63.18452835]
[292.05816650 -48.90959167]
[294.62469482 -34.10314941]
[295.00796509 -19.08080101]
[293.19976807 -4.16274881]
[289.23867798 10.33302975]
[283.20910645 24.09755516]
[275.23959351 36.83743668]
[265.49996948 48.28112030]
[254.19787598 58.18468475]
[241.57421875 66.33703613]
[227.89804077 72.56439972]
[213.46087646 76.73405457]
[198.57043457 78.75710297]
[183.54411316 78.59044647]
[168.70222473 76.23761749]
[154.36108398 71.74877930]
[140.82640076 65.21960449]
[132.41297913 77.63791656]
[123.99957275 90.05622864]
[110.21113586 111.68327332]
[112.96737671 126.42787170]
[115.72361755 141.17247009]
[131.64128113 141.69680786]
[147.04493713 145.71684265]
[161.17687988 153.03175354]
[173.34262085 163.27876282]
[182.94505310 175.95103455]
[189.51371765 190.42282104]
[192.72785950 205.98033142]
[192.43212891 221.85693359]
[188.64404297 237.27093506]
[181.55297852 251.46406555]
[171.51077271 263.73880005]
[159.01414490 273.49264526]
[144.68025208 280.24761963]
[148.03950500 294.86660767]
[154.11294556 281.15118408]
[165.78533936 271.73016357]
[180.47367859 268.68835449]
[194.92759705 272.69885254]
[205.94860840 282.87417603]
[211.09785461 296.96264648]
[209.23588562 311.84664917]
[200.77471924 324.23248291]
[187.58673096 331.37927246]
[172.59028625 331.70556641]
[159.10392761 325.13912964]
[150.11090088 313.13031006]
[150.11090088 328.13031006]
[150.11090088 343.13031006]
[150.11090088 358.13031006]
[150.11090088 373.13031006]
[150.11090088 388.13031006]
[150.11090088 403.13031006]
[150.11090088 418.13031006]
[150.11090088 433.13031006]
[150.11090088 448.13031006]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 131]
[12 130]
[27 117]
[28 116]
[29 115]
[30 62]
[31 61]
[34 57]
[35 56]
[36 55]
[37 54]
[38 53]
[39 52]
[42 50]
[43 49]
[68 114]
[69 113]
[70 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
