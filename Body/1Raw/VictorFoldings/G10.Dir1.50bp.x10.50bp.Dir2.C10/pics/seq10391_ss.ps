%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUUACCCCCCACUAUUAACCUACUGGGAGAACUCUCUGUGCUAGUAACCACGUUCUCCUGxxxxxxxxxxAUGCACACUACUAUAACCACCCUAACCCUGACUUCCCUAAUUCCCCCCAUCCUUACCACCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[15.45853806 302.98574829]
[4.91224051 298.26446533]
[-5.37148142 292.99566650]
[-5.73327351 308.81274414]
[-18.87036133 315.83172607]
[-26.50333023 328.74441528]
[-34.13629913 341.65710449]
[-41.76927185 354.56982422]
[-49.40224075 367.48251343]
[-57.03520966 380.39520264]
[-54.45096970 396.22875977]
[-65.32526398 408.02407837]
[-81.31626129 406.73278809]
[-90.15704346 393.34545898]
[-85.06571960 378.13174438]
[-69.94790649 372.76223755]
[-62.31493759 359.84954834]
[-54.68196869 346.93685913]
[-47.04899979 334.02413940]
[-39.41602707 321.11145020]
[-31.78305817 308.19876099]
[-31.96722794 293.30529785]
[-18.28417969 285.36270142]
[-38.33887100 270.91763306]
[-56.64581680 254.31320190]
[-72.97372437 235.75921631]
[-87.11631775 215.49008179]
[-98.89492035 193.76185608]
[-108.16071320 170.84907532]
[-114.79665375 147.04119873]
[-118.71888733 122.63899994]
[-119.87786865 97.95079041]
[-118.25894928 73.28847504]
[-113.88259125 48.96362305]
[-106.80408478 25.28355598]
[-97.11284637 2.54744196]
[-84.93132782 -18.95747375]
[-97.26261139 -27.49793243]
[-109.59389496 -36.03839111]
[-121.92517853 -44.57884979]
[-134.25645447 -53.11930847]
[-146.58773804 -61.65976715]
[-158.91902161 -70.20022583]
[-159.20344543 -55.20292282]
[-170.97688293 -45.90851974]
[-185.63056946 -49.11311722]
[-192.44966125 -62.47350311]
[-186.44801331 -76.22051239]
[-172.01466370 -80.30237579]
[-183.40574646 -90.06164551]
[-194.79681396 -99.82092285]
[-209.85890198 -96.09091187]
[-224.22415161 -101.95773315]
[-232.36880493 -115.16546631]
[-231.16108704 -130.63546753]
[-221.06539917 -142.41921997]
[-205.96371460 -145.98561096]
[-191.66297913 -139.96330261]
[-183.66207886 -126.66799164]
[-185.03753662 -111.21199799]
[-173.64646912 -101.45272064]
[-162.25538635 -91.69344330]
[-150.37857056 -82.53150940]
[-138.04728699 -73.99105072]
[-125.71600342 -65.45059204]
[-113.38471985 -56.91013336]
[-101.05343628 -48.36967468]
[-88.72215271 -39.82921600]
[-76.39086914 -31.28875732]
[-69.25061035 -40.37345886]
[-61.64297867 -49.07052994]
[-53.58898926 -57.35595703]
[-45.11087799 -65.20686340]
[-36.23205948 -72.60157013]
[-26.97704887 -79.51964569]
[-17.37140465 -85.94200134]
[-7.44164896 -91.85089874]
[2.78479576 -97.23001862]
[13.27969074 -102.06450653]
[24.01405525 -106.34101105]
[34.95824814 -110.04772186]
[46.08204651 -113.17440796]
[57.35473251 -115.71244049]
[68.74517822 -117.65480042]
[80.22193909 -118.99612427]
[91.75330353 -119.73271942]
[103.30744934 -119.86254120]
[114.85246277 -119.38523102]
[126.35645294 -118.30211639]
[137.78767395 -116.61617279]
[149.11453247 -114.33206940]
[160.30578613 -111.45611572]
[171.33050537 -107.99623871]
[182.15823364 -103.96200562]
[192.75910950 -99.36454773]
[203.10383606 -94.21656799]
[213.16384888 -88.53227234]
[222.91137695 -82.32736969]
[232.31948853 -75.61898041]
[241.36222839 -68.42564392]
[250.01458740 -60.76721573]
[258.25271606 -52.66484070]
[266.05383301 -44.14089966]
[273.39642334 -35.21892929]
[280.26019287 -25.92356300]
[286.62615967 -16.28047180]
[292.47680664 -6.31628275]
[297.79595947 3.94148779]
[302.56887817 14.46451473]
[306.78247070 25.22373962]
[310.42501831 36.18944931]
[313.48651123 47.33136749]
[315.95849609 58.61872482]
[317.83410645 70.02035522]
[319.10818481 81.50476837]
[319.77725220 93.04025269]
[319.83938599 104.59495544]
[319.29449463 116.13697815]
[318.14401245 127.63442993]
[316.39117432 139.05557251]
[314.04077148 150.36888123]
[311.09933472 161.54309082]
[307.57495117 172.54734802]
[303.47735596 183.35128784]
[298.81790161 193.92504883]
[293.60943604 204.23944092]
[287.86633301 214.26600647]
[281.60443115 223.97702026]
[274.84106445 233.34568787]
[267.59490967 242.34613037]
[259.88592529 250.95350647]
[251.73545837 259.14404297]
[243.16598511 266.89511108]
[234.20115662 274.18530273]
[224.86575317 280.99453735]
[215.18554688 287.30392456]
[205.18727112 293.09613037]
[194.89852905 298.35510254]
[184.34773254 303.06634521]
[173.56401062 307.21682739]
[162.57716370 310.79510498]
[151.41749573 313.79129028]
[140.11585999 316.19711304]
[128.70344543 318.00592041]
[117.21176910 319.21273804]
[105.67256165 319.81423950]
[94.11769104 319.80871582]
[82.57906342 319.19622803]
[71.08853912 317.97845459]
[59.67785645 316.15875244]
[48.37851715 313.74212646]
[37.22172546 310.73529053]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 23]
[5 21]
[6 20]
[7 19]
[8 18]
[9 17]
[10 16]
[37 69]
[38 68]
[39 67]
[40 66]
[41 65]
[42 64]
[43 63]
[49 62]
[50 61]
[51 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
