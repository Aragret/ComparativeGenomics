%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCCACCCCUUACGAGUGCGGCUUCGACCCUAUAUCCCCCGCCCGCGUCCCUUUCUCCAUAAAxxxxxxxxxxACUACUAGGCCUCCUCCUAGCAGCAGCAGGCAAAUCAGCCCAAUUAGGUCUCCACCCCUGACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[112.71404266 143.49415588]
[107.07928467 157.39558411]
[101.44452667 171.29699707]
[95.80977631 185.19842529]
[97.79636383 200.89440918]
[85.84472656 209.78303528]
[80.20997620 223.68444824]
[83.00867462 239.84301758]
[70.24271393 250.13682556]
[55.04462051 243.97647095]
[53.04888535 227.69921875]
[66.30854797 218.04969788]
[71.94330597 204.14826965]
[69.55368042 189.44660950]
[81.90834808 179.56365967]
[87.54310608 165.66224670]
[93.17786407 151.76081848]
[98.81262207 137.85940552]
[86.98480225 126.83956909]
[83.32966614 114.01610565]
[86.80036163 103.78067780]
[71.80113220 103.62866974]
[56.80189896 103.47666168]
[42.92402649 111.07371521]
[30.27581787 103.20783234]
[16.39794350 110.80488586]
[3.74973559 102.93900299]
[-11.24949455 102.78699493]
[-26.24872398 102.63497925]
[-41.24795532 102.48297119]
[-46.28943253 116.76100159]
[-55.69577408 128.62690735]
[-68.44664764 136.79353333]
[-83.15893555 140.37504578]
[-98.23676300 138.98295593]
[-112.04459381 132.76824951]
[-123.08465576 122.40505981]
[-130.15940857 109.01750946]
[-132.50144958 94.05777740]
[-129.85670471 79.14858246]
[-122.51207733 65.90716553]
[-111.26425171 55.76985168]
[-97.33330536 49.83626938]
[-82.23036194 48.75003815]
[-67.59368134 52.62899399]
[-55.01093674 61.05237198]
[-45.84701538 73.10646820]
[-41.09594345 87.48374176]
[-26.09671402 87.63574982]
[-11.09748459 87.78776550]
[3.90174556 87.93977356]
[16.70677376 80.33184814]
[30.42782784 88.20860291]
[43.23285675 80.60067749]
[56.95391083 88.47743225]
[71.95314026 88.62944031]
[86.95236969 88.78144836]
[73.86218262 81.45703125]
[60.77199936 74.13262177]
[45.82363129 72.88913727]
[31.46213531 68.55929565]
[18.31750870 61.33304214]
[6.96636152 51.52735901]
[-2.09336996 39.57238770]
[-8.46426392 25.99256325]
[-11.86685181 11.38357925]
[-12.15187073 -3.61371303]
[-9.30681992 -18.34143066]
[-3.45650220 -32.15351868]
[5.14244890 -44.44408798]
[16.11282539 -54.67398453]
[28.97339439 -62.39446640]
[43.15999985 -67.26685333]
[58.05033112 -69.07740784]
[72.99118805 -67.74671936]
[87.32717133 -63.33314896]
[100.42940521 -56.03031158]
[111.72313690 -46.15855408]
[120.71295166 -34.15092468]
[127.00449371 -20.53415108]
[130.32177734 -5.90556097]
[130.51927185 9.09313869]
[127.58833313 23.80400467]
[121.65751648 37.58171844]
[112.98958588 49.81893921]
[110.16961670 64.55148315]
[107.34964752 79.28401947]
[116.88755798 67.70697021]
[126.42547607 56.12991333]
[135.96339417 44.55286026]
[145.50129700 32.97580338]
[143.73281860 17.27077293]
[153.65263367 4.96740055]
[169.37547302 3.36505866]
[181.57328796 13.41438961]
[183.00930786 29.15330315]
[172.83157349 41.24417877]
[157.07835388 42.51371765]
[147.54043579 54.09077454]
[138.00253296 65.66783142]
[128.46461487 77.24488068]
[118.92669678 88.82193756]
[122.09250641 95.62102509]
[135.69068909 89.28940582]
[149.28887939 82.95778656]
[162.88716125 76.62639618]
[169.21833801 90.22479248]
[155.62049866 96.55597687]
[142.02230835 102.88759613]
[128.42413330 109.21921539]
[131.58993530 116.01830292]
[146.58917236 116.17031097]
[161.58839417 116.32232666]
[172.69955444 105.08320618]
[188.50384521 105.07627869]
[199.62486267 116.30564117]
[199.46469116 132.10911560]
[188.11837769 143.11077881]
[172.31747437 142.78355408]
[161.43638611 131.32154846]
[146.43716431 131.16954041]
[131.43792725 131.01753235]
[144.52810669 138.34194946]
[157.61830139 145.66636658]
[170.70848083 152.99078369]
[183.79866028 160.31520081]
[198.77839661 161.09469604]
[213.30412292 164.83679199]
[226.79591370 171.39207458]
[238.71508789 180.49884033]
[248.58581543 191.79347229]
[256.01397705 204.82507324]
[260.70300293 219.07333374]
[262.46569824 233.96940613]
[261.23171997 248.91856384]
[257.05026245 263.32394409]
[250.08833313 276.61047363]
[240.62384033 288.24761963]
[229.03468323 297.77084351]
[215.78353882 304.79986572]
[201.39947510 309.05407715]
[186.45674133 310.36367798]
[171.55195618 308.67630005]
[157.28016663 304.05935669]
[144.21118164 296.69720459]
[132.86677551 286.88369751]
[123.69986725 275.01071167]
[117.07644653 261.55224609]
[113.26095581 247.04563904]
[112.40572357 232.07003784]
[114.54489136 217.22335815]
[119.59297180 203.09852600]
[117.87323761 188.19743347]
[116.15350342 173.29634094]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 18]
[2 17]
[3 16]
[4 15]
[6 13]
[7 12]
[21 57]
[22 56]
[23 55]
[25 53]
[27 51]
[28 50]
[29 49]
[30 48]
[87 102]
[88 101]
[89 100]
[90 99]
[91 98]
[111 122]
[112 121]
[113 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
