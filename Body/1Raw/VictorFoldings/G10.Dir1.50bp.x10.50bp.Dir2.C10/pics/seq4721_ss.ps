%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACUGAUUUUUUACCUGAGUAGGCCUAGAAAUAAACAUGCUAGCUUUUAUUCCAGUUCUAxxxxxxxxxxGUCUUUAGAUUUACAGUCCAAUGCUUCACUCAGCCAUUUUACCUCACCCCCACUGAUGUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[105.20849609 466.27172852]
[105.20849609 451.27172852]
[105.20849609 436.27172852]
[105.20849609 421.27172852]
[105.20849609 406.27172852]
[105.20849609 391.27172852]
[105.20849609 376.27172852]
[105.20849609 361.27172852]
[105.20849609 346.27172852]
[105.20849609 331.27172852]
[90.85647583 328.55975342]
[77.24835968 323.24230957]
[64.85289001 315.50091553]
[54.09733200 305.60064697]
[45.35276031 293.88095093]
[38.92125702 280.74420166]
[35.02546310 266.64160156]
[33.80088425 252.05799866]
[35.29117203 237.49501038]
[39.44657516 223.45379639]
[46.12558746 210.41789246]
[55.09977722 198.83648682]
[66.06159973 189.10897827]
[78.63492584 181.57116699]
[92.38796997 176.48370361]
[106.84807587 174.02305603]
[107.16013336 159.02630615]
[107.47219086 144.02954102]
[107.78424835 129.03279114]
[89.45796204 126.26312256]
[77.30919647 113.76901245]
[75.33621216 97.56873322]
[61.55383301 91.64876556]
[65.68212891 106.06948853]
[58.57320786 119.27793884]
[44.26318359 123.77497101]
[30.87663841 117.00737762]
[26.01383018 102.81748199]
[32.43564224 89.26165771]
[46.49760437 84.03632355]
[33.55954742 76.44641876]
[20.62149239 68.85650635]
[7.68343592 61.26660156]
[-5.25462008 53.67669296]
[-18.19267654 46.08678436]
[-31.50698662 53.74346161]
[-46.86582184 53.70113754]
[-60.13772964 45.97119522]
[-67.75263214 32.63294983]
[-67.66217041 17.27432442]
[-59.89066315 4.02671146]
[-46.52861404 -3.54634905]
[-31.17034721 -3.40774059]
[-17.94715881 4.40525150]
[-10.41601944 17.79097176]
[-10.60276794 33.14872742]
[2.33528829 40.73863602]
[15.27334404 48.32854462]
[28.21140099 55.91845322]
[41.14945602 63.50836182]
[54.08751297 71.09826660]
[67.47380066 77.86638641]
[81.25617981 83.78634644]
[88.13290405 78.24257660]
[96.51708984 75.46262360]
[99.00220490 60.66992188]
[101.02453613 45.80687332]
[102.58212280 30.88796043]
[104.13970184 15.96904850]
[105.69728088 1.05013645]
[92.17692566 -5.84655809]
[82.06385803 -17.16425705]
[76.72579193 -31.37233353]
[76.88465118 -46.54926300]
[82.51895142 -60.64249039]
[92.86670685 -71.74602509]
[106.52846527 -78.35820007]
[121.65658569 -79.58477020]
[136.20510864 -75.25986481]
[148.20646667 -65.96837616]
[156.03759766 -52.96691513]
[158.63937378 -38.01381683]
[155.65992737 -23.13136292]
[147.50222778 -10.33228683]
[135.26953125 -1.34755599]
[120.61619568 2.60771728]
[119.05861664 17.52663040]
[117.50102997 32.44554138]
[115.94345093 47.36445236]
[117.92538452 50.35433960]
[118.52052307 54.47107315]
[117.20708466 59.03476334]
[113.79491425 63.15503693]
[111.30979156 77.94774628]
[124.12296295 86.96228790]
[129.88978577 103.17777252]
[144.65583801 100.53890991]
[153.69871521 87.85568237]
[168.71118164 85.38984680]
[180.74697876 94.08900452]
[195.51303101 91.45014191]
[210.27908325 88.81127930]
[225.04513550 86.17241669]
[239.78294373 83.38008881]
[254.49090576 80.43460846]
[263.04452515 67.14509583]
[278.50744629 63.87801361]
[291.70578003 72.57166290]
[294.80920410 88.06825256]
[285.97650146 101.17393494]
[270.44796753 104.11334229]
[257.43640137 95.14257050]
[242.72842407 98.08805084]
[236.74874878 102.51400757]
[227.68400574 100.93846893]
[212.91795349 103.57733154]
[198.15190125 106.21620178]
[183.38583374 108.85506439]
[175.10810852 121.18448639]
[160.17080688 124.07101440]
[147.29470825 115.30496216]
[132.52865601 117.94383240]
[122.78099823 129.34484863]
[122.46894073 144.34159851]
[122.15688324 159.33836365]
[121.84483337 174.33511353]
[136.91403198 177.62568665]
[151.05355835 183.77708435]
[163.72619629 192.55358887]
[174.45083618 203.61985779]
[182.82075500 216.55358887]
[188.51902771 230.86177063]
[191.33053589 245.99937439]
[191.15010071 261.39016724]
[187.98637390 276.44860840]
[181.96147156 290.60223389]
[173.30627441 303.31320190]
[162.35156250 314.09896851]
[149.51535034 322.55047607]
[135.28700256 328.34768677]
[120.20849609 331.27172852]
[120.20849609 346.27172852]
[120.20849609 361.27172852]
[120.20849609 376.27172852]
[120.20849609 391.27172852]
[120.20849609 406.27172852]
[120.20849609 421.27172852]
[120.20849609 436.27172852]
[120.20849609 451.27172852]
[120.20849609 466.27172852]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[26 126]
[27 125]
[28 124]
[29 123]
[32 63]
[33 62]
[40 61]
[41 60]
[42 59]
[43 58]
[44 57]
[45 56]
[65 94]
[66 93]
[67 89]
[68 88]
[69 87]
[70 86]
[96 122]
[97 121]
[100 118]
[101 117]
[102 116]
[103 115]
[104 113]
[105 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
