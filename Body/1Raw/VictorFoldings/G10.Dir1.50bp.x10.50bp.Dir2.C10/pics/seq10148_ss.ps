%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAUAGCUUUUAUAGUAAAGAUACCUCUUUACGGACUCCACUUAUGACUCCCUAAAGCCCAxxxxxxxxxxCACAGUCGCAUCAUAAUCCUCUCUCAAGGACUUCAAACUCUACUCCCACUAAUAGCUUUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[168.89787292 401.99960327]
[167.96224976 387.02880859]
[167.02662659 372.05801392]
[166.09098816 357.08721924]
[165.15536499 342.11645508]
[164.21974182 327.14566040]
[163.28410339 312.17486572]
[160.33862305 297.46688843]
[155.43707275 283.29034424]
[150.53552246 269.11376953]
[145.63397217 254.93722534]
[134.16252136 245.43695068]
[136.96559143 229.86602783]
[132.06404114 215.68946838]
[127.16249847 201.51290894]
[113.69645691 195.25183105]
[108.52363586 180.94459534]
[115.18214417 166.86262512]
[110.28059387 152.68606567]
[105.37904358 138.50950623]
[93.16425323 139.74739075]
[80.72943115 137.06863403]
[69.33973694 130.47019958]
[60.23530197 120.35906982]
[45.59180069 123.60989380]
[30.94829750 126.86071777]
[16.30479622 130.11154175]
[1.66129482 133.36236572]
[-12.98220634 136.61318970]
[-27.62570763 139.86402893]
[-39.34097672 151.33940125]
[-55.06170654 146.67135620]
[-58.61576080 130.66195679]
[-46.34702682 119.78031158]
[-30.87653351 125.22052002]
[-16.23303223 121.96969604]
[-1.58953094 118.71887207]
[13.05397034 115.46804047]
[27.69747162 112.21721649]
[42.34097290 108.96639252]
[56.98447418 105.71556854]
[57.60845184 90.72855377]
[43.28585434 86.27173615]
[26.36552620 87.33888245]
[20.65607071 71.37522125]
[34.41532898 61.46971130]
[47.74267197 71.94913483]
[62.06526566 76.40595245]
[73.11267090 64.78278351]
[87.44515228 57.88965607]
[103.15933990 56.53833389]
[101.91246796 41.59024811]
[100.66558838 26.64216042]
[99.41871643 11.69407272]
[98.17184448 -3.25401449]
[96.92496490 -18.20210075]
[81.94834137 -19.57022476]
[67.43685913 -23.51840973]
[53.83152390 -29.92667580]
[41.54577255 -38.60028458]
[30.95296288 -49.27565002]
[22.37499237 -61.62836456]
[16.07254219 -75.28304291]
[12.23713112 -89.82472992]
[10.98531628 -104.81153107]
[12.35513783 -119.78800201]
[16.30496788 -134.29902649]
[22.71477699 -147.90364075]
[31.38977814 -160.18841553]
[42.06634521 -170.78001404]
[54.42003632 -179.35658264]
[68.07542419 -185.65748596]
[82.61755371 -189.49124146]
[97.60449219 -190.74136353]
[112.58081055 -189.36984253]
[127.09138489 -185.41836548]
[140.69526672 -179.00700378]
[152.97904968 -170.33061218]
[163.56944275 -159.65284729]
[172.14460754 -147.29818726]
[178.44396973 -133.64207458]
[182.27607727 -119.09951782]
[183.52449036 -104.11244202]
[182.15127563 -89.13627625]
[178.19815063 -74.62614441]
[171.78526306 -61.02298737]
[163.10746765 -48.74018860]
[152.42849731 -38.15100861]
[140.07287598 -29.57724380]
[126.41604614 -23.27943802]
[111.87305450 -19.44897652]
[113.11992645 -4.50088882]
[114.36680603 10.44719791]
[115.61367798 25.39528465]
[116.86054993 40.34337234]
[118.10742950 55.29145813]
[130.96583557 63.01554489]
[144.74821472 57.09558105]
[158.53059387 51.17561722]
[172.31297302 45.25565338]
[177.93711853 30.48593903]
[192.39175415 24.09537315]
[207.10118103 29.87536240]
[213.33856201 44.39674377]
[207.40338135 59.04424286]
[192.81686401 65.12775421]
[178.23294067 59.03803635]
[164.45056152 64.95800018]
[150.66816711 70.87796021]
[136.88578796 76.79792786]
[141.41131592 89.84715271]
[141.56367493 103.35862732]
[137.51606750 115.93639374]
[129.86602783 126.34027100]
[119.55560303 133.60795593]
[124.45715332 147.78451538]
[129.35870361 161.96107483]
[143.29316711 168.92301941]
[148.06207275 183.36988831]
[141.33905029 196.61135864]
[146.24060059 210.78791809]
[151.14215088 224.96447754]
[162.96418762 235.47875977]
[159.81053162 250.03567505]
[164.71208191 264.21221924]
[169.61363220 278.38879395]
[174.51518250 292.56533813]
[178.52047729 278.10998535]
[187.97140503 266.46179199]
[201.29132080 259.56399536]
[216.25816345 258.56723022]
[230.37513733 263.63784790]
[241.28721619 273.92990112]
[247.17401123 287.72650146]
[247.05346680 302.72601318]
[240.94570923 316.42620850]
[229.86964417 326.54156494]
[215.67300415 331.38464355]
[200.72410583 330.14752197]
[187.51676941 323.03652954]
[178.25489807 311.23922729]
[179.19052124 326.21002197]
[180.12615967 341.18081665]
[181.06178284 356.15161133]
[181.99740601 371.12240601]
[182.93304443 386.09320068]
[183.86866760 401.06396484]
[193.38400269 414.42025757]
[186.32955933 429.22454834]
[169.96234131 430.24746704]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 147]
[2 146]
[3 145]
[4 144]
[5 143]
[6 142]
[7 141]
[8 127]
[9 126]
[10 125]
[11 124]
[13 122]
[14 121]
[15 120]
[18 117]
[19 116]
[20 115]
[24 41]
[25 40]
[26 39]
[27 38]
[28 37]
[29 36]
[30 35]
[42 48]
[43 47]
[51 96]
[52 95]
[53 94]
[54 93]
[55 92]
[56 91]
[97 110]
[98 109]
[99 108]
[100 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
