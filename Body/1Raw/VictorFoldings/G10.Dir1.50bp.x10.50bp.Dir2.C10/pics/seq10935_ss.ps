%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAUAGCCCACUAAUCCAAACUCUAACACUAUGCUUAGGCGCUAUCACCACUCUGUUCGCAxxxxxxxxxxCUAUUCCUAGCCAUGCACUACUCACCAGACGCCUCAACCGCCUUUUCAUCAAUCGCCCACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 315.63848877]
[92.50000000 300.63848877]
[92.50000000 285.63848877]
[92.50000000 270.63848877]
[92.50000000 255.63850403]
[92.50000000 240.63850403]
[92.50000000 225.63850403]
[92.50000000 210.63850403]
[92.50000000 195.63850403]
[92.50000000 180.63850403]
[78.47036743 178.07235718]
[65.10845184 173.08486938]
[52.82866669 165.83071899]
[42.01185989 156.53488159]
[32.99350357 145.48568726]
[26.05328941 133.02577209]
[21.40646744 119.54160309]
[19.19715118 105.45137024]
[19.49386215 91.19207001]
[22.28739738 77.20593262]
[27.49111938 63.92673874]
[34.94363785 51.76632309]
[44.41382217 41.10182953]
[55.60795593 32.26400757]
[68.17887115 25.52695847]
[81.73669434 21.09962273]
[95.86093140 19.11931038]
[96.48490906 4.13229418]
[97.10888672 -10.85472202]
[88.53604889 1.45407450]
[76.32595825 10.16691399]
[61.89825821 14.27076149]
[46.93045807 13.28846645]
[33.16284180 7.33423948]
[22.19616699 -2.89962697]
[15.30551434 -16.22324944]
[13.29205608 -31.08750153]
[16.38989639 -45.76412964]
[24.23884773 -58.54669189]
[35.92632294 -67.94897461]
[50.09342957 -72.87777710]
[65.09296417 -72.76004028]
[79.18095398 -67.60944366]
[90.71939087 -58.02484894]
[98.36671448 -45.12064362]
[101.23383331 -30.39430237]
[106.72086334 -44.35469055]
[112.20790100 -58.31508255]
[117.69493103 -72.27547455]
[123.18196106 -86.23586273]
[109.76029968 -92.95637512]
[96.99510193 -100.85295105]
[84.98914337 -109.86201477]
[73.83909607 -119.91102600]
[63.63472366 -130.91906738]
[54.45819855 -142.79753113]
[46.38340378 -155.45074463]
[39.47535324 -168.77685547]
[33.78966904 -182.66854858]
[29.37212563 -197.01397705]
[26.25829506 -211.69766235]
[24.47324753 -226.60134888]
[24.03135300 -241.60504150]
[24.93617439 -256.58795166]
[27.18042183 -271.42944336]
[30.74602890 -286.00997925]
[35.60428619 -300.21221924]
[41.71607208 -313.92178345]
[49.03218460 -327.02832031]
[57.49371338 -339.42623901]
[67.03253174 -351.01577759]
[77.57183838 -361.70358276]
[89.02677155 -371.40362549]
[101.30509949 -380.03778076]
[114.30796814 -387.53656006]
[127.93068695 -393.83956909]
[142.06355286 -398.89605713]
[156.59280396 -402.66531372]
[171.40142822 -405.11700439]
[186.37020874 -406.23138428]
[201.37863159 -405.99945068]
[216.30583191 -404.42309570]
[231.03163147 -401.51501465]
[245.43746948 -397.29861450]
[259.40734863 -391.80786133]
[272.82882690 -385.08694458]
[285.59378052 -377.18997192]
[297.59945679 -368.18054199]
[308.74920654 -358.13119507]
[318.95324707 -347.12283325]
[328.12939453 -335.24411011]
[336.20379639 -322.59063721]
[343.11145020 -309.26431274]
[348.79672241 -295.37243652]
[353.21380615 -281.02688599]
[356.32720947 -266.34310913]
[358.11178589 -251.43936157]
[358.55322266 -236.43565369]
[357.64794922 -221.45277405]
[355.40325928 -206.61135864]
[351.83718872 -192.03091431]
[346.97851562 -177.82881165]
[340.86630249 -164.11943054]
[333.54977417 -151.01313782]
[325.08789062 -138.61546326]
[315.54870605 -127.02622986]
[305.00906372 -116.33873749]
[293.55383301 -106.63905334]
[281.27523804 -98.00525665]
[268.27215576 -90.50688171]
[254.64924622 -84.20428467]
[240.51622009 -79.14823151]
[225.98686218 -75.37940979]
[211.17814636 -72.92818451]
[196.20933533 -71.81427765]
[181.20092773 -72.04666138]
[166.27377319 -73.62346649]
[151.54806519 -76.53199005]
[137.14234924 -80.74883270]
[131.65531921 -66.78843689]
[126.16828918 -52.82804871]
[120.68125916 -38.86766052]
[115.19422150 -24.90727043]
[112.09590149 -10.23074436]
[111.47192383 4.75627136]
[110.84794617 19.74328804]
[126.13977051 23.34799194]
[140.44786072 29.83740997]
[153.23371887 38.96731949]
[164.01620483 50.39412308]
[172.38951111 63.68778992]
[178.03851318 78.34802246]
[180.75062561 93.82310486]
[180.42378235 109.53064728]
[177.07028198 124.87951660]
[170.81631470 139.29206848]
[161.89726257 152.22592163]
[150.64877319 163.19429016]
[137.49418640 171.78442383]
[122.92853546 177.67303467]
[107.50000000 180.63850403]
[107.50000000 195.63850403]
[107.50000000 210.63850403]
[107.50000000 225.63850403]
[107.50000000 240.63850403]
[107.50000000 255.63850403]
[107.50000000 270.63848877]
[107.50000000 285.63848877]
[107.50000000 300.63848877]
[107.50000000 315.63848877]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[27 126]
[28 125]
[29 124]
[46 123]
[47 122]
[48 121]
[49 120]
[50 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
