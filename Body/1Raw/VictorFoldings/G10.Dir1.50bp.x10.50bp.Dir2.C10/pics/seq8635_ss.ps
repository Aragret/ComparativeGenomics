%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUACGCCUAACCGCUAACAUUACUGCAGGCCACCUACUCAUGCACCUAAUUGGAAGCGCCAxxxxxxxxxxGUCAAUAGUACUUGCCGCAGUACUCUUAAAACUAGGCGGCUAUGGUAUAAUACGCCUCACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[161.41346741 403.26306152]
[161.41346741 388.26306152]
[161.41346741 373.26306152]
[161.41346741 358.26306152]
[161.41346741 343.26306152]
[161.41346741 328.26306152]
[161.41346741 313.26306152]
[161.41346741 298.26306152]
[161.41346741 283.26306152]
[161.41346741 268.26306152]
[158.62113953 253.52526855]
[153.13410950 239.56488037]
[147.35783386 225.72166443]
[141.29483032 212.00160217]
[135.23181152 198.28155518]
[129.16879272 184.56150818]
[123.10578918 170.84144592]
[117.04277039 157.12139893]
[102.82707977 159.54257202]
[88.44594574 158.47917175]
[74.74097443 153.99343872]
[62.51422882 146.34788513]
[52.48123169 135.98994446]
[45.22914124 123.52579498]
[41.18237305 109.68485260]
[40.57774353 95.27713776]
[43.45064545 81.14581299]
[49.63294601 68.11787415]
[58.76284409 56.95575714]
[70.30603790 48.31268692]
[64.52976227 34.46947098]
[58.75349045 20.62625122]
[52.97721863 6.78303385]
[47.20094681 -7.06018400]
[41.42467499 -20.90340233]
[35.19207764 -27.67145920]
[35.67554474 -35.09519958]
[30.18851471 -49.05558777]
[24.70148277 -63.01597977]
[11.10407448 -65.48774719]
[0.59775811 -74.29856110]
[-4.12951088 -87.05408478]
[-1.93793833 -100.36980438]
[6.49141407 -110.76894379]
[1.29599833 -124.84046173]
[-3.89941716 -138.91198730]
[-9.09483242 -152.98350525]
[-13.81068134 -138.74409485]
[-24.92244911 -128.66795349]
[-39.55388641 -125.36325073]
[-53.91769409 -129.68540955]
[-64.29583740 -140.51565552]
[-68.00197601 -155.05059814]
[-64.07677460 -169.52792358]
[-53.53627014 -180.20021057]
[-39.10883713 -184.30497742]
[-24.52896881 -180.77970886]
[-13.57067966 -170.53701782]
[-15.74751663 -185.37821960]
[-17.92435455 -200.21942139]
[-20.10119057 -215.06063843]
[-35.07654190 -216.96888733]
[-48.98127747 -222.84774780]
[-60.78356934 -232.26094055]
[-69.60762024 -244.50997925]
[-74.79860687 -258.68588257]
[-75.97134399 -273.73669434]
[-73.03880310 -288.54556274]
[-66.21858215 -302.01358032]
[-56.01680756 -313.14129639]
[-43.19050598 -321.10299683]
[-28.69147873 -325.30786133]
[-13.59564972 -325.44384766]
[0.97677249 -321.50085449]
[13.94441509 -313.77151489]
[24.34499359 -302.82937622]
[31.40671730 -289.48638916]
[34.60555649 -274.73275757]
[33.70413971 -259.66323853]
[28.76935577 -245.39613342]
[20.16739845 -232.99014282]
[8.53658962 -223.36584473]
[-5.25998545 -217.23747253]
[-3.08314848 -202.39625549]
[-0.90631157 -187.55505371]
[1.27052546 -172.71385193]
[4.97668648 -158.17890930]
[10.17210197 -144.10739136]
[15.36751747 -130.03587341]
[20.56293297 -115.96435547]
[36.47257996 -112.04154968]
[47.03281021 -99.29605865]
[47.94790649 -82.60342407]
[38.66187286 -68.50301361]
[44.14890289 -54.54262161]
[49.63593674 -40.58222961]
[55.26789093 -26.67967415]
[61.04416275 -12.83645630]
[66.82043457 1.00676119]
[72.59671021 14.84997940]
[78.37297821 28.69319725]
[84.14925385 42.53641510]
[99.50073242 40.39244461]
[114.88596344 42.27896500]
[129.26464844 48.06840897]
[141.66455078 57.36931992]
[151.24720764 69.55278778]
[157.36470032 83.79500580]
[159.60333252 99.13296509]
[157.81178284 114.52954102]
[152.11116028 128.94367981]
[142.88693237 141.40072632]
[130.76283264 151.05838013]
[136.82583618 164.77844238]
[142.88885498 178.49848938]
[148.95187378 192.21853638]
[155.01487732 205.93859863]
[161.07789612 219.65864563]
[166.26277161 223.92767334]
[168.17607117 229.36555481]
[167.09449768 234.07785034]
[172.58152771 248.03823853]
[175.25592041 233.27857971]
[182.28344727 220.02664185]
[193.00125122 209.53240967]
[206.39837646 202.78576660]
[221.21112061 200.42309570]
[236.04229736 202.66722107]
[249.49295044 209.30648804]
[260.29434204 219.71466064]
[267.42764282 232.90995789]
[270.22000122 247.64776611]
[268.40802002 262.53790283]
[262.16262817 276.17590332]
[252.07290649 287.27536011]
[239.09056091 294.78927612]
[224.44018555 298.00894165]
[209.50364685 296.63064575]
[195.68983459 290.78439331]
[184.30174255 281.02163696]
[176.41346741 268.26306152]
[176.41346741 283.26306152]
[176.41346741 298.26306152]
[176.41346741 313.26306152]
[176.41346741 328.26306152]
[176.41346741 343.26306152]
[176.41346741 358.26306152]
[176.41346741 373.26306152]
[176.41346741 388.26306152]
[176.41346741 403.26306152]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 122]
[12 121]
[13 118]
[14 117]
[15 116]
[16 115]
[17 114]
[18 113]
[30 102]
[31 101]
[32 100]
[33 99]
[34 98]
[35 97]
[37 96]
[38 95]
[39 94]
[44 90]
[45 89]
[46 88]
[47 87]
[58 86]
[59 85]
[60 84]
[61 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
