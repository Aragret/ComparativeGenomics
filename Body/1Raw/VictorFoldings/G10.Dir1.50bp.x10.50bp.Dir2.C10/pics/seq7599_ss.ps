%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAACUAACUAAUACUAACAUCUCAGACGCUCAGGAAAUAGAAACCGUCUGAACUAUCCUGxxxxxxxxxxUAUGUCCUCCCGUGAGGCCAAAUAUCAUUCUGAGGGGCCACAGUAAUUACAAACUUACUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[102.01174927 406.61117554]
[102.01174927 391.61117554]
[102.01174927 376.61117554]
[102.01174927 361.61117554]
[102.01174927 346.61117554]
[102.01174927 331.61117554]
[102.01174927 316.61117554]
[102.01174927 301.61117554]
[102.01174927 286.61117554]
[102.01174927 271.61117554]
[85.91364288 266.78524780]
[72.05379486 257.24887085]
[61.77160645 243.91044617]
[56.06481934 228.04634094]
[55.49264908 211.17889404]
[60.12104416 194.93026733]
[69.51528168 180.86648560]
[82.78077698 170.34643555]
[98.64824677 164.39064026]
[97.71261597 149.41984558]
[96.77699280 134.44905090]
[95.84136200 119.47826385]
[95.03555298 134.45660400]
[86.57916260 146.84568787]
[72.92399597 153.05346680]
[58.02919388 151.28007507]
[46.21331024 142.03968811]
[40.90219498 128.01142883]
[43.63574600 113.26260376]
[53.62139511 102.06944275]
[67.96394348 97.67726135]
[82.50283813 101.35828400]
[68.48612213 96.01676941]
[54.46940994 90.67526245]
[40.45269775 85.33374786]
[26.43598366 79.99223328]
[12.41927147 74.65071869]
[-1.59744203 69.30921173]
[-11.49562836 80.78970337]
[-24.72495651 88.18975067]
[-39.68791962 90.61575317]
[-54.57767105 87.77477264]
[-67.59619141 80.00986481]
[-77.17144775 68.25867462]
[-82.14716339 53.94022369]
[-81.92250061 38.78353119]
[-76.52459717 24.61884308]
[-66.60527039 13.15661144]
[-53.36233139 5.78095722]
[-38.39492035 3.38252831]
[-23.51043320 6.25094509]
[-10.50623989 14.03983307]
[-0.95266211 25.80864716]
[3.99665952 40.13624191]
[3.74407053 55.29249573]
[17.76078415 60.63401031]
[31.77749634 65.97551727]
[45.79420853 71.31703186]
[59.81092072 76.65854645]
[73.82763672 82.00006104]
[87.84434509 87.34156799]
[102.41705322 83.78681183]
[112.39978027 72.59104156]
[122.38250732 61.39527893]
[108.00802612 65.68180084]
[93.05274963 66.83927917]
[78.18988037 64.81561279]
[64.08847046 59.70188141]
[51.38328552 51.72829056]
[40.64623642 41.25375748]
[32.36064911 28.74979782]
[26.89949417 14.77926445]
[24.50860596 -0.02896460]
[25.29560661 -15.00830460]
[29.22506905 -29.48446846]
[36.12011337 -42.80582047]
[45.67036057 -54.37270355]
[57.44591141 -63.66444016]
[70.91669464 -70.26277161]
[85.47633362 -73.87067413]
[100.46942902 -74.32574463]
[115.22107697 -71.60749054]
[129.06723022 -65.83827972]
[141.38462830 -57.27780533]
[151.61880493 -46.31141663]
[159.30906677 -33.43275452]
[164.10925293 -19.22155380]
[165.80326843 -4.31751633]
[164.31486511 10.60845661]
[159.71104431 24.88447952]
[152.19905090 37.86792755]
[142.11531067 48.97587204]
[156.52752686 44.81798553]
[170.93974304 40.66009521]
[178.37516785 35.24103165]
[185.69515991 36.56897736]
[197.04167175 25.54322624]
[211.33056641 29.74760437]
[225.82617188 25.89044380]
[227.45616150 10.80046177]
[234.43067932 -2.67991090]
[245.80648804 -12.72756386]
[260.04510498 -17.98363495]
[275.22085571 -17.73728371]
[289.28137207 -12.02182770]
[300.32507324 -1.61023343]
[306.85836792 12.08941460]
[307.99771118 27.22435188]
[303.58901978 41.74770355]
[294.22848511 53.69530487]
[281.18209839 61.45133972]
[266.21426392 63.96686935]
[251.34922791 60.90168762]
[238.59738159 52.67033768]
[229.68331909 40.38603973]
[215.18772888 44.24320221]
[204.87803650 54.99306107]
[189.55232239 51.06457138]
[175.09762573 55.07231140]
[160.68540955 59.23020172]
[146.27319336 63.38808823]
[133.57827759 71.37800598]
[123.59554291 82.57376862]
[113.61281586 93.76953888]
[117.36691284 105.50252533]
[110.81214905 118.54264069]
[111.74777985 133.51342773]
[112.68341064 148.48422241]
[113.61903381 163.45501709]
[126.65287781 166.10234070]
[138.65187073 171.81503296]
[148.90759277 180.25021362]
[156.81590271 190.90443420]
[161.91255188 203.14370728]
[163.90036011 216.24130249]
[162.66661072 229.42076111]
[158.28942871 241.90208435]
[151.03280640 252.94778442]
[141.33071899 261.90649414]
[129.76116943 268.25137329]
[117.01174927 271.61117554]
[117.01174927 286.61117554]
[117.01174927 301.61117554]
[117.01174927 316.61117554]
[117.01174927 331.61117554]
[117.01174927 346.61117554]
[117.01174927 361.61117554]
[117.01174927 376.61117554]
[117.01174927 391.61117554]
[117.01174927 406.61117554]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[19 129]
[20 128]
[21 127]
[22 126]
[32 61]
[33 60]
[34 59]
[35 58]
[36 57]
[37 56]
[38 55]
[62 124]
[63 123]
[64 122]
[92 121]
[93 120]
[94 119]
[96 118]
[98 116]
[99 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
