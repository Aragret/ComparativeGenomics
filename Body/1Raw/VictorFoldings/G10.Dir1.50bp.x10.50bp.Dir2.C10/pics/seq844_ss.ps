%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUGUAGCUUACCUCCUCAAAGCAAUACACUGAAAAUGUUUAGACGGGCUCACAUCACCCCAxxxxxxxxxxCCUGAAGUUUAUAUUCUUAUCCUACCAGGCUUCGGAAUAAUCUCCCAUAUUGUAACUUACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 255.40827942]
[92.50000000 240.40827942]
[92.50000000 225.40827942]
[92.50000000 210.40827942]
[92.50000000 195.40827942]
[92.50000000 180.40827942]
[92.50000000 165.40827942]
[92.50000000 150.40827942]
[92.50000000 135.40827942]
[92.50000000 120.40828705]
[79.33142090 113.22577667]
[66.72029114 121.34732056]
[54.10916138 129.46885681]
[41.49803162 137.59040833]
[29.05859184 145.97254944]
[16.79622459 154.61166382]
[4.53385639 163.25077820]
[-7.72851181 171.88989258]
[-6.96945953 187.29856873]
[-14.68126488 200.66014099]
[-28.40311813 207.71098328]
[-43.75642395 206.20118713]
[-55.84200287 196.61253357]
[-60.80338669 182.00471497]
[-57.05741882 167.03904724]
[-45.79941940 156.49101257]
[-30.62178040 153.72645569]
[-16.36762810 159.62753296]
[-4.10525990 150.98841858]
[8.15710831 142.34928894]
[20.41947746 133.71017456]
[22.10877991 129.18008423]
[26.69817162 125.69170380]
[33.37649155 124.97927856]
[45.98761749 116.85773468]
[58.59874725 108.73619080]
[71.20987701 100.61464691]
[69.03303528 85.77344513]
[54.62082291 81.61555481]
[40.20860672 77.45767212]
[25.79639053 73.29978180]
[11.38417435 69.14189148]
[-4.39552975 73.60652924]
[-15.96162510 61.98080826]
[-11.41590500 46.22426987]
[4.56538439 42.54589462]
[15.54206181 54.72967911]
[29.95427704 58.88756561]
[44.36649323 63.04545212]
[58.77870941 67.20333862]
[73.19092560 71.36122894]
[87.51173401 73.37743378]
[97.56211090 80.56905365]
[101.83364868 90.41329956]
[110.34474182 78.06172943]
[118.85583496 65.71015930]
[109.93935394 49.19708252]
[110.32141876 30.53254890]
[119.80594635 14.56698704]
[135.84393311 5.40170193]
[134.90830994 -9.56908989]
[126.32528687 -22.85977364]
[133.25364685 -36.04487991]
[132.31802368 -51.01567078]
[131.38240051 -65.98646545]
[116.77648926 -69.97971344]
[104.25997162 -78.50119781]
[95.19055939 -90.62656403]
[90.55202484 -105.04054260]
[90.84752655 -120.17961121]
[96.04499817 -134.40159607]
[105.58067322 -146.16380310]
[118.42018890 -154.19036865]
[133.17080688 -157.61061096]
[148.23248291 -156.05354309]
[161.97145081 -149.68806458]
[172.89741516 -139.20463562]
[179.82519531 -125.74044037]
[182.00331116 -110.75596619]
[179.19552612 -95.87661743]
[171.70639038 -82.71639252]
[160.34825134 -72.70281982]
[146.35319519 -66.92208862]
[147.28881836 -51.95129776]
[148.22444153 -36.98050690]
[156.74053955 -24.76063347]
[149.87910461 -10.50471783]
[150.81472778 4.46607351]
[158.59413147 6.52088881]
[165.72595215 10.24629784]
[171.85653687 15.45757294]
[176.68190002 21.89630890]
[190.90867615 17.14249420]
[205.13546753 12.38867855]
[219.36224365 7.63486385]
[233.58901978 2.88104916]
[236.70889282 -13.32527733]
[247.49981689 -25.68859482]
[262.95806885 -30.91088676]
[278.85235596 -27.66219330]
[290.88186646 -16.91779137]
[305.00668335 -21.96654701]
[319.13146973 -27.01530457]
[332.01135254 -38.04005432]
[346.17074585 -28.71548653]
[341.13031006 -12.52813816]
[324.18023682 -12.89050102]
[310.05541992 -7.84174442]
[295.93063354 -2.79298830]
[294.36218262 10.80846119]
[287.03964233 22.45573997]
[275.34985352 29.83524132]
[261.55380249 31.45200729]
[248.34915161 26.93226433]
[238.34283447 17.10782814]
[224.11605835 21.86164284]
[209.88928223 26.61545753]
[195.66250610 31.36927223]
[181.43571472 36.12308884]
[180.16682434 51.04575348]
[172.93704224 64.23432922]
[160.93803406 73.40777588]
[146.19123840 76.95578003]
[131.20739746 74.22124481]
[122.69631195 86.57281494]
[114.18522644 98.92439270]
[124.72976685 88.25609589]
[138.48236084 82.26724243]
[153.47552490 81.81461334]
[167.56433105 86.96295166]
[178.73323059 96.97573853]
[185.38435364 110.42053223]
[186.56620789 125.37390137]
[182.10972595 139.69659424]
[172.65242004 151.33959961]
[159.54730225 158.63725281]
[144.66917419 160.54553223]
[130.14654541 156.79144287]
[118.05702209 147.91206360]
[110.13015747 135.17767334]
[107.50000000 120.40828705]
[107.50000000 135.40827942]
[107.50000000 150.40827942]
[107.50000000 165.40827942]
[107.50000000 180.40827942]
[107.50000000 195.40827942]
[107.50000000 210.40827942]
[107.50000000 225.40827942]
[107.50000000 240.40827942]
[107.50000000 255.40827942]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 37]
[12 36]
[13 35]
[14 34]
[15 31]
[16 30]
[17 29]
[18 28]
[38 51]
[39 50]
[40 49]
[41 48]
[42 47]
[54 126]
[55 125]
[56 124]
[60 88]
[61 87]
[63 85]
[64 84]
[65 83]
[92 119]
[93 118]
[94 117]
[95 116]
[96 115]
[101 109]
[102 108]
[103 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
