%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUCCCACAACACUUUCUCGGCCUAUCCGGAAUGCCCCGACGUUACUCGGACUACCCCGAUGCAxxxxxxxxxxCCCCCAUUAUGUAAAAUCCAUUGUCGCAUCCACCUUUAUUAUCAGUCUCUUCCCCACAACAAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[147.61215210 285.96801758]
[147.01200867 270.98004150]
[146.41186523 255.99205017]
[145.81172180 241.00405884]
[145.21157837 226.01606750]
[144.61143494 211.02807617]
[144.01129150 196.04008484]
[143.41114807 181.05209351]
[138.54812622 166.86227417]
[129.82876587 154.65684509]
[121.10939789 142.45140076]
[113.45529938 145.46078491]
[105.39629364 147.10211182]
[97.17489624 147.32597351]
[89.03852081 146.12564087]
[81.23200226 143.53723145]
[73.99028015 139.63865662]
[67.53127289 134.54721069]
[62.04935837 128.41613770]
[57.70949936 121.42993164]
[43.42521667 126.00805664]
[38.64188385 130.70248413]
[33.04420471 132.03306580]
[28.47701454 130.47119141]
[14.02099895 134.47413635]
[-0.43501633 138.47708130]
[-7.92039728 143.81161499]
[-15.22040653 142.41241455]
[-29.75362206 146.12530518]
[-44.28683853 149.83821106]
[-53.67381287 162.84837341]
[-69.70454407 163.47709656]
[-80.08161926 151.24206543]
[-76.84464264 135.52896118]
[-62.47674179 128.39154053]
[-47.99974060 135.30499268]
[-33.46652603 131.59210205]
[-18.93330956 127.87919617]
[-4.43796778 124.02107239]
[10.01804733 120.01811981]
[24.47406387 116.01516724]
[38.84709167 111.72377014]
[53.13137436 107.14564514]
[53.88747406 88.98349762]
[61.42251205 72.44086456]
[74.62877655 59.94966507]
[91.56482697 53.34621048]
[91.26469421 38.34921265]
[90.96456146 23.35221481]
[90.66442871 8.35521793]
[90.36429596 -6.64177895]
[89.01543427 -21.58100891]
[86.62445831 -36.38922501]
[84.23348236 -51.19743729]
[81.84251404 -66.00565338]
[75.99843597 -79.82038116]
[67.03659821 -91.84891510]
[58.07476044 -103.87744141]
[49.11292267 -115.90596771]
[33.44038773 -117.94242859]
[23.86455917 -130.51538086]
[26.06660843 -146.16551208]
[38.74009705 -155.60787964]
[54.36606979 -153.24047852]
[63.67391205 -140.46788025]
[61.14144897 -124.86780548]
[70.10328674 -112.83927917]
[79.06512451 -100.81074524]
[88.02696228 -88.78221893]
[86.43996429 -103.69802856]
[88.40359497 -118.56894684]
[93.80780792 -132.56159973]
[102.34975433 -144.89186096]
[113.55074310 -154.86872864]
[126.78308105 -161.93309021]
[141.30522156 -165.68908691]
[156.30334473 -165.92620850]
[170.93696594 -162.63119507]
[184.38601685 -155.98866272]
[195.89680481 -146.37089539]
[204.82427979 -134.31684875]
[210.66815186 -120.50202179]
[213.10092163 -105.70061493]
[211.98625183 -90.74208832]
[207.38661194 -76.46471405]
[199.55978394 -63.66859818]
[188.94435120 -53.07083130]
[176.13522339 -45.26530457]
[161.85020447 -40.68944550]
[146.88984680 -39.59968185]
[132.09251404 -42.05708313]
[118.28744507 -47.92393875]
[106.24826813 -56.87147141]
[96.65072632 -68.39662933]
[99.04170227 -53.58841324]
[101.43267822 -38.78019714]
[103.82365417 -23.97198296]
[112.87014008 -35.93697357]
[127.45253754 -39.45176315]
[140.95677185 -32.92216492]
[147.25779724 -19.30977631]
[143.49768066 -4.78870344]
[131.38188171 4.05479860]
[116.40571594 3.20962644]
[105.36128998 -6.94191122]
[105.66142273 8.05508614]
[105.96155548 23.05208397]
[106.26168823 38.04907990]
[106.56182098 53.04607773]
[123.12163544 58.61016464]
[136.54209900 69.79397583]
[145.00103760 85.07902527]
[147.34992981 102.38998413]
[143.26988220 119.37643433]
[133.31483459 133.73204041]
[142.03419495 145.93746948]
[150.75355530 158.14291382]
[149.64656067 143.18380737]
[151.51847839 128.30107117]
[156.29542542 114.08204651]
[163.78887939 101.08789062]
[173.70312500 89.83142853]
[185.64686584 80.75690460]
[199.14874268 74.22245026]
[213.67591858 70.48594666]
[228.65504456 69.69485474]
[243.49496460 71.88040924]
[257.61001587 76.95634460]
[270.44314575 84.72233582]
[281.48791504 94.87189484]
[290.30838013 107.00447083]
[296.55645752 120.64123535]
[299.98556519 135.24401855]
[300.46038818 150.23649597]
[297.96218872 165.02699280]
[292.58953857 179.03179932]
[284.55447388 191.69819641]
[274.17410278 202.52632141]
[261.85809326 211.08879089]
[248.09251404 217.04772949]
[233.42063904 220.16793823]
[218.42146301 220.32629395]
[203.68698120 217.51652527]
[189.79866028 211.84953308]
[177.30464172 203.54898071]
[166.69798279 192.94242859]
[158.39913940 180.45195007]
[158.99928284 195.43994141]
[159.59942627 210.42793274]
[160.19956970 225.41592407]
[160.79971313 240.40391541]
[161.39985657 255.39190674]
[162.00000000 270.37988281]
[162.60014343 285.36788940]
[169.27536011 300.95242310]
[156.14775085 311.68099976]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 117]
[10 116]
[11 115]
[20 43]
[21 42]
[24 41]
[25 40]
[26 39]
[28 38]
[29 37]
[30 36]
[47 109]
[48 108]
[49 107]
[50 106]
[51 105]
[52 97]
[53 96]
[54 95]
[55 94]
[56 69]
[57 68]
[58 67]
[59 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
