%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAAACAUCACUUUGGCUUCGAAGCCGCCGCCUGAUACUGGCAUUUUGUAGAUGUGGUUUGAxxxxxxxxxxUAUUAACCUACUGGGAGAACUCUCUGUGCUAGUAACCACGUUCUCCUGAUCAAAUAUCACUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[116.14318848 294.37261963]
[116.14318848 279.37261963]
[116.14318848 264.37261963]
[116.14318848 249.37261963]
[116.14318848 234.37261963]
[116.14318848 219.37261963]
[116.14318848 204.37261963]
[116.14318848 189.37261963]
[116.14318848 174.37261963]
[116.14318848 159.37261963]
[114.14713287 144.50602722]
[110.19052124 130.03726196]
[87.52127075 121.97064972]
[81.60044098 103.93412781]
[66.60755157 103.47219849]
[51.61466980 103.01027679]
[36.62178421 102.54834747]
[21.62889671 102.08642578]
[6.63205957 101.77844238]
[-8.36715031 101.62445068]
[-16.52339363 118.81598663]
[-33.28332520 129.41258240]
[-53.91296005 129.41307068]
[-72.02957153 117.96504211]
[-86.07154846 123.23978424]
[-100.11352539 128.51452637]
[-114.15550232 133.78926086]
[-124.14343262 146.79592896]
[-140.36387634 144.38150024]
[-146.13061523 129.02973938]
[-135.51135254 116.53321838]
[-119.43024445 119.74729156]
[-105.38826752 114.47254944]
[-91.34629059 109.19780731]
[-77.30431366 103.92306519]
[-78.38138580 88.96178436]
[-93.03411102 85.75278473]
[-107.68683624 82.54379272]
[-117.97461700 93.94805145]
[-132.59117126 98.66526794]
[-147.60469055 95.42653656]
[-158.97665405 85.10305786]
[-163.64802551 70.47179413]
[-160.36225891 55.46849060]
[-150.00318909 44.12894821]
[-135.35736084 39.50345612]
[-120.36441803 42.83624268]
[-109.05740356 53.23080826]
[-104.47783661 67.89106750]
[-89.82511139 71.10005951]
[-75.17239380 74.30905914]
[-64.25791168 63.26924133]
[-50.24443817 57.53926468]
[-35.49094772 57.75902939]
[-22.35774612 63.59284592]
[-12.82886505 73.83064270]
[-8.21315289 86.62523651]
[6.78605652 86.77923584]
[13.54855061 83.68393707]
[22.09082413 87.09353638]
[37.08370972 87.55546570]
[52.07659531 88.01738739]
[67.06948090 88.47931671]
[82.06237030 88.94123840]
[92.93768311 78.61033630]
[93.24565887 63.61349869]
[93.55363464 48.61666107]
[93.86161041 33.61982346]
[79.63677979 28.43014145]
[67.86933899 18.90091705]
[59.83574295 6.06580687]
[56.40741348 -8.68293095]
[57.95622635 -23.74546432]
[64.31418610 -37.48792267]
[74.79161835 -48.41962433]
[88.25201416 -55.35478210]
[103.23529053 -57.54112244]
[118.11618042 -54.74148560]
[131.28050232 -47.25955963]
[141.30030823 -35.90692139]
[147.08869934 -21.91502380]
[148.01780701 -6.80160379]
[143.98686218 7.79394865]
[135.43309021 20.28841782]
[123.28435516 29.32649612]
[108.85845184 33.92780304]
[108.55047607 48.92464066]
[108.24249268 63.92147827]
[107.93451691 78.91831207]
[113.57965851 83.85617065]
[119.48314667 70.06671906]
[134.42196655 71.42012787]
[137.75112915 86.04601288]
[124.86994171 93.73187256]
[130.51507568 98.66973114]
[145.33755493 96.36885071]
[160.16004944 94.06797791]
[174.98252869 91.76710510]
[189.80500793 89.46623230]
[204.62748718 87.16535187]
[219.44996643 84.86447906]
[209.32713318 73.79523468]
[211.46182251 58.94791031]
[224.29313660 51.17892456]
[238.43878174 56.16899490]
[243.55538940 70.26935577]
[235.90220642 83.16942596]
[250.88244629 82.39976501]
[265.86267090 81.63010406]
[274.21405029 68.55210876]
[288.66979980 62.91194916]
[303.67135620 66.87838745]
[313.45034790 78.92625427]
[314.24655151 94.42288971]
[305.75378418 107.40952301]
[291.23770142 112.89253235]
[276.28005981 108.76358795]
[266.63235474 96.61035156]
[251.65209961 97.38000488]
[236.67185974 98.14966583]
[221.75083923 99.68695831]
[206.92835999 101.98783875]
[192.10588074 104.28871155]
[177.28340149 106.58958435]
[162.46092224 108.89045715]
[147.63844299 111.19133759]
[132.81594849 113.49221039]
[124.65928650 126.08065033]
[128.61590576 140.54942322]
[133.53123474 126.37763214]
[143.70397949 115.35424805]
[157.43632507 109.31909180]
[172.43626404 109.27944946]
[186.20030212 115.24193573]
[196.43118286 126.21138763]
[201.42135620 140.35699463]
[200.33795166 155.31782532]
[193.36177063 168.59686279]
[181.65718079 177.97782898]
[167.17768860 181.89500427]
[152.33995056 179.69462585]
[139.62043762 171.74391174]
[131.14318848 159.37261963]
[131.14318848 174.37261963]
[131.14318848 189.37261963]
[131.14318848 204.37261963]
[131.14318848 219.37261963]
[131.14318848 234.37261963]
[131.14318848 249.37261963]
[131.14318848 264.37261963]
[131.14318848 279.37261963]
[131.14318848 294.37261963]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 129]
[12 128]
[14 64]
[15 63]
[16 62]
[17 61]
[18 60]
[19 58]
[20 57]
[24 35]
[25 34]
[26 33]
[27 32]
[36 51]
[37 50]
[38 49]
[65 89]
[66 88]
[67 87]
[68 86]
[95 127]
[96 126]
[97 125]
[98 124]
[99 123]
[100 122]
[101 121]
[107 120]
[108 119]
[109 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
