%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAGCAAACUCAUCACUAGACAUCGUACUACACGACACGUACUACGUUGUAGCCCACUUCCxxxxxxxxxxCACCCUAGGCUCACUAAACAUUCUACUACUCACUCUCACUGCCCAAGAACUAUCAAACUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[99.40515137 265.61679077]
[99.40515137 250.61677551]
[99.40515137 235.61677551]
[99.40515137 220.61677551]
[99.40515137 205.61677551]
[99.40515137 190.61677551]
[99.40515137 175.61677551]
[99.40515137 160.61677551]
[99.40515137 145.61677551]
[99.40515137 130.61677551]
[85.56193542 124.84050751]
[74.90030670 135.39179993]
[64.23867798 145.94308472]
[68.77700043 160.56028748]
[65.99113464 175.61012268]
[56.52125549 187.63426208]
[42.54346848 193.86964417]
[27.26976585 192.88342285]
[14.20993614 184.90223694]
[6.36503077 171.76008606]
[5.53775167 156.47694397]
[11.91820240 142.56478882]
[24.04020119 133.22048950]
[39.11820221 130.59133911]
[53.68738937 135.28146362]
[64.34901428 124.73017120]
[75.01064301 114.17888641]
[72.19466400 107.22760773]
[58.29202271 112.85934448]
[52.66049576 98.95661926]
[66.56270599 93.32505035]
[63.74673080 86.37377167]
[48.74753952 86.21773529]
[33.74835205 86.06169891]
[18.74916458 85.90566254]
[6.32764959 96.05876923]
[-9.32405472 92.53688049]
[-16.19930077 78.04168701]
[-9.02398872 63.69266510]
[6.69759703 60.49715424]
[18.90520096 70.90647125]
[33.90438843 71.06250763]
[48.90357590 71.21854401]
[63.90276718 71.37458038]
[68.06082916 56.96172333]
[72.21854401 42.55015182]
[59.44118500 34.69272614]
[46.66382599 26.83530045]
[33.88646698 18.97787476]
[17.22707367 15.83130360]
[15.63889599 -1.04809320]
[31.41898727 -7.24688625]
[41.74389267 6.20051718]
[54.52125168 14.05794239]
[67.29860687 21.91536903]
[80.07596588 29.77279472]
[93.60015869 23.28462982]
[95.46776581 8.40134907]
[97.33538055 -6.48193073]
[98.27101135 -21.45272255]
[98.27101135 -36.45272064]
[98.27101135 -51.45272064]
[98.27101135 -66.45272064]
[83.63179779 -70.05227661]
[70.27972412 -77.05124664]
[58.99106979 -87.04273224]
[50.42213821 -99.44583130]
[45.07112122 -113.53945160]
[43.24911499 -128.50419617]
[45.06204605 -143.47004700]
[50.40452194 -157.56690979]
[58.96593094 -169.97520447]
[70.24852753 -179.97352600]
[83.59635162 -186.98059082]
[98.23338318 -190.58901978]
[113.30863953 -190.58901978]
[127.94567108 -186.98059082]
[141.29350281 -179.97352600]
[152.57609558 -169.97520447]
[161.13749695 -157.56690979]
[166.47998047 -143.47004700]
[168.29290771 -128.50419617]
[166.47090149 -113.53945160]
[161.11988831 -99.44583130]
[152.55094910 -87.04273224]
[141.26229858 -77.05124664]
[127.91022491 -70.05227661]
[113.27101135 -66.45272064]
[113.27101135 -51.45272064]
[113.27101135 -36.45272064]
[113.27101135 -21.45272255]
[124.89184570 -30.93724632]
[139.83374023 -29.61829185]
[149.61338806 -18.24469757]
[148.67834473 -3.27386999]
[137.55947876 6.79444456]
[122.56958008 6.24391985]
[112.21866608 -4.61431742]
[110.35105133 10.26896191]
[108.48343658 25.15224266]
[137.46778870 95.22957611]
[152.42803955 96.32088470]
[167.38829041 97.41219330]
[182.34854126 98.50350952]
[187.45692444 84.29763031]
[196.20951843 71.99743652]
[207.95681763 62.51568985]
[221.82708740 56.55599213]
[236.79107666 54.56059647]
[251.73835754 56.67757034]
[265.55972290 62.74982452]
[277.22955322 72.32675934]
[285.88186646 84.69769287]
[290.87460327 98.94462585]
[291.83728027 114.01034546]
[288.69842529 128.77687073]
[281.69097900 142.14842224]
[271.33496094 153.13275146]
[258.39886475 160.91474915]
[243.84257507 164.91693115]
[228.74632263 164.84231567]
[214.23031616 160.69642639]
[201.37176514 152.78692627]
[191.12484741 141.70075989]
[184.24993896 128.26058960]
[181.25723267 113.46375275]
[166.29698181 112.37244415]
[151.33673096 111.28113556]
[136.37648010 110.18981934]
[130.88365173 115.29656219]
[143.48930359 123.42660522]
[158.43510437 124.70056152]
[169.46815491 134.86282349]
[171.96382141 149.65376282]
[164.87599182 162.87355042]
[151.17564392 168.98094177]
[136.60543823 165.41596985]
[127.27266693 153.67289734]
[127.08936310 138.67378235]
[119.89797974 125.51004028]
[114.40515137 130.61677551]
[114.40515137 145.61677551]
[114.40515137 160.61677551]
[114.40515137 175.61677551]
[114.40515137 190.61677551]
[114.40515137 205.61677551]
[114.40515137 220.61677551]
[114.40515137 235.61677551]
[114.40515137 250.61677551]
[114.40515137 265.61679077]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 27]
[12 26]
[13 25]
[32 44]
[33 43]
[34 42]
[35 41]
[46 56]
[47 55]
[48 54]
[49 53]
[57 100]
[58 99]
[59 98]
[60 91]
[61 90]
[62 89]
[63 88]
[101 129]
[102 128]
[103 127]
[104 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
