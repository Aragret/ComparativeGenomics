%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACCUAUCACACCCCAUCCUAAAGUAAGGUCAGCUAAAUAAGCUAUCGGGCCCAUACCCCxxxxxxxxxxUUAACAACAUAAAACCCUCAUUCACACGAGAAAACACCCUCAUGUUCAUACACCUAUCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[102.38370514 282.22665405]
[102.38370514 267.22665405]
[102.38370514 252.22666931]
[102.38370514 237.22666931]
[102.38370514 222.22666931]
[102.38370514 207.22666931]
[102.38370514 192.22666931]
[102.38370514 177.22666931]
[102.38370514 162.22666931]
[102.38370514 147.22666931]
[82.48033142 139.36872864]
[69.82875061 124.54660034]
[56.58616638 131.59173584]
[43.34358215 138.63687134]
[30.10099602 145.68200684]
[33.34453964 160.42588806]
[32.48880386 175.49806213]
[27.59728813 189.78005981]
[19.03297234 202.21208191]
[7.43139029 211.87158203]
[-6.34654617 218.04174805]
[-21.27842140 220.26473999]
[-36.25619507 218.37556458]
[-50.16841125 212.51443481]
[-61.98269272 203.11628723]
[-70.82234192 190.87850952]
[-76.03140259 176.70924377]
[-77.22332001 161.65992737]
[-74.30964661 146.84732056]
[-67.50660706 133.37063599]
[-57.31901932 122.22991180]
[-44.50287628 114.25187683]
[-30.00922012 110.02854919]
[-14.91357517 109.87332916]
[-0.33613989 113.79772949]
[12.64134407 121.51054382]
[23.05586052 132.43942261]
[36.29844666 125.39428711]
[49.54103088 118.34915161]
[62.78361893 111.30401611]
[61.12369537 101.21363831]
[62.15099716 91.03937531]
[48.49475479 84.83396912]
[34.83851242 78.62856293]
[21.18227196 72.42314911]
[5.71678925 76.68910980]
[-7.17580891 67.14131165]
[-7.60542345 51.10400772]
[4.75750923 40.87965393]
[20.42920494 44.31148911]
[27.38768005 58.76691055]
[41.04392242 64.97232056]
[54.70016098 71.17772675]
[68.35639954 77.38313293]
[83.90927887 64.58914185]
[103.77592468 61.28847122]
[108.08351135 46.92028809]
[112.39109039 32.55210495]
[108.94272614 17.11127281]
[120.00904083 7.14202452]
[106.33895874 0.90964472]
[93.64487457 -7.12615585]
[82.16328430 -16.81567383]
[72.10807037 -27.97840309]
[63.66656494 -40.40638351]
[56.99602509 -53.86809158]
[52.22071457 -68.11274719]
[49.42959976 -82.87497711]
[48.67467499 -97.87976837]
[49.97000504 -112.84760284]
[53.29145813 -127.49961853]
[58.57715607 -141.56288147]
[65.72863007 -154.77537537]
[74.61265564 -166.89097595]
[85.06372833 -177.68397522]
[96.88715363 -186.95330811]
[109.86265564 -194.52629089]
[123.74851990 -200.26184082]
[138.28605652 -204.05310059]
[153.20445251 -205.82945251]
[168.22576904 -205.55781555]
[183.07017517 -203.24322510]
[197.46113586 -198.92881775]
[211.13053894 -192.69494629]
[223.82374573 -184.65777588]
[235.30429077 -174.96701050]
[245.35829163 -163.80320740]
[253.79846191 -151.37429810]
[260.46752930 -137.91188049]
[265.24130249 -123.66670227]
[268.03082275 -108.90416718]
[268.78411865 -93.89929199]
[267.48718262 -78.93161011]
[264.16415405 -64.27994537]
[258.87692261 -50.21726227]
[251.72401428 -37.00553894]
[242.83866882 -24.89089584]
[232.38642883 -14.09902763]
[220.56201172 -4.83097601]
[207.58569336 2.74059868]
[193.69920349 8.47464371]
[179.16125488 12.26433563]
[164.24267578 14.03907776]
[149.22138977 13.76580429]
[134.37722778 11.44960880]
[138.13369751 25.86273384]
[126.75927734 36.85968781]
[122.45169067 51.22787476]
[118.14411163 65.59605408]
[130.36904907 72.46533966]
[139.89622498 83.71727753]
[145.15541077 98.26074219]
[145.02561951 114.44760132]
[159.52122498 118.30476379]
[174.01681519 122.16191864]
[188.51242065 126.01908112]
[202.05819702 117.87737274]
[217.37315369 121.77965546]
[225.37118530 135.41075134]
[221.30720520 150.68359375]
[207.59230042 158.53706360]
[192.36328125 154.31184387]
[184.65525818 140.51467896]
[170.15965271 136.65751648]
[155.66406250 132.80035400]
[141.16847229 128.94319153]
[135.22227478 133.51406860]
[146.09413147 143.84860229]
[156.96600342 154.18313599]
[167.83786011 164.51766968]
[181.61888123 170.44079590]
[188.43139648 183.80453491]
[185.12882996 198.43646240]
[173.23658752 207.57836914]
[158.24743652 207.00778198]
[147.08457947 196.98826599]
[144.90403748 182.14701843]
[137.71266174 168.98327637]
[130.52127075 155.81953430]
[123.32989502 142.65579224]
[117.38370514 147.22666931]
[117.38370514 162.22666931]
[117.38370514 177.22666931]
[117.38370514 192.22666931]
[117.38370514 207.22666931]
[117.38370514 222.22666931]
[117.38370514 237.22666931]
[117.38370514 252.22666931]
[117.38370514 267.22665405]
[117.38370514 282.22665405]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 40]
[13 39]
[14 38]
[15 37]
[42 54]
[43 53]
[44 52]
[45 51]
[56 109]
[57 108]
[58 107]
[60 105]
[113 126]
[114 125]
[115 124]
[116 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
