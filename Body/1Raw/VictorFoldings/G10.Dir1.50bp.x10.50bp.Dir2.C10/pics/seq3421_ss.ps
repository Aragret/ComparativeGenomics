%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUACAACCCUUCGCUGACGCCAUAAAACUCUUCACCAAAGAGCCCCUAAAACCCGCCACAUxxxxxxxxxxUCGCUCUAAGAUUAAAAAUGCCCUAGCCCACUUCUUACCACAAGGCACACCUACACCCCUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[179.12919617 93.66308594]
[164.35708618 96.26780701]
[153.16673279 106.09763336]
[138.23265076 100.87425232]
[123.46053314 103.47897339]
[108.68842316 106.08369446]
[94.06941223 109.44295502]
[79.64202881 113.54789734]
[65.21464539 117.65284729]
[50.78725815 121.75778961]
[36.35987473 125.86273193]
[21.93248940 129.96768188]
[34.24636841 138.53321838]
[37.08358002 153.26245117]
[28.83261299 165.78927612]
[14.17995071 168.99856567]
[1.44820070 161.06744385]
[-2.13109708 146.50074768]
[5.47569418 133.57177734]
[-9.34678745 135.87265015]
[-24.16926956 138.17352295]
[-38.31658554 143.15884399]
[-51.30696869 150.65884399]
[-59.03348160 165.12373352]
[-75.43039703 165.39431763]
[-83.62997437 151.19223022]
[-75.19718933 137.12738037]
[-58.80696869 137.66845703]
[-45.81658554 130.16845703]
[-60.81110382 129.76300049]
[-74.97501373 124.82502747]
[-86.97165680 115.82054138]
[-95.66887665 103.59931946]
[-100.24591827 89.31468964]
[-100.27083588 74.31471252]
[-95.74127960 60.01495361]
[-87.08470917 47.76490021]
[-75.11805725 38.72061157]
[-60.97062683 33.73560715]
[-45.97753525 33.28032684]
[-31.55370522 37.39773941]
[-19.06032753 45.69927597]
[-9.67642021 57.40151215]
[-4.28755617 71.40008545]
[-3.40229034 86.37393951]
[-7.10416555 100.90997314]
[-15.04383087 113.63639069]
[-26.47014427 123.35104370]
[-11.64766216 121.05016327]
[3.17481947 118.74929047]
[17.82754517 115.54029846]
[32.25492859 111.43534851]
[46.68231201 107.33040619]
[61.10969925 103.22546387]
[75.53708649 99.12051392]
[89.96446991 95.01557159]
[78.55807495 85.27420807]
[78.85202026 70.27708435]
[90.63137054 60.99016571]
[105.28301239 64.20407867]
[112.09361267 77.56880188]
[106.08369446 91.31157684]
[120.85581207 88.70685577]
[135.62792969 86.10213470]
[147.87487793 76.08600616]
[161.75236511 81.49568939]
[176.52447510 78.89096832]
[175.48809814 64.94651794]
[175.79895020 50.96762466]
[177.45402527 37.08414841]
[180.43785095 23.42504311]
[184.72259521 10.11717033]
[190.26835632 -2.71588087]
[197.02351379 -14.95494270]
[204.92523193 -26.48637390]
[213.90000916 -37.20311737]
[223.86437988 -47.00569153]
[234.72573853 -55.80311203]
[246.38308716 -63.51374054]
[258.72808838 -70.06604767]
[271.64602661 -75.39925385]
[285.01681519 -79.46392059]
[298.71627808 -82.22239685]
[312.61709595 -83.64916229]
[326.59014893 -83.73107910]
[340.50561523 -82.46748352]
[354.23422241 -79.87023163]
[367.64852905 -75.96354675]
[380.62387085 -70.78383636]
[393.03982544 -64.37931061]
[404.78103638 -56.80956268]
[415.73855591 -48.14500427]
[425.81063843 -38.46620941]
[434.90380859 -27.86316109]
[442.93365479 -16.43443298]
[449.82568359 -4.28625107]
[455.51599121 8.46848202]
[459.95178223 21.71123695]
[463.09197998 35.31896591]
[464.90750122 49.16522980]
[479.90039062 48.70330429]
[494.89328003 48.24137878]
[509.88613892 47.77945328]
[513.49780273 33.12139511]
[520.93121338 19.98186874]
[531.63476562 9.33591843]
[544.81420898 1.97354245]
[559.49151611 -1.55892134]
[574.57763672 -0.99934101]
[588.95294189 3.61075878]
[601.55072021 11.92927837]
[611.43621826 23.33892822]
[617.87573242 36.99303436]
[620.39154053 51.87837601]
[618.79687500 66.89035797]
[613.21008301 80.91499329]
[604.04577637 92.91156006]
[591.98394775 101.98983765]
[577.91967773 107.47615051]
[562.89672852 108.96337891]
[548.02972412 106.34116364]
[534.42205811 99.80409241]
[523.08343506 89.83725739]
[514.85522461 77.18025970]
[510.34808350 62.77233887]
[495.35519409 63.23426437]
[480.36230469 63.69618988]
[465.36941528 64.15811920]
[464.14239502 80.23254395]
[461.13708496 96.07198334]
[456.39050293 111.48030853]
[449.96124268 126.26670837]
[441.92871094 140.24806213]
[432.39218140 153.25120544]
[421.46960449 165.11505127]
[409.29602051 175.69258118]
[396.02203369 184.85273743]
[381.81188965 192.48196411]
[366.84136963 198.48564148]
[351.29574585 202.78929138]
[335.36743164 205.33943176]
[319.25360107 206.10432434]
[303.15368652 205.07432556]
[287.26705933 202.26199341]
[271.79037476 197.70196533]
[256.91531372 191.45051575]
[242.82609558 183.58485413]
[229.69720459 174.20220947]
[217.69129944 163.41857910]
[206.95712280 151.36730957]
[197.62771606 138.19749451]
[189.81869507 124.07205200]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 67]
[2 66]
[4 64]
[5 63]
[6 62]
[7 56]
[8 55]
[9 54]
[10 53]
[11 52]
[12 51]
[19 50]
[20 49]
[21 48]
[22 29]
[23 28]
[100 128]
[101 127]
[102 126]
[103 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
