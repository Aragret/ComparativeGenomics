%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCAAACCCCCCCUCCCCCGCUUCUGGCCACAGCACUUAAACACAUCUCUGCCAAACCCCxxxxxxxxxxAGCUGUCCCCACAUUAGGCUUAAAAACAGAUGCAAUUCCCGGACGUCUAAACCAAACCACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[105.87943268 151.44522095]
[97.11322784 163.61705017]
[88.34701538 175.78889465]
[79.58081055 187.96072388]
[70.81460571 200.13256836]
[62.17548752 212.39492798]
[53.66439819 224.74650574]
[45.15330887 237.09808350]
[36.64221954 249.44964600]
[28.13112831 261.80123901]
[33.41987991 276.38919067]
[29.09163857 291.29040527]
[16.81069946 300.77502441]
[1.29933763 301.19604492]
[-11.47801495 292.39157104]
[-16.60820389 277.74707031]
[-12.11856651 262.89370728]
[0.26453808 253.54286194]
[15.77955532 253.29013062]
[24.29064560 240.93856812]
[32.80173492 228.58699036]
[41.31282425 216.23541260]
[49.82391739 203.88385010]
[51.03724289 196.54399109]
[58.64276886 191.36636353]
[67.40897369 179.19451904]
[76.17517853 167.02268982]
[84.94139099 154.85084534]
[93.70759583 142.67901611]
[97.11057281 128.07011414]
[94.62545776 113.27741241]
[85.87400818 102.37311554]
[90.58184052 89.20770264]
[88.09671783 74.41500092]
[85.61160278 59.62229156]
[83.12648010 44.82958603]
[79.57171631 30.25688171]
[74.96615601 15.98142147]
[70.36058807 1.70596075]
[64.29757690 -12.01409245]
[56.84266663 -25.03040314]
[49.38775635 -38.04671097]
[41.93284607 -51.06302261]
[34.47793579 -64.07933044]
[20.40417099 -58.79489136]
[5.66494703 -55.83660507]
[-9.35795498 -55.28110504]
[-24.27540588 -57.14278030]
[-38.70100784 -61.37340546]
[-52.26110077 -67.86339569]
[-64.60445404 -76.44464874]
[-75.41133118 -86.89488983]
[-84.40181732 -98.94342804]
[-91.34304047 -112.27818298]
[-96.05519867 -126.55374146]
[-98.41623688 -141.40034485]
[-98.36500549 -156.43342590]
[-95.90281677 -171.26359558]
[-91.09346771 -185.50671387]
[-84.06151581 -198.79383850]
[-74.98910522 -210.78082275]
[-64.11124420 -221.15715027]
[-51.70969009 -229.65406799]
[-38.10567474 -236.05148315]
[-23.65156937 -240.18368530]
[-8.72177601 -241.94363403]
[6.29699087 -241.28573608]
[21.01570892 -238.22705078]
[35.05312729 -232.84680176]
[48.04563904 -225.28434753]
[59.65671539 -215.73558044]
[69.58559418 -204.44781494]
[77.57509613 -191.71345520]
[83.41828156 -177.86233521]
[86.96378326 -163.25325012]
[88.11977386 -148.26458740]
[86.85630798 -133.28460693]
[83.20610809 -118.70132446]
[77.26373291 -104.89247131]
[69.18309784 -92.21574402]
[59.17351151 -80.99948883]
[47.49424362 -71.53424072]
[54.94915390 -58.51793289]
[62.40406799 -45.50162125]
[69.85897827 -32.48531342]
[77.31388855 -19.46900368]
[79.60545349 -34.29292679]
[88.89430237 -46.07075882]
[102.77603912 -51.75384140]
[117.65741730 -49.87112808]
[129.68643188 -40.90995407]
[135.74942017 -27.18988800]
[134.27699280 -12.26233196]
[125.65028381 0.00876484]
[112.10227966 6.44706488]
[97.13985443 5.38603401]
[84.63604736 -2.89960361]
[89.24161530 11.37585735]
[93.84718323 25.65131760]
[101.03482819 12.48554039]
[114.93894196 6.85742617]
[129.26081848 11.31656456]
[137.51249695 23.84292221]
[135.95591736 38.76193619]
[125.29618835 49.31515121]
[110.36228943 50.72185135]
[97.91918945 42.34446716]
[100.40430450 57.13717270]
[102.88942719 71.92987823]
[105.37454224 86.72258759]
[114.12599182 97.62688446]
[109.41815948 110.79229736]
[111.90328217 125.58499908]
[118.32745361 112.03029633]
[126.75598907 99.62224579]
[136.98915100 88.65490723]
[148.78440857 79.38819885]
[161.86222839 72.04173279]
[175.91267395 66.78961182]
[190.60278320 63.75631714]
[205.58439636 63.01372147]
[220.50245667 64.57942963]
[235.00341797 68.41633606]
[248.74363708 74.43350983]
[261.39749146 82.48834991]
[272.66503906 92.38996124]
[282.27932739 103.90368652]
[290.01245117 116.75665283]
[295.68115234 130.64427185]
[299.15109253 145.23739624]
[300.34002686 160.19020081]
[299.21981812 175.14831543]
[295.81695557 189.75724792]
[290.21212769 203.67076111]
[282.53814697 216.55912781]
[272.97689819 228.11691284]
[261.75494385 238.07019043]
[249.13824463 246.18309021]
[235.42582703 252.26333618]
[220.94264221 256.16683960]
[206.03193665 257.80108643]
[191.04707336 257.12734985]
[176.34318542 254.16157532]
[162.26873779 248.97407532]
[149.15730286 241.68778992]
[137.31958008 232.47537231]
[127.03614044 221.55517578]
[118.55067444 209.18598938]
[112.06428528 195.66093445]
[107.73069763 181.30058289]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 29]
[2 28]
[3 27]
[4 26]
[5 25]
[6 23]
[7 22]
[8 21]
[9 20]
[10 19]
[30 113]
[31 112]
[33 110]
[34 109]
[35 108]
[36 107]
[37 99]
[38 98]
[39 97]
[40 86]
[41 85]
[42 84]
[43 83]
[44 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
