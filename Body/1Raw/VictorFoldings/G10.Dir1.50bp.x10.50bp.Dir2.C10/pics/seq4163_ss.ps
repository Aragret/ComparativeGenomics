%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUCUUCCUAGGAACAACAUAUGACGCACUCUCCCCUGAACUCUACACAACAUAUUUUGUCxxxxxxxxxxACUACGGUCAAUGCUCUGAAAUCUGUGGAGCAAACCACAGUUUCAUGCCCAUCGUCCUAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[105.28813934 431.84451294]
[105.28813934 416.84451294]
[105.28813934 401.84451294]
[105.28813934 386.84451294]
[105.28813934 371.84451294]
[105.28813934 356.84451294]
[105.28813934 341.84451294]
[105.28813934 326.84451294]
[105.28813934 311.84451294]
[105.28813934 296.84451294]
[90.31207275 292.59701538]
[77.12010193 284.30563354]
[66.77909088 272.63128662]
[60.12804031 258.50885010]
[57.71001434 243.07237244]
[59.72782135 227.56388855]
[66.02700043 213.23355103]
[76.10765839 201.23884583]
[89.16409302 192.55114746]
[104.14918518 187.87693787]
[103.83712769 172.88018799]
[95.30710602 164.24618530]
[94.96185303 151.71224976]
[103.53514099 142.01933289]
[103.53514099 127.01932526]
[79.79666138 113.00482941]
[82.34052277 89.00128937]
[73.32299042 77.01445770]
[64.30545807 65.02761841]
[56.59386826 60.00933838]
[55.22810745 52.69631195]
[46.46189880 40.52447510]
[37.69569397 28.35263634]
[28.92948532 16.18079948]
[15.80768871 23.48388100]
[1.92676711 29.21419716]
[-12.52555561 33.29425430]
[-27.35383034 35.66887665]
[-42.35751724 36.30594635]
[-57.33371353 35.19685364]
[-72.07987976 32.35659027]
[-86.39659119 27.82357025]
[-100.09023285 21.65909767]
[-112.97561646 13.94654179]
[-124.87847137 4.79020500]
[-135.63783264 -5.68608379]
[-145.10820007 -17.34064484]
[-153.16146851 -30.01586533]
[-159.68876648 -43.54032516]
[-164.60179138 -57.73111725]
[-167.83412170 -72.39633942]
[-169.34201050 -87.33764648]
[-169.10510254 -102.35298920]
[-167.12657166 -117.23928833]
[-163.43319702 -131.79522705]
[-158.07492065 -145.82395935]
[-151.12420654 -159.13577271]
[-142.67504883 -171.55061340]
[-132.84172058 -182.90058899]
[-121.75720215 -193.03222656]
[-109.57140350 -201.80848694]
[-96.44911957 -209.11070251]
[-82.56781769 -214.84008789]
[-68.11521912 -218.91917419]
[-53.28678894 -221.29281616]
[-38.28305817 -221.92887878]
[-23.30693817 -220.81878662]
[-8.56096172 -217.97753906]
[5.75544882 -213.44355774]
[19.44867897 -207.27818298]
[32.33354187 -199.56475830]
[44.23579025 -190.40763855]
[54.99445343 -179.93061829]
[64.46403503 -168.27543640]
[72.51647186 -155.59967041]
[79.04286194 -142.07478333]
[83.95494080 -127.88365936]
[87.18627930 -113.21822357]
[88.69318390 -98.27680969]
[88.45526886 -83.26148987]
[86.47575378 -68.37532043]
[82.78140259 -53.81962204]
[77.42218781 -39.79124451]
[70.47058868 -26.47990799]
[62.02059937 -14.06562996]
[52.18651581 -2.71630096]
[41.10132217 7.41459322]
[49.86753082 19.58642960]
[58.63373566 31.75826645]
[67.39994049 43.93010330]
[76.29228973 56.01009369]
[85.30982208 67.99692535]
[94.32735443 79.98375702]
[104.33677673 78.00770569]
[114.83662415 81.10092163]
[123.25730896 89.21008301]
[127.23149109 100.99370575]
[142.16580200 99.59140015]
[157.10009766 98.18910217]
[172.03440857 96.78679657]
[186.96871948 95.38449097]
[195.28295898 91.44429016]
[202.22779846 94.11167908]
[217.18804932 93.02036285]
[232.14830017 91.92905426]
[247.10855103 90.83774567]
[262.06878662 89.74643707]
[277.02905273 88.65512085]
[287.17074585 76.53401184]
[302.92010498 75.21759796]
[314.93331909 85.48689270]
[316.08316040 101.24929810]
[305.68740845 113.15326691]
[289.91372681 114.13637543]
[278.12036133 103.61537170]
[263.16009521 104.70668030]
[248.19985962 105.79799652]
[233.23960876 106.88930511]
[218.27935791 107.98061371]
[203.31910706 109.07192230]
[188.37101746 110.31880188]
[173.43670654 111.72109985]
[158.50241089 113.12340546]
[143.56809998 114.52571106]
[128.63378906 115.92801666]
[118.53514099 127.01932526]
[118.53514099 142.01933289]
[128.11785889 157.70854187]
[118.83388519 172.56813049]
[119.14594269 187.56489563]
[133.18342590 191.14405823]
[145.79954529 198.23934937]
[156.13200378 208.35853577]
[163.47647095 220.80300903]
[167.33459473 234.71594238]
[167.44783020 249.14131165]
[163.81472778 263.08956909]
[156.69058228 275.60552979]
[146.56954956 285.83383179]
[134.15039062 293.07730103]
[120.28813934 296.84451294]
[120.28813934 311.84451294]
[120.28813934 326.84451294]
[120.28813934 341.84451294]
[120.28813934 356.84451294]
[120.28813934 371.84451294]
[120.28813934 386.84451294]
[120.28813934 401.84451294]
[120.28813934 416.84451294]
[120.28813934 431.84451294]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[20 130]
[21 129]
[24 127]
[25 126]
[27 93]
[28 92]
[29 91]
[31 90]
[32 89]
[33 88]
[34 87]
[97 125]
[98 124]
[99 123]
[100 122]
[101 121]
[103 120]
[104 119]
[105 118]
[106 117]
[107 116]
[108 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
