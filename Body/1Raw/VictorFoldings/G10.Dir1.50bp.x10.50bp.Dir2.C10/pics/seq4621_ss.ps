%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAAAUAAGCUAUCGGGCCCAUACCCCGAAAAUGUUGGUUAUACCCUUCCCGUACUAAUUAAxxxxxxxxxxAAGGACUGCAAAACCCCACUCUGCAUCAACUGAACGCAAAUCAGCCACUUUAAUUAAGCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-35.24223328 173.16261292]
[-40.96200180 161.42428589]
[-45.66522217 149.24299622]
[-60.09260559 153.34794617]
[-74.51998901 157.45289612]
[-88.94737244 161.55783081]
[-103.37475586 165.66278076]
[-117.80214691 169.76773071]
[-132.22952271 173.87266541]
[-146.65690613 177.97761536]
[-161.08430481 182.08256531]
[-166.02655029 186.62313843]
[-171.67288208 187.76626587]
[-176.18870544 186.04678345]
[-190.77244568 189.55595398]
[-205.35620117 193.06510925]
[-219.93995667 196.57427979]
[-231.54707336 207.32534790]
[-245.73126221 202.78022766]
[-257.33837891 213.53129578]
[-271.52255249 208.98617554]
[-285.90704346 213.23902893]
[-300.05435181 218.22434998]
[-314.20169067 223.20967102]
[-328.34899902 228.19499207]
[-342.49630737 233.18031311]
[-347.82550049 247.88180542]
[-361.38369751 255.67346191]
[-376.76907349 252.87632751]
[-386.71716309 240.81109619]
[-386.53076172 225.17463684]
[-376.29791260 213.34997559]
[-360.85021973 210.92036438]
[-347.48162842 219.03300476]
[-333.33432007 214.04768372]
[-319.18701172 209.06236267]
[-305.03967285 204.07704163]
[-290.89236450 199.09170532]
[-302.87680054 190.07101440]
[-303.50665283 175.08424377]
[-292.32135010 165.08978271]
[-277.49966431 167.39562988]
[-269.87924194 180.31573486]
[-275.03173828 194.40243530]
[-264.46774292 183.90237427]
[-249.24041748 188.19648743]
[-238.67643738 177.69641113]
[-223.44911194 181.99053955]
[-208.86537170 178.48136902]
[-194.28161621 174.97219849]
[-179.69786072 171.46302795]
[-165.18923950 167.65516663]
[-150.76185608 163.55023193]
[-136.33447266 159.44528198]
[-121.90708923 155.34033203]
[-107.47970581 151.23539734]
[-93.05232239 147.13044739]
[-78.62493134 143.02549744]
[-64.19754791 138.92056274]
[-49.77016449 134.81561279]
[-52.34742737 120.82043457]
[-53.61981583 106.64692688]
[-53.57643127 92.41648865]
[-52.21764374 78.25099945]
[-49.55509186 64.27179718]
[-45.61157990 50.59860992]
[-40.42088699 37.34854889]
[-34.02746964 24.63511086]
[-26.48609161 12.56718063]
[-17.86134529 1.24812365]
[-8.22709846 -9.22511005]
[2.33412647 -18.76281738]
[13.73187256 -27.28330421]
[25.86851501 -34.71359634]
[38.64010620 -40.99004364]
[51.93724823 -46.05889893]
[65.64605713 -49.87673569]
[79.64911652 -52.41086197]
[93.82647705 -53.63956833]
[108.05671692 -53.55233383]
[122.21794891 -52.14990234]
[136.18887329 -49.44428635]
[149.84985352 -45.45866013]
[163.08384705 -40.22716141]
[175.77752686 -33.79460144]
[187.82215881 -26.21607208]
[199.11459351 -17.55648613]
[209.55809021 -7.89001369]
[220.74638367 -17.88111115]
[231.93467712 -27.87220764]
[243.12297058 -37.86330414]
[239.33964539 -52.69384766]
[242.89303589 -67.58115387]
[252.96662903 -79.10423279]
[267.24557495 -84.61516571]
[282.44866943 -82.84757996]
[295.08236694 -74.20764923]
[302.24353027 -60.68077469]
[302.28656006 -45.37532806]
[295.20159912 -31.80838776]
[282.61669922 -23.09753990]
[267.42379761 -21.24447250]
[253.11407471 -26.67500877]
[241.92578125 -16.68391037]
[230.73748779 -6.69281387]
[219.54917908 3.29828286]
[232.88735962 22.64253616]
[243.12242126 43.79320908]
[250.01533508 66.25640106]
[253.40515137 89.50756073]
[253.21270752 113.00373077]
[268.07931519 114.99978638]
[282.94589233 116.99584961]
[297.81250000 118.99190521]
[309.24615479 108.32392883]
[324.86471558 107.55281830]
[337.29357910 117.04267120]
[340.66421509 132.31266785]
[333.38513184 146.15278625]
[318.89324951 152.02813721]
[304.03121948 147.16456604]
[295.81643677 133.85850525]
[280.94982910 131.86244202]
[266.08325195 129.86639404]
[251.21664429 127.87033081]
[248.30676270 140.59968567]
[244.32734680 153.03627014]
[239.30711365 165.09036255]
[233.28227234 176.67506409]
[226.29624939 187.70681763]
[218.39944458 198.10607910]
[209.64878845 207.79783630]
[200.10740662 216.71220398]
[189.84408569 224.78489685]
[178.93284607 231.95770264]
[167.45239258 238.17887878]
[155.48550415 243.40357971]
[143.11846924 247.59413147]
[130.44049072 250.72029114]
[117.54299164 252.75952148]
[104.51897430 253.69712830]
[91.46237183 253.52635193]
[78.46733856 252.24839783]
[65.62758636 249.87249756]
[53.03571320 246.41580200]
[40.78252411 241.90321350]
[28.95638657 236.36727905]
[17.64258194 229.84793091]
[6.92269993 222.39218140]
[-3.12595081 214.05378723]
[-12.43090439 204.89289856]
[-20.92505836 194.97557068]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 60]
[4 59]
[5 58]
[6 57]
[7 56]
[8 55]
[9 54]
[10 53]
[11 52]
[14 51]
[15 50]
[16 49]
[17 48]
[19 46]
[21 44]
[22 38]
[23 37]
[24 36]
[25 35]
[26 34]
[88 106]
[89 105]
[90 104]
[91 103]
[111 125]
[112 124]
[113 123]
[114 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
