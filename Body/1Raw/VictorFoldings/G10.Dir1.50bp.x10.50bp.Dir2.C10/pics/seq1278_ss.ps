%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAACUCACCUGAGUUGUAAAAAACUCCAGUUGACACAAAAUAGACUACGAAAGUGGCUUUxxxxxxxxxxUGCACGAAACGGGAUCAAACAACCCCCUAGGAAUCACCUCCCAUUCCGAUAAAAUCACCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[102.15281677 268.64184570]
[102.15281677 253.64183044]
[102.15281677 238.64183044]
[102.15281677 223.64183044]
[102.15281677 208.64183044]
[102.15281677 193.64183044]
[102.15281677 178.64183044]
[102.15281677 163.64183044]
[102.15281677 148.64183044]
[102.15281677 133.64183044]
[95.97702789 129.38629150]
[87.46574402 141.73773193]
[75.11443329 133.22625732]
[83.62545776 120.87519836]
[77.44966888 116.61965179]
[63.43295670 121.96116638]
[49.41624451 127.30267334]
[39.27596664 139.44703674]
[24.62773705 136.74911499]
[10.61102486 142.09063721]
[-3.40568805 147.43214417]
[-17.36607742 152.91917419]
[-31.26863480 158.55113220]
[-45.17118835 164.18309021]
[-59.07374573 169.81504822]
[-65.00394440 184.46456909]
[-79.58838654 190.55303955]
[-94.17438507 184.46829224]
[-100.10832977 169.82028198]
[-93.86970520 155.29943848]
[-79.15978241 149.52069092]
[-64.70570374 155.91249084]
[-50.80314636 150.28053284]
[-36.90058899 144.64857483]
[-22.99803543 139.01661682]
[-17.94678688 133.55488586]
[-8.74720097 133.41543579]
[5.26951218 128.07391357]
[19.28622627 122.73240662]
[28.42393494 110.97011566]
[44.07472992 113.28596497]
[58.09144211 107.94445038]
[72.10815430 102.60293579]
[74.59327698 87.81023407]
[63.09147263 78.18170166]
[51.58966827 68.55317688]
[38.48337173 76.16900635]
[23.56217003 78.83986664]
[8.62786770 76.24324799]
[-4.51614428 68.69270325]
[-14.28266239 57.09999084]
[-19.49233246 42.86499405]
[-19.51605988 27.70665550]
[-14.35098267 13.45541859]
[-4.62080622 1.83218861]
[8.49950218 -5.75947189]
[23.42560196 -8.40283394]
[38.35509491 -5.77869749]
[51.48516846 1.79605985]
[61.23030472 13.40674877]
[66.41373444 27.65132332]
[66.40952301 42.80968094]
[61.21819305 57.05137634]
[72.72000122 66.67990112]
[84.22180176 76.30842590]
[97.67776489 69.67993164]
[97.05378723 54.69291306]
[82.76812744 49.49787521]
[71.56133270 39.22771835]
[65.14235687 25.44856262]
[64.49004364 10.26162910]
[69.70386505 -4.01718283]
[79.98875427 -15.21045971]
[93.77634430 -21.61130714]
[108.96411896 -22.24364281]
[123.23606110 -17.01104164]
[134.41580200 -6.71143436]
[140.79850769 7.08456230]
[141.41085815 22.27315903]
[136.15948486 36.53820419]
[125.84518433 47.70438385]
[112.04080200 54.06893539]
[112.66477966 69.05595398]
[125.28961182 83.87490082]
[126.52122498 101.24936676]
[140.93344116 97.09147644]
[155.30162048 92.78389740]
[169.62422180 88.32707977]
[176.33209229 77.26099396]
[188.40258789 73.86655426]
[199.18112183 79.44602203]
[213.59333801 75.28813171]
[228.00555420 71.13024139]
[242.41777039 66.97235870]
[243.06970215 52.62610626]
[248.12176514 39.20597839]
[257.06549072 28.02487373]
[269.01235962 20.17224312]
[282.78219604 16.40793800]
[297.01953125 17.08871078]
[310.32717896 22.13443375]
[321.40332031 31.03728294]
[329.16882324 42.91280746]
[343.66439819 39.05564880]
[352.92163086 25.95283699]
[368.94531250 25.16482544]
[379.44348145 37.29610825]
[376.36282349 53.04060364]
[362.06655884 60.32048416]
[347.52157593 53.55124283]
[333.02597046 57.40840530]
[331.83297729 73.07788086]
[325.34597778 87.42071533]
[314.32937622 98.70239258]
[300.09658813 105.55175781]
[284.35333252 107.12760925]
[268.99337769 103.22198486]
[255.87071228 94.28742218]
[246.57566833 81.38457489]
[232.16345215 85.54245758]
[217.75123596 89.70034790]
[203.33901978 93.85823822]
[191.90895081 107.13804626]
[174.08103943 102.64967346]
[159.75843811 107.10649109]
[154.27066040 112.12944031]
[145.09132385 111.50369263]
[130.67910767 115.66158295]
[145.32041931 118.92227936]
[160.20762634 117.08624268]
[174.32383728 122.15898132]
[184.63714600 133.05097961]
[188.93249512 147.42282104]
[186.28729248 162.18774414]
[177.26968384 174.17451477]
[163.81648254 180.80862427]
[148.81716919 180.66519165]
[135.49330139 173.77502441]
[126.70658112 161.61798096]
[124.34420013 146.80557251]
[117.15281677 133.64183044]
[117.15281677 148.64183044]
[117.15281677 163.64183044]
[117.15281677 178.64183044]
[117.15281677 193.64183044]
[117.15281677 208.64183044]
[117.15281677 223.64183044]
[117.15281677 238.64183044]
[117.15281677 253.64183044]
[117.15281677 268.64184570]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[15 43]
[16 42]
[17 41]
[19 39]
[20 38]
[21 37]
[22 35]
[23 34]
[24 33]
[25 32]
[44 65]
[45 64]
[46 63]
[66 83]
[67 82]
[85 128]
[86 127]
[87 125]
[88 124]
[91 122]
[92 121]
[93 120]
[94 119]
[103 111]
[104 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
