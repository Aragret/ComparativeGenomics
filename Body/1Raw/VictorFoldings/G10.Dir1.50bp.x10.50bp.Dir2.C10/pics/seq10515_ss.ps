%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUCUCCUCCUAUCCCUCAACCCCGACAUCAUUACCGGGUUUUCCUCUUGUAAAUAUAGUUxxxxxxxxxxUAAAAUCACCUUCCACCCUUACUACACAAUCAAAGACGCCCUCGGCUUACUUCUCUUCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[14.11040020 276.30996704]
[1.95950699 269.85372925]
[-6.03040934 282.54867554]
[-14.02032566 295.24359131]
[-21.74440956 308.10198975]
[-29.19932175 321.11831665]
[-36.65423203 334.13461304]
[-44.10914230 347.15093994]
[-51.56405258 360.16723633]
[-59.01896286 373.18356323]
[-58.42104721 389.57180786]
[-72.45657349 398.05328369]
[-86.68700409 389.90301514]
[-86.47328186 373.50527954]
[-72.03527069 365.72863770]
[-64.58036041 352.71234131]
[-57.12545013 339.69601440]
[-49.67053986 326.67971802]
[-42.21562958 313.66339111]
[-34.76071930 300.64709473]
[-35.14697647 295.82772827]
[-32.46477890 290.72506714]
[-26.71525574 287.25369263]
[-18.72533798 274.55874634]
[-10.73542309 261.86383057]
[-36.17992783 241.12852478]
[-57.80986023 216.44001770]
[-75.01934052 188.48989868]
[-87.32630920 158.06105042]
[-94.38602448 126.00585175]
[-96.00074768 93.22219086]
[-110.96099854 92.13088226]
[-125.92124176 91.03957367]
[-140.88150024 89.94825745]
[-149.44180298 102.70038605]
[-163.23837280 109.44948578]
[-178.55998230 108.38008118]
[-191.28521729 99.77984619]
[-197.99102783 85.96219635]
[-196.87361145 70.64400482]
[-188.23353577 57.94579315]
[-174.39492798 51.28331757]
[-159.08030701 52.44874954]
[-146.40924072 61.12859344]
[-139.79017639 74.98801422]
[-124.82993317 76.07932281]
[-109.86968231 77.17063141]
[-94.90943909 78.26194763]
[-93.55809021 68.41682434]
[-91.70977783 58.65279770]
[-89.36925507 48.99493027]
[-86.54251862 39.46801758]
[-83.23683167 30.09652138]
[-79.46067810 20.90450478]
[-75.22375488 11.91556835]
[-70.53694153 3.15278935]
[-65.41227722 -5.36133242]
[-59.86290741 -13.60493755]
[-53.90309143 -21.55685997]
[-47.54812241 -29.19668198]
[-40.81432343 -36.50478745]
[-33.71898270 -43.46241760]
[-26.28031158 -50.05170441]
[-18.51741600 -56.25572968]
[-10.45022488 -62.05856705]
[-2.09944963 -67.44531250]
[6.51346731 -72.40214539]
[15.36641216 -76.91632843]
[24.43665695 -80.97627258]
[33.70090866 -84.57156372]
[43.13538742 -87.69296265]
[52.71586609 -90.33245087]
[62.41774750 -92.48326111]
[72.21612549 -94.13986969]
[82.08583832 -95.29801178]
[92.00154114 -95.95472717]
[101.93778229 -96.10832977]
[111.86904907 -95.75841522]
[121.76984406 -94.90589142]
[131.61474609 -93.55294037]
[141.37846375 -91.70303345]
[151.03594971 -89.36093140]
[160.56240845 -86.53264618]
[169.93336487 -83.22542572]
[179.12475586 -79.44777679]
[188.11300659 -75.20938873]
[196.87501526 -70.52114868]
[205.38830566 -65.39508820]
[213.63101196 -59.84437943]
[221.58195496 -53.88326645]
[229.22074890 -47.52705383]
[236.52775574 -40.79206085]
[243.48422241 -33.69558334]
[250.07229614 -26.25584030]
[256.27505493 -18.49193192]
[262.07656860 -10.42379475]
[267.46197510 -2.07214189]
[272.41738892 6.54158306]
[276.93011475 15.39526463]
[280.98858643 24.46616936]
[284.58236694 33.73101044]
[287.70223999 43.16599655]
[290.34014893 52.74690628]
[292.48937988 62.44913864]
[294.14440918 72.24778748]
[295.30093384 82.11768341]
[295.95602417 92.03349304]
[296.10800171 101.96976471]
[295.75646973 111.90097046]
[294.90234375 121.80162811]
[293.54779053 131.64630127]
[291.69628906 141.40972900]
[289.35260010 151.06683350]
[303.67520142 155.52365112]
[317.99780273 159.98046875]
[333.47366333 156.69290161]
[343.32727051 167.86231995]
[357.64987183 172.31913757]
[373.51904297 168.18374634]
[384.84075928 180.04757690]
[379.96823120 195.70613098]
[363.91387939 199.05123901]
[353.19305420 186.64173889]
[338.87045288 182.18492126]
[324.41903687 185.79125977]
[313.54098511 174.30305481]
[299.21838379 169.84625244]
[284.89578247 165.38943481]
[279.85583496 178.19279480]
[273.93054199 190.61125183]
[267.14910889 202.58367920]
[259.54486084 214.05116272]
[251.15530396 224.95722961]
[242.02168274 235.24819946]
[232.18896484 244.87342834]
[221.70556641 253.78552246]
[210.62307739 261.94061279]
[198.99606323 269.29858398]
[186.88174438 275.82318115]
[174.33975220 281.48233032]
[161.43182373 286.24810791]
[148.22151184 290.09713745]
[134.77383423 293.01040649]
[121.15499115 294.97357178]
[107.43200684 295.97702026]
[93.67243958 296.01580811]
[79.94401550 295.08969116]
[66.31432343 293.20327759]
[52.85044098 290.36584473]
[39.61864853 286.59133911]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 25]
[3 24]
[4 23]
[5 20]
[6 19]
[7 18]
[8 17]
[9 16]
[10 15]
[31 48]
[32 47]
[33 46]
[34 45]
[113 128]
[114 127]
[115 126]
[117 124]
[118 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
