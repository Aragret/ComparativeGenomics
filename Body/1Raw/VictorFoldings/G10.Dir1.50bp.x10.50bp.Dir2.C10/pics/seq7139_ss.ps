%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUACGCCAAAAUCCAUUUCACUAUCAUAUUCAUCGGCGUAAAUCUAACUUUCUUCCCACAxxxxxxxxxxCUCACCAUUGGCAGCCUAGCAUUAGCAGGAAUACCUUUCCUCACAGGUUUCUACUCCAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[103.20565796 266.79086304]
[103.20565796 251.79086304]
[103.20565796 236.79086304]
[103.20565796 221.79086304]
[103.20565796 206.79086304]
[103.20565796 191.79086304]
[103.20565796 176.79086304]
[103.20565796 161.79086304]
[103.20565796 146.79086304]
[103.20565796 131.79086304]
[91.02229309 128.95652771]
[81.48439789 121.90315247]
[75.86171722 112.19696045]
[74.64749146 101.69444275]
[77.54357147 92.19746399]
[65.65119171 83.05573273]
[53.75881195 73.91400146]
[41.86643219 64.77226257]
[29.97405434 55.63053131]
[19.79650497 66.66337585]
[8.67094231 76.73949432]
[-3.31305671 85.77774811]
[-16.05900002 93.70536804]
[-29.46426582 100.45851898]
[-43.42091751 105.98284149]
[-57.81658554 110.23384094]
[-72.53536224 113.17729950]
[-87.45873260 114.78951263]
[-102.46654510 115.05751038]
[-117.43795776 113.97911835]
[-132.25244141 111.56302643]
[-146.79069519 107.82868958]
[-160.93568420 102.80617523]
[-174.57350159 96.53592682]
[-187.59436035 89.06841278]
[-199.89340210 80.46378326]
[-211.37161255 70.79129791]
[-221.93656921 60.12884140]
[-231.50320435 48.56226730]
[-239.99450684 36.18470383]
[-247.34208679 23.09580803]
[-253.48680115 9.40096474]
[-258.37918091 -4.78955889]
[-261.97979736 -19.36150742]
[-264.25970459 -34.19755173]
[-265.20053101 -49.17824554]
[-264.79470825 -64.18296051]
[-263.04547119 -79.09089661]
[-259.96694946 -93.78200531]
[-255.58387756 -108.13802338]
[-249.93159485 -122.04333496]
[-243.05558777 -135.38600159]
[-235.01121521 -148.05859375]
[-225.86326599 -159.95906067]
[-215.68537903 -170.99159241]
[-204.55950928 -181.06736755]
[-192.57522583 -190.10525513]
[-179.82904053 -198.03248596]
[-166.42356873 -204.78523254]
[-152.46675110 -210.30912781]
[-138.07095337 -214.55969238]
[-123.35209656 -217.50270081]
[-108.42867279 -219.11445618]
[-93.42085266 -219.38198853]
[-78.44947052 -218.30314636]
[-63.63506699 -215.88661194]
[-49.09692001 -212.15182495]
[-34.95208740 -207.12887573]
[-21.31445885 -200.85821533]
[-8.29383469 -193.39030457]
[4.00494576 -184.78529358]
[15.48285961 -175.11245728]
[26.04749107 -164.44967651]
[35.61378098 -152.88281250]
[44.10469818 -140.50498962]
[51.45188522 -127.41587067]
[57.59618378 -113.72084045]
[62.48812103 -99.53016663]
[66.08831024 -84.95810699]
[68.36775970 -70.12199402]
[69.30812836 -55.14127350]
[68.90183258 -40.13656998]
[67.15214539 -25.22869110]
[64.07316589 -10.53767014]
[59.68966675 3.81820703]
[54.03695679 17.72335243]
[47.16054153 31.06581116]
[39.11578751 43.73815155]
[51.00816727 52.87988281]
[62.90054703 62.02161789]
[74.79293060 71.16335297]
[86.68531036 80.30508423]
[113.15222168 75.43683624]
[131.95132446 100.21958923]
[146.88563538 98.81728363]
[161.81994629 97.41497803]
[176.75424194 96.01267242]
[188.39941406 77.13674164]
[214.18125916 75.60810089]
[227.70544434 69.11993408]
[236.51188660 55.28596878]
[252.88172913 56.26581573]
[259.97509766 71.05149841]
[250.49491882 84.43276978]
[234.19360352 82.64412689]
[220.66941833 89.13229370]
[223.76774597 103.80881500]
[238.76043701 104.27685547]
[253.75312805 104.74490356]
[268.74581909 105.21294403]
[283.73852539 105.68098450]
[296.36856079 95.78849030]
[311.94363403 99.63523102]
[318.51583862 114.27031708]
[311.04354858 128.46696472]
[295.25888062 131.33471680]
[283.27047729 120.67368317]
[268.27780151 120.20563507]
[253.28509521 119.73759460]
[238.29240417 119.26955414]
[223.29969788 118.80151367]
[210.39987183 127.16314697]
[196.09167480 127.74624634]
[184.41650391 121.44127655]
[178.15655518 110.94698334]
[163.22224426 112.34928894]
[148.28793335 113.75158691]
[133.35362244 115.15389252]
[147.13201904 121.08314514]
[162.10108948 120.12049866]
[175.85493469 126.10649872]
[185.35174561 137.71728516]
[188.49127197 152.38505554]
[184.57916260 166.86592102]
[174.48062134 177.95732117]
[160.42900085 183.20634460]
[145.53193665 181.45208740]
[133.08401489 173.08255005]
[125.83818054 159.94871521]
[125.39704132 144.95460510]
[118.20565796 131.79086304]
[118.20565796 146.79086304]
[118.20565796 161.79086304]
[118.20565796 176.79086304]
[118.20565796 191.79086304]
[118.20565796 206.79086304]
[118.20565796 221.79086304]
[118.20565796 236.79086304]
[118.20565796 251.79086304]
[118.20565796 266.79086304]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[15 92]
[16 91]
[17 90]
[18 89]
[19 88]
[94 128]
[95 127]
[96 126]
[97 125]
[99 106]
[100 105]
[107 121]
[108 120]
[109 119]
[110 118]
[111 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
