%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCUCGGAGCAGAACCCAACCUCCGAGCAGUACAUGCUAAGACUUCACCAGUCAAAGCGAACxxxxxxxxxxCCAAACCUGCAUUAAAAAUUUCGGUUGGGGCGACCUCGGAGCAGAACCCAACCUCCGAGCAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[49.69377136 388.03500366]
[49.69377136 373.03500366]
[49.69377136 358.03500366]
[49.69377136 343.03500366]
[49.69377136 328.03500366]
[49.69377136 313.03500366]
[49.69377136 298.03500366]
[49.69377136 283.03500366]
[49.69377136 268.03500366]
[49.69377136 253.03500366]
[43.13617325 249.39524841]
[30.02097321 242.11570740]
[23.46337509 238.47595215]
[10.73371029 246.41041565]
[-1.99595344 254.34486389]
[-14.72561741 262.27932739]
[-27.45528030 270.21377563]
[-40.18494415 278.14825439]
[-52.91460800 286.08270264]
[-51.71856308 301.34140015]
[-57.76124573 315.40359497]
[-69.65409088 325.03784180]
[-84.66421509 328.03027344]
[-99.34239960 323.69329834]
[-110.31570435 313.02346802]
[-115.06254578 298.47265625]
[-112.49212646 283.38452148]
[-103.19512177 271.22622681]
[-89.30791473 264.79162598]
[-74.02166748 265.55938721]
[-60.84906769 273.35305786]
[-48.11940384 265.41857910]
[-35.38973999 257.48413086]
[-22.66007805 249.54966736]
[-9.93041325 241.61520386]
[2.79925036 233.68074036]
[15.52891445 225.74627686]
[30.18579674 219.87031555]
[43.66704178 220.66711426]
[53.47518158 226.56161499]
[57.67464066 212.16146851]
[53.80993271 197.77697754]
[65.10137939 186.69483948]
[63.94802856 179.34980774]
[69.53462219 172.04699707]
[74.02507019 157.73490906]
[78.51551819 143.42282104]
[83.00595856 129.11073303]
[70.79998016 116.84014893]
[66.29221344 100.12988281]
[70.67107391 83.38536835]
[59.59196472 73.27332306]
[48.51285934 63.16128540]
[37.43375015 53.04924393]
[21.40632629 52.34129715]
[12.08377361 39.28489685]
[16.61755943 23.89579773]
[31.52975082 17.97920036]
[45.38098907 26.07381058]
[47.54579163 41.97013855]
[58.62490082 52.08217621]
[69.70401001 62.19421768]
[80.78311157 72.30625916]
[95.46744537 63.73104095]
[113.80276489 63.10311508]
[119.15462494 49.09034729]
[116.85033417 33.43784714]
[128.61936951 24.30882263]
[133.97122192 10.29605770]
[139.32308960 -3.71670842]
[144.67494202 -17.72947502]
[132.89620972 -8.44178104]
[119.07730865 -2.60755563]
[104.20639038 -0.64397335]
[89.34677887 -2.69144106]
[75.56102753 -8.60355377]
[63.83488846 -17.95756721]
[55.00682831 -30.08461761]
[49.70810699 -44.11756516]
[48.31760788 -59.05297470]
[50.93476105 -73.82289124]
[57.37242126 -87.37120056]
[67.17026520 -98.72911072]
[79.62770844 -107.08448792]
[93.85395813 -111.83986664]
[108.83177948 -112.65522766]
[123.49018097 -109.47225952]
[136.78100586 -102.51856995]
[147.75390625 -92.29136658]
[155.62425232 -79.52196503]
[159.82926941 -65.12342834]
[160.06828308 -50.12533188]
[156.32580566 -35.60406876]
[166.98602295 -46.15678787]
[177.64622498 -56.70951080]
[184.64910889 -72.14958954]
[201.42437744 -69.69462585]
[203.70921326 -52.89534760]
[188.19895935 -46.04930115]
[177.53874207 -35.49657822]
[166.87854004 -24.94385719]
[158.68771362 -12.37761497]
[153.33584595 1.63515055]
[147.98399353 15.64791679]
[142.63214111 29.66068268]
[145.31922913 44.31089783]
[133.16738892 54.44220734]
[127.81552887 68.45497131]
[137.11685181 80.22295380]
[151.98687744 78.25250244]
[162.84472656 66.44206238]
[178.83750916 67.71107483]
[187.69692993 81.08605957]
[182.62678528 96.30687714]
[167.51647949 101.69741821]
[153.95732117 93.12251282]
[139.08731079 95.09296417]
[137.24789429 108.72839355]
[130.94209290 120.50507355]
[121.21296692 129.06455994]
[109.47614288 133.53199768]
[97.31805420 133.60118103]
[92.82760620 147.91326904]
[88.33715820 162.22535706]
[83.84671021 176.53744507]
[79.50153351 190.89430237]
[83.06587219 206.30877686]
[72.07479858 216.36093140]
[67.87533569 230.76107788]
[76.24912262 218.31602478]
[88.46001434 209.60429382]
[102.95254517 205.73562622]
[117.88061523 207.20283508]
[131.34265137 213.81900024]
[141.62380981 224.74136353]
[147.41444397 238.57858276]
[147.97692871 253.56802368]
[143.23962402 267.80032349]
[133.80596924 279.46246338]
[120.87765503 287.06896973]
[106.10152435 289.65084839]
[91.35980988 286.87921143]
[78.53035736 279.10714722]
[69.24741364 267.32467651]
[64.69377136 253.03500366]
[64.69377136 268.03500366]
[64.69377136 283.03500366]
[64.69377136 298.03500366]
[64.69377136 313.03500366]
[64.69377136 328.03500366]
[64.69377136 343.03500366]
[64.69377136 358.03500366]
[64.69377136 373.03500366]
[64.69377136 388.03500366]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[13 37]
[14 36]
[15 35]
[16 34]
[17 33]
[18 32]
[19 31]
[40 129]
[41 128]
[43 126]
[45 125]
[46 124]
[47 123]
[48 122]
[51 63]
[52 62]
[53 61]
[54 60]
[65 108]
[66 107]
[68 105]
[69 104]
[70 103]
[71 102]
[93 101]
[94 100]
[95 99]
[109 117]
[110 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
