%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGUAAAUUUAACUGUUAGUCCAAAGAGGAACAGCUCUUUGGACACUAGGAAAAAACCUUGUAGxxxxxxxxxxCCCUAGACCAAACCUACGCCAAAAUCCAUUUCACUAUCAUAUUCAUCGGCGUAAAUCUAACUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 247.01350403]
[92.50000000 232.01350403]
[92.50000000 217.01350403]
[92.50000000 202.01350403]
[92.50000000 187.01350403]
[92.50000000 172.01350403]
[92.50000000 157.01350403]
[92.50000000 142.01350403]
[92.50000000 127.01351166]
[92.50000000 112.01351166]
[85.89408875 98.54644012]
[74.03245544 89.36485291]
[62.17081451 80.18326569]
[46.69839096 81.98375702]
[34.79980087 72.50334930]
[33.17865372 57.74166107]
[21.31701660 48.56007004]
[9.45538044 39.37847900]
[1.85862422 44.48277664]
[-6.70250177 47.66448593]
[-15.75111485 48.75587845]
[-24.78538704 47.70538330]
[-33.30637741 44.57998657]
[-40.84559250 39.56100464]
[-46.99073029 32.93360138]
[-51.40824127 25.07059860]
[-53.86141205 16.41150856]
[-68.85447693 15.95554066]
[-83.84754944 15.49957275]
[-98.84061432 15.04360580]
[-113.83368683 14.58763790]
[-128.82675171 14.13167095]
[-143.81982422 13.67570305]
[-158.81289673 13.21973610]
[-173.80595398 12.76376820]
[-188.79902649 12.30780125]
[-200.13568115 23.31941795]
[-215.93685913 23.00604439]
[-226.82800293 11.55359840]
[-226.34759521 -4.24338675]
[-214.78063965 -15.01284027]
[-198.98962402 -14.36543560]
[-188.34306335 -2.68526697]
[-173.34999084 -2.22929955]
[-158.35691833 -1.77333224]
[-143.36386108 -1.31736481]
[-128.37078857 -0.86139745]
[-113.37771606 -0.40543002]
[-98.38465118 0.05053737]
[-83.39157867 0.50650477]
[-68.39851379 0.96247214]
[-53.40544510 1.41843951]
[-46.15910339 -13.64446735]
[-33.17729187 -24.17410278]
[-37.08404541 -38.65641022]
[-40.99079514 -53.13872147]
[-44.89754868 -67.62103271]
[-48.80430222 -82.10334015]
[-63.86665726 -81.63205719]
[-78.63156891 -84.64768219]
[-92.30278778 -90.98760223]
[-104.14304352 -100.30989075]
[-113.51379395 -112.11183167]
[-119.90969849 -125.75694275]
[-122.98582458 -140.50936890]
[-122.57628632 -155.57353210]
[-118.70317078 -170.13703918]
[-111.57534790 -183.41450500]
[-101.57721710 -194.68986511]
[-89.24795532 -203.35508728]
[-75.25247192 -208.94285583]
[-60.34552002 -211.15182495]
[-45.33101654 -209.86286926]
[-31.01867294 -205.14549255]
[-18.18033791 -197.25411987]
[-7.50836611 -186.61428833]
[0.42171735 -173.79983521]
[5.18225241 -159.50178528]
[6.51650953 -144.49124146]
[4.35253429 -129.57769775]
[-1.19297349 -115.56541443]
[-9.82095146 -103.21006012]
[-21.06610298 -93.17794800]
[-34.32199097 -86.01009369]
[-30.41523933 -71.52778625]
[-26.50848579 -57.04547501]
[-22.60173416 -42.56316376]
[-18.69498253 -28.08085442]
[0.85344106 -24.36377335]
[15.97159767 -11.28039837]
[22.51816177 7.71090603]
[18.63697052 27.51684380]
[30.49860573 36.69843292]
[42.36024094 45.88002396]
[57.05704117 43.74936295]
[69.21722412 52.89182663]
[71.35240173 68.32162476]
[83.21404266 77.50321960]
[95.07567596 86.68480682]
[123.17707062 81.02396393]
[138.17630005 80.87195587]
[153.17553711 80.71994781]
[167.95347595 78.14849854]
[182.12245178 73.22506714]
[196.29142761 68.30164337]
[204.54959106 54.54729080]
[220.47045898 52.57100296]
[231.84088135 63.88881683]
[229.93846130 79.81867218]
[216.22256470 88.14054871]
[201.21485901 82.47061920]
[187.04588318 87.39404297]
[172.87690735 92.31747437]
[187.49298096 95.68943787]
[200.12509155 103.77831268]
[209.30310059 115.64272308]
[213.95887756 129.90188599]
[213.55058289 144.89633179]
[208.12574768 158.88099670]
[198.31568909 170.22837830]
[185.26211548 177.61784363]
[170.48419189 180.18942261]
[155.70176697 177.64382935]
[142.63522339 170.27734375]
[132.80523682 158.94723511]
[127.35579681 144.97212219]
[126.92114258 129.97842407]
[131.55183411 115.71109009]
[140.70895386 103.83055878]
[153.32754517 95.71917725]
[138.32830811 95.87118530]
[123.32907867 96.02319336]
[136.56501770 103.08081055]
[149.80096436 110.13842010]
[164.38232422 113.65747070]
[175.19906616 124.04969025]
[179.29879761 138.47856140]
[175.56250000 153.00578308]
[165.00999451 163.66619873]
[150.52153015 167.55010986]
[136.05169678 163.59739685]
[125.54997253 152.88696289]
[121.88276672 138.34098816]
[114.69138336 125.17725372]
[107.50000000 112.01351166]
[107.50000000 127.01351166]
[107.50000000 142.01350403]
[107.50000000 157.01350403]
[107.50000000 172.01350403]
[107.50000000 187.01350403]
[107.50000000 202.01350403]
[107.50000000 217.01350403]
[107.50000000 232.01350403]
[107.50000000 247.01350403]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[11 99]
[12 98]
[13 97]
[16 94]
[17 93]
[18 92]
[27 52]
[28 51]
[29 50]
[30 49]
[31 48]
[32 47]
[33 46]
[34 45]
[35 44]
[36 43]
[54 88]
[55 87]
[56 86]
[57 85]
[58 84]
[100 132]
[101 131]
[102 130]
[103 113]
[104 112]
[105 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
