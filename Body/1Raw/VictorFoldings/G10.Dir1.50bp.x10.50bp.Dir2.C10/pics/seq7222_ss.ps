%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUACACCACAUGAAACAUCCUAUCAUCUGUAGGCUCAUUCAUUUCUCUAACAGCAGUAAxxxxxxxxxxUAUACCAAUGAUGGCGCGAUGUAACACGAGAAAGCACAUACCAAGGCCACCACACACCACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.37592316 238.28860474]
[95.06386566 223.29185486]
[94.75180817 208.29510498]
[94.43975067 193.29833984]
[94.12769318 178.30158997]
[93.81564331 163.30484009]
[93.50358582 148.30809021]
[93.19152832 133.31132507]
[92.87947083 118.31457520]
[80.18453979 110.32466125]
[66.52829742 116.53006744]
[57.16527557 129.28327942]
[42.37728882 127.50431061]
[28.72104645 133.70971680]
[15.06480598 139.91511536]
[1.40856469 146.12052917]
[-0.72627336 155.42280579]
[-6.84228230 162.56877136]
[-15.44678402 166.01141357]
[-24.52899933 165.08422852]
[-32.02964020 160.12620544]
[-46.04635620 165.46771240]
[-60.06306839 170.80921936]
[-74.07978058 176.15074158]
[-77.15139771 191.26922607]
[-87.92544556 202.31111145]
[-102.96396637 205.75299072]
[-117.46822357 200.49655151]
[-126.80995178 188.21910095]
[-128.00825500 172.83834839]
[-120.68074799 159.26222229]
[-107.16561127 151.82283020]
[-91.77548218 152.89402771]
[-79.42129517 162.13401794]
[-65.40457916 156.79251099]
[-51.38786697 151.45100403]
[-37.37115479 146.10948181]
[-25.90028381 128.99392700]
[-4.79684258 132.46429443]
[8.85939884 126.25888062]
[22.51564026 120.05347443]
[36.17188263 113.84806824]
[44.55812073 101.53871155]
[60.32289124 102.87382507]
[73.97913361 96.66841888]
[80.18453979 83.01217651]
[75.87695312 68.64399719]
[71.56937408 54.27581024]
[67.26178741 39.90762711]
[62.95420456 25.53944206]
[48.03864288 27.43046379]
[33.01526642 26.84052277]
[18.29392242 23.78571129]
[4.27621889 18.34936714]
[-8.65543175 10.67979813]
[-20.14824295 0.98623645]
[-29.88868332 -10.46687126]
[-37.61102676 -23.36707497]
[-43.10460281 -37.36244965]
[-46.21953964 -52.07118988]
[-46.87086487 -67.09202576]
[-45.04080200 -82.01519012]
[-40.77928543 -96.43355560]
[-34.20256424 -109.95378876]
[-25.49006081 -122.20703888]
[-14.87945938 -132.85903931]
[-2.66022229 -141.61917114]
[10.83430004 -148.24848938]
[25.23596573 -152.56610107]
[40.15188980 -154.45425415]
[55.17515182 -153.86141968]
[69.89590454 -150.80377197]
[83.91256714 -145.36473083]
[96.84273529 -137.69267273]
[108.33367920 -127.99689484]
[118.07191467 -116.54190826]
[125.79177094 -103.64022064]
[131.28265381 -89.64378357]
[134.39476013 -74.93444824]
[135.04318237 -59.91347885]
[133.21025085 -44.99067307]
[128.94595337 -30.57312584]
[122.36663055 -17.05416298]
[113.65176392 -4.80259037]
[103.03910828 5.84735918]
[90.81818390 14.60514832]
[77.32238770 21.23185730]
[81.62997437 35.60004044]
[85.93755341 49.96822739]
[90.24514008 64.33641052]
[94.55272675 78.70459747]
[120.96212006 86.15211487]
[135.86402893 84.43942261]
[150.76593018 82.72673035]
[165.66783142 81.01404572]
[174.28305054 64.00021362]
[191.24411011 55.61219025]
[209.70185852 59.03813171]
[222.32131958 72.73509216]
[237.08737183 70.09622955]
[251.85343933 67.45736694]
[266.61947632 64.81850433]
[270.22854614 50.02341461]
[279.54843140 37.97933960]
[292.96438599 30.77297974]
[308.15206909 29.65288544]
[322.48007202 34.81311798]
[333.46600342 45.35963821]
[339.20648193 59.46519470]
[338.70693970 74.68591309]
[332.05392456 88.38471985]
[320.40011597 98.18820190]
[305.76458740 102.39785767]
[290.68304443 100.28433228]
[277.76846313 92.21381378]
[269.25836182 79.58455658]
[254.49229431 82.22341919]
[239.72624207 84.86228943]
[224.96018982 87.50115204]
[222.03987122 98.38013458]
[215.21522522 107.40613556]
[205.45527649 113.23338318]
[194.17010498 114.97486115]
[183.00723267 112.33717346]
[173.61100769 105.66907501]
[167.38052368 95.91594696]
[152.47860718 97.62863159]
[137.57670593 99.34132385]
[122.67481232 101.05401611]
[136.57356262 106.69534302]
[151.57080078 106.40742493]
[164.78002930 113.51492310]
[172.80268860 126.18917847]
[173.57470703 141.16929626]
[166.89743042 154.60112000]
[154.48883057 163.02885437]
[139.54144287 164.28416443]
[125.90102386 158.04406738]
[117.07702637 145.91406250]
[115.33990479 131.01380920]
[107.87622070 118.00251770]
[108.18827820 132.99926758]
[108.50033569 147.99603271]
[108.81239319 162.99278259]
[109.12445068 177.98953247]
[109.43650818 192.98628235]
[109.74855804 207.98304749]
[110.06061554 222.97979736]
[110.37267303 237.97654724]
[112.96367645 257.18426514]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 45]
[11 44]
[13 42]
[14 41]
[15 40]
[16 39]
[21 37]
[22 36]
[23 35]
[24 34]
[46 91]
[47 90]
[48 89]
[49 88]
[50 87]
[92 129]
[93 128]
[94 127]
[95 126]
[99 119]
[100 118]
[101 117]
[102 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
