%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUAAACUACCAAACCUGCAUUAAAAAUUUCGGUUGGGGCGACCUCGGAGCAGAACCCAACCUCCGxxxxxxxxxxAAACUCACAGCCCUCGCUGUCACUUUCCUAGGACUUCUAACAGCCCUAGACCUCAACUACCUAACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[115.18934631 263.63824463]
[115.18934631 248.63824463]
[115.18934631 233.63824463]
[115.18934631 218.63824463]
[115.18934631 203.63824463]
[115.18934631 188.63824463]
[115.18934631 173.63824463]
[115.18934631 158.63824463]
[115.18934631 143.63824463]
[115.18934631 128.63824463]
[109.02962494 124.35947418]
[107.77819061 139.30717468]
[94.20733643 145.69715881]
[81.88808441 137.13935852]
[83.13984680 122.19168091]
[96.71018982 115.80194092]
[90.55046844 111.52317047]
[80.31902313 123.59081268]
[65.69152832 120.78266907]
[51.63499069 126.01847839]
[37.57844925 131.25428772]
[23.57301712 136.62530518]
[9.61999416 142.13104248]
[-4.33302975 147.63677979]
[-4.94618225 162.85334778]
[-11.70127964 176.50210571]
[-23.42796135 186.21832275]
[-38.09450912 190.31860352]
[-53.15985107 188.09254456]
[-66.01383209 179.92584229]
[-74.42941284 167.23341370]
[-76.94855499 152.21429443]
[-73.13479614 137.47064209]
[-63.64888763 125.55689240]
[-50.13433075 118.53716278]
[-34.93259430 117.62767029]
[-20.67747879 122.98599243]
[-9.83876610 133.68376160]
[4.11425734 128.17802429]
[18.06728172 122.67227936]
[23.15941048 117.26602173]
[32.34264374 117.19774628]
[46.39918518 111.96193695]
[60.45572662 106.72613525]
[69.68175507 95.03298187]
[85.31466675 97.46662903]
[95.66268158 86.60759735]
[100.21537018 72.31518555]
[104.76806641 58.02277374]
[109.32075500 43.73036575]
[112.75915527 29.12976646]
[107.23304749 14.30503178]
[116.83319092 2.91703224]
[119.13687134 -11.90501499]
[121.44054413 -26.72706223]
[118.14300537 -41.36011505]
[109.70458221 -53.76144791]
[101.26616669 -66.16278076]
[92.82774353 -78.56410980]
[84.38932037 -90.96543884]
[69.19083405 -89.15862274]
[54.89771271 -94.63268280]
[44.79441833 -106.12973022]
[41.20260620 -121.00781250]
[44.94765472 -135.84806824]
[55.16897583 -147.24031067]
[69.51778412 -152.56669617]
[84.69683075 -150.60324097]
[97.21807861 -141.80114746]
[104.20423889 -128.18305969]
[104.04994202 -112.87832642]
[96.79064941 -99.40386200]
[105.22907257 -87.00253296]
[113.66749573 -74.60120392]
[122.10591888 -62.19987106]
[130.54434204 -49.79853821]
[138.03562927 -49.43729782]
[136.57574463 -64.36608887]
[135.11584473 -79.29487610]
[131.29650879 -93.80048370]
[140.73748779 -105.45671844]
[155.72004700 -104.73371124]
[163.99479675 -92.22257233]
[158.79733276 -78.15292358]
[155.90777588 -63.43387222]
[153.01821899 -48.71481705]
[160.50952148 -48.35358047]
[170.10203552 -59.88543701]
[179.69454956 -71.41728973]
[176.03137207 -86.38015747]
[181.81361389 -100.46628571]
[194.62995911 -108.35332489]
[209.45549011 -107.19509888]
[219.04800415 -118.72695923]
[228.64051819 -130.25881958]
[238.23303223 -141.79067993]
[247.82553101 -153.32252502]
[250.06924438 -169.56745911]
[265.35952759 -175.49534607]
[277.96701050 -165.00807190]
[274.92224121 -148.89405823]
[259.35739136 -143.73002625]
[249.76487732 -132.19816589]
[240.17237854 -120.66630554]
[230.57986450 -109.13444519]
[220.98735046 -97.60259247]
[224.82560730 -83.23576355]
[219.40397644 -69.19760895]
[206.60612488 -60.94724274]
[191.22639465 -61.82478333]
[181.63389587 -50.29292679]
[172.04138184 -38.76106644]
[163.96568298 -29.03393555]
[154.21217346 -23.50900459]
[144.47688293 -22.17585564]
[136.26258850 -24.42338562]
[133.95892334 -9.60133934]
[131.65524292 5.22070789]
[137.34611511 18.98527145]
[127.58119965 31.43344307]
[139.32449341 22.10097122]
[154.30334473 21.30462074]
[166.96995544 29.33934212]
[172.63296509 43.22927856]
[169.19493103 57.82995987]
[157.92919922 67.73367310]
[143.00833130 69.27233124]
[129.95860291 61.87606812]
[123.61316681 48.28305435]
[119.06047058 62.57546616]
[114.50778198 76.86787415]
[109.95509338 91.16028595]
[120.80259705 80.80019379]
[127.54316711 67.40001678]
[137.58921814 56.26103592]
[150.22460938 48.17730331]
[164.54862976 43.72507095]
[179.54019165 43.22172165]
[194.13058472 46.70313644]
[207.27975464 53.92113876]
[218.05032349 64.36119080]
[225.67453003 77.27906036]
[229.60887146 91.75389862]
[229.57287598 106.75386047]
[225.56913757 121.20965576]
[217.88302612 134.09078979]
[207.06246948 144.47903442]
[193.87882996 151.63386536]
[179.27189636 155.04522705]
[164.28292847 154.46994019]
[149.98043823 149.94902039]
[137.38072205 141.80198669]
[130.18934631 128.63824463]
[130.18934631 143.63824463]
[130.18934631 158.63824463]
[130.18934631 173.63824463]
[130.18934631 188.63824463]
[130.18934631 203.63824463]
[130.18934631 218.63824463]
[130.18934631 233.63824463]
[130.18934631 248.63824463]
[130.18934631 263.63824463]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 162]
[2 161]
[3 160]
[4 159]
[5 158]
[6 157]
[7 156]
[8 155]
[9 154]
[10 153]
[17 46]
[19 44]
[20 43]
[21 42]
[22 40]
[23 39]
[24 38]
[47 132]
[48 131]
[49 130]
[50 129]
[51 120]
[53 118]
[54 117]
[55 116]
[56 76]
[57 75]
[58 74]
[59 73]
[60 72]
[87 112]
[88 111]
[89 110]
[93 106]
[94 105]
[95 104]
[96 103]
[97 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
