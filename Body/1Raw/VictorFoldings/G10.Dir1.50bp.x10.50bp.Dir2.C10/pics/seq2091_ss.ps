%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACCCCUAUACCUUCUGCAUAAUGAAUUAACUAGAAAUAACUUUGCAAGGAGAGCCAAAGCxxxxxxxxxxAAACCUGGAGUGACUAUAUGGAUGCCCCCCACCCUACCACACAUUCGAAGAACCCGUAUACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[85.63005829 506.20898438]
[85.63005829 491.20898438]
[85.63005829 476.20898438]
[85.63005829 461.20898438]
[85.63005829 446.20898438]
[85.63005829 431.20898438]
[85.63005829 416.20898438]
[85.63005829 401.20898438]
[85.63005829 386.20898438]
[85.63005829 371.20898438]
[71.08766174 367.65832520]
[57.80970764 360.72607422]
[46.57003021 350.81137085]
[38.02484894 338.48724365]
[32.67444992 324.46765137]
[30.83389664 309.56594849]
[32.61449432 294.64782715]
[37.91704559 280.58099365]
[46.43738556 268.18460083]
[57.68381882 258.18176270]
[71.00549316 251.15713501]
[85.63005829 247.52290344]
[85.63005829 232.52290344]
[85.63005829 217.52290344]
[85.63005829 202.52290344]
[82.46549225 195.79254150]
[85.78721619 187.21571350]
[83.56562042 184.40293884]
[82.62982178 180.35400391]
[83.55488586 175.70106506]
[86.60427856 171.31283569]
[87.83489227 156.36340332]
[89.06550598 141.41397095]
[90.29611206 126.46453857]
[76.70549774 115.87146759]
[71.82002258 99.34723663]
[77.46539307 83.06694031]
[68.30345154 71.19011688]
[54.62061310 77.48184204]
[39.88780594 80.56935120]
[24.84457207 80.30092621]
[10.24531555 76.69326782]
[-3.17854667 69.93041229]
[-14.75522041 60.35441589]
[-23.90615654 48.44801331]
[-30.17496300 34.81030273]
[-33.25016403 20.12659073]
[-32.98067856 5.13396358]
[-29.38323784 -9.41571999]
[-22.64138412 -22.79352760]
[-13.09610844 -34.32997513]
[-22.25804329 -46.20679855]
[-31.41997910 -58.08362198]
[-40.58191681 -69.96044922]
[-49.74385071 -81.83727264]
[-64.95526123 -79.71395874]
[-79.18435669 -85.49569702]
[-88.60357666 -97.62722015]
[-90.67919922 -112.84521484]
[-84.85289001 -127.05611420]
[-72.69189453 -136.43725586]
[-57.46747208 -138.46516418]
[-43.27490234 -132.59434509]
[-33.93192291 -120.40400696]
[-31.95174408 -105.17330170]
[-37.86702728 -90.99920654]
[-28.70509148 -79.12238312]
[-19.54315567 -67.24555969]
[-10.38122082 -55.36873245]
[-1.21928525 -43.49190903]
[12.36238480 -49.79588699]
[27.01342583 -52.92083740]
[41.99972153 -52.70689011]
[56.56962967 -49.16156006]
[69.99166107 -42.45952988]
[81.59124756 -32.93404770]
[90.78458405 -21.06035423]
[97.10806274 -7.43197536]
[100.24163055 7.26894283]
[100.02498627 22.30578423]
[96.46578217 36.92436600]
[89.73938751 50.39076996]
[80.18027496 62.02818298]
[89.34221649 73.90500641]
[94.46185303 72.36186981]
[99.78077698 71.81331635]
[105.10759735 72.27907562]
[110.25061798 73.74239349]
[115.02476501 76.15060425]
[119.25823212 79.41705322]
[122.79867554 83.42418671]
[136.84065247 78.14945221]
[150.88262939 72.87471008]
[151.45486450 57.71066284]
[157.77218628 43.95804214]
[168.84361267 33.69952393]
[182.96087646 28.47550774]
[197.96192932 29.05284309]
[211.56202698 35.31243896]
[221.70176697 46.27213669]
[235.74374390 40.99739456]
[249.78572083 35.72265244]
[254.81195068 20.91485214]
[268.20727539 12.84645557]
[283.64685059 15.32711601]
[293.84057617 27.18553925]
[293.97528076 42.82254410]
[283.98733521 54.85481262]
[268.59280396 57.60107422]
[255.06047058 49.76462936]
[241.01849365 55.03937149]
[226.97651672 60.31411362]
[226.56013489 75.23912048]
[220.44471741 88.90467072]
[209.53375244 99.21562195]
[195.46850586 104.57810974]
[180.38119507 104.14588928]
[166.57179260 97.95368958]
[156.15737915 86.91668701]
[142.11540222 92.19142151]
[128.07342529 97.46616364]
[122.49414062 116.98678589]
[105.24555206 127.69515228]
[104.01493835 142.64459229]
[102.78432465 157.59402466]
[101.55371094 172.54345703]
[100.78404999 187.52369690]
[100.63005829 202.52290344]
[100.63005829 217.52290344]
[100.63005829 232.52290344]
[100.63005829 247.52290344]
[115.25462341 251.15713501]
[128.57629395 258.18176270]
[139.82272339 268.18460083]
[148.34306335 280.58099365]
[153.64561462 294.64782715]
[155.42620850 309.56594849]
[153.58566284 324.46765137]
[148.23526001 338.48724365]
[139.69007874 350.81137085]
[128.45040894 360.72607422]
[115.17244720 367.65832520]
[100.63005829 371.20898438]
[100.63005829 386.20898438]
[100.63005829 401.20898438]
[100.63005829 416.20898438]
[100.63005829 431.20898438]
[100.63005829 446.20898438]
[100.63005829 461.20898438]
[100.63005829 476.20898438]
[100.63005829 491.20898438]
[100.63005829 506.20898438]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[22 131]
[23 130]
[24 129]
[25 128]
[27 127]
[31 126]
[32 125]
[33 124]
[34 123]
[37 84]
[38 83]
[51 70]
[52 69]
[53 68]
[54 67]
[55 66]
[91 121]
[92 120]
[93 119]
[100 112]
[101 111]
[102 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
