%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAGAUGAAAAAUUAUAACCAAGCAUAAUAUAGCAAGGACUAACCCCUAUACCUUCUGCAUxxxxxxxxxxGCGGGAGAAGCCCCGGCAGGUUUGAAGCUGCUUCUUCGAAUUUGCAAUUCAAUAUGAAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[150.39692688 328.07955933]
[150.39692688 313.07955933]
[150.39692688 298.07955933]
[150.39692688 283.07955933]
[150.39692688 268.07955933]
[150.39692688 253.07957458]
[150.39692688 238.07957458]
[150.39692688 223.07957458]
[150.39692688 208.07957458]
[150.39692688 193.07957458]
[152.73916626 175.42788696]
[161.72734070 163.55834961]
[173.13270569 159.26104736]
[166.78558350 145.67010498]
[154.38964844 137.41236877]
[155.56069946 121.63455200]
[149.21357727 108.04360199]
[142.86643982 94.45265198]
[128.10729980 126.90430450]
[97.06433105 134.46807861]
[74.90216064 116.93566132]
[60.77735901 121.98442078]
[46.65255737 127.03317261]
[32.52775192 132.08192444]
[18.40295029 137.13069153]
[14.16912937 152.05899048]
[1.94848192 161.62118530]
[-13.55990410 162.14038086]
[-26.39273834 153.41697693]
[-31.61553383 138.80526733]
[-27.22002029 123.92375946]
[-14.89635944 114.49471283]
[0.61674654 114.14376831]
[13.35419369 123.00588226]
[27.47899628 117.95713043]
[41.60379791 112.90837097]
[55.72860336 107.85961151]
[69.85340881 102.81085968]
[67.84858704 90.54091644]
[71.08560181 77.31594849]
[79.90732574 65.42739105]
[93.65357971 57.24455261]
[82.35457611 47.37882996]
[71.05557251 37.51310730]
[59.55376816 27.88458061]
[47.85414505 18.49741936]
[36.15452194 9.11025620]
[22.63614082 16.12262344]
[7.43391466 17.02383614]
[-6.81828070 11.65775776]
[-17.65116692 0.95409083]
[-23.18787956 -13.23268795]
[-22.46914864 -28.44463539]
[-15.61950111 -42.04618835]
[-3.82567906 -51.68079376]
[10.86896706 -55.67919922]
[25.91850090 -53.34865952]
[38.71549988 -45.09295273]
[47.04280472 -32.34243011]
[49.45766449 -17.30619431]
[45.54168320 -2.58936691]
[57.24130630 6.79779482]
[68.94093323 16.18495750]
[73.76177216 16.55235481]
[78.38560486 19.99495506]
[80.92129517 26.21410179]
[92.22029877 36.07982635]
[103.51930237 45.94554901]
[110.92818451 44.77999496]
[105.74225616 30.70497704]
[100.55632782 16.62995911]
[89.63382721 6.34895802]
[86.97215271 -8.41300392]
[93.61611176 -21.86134338]
[106.95771790 -28.71711922]
[121.75991821 -26.28920174]
[132.21234131 -15.53063297]
[134.21205139 -0.66452509]
[126.97369385 12.47402573]
[126.35981750 27.46145821]
[125.74594116 42.44889069]
[133.15481567 41.28334045]
[140.87890625 28.42493820]
[148.60299683 15.56653500]
[156.32707214 2.70813298]
[152.25920105 -12.56366920]
[160.25375366 -26.19681549]
[175.56770325 -30.10300064]
[189.11557007 -21.96475601]
[192.85963440 -6.61035681]
[184.57859802 6.85070419]
[169.18548584 10.43221760]
[161.46139526 23.29062080]
[153.73730469 36.14902115]
[146.01322937 49.00742340]
[155.87895203 60.30643082]
[169.66133118 54.38646698]
[183.44371033 48.46650314]
[197.22608948 42.54653931]
[206.85240173 29.99087906]
[221.60017395 32.07710648]
[230.97447205 18.62145042]
[247.28939819 20.28141212]
[253.76155090 35.34936523]
[243.73294067 48.32469177]
[227.52014160 45.85948944]
[218.87963867 57.99171448]
[203.14605713 56.32892227]
[189.36367798 62.24888611]
[175.58129883 68.16884613]
[161.79890442 74.08881378]
[156.45739746 88.10552216]
[162.80451965 101.69647217]
[169.15165710 115.28742981]
[182.00157166 124.51728058]
[180.37652588 139.32296753]
[186.72366333 152.91392517]
[197.27494812 163.57554626]
[210.79914856 170.06372070]
[224.32333374 176.55187988]
[237.84751892 183.04003906]
[251.37170410 189.52821350]
[268.26779175 190.92788696]
[271.60009766 207.55111694]
[256.54901123 215.35498047]
[244.88354492 203.05239868]
[231.35935974 196.56423950]
[217.83515930 190.07606506]
[204.31097412 183.58790588]
[190.78678894 177.09974670]
[184.43931580 181.09469604]
[193.19732666 193.27244568]
[201.95532227 205.45018005]
[214.50810242 213.66162109]
[214.37644958 228.66104126]
[201.68145752 236.65087891]
[188.10093689 230.28147888]
[186.12715149 215.41209412]
[178.93577576 202.24835205]
[171.74438477 189.08460999]
[165.39692688 193.07957458]
[165.39692688 208.07957458]
[165.39692688 223.07957458]
[165.39692688 238.07957458]
[165.39692688 253.07957458]
[165.39692688 268.07955933]
[165.39692688 283.07955933]
[165.39692688 298.07955933]
[165.39692688 313.07955933]
[165.39692688 328.07955933]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[13 117]
[14 116]
[16 114]
[17 113]
[18 112]
[21 38]
[22 37]
[23 36]
[24 35]
[25 34]
[42 68]
[43 67]
[44 66]
[45 63]
[46 62]
[47 61]
[82 95]
[83 94]
[84 93]
[85 92]
[96 111]
[97 110]
[98 109]
[99 108]
[101 106]
[118 130]
[119 129]
[120 128]
[121 127]
[122 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
