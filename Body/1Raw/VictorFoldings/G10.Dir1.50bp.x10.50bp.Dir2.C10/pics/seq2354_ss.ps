%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAAGCAGCCACCAAUUAAGAAAGCGUUCAAGCUCAACACCCACUACCUAAAAAAUCCCAAxxxxxxxxxxUUAUAUCCUUCUUGCUCAUCAGUUGAUGAUACGCCCGAGCAGAUGCCAACACAGCAGCCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[103.94680786 442.55371094]
[103.94680786 427.55371094]
[103.94680786 412.55371094]
[103.94680786 397.55371094]
[103.94680786 382.55371094]
[103.94680786 367.55371094]
[103.94680786 352.55371094]
[103.94680786 337.55371094]
[103.94680786 322.55371094]
[103.94680786 307.55371094]
[87.62033844 303.85324097]
[72.61360168 296.41635132]
[59.76867294 285.65628052]
[49.80727386 272.17282104]
[43.29023361 256.71890259]
[40.58592224 240.15856934]
[41.84941483 223.41867065]
[47.01361847 207.43698120]
[55.79281616 193.10968018]
[67.69847107 181.24105835]
[82.06641388 172.49841309]
[98.09390259 167.37449646]
[96.84703064 152.42640686]
[82.20936584 149.41621399]
[69.01200867 142.40534973]
[58.32340240 131.96139526]
[51.00888824 118.92987061]
[47.66063690 104.36581421]
[48.54972076 89.44831085]
[53.60416412 75.38505554]
[62.41475677 63.31459427]
[74.26821136 54.21414566]
[88.20487976 48.82046890]
[86.95800781 33.87238312]
[85.71113586 18.92429543]
[84.46425629 3.97620797]
[83.06195068 -10.95809937]
[81.50437164 -25.87701225]
[79.94679260 -40.79592514]
[76.79826355 -45.12100983]
[75.77204895 -49.75774002]
[76.62281036 -53.82933426]
[78.78737640 -56.68977737]
[78.16339874 -71.67679596]
[77.53942108 -86.66381073]
[76.91544342 -101.65082550]
[76.29146576 -116.63784027]
[61.31281281 -117.69606781]
[46.54682541 -120.42474365]
[32.17921066 -124.78955841]
[18.39065170 -130.73562622]
[5.35455847 -138.18815613]
[-6.76513004 -147.05343628]
[-17.81599426 -157.21997070]
[-27.65905762 -168.55990601]
[-36.17053223 -180.93063354]
[-43.24338150 -194.17655945]
[-48.78865433 -208.13113403]
[-52.73661041 -222.61883545]
[-55.03760147 -237.45748901]
[-55.66269302 -252.46046448]
[-54.60402298 -267.43908691]
[-51.87490082 -282.20498657]
[-47.50965500 -296.57247925]
[-41.56317902 -310.36087036]
[-34.11025238 -323.39672852]
[-25.24461365 -335.51614380]
[-15.07774830 -346.56671143]
[-3.73751950 -356.40942383]
[8.63345814 -364.92053223]
[21.87960625 -371.99298096]
[35.83433914 -377.53784180]
[50.32216644 -381.48538208]
[65.16088104 -383.78591919]
[80.16387177 -384.41055298]
[95.14247131 -383.35144043]
[109.90829468 -380.62188721]
[124.27564240 -376.25619507]
[138.06384277 -370.30932617]
[151.09950256 -362.85601807]
[163.21865845 -353.98999023]
[174.26890564 -343.82281494]
[184.11129761 -332.48226929]
[192.62202454 -320.11105347]
[199.69409180 -306.86468506]
[205.23852539 -292.90979004]
[209.18560791 -278.42184448]
[211.48571777 -263.58306885]
[212.10990906 -248.58004761]
[211.05035400 -233.60148621]
[208.32034302 -218.83575439]
[203.95423889 -204.46852112]
[198.00692749 -190.68049622]
[190.55323792 -177.64508057]
[181.68685913 -165.52618408]
[171.51933289 -154.47622681]
[160.17852783 -144.63418579]
[147.80703735 -136.12380981]
[134.56047058 -129.05215454]
[120.60540009 -123.50814056]
[106.11734009 -119.56147766]
[91.27848816 -117.26181793]
[91.90246582 -102.27480316]
[92.52643585 -87.28778839]
[93.15041351 -72.30077362]
[93.77439117 -57.31375504]
[94.86570740 -42.35350418]
[96.42328644 -27.43459320]
[97.98086548 -12.51568031]
[101.82841492 -6.14841795]
[99.41234589 2.72933340]
[100.65921783 17.67741966]
[101.90609741 32.62550735]
[103.15296936 47.57359314]
[117.79063416 50.58378220]
[130.98799133 57.59465408]
[141.67658997 68.03861237]
[148.99111938 81.07012939]
[152.33935547 95.63418579]
[151.45027161 110.55168915]
[146.39584351 124.61494446]
[137.58523560 136.68540955]
[125.73178864 145.78585815]
[111.79512024 151.17953491]
[113.04199219 166.12762451]
[126.31859589 167.70736694]
[139.06033325 171.74311829]
[150.81724548 178.09053040]
[161.17449951 186.52365112]
[169.76699829 196.74296570]
[176.29231262 208.38606262]
[180.52124023 221.04042053]
[182.30593872 234.25811768]
[181.58502197 247.57159424]
[178.38572693 260.51022339]
[172.82286072 272.61700439]
[165.09469604 283.46463013]
[155.47586060 292.67059326]
[144.30764771 299.91064453]
[131.98587036 304.93032837]
[118.94680786 307.55371094]
[118.94680786 322.55371094]
[118.94680786 337.55371094]
[118.94680786 352.55371094]
[118.94680786 367.55371094]
[118.94680786 382.55371094]
[118.94680786 397.55371094]
[118.94680786 412.55371094]
[118.94680786 427.55371094]
[118.94680786 442.55371094]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[22 125]
[23 124]
[33 114]
[34 113]
[35 112]
[36 111]
[37 109]
[38 108]
[39 107]
[43 106]
[44 105]
[45 104]
[46 103]
[47 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
