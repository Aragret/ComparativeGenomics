%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCGACCCCCUAACAACCCCCCUCCUAAUACUAACUACCUGACUCCUACCCCUCACAAUCAUxxxxxxxxxxAAUAUAGUUUAACCAAAACAUCAGAUUGUGAAUCUGACAACAGAGGCUUACGACCCCUUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[97.15319824 116.25989532]
[88.13567352 128.24673462]
[79.11814117 140.23356628]
[70.10060883 152.22039795]
[61.08308411 164.20722961]
[52.06555176 176.19406128]
[43.81326294 188.72001648]
[36.35835266 201.73632812]
[28.90344238 214.75263977]
[21.44853210 227.76895142]
[22.04644775 244.15719604]
[8.01091766 252.63870239]
[-6.21950722 244.48841858]
[-6.00578642 228.09066772]
[8.43222332 220.31404114]
[15.88713360 207.29772949]
[23.34204292 194.28141785]
[30.79695320 181.26510620]
[15.99917698 183.71986389]
[3.68879724 175.14929199]
[0.85508311 160.41938782]
[9.10688686 147.89311218]
[23.75921440 144.68229675]
[36.49314499 152.60990906]
[40.07872009 167.17652893]
[49.09624863 155.18969727]
[58.11378098 143.20286560]
[67.13130951 131.21603394]
[76.14884186 119.22919464]
[85.16636658 107.24236298]
[74.58673859 117.87587738]
[62.16139221 126.27889252]
[48.35319519 132.13838196]
[33.67653656 135.23606873]
[18.67815590 135.45655823]
[3.91678166 132.79164124]
[-10.05769253 127.34057617]
[-22.72468376 119.30644226]
[-33.61231613 108.98852539]
[-42.31499863 96.77118683]
[-48.50854111 83.10956573]
[-51.96221161 68.51257324]
[-52.54735947 53.52398682]
[-50.24218369 38.70217514]
[-45.13255692 24.59927750]
[-37.40882492 11.74066257]
[-27.35871506 0.60534483]
[-15.35661983 -8.39186001]
[-1.84964359 -14.91578388]
[12.65904617 -18.72339630]
[27.62896729 -19.67285347]
[42.50245285 -17.72878647]
[56.72543335 -12.96361637]
[69.76806641 -5.55485725]
[81.14448547 4.22149754]
[90.43089294 16.00125504]
[97.28134155 29.34559250]
[101.44063568 43.75740051]
[102.75384521 58.69980621]
[101.17203522 73.61617279]
[96.75249481 87.95476532]
[103.09962463 74.36380768]
[109.44675446 60.77286148]
[115.79388428 47.18190765]
[122.14101410 33.59095764]
[128.48814392 20.00000763]
[134.83526611 6.40905666]
[141.18240356 -7.18189430]
[147.24542236 -20.90194702]
[153.02168274 -34.74516678]
[140.71621704 -26.16756439]
[126.24411774 -22.22313881]
[111.28806305 -23.37050629]
[97.58697510 -29.47626305]
[86.73387146 -39.83049393]
[79.99063110 -53.22932816]
[78.14128876 -68.11489105]
[81.40085602 -82.75644684]
[89.39035797 -95.45163727]
[101.18085480 -104.72440338]
[115.40147400 -109.49661255]
[130.39880371 -109.21340179]
[144.42910767 -103.90769196]
[155.86109924 -94.19638062]
[163.36558533 -81.20859528]
[166.07003784 -66.45440674]
[163.65905762 -51.64654922]
[173.64178467 -62.84231567]
[183.62451172 -74.03807831]
[193.60723877 -85.23384857]
[194.12905884 -101.26840973]
[207.07633972 -110.74192810]
[222.51702881 -106.38711548]
[228.60636902 -91.54462433]
[220.67312622 -77.60034180]
[204.80300903 -75.25112152]
[194.82028198 -64.05535126]
[184.83755493 -52.85958862]
[174.85482788 -41.66382217]
[166.86491394 -28.96889305]
[161.08863831 -15.12567520]
[162.07192993 -10.39189911]
[160.04592896 -4.99499321]
[154.77336121 -0.83476466]
[148.42622375 12.75618649]
[142.07910156 26.34713745]
[135.73196411 39.93808746]
[129.38484192 53.52903748]
[123.03770447 67.11998749]
[116.69057465 80.71093750]
[110.34344482 94.30189514]
[115.80092621 93.47590637]
[121.51130676 93.82327271]
[136.15480042 97.07409668]
[150.79830933 100.32492065]
[165.44180298 103.57574463]
[180.91230774 98.13554382]
[193.18103027 109.01718903]
[189.62698364 125.02658844]
[173.90625000 129.69464111]
[162.19097900 118.21924591]
[147.54748535 114.96842194]
[132.90397644 111.71759796]
[118.26048279 108.46677399]
[129.55282593 118.34011078]
[140.84518433 128.21343994]
[152.13754272 138.08677673]
[166.44163513 142.60263062]
[179.29032898 150.34284973]
[189.96899414 160.87689209]
[197.88365173 173.61888123]
[202.59410095 187.86007690]
[203.83834839 202.80838013]
[201.54716492 217.63237000]
[195.84800720 231.50750732]
[187.05784607 243.66206360]
[175.66561890 253.41999817]
[162.30496216 260.23855591]
[147.71899414 263.73849487]
[132.71899414 263.72512817]
[118.13928986 260.19921875]
[104.79078674 253.35687256]
[93.41596222 243.57867432]
[84.64746857 231.40847778]
[78.97303009 217.52320862]
[76.70825195 202.69517517]
[77.97911072 187.74909973]
[82.71491241 173.51632690]
[90.65270233 160.78790283]
[92.81953430 145.94523621]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 30]
[2 29]
[3 28]
[4 27]
[5 26]
[6 25]
[7 18]
[8 17]
[9 16]
[10 15]
[61 111]
[62 110]
[63 109]
[64 108]
[65 107]
[66 106]
[67 105]
[68 104]
[69 101]
[70 100]
[87 99]
[88 98]
[89 97]
[90 96]
[113 124]
[114 123]
[115 122]
[116 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
