%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUCAUAGCAGGCAGUUGAGGUGGAUUAAACCAAACCCAGCUACGCAAAAUCUUAGCAUACxxxxxxxxxxCCCCUGCCAUAACCCAAUACCAAACGCCCCUCUUCGUCUGAUCCGUCCUAAUCACAGCAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[136.09826660 312.93582153]
[135.47428894 297.94879150]
[134.85031128 282.96176147]
[134.22633362 267.97476196]
[133.60235596 252.98774719]
[132.97837830 238.00073242]
[132.35440063 223.01371765]
[131.73042297 208.02670288]
[128.63211060 193.35017395]
[123.14507294 179.38978577]
[117.65804291 165.42939758]
[112.17100525 151.46899414]
[106.68397522 137.50860596]
[101.19694519 123.54821777]
[89.92533112 122.32844543]
[80.11668396 115.82727814]
[74.18168640 105.17081451]
[73.79005432 92.54889679]
[79.42237854 80.76766968]
[90.17672729 72.62576294]
[78.47710419 63.23860550]
[66.77748108 53.85144043]
[55.07785797 44.46427917]
[43.37823486 35.07711792]
[29.59585381 29.15715599]
[14.73280621 27.13482094]
[-0.13024065 25.11248589]
[-15.04915333 23.55490494]
[-30.00940132 22.46359444]
[-44.33592224 29.17637253]
[-56.46654510 20.53361702]
[-71.42679596 19.44230652]
[-86.38704681 18.35099602]
[-102.73185730 26.76687241]
[-116.87662506 16.42639732]
[-131.85633850 15.64655304]
[-144.68945312 25.27415276]
[-160.18110657 21.10422516]
[-166.44741821 6.33558178]
[-158.68142700 -7.70253801]
[-142.84051514 -10.24129009]
[-131.07649231 0.66683865]
[-116.09677887 1.44668376]
[-106.86506653 -6.43257713]
[-94.33921814 -5.86501980]
[-85.29573059 3.39074683]
[-70.33548737 4.48205709]
[-55.37523651 5.57336760]
[-42.11877060 -1.21746755]
[-28.91809082 7.50334644]
[-13.95784187 8.59465694]
[-11.03125286 6.52039576]
[-6.93509388 5.79709673]
[-2.33264279 6.96749115]
[1.89209378 10.24944019]
[16.75514030 12.27177429]
[31.61818695 14.29410839]
[20.00341988 4.80215597]
[10.74197388 -6.99723482]
[4.28096914 -20.53442192]
[0.93232471 -35.15586472]
[0.85770422 -50.15567780]
[4.06071043 -64.80971527]
[10.38671017 -78.41051483]
[19.53030205 -90.30146027]
[31.05005646 -99.90850830]
[44.38983154 -106.76783752]
[58.90562057 -110.54830170]
[73.89663696 -111.06739044]
[88.63915253 -108.30004883]
[102.42144012 -102.37987518]
[114.57813263 -93.59267426]
[124.52233124 -82.36267853]
[131.77395630 -69.23202515]
[135.98292542 -54.83464813]
[136.94602966 -39.86559677]
[134.61679077 -25.04754829]
[129.10763550 -11.09587193]
[120.68454742 1.31588006]
[109.75416565 11.58850193]
[96.84418488 19.22605705]
[82.57785034 23.85982895]
[67.64392090 25.26610756]
[52.76539612 23.37749481]
[64.46501923 32.76465607]
[76.16464233 42.15181732]
[87.86426544 51.53897858]
[99.56388855 60.92614365]
[88.39899445 50.90890503]
[81.46304321 37.60880661]
[79.63956451 22.72005463]
[83.16083527 8.13922215]
[91.57830048 -4.27634048]
[103.81973267 -12.94510365]
[118.32576752 -16.76281357]
[133.24859619 -15.24316025]
[146.68728638 -8.57972050]
[156.92999268 2.37869644]
[162.67196655 16.23617554]
[163.18179321 31.22750854]
[158.39448547 45.44305801]
[148.91992188 57.07200241]
[135.96495056 64.63301849]
[121.18221283 67.16297150]
[136.08412170 65.45028687]
[150.98602295 63.73759460]
[158.49615479 50.15903091]
[172.56750488 43.61860657]
[187.78930664 46.63124847]
[198.30850220 58.03853607]
[200.08023071 73.45413208]
[192.42323303 86.95042419]
[178.28176880 93.33782196]
[163.09353638 90.16022491]
[152.69871521 78.63949585]
[137.79681396 80.35218811]
[122.89490509 82.06487274]
[126.18864441 102.73449707]
[115.15733337 118.06118774]
[120.64436340 132.02157593]
[126.13140106 145.98196411]
[131.61842346 159.94235229]
[137.10546875 173.90275574]
[142.59249878 187.86314392]
[145.45858765 173.13949585]
[153.10505676 160.23478699]
[164.64286804 150.64944458]
[178.73051453 145.49790955]
[193.73004150 145.37919617]
[207.89747620 150.30706787]
[219.58557129 159.70857239]
[227.43536377 172.49063110]
[230.53416443 187.16705322]
[228.52168274 202.03143311]
[221.63191223 215.35551453]
[210.66590881 225.59008789]
[196.89868164 231.54522705]
[181.93095398 232.52850342]
[167.50297546 228.42561340]
[155.29231262 219.71357727]
[146.71743774 207.40272522]
[147.34141541 222.38973999]
[147.96539307 237.37675476]
[148.58937073 252.36376953]
[149.21334839 267.35076904]
[149.83732605 282.33779907]
[150.46130371 297.32482910]
[151.08528137 312.31182861]
[157.78527832 327.88574219]
[144.67474365 338.63516235]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 148]
[2 147]
[3 146]
[4 145]
[5 144]
[6 143]
[7 142]
[8 141]
[9 124]
[10 123]
[11 122]
[12 121]
[13 120]
[14 119]
[20 88]
[21 87]
[22 86]
[23 85]
[24 84]
[25 57]
[26 56]
[27 55]
[28 51]
[29 50]
[31 48]
[32 47]
[33 46]
[35 43]
[36 42]
[104 117]
[105 116]
[106 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
