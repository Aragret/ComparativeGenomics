%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCAGACGAGCUACCUAAGAACAGCUAAAAGAGCACACCCGUCUAUGUAGCAAAAUAGUGxxxxxxxxxxGCCAUCAUCCUAGUCCUCAUCGCCCUCCCAUCCCUACGCAUCCUUUACAUAACAGACGAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 248.26223755]
[92.50000000 233.26223755]
[92.50000000 218.26223755]
[92.50000000 203.26223755]
[92.50000000 188.26223755]
[92.50000000 173.26223755]
[92.50000000 158.26223755]
[92.50000000 143.26223755]
[92.50000000 128.26223755]
[92.50000000 113.26223755]
[86.79949188 108.38841248]
[72.65737152 113.38845825]
[75.39846802 98.64076233]
[69.69795990 93.76693726]
[54.88019943 96.09803772]
[40.06244278 98.42914581]
[25.24468422 100.76024628]
[10.42692566 103.09135437]
[-3.94125843 107.39893341]
[-17.59749985 113.60434723]
[-31.25374031 119.80975342]
[-44.90998077 126.01515961]
[-46.31897354 141.30928040]
[-55.19935608 153.84062195]
[-69.16235352 160.23829651]
[-84.45198822 158.78137207]
[-96.95542908 149.86175537]
[-103.30930328 135.87876892]
[-101.80446625 120.59378052]
[-92.84569550 108.11836243]
[-78.84286499 101.80834198]
[-63.56266403 103.36109161]
[-51.11539078 112.35891724]
[-37.45914841 106.15351105]
[-23.80290604 99.94810486]
[-10.14666557 93.74269867]
[-24.91316605 91.10632324]
[-37.39387131 82.78574371]
[-45.50671768 70.16902161]
[-47.89830017 55.36090469]
[-44.16965103 40.83171844]
[-34.94279480 29.00526237]
[-21.75697136 21.85445213]
[-6.81187820 20.57220078]
[7.39931107 25.37242126]
[18.50584984 35.45432281]
[24.65491867 49.13602448]
[24.82071495 64.13510895]
[18.97558022 77.94939423]
[8.09582138 88.27359772]
[22.91357994 85.94248962]
[37.73133850 83.61138916]
[52.54909515 81.28028107]
[67.36685181 78.94918060]
[103.89210510 82.40731049]
[113.63975525 71.00628662]
[123.38740540 59.60526657]
[133.13505554 48.20424652]
[142.88270569 36.80322647]
[132.42184448 26.03778267]
[122.99890900 14.35304451]
[114.69432068 1.84870636]
[107.57893372 -11.36854839]
[101.71343994 -25.18595123]
[97.14788818 -39.48561859]
[93.92124176 -54.14554214]
[92.06101227 -69.04064941]
[91.58308411 -84.04385376]
[92.49153137 -99.02716064]
[94.77860260 -113.86272430]
[98.42478180 -128.42396545]
[103.39897156 -142.58666992]
[109.65871429 -156.22999573]
[117.15061951 -169.23753357]
[125.81076050 -181.49830627]
[135.56526184 -192.90771484]
[146.33087158 -203.36840820]
[158.01576233 -212.79113770]
[170.52024841 -221.09552002]
[183.73760986 -228.21069336]
[197.55511475 -234.07595825]
[211.85485840 -238.64126587]
[226.51483154 -241.86767578]
[241.40997314 -243.72764587]
[256.41317749 -244.20532227]
[271.39648438 -243.29663086]
[286.23199463 -241.00930786]
[300.79318237 -237.36288452]
[314.95581055 -232.38845825]
[328.59902954 -226.12849426]
[341.60644531 -218.63636780]
[353.86706543 -209.97602844]
[365.27630615 -200.22134399]
[375.73681641 -189.45555115]
[385.15936279 -177.77049255]
[393.46353149 -165.26588440]
[400.57849121 -152.04838562]
[406.44351196 -138.23078918]
[411.00860596 -123.93097687]
[414.23474121 -109.27094269]
[416.09448242 -94.37577057]
[416.57189941 -79.37255096]
[415.66296387 -64.38927460]
[413.37539673 -49.55379105]
[409.72872925 -34.99266052]
[404.75408936 -20.83012581]
[398.49386597 -7.18701267]
[391.00152588 5.82027435]
[382.34097290 18.08076096]
[372.58612061 29.48984146]
[361.82015991 39.95017624]
[350.13494873 49.37252045]
[337.63018799 57.67647934]
[324.41256714 64.79121399]
[310.59487915 70.65601349]
[296.29498291 75.22084808]
[281.63488770 78.44676971]
[266.73971558 80.30625153]
[251.73646545 80.78342438]
[236.75321960 79.87422943]
[221.91777039 77.58641815]
[207.35668945 73.93950653]
[193.19424438 68.96461487]
[179.55123901 62.70418549]
[166.54406738 55.21163177]
[154.28373718 46.55087662]
[144.53608704 57.95190048]
[134.78842163 69.35292053]
[125.04077911 80.75394440]
[115.29312134 92.15496063]
[127.80230713 83.87725830]
[142.75096130 82.63726807]
[156.45306396 88.74073792]
[165.52995300 100.68269348]
[167.74345398 115.51847076]
[162.54774475 129.58988953]
[151.22401428 139.42721558]
[136.56442261 142.60475159]
[122.18376923 138.33900452]
[111.62799835 127.68181610]
[107.50000000 113.26223755]
[107.50000000 128.26223755]
[107.50000000 143.26223755]
[107.50000000 158.26223755]
[107.50000000 173.26223755]
[107.50000000 188.26223755]
[107.50000000 203.26223755]
[107.50000000 218.26223755]
[107.50000000 233.26223755]
[107.50000000 248.26223755]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[14 54]
[15 53]
[16 52]
[17 51]
[18 50]
[19 36]
[20 35]
[21 34]
[22 33]
[55 130]
[56 129]
[57 128]
[58 127]
[59 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
