%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUGCCCCCCACCCUACCACACAUUCGAAGAACCCGUAUACAUAAAAUCUAGACAAAAAAGxxxxxxxxxxACAAAACGAAUGAUUUCGACUCAUUAAAUUAUGAUAAUCAUAUUUACCAAAUGCCCCUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[3.59780216 292.40911865]
[-3.58470678 305.57772827]
[-10.76721573 318.74630737]
[-10.58258820 334.56643677]
[-23.46945572 342.03488159]
[-30.65196419 355.20346069]
[-37.83447266 368.37203979]
[-45.01698303 381.54061890]
[-52.19948959 394.70922852]
[-59.38199997 407.87780762]
[-61.65819931 424.67825317]
[-78.43219757 427.14184570]
[-85.44300842 411.70535278]
[-72.55058289 400.69528198]
[-65.36807251 387.52670288]
[-58.18556595 374.35812378]
[-51.00305557 361.18954468]
[-43.82054901 348.02096558]
[-36.63803864 334.85238647]
[-37.33640671 319.97415161]
[-23.93579865 311.56378174]
[-16.75329018 298.39520264]
[-9.57078075 285.22662354]
[-18.91543198 279.37051392]
[-27.94782448 273.04339600]
[-36.64424133 266.26187134]
[-44.98184967 259.04376221]
[-52.93875122 251.40805054]
[-60.49405670 243.37474060]
[-67.62792206 234.96495056]
[-74.32161713 226.20075989]
[-80.55756378 217.10517883]
[-86.31939697 207.70210266]
[-91.59196472 198.01620483]
[-96.36144257 188.07292175]
[-100.61530304 177.89837646]
[-104.34236908 167.51928711]
[-107.53285217 156.96289062]
[-110.17839050 146.25692749]
[-112.27201843 135.42948914]
[-113.80824280 124.50902557]
[-114.78303528 113.52420044]
[-115.19384003 102.50386047]
[-115.03956604 91.47695160]
[-114.32062531 80.47241974]
[-113.03890991 69.51916504]
[-111.19777679 58.64594650]
[-108.80206299 47.88131714]
[-105.85806274 37.25355148]
[-102.37349701 26.79054642]
[-98.35753632 16.51978111]
[-93.82070160 6.46822405]
[-88.77492523 -3.33772945]
[-83.23344421 -12.87233067]
[-77.21081543 -22.11054230]
[-70.72285461 -31.02810860]
[-63.78659439 -39.60160828]
[-56.42024994 -47.80853271]
[-48.64316940 -55.62733078]
[-40.47576523 -63.03747177]
[-31.93949318 -70.01949310]
[-23.05676270 -76.55506897]
[-13.85089874 -82.62702942]
[-4.34607744 -88.21942902]
[5.43274355 -93.31759644]
[15.45988750 -97.90812683]
[25.70902252 -101.97898102]
[36.15323639 -105.51946259]
[46.76510620 -108.52027130]
[57.51676178 -110.97353363]
[68.37997437 -112.87281036]
[79.32621765 -114.21310425]
[90.32674408 -114.99089813]
[101.35267639 -115.20415497]
[112.37505341 -114.85231018]
[123.36493683 -113.93629456]
[134.29347229 -112.45850372]
[145.13194275 -110.42282867]
[155.85191345 -107.83460236]
[166.42521667 -104.70063019]
[176.82409668 -101.02913666]
[187.02125549 -96.82977295]
[196.98989868 -92.11354828]
[206.70385742 -86.89286804]
[216.13763428 -81.18141937]
[225.26644897 -74.99421692]
[234.06631470 -68.34750366]
[243.81396484 -79.74851990]
[253.56161499 -91.14954376]
[263.30926514 -102.55056763]
[265.77255249 -118.76364899]
[281.14163208 -124.48412323]
[293.60610962 -113.82723999]
[290.34359741 -97.75589752]
[274.71029663 -92.80290985]
[264.96264648 -81.40189362]
[255.21498108 -70.00086975]
[245.46733093 -58.59984970]
[264.35067749 -38.93708038]
[280.59671021 -17.04480934]
[293.94473267 6.72566366]
[304.18054199 31.99289703]
[311.13989258 58.35143280]
[314.71112061 85.37829590]
[314.83691406 112.63979340]
[329.77120972 114.04209900]
[344.70550537 115.44439697]
[359.63983154 116.84670258]
[374.57412720 118.24900818]
[383.47653198 115.92542267]
[389.80343628 119.83899689]
[404.70532227 121.55168152]
[419.60723877 123.26437378]
[434.50912476 124.97706604]
[450.93505859 120.77877045]
[459.51641846 135.40054321]
[447.84161377 147.69425964]
[432.79644775 139.87896729]
[417.89453125 138.16627502]
[402.99264526 136.45358276]
[388.09072876 134.74089050]
[373.17181396 133.18331909]
[358.23751831 131.78100586]
[343.30322266 130.37870789]
[328.36889648 128.97640991]
[313.43460083 127.57410431]
[310.84045410 143.13879395]
[307.11285400 158.47157288]
[302.27178955 173.49000549]
[296.34332275 188.11334229]
[289.35928345 202.26300049]
[281.35723877 215.86286926]
[272.38024902 228.83985901]
[262.47650146 241.12420654]
[251.69929504 252.64987183]
[240.10653687 263.35488892]
[227.76055908 273.18167114]
[214.72775269 282.07745361]
[201.07815552 289.99438477]
[186.88514709 296.88989258]
[172.22505188 302.72689819]
[157.17668152 307.47406006]
[141.82092285 311.10583496]
[126.24032593 313.60266113]
[110.51866150 314.95120239]
[94.74045563 315.14413452]
[78.99051666 314.18045044]
[63.35353088 312.06530762]
[47.91355515 308.81011963]
[32.75360107 304.43234253]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 23]
[2 22]
[3 21]
[5 19]
[6 18]
[7 17]
[8 16]
[9 15]
[10 14]
[87 98]
[88 97]
[89 96]
[90 95]
[105 126]
[106 125]
[107 124]
[108 123]
[109 122]
[111 121]
[112 120]
[113 119]
[114 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
