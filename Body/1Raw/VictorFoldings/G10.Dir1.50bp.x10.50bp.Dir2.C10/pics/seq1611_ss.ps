%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCUGAUGAAGGCUACAAAGUAAGCGCAAGUACCCACGUAAAGACGUUAGGUCAAGGUGUxxxxxxxxxxUGAGGUGGCAAGAAAUGGGCUACAUUUUCUACCCCAGAAAACUACGAUAGCCCUUAUGAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[106.45563507 293.43389893]
[106.45563507 278.43389893]
[106.45563507 263.43389893]
[106.45563507 248.43389893]
[106.45563507 233.43389893]
[106.45563507 218.43389893]
[106.45563507 203.43389893]
[106.45563507 188.43389893]
[106.45563507 173.43389893]
[106.45563507 158.43389893]
[91.13957977 153.37716675]
[78.99127197 144.73852539]
[69.24361420 156.13954163]
[59.49596405 167.54055786]
[59.30784225 183.58251953]
[46.56044769 193.32333374]
[31.03249168 189.29069519]
[24.63569450 174.57809448]
[32.27713013 160.47178650]
[48.09494400 157.79290771]
[57.84259796 146.39189148]
[67.59024811 134.99087524]
[58.32529831 123.19422913]
[44.93901443 129.96234131]
[36.42227554 143.97653198]
[20.03558731 143.33744812]
[12.63616562 128.70252991]
[21.83590508 115.12693787]
[38.17089844 116.57605743]
[51.55718613 109.80794525]
[53.43496704 89.80049133]
[62.92949295 72.91288757]
[77.89272308 61.77727127]
[72.69731140 47.70575333]
[67.50189209 33.63423157]
[55.46368027 23.36817169]
[58.31381989 8.74880314]
[53.11840439 -5.32271671]
[39.04212952 -11.99326611]
[33.97369385 -26.33779907]
[40.41979218 -39.71626663]
[31.15484238 -51.51290894]
[18.71540070 -59.89505005]
[6.27596092 -68.27719116]
[-12.08995533 -69.09755707]
[-19.22498322 -85.10041046]
[-31.83611107 -93.22195435]
[-44.44723892 -101.34349823]
[-57.05836868 -109.46503448]
[-73.45553589 -109.71994781]
[-81.19586945 -124.17745209]
[-72.31677246 -137.96490479]
[-55.95230865 -136.89895630]
[-48.93682480 -122.07616425]
[-36.32569504 -113.95462036]
[-23.71456909 -105.83308411]
[-11.10344028 -97.71154022]
[0.82336253 -99.96069336]
[11.41064358 -93.24291992]
[14.65810394 -80.71663666]
[27.09754372 -72.33448792]
[39.53698349 -63.95234680]
[33.50833511 -77.68753815]
[30.22068405 -92.32281494]
[29.79565239 -107.31678772]
[32.24895859 -122.11480713]
[37.48985291 -136.16944885]
[45.32446289 -148.96081543]
[55.46297073 -160.01570129]
[67.53032684 -168.92518616]
[81.08013153 -175.35968018]
[95.61115265 -179.08116150]
[110.58585358 -179.95196533]
[125.45029449 -177.93986511]
[139.65458679 -173.11929321]
[152.67330933 -165.66859436]
[164.02485657 -155.86337280]
[173.28930664 -144.06632996]
[180.12394714 -130.71389771]
[184.27597046 -116.29998779]
[185.59175110 -101.35781097]
[184.02264404 -86.44010925]
[179.62667847 -72.09871674]
[172.56646729 -58.86415863]
[163.10319519 -47.22600937]
[151.58692932 -37.61478806]
[138.44367981 -30.38603783]
[124.15962982 -25.80716324]
[109.26319885 -24.04754829]
[94.30542755 -25.17228317]
[79.83963776 -29.13976479]
[66.40094757 -35.80322266]
[54.49131012 -44.91168213]
[68.08469391 -38.93209076]
[73.55403900 -24.73558044]
[67.18992615 -10.51813221]
[72.38533783 3.55338740]
[84.05194092 12.81295776]
[81.57341003 28.43881607]
[86.76882935 42.51033783]
[91.96424103 56.58185577]
[112.29593658 53.79408264]
[133.28433228 60.73719788]
[150.23712158 77.29203796]
[158.77928162 101.09123230]
[173.77847290 100.93519592]
[188.77766418 100.77915955]
[203.77685547 100.62312317]
[218.77603149 100.46708679]
[233.77522278 100.31105042]
[245.98283386 89.90172577]
[261.70440674 93.09723663]
[268.87973022 107.44625854]
[262.00448608 121.94145203]
[246.35278320 125.46334076]
[233.93125916 115.31023407]
[218.93206787 115.46627045]
[203.93289185 115.62230682]
[188.93370056 115.77834320]
[173.93450928 115.93437958]
[158.93531799 116.09041595]
[155.07815552 130.58601379]
[168.01622009 138.17591858]
[180.95426941 145.76583862]
[197.67552185 148.56513977]
[199.61451721 165.40785217]
[183.96679688 171.93357849]
[173.36436462 158.70388794]
[160.42631531 151.11398315]
[147.48825073 143.52407837]
[140.98010254 147.25152588]
[148.69551086 160.11512756]
[156.41093445 172.97874451]
[169.13626099 180.92015076]
[168.85279846 195.91746521]
[155.83645630 203.37234497]
[142.75732422 196.02819824]
[142.34655762 181.03392029]
[135.15516663 167.87017822]
[127.96379089 154.70643616]
[121.45563507 158.43389893]
[121.45563507 173.43389893]
[121.45563507 188.43389893]
[121.45563507 203.43389893]
[121.45563507 218.43389893]
[121.45563507 233.43389893]
[121.45563507 248.43389893]
[121.45563507 263.43389893]
[121.45563507 278.43389893]
[121.45563507 293.43389893]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 22]
[13 21]
[14 20]
[23 30]
[24 29]
[33 101]
[34 100]
[35 99]
[37 97]
[38 96]
[41 93]
[42 62]
[43 61]
[44 60]
[46 57]
[47 56]
[48 55]
[49 54]
[105 121]
[106 120]
[107 119]
[108 118]
[109 117]
[110 116]
[122 130]
[123 129]
[124 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
