%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUUAGCCCUAAACCUCAACAGUUAAAUCAACAAAACUGCUCGCCAGAACACUACGAGCCAxxxxxxxxxxGGGGAGUCCGAACUAGUCUCAGGCUUCAACAUCGAAUACGCCGCAGGCCCCUUCGCCCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.42368317 444.27200317]
[95.42368317 429.27200317]
[95.42368317 414.27200317]
[95.42368317 399.27200317]
[95.42368317 384.27200317]
[95.42368317 369.27200317]
[95.42368317 354.27200317]
[95.42368317 339.27200317]
[95.42368317 324.27200317]
[95.42368317 309.27200317]
[80.36530304 305.93112183]
[66.41497803 299.33419800]
[54.26734924 289.80633545]
[44.52803802 277.81857300]
[37.68347168 263.96481323]
[34.07658386 248.93217468]
[33.88962173 233.46705627]
[37.13496017 218.33802795]
[43.65432358 204.29762268]
[53.12649918 192.04493713]
[65.08316040 182.19079590]
[78.93203735 175.22732544]
[93.98623657 171.50335693]
[93.67417908 156.50660706]
[93.36212158 141.50985718]
[73.30110168 137.33836365]
[56.03908157 123.32697296]
[46.38644409 101.37609100]
[47.89579391 75.69101715]
[32.90309906 75.22296906]
[17.91040230 74.75492859]
[2.91770601 74.28688812]
[-12.07499027 73.81884766]
[-20.09741974 86.91603088]
[-33.60129166 94.23320007]
[-48.95413208 93.80208588]
[-62.02610397 85.73863983]
[-69.30091095 72.21189880]
[-68.82167053 56.86048508]
[-60.71729660 43.81385422]
[-47.16781616 36.58147812]
[-31.81798172 37.10883713]
[-18.79681587 45.25407028]
[-11.60694790 58.82614899]
[3.38574815 59.29419327]
[18.37844467 59.76223373]
[33.37113953 60.23027420]
[48.36383820 60.69831848]
[54.71096420 47.10736847]
[44.72824097 35.91160202]
[34.74551392 24.71583557]
[24.76278687 13.52006912]
[11.91303730 11.99108124]
[3.82919931 2.40617013]
[4.44981766 -9.71497440]
[-5.29783440 -21.11599541]
[-20.93113136 -26.06898308]
[-24.19363976 -42.14032745]
[-11.72917080 -52.79720688]
[3.63989758 -47.07673645]
[6.10318613 -30.86364746]
[15.85083866 -19.46262741]
[32.66954422 -14.55028534]
[35.95855331 3.53734303]
[45.94128036 14.73310852]
[55.92400360 25.92887497]
[65.90673065 37.12464142]
[79.92344666 31.78312874]
[79.92344666 16.78312874]
[66.14957428 10.20716476]
[56.59965134 -1.69920599]
[53.16981125 -16.57196426]
[56.54105377 -31.45811462]
[66.04402161 -43.40200043]
[79.79188538 -50.03215408]
[95.05500031 -50.03215408]
[108.80287170 -43.40200043]
[118.30583191 -31.45811462]
[121.67707825 -16.57196426]
[118.24723816 -1.69920599]
[108.69731140 10.20716476]
[94.92344666 16.78312874]
[94.92344666 31.78312874]
[109.04824829 36.83188629]
[118.55660248 25.23054314]
[128.06497192 13.62920189]
[122.03334808 -0.43771502]
[123.24139404 -15.69547367]
[131.41151428 -28.63795280]
[144.66625977 -36.29106522]
[159.95980835 -36.89618301]
[173.77778625 -30.31425285]
[182.94496155 -18.05775452]
[185.35473633 -2.94314241]
[180.45339966 11.55635738]
[169.36723328 22.10886383]
[154.64375305 26.28949165]
[139.66630554 23.13755989]
[130.15794373 34.73890305]
[120.64958954 46.34024429]
[137.49952698 67.28157806]
[140.91691589 90.35970306]
[155.89663696 89.57985687]
[170.87634277 88.80001831]
[185.82443237 87.55313873]
[200.72633362 85.84045410]
[215.62823486 84.12776184]
[225.25694275 71.59526062]
[240.93792725 69.62483978]
[253.36791992 79.38551331]
[255.17243958 95.08644104]
[245.28089905 107.41255188]
[229.56176758 109.05097198]
[217.34092712 99.02966309]
[202.43902588 100.74235535]
[187.53712463 102.45503998]
[185.04782104 105.03784943]
[181.15791321 106.51102448]
[176.41802979 106.21785736]
[171.65618896 103.77973175]
[156.67648315 104.55957794]
[141.69676208 105.33941650]
[136.01718140 121.67698669]
[124.23993683 134.34465027]
[108.35887909 141.19779968]
[108.67093658 156.19454956]
[108.98298645 171.19129944]
[123.31810760 174.01329041]
[136.74206543 179.76470947]
[148.66372681 188.18952942]
[158.55868530 198.91407776]
[165.99235535 211.46356201]
[170.63902283 225.28311157]
[172.29611206 239.76234436]
[170.89305115 254.26229858]
[166.49427795 268.14358521]
[159.29623413 280.79470825]
[149.61865234 291.65887451]
[137.89027405 300.25851440]
[124.62996674 306.21640015]
[110.42368317 309.27200317]
[110.42368317 324.27200317]
[110.42368317 339.27200317]
[110.42368317 354.27200317]
[110.42368317 369.27200317]
[110.42368317 384.27200317]
[110.42368317 399.27200317]
[110.42368317 414.27200317]
[110.42368317 429.27200317]
[110.42368317 444.27200317]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[23 127]
[24 126]
[25 125]
[29 48]
[30 47]
[31 46]
[32 45]
[33 44]
[49 67]
[50 66]
[51 65]
[52 64]
[55 62]
[56 61]
[68 83]
[69 82]
[84 100]
[85 99]
[86 98]
[102 122]
[103 121]
[104 120]
[105 116]
[106 115]
[107 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
