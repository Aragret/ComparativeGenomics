%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUCUACAUCACCGCCCCGACCUUAGCUCUCACCAUCGCUCUUCUACUAUGAACCCCCCUxxxxxxxxxxAACAAUAGCCUCAUCAUCCCCACCAUCAUAGCCACCAUCACCCUCCUUAACCUCUACUUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[204.19378662 65.13729858]
[189.29188538 66.84999084]
[174.38998413 68.56267548]
[159.48808289 70.27536774]
[144.58618164 71.98806000]
[129.68428040 73.70074463]
[106.03410339 143.14746094]
[96.05137634 154.34323120]
[86.06864929 165.53900146]
[76.08592224 176.73475647]
[66.10319519 187.93052673]
[72.00739288 202.00544739]
[71.21144104 217.24778748]
[63.87337494 230.63119507]
[51.45017242 239.49836731]
[36.40847015 242.08872986]
[21.73481178 237.88796997]
[10.34265900 227.73013306]
[4.49393415 213.63208008]
[5.34990501 198.39297485]
[12.74061775 185.03857422]
[25.19864273 176.22038269]
[40.25042725 173.68928528]
[54.90743256 177.94779968]
[64.89015961 166.75202942]
[74.87288666 155.55627441]
[84.85561371 144.36050415]
[94.83834076 133.16473389]
[92.46143341 126.05134583]
[78.33322906 131.09057617]
[64.01365662 135.55711365]
[59.25971222 121.33038330]
[73.38802338 116.29103851]
[87.70761871 111.82456970]
[85.33071136 104.71118164]
[70.62274933 101.76570129]
[55.91478348 98.82021332]
[45.83335114 110.40728760]
[31.30382729 115.38609314]
[16.23458099 112.41735840]
[4.67916489 102.29965210]
[-0.25407329 87.75459290]
[2.76188326 72.69473267]
[12.91575718 61.17108536]
[27.47620773 56.28346252]
[42.52654648 59.34660721]
[54.01830673 69.53655243]
[58.86026764 84.11225128]
[73.56822968 87.05773926]
[88.27619171 90.00321960]
[91.93574524 83.45664215]
[102.91439819 63.81690979]
[92.70092010 52.83124542]
[82.48744202 41.84558105]
[66.68649292 41.52082443]
[55.80359650 30.06053734]
[56.29539108 14.26390171]
[67.87010193 3.50278306]
[83.66065216 4.16156101]
[94.29879761 15.84939480]
[93.47310638 31.63210106]
[103.68658447 42.61776352]
[113.90006256 53.60343170]
[127.97158813 58.79884720]
[142.87348938 57.08615494]
[157.77539062 55.37346649]
[172.67729187 53.66077805]
[187.57919312 51.94808578]
[202.48109436 50.23539734]
[201.88627625 35.24011612]
[202.41372681 20.24231720]
[204.06050110 5.32587099]
[206.81736755 -9.42580128]
[210.66894531 -23.93020248]
[215.59365845 -38.10621643]
[221.56399536 -51.87456131]
[228.54653931 -65.15824127]
[236.50225830 -77.88297272]
[245.38667297 -89.97758484]
[255.15005493 -101.37443542]
[265.73785400 -112.00980377]
[277.09082031 -121.82419586]
[289.14547729 -130.76274109]
[301.83441162 -138.77542114]
[315.08663940 -145.81745911]
[328.82809448 -151.84945679]
[342.98187256 -156.83769226]
[357.46887207 -160.75425720]
[372.20803833 -163.57723999]
[387.11694336 -165.29086304]
[402.11221313 -165.88555908]
[417.11001587 -165.35797119]
[432.02645874 -163.71107483]
[446.77810669 -160.95407104]
[461.28247070 -157.10237122]
[475.45843506 -152.17752075]
[489.22674561 -146.20707703]
[502.51034546 -139.22441101]
[515.23498535 -131.26856995]
[527.32952881 -122.38406372]
[538.72631836 -112.62056732]
[549.36157227 -102.03268433]
[559.17590332 -90.67963409]
[568.11431885 -78.62489319]
[576.12689209 -65.93589020]
[583.16882324 -52.68358994]
[589.20068359 -38.94209671]
[594.18878174 -24.78825951]
[598.10522461 -10.30123901]
[600.92810059 4.43794966]
[602.64160156 19.34687805]
[603.23614502 34.34216690]
[602.70843506 49.33995819]
[601.06140137 64.25637817]
[598.30426025 79.00800323]
[594.45245361 93.51232910]
[589.52746582 107.68825531]
[583.55688477 121.45649719]
[576.57409668 134.74005127]
[568.61816406 147.46464539]
[559.73352051 159.55909729]
[549.96997070 170.95578003]
[539.38195801 181.59095764]
[528.02880859 191.40515137]
[515.97399902 200.34347534]
[503.28494263 208.35595703]
[490.03256226 215.39775085]
[476.29101562 221.42950439]
[462.13714600 226.41749573]
[447.65008545 230.33378601]
[432.91088867 233.15652466]
[418.00192261 234.86988831]
[403.00665283 235.46430969]
[388.00885010 234.93646240]
[373.09243774 233.28929138]
[358.34085083 230.53202820]
[343.83654785 226.68008423]
[329.66067505 221.75498962]
[315.89248657 215.78428650]
[302.60897827 208.80139160]
[289.88446045 200.84533691]
[277.79010010 191.96060181]
[266.39349365 182.19691467]
[255.75840759 171.60884094]
[245.94430542 160.25561523]
[237.00608826 148.20072937]
[228.99374390 135.51158142]
[221.95205688 122.25914764]
[215.92041016 108.51754761]
[210.93255615 94.36362457]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 69]
[2 68]
[3 67]
[4 66]
[5 65]
[6 64]
[7 28]
[8 27]
[9 26]
[10 25]
[11 24]
[35 50]
[36 49]
[37 48]
[52 63]
[53 62]
[54 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
