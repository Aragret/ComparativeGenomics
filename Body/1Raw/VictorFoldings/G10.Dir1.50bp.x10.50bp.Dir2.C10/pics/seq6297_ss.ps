%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGUCCUAGGCACAGCUCUAAGCCUCCUUAUUCGAGCCGAGCUGGGCCAGCCAGGCAACCUxxxxxxxxxxCUGAGAACCAAAAUGAACGAAAAUCUGUUCGCUUCAUUCAUUGCCCCCACAAUCCUAGGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 255.49536133]
[92.50000000 240.49536133]
[92.50000000 225.49536133]
[92.50000000 210.49536133]
[92.50000000 195.49536133]
[92.50000000 180.49536133]
[92.50000000 165.49536133]
[92.50000000 150.49536133]
[92.50000000 135.49536133]
[92.50000000 120.49535370]
[87.11459351 115.27545166]
[76.67461395 126.04609680]
[65.90412903 115.60594940]
[76.34378815 104.83563995]
[70.95838165 99.61573029]
[55.96568680 100.08377075]
[47.42185974 103.49769592]
[40.65692902 100.40232086]
[25.65773964 100.55835724]
[10.65855122 100.71439362]
[-3.06038809 108.59483337]
[-15.86745834 100.99034882]
[-30.86664581 101.14638519]
[-45.86583328 101.30242157]
[-60.86502457 101.45845795]
[-75.86421204 101.61449432]
[-90.86340332 101.77053070]
[-105.79770660 103.17282867]
[-120.56376648 105.81169891]
[-135.32981873 108.45056152]
[-150.09587097 111.08942413]
[-162.27836609 122.06754303]
[-177.79130554 116.74957275]
[-180.67631531 100.60619354]
[-167.96553040 90.24432373]
[-152.73474121 96.32337189]
[-137.96868896 93.68450165]
[-123.20262909 91.04563904]
[-108.43656921 88.40677643]
[-121.00391388 80.21764374]
[-126.50727844 66.26368713]
[-122.91327667 51.70060730]
[-111.54982758 41.90918350]
[-96.61550140 40.50714493]
[-83.62821960 48.01251984]
[-77.38654327 61.65221786]
[-80.19663239 76.38665009]
[-91.01943970 86.77133942]
[-76.02024841 86.61530304]
[-61.02106094 86.45926666]
[-46.02186966 86.30323029]
[-31.02268219 86.14719391]
[-16.02349472 85.99115753]
[-3.37739825 78.12187958]
[10.50251389 85.71520996]
[25.50170326 85.55917358]
[40.50089264 85.40313721]
[55.49764633 85.09107971]
[70.49034119 84.62303925]
[81.86468506 78.73161316]
[92.84671021 78.53511810]
[101.08387756 82.73365784]
[105.17712402 89.20171356]
[115.61693573 78.43090057]
[126.05675507 67.66009521]
[136.49656677 56.88928604]
[146.93637085 46.11847687]
[132.27467346 49.28620529]
[117.49803925 46.70722961]
[104.77619934 38.76023102]
[95.97715759 26.61210632]
[92.39292908 12.04662514]
[94.54978943 -2.79749680]
[102.13104248 -15.74062443]
[114.02349854 -24.88225746]
[128.48094177 -28.88008690]
[143.38049316 -27.14709091]
[156.53439331 -19.93773460]
[166.01119995 -8.31060219]
[170.41937256 6.02703953]
[169.11164856 20.96992683]
[162.28045654 34.32339859]
[175.37361145 27.00429535]
[188.46676636 19.68518829]
[173.91336060 16.05223846]
[164.15237427 4.66263199]
[162.79029846 -10.27539825]
[170.33039856 -23.24254799]
[183.98674011 -29.44771194]
[198.71360779 -26.59820747]
[209.06968689 -15.74686909]
[211.22862244 -0.90304941]
[204.39335632 12.44813347]
[218.51815796 7.39937687]
[232.64295959 2.35062051]
[246.76776123 -2.69813585]
[260.89257812 -7.74689198]
[274.96408081 -12.94230747]
[288.98080444 -18.28382111]
[302.99752808 -23.62533188]
[317.01422119 -28.96684456]
[323.24789429 -43.48981857]
[337.95587158 -49.27356339]
[352.41210938 -42.88668823]
[358.04003906 -28.11840820]
[351.50067139 -13.73048592]
[336.67370605 -8.25901890]
[322.35574341 -14.95013237]
[308.33901978 -9.60861969]
[294.32232666 -4.26710749]
[280.30560303 1.07440531]
[275.14181519 6.42987394]
[265.94131470 6.37791061]
[251.81652832 11.42666721]
[237.69172668 16.47542381]
[223.56692505 21.52417946]
[209.44210815 26.57293701]
[195.78587341 32.77834320]
[182.69271851 40.09745026]
[169.59956360 47.41655350]
[157.70718384 56.55828857]
[147.26737976 67.32909393]
[136.82756042 78.09990692]
[126.38774872 88.87071228]
[115.94793701 99.64152527]
[127.07037354 89.57715607]
[141.01878357 84.05976868]
[156.01640320 83.79217529]
[170.15277100 88.80846405]
[181.62715149 98.46965027]
[188.97792053 111.54505157]
[191.26870728 126.36909485]
[188.20770264 141.05345154]
[180.18482971 153.72758484]
[168.22206116 162.77700806]
[153.84324646 167.04899597]
[138.88002014 165.99937439]
[125.23842621 159.76184082]
[114.65617371 149.13095093]
[108.48126221 135.46089172]
[107.50000000 120.49535370]
[107.50000000 135.49536133]
[107.50000000 150.49536133]
[107.50000000 165.49536133]
[107.50000000 180.49536133]
[107.50000000 195.49536133]
[107.50000000 210.49536133]
[107.50000000 225.49536133]
[107.50000000 240.49536133]
[107.50000000 255.49536133]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[15 59]
[16 58]
[18 57]
[19 56]
[20 55]
[22 53]
[23 52]
[24 51]
[25 50]
[26 49]
[27 48]
[28 39]
[29 38]
[30 37]
[31 36]
[63 125]
[64 124]
[65 123]
[66 122]
[67 121]
[82 120]
[83 119]
[84 118]
[93 117]
[94 116]
[95 115]
[96 114]
[97 113]
[98 111]
[99 110]
[100 109]
[101 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
