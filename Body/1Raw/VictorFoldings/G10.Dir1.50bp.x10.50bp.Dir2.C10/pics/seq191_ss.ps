%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAAUAAUAACAAUUGAAUGUCUGCACAGCCACUUUCCACACAGACAUCAUAACAAAAAAUUxxxxxxxxxxUGCUUCCUAGUCCUGUAUGCCCUUUUCCUAACACUCACAACAAAACUAACUAAUACUAACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 255.77943420]
[92.50000000 240.77943420]
[92.50000000 225.77943420]
[92.50000000 210.77943420]
[92.50000000 195.77943420]
[92.50000000 180.77943420]
[92.50000000 165.77943420]
[92.50000000 150.77943420]
[92.50000000 135.77943420]
[92.50000000 120.77944183]
[85.59320831 117.85604858]
[79.74620819 131.66954041]
[65.93280792 125.82231903]
[71.77962494 112.00925446]
[64.87283325 109.08586121]
[54.10415649 119.52787018]
[43.33547592 129.96987915]
[39.37051010 145.88249207]
[23.53483009 150.14433289]
[12.11882687 138.37118530]
[16.86630630 122.67425537]
[32.89346695 119.20120239]
[43.66214752 108.75919342]
[54.43082428 98.31718445]
[54.12284851 83.32034302]
[42.93455124 73.32924652]
[31.74625397 63.33815384]
[18.18435860 56.92917633]
[3.36187601 54.62829971]
[-11.46060562 52.32742691]
[-26.28308868 50.02655029]
[-41.10557175 47.72567749]
[-55.92805099 45.42480087]
[-62.96448517 58.83253479]
[-73.97486115 69.22726440]
[-87.76485443 75.48143768]
[-102.83863831 76.91665649]
[-117.56111145 73.37724304]
[-130.33529663 65.24711609]
[-139.77554321 53.40817642]
[-144.85783386 39.14462280]
[-145.03089905 24.00365829]
[-140.27595520 9.62766457]
[-131.10879517 -2.42396212]
[-118.52378082 -10.84394932]
[-103.88605499 -14.71895981]
[-88.78340149 -13.62866306]
[-74.85405731 -7.69132423]
[-63.60895920 2.44901752]
[-56.26789856 15.69241428]
[-53.62717819 30.60231972]
[-38.80469513 32.90319443]
[-23.98221397 35.20407104]
[-9.15973091 37.50494385]
[5.66275072 39.80582047]
[20.48523331 42.10669327]
[9.06767750 32.37841415]
[-0.12421135 20.52475739]
[-6.70352316 7.04467392]
[-10.39331722 -7.49442530]
[-11.03828239 -22.48055267]
[-8.61126900 -37.28290558]
[-3.21443725 -51.27841187]
[4.92504740 -63.87796783]
[15.46457291 -74.55122375]
[27.96050453 -82.84891510]
[41.88685608 -88.42177582]
[56.65742874 -91.03522491]
[71.65049744 -90.57925415]
[86.23496246 -87.07306671]
[99.79692841 -80.66423035]
[111.76553345 -71.62252808]
[121.63699341 -60.32853317]
[128.99578857 -47.25764465]
[133.53218079 -32.96004868]
[135.05520630 -18.03757095]
[133.50074768 -3.11833119]
[128.93426514 11.16967869]
[121.54796600 24.22504234]
[111.65274811 35.49822235]
[99.66513062 44.51470566]
[86.08969879 50.89496613]
[71.49787903 54.37043762]
[56.50388718 54.79483414]
[41.73735046 52.14985657]
[52.92564774 62.14095306]
[64.11394501 72.13204956]
[101.50931549 66.67762756]
[117.91590881 88.52248383]
[132.49966431 85.01331329]
[147.08340454 81.50415039]
[161.66716003 77.99497986]
[169.94261169 64.79821777]
[184.78260803 61.44717789]
[197.31269836 69.41789246]
[211.89645386 65.90872192]
[226.48019409 62.39955521]
[234.14782715 57.31987000]
[241.39938354 58.97132111]
[256.05209351 55.76232529]
[257.52255249 40.70599747]
[263.57553101 26.84177971]
[273.61804199 15.52794743]
[286.66625977 7.87291384]
[301.44180298 4.62664127]
[316.49716187 6.10716629]
[330.35729980 12.16944218]
[341.66439819 22.21954918]
[349.31069946 35.27288055]
[352.54705811 50.05060196]
[351.05645752 65.10494995]
[344.98489380 78.96103668]
[334.92721558 90.26140594]
[321.86877441 97.89894104]
[307.08886719 101.12541199]
[292.03552246 99.62471008]
[278.18350220 93.54386902]
[266.88989258 83.47861481]
[259.26110840 70.41504669]
[244.60836792 73.62404633]
[229.98936462 76.98330688]
[215.40562439 80.49246979]
[200.82186890 84.00164032]
[193.28923035 96.79988098]
[178.54922485 100.56642914]
[165.17633057 92.57873535]
[150.59257507 96.08789825]
[136.00883484 99.59706879]
[121.42507935 103.10623169]
[135.90591431 107.01847076]
[150.69876099 104.53420258]
[165.15209961 108.54679108]
[176.54713440 118.30142975]
[182.74037170 131.96319580]
[182.56680298 146.96218872]
[176.05908203 160.47697449]
[164.44136047 169.96531677]
[149.89901733 173.64234924]
[135.16761780 170.81642151]
[123.01825714 162.01910400]
[115.73632050 148.90524292]
[114.69138336 133.94317627]
[107.50000000 120.77944183]
[107.50000000 135.77943420]
[107.50000000 150.77943420]
[107.50000000 165.77943420]
[107.50000000 180.77943420]
[107.50000000 195.77943420]
[107.50000000 210.77943420]
[107.50000000 225.77943420]
[107.50000000 240.77943420]
[107.50000000 255.77943420]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[15 24]
[16 23]
[17 22]
[25 87]
[26 86]
[27 85]
[28 56]
[29 55]
[30 54]
[31 53]
[32 52]
[33 51]
[89 129]
[90 128]
[91 127]
[92 126]
[95 123]
[96 122]
[97 121]
[99 120]
[100 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
