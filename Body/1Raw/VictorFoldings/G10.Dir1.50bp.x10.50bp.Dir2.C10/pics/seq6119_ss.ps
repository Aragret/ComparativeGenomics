%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAACAGCUAAGCACCCUAAUCAACUGGCUUCAAUCUACUUCUCCCGCCGCCGGGAAAAAAxxxxxxxxxxUAUCGAAACCAUCAGCCUACUCAUUCAACCAAUAGCCCUGGCCGUACGCCUAACCGCUAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[94.32917023 279.66006470]
[94.32917023 264.66006470]
[94.32917023 249.66007996]
[94.32917023 234.66007996]
[94.32917023 219.66007996]
[94.32917023 204.66007996]
[94.32917023 189.66007996]
[94.32917023 174.66007996]
[94.32917023 159.66007996]
[94.32917023 144.66007996]
[78.15439606 137.51206970]
[66.53211212 125.04334259]
[60.97372818 109.60630035]
[61.90891647 93.86475372]
[68.68918610 80.33723450]
[79.77015686 70.99407196]
[73.99388123 57.15085602]
[68.21761322 43.30764008]
[62.44133759 29.46442223]
[48.11447525 30.45479774]
[34.20527267 26.96808434]
[22.07610321 19.35951042]
[12.91073799 8.38735294]
[7.59882212 -4.86261606]
[6.64953375 -19.08456421]
[10.14280128 -32.88129807]
[17.72276115 -44.90151978]
[28.63396072 -53.97217560]
[23.14693069 -67.93256378]
[17.65989876 -81.89295197]
[2.48446846 -83.10443878]
[-10.60672665 -90.75346375]
[-19.04414940 -103.27664948]
[-21.19870377 -118.16015625]
[-16.69606018 -132.44425964]
[-6.48037291 -143.31188965]
[-11.96740437 -157.27227783]
[-17.45443535 -171.23266602]
[-22.94146729 -185.19305420]
[-35.76695251 -184.43717957]
[-48.26523209 -187.33473206]
[-59.41843796 -193.63931274]
[-68.32121277 -202.82745361]
[-74.25418091 -214.14210510]
[-76.74207306 -226.65501404]
[-75.59178925 -239.34283447]
[-70.90735626 -251.17086792]
[-63.08058548 -261.17739868]
[-52.75833511 -268.55191040]
[-57.36389923 -282.82739258]
[-61.96946335 -297.10284424]
[-69.28857422 -310.19598389]
[-79.03622437 -321.59701538]
[-88.78387451 -332.99804688]
[-98.53152466 -344.39904785]
[-108.27918243 -355.80007935]
[-123.91247559 -360.75305176]
[-127.17498016 -376.82440186]
[-114.71051788 -387.48129272]
[-99.34144592 -381.76080322]
[-96.87815857 -365.54772949]
[-87.13050842 -354.14669800]
[-77.38285065 -342.74569702]
[-67.63520050 -331.34466553]
[-57.88755035 -319.94363403]
[-60.24366760 -334.75744629]
[-58.21128845 -349.61911011]
[-51.96439362 -363.25643921]
[-42.03775024 -374.50195312]
[-29.28113365 -382.39300537]
[-14.78657913 -386.25408936]
[0.20510404 -385.75463867]
[14.41054630 -380.93743896]
[26.61368561 -372.21484375]
[35.76986694 -360.33358765]
[41.09527206 -346.31076050]
[42.13402176 -331.34677124]
[38.79718781 -316.72262573]
[31.37042427 -303.69024658]
[20.48950195 -293.36523438]
[7.08588505 -286.63153076]
[-7.69300461 -284.06549072]
[-22.58201408 -285.88687134]
[-36.30656815 -291.93969727]
[-47.69400406 -301.70840454]
[-43.08843994 -287.43295288]
[-38.48287582 -273.15747070]
[-21.21584511 -272.31921387]
[-5.54502869 -264.93750000]
[6.14430523 -252.10639954]
[12.06165314 -235.75161743]
[11.28550529 -218.34158325]
[3.90674448 -202.51480103]
[-8.98107719 -190.68008423]
[-3.49404621 -176.71969604]
[1.99298537 -162.75930786]
[7.48001671 -148.79891968]
[22.36150742 -147.79556274]
[35.38516998 -140.40003967]
[43.94138336 -128.03266907]
[46.28902435 -113.11593628]
[41.90953827 -98.60018158]
[31.62028885 -87.37998962]
[37.10731888 -73.41959381]
[42.59435272 -59.45920563]
[58.29756546 -60.06314087]
[73.28727722 -55.25622559]
[85.75305176 -45.59981537]
[94.18271637 -32.24213791]
[97.54580688 -16.78176880]
[95.41951752 -1.07634771]
[88.04172516 12.98064232]
[76.28455353 23.68815041]
[82.06082916 37.53136826]
[87.83710480 51.37458420]
[93.61337280 65.21780396]
[112.85290527 64.47624207]
[130.87194824 74.26570892]
[142.01834106 92.95449066]
[142.09111023 115.96932220]
[155.33369446 123.01445770]
[168.57627869 130.05958557]
[184.27774048 126.76660919]
[196.54968262 137.09999084]
[195.97813416 153.13285828]
[183.00152588 162.56616211]
[167.57441711 158.16348267]
[161.53114319 143.30216980]
[148.28855896 136.25704956]
[135.04597473 129.21191406]
[128.61677551 133.07394409]
[136.86062622 145.60546875]
[145.10446167 158.13699341]
[157.74317932 166.21553040]
[157.53465271 181.21408081]
[144.67623901 188.93812561]
[131.33703613 182.07768250]
[130.14114380 167.12551880]
[122.94975281 153.96177673]
[115.75836945 140.79803467]
[109.32917023 144.66007996]
[109.32917023 159.66007996]
[109.32917023 174.66007996]
[109.32917023 189.66007996]
[109.32917023 204.66007996]
[109.32917023 219.66007996]
[109.32917023 234.66007996]
[109.32917023 249.66007996]
[109.32917023 264.66006470]
[109.32917023 279.66006470]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[16 116]
[17 115]
[18 114]
[19 113]
[28 105]
[29 104]
[30 103]
[36 97]
[37 96]
[38 95]
[39 94]
[49 87]
[50 86]
[51 85]
[52 65]
[53 64]
[54 63]
[55 62]
[56 61]
[120 130]
[121 129]
[122 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
