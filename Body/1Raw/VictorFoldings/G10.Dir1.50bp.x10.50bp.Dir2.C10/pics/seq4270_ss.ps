%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAACCUCCCUGUUCUUAUGAAUUCGAACAGCAUACCCCCGAUUCCGCUACGACCAACUCAxxxxxxxxxxAGCAUUUACCAUCUCACUUCUAGGAAUACUAGUAUAUCGCUCACACCUCAUAUCCUCCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[120.15606689 116.81841278]
[114.01584625 102.95490265]
[104.82120514 113.48818970]
[91.03291321 111.16989899]
[76.90810394 116.21865845]
[63.00555038 121.85061646]
[49.34930801 128.05601501]
[35.69306946 134.26142883]
[22.03682709 140.46684265]
[8.38058662 146.67224121]
[-5.27565479 152.87765503]
[-18.93189621 159.08305359]
[-19.57637024 168.90939331]
[-23.76453781 177.75749207]
[-30.87070656 184.40550232]
[-39.86963272 187.95288086]
[-49.48431396 187.94223022]
[-58.36717606 184.41783142]
[-65.28894043 177.91345215]
[-79.41374207 182.96220398]
[-93.53855133 188.01095581]
[-107.66335297 193.05972290]
[-121.78815460 198.10847473]
[-135.91296387 203.15722656]
[-138.58839417 218.28131104]
[-148.47970581 230.03108215]
[-162.92619324 235.24595642]
[-178.04180908 232.52311707]
[-189.76052856 222.59501648]
[-194.93008423 208.13226318]
[-192.15988159 193.02526855]
[-182.19509888 181.33772278]
[-167.71621704 176.21351624]
[-152.61796570 179.03106689]
[-140.96171570 189.03242493]
[-126.83690643 183.98367310]
[-112.71210480 178.93492126]
[-98.58730316 173.88615417]
[-84.46250153 168.83740234]
[-70.33769989 163.78865051]
[-63.29161835 144.66041565]
[-44.20547485 136.71235657]
[-25.13730240 145.42681885]
[-11.48106194 139.22140503]
[2.17517900 133.01600647]
[15.83141994 126.81059265]
[29.48766136 120.60518646]
[43.14390182 114.39978027]
[56.80014420 108.19437408]
[57.89957428 105.54888916]
[60.14725876 103.19476318]
[63.43193817 101.58456421]
[67.47608948 101.11992645]
[71.85935211 102.09385681]
[85.98415375 97.04509735]
[95.17879486 86.51181030]
[108.96708679 88.83010101]
[104.99925995 74.51499939]
[102.07633972 59.95081711]
[100.21358490 45.21371460]
[99.42070007 30.38076210]
[99.70179749 15.52952194]
[101.05538177 0.73765552]
[103.47433472 -13.91749096]
[106.94597626 -28.35928917]
[111.45212555 -42.51222610]
[116.96917725 -56.30230713]
[123.46825409 -69.65742493]
[130.91534424 -82.50777435]
[139.27146912 -94.78615570]
[148.49291992 -106.42839050]
[158.53143311 -117.37362671]
[169.33450317 -127.56463623]
[180.84561157 -136.94816589]
[193.00454712 -145.47517395]
[205.74769592 -153.10108948]
[219.00842285 -159.78607178]
[232.71736145 -165.49517822]
[246.80281067 -170.19860840]
[261.19110107 -173.87178040]
[275.80700684 -176.49551392]
[290.57406616 -178.05615234]
[305.41503906 -178.54554749]
[320.25238037 -177.96116638]
[335.00845337 -176.30610657]
[349.60610962 -173.58905029]
[363.96905518 -169.82424927]
[378.02212524 -165.03141785]
[391.69189453 -159.23565674]
[404.90689087 -152.46728516]
[417.59802246 -144.76174927]
[429.69891357 -136.15934753]
[441.14636230 -126.70510101]
[451.88046265 -116.44847870]
[461.84515381 -105.44313812]
[470.98831177 -93.74663544]
[479.26220703 -81.42017365]
[486.62356567 -68.52822113]
[493.03393555 -55.13820648]
[498.45980835 -41.32016754]
[512.78240967 -45.77698135]
[527.10504150 -50.23379898]
[541.42761230 -54.69061279]
[550.13177490 -68.16716766]
[566.10876465 -69.62105560]
[577.10253906 -57.93698502]
[574.67950439 -42.07796478]
[560.69842529 -34.20968628]
[545.88439941 -40.36801529]
[531.56182861 -35.91120148]
[517.23925781 -31.45438576]
[502.91662598 -26.99757004]
[506.34808350 -12.23865604]
[508.68157959 2.73340225]
[509.90438843 17.83704185]
[510.00982666 32.98998260]
[508.99728394 48.10966873]
[506.87222290 63.11372757]
[503.64620972 77.92041016]
[499.33676147 92.44904327]
[493.96731567 106.62046814]
[487.56710815 120.35746002]
[480.17098999 133.58515930]
[471.81918335 146.23150635]
[462.55715942 158.22755432]
[452.43539429 169.50793457]
[441.50897217 180.01118469]
[429.83740234 189.68005371]
[417.48425293 198.46180725]
[404.51678467 206.30860901]
[391.00564575 213.17765808]
[377.02441406 219.03150940]
[362.64926147 223.83822632]
[347.95846558 227.57159424]
[333.03210449 230.21124268]
[317.95141602 231.74275208]
[302.79861450 232.15773010]
[287.65625000 231.45390320]
[272.60678101 229.63505554]
[257.73220825 226.71105957]
[243.11363220 222.69781494]
[228.83064270 217.61714172]
[214.96107483 211.49668884]
[201.58053589 204.36976624]
[188.76191711 196.27517700]
[176.57507324 187.25698853]
[165.08642578 177.36428833]
[154.35858154 166.65097046]
[144.45002747 155.17535400]
[135.41474915 142.99993896]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 57]
[4 55]
[5 54]
[6 49]
[7 48]
[8 47]
[9 46]
[10 45]
[11 44]
[12 43]
[19 40]
[20 39]
[21 38]
[22 37]
[23 36]
[24 35]
[100 112]
[101 111]
[102 110]
[103 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
