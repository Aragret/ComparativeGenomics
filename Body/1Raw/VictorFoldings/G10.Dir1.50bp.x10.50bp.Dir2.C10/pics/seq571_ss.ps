%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUCCCACUCCCAUACUACUAAUCUCAUCAAUACAACCCCCGCCCAUCCUACCCAGCACAxxxxxxxxxxCCCCCGAUAUGGCGUUUCCCCGCAUAAACAACAUAAGCUUCUGACUCUUACCUCCCUCUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-54.68288803 174.60372925]
[-68.46527100 180.52368164]
[-82.24765015 186.44364929]
[-91.87396240 198.99931335]
[-106.62174225 196.91308594]
[-120.40412140 202.83305359]
[-134.18650818 208.75300598]
[-147.96888733 214.67297363]
[-161.75126648 220.59294128]
[-158.10832214 235.17803955]
[-156.85229492 250.15864563]
[-158.01573181 265.14672852]
[-161.56849670 279.75405884]
[-167.41856384 293.60226440]
[-175.41438293 306.33264160]
[-185.34887695 317.61547852]
[-196.96469116 327.15847778]
[-209.96096802 334.71447754]
[-224.00105286 340.08773804]
[-238.72129822 343.13912964]
[-253.74038696 343.78955078]
[-268.66931152 342.02218628]
[-283.12133789 337.88278198]
[-296.72219849 331.47863770]
[-309.11950684 322.97555542]
[-319.99221802 312.59381104]
[-329.05865479 300.60232544]
[-336.08401489 287.31170654]
[-340.88629150 273.06619263]
[-343.34109497 258.23480225]
[-343.38488770 243.20170593]
[-341.01644897 228.35627747]
[-336.29721069 214.08305359]
[-329.34936523 200.75175476]
[-320.35287476 188.70768738]
[-309.54080200 178.26281738]
[-297.19320679 169.68769836]
[-283.62988281 163.20443726]
[-269.20217896 158.98098755]
[-254.28379822 157.12672424]
[-239.26118469 157.68969727]
[-224.52342224 160.65530396]
[-210.45228577 165.94673157]
[-197.41224670 173.42694092]
[-185.74105835 182.90214539]
[-175.74104309 194.12693787]
[-167.67123413 206.81056213]
[-153.88885498 200.89059448]
[-140.10646057 194.97062683]
[-126.32408905 189.05065918]
[-112.54170227 183.13070679]
[-103.90119934 170.99847412]
[-88.16761780 172.66127014]
[-74.38523102 166.74130249]
[-60.60285187 160.82135010]
[-65.42078400 146.13542175]
[-68.89880371 131.07580566]
[-71.00875092 115.76447296]
[-71.73353577 100.32545471]
[-71.06727600 84.88379669]
[-69.01537323 69.56457520]
[-65.59445190 54.49188232]
[-60.83222198 39.78780746]
[-54.76725388 25.57144928]
[-47.44867325 11.95795918]
[-38.93576050 -0.94239193]
[-29.29747200 -13.02511120]
[-18.61187553 -24.19232941]
[-6.96552658 -34.35359192]
[5.54724073 -43.42659378]
[18.82507324 -51.33784485]
[32.76042175 -58.02326202]
[47.24040985 -63.42869186]
[62.14774704 -67.51035309]
[77.36168671 -70.23518372]
[92.75900269 -71.58111572]
[108.21496582 -71.53724670]
[123.60438538 -70.10392761]
[138.80261230 -67.29276276]
[153.68653870 -63.12653732]
[168.13560486 -57.63898849]
[182.03277588 -50.87456894]
[195.26548767 -42.88806534]
[207.72654724 -33.74417496]
[219.31501770 -23.51695824]
[229.93704224 -12.28925610]
[239.50657654 -0.15201350]
[247.94612122 12.79645824]
[261.18869019 5.75132322]
[274.43130493 -1.29381180]
[287.67388916 -8.33894634]
[292.38574219 -23.18604088]
[305.91595459 -30.14216423]
[320.04135132 -25.55863762]
[333.28393555 -32.60377121]
[346.52651978 -39.64890671]
[359.76910400 -46.69404221]
[361.79168701 -62.07873535]
[372.49526978 -73.31318665]
[387.76412964 -76.07751465]
[401.72708130 -69.30877686]
[409.01507568 -55.60969543]
[406.82571411 -40.24784851]
[396.00088501 -29.13017464]
[380.70294189 -26.53164864]
[366.81423950 -33.45145798]
[353.57165527 -26.40632057]
[340.32907104 -19.36118698]
[327.08648682 -12.31605148]
[322.99417114 1.95940375]
[309.66467285 9.29281807]
[294.71902466 4.90363884]
[281.47644043 11.94877434]
[268.23382568 18.99390793]
[254.99125671 26.03904343]
[260.69842529 39.43163681]
[265.25082397 53.25947189]
[268.61572266 67.42318726]
[270.76895142 81.82099915]
[271.69503784 96.34944153]
[271.38732910 110.90412140]
[269.84799194 125.38043976]
[267.08816528 139.67437744]
[263.12762451 153.68321228]
[257.99487305 167.30628967]
[251.72673035 180.44569397]
[244.36830139 193.00701904]
[235.97244263 204.89999390]
[226.59947205 216.03915405]
[216.31677246 226.34445190]
[205.19821167 235.74185181]
[193.32369995 244.16380310]
[180.77854919 251.54978943]
[167.65293884 257.84674072]
[154.04116821 263.00939941]
[140.04106140 267.00067139]
[125.75321198 269.79187012]
[111.28030396 271.36297607]
[96.72634125 271.70263672]
[82.19589233 270.80844116]
[67.79339600 268.68682861]
[53.62232590 265.35302734]
[39.78453064 260.83099365]
[26.37944412 255.15322876]
[13.50339413 248.36053467]
[1.24890959 240.50172424]
[-10.29594898 231.63325500]
[-21.04821968 221.81887817]
[-30.93063736 211.12911987]
[-39.87218857 199.64077759]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 55]
[2 54]
[3 53]
[5 51]
[6 50]
[7 49]
[8 48]
[9 47]
[88 115]
[89 114]
[90 113]
[91 112]
[94 109]
[95 108]
[96 107]
[97 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
