%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAACUAAGCUAUACUAACCCCAGGGUUGGUCAAUUUCGUGCCAGCCACCGCGGUCACACGAUxxxxxxxxxxCCAAAAUUCUCCGUGCCACCUAUCACACCCCAUCCUAAAGUAAGGUCAGCUAAAUAAGCUAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 434.70413208]
[92.50000000 419.70413208]
[92.50000000 404.70413208]
[92.50000000 389.70413208]
[92.50000000 374.70413208]
[92.50000000 359.70413208]
[92.50000000 344.70413208]
[92.50000000 329.70413208]
[92.50000000 314.70413208]
[92.50000000 299.70413208]
[77.84561920 296.61465454]
[64.14855957 290.54330444]
[52.00850296 281.75323486]
[41.95753098 270.62670898]
[34.43677902 257.64843750]
[29.77709579 243.38450623]
[28.18446350 228.45764160]
[29.73092079 213.52003479]
[34.35128784 199.22486877]
[41.84592056 186.19776917]
[51.88933182 175.00933838]
[64.04432678 166.15028381]
[77.78102875 160.00978088]
[92.50000000 156.85847473]
[92.50000000 141.85847473]
[79.59992981 137.31245422]
[68.81025696 128.90643311]
[61.24718094 117.51001740]
[57.69310760 104.30219269]
[58.51571274 90.64929199]
[63.62989044 77.96373749]
[72.50657654 67.55784607]
[84.22747803 60.50811005]
[81.20800018 45.81516266]
[78.18852234 31.12221146]
[75.16904449 16.42926216]
[61.36417007 7.77980566]
[59.13233948 -9.90703487]
[52.39029312 -23.30646706]
[37.65423203 -28.35486412]
[31.00771713 -42.03983688]
[35.91140366 -56.05730438]
[29.16935539 -69.45673370]
[22.42730713 -82.85617065]
[15.68525982 -96.25559998]
[6.99191236 -108.47958374]
[-3.45223665 -119.24618530]
[-13.89638519 -130.01278687]
[-24.34053421 -140.77938843]
[-34.78468323 -151.54600525]
[-45.55128860 -161.99014282]
[-56.63039398 -172.10218811]
[-65.13181305 -175.60461426]
[-67.82891846 -182.53320312]
[-78.70081329 -192.86770630]
[-94.76168823 -196.18135071]
[-99.66488647 -211.83033752]
[-88.36641693 -223.71632385]
[-72.48917389 -219.61203003]
[-68.36631012 -203.73959351]
[-57.49441528 -193.40509033]
[-46.51835251 -183.18128967]
[-35.43924713 -173.06925964]
[-31.86237526 -172.88626099]
[-28.20302963 -170.92474365]
[-25.31327629 -167.16848755]
[-24.01807976 -161.99014282]
[-13.57393074 -151.22354126]
[-3.12978172 -140.45693970]
[7.31436729 -129.69033813]
[17.75851631 -118.92372894]
[14.78930283 -133.62692261]
[17.23471069 -148.42623901]
[24.77599525 -161.39270020]
[36.43019867 -170.83619690]
[50.67826462 -175.52581787]
[65.66304779 -174.85032654]
[79.43137360 -168.89773560]
[90.18862152 -158.44395447]
[96.53266144 -144.85156250]
[97.63657379 -129.89224243]
[93.35648346 -115.51584625]
[84.25025940 -103.59625244]
[71.50485992 -95.68710327]
[56.78155136 -92.81930542]
[41.99943542 -95.36666870]
[29.08469200 -102.99765015]
[35.82674026 -89.59822083]
[42.56878662 -76.19878387]
[49.31083679 -62.79935455]
[63.48949814 -58.38334656]
[70.51777649 -44.89045715]
[65.78972626 -30.04851532]
[72.53176880 -16.64908218]
[87.05293274 -12.88929462]
[99.45058441 -21.33311462]
[111.84824371 -29.77693367]
[112.18531036 -45.29034805]
[121.60333252 -57.62243652]
[136.48089600 -62.03126144]
[151.09727478 -56.82153702]
[159.83216858 -43.99650955]
[159.32682800 -28.48766708]
[149.77557373 -16.25847054]
[134.85105896 -12.01129913]
[120.29206085 -17.37927437]
[107.89440918 -8.93545628]
[95.49674988 -0.49163705]
[89.86199188 13.40978432]
[92.88146973 28.10273361]
[95.90094757 42.79568481]
[98.92042542 57.48863220]
[115.87359619 60.54862595]
[130.22174072 70.08298492]
[139.61021423 84.52702332]
[142.49824524 101.51033020]
[157.15983582 104.67855072]
[171.82144165 107.84677124]
[184.96755981 99.07437897]
[200.44973755 102.24897003]
[209.08264160 115.48711395]
[205.74453735 130.93484497]
[192.41587830 139.42732239]
[177.00428772 135.92608643]
[168.65321350 122.50836945]
[153.99162292 119.34014893]
[139.33001709 116.17192078]
[131.84196472 128.18635559]
[120.82496643 137.07698059]
[107.50000000 141.85847473]
[107.50000000 156.85847473]
[122.21897125 160.00978088]
[135.95567322 166.15028381]
[148.11067200 175.00933838]
[158.15408325 186.19776917]
[165.64871216 199.22486877]
[170.26907349 213.52003479]
[171.81553650 228.45764160]
[170.22290039 243.38450623]
[165.56321716 257.64843750]
[158.04246521 270.62670898]
[147.99150085 281.75323486]
[135.85144043 290.54330444]
[122.15438080 296.61465454]
[107.50000000 299.70413208]
[107.50000000 314.70413208]
[107.50000000 329.70413208]
[107.50000000 344.70413208]
[107.50000000 359.70413208]
[107.50000000 374.70413208]
[107.50000000 389.70413208]
[107.50000000 404.70413208]
[107.50000000 419.70413208]
[107.50000000 434.70413208]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[24 131]
[25 130]
[33 112]
[34 111]
[35 110]
[36 109]
[38 94]
[39 93]
[42 90]
[43 89]
[44 88]
[45 87]
[46 71]
[47 70]
[48 69]
[49 68]
[50 67]
[51 63]
[52 62]
[54 61]
[55 60]
[95 108]
[96 107]
[97 106]
[116 127]
[117 126]
[118 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
