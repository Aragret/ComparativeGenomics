%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCCUAUUAUUUAUCGCACCUACGUUCAAUAUUACAGGCGAACAUACUUACUAAAGUGUGUUxxxxxxxxxxCCCCGCCCGCGUCCCUUUCUCCAUAAAAUUCUUCUUAGUAGCUAUUACCUUCUUAUUAUUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[217.69493103 469.06372070]
[217.69493103 454.06372070]
[217.69493103 439.06372070]
[217.69493103 424.06372070]
[217.69493103 409.06372070]
[217.69493103 394.06372070]
[217.69493103 379.06372070]
[217.69493103 364.06372070]
[217.69493103 349.06372070]
[217.69493103 334.06372070]
[215.09020996 319.29159546]
[201.06221008 308.79113770]
[204.32923889 290.69812012]
[198.91061401 276.71102905]
[193.49198914 262.72396851]
[188.07336426 248.73687744]
[182.65473938 234.74978638]
[177.23611450 220.76271057]
[170.68823242 207.26731873]
[163.05526733 194.35462952]
[155.42230225 181.44192505]
[147.78932190 168.52922058]
[140.15635681 155.61653137]
[131.11683655 143.64627075]
[120.78593445 132.77095032]
[110.45503235 121.89564514]
[104.84108734 123.77584839]
[98.93890381 124.24047852]
[93.09990692 123.26189423]
[87.67172241 120.89833832]
[82.97753906 117.29053497]
[79.29683685 112.65329742]
[76.84875488 107.26270294]
[61.84954834 107.10870361]
[52.70891571 119.64778137]
[37.93338776 124.38733673]
[23.20445061 119.50490570]
[14.18568707 106.87789154]
[14.34499264 91.36163330]
[23.62111092 78.92245483]
[38.44718552 74.34346771]
[53.12229156 79.38538361]
[62.00354385 92.10949707]
[77.00275421 92.26348877]
[79.91238403 86.39064026]
[84.28771210 81.51078796]
[78.58304596 67.63790894]
[72.87838745 53.76502991]
[67.17372131 39.89214706]
[59.67372131 26.90176773]
[50.51178360 15.02494431]
[41.34984970 3.14812040]
[32.18791580 -8.72870350]
[23.02598000 -20.60552597]
[13.86404419 -32.48234940]
[4.70210838 -44.35917282]
[-4.45982695 -56.23599625]
[-13.62176228 -68.11282349]
[-28.98617935 -73.84577179]
[-31.43629646 -90.06085968]
[-18.45164490 -100.07738495]
[-3.38971949 -93.59120941]
[-1.74493861 -77.27475739]
[7.41699696 -65.39793396]
[16.57893181 -53.52111053]
[25.74086761 -41.64428711]
[34.90280151 -29.76746178]
[44.06473923 -17.89063835]
[53.22667313 -6.01381493]
[62.38860703 5.86300898]
[71.55054474 17.73983192]
[70.70684814 2.76357889]
[75.92289734 -11.30030441]
[86.32812500 -22.10452461]
[100.18588257 -27.84583282]
[115.18327332 -27.56599236]
[128.81719971 -21.31171036]
[138.81213379 -10.12683773]
[143.49989319 4.12184286]
[142.09808350 19.05619621]
[134.84066772 32.18364716]
[122.93893433 41.31319427]
[108.37929535 44.92109680]
[93.59178925 42.40518570]
[81.04660034 34.18748474]
[86.75126648 48.06036758]
[92.45592499 61.93324661]
[98.16059113 75.80612946]
[120.36280060 86.80594635]
[121.33034515 111.56474304]
[131.66125488 122.44005585]
[141.99215698 133.31536865]
[140.24114990 118.41791534]
[145.49525452 104.36820984]
[156.59179688 94.27529144]
[171.07521057 90.37261963]
[185.74046326 93.52382660]
[197.34231567 103.03157043]
[203.31336975 116.79188538]
[202.33232117 131.75976562]
[194.61624146 144.62298584]
[181.87263489 152.53501892]
[166.92152405 153.74505615]
[153.06906128 147.98356628]
[160.70202637 160.89625549]
[168.33499146 173.80895996]
[175.96797180 186.72164917]
[183.60093689 199.63435364]
[186.85757446 184.99214172]
[197.99320984 174.94238281]
[212.89166260 173.19989014]
[226.04583740 180.40875244]
[232.59341431 193.90428162]
[230.11412048 208.69796753]
[219.52444458 219.32145691]
[204.73872375 221.84786987]
[191.22319031 215.34408569]
[196.64181519 229.33116150]
[202.06044006 243.31825256]
[207.47906494 257.30532837]
[212.89768982 271.29241943]
[218.31631470 285.27951050]
[229.81060791 291.21960449]
[234.01736450 303.02954102]
[229.18559265 314.16131592]
[232.27319336 299.48251343]
[239.88201904 286.55557251]
[251.21704102 276.73126221]
[265.09381104 271.03610229]
[280.06237793 270.06518555]
[294.55859375 273.92001343]
[307.06774902 282.19772339]
[316.28274536 294.03341675]
[321.24069214 308.19036865]
[321.42355347 323.18923950]
[316.81216431 337.46282959]
[307.88842773 349.51965332]
[295.58474731 358.09985352]
[281.18682861 362.30688477]
[266.19906616 361.70117188]
[252.18756104 356.34597778]
[240.61642456 346.80087280]
[232.69493103 334.06372070]
[232.69493103 349.06372070]
[232.69493103 364.06372070]
[232.69493103 379.06372070]
[232.69493103 394.06372070]
[232.69493103 409.06372070]
[232.69493103 424.06372070]
[232.69493103 439.06372070]
[232.69493103 454.06372070]
[232.69493103 469.06372070]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 125]
[13 122]
[14 121]
[15 120]
[16 119]
[17 118]
[18 117]
[19 108]
[20 107]
[21 106]
[22 105]
[23 104]
[24 92]
[25 91]
[26 90]
[33 44]
[34 43]
[46 88]
[47 87]
[48 86]
[49 85]
[50 71]
[51 70]
[52 69]
[53 68]
[54 67]
[55 66]
[56 65]
[57 64]
[58 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
