%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAAACCCACAAACACUUAGUUAACAGCUAAGCACCCUAAUCAACUGGCUUCAAUCUACUUxxxxxxxxxxCCCCCAUAAAUAGGAGAAGGCUUAGAAGAAAACCCCACAAACCCCAUUACUAAACCCACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[173.90661621 609.54516602]
[173.59455872 594.54840088]
[173.28250122 579.55169678]
[172.97044373 564.55493164]
[172.65838623 549.55816650]
[172.34632874 534.56140137]
[172.03427124 519.56463623]
[171.72221375 504.56790161]
[171.41015625 489.57113647]
[169.54255676 474.68786621]
[166.13957214 460.07897949]
[162.73658752 445.47009277]
[159.33361816 430.86120605]
[145.14077759 431.40859985]
[131.08863831 429.31201172]
[117.66560364 424.64273071]
[105.33849335 417.56146240]
[94.53635406 408.31280518]
[85.63546753 397.21685791]
[78.94629669 384.65805054]
[74.70262146 371.07199097]
[73.05339050 356.93011475]
[74.05747223 342.72354126]
[77.68157196 328.94595337]
[83.80133820 316.07632446]
[92.20560455 304.56243896]
[102.60369873 294.80520630]
[114.63549042 287.14480591]
[127.88384247 281.84863281]
[125.09152222 267.11083984]
[122.29919434 252.37303162]
[109.88433075 244.22399902]
[106.84257507 229.31753540]
[115.47420502 216.35093689]
[103.05934143 208.20190430]
[100.01758575 193.29545593]
[108.64922333 180.32885742]
[105.85689545 165.59104919]
[103.06456757 150.85324097]
[100.27224731 136.11543274]
[97.47991943 121.37763214]
[94.68759918 106.63982391]
[84.70883179 109.74055481]
[73.02820587 106.55374908]
[60.09015274 98.96383667]
[46.77584076 106.62051392]
[31.41700745 106.57819366]
[18.14509773 98.84825134]
[10.53019238 85.51000214]
[10.62065887 70.15138245]
[18.39216423 56.90376663]
[31.75421333 49.33070374]
[47.11248016 49.46931458]
[60.33567047 57.28230667]
[67.86680603 70.66802216]
[67.68006134 86.02577972]
[80.61811829 93.61569214]
[94.07408142 86.98719025]
[95.94169617 72.10391235]
[97.80931091 57.22063446]
[99.67691803 42.33735275]
[92.37718201 31.65242195]
[94.28031921 19.25899506]
[103.81896973 11.75422955]
[105.99580383 -3.08697581]
[108.17264557 -17.92818069]
[110.34947968 -32.76938629]
[96.43710327 -38.59145737]
[84.41018677 -47.69113922]
[75.02477264 -59.49642181]
[68.87081909 -73.26521301]
[66.33517456 -88.13200378]
[67.57723236 -103.16223907]
[72.51891327 -117.41112518]
[80.84958649 -129.98294067]
[92.04557037 -140.08743286]
[105.40307617 -147.08941650]
[120.08245087 -150.54875183]
[135.16091919 -150.24795532]
[149.69065857 -146.20594788]
[162.75828552 -138.67683411]
[173.54238892 -128.13388062]
[181.36505127 -115.23981476]
[185.73455811 -100.80519104]
[186.37620544 -85.73738098]
[183.24967957 -70.98354340]
[176.55149841 -57.47112656]
[166.70274353 -46.04953384]
[154.32249451 -37.43673706]
[140.18899536 -32.17413712]
[125.19068909 -30.59255028]
[123.01384735 -15.75134468]
[120.83701324 -0.91013896]
[118.66017914 13.93106651]
[126.02178192 29.83096123]
[114.56020355 44.20496750]
[112.69258881 59.08824539]
[110.82497406 73.97152710]
[108.95735931 88.85480499]
[109.42539978 103.84750366]
[112.21772766 118.58530426]
[115.01005554 133.32312012]
[117.80237579 148.06091309]
[120.59470367 162.79872131]
[123.38702393 177.53652954]
[136.16363525 186.44697571]
[138.78550720 201.43298340]
[130.21202087 213.55862427]
[142.98861694 222.46907043]
[145.61048889 237.45507812]
[137.03700256 249.58070374]
[139.82933044 264.31851196]
[142.62165833 279.05630493]
[158.46543884 279.31317139]
[173.91157532 282.82543945]
[188.29866028 289.44046021]
[201.01112366 298.87271118]
[211.50556946 310.71621704]
[219.33395386 324.46197510]
[224.16279602 339.51983643]
[225.78727722 355.24392700]
[224.14004517 370.96014404]
[219.29389954 385.99530029]
[211.45864868 399.70578003]
[200.97196960 411.50521851]
[188.28492737 420.88946533]
[173.94250488 427.45822144]
[177.34548950 442.06710815]
[180.74845886 456.67599487]
[184.15144348 471.28488159]
[190.60351562 457.74343872]
[202.88336182 449.12921143]
[217.81240845 447.67196655]
[231.52630615 453.74887085]
[240.47525024 465.78701782]
[242.34283447 480.67028809]
[236.64564514 494.54623413]
[224.85838318 503.82312012]
[210.03213501 506.09960938]
[196.00463867 500.78646851]
[186.40692139 489.25909424]
[186.71897888 504.25585938]
[187.03103638 519.25262451]
[187.34307861 534.24932861]
[187.65513611 549.24609375]
[187.96719360 564.24285889]
[188.27925110 579.23962402]
[188.59130859 594.23638916]
[188.90336609 609.23315430]
[191.49436951 628.44085693]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 130]
[11 129]
[12 128]
[13 127]
[29 113]
[30 112]
[31 111]
[34 108]
[37 105]
[38 104]
[39 103]
[40 102]
[41 101]
[42 100]
[44 57]
[45 56]
[58 99]
[59 98]
[60 97]
[61 96]
[64 94]
[65 93]
[66 92]
[67 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
