%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUUUUACCCUCCUACAAGCCUCAGAGUACUUCGAGUCUCCCUUCACCAUUUCCGACGGCAxxxxxxxxxxCUUAAAAUAAAAUCCCCACUAUGCACAUUUUAUUUCUCCAACAUACUCGGAUUCUACCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[57.70073318 547.48504639]
[57.70073318 532.48504639]
[57.70073318 517.48504639]
[57.70073318 502.48501587]
[57.70073318 487.48501587]
[57.70073318 472.48501587]
[57.70073318 457.48501587]
[57.70073318 442.48501587]
[57.70073318 427.48501587]
[57.70073318 412.48501587]
[43.23587799 408.64868164]
[30.24701691 401.19308472]
[19.62254715 390.62118530]
[12.09093952 377.64938354]
[8.17079258 363.15893555]
[8.13512611 348.13604736]
[11.99237823 333.60470581]
[19.48541641 320.55706787]
[30.10867691 309.88549805]
[43.14226532 302.32171631]
[57.70073318 298.38647461]
[57.70073318 283.38647461]
[48.68471909 295.37442017]
[35.18588257 301.91519165]
[20.19004250 301.56195068]
[7.01414013 294.39288330]
[-1.42743635 281.99371338]
[-3.26748776 267.10699463]
[1.90098822 253.02555847]
[12.93477249 242.86407471]
[27.39329338 238.87017822]
[42.07846069 241.92729187]
[53.74204636 251.35919189]
[59.80453110 265.08157349]
[63.20750809 250.47268677]
[66.61048889 235.86380005]
[70.01346588 221.25489807]
[73.41644287 206.64601135]
[67.40199280 190.18920898]
[80.01874542 176.81770325]
[83.11706543 162.14117432]
[78.17549896 148.09017944]
[88.59643555 136.18579102]
[91.69476318 121.50926208]
[94.79308319 106.83274078]
[90.57205200 107.32072449]
[85.92914581 105.96330261]
[81.55789185 102.62664032]
[78.17847443 97.41506195]
[76.46089935 90.67201233]
[66.95253754 79.07067108]
[52.22053528 73.30191040]
[50.13703918 58.55374527]
[40.62868118 46.95240402]
[25.31606102 48.83049011]
[11.42883396 42.11122894]
[3.39836287 28.93871689]
[3.78714252 13.51625252]
[12.47111416 0.76508898]
[26.67925453 -5.24592447]
[41.87779999 -2.59869480]
[53.21694565 7.86205626]
[57.07841492 22.79834175]
[52.23002243 37.44404602]
[61.73838043 49.04538727]
[75.79028320 53.98434830]
[78.55387878 69.56231689]
[88.06224060 81.16365814]
[85.27984619 66.42397308]
[82.49745941 51.68428802]
[73.86881256 39.41454697]
[70.57772827 24.78004074]
[73.12271118 9.99751663]
[81.11827087 -2.69386172]
[93.35327911 -11.37167931]
[107.97445679 -14.72147465]
[122.76708221 -12.23584080]
[135.49044800 -4.29128647]
[144.21730042 7.90879583]
[147.62574768 22.51641273]
[145.19950867 37.31888962]
[137.30609131 50.07403946]
[125.14356995 58.84867096]
[117.69743347 71.87000275]
[110.25129700 84.89133453]
[123.02865601 77.03391266]
[135.80601501 69.17648315]
[148.58337402 61.31905746]
[161.36073303 53.46163177]
[174.13809204 45.60420609]
[186.91543579 37.74678040]
[199.69279480 29.88935471]
[212.47015381 22.03192902]
[210.41700745 6.94204998]
[214.68519592 -7.67651463]
[224.53524780 -19.29100990]
[238.26055908 -25.88915443]
[253.48315430 -26.32777977]
[267.56564331 -20.53089142]
[278.06808472 -9.50283527]
[283.17095947 4.84571123]
[281.99008179 20.02877617]
[274.73010254 33.41580200]
[262.64880371 42.68740082]
[247.83940125 46.23722076]
[232.86767578 43.45022583]
[220.32757568 34.80928802]
[207.55023193 42.66671371]
[194.77287292 50.52413940]
[181.99551392 58.38156509]
[169.21815491 66.23899078]
[156.44079590 74.09641266]
[143.66343689 81.95384216]
[130.88607788 89.81126404]
[118.10872650 97.66869354]
[109.46960449 109.93106079]
[106.37128448 124.60758972]
[103.27296448 139.28411865]
[107.99291992 154.38485718]
[97.79359436 165.23948669]
[94.69527435 179.91601562]
[101.08155823 191.17076111]
[98.15480804 203.36309814]
[88.02533722 210.04899597]
[84.62236023 224.65788269]
[81.21938324 239.26676941]
[77.81639862 253.87567139]
[74.41342163 268.48455811]
[72.70073700 283.38647461]
[72.70073700 298.38647461]
[87.25920868 302.32171631]
[100.29279327 309.88549805]
[110.91605377 320.55706787]
[118.40908813 333.60470581]
[122.26634216 348.13604736]
[122.23067474 363.15893555]
[118.31053162 377.64938354]
[110.77892303 390.62118530]
[100.15444946 401.19308472]
[87.16558838 408.64868164]
[72.70073700 412.48501587]
[72.70073700 427.48501587]
[72.70073700 442.48501587]
[72.70073700 457.48501587]
[72.70073700 472.48501587]
[72.70073700 487.48501587]
[72.70073700 502.48501587]
[72.70073700 517.48504639]
[72.70073700 532.48504639]
[72.70073700 547.48504639]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[21 130]
[22 129]
[34 128]
[35 127]
[36 126]
[37 125]
[38 124]
[40 121]
[41 120]
[43 118]
[44 117]
[45 116]
[50 68]
[51 67]
[53 65]
[54 64]
[85 115]
[86 114]
[87 113]
[88 112]
[89 111]
[90 110]
[91 109]
[92 108]
[93 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
