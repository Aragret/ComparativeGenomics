%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUGUAGCUUACCUCCUCAAAGCAAUACACUGAAAAUGUUUAGACGGGCUCACAUCACCCCAUxxxxxxxxxxAAGUCGUAACAUGGUAAGUGUACUGGAAAGUGCACUUGGACGAACCAGAGUGUAGCUUAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[93.62107849 241.67799377]
[93.31310272 226.68115234]
[93.00512695 211.68431091]
[92.69715118 196.68746948]
[92.38917542 181.69064331]
[92.08119202 166.69380188]
[91.77321625 151.69696045]
[91.46524048 136.70011902]
[91.15726471 121.70328522]
[77.86991882 114.74292755]
[65.36588287 123.02840424]
[52.86184692 131.31387329]
[40.35781097 139.59934998]
[27.85377693 147.88482666]
[15.52249241 156.42527771]
[3.36915970 165.21713257]
[-8.78417301 174.00897217]
[-20.93750572 182.80081177]
[-19.98575020 198.19879150]
[-27.52979851 211.65579224]
[-41.16237259 218.87773132]
[-56.53336716 217.56013489]
[-68.73795319 208.12341309]
[-73.88169098 193.57881165]
[-70.32323456 178.56744385]
[-59.19807434 167.87940979]
[-44.05620956 164.92518616]
[-29.72934914 170.64747620]
[-17.57601547 161.85563660]
[-5.42268276 153.06379700]
[6.73064995 144.27195740]
[8.36294460 139.72389221]
[12.90465260 136.17977905]
[19.56830215 135.38078308]
[32.07233810 127.09531403]
[44.57637405 118.80984497]
[57.08041000 110.52436829]
[69.58444214 102.23889160]
[54.63885498 103.51532745]
[43.79169464 93.15486908]
[43.30762100 78.16268158]
[53.46384048 67.12405396]
[68.44438171 66.36027527]
[79.66983032 76.30709839]
[90.72393036 86.44646454]
[85.88411713 72.24871063]
[81.04429626 58.05096054]
[76.20448303 43.85320663]
[62.30045319 36.83069229]
[57.59444427 22.36320686]
[64.37502289 9.15111637]
[59.53520584 -5.04663563]
[54.69538879 -19.24438858]
[47.73503494 -32.53173065]
[38.81888199 -44.59416199]
[29.90273285 -56.65659332]
[14.51533794 -55.54680252]
[0.98159504 -62.95229721]
[-6.37992764 -76.51000977]
[-5.22019577 -91.89372253]
[4.09072542 -104.19454956]
[18.58175468 -109.48733521]
[33.62885666 -106.08318329]
[44.43055725 -95.06833649]
[47.54006958 -79.95759583]
[41.96516418 -65.57274628]
[50.88131332 -53.51031113]
[59.79746628 -41.44787979]
[58.85342026 -56.41814423]
[63.28566360 -70.74836731]
[72.51673889 -82.57153320]
[85.34397888 -90.34725952]
[100.09618378 -93.06249237]
[114.85135651 -90.36347198]
[127.68713379 -82.60183716]
[136.93119812 -70.78881836]
[141.37918091 -56.46347809]
[140.45158386 -41.49218750]
[134.26925659 -27.82548332]
[123.63765717 -17.24393082]
[109.94194031 -11.12615013]
[94.96643829 -10.26919460]
[80.66223907 -14.78471470]
[68.89314270 -24.08420563]
[73.73295593 -9.88645172]
[78.57277679 4.31130028]
[92.01144409 10.63092899]
[97.12196350 24.96052361]
[90.40223694 39.01338959]
[95.24205017 53.21114349]
[100.08187103 67.40889740]
[104.92168427 81.60665131]
[117.83438110 89.23961639]
[132.60650635 86.63489532]
[147.37861633 84.03017426]
[162.15072632 81.42545319]
[176.73448181 77.91628265]
[191.07453918 73.51598358]
[205.41459656 69.11568451]
[219.75466919 64.71537781]
[234.09472656 60.31508255]
[248.43478394 55.91477966]
[262.77484131 51.51448059]
[277.11489868 47.11418152]
[291.45495605 42.71387863]
[302.22467041 30.34675026]
[318.26568604 33.75514221]
[323.07644653 49.43279266]
[311.70800781 61.25188065]
[295.85528564 57.05393982]
[281.51519775 61.45424271]
[267.17514038 65.85453796]
[252.83508301 70.25484467]
[238.49502563 74.65514374]
[224.15496826 79.05544281]
[209.81491089 83.45574188]
[195.47483826 87.85604095]
[181.13478088 92.25634003]
[193.62193298 100.56724548]
[196.76097107 115.23511505]
[188.76893616 127.92871857]
[174.18525696 131.43817139]
[161.29335022 123.77013397]
[157.41572571 109.27999878]
[164.75544739 96.19756317]
[149.98333740 98.80229187]
[135.21122742 101.40701294]
[120.43910217 104.01173401]
[134.65162659 108.80800629]
[148.86415100 113.60427856]
[163.85365295 114.16545105]
[177.14697266 121.11436462]
[186.16345215 133.10198975]
[189.15266418 147.80111694]
[185.53431702 162.35816956]
[176.01083374 173.94709778]
[162.43107605 180.31811523]
[147.43130493 180.23439026]
[133.92350769 173.71217346]
[124.52999878 162.01763916]
[121.07438660 147.42193604]
[113.61424255 134.40861511]
[106.15409851 121.39530945]
[106.46207428 136.39215088]
[106.77005768 151.38897705]
[107.07803345 166.38581848]
[107.38600922 181.38265991]
[107.69398499 196.37950134]
[108.00196838 211.37632751]
[108.30994415 226.37316895]
[108.61791992 241.37001038]
[111.20369720 260.57843018]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 151]
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 38]
[11 37]
[12 36]
[13 35]
[14 34]
[15 31]
[16 30]
[17 29]
[18 28]
[45 92]
[46 91]
[47 90]
[48 89]
[51 86]
[52 85]
[53 84]
[54 68]
[55 67]
[56 66]
[93 128]
[94 127]
[95 126]
[96 125]
[97 118]
[98 117]
[99 116]
[100 115]
[101 114]
[102 113]
[103 112]
[104 111]
[105 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
