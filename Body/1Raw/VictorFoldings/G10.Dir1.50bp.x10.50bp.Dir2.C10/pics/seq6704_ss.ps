%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUACUUCUCCUAUCUCUCCCAGUCCUAGCUGCUGGCAUCACUAUACUACUAACAGACCGCxxxxxxxxxxCACUGAGCCACAACCCAAACAACCCAGCUCUCCCUAAGCUUCAAACUAGACUACUUCUCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[88.29476929 396.33950806]
[88.29476929 381.33950806]
[88.29476929 366.33950806]
[88.29476929 351.33950806]
[88.29476929 336.33950806]
[88.29476929 321.33950806]
[88.29476929 306.33950806]
[88.29476929 291.33950806]
[88.29476929 276.33950806]
[88.29476929 261.33950806]
[74.71707916 258.12750244]
[62.19867706 251.94853210]
[51.37897491 243.11427307]
[42.81152725 232.07211304]
[36.93566895 219.38256836]
[34.05400848 205.69071960]
[34.31683731 191.69351196]
[37.71428680 178.10421753]
[44.07667923 165.61611938]
[53.08296204 154.86717224]
[64.27693176 146.40733337]
[77.09034729 140.67048645]
[90.87174988 137.95217896]
[91.49572754 122.96516418]
[92.11970520 107.97814178]
[79.28515625 115.74181366]
[65.14066315 110.74848938]
[60.02470016 96.64788818]
[67.67662048 83.74641418]
[82.50349426 81.47399139]
[93.66781616 91.49098206]
[95.84465027 76.64977264]
[98.02149200 61.80856705]
[85.77868652 50.18248367]
[82.88294220 33.71748352]
[90.27632141 18.90856934]
[104.88119507 11.47869968]
[106.74880219 -3.40457988]
[108.61641693 -18.28785896]
[110.48403168 -33.17113876]
[111.10800934 -48.15815735]
[110.48403168 -63.14517212]
[109.86005402 -78.13218689]
[109.23607635 -93.11920166]
[108.61209869 -108.10622406]
[93.62802887 -109.05240631]
[78.82494354 -111.55969238]
[64.36504364 -115.60060883]
[50.40676117 -121.13088989]
[37.10301971 -128.08993530]
[24.59959221 -136.40148926]
[13.03346920 -145.97448730]
[2.53137541 -156.70407104]
[-6.79162169 -168.47264099]
[-14.83337498 -181.15129089]
[-21.50577354 -194.60107422]
[-26.73571205 -208.67465210]
[-30.46588707 -223.21780396]
[-32.65542984 -238.07121277]
[-33.28034973 -253.07211304]
[-32.33380127 -268.05618286]
[-29.82615471 -282.85919189]
[-25.78488541 -297.31900024]
[-20.25427055 -311.27713013]
[-13.29490662 -324.58071899]
[-4.98304462 -337.08392334]
[4.59024525 -348.64984131]
[15.32007313 -359.15167236]
[27.08887863 -368.47436523]
[39.76771545 -376.51580811]
[53.21766281 -383.18789673]
[67.29136658 -388.41748047]
[81.83461761 -392.14730835]
[96.68807220 -394.33648682]
[111.68899536 -394.96105957]
[126.67301941 -394.01412964]
[141.47598267 -391.50613403]
[155.93568420 -387.46450806]
[169.89370728 -381.93356323]
[183.19709778 -374.97387695]
[195.70011902 -366.66171265]
[207.26577759 -357.08813477]
[217.76734924 -346.35803223]
[227.08978271 -334.58901978]
[235.13092041 -321.90997314]
[241.80265808 -308.45986938]
[247.03192139 -294.38604736]
[250.76138306 -279.84271240]
[252.95021057 -264.98919678]
[253.57440186 -249.98825073]
[252.62712097 -235.00425720]
[250.11875916 -220.20135498]
[246.07678223 -205.74174500]
[240.54548645 -191.78385925]
[233.58547974 -178.48063660]
[225.27301025 -165.97781372]
[215.69915771 -154.41238403]
[204.96882629 -143.91107178]
[193.19956970 -134.58892822]
[180.52033997 -126.54810333]
[167.07006836 -119.87668610]
[152.99610901 -114.64777374]
[138.45268250 -110.91865540]
[123.59911346 -108.73019409]
[124.22309113 -93.74317932]
[124.84706879 -78.75616455]
[125.47104645 -63.76914978]
[126.09502411 -48.78213501]
[135.90374756 -60.13065720]
[150.47227478 -63.70246887]
[164.41784668 -58.17785645]
[172.58782959 -45.59805679]
[171.96357727 -30.61104965]
[162.77575684 -18.75424194]
[148.41906738 -14.40848351]
[134.19802856 -19.17944717]
[125.36730957 -31.30352592]
[123.49969482 -16.42024612]
[121.63208771 -1.53696680]
[119.76447296 13.34631348]
[130.33323669 21.56197548]
[135.48854065 34.03331375]
[133.77832031 47.52870941]
[125.54480743 58.49330521]
[112.86269379 63.98540497]
[110.68585968 78.82660675]
[108.50901794 93.66781616]
[107.10671997 108.60211945]
[106.48274231 123.58914185]
[105.85876465 138.57615662]
[121.28263092 143.25985718]
[134.97683716 151.74263000]
[146.02529907 163.45059204]
[153.69061279 177.59426880]
[157.46321106 193.22196960]
[157.09526062 209.28369141]
[152.61694336 224.70173645]
[144.33404541 238.44299316]
[132.80709839 249.58818054]
[118.81343079 257.39334106]
[103.29476929 261.33950806]
[103.29476929 276.33950806]
[103.29476929 291.33950806]
[103.29476929 306.33950806]
[103.29476929 321.33950806]
[103.29476929 336.33950806]
[103.29476929 351.33950806]
[103.29476929 366.33950806]
[103.29476929 381.33950806]
[103.29476929 396.33950806]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[23 130]
[24 129]
[25 128]
[31 127]
[32 126]
[33 125]
[37 120]
[38 119]
[39 118]
[40 117]
[41 108]
[42 107]
[43 106]
[44 105]
[45 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
