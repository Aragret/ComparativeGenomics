%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCAAGAACUAUCAAACUCCUGAGCCAACAACUUAAUAUGACUAGCUUACACAAUAGCUUxxxxxxxxxxUUGUGAAUCUGACAACAGAGGCUUACGACCCCUUAUUUACCGAGAAAGCUCACAAGAACUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[89.17583466 473.05383301]
[89.17583466 458.05383301]
[89.17583466 443.05383301]
[89.17583466 428.05383301]
[89.17583466 413.05383301]
[89.17583466 398.05383301]
[89.17583466 383.05383301]
[89.17583466 368.05383301]
[89.17583466 353.05383301]
[89.17583466 338.05383301]
[75.96894073 335.55789185]
[63.40919113 330.76113892]
[51.89409256 323.81396484]
[41.78837204 314.93481445]
[33.41239166 304.40332031]
[27.03200531 292.55154419]
[22.85011673 279.75350952]
[21.00023079 266.41329956]
[21.54218292 252.95246887]
[24.46022034 239.79658508]
[29.66343689 227.36183167]
[36.98862076 216.04179382]
[46.20537186 206.19508362]
[57.02333069 198.13389587]
[69.10134888 192.11416626]
[82.05824280 188.32742310]
[95.48480225 186.89468384]
[96.73168182 171.94659424]
[88.39264679 156.53684998]
[98.93532562 141.47590637]
[99.87095642 126.50511932]
[78.39337158 107.90852356]
[87.33174133 85.16030121]
[82.72618103 70.88484192]
[78.12061310 56.60938263]
[73.51505280 42.33392334]
[53.33533478 41.48759079]
[37.78360367 19.19984436]
[29.27251244 6.84827280]
[20.76142311 -5.50329971]
[12.25033283 -17.85487175]
[-1.32551074 -12.55120277]
[-15.73577309 -10.41641521]
[-30.25117683 -11.55514717]
[-44.13788223 -15.90645218]
[-56.69458771 -23.24705505]
[-67.28794861 -33.20280838]
[-75.38452148 -45.26775360]
[-80.57762146 -58.82984924]
[-82.60775757 -73.20199585]
[-81.37559509 -87.65686035]
[-76.94679260 -101.46369934]
[-69.54854584 -113.92526245]
[-59.55790329 -124.41304779]
[-67.81018829 -136.93901062]
[-76.06247711 -149.46496582]
[-84.31476593 -161.99093628]
[-99.82117462 -162.56637573]
[-112.00706482 -172.17280579]
[-116.18672180 -187.11637878]
[-110.75298309 -201.65095520]
[-97.79522705 -210.18771362]
[-82.29598236 -209.44409180]
[-70.21501923 -199.70602417]
[-66.19771576 -184.71800232]
[-71.78881073 -170.24322510]
[-63.53651810 -157.71725464]
[-55.28422928 -145.19129944]
[-47.03194046 -132.66532898]
[-32.49326324 -137.93614197]
[-17.10863113 -139.59053040]
[-1.76445663 -137.52900696]
[12.65417671 -131.86630249]
[25.31457520 -122.92495728]
[35.48452377 -111.21703339]
[42.57463074 -97.41471863]
[46.17248917 -82.31176758]
[46.06665802 -66.77782440]
[42.25908661 -51.70840836]
[34.96523666 -37.97320938]
[24.60190582 -26.36596298]
[33.11299515 -14.01438999]
[41.62408447 -1.66281748]
[50.13517761 10.68875504]
[57.61529922 11.23441029]
[66.04050446 -1.17590678]
[72.57554626 12.32572079]
[80.05567169 12.87137604]
[90.26914978 1.88571143]
[100.48263550 -9.09995365]
[110.69611359 -20.08561707]
[113.83171082 -36.18220520]
[129.42543030 -41.25839233]
[141.43580627 -30.09223366]
[137.50758362 -14.17051697]
[121.68177795 -9.87213802]
[111.46829987 1.11352658]
[101.25481415 12.09919167]
[91.04133606 23.08485603]
[87.79051208 37.72835922]
[92.39608002 52.00381851]
[97.00164032 66.27928162]
[101.60720825 80.55474091]
[112.48011017 82.07356262]
[121.90299988 89.77024841]
[126.40110779 102.34940338]
[141.39379883 102.81744385]
[147.98101807 89.08688354]
[159.58767700 79.22760010]
[174.20285034 74.94777679]
[189.29435730 76.98892975]
[202.24751282 84.99739838]
[210.81809998 97.58567810]
[213.52122498 112.57277679]
[209.88853455 127.36207581]
[200.54943848 139.39125061]
[187.12197876 146.57617188]
[171.93254089 147.67201233]
[157.61279297 142.48890686]
[146.64370728 131.92485046]
[140.92576599 117.81014252]
[125.93306732 117.34210205]
[114.84175110 127.44075012]
[113.90612030 142.41154480]
[121.85811615 152.62034607]
[120.73172760 165.10835266]
[111.67976379 173.19348145]
[110.43289185 188.14155579]
[126.39234924 192.97068787]
[140.90777588 201.16325378]
[153.28074646 212.32194519]
[162.91662598 225.90678406]
[169.35310364 241.26127625]
[172.28242493 257.64419556]
[171.56607056 274.26519775]
[167.24130249 290.32321167]
[159.51924133 305.04479980]
[148.77459717 317.72149658]
[135.52742004 327.74398804]
[120.41799164 334.63128662]
[104.17583466 338.05383301]
[104.17583466 353.05383301]
[104.17583466 368.05383301]
[104.17583466 383.05383301]
[104.17583466 398.05383301]
[104.17583466 413.05383301]
[104.17583466 428.05383301]
[104.17583466 443.05383301]
[104.17583466 458.05383301]
[104.17583466 473.05383301]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[27 128]
[28 127]
[30 124]
[31 123]
[33 103]
[34 102]
[35 101]
[36 100]
[38 84]
[39 83]
[40 82]
[41 81]
[54 69]
[55 68]
[56 67]
[57 66]
[88 99]
[89 98]
[90 97]
[91 96]
[106 122]
[107 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
