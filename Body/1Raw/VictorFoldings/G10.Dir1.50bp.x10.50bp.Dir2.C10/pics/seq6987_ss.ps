%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCAUCUUUCUUUUCACCGUAGGUGGCCUGACUGGCAUUGUAUUAGCAAACUCAUCACUAGxxxxxxxxxxGUGAUAUAUAAACUCAGACCCAAACAUUAAUCAGUUCUUCAAAUAUCUACUCAUCUUCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[82.06050110 455.67572021]
[82.06050110 440.67572021]
[82.06050110 425.67572021]
[82.06050110 410.67572021]
[82.06050110 395.67572021]
[82.06050110 380.67572021]
[82.06050110 365.67572021]
[82.06050110 350.67572021]
[82.06050110 335.67572021]
[82.06050110 320.67572021]
[64.50470734 316.56591797]
[48.53076935 308.18405151]
[35.15999222 296.06091309]
[25.24850655 280.96667480]
[19.43248177 263.86190796]
[18.08728027 245.83647156]
[21.30324364 228.04013062]
[28.87962914 211.60914612]
[40.33715057 197.59376526]
[54.94827652 186.89109802]
[71.78343964 180.18763733]
[69.60660553 165.34643555]
[67.42977142 150.50521851]
[54.49171066 142.91531372]
[40.47499847 148.25682068]
[26.45828629 153.59834290]
[12.44157314 158.93984985]
[-0.20615831 170.23016357]
[-14.55648422 161.20217896]
[-9.85388374 144.91348267]
[7.10006094 144.92314148]
[21.11677361 139.58161926]
[35.13348770 134.24011230]
[49.15019989 128.89860535]
[47.12786484 114.03555298]
[32.19355774 112.63324738]
[17.25925064 111.23094940]
[4.03674841 120.31637573]
[-11.26803112 115.50563049]
[-16.91456985 100.48909760]
[-8.57132912 86.78618622]
[7.36147356 84.90858459]
[18.66155434 96.29663849]
[33.59585953 97.69894409]
[48.53017044 99.10124969]
[54.47286987 89.54524231]
[61.94208527 82.36174774]
[49.67971420 73.72263336]
[37.41734695 65.08351135]
[25.15497971 56.44439697]
[8.78260994 55.50761032]
[1.65038753 40.74063873]
[11.09533024 27.33447838]
[27.40129089 29.08023834]
[33.79409409 44.18202972]
[46.05646515 52.82114792]
[58.31883240 61.46026230]
[70.58119965 70.09938049]
[73.94333649 67.12808228]
[77.60360718 64.53290558]
[81.52014923 62.34355164]
[85.64813995 60.58506775]
[89.94033813 59.27757263]
[89.00471497 44.30677795]
[88.06908417 29.33598709]
[87.13345337 14.36519623]
[86.19783020 -0.60559535]
[71.91157532 -5.88034153]
[61.01040268 -16.51445198]
[55.38299942 -30.66550064]
[56.00434875 -45.88173676]
[62.76679611 -59.52685165]
[74.49871063 -69.23674774]
[89.16746521 -73.32913208]
[104.23160553 -71.09496307]
[117.08118439 -62.92133331]
[125.48992920 -50.22437286]
[128.00097656 -35.20390320]
[124.17927551 -20.46231270]
[114.68695831 -8.55367088]
[101.16861725 -1.54122376]
[102.10424805 13.42956734]
[103.03987885 28.40036011]
[103.97550201 43.37115097]
[104.91113281 58.34194183]
[110.86521912 59.48506546]
[116.59232330 61.47458267]
[121.97279358 64.26892853]
[126.89423370 67.80973816]
[131.25382996 72.02302551]
[134.96049500 76.82077789]
[148.74288940 70.90081787]
[162.52526855 64.98085022]
[176.30764771 59.06089020]
[180.63037109 53.92069626]
[186.08786011 52.06407166]
[190.78865051 53.19459915]
[204.80535889 47.85308838]
[206.04536438 32.64042282]
[213.77050781 19.47665024]
[226.44696045 10.97544289]
[241.55778503 8.82472420]
[256.10272217 13.45151901]
[267.19387817 23.93717575]
[272.62908936 38.19975662]
[271.32919312 53.40742111]
[263.55227661 66.54067230]
[250.84245300 74.99188995]
[235.72326660 77.08309174]
[221.19665527 72.39905548]
[210.14688110 61.86980057]
[196.13015747 67.21131134]
[182.22761536 72.84326935]
[168.44522095 78.76323700]
[154.66284180 84.68319702]
[140.88046265 90.60315704]
[142.94584656 108.87245941]
[136.88273621 127.08412933]
[123.17467499 141.65223694]
[103.86586761 149.42048645]
[82.27097321 148.32838440]
[84.44780731 163.16958618]
[86.62464905 178.01080322]
[98.86203003 178.57814026]
[110.82085419 181.21832275]
[122.15274048 185.85310364]
[132.52777100 192.34619141]
[141.64413452 200.50720215]
[149.23687744 210.09725952]
[155.08564758 220.83596802]
[159.02101135 232.40962219]
[160.92945862 244.48039246]
[160.75657654 256.69613647]
[158.50868225 268.70071411]
[154.25256348 280.14440918]
[148.11349487 290.69396973]
[140.27156067 300.04244995]
[130.95635986 307.91812134]
[120.44032288 314.09237671]
[109.03067017 318.38623047]
[97.06050110 320.67572021]
[97.06050110 335.67572021]
[97.06050110 350.67572021]
[97.06050110 365.67572021]
[97.06050110 380.67572021]
[97.06050110 395.67572021]
[97.06050110 410.67572021]
[97.06050110 425.67572021]
[97.06050110 440.67572021]
[97.06050110 455.67572021]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[21 123]
[22 122]
[23 121]
[24 34]
[25 33]
[26 32]
[27 31]
[35 45]
[36 44]
[37 43]
[47 58]
[48 57]
[49 56]
[50 55]
[63 85]
[64 84]
[65 83]
[66 82]
[67 81]
[91 116]
[92 115]
[93 114]
[94 113]
[97 112]
[98 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
