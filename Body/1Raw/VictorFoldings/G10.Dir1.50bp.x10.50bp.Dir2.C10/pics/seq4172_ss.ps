%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCCUAGGAACAACAUAUGACGCACUCUCCCCUGAACUCUACACAACAUAUUUUGUCACCAAxxxxxxxxxxCCACAAAGACAUUGGAACACUAUACCUAUUAUUCGGCGCAUGAGCUGGAGUCCUAGGCACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.85828400 303.44308472]
[92.85828400 288.44308472]
[92.85828400 273.44308472]
[92.85828400 258.44308472]
[92.85828400 243.44306946]
[92.85828400 228.44306946]
[92.85828400 213.44306946]
[92.85828400 198.44306946]
[92.85828400 183.44306946]
[92.85828400 168.44306946]
[91.01496124 153.55676270]
[87.35625458 139.00981140]
[83.69754791 124.46286011]
[82.51074219 91.60145569]
[73.84413147 79.35849762]
[65.17752838 67.11554718]
[56.51091766 54.87259293]
[30.20510483 64.66130829]
[14.13134766 46.26580429]
[-0.69113451 43.96493149]
[-15.51361656 41.66405487]
[-30.33609772 39.36318207]
[-45.15979004 44.89208221]
[-56.54960251 35.29409409]
[-71.37208557 32.99321747]
[-86.19456482 30.69234276]
[-101.01705170 28.39146805]
[-115.83953094 26.09059334]
[-121.28916931 40.13037491]
[-129.62991333 52.67015457]
[-140.47166443 63.12342072]
[-153.30729675 71.00125122]
[-167.53651428 75.93519592]
[-182.49374390 77.69448090]
[-197.47944641 76.19681549]
[-211.79269409 71.51225281]
[-224.76402283 63.85990143]
[-235.78675842 53.59767151]
[-244.34533691 41.20554352]
[-250.03945923 27.26312828]
[-252.60281372 12.42253113]
[-251.91549683 -2.62212443]
[-248.00964355 -17.16717339]
[-241.06794739 -30.53231430]
[-231.41510010 -42.09244156]
[-219.50256348 -51.30685806]
[-205.88751221 -57.74459839]
[-191.20675659 -61.10454941]
[-176.14692688 -61.22956848]
[-161.41239929 -58.11380005]
[-147.69235229 -51.90298080]
[-135.62847900 -42.88759613]
[-125.78504181 -31.48931885]
[-118.62242889 -18.24126053]
[-114.47564697 -3.76305985]
[-113.53865814 11.26811123]
[-98.71617126 13.56898689]
[-83.89369202 15.86986160]
[-69.07121277 18.17073631]
[-54.24872971 20.47161102]
[-40.48524094 14.77813530]
[-28.03522301 24.54069901]
[-13.21274185 26.84157372]
[1.60974038 29.14244843]
[16.43222237 31.44332314]
[23.57919502 21.94202614]
[35.88226318 17.50569725]
[49.77365494 20.77344322]
[53.13291550 6.15443516]
[56.49217224 -8.46457291]
[59.85143280 -23.08358002]
[46.59038544 -30.29795456]
[35.76831055 -40.82341385]
[28.18828201 -53.87890244]
[24.41278648 -68.49561310]
[24.72198868 -83.58888245]
[29.09294510 -98.03870392]
[37.20130157 -110.77279663]
[48.44536591 -120.84620667]
[61.99075317 -127.51142120]
[76.83230591 -130.27383423]
[91.86867523 -128.92846680]
[105.98407745 -123.57514191]
[118.13104248 -114.61111450]
[127.40819550 -102.70157623]
[133.12709045 -88.73029327]
[134.86337280 -73.73403168]
[132.48818970 -58.82560730]
[126.17778778 -45.11132812]
[116.40045166 -33.60888672]
[103.88171387 -25.17183495]
[89.55055237 -20.42626381]
[74.47044373 -19.72432137]
[71.11118317 -5.10531378]
[67.75192261 9.51369381]
[64.39266205 24.13270187]
[71.49489594 10.92065144]
[84.41898346 3.30697775]
[99.41775513 3.49916434]
[112.14250946 11.44148922]
[118.90388489 24.83118057]
[117.74150085 39.78607559]
[108.99237823 51.97019958]
[95.19321442 57.85092926]
[80.34487915 55.72322083]
[68.75387573 46.20598602]
[77.42047882 58.44894028]
[86.08708954 70.69189453]
[94.75369263 82.93484497]
[94.48111725 67.93732452]
[104.33574677 56.62864304]
[119.22962189 54.84750366]
[131.47300720 63.51350784]
[134.74459839 78.15238190]
[127.35528564 91.20603943]
[113.11812592 95.93476105]
[127.54550934 100.03970337]
[141.97290039 104.14464569]
[155.65617371 96.23622131]
[170.90202332 100.40031433]
[178.66534424 114.16644287]
[174.34030151 129.36741638]
[160.49285889 136.98475647]
[145.33845520 132.49923706]
[137.86795044 118.57202911]
[123.44056702 114.46708679]
[109.01318359 110.36214447]
[98.24449921 120.80415344]
[101.90320587 135.35110474]
[105.56191254 149.89805603]
[111.02977753 135.93014526]
[121.93533325 125.63117981]
[136.19297791 120.97074890]
[151.07603455 122.84014130]
[163.73822021 130.88185120]
[171.75799561 143.55793762]
[173.60160828 158.44421387]
[168.91650391 172.69377136]
[158.59866333 183.58148193]
[144.62130737 189.02514648]
[129.65751648 187.98370361]
[116.56897736 180.65634155]
[107.85828400 168.44306946]
[107.85828400 183.44306946]
[107.85828400 198.44306946]
[107.85828400 213.44306946]
[107.85828400 228.44306946]
[107.85828400 243.44306946]
[107.85828400 258.44308472]
[107.85828400 273.44308472]
[107.85828400 288.44308472]
[107.85828400 303.44308472]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 130]
[12 129]
[13 128]
[14 109]
[15 108]
[16 107]
[17 106]
[19 65]
[20 64]
[21 63]
[22 62]
[24 60]
[25 59]
[26 58]
[27 57]
[28 56]
[68 96]
[69 95]
[70 94]
[71 93]
[116 127]
[117 126]
[118 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
