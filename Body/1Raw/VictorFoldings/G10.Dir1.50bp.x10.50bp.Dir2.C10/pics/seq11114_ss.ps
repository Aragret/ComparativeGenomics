%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAAUAACCCCACCCUACUAAACCCCAUUAAACGCCUGGCAGCCGGAAGCCUAUUCGCAGGxxxxxxxxxxAUUGCAGCCCUAGCAACACUCCACCUCCUAUUCUUGCACGAAACGGGAUCAAACAACCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[27.68933678 282.44024658]
[14.56170464 276.67364502]
[1.89015305 269.96392822]
[-6.09976292 282.65887451]
[-14.08967972 295.35379028]
[-14.89219570 311.15463257]
[-28.21981621 317.80471802]
[-36.20973206 330.49966431]
[-44.19964981 343.19458008]
[-52.18956375 355.88952637]
[-48.44028091 371.24264526]
[-56.71672440 384.70651245]
[-72.10862732 388.29327393]
[-85.48425293 379.87493896]
[-88.90807343 364.44598389]
[-80.34880066 351.16009521]
[-64.88449860 347.89959717]
[-56.89457703 335.20468140]
[-48.90466309 322.50973511]
[-40.91474533 309.81481934]
[-40.68372345 294.92199707]
[-26.78460884 287.36389160]
[-18.79469299 274.66894531]
[-10.80477619 261.97402954]
[-21.71492767 253.94401550]
[-32.04511642 245.18046570]
[-41.74612045 235.72515869]
[-50.77172089 225.62312317]
[-59.07890320 214.92251587]
[-66.62808990 203.67430115]
[-73.38330841 191.93209839]
[-79.31237030 179.75183105]
[-84.38702393 167.19157410]
[-88.58309174 154.31114197]
[-91.88056946 141.17192078]
[-94.26376343 127.83652496]
[-95.72129822 114.36848450]
[-96.24624634 100.83198547]
[-95.83609009 87.29151917]
[-94.49279785 73.81160736]
[-92.22276306 60.45648193]
[-89.03680420 47.28977585]
[-84.95010376 34.37423325]
[-79.98212433 21.77138901]
[-74.15655518 9.54129791]
[-67.50113678 -2.25776458]
[-60.04759216 -13.56957817]
[-71.93997192 -22.71131325]
[-83.83235168 -31.85304642]
[-98.67555237 -27.32987022]
[-113.33158112 -32.42696762]
[-122.16490173 -45.18439865]
[-121.77892303 -60.69667435]
[-112.32205200 -72.99900055]
[-97.43066406 -77.36089325]
[-82.83078766 -72.10511017]
[-74.13638306 -59.25260162]
[-74.69062042 -43.74542618]
[-62.79823685 -34.60369110]
[-50.90585709 -25.46195793]
[-42.61743927 -34.80929947]
[-33.75107956 -43.61034012]
[-24.34271049 -51.82941437]
[-14.43045616 -59.43321991]
[-4.05448580 -66.39093781]
[6.74315405 -72.67437744]
[17.91870689 -78.25807953]
[29.42688370 -83.11940765]
[41.22105026 -87.23866272]
[53.25341034 -90.59915161]
[65.47521210 -93.18726349]
[77.83691406 -94.99250793]
[90.28842926 -96.00756836]
[102.77930450 -96.22832489]
[115.25891113 -95.65389252]
[127.67668915 -94.28659821]
[139.98231506 -92.13197327]
[152.12590027 -89.19876099]
[164.05825806 -85.49884033]
[175.73103333 -81.04721069]
[187.09692383 -75.86190033]
[198.10984802 -69.96393585]
[206.09976196 -82.65886688]
[214.08967590 -95.35379028]
[222.07958984 -108.04872131]
[217.12353516 -122.88015747]
[222.90850830 -137.40834045]
[236.70300293 -144.77351379]
[251.99369812 -141.49806213]
[261.56079102 -129.12855530]
[260.88699341 -113.50550079]
[250.29045105 -102.00561523]
[234.77452087 -100.05880737]
[226.78460693 -87.36387634]
[218.79469299 -74.66894531]
[210.80477905 -61.97401810]
[227.74717712 -48.97630310]
[243.17709351 -34.21474838]
[256.91183472 -17.86413574]
[268.78878784 -0.11804426]
[278.66732788 18.81341362]
[286.43051147 38.70609665]
[291.98641968 59.32448196]
[295.26925659 80.42445374]
[296.24014282 101.75619507]
[294.88763428 123.06713867]
[309.70538330 125.39824677]
[324.52313232 127.72934723]
[339.34091187 130.06045532]
[356.32870483 123.03236389]
[369.56497192 134.51283264]
[384.42803955 136.53517151]
[399.29107666 138.55751038]
[411.71774292 128.79260254]
[427.39938354 130.75769043]
[437.03237915 143.28691101]
[434.90161133 158.94689941]
[422.27124023 168.44686890]
[406.63464355 166.15065002]
[397.26873779 153.42054749]
[382.40570068 151.39820862]
[367.54266357 149.37588501]
[357.68792725 156.46047974]
[345.25259399 154.85368347]
[337.00979614 144.87820435]
[322.19204712 142.54710388]
[307.37429810 140.21600342]
[292.55651855 137.88490295]
[289.27645874 151.84303284]
[284.98602295 165.52444458]
[279.70809937 178.85606384]
[273.47088623 191.76673889]
[266.30764771 204.18754578]
[258.25665283 216.05220032]
[249.36085510 227.29734802]
[239.66775513 237.86296082]
[229.22909546 247.69265747]
[218.10060120 256.73394775]
[206.34165955 264.93856812]
[194.01504517 272.26272583]
[181.18658447 278.66732788]
[167.92472839 284.11819458]
[154.30029297 288.58621216]
[140.38598633 292.04751587]
[126.25610352 294.48367310]
[111.98606110 295.88162231]
[97.65203094 296.23394775]
[83.33053589 295.53875732]
[69.09802246 293.79977417]
[55.03047180 291.02624512]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 24]
[4 23]
[5 22]
[7 20]
[8 19]
[9 18]
[10 17]
[47 60]
[48 59]
[49 58]
[82 96]
[83 95]
[84 94]
[85 93]
[106 128]
[107 127]
[108 126]
[109 125]
[111 122]
[112 121]
[113 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
