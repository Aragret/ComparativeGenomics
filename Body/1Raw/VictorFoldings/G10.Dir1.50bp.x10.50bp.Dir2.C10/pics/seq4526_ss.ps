%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCCCUUAUUUCUAGGACUAUGAGAAUCGAACCCAUCCCUGAGAAUCCAAAAUUCUCCGUxxxxxxxxxxCUAUACCUAUUAUUCGGCGCAUGAGCUGGAGUCCUAGGCACAGCUCUAAGCCUCCUUAUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[86.94976044 388.61669922]
[86.94976044 373.61669922]
[86.94976044 358.61669922]
[86.94976044 343.61669922]
[86.94976044 328.61669922]
[86.94976044 313.61669922]
[86.94976044 298.61669922]
[86.94976044 283.61669922]
[86.94976044 268.61669922]
[86.94976044 253.61669922]
[68.85054779 244.84098816]
[57.56084442 228.10296631]
[56.19448090 207.88450623]
[65.19590759 189.64517212]
[82.19975281 178.34800720]
[80.33213806 163.46472168]
[78.46452332 148.58145142]
[76.59690857 133.69816589]
[70.25401306 115.00771332]
[74.40365601 99.25113678]
[84.52004242 91.01795959]
[94.68827057 91.30755615]
[90.98210907 76.77262115]
[87.27594757 62.23768234]
[83.56978607 47.70274734]
[79.86362457 33.16781235]
[76.15746307 18.63287544]
[72.45130157 4.09793949]
[68.74514008 -10.43699646]
[53.88130188 -14.27407932]
[43.01807785 -25.84698868]
[39.92967606 -41.94775009]
[46.11978149 -57.69042587]
[60.18815231 -67.99347687]
[53.55965424 -81.44944000]
[46.93115616 -94.90540314]
[40.30265808 -108.36136627]
[30.79429817 -119.96270752]
[18.90191841 -129.10444641]
[22.91148567 -114.65026093]
[19.87030602 -99.96179199]
[10.45106030 -88.28797913]
[-3.26280165 -82.21097565]
[-18.23789978 -83.07495117]
[-31.16187859 -90.68880463]
[-39.17607498 -103.36841583]
[-40.50782394 -118.30918121]
[-34.86255264 -132.20634460]
[-23.48894310 -141.98596191]
[-8.90273285 -145.48489380]
[5.67150259 -141.92828369]
[-3.83685565 -153.52961731]
[-13.34521389 -165.13096619]
[-22.85357285 -176.73229980]
[-32.36193085 -188.33364868]
[-41.87028885 -199.93498230]
[-57.62894821 -202.94233704]
[-64.97526550 -217.20457458]
[-58.27377701 -231.78091431]
[-42.66529083 -235.48963928]
[-30.12330055 -225.48573303]
[-30.26894760 -209.44334412]
[-20.76058960 -197.84199524]
[-11.25223160 -186.24066162]
[-1.74387300 -174.63931274]
[7.76448536 -163.03797913]
[17.27284431 -151.43663025]
[28.04365158 -140.99682617]
[39.93603134 -131.85508728]
[34.50030136 -145.83554077]
[32.79502487 -160.73828125]
[34.93212128 -175.58526611]
[40.77132797 -189.40205383]
[49.92942047 -201.28184509]
[61.80533600 -210.44496155]
[75.61965942 -216.29000854]
[90.46573639 -218.43336487]
[105.36920166 -216.73439026]
[119.35194397 -211.30456543]
[131.49626160 -202.50027466]
[141.00509644 -190.89932251]
[147.25439453 -177.26310730]
[149.83398438 -162.48658752]
[148.57460022 -147.53955078]
[143.55888367 -133.40298462]
[135.11599731 -121.00468445]
[123.80007935 -111.15836334]
[110.35379791 -104.51023865]
[95.65964508 -101.49663544]
[80.68200684 -102.31534576]
[66.40387726 -106.91262817]
[53.75862122 -114.98986816]
[60.38711929 -101.53390503]
[67.01561737 -88.07793427]
[73.64411926 -74.62197113]
[87.91957855 -70.01641083]
[101.16216278 -77.06153870]
[114.40474701 -84.10667419]
[118.78170013 -99.29278564]
[132.65509033 -106.86277771]
[147.79406738 -102.32550812]
[155.21696472 -88.37286377]
[150.51988220 -73.28269958]
[136.48954773 -66.00774384]
[121.44988251 -70.86408997]
[108.20729828 -63.81895828]
[94.96471405 -56.77382278]
[99.73533630 -40.12403870]
[95.05496216 -24.35202789]
[83.28008270 -14.14315796]
[86.98624420 0.39177832]
[90.69239807 14.92671490]
[94.39855957 29.46165085]
[98.10472107 43.99658585]
[101.81088257 58.53152466]
[105.51704407 73.06645966]
[109.22320557 87.60139465]
[119.43669128 98.58705902]
[133.66346741 103.34087372]
[150.60234070 102.62596893]
[155.97845459 118.70494843]
[142.01609802 128.32206726]
[128.90965271 117.56765747]
[114.68287659 112.81384277]
[108.88220215 117.56801605]
[97.28086090 127.07637787]
[91.48019409 131.83055115]
[93.34780121 146.71383667]
[95.21541595 161.59712219]
[97.08303070 176.48039246]
[107.12926483 178.56077576]
[116.27966309 183.16232300]
[123.91484070 189.96360779]
[129.52055359 198.49472046]
[132.72230530 208.16958618]
[133.31042480 218.32635498]
[131.25364685 228.27259827]
[126.70080566 237.33250427]
[119.96994781 244.89286804]
[111.52623749 250.44453430]
[101.94976044 253.61669922]
[101.94976044 268.61669922]
[101.94976044 283.61669922]
[101.94976044 298.61669922]
[101.94976044 313.61669922]
[101.94976044 328.61669922]
[101.94976044 343.61669922]
[101.94976044 358.61669922]
[101.94976044 373.61669922]
[101.94976044 388.61669922]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[15 130]
[16 129]
[17 128]
[18 127]
[22 117]
[23 116]
[24 115]
[25 114]
[26 113]
[27 112]
[28 111]
[29 110]
[34 95]
[35 94]
[36 93]
[37 92]
[38 69]
[39 68]
[51 67]
[52 66]
[53 65]
[54 64]
[55 63]
[56 62]
[96 107]
[97 106]
[98 105]
[118 124]
[119 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
