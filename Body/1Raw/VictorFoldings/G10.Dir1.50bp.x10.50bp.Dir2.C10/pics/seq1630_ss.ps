%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUGAGGUGGCAAGAAAUGGGCUACAUUUUCUACCCCAGAAAACUACGAUAGCCCUUAUGxxxxxxxxxxAUUCUCUACAAACCACAAAGACAUUGGAACACUAUACCUAUUAUUCGGCGCAUGAGCUGGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[108.59104919 281.16265869]
[108.27899170 266.16589355]
[107.96693420 251.16914368]
[107.65487671 236.17239380]
[107.34281921 221.17564392]
[107.03076172 206.17889404]
[106.71871185 191.18212891]
[106.40665436 176.18537903]
[106.09459686 161.18862915]
[104.07226562 146.32557678]
[100.36610413 131.79064941]
[87.59374237 129.27223206]
[76.90151978 121.84580994]
[70.08217621 110.75653076]
[68.27909851 97.86372375]
[71.79460907 85.32910156]
[60.49560928 75.46337891]
[49.19660187 65.59765625]
[34.69078827 70.44828796]
[19.80296326 67.40699768]
[8.51139069 57.38867950]
[3.78211570 43.15878296]
[6.79022694 28.57053947]
[-4.50877762 18.70481682]
[-15.80778217 8.83909416]
[-27.20880318 -0.90855795]
[-38.71060562 -10.53708458]
[-50.21240997 -20.16561127]
[-63.07081223 -27.88969612]
[-76.97336578 -33.52165222]
[-90.87592316 -39.15361023]
[-104.77848053 -44.78556442]
[-118.68103790 -50.41752243]
[-132.58358765 -56.04948044]
[-151.27275085 -46.54935455]
[-170.67300415 -53.69657898]
[-178.50868225 -72.51514435]
[-192.83128357 -76.97196198]
[-207.15388489 -81.42877960]
[-221.47648621 -85.88559723]
[-235.79907227 -90.34240723]
[-250.12167358 -94.79922485]
[-264.93566895 -88.64089966]
[-278.91671753 -96.50917816]
[-281.33975220 -112.36819458]
[-270.34603882 -124.05226898]
[-254.36898804 -122.59838104]
[-245.66485596 -109.12182617]
[-231.34225464 -104.66500854]
[-217.01966858 -100.20819092]
[-202.69706726 -95.75137329]
[-188.37446594 -91.29456329]
[-174.05186462 -86.83774567]
[-167.40666199 -93.62443542]
[-158.67810059 -97.51529694]
[-149.07218933 -97.92589569]
[-139.93348694 -94.75592804]
[-132.55691528 -88.40927887]
[-128.00431824 -79.74305725]
[-126.95163727 -69.95203400]
[-113.04907990 -64.32007599]
[-99.14652252 -58.68812180]
[-85.24396515 -53.05616379]
[-71.34141541 -47.42420959]
[-57.43885422 -41.79225159]
[-66.02762604 -54.08993530]
[-69.69216919 -68.63542175]
[-67.95526123 -83.53451538]
[-61.04310226 -96.84699249]
[-49.85581970 -106.83922577]
[-35.85028458 -112.20997620]
[-20.85036659 -112.25984192]
[-6.80943489 -106.98231506]
[4.44402790 -97.06467438]
[11.44453907 -83.79844666]
[13.28045464 -68.91122437]
[9.71269321 -54.34169769]
[1.20586598 -41.98719025]
[-11.13222313 -33.45656586]
[-25.69484520 -29.86072540]
[-40.58388519 -31.66741371]
[-29.08208084 -22.03888702]
[-17.58027649 -12.41036129]
[-10.38599586 -10.51616764]
[-5.94205952 -2.45991063]
[5.35694551 7.40581226]
[16.65595055 17.27153587]
[30.70544052 12.32406807]
[45.44302368 15.09165668]
[56.89223099 24.92944145]
[61.91296387 39.27130508]
[59.06232452 54.29865265]
[70.36132812 64.16437531]
[81.66033173 74.03009796]
[102.97001648 64.97554779]
[127.19248199 72.73461914]
[140.28562927 65.41551208]
[153.37878418 58.09640503]
[159.11157227 43.11259079]
[174.44375610 38.38991928]
[187.61380005 47.55122375]
[188.51878357 63.56873322]
[176.46446228 74.15518188]
[160.69789124 71.18955994]
[147.60473633 78.50866699]
[134.51158142 85.82777405]
[137.30390930 100.56557465]
[152.16696167 102.58791351]
[167.02999878 104.61024475]
[174.65721130 91.46132660]
[186.73873901 82.23608398]
[201.43225098 78.34130096]
[216.49708557 80.37091064]
[229.63595581 88.01541138]
[238.84529114 100.10906219]
[242.72074890 114.80768585]
[240.67132568 129.86982727]
[233.00953674 142.99864197]
[220.90377808 152.19206238]
[206.20008850 156.04817200]
[191.14064026 153.97894287]
[178.02192688 146.29989624]
[168.84443665 134.18205261]
[165.00767517 119.47329712]
[150.14462280 117.45095825]
[135.28157043 115.42862701]
[125.77606964 123.89827728]
[114.90103912 128.08448792]
[118.60720062 142.61941528]
[124.38172150 128.77546692]
[135.84596252 119.10225677]
[150.46414185 115.73939514]
[165.00285339 119.43073273]
[176.24626160 129.35975647]
[181.70744324 143.33029175]
[180.17840576 158.25215149]
[171.99739075 170.82478333]
[158.97395325 178.26722717]
[143.98873901 178.93327332]
[130.35636902 172.67561340]
[121.09134674 160.87657166]
[121.40340424 175.87332153]
[121.71546173 190.87008667]
[122.02751923 205.86683655]
[122.33957672 220.86358643]
[122.65163422 235.86033630]
[122.96368408 250.85710144]
[123.27574158 265.85385132]
[123.58779907 280.85061646]
[126.17880249 300.05831909]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 129]
[11 128]
[16 94]
[17 93]
[18 92]
[23 87]
[24 86]
[25 85]
[26 83]
[27 82]
[28 81]
[29 65]
[30 64]
[31 63]
[32 62]
[33 61]
[34 60]
[37 53]
[38 52]
[39 51]
[40 50]
[41 49]
[42 48]
[96 106]
[97 105]
[98 104]
[107 126]
[108 125]
[109 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
