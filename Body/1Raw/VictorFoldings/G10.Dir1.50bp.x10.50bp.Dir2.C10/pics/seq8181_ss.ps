%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAAACCCUGAGAACCAAAAUGAACGAAAAUCUGUUCGCUUCAUUCAUUGCCCCCACAAUCxxxxxxxxxxCACCAAUCCUACCUCCAUCGCUAACCCCACUAAAACACUCACCAAGACCUCAACCCCUGACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[247.66442871 135.13455200]
[242.88911438 120.90847778]
[239.11779785 106.38394928]
[236.36885071 91.63172913]
[224.60826111 100.77162170]
[210.01489258 94.66061401]
[195.11299133 96.37330627]
[180.21109009 98.08599091]
[165.30918884 99.79868317]
[150.40728760 101.51137543]
[135.50538635 103.22406006]
[120.60348511 104.93675232]
[105.70158386 106.64944458]
[103.58024597 108.93721008]
[100.55857849 110.48128510]
[96.91901398 110.93904877]
[93.06925201 110.08039856]
[89.49668121 107.83154297]
[74.50399017 108.29959106]
[59.51129150 108.76763153]
[70.75716400 118.69387817]
[74.17723846 133.29878235]
[68.50785828 147.18611145]
[55.84374619 155.22479248]
[40.86404800 154.44468689]
[29.10345650 145.13401794]
[24.90727806 130.73289490]
[29.82591820 116.56226349]
[42.04120255 107.85813904]
[27.17815399 105.83580017]
[12.31510735 103.81346893]
[-2.54793978 101.79113007]
[-17.41098595 99.76879883]
[-32.29426575 97.90118408]
[-47.19616699 96.18849182]
[-62.09807205 94.47580719]
[-76.99997711 92.76311493]
[-89.22080994 102.78442383]
[-104.93994141 101.14600372]
[-114.83148956 88.81989288]
[-113.02696228 73.11896515]
[-100.59696960 63.35829163]
[-84.91599274 65.32871246]
[-75.28728485 77.86121368]
[-60.38537979 79.57390594]
[-45.48347855 81.28659058]
[-30.58157730 82.99928284]
[-23.53179550 80.62310028]
[-15.38865185 84.90575409]
[-0.52560526 86.92808533]
[14.33744144 88.95042419]
[29.20048904 90.97275543]
[44.06353378 92.99508667]
[59.04325104 93.77493286]
[74.03594971 93.30689240]
[89.02864075 92.83885193]
[103.98889160 91.74754333]
[118.89079285 90.03485107]
[133.79269409 88.32215881]
[148.69459534 86.60947418]
[163.59649658 84.89678192]
[178.49839783 83.18408966]
[193.40029907 81.47140503]
[208.30220032 79.75871277]
[221.12869263 70.49631500]
[234.65617371 76.72982788]
[233.98666382 61.73861313]
[234.36453247 46.73721313]
[235.78793335 31.79871941]
[238.24993896 16.99590492]
[241.73852539 2.40089035]
[246.23672485 -11.91521740]
[251.72261047 -25.88267136]
[258.16946411 -39.43342590]
[265.54586792 -52.50145721]
[273.81588745 -65.02310181]
[282.93920898 -76.93735504]
[292.87142944 -88.18616486]
[303.56411743 -98.71473694]
[314.96524048 -108.47177887]
[327.01916504 -117.40974426]
[339.66723633 -125.48509216]
[352.84777832 -132.65847778]
[366.49664307 -138.89495850]
[380.54727173 -144.16415405]
[394.93124390 -148.44038391]
[409.57846069 -151.70280457]
[424.41760254 -153.93554688]
[439.37631226 -155.12771606]
[454.38177490 -155.27351379]
[469.36083984 -154.37222290]
[484.24053955 -152.42823792]
[498.94839478 -149.45101929]
[513.41271973 -145.45509338]
[527.56311035 -140.45989990]
[541.33056641 -134.48980713]
[554.64801025 -127.57386780]
[567.45056152 -119.74580383]
[579.67590332 -111.04373932]
[591.26446533 -101.51007080]
[602.15972900 -91.19124603]
[612.30859375 -80.13754272]
[621.66174316 -68.40280914]
[630.17346191 -56.04421616]
[637.80242920 -43.12197876]
[644.51135254 -29.69904900]
[650.26757812 -15.84082508]
[655.04309082 -1.61482131]
[658.81463623 12.90965271]
[661.56378174 27.66183472]
[663.27716064 42.56985474]
[663.94641113 57.56107712]
[663.56835938 72.56246948]
[662.14471436 87.50094604]
[659.68255615 102.30372620]
[656.19372559 116.89868927]
[651.69531250 131.21473694]
[646.20922852 145.18211365]
[639.76220703 158.73277283]
[632.38562012 171.80068970]
[624.11541748 184.32221985]
[614.99188232 196.23634338]
[605.05950928 207.48501587]
[594.36669922 218.01342773]
[582.96545410 227.77030945]
[570.91137695 236.70809937]
[558.26318359 244.78326416]
[545.08251953 251.95646667]
[531.43359375 258.19274902]
[517.38287354 263.46173096]
[502.99884033 267.73776245]
[488.35159302 271.00000000]
[473.51242065 273.23251343]
[458.55368042 274.42446899]
[443.54821777 274.57003784]
[428.56918335 273.66854858]
[413.68951416 271.72433472]
[398.98168945 268.74691772]
[384.51739502 264.75076294]
[370.36709595 259.75540161]
[356.59976196 253.78507996]
[343.28237915 246.86895752]
[330.47991943 239.04071045]
[318.25473022 230.33847046]
[306.66632080 220.80464172]
[295.77120972 210.48565674]
[285.62246704 199.43180847]
[276.26953125 187.69694519]
[267.75793457 175.33822632]
[260.12921143 162.41587830]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 66]
[6 64]
[7 63]
[8 62]
[9 61]
[10 60]
[11 59]
[12 58]
[13 57]
[18 56]
[19 55]
[20 54]
[29 53]
[30 52]
[31 51]
[32 50]
[33 49]
[34 47]
[35 46]
[36 45]
[37 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
