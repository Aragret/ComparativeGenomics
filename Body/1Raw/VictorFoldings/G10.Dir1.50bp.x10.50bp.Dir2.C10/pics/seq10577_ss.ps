%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCAAAAAUUUUGGUGCAACUCCAAAUAAAAGUAAUAACCAUGCACACUACUAUAACCACxxxxxxxxxxUUCGUUACAUGGUCCAUCAUAGAAUUCUCACUGUGAUAUAUAAACUCAGACCCAAACAUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[82.81349945 290.55529785]
[82.50144958 275.55853271]
[82.18939209 260.56179810]
[81.87733459 245.56503296]
[81.56527710 230.56828308]
[81.25321960 215.57151794]
[80.94116211 200.57476807]
[80.62911224 185.57801819]
[80.31705475 170.58126831]
[66.35666656 165.09423828]
[55.91685104 175.86503601]
[45.58964539 186.74386597]
[35.37616730 197.72952271]
[25.16268539 208.71519470]
[14.94920635 219.70086670]
[4.73572636 230.68652344]
[-1.62091374 246.40370178]
[-18.48354530 244.64642334]
[-21.46298599 227.95632935]
[-6.24993849 220.47303772]
[3.96354151 209.48738098]
[14.17702103 198.50170898]
[24.39050102 187.51605225]
[34.60398102 176.53038025]
[36.86964035 169.44430542]
[45.14604187 165.42523193]
[55.58585358 154.65441895]
[46.17961884 145.05355835]
[38.79752731 133.87565613]
[33.69511032 121.53885651]
[31.04299545 108.50074005]
[30.92128754 95.24138641]
[33.31722641 82.24571228]
[38.12630463 69.98569489]
[45.15668488 58.90326691]
[54.13681793 49.39437485]
[64.72588348 41.79485321]
[76.52672577 36.36854935]
[89.10071564 33.29822159]
[101.98406982 32.67940140]
[114.70495605 34.51753616]
[119.60650635 20.34097672]
[124.50805664 6.16441870]
[120.57814789 -11.79486084]
[134.20814514 -22.80499649]
[138.81370544 -37.08045578]
[143.41928101 -51.35591888]
[144.19912720 -66.33563232]
[141.10079956 -81.01216125]
[138.00247192 -95.68868256]
[134.90415955 -110.36521149]
[131.80583191 -125.04173279]
[128.70750427 -139.71826172]
[121.97512817 -126.31397247]
[109.51872253 -117.95706177]
[94.56258392 -116.81069946]
[80.97808075 -123.17161560]
[72.28151703 -135.39331055]
[70.72396088 -150.31222534]
[76.70858765 -164.06665039]
[88.68630219 -173.09629822]
[103.55669403 -175.06385803]
[117.47061920 -169.46005249]
[126.82645416 -157.73548889]
[126.82645416 -172.73548889]
[126.82645416 -187.73548889]
[126.82645416 -202.73548889]
[112.57378387 -207.89662170]
[100.94785309 -217.62356567]
[93.35255432 -230.74177551]
[90.70505524 -245.66712952]
[93.32504272 -260.59735107]
[100.89615631 -273.72952271]
[112.50414276 -283.47787476]
[126.74727631 -288.66528320]
[141.90563965 -288.66528320]
[156.14877319 -283.47787476]
[167.75675964 -273.72952271]
[175.32786560 -260.59735107]
[177.94786072 -245.66712952]
[175.30035400 -230.74177551]
[167.70506287 -217.62356567]
[156.07913208 -207.89662170]
[141.82646179 -202.73548889]
[141.82646179 -187.73548889]
[141.82646179 -172.73548889]
[141.82646179 -157.73548889]
[143.38403320 -142.81657410]
[146.48236084 -128.14006042]
[149.58068848 -113.46353149]
[152.67900085 -98.78700256]
[155.77732849 -84.11048126]
[158.87564087 -69.43395233]
[168.11506653 -74.50714111]
[177.95840454 -73.82760620]
[185.32646179 -68.32908630]
[199.73867798 -72.48696899]
[214.15089417 -76.64485931]
[228.56311035 -80.80274200]
[242.97532654 -84.96063232]
[257.38754272 -89.11852264]
[271.79974365 -93.27640533]
[276.95648193 -107.91156006]
[289.74978638 -116.69286346]
[305.26034546 -116.24372101]
[317.52407837 -106.73683929]
[321.82528687 -91.82781219]
[316.51010132 -77.24945831]
[303.62228394 -68.60746002]
[288.11752319 -69.22483063]
[275.95764160 -78.86418915]
[261.54541016 -74.70630646]
[247.13320923 -70.54841614]
[232.72099304 -66.39052582]
[218.30877686 -62.23264313]
[203.89656067 -58.07475281]
[189.48434448 -53.91686630]
[177.18678284 -39.93139648]
[157.69473267 -46.75035477]
[153.08917236 -32.47489166]
[148.48361206 -18.19943237]
[153.72402954 -7.25204611]
[149.95462036 4.70665169]
[138.68461609 11.06596947]
[133.78306580 25.24252701]
[128.88151550 39.41908646]
[139.61999512 45.55616379]
[149.08308411 53.58329773]
[156.94070435 63.24001694]
[162.91525269 74.20870972]
[166.79133606 86.12506866]
[168.42355347 98.59017181]
[167.74188232 111.18386841]
[164.75454712 123.47889709]
[159.54824829 135.05541992]
[152.28570557 145.51531982]
[143.20063782 154.49592590]
[132.59019470 161.68257141]
[120.80533600 166.81956482]
[108.23915100 169.71934509]
[95.31380463 170.26921082]
[95.62586212 185.26596069]
[95.93791962 200.26271057]
[96.24997711 215.25946045]
[96.56203461 230.25622559]
[96.87408447 245.25297546]
[97.18614197 260.24972534]
[97.49819946 275.24649048]
[97.81025696 290.24322510]
[100.40125275 309.45095825]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 27]
[11 26]
[12 24]
[13 23]
[14 22]
[15 21]
[16 20]
[41 126]
[42 125]
[43 124]
[45 121]
[46 120]
[47 119]
[48 93]
[49 92]
[50 91]
[51 90]
[52 89]
[53 88]
[64 87]
[65 86]
[66 85]
[67 84]
[96 117]
[97 116]
[98 115]
[99 114]
[100 113]
[101 112]
[102 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
