%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGUACCCACGUAAAGACGUUAGGUCAAGGUGUAGCCCAUGAGGUGGCAAGAAAUGGGCUACxxxxxxxxxxAACCUCGCCUUACCCCCCACUAUUAACCUACUGGGAGAACUCUCUGUGCUAGUAACCACGUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[133.46485901 349.83810425]
[133.46485901 334.83810425]
[133.46485901 319.83810425]
[133.46485901 304.83810425]
[133.46485901 289.83810425]
[133.46485901 274.83810425]
[133.46485901 259.83810425]
[133.46485901 244.83810425]
[133.46485901 229.83810425]
[133.46485901 214.83810425]
[131.77445984 199.93367004]
[128.41520691 185.31465149]
[125.05594635 170.69564819]
[121.69668579 156.07664490]
[118.33742523 141.45762634]
[101.33331299 141.20260620]
[87.21192932 134.84370422]
[77.84424591 124.46787262]
[65.51296234 133.00833130]
[53.18168259 141.54878235]
[40.85039902 150.08924866]
[34.33663940 165.13926697]
[18.01719856 166.75415039]
[8.68011475 153.27264404]
[15.93058109 138.56336975]
[32.30994034 137.75796509]
[44.64122391 129.21749878]
[56.97250748 120.67704773]
[69.30378723 112.13658905]
[66.99709320 99.39835358]
[69.76654053 86.75266266]
[77.18617249 76.14453125]
[69.55319977 63.23183441]
[61.92023087 50.31913757]
[54.81470871 44.47898865]
[54.26623535 37.06202698]
[46.89999771 23.99533081]
[39.53375626 10.92863560]
[32.16751862 -2.13805938]
[24.80127716 -15.20475388]
[15.39742088 -26.89096260]
[4.20912409 -36.88206100]
[-6.97917271 -46.87315750]
[-18.16746902 -56.86425400]
[-29.35576630 -66.85535431]
[-40.54406357 -76.84645081]
[-51.73236084 -86.83754730]
[-62.92065430 -96.82864380]
[-74.10895538 -106.81974030]
[-87.97833252 -100.53004456]
[-103.20693207 -100.43179321]
[-117.15630341 -106.54202271]
[-127.40963745 -117.80207825]
[-132.19049072 -132.26110840]
[-130.67053223 -147.41398621]
[-123.11311340 -160.63537598]
[-110.82760620 -169.63461304]
[-95.94255066 -172.85250854]
[-81.03686523 -169.73155212]
[-68.69304657 -160.81246948]
[-61.04974747 -147.64053345]
[-59.43120956 -132.49786377]
[-64.11785889 -118.00803375]
[-52.92955780 -108.01693726]
[-41.74126053 -98.02584076]
[-30.55296516 -88.03474426]
[-19.36466980 -78.04364777]
[-8.17637253 -68.05255127]
[3.01192427 -58.06145477]
[14.20022106 -48.07035828]
[25.38851738 -38.07925797]
[21.27289391 -52.50360107]
[22.24428368 -67.47211456]
[28.18968582 -81.24354553]
[38.41748047 -92.21588135]
[51.73789597 -99.11273193]
[66.60138702 -101.13180542]
[81.27890778 -98.03823090]
[94.06306458 -90.19186401]
[103.46669006 -78.50547028]
[108.39588165 -64.33850098]
[108.27723694 -49.33897018]
[103.12454987 -35.25174713]
[93.53723907 -23.71557045]
[80.63056183 -16.07242203]
[65.90593719 -13.21141338]
[51.07624435 -15.46536255]
[37.86797333 -22.57099342]
[45.23421097 -9.50429916]
[52.60045242 3.56239605]
[59.96669006 16.62909126]
[67.33293152 29.69578552]
[74.83293152 42.68616867]
[82.46590424 55.59886551]
[90.09886932 68.51156616]
[117.21617889 64.81605530]
[142.48944092 84.19988251]
[156.63676453 79.21456146]
[170.78407288 74.22924042]
[184.93139648 69.24391937]
[186.55572510 54.06747818]
[194.61131287 41.10328674]
[207.49870300 32.92538452]
[222.65908813 31.15750504]
[237.08236694 36.15066147]
[247.90480042 46.91345978]
[252.97756958 61.30893707]
[251.29347229 76.47885895]
[243.18690491 89.41123199]
[230.26741028 97.53832245]
[215.10018921 99.24648285]
[200.69667053 94.19656372]
[189.91671753 83.39123535]
[175.76939392 88.37655640]
[161.62208557 93.36187744]
[147.47476196 98.34719849]
[147.93669128 113.34008789]
[162.36407471 117.44503021]
[176.79145813 121.54997253]
[192.55467224 117.02743530]
[204.16336060 128.61061096]
[199.67552185 144.38374329]
[183.70785522 148.12075806]
[172.68652344 135.97735596]
[158.25912476 131.87242126]
[143.83174133 127.76747131]
[132.95643616 138.09837341]
[136.31568909 152.71737671]
[139.67495728 167.33639526]
[143.03421021 181.95539856]
[146.39346313 196.57440186]
[152.46691895 182.85896301]
[164.13929749 173.43795776]
[178.82763672 170.39613342]
[193.28155518 174.40663147]
[204.30256653 184.58197021]
[209.45181274 198.67044067]
[207.58984375 213.55442810]
[199.12867737 225.94024658]
[185.94068909 233.08706665]
[170.94424438 233.41334534]
[157.45788574 226.84690857]
[148.46485901 214.83810425]
[148.46485901 229.83810425]
[148.46485901 244.83810425]
[148.46485901 259.83810425]
[148.46485901 274.83810425]
[148.46485901 289.83810425]
[148.46485901 304.83810425]
[148.46485901 319.83810425]
[148.46485901 334.83810425]
[148.46485901 349.83810425]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 131]
[12 130]
[13 129]
[14 128]
[15 127]
[18 29]
[19 28]
[20 27]
[21 26]
[32 95]
[33 94]
[34 93]
[36 92]
[37 91]
[38 90]
[39 89]
[40 88]
[41 71]
[42 70]
[43 69]
[44 68]
[45 67]
[46 66]
[47 65]
[48 64]
[49 63]
[97 116]
[98 115]
[99 114]
[100 113]
[117 126]
[118 125]
[119 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
