%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGAUUUAUAGGUAGAGGCGACAAACCUACCGAGCCUGGUGAUAGCUGGUUGUCCAAGAUAxxxxxxxxxxAUAUGAAAAUCACCUCGGAGCUGGUAAAAAGAGGCCUAACCCCUGUCUUUAGAUUUACAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[161.65228271 587.04681396]
[161.65228271 572.04681396]
[161.65228271 557.04681396]
[161.65228271 542.04681396]
[161.65228271 527.04681396]
[161.65228271 512.04681396]
[161.65228271 497.04681396]
[161.65228271 482.04681396]
[161.65228271 467.04681396]
[161.65228271 452.04681396]
[159.78466797 437.16354370]
[156.07850647 422.62860107]
[152.37234497 408.09365845]
[139.84436035 405.98440552]
[129.01664734 399.24987793]
[121.53101349 388.86932373]
[118.53837585 376.37786865]
[120.52194214 363.63955688]
[127.21956635 352.56924438]
[137.65779114 344.84469604]
[134.55947876 330.16815186]
[131.46115112 315.49163818]
[121.47296906 308.59646606]
[118.80049896 296.34588623]
[125.41954041 285.22644043]
[122.62722015 270.48861694]
[119.83489227 255.75080872]
[117.04256439 241.01301575]
[102.97652435 239.14822388]
[90.15868378 233.01271057]
[79.85324097 223.19686890]
[73.08117676 210.65478516]
[70.51905823 196.61151123]
[72.43152618 182.44342041]
[78.64400482 169.54333496]
[88.55851746 159.18353271]
[101.21128845 152.39035034]
[98.72617340 137.59764099]
[96.24105835 122.80493927]
[93.75593567 108.01222992]
[89.39535522 101.16611481]
[91.37633514 92.88619232]
[89.19949341 78.04498291]
[87.02265930 63.20378113]
[84.69155884 48.38602448]
[82.20643616 33.59331512]
[79.41411591 18.85550880]
[76.31578827 4.17898417]
[73.21746826 -10.49754143]
[70.11914825 -25.17406654]
[67.02082825 -39.85059357]
[63.92250443 -54.52711868]
[58.00254059 -68.30950165]
[43.80105209 -75.28289795]
[42.95071030 -90.15320587]
[34.43962097 -102.50478363]
[25.80050278 -114.76715088]
[17.03429604 -126.93898773]
[1.86682177 -133.17434692]
[-0.04846570 -149.46127319]
[13.25871754 -159.04515076]
[28.09908104 -152.06692505]
[29.20613289 -135.70520020]
[37.97233963 -123.53335571]
[44.47555542 -119.92034912]
[46.79119110 -111.01586914]
[55.30228424 -98.66429901]
[68.89500427 -92.57437134]
[70.35411072 -76.82058716]
[69.54898071 -91.79896545]
[73.11358643 -106.36926270]
[80.74279785 -119.28418732]
[91.78350067 -129.43814087]
[105.29055023 -135.96191406]
[120.10768127 -138.29701233]
[134.96646118 -136.24354553]
[148.59489441 -129.97732544]
[159.82632446 -120.03472900]
[167.69927979 -107.26693726]
[171.53977966 -92.76691437]
[171.01907349 -77.77595520]
[166.18171692 -63.57736206]
[157.44183350 -51.38661194]
[145.54760742 -42.24729156]
[131.51722717 -36.94178391]
[116.55177307 -35.92426300]
[101.93238068 -39.28183746]
[88.91053772 -46.72708130]
[78.59902954 -57.62543869]
[81.69734955 -42.94891357]
[84.79566956 -28.27238846]
[87.89399719 -13.59586334]
[90.99231720 1.08066237]
[94.09063721 15.75718784]
[97.58629608 19.09722900]
[98.98023987 24.69081688]
[96.99914551 31.10819626]
[99.48426056 45.90090561]
[103.72147369 52.01577759]
[101.86386871 61.02694321]
[104.04070282 75.86814880]
[106.21753693 90.70935822]
[108.54864502 105.52711487]
[111.03376007 120.31981659]
[113.51888275 135.11253357]
[116.00399780 149.90522766]
[131.65789795 152.70471191]
[145.38954163 160.67169189]
[155.55474854 172.83103943]
[160.94360352 187.70698547]
[160.92445374 203.50212097]
[155.51791382 218.31465149]
[145.39215088 230.36732483]
[131.78038025 238.22068787]
[134.57269287 252.95849609]
[137.36502075 267.69628906]
[140.15734863 282.43411255]
[152.49319458 296.06518555]
[146.13768005 312.39331055]
[149.23600769 327.06985474]
[152.33432007 341.74636841]
[169.11741638 346.76867676]
[181.01365662 359.50756836]
[184.83839417 376.42175293]
[179.63391113 392.87066650]
[166.90728760 404.38748169]
[170.61344910 418.92242432]
[174.31961060 433.45736694]
[179.77340698 419.48397827]
[190.66760254 409.17297363]
[204.91963196 404.49542236]
[219.80511475 406.34548950]
[232.47850037 414.36950684]
[240.51719666 427.03363037]
[242.38447571 441.91693115]
[237.72343445 456.17437744]
[227.42504883 467.08050537]
[213.45796204 472.55044556]
[198.49212646 471.53863525]
[185.38839722 464.23846436]
[176.65228271 452.04681396]
[176.65228271 467.04681396]
[176.65228271 482.04681396]
[176.65228271 497.04681396]
[176.65228271 512.04681396]
[176.65228271 527.04681396]
[176.65228271 542.04681396]
[176.65228271 557.04681396]
[176.65228271 572.04681396]
[176.65228271 587.04681396]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 128]
[12 127]
[13 126]
[20 121]
[21 120]
[22 119]
[25 117]
[26 116]
[27 115]
[28 114]
[37 106]
[38 105]
[39 104]
[40 103]
[42 102]
[43 101]
[44 100]
[45 98]
[46 97]
[47 94]
[48 93]
[49 92]
[50 91]
[51 90]
[52 89]
[53 69]
[55 67]
[56 66]
[57 64]
[58 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
