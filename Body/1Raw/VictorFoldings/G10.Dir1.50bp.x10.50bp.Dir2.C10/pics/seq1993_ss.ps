%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAAUAAAGUAUAGGCGAUAGAAAUUGAAACCUGGCGCAAUAGAUAUAGUACCGCAAGGGAxxxxxxxxxxUUAUUACCCUCACUGUCAACCCAACACAGGCAUGCUCAUAAGGAAAGGUUAAAAAAAGUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 276.35562134]
[92.50000000 261.35562134]
[92.50000000 246.35560608]
[92.50000000 231.35560608]
[92.50000000 216.35560608]
[92.50000000 201.35560608]
[92.50000000 186.35560608]
[92.50000000 171.35560608]
[92.50000000 156.35560608]
[92.50000000 141.35560608]
[78.45128632 136.08586121]
[67.14885712 126.21714783]
[60.03314590 113.00717926]
[45.17009735 115.02951813]
[30.30705070 117.05184937]
[23.41622162 128.66969299]
[11.26103687 134.09918213]
[-1.60736275 131.55387878]
[-10.51146221 122.18830872]
[-25.41336441 123.90100098]
[-40.31526566 125.61368561]
[-48.96590042 135.23764038]
[-61.45729446 136.32575989]
[-71.00878143 128.83734131]
[-85.94309235 130.23965454]
[-100.87740326 131.64195251]
[-113.89379883 140.63549805]
[-127.28866577 134.12191772]
[-142.22297668 135.52423096]
[-157.15728760 136.92652893]
[-163.48658752 150.92065430]
[-175.97433472 159.86221313]
[-191.26138306 161.34599304]
[-205.23561096 154.97285461]
[-214.13798523 142.45713806]
[-215.57383728 127.16551971]
[-209.15693665 113.21134949]
[-196.61337280 104.34823608]
[-181.31732178 102.96031952]
[-167.38333130 109.42094421]
[-158.55958557 121.99221802]
[-143.62527466 120.58992004]
[-128.69096375 119.18761444]
[-116.74277496 110.29436493]
[-102.27970123 116.70764160]
[-87.34539795 115.30534363]
[-72.41108704 113.90303802]
[-58.70870972 102.98311615]
[-42.02795792 110.71178436]
[-27.12605476 108.99909210]
[-12.22415161 107.28640747]
[-2.37285805 93.69192505]
[14.59200382 91.35150909]
[28.28471756 102.18880463]
[43.14776230 100.16646576]
[58.01081085 98.14413452]
[64.81169128 77.01480103]
[81.42686462 62.29622269]
[103.22222900 58.09351349]
[124.11888885 65.57884979]
[134.78051758 55.02756119]
[145.44213867 44.47627258]
[154.82929993 32.77664948]
[162.81921387 20.08171844]
[170.80914307 7.38678932]
[175.71069336 -6.78976870]
[177.26826477 -21.70868111]
[178.82585144 -36.62759399]
[180.38342285 -51.54650497]
[166.64094543 -57.90440369]
[155.70919800 -68.38179016]
[148.77398682 -81.84215546]
[146.58758545 -96.82543182]
[149.38716125 -111.70632935]
[156.86903381 -124.87068176]
[168.22161865 -134.89053345]
[182.21350098 -140.67898560]
[197.32691956 -141.60816956]
[211.92248535 -137.57727051]
[224.41699219 -129.02355957]
[233.45512390 -116.87485504]
[238.05648804 -102.44897461]
[237.72196960 -87.31071472]
[232.48783875 -73.10217285]
[222.92187500 -61.36457825]
[210.06172180 -53.37113953]
[195.30233765 -49.98892593]
[193.74476624 -35.07001114]
[192.18717957 -20.15110016]
[190.62959290 -5.23218822]
[196.89257812 -1.10604346]
[209.41854858 7.14624596]
[215.68151855 11.27239037]
[228.77467346 3.95328474]
[241.86782837 -3.36582088]
[254.96098328 -10.68492603]
[255.80606079 -26.08912659]
[264.86361694 -38.57768631]
[279.24343872 -44.16554642]
[294.35699463 -41.06964493]
[305.38156128 -30.27787018]
[308.79925537 -15.23383999]
[303.51953125 -0.73804986]
[291.22708130 8.58394718]
[275.84442139 9.75753593]
[262.28009033 2.40822792]
[249.18693542 9.72733402]
[236.09378052 17.04644012]
[223.00062561 24.36554527]
[210.16891479 27.87351036]
[198.47196960 26.86612320]
[189.27159119 22.26977730]
[183.50405884 15.37670517]
[175.51414490 28.07163429]
[167.52423096 40.76656342]
[172.86575317 54.78327942]
[187.27796936 58.94116592]
[201.96063232 52.47598267]
[216.10235596 60.05170059]
[218.85479736 75.85688019]
[208.10652161 87.76713562]
[192.10269165 86.64594269]
[183.12007141 73.35337830]
[168.70785522 69.19549561]
[162.69966125 65.37512207]
[158.41380310 60.51911926]
[155.99343872 55.13789749]
[145.33180237 65.68918610]
[134.67018127 76.24047852]
[138.11985779 82.29653168]
[140.52131653 88.83938599]
[141.80851746 95.68914032]
[141.94609070 102.65743256]
[140.93022156 109.55264282]
[138.78886414 116.18518829]
[135.58088684 122.37266541]
[131.39453125 127.94494629]
[126.34487152 132.74879456]
[120.57079315 136.65213013]
[114.23105621 139.54760742]
[107.50000000 141.35560608]
[107.50000000 156.35560608]
[107.50000000 171.35560608]
[107.50000000 186.35560608]
[107.50000000 201.35560608]
[107.50000000 216.35560608]
[107.50000000 231.35560608]
[107.50000000 246.35560608]
[107.50000000 261.35562134]
[107.50000000 276.35562134]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[13 56]
[14 55]
[15 54]
[19 51]
[20 50]
[21 49]
[24 47]
[25 46]
[26 45]
[28 43]
[29 42]
[30 41]
[60 129]
[61 128]
[62 127]
[63 115]
[64 114]
[65 113]
[66 90]
[67 89]
[68 88]
[69 87]
[93 109]
[94 108]
[95 107]
[96 106]
[116 124]
[117 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
