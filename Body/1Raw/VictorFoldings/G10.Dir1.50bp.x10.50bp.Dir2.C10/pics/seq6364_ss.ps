%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUUCUUCAUAGUAAUACCCAUCAUAAUCGGAGGCUUUGGCAACUGACUAGUUCCCCUAAUxxxxxxxxxxUGAGCCACAACCCAAACAACCCAGCUCUCCCUAAGCUUCAAACUAGACUACUUCUCCAUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[104.31800079 620.50415039]
[104.31800079 605.50415039]
[104.31800079 590.50415039]
[104.31800079 575.50415039]
[104.31800079 560.50415039]
[104.31800079 545.50415039]
[104.31800079 530.50415039]
[104.31800079 515.50415039]
[104.31800079 500.50411987]
[104.31800079 485.50411987]
[88.78144073 480.75048828]
[75.44405365 471.43920898]
[65.60472107 458.46322632]
[60.22589874 443.07290649]
[59.83955002 426.75573730]
[64.49451447 411.09252930]
[73.75067902 397.60421753]
[86.72058105 387.60418701]
[102.15444946 382.07046509]
[101.53047180 367.08343506]
[100.90649414 352.09643555]
[100.28251648 337.10940552]
[91.57472229 328.65472412]
[90.96878815 316.13067627]
[99.33856964 306.26150513]
[99.02651978 291.26477051]
[83.90189362 288.23788452]
[69.81734467 281.93261719]
[57.47412872 272.65951538]
[47.48753738 260.87698364]
[40.35624313 247.16859436]
[36.43739700 232.21424866]
[35.92874527 216.75636292]
[38.85864258 201.56309509]
[45.08449936 187.39009094]
[54.29972076 174.94300842]
[66.04878998 164.84225464]
[79.74980927 157.59219360]
[94.72327423 153.55584717]
[94.09929657 138.56883240]
[93.47531891 123.58181763]
[92.85134125 108.59480286]
[92.07149506 93.61508179]
[91.13587189 78.64429474]
[90.20024109 63.67350388]
[87.25476074 48.96554184]
[82.20600128 34.84073639]
[77.01058960 20.76921844]
[71.81517029 6.69769907]
[66.61975861 -7.37382030]
[58.49821472 -19.98494911]
[47.83658600 -30.53623772]
[37.17496109 -41.08752823]
[26.51333427 -51.63882065]
[10.52242565 -55.27514648]
[5.93527889 -71.01967621]
[17.47075653 -82.67578125]
[33.26214981 -78.25266266]
[37.06462479 -62.30044556]
[47.72624969 -51.74915695]
[58.38787842 -41.19786453]
[69.04950714 -30.64657402]
[65.40608978 -45.19736481]
[65.74703979 -60.19348907]
[70.04800415 -74.56365967]
[78.00173187 -87.28129578]
[89.04001617 -97.43788147]
[102.37431335 -104.30785370]
[117.05204773 -107.40043640]
[132.02467346 -106.49470520]
[146.22259521 -101.65535736]
[158.63151550 -93.22810364]
[168.36499023 -81.81497955]
[174.72767639 -68.23130798]
[177.26502991 -53.44746780]
[175.79580688 -38.51959610]
[170.42494202 -24.51410294]
[161.53613281 -12.43150902]
[149.76437378 -3.13496828]
[135.95060730 2.71139431]
[121.08167267 4.68992758]
[106.21975708 2.65928960]
[92.42657471 -3.23545527]
[80.69127655 -12.56923580]
[85.88668823 1.50228357]
[91.08210754 15.57380295]
[96.27751923 29.64532280]
[101.57898712 34.86453247]
[101.43132019 44.06399155]
[105.43661499 29.60862541]
[114.88753510 17.96044540]
[128.20745850 11.06262779]
[143.17430115 10.06588268]
[157.29127502 15.13648987]
[168.20333862 25.42855835]
[174.09013367 39.22513962]
[173.96960449 54.22465515]
[167.86184692 67.92485046]
[156.78578186 78.04022217]
[142.58914185 82.88330078]
[127.64024353 81.64615631]
[114.43290710 74.53516388]
[105.17103577 62.73787308]
[106.10665894 77.70866394]
[107.04228973 92.67945862]
[110.66840363 99.94136810]
[107.83835602 107.97082520]
[108.46233368 122.95783997]
[109.08631134 137.94485474]
[109.71028900 152.93186951]
[124.10101318 155.45501709]
[137.64170837 160.92591858]
[149.73606873 169.10092163]
[159.85200500 179.61729431]
[167.54513550 192.00939941]
[172.47828674 205.72929382]
[174.43623352 220.17092896]
[173.33514404 234.69691467]
[169.22610474 248.66673279]
[162.29281616 261.46484375]
[152.84332275 272.52798462]
[141.29640198 281.36978149]
[128.16290283 287.60223389]
[114.02326965 290.95269775]
[114.33532715 305.94946289]
[124.24237061 321.43591309]
[115.26953888 336.48544312]
[115.89351654 351.47244263]
[116.51748657 366.45947266]
[117.14146423 381.44647217]
[130.58660889 384.68432617]
[142.71450806 391.30368042]
[152.69247437 400.84243774]
[159.83743286 412.63836670]
[163.66264343 425.87506104]
[163.91085815 439.63830566]
[160.57164001 452.97949219]
[153.88159180 464.98065186]
[144.30761719 474.81796265]
[132.51435852 481.81802368]
[119.31800079 485.50411987]
[119.31800079 500.50411987]
[119.31800079 515.50415039]
[119.31800079 530.50415039]
[119.31800079 545.50415039]
[119.31800079 560.50415039]
[119.31800079 575.50415039]
[119.31800079 590.50415039]
[119.31800079 605.50415039]
[119.31800079 620.50415039]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[19 130]
[20 129]
[21 128]
[22 127]
[25 125]
[26 124]
[39 110]
[40 109]
[41 108]
[42 107]
[43 105]
[44 104]
[45 103]
[46 89]
[47 87]
[48 86]
[49 85]
[50 84]
[51 62]
[52 61]
[53 60]
[54 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
