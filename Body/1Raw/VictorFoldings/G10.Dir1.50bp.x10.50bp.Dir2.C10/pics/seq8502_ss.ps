%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAUAAACCUAGCCAUGGCCAUCCCCUUAUGAGCGGGCACAGUGAUUAUAGGCUUUCGCUCxxxxxxxxxxAGCUUUUUGAUGACUUCUAGCAAGCCUCGCUAACCUCGCCUUACCCCCCACUAUUAACCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[97.38312531 218.99479675]
[96.76730347 204.00744629]
[96.15147400 189.02008057]
[95.53565216 174.03273010]
[94.91983032 159.04537964]
[94.30400085 144.05802917]
[93.68817902 129.07067871]
[93.07234955 114.08332062]
[78.82566071 109.38951874]
[69.42179871 121.07572937]
[60.01794434 132.76193237]
[50.61408615 144.44815063]
[41.21022797 156.13435364]
[43.15959549 171.81796265]
[33.38224030 184.23484802]
[17.67890167 186.01828003]
[5.36608744 176.11019897]
[3.74877310 160.38887024]
[13.78648281 148.18150330]
[29.52402115 146.73049927]
[38.92787933 135.04428101]
[48.33173370 123.35807800]
[57.73559189 111.67186737]
[67.13945007 99.98566437]
[80.33142090 89.10778809]
[93.57223511 89.74162292]
[94.80284882 74.79219055]
[96.03346252 59.84275436]
[82.97932434 51.61044693]
[75.06662750 38.58451462]
[60.16217804 40.27490997]
[45.25773239 41.96530914]
[35.61028671 54.48339081]
[19.92638397 56.43035507]
[7.51099968 46.65110016]
[5.72996426 30.94748878]
[15.63993359 18.63619041]
[31.36149979 17.02128410]
[43.56733322 27.06086159]
[58.47178268 25.37046432]
[73.37622833 23.68006706]
[83.94422913 3.06660962]
[105.44484711 -5.55433941]
[108.50324249 -20.23923683]
[111.56163788 -34.92413330]
[114.46910858 -49.63965607]
[117.22534943 -64.38425446]
[108.36616516 -74.57859039]
[107.03524017 -87.82282257]
[113.49691010 -99.23665619]
[125.18527222 -104.74433136]
[128.24366760 -119.42922211]
[131.30206299 -134.11412048]
[134.36045837 -148.79902649]
[137.41885376 -163.48391724]
[123.49689484 -157.90010071]
[110.34850311 -165.11950684]
[107.58783722 -179.86326599]
[117.23350525 -191.35070801]
[132.23255920 -191.18214417]
[141.61747742 -179.48144531]
[146.16477966 -193.77557373]
[150.71206665 -208.06970215]
[155.25935364 -222.36383057]
[159.80664062 -236.65795898]
[158.75154114 -243.28587341]
[160.91746521 -248.62409973]
[164.84519958 -251.43872070]
[169.97550964 -265.53411865]
[175.10580444 -279.62951660]
[162.28413391 -287.51553345]
[151.31260681 -297.82138062]
[142.64048767 -310.12503052]
[136.62292480 -323.92260742]
[133.50631714 -338.64916992]
[133.41827393 -353.70166016]
[136.36242676 -368.46365356]
[142.21820068 -382.33071899]
[150.74580383 -394.73492432]
[161.59603882 -405.16839600]
[174.32458496 -413.20385742]
[188.41024780 -418.51229858]
[203.27618408 -420.87628174]
[218.31369019 -420.19903564]
[232.90695190 -416.50830078]
[246.45840454 -409.95520020]
[258.41311646 -400.80807495]
[268.28155518 -389.44152832]
[275.65957642 -376.32095337]
[280.24514771 -361.98367310]
[281.85040283 -347.01675415]
[280.40963745 -332.03314209]
[275.98184204 -317.64636230]
[268.74835205 -304.44552612]
[259.00537109 -292.97125244]
[247.15185547 -283.69338989]
[233.67320251 -276.99182129]
[219.12136841 -273.14102173]
[204.09220886 -272.29864502]
[189.20120239 -274.49920654]
[184.07089233 -260.40380859]
[178.94059753 -246.30842590]
[174.10076904 -232.11067200]
[169.55348206 -217.81654358]
[165.00619507 -203.52241516]
[160.45890808 -189.22827148]
[155.91162109 -174.93414307]
[152.10375977 -160.42552185]
[149.04536438 -145.74063110]
[145.98696899 -131.05572510]
[142.92857361 -116.37082672]
[139.87017822 -101.68593597]
[149.67897034 -88.05909729]
[146.56541443 -71.21755981]
[131.96995544 -61.62800980]
[129.21369934 -46.88341522]
[131.08767700 -39.68616486]
[126.24653625 -31.86573982]
[123.18814087 -17.18084145]
[120.12974548 -2.49594402]
[128.06887817 2.55825305]
[134.28279114 9.66191483]
[138.25822449 18.25097084]
[139.66047668 27.63779259]
[138.36151123 37.06623459]
[134.45147705 45.77255249]
[128.23263550 53.04726791]
[120.19608307 58.29296875]
[110.98289490 61.07336807]
[109.75228119 76.02280426]
[108.52166748 90.97223663]
[117.06153870 78.64054108]
[130.22308350 71.44515228]
[145.21363831 70.91282654]
[158.85241699 77.15650940]
[168.24549866 88.85138702]
[171.39979553 103.51598358]
[167.64601135 118.03869629]
[157.78065491 129.33802795]
[143.89700317 135.01641846]
[128.94094849 133.86900330]
[116.08595276 126.13925934]
[108.05970001 113.46749115]
[108.67552948 128.45484924]
[109.29135132 143.44219971]
[109.90718079 158.42955017]
[110.52300262 173.41690063]
[111.13883209 188.40426636]
[111.75465393 203.39161682]
[112.37048340 218.37896729]
[119.06199646 233.95651245]
[105.94562531 244.69882202]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 24]
[10 23]
[11 22]
[12 21]
[13 20]
[26 131]
[27 130]
[28 129]
[30 41]
[31 40]
[32 39]
[43 120]
[44 119]
[45 118]
[46 116]
[47 115]
[51 112]
[52 111]
[53 110]
[54 109]
[55 108]
[61 107]
[62 106]
[63 105]
[64 104]
[65 103]
[68 102]
[69 101]
[70 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
