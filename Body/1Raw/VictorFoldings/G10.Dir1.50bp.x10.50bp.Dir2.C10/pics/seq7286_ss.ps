%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGCCUUCGCUUCGAAGCGAAAAGUCCUAAUAGUAGAAGAACCCUCCAUAAACCUGGAGUGxxxxxxxxxxCUCACCAAGACCUCAACCCCUGACCCCCAUGCCUCAGGAUACUCCUCAAUAGCCAUCGCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[132.50506592 309.50131226]
[131.88108826 294.51431274]
[131.25711060 279.52728271]
[130.63313293 264.54028320]
[130.00915527 249.55325317]
[129.38517761 234.56623840]
[128.76119995 219.57922363]
[128.13722229 204.59220886]
[125.19173431 189.88424683]
[119.99632263 175.81272888]
[114.80090332 161.74121094]
[109.60549164 147.66969299]
[93.79730988 148.23060608]
[78.64545441 143.68807983]
[65.75319672 134.52276611]
[53.67321014 143.41511536]
[41.59321976 152.30746460]
[29.51323318 161.19981384]
[17.43324471 170.09216309]
[5.35325575 178.98451233]
[-0.72399122 194.21601868]
[-16.99010468 196.30062866]
[-26.71190071 183.09387207]
[-19.88843155 168.18171692]
[-3.53909373 166.90452576]
[8.54089451 158.01217651]
[20.62088203 149.11982727]
[32.70087051 140.22747803]
[44.78086090 131.33512878]
[56.86084747 122.44277191]
[51.40208817 101.70510864]
[55.39401245 80.63584900]
[68.06031799 63.33228302]
[60.07040405 50.63735580]
[52.08049011 37.94242477]
[39.38555908 29.95250893]
[24.48365593 28.23981857]
[9.58175373 26.52713013]
[-5.24020529 33.54436111]
[-18.57254982 23.99550819]
[-16.70010567 7.70360804]
[-1.54908431 1.42837322]
[11.29444408 11.62522697]
[26.19634628 13.33791637]
[41.09824753 15.05060673]
[44.89320374 8.58157825]
[31.95514679 0.99167001]
[17.30491829 -2.22870636]
[15.84053326 -17.15705490]
[29.58572578 -23.16285896]
[39.54505539 -11.94638634]
[52.48311234 -4.35647774]
[56.27806473 -10.82550526]
[47.51185608 -22.99734306]
[38.74565125 -35.16917801]
[29.97944260 -47.34101486]
[21.21323586 -59.51285172]
[5.57567120 -61.80241776]
[-3.79564524 -74.52853394]
[-1.34087777 -90.14101410]
[11.48360348 -99.37725830]
[27.06926155 -96.75756836]
[36.16940308 -83.83615112]
[33.38507462 -68.27906036]
[42.15127945 -56.10722351]
[50.91748810 -43.93538666]
[59.68369293 -31.76354980]
[68.44990540 -19.59171295]
[82.94549561 -23.44887161]
[84.50308228 -38.36778259]
[70.98271942 -45.26448059]
[60.86965561 -56.58217621]
[55.53158569 -70.79025269]
[55.69044876 -85.96718597]
[61.32474899 -100.06040955]
[71.67250824 -111.16394043]
[85.33425903 -117.77611542]
[100.46237946 -119.00269318]
[115.01090240 -114.67778778]
[127.01226807 -105.38629913]
[134.84338379 -92.38483429]
[137.44515991 -77.43173981]
[134.46572876 -62.54928589]
[126.30802917 -49.75020599]
[114.07532501 -40.76547623]
[99.42198944 -36.81020355]
[97.86441040 -21.89129066]
[90.36471558 17.07630730]
[64.77542114 29.95250893]
[72.76533508 42.64743805]
[80.75524902 55.34236908]
[90.16084290 52.37799454]
[99.97109985 51.37219238]
[109.78254700 52.36633301]
[119.19165802 55.31952667]
[127.81146240 60.11031723]
[135.28746033 66.54167175]
[141.31216431 74.34908295]
[145.63780212 83.21144867]
[160.34576416 80.26596832]
[175.05372620 77.32048798]
[189.76168823 74.37500000]
[204.46965027 71.42951965]
[209.31161499 56.85382080]
[220.80337524 46.66387558]
[235.85371399 43.60072708]
[250.41415405 48.48834991]
[260.56802368 60.01199722]
[263.58398438 75.07186127]
[258.65075684 89.61692047]
[247.09533691 99.73462677]
[232.02609253 102.70336151]
[217.49656677 97.72455597]
[207.41513062 86.13748169]
[192.70716858 89.08296204]
[177.99920654 92.02845001]
[163.29124451 94.97393036]
[148.58328247 97.91941071]
[147.30857849 111.25003052]
[142.44610596 123.72747803]
[134.36462402 134.40548706]
[123.67700958 142.47427368]
[128.87242126 156.54579163]
[134.06784058 170.61730957]
[139.26325989 184.68882751]
[142.57408142 170.05877686]
[150.86219788 157.55648804]
[163.04826355 148.81007385]
[177.54534912 144.95854187]
[192.46559143 146.50344849]
[205.86596680 153.24360657]
[216.00141907 164.30130005]
[221.55207825 178.23651123]
[221.79508972 193.23454285]
[216.69880676 207.34226990]
[206.92689514 218.72250366]
[193.75190735 225.89326477]
[178.88955688 227.92073059]
[164.27529907 224.54087830]
[151.81227112 216.19383240]
[143.12423706 203.96823120]
[143.74821472 218.95524597]
[144.37219238 233.94226074]
[144.99617004 248.92927551]
[145.62014771 263.91629028]
[146.24412537 278.90332031]
[146.86810303 293.89031982]
[147.49208069 308.87734985]
[154.19206238 324.45123291]
[141.08154297 335.20068359]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 148]
[2 147]
[3 146]
[4 145]
[5 144]
[6 143]
[7 142]
[8 141]
[9 125]
[10 124]
[11 123]
[12 122]
[15 30]
[16 29]
[17 28]
[18 27]
[19 26]
[20 25]
[33 91]
[34 90]
[35 89]
[36 45]
[37 44]
[38 43]
[53 68]
[54 67]
[55 66]
[56 65]
[57 64]
[69 87]
[70 86]
[99 118]
[100 117]
[101 116]
[102 115]
[103 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
