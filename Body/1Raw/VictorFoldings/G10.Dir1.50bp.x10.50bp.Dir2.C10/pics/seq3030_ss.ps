%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCGCUAUUAAAGGUUCGUUUGUUCAACGAUUAAAGUCCUACGUGAUCUGAGUUCAGACCGGAGUAxxxxxxxxxxCUCCCGAAUCAACCCUGACCCCUCUCCUUCAUAAAUUAUUCAGCUUCCUACACUAUUAAAGUUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[126.19364166 403.43936157]
[126.19364166 388.43936157]
[126.19364166 373.43936157]
[126.19364166 358.43936157]
[126.19364166 343.43936157]
[126.19364166 328.43936157]
[126.19364166 313.43936157]
[126.19364166 298.43936157]
[126.19364166 283.43936157]
[126.19364166 268.43936157]
[108.81111145 263.93350220]
[93.33200836 254.80734253]
[80.95756531 241.76139832]
[72.65020752 225.80062866]
[69.05870056 208.15708923]
[70.46749878 190.19480896]
[76.77422333 173.30429077]
[87.49706268 158.79495239]
[101.81158447 147.79356384]
[118.61412048 141.15672302]
[116.84002686 126.26200867]
[115.06592560 111.36729431]
[101.67523193 117.26319885]
[89.44207764 111.77526093]
[75.32987213 116.85912323]
[61.21766663 121.94297791]
[47.10545731 127.02683258]
[32.99325180 132.11068726]
[24.89165306 145.95783997]
[8.99423695 148.11462402]
[-2.50386095 136.92654419]
[-0.78228319 120.97612762]
[12.83832264 112.49917603]
[27.90939331 117.99848175]
[42.02159882 112.91462708]
[56.13380814 107.83077240]
[70.24601746 102.74691010]
[84.35822296 97.66305542]
[88.09267426 88.46281433]
[96.89689636 82.93555450]
[107.73654938 83.62708282]
[116.48924255 90.81837463]
[120.29991913 76.31049347]
[124.11058807 61.80260468]
[114.49314880 61.58829117]
[105.71072388 58.16110229]
[98.77923584 52.05856323]
[94.45159912 44.11865616]
[93.13689423 35.36648178]
[94.86454010 26.88256454]
[99.29628754 19.66950798]
[105.78256989 14.53356743]
[102.25927734 -0.04677595]
[98.73598480 -14.62712002]
[91.62422943 -27.83404541]
[81.39064026 -38.80098343]
[71.15705872 -49.76791763]
[60.92346954 -60.73485565]
[45.08982086 -65.00423431]
[41.13243103 -80.91873169]
[53.12232208 -92.10686493]
[68.72532654 -87.05925751]
[71.89040375 -70.96844482]
[82.12399292 -60.00150681]
[92.35758209 -49.03456879]
[102.59116364 -38.06763458]
[109.54133606 -40.88634109]
[130.39186096 -49.34246063]
[130.09550476 -64.33953094]
[129.79913330 -79.33660126]
[115.37680817 -83.94908905]
[103.23506927 -92.99657440]
[94.69098663 -105.49766541]
[90.67134857 -120.09634399]
[91.61217499 -135.20903015]
[97.41140747 -149.19644165]
[107.44000244 -160.54132080]
[120.61012268 -168.01304626]
[135.49317932 -170.80114746]
[150.47474670 -168.60319519]
[163.92977905 -161.65760803]
[174.39872742 -150.71778870]
[180.74603271 -136.97041321]
[182.28317261 -121.90668488]
[178.84341431 -107.16060638]
[170.79988098 -94.33172607]
[159.02507019 -84.81162262]
[144.79621887 -79.63296509]
[145.09257507 -64.63588715]
[145.38893127 -49.63881683]
[139.24813843 -30.41442871]
[126.67749023 -19.53876495]
[113.31632996 -18.15040970]
[116.83962250 -3.57006669]
[120.36291504 11.01027679]
[130.39881897 12.97977543]
[139.07760620 19.22813988]
[144.59402466 28.93063545]
[145.61018372 40.51436615]
[160.15499878 36.84720612]
[174.69982910 33.18004990]
[189.24465942 29.51288986]
[189.62805176 14.42131710]
[194.06999207 -0.00684035]
[202.24085999 -12.70091629]
[213.53431702 -22.71892738]
[227.11230469 -29.31746864]
[241.96725464 -32.00688553]
[256.99682617 -30.58760452]
[271.08575439 -25.16494751]
[283.18850708 -16.14131165]
[292.40698242 -4.18630934]
[298.05712891 9.81291866]
[299.71966553 24.81753731]
[297.27120972 39.71410370]
[290.89346313 53.39719009]
[281.05969238 64.85142517]
[268.49963379 73.22682953]
[254.14530945 77.90189362]
[239.06193542 78.52968597]
[224.36877441 75.06362915]
[211.15615845 67.76093292]
[200.40455627 57.16349030]
[192.91181946 44.05771637]
[178.36698914 47.72487259]
[163.82215881 51.39203262]
[149.27734375 55.05919266]
[138.61846924 65.61327362]
[134.80780029 80.12116241]
[130.99713135 94.62904358]
[129.96064758 109.59319305]
[131.73474121 124.48790741]
[133.50883484 139.38262939]
[145.72810364 140.53439331]
[157.50759888 143.96286011]
[168.42726135 149.54373169]
[178.09803772 157.07601929]
[186.17579651 166.28924561]
[192.37355042 176.85313416]
[196.47164917 188.38951111]
[198.32559204 200.48576355]
[197.87106323 212.70970154]
[195.12622070 224.62489319]
[190.19099426 235.80628967]
[183.24333191 245.85542297]
[174.53294373 254.41453552]
[164.37219238 261.17941284]
[153.12496948 265.91006470]
[141.19364929 268.43936157]
[141.19364929 283.43936157]
[141.19364929 298.43936157]
[141.19364929 313.43936157]
[141.19364929 328.43936157]
[141.19364929 343.43936157]
[141.19364929 358.43936157]
[141.19364929 373.43936157]
[141.19364929 388.43936157]
[141.19364929 403.43936157]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 158]
[2 157]
[3 156]
[4 155]
[5 154]
[6 153]
[7 152]
[8 151]
[9 150]
[10 149]
[20 133]
[21 132]
[22 131]
[24 38]
[25 37]
[26 36]
[27 35]
[28 34]
[42 130]
[43 129]
[44 128]
[52 95]
[53 94]
[54 93]
[55 66]
[56 65]
[57 64]
[58 63]
[68 90]
[69 89]
[70 88]
[99 127]
[100 126]
[101 125]
[102 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
