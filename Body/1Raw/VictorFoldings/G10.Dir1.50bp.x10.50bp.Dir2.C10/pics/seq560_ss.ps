%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAUUUUCCCCUCCCACUCCCAUACUACUAAUCUCAUCAAUACAACCCCCGCCCAUCCUACCCAxxxxxxxxxxACCGAAACCAAAUAAUUCAAGCACUGCUUAUUACAAUUUUACUGGGUCUCUAUUUUACCCUCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-73.18306732 159.53494263]
[-87.55609894 163.82633972]
[-101.92912292 168.11773682]
[-112.93888855 179.47976685]
[-127.34777069 175.70706177]
[-141.72079468 179.99845886]
[-156.09382629 184.28985596]
[-170.46684265 188.58125305]
[-184.83987427 192.87265015]
[-199.12416077 197.45077515]
[-213.31398010 202.31379700]
[-227.50379944 207.17681885]
[-241.69361877 212.03984070]
[-255.88345337 216.90286255]
[-253.62260437 231.77325439]
[-254.05352783 246.80834961]
[-257.16235352 261.52484131]
[-262.84915161 275.44964600]
[-270.93109131 288.13513184]
[-281.14840698 299.17355347]
[-293.17260742 308.21002197]
[-306.61721802 314.95407104]
[-321.05001831 319.18890381]
[-336.00708008 320.77841187]
[-351.00756836 319.67147827]
[-365.56927490 315.90368652]
[-379.22412109 309.59616089]
[-391.53314209 300.95166016]
[-402.10067749 290.24804688]
[-410.58700562 277.82943726]
[-416.71936035 264.09503174]
[-420.30056763 249.48629761]
[-421.21551514 234.47288513]
[-419.43478394 219.53739929]
[-415.01565552 205.15994263]
[-408.10015869 191.80271912]
[-398.91058350 179.89508057]
[-387.74240112 169.81980896]
[-374.95452881 161.90081787]
[-360.95812988 156.39262390]
[-346.20306396 153.47232056]
[-331.16369629 153.23377991]
[-316.32345581 155.68466187]
[-302.15936279 160.74618530]
[-289.12680054 168.25564575]
[-277.64468384 177.97164917]
[-268.08209229 189.58184814]
[-260.74645996 202.71304321]
[-246.55664062 197.85002136]
[-232.36682129 192.98699951]
[-218.17700195 188.12397766]
[-203.98718262 183.26095581]
[-201.10079956 179.39216614]
[-195.73016357 177.32803345]
[-189.13127136 178.49963379]
[-174.75825500 174.20822144]
[-160.38522339 169.91682434]
[-146.01219177 165.62542725]
[-131.63916016 161.33403015]
[-121.65746307 150.27896118]
[-106.22052002 153.74472046]
[-91.84749603 149.45332336]
[-77.47446442 145.16192627]
[-80.73504639 129.52337646]
[-82.62033081 113.66016388]
[-83.11598206 97.69301605]
[-82.21823120 81.74341583]
[-79.93389893 65.93274689]
[-76.28037262 50.38130188]
[-71.28546143 35.20743179]
[-64.98715973 20.52659416]
[-57.43340302 6.45050192]
[-48.68167114 -6.91373158]
[-38.79855728 -19.46441460]
[-27.85926437 -31.10604095]
[-15.94703865 -41.75002670]
[-3.15252161 -51.31537628]
[10.42692661 -59.72930145]
[24.68797302 -66.92778015]
[39.52210236 -72.85603333]
[54.81643295 -77.46895599]
[70.45458221 -80.73143768]
[86.31755829 -82.61865997]
[102.28465271 -83.11626434]
[118.23435211 -82.22045135]
[134.04530334 -79.93804932]
[149.59719849 -76.28642273]
[164.77168274 -71.29335785]
[179.45327759 -64.99685669]
[193.53028870 -57.44481277]
[206.89559937 -48.69470978]
[219.44747925 -38.81312943]
[231.09043884 -27.87525558]
[241.73588562 -15.96432781]
[251.30279541 -3.17097735]
[259.71838379 10.40744400]
[273.09027100 3.61096191]
[286.46218872 -3.18552017]
[299.83407593 -9.98200226]
[303.80798340 -15.37886620]
[309.12200928 -17.58469772]
[313.87976074 -16.77078629]
[327.51287842 -23.02682114]
[341.14599609 -29.28285789]
[354.77911377 -35.53889084]
[366.65316772 -47.64027023]
[381.56869507 -39.58026123]
[377.95269775 -23.01641655]
[361.03515625 -21.90577126]
[347.40203857 -15.64973450]
[333.76892090 -9.39369965]
[320.13580322 -3.13766360]
[306.63058472 3.38990211]
[293.25866699 10.18638420]
[279.88674927 16.98286629]
[266.51486206 23.77934837]
[271.89331055 36.83771133]
[276.24948120 50.27171326]
[279.55749512 64.00145721]
[281.79760742 77.94528961]
[282.95657349 92.02027893]
[283.02746582 106.14273071]
[282.00985718 120.22865295]
[279.90979004 134.19427490]
[276.73980713 147.95652771]
[272.51870728 161.43357849]
[267.27160645 174.54527283]
[261.02969360 187.21363831]
[253.83015442 199.36332703]
[245.71572876 210.92208862]
[236.73472595 221.82118225]
[226.94053650 231.99577332]
[216.39140320 241.38537598]
[205.15008545 249.93414307]
[193.28341675 257.59121704]
[180.86196899 264.31106567]
[167.95964050 270.05374146]
[154.65312195 274.78506470]
[141.02159119 278.47692871]
[127.14608765 281.10736084]
[113.10914612 282.66070557]
[98.99423981 283.12774658]
[84.88532257 282.50570679]
[70.86628723 280.79827881]
[57.02051544 278.01559448]
[43.43035126 274.17422485]
[30.17661667 269.29702759]
[17.33813095 263.41296387]
[4.99124956 256.55709839]
[-6.79059982 248.77014160]
[-17.93734932 240.09841919]
[-28.38270378 230.59352112]
[-38.06454849 220.31195068]
[-46.92530060 209.31488037]
[-54.91226196 197.66767883]
[-61.97793961 185.43965149]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 63]
[2 62]
[3 61]
[5 59]
[6 58]
[7 57]
[8 56]
[9 55]
[10 52]
[11 51]
[12 50]
[13 49]
[14 48]
[96 116]
[97 115]
[98 114]
[99 113]
[102 112]
[103 111]
[104 110]
[105 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
