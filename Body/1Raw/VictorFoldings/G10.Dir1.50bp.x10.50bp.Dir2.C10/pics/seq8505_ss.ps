%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAACCUAGCCAUGGCCAUCCCCUUAUGAGCGGGCACAGUGAUUAUAGGCUUUCGCUCUAAGxxxxxxxxxxACACAUCAACUGCAACUCCAAAGCCACCCCUCACCCACUAGGAUACCAACAAACCUACCCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[105.33145142 651.26245117]
[105.33145142 636.26245117]
[105.33145142 621.26245117]
[105.33145142 606.26245117]
[105.33145142 591.26245117]
[105.33145142 576.26245117]
[105.33145142 561.26245117]
[105.33145142 546.26245117]
[105.33145142 531.26245117]
[105.33145142 516.26245117]
[89.82841492 512.62457275]
[75.62429047 505.40731812]
[63.53262329 495.01962280]
[54.24699402 482.05206299]
[48.30130005 467.24340820]
[46.03900528 451.43841553]
[47.59334183 435.53976440]
[52.87944412 420.45639038]
[61.59898376 407.05157471]
[73.25699615 396.09353638]
[87.18998718 388.21139526]
[102.60369110 383.85906982]
[101.98786163 368.87170410]
[101.37203979 353.88436890]
[92.66980743 345.42663574]
[92.06900024 332.90423584]
[100.44052124 323.03906250]
[100.13254547 308.04223633]
[99.82456207 293.04537964]
[99.51658630 278.04855347]
[83.99095154 271.51736450]
[72.82250214 258.83563232]
[68.27645111 242.50288391]
[71.30638885 225.76622009]
[81.35476685 211.97477722]
[96.45473480 203.90956116]
[95.53131866 188.93800354]
[94.60790253 173.96646118]
[93.68449402 158.99490356]
[90.11160278 152.47212219]
[92.89902496 143.70707703]
[92.28320312 128.71972656]
[91.66737366 113.73237610]
[82.87553406 101.57904053]
[68.83355713 96.30429840]
[51.87984848 96.39464569]
[47.09978104 80.12850952]
[61.40697479 71.03233337]
[74.10829926 82.26232147]
[88.15027618 87.53706360]
[94.72109222 83.92121124]
[81.88749695 76.15598297]
[82.19568634 61.15915298]
[95.33747864 53.92773438]
[108.17090607 61.69324493]
[107.86272430 76.68951416]
[114.43354034 73.07366180]
[117.49193573 58.38876343]
[120.55033112 43.70386505]
[123.60872650 29.01896667]
[126.66712189 14.33407021]
[129.72550964 -0.35082784]
[115.66954803 -5.67776346]
[102.62001038 -13.13806152]
[90.89825439 -22.54800415]
[80.79295349 -33.67586517]
[72.55294037 -46.24761200]
[66.38114929 -59.95364761]
[62.42955780 -74.45645142]
[60.79548264 -89.39888763]
[61.51915741 -104.41297150]
[64.58276367 -119.12897491]
[69.91085815 -133.18450928]
[77.37223053 -146.23342896]
[86.78314209 -157.95440674]
[97.91184235 -168.05879211]
[110.48426056 -176.29776001]
[124.19081116 -182.46842957]
[138.69393921 -186.41882324]
[153.63650513 -188.05166626]
[168.65054321 -187.32675171]
[183.36628723 -184.26193237]
[197.42137146 -178.93267822]
[210.46968079 -171.47023010]
[222.18988037 -162.05834961]
[232.29335022 -150.92881775]
[240.53128052 -138.35571289]
[246.70082092 -124.64865875]
[250.65000916 -110.14519501]
[252.28163147 -95.20249939]
[251.55548096 -80.18852997]
[248.48944092 -65.47303009]
[243.15902710 -51.41838074]
[235.69549561 -38.37068939]
[226.28265381 -26.65126801]
[215.15228271 -16.54871750]
[202.57850647 -8.31182194]
[188.87094116 -2.14342213]
[174.36715698 1.80457926]
[159.42431641 3.43495893]
[144.41041565 2.70756769]
[141.35202026 17.39246559]
[138.29362488 32.07736206]
[135.23522949 46.76226044]
[132.17683411 61.44715881]
[129.11843872 76.13205719]
[125.61869049 105.38887787]
[106.65473175 113.11654663]
[107.27055359 128.10389709]
[107.88638306 143.09126282]
[108.65604401 158.07150269]
[109.57945251 173.04304504]
[110.50286865 188.01460266]
[111.42628479 202.98614502]
[124.04850769 207.11340332]
[134.47985840 215.27990723]
[141.48190308 226.48831177]
[144.23278809 239.38186646]
[142.42378235 252.40856934]
[136.29362488 264.00799561]
[126.59737396 272.79824829]
[114.51342773 277.74057007]
[114.82140350 292.73742676]
[115.12937927 307.73425293]
[115.43736267 322.73107910]
[125.33986664 338.22207642]
[116.35939026 353.26852417]
[116.97521973 368.25588989]
[117.59104156 383.24325562]
[131.49424744 385.75637817]
[144.55549622 391.12664795]
[156.19502258 399.11276245]
[165.89675903 409.35748291]
[173.23123169 421.40341187]
[177.87461853 434.71353149]
[179.62290955 448.69512939]
[178.40104675 462.72616577]
[174.26597595 476.18295288]
[167.40412903 488.46792603]
[158.12295532 499.03613281]
[146.83711243 507.41937256]
[134.05004883 513.24707031]
[120.33145142 516.26245117]
[120.33145142 531.26245117]
[120.33145142 546.26245117]
[120.33145142 561.26245117]
[120.33145142 576.26245117]
[120.33145142 591.26245117]
[120.33145142 606.26245117]
[120.33145142 621.26245117]
[120.33145142 636.26245117]
[120.33145142 651.26245117]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[22 129]
[23 128]
[24 127]
[27 125]
[28 124]
[29 123]
[30 122]
[36 114]
[37 113]
[38 112]
[39 111]
[41 110]
[42 109]
[43 108]
[44 50]
[45 49]
[57 106]
[58 105]
[59 104]
[60 103]
[61 102]
[62 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
