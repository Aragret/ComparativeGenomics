%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCUCACCACCUCUUGCUCAGCCUAUAUACCGCCAUCUUCAGCAAACCCUGAUGAAGGCUAxxxxxxxxxxAAUACGCAAAACUAACCCCCUAAUAAAAUUAAUUAACCACUCAUUCAUCGACCUCCCCACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[114.60690308 373.29345703]
[114.60690308 358.29345703]
[114.60690308 343.29345703]
[114.60690308 328.29345703]
[114.60690308 313.29345703]
[114.60690308 298.29345703]
[114.60690308 283.29345703]
[114.60690308 268.29345703]
[114.60690308 253.29345703]
[114.60690308 238.29345703]
[99.59133911 234.39746094]
[86.07913208 226.75473022]
[74.98757935 215.87753296]
[67.07133484 202.49789429]
[62.87108612 187.51840210]
[62.67662048 171.95126343]
[66.50682068 156.84997559]
[74.10803986 143.23794556]
[84.97084045 132.03919983]
[98.36418915 124.01561737]
[113.38459015 119.71514893]
[99.70368958 122.46447754]
[87.68998718 117.14133453]
[81.37867737 106.55316162]
[66.39843750 105.78350067]
[51.41819382 105.01383972]
[36.43795395 104.24417877]
[21.45771408 103.47451782]
[5.29565620 112.23913574]
[-9.06711388 102.20143890]
[-24.05999947 101.73951721]
[-29.94905090 115.72821045]
[-40.49654007 126.64218903]
[-54.27600098 133.00543213]
[-69.42388153 133.95735168]
[-83.89155579 129.36921692]
[-95.72238159 119.86154175]
[-103.31633759 106.72014618]
[-105.64641571 91.72230530]
[-102.39748383 76.89635468]
[-94.00892639 64.24737549]
[-81.61523438 55.48604965]
[-66.89255524 51.79726028]
[-51.83200836 53.67989731]
[-38.47040558 60.87934494]
[-28.61479950 72.42193604]
[-23.59807396 86.74662781]
[-8.60518837 87.20855713]
[0.45558223 79.13609314]
[12.98879433 79.43600464]
[22.22737312 88.49427795]
[37.20761490 89.26393890]
[52.18785477 90.03359985]
[67.16809845 90.80326080]
[82.14833832 91.57292175]
[86.60421753 84.58512878]
[93.74100494 79.84592438]
[102.46087646 78.35442352]
[111.30943298 80.58769989]
[118.71829224 86.38204956]
[123.28246307 94.92443848]
[133.83447266 84.26352692]
[144.38648987 73.60261536]
[154.93850708 62.94171143]
[165.49052429 52.28079987]
[176.04254150 41.61989212]
[180.25140381 26.36879349]
[194.70373535 22.76611519]
[185.28060913 11.07489681]
[177.22575378 -1.59788203]
[170.64047241 -15.09284878]
[165.60758972 -29.24028969]
[162.19038391 -43.86228561]
[160.43185425 -58.77495193]
[160.35409546 -73.79074097]
[161.95809937 -88.72081757]
[165.22369385 -103.37741852]
[170.10978699 -117.57622528]
[176.55496216 -131.13867188]
[184.47813416 -143.89418030]
[193.77969360 -155.68235779]
[204.34263611 -166.35494995]
[216.03413391 -175.77774048]
[228.70715332 -183.83221436]
[242.20231628 -190.41708374]
[256.34991455 -195.44953918]
[270.97201538 -198.86630249]
[285.88473511 -200.62438965]
[300.90051270 -200.70169067]
[315.83053589 -199.09724426]
[330.48706055 -195.83122253]
[344.68569946 -190.94470215]
[358.24795532 -184.49913025]
[371.00323486 -176.57556152]
[382.79113770 -167.27366638]
[393.46340942 -156.71040344]
[402.88583374 -145.01861572]
[410.93994141 -132.34535217]
[417.52441406 -118.84999084]
[422.55645752 -104.70225525]
[425.97277832 -90.08004761]
[427.73040771 -75.16728210]
[427.80728149 -60.15148544]
[426.20236206 -45.22150421]
[422.93591309 -30.56509781]
[418.04898071 -16.36658669]
[411.60299683 -2.80453086]
[403.67904663 9.95051193]
[394.37680054 21.73813438]
[383.81320190 32.41009140]
[372.12112427 41.83217621]
[359.44763184 49.88589478]
[345.95208740 56.46996307]
[331.80419922 61.50157547]
[317.18188477 64.91745758]
[302.26907349 66.67465210]
[287.25326538 66.75106049]
[272.32333374 65.14572144]
[257.66702271 61.87882233]
[243.46865845 56.99145126]
[229.90679932 50.54506302]
[217.15199280 42.62073898]
[205.36463928 33.31813049]
[201.91052246 47.80669022]
[186.70344543 52.17190552]
[176.15142822 62.83281708]
[165.59941101 73.49372864]
[155.04739380 84.15463257]
[144.49537659 94.81554413]
[133.94337463 105.47644806]
[128.38143921 119.40716553]
[142.53628540 122.70034790]
[155.47727966 129.29277039]
[166.44877625 138.79438782]
[174.81134033 150.64541626]
[180.07904053 164.14933777]
[181.94770813 178.51380920]
[180.31242371 192.89717102]
[175.27345276 206.45777893]
[167.13012695 218.40319824]
[156.36300659 228.03659058]
[143.60556030 234.79728699]
[129.60690308 238.29345703]
[129.60690308 253.29345703]
[129.60690308 268.29345703]
[129.60690308 283.29345703]
[129.60690308 298.29345703]
[129.60690308 313.29345703]
[129.60690308 328.29345703]
[129.60690308 343.29345703]
[129.60690308 358.29345703]
[129.60690308 373.29345703]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[21 131]
[24 55]
[25 54]
[26 53]
[27 52]
[28 51]
[30 48]
[31 47]
[61 130]
[62 129]
[63 128]
[64 127]
[65 126]
[66 125]
[68 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
