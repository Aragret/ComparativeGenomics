%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAAAAAAGUAAAAGGAACUCGGCAAAUCUUACCCCGCCUGUUUACCAAAAACAUCACCUCUxxxxxxxxxxAGUAUAAAUAGUACCGUUAACUUCCAAUUAACUAGUUUUGACAACAUUCAAAAAAGAGUAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[215.18530273 492.58331299]
[215.18530273 477.58331299]
[215.18530273 462.58331299]
[215.18530273 447.58331299]
[215.18530273 432.58331299]
[215.18530273 417.58331299]
[215.18530273 402.58331299]
[215.18530273 387.58331299]
[215.18530273 372.58331299]
[215.18530273 357.58331299]
[211.82603455 342.96432495]
[205.27816772 329.46893311]
[198.73030090 315.97354126]
[192.18243408 302.47814941]
[178.06901550 297.85787964]
[171.23628235 284.26492310]
[176.17814636 269.49279785]
[169.63027954 255.99742126]
[163.08241272 242.50202942]
[150.56544495 234.42892456]
[151.50251770 218.63549805]
[144.95465088 205.14010620]
[129.92437744 196.13261414]
[131.31990051 177.80003357]
[124.49633026 164.44194031]
[117.67276001 151.08384705]
[110.84918213 137.72573853]
[93.75592041 140.16560364]
[76.66324615 134.96957397]
[62.92731476 122.63146973]
[55.46218109 105.09169769]
[40.48194122 104.32203674]
[25.50169754 103.55237579]
[18.22764969 116.97068024]
[5.84695101 125.89710236]
[-9.18220425 128.55929565]
[-23.87576485 124.42867279]
[-35.31631470 114.32537842]
[-41.23232269 100.25542450]
[-40.44916153 85.01241302]
[-33.12232971 71.62285614]
[-20.70657158 62.74525452]
[-5.66705036 60.14226913]
[9.01012993 64.33071899]
[20.41080284 74.47898865]
[26.27135849 88.57213593]
[41.25159836 89.34179688]
[56.23184204 90.11145782]
[61.93650436 76.23857117]
[50.74820709 66.24747467]
[39.55990982 56.25637817]
[28.37161446 46.26528168]
[17.18331718 36.27418518]
[1.14914775 35.74037552]
[-8.31468010 22.78601456]
[-3.94832683 7.34857559]
[10.89871502 1.27034283]
[24.83706474 9.21401596]
[27.17441368 25.08588982]
[38.36271286 35.07698441]
[49.55100632 45.06808472]
[60.73930359 55.05918121]
[71.92760468 65.05027771]
[78.06434631 63.05049896]
[84.18735504 62.05007935]
[90.14218140 62.00315857]
[89.21877289 47.03160858]
[74.74637604 42.45839310]
[62.90575790 32.96291351]
[55.29825211 19.82935715]
[52.95272064 4.83392763]
[56.18637085 -9.99536514]
[64.56188202 -22.65298271]
[76.94653320 -31.42708397]
[91.66540527 -35.13104248]
[106.72788239 -33.26393509]
[120.09690094 -26.07826424]
[129.96440125 -14.54583836]
[134.99589539 -0.22632185]
[134.51089478 14.94368839]
[128.57501221 28.91257286]
[117.99102020 39.79115677]
[104.19032288 46.10819626]
[105.11373138 61.07974625]
[111.90018463 62.59248734]
[118.31329346 65.27883148]
[127.71714783 53.59262085]
[137.12100220 41.90641022]
[132.14137268 27.30480957]
[135.86863708 12.33446980]
[147.11344910 1.77237499]
[162.28761292 -1.01115024]
[176.54913330 4.87210703]
[185.34718323 17.54482079]
[185.87435913 32.96317673]
[177.96243286 46.20722961]
[164.13607788 53.05084991]
[148.80722046 51.31026840]
[139.40335083 62.99647522]
[129.99949646 74.68268585]
[138.72027588 93.54426575]
[136.59060669 114.21491241]
[124.20728302 130.90216064]
[131.03085327 144.26026917]
[137.85443115 157.61836243]
[144.67800903 170.97647095]
[156.72056580 175.70727539]
[162.11550903 187.02389526]
[158.45004272 198.59223938]
[164.99790955 212.08763123]
[177.98321533 221.12600708]
[176.57778931 235.95416260]
[183.12567139 249.44953918]
[189.67353821 262.94491577]
[204.33515930 268.20556641]
[210.78338623 281.98507690]
[205.67781067 295.93029785]
[212.22567749 309.42568970]
[218.77355957 322.92105103]
[225.32142639 336.41644287]
[226.65777588 321.47610474]
[231.74719238 307.36590576]
[240.25549316 295.01239014]
[251.62396240 285.22680664]
[265.10607910 278.65167236]
[279.81655884 275.71878052]
[294.78942871 276.62072754]
[309.04147339 281.29824829]
[321.63684082 289.44421387]
[331.74844360 300.52374268]
[338.71228027 313.80923462]
[342.07113647 328.42834473]
[341.60437012 343.42108154]
[337.34268188 357.80294800]
[329.56591797 370.62954712]
[318.78469849 381.05862427]
[305.70703125 388.40533447]
[291.19161987 392.18728638]
[276.19165039 392.15609741]
[261.69210815 388.31384277]
[248.64506531 380.91281128]
[237.90731812 370.43902588]
[230.18530273 357.58331299]
[230.18530273 372.58331299]
[230.18530273 387.58331299]
[230.18530273 402.58331299]
[230.18530273 417.58331299]
[230.18530273 432.58331299]
[230.18530273 447.58331299]
[230.18530273 462.58331299]
[230.18530273 477.58331299]
[230.18530273 492.58331299]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 120]
[12 119]
[13 118]
[14 117]
[17 114]
[18 113]
[19 112]
[21 110]
[22 109]
[24 106]
[25 105]
[26 104]
[27 103]
[31 48]
[32 47]
[33 46]
[49 63]
[50 62]
[51 61]
[52 60]
[53 59]
[66 84]
[67 83]
[86 100]
[87 99]
[88 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
