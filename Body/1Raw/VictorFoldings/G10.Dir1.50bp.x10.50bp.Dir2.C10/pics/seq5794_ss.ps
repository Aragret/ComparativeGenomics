%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAAACCCACCCCAUUCCUCCCCACACUCAUCGCCCUUACCACGCUACUCCUACCUAUCUCCCCUxxxxxxxxxxCCUGCACGACAACACAUAAUGACCCACCAAUCACAUGCCUAUCAUAUAGUAAAACCCAGCCCAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[1.95373821 367.24478149]
[-13.37028313 361.11306763]
[-28.31316566 354.10348511]
[-35.42492294 367.31042480]
[-42.53668213 380.51733398]
[-49.64844131 393.72427368]
[-49.37894058 409.54318237]
[-62.22555923 417.08065796]
[-69.33731842 430.28759766]
[-76.44907379 443.49450684]
[-75.42253113 459.86151123]
[-89.23131561 468.70736694]
[-103.67013550 460.93225098]
[-103.88557434 444.53451538]
[-89.65599823 436.38275146]
[-82.54424286 423.17584229]
[-75.43248749 409.96890259]
[-76.21066284 395.09463501]
[-62.85536575 386.61251831]
[-55.74360657 373.40557861]
[-48.63185120 360.19863892]
[-41.52009201 346.99172974]
[-53.53265762 339.70935059]
[-65.17133331 331.84323120]
[-76.40778351 323.41250610]
[-87.21463013 314.43771362]
[-97.56556702 304.94070435]
[-107.43537903 294.94464111]
[-116.80004120 284.47381592]
[-125.63673401 273.55377197]
[-133.92395020 262.21109009]
[-141.64151001 250.47335815]
[-148.77061462 238.36918640]
[-155.29389954 225.92807007]
[-161.19546509 213.18028259]
[-166.46098328 200.15686035]
[-171.07757568 186.88954163]
[-175.03404236 173.41062927]
[-178.32073975 159.75294495]
[-180.92965698 145.94973755]
[-182.85443115 132.03463745]
[-184.09039307 118.04153442]
[-184.63452148 104.00448608]
[-184.48550415 89.95768738]
[-183.64369202 75.93534088]
[-182.11112976 61.97160339]
[-179.89157104 48.10046768]
[-176.99040222 34.35572433]
[-173.41468811 20.77084160]
[-169.17314148 7.37889910]
[-164.27609253 -5.78748798]
[-158.73547363 -18.69625664]
[-152.56477356 -31.31597137]
[-145.77900696 -43.61589813]
[-138.39471436 -55.56608582]
[-130.42987061 -67.13743591]
[-121.90387726 -78.30175781]
[-112.83749390 -89.03187561]
[-103.25279999 -99.30165863]
[-93.17313385 -109.08608246]
[-82.62303925 -118.36134338]
[-71.62821960 -127.10483551]
[-60.21543503 -135.29527283]
[-48.41249466 -142.91270447]
[-36.24813080 -149.93858337]
[-23.75196838 -156.35580444]
[-10.95444012 -162.14874268]
[2.11328912 -167.30326843]
[15.41939640 -171.80686951]
[28.93147659 -175.64852905]
[42.61662674 -178.81893921]
[56.44152069 -181.31034851]
[70.37248993 -183.11668396]
[84.37561035 -184.23358154]
[98.41677856 -184.65829468]
[112.46179962 -184.38978577]
[126.47647858 -183.42872620]
[140.42668152 -181.77745056]
[154.27842712 -179.43997192]
[167.99800110 -176.42199707]
[181.55197144 -172.73086548]
[194.90734863 -168.37556458]
[208.03160095 -163.36669922]
[220.89277649 -157.71647644]
[233.45954895 -151.43865967]
[245.70130920 -144.54852295]
[257.58825684 -137.06283569]
[269.09143066 -128.99986267]
[280.18283081 -120.37921143]
[290.83544922 -111.22187805]
[301.02331543 -101.55017090]
[310.72164917 -91.38764191]
[319.90682983 -80.75904083]
[328.55648804 -69.69023895]
[336.64956665 -58.20820618]
[344.16632080 -46.34089279]
[351.08847046 -34.11720657]
[357.39916992 -21.56691360]
[363.08303833 -8.72057343]
[377.09204102 -14.08225536]
[391.10107422 -19.44393730]
[397.08428955 -30.90960884]
[408.90460205 -35.07085419]
[420.01495361 -30.20322037]
[434.12716675 -35.28707886]
[448.23937988 -40.37093353]
[452.43606567 -55.30972290]
[464.63290405 -64.90225983]
[480.13995361 -65.46002197]
[492.99441528 -56.76853943]
[498.25354004 -42.16986084]
[493.89501953 -27.27747726]
[481.59484863 -17.81781578]
[466.08267212 -17.42830658]
[453.32321167 -26.25872612]
[439.21102905 -21.17486954]
[425.09881592 -16.09101295]
[414.54684448 -2.09717488]
[396.46273804 -5.43492746]
[382.45373535 -0.07324537]
[368.44473267 5.28843689]
[373.48272705 21.00601959]
[377.60131836 36.98917007]
[380.78662109 53.18415833]
[383.02795410 69.53653717]
[384.31777954 85.99132538]
[384.65176392 102.49321747]
[384.02877808 118.98671722]
[382.45092773 135.41639709]
[379.92349243 151.72700500]
[376.45498657 167.86370850]
[372.05709839 183.77226257]
[366.74453735 199.39918518]
[360.53521729 214.69194031]
[353.45004272 229.59912109]
[345.51275635 244.07058716]
[336.75009155 258.05770874]
[327.19149780 271.51345825]
[316.86911011 284.39260864]
[305.81765747 296.65182495]
[294.07424927 308.24993896]
[281.67837524 319.14794922]
[268.67172241 329.30917358]
[255.09800720 338.69952393]
[241.00288391 347.28735352]
[226.43371582 355.04385376]
[211.43948364 361.94290161]
[196.07061768 367.96136475]
[180.37876892 373.07891846]
[164.41668701 377.27844238]
[148.23805237 380.54577637]
[131.89723206 382.86996460]
[115.44919586 384.24316406]
[98.94921112 384.66076660]
[82.45275879 384.12136841]
[66.01529694 382.62677002]
[49.69209671 380.18200684]
[33.53801727 376.79531860]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 22]
[4 21]
[5 20]
[6 19]
[8 17]
[9 16]
[10 15]
[99 121]
[100 120]
[101 119]
[104 117]
[105 116]
[106 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
