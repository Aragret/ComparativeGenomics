%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUAAUAAUAACAAUUGAAUGUCUGCACAGCCACUUUCCACACAGACAUCAUAACAAAAAAxxxxxxxxxxUCUCCGGACAAUGAACCAUAACCAAUACUACCAAUCAAUACUCAUCAUUAAUAAUCAUAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[81.70214844 460.06158447]
[81.70214844 445.06158447]
[81.70214844 430.06158447]
[81.70214844 415.06158447]
[81.70214844 400.06158447]
[81.70214844 385.06158447]
[81.70214844 370.06158447]
[81.70214844 355.06158447]
[81.70214844 340.06158447]
[81.70214844 325.06158447]
[67.15975952 321.51092529]
[53.88180542 314.57867432]
[42.64212799 304.66397095]
[34.09694290 292.33987427]
[28.74654388 278.32025146]
[26.90599251 263.41854858]
[28.68659019 248.50044250]
[33.98914337 234.43359375]
[42.50948334 222.03721619]
[53.75591278 212.03437805]
[67.07758331 205.00975037]
[81.70214844 201.37550354]
[81.70214844 186.37550354]
[81.70214844 171.37550354]
[81.39009857 156.37875366]
[80.76612091 141.39173889]
[80.14214325 126.40472412]
[70.51361084 114.90291595]
[55.87011337 111.65209198]
[41.22661209 108.40126801]
[26.58310890 105.15044403]
[11.93960857 101.89961243]
[-2.70389295 98.64878845]
[-17.34739494 95.39796448]
[-25.23281860 108.32463074]
[-36.88986588 117.98858643]
[-51.05406189 123.34155273]
[-66.18898773 123.80287933]
[-80.65290833 119.32251740]
[-92.87689972 110.38648224]
[-101.53498840 97.96407318]
[-105.68800354 83.40277863]
[-104.88546753 68.28211212]
[-99.21443176 54.24223709]
[-89.29003906 42.80610275]
[-76.18881989 35.21421051]
[-61.33189774 32.29007721]
[-46.33083725 34.35088348]
[-32.81284332 41.17309570]
[-22.24424553 52.01668549]
[-15.77144718 65.70542908]
[-14.09656811 80.75446320]
[0.54693288 84.00528717]
[15.19043446 87.25611115]
[29.83393478 90.50694275]
[44.47743607 93.75776672]
[59.12093735 97.00859070]
[73.76444244 100.25941467]
[85.22196960 82.03759766]
[104.10523987 80.13616943]
[112.35752869 67.61021423]
[100.78524017 58.04310989]
[90.31520081 47.28088379]
[81.07015228 35.44972229]
[73.15850067 22.68833542]
[66.67300415 9.14634418]
[61.68969727 -5.01747894]
[58.26700592 -19.63706970]
[56.44506454 -34.54101944]
[56.24522781 -49.55459213]
[57.66984558 -64.50175476]
[60.70221329 -79.20726776]
[65.30677795 -93.49870300]
[71.42955017 -107.20851135]
[78.99874115 -120.17595673]
[87.92562103 -132.24899292]
[98.10550690 -143.28607178]
[109.41905975 -153.15779114]
[121.73362732 -161.74839783]
[134.90483093 -168.95719910]
[148.77822876 -174.69964600]
[163.19119263 -178.90843201]
[177.97471619 -181.53421021]
[192.95547485 -182.54617310]
[207.95782471 -181.93247986]
[222.80587769 -179.70031738]
[237.32554626 -175.87585449]
[251.34658813 -170.50392151]
[264.70462036 -163.64752197]
[277.24304199 -155.38703918]
[288.81478882 -145.81932068]
[299.28427124 -135.05653381]
[308.52868652 -123.22486877]
[316.43963623 -110.46305847]
[322.92440796 -96.92071533]
[327.90695190 -82.75662231]
[331.32885742 -68.13684845]
[333.14999390 -53.23279953]
[333.34902954 -38.21921921]
[331.92361450 -23.27213287]
[328.89044189 -8.56678677]
[324.28512573 5.72440529]
[318.16159058 19.43388557]
[310.59170532 32.40092087]
[301.66418457 44.47347260]
[291.48370361 55.51000214]
[280.16961670 65.38111115]
[267.85458374 73.97106934]
[254.68299866 81.17915344]
[240.80928040 86.92086029]
[226.39610291 91.12886810]
[211.61244202 93.75384521]
[196.63162231 94.76500702]
[181.62930298 94.15050507]
[166.78137207 91.91754150]
[152.26190186 88.09229279]
[138.24114990 82.71961975]
[124.88349152 75.86250305]
[116.63120270 88.38845825]
[121.91020966 103.97586060]
[113.73950958 119.98514557]
[95.12915802 125.78074646]
[95.75313568 140.76776123]
[96.37711334 155.75477600]
[99.64102936 161.62455750]
[99.43252563 167.38545227]
[96.70214844 171.37550354]
[96.70214844 186.37550354]
[96.70214844 201.37550354]
[111.32671356 205.00975037]
[124.64839172 212.03437805]
[135.89482117 222.03721619]
[144.41516113 234.43359375]
[149.71771240 248.50044250]
[151.49830627 263.41854858]
[149.65776062 278.32025146]
[144.30735779 292.33987427]
[135.76217651 304.66397095]
[124.52249908 314.57867432]
[111.24454498 321.51092529]
[96.70214844 325.06158447]
[96.70214844 340.06158447]
[96.70214844 355.06158447]
[96.70214844 370.06158447]
[96.70214844 385.06158447]
[96.70214844 400.06158447]
[96.70214844 415.06158447]
[96.70214844 430.06158447]
[96.70214844 445.06158447]
[96.70214844 460.06158447]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[22 129]
[23 128]
[24 127]
[25 124]
[26 123]
[27 122]
[28 58]
[29 57]
[30 56]
[31 55]
[32 54]
[33 53]
[34 52]
[60 119]
[61 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
