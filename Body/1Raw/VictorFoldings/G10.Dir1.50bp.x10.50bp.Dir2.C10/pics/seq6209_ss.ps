%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAGAUUUACAGUCCAAUGCUUCACUCAGCCAUUUUACCUCACCCCCACUGAUGUUCGCCGACxxxxxxxxxxUGAGCUAUGAUAUCAAUUGGCUUCCUAGGGUUUAUCGUGUGAGCACACCAUAUAUUUACAGUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[72.79711914 264.58148193]
[72.79711914 249.58149719]
[72.79711914 234.58149719]
[72.79711914 219.58149719]
[72.79711914 204.58149719]
[72.79711914 189.58149719]
[72.79711914 174.58149719]
[72.79711914 159.58149719]
[72.79711914 144.58149719]
[72.79711914 129.58149719]
[72.20111847 110.56932831]
[80.80467224 98.06228638]
[92.52709198 95.26746368]
[85.51486206 82.00742340]
[78.50263977 68.74738312]
[63.66728973 63.99868011]
[56.74478531 50.45122147]
[61.36337280 36.33724976]
[54.35114670 23.07720947]
[46.41668701 10.34754658]
[37.59990692 -1.78770852]
[29.97754288 -6.92976856]
[28.73036194 -14.25944519]
[20.16133881 -26.57089615]
[11.59231567 -38.88234711]
[3.02329278 -51.19379807]
[-5.54573059 -63.50525284]
[-15.31631756 -74.88661957]
[-26.18820953 -85.22113037]
[-37.06010056 -95.55563354]
[-47.93199158 -105.89013672]
[-60.66165543 -113.82459259]
[-74.72793579 -119.03417206]
[-83.92241669 -119.08653259]
[-89.02471924 -124.49450684]
[-102.98252869 -129.98809814]
[-116.94033813 -135.48168945]
[-130.89814758 -140.97526550]
[-140.32182312 -129.15640259]
[-152.81143188 -120.64165497]
[-167.25642395 -116.18816376]
[-182.37236023 -116.19193268]
[-196.81513977 -120.65262604]
[-209.30050659 -129.17359924]
[-218.71827698 -140.99716187]
[-224.23104858 -155.07200623]
[-225.34860229 -170.14656067]
[-221.97157288 -184.88044739]
[-214.40025330 -197.96350098]
[-203.30787659 -208.23242188]
[-189.68077087 -214.77407837]
[-174.73063660 -217.00680542]
[-159.78684998 -214.73205566]
[-146.17817688 -208.15211487]
[-135.11471558 -197.85205078]
[-127.58021545 -184.74775696]
[-124.24462891 -170.00444031]
[-125.40455627 -154.93309021]
[-111.44674683 -149.43949890]
[-97.48893738 -143.94590759]
[-83.53112793 -138.45231628]
[-69.51836395 -133.10044861]
[-55.45207977 -127.89087677]
[-64.83641052 -139.59277344]
[-70.61573029 -153.43472290]
[-72.33858490 -168.33544922]
[-69.87039185 -183.13098145]
[-63.40395737 -196.66558838]
[-53.44440460 -207.88197327]
[-40.76973343 -215.90397644]
[-26.37002373 -220.10498047]
[-11.37011337 -220.15679932]
[3.05827594 -216.05537415]
[15.78806686 -208.12112427]
[25.82486916 -196.97381592]
[32.38465500 -183.48420715]
[34.95500183 -168.70608521]
[33.33513260 -153.79379272]
[27.65158081 -139.91226196]
[18.34831810 -128.14581299]
[6.15207195 -119.41359711]
[-7.98444557 -114.39773560]
[-22.95695686 -113.49004364]
[-37.59748840 -116.76202393]
[-26.72559738 -106.42752075]
[-15.85370541 -96.09301758]
[-4.98181391 -85.75851440]
[-7.09095526 -100.60948944]
[-1.61661494 -114.57486725]
[10.02290249 -124.03645325]
[24.81200600 -126.54292297]
[38.91910172 -121.44490814]
[48.68929672 -110.06319427]
[51.59130478 -95.34659576]
[46.87326431 -81.10791016]
[35.75754166 -71.03613281]
[21.12401962 -67.74067688]
[6.76572084 -72.07427216]
[15.33474445 -59.76282120]
[23.90376663 -47.45137024]
[32.47278976 -35.13991928]
[41.04181290 -22.82846832]
[49.73516083 -10.60448742]
[58.55194092 1.53076768]
[61.24560547 -13.22538853]
[72.68456268 -22.92850113]
[87.68246460 -23.17925072]
[99.43938446 -13.86394978]
[102.62482452 0.79391426]
[95.79452515 14.14857864]
[82.04530334 20.14513969]
[67.61118317 16.06498146]
[74.62341309 29.32501984]
[88.88866425 33.45276260]
[96.18895721 46.80043793]
[91.76267242 61.73515320]
[98.77490234 74.99519348]
[105.78713226 88.25523376]
[117.16850281 98.02581787]
[131.33747864 102.94924927]
[145.50645447 107.87268066]
[159.67543030 112.79610443]
[175.67150879 109.18257904]
[186.59867859 121.41077423]
[181.21601868 136.90138245]
[165.06072998 139.71899414]
[154.75199890 126.96508026]
[140.58302307 122.04164886]
[126.41405487 117.11822510]
[112.24507904 112.19479370]
[106.13308716 116.54147339]
[116.20711517 127.65515137]
[126.28114319 138.76882935]
[136.35517883 149.88252258]
[150.28921509 155.43612671]
[157.17341614 168.76309204]
[153.63836670 183.34057617]
[141.41426086 192.03375244]
[126.48411560 190.58778381]
[116.15540314 179.71038818]
[115.48325348 164.72602844]
[108.29187012 151.56228638]
[101.10048676 138.39855957]
[93.90910339 125.23481750]
[87.79711914 129.58149719]
[87.79711914 144.58149719]
[87.79711914 159.58149719]
[87.79711914 174.58149719]
[87.79711914 189.58149719]
[87.79711914 204.58149719]
[87.79711914 219.58149719]
[87.79711914 234.58149719]
[87.79711914 249.58149719]
[87.79711914 264.58148193]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[13 118]
[14 117]
[15 116]
[18 113]
[19 112]
[20 104]
[21 103]
[23 102]
[24 101]
[25 100]
[26 99]
[27 98]
[28 87]
[29 86]
[30 85]
[31 84]
[32 63]
[33 62]
[35 61]
[36 60]
[37 59]
[38 58]
[119 130]
[120 129]
[121 128]
[122 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
