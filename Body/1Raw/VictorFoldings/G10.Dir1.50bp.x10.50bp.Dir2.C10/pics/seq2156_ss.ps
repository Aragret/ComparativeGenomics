%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACCAGACGAGCUACCUAAGAACAGCUAAAAGAGCACACCCGUCUAUGUAGCAAAAUAGUxxxxxxxxxxCUACGGCGGACUAAUCUUCAACUCCUACAUACUUCCCCCAUUAUUCCUAGAACCAGGCGACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[104.33009338 264.48657227]
[104.33009338 249.48655701]
[104.33009338 234.48655701]
[104.33009338 219.48655701]
[104.33009338 204.48655701]
[104.33009338 189.48655701]
[104.33009338 174.48655701]
[104.33009338 159.48655701]
[104.33009338 144.48655701]
[104.33009338 129.48655701]
[87.70766449 124.12325287]
[78.43251801 111.29551697]
[78.57747650 97.09841156]
[65.33489227 90.05327606]
[32.67786407 106.58490753]
[17.77596092 108.29759216]
[2.87405825 110.01028442]
[-12.02784443 111.72297668]
[-26.92974663 113.43566132]
[-41.46468353 117.14182281]
[-55.36723709 122.77378082]
[-69.26979828 128.40573120]
[-83.17234802 134.03768921]
[-85.21633148 149.25996399]
[-94.61031342 161.41105652]
[-108.82736206 167.22235107]
[-124.04315948 165.13066101]
[-136.16473389 155.69863892]
[-141.93144226 141.46343994]
[-139.79206848 126.25428009]
[-130.32209778 114.16233826]
[-116.06889343 108.44027710]
[-100.86650848 110.62731171]
[-88.80430603 120.13513947]
[-74.90174866 114.50318146]
[-60.99919510 108.87122345]
[-47.09663773 103.23926544]
[-61.74068832 99.99091339]
[-73.86446381 91.15835571]
[-81.44545746 78.21507263]
[-83.21897125 63.32028961]
[-78.88916016 48.95878601]
[-69.17832184 37.52639008]
[-55.70645523 30.93027878]
[-40.72095490 30.27083206]
[-26.72175026 35.65806198]
[-16.04421616 46.19325256]
[-10.46960831 60.11890411]
[-10.92789459 75.11190033]
[-17.34262466 88.67107391]
[-28.64243698 98.53376007]
[-13.74053383 96.82106781]
[1.16136861 95.10838318]
[16.06327057 93.39569092]
[30.96517372 91.68300629]
[35.41134644 85.64300537]
[44.30369949 73.56301880]
[48.74987411 67.52302551]
[45.95755005 52.78522110]
[43.16522217 38.04741287]
[40.37289810 23.30960846]
[25.34983635 21.63659668]
[11.48799706 15.60826111]
[0.01996810 5.76063585]
[-8.03452110 -7.03063536]
[-11.95927048 -21.62816048]
[-11.40529537 -36.73394012]
[-6.42185354 -51.00477219]
[2.54793024 -63.17171097]
[14.70646858 -72.15287781]
[28.97263336 -77.14967346]
[44.07788467 -77.71778870]
[58.67907715 -73.80670166]
[71.47788239 -65.76418304]
[81.33623505 -54.30537796]
[87.37754059 -40.44918442]
[89.06461334 -25.42769432]
[86.24742889 -10.57660294]
[79.17650604 2.78353882]
[68.48056793 13.46475601]
[55.11070633 20.51728439]
[57.90303040 35.25508881]
[60.69535446 49.99289703]
[63.48767853 64.73069763]
[72.38002777 76.81069183]
[85.62261200 83.85582733]
[109.41425323 76.07511902]
[129.67274475 97.21889496]
[144.24545288 93.66413116]
[158.81816101 90.10937500]
[170.39160156 79.32205963]
[184.58993530 83.82278442]
[199.16262817 80.26802826]
[213.73533630 76.71326447]
[228.30804443 73.15850067]
[228.33578491 58.08326721]
[231.97116089 43.45290375]
[239.00279236 30.11800194]
[249.02186584 18.85383415]
[261.44589233 10.31528282]
[275.55258179 4.99877024]
[290.52172852 3.21339083]
[305.48309326 5.06294441]
[319.56683350 10.43990040]
[331.95413208 19.03165054]
[341.92483521 30.33867836]
[348.89920044 43.70361328]
[352.47180176 58.34943008]
[352.43490601 73.42464447]
[348.79067993 88.05280304]
[341.75097656 101.38343811]
[331.72506714 112.64153290]
[319.29586792 121.17254639]
[305.18597412 126.48050690]
[290.21572876 128.25680542]
[275.25546265 126.39818573]
[261.17498779 121.01269531]
[248.79290771 112.41343689]
[238.82907104 101.10036469]
[231.86279297 87.73120880]
[217.29010010 91.28596497]
[202.71739197 94.84072876]
[188.14468384 98.39549255]
[177.61358643 108.92854309]
[162.37292480 104.68207550]
[147.80021667 108.23683929]
[133.22750854 111.79159546]
[147.72050476 115.65852356]
[162.51078796 113.15901947]
[176.96867371 117.15522766]
[188.37576294 126.89578247]
[194.58729553 140.54924011]
[194.43534851 155.54846191]
[187.94851685 169.07330322]
[176.34645081 178.58076477]
[161.81057739 182.28327942]
[147.07397461 179.48468018]
[134.90739441 170.71116638]
[127.59844971 157.61233521]
[126.52147675 142.65029907]
[119.33009338 129.48655701]
[119.33009338 144.48655701]
[119.33009338 159.48655701]
[119.33009338 174.48655701]
[119.33009338 189.48655701]
[119.33009338 204.48655701]
[119.33009338 219.48655701]
[119.33009338 234.48655701]
[119.33009338 249.48655701]
[119.33009338 264.48657227]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[13 86]
[14 85]
[15 55]
[16 54]
[17 53]
[18 52]
[19 51]
[20 37]
[21 36]
[22 35]
[23 34]
[58 84]
[59 83]
[60 82]
[61 81]
[88 127]
[89 126]
[90 125]
[92 123]
[93 122]
[94 121]
[95 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
