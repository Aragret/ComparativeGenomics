%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUACUAGACCAAUGGGACUUAAACCCACAAACACUUAGUUAACAGCUAAGCACCCUAAUCAxxxxxxxxxxUAUUUCGUACAUUACUGCCAGCCACCAUGAAUAUUGUACGGUACCAUAAAUACUUGACCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[132.99794006 304.87994385]
[132.37396240 289.89294434]
[131.74998474 274.90591431]
[131.12600708 259.91891479]
[130.50202942 244.93190002]
[129.87805176 229.94488525]
[129.25407410 214.95785522]
[128.63009644 199.97084045]
[125.68461609 185.26287842]
[120.48920441 171.19136047]
[115.29378510 157.11984253]
[110.09837341 143.04832458]
[104.90295410 128.97680664]
[98.07483673 125.87409973]
[95.88799286 140.71383667]
[94.23049164 155.62197876]
[81.18912506 163.03295898]
[67.53314972 156.82696533]
[64.53936005 142.12876892]
[74.67862701 131.07627869]
[84.41859436 119.66869354]
[77.59046936 116.56599426]
[63.57376099 121.90750885]
[49.55704880 127.24901581]
[35.54033279 132.59053040]
[30.58463478 147.42208862]
[17.22785187 155.55413818]
[1.77664971 153.14698792]
[-8.47338581 141.33721924]
[-8.68250275 125.70103455]
[1.24803889 113.62136841]
[16.62934113 110.80186462]
[30.19882202 118.57381439]
[44.21553421 113.23230743]
[58.23224640 107.89079285]
[72.24896240 102.54927826]
[72.95011139 95.08212280]
[58.01580429 93.67982483]
[43.08152008 92.27726746]
[44.48431778 77.34300995]
[59.41810989 78.74551392]
[74.35241699 80.14781952]
[75.05356598 72.68066406]
[62.27621078 64.82324219]
[49.49885178 56.96581268]
[36.72149658 49.10838699]
[23.94413757 41.25096130]
[11.16678143 33.39353561]
[-4.70950365 35.70072556]
[-16.31300735 24.62199593]
[-14.74251366 8.65599823]
[-1.20277202 0.05047956]
[13.91968727 5.40685797]
[19.02420616 20.61617851]
[31.80156326 28.47360420]
[44.57892227 36.33103180]
[57.35627747 44.18845749]
[70.13363647 52.04588318]
[82.91099548 59.90330887]
[89.41915131 56.17585373]
[81.96424103 43.15954208]
[74.50954437 30.14311028]
[87.52610016 22.68863106]
[94.98054504 35.70463181]
[102.43545532 48.72094345]
[108.94361115 44.99348831]
[108.63155365 29.99673271]
[108.31950378 14.99997902]
[94.26503754 9.13551235]
[83.81566620 -1.94286501]
[78.78179169 -16.31575775]
[80.03557587 -31.49297523]
[87.35978699 -44.84497070]
[99.48545837 -54.05843353]
[114.31175232 -57.53707504]
[129.26991272 -54.67819595]
[141.76837158 -45.97711945]
[149.64166260 -32.94135666]
[151.52571106 -17.82943153]
[147.09408569 -3.25957823]
[137.11459351 8.24388790]
[123.31625366 14.68792343]
[123.62831116 29.68467712]
[123.94036865 44.68143082]
[130.78565979 75.09915924]
[118.54534149 96.28192902]
[132.20158386 90.07652283]
[145.85781860 83.87111664]
[159.51406860 77.66571045]
[173.17030334 71.46030426]
[186.82655334 65.25489807]
[184.18873596 50.40589905]
[185.32742310 35.36747360]
[190.17100525 21.08495140]
[198.41503906 8.45614243]
[209.54127502 -1.72509503]
[222.85032654 -8.81875992]
[237.50555420 -12.37893772]
[252.58573914 -12.18183422]
[267.14291382 -8.23983860]
[280.26202393 -0.80074811]
[291.11837769 9.66780949]
[299.02951050 22.50777245]
[303.49813843 36.91201019]
[304.24340820 51.97505569]
[301.21838379 66.75003815]
[294.61328125 80.30819702]
[284.84329224 91.79723358]
[272.52258301 100.49495697]
[258.42559814 105.85461426]
[243.43850708 107.53929901]
[228.50341797 105.44309235]
[214.55915833 99.69778442]
[202.48228455 90.66452026]
[193.03195190 78.91114044]
[179.37571716 85.11654663]
[165.71946716 91.32195282]
[152.06323242 97.52735901]
[138.40698242 103.73276520]
[124.75074768 109.93817139]
[118.97447205 123.78139496]
[124.16989136 137.85290527]
[129.36531067 151.92442322]
[134.56071472 165.99595642]
[139.75613403 180.06747437]
[143.06697083 165.43742371]
[151.35507202 152.93513489]
[163.54115295 144.18872070]
[178.03823853 140.33717346]
[192.95846558 141.88208008]
[206.35884094 148.62225342]
[216.49430847 159.67993164]
[222.04495239 173.61515808]
[222.28796387 188.61318970]
[217.19168091 202.72091675]
[207.41978455 214.10115051]
[194.24479675 221.27191162]
[179.38244629 223.29936218]
[164.76818848 219.91950989]
[152.30516052 211.57247925]
[143.61711121 199.34686279]
[144.24108887 214.33387756]
[144.86506653 229.32090759]
[145.48904419 244.30792236]
[146.11302185 259.29492188]
[146.73699951 274.28195190]
[147.36097717 289.26895142]
[147.98495483 304.25598145]
[154.68495178 319.82989502]
[141.57441711 330.57931519]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 148]
[2 147]
[3 146]
[4 145]
[5 144]
[6 143]
[7 142]
[8 141]
[9 125]
[10 124]
[11 123]
[12 122]
[13 121]
[22 36]
[23 35]
[24 34]
[25 33]
[43 59]
[44 58]
[45 57]
[46 56]
[47 55]
[48 54]
[66 84]
[67 83]
[68 82]
[86 120]
[87 119]
[88 118]
[89 117]
[90 116]
[91 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
