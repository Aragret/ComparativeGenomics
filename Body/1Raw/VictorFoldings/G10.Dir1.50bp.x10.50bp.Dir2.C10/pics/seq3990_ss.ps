%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCACACUAGCAGAGACCAACCGAACCCCCUUCGACCUUGCCGAAGGGGAGUCCGAACUAGUxxxxxxxxxxAACCGCUAACAUUACUGCAGGCCACCUACUCAUGCACCUAAUUGGAAGCGCCACCCUAGCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 308.50753784]
[92.50000000 293.50753784]
[92.50000000 278.50753784]
[92.50000000 263.50753784]
[92.50000000 248.50752258]
[92.50000000 233.50752258]
[92.50000000 218.50752258]
[92.50000000 203.50752258]
[92.50000000 188.50752258]
[92.50000000 173.50752258]
[70.26412201 167.64158630]
[50.90859985 155.22355652]
[36.30830765 137.45631409]
[27.87749863 116.06086731]
[26.43281937 93.10968781]
[11.71729660 90.20221710]
[-2.99822640 87.29474640]
[-17.71374893 84.38726807]
[-32.42927170 81.47979736]
[-38.23482895 90.89572144]
[-47.62588501 97.62779999]
[-59.36741638 100.32772827]
[-71.72891235 98.21132660]
[-82.73921967 91.23398590]
[-89.18038177 105.92721558]
[-104.72042847 109.91298676]
[-117.43837738 100.13375092]
[-117.57809448 84.09130859]
[-105.03240967 74.09204102]
[-89.42529297 77.80653381]
[-90.04112244 62.81918335]
[-103.97183990 57.25724411]
[-119.65721130 59.32594299]
[-128.60826111 47.42097855]
[-142.53897095 41.85904312]
[-156.52606201 36.44041824]
[-170.56803894 31.16567612]
[-184.61001587 25.89093399]
[-198.65197754 20.61619186]
[-212.69395447 15.34145069]
[-226.73593140 10.06670952]
[-240.77790833 4.79196787]
[-254.81988525 -0.48277351]
[-268.35223389 7.35366964]
[-283.74676514 4.60740709]
[-293.73468018 -7.42486048]
[-293.60000610 -23.06186295]
[-283.40628052 -34.92028809]
[-267.96670532 -37.40094757]
[-254.57138062 -29.33255196]
[-249.54515076 -14.52474976]
[-235.50317383 -9.25000858]
[-221.46119690 -3.97526670]
[-207.41921997 1.29947472]
[-193.37724304 6.57421637]
[-179.33526611 11.84895802]
[-165.29328918 17.12369919]
[-151.25131226 22.39844131]
[-143.83799744 21.80272102]
[-136.97703552 27.92832565]
[-123.04631805 33.49026489]
[-108.35736084 31.02374077]
[-98.40989685 43.32653046]
[-84.47917938 48.88846588]
[-61.14872360 37.36628723]
[-38.32707596 45.86057663]
[-29.52179909 66.76427460]
[-14.80627632 69.67174530]
[-0.09075402 72.57922363]
[14.62476826 75.48669434]
[29.34029198 78.39416504]
[34.21960831 66.34667206]
[41.13452530 55.34059525]
[49.87105942 45.71652222]
[60.15885544 37.77227402]
[71.67955017 31.75368881]
[84.07663727 27.84701538]
[96.96647644 26.17314720]
[109.95019531 26.78388023]
[122.62599182 29.66031647]
[134.60162354 34.71344376]
[145.50648499 41.78689194]
[155.00314331 50.66176987]
[162.79769897 61.06343842]
[168.64895630 72.67002106]
[183.07633972 68.56507111]
[197.50372314 64.46012878]
[211.93110657 60.35518265]
[219.65779114 46.82979965]
[234.34768677 42.87232590]
[247.19445801 50.32189560]
[261.62185669 46.21694946]
[276.00631714 41.96410370]
[290.34637451 37.56380081]
[304.68646240 33.16350174]
[316.87612915 19.39970398]
[333.80581665 23.91969681]
[348.05252075 19.22589684]
[362.29919434 14.53209591]
[376.54589844 9.83829498]
[387.23187256 -1.82878411]
[401.74111938 1.53732646]
[405.50210571 -13.42458057]
[416.77066040 -23.96132278]
[431.95104980 -26.71066666]
[446.19927979 -20.79530525]
[454.96878052 -8.10280991]
[455.46124268 7.31669188]
[447.51950073 20.54289246]
[433.67776489 27.35535812]
[418.35284424 25.58025742]
[406.43493652 15.78401852]
[396.76797485 27.11536598]
[381.23968506 24.08498764]
[366.99301147 28.77878761]
[352.74630737 33.47258759]
[338.49963379 38.16638947]
[332.74621582 48.85099030]
[320.86627197 52.85577393]
[309.08676147 47.50356293]
[294.74667358 51.90386200]
[280.40661621 56.30416489]
[274.90069580 61.30387115]
[265.72677612 60.64433289]
[251.29940796 64.74927521]
[244.29855347 77.84598541]
[229.72561646 82.21450806]
[216.03605652 74.78256989]
[201.60867310 78.88751221]
[187.18127441 82.99245453]
[172.75389099 87.09740448]
[173.83448792 97.15836334]
[173.53036499 107.27261353]
[171.84725952 117.25047302]
[168.81669617 126.90481567]
[164.49552917 136.05458069]
[158.96481323 144.52816772]
[152.32826233 152.16665649]
[144.71032715 158.82681274]
[136.25387573 164.38371277]
[127.11752319 168.73315430]
[117.47260284 171.79354858]
[107.50000000 173.50752258]
[107.50000000 188.50752258]
[107.50000000 203.50752258]
[107.50000000 218.50752258]
[107.50000000 233.50752258]
[107.50000000 248.50752258]
[107.50000000 263.50753784]
[107.50000000 278.50753784]
[107.50000000 293.50753784]
[107.50000000 308.50753784]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[15 71]
[16 70]
[17 69]
[18 68]
[19 67]
[24 30]
[31 64]
[32 63]
[34 61]
[35 60]
[36 58]
[37 57]
[38 56]
[39 55]
[40 54]
[41 53]
[42 52]
[43 51]
[85 131]
[86 130]
[87 129]
[88 128]
[91 125]
[92 124]
[93 122]
[94 121]
[95 120]
[97 117]
[98 116]
[99 115]
[100 114]
[102 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
