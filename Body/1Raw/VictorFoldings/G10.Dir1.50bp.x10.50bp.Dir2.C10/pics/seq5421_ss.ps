%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCUACUACUAUCUCGCACCUGAAACAAGCUAACAUGACUAACACCCUUAAUUCCAUCCAxxxxxxxxxxGCCUAUUGCCAUACUAGUCUUUGCCGCCUGCGAAGCAGCGGUGGGCCUAGCCCUACUAGUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[132.45692444 305.56573486]
[131.83294678 290.57870483]
[131.20896912 275.59170532]
[130.58499146 260.60467529]
[129.96101379 245.61766052]
[129.33703613 230.63064575]
[128.71305847 215.64363098]
[128.08908081 200.65661621]
[125.45021820 185.89056396]
[120.84465027 171.61509705]
[116.23908997 157.33964539]
[111.63352203 143.06417847]
[107.02796173 128.78871155]
[79.90223694 116.46334076]
[79.77785492 90.53899384]
[69.11622620 79.98770142]
[58.45460129 69.43641663]
[47.79297638 58.88512421]
[36.41198349 68.66874695]
[24.28063202 77.50484467]
[11.47760677 85.33612061]
[-1.91406310 92.11177826]
[-15.80752468 97.78787231]
[-30.11267281 102.32759094]
[-44.73672867 105.70149994]
[-59.58485413 107.88771057]
[-74.56075287 108.87203979]
[-89.56728363 108.64811707]
[-104.50714111 107.21738434]
[-119.28343201 104.58912659]
[-133.80030823 100.78038025]
[-147.96363831 95.81586456]
[-161.68154907 89.72775269]
[-174.86509705 82.55554962]
[-187.42875671 74.34575653]
[-199.29106140 65.15162659]
[-210.37507629 55.03278351]
[-220.60891724 44.05485916]
[-229.92620850 32.28903961]
[-238.26652527 19.81164169]
[-245.57575989 6.70358229]
[-251.80654907 -6.95012474]
[-256.91845703 -21.06093025]
[-260.87829590 -35.53731537]
[-263.66046143 -50.28540039]
[-265.24685669 -65.20953369]
[-265.62719727 -80.21292114]
[-264.79904175 -95.19825745]
[-262.76773071 -110.06836700]
[-259.54644775 -124.72680664]
[-255.15611267 -139.07849121]
[-249.62515259 -153.03038025]
[-242.98947144 -166.49194336]
[-235.29208374 -179.37591553]
[-226.58293152 -191.59872437]
[-216.91847229 -203.08108521]
[-206.36140442 -213.74855042]
[-194.98019409 -223.53192139]
[-182.84864807 -232.36775208]
[-170.04545593 -240.19874573]
[-156.65364075 -246.97410583]
[-142.76005554 -252.64988708]
[-128.45480347 -257.18930054]
[-113.83067322 -260.56286621]
[-98.98249817 -262.74874878]
[-84.00658417 -263.73275757]
[-69.00004578 -263.50851440]
[-54.06022263 -262.07745361]
[-39.28399658 -259.44885254]
[-24.76720047 -255.63980103]
[-10.60398388 -250.67497253]
[3.11380029 -244.58656311]
[16.29718399 -237.41406250]
[28.86066818 -229.20399475]
[40.72277069 -220.00959778]
[51.80656052 -209.89051819]
[62.04015732 -198.91236877]
[71.35718536 -187.14634705]
[79.69722748 -174.66876221]
[87.00618744 -161.56053162]
[93.23666382 -147.90669250]
[98.34825134 -133.79577637]
[102.30779266 -119.31929779]
[105.08962250 -104.57115936]
[106.67568970 -89.64698792]
[107.05570221 -74.64359283]
[106.22721100 -59.65827179]
[104.19557190 -44.78820801]
[100.97397614 -30.12984467]
[96.58331299 -15.77824688]
[91.05204773 -1.82649207]
[84.41606140 11.63493633]
[76.71839905 24.51873398]
[68.00897217 36.74134445]
[58.34426880 48.22349548]
[69.00588989 58.77478790]
[79.66751862 69.32608032]
[90.32914734 79.87736511]
[98.45457458 76.26270294]
[107.89405060 76.01654816]
[117.22735596 79.58707428]
[124.89931488 86.81995392]
[129.47448730 96.92808533]
[144.46719360 96.46004486]
[159.45988464 95.99200439]
[174.45257568 95.52396393]
[189.44528198 95.05591583]
[197.98910522 91.64199829]
[204.75404358 94.73737335]
[219.75321960 94.58133698]
[234.75241089 94.42530060]
[250.52778625 88.21452332]
[260.86291504 101.65407562]
[250.80961609 115.30573273]
[234.90844727 109.42448425]
[219.90925598 109.58052063]
[204.91007996 109.73655701]
[189.91331482 110.04861450]
[174.92062378 110.51665497]
[159.92793274 110.98470306]
[144.93522644 111.45274353]
[129.94253540 111.92078400]
[121.30342102 124.18315125]
[125.90898132 138.45861816]
[130.51454163 152.73406982]
[135.12011719 167.00953674]
[139.72567749 181.28498840]
[144.03083801 166.91607666]
[153.72204590 155.46704102]
[167.18257141 148.84782410]
[182.16691589 148.16265869]
[196.17533875 153.52584839]
[206.87094116 164.04270935]
[212.46943665 177.95877075]
[212.03688049 192.95252991]
[205.64543152 206.52268982]
[194.36132812 216.40545654]
[180.06700134 220.95214844]
[165.14707947 219.40426636]
[152.09053040 212.02005005]
[143.07609558 200.03263855]
[143.70007324 215.01965332]
[144.32405090 230.00666809]
[144.94802856 244.99368286]
[145.57200623 259.98071289]
[146.19598389 274.96771240]
[146.81996155 289.95474243]
[147.44393921 304.94174194]
[154.14393616 320.51565552]
[141.03340149 331.26510620]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 148]
[2 147]
[3 146]
[4 145]
[5 144]
[6 143]
[7 142]
[8 141]
[9 127]
[10 126]
[11 125]
[12 124]
[13 123]
[15 98]
[16 97]
[17 96]
[18 95]
[103 122]
[104 121]
[105 120]
[106 119]
[107 118]
[109 117]
[110 116]
[111 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
