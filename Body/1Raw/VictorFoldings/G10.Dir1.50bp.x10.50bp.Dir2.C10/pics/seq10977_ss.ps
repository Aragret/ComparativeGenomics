%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUCCUGCACAUCUGUACCCACGCCUUCUUCAAAGCCAUACUAUUUAUGUGCUCCGGGUCCAUxxxxxxxxxxUCAUCCGCUACCUUCACGCCAAUGGCGCCUCAAUAUUCUUUAUCUGCCUCUUCCUACACAUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-13.11383247 265.15359497]
[-22.17493820 258.56777954]
[-30.85346413 251.48538208]
[-41.07725906 262.46145630]
[-44.82159805 277.83319092]
[-59.15800858 281.87258911]
[-62.90234756 297.24432373]
[-77.23875427 301.28369141]
[-87.46255493 312.25976562]
[-97.68634796 323.23583984]
[-107.91014862 334.21188354]
[-108.74790192 338.60937500]
[-110.76641083 342.13116455]
[-113.53382874 344.50897217]
[-116.57527924 345.64682007]
[-119.43437958 345.61993408]
[-130.51348877 355.73196411]
[-141.59259033 365.84399414]
[-146.03630066 381.62960815]
[-161.99346924 385.41128540]
[-173.04872131 373.29876709]
[-167.82937622 357.75238037]
[-151.70463562 354.76489258]
[-140.62553406 344.65286255]
[-129.54641724 334.54083252]
[-118.88621521 323.98809814]
[-108.66241455 313.01202393]
[-98.43861389 302.03598022]
[-88.21482086 291.05990601]
[-85.20175934 276.47323608]
[-70.13407135 271.64877319]
[-67.12100983 257.06210327]
[-52.05332565 252.23765564]
[-41.82952499 241.26159668]
[-60.72978973 219.31632996]
[-76.26541901 194.87335205]
[-88.11119843 168.44435120]
[-96.01914978 140.58258057]
[-99.82373047 111.87125397]
[-99.44531250 82.91143799]
[-94.89179993 54.30933380]
[-86.25852966 26.66370010]
[-73.72621155 0.55325156]
[-86.45587158 -7.38120842]
[-99.18553925 -15.31566906]
[-111.99495697 -23.12071991]
[-124.88281250 -30.79555893]
[-137.77066040 -38.47039795]
[-150.65852356 -46.14523697]
[-166.50038147 -43.61239624]
[-178.26033020 -54.52491379]
[-176.91716003 -70.51164246]
[-163.50122070 -79.30892944]
[-148.30407715 -74.16825104]
[-142.98368835 -59.03309250]
[-130.09582520 -51.35825348]
[-117.20796967 -43.68341446]
[-104.32011414 -36.00857544]
[-96.92047119 -35.28405762]
[-91.25107574 -28.04533195]
[-78.52141571 -20.11087227]
[-65.79174805 -12.17641258]
[-59.44747162 -21.02460670]
[-52.63150024 -29.51477242]
[-45.36399841 -37.62179565]
[-37.66646957 -45.32169342]
[-29.56167984 -52.59168625]
[-21.07360840 -59.41026688]
[-12.22736549 -65.75726318]
[-3.04911971 -71.61389923]
[6.43397617 -76.96285248]
[16.19386864 -81.78829193]
[26.20168304 -86.07595062]
[36.42781830 -89.81314087]
[46.84201431 -92.98880768]
[57.41347122 -95.59355927]
[68.11090851 -97.61968231]
[78.90268707 -99.06118011]
[89.75687408 -99.91380310]
[100.64137268 -100.17502594]
[111.52396393 -99.84406281]
[122.37246704 -98.92190552]
[133.15478516 -97.41127777]
[143.83901978 -95.31664276]
[154.39356995 -92.64421082]
[164.78720093 -89.40187073]
[174.98918152 -85.59922791]
[184.96931458 -81.24752808]
[194.69808960 -76.35964203]
[204.14671326 -70.95003510]
[213.28723145 -65.03470612]
[222.09262085 -58.63114929]
[230.53683472 -51.75831985]
[238.59486389 -44.43653870]
[246.24290466 -36.68747711]
[253.45829773 -28.53404808]
[260.21972656 -20.00037956]
[266.50717163 -11.11171246]
[272.30203247 -1.89434445]
[285.49032593 -9.04059029]
[298.67864990 -16.18683624]
[311.86694336 -23.33308411]
[322.91244507 -36.19516754]
[338.32955933 -29.14190674]
[335.81982422 -12.37474823]
[319.01318359 -10.14478683]
[305.82489014 -2.99854040]
[292.63659668 4.14770555]
[279.44830322 11.29395199]
[284.12927246 21.47064972]
[288.23370361 31.89325523]
[291.74865723 42.52913284]
[294.66320801 53.34497070]
[296.96817017 64.30690765]
[298.65634155 75.38061523]
[299.72244263 86.53141022]
[300.16311646 97.72438812]
[299.97702026 108.92448425]
[299.16470337 120.09664154]
[297.72872925 131.20587158]
[295.67355347 142.21737671]
[293.00567627 153.09667969]
[289.73342896 163.80970764]
[285.86703491 174.32293701]
[281.41860962 184.60342407]
[276.40209961 194.61898804]
[270.83319092 204.33825684]
[264.72933960 213.73080444]
[258.10964966 222.76721191]
[250.99487305 231.41918945]
[243.40725708 239.65962219]
[235.37055969 247.46273804]
[226.90998840 254.80409241]
[218.05198669 261.66067505]
[208.82434082 268.01104736]
[199.25590515 273.83532715]
[189.37666321 279.11523438]
[179.21754456 283.83425903]
[168.81036377 287.97763062]
[158.18771362 291.53234863]
[147.38284302 294.48730469]
[136.42961121 296.83325195]
[125.36229706 298.56283569]
[114.21556091 299.67065430]
[103.02431488 300.15319824]
[91.82359314 300.00900269]
[80.64848328 299.23846436]
[69.53396606 297.84405518]
[58.51484680 295.83010864]
[47.62563705 293.20294189]
[36.90043640 289.97076416]
[26.37282372 286.14373779]
[16.07576752 281.73379517]
[6.04151154 276.75479126]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 34]
[4 33]
[6 31]
[8 29]
[9 28]
[10 27]
[11 26]
[16 25]
[17 24]
[18 23]
[43 62]
[44 61]
[45 60]
[46 58]
[47 57]
[48 56]
[49 55]
[99 109]
[100 108]
[101 107]
[102 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
