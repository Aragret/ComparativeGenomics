%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACCACCCAACUAUCUAUAAACCUAGCCAUGGCCAUCCCCUUAUGAGCGGGCACAGUGAUxxxxxxxxxxAAAAUUUUGGUGCAACUCCAAAUAAAAGUAAUAACCAUGCACACUACUAUAACCACCCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 298.60189819]
[92.50000000 283.60189819]
[92.50000000 268.60189819]
[92.50000000 253.60189819]
[92.50000000 238.60189819]
[92.50000000 223.60189819]
[92.50000000 208.60189819]
[92.50000000 193.60189819]
[92.50000000 178.60189819]
[92.50000000 163.60189819]
[73.85346222 158.46205139]
[57.59186935 147.98960876]
[45.19850540 133.13983154]
[31.54226494 139.34524536]
[17.88602448 145.55064392]
[20.66508484 160.36753845]
[19.81677628 175.41891479]
[15.39041615 189.82969666]
[7.64334869 202.76206970]
[-2.97402334 213.46417236]
[-15.84441853 221.31378174]
[-30.21957016 225.85453796]
[-45.26372528 226.82244873]
[-60.10223389 224.16123962]
[-73.87241364 218.02561951]
[-85.77366638 208.77232361]
[-95.11408997 196.93933105]
[-101.35063171 183.21456909]
[-104.12071228 168.39599609]
[-103.26327515 153.34513855]
[-98.82817841 138.93704224]
[-91.07327271 126.00936127]
[-80.44941711 115.31370544]
[-67.57426453 107.47190094]
[-53.19636154 102.93985748]
[-38.15162277 101.98107147]
[-23.31472778 104.65127563]
[-9.54827499 110.79523468]
[2.34737229 120.05574036]
[11.68061733 131.89440918]
[25.33685875 125.68900299]
[38.99309921 119.48359680]
[36.54482269 108.65406799]
[36.00374603 97.56444550]
[37.38613129 86.54801941]
[40.65042877 75.93589783]
[45.69852829 66.04705048]
[33.99890518 56.65989304]
[22.29928207 47.27272797]
[10.50264168 38.00778198]
[-1.38973808 28.86604691]
[-17.70896530 27.24900246]
[-24.22073174 12.19812298]
[-14.22628880 -0.80353582]
[1.99293697 1.61901665]
[7.75199604 16.97366714]
[19.64437675 26.11540031]
[26.91122437 27.70868301]
[31.68644333 35.57310486]
[43.38606644 44.96026611]
[55.08568954 54.34743118]
[74.50559235 41.25063705]
[97.33592224 36.01285172]
[120.52263641 39.33473969]
[140.96400452 50.77192688]
[151.84281921 40.44472122]
[162.72164917 30.11751747]
[173.60047913 19.79031181]
[158.94512939 22.98734283]
[143.95843506 22.35591125]
[129.62394714 17.93745613]
[116.88248444 10.02196598]
[106.57025909 -0.87105948]
[99.36407471 -14.02670193]
[95.73688507 -28.58154678]
[95.92673492 -43.58034515]
[99.92118073 -58.03871536]
[107.45804596 -71.00773621]
[118.04268646 -81.63625336]
[130.98043823 -89.22669983]
[145.42214966 -93.28090668]
[160.42004395 -93.53279114]
[174.98976135 -89.96582794]
[188.17509460 -82.81412506]
[199.11068726 -72.54704285]
[207.07881165 -59.83842087]
[211.55650330 -45.52233887]
[212.24992371 -30.53837585]
[209.11354065 -15.86993790]
[202.35317993 -2.47972798]
[192.40892029 8.75663185]
[206.73152161 4.29981613]
[221.05410767 -0.15699975]
[235.37670898 -4.61381531]
[249.27926636 -10.24577236]
[262.66555786 -17.01388741]
[276.05184937 -23.78200150]
[277.53695679 -39.13771439]
[287.10620117 -51.23868179]
[301.70602417 -56.22352600]
[316.67767334 -52.50160217]
[327.24380493 -41.26056671]
[330.03274536 -26.08738708]
[324.15457153 -11.82377338]
[311.48498535 -3.02119184]
[296.06683350 -2.48851442]
[282.81994629 -10.39571667]
[269.43365479 -3.62760210]
[256.04739380 3.14051270]
[270.43707275 7.37571812]
[279.71582031 19.16150856]
[280.45532227 34.14326859]
[272.38232422 46.78553772]
[258.47967529 52.41724777]
[243.88409424 48.95759201]
[233.98837280 37.68484879]
[232.44879150 22.76407051]
[239.83352661 9.70878220]
[225.51092529 14.16559792]
[211.18833923 18.62241364]
[196.86573792 23.07922935]
[183.92767334 30.66913795]
[173.04885864 40.99634171]
[162.17002869 51.32354736]
[151.29119873 61.65075302]
[155.86000061 68.67729187]
[159.47209167 76.24030304]
[162.06558228 84.21025085]
[163.59606934 92.45063019]
[164.03732300 100.82031250]
[163.38182068 109.17594147]
[161.64074707 117.37442017]
[158.84394836 125.27531433]
[155.03932190 132.74331665]
[150.29203796 139.65052795]
[144.68338013 145.87861633]
[138.30941772 151.32095337]
[131.27934265 155.88430786]
[123.71352386 159.49050903]
[115.74156952 162.07781982]
[107.50000000 163.60189819]
[107.50000000 178.60189819]
[107.50000000 193.60189819]
[107.50000000 208.60189819]
[107.50000000 223.60189819]
[107.50000000 238.60189819]
[107.50000000 253.60189819]
[107.50000000 268.60189819]
[107.50000000 283.60189819]
[107.50000000 298.60189819]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[13 42]
[14 41]
[15 40]
[47 61]
[48 60]
[49 59]
[50 57]
[51 56]
[65 125]
[66 124]
[67 123]
[68 122]
[91 121]
[92 120]
[93 119]
[94 118]
[95 109]
[96 108]
[97 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
