%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUCCUAGAACCAGGCGACCUGCGACUCCUUGACGUUGACAAUCGAGUAGUACUCCCGAUUxxxxxxxxxxUCCAAACAACAAUCCCCCUCUACCUAAAACUCACAGCCCUCGCUGUCACUUUCCUAGGACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[93.60746002 279.24136353]
[93.60746002 264.24136353]
[93.60746002 249.24134827]
[93.60746002 234.24134827]
[93.60746002 219.24134827]
[93.60746002 204.24134827]
[93.60746002 189.24134827]
[93.60746002 174.24134827]
[93.60746002 159.24134827]
[93.60746002 144.24134827]
[79.33200073 139.63578796]
[70.56579590 151.80761719]
[61.79958725 163.97946167]
[57.44931793 180.36578369]
[40.49910736 180.72171021]
[35.46480560 164.53244019]
[49.62775040 155.21325684]
[58.39395905 143.04141235]
[67.16016388 130.86958313]
[67.02230835 130.81455994]
[66.88449097 130.75900269]
[53.64190292 137.80413818]
[40.39931488 144.84927368]
[27.15673065 151.89440918]
[16.01314545 164.67160034]
[0.65043133 157.50059509]
[3.28837276 140.75312805]
[20.11159515 138.65182495]
[33.35417938 131.60668945]
[46.59676743 124.56155396]
[59.83935165 117.51641846]
[56.28459167 102.94371796]
[41.28540039 102.78767395]
[27.40548897 110.38100433]
[14.75939369 102.51172638]
[2.33787870 112.66483307]
[-13.31382561 109.14294434]
[-20.18907166 94.64775085]
[-13.01375961 80.29872894]
[2.70782614 77.10321808]
[14.91543007 87.51254272]
[27.72249985 79.90805054]
[41.44144058 87.78849030]
[56.44062805 87.94452667]
[79.45610046 62.99042130]
[111.18195343 62.15586090]
[118.08895111 48.84070206]
[124.99594879 35.52554703]
[131.90295410 22.21039200]
[138.80995178 8.89523697]
[135.66290283 -3.65665340]
[141.74082947 -14.62377071]
[153.28840637 -18.36018562]
[160.47091675 -31.52876854]
[167.65342712 -44.69734955]
[174.83593750 -57.86593246]
[162.42434692 -66.31099701]
[150.90028381 -75.93196106]
[140.37475586 -86.63616180]
[130.94911194 -98.32051849]
[122.71414948 -110.87248993]
[115.74915314 -124.17120361]
[110.12122345 -138.08857727]
[105.88455200 -152.49057007]
[103.07994080 -167.23847961]
[101.73439789 -182.19027710]
[101.86088562 -197.20196533]
[103.45819092 -212.12896729]
[106.51091766 -226.82752991]
[110.98967743 -241.15608215]
[116.85133362 -254.97663879]
[124.03942871 -268.15609741]
[132.48474121 -280.56753540]
[142.10594177 -292.09140015]
[152.81034851 -302.61669922]
[164.49488831 -312.04211426]
[177.04702759 -320.27682495]
[190.34588623 -327.24154663]
[204.26336670 -332.86920166]
[218.66543579 -337.10559082]
[233.41340637 -339.90991211]
[248.36523438 -341.25515747]
[263.37692261 -341.12835693]
[278.30389404 -339.53076172]
[293.00238037 -336.47772217]
[307.33087158 -331.99868774]
[321.15130615 -326.13674927]
[334.33059692 -318.94839478]
[346.74185181 -310.50283813]
[358.26553345 -300.88140869]
[368.79064941 -290.17678833]
[378.21582031 -278.49206543]
[386.45028687 -265.93975830]
[393.41473389 -252.64076233]
[399.04211426 -238.72317505]
[403.27819824 -224.32099915]
[406.08224487 -209.57298279]
[407.42718506 -194.62112427]
[407.30007935 -179.60945129]
[405.70217896 -164.68251038]
[402.64886475 -149.98406982]
[398.16952515 -135.65568542]
[392.30734253 -121.83537292]
[385.11871338 -108.65620422]
[376.67288208 -96.24511719]
[367.05123901 -84.72163391]
[356.34640503 -74.19674683]
[344.66149902 -64.77180481]
[332.10900879 -56.53759003]
[318.80987549 -49.57339859]
[304.89218140 -43.94630051]
[290.48992920 -39.71049118]
[275.74185181 -36.90676498]
[260.78997803 -35.56211853]
[245.77828979 -35.68951035]
[230.85137939 -37.28770828]
[216.15301514 -40.34132004]
[201.82472229 -44.82094193]
[188.00451660 -50.68342590]
[180.82200623 -37.51484299]
[173.63949585 -24.34626007]
[166.45698547 -11.17767715]
[167.85581970 6.28780985]
[152.12510681 15.80223560]
[145.21810913 29.11739159]
[138.31111145 42.43254852]
[131.40409851 55.74770355]
[124.49710846 69.06285858]
[129.84158325 73.52481842]
[134.37066650 78.91146851]
[137.92422485 85.07329559]
[140.36968994 91.83306122]
[141.60676575 98.99089050]
[141.57128906 106.33019257]
[140.23803711 113.62416840]
[137.62229919 120.64286041]
[133.78015137 127.16037750]
[128.80752563 132.96214294]
[122.83793640 137.85192871]
[116.03893280 141.65849304]
[108.60746002 144.24134827]
[108.60746002 159.24134827]
[108.60746002 174.24134827]
[108.60746002 189.24134827]
[108.60746002 204.24134827]
[108.60746002 219.24134827]
[108.60746002 234.24134827]
[108.60746002 249.24134827]
[108.60746002 264.24136353]
[108.60746002 279.24136353]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 19]
[12 18]
[13 17]
[21 31]
[22 30]
[23 29]
[24 28]
[32 44]
[33 43]
[35 41]
[46 128]
[47 127]
[48 126]
[49 125]
[50 124]
[53 122]
[54 121]
[55 120]
[56 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
