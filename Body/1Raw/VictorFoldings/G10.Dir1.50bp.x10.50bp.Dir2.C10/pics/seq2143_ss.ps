%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAGCUAAGACCCCCGAAACCAGACGAGCUACCUAAGAACAGCUAAAAGAGCACACCCGUCxxxxxxxxxxAAAUUUCGGUUGGGGCGACCUCGGAGCAGAACCCAACCUCCGAGCAGUACAUGCUAAGACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[103.11352539 268.75387573]
[103.11352539 253.75386047]
[103.11352539 238.75386047]
[103.11352539 223.75386047]
[103.11352539 208.75386047]
[103.11352539 193.75386047]
[103.11352539 178.75386047]
[103.11352539 163.75386047]
[103.11352539 148.75386047]
[103.11352539 133.75386047]
[94.13017273 132.37673950]
[86.09985352 128.72550964]
[79.56556702 123.20420837]
[74.92578125 116.33669281]
[72.41113281 108.71961975]
[72.07551575 100.97187042]
[73.80165100 93.68476868]
[77.32003021 87.37701416]
[62.15948486 82.85280609]
[58.85726166 68.32888031]
[48.41744614 57.55807114]
[37.97763443 46.78726196]
[27.31600952 36.23596954]
[16.43718338 25.90876579]
[5.55835819 15.58156109]
[-5.32046700 5.25435591]
[-16.19929314 -5.07284927]
[-27.07811737 -15.40005398]
[-49.44365311 -8.79935169]
[-71.27813721 -16.64678764]
[-84.19341278 -35.78028107]
[-83.31501007 -58.73064041]
[-96.09236145 -66.58806610]
[-108.86972046 -74.44548798]
[-121.64707947 -82.30291748]
[-135.36712646 -88.36592865]
[-149.77934265 -92.52381897]
[-164.19155884 -96.68170166]
[-178.60377502 -100.83959198]
[-189.61349487 -90.13063812]
[-204.50660706 -86.37683105]
[-219.27691650 -90.58792114]
[-229.95130920 -101.63115692]
[-233.65841675 -116.53594971]
[-229.40104675 -131.29299927]
[-218.32441711 -141.93272400]
[-203.40806580 -145.59309387]
[-188.66444397 -141.28948975]
[-178.05949402 -130.17955017]
[-174.44589233 -115.25180817]
[-160.03367615 -111.09391785]
[-145.62145996 -106.93603516]
[-131.20924377 -102.77814484]
[-140.71955872 -114.37788391]
[-144.79867554 -128.81259155]
[-142.76609802 -143.67424011]
[-134.96090698 -156.48358154]
[-122.68518066 -165.10369873]
[-107.98679352 -168.09660339]
[-93.31776428 -164.96298218]
[-81.12521362 -156.22561646]
[-73.44313049 -143.34207153]
[-71.55307007 -128.46162415]
[-75.77031708 -114.06666565]
[-85.39135742 -102.55860138]
[-98.81118011 -95.85723114]
[-113.78964996 -95.08027649]
[-101.01229858 -87.22284698]
[-88.23493958 -79.36542511]
[-75.45758057 -71.50799561]
[-69.61814880 -76.59180450]
[-62.83622360 -80.35012817]
[-55.40832901 -82.61322784]
[-47.66037369 -83.27688599]
[-39.93333817 -82.30712891]
[-32.56827545 -79.74200439]
[-25.89125443 -75.69007874]
[-20.19892502 -70.32582855]
[-15.74534321 -63.88217545]
[-12.73062611 -56.64035034]
[-11.29197121 -48.91761398]
[-11.49741459 -41.05337906]
[-13.34263039 -33.39427567]
[-16.75091171 -26.27887917]
[-5.87208748 -15.95167446]
[5.00673771 -5.62446928]
[15.88556290 4.70273542]
[26.76438904 15.02994061]
[37.64321518 25.35714531]
[42.41683197 26.12400436]
[46.73849487 29.93904686]
[48.74844360 36.34744644]
[59.18825531 47.11825562]
[69.62806702 57.88906479]
[84.04188538 61.64286804]
[88.09083557 76.93720245]
[116.59664154 75.09707642]
[133.78442383 102.76222992]
[148.78361511 102.60619354]
[163.77630615 102.13815308]
[178.75602722 101.35830688]
[193.73573303 100.57846069]
[208.71545410 99.79862213]
[223.69515991 99.01877594]
[238.67488098 98.23892975]
[253.65458679 97.45908356]
[259.99520874 83.52871704]
[272.09042358 74.14979553]
[287.16085815 71.47750854]
[301.74340820 76.12594604]
[312.48712158 87.02692413]
[316.92315674 101.67547607]
[314.03216553 116.70546722]
[304.47848511 128.66313171]
[290.45745850 134.80067444]
[275.19104004 133.70773315]
[262.18728638 125.63545227]
[254.43443298 112.43879700]
[239.45472717 113.21864319]
[224.47500610 113.99848938]
[209.49530029 114.77833557]
[194.51557922 115.55818176]
[179.53587341 116.33802032]
[164.55615234 117.11786652]
[160.71343994 120.05199432]
[154.97117615 120.55971527]
[148.93965149 117.60538483]
[133.94046021 117.76142120]
[147.17829895 124.81548309]
[160.41612244 131.86953735]
[174.99751282 135.38850403]
[185.81457520 145.78038025]
[189.91513062 160.20901489]
[186.18002319 174.73654175]
[175.62867737 185.39810181]
[161.14073181 189.28393555]
[146.67027283 185.33352661]
[136.16656494 174.62501526]
[132.49629211 160.08134460]
[125.30490875 146.91760254]
[118.11352539 133.75386047]
[118.11352539 148.75386047]
[118.11352539 163.75386047]
[118.11352539 178.75386047]
[118.11352539 193.75386047]
[118.11352539 208.75386047]
[118.11352539 223.75386047]
[118.11352539 238.75386047]
[118.11352539 253.75386047]
[118.11352539 268.75387573]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[18 96]
[20 94]
[21 93]
[22 92]
[23 89]
[24 88]
[25 87]
[26 86]
[27 85]
[28 84]
[32 70]
[33 69]
[34 68]
[35 67]
[36 53]
[37 52]
[38 51]
[39 50]
[98 128]
[99 127]
[100 124]
[101 123]
[102 122]
[103 121]
[104 120]
[105 119]
[106 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
