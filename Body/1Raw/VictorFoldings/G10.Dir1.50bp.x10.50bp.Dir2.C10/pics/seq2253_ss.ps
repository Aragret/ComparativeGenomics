%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAAUCCCCUUGUAAAUUUAACUGUUAGUCCAAAGAGGAACAGCUCUUUGGACACUAGGAAxxxxxxxxxxGCACGAAACGGGAUCAAACAACCCCCUAGGAAUCACCUCCCAUUCCGAUAAAAUCACCUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 259.80126953]
[92.50000000 244.80128479]
[92.50000000 229.80128479]
[92.50000000 214.80128479]
[92.50000000 199.80128479]
[92.50000000 184.80128479]
[92.50000000 169.80128479]
[92.50000000 154.80128479]
[92.50000000 139.80128479]
[92.50000000 124.80127716]
[78.71762085 118.88131714]
[67.83879089 129.20852661]
[56.95996857 139.53572083]
[46.08114243 149.86293030]
[49.74716187 164.77787781]
[45.44914246 179.52314758]
[34.34322739 190.13229370]
[19.41685677 193.75155640]
[4.68514442 189.40733337]
[-5.88915062 178.26821899]
[-9.46159649 163.33058167]
[-5.07122326 148.61254883]
[6.10098076 138.07322693]
[21.04974937 134.54762268]
[35.75393677 138.98410034]
[46.63276291 128.65690613]
[57.51158905 118.32969666]
[68.39041138 108.00248718]
[67.22486115 100.59361267]
[52.40706635 102.92448425]
[50.07641983 88.10665894]
[64.89376068 85.77585602]
[63.72820663 78.36697388]
[50.20401764 71.87880707]
[43.48896027 72.00342560]
[38.50094986 69.11360168]
[36.26076126 64.82908630]
[23.01817513 57.78395462]
[9.77558994 50.73881912]
[-3.46699548 43.69368362]
[-16.70958138 36.64854813]
[-29.95216751 29.60341454]
[-43.19475174 22.55827904]
[-56.43733978 15.51314545]
[-69.67992401 8.46800995]
[-82.92250824 1.42287517]
[-97.96217346 6.27922583]
[-111.99251556 -0.99573332]
[-116.68958282 -16.08589745]
[-109.26669312 -30.03854179]
[-94.12771606 -34.57580566]
[-80.25432587 -27.00581741]
[-75.87737274 -11.81971073]
[-62.63478851 -4.77457571]
[-49.39220428 2.27055931]
[-36.14961624 9.31569386]
[-22.90703201 16.36082840]
[-9.66444588 23.40596390]
[3.57813931 30.45109940]
[16.82072449 37.49623489]
[30.06331062 44.54137039]
[43.30589676 51.58650208]
[56.69218063 58.35461807]
[70.21636963 64.84278107]
[112.91838837 70.76338959]
[119.54689026 57.30742264]
[126.17538452 43.85145569]
[132.80389404 30.39549065]
[120.15783691 38.46254349]
[105.82667542 42.89175415]
[90.83419800 43.36670303]
[76.25142670 39.85346603]
[63.12012863 32.60301971]
[52.37837219 22.13331795]
[44.79352188 9.19229603]
[40.90742874 -5.29556990]
[40.99769974 -20.29529762]
[45.05789185 -34.73534012]
[52.79795074 -47.58413315]
[63.66494370 -57.92378616]
[76.88256073 -65.01566315]
[91.50656128 -68.35311890]
[106.49223328 -67.69775391]
[120.76904297 -63.09637451]
[133.31709290 -54.87769318]
[143.23994446 -43.62883759]
[149.82878113 -30.15340233]
[152.61286926 -15.41403866]
[151.39332581 -0.46369570]
[146.25985718 13.62474155]
[157.95947266 4.23757982]
[169.65910339 -5.14958191]
[167.94039917 -20.48091125]
[174.80375671 -34.29748917]
[188.05909729 -42.19050217]
[203.47668457 -41.64131165]
[216.13682556 -32.82516479]
[221.99971008 -18.55526352]
[219.19451904 -3.38508105]
[208.61637878 7.84463406]
[193.64073181 11.55051994]
[179.04626465 6.55004168]
[167.34663391 15.93720341]
[155.64701843 25.32436562]
[146.25985718 37.02399063]
[139.63134766 50.47995377]
[133.00285339 63.93592072]
[126.37435913 77.39188385]
[133.14247131 90.77816772]
[147.90852356 93.41703796]
[162.67457581 96.05590057]
[177.44064331 98.69476318]
[192.20669556 101.33362579]
[203.29988098 90.48371124]
[218.65675354 88.25967407]
[232.37225342 95.51670837]
[239.17251587 109.46432495]
[236.44268799 124.73939514]
[225.23243713 135.46833801]
[209.85235596 137.52565002]
[196.21638489 130.12025452]
[189.56782532 116.09968567]
[174.80177307 113.46081543]
[160.03572083 110.82195282]
[145.26966858 108.18309021]
[130.50360107 105.54422760]
[124.75270844 110.35848999]
[136.44599915 119.75353241]
[148.13929749 129.14857483]
[159.83258057 138.54362488]
[173.43885803 144.85783386]
[180.18205261 158.25668335]
[177.14625549 172.94627380]
[165.64422607 182.57452393]
[150.64964294 182.97798157]
[138.64648438 173.98220825]
[134.82505798 159.47822571]
[127.63366699 146.31449890]
[120.44228363 133.15075684]
[113.25090027 119.98701477]
[107.50000000 124.80127716]
[107.50000000 139.80128479]
[107.50000000 154.80128479]
[107.50000000 169.80128479]
[107.50000000 184.80128479]
[107.50000000 199.80128479]
[107.50000000 214.80128479]
[107.50000000 229.80128479]
[107.50000000 244.80128479]
[107.50000000 259.80126953]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 28]
[12 27]
[13 26]
[14 25]
[33 64]
[34 63]
[37 62]
[38 61]
[39 60]
[40 59]
[41 58]
[42 57]
[43 56]
[44 55]
[45 54]
[46 53]
[65 108]
[66 107]
[67 106]
[68 105]
[90 104]
[91 103]
[92 102]
[109 126]
[110 125]
[111 124]
[112 123]
[113 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
