%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCCUCCCCAUACCCAACCCCCUGGUCAACCUCAACCUAGGCCUCCUAUUUAUUCUAGCCxxxxxxxxxxAAAUCAGCCCAAUUAGGUCUCCACCCCUGACUCCCCUCAGCCAUAGAAGGCCCCACCCCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[31.27625656 274.07077026]
[25.21324348 287.79083252]
[19.15023041 301.51089478]
[13.08721638 315.23095703]
[7.02420330 328.95098877]
[0.96119004 342.67105103]
[-5.10182333 356.39111328]
[-11.16483593 370.11117554]
[-12.03662014 387.04269409]
[-28.54778290 390.89208984]
[-36.81748962 376.09179688]
[-24.88488960 364.04815674]
[-18.82187653 350.32809448]
[-12.75886345 336.60803223]
[-6.69585037 322.88800049]
[-0.63283730 309.16793823]
[5.43017578 295.44787598]
[11.49318886 281.72781372]
[17.55620193 268.00778198]
[1.06614876 258.85742188]
[-14.41927147 248.09396362]
[-28.74280930 235.82666016]
[-41.75901413 222.18008423]
[-53.33571625 207.29281616]
[-63.35535431 191.31604004]
[-71.71617889 174.41198730]
[-78.33330536 156.75230408]
[-83.13951874 138.51632690]
[-86.08602905 119.88923645]
[-87.14290619 101.06018066]
[-86.29942322 82.22035217]
[-101.16246796 80.19802094]
[-116.02552032 78.17568207]
[-130.90879822 76.30806732]
[-145.81069946 74.59538269]
[-160.71260071 72.88269043]
[-171.10743713 84.40341949]
[-186.29566956 87.58100891]
[-200.43711853 81.19361877]
[-208.09413147 67.69732666]
[-206.32240295 52.28173065]
[-195.80320740 40.87444305]
[-180.58139038 37.86180115]
[-166.51005554 44.40222549]
[-158.99990845 57.98078918]
[-144.09800720 59.69347763]
[-129.19610596 61.40616608]
[-122.14632416 59.02998734]
[-114.00318146 63.31263733]
[-99.14013672 65.33496857]
[-84.27709198 67.35730743]
[-82.27904510 57.59787750]
[-79.76452637 47.95859909]
[-76.74063873 38.46677399]
[-73.21596527 29.14930725]
[-69.20048523 20.03259087]
[-64.70558167 11.14246082]
[-59.74398804 2.50410748]
[-54.32976532 -5.85799408]
[-48.47825241 -13.92014885]
[-42.20602798 -21.65951347]
[-35.53086472 -29.05415916]
[-28.47167969 -36.08313370]
[-21.04847145 -42.72651672]
[-13.28227615 -48.96548843]
[-5.19509840 -54.78237152]
[3.19014764 -60.16068268]
[11.84970284 -65.08518219]
[20.75902939 -69.54190826]
[29.89288330 -73.51824951]
[39.22538376 -77.00292969]
[48.73008728 -79.98607635]
[58.38006592 -82.45923615]
[68.14797211 -84.41539764]
[78.00612640 -85.84902954]
[87.92660522 -86.75605774]
[97.88129425 -87.13391876]
[107.84197998 -86.98153687]
[117.78045654 -86.29934692]
[127.66854095 -85.08928680]
[137.47824097 -83.35477448]
[147.18173218 -81.10073090]
[156.75154114 -78.33354950]
[166.16053772 -75.06105804]
[175.38208008 -71.29253387]
[184.39002991 -67.03865814]
[193.15885925 -62.31148148]
[201.66372681 -57.12440109]
[209.88053894 -51.49211121]
[217.78599548 -45.43057251]
[225.35771179 -38.95695877]
[232.57423401 -32.08961105]
[239.41510010 -24.84799385]
[245.86094666 -17.25262070]
[251.89349365 -9.32501602]
[257.49566650 -1.08764052]
[270.43371582 -8.67754841]
[283.37176514 -16.26745796]
[290.99777222 -30.78558159]
[307.39242554 -31.16986656]
[315.69027710 -17.02499390]
[307.35525513 -2.90199566]
[290.96166992 -3.32940125]
[278.02362061 4.26050711]
[265.08557129 11.85041523]
[280.85278320 51.87656021]
[287.06347656 94.44561768]
[302.06265259 94.60165405]
[317.06182861 94.75769043]
[332.06103516 94.91372681]
[343.17520142 83.67758942]
[358.97949219 83.67490387]
[370.09750366 94.90724945]
[369.93307495 110.71068573]
[358.58383179 121.70930481]
[342.78302002 121.37783051]
[331.90499878 109.91291046]
[316.90579224 109.75687408]
[301.90661621 109.60083771]
[286.90744019 109.44480133]
[286.01995850 120.49790955]
[284.47943115 131.47904968]
[282.29122925 142.34968567]
[279.46307373 153.07164001]
[276.00485229 163.60726929]
[271.92871094 173.91958618]
[267.24899292 183.97239685]
[261.98211670 193.73040771]
[256.14654541 203.15934753]
[249.76277161 212.22612000]
[242.85324097 220.89889526]
[235.44218445 229.14723206]
[227.55561829 236.94215393]
[219.22125244 244.25631714]
[210.46832275 251.06404114]
[201.32756042 257.34140015]
[191.83106995 263.06637573]
[182.01217651 268.21887207]
[171.90536499 272.78082275]
[161.54612732 276.73614502]
[150.97079468 280.07101440]
[140.21652222 282.77368164]
[129.32107544 284.83468628]
[118.32266998 286.24679565]
[107.25994873 287.00503540]
[96.17173767 287.10675049]
[85.09696198 286.55157471]
[74.07450867 285.34146118]
[63.14307785 283.48068237]
[52.34104156 280.97573853]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 19]
[2 18]
[3 17]
[4 16]
[5 15]
[6 14]
[7 13]
[8 12]
[31 51]
[32 50]
[33 49]
[34 47]
[35 46]
[36 45]
[96 105]
[97 104]
[98 103]
[107 120]
[108 119]
[109 118]
[110 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
