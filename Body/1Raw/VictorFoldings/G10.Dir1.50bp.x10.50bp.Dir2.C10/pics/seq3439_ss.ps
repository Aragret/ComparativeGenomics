%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUAAAACUCUUCACCAAAGAGCCCCUAAAACCCGCCACAUCUACCAUCACCCUCUACAUCxxxxxxxxxxUACAUAUUUACCACAACACAAUGGGGCUCACUCACCCACCACAUUAACAACAUAAAACCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[126.81964111 91.22576141]
[114.31560516 99.51123047]
[107.91204834 111.94047546]
[93.96987152 112.99280548]
[81.46583557 121.27827454]
[68.96179962 129.56375122]
[56.89936829 138.47990417]
[45.31031799 148.00323486]
[33.72127151 157.52658081]
[22.13222313 167.04991150]
[10.54317474 176.57325745]
[25.43083954 178.40557861]
[35.78328705 189.26039124]
[36.90863419 204.21810913]
[28.29685593 216.49969482]
[13.85093880 220.53894043]
[0.11798661 214.50520325]
[-6.67802382 201.13305664]
[-3.45798111 186.48446655]
[-16.29163551 194.24960327]
[-29.12528801 202.01473999]
[-41.95894241 209.77987671]
[-47.17294312 224.95201111]
[-62.33361435 230.19926453]
[-75.81098175 221.49638367]
[-77.26637268 205.51948547]
[-65.58332062 194.52467346]
[-49.72407913 196.94621277]
[-36.89042282 189.18107605]
[-24.05677032 181.41595459]
[-11.22311687 173.65081787]
[1.01983702 164.98420715]
[12.60888577 155.46086121]
[24.19793320 145.93753052]
[35.78698349 136.41419983]
[47.37602997 126.89085388]
[33.02907181 122.51309204]
[27.31142998 108.64555359]
[34.40386963 95.42824554]
[49.12036514 92.52571106]
[60.70016098 102.06029510]
[60.67632675 117.05971527]
[73.18035889 108.77423859]
[85.68439484 100.48876953]
[92.08795166 88.05952454]
[106.03012848 87.00719452]
[118.53416443 78.72172546]
[112.11245728 67.33329773]
[106.46352386 55.54264832]
[101.61243439 43.40213013]
[97.58070374 30.96566010]
[94.38622284 18.28846550]
[92.04312897 5.42684412]
[90.56182861 -7.56209278]
[89.94886017 -20.62066841]
[90.20691681 -33.69089890]
[91.33484650 -46.71474457]
[93.32760620 -59.63438797]
[96.17633057 -72.39246368]
[99.86833954 -84.93231964]
[104.38722992 -97.19828796]
[109.71289825 -109.13591766]
[115.82168579 -120.69220734]
[122.68643951 -131.81585693]
[130.27667236 -142.45748901]
[138.55865479 -152.56985474]
[147.49559021 -162.10807800]
[157.04777527 -171.02983093]
[167.17280579 -179.29550171]
[177.82568359 -186.86840820]
[188.95909119 -193.71495056]
[200.52360535 -199.80474854]
[212.46784973 -205.11077881]
[224.73876953 -209.60951233]
[237.28189087 -213.28097534]
[250.04150391 -216.10890198]
[262.96096802 -218.08076477]
[275.98287964 -219.18782043]
[289.04940796 -219.42517090]
[302.10260010 -218.79180908]
[315.08444214 -217.29054260]
[327.93728638 -214.92808533]
[340.60409546 -211.71495056]
[353.02865601 -207.66540527]
[365.15573120 -202.79745483]
[376.93157959 -197.13276672]
[388.30383301 -190.69648743]
[399.22204590 -183.51722717]
[409.63778687 -175.62686157]
[419.50476074 -167.06048584]
[428.77920532 -157.85610962]
[437.41992188 -148.05465698]
[445.38864136 -137.69964600]
[452.64990234 -126.83706665]
[459.17153931 -115.51517487]
[464.92462158 -103.78424072]
[469.88357544 -91.69637299]
[474.02645874 -79.30525970]
[477.33486938 -66.66590881]
[479.79412842 -53.83446884]
[481.39337158 -40.86790085]
[496.37362671 -41.63756180]
[511.35385132 -42.40722275]
[526.33410645 -43.17688370]
[539.71911621 -51.61208725]
[552.82659912 -44.53802490]
[567.80682373 -45.30768204]
[573.66741943 -59.40082550]
[585.06805420 -69.54909515]
[599.74523926 -73.73754883]
[614.78479004 -71.13456726]
[627.20050049 -62.25696564]
[634.52734375 -48.86740494]
[635.31054688 -33.62439346]
[629.39453125 -19.55443954]
[617.95397949 -9.45114326]
[603.26037598 -5.32052183]
[588.23126221 -7.98271179]
[575.85052490 -16.90913582]
[568.57647705 -30.32744217]
[553.59625244 -29.55778313]
[541.28277588 -21.17762947]
[527.10375977 -28.19664192]
[512.12353516 -27.42698097]
[497.14328003 -26.65732193]
[482.16302490 -25.88766098]
[481.59896851 -8.17807007]
[479.43832397 9.40874100]
[475.69873047 26.72913361]
[470.41061401 43.64163971]
[463.61709595 60.00811005]
[455.37356567 75.69485474]
[445.74728394 90.57372284]
[434.81677246 104.52315521]
[422.67126465 117.42918396]
[409.40985107 129.18634033]
[395.14083862 139.69854736]
[379.98065186 148.87989807]
[364.05307007 156.65531921]
[347.48815918 162.96125793]
[330.42117310 167.74610901]
[312.99142456 170.97074890]
[295.34130859 172.60873413]
[277.61489868 172.64660645]
[259.95700073 171.08398438]
[242.51182556 167.93353271]
[225.42185974 163.22091675]
[208.82667542 156.98452759]
[192.86186218 149.27522278]
[177.65782166 140.15588379]
[163.33876038 129.70092773]
[150.02168274 117.99565887]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 47]
[2 46]
[4 44]
[5 43]
[6 42]
[7 36]
[8 35]
[9 34]
[10 33]
[11 32]
[19 31]
[20 30]
[21 29]
[22 28]
[101 126]
[102 125]
[103 124]
[104 123]
[106 121]
[107 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
