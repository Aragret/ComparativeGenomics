%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCUAUCACCCUAUUAACCACUCACGGGAGCUCUCCAUGCAUUUGGUAUUUUCGUCUGGGGGGUxxxxxxxxxxCUAAAAAAUCCCAAACAUAUAACUGAACUCCUCACACCCAAUUGGACCAAUCUAUCACCCUAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[84.14282990 289.53231812]
[84.14282990 274.53231812]
[84.14282990 259.53231812]
[84.14282990 244.53231812]
[84.14282990 229.53231812]
[84.14282990 214.53231812]
[84.14282990 199.53231812]
[84.14282990 184.53231812]
[84.14282990 169.53231812]
[84.14282990 154.53231812]
[77.74999237 150.61038208]
[70.55860901 163.77410889]
[66.41651917 178.19087219]
[51.44672775 179.14236450]
[45.51267624 165.36604309]
[56.48777008 155.14179993]
[64.96430969 142.76649475]
[58.57147217 138.84455872]
[45.19956589 145.64105225]
[31.82766151 152.43753052]
[33.04003525 167.59004211]
[28.35675430 182.05154419]
[18.49197960 193.61679077]
[4.95002127 200.52212524]
[-10.20407104 201.71456909]
[-24.65940857 197.01226807]
[-36.21165848 187.13229370]
[-43.09918213 173.58125305]
[-44.27169037 158.42561340]
[-39.55037689 143.97647095]
[-29.65520859 132.43722534]
[-16.09512901 125.56753540]
[-0.93795156 124.41497040]
[13.50496483 129.15528870]
[25.03117943 139.06562805]
[38.40308380 132.26913452]
[51.77499008 125.47265625]
[50.58031845 111.47641754]
[53.09013748 98.61119843]
[38.36034775 95.77689362]
[26.34122276 105.78063202]
[10.70405674 105.66649628]
[-1.16776145 95.48838043]
[-3.66872144 80.05208588]
[4.38205338 66.64615631]
[19.18323326 61.60045624]
[33.74615479 67.29741669]
[41.19464874 81.04710388]
[55.92444229 83.88140869]
[70.48297882 63.51425552]
[93.44140625 53.53012848]
[118.26625824 56.77029037]
[126.23766327 44.06372833]
[134.20906067 31.35716629]
[142.18046570 18.65060234]
[150.15187073 5.94403982]
[153.13340759 -8.75665665]
[150.74243164 -23.56487083]
[148.35145569 -38.37308502]
[145.96047974 -53.18130112]
[143.56950378 -67.98951721]
[128.53543091 -68.95102692]
[114.09240723 -73.23432159]
[100.96486664 -80.62455750]
[89.81130219 -90.75104523]
[81.19116211 -103.10583496]
[75.53683472 -117.06922913]
[73.13192749 -131.94081116]
[74.09707642 -146.97465515]
[78.38387299 -161.41664124]
[85.77729034 -174.54238892]
[95.90647888 -185.69349670]
[108.26335907 -194.31065369]
[122.22811890 -199.96159363]
[137.10029602 -202.36289978]
[152.13389587 -201.39410400]
[166.57484436 -197.10380554]
[179.69879150 -189.70721436]
[190.84745789 -179.57531738]
[199.46160889 -167.21635437]
[205.10917664 -153.25022888]
[207.50686646 -138.37747192]
[206.53443909 -123.34410095]
[202.24063110 -108.90419006]
[194.84086609 -95.78203583]
[184.70626831 -84.63583374]
[172.34521484 -76.02467346]
[158.37771606 -70.38049316]
[160.76869202 -55.57227707]
[163.15966797 -40.76406097]
[165.55064392 -25.95584679]
[167.94161987 -11.14763069]
[169.47346497 -10.45254421]
[170.88401794 -9.50240993]
[185.34002686 -13.50536060]
[199.79603577 -17.50831223]
[214.25205994 -21.51126289]
[214.72439575 -35.18040466]
[219.03555298 -48.14271545]
[226.82492065 -59.34418488]
[237.44949341 -67.87681580]
[250.03691101 -73.05224609]
[263.55709839 -74.45725250]
[276.90655518 -71.98674774]
[288.99841309 -65.85155487]
[298.85095215 -56.56048203]
[305.66729736 -44.87810135]
[320.27188110 -48.29946899]
[334.87649536 -51.72083664]
[344.52191162 -64.54057312]
[360.56201172 -64.84840393]
[370.69219971 -52.40819931]
[367.14147949 -36.76301193]
[352.63363647 -29.91449356]
[338.29785156 -37.11624146]
[323.69326782 -33.69487381]
[309.08865356 -30.27350616]
[307.47241211 -13.94288063]
[300.37039185 0.87949574]
[288.61914062 12.40733719]
[273.61666870 19.24480057]
[257.15609741 20.55548859]
[241.21134949 16.16472054]
[227.70050049 6.58258724]
[218.25500488 -7.05524826]
[203.79899597 -3.05229688]
[189.34297180 0.95065439]
[174.88696289 4.95360565]
[162.85842896 13.91544247]
[154.88703918 26.62200546]
[146.91563416 39.32856750]
[138.94422913 52.03512955]
[130.97282410 64.74169159]
[137.03424072 70.29755402]
[142.09451294 76.89763641]
[145.97355652 84.36070251]
[148.52421570 92.47445679]
[149.63768005 101.00157928]
[149.24766541 109.68661499]
[147.33340454 118.26367188]
[143.92132568 126.46453094]
[139.08512878 134.02703857]
[132.94447327 140.70344543]
[125.66218567 146.26850891]
[117.43997192 150.52696228]
[108.51293182 153.32028198]
[99.14282990 154.53231812]
[99.14282990 169.53231812]
[99.14282990 184.53231812]
[99.14282990 199.53231812]
[99.14282990 214.53231812]
[99.14282990 229.53231812]
[99.14282990 244.53231812]
[99.14282990 259.53231812]
[99.14282990 274.53231812]
[99.14282990 289.53231812]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 156]
[2 155]
[3 154]
[4 153]
[5 152]
[6 151]
[7 150]
[8 149]
[9 148]
[10 147]
[18 37]
[19 36]
[20 35]
[39 49]
[40 48]
[52 133]
[53 132]
[54 131]
[55 130]
[56 129]
[57 92]
[58 91]
[59 90]
[60 89]
[61 88]
[94 128]
[95 127]
[96 126]
[97 125]
[107 117]
[108 116]
[109 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
