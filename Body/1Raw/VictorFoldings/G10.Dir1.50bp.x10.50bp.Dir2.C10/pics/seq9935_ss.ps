%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUACCCCUCACAAUCAUGGCAAGCCAACGCCACUUAUCCAGUGAACCACUAUCACGAAAAAxxxxxxxxxxCCUUAACAAUGAACAAGAUAUUCGAAAAAUAGGAGGACUACUCAAAACCAUACCUCUCACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[154.59925842 355.83566284]
[154.28720093 340.83892822]
[153.97514343 325.84216309]
[153.66308594 310.84542847]
[153.35102844 295.84866333]
[153.03898621 280.85189819]
[152.72692871 265.85516357]
[152.41487122 250.85839844]
[152.10281372 235.86164856]
[148.85198975 221.21813965]
[142.78897095 207.49809265]
[136.72595215 193.77803040]
[122.78606415 188.65797424]
[116.44186401 174.83026123]
[121.90676880 160.24353027]
[115.84375000 146.52348328]
[109.78073883 132.80343628]
[103.71772766 119.08337402]
[104.90882111 134.03601074]
[96.69775391 146.58903503]
[82.52071381 151.48919678]
[68.31057739 146.68588257]
[60.01404190 134.18917847]
[61.10308075 119.22876740]
[71.12194824 108.06533051]
[85.87915802 105.37077332]
[71.06140137 103.03967285]
[56.24364090 100.70856476]
[48.73471832 112.11709595]
[35.66072083 118.62197876]
[20.14412498 117.62311554]
[6.43181229 108.45416260]
[-8.50249481 109.85646820]
[-21.55537605 119.78392029]
[-36.57257080 113.19484711]
[-38.10567474 96.86752319]
[-24.57756615 87.59809875]
[-9.90479851 94.92216492]
[5.02950859 93.51985931]
[6.89712191 78.63658142]
[-7.22768116 73.58782196]
[-21.35248375 68.53906250]
[-35.47728729 63.49031067]
[-50.53463745 69.02706909]
[-64.17627716 60.58401108]
[-65.93750763 44.63792419]
[-54.46725845 33.42128372]
[-38.56452942 35.53853607]
[-30.42852974 49.36550522]
[-16.30372810 54.41426086]
[-2.17892480 59.46302032]
[11.94587803 64.51177216]
[33.47381210 59.07813644]
[51.70478058 68.42218018]
[58.57474518 85.89080811]
[73.39250183 88.22191620]
[88.21025848 90.55301666]
[101.30341339 83.23390961]
[107.07968903 69.39069366]
[112.85595703 55.54747772]
[118.63223267 41.70425797]
[110.74711609 24.53381157]
[117.73413849 7.32105684]
[134.76370239 0.73384738]
[139.95912170 -13.33767223]
[145.15454102 -27.40919113]
[150.34996033 -41.48070908]
[137.39492798 -49.12316132]
[126.01284790 -58.95616531]
[116.56958771 -70.66362762]
[109.36872864 -83.86920929]
[104.64173889 -98.14840698]
[102.54057312 -113.04219055]
[103.13277435 -128.07179260]
[106.39929962 -142.75408936]
[112.23515320 -156.61708069]
[120.45273590 -169.21513367]
[130.78788757 -180.14329529]
[142.90835571 -189.05024719]
[156.42454529 -195.64967346]
[170.90196228 -199.72943115]
[185.87519836 -201.15837097]
[200.86293030 -199.89056396]
[215.38339233 -195.96676636]
[228.96978760 -189.51310730]
[241.18536377 -180.73703003]
[251.63745117 -169.92066956]
[259.99005127 -157.41172791]
[265.97470093 -143.61231995]
[269.39895630 -128.96600342]
[270.15277100 -113.94364166]
[268.21194458 -99.02811432]
[263.63879395 -84.69890594]
[256.58041382 -71.41663361]
[247.26362610 -59.60827637]
[235.98796082 -49.65341568]
[223.11589050 -41.87205887]
[209.06117249 -36.51435089]
[194.27565002 -33.75251770]
[179.23457336 -33.67533875]
[164.42147827 -36.28529358]
[159.22605896 -22.21377563]
[154.03063965 -8.14225674]
[148.83522034 5.92926311]
[155.77888489 15.07672215]
[157.43240356 26.56295776]
[153.26541138 37.52243042]
[144.21450806 45.16376495]
[132.47544861 47.48052979]
[126.69918060 61.32374954]
[120.92290497 75.16696930]
[115.14662933 89.01018524]
[117.43778229 113.02036285]
[123.50079346 126.74041748]
[129.56381226 140.46046448]
[135.62681580 154.18052673]
[150.09176636 159.96006775]
[156.04507446 173.96052551]
[150.44601440 187.71502686]
[156.50901794 201.43507385]
[162.57203674 215.15513611]
[164.56927490 200.28869629]
[170.78390503 186.63664246]
[180.68394470 175.36769104]
[193.42185974 167.44650269]
[207.90725708 163.55116272]
[222.90007019 164.01516724]
[237.11686707 168.79876709]
[249.34059143 177.49247742]
[258.52484131 189.35205078]
[263.88339233 203.36225891]
[264.95751953 218.32376099]
[261.65524292 232.95574951]
[254.25932312 246.00566101]
[243.40284729 256.35635376]
[230.01518250 263.12173462]
[215.24240112 265.72268677]
[200.34912109 263.93652344]
[186.61030579 257.91616821]
[175.20204163 248.17698669]
[167.09956360 235.54959106]
[167.41162109 250.54634094]
[167.72367859 265.54309082]
[168.03573608 280.53985596]
[168.34779358 295.53659058]
[168.65985107 310.53335571]
[168.97190857 325.53012085]
[169.28395081 340.52685547]
[169.59600830 355.52362061]
[172.18701172 374.73135376]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 121]
[11 120]
[12 119]
[15 116]
[16 115]
[17 114]
[18 113]
[26 57]
[27 56]
[28 55]
[32 39]
[33 38]
[40 52]
[41 51]
[42 50]
[43 49]
[58 112]
[59 111]
[60 110]
[61 109]
[64 104]
[65 103]
[66 102]
[67 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
