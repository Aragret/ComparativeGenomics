%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCAUAUCAACAAUAGGGUUUACGACCUCGAUGUUGGAUCAGGACAUCCCGAUGGUGCAGCCGCxxxxxxxxxxCAUUACUGCAGGCCACCUACUCAUGCACCUAAUUGGAAGCGCCACCCUAGCAAUAUCAACCAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[100.37500763 533.29748535]
[100.37500763 518.29748535]
[100.37500763 503.29751587]
[100.37500763 488.29751587]
[100.37500763 473.29751587]
[100.37500763 458.29751587]
[100.37500763 443.29751587]
[100.37500763 428.29751587]
[100.37500763 413.29751587]
[100.37500763 398.29751587]
[84.88759613 394.92242432]
[70.52024078 388.21102905]
[57.98212051 378.49136353]
[47.89286423 366.23995972]
[40.75188828 352.05868530]
[36.91370392 336.64492798]
[36.57030487 320.75747681]
[39.74157333 305.17913818]
[46.27414703 290.67807007]
[55.84883499 277.97003174]
[67.99622345 267.68301392]
[82.11966705 260.32608032]
[97.52462006 256.26443481]
[96.92447662 241.27645874]
[96.32433319 226.28846741]
[95.72418976 211.30047607]
[95.12404633 196.31248474]
[94.52390289 181.32449341]
[83.90350342 173.97100830]
[79.40689087 161.65347290]
[82.89393616 148.81091309]
[93.30323029 140.21066284]
[93.00309753 125.21366882]
[85.13306427 122.63820648]
[78.21569061 117.59169769]
[73.02835846 110.42813873]
[70.21674347 101.74549866]
[70.21879578 92.33685303]
[73.20666504 83.11812592]
[59.11698914 77.97216034]
[45.02730942 72.82618713]
[30.93763351 67.68022156]
[16.84795570 62.53425217]
[4.62352562 71.94525146]
[-10.75020885 73.23048401]
[-24.36754417 65.97985077]
[-31.88323975 52.50699615]
[-30.89906311 37.11105728]
[-21.72906113 24.70482254]
[-7.29934883 19.24707985]
[7.78560495 22.47937202]
[18.71224594 33.37028885]
[21.99392509 48.44457626]
[36.08360291 53.59054565]
[50.17327881 58.73651123]
[64.26295471 63.88248062]
[78.35263062 69.02845001]
[92.10820007 63.04644775]
[97.95227814 49.23171997]
[103.79635620 35.41698837]
[109.64043427 21.60226059]
[115.48451233 7.78753138]
[121.05101013 -6.14136553]
[126.33768463 -20.17885208]
[131.62435913 -34.21633911]
[136.91104126 -48.25382614]
[142.19770813 -62.29131317]
[147.48439026 -76.32880402]
[151.34251404 -90.82414246]
[153.73348999 -105.63235474]
[156.12446594 -120.44057465]
[158.36715698 -135.27197266]
[160.46136475 -150.12506104]
[146.95692444 -156.97406006]
[136.40985107 -167.83859253]
[129.96421814 -181.54014587]
[128.31918335 -196.59246826]
[131.65319824 -211.36280823]
[139.60461426 -224.24899292]
[151.31091309 -233.85322571]
[165.50230408 -239.13369751]
[180.63938904 -239.51762390]
[195.08021545 -234.96337891]
[207.25834656 -225.96495056]
[215.85281372 -213.49842834]
[219.93132019 -198.91610718]
[219.05148315 -183.79972839]
[213.30873108 -169.78904724]
[203.32600403 -158.40379333]
[190.18612671 -150.87899780]
[175.31445312 -148.03085327]
[173.22024536 -133.17776489]
[175.41278076 -126.07559967]
[170.93267822 -118.04959869]
[168.54170227 -103.24138641]
[166.15072632 -88.43316650]
[177.19813538 -98.57982635]
[191.80940247 -101.97258759]
[206.19754028 -97.73211670]
[216.63339233 -86.95747375]
[220.41217041 -72.44124603]
[216.55447388 -57.94578934]
[206.06016541 -47.22807312]
[191.64916992 -43.06594467]
[177.05657959 -46.53814697]
[166.06452942 -56.74475479]
[161.52188110 -71.04212189]
[156.23519897 -57.00463867]
[150.94851685 -42.96715164]
[145.66184998 -28.92966270]
[140.37516785 -14.89217663]
[135.08850098 -0.85468894]
[136.23335266 3.83444691]
[134.40478516 9.28979874]
[129.29924011 13.63160896]
[123.45516968 27.44633865]
[117.61109161 41.26106644]
[111.76701355 55.07579803]
[105.92293549 68.89052582]
[122.73487854 79.98047638]
[128.86309814 98.22883606]
[122.74071503 115.53765869]
[108.00009155 124.91353607]
[108.30022430 139.91053772]
[121.12578583 151.76751709]
[121.43003845 168.89440918]
[109.51188660 180.72434998]
[110.11203766 195.71234131]
[110.71218109 210.70033264]
[111.31232452 225.68832397]
[111.91246796 240.67631531]
[112.51261139 255.66430664]
[126.51438904 258.00357056]
[139.77702332 263.05108643]
[151.78240967 270.60748291]
[162.06195068 280.37539673]
[170.21492004 291.97122192]
[175.92402649 304.94015503]
[178.96780396 318.77401733]
[179.22915649 332.93118286]
[176.69989014 346.85778809]
[171.48098755 360.00933838]
[163.77848816 371.87213135]
[153.89543152 381.98315430]
[142.21992493 389.94827271]
[129.20986938 395.45761108]
[115.37500763 398.29751587]
[115.37500763 413.29751587]
[115.37500763 428.29751587]
[115.37500763 443.29751587]
[115.37500763 458.29751587]
[115.37500763 473.29751587]
[115.37500763 488.29751587]
[115.37500763 503.29751587]
[115.37500763 518.29748535]
[115.37500763 533.29748535]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 156]
[2 155]
[3 154]
[4 153]
[5 152]
[6 151]
[7 150]
[8 149]
[9 148]
[10 147]
[23 132]
[24 131]
[25 130]
[26 129]
[27 128]
[28 127]
[32 124]
[33 123]
[39 57]
[40 56]
[41 55]
[42 54]
[43 53]
[58 119]
[59 118]
[60 117]
[61 116]
[62 115]
[63 112]
[64 111]
[65 110]
[66 109]
[67 108]
[68 107]
[69 96]
[70 95]
[71 94]
[72 92]
[73 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
