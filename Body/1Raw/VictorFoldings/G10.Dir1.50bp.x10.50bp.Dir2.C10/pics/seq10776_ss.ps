%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACAACCUAUUCCAACUGUUCAUCGGCUGAGAGGGCGUAGGAAUUAUAUCCUUCUUGCUCAUCxxxxxxxxxxUACUUCCUCUCUUUCUUCUUCCCACUCAUCCUAACCCUACUCCUAAUCACAUAACCUAUUCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[78.95378876 304.92752075]
[78.95378876 289.92752075]
[78.95378876 274.92752075]
[78.95378876 259.92752075]
[78.95378876 244.92752075]
[78.95378876 229.92752075]
[78.95378876 214.92752075]
[78.95378876 199.92752075]
[78.95378876 184.92752075]
[78.95378876 169.92752075]
[65.11018372 164.15217590]
[54.44997025 174.70489502]
[43.78976059 185.25762939]
[48.80647278 199.67272949]
[47.06335831 214.83598328]
[38.90652084 227.73670959]
[25.95549965 235.81346130]
[10.78173542 237.46258545]
[-3.60201287 232.35665894]
[-14.33984089 221.50946045]
[-19.29974556 207.07470703]
[-17.49693298 191.91842651]
[-9.28935528 179.04992676]
[3.69336963 171.02423096]
[18.87351036 169.43487549]
[33.23704147 174.59741211]
[43.89725113 164.04469299]
[54.55746078 153.49197388]
[43.14142990 140.58287048]
[35.26224136 125.34877777]
[31.36182976 108.73108673]
[31.63764000 91.74581146]
[36.03303146 75.42144012]
[44.24311447 60.73673630]
[55.73557281 48.56196976]
[69.78499603 39.60743713]
[85.51863098 34.38204193]
[101.97052765 33.16450882]
[104.09157562 18.31522751]
[106.21261597 3.46594477]
[108.18306732 -11.40406895]
[110.00272369 -26.29328918]
[111.82238007 -41.18250656]
[113.64203644 -56.07172775]
[106.30944061 -66.72948456]
[108.16890717 -79.12574768]
[117.67704773 -86.66321564]
[119.79808807 -101.51249695]
[121.91912842 -116.36177826]
[124.04017639 -131.21105957]
[126.16121674 -146.06034851]
[111.59550476 -149.69956970]
[97.48118591 -154.81719971]
[83.96788788 -161.35897827]
[71.19885254 -169.25553894]
[59.30944443 -178.42320251]
[48.42569351 -188.76477051]
[38.66297531 -200.17060852]
[30.12477875 -212.51983643]
[22.90161514 -225.68151855]
[17.07005501 -239.51614380]
[12.69191456 -253.87705994]
[9.81360531 -268.61203003]
[8.46563816 -283.56484985]
[8.66230202 -298.57702637]
[10.40151310 -313.48941040]
[13.66483498 -328.14392090]
[18.41767311 -342.38522339]
[24.60964775 -356.06234741]
[32.17511749 -369.03030396]
[41.03388214 -381.15161133]
[51.09204102 -392.29779053]
[62.24296570 -402.35070801]
[74.36845398 -411.20376587]
[87.33996582 -418.76312256]
[101.01999664 -424.94863892]
[115.26353455 -429.69476318]
[129.91958618 -432.95120239]
[144.83277893 -434.68338013]
[159.84504700 -434.87295532]
[174.79724121 -433.51794434]
[189.53085327 -430.63269043]
[203.88969421 -426.24780273]
[217.72157288 -420.40972900]
[230.87986755 -413.18035889]
[243.22505188 -404.63635254]
[254.62629700 -394.86825562]
[264.96273804 -383.97964478]
[274.12478638 -372.08590698]
[282.01535034 -359.31314087]
[288.55075073 -345.79678345]
[293.66174316 -331.68005371]
[297.29409790 -317.11260986]
[299.40936279 -302.24890137]
[299.98507690 -287.24649048]
[299.01516724 -272.26440430]
[296.50988770 -257.46142578]
[292.49581909 -242.99453735]
[287.01550293 -229.01704407]
[280.12704468 -215.67713928]
[271.90344238 -203.11624146]
[262.43188477 -191.46748352]
[251.81275940 -180.85435486]
[240.15866089 -171.38935852]
[227.59312439 -163.17283630]
[214.24934387 -156.29188538]
[200.26876831 -150.81944275]
[185.79960632 -146.81352234]
[170.99523926 -144.31660461]
[156.01258850 -143.35513306]
[141.01049805 -143.93930054]
[138.88945007 -129.09002686]
[136.76841736 -114.24073792]
[134.64736938 -99.39145660]
[132.52632141 -84.54217529]
[139.94619751 -68.66661835]
[128.53126526 -54.25206757]
[126.71160126 -39.36285019]
[124.89194489 -24.47363091]
[123.07228851 -9.58441162]
[125.39626312 -2.52192378]
[121.06189728 5.58698797]
[118.94085693 20.43626976]
[116.81980896 35.28555298]
[125.84535980 38.16089630]
[134.39480591 42.29127121]
[142.29414368 47.59965134]
[149.38166809 53.98496246]
[155.51121521 61.32401657]
[160.55514526 69.47389221]
[164.40707397 78.27468109]
[166.98408508 87.55267334]
[168.22845459 97.12373352]
[168.10902405 106.79701233]
[166.62184143 116.37868500]
[163.79045105 125.67589569]
[159.66552734 134.50061035]
[154.32392883 142.67341614]
[147.86737061 150.02717590]
[140.42037964 156.41046143]
[132.12800598 161.69061279]
[123.15291595 165.75657654]
[113.67224884 168.52114868]
[103.87409210 169.92291260]
[93.95378876 169.92752075]
[93.95378876 184.92752075]
[93.95378876 199.92752075]
[93.95378876 214.92752075]
[93.95378876 229.92752075]
[93.95378876 244.92752075]
[93.95378876 259.92752075]
[93.95378876 274.92752075]
[93.95378876 289.92752075]
[93.95378876 304.92752075]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[11 28]
[12 27]
[13 26]
[38 124]
[39 123]
[40 122]
[41 120]
[42 119]
[43 118]
[44 117]
[47 115]
[48 114]
[49 113]
[50 112]
[51 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
