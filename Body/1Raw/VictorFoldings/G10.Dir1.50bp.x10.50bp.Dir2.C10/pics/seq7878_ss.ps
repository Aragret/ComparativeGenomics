%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCCCCUAAAAAUCUUUGAAAUAGGGCCCGUAUUUACCCUAUAGCACCCCCUCUACCCCCUxxxxxxxxxxACCAUCAUUCCCCCUAAAUAAAUUAAAAAAACUAUUAAACCCAUAUAACCUCCCCCAAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[281.54626465 77.01454926]
[266.64434814 78.72723389]
[251.74244690 80.43992615]
[236.84054565 82.15261841]
[221.93864441 83.86530304]
[207.12088013 86.19641113]
[192.41291809 89.14189148]
[177.70495605 92.08737183]
[162.99699402 95.03285980]
[148.28903198 97.97834015]
[133.58106995 100.92382050]
[132.83168030 113.16912842]
[127.55212402 124.92727661]
[118.02839661 134.51014709]
[105.17536163 140.38581848]
[90.45632172 141.41116333]
[75.71773529 137.02491760]
[64.01811218 146.41207886]
[52.31848907 155.79924011]
[46.88011169 171.27038574]
[30.71479416 174.02983093]
[20.45203018 161.23890686]
[26.64927101 146.05581665]
[42.93132782 144.09962463]
[54.63095093 134.71246338]
[66.33057404 125.32530212]
[64.25163269 118.11919403]
[49.69126892 114.51422119]
[60.09374237 103.70697784]
[58.01480103 96.50086975]
[43.11289597 94.78817749]
[28.21099472 93.07548523]
[13.30909252 91.36280060]
[-1.59280944 89.65010834]
[-16.49471092 87.93741608]
[-25.57807922 100.32241058]
[-39.64345551 106.49175262]
[-54.90732574 104.78591919]
[-67.26378632 95.66377258]
[-73.38900757 81.57913208]
[-71.63533783 66.32068634]
[-62.47450638 53.99287796]
[-48.37073135 47.91183472]
[-33.11785507 49.71332169]
[-20.81882668 58.91275024]
[-14.78202248 73.03551483]
[0.11988026 74.74820709]
[15.02178288 76.46089172]
[29.92368507 78.17358398]
[44.82558823 79.88627625]
[59.72748947 81.59896088]
[77.55985260 64.96388245]
[100.11261749 61.06465912]
[119.73545074 69.57572937]
[130.63558960 86.21585846]
[145.34355164 83.27037811]
[160.05151367 80.32489777]
[174.75947571 77.37940979]
[189.46743774 74.43392944]
[204.17539978 71.48844910]
[207.43133545 68.39646149]
[211.13734436 66.71226501]
[214.78222656 66.40116882]
[217.92121887 67.26176453]
[220.22595215 68.96340179]
[235.12785339 67.25070953]
[250.02975464 65.53802490]
[264.93167114 63.82533264]
[279.83355713 62.11264420]
[279.23873901 47.11736298]
[279.76620483 32.11956406]
[281.41296387 17.20311928]
[284.16983032 2.45144582]
[288.02139282 -12.05295467]
[292.94613647 -26.22896767]
[298.91644287 -39.99731445]
[305.89901733 -53.28099442]
[313.85473633 -66.00572205]
[322.73913574 -78.10033417]
[332.50253296 -89.49719238]
[343.09030151 -100.13255310]
[354.44326782 -109.94695282]
[366.49792480 -118.88549042]
[379.18685913 -126.89817810]
[392.43911743 -133.94021606]
[406.18054199 -139.97221375]
[420.33435059 -144.96044922]
[434.82131958 -148.87699890]
[449.56048584 -151.69999695]
[464.46939087 -153.41362000]
[479.46469116 -154.00830078]
[494.46249390 -153.48072815]
[509.37890625 -151.83383179]
[524.13055420 -149.07681274]
[538.63494873 -145.22512817]
[552.81091309 -140.30027771]
[566.57922363 -134.32981873]
[579.86279297 -127.34716034]
[592.58746338 -119.39131927]
[604.68200684 -110.50681305]
[616.07879639 -100.74331665]
[626.71405029 -90.15544128]
[636.52832031 -78.80238342]
[645.46679688 -66.74765015]
[653.47937012 -54.05864716]
[660.52130127 -40.80634308]
[666.55316162 -27.06484795]
[671.54125977 -12.91101265]
[675.45770264 1.57600808]
[678.28051758 16.31519699]
[679.99401855 31.22412491]
[680.58862305 46.21941376]
[680.06085205 61.21720505]
[678.41387939 76.13362122]
[675.65673828 90.88524628]
[671.80487061 105.38957977]
[666.87994385 119.56550598]
[660.90936279 133.33374023]
[653.92657471 146.61730957]
[645.97064209 159.34188843]
[637.08599854 171.43634033]
[627.32238770 182.83303833]
[616.73443604 193.46821594]
[605.38128662 203.28240967]
[593.32647705 212.22073364]
[580.63739014 220.23320007]
[567.38500977 227.27499390]
[553.64349365 233.30676270]
[539.48962402 238.29473877]
[525.00256348 242.21104431]
[510.26333618 245.03376770]
[495.35440063 246.74713135]
[480.35910034 247.34155273]
[465.36132812 246.81370544]
[450.44491577 245.16654968]
[435.69329834 242.40928650]
[421.18902588 238.55732727]
[407.01312256 233.63223267]
[393.24493408 227.66154480]
[379.96145630 220.67863464]
[367.23693848 212.72257996]
[355.14254761 203.83786011]
[343.74594116 194.07415771]
[333.11087036 183.48608398]
[323.29678345 172.13285828]
[314.35855103 160.07797241]
[306.34619141 147.38882446]
[299.30450439 134.13639832]
[293.27288818 120.39479828]
[288.28503418 106.24087524]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 69]
[2 68]
[3 67]
[4 66]
[5 65]
[6 60]
[7 59]
[8 58]
[9 57]
[10 56]
[11 55]
[17 26]
[18 25]
[19 24]
[30 51]
[31 50]
[32 49]
[33 48]
[34 47]
[35 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
