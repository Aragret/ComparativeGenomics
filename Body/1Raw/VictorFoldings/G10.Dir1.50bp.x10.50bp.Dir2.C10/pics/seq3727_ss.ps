%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAGCCUAGCCGUUUACUCAAUCCUCUGAUCAGGGUGAGCAUCAAACUCAAACUACGCCCUxxxxxxxxxxAUGACAUUAACACUAUUCUCACCAGACCUCCUAGGCGACCCAGACAAUUAUACCCUAGCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[208.06860352 418.19396973]
[207.13298035 403.22317505]
[206.19735718 388.25238037]
[205.26171875 373.28158569]
[204.32609558 358.31079102]
[203.39045715 343.33999634]
[202.45483398 328.36923218]
[198.59767151 313.87362671]
[191.96917725 300.41766357]
[185.34068298 286.96170044]
[178.71217346 273.50573730]
[166.14714050 265.50765991]
[166.98970032 249.70890808]
[160.36120605 236.25292969]
[153.73271179 222.79696655]
[147.10421753 209.34100342]
[140.47570801 195.88504028]
[133.84721375 182.42907715]
[117.73013306 177.72825623]
[109.81617737 162.54096985]
[115.41240692 145.99952698]
[108.50540924 132.68437195]
[101.59841156 119.36920929]
[90.74197388 119.67867279]
[80.26503754 113.76332092]
[73.72662354 102.28918457]
[58.90886688 104.62029266]
[50.66606522 114.59576416]
[38.23074722 116.20256805]
[28.37601662 109.11795807]
[13.51297092 111.14029694]
[-1.35007632 113.16262817]
[-13.97869205 123.62447357]
[-29.25698280 117.66579437]
[-31.46795464 101.41637421]
[-18.33714676 91.59222412]
[-3.37241077 98.29958344]
[11.49063587 96.27725220]
[26.35368347 94.25491333]
[39.58995056 82.77444458]
[56.57776260 89.80252838]
[71.39552307 87.47142792]
[80.53725433 75.57904816]
[78.97967529 60.66013718]
[77.42209625 45.74122238]
[75.86451721 30.82231140]
[74.30693054 15.90339947]
[72.74935150 0.98448730]
[57.73278046 0.69767678]
[42.86528397 -1.43236661]
[28.37224197 -5.37335205]
[14.47336864 -11.06553555]
[1.37936735 -18.42262459]
[-10.71125984 -27.33308601]
[-21.61522293 -37.66184235]
[-31.16722107 -49.25231171]
[-39.22244644 -61.92878342]
[-45.65878677 -75.49909210]
[-50.37866211 -89.75749969]
[-53.31053162 -104.48786926]
[-54.40993881 -119.46688843]
[-53.66022110 -134.46746826]
[-51.07274628 -149.26222229]
[-46.68673325 -163.62684631]
[-40.56867981 -177.34359741]
[-32.81132889 -190.20451355]
[-23.53228378 -202.01463318]
[-12.87221050 -212.59490967]
[-0.99271321 -221.78497314]
[11.92611790 -229.44548035]
[25.68843651 -235.46031189]
[40.08560944 -239.73828125]
[54.89937973 -242.21453857]
[69.90517426 -242.85153198]
[84.87550354 -241.63963318]
[99.58343506 -238.59718323]
[113.80598450 -233.77030945]
[127.32755280 -227.23220825]
[139.94314575 -219.08197021]
[151.46153259 -209.44316101]
[161.70808411 -198.46191406]
[170.52745056 -186.30468750]
[177.78596497 -173.15577698]
[183.37356567 -159.21453857]
[187.20556641 -144.69229126]
[189.22384644 -129.80921936]
[189.39784241 -114.79091644]
[187.72488403 -99.86507416]
[184.23036194 -85.25794983]
[178.96722412 -71.19100189]
[172.01528931 -57.87747192]
[163.47991943 -45.51918793]
[153.49052429 -34.30350113]
[142.19853210 -24.40044022]
[129.77514648 -15.96013069]
[116.40866852 -9.11052513]
[102.30175781 -3.95546341]
[87.66826630 -0.57309359]
[89.22584534 14.34581852]
[90.78342438 29.26473045]
[92.34100342 44.18364334]
[93.89859009 59.10255432]
[95.45616913 74.02146912]
[119.83163452 88.54143524]
[114.91356659 112.46221161]
[121.82056427 125.77736664]
[128.72756958 139.09252930]
[141.98687744 141.67092896]
[151.19082642 151.28941345]
[153.12532043 164.26370239]
[147.30317688 175.80056763]
[153.93167114 189.25654602]
[160.56018066 202.71250916]
[167.18867493 216.16847229]
[173.81716919 229.62443542]
[180.44567871 243.08039856]
[193.48481750 252.04093933]
[192.16815186 266.87722778]
[198.79664612 280.33319092]
[205.42514038 293.78915405]
[212.05363464 307.24511719]
[213.43072510 292.30847168]
[219.07208252 278.40972900]
[228.49476624 266.73867798]
[240.89215088 258.29446411]
[255.20297241 253.79995728]
[270.20211792 253.63986206]
[284.60559082 257.82794189]
[297.18038940 266.00561523]
[306.85000610 277.47290039]
[312.78671265 291.24804688]
[314.48229980 306.15191650]
[311.79156494 320.90863037]
[304.94491577 334.25488281]
[294.52838135 345.04824829]
[281.43374634 352.36468506]
[266.78195190 355.57791138]
[251.82727051 354.41281128]
[237.84989929 348.96920776]
[226.04638672 339.71301270]
[217.42562866 327.43359375]
[218.36125183 342.40438843]
[219.29689026 357.37518311]
[220.23251343 372.34597778]
[221.16813660 387.31674194]
[222.10377502 402.28753662]
[223.03939819 417.25833130]
[232.55473328 430.61462402]
[225.50028992 445.41891479]
[209.13307190 446.44180298]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 147]
[2 146]
[3 145]
[4 144]
[5 143]
[6 142]
[7 141]
[8 121]
[9 120]
[10 119]
[11 118]
[13 116]
[14 115]
[15 114]
[16 113]
[17 112]
[18 111]
[21 107]
[22 106]
[23 105]
[26 42]
[27 41]
[30 39]
[31 38]
[32 37]
[43 103]
[44 102]
[45 101]
[46 100]
[47 99]
[48 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
