%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCCAAAGACAACCAUCAUUCCCCCUAAAUAAAUUAAAAAAACUAUUAAACCCAUAUAACCUxxxxxxxxxxGUAGUAUAAACUAAUACACCAGUCUUGUAAACCGGAGAUGAAAACCUUUUUCCAAGGACAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[114.26377869 301.71255493]
[114.26377869 286.71255493]
[114.26377869 271.71255493]
[114.26377869 256.71255493]
[114.26377869 241.71255493]
[114.26377869 226.71255493]
[114.26377869 211.71255493]
[114.26377869 196.71255493]
[114.26377869 181.71255493]
[114.26377869 166.71255493]
[110.45592499 152.20393372]
[103.08968353 139.13723755]
[95.72344208 126.07054901]
[81.83840179 109.31108093]
[87.10182190 93.59793091]
[78.18566895 81.53549957]
[69.26952362 69.47306824]
[60.35337067 57.41063309]
[51.43721771 45.34820175]
[38.74353790 53.35305786]
[25.49334145 60.39859009]
[11.75899506 66.44631195]
[-2.38448596 71.46320343]
[-16.85985565 75.42185211]
[-31.58805275 78.30063629]
[-46.48863602 80.08384705]
[-61.48022461 80.76173401]
[-76.48093414 80.33059692]
[-91.40884399 78.79279327]
[-106.18241119 76.15671539]
[-120.72095490 72.43676758]
[-134.94506836 67.65326691]
[-148.77705383 61.83233261]
[-162.14137268 55.00576019]
[-174.96504211 47.21083832]
[-187.17800903 38.49013901]
[-198.71357727 28.89129066]
[-209.50874329 18.46671867]
[-219.50454712 7.27336121]
[-228.64637756 -4.62764740]
[-236.88432312 -17.17130852]
[-244.17340088 -30.28911018]
[-250.47377014 -43.90940857]
[-255.75103760 -57.95781326]
[-259.97637939 -72.35759735]
[-263.12670898 -87.03010559]
[-265.18484497 -101.89521027]
[-266.13949585 -116.87171936]
[-265.98550415 -131.87783813]
[-264.72369385 -146.83160400]
[-262.36096191 -161.65133667]
[-258.91015625 -176.25610352]
[-254.39021301 -190.56614685]
[-248.82574463 -204.50329590]
[-242.24719238 -217.99142456]
[-234.69046021 -230.95687866]
[-226.19682312 -243.32884216]
[-216.81268311 -255.03973389]
[-206.58927917 -266.02560425]
[-195.58245850 -276.22644043]
[-183.85234070 -285.58654785]
[-171.46298218 -294.05477905]
[-158.48204041 -301.58489990]
[-144.98043823 -308.13577271]
[-131.03190613 -313.67160034]
[-116.71262360 -318.16220093]
[-102.10080719 -321.58300781]
[-87.27625275 -323.91534424]
[-72.31993103 -325.14648438]
[-57.31352997 -325.26968384]
[-42.33901215 -324.28430176]
[-27.47816086 -322.19567871]
[-12.81214237 -319.01522827]
[1.57893944 -314.76034546]
[15.61648655 -309.45428467]
[29.22382927 -303.12597656]
[42.32664871 -295.80999756]
[54.85338211 -287.54632568]
[66.73561096 -278.38009644]
[77.90843201 -268.36135864]
[88.31083679 -257.54483032]
[97.88599396 -245.98959351]
[106.58161926 -233.75875854]
[114.35021210 -220.91912842]
[121.14935303 -207.54081726]
[126.94189453 -193.69691467]
[131.69619751 -179.46302795]
[135.38630676 -164.91688538]
[137.99206543 -150.13793945]
[139.49925232 -135.20690918]
[139.89959717 -120.20533752]
[139.19096375 -105.21517181]
[137.37718201 -90.31828308]
[134.46818542 -75.59602356]
[130.47984314 -61.12880707]
[125.43394470 -46.99564743]
[119.35805511 -33.27373886]
[112.28535461 -20.03802490]
[104.25447083 -7.36079550]
[95.30927277 4.68871021]
[85.49860382 16.04467964]
[74.87606049 26.64509392]
[63.49964905 36.43205261]
[72.41580200 48.49448395]
[81.33195496 60.55691528]
[90.24810028 72.61934662]
[99.16425323 84.68177795]
[113.03713226 90.38644409]
[123.62947845 78.33729553]
[139.64654541 79.25009918]
[148.80140686 92.42462158]
[144.07124329 107.75449371]
[129.08462524 113.47995758]
[115.33800507 105.20892334]
[108.79013824 118.70430756]
[116.15637970 131.77099609]
[123.52261353 144.83769226]
[123.97518158 129.84452820]
[127.81049347 115.34313202]
[134.82936096 102.08660889]
[144.66728210 90.76338959]
[156.81336975 81.96153259]
[170.63682556 76.13812256]
[185.41976929 73.59558868]
[200.39450073 74.46596527]
[214.78332520 78.70406342]
[227.83901978 86.08978271]
[238.88357544 96.23956299]
[247.34339905 108.62630463]
[252.77915955 122.60673523]
[254.90856934 137.45481873]
[253.62104797 152.39945984]
[248.98345947 166.66455078]
[241.23663330 179.50926208]
[230.78289795 190.26655579]
[218.16511536 198.37776184]
[204.03858948 203.42166138]
[189.13690186 205.13630676]
[174.23396301 203.43264771]
[160.10371399 198.39915466]
[147.47996521 190.29725647]
[137.01829529 179.54768372]
[129.26377869 166.71255493]
[129.26377869 181.71255493]
[129.26377869 196.71255493]
[129.26377869 211.71255493]
[129.26377869 226.71255493]
[129.26377869 241.71255493]
[129.26377869 256.71255493]
[129.26377869 271.71255493]
[129.26377869 286.71255493]
[129.26377869 301.71255493]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 117]
[12 116]
[13 115]
[15 107]
[16 106]
[17 105]
[18 104]
[19 103]
[108 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
