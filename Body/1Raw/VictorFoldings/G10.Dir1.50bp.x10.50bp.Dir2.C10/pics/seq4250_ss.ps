%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUACUUCUAACCUCCCUGUUCUUAUGAAUUCGAACAGCAUACCCCCGAUUCCGCUACGACCxxxxxxxxxxAGCAGUCCUACUUCUCCUAUCUCUCCCAGUCCUAGCUGCUGGCAUCACUAUACUACUAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[164.00112915 83.69306183]
[150.21873474 89.61302185]
[136.43635559 95.53298950]
[122.65397644 101.45294952]
[108.87159729 107.37290955]
[97.17197418 116.76007843]
[88.40576172 128.93191528]
[79.63955688 141.10374451]
[70.87335205 153.27558899]
[62.10714340 165.44741821]
[53.34093475 177.61926270]
[57.36222839 192.73095703]
[50.68233109 206.87001038]
[36.45528793 213.36039734]
[21.39867210 209.13757324]
[12.62175846 196.19540405]
[14.26873684 180.64479065]
[25.56195450 169.82826233]
[41.16910172 168.85305786]
[49.93530655 156.68121338]
[58.70151520 144.50938416]
[67.46772003 132.33753967]
[76.23392487 120.16570282]
[85.00013733 107.99386597]
[77.54522705 94.97755432]
[62.61091614 96.37985992]
[47.67660904 97.78216553]
[32.74230194 99.18447113]
[17.80799484 100.58676910]
[2.87368727 101.98907471]
[-3.45561814 115.98320007]
[-15.94336796 124.92476654]
[-31.23042107 126.40854645]
[-45.20463562 120.03540802]
[-54.10701752 107.51969147]
[-55.54287338 92.22806549]
[-49.12596130 78.27389526]
[-36.58240509 69.41078949]
[-21.28635025 68.02287292]
[-7.35236359 74.48348999]
[1.47138369 87.05477142]
[16.40569115 85.65246582]
[31.33999825 84.25016022]
[46.27430725 82.84785461]
[61.20861435 81.44555664]
[76.14292145 80.04325104]
[84.87158966 78.49388123]
[92.59487915 79.83177185]
[98.48900604 83.39330292]
[102.01230621 88.30600739]
[102.95162964 93.59053040]
[116.73401642 87.67057037]
[130.51640320 81.75060272]
[144.29878235 75.83064270]
[158.08116150 69.91068268]
[153.69877625 57.23119736]
[150.19665527 44.28111267]
[147.59130859 31.12146568]
[145.89495850 17.81427193]
[145.11557007 4.42224646]
[145.25682068 -8.99150276]
[146.31799316 -22.36376190]
[148.29405212 -35.63151932]
[151.17568970 -48.73225021]
[154.94927979 -61.60423279]
[159.59700012 -74.18680573]
[165.09695435 -86.42069244]
[171.42318726 -98.24824524]
[178.54586792 -109.61373901]
[186.43139648 -120.46363831]
[195.04260254 -130.74681091]
[204.33886719 -140.41484070]
[214.27639771 -149.42216492]
[224.80830383 -157.72636414]
[235.88497925 -165.28833008]
[247.45417786 -172.07244873]
[259.46139526 -178.04675293]
[271.85000610 -183.18313599]
[284.56164551 -187.45741272]
[297.53637695 -190.84947205]
[310.71307373 -193.34333801]
[324.02960205 -194.92729187]
[337.42327881 -195.59390259]
[350.83090210 -195.34004211]
[364.18933105 -194.16694641]
[377.43560791 -192.08016968]
[390.50732422 -189.08956909]
[403.34289551 -185.20924377]
[415.88180542 -180.45753479]
[428.06497192 -174.85685730]
[439.83505249 -168.43359375]
[451.13653564 -161.21807861]
[461.91622925 -153.24432373]
[472.12329102 -144.54991150]
[481.70968628 -135.17585754]
[490.63021851 -125.16632843]
[498.84292603 -114.56853485]
[506.30908203 -103.43242645]
[512.99353027 -91.81049347]
[518.86480713 -79.75752258]
[523.89520264 -67.33032227]
[528.06115723 -54.58745956]
[531.34295654 -41.58900070]
[533.72528076 -28.39620399]
[535.19677734 -15.07124519]
[535.75067139 -1.67691922]
[550.74334717 -1.20887709]
[565.73602295 -0.74083495]
[580.72875977 -0.27279282]
[589.38537598 -13.04252815]
[603.58062744 -19.08396149]
[618.78479004 -16.46929359]
[630.14630127 -6.03285408]
[634.03979492 8.89512539]
[629.22277832 23.55118179]
[617.23236084 33.25862122]
[601.89471436 34.91983414]
[588.10394287 28.00473213]
[580.26068115 14.71990299]
[565.26800537 14.25186157]
[550.27532959 13.78381920]
[535.28259277 13.31577682]
[533.35192871 30.30722237]
[529.94213867 47.06503296]
[525.07916260 63.46068573]
[518.80041504 79.36844635]
[511.15383911 94.66629028]
[502.19802856 109.23688507]
[492.00164795 122.96846771]
[480.64276123 135.75569153]
[468.20843506 147.50045776]
[454.79397583 158.11265564]
[440.50222778 167.51083374]
[425.44268799 175.62289429]
[409.73083496 182.38653564]
[393.48712158 187.74984741]
[376.83605957 191.67161560]
[359.90533447 194.12170410]
[342.82476807 195.08126831]
[325.72531128 194.54286194]
[308.73809814 192.51052856]
[291.99340820 188.99980164]
[275.61965942 184.03750610]
[259.74240112 177.66165161]
[244.48344421 169.92105103]
[229.95979309 160.87498474]
[216.28289795 150.59275818]
[203.55764771 139.15316772]
[191.88169861 126.64386749]
[181.34460449 113.16073608]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 55]
[2 54]
[3 53]
[4 52]
[5 51]
[6 24]
[7 23]
[8 22]
[9 21]
[10 20]
[11 19]
[25 46]
[26 45]
[27 44]
[28 43]
[29 42]
[30 41]
[106 122]
[107 121]
[108 120]
[109 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
