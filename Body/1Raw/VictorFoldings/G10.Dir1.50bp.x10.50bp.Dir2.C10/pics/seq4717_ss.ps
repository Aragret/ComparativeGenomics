%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCGCACUGAUUUUUUACCUGAGUAGGCCUAGAAAUAAACAUGCUAGCUUUUAUUCCAGUUCUxxxxxxxxxxAGGCACAUACUUCCUAUUCUACACCCUAGUAGGCUCCCUUCCCCUACUCAUCGCACUAAUUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[68.45912933 500.29467773]
[68.45912933 485.29467773]
[68.45912933 470.29467773]
[68.45912933 455.29467773]
[68.45912933 440.29467773]
[68.45912933 425.29467773]
[68.45912933 410.29467773]
[68.45912933 395.29467773]
[68.45912933 380.29467773]
[68.45912933 365.29467773]
[55.80343628 363.07049561]
[43.66860580 358.83532715]
[32.37203598 352.69891357]
[22.20936012 344.82077026]
[13.44671249 335.40597534]
[6.31376791 324.69985962]
[0.99771100 312.98162842]
[-2.36167097 300.55709839]
[-3.67566514 287.75067139]
[-2.90897489 274.89682007]
[-0.08066667 262.33151245]
[4.73630142 250.38327026]
[11.41696167 239.36465454]
[19.78758240 229.56407166]
[29.63017654 221.23825073]
[40.68819046 214.60546875]
[52.67317963 209.83985901]
[65.27233887 207.06686401]
[78.15667725 206.35986328]
[79.97633362 191.47065735]
[81.79598999 176.58143616]
[83.61565399 161.69221497]
[85.43531036 146.80299377]
[87.25496674 131.91377258]
[89.07462311 117.02455139]
[85.02130890 102.58258057]
[75.71998596 90.81459808]
[66.41866302 79.04661560]
[57.11733627 67.27864075]
[46.67318726 56.51203537]
[35.19338608 46.85728836]
[23.71358299 37.20254135]
[12.23378086 27.54779434]
[0.27970728 18.48688126]
[-12.11795044 10.04306221]
[-24.51560783 1.59924352]
[-36.91326523 -6.84457541]
[-49.31092453 -15.28839397]
[-63.11055374 -8.54555988]
[-78.43168640 -9.62191772]
[-91.15300751 -18.22793198]
[-97.85255432 -32.04862976]
[-96.72817993 -47.36631012]
[-88.08232880 -60.06059647]
[-74.24069977 -66.71678925]
[-58.92662048 -65.54440308]
[-46.25949860 -56.85880661]
[-39.64672470 -42.99638367]
[-40.86710358 -27.68605232]
[-28.46944809 -19.24223328]
[-16.07178879 -10.79841423]
[-3.67413163 -2.35459518]
[8.72352600 6.08922386]
[8.87401485 -8.91002178]
[20.56568146 -18.30709267]
[35.24629974 -15.22821236]
[42.17727661 -1.92552412]
[36.28874207 11.87031460]
[21.88852692 16.06799126]
[33.36832809 25.72273827]
[44.84813309 35.37748337]
[56.32793427 45.03223038]
[53.32023239 30.33686829]
[57.93581390 16.06464195]
[68.97886658 5.91323566]
[83.58832550 2.51269531]
[97.97914886 6.74404097]
[108.42292023 17.51100540]
[112.21385956 32.02406311]
[108.36978912 46.52313614]
[97.88665009 57.25177765]
[83.48042297 61.43038177]
[68.88531494 57.97731400]
[78.18663788 69.74529266]
[87.48796844 81.51327515]
[96.78929138 93.28125763]
[96.07441711 86.80332184]
[97.34641266 80.08616638]
[100.63871002 73.59618378]
[105.88739777 67.80057526]
[118.28505707 59.35675812]
[130.68270874 50.91294098]
[143.08036804 42.46912003]
[139.32296753 27.78383255]
[140.81790161 12.69937134]
[147.38467407 -0.96273923]
[158.23031616 -11.55273438]
[172.04515076 -17.79182053]
[187.16096497 -18.92659569]
[201.75247192 -14.82003403]
[214.05766296 -5.96801949]
[222.59062195 6.56052256]
[226.32096863 21.25271034]
[224.79821777 36.33438873]
[218.20628357 49.98437500]
[207.34114075 60.55436707]
[193.51484680 66.76798248]
[178.39695740 67.87490082]
[163.81304932 63.74145508]
[151.52418518 54.86677933]
[139.12652588 63.31059647]
[126.72887421 71.75441742]
[114.33121490 80.19823456]
[117.79592896 94.79261017]
[132.66593933 96.76306152]
[143.25868225 85.42404175]
[158.49966431 82.50989532]
[172.52841187 89.14118195]
[179.95057678 102.76803589]
[177.91220093 118.15064240]
[167.19708252 129.37408447]
[151.92538452 132.12271118]
[137.96940613 125.33963776]
[130.69549561 111.63307190]
[115.82547760 109.66262054]
[103.96384430 118.84421539]
[102.14418793 133.73342896]
[100.32453156 148.62265015]
[98.50486755 163.51187134]
[96.68521118 178.40109253]
[94.86555481 193.29031372]
[93.04589844 208.17953491]
[109.48230743 213.73873901]
[124.32411194 222.71517944]
[136.87135315 234.68254089]
[146.53292847 249.07351685]
[152.85446167 265.20672607]
[155.53961182 282.31890869]
[154.46406555 299.60113525]
[149.68115234 316.23699951]
[141.41934204 331.44116211]
[130.07122803 344.49639893]
[116.17493439 354.78759766]
[100.38858795 361.83050537]
[83.45912933 365.29467773]
[83.45912933 380.29467773]
[83.45912933 395.29467773]
[83.45912933 410.29467773]
[83.45912933 425.29467773]
[83.45912933 440.29467773]
[83.45912933 455.29467773]
[83.45912933 470.29467773]
[83.45912933 485.29467773]
[83.45912933 500.29467773]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[29 132]
[30 131]
[31 130]
[32 129]
[33 128]
[34 127]
[35 126]
[36 86]
[37 85]
[38 84]
[39 83]
[40 72]
[41 71]
[42 70]
[43 69]
[44 63]
[45 62]
[46 61]
[47 60]
[48 59]
[90 113]
[91 112]
[92 111]
[93 110]
[114 125]
[115 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
