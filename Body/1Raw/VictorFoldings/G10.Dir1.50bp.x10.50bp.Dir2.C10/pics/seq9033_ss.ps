%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCCUACCCCCCAAUUAGGAGGGCACUGGCCCCCAACAGGCAUCACCCCGCUAAAUCCCCUAGxxxxxxxxxxCCUUUUCCUCCGACCCCCUAACAACCCCCCUCCUAAUACUAACUACCUGACUCCUACCCCUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 303.28244019]
[92.50000000 288.28244019]
[92.50000000 273.28244019]
[92.50000000 258.28244019]
[92.50000000 243.28244019]
[92.50000000 228.28244019]
[92.50000000 213.28244019]
[92.50000000 198.28244019]
[92.50000000 183.28244019]
[92.50000000 168.28244019]
[76.57678223 164.57626343]
[61.98032761 157.21229553]
[49.53743362 146.60762024]
[39.95289612 133.36296082]
[33.76961899 118.22850037]
[31.33784294 102.06153107]
[32.79531097 85.77778625]
[38.05946732 70.29962921]
[46.83213425 56.50379944]
[58.61639786 45.17173004]
[72.74475861 36.94531250]
[88.41694641 32.29051590]
[87.51702881 17.31753349]
[85.12605286 2.50931835]
[81.26793671 -11.98602295]
[77.40981293 -26.48136330]
[73.55169678 -40.97670364]
[69.69357300 -55.47204590]
[65.83545685 -69.96738434]
[61.97733688 -84.46273041]
[58.11921692 -98.95806885]
[54.26109695 -113.45340729]
[50.40297699 -127.94875336]
[35.63911438 -125.25273895]
[20.70772362 -123.73825836]
[5.70320797 -123.41486359]
[-9.27956963 -124.28461456]
[-24.14588165 -126.34201050]
[-38.80173492 -129.57403564]
[-53.15447235 -133.96026611]
[-67.11334991 -139.47297668]
[-80.59011078 -146.07728577]
[-93.49954987 -153.73146057]
[-105.76005554 -162.38710022]
[-117.29410553 -171.98948669]
[-128.02877808 -182.47792053]
[-137.89619446 -193.78605652]
[-146.83398438 -205.84242249]
[-154.78562927 -218.57078552]
[-161.70086670 -231.89068604]
[-167.53596497 -245.71789551]
[-172.25404358 -259.96499634]
[-175.82525635 -274.54190063]
[-178.22703552 -289.35647583]
[-179.44418335 -304.31506348]
[-179.46903992 -319.32302856]
[-178.30140686 -334.28555298]
[-175.94868469 -349.10797119]
[-172.42573547 -363.69665527]
[-167.75486755 -377.95928955]
[-161.96557617 -391.80572510]
[-155.09446716 -405.14843750]
[-147.18499756 -417.90307617]
[-138.28717041 -429.98895264]
[-128.45724487 -441.32971191]
[-117.75735474 -451.85360718]
[-106.25515747 -461.49414062]
[-94.02337646 -470.19030762]
[-81.13934326 -477.88717651]
[-67.68451691 -484.53607178]
[-53.74396896 -490.09497070]
[-39.40583420 -494.52868652]
[-24.76075745 -497.80920410]
[-9.90133858 -499.91580200]
[5.07847691 -500.83514404]
[20.08398247 -500.56143188]
[35.02030563 -499.09640503]
[49.79301071 -496.44927979]
[64.30870056 -492.63681030]
[78.47560120 -487.68313599]
[92.20414734 -481.61953735]
[105.40753937 -474.48437500]
[118.00229645 -466.32275391]
[129.90878296 -457.18624878]
[141.05174255 -447.13265991]
[151.36071777 -436.22555542]
[160.77050781 -424.53384399]
[169.22164917 -412.13150024]
[176.66069031 -399.09689331]
[183.04061890 -385.51248169]
[188.32107544 -371.46411133]
[192.46868896 -357.04061890]
[195.45724487 -342.33316040]
[197.26782227 -327.43478394]
[197.88900757 -312.43963623]
[197.31683350 -297.44256592]
[195.55494690 -282.53833008]
[192.61448669 -267.82119751]
[188.51402283 -253.38423157]
[183.27951050 -239.31866455]
[176.94401550 -225.71347046]
[169.54760742 -212.65463257]
[161.13703918 -200.22471619]
[151.76550293 -188.50233459]
[141.49223328 -177.56158447]
[130.38220215 -167.47163391]
[118.50563049 -158.29627991]
[105.93761444 -150.09353638]
[92.75761414 -142.91525269]
[79.04895782 -136.80682373]
[64.89831543 -131.80686951]
[68.75643921 -117.31153107]
[72.61455536 -102.81618500]
[76.47267914 -88.32084656]
[80.33079529 -73.82550812]
[84.18891907 -59.33016586]
[88.04703522 -44.83482361]
[91.90515900 -30.33948326]
[95.76327515 -15.84414291]
[99.62139893 -1.34880161]
[105.56832886 -15.11956596]
[117.52435303 -24.17790794]
[132.39067078 -26.17606163]
[146.31419373 -20.59614182]
[155.68618774 -8.88436604]
[158.07760620 5.92377853]
[152.86862183 19.99028015]
[141.40931702 29.66934967]
[126.66974640 32.45233917]
[112.47014618 27.61795044]
[102.49001312 16.41761780]
[103.38993073 31.39059830]
[116.87670135 33.41232681]
[129.69831848 38.05848312]
[141.34942627 45.14595032]
[151.37081909 54.39538956]
[159.36752319 65.44225311]
[165.02438354 77.85114288]
[168.11840820 91.13298798]
[168.52767944 104.76431274]
[166.23605347 118.20786285]
[161.33386230 130.93377686]
[154.01431274 142.44050598]
[144.56587219 152.27450562]
[133.36096191 160.04821777]
[120.84119415 165.45523071]
[107.50000000 168.28244019]
[107.50000000 183.28244019]
[107.50000000 198.28244019]
[107.50000000 213.28244019]
[107.50000000 228.28244019]
[107.50000000 243.28244019]
[107.50000000 258.28244019]
[107.50000000 273.28244019]
[107.50000000 288.28244019]
[107.50000000 303.28244019]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 156]
[2 155]
[3 154]
[4 153]
[5 152]
[6 151]
[7 150]
[8 149]
[9 148]
[10 147]
[22 132]
[23 131]
[24 120]
[25 119]
[26 118]
[27 117]
[28 116]
[29 115]
[30 114]
[31 113]
[32 112]
[33 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
