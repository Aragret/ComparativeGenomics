%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUGAUAUUUCCUAUUCGCCUACACAAUUCUCCGAUCCGUCCCUAACAAACUAGGAGGCGUxxxxxxxxxxUCCUCAUCCUAGCAAUAAUCCCCAUCCUCCAUAUAUCCAAACAACAAAGCAUAAUAUUUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[97.58319855 222.24708557]
[96.95922852 207.26007080]
[96.33525085 192.27304077]
[95.71127319 177.28602600]
[95.08729553 162.29901123]
[94.46331787 147.31199646]
[93.83934021 132.32498169]
[93.21536255 117.33796692]
[85.09381866 104.72683716]
[71.70753479 97.95872498]
[58.32124710 91.19060516]
[44.93496323 84.42249298]
[31.54867935 77.65438080]
[18.16239357 70.88626099]
[7.59871674 83.47586823]
[-5.63290167 93.20971680]
[-20.78159904 99.54018402]
[-36.98884201 102.11264038]
[-53.33708191 100.78531647]
[-68.90170288 95.63711548]
[-82.80332184 86.96293640]
[-94.25743866 75.25677490]
[-102.61877441 61.18359756]
[-107.41754150 45.54156494]
[-108.38591003 29.21676636]
[-105.47289276 13.13302994]
[-119.25527954 7.21306705]
[-133.03765869 1.29310405]
[-146.82003784 -4.62685919]
[-160.60241699 -10.54682255]
[-151.90866089 1.67686689]
[-146.93545532 15.82844448]
[-146.07089233 30.80350876]
[-149.38246155 45.43339157]
[-156.61172485 58.57636642]
[-167.19448853 69.20674896]
[-180.30488586 76.49491882]
[-194.91975403 79.87212372]
[-209.89855957 79.07478333]
[-224.07231140 74.16513824]
[-236.33489990 65.52632904]
[-245.72932434 53.83254242]
[-251.52246094 39.99637222]
[-253.26219177 25.09760284]
[-250.81274414 10.29894733]
[-244.36528015 -3.24469543]
[-234.42297363 -14.47636700]
[-221.76171875 -22.51953888]
[-207.36961365 -26.74651337]
[-192.36982727 -26.82741547]
[-177.93049622 -22.75483894]
[-188.14396667 -33.74050522]
[-198.35745239 -44.72616959]
[-208.57092285 -55.71183395]
[-224.37188721 -56.03659058]
[-235.25477600 -67.49687958]
[-234.76298523 -83.29351044]
[-223.18827820 -94.05463409]
[-207.39772034 -93.39585114]
[-196.75958252 -81.70801544]
[-197.58526611 -65.92531586]
[-187.37178040 -54.93964767]
[-177.15830994 -43.95398331]
[-166.94482422 -32.96831894]
[-154.68246460 -24.32920265]
[-140.90007019 -18.40924072]
[-127.11769867 -12.48927689]
[-113.33531189 -6.56931400]
[-99.55293274 -0.64935112]
[-91.70040894 -11.82180691]
[-81.78969574 -21.22454071]
[-70.21073914 -28.48464966]
[-57.41970444 -33.31358337]
[-43.92100525 -35.51863480]
[-30.24741745 -35.01060104]
[-16.93905067 -31.80740929]
[-4.52200460 -26.03348923]
[6.51241541 -17.91493607]
[15.72714615 -7.77066612]
[22.75667763 4.00012112]
[27.32154655 16.93364525]
[29.23945045 30.51981544]
[28.43252754 44.22235870]
[24.93050957 57.49998093]
[38.31679535 64.26809692]
[51.70307922 71.03620911]
[65.08936310 77.80432129]
[78.47564697 84.57244110]
[91.86193085 91.34055328]
[96.95066071 83.56048584]
[108.14688110 80.04225159]
[121.59865570 84.83117676]
[136.53295898 83.42887115]
[137.67459106 68.43537903]
[141.33386230 53.85053635]
[147.40551758 40.09397125]
[155.71484375 27.56149101]
[166.02276611 16.61367607]
[178.03271484 7.56552124]
[191.39913940 0.67735696]
[205.73745728 -3.85262942]
[220.63511658 -5.89410114]
[235.66349792 -5.38832092]
[250.39019775 -2.34984136]
[264.39151001 3.13391471]
[277.26455688 10.90516853]
[288.63897705 20.74032593]
[298.18753052 32.35641098]
[305.63543701 45.41920090]
[310.76846313 59.55286026]
[313.43884277 74.35073090]
[313.56982422 89.38704681]
[311.15759277 104.22918701]
[306.27157593 118.45011139]
[299.05233765 131.64065552]
[289.70758057 143.42131042]
[278.50619507 153.45310974]
[265.77044678 161.44741821]
[251.86680603 167.17424011]
[237.19526672 170.46878052]
[222.17797852 171.23626709]
[207.24700928 169.45462036]
[192.83197021 165.17507935]
[179.34757996 158.52079773]
[167.18185425 149.68321228]
[156.68478394 138.91662598]
[148.15840149 126.53078461]
[141.84805298 112.88206482]
[137.93527222 98.36318207]
[123.00096130 99.76548004]
[136.77934265 105.69473267]
[151.76066589 106.44313049]
[164.05894470 115.03105164]
[169.92146301 128.83796692]
[167.55931091 143.65080261]
[157.69329834 154.94955444]
[143.33395386 159.28649902]
[128.86289978 155.33824158]
[118.69587708 144.30955505]
[115.93512726 129.56718445]
[108.20237732 116.71398926]
[108.82635498 131.70100403]
[109.45033264 146.68801880]
[110.07431030 161.67503357]
[110.69828796 176.66204834]
[111.32226562 191.64906311]
[111.94624329 206.63609314]
[112.57022095 221.62310791]
[119.27021027 237.19700623]
[106.15968323 247.94644165]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 148]
[2 147]
[3 146]
[4 145]
[5 144]
[6 143]
[7 142]
[8 141]
[9 89]
[10 88]
[11 87]
[12 86]
[13 85]
[14 84]
[26 69]
[27 68]
[28 67]
[29 66]
[30 65]
[51 64]
[52 63]
[53 62]
[54 61]
[92 130]
[93 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
