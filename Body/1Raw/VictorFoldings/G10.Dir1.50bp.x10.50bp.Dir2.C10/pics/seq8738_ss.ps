%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACUAUCCUAGAAAUCGCUGUCGCCUUAAUCCAAGCCUACGUUUUCACACUUCUAGUAAGCxxxxxxxxxxCCUUCCAAACAACAAUCCCCCUCUACCUAAAACUCACAGCCCUCGCUGUCACUUUCCUAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[101.52775574 286.37063599]
[101.52775574 271.37063599]
[101.52775574 256.37063599]
[101.52775574 241.37063599]
[101.52775574 226.37063599]
[101.52775574 211.37063599]
[101.52775574 196.37063599]
[101.52775574 181.37063599]
[101.52775574 166.37063599]
[101.52775574 151.37063599]
[88.28265381 150.41426086]
[75.63243866 146.07603455]
[66.36748505 157.87266541]
[57.10253525 169.66931152]
[52.07438660 185.86047363]
[35.12403870 185.51098633]
[30.76754570 169.12632751]
[45.30589676 160.40435791]
[54.57084656 148.60771179]
[63.83579636 136.81108093]
[60.24454117 130.22679138]
[49.93985748 141.12695312]
[36.38894653 134.69477844]
[38.31903076 119.81946564]
[53.06203079 117.05820465]
[49.47077560 110.47391510]
[34.53646851 111.87622070]
[19.60216141 113.27851868]
[15.15685844 127.81494904]
[5.48322678 139.54052734]
[-7.94357395 146.66720581]
[-23.07605553 148.10820007]
[-37.60662079 143.64378357]
[-49.31946945 133.95472717]
[-56.42847443 120.51856232]
[-57.84955978 105.38420105]
[-53.36602783 90.85951996]
[-43.66158295 79.15943146]
[-30.21607780 72.06810760]
[-15.07985783 70.66692352]
[-0.56108701 75.16956329]
[11.12622833 84.88938904]
[18.19985771 98.34421539]
[33.13416672 96.94190979]
[48.06847382 95.53960419]
[53.54820251 80.47299957]
[63.10794449 68.27690887]
[75.54140472 59.95664978]
[89.43150330 56.06453705]
[103.30820465 56.67092514]
[107.01436615 42.13598633]
[110.72052765 27.60105133]
[114.42668915 13.06611538]
[118.13285065 -1.46882093]
[104.08900452 -6.78392649]
[90.72857666 -13.63805294]
[78.21959686 -21.94500160]
[66.71936798 -31.60030365]
[56.37253189 -42.48253250]
[47.30920029 -54.45483780]
[39.64335632 -67.36664581]
[33.47140884 -81.05558777]
[28.87097359 -95.34950256]
[25.89990807 -110.06863403]
[24.59557533 -125.02787018]
[24.97437859 -140.03907776]
[27.03155518 -154.91348267]
[30.74123192 -169.46403503]
[36.05675888 -183.50772095]
[42.91128159 -196.86793518]
[51.21860504 -209.37667847]
[60.87425232 -220.87661743]
[71.75679016 -231.22312927]
[83.72936249 -240.28610229]
[96.64140320 -247.95155334]
[110.33052826 -254.12309265]
[124.62458038 -258.72311401]
[139.34379578 -261.69372559]
[154.30307007 -262.99761963]
[169.31427002 -262.61834717]
[184.18862915 -260.56072998]
[198.73905945 -256.85061646]
[212.78259277 -251.53468323]
[226.14260864 -244.67974854]
[238.65109253 -236.37205505]
[250.15072632 -226.71606445]
[260.49691772 -215.83322144]
[269.55953979 -203.86038208]
[277.22460938 -190.94810486]
[283.39575195 -177.25878906]
[287.99533081 -162.96459961]
[290.96551514 -148.24530029]
[292.26895142 -133.28598022]
[291.88925171 -118.27479553]
[289.83117676 -103.40051270]
[286.12063599 -88.85018921]
[280.80426025 -74.80681610]
[273.94894409 -61.44700623]
[265.64086914 -48.93877029]
[255.98452759 -37.43941116]
[245.10137939 -27.09354973]
[233.12825012 -18.03129196]
[220.21575928 -10.36660862]
[206.52626038 -4.19588804]
[192.23193359 0.40326422]
[177.51254272 3.37300968]
[162.55319214 4.67600060]
[147.54200745 4.29585075]
[132.66778564 2.23734021]
[128.96162415 16.77227592]
[125.25546265 31.30721283]
[121.54930115 45.84214783]
[117.84313965 60.37708664]
[137.33491516 72.95507812]
[148.47296143 94.83572388]
[147.03858948 120.70378876]
[160.94114685 126.33574677]
[174.84370422 131.96769714]
[188.74626160 137.59965515]
[202.64881897 143.23161316]
[218.80682373 140.42965698]
[229.10319519 153.19354248]
[222.94590759 168.39288330]
[206.66905212 170.39189148]
[197.01686096 157.13417053]
[183.11430359 151.50221252]
[169.21174622 145.87025452]
[155.30918884 140.23829651]
[141.40663147 134.60635376]
[135.18692017 138.79742432]
[144.68745422 150.40516663]
[154.18798828 162.01290894]
[167.82339478 168.26397705]
[172.16181946 182.62287903]
[164.26911926 195.37849426]
[149.48326111 197.90400696]
[137.80410767 188.49137878]
[137.13023376 173.50703430]
[129.93885803 160.34329224]
[122.74747467 147.17956543]
[116.52775574 151.37063599]
[116.52775574 166.37063599]
[116.52775574 181.37063599]
[116.52775574 196.37063599]
[116.52775574 211.37063599]
[116.52775574 226.37063599]
[116.52775574 241.37063599]
[116.52775574 256.37063599]
[116.52775574 271.37063599]
[116.52775574 286.37063599]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 20]
[13 19]
[14 18]
[26 45]
[27 44]
[28 43]
[50 113]
[51 112]
[52 111]
[53 110]
[54 109]
[116 129]
[117 128]
[118 127]
[119 126]
[120 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
