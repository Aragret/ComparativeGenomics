%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCAAAUUUUAUCUUUUGGCGGUAUGCACUUUUAACAGUCACCCCCCAACUAACACAUUAUUxxxxxxxxxxAAUCUCCCUACAAAUCUCCUUAAUUAUAACAUUCACAGCCACAGAACUAAUCAUAUUUUAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[106.18204498 425.67248535]
[106.18204498 410.67248535]
[106.18204498 395.67248535]
[106.18204498 380.67248535]
[106.18204498 365.67248535]
[106.18204498 350.67248535]
[106.18204498 335.67248535]
[106.18204498 320.67248535]
[106.18204498 305.67248535]
[106.18204498 290.67248535]
[89.46610260 285.19955444]
[75.57612610 274.37030029]
[66.16633606 259.45416260]
[62.36428070 242.20858765]
[64.63565826 224.67178345]
[72.72740173 208.92199707]
[85.69573212 196.83114624]
[102.01622009 189.84230042]
[100.78560638 174.89286804]
[99.55499268 159.94343567]
[98.01770020 145.02241516]
[96.17437744 130.13610840]
[94.33105469 115.24980164]
[85.57101440 107.51649475]
[84.25417328 95.90579987]
[91.05983734 86.40709686]
[89.52254486 71.48608398]
[87.98525238 56.56506348]
[86.44795990 41.64404678]
[77.33707428 28.70950699]
[83.72927094 15.25628567]
[82.19197845 0.33526963]
[80.34864807 -14.55103779]
[78.20007324 -29.39636040]
[76.05149078 -44.24168396]
[61.07204819 -43.30942917]
[46.06646347 -43.60124588]
[31.13459206 -45.11520004]
[16.37580872 -47.84120560]
[1.88833237 -51.76113129]
[-12.23142529 -56.84888458]
[-25.88949776 -63.07061005]
[-38.99499130 -70.38489532]
[-51.46068954 -78.74308014]
[-63.20363617 -88.08952332]
[-74.14568329 -98.36203003]
[-84.21400452 -109.49224854]
[-93.34160614 -121.40608978]
[-101.46773529 -134.02427673]
[-108.53832245 -147.26284790]
[-114.50630188 -161.03369141]
[-119.33197021 -175.24514771]
[-122.98320007 -189.80267334]
[-125.43570709 -204.60935974]
[-126.67315674 -219.56668091]
[-126.68732452 -234.57510376]
[-125.47810364 -249.53472900]
[-123.05355072 -264.34600830]
[-119.42980194 -278.91040039]
[-114.63096619 -293.13095093]
[-108.68898773 -306.91302490]
[-101.64340210 -320.16491699]
[-93.54110718 -332.79843140]
[-84.43601227 -344.72949219]
[-74.38871002 -355.87869263]
[-63.46607590 -366.17181396]
[-51.74079132 -375.54040527]
[-39.29089355 -383.92211914]
[-26.19922638 -391.26110840]
[-12.55292225 -397.50860596]
[1.55720758 -402.62301636]
[16.03726006 -406.57028198]
[30.79087067 -409.32412720]
[45.71985626 -410.86627197]
[60.72486496 -411.18640137]
[75.70603943 -410.28244019]
[90.56368256 -408.16033936]
[105.19892120 -404.83425903]
[119.51434326 -400.32635498]
[133.41470337 -394.66659546]
[146.80747986 -387.89263916]
[159.60354614 -380.04959106]
[171.71774292 -371.18960571]
[183.06945801 -361.37170410]
[193.58314514 -350.66119385]
[203.18884277 -339.12933350]
[211.82260132 -326.85290527]
[219.42700195 -313.91360474]
[225.95140076 -300.39749146]
[231.35240173 -286.39456177]
[235.59405518 -271.99798584]
[238.64813232 -257.30358887]
[240.49429321 -242.40914917]
[241.12028503 -227.41378784]
[240.52191162 -212.41729736]
[238.70317078 -197.51947021]
[235.67616272 -182.81947327]
[231.46104431 -168.41511536]
[226.08584595 -154.40226746]
[219.58633423 -140.87417603]
[212.00578308 -127.92086792]
[203.39463806 -115.62855530]
[193.81021118 -104.07904053]
[183.31626892 -93.34917450]
[171.98265076 -83.51038361]
[159.88478088 -74.62812042]
[147.10317993 -66.76151276]
[133.72290039 -59.96291351]
[119.83300018 -54.27755356]
[105.52590179 -49.74327850]
[90.89681244 -46.39026260]
[93.04539490 -31.54493904]
[95.19396973 -16.69961739]
[98.46532440 -13.14328671]
[99.49732208 -7.47558355]
[97.11299133 -1.20202279]
[98.65028381 13.71899319]
[107.65121460 25.58628273]
[101.36898041 40.10675430]
[102.90627289 55.02777100]
[104.44356537 69.94879150]
[105.98085785 84.86980438]
[116.16576385 98.16654968]
[109.21736145 113.40647888]
[111.06068420 128.29278564]
[112.90401459 143.17909241]
[116.63275146 148.75933838]
[116.89624786 154.51420593]
[114.50443268 158.71282959]
[115.73504639 173.66226196]
[116.96565247 188.61169434]
[129.31388855 190.97816467]
[140.71339417 196.25555420]
[150.48989868 204.12577820]
[158.06655884 214.11755371]
[162.99800110 225.63465881]
[164.99649048 237.99145508]
[163.94873047 250.45373535]
[159.92227173 262.28234863]
[153.16114807 272.77700806]
[144.07115173 281.31777954]
[133.19541931 287.40173340]
[121.18204498 290.67248535]
[121.18204498 305.67248535]
[121.18204498 320.67248535]
[121.18204498 335.67248535]
[121.18204498 350.67248535]
[121.18204498 365.67248535]
[121.18204498 380.67248535]
[121.18204498 395.67248535]
[121.18204498 410.67248535]
[121.18204498 425.67248535]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[18 131]
[19 130]
[20 129]
[21 126]
[22 125]
[23 124]
[26 122]
[27 121]
[28 120]
[29 119]
[31 117]
[32 116]
[33 113]
[34 112]
[35 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
