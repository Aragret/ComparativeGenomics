%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAACCUCCCUGUUCUUAUGAAUUCGAACAGCAUACCCCCGAUUCCGCUACGACCAACUCxxxxxxxxxxUCAAACUCUACUCCCACUAAUAGCUUUUUGAUGACUUCUAGCAAGCCUCGCUAACCUCGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[161.98963928 77.08689880]
[148.89648438 84.40600586]
[135.80332947 91.72510529]
[122.71017456 99.04421234]
[109.61701965 106.36331940]
[98.95539856 116.91461182]
[91.50048828 129.93092346]
[84.04557800 142.94723511]
[76.59066772 155.96353149]
[69.13575745 168.97984314]
[69.73367310 185.36808777]
[55.69813919 193.84959412]
[41.46771622 185.69932556]
[41.68143463 169.30155945]
[56.11944580 161.52493286]
[63.57435608 148.50862122]
[71.02926636 135.49232483]
[78.48417664 122.47600555]
[85.93908691 109.45970154]
[76.55192566 97.76007843]
[62.22932816 102.21688843]
[47.90673065 106.67370605]
[33.58413315 111.13052368]
[19.26153564 115.58734131]
[4.93893766 120.04415131]
[1.63667631 135.04383850]
[-8.73485184 146.37199402]
[-23.38575745 150.98138428]
[-38.37501907 147.63212585]
[-49.67060471 137.22514343]
[-54.23405457 122.55986023]
[-50.83782578 107.58116913]
[-40.39548492 96.31826019]
[-25.71597099 91.80079651]
[-10.74799919 95.24396515]
[0.48212197 105.72155762]
[14.80471897 101.26473999]
[29.12731743 96.80792236]
[43.44991302 92.35111237]
[57.77251053 87.89429474]
[72.09510803 83.43747711]
[81.09004211 80.19595337]
[89.50863647 80.30561829]
[96.29291534 83.15633392]
[100.68413544 87.84017181]
[102.29791260 93.27016449]
[115.39106750 85.95105743]
[128.48422241 78.63195038]
[141.57737732 71.31285095]
[154.67053223 63.99374390]
[149.24484253 52.33166122]
[144.62860107 40.32634354]
[140.84335327 28.03389359]
[137.90676880 15.51175785]
[135.83253479 2.81845260]
[134.63032532 -9.98670959]
[134.30570984 -22.84389305]
[134.86021423 -35.69301987]
[136.29118347 -48.47406006]
[138.59193420 -61.12728882]
[141.75167847 -73.59358978]
[145.75563049 -85.81472778]
[150.58505249 -97.73359680]
[156.21736145 -109.29451752]
[162.62620544 -120.44348907]
[169.78161621 -131.12843323]
[177.65014648 -141.29942322]
[186.19500732 -150.90896606]
[195.37625122 -159.91217041]
[205.15097046 -168.26699829]
[215.47344971 -175.93441772]
[226.29547119 -182.87863159]
[237.56643677 -189.06721497]
[249.23367310 -194.47126770]
[261.24264526 -199.06556702]
[273.53726196 -202.82867432]
[286.06002808 -205.74302673]
[298.75244141 -207.79504395]
[311.55520630 -208.97514343]
[324.40850830 -209.27784729]
[337.25222778 -208.70178223]
[350.02642822 -207.24963379]
[362.67138672 -204.92825317]
[375.12802124 -201.74847412]
[387.33813477 -197.72520447]
[399.24468994 -192.87727356]
[410.79205322 -187.22732544]
[421.92633057 -180.80181885]
[432.59542847 -173.63076782]
[442.74957275 -165.74774170]
[452.34130859 -157.18955994]
[461.32583618 -147.99623108]
[469.66119385 -138.21075439]
[477.30847168 -127.87884521]
[484.23196411 -117.04881287]
[490.39929199 -105.77127075]
[495.78170776 -94.09891510]
[500.35406494 -82.08631134]
[504.09506226 -69.78958893]
[506.98718262 -57.26621628]
[509.01696777 -44.57471085]
[510.17498779 -31.77438354]
[510.45581055 -18.92504311]
[525.43548584 -18.14519882]
[540.41522217 -17.36535263]
[555.39495850 -16.58550835]
[561.29010010 -30.55057907]
[571.60827637 -41.65508270]
[585.10363770 -48.55810165]
[600.14648438 -50.42605972]
[614.92028809 -47.03339386]
[627.64105225 -38.78978348]
[636.77276611 -26.69068146]
[641.21264648 -12.19711876]
[640.42456055 2.94073892]
[634.50366211 16.89492226]
[624.16503906 27.98039436]
[610.65698242 34.85853195]
[595.61071777 36.69876480]
[580.84320068 33.27887726]
[568.13763428 25.01183510]
[559.02825928 12.89592648]
[554.61511230 -1.60579371]
[539.63537598 -2.38563871]
[524.65563965 -3.16548395]
[509.67596436 -3.94532895]
[507.15985107 13.95148849]
[502.93701172 31.52460098]
[497.04629517 48.61162567]
[489.54205322 65.05465698]
[480.49356079 80.70173645]
[469.98425293 95.40824127]
[458.11117554 109.03823853]
[444.98394775 121.46573639]
[430.72378540 132.57583618]
[415.46234131 142.26579285]
[399.34060669 150.44601440]
[382.50744629 157.04081726]
[365.11834717 161.98916626]
[347.33395386 165.24525452]
[329.31857300 166.77888489]
[311.23858643 166.57577515]
[293.26110840 164.63771057]
[275.55218506 160.98249817]
[258.27545166 155.64378357]
[241.59062195 148.67080688]
[225.65182495 140.12786865]
[210.60641479 130.09384155]
[196.59341431 118.66131592]
[183.74240112 105.93583679]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 50]
[2 49]
[3 48]
[4 47]
[5 46]
[6 19]
[7 18]
[8 17]
[9 16]
[10 15]
[20 41]
[21 40]
[22 39]
[23 38]
[24 37]
[25 36]
[103 126]
[104 125]
[105 124]
[106 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
