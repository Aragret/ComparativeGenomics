%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACACUAUACCUAUUAUUCGGCGCAUGAGCUGGAGUCCUAGGCACAGCUCUAAGCCUCCUUAxxxxxxxxxxCCCAACUAAAUACUACCGUAUGGCCCACCAUAAUUACCCCCAUACUCCUUACACUAUUCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[143.26104736 389.91128540]
[143.26104736 374.91128540]
[143.26104736 359.91128540]
[143.26104736 344.91128540]
[143.26104736 329.91128540]
[143.26104736 314.91128540]
[143.26104736 299.91128540]
[143.26104736 284.91128540]
[143.26104736 269.91128540]
[143.26104736 254.91128540]
[139.30444336 240.44250488]
[137.24562073 255.30055237]
[128.14118958 267.22149658]
[114.34885406 273.11825562]
[99.44037628 271.46374512]
[87.27654266 262.68643188]
[81.00737000 249.05934143]
[82.25635529 234.11143494]
[90.70005035 221.71369934]
[104.15183258 215.07672119]
[119.12815094 215.91925049]
[131.74998474 224.02238464]
[126.91017151 209.82463074]
[122.07035065 195.62687683]
[117.23053741 181.42912292]
[112.39071655 167.23136902]
[108.52159882 164.33670044]
[106.46572876 158.95512390]
[107.65670013 152.35026550]
[103.40385437 137.96578979]
[91.77124786 137.21928406]
[80.90814972 132.99224854]
[71.83040619 125.67997742]
[65.38691711 115.96626282]
[62.18023682 104.75948334]
[62.51023483 93.10762787]
[48.57952118 87.54568481]
[34.64880371 81.98374939]
[20.71808815 76.42181396]
[6.78737164 70.85987854]
[-7.14334488 65.29793549]
[-19.32227325 69.66570282]
[-30.83361053 64.69977570]
[-35.69103622 53.57918549]
[-49.50461960 47.73239517]
[-64.85346985 52.40063477]
[-77.99092102 43.19265747]
[-78.83905029 27.17203712]
[-66.74724579 16.62842560]
[-50.99130249 19.64997482]
[-43.65783310 33.91881561]
[-29.84424973 39.76560211]
[-12.60081196 36.64977264]
[-1.58140743 51.36722183]
[12.34930897 56.92916107]
[26.28002548 62.49109650]
[40.21074295 68.05303192]
[54.14145660 73.61497498]
[68.07217407 79.17691040]
[74.94663239 71.27169037]
[83.71347809 65.53644562]
[93.71052551 62.40439224]
[104.18264771 62.11210251]
[108.72993469 47.81797409]
[113.27722168 33.52384186]
[101.99311066 43.40659332]
[88.76452637 50.47797775]
[74.27845001 54.37075806]
[59.28719330 54.88277817]
[44.56927872 51.98744202]
[30.88903999 45.83511734]
[18.95693016 36.74530029]
[9.39260578 25.19005585]
[2.69276762 11.76946831]
[-0.79464751 -2.81949759]
[-0.88852966 -17.81920433]
[2.41599679 -32.45067978]
[8.94731998 -45.95408249]
[18.36625290 -57.62814331]
[30.18364906 -66.86660004]
[43.78580093 -73.18968964]
[58.46632385 -76.26902771]
[73.46281433 -75.94469452]
[87.99648285 -72.23355103]
[101.31254578 -65.32830811]
[112.71948242 -55.58757782]
[121.62490082 -43.51721954]
[127.56631470 -29.74407196]
[130.23518372 -14.98340893]
[129.49290466 -0.00178666]
[125.37964630 14.41881466]
[136.36044312 4.20010805]
[147.34124756 -6.01859951]
[158.32205200 -16.23730659]
[162.61289978 -32.06515121]
[178.53274536 -36.00095749]
[189.70462036 -23.99590302]
[184.63584900 -8.39976120]
[168.54075623 -5.25650406]
[157.55995178 4.96220303]
[146.57914734 15.18091011]
[135.59835815 25.39961815]
[127.57135773 38.07113266]
[123.02406311 52.36526489]
[118.47677612 66.65939331]
[132.94158936 80.82086945]
[138.11605835 100.39133453]
[132.54086304 119.85144043]
[117.78833771 133.71293640]
[122.04118347 148.09742737]
[126.58847046 162.39155579]
[131.42828369 176.58930969]
[136.26811218 190.78706360]
[141.10792542 204.98480225]
[145.94773865 219.18255615]
[152.21714783 232.80953979]
[152.39456177 217.81059265]
[155.84407043 203.21261597]
[162.39904785 189.72067261]
[171.74288940 177.98643494]
[183.42431641 168.57662964]
[196.87911987 161.94577026]
[211.45742798 158.41409302]
[226.45513916 158.15219116]
[241.14787292 161.17269897]
[254.82598877 167.32974243]
[266.82882690 176.32595825]
[276.57669067 187.72679138]
[283.59875488 200.98162842]
[287.55584717 215.45027161]
[288.25683594 230.43388367]
[285.66790771 245.20877075]
[279.91406250 259.06134033]
[271.27322388 271.32247925]
[260.16275024 281.40005493]
[247.11924744 288.80725098]
[232.77270508 293.18637085]
[217.81604004 294.32586670]
[202.97166443 292.17074585]
[188.95655823 286.82504272]
[176.44760132 278.54699707]
[166.04899597 267.73638916]
[158.26104736 254.91128540]
[158.26104736 269.91128540]
[158.26104736 284.91128540]
[158.26104736 299.91128540]
[158.26104736 314.91128540]
[158.26104736 329.91128540]
[158.26104736 344.91128540]
[158.26104736 359.91128540]
[158.26104736 374.91128540]
[158.26104736 389.91128540]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 116]
[22 115]
[23 114]
[24 113]
[25 112]
[26 111]
[29 110]
[30 109]
[36 59]
[37 58]
[38 57]
[39 56]
[40 55]
[41 54]
[44 52]
[45 51]
[63 105]
[64 104]
[65 103]
[91 102]
[92 101]
[93 100]
[94 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
