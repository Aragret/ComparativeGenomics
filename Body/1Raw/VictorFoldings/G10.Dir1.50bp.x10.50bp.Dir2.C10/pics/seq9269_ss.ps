%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACUUCCAAUUAACUAGUUUUGACAACAUUCAAAAAAGAGUAAUAAACUUCGCCUUAAUUUxxxxxxxxxxUAUCAUCACCCGAUGAGGCAACCAGCCAGAACGCCUGAACGCAGGCACAUACUUCCUAUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[131.99813843 332.11993408]
[131.99813843 317.11993408]
[131.99813843 302.11993408]
[131.99813843 287.11993408]
[131.99813843 272.11993408]
[131.99813843 257.11993408]
[131.99813843 242.11993408]
[131.99813843 227.11993408]
[131.99813843 212.11993408]
[131.99813843 197.11993408]
[114.91821289 182.35574341]
[111.79520416 162.50433350]
[121.02881622 147.49227905]
[113.03890228 134.79734802]
[105.04898834 122.10242462]
[73.99351501 112.86486816]
[77.37995911 72.82521057]
[62.73645401 69.57438660]
[48.09295273 66.32355499]
[33.44945145 63.07273102]
[18.80595016 59.82190704]
[4.16244984 56.57107925]
[-24.10790634 74.09695435]
[-39.00980759 75.80964661]
[-47.66044235 85.43359375]
[-60.15183640 86.52172089]
[-69.70332336 79.03330231]
[-84.63763428 80.43560791]
[-99.57193756 81.83791351]
[-114.50624847 83.24021149]
[-129.44055176 84.64251709]
[-144.37486267 86.04482269]
[-154.26220703 98.37429810]
[-169.98078918 100.01806641]
[-182.20503235 90.00091553]
[-183.68252563 74.26584625]
[-173.53669739 62.14818573]
[-157.78688049 60.83713531]
[-145.77716064 71.11051178]
[-130.84286499 69.70821381]
[-115.90855408 68.30590820]
[-100.97424316 66.90360260]
[-86.03993988 65.50129700]
[-71.10562897 64.09899902]
[-57.40325165 53.17906952]
[-40.72249603 60.90774536]
[-25.82059479 59.19505310]
[-21.96343613 44.69945908]
[-34.04342270 35.80710602]
[-46.12341309 26.91475868]
[-62.13653564 27.89424896]
[-72.77896118 15.88931942]
[-69.88673401 0.10912427]
[-55.67851639 -7.34112120]
[-41.05364227 -0.74622649]
[-37.23106384 14.83476925]
[-25.15107536 23.72711945]
[-13.07108593 32.61946869]
[-14.25559139 17.66631126]
[-4.01459312 6.70629406]
[10.98445797 6.87498856]
[20.97636223 18.06256485]
[19.45584297 32.98529816]
[7.41327524 41.92757797]
[22.05677605 45.17840576]
[36.70027924 48.42922974]
[51.34378052 51.68005753]
[65.98728180 54.93088150]
[80.63078308 58.18170929]
[69.33843231 48.30837250]
[55.37519455 42.82858658]
[45.00233459 31.99328613]
[40.13639832 17.80446243]
[41.67645264 2.88373137]
[49.33794403 -10.01206493]
[61.70528793 -18.50022125]
[76.49342346 -21.01241493]
[90.97000122 -17.08447647]
[102.46024323 -7.44215775]
[108.84114075 6.13296986]
[108.93373108 21.13268471]
[102.72141266 34.78485107]
[101.48461914 49.73377228]
[109.73690796 37.20780945]
[117.98919678 24.68184853]
[126.24148560 12.15588760]
[134.49377441 -0.37007457]
[134.91923523 -16.76370239]
[149.45648193 -24.35322189]
[163.15081787 -15.33118916]
[161.91470337 1.02130473]
[147.01972961 7.88221455]
[138.76744080 20.40817642]
[130.51515198 32.93413925]
[122.26287079 45.46010208]
[114.01058197 57.98606110]
[123.99330139 69.18183136]
[137.37959290 62.41371536]
[150.76586914 55.64559937]
[157.11700439 40.91322708]
[172.63237000 36.83244324]
[185.40992737 46.53366852]
[185.64781189 62.57495880]
[173.16354370 72.65080261]
[157.53399658 69.03188324]
[144.14770508 75.79999542]
[130.76141357 82.56811523]
[128.92591858 102.26569366]
[117.74391174 114.11251068]
[125.73383331 126.80743408]
[133.72375488 139.50236511]
[158.22380066 139.86593628]
[174.64006042 164.34086609]
[189.13565063 168.19802856]
[203.63124084 172.05517578]
[218.12684631 175.91233826]
[232.62243652 179.76950073]
[248.30584717 174.97755432]
[260.11129761 186.36013794]
[255.89436340 202.20783997]
[239.99305725 206.21788025]
[228.76527405 194.26509094]
[214.26968384 190.40794373]
[199.77409363 186.55078125]
[185.27848816 182.69361877]
[170.78289795 178.83645630]
[164.83670044 183.40731812]
[175.70857239 193.74186707]
[186.58042908 204.07640076]
[197.45228577 214.41093445]
[211.23330688 220.33406067]
[218.04582214 233.69779968]
[214.74325562 248.32972717]
[202.85101318 257.47161865]
[187.86186218 256.90106201]
[176.69902039 246.88153076]
[174.51847839 232.04026794]
[167.32708740 218.87654114]
[160.13571167 205.71279907]
[152.94432068 192.54905701]
[146.99813843 197.11993408]
[146.99813843 212.11993408]
[146.99813843 227.11993408]
[146.99813843 242.11993408]
[146.99813843 257.11993408]
[146.99813843 272.11993408]
[146.99813843 287.11993408]
[146.99813843 302.11993408]
[146.99813843 317.11993408]
[146.99813843 332.11993408]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[13 111]
[14 110]
[15 109]
[17 69]
[18 68]
[19 67]
[20 66]
[21 65]
[22 64]
[23 47]
[24 46]
[27 44]
[28 43]
[29 42]
[30 41]
[31 40]
[32 39]
[48 58]
[49 57]
[50 56]
[83 96]
[84 95]
[85 94]
[86 93]
[87 92]
[97 107]
[98 106]
[99 105]
[113 126]
[114 125]
[115 124]
[116 123]
[117 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
