%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAUAAAACUAGGAAUAGCCCCCUUUCACUUCUGAGUCCCAGAGGUUACCCAAGGCACCCCxxxxxxxxxxAUACUAGUAUAUCGCUCACACCUCAUAUCCUCCCUACUAUGCCUAGAAGGAAUAAUACUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[91.06194305 285.92221069]
[91.06194305 270.92221069]
[91.06194305 255.92221069]
[91.06194305 240.92221069]
[91.06194305 225.92221069]
[91.06194305 210.92221069]
[91.06194305 195.92221069]
[91.06194305 180.92221069]
[91.06194305 165.92221069]
[91.06194305 150.92221069]
[84.36879730 147.53816223]
[77.60068512 160.92443848]
[75.30023193 175.74699402]
[60.49224091 178.13935852]
[53.64120483 164.79531860]
[64.21440125 154.15632629]
[70.98251343 140.77003479]
[64.28937531 137.38598633]
[52.20938492 146.27833557]
[40.12939835 155.17068481]
[34.05215073 170.40220642]
[17.78603554 172.48680115]
[8.06423950 159.28004456]
[14.88771057 144.36788940]
[31.23704720 143.09069824]
[43.31703568 134.19834900]
[55.39702225 125.30599213]
[50.86598587 99.33539581]
[59.76747513 75.71218109]
[78.57277679 60.59725189]
[101.34634399 57.31247330]
[104.44467163 42.63594818]
[107.54299164 27.95942116]
[110.64131165 13.28289509]
[100.30960083 5.11894655]
[94.15661621 -6.38760090]
[93.12307739 -19.27502441]
[78.99827576 -24.32378006]
[64.87347412 -29.37253761]
[50.74866867 -34.42129517]
[36.62386703 -39.47005081]
[22.49906158 -44.51880646]
[8.37425900 -49.56756210]
[-6.68309259 -44.03080368]
[-20.32473183 -52.47386169]
[-22.08595848 -68.41994476]
[-10.61571312 -79.63658905]
[5.28701639 -77.51933289]
[13.42301559 -63.69236374]
[27.54781914 -58.64360809]
[41.67262268 -53.59485245]
[55.79742432 -48.54609680]
[69.92222595 -43.49734116]
[84.04702759 -38.44858551]
[98.17183685 -33.39982605]
[102.38937378 -38.52260971]
[107.58538818 -42.64959335]
[113.52986908 -45.59809113]
[119.95969391 -47.23758316]
[126.59022522 -47.49550629]
[133.12797546 -46.36043167]
[139.28353882 -43.88261032]
[149.26626587 -55.07837677]
[159.24899292 -66.27414703]
[169.23171997 -77.46990967]
[179.21444702 -88.66567230]
[164.83593750 -84.39267731]
[149.83877563 -84.68479919]
[135.63758850 -89.51449585]
[123.57186890 -98.42620087]
[114.77973938 -110.57933044]
[110.09049988 -124.82752228]
[109.94647217 -139.82682800]
[114.36124420 -154.16244507]
[122.91838837 -166.48216248]
[134.81074524 -175.62391663]
[148.91658020 -180.72541809]
[163.90536499 -181.30548096]
[178.36326599 -177.30937195]
[190.92657471 -169.11402893]
[200.41021729 -157.49247742]
[205.91967773 -143.54092407]
[206.93527222 -128.57534790]
[203.36120605 -114.00737000]
[195.53446960 -101.21096802]
[208.92076111 -107.97908020]
[222.30703735 -114.74720001]
[235.69332886 -121.51531219]
[249.07962036 -128.28343201]
[245.55741882 -142.93576050]
[245.50984192 -158.00541687]
[248.93942261 -172.67970276]
[255.66122437 -186.16725159]
[265.31274414 -197.74070740]
[277.37350464 -206.77590942]
[291.19305420 -212.78562927]
[306.02615356 -215.44573975]
[321.07284546 -214.61280823]
[335.52166748 -210.33174133]
[348.59347534 -202.83340454]
[359.58328247 -192.52218628]
[367.89840698 -179.95416260]
[373.09042358 -165.80709839]
[374.87939453 -150.84393311]
[373.16876221 -135.87159729]
[368.05084229 -121.69756317]
[359.80160522 -109.08618164]
[348.86593628 -98.71759796]
[335.83355713 -91.15095520]
[321.40731812 -86.79431915]
[306.36520386 -85.88264465]
[291.51837158 -88.46509552]
[277.66757202 -94.40239716]
[265.55969238 -103.37435913]
[255.84773254 -114.89714050]
[242.46144104 -108.12902832]
[229.07516479 -101.36091614]
[215.68887329 -94.59279633]
[202.30259705 -87.82468414]
[190.41021729 -78.68295288]
[180.42749023 -67.48718262]
[170.44476318 -56.29141617]
[160.46203613 -45.09564972]
[150.47930908 -33.89988708]
[156.12127686 -12.42279816]
[146.18824768 7.66693926]
[125.31784058 16.38121796]
[122.21951294 31.05774307]
[119.12119293 45.73426819]
[116.02287292 60.41079330]
[125.42510986 64.71855164]
[133.67192078 71.26305389]
[140.23104858 79.73472595]
[144.65310669 89.69751740]
[146.60156250 100.61106873]
[145.87673950 111.85990906]
[142.43229675 122.78816986]
[136.38293457 132.73780823]
[128.00257874 141.08813477]
[117.71277618 147.29428101]
[106.06194305 150.92221069]
[106.06194305 165.92221069]
[106.06194305 180.92221069]
[106.06194305 195.92221069]
[106.06194305 210.92221069]
[106.06194305 225.92221069]
[106.06194305 240.92221069]
[106.06194305 255.92221069]
[106.06194305 270.92221069]
[106.06194305 285.92221069]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[18 27]
[19 26]
[20 25]
[31 130]
[32 129]
[33 128]
[34 127]
[37 55]
[38 54]
[39 53]
[40 52]
[41 51]
[42 50]
[43 49]
[62 124]
[63 123]
[64 122]
[65 121]
[66 120]
[85 119]
[86 118]
[87 117]
[88 116]
[89 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
