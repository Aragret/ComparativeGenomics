%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUAGAAAUUGAAACCUGGCGCAAUAGAUAUAGUACCGCAAGGGAAAGAUGAAAAAUUAUAAxxxxxxxxxxGCCCUUACCACGCUACUCCUACCUAUCUCCCCUUUUAUACUAAUAAUCUUAUAGAAAUUUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[119.18125153 262.58596802]
[119.18125153 247.58595276]
[119.18125153 232.58595276]
[119.18125153 217.58595276]
[119.18125153 202.58595276]
[119.18125153 187.58595276]
[119.18125153 172.58595276]
[119.18125153 157.58595276]
[119.18125153 142.58595276]
[119.18125153 127.58595276]
[112.68605804 123.83595276]
[105.49468231 136.99969482]
[97.69007111 149.80938721]
[84.69988251 142.30905151]
[91.89124298 129.14573669]
[99.69567871 116.33595276]
[93.20049286 112.58595276]
[80.21010590 120.08595276]
[67.21972656 127.58595276]
[54.22934723 135.08595276]
[54.30958557 150.44464111]
[46.68579483 163.77780151]
[33.40874100 171.49890137]
[18.04988289 171.53100586]
[4.74067545 163.86546326]
[-2.93877077 150.56427002]
[-2.92272329 135.20538330]
[4.78450108 121.92026520]
[18.10969734 114.28255463]
[33.46845627 114.34674072]
[46.72934723 122.09557343]
[59.71972656 114.59557343]
[72.71010590 107.09557343]
[85.70049286 99.59557343]
[94.74001312 87.62531281]
[98.39871216 73.07836151]
[102.05741882 58.53140640]
[105.71612549 43.98445129]
[99.28427124 24.92247200]
[113.20375061 11.55289555]
[116.26214600 -3.13200164]
[119.32054138 -17.81689835]
[122.37893677 -32.50179672]
[125.43733215 -47.18669510]
[115.41755676 -56.70283890]
[111.45514679 -69.82788086]
[114.48686218 -83.08737183]
[123.61264038 -93.02654266]
[136.35919189 -97.11038971]
[139.71844482 -111.72939301]
[143.07769775 -126.34840393]
[146.43696594 -140.96740723]
[149.79621887 -155.58641052]
[143.61199951 -166.95123291]
[146.75341797 -179.08807373]
[156.99731445 -185.59382629]
[160.65602112 -200.14077759]
[164.31472778 -214.68772888]
[167.97343445 -229.23468018]
[154.00769043 -234.76760864]
[140.88365173 -242.07614136]
[128.82589722 -251.03523254]
[118.04071808 -261.49157715]
[108.71269226 -273.26626587]
[101.00141907 -286.15777588]
[95.03884888 -299.94555664]
[90.92701721 -314.39364624]
[88.73628235 -329.25488281]
[88.50411987 -344.27490234]
[90.23451233 -359.19671631]
[93.89784241 -373.76501465]
[99.43143463 -387.73046875]
[106.74060059 -400.85415649]
[115.70026398 -412.91149902]
[126.15711975 -423.69616699]
[137.93223572 -433.02365112]
[150.82412720 -440.73431396]
[164.61218262 -446.69622803]
[179.06048584 -450.80737305]
[193.92179871 -452.99740601]
[208.94184875 -453.22885132]
[223.86358643 -451.49774170]
[238.43168640 -447.83370972]
[252.39689636 -442.29943848]
[265.52023315 -434.98965454]
[277.57714844 -426.02941895]
[288.36132812 -415.57205200]
[297.68823242 -403.79650879]
[305.39828491 -390.90423584]
[311.35952759 -377.11590576]
[315.47000122 -362.66738892]
[317.65933228 -347.80596924]
[317.89004517 -332.78591919]
[316.15823364 -317.86425781]
[312.49353027 -303.29632568]
[306.95858765 -289.33139038]
[299.64819336 -276.20840454]
[290.68737793 -264.15191650]
[280.22949219 -253.36824036]
[268.45349121 -244.04188538]
[255.56086731 -236.33245850]
[241.77223206 -230.37185669]
[227.32353210 -226.26208496]
[212.46200562 -224.07347107]
[197.44195557 -223.84346008]
[182.52038574 -225.57597351]
[178.86167908 -211.02902222]
[175.20297241 -196.48207092]
[171.54426575 -181.93511963]
[177.26821899 -165.37368774]
[164.41522217 -152.22715759]
[161.05596924 -137.60815430]
[157.69671631 -122.98914337]
[154.33744812 -108.37013245]
[150.97819519 -93.75112915]
[162.14202881 -81.75450897]
[163.99617004 -65.30537415]
[155.61691284 -50.83759689]
[140.12222290 -44.12829971]
[137.06382751 -29.44340134]
[134.00543213 -14.75850391]
[130.94703674 -0.07360622]
[127.88864136 14.61129093]
[134.27363586 22.68526459]
[135.14561462 33.16294479]
[129.97088623 42.56753922]
[120.26308441 47.64315796]
[116.60437775 62.19011307]
[112.94567108 76.73706818]
[109.28696442 91.28401947]
[119.47196198 80.27194214]
[130.59770203 70.21122742]
[144.72164917 65.16006470]
[159.70417786 65.88364410]
[173.27563477 72.27234650]
[183.38011169 83.35836029]
[188.48687744 97.46229553]
[187.82232666 112.44756317]
[181.48715210 126.04409027]
[170.44102478 136.19215393]
[156.35731506 141.35444641]
[141.37263489 140.74969482]
[134.18125916 127.58595276]
[134.18125916 142.58595276]
[134.18125916 157.58595276]
[134.18125916 172.58595276]
[134.18125916 187.58595276]
[134.18125916 202.58595276]
[134.18125916 217.58595276]
[134.18125916 232.58595276]
[134.18125916 247.58595276]
[134.18125916 262.58596802]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[17 34]
[18 33]
[19 32]
[20 31]
[35 130]
[36 129]
[37 128]
[38 127]
[40 123]
[41 122]
[42 121]
[43 120]
[44 119]
[49 115]
[50 114]
[51 113]
[52 112]
[53 111]
[56 109]
[57 108]
[58 107]
[59 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
