%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAAAUCUUAGCAUACUCCUCAAUUACCCACAUAGGAUGAAUAAUAGCAGUUCUACCGUACxxxxxxxxxxGUGGAGCAAACCACAGUUUCAUGCCCAUCGUCCUAGAAUUAAUUCCCCUAAAAAUCUUUGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[120.12148285 436.66943359]
[120.12148285 421.66943359]
[120.12148285 406.66943359]
[120.12148285 391.66943359]
[120.12148285 376.66943359]
[120.12148285 361.66943359]
[120.12148285 346.66943359]
[120.12148285 331.66943359]
[120.12148285 316.66943359]
[120.12148285 301.66943359]
[117.02316284 286.99291992]
[110.96015167 273.27285767]
[99.76313019 268.58947754]
[94.61786652 257.15509033]
[98.79740143 244.90824890]
[93.02112579 231.06501770]
[87.24485016 217.22180176]
[84.96926880 232.04818726]
[79.39685822 245.97471619]
[70.81685638 258.27853394]
[59.67462921 268.32098389]
[46.54851151 275.58081055]
[32.11982727 279.68118286]
[17.13750839 280.40927124]
[2.37922287 277.72729492]
[-11.38898945 271.77444458]
[-23.45247841 262.85974121]
[-33.18508148 251.44586182]
[-40.08161926 238.12527466]
[-43.78411865 223.58941650]
[-44.10040665 208.59274292]
[-41.01405716 193.91369629]
[-34.68527603 180.31419373]
[-25.44256210 168.50012207]
[-13.76566219 159.08470154]
[-0.26067722 152.55665588]
[14.37140751 149.25482178]
[29.37110138 149.35058594]
[43.95983505 152.83897400]
[57.38037109 159.53892517]
[68.93610382 169.10266113]
[78.02722168 181.03376770]
[84.18245697 194.71487427]
[86.05007172 179.83158875]
[87.91768646 164.94831848]
[89.78529358 150.06503296]
[91.65290833 135.18174744]
[93.52052307 120.29847717]
[95.38813782 105.41519165]
[89.63198853 107.76522827]
[82.84174347 107.66913605]
[75.84561920 104.84150696]
[69.53383636 99.24765015]
[64.78785706 91.11388397]
[55.27949524 79.51254272]
[45.77113724 67.91120148]
[30.01247787 64.90383911]
[22.66616058 50.64161301]
[29.36764908 36.06527710]
[44.97613525 32.35655212]
[57.51812744 42.36045074]
[57.37247849 58.40284348]
[66.88083649 70.00418091]
[76.38919830 81.60552216]
[83.87905121 81.99544525]
[81.09666443 67.25576019]
[78.31427002 52.51607895]
[75.53188324 37.77639389]
[66.72613525 25.63313293]
[64.82090759 10.75462055]
[70.28276062 -3.21563911]
[81.77417755 -12.85655975]
[96.48110199 -15.80723858]
[110.80204010 -11.34510326]
[121.23004150 -0.56285739]
[125.21145630 13.89910507]
[121.77129364 28.49928665]
[111.75246429 39.66204071]
[107.45456696 54.03312302]
[103.15666962 68.40420532]
[98.85876465 82.77529144]
[106.34862518 83.16521454]
[117.01025391 72.61392212]
[127.67187500 62.06263351]
[131.60464478 53.74487305]
[138.66676331 51.40562439]
[149.54559326 41.07841873]
[160.42442322 30.75121307]
[170.97570801 20.08958817]
[181.18919373 9.10392284]
[191.40266418 -1.88174176]
[194.53826904 -17.97832680]
[210.13198853 -23.05451393]
[222.14236450 -11.88835716]
[218.21414185 4.03335953]
[202.38833618 8.33173847]
[192.17485046 19.31740379]
[181.96138000 30.30306816]
[181.74775696 33.88382721]
[179.74848938 37.53137970]
[175.95535278 40.38872910]
[170.75163269 41.63003922]
[159.87280273 51.95724487]
[148.99397278 62.28445053]
[138.22315979 72.72425842]
[127.56153870 83.27555084]
[116.89991760 93.82684326]
[110.27141571 107.28280640]
[108.40380096 122.16608429]
[106.53618622 137.04936218]
[104.66857910 151.93264771]
[102.80096436 166.81593323]
[100.93334961 181.69920349]
[99.06573486 196.58248901]
[101.08807373 211.44554138]
[106.86434174 225.28875732]
[112.64061737 239.13197327]
[127.52600861 249.92108154]
[124.68020630 267.20983887]
[130.74320984 280.92990112]
[132.69918823 266.05798340]
[138.69271851 252.30741882]
[148.25602722 240.75134277]
[160.64282227 232.29158020]
[174.88639832 227.58836365]
[189.87519836 227.00869751]
[204.43946838 230.59785461]
[217.44261169 238.07571411]
[227.86982727 248.85870361]
[234.90740967 262.10531616]
[238.00608826 276.78176880]
[236.92408752 291.74267578]
[231.74581909 305.82052612]
[222.87539673 317.91662598]
[211.00509644 327.08700562]
[197.06127930 332.61599731]
[182.13211060 334.07211304]
[167.38270569 331.34173584]
[153.96411133 324.63790894]
[142.92352295 314.48382568]
[135.12149048 301.66943359]
[135.12149048 316.66943359]
[135.12149048 331.66943359]
[135.12149048 346.66943359]
[135.12149048 361.66943359]
[135.12149048 376.66943359]
[135.12149048 391.66943359]
[135.12149048 406.66943359]
[135.12149048 421.66943359]
[135.12149048 436.66943359]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 120]
[12 119]
[15 117]
[16 116]
[17 115]
[43 114]
[44 113]
[45 112]
[46 111]
[47 110]
[48 109]
[49 108]
[54 64]
[55 63]
[56 62]
[82 107]
[83 106]
[84 105]
[86 104]
[87 103]
[88 102]
[89 98]
[90 97]
[91 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
