%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUGAAAACAUUCUCCUCCGCAUAAGCCUGCGUCAGAUUAAAACACUGAACUGACAAUUAACAxxxxxxxxxxUCUUACUCUUUUAGUAUAAAUAGUACCGUUAACUUCCAAUUAACUAGUUUUGACAACAUUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[117.02530670 270.93826294]
[117.02530670 255.93826294]
[117.02530670 240.93826294]
[117.02530670 225.93826294]
[117.02530670 210.93826294]
[117.02530670 195.93826294]
[117.02530670 180.93826294]
[117.02530670 165.93826294]
[117.02530670 150.93826294]
[117.02530670 135.93826294]
[109.95164490 133.44558716]
[88.73067474 125.96761322]
[79.32681274 137.65382385]
[69.92295837 149.34002686]
[67.94351959 165.61927795]
[52.75159454 171.79483032]
[39.97533798 161.51380920]
[42.75786209 145.35244751]
[58.23675156 139.93617249]
[67.64060974 128.24996948]
[77.04446411 116.56375122]
[73.16189575 110.14692688]
[63.35590744 121.49781036]
[49.53036499 115.67935181]
[50.79174423 100.73248291]
[65.39675903 97.31327057]
[61.51419449 90.89644623]
[46.79867172 93.80391693]
[32.08314896 96.71139526]
[17.36762619 99.61886597]
[8.77969742 112.88623047]
[-6.69160604 116.11334991]
[-19.86743546 107.38563538]
[-22.93080330 91.88107300]
[-14.06427002 78.79825592]
[1.47180879 75.89898682]
[14.46015358 84.90334320]
[29.17567635 81.99587250]
[43.89119720 79.08839417]
[58.60671997 76.18092346]
[60.45004654 61.29461670]
[46.88814926 54.88563919]
[33.32625198 48.47666550]
[19.76435661 42.06768799]
[6.73290777 50.32510376]
[-8.69397640 50.20349884]
[-21.59363365 41.74168015]
[-27.84983063 27.63978195]
[-25.46623611 12.39766788]
[-15.20344830 0.87904227]
[-0.33628410 -3.24054313]
[14.39119720 1.35345602]
[24.27951050 13.19511127]
[26.17333221 28.50579262]
[39.73522949 34.91476822]
[53.29712296 41.32374573]
[66.85902405 47.73271942]
[80.28646851 41.04664612]
[83.34486389 26.36174774]
[86.40325928 11.67684937]
[89.46165466 -3.00804782]
[79.12014771 7.85718203]
[66.83569336 16.46485901]
[53.09265137 22.47558784]
[38.43291092 25.65237045]
[23.43448830 25.86994743]
[8.68876362 23.11974144]
[-5.22284698 17.51018906]
[-17.75181961 9.26247120]
[-28.40414619 -1.29820776]
[-36.75981140 -13.75544930]
[-42.48935699 -27.61807060]
[-45.36687088 -42.33948135]
[-45.27889633 -57.33922195]
[-42.22890091 -72.02587128]
[-36.33714294 -85.82032776]
[-27.83592987 -98.17870331]
[-17.06046104 -108.61370850]
[-4.43560600 -116.71389008]
[9.54084778 -122.15987396]
[24.31781578 -124.73693085]
[39.31265259 -124.34343719]
[53.93412399 -120.99491882]
[67.60571289 -114.82340240]
[79.78836060 -106.07221985]
[90.00170898 -95.08643341]
[97.84305573 -82.29920197]
[103.00321960 -68.21471405]
[105.27873993 -53.38832092]
[104.57989502 -38.40460968]
[100.93624878 -23.85996246]
[111.70492554 -34.30197144]
[122.47360229 -44.74398041]
[133.24227905 -55.18598938]
[140.40432739 -70.55288696]
[157.15332031 -67.92472076]
[159.26445007 -51.10272980]
[143.68429565 -44.41731262]
[132.91561890 -33.97530365]
[122.14693451 -23.53329277]
[111.37825775 -13.09128380]
[104.14655304 0.05034769]
[101.08815765 14.73524570]
[98.02976227 29.42014313]
[94.97136688 44.10504150]
[156.09230042 101.05161285]
[170.99674988 102.74201202]
[187.66770935 94.98896790]
[201.38529968 105.89180756]
[216.32131958 107.27583313]
[231.25732422 108.65985870]
[246.19334412 110.04388428]
[261.12936401 111.42790985]
[272.11538696 100.29952240]
[287.68911743 98.88784027]
[300.49710083 107.85942841]
[304.49182129 122.97816467]
[297.78707886 137.10545349]
[283.54864502 143.57081604]
[268.49948120 139.32151794]
[259.74533081 126.36392212]
[244.80931091 124.97989655]
[229.87330627 123.59587097]
[214.93728638 122.21184540]
[200.00128174 120.82781982]
[190.46073914 128.32717896]
[177.96977234 127.25628662]
[169.30635071 117.64646149]
[154.40190125 115.95606232]
[148.80775452 120.95160675]
[161.07720947 129.58064270]
[173.34667969 138.20968628]
[188.00125122 141.41021729]
[197.98051453 152.60906982]
[199.47761536 167.53417969]
[191.92146301 180.49197388]
[178.19453430 186.53939819]
[163.53329468 183.36950684]
[153.53065491 172.19152832]
[152.00222778 157.27018738]
[144.81083679 144.10644531]
[137.61946106 130.94270325]
[132.02529907 135.93826294]
[132.02529907 150.93826294]
[132.02529907 165.93826294]
[132.02529907 180.93826294]
[132.02529907 195.93826294]
[132.02529907 210.93826294]
[132.02529907 225.93826294]
[132.02529907 240.93826294]
[132.02529907 255.93826294]
[132.02529907 270.93826294]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[12 21]
[13 20]
[14 19]
[27 40]
[28 39]
[29 38]
[30 37]
[41 57]
[42 56]
[43 55]
[44 54]
[58 105]
[59 104]
[60 103]
[61 102]
[91 101]
[92 100]
[93 99]
[94 98]
[106 129]
[107 128]
[109 125]
[110 124]
[111 123]
[112 122]
[113 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
