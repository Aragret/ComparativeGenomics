%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACUAUUCUCUACAAACCACAAAGACAUUGGAACACUAUACCUAUUAUUCGGCGCAUGAGCxxxxxxxxxxAAAAGUCUUUAACUCCACCAUUAGCACCCAAAGCUAAGAUUCUAAUUUAAACUAUUCUCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 452.45373535]
[92.50000000 437.45373535]
[92.50000000 422.45373535]
[92.50000000 407.45373535]
[92.50000000 392.45373535]
[92.50000000 377.45373535]
[92.50000000 362.45373535]
[92.50000000 347.45373535]
[92.50000000 332.45373535]
[92.50000000 317.45373535]
[77.89575195 314.14953613]
[64.38652039 307.67504883]
[52.65122604 298.35208130]
[43.28042221 286.64569092]
[36.74658203 273.14096069]
[33.38029099 258.51382446]
[33.35351944 243.49713135]
[36.67081451 228.84399414]
[43.16894913 215.29000854]
[52.52492142 203.51634216]
[64.27202606 194.11546326]
[77.82312775 187.56137085]
[92.50000000 184.18566895]
[92.50000000 169.18566895]
[92.50000000 154.18566895]
[69.93727875 145.70086670]
[53.21230316 128.34162903]
[45.57281113 105.47886658]
[48.50228119 81.55218506]
[61.43185806 61.20779419]
[52.41432571 49.22096252]
[43.39679718 37.23412704]
[34.37926865 25.24729538]
[25.36173820 13.26046371]
[16.34420776 1.27363110]
[3.32391167 8.76038647]
[-10.51774979 14.59031105]
[-24.97094154 18.67502594]
[-39.81655502 20.95260429]
[-54.82953644 21.38852310]
[-69.78228760 19.97617149]
[-84.44814301 16.73695946]
[-98.60475159 11.71999454]
[-112.03752136 5.00133228]
[-124.54280090 -3.31717491]
[-135.93101501 -13.10941982]
[-146.02954102 -24.22695541]
[-154.68525696 -36.50123978]
[-161.76696777 -49.74620438]
[-167.16729736 -63.76105118]
[-170.80439758 -78.33332062]
[-172.62312317 -93.24211121]
[-172.59590149 -108.26139069]
[-170.72315979 -123.16348267]
[-167.03324890 -137.72247314]
[-161.58215332 -151.71765137]
[-154.45246887 -164.93685913]
[-145.75231934 -177.17968750]
[-135.61357117 -188.26054382]
[-124.18992615 -198.01144409]
[-111.65457153 -206.28457642]
[-98.19754028 -212.95449829]
[-84.02283478 -217.92012024]
[-69.34534454 -221.10614014]
[-54.38756561 -222.46427917]
[-39.37626648 -221.97395325]
[-24.53900528 -219.64256287]
[-10.10071564 -215.50549316]
[3.71972251 -209.62542725]
[16.71279526 -202.09152222]
[28.68152809 -193.01799011]
[39.44448471 -182.54238892]
[48.83849335 -170.82350159]
[56.72114944 -158.03900146]
[62.97294998 -144.38270569]
[67.49912262 -130.06161499]
[70.23104858 -115.29286194]
[71.12731171 -100.30031586]
[70.17433167 -85.31127167]
[67.38654327 -70.55296326]
[62.80622482 -56.24910355]
[56.50279999 -42.61655426]
[48.57183075 -29.86197090]
[39.13355255 -18.17871475]
[28.33103943 -7.74389887]
[37.34857178 4.24293375]
[46.36610031 16.22976685]
[55.38362885 28.21659851]
[64.40116119 40.20343018]
[73.41868591 52.19026566]
[81.39310455 48.55954361]
[89.84490967 46.24861908]
[98.55726624 45.31677246]
[107.30663300 45.78791809]
[115.86853790 47.64996338]
[124.02330780 50.85513687]
[131.56172180 55.32120514]
[138.29035950 60.93358231]
[144.03660583 67.54827118]
[148.65301514 74.99556732]
[152.02114868 83.08439636]
[166.78720093 80.44553375]
[181.55325317 77.80667114]
[196.31930542 75.16780090]
[211.08535767 72.52893829]
[218.71540833 58.87916183]
[233.35253906 53.37567902]
[248.08555603 58.61707306]
[255.95797729 72.12850952]
[253.25268555 87.53031158]
[241.24703979 97.55020905]
[225.60974121 97.45712280]
[213.72422791 87.29499817]
[198.95817566 89.93386078]
[184.19212341 92.57272339]
[169.42605591 95.21158600]
[154.66000366 97.85044861]
[154.28012085 106.78267670]
[152.45036316 115.53372955]
[149.21957397 123.86985016]
[144.67408752 131.56838989]
[138.93528748 138.42369080]
[132.15649414 144.25265503]
[124.51875305 148.89956665]
[116.22608185 152.24032593]
[107.50000000 154.18566895]
[107.50000000 169.18566895]
[107.50000000 184.18566895]
[122.17687225 187.56137085]
[135.72796631 194.11546326]
[147.47508240 203.51634216]
[156.83105469 215.29000854]
[163.32917786 228.84399414]
[166.64648438 243.49713135]
[166.61970520 258.51382446]
[163.25341797 273.14096069]
[156.71957397 286.64569092]
[147.34877014 298.35208130]
[135.61347961 307.67504883]
[122.10424805 314.14953613]
[107.50000000 317.45373535]
[107.50000000 332.45373535]
[107.50000000 347.45373535]
[107.50000000 362.45373535]
[107.50000000 377.45373535]
[107.50000000 392.45373535]
[107.50000000 407.45373535]
[107.50000000 422.45373535]
[107.50000000 437.45373535]
[107.50000000 452.45373535]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[23 128]
[24 127]
[25 126]
[30 90]
[31 89]
[32 88]
[33 87]
[34 86]
[35 85]
[101 117]
[102 116]
[103 115]
[104 114]
[105 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
