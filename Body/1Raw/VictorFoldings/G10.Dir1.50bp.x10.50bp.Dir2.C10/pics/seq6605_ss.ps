%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUCACAACAAUUAUCAAUAUAAAACCCCCUGCCAUAACCCAAUACCAAACGCCCCUCUUCGxxxxxxxxxxCCAGUAAGCUACCCUUUUACCAUCAUUGGACAAGUAGCAUCCGUACUAUACUUCACAACAAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-53.37381363 228.20452881]
[-65.23545074 237.38612366]
[-71.41224670 251.95175171]
[-86.21270752 253.62371826]
[-98.07434845 262.80532837]
[-109.93598175 271.98690796]
[-121.79761505 281.16848755]
[-133.65925598 290.35009766]
[-145.52088928 299.53167725]
[-139.17555237 313.19491577]
[-136.03018188 327.92770386]
[-136.24253845 342.99096680]
[-139.80197144 357.62921143]
[-146.52993774 371.10818481]
[-156.08898926 382.75173950]
[-167.99961853 391.97586060]
[-181.66441345 398.31787109]
[-196.39793396 401.45968628]
[-211.46116638 401.24368286]
[-226.09854126 397.68069458]
[-239.57586670 390.94946289]
[-251.21711731 381.38760376]
[-260.43835449 369.47473145]
[-266.77706909 355.80841064]
[-269.91531372 341.07412720]
[-269.69564819 326.01092529]
[-266.12911987 311.37442017]
[-259.39462280 297.89874268]
[-249.82992554 286.25979614]
[-237.91482544 277.04144287]
[-224.24696350 270.70605469]
[-209.51191711 267.57138062]
[-194.44879150 267.79467773]
[-179.81314087 271.36477661]
[-166.33908081 278.10253906]
[-154.70248413 287.67004395]
[-142.84085083 278.48843384]
[-130.97920227 269.30685425]
[-119.11756897 260.12527466]
[-107.25593567 250.94367981]
[-95.39430237 241.76208496]
[-90.06592560 227.85317993]
[-74.41703796 225.52447510]
[-62.55540466 216.34289551]
[-70.40657806 204.50610352]
[-77.39739990 192.14167786]
[-83.49257660 179.31204224]
[-88.66133118 166.08198547]
[-92.87757111 152.51829529]
[-96.12000275 138.68943787]
[-98.37226105 124.66524506]
[-99.62297058 110.51652527]
[-99.86582184 96.31471252]
[-99.09958649 82.13150024]
[-97.32812500 68.03850555]
[-94.56040192 54.10688019]
[-90.81037140 40.40695953]
[-86.09696960 27.00791168]
[-80.44400024 13.97739029]
[-73.88000488 1.38118100]
[-66.43811798 -10.71711922]
[-58.15591431 -22.25642776]
[-49.07521057 -33.17848587]
[-39.24185181 -43.42815018]
[-28.70548439 -52.95367050]
[-17.51930809 -61.70695496]
[-5.73979664 -69.64381409]
[6.57357597 -76.72416687]
[19.35864258 -82.91226959]
[32.55084991 -88.17688751]
[46.08359909 -92.49142456]
[59.88856125 -95.83411407]
[73.89604187 -98.18807220]
[88.03531647 -99.54141235]
[102.23499298 -99.88729858]
[116.42339325 -99.22399139]
[130.52886963 -97.55484009]
[144.48020935 -94.88827515]
[158.20698547 -91.23774719]
[171.63987732 -86.62169647]
[184.71107483 -81.06342316]
[197.35456848 -74.59099579]
[209.50654602 -67.23708344]
[221.10565186 -59.03882599]
[232.09330750 -50.03760910]
[242.41406250 -40.27888107]
[252.01577759 -29.81190681]
[260.85000610 -18.68953705]
[268.87210083 -6.96792507]
[276.04162598 5.29374933]
[289.50869751 -1.31216300]
[302.97576904 -7.91807556]
[316.44284058 -14.52398777]
[329.90991211 -21.12989998]
[332.87811279 -25.56637383]
[336.86682129 -28.12573624]
[340.97366333 -28.73590469]
[344.40213013 -27.69992638]
[358.24572754 -33.47526932]
[364.32589722 -47.81643677]
[378.44757080 -53.47624969]
[392.08221436 -47.59134293]
[405.92581177 -53.36668396]
[419.76940918 -59.14202881]
[429.28405762 -72.49880219]
[445.58071899 -70.66812134]
[451.89477539 -55.53323364]
[441.73086548 -42.66361237]
[425.54476929 -45.29842377]
[411.70114136 -39.52307892]
[397.85754395 -33.74773407]
[392.44766235 -19.91773987]
[378.49057007 -13.86351299]
[364.02105713 -19.63166428]
[350.17745972 -13.85632133]
[336.51580811 -7.66283178]
[323.04873657 -1.05691946]
[309.58166504 5.54899263]
[296.11459351 12.15490532]
[282.64752197 18.76081657]
[288.52578735 33.53230667]
[293.21160889 48.72420883]
[296.67532349 64.24044037]
[298.89505005 79.98284912]
[299.85675049 95.85186768]
[299.55432129 111.74713135]
[297.98971558 127.56808472]
[295.17279053 143.21467590]
[291.12136841 158.58792114]
[285.86111450 173.59059143]
[279.42523193 188.12780762]
[271.85449219 202.10758972]
[263.19674683 215.44154358]
[253.50675964 228.04530334]
[242.84584045 239.83917236]
[231.28138733 250.74855042]
[218.88658142 260.70440674]
[205.73979187 269.64379883]
[191.92419434 277.51019287]
[177.52717590 284.25381470]
[162.63977051 289.83200073]
[147.35617065 294.20947266]
[131.77304077 297.35855103]
[115.98894501 299.25933838]
[100.10371399 299.89978027]
[84.21782684 299.27581787]
[68.43176270 297.39141846]
[52.84537506 294.25851440]
[37.55723953 289.89688110]
[22.66406441 284.33416748]
[8.26004696 277.60549927]
[-5.56370592 269.75344849]
[-18.71975708 260.82769775]
[-31.12489510 250.88468933]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 44]
[2 43]
[4 41]
[5 40]
[6 39]
[7 38]
[8 37]
[9 36]
[90 120]
[91 119]
[92 118]
[93 117]
[94 116]
[98 115]
[99 114]
[102 111]
[103 110]
[104 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
