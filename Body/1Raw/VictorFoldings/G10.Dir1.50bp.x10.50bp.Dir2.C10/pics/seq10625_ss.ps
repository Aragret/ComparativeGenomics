%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAAUUCCCCCCAUCCUUACCACCCUCGUUAACCCUAACAAAAAAAACUCAUACCCCCAUUxxxxxxxxxxCUCAGGAUACUCCUCAAUAGCCAUCGCUGUAGUAUAUCCAAAGACAACCAUCAUUCCCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[4.16740656 274.09881592]
[-3.55667830 286.95721436]
[-11.28076267 299.81561279]
[-11.75438881 315.62973022]
[-24.94077873 322.55566406]
[-32.66486359 335.41406250]
[-40.38895035 348.27246094]
[-48.11303329 361.13085938]
[-55.83712006 373.98925781]
[-63.56120300 386.84765625]
[-61.08898544 402.69909668]
[-72.04640961 414.41720581]
[-88.02788544 413.01287842]
[-96.77378082 399.56341553]
[-91.57500458 384.38604736]
[-76.41960907 379.12359619]
[-68.69551849 366.26519775]
[-60.97143555 353.40676880]
[-53.24735260 340.54837036]
[-45.52326584 327.68997192]
[-37.79918289 314.83157349]
[-37.87803268 299.93716431]
[-24.13916588 292.09152222]
[-16.41508102 279.23312378]
[-8.69099522 266.37472534]
[-24.13815498 255.19021606]
[-38.44210815 242.57652283]
[-51.47113037 228.64984131]
[-63.10523605 213.53839111]
[-73.23728180 197.38136292]
[-81.77396393 180.32752991]
[-88.63665771 162.53393555]
[-93.76218414 144.16447449]
[-97.10331726 125.38829803]
[-98.62930298 106.37831116]
[-98.32608795 87.30959320]
[-96.19645691 68.35773468]
[-110.90441895 65.41225433]
[-125.61238098 62.46677017]
[-140.32034302 59.52128601]
[-155.67431641 65.28215790]
[-168.16676331 54.65810013]
[-164.94654846 38.57823181]
[-149.32632446 33.58414459]
[-137.37486267 44.81332397]
[-122.66690063 47.75880814]
[-107.95893860 50.70428848]
[-93.25097656 53.64977264]
[-89.83966064 41.21915436]
[-85.62966156 29.03583145]
[-80.63869476 17.15106583]
[-74.88775635 5.61485529]
[-68.40104675 -5.52426481]
[-61.20585632 -16.21943092]
[-53.33244705 -26.42564774]
[-44.81394958 -36.09997559]
[-35.68620300 -45.20171356]
[-25.98760796 -53.69256973]
[-15.75896740 -61.53682327]
[-5.04331350 -68.70146942]
[6.11427021 -75.15637207]
[17.66684341 -80.87435913]
[29.56580353 -85.83139801]
[41.76108551 -90.00661469]
[54.20138931 -93.38244629]
[66.83437347 -95.94470215]
[79.60688782 -97.68258667]
[92.46520233 -98.58879852]
[105.35520935 -98.65952301]
[118.22269440 -97.89446259]
[131.01350403 -96.29682922]
[143.67384338 -93.87335968]
[156.15045166 -90.63423157]
[168.39080811 -86.59308624]
[180.34344482 -81.76692200]
[191.95806885 -76.17604065]
[203.18580627 -69.84396362]
[213.97944641 -62.79733276]
[224.29353333 -55.06579208]
[234.08471680 -46.68186951]
[243.31179810 -37.68083954]
[251.93592834 -28.10056686]
[259.92086792 -17.98136139]
[267.23297119 -7.36579180]
[273.84152222 3.70147824]
[287.22781372 -3.06663656]
[300.61410522 -9.83475113]
[314.00039673 -16.60286522]
[327.24298096 -23.64800072]
[340.33612061 -30.96710587]
[353.42929077 -38.28621292]
[340.09289551 -45.15215302]
[336.93704224 -59.81641388]
[346.26840210 -71.56060791]
[361.26647949 -71.80068207]
[370.96890259 -60.36115646]
[368.28439331 -45.60393906]
[382.06677246 -51.52389908]
[395.84915161 -57.44386292]
[409.63153076 -63.36382675]
[423.41390991 -69.28379059]
[432.78820801 -82.73944855]
[449.10311890 -81.07948303]
[455.57528687 -66.01153564]
[445.54666138 -53.03620529]
[429.33389282 -55.50140762]
[415.55148315 -49.58144760]
[401.76910400 -43.66148376]
[387.98672485 -37.74151993]
[374.20434570 -31.82155609]
[360.74838257 -25.19305801]
[347.65524292 -17.87395287]
[334.56207275 -10.55484676]
[332.41149902 -6.22465515]
[327.48471069 -3.23168898]
[320.76849365 -3.21658134]
[307.38220215 3.55153346]
[293.99594116 10.31964779]
[280.60964966 17.08776283]
[286.37594604 31.01963043]
[291.06936646 45.34858322]
[294.66293335 59.99213028]
[297.13589478 74.86598206]
[298.47409058 89.88452148]
[298.66973877 104.96128845]
[297.72177124 120.00949097]
[295.63565063 134.94250488]
[292.42333984 149.67439270]
[288.10333252 164.12031555]
[282.70056152 178.19714355]
[276.24603271 191.82382202]
[268.77697754 204.92192078]
[260.33636475 217.41604614]
[250.97279358 229.23428345]
[240.74014282 240.30857849]
[229.69732666 250.57518005]
[217.90791321 259.97500610]
[205.43977356 268.45397949]
[192.36466980 275.96322632]
[178.75787354 282.45953369]
[164.69770813 287.90554810]
[150.26512146 292.26986694]
[135.54316711 295.52740479]
[120.61663055 297.65939331]
[105.57140350 298.65356445]
[90.49411011 298.50421143]
[75.47153473 297.21215820]
[60.59016037 294.78488159]
[45.93564224 291.23632812]
[31.59234428 286.58691406]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 25]
[2 24]
[3 23]
[5 21]
[6 20]
[7 19]
[8 18]
[9 17]
[10 16]
[37 48]
[38 47]
[39 46]
[40 45]
[85 119]
[86 118]
[87 117]
[88 116]
[89 113]
[90 112]
[91 111]
[97 110]
[98 109]
[99 108]
[100 107]
[101 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
