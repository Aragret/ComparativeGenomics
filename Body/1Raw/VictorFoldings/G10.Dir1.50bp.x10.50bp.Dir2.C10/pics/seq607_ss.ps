%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCAUACUACUAAUCUCAUCAAUACAACCCCCGCCCAUCCUACCCAGCACACACACACCGCxxxxxxxxxxCCAACCACACCUAGCAUUCCUGCACAUCUGUACCCACGCCUUCUUCAAAGCCAUACUAUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-90.74575806 243.55911255]
[-103.00812531 252.19824219]
[-115.27050018 260.83734131]
[-122.09578705 275.11062622]
[-136.95645142 276.11560059]
[-149.21881104 284.75469971]
[-161.48118591 293.39382935]
[-173.74356079 302.03295898]
[-186.00592041 310.67205811]
[-180.17585754 324.55819702]
[-177.46765137 339.37301636]
[-178.00794983 354.42367554]
[-181.77151489 369.00619507]
[-188.58230591 382.43850708]
[-198.12176514 394.09240723]
[-209.94371033 403.42276001]
[-223.49522400 409.99319458]
[-238.14245605 413.49639893]
[-253.20034790 413.76855469]
[-267.96459961 410.79687500]
[-281.74465942 404.72039795]
[-293.89602661 395.82330322]
[-303.85037231 384.52172852]
[-311.14205933 371.34426880]
[-315.43008423 356.90728760]
[-316.51388550 341.88598633]
[-314.34277344 326.98294067]
[-309.01824951 312.89523315]
[-300.78942871 300.28173828]
[-290.04113770 289.73242188]
[-277.27609253 281.74069214]
[-263.09133911 276.68032837]
[-248.15034485 274.78802490]
[-233.15191650 276.15228271]
[-218.79756165 280.70932007]
[-205.75865173 288.24594116]
[-194.64503479 298.40969849]
[-182.38267517 289.77056885]
[-170.12030029 281.13146973]
[-157.85794067 272.49234009]
[-145.59556580 263.85324097]
[-139.64735413 250.19789124]
[-123.90961456 248.57498169]
[-111.64724731 239.93586731]
[-99.38488007 231.29675293]
[-107.23560333 218.51823425]
[-114.26847076 205.27197266]
[-120.45571899 191.61026001]
[-125.77294159 177.58700562]
[-130.19914246 163.25755310]
[-133.71687317 148.67846680]
[-136.31221008 133.90725708]
[-137.97496033 119.00222778]
[-138.69853210 104.02220917]
[-138.48007202 89.02631378]
[-137.32044983 74.07373047]
[-135.22422791 59.22346878]
[-132.19970703 44.53413010]
[-128.25878906 30.06368637]
[-123.41706085 15.86924744]
[-117.69360352 2.00683331]
[-111.11101532 -11.46884918]
[-103.69527435 -24.50461769]
[-95.47564697 -37.04902649]
[-86.48457336 -49.05257034]
[-76.75753784 -60.46787643]
[-66.33291626 -71.24989319]
[-55.25186920 -81.35606384]
[-43.55811310 -90.74652100]
[-31.29780388 -99.38418579]
[-18.51932335 -107.23497772]
[-5.27310658 -114.26791382]
[8.38857269 -120.45523834]
[22.41179848 -125.77252960]
[36.74122620 -130.19880676]
[51.32030869 -133.71661377]
[66.09150696 -136.31204224]
[80.99652100 -137.97485352]
[95.97653198 -138.69850159]
[110.97242737 -138.48013306]
[125.92501831 -137.32058716]
[140.77528381 -135.22444153]
[155.46464539 -132.19999695]
[169.93510437 -128.25917053]
[184.12957764 -123.41750336]
[197.99201965 -117.69412231]
[211.46774292 -111.11160278]
[224.50354004 -103.69593048]
[237.04800415 -95.47637177]
[249.05158997 -86.48535919]
[260.46694946 -76.75838470]
[271.24902344 -66.33382416]
[281.35525513 -55.25282669]
[290.74575806 -43.55912018]
[303.00811768 -52.19823456]
[315.27050781 -60.83735275]
[321.66329956 -75.93914032]
[337.96926880 -77.68490601]
[347.41421509 -64.27874756]
[340.28198242 -49.51177216]
[323.90960693 -48.57498169]
[311.64724731 -39.93586731]
[299.38488770 -31.29675102]
[307.23559570 -18.51823044]
[314.26846313 -5.27197647]
[320.45571899 8.38973618]
[325.77294922 22.41298866]
[330.19915771 36.74244308]
[333.71685791 51.32154083]
[336.31222534 66.09275055]
[337.97494507 80.99777222]
[338.69851685 95.97779083]
[338.48007202 110.97368622]
[337.32043457 125.92626953]
[335.22424316 140.77653503]
[332.19970703 155.46586609]
[328.25878906 169.93630981]
[323.41705322 184.13075256]
[317.69360352 197.99316406]
[311.11102295 211.46885681]
[303.69528198 224.50462341]
[295.47564697 237.04902649]
[286.48458862 249.05256653]
[276.75753784 260.46786499]
[266.33291626 271.24987793]
[255.25186157 281.35607910]
[243.55810547 290.74652100]
[231.29780579 299.38418579]
[218.51931763 307.23498535]
[205.27310181 314.26791382]
[191.61141968 320.45523071]
[177.58819580 325.77252197]
[163.25877380 330.19882202]
[148.67968750 333.71661377]
[133.90849304 336.31204224]
[119.00347900 337.97485352]
[104.02346802 338.69851685]
[89.02757263 338.48013306]
[74.07498169 337.32058716]
[59.22470856 335.22445679]
[44.53535461 332.20001221]
[30.06488991 328.25915527]
[15.87042618 323.41751099]
[2.00798178 317.69412231]
[-11.46773529 311.11160278]
[-24.50354385 303.69592285]
[-37.04799652 295.47637939]
[-49.05158615 286.48535156]
[-60.46694565 276.75839233]
[-71.24901581 266.33383179]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 45]
[2 44]
[3 43]
[5 41]
[6 40]
[7 39]
[8 38]
[9 37]
[94 103]
[95 102]
[96 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
