%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUUAUUCCUAGAACCAGGCGACCUGCGACUCCUUGACGUUGACAAUCGAGUAGUACUCCCGxxxxxxxxxxAACUUCGGCUCACUCCUUGGCGCCUGCCUGAUCCUCCAAAUCACCACAGGACUAUUCCUAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[78.42897797 264.97286987]
[78.42897797 249.97286987]
[78.42897797 234.97286987]
[78.42897797 219.97286987]
[78.42897797 204.97286987]
[78.42897797 189.97286987]
[78.42897797 174.97286987]
[78.42897797 159.97286987]
[78.42897797 144.97286987]
[78.42897797 129.97286987]
[71.49253845 127.12053680]
[65.78764343 140.99331665]
[51.91495514 135.28819275]
[57.61965942 121.41587067]
[50.68321991 118.56353760]
[40.13120270 129.22444153]
[29.57918930 139.88536072]
[22.73416901 155.39607239]
[5.93473673 153.11235046]
[3.47866416 136.33723450]
[18.91827965 129.33334351]
[29.47029495 118.67243195]
[40.02231216 108.01152802]
[67.49680328 87.69042969]
[94.10543060 93.19668579]
[87.83602905 79.56970978]
[81.56661987 65.94273376]
[75.29721832 52.31575012]
[69.02780914 38.68877411]
[62.75840759 25.06179237]
[56.28882980 18.52418137]
[56.50338364 11.09005928]
[50.51508713 -2.66276979]
[35.74987793 -2.39531565]
[21.95247078 -8.77219677]
[12.03941536 -20.85894012]
[8.28244305 -36.47761917]
[11.79724026 -52.59528732]
[-1.63020885 -59.28136444]
[-15.05765820 -65.96743774]
[-28.48510742 -72.65351105]
[-46.80238342 -71.06983948]
[-55.96371841 -86.00685883]
[-69.52561188 -92.41583252]
[-83.08750916 -98.82480621]
[-97.21714020 -92.12498474]
[-112.33448792 -96.12496948]
[-121.30159760 -108.93609619]
[-119.88448334 -124.50933838]
[-108.75225830 -135.49148560]
[-93.16121674 -136.69711304]
[-80.47297668 -127.55694580]
[-76.67853546 -112.38670349]
[-63.11663818 -105.97772980]
[-49.55474472 -99.56875610]
[-38.02464294 -103.35279083]
[-26.65323067 -98.07431030]
[-21.79903221 -86.08096313]
[-8.37158298 -79.39488983]
[5.05586624 -72.70881653]
[18.48331642 -66.02273560]
[31.55001068 -73.38897705]
[32.78062439 -88.33840942]
[34.01123428 -103.28784943]
[22.89798927 -111.50054932]
[17.35269547 -124.03917694]
[18.73199272 -137.57072449]
[26.56719780 -148.55601501]
[38.71527100 -154.17530823]
[40.25256348 -169.09632874]
[41.78985596 -184.01734924]
[28.26013374 -190.89564514]
[18.13168526 -202.19958496]
[12.77430153 -216.40039062]
[12.91252327 -231.57751465]
[18.52765846 -245.67839050]
[28.86030388 -256.79598999]
[42.51305771 -263.42672729]
[57.63949203 -264.67388916]
[72.19388580 -260.36874390]
[84.20787811 -251.09359741]
[92.05666351 -238.10279846]
[94.67877197 -223.15325928]
[91.71958160 -208.26676941]
[83.57929230 -195.45660400]
[71.35881805 -186.45524597]
[56.71087265 -182.48005676]
[55.17358017 -167.55903625]
[53.63628769 -152.63801575]
[66.18975067 -142.10423279]
[70.05125427 -126.00762939]
[63.51342773 -110.61979675]
[48.96067047 -102.05723572]
[47.73005676 -87.10780334]
[46.49944687 -72.15836334]
[63.41123962 -66.08116150]
[75.13465881 -53.08920670]
[79.22097778 -36.55849457]
[75.13224792 -20.51408005]
[64.26791382 -8.65106678]
[70.25621033 5.10176277]
[76.38538361 18.79238892]
[82.65479279 32.41936874]
[88.92419434 46.04634476]
[95.19360352 59.67332458]
[101.46300507 73.30030060]
[107.73241425 86.92728424]
[119.51454926 96.21067047]
[134.23007202 99.11814117]
[148.94558716 102.02561188]
[163.66111755 104.93308258]
[171.48696899 91.95111084]
[183.28292847 82.43105316]
[197.62454224 77.52252197]
[212.78001404 77.81822968]
[226.91925049 83.28248596]
[238.33485413 93.25543976]
[245.64833069 106.53281403]
[247.97656250 121.51130676]
[245.03840637 136.38218689]
[237.18862915 149.34971619]
[225.37515259 158.84800720]
[211.02452087 163.73011780]
[195.86961365 163.40646362]
[181.74047852 157.91616821]
[170.34327698 147.92219543]
[163.05427551 134.63136292]
[160.75364685 119.64860535]
[146.03811646 116.74113464]
[131.32260132 113.83366394]
[116.60707855 110.92619324]
[110.81255341 115.68785858]
[122.33272552 125.29440308]
[133.85289001 134.90095520]
[147.30853271 141.53012085]
[151.95077515 155.79368591]
[144.97450256 169.07267761]
[130.59519958 173.34304810]
[117.50182343 166.02435303]
[113.60626984 151.53868103]
[106.41488647 138.37493896]
[99.22350311 125.21119690]
[93.42897797 129.97286987]
[93.42897797 144.97286987]
[93.42897797 159.97286987]
[93.42897797 174.97286987]
[93.42897797 189.97286987]
[93.42897797 204.97286987]
[93.42897797 219.97286987]
[93.42897797 234.97286987]
[93.42897797 249.97286987]
[93.42897797 264.97286987]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[15 23]
[16 22]
[17 21]
[25 107]
[26 106]
[27 105]
[28 104]
[29 103]
[30 102]
[32 101]
[33 100]
[38 61]
[39 60]
[40 59]
[41 58]
[43 55]
[44 54]
[45 53]
[62 95]
[63 94]
[64 93]
[69 89]
[70 88]
[71 87]
[108 131]
[109 130]
[110 129]
[111 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
