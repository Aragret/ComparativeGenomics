%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACAGCAGUGAUUAACCUUUAGCAAUAAACGAAAGUUUAACUAAGCUAUACUAACCCCAGGGxxxxxxxxxxGCAUACACCACAUGAAACAUCCUAUCAUCUGUAGGCUCAUUCAUUUCUCUAACAGCAGUAAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[155.88041687 332.04830933]
[155.88041687 317.04830933]
[155.88041687 302.04830933]
[155.88041687 287.04830933]
[155.88041687 272.04830933]
[155.88041687 257.04830933]
[155.88041687 242.04830933]
[155.88041687 227.04830933]
[155.88041687 212.04830933]
[155.88041687 197.04830933]
[152.71220398 182.38671875]
[146.51870728 168.72506714]
[131.72827148 159.32661438]
[133.60545349 141.03573608]
[127.13636017 127.50241852]
[120.66725922 113.96910095]
[108.64208984 128.82081604]
[86.48227692 132.53547668]
[74.80915833 141.95558167]
[71.68237305 157.69097900]
[57.36484528 164.92892456]
[42.83974838 158.11708069]
[39.24950027 142.48091125]
[49.34822845 130.01515198]
[65.38905334 130.28245544]
[77.06217194 120.86235809]
[75.32981110 113.56517029]
[60.95826721 109.26881409]
[71.86509705 98.97079468]
[70.13274384 91.67361450]
[55.47114563 88.50539398]
[40.80955124 85.33716583]
[26.14795494 82.16894531]
[9.94378185 93.95432281]
[-9.42486000 90.17501831]
[-19.68976593 73.67654419]
[-34.51679230 71.40512848]
[-49.34381485 69.13371277]
[-64.17083740 66.86229706]
[-78.99786377 64.59087372]
[-94.07302856 71.04621887]
[-107.03716278 61.00315094]
[-104.55387115 44.79311371]
[-89.17776489 39.09160614]
[-76.72644806 49.76385117]
[-61.89942169 52.03527069]
[-47.07239914 54.30668640]
[-32.24537277 56.57810211]
[-17.41834831 58.84951782]
[-11.01846409 50.69523621]
[-1.72487164 45.92369843]
[8.79328156 45.46802521]
[18.61485100 49.47924423]
[25.91759109 57.28629684]
[29.31617546 67.50735474]
[43.97777176 70.67557526]
[58.63936615 73.84379578]
[73.30096436 77.01201630]
[92.19887543 69.16857910]
[110.10961914 73.48789978]
[120.66725922 86.03089905]
[127.13636017 72.49758148]
[133.60545349 58.96426010]
[133.08834839 54.51766586]
[133.95999146 50.55311966]
[135.88867188 47.45589828]
[138.44999695 45.45971298]
[141.18603516 44.62947845]
[148.72987366 31.66450882]
[156.27371216 18.69953728]
[143.15695190 25.97624969]
[128.66021729 29.82912445]
[113.66149139 30.02481270]
[99.06916809 26.55146599]
[85.76702881 19.61944199]
[74.56069183 9.64857578]
[66.12888336 -2.75725222]
[60.98226166 -16.84669113]
[59.43252563 -31.76642036]
[61.57353973 -46.61283493]
[67.27563477 -60.48677444]
[76.19345856 -72.54796600]
[87.78691864 -82.06593323]
[101.35385895 -88.46422577]
[116.07260895 -91.35533142]
[131.05172729 -90.56415558]
[145.38401794 -86.13861847]
[158.20146179 -78.34674835]
[168.72775269 -67.66044617]
[176.32540894 -54.72693253]
[180.53424072 -40.32951736]
[181.09938049 -25.34016609]
[177.98658752 -10.66670513]
[171.38237000 2.80524206]
[183.94860840 -5.38557959]
[196.51484680 -13.57640171]
[209.08108521 -21.76722336]
[208.87878418 -37.19326019]
[217.06790161 -50.26773453]
[231.03533936 -56.81862259]
[246.32414246 -54.75556946]
[258.05569458 -44.73687744]
[262.48651123 -29.95948410]
[258.20272827 -15.13879585]
[246.57130432 -5.00404310]
[231.30375671 -2.78918743]
[217.27191162 -9.20098209]
[204.70567322 -1.01015985]
[192.13943481 7.18066216]
[179.57318115 15.37148380]
[169.23867798 26.24337578]
[161.69483948 39.20834732]
[154.15100098 52.17332077]
[147.13877869 65.43335724]
[140.66967773 78.96668243]
[134.20057678 92.50000000]
[134.20057678 107.50000000]
[140.66967773 121.03331757]
[147.13877869 134.56663513]
[159.05085754 139.61213684]
[164.14633179 151.06469727]
[160.18035889 162.53158569]
[166.37384033 176.19323730]
[168.05978394 161.28828430]
[173.63529968 147.36299133]
[182.70173645 135.41310120]
[194.61079407 126.29309845]
[208.51089478 120.65509033]
[223.40812683 118.90222931]
[238.23724365 121.15985870]
[251.93792725 127.26654816]
[263.53045654 136.78562927]
[272.18594360 149.03643799]
[277.28549194 163.14299011]
[278.46441650 178.09658813]
[275.63842773 192.82798767]
[269.00958252 206.28378296]
[259.05194092 217.50186157]
[246.47746277 225.68003845]
[232.18531799 230.23353577]
[217.19744873 230.83677673]
[202.58557129 227.44660950]
[189.39453125 220.30545044]
[178.56752014 209.92393494]
[170.88041687 197.04830933]
[170.88041687 212.04830933]
[170.88041687 227.04830933]
[170.88041687 242.04830933]
[170.88041687 257.04830933]
[170.88041687 272.04830933]
[170.88041687 287.04830933]
[170.88041687 302.04830933]
[170.88041687 317.04830933]
[170.88041687 332.04830933]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[11 123]
[12 122]
[14 119]
[15 118]
[16 117]
[18 26]
[19 25]
[30 58]
[31 57]
[32 56]
[33 55]
[36 49]
[37 48]
[38 47]
[39 46]
[40 45]
[61 116]
[62 115]
[63 114]
[68 113]
[69 112]
[70 111]
[94 110]
[95 109]
[96 108]
[97 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
