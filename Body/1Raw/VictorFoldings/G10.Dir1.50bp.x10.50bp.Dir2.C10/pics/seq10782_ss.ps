%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAUUAUAUCCUUCUUGCUCAUCAGUUGAUGAUACGCCCGAGCAGAUGCCAACACAGCAGCCxxxxxxxxxxCCUUAAUGACAUUAACACUAUUCUCACCAGACCUCCUAGGCGACCCAGACAAUUAUACCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[81.50192261 423.95007324]
[81.50192261 408.95007324]
[81.50192261 393.95007324]
[81.50192261 378.95007324]
[81.50192261 363.95007324]
[81.50192261 348.95007324]
[81.50192261 333.95007324]
[81.50192261 318.95007324]
[81.50192261 303.95007324]
[81.50192261 288.95007324]
[66.46017456 285.35256958]
[52.70188522 278.26907349]
[41.02222824 268.10437012]
[32.09732819 255.44137573]
[26.44516563 241.00779724]
[24.39548874 225.63430786]
[26.07059479 210.20674133]
[31.37803078 195.61505127]
[40.01568604 182.70196533]
[51.48899841 172.21432495]
[65.13925934 164.75987244]
[80.18141937 160.77206421]
[79.87344360 145.77522278]
[79.56546021 130.77838135]
[69.01345062 120.11747742]
[54.02056122 119.65554810]
[39.02767563 119.19361877]
[24.03479195 118.73169708]
[9.04190540 118.26976776]
[-5.95098019 118.73169708]
[-20.88699341 120.11572266]
[-35.82300568 121.49974823]
[-50.75901794 122.88377380]
[-62.07302856 134.25798035]
[-78.00351715 132.36088562]
[-86.32998657 118.64777374]
[-80.66506958 103.63816833]
[-65.35441589 98.84615326]
[-52.14304352 107.94776154]
[-37.20703125 106.56373596]
[-22.27101898 105.17971039]
[-7.33500576 103.79568481]
[-17.86530495 93.11332703]
[-17.94771957 78.11354828]
[-7.53543997 67.31612396]
[7.45743656 66.85390472]
[18.51506615 76.98942566]
[19.35679626 91.96578979]
[9.50383186 103.27688599]
[24.49671745 103.73880768]
[39.48960495 104.20073700]
[54.48249054 104.66265869]
[69.47537231 105.12458801]
[74.35724640 86.31118774]
[88.82183075 75.22092438]
[105.83905792 75.38336945]
[113.47203064 62.47067261]
[121.10499573 49.55797577]
[128.73796082 36.64527512]
[116.65287018 27.73789787]
[105.53093719 17.65357399]
[95.48628998 6.49578857]
[86.62201691 -5.62096214]
[79.02907562 -18.57234001]
[72.78536987 -32.22544479]
[67.95498657 -46.44017029]
[64.58749390 -61.07064819]
[62.71743011 -75.96675110]
[62.36399841 -90.97561646]
[63.53082657 -105.94323730]
[66.20593262 -120.71601105]
[70.36187744 -135.14234924]
[75.95600128 -149.07420349]
[82.93090820 -162.36862183]
[91.21502686 -174.88919067]
[100.72333527 -186.50741577]
[111.35826874 -197.10406494]
[123.01070404 -206.57041931]
[135.56106567 -214.80932617]
[148.88055420 -221.73625183]
[162.83248901 -227.28010559]
[177.27371216 -231.38398743]
[192.05604553 -234.00581360]
[207.02777100 -235.11865234]
[222.03526306 -234.71110535]
[236.92453003 -232.78733826]
[251.54277039 -229.36709595]
[265.73999023 -224.48548889]
[279.37048340 -218.19259644]
[292.29440308 -210.55299377]
[304.37908936 -201.64508057]
[315.50057983 -191.56027222]
[325.54473877 -180.40205383]
[334.40847778 -168.28491211]
[342.00085449 -155.33319092]
[348.24395752 -141.67980957]
[353.07373047 -127.46488190]
[356.44058228 -112.83425140]
[358.30996704 -97.93806458]
[358.66275024 -82.92918396]
[357.49526978 -67.96161652]
[354.81948853 -53.18896484]
[350.66293335 -38.76280975]
[345.06817627 -24.83119583]
[338.09268188 -11.53707886]
[329.80804443 0.98311865]
[320.29919434 12.60092068]
[309.66381836 23.19710732]
[298.01095581 32.66294861]
[285.46023560 40.90130615]
[272.14044189 47.82764053]
[258.18826294 53.37087631]
[243.74684143 57.47413254]
[228.96441650 60.09530258]
[213.99263000 61.20748520]
[198.98515320 60.79927444]
[184.09597778 58.87485504]
[169.47789001 55.45397568]
[155.28088379 50.57173920]
[141.65066528 44.27824783]
[134.01770020 57.19094467]
[126.38472748 70.10364532]
[118.75175476 83.01634216]
[125.67700958 93.73573303]
[126.65267181 107.01551056]
[120.91341400 119.64178467]
[109.38285065 128.30682373]
[94.56230164 130.47039795]
[94.87027740 145.46723938]
[95.17826080 160.46408081]
[109.43058777 163.50740051]
[122.63575745 169.65515137]
[134.12747192 178.59339905]
[143.32672119 189.86755371]
[149.77096558 202.90539551]
[153.13737488 217.04618835]
[153.25897217 231.57412720]
[150.13299561 245.75459290]
[143.92080688 258.87127686]
[134.93952942 270.26235962]
[123.64596558 279.35394287]
[110.61327362 285.68896484]
[96.50192261 288.95007324]
[96.50192261 303.95007324]
[96.50192261 318.95007324]
[96.50192261 333.95007324]
[96.50192261 348.95007324]
[96.50192261 363.95007324]
[96.50192261 378.95007324]
[96.50192261 393.95007324]
[96.50192261 408.95007324]
[96.50192261 423.95007324]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[22 130]
[23 129]
[24 128]
[25 53]
[26 52]
[27 51]
[28 50]
[29 49]
[30 42]
[31 41]
[32 40]
[33 39]
[56 123]
[57 122]
[58 121]
[59 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
