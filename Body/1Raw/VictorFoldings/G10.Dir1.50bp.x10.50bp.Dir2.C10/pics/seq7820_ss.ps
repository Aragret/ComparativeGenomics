%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUACAUCACAAGACGUCUUGCACUCAUGAGCUGUCCCCACAUUAGGCUUAAAAACAGAUGCxxxxxxxxxxAACCAGUAAGCUACCCUUUUACCAUCAUUGGACAAGUAGCAUCCGUACUAUACUUCACAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[100.90754700 619.47363281]
[100.90754700 604.47363281]
[100.90754700 589.47363281]
[100.90754700 574.47363281]
[100.90754700 559.47363281]
[100.90754700 544.47363281]
[100.90754700 529.47363281]
[100.90754700 514.47363281]
[100.90754700 499.47363281]
[100.90754700 484.47363281]
[85.37550354 480.16098022]
[71.65979767 471.66564941]
[60.86115646 459.66027832]
[53.84877396 445.09951782]
[51.19034195 429.14422607]
[53.10608292 413.06884766]
[59.45055008 398.15960693]
[69.72363281 385.61160278]
[83.10995483 376.43304443]
[98.54362488 371.36425781]
[97.91964722 356.37722778]
[97.13980103 341.39752197]
[96.20417023 326.42672729]
[95.26854706 311.45593262]
[84.48259735 304.33834839]
[79.71311951 292.11840820]
[82.91954803 279.19763184]
[93.14392090 270.37042236]
[92.51994324 255.38339233]
[91.89596558 240.39637756]
[91.11612701 225.41667175]
[90.18049622 210.44587708]
[89.24486542 195.47508240]
[79.02709961 206.45675659]
[64.16349030 208.47499084]
[51.38740921 200.61549377]
[46.48654175 186.43869019]
[51.68102646 172.36683655]
[64.61771393 164.77459717]
[79.43615723 167.10133362]
[89.42360687 178.29339600]
[90.67047882 163.34530640]
[91.91735840 148.39721680]
[93.16423035 133.44912720]
[94.41110992 118.50104523]
[84.85443115 130.06262207]
[69.87281036 130.80490112]
[59.22009277 120.24461365]
[59.83177948 105.25708771]
[71.30963135 95.60002136]
[86.18055725 97.56046295]
[75.08924103 87.46181488]
[63.99792862 77.36315918]
[47.86959457 74.39517975]
[42.63146973 58.85509872]
[53.67208481 46.72922516]
[69.63380432 50.49161530]
[74.09658051 66.27185059]
[85.18789673 76.37049866]
[96.27920532 86.46914673]
[103.61746979 84.91998291]
[125.63226318 80.27249908]
[131.69526672 66.55245209]
[127.77142334 54.22129822]
[133.15344238 42.89642334]
[144.44548035 38.44700241]
[150.79261780 24.85605049]
[157.13973999 11.26509953]
[163.48686218 -2.32585144]
[150.83523560 5.73243618]
[136.21157837 9.07142925]
[121.31620026 7.30290556]
[107.88096619 0.63249063]
[97.46797943 -10.16425228]
[91.28794098 -23.83199501]
[90.05941772 -38.78160095]
[93.92523193 -53.27489090]
[102.43591309 -65.62674713]
[114.60193634 -74.40101624]
[129.00875854 -78.57753754]
[143.98132324 -77.67070007]
[157.77877808 -71.78594971]
[168.79690552 -61.60749054]
[175.75462341 -48.31877136]
[177.84298706 -33.46485519]
[174.81809998 -18.77010727]
[185.25791931 -29.54091454]
[195.69772339 -40.31172562]
[206.13754272 -51.08253098]
[202.52334595 -66.08057404]
[207.61303711 -80.64418030]
[219.78248596 -90.12615967]
[235.14848328 -91.50085449]
[248.80778503 -84.32958984]
[256.40176392 -70.90070343]
[255.50720215 -55.49929428]
[246.40956116 -43.03990555]
[232.01185608 -37.49827576]
[216.90834045 -40.64271927]
[206.46853638 -29.87191200]
[196.02871704 -19.10110283]
[185.58891296 -8.33029461]
[177.07781982 4.02127790]
[170.73069763 17.61222839]
[164.38356018 31.20318031]
[158.03643799 44.79413223]
[160.52195740 62.13835526]
[145.41532898 72.61546326]
[139.35231018 86.33551788]
[109.35919189 119.74791718]
[108.11231995 134.69601440]
[106.86544037 149.64408875]
[105.61856842 164.59217834]
[104.37169647 179.54026794]
[104.21566010 194.53945923]
[105.15128326 209.51025391]
[106.08691406 224.48103333]
[109.76576996 232.91418457]
[106.88298798 239.77239990]
[107.50696564 254.75941467]
[108.13094330 269.74642944]
[121.20809174 281.31906128]
[121.88871002 298.43106079]
[110.23933411 310.52032471]
[111.17496490 325.49108887]
[112.11059570 340.46188354]
[115.78944397 348.89505005]
[112.90666199 355.75326538]
[113.53063965 370.74026489]
[127.16063690 373.70031738]
[139.66679382 379.85314941]
[150.31420898 388.83184814]
[158.47845459 400.10360718]
[163.68226624 413.00131226]
[165.62339783 426.76309204]
[164.19221497 440.57720947]
[159.47781372 453.63003540]
[151.76254272 465.15396118]
[141.50506592 474.47247314]
[129.31314087 481.03997803]
[115.90754700 484.47363281]
[115.90754700 499.47363281]
[115.90754700 514.47363281]
[115.90754700 529.47363281]
[115.90754700 544.47363281]
[115.90754700 559.47363281]
[115.90754700 574.47363281]
[115.90754700 589.47363281]
[115.90754700 604.47363281]
[115.90754700 619.47363281]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[20 129]
[21 128]
[22 126]
[23 125]
[24 124]
[28 121]
[29 120]
[30 119]
[31 117]
[32 116]
[33 115]
[41 114]
[42 113]
[43 112]
[44 111]
[45 110]
[51 60]
[52 59]
[53 58]
[62 109]
[63 108]
[66 106]
[67 105]
[68 104]
[69 103]
[86 102]
[87 101]
[88 100]
[89 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
