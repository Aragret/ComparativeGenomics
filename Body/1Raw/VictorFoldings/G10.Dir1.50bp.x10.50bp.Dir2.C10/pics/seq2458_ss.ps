%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCCUCACACCCAAUUGGACCAAUCUAUCACCCUAUAGAAGAACUAAUGUUAGUAUAAGUxxxxxxxxxxUCCUAAUGACCUCCGGCCUAGCCAUGUGAUUUCACUUCCACUCCAUAACGCUCCUCAUACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[126.57063293 479.44921875]
[126.57063293 464.44921875]
[126.57063293 449.44921875]
[126.57063293 434.44921875]
[126.57063293 419.44921875]
[126.57063293 404.44921875]
[126.57063293 389.44921875]
[126.57063293 374.44921875]
[126.57063293 359.44921875]
[126.57063293 344.44921875]
[111.84082031 341.71554565]
[97.86044312 336.32028198]
[85.10616302 328.44580078]
[74.01312256 318.35900879]
[64.96009064 306.40237427]
[58.25656509 292.98220825]
[54.13215256 278.55490112]
[52.72872925 263.61141968]
[54.09555054 248.66053772]
[58.18752670 234.21156311]
[64.86670685 220.75700378]
[73.90693665 208.75570679]
[85.00149536 198.61730957]
[97.77352905 190.68815613]
[111.78883362 185.23954773]
[126.57063293 182.45840454]
[126.57063293 167.45840454]
[126.57063293 152.45840454]
[126.57063293 137.45840454]
[108.40081787 142.16148376]
[91.11769867 139.05804443]
[77.71605682 129.68740845]
[70.10858917 116.58729553]
[68.86605835 102.69430542]
[54.04830170 100.36319733]
[39.23054504 98.03209686]
[24.41278648 95.70099640]
[9.59502792 93.36988831]
[-3.03210425 102.87415314]
[-18.66947365 100.58325958]
[-28.03970718 87.85634613]
[-25.58361244 72.24407196]
[-12.75834465 63.00891876]
[2.82709098 65.62994385]
[11.92613125 78.55213165]
[26.74388885 80.88323212]
[41.56164932 83.21434021]
[56.37940598 85.54544067]
[71.19716644 87.87654877]
[78.01792908 77.78806305]
[88.17681885 71.07260895]
[85.99998474 56.23140335]
[79.79457855 42.57516098]
[70.04692841 31.17414093]
[60.29927444 19.77312088]
[50.55162048 8.37209988]
[34.91832733 3.41911197]
[31.65581703 -12.65223122]
[44.12028503 -23.30911064]
[59.48935318 -17.58864212]
[61.95264435 -1.37555265]
[71.70029449 10.02546787]
[81.44794464 21.42648888]
[91.19560242 32.82751083]
[88.88620758 18.00635147]
[89.75560760 3.03156829]
[93.76464844 -11.42275906]
[100.73287201 -24.70597649]
[110.34660339 -36.22014618]
[122.17309570 -45.44696426]
[135.67997742 -51.97108841]
[150.25923157 -55.49884033]
[165.25460815 -55.87142181]
[179.99107361 -53.07205582]
[193.80529785 -47.22676086]
[206.07540894 -38.59865570]
[216.24909973 -27.57613182]
[223.86839294 -14.65536022]
[228.59031677 -0.41796502]
[230.20231628 14.49516582]
[228.63183594 29.41272354]
[223.94953918 43.66320419]
[216.36624146 56.60512924]
[206.22326660 67.65592194]
[193.97720337 76.31814575]
[180.17930603 82.20185852]
[165.45068359 85.04222870]
[150.45433044 84.71138000]
[135.86531067 81.22421265]
[122.34032440 74.73770142]
[110.48820496 65.54383087]
[100.84119415 54.05456543]
[103.01802826 68.89577484]
[118.10151672 65.92137909]
[135.39097595 70.73211670]
[147.83041382 62.34997559]
[160.26986694 53.96783066]
[170.02644348 40.10256577]
[186.05073547 45.63956833]
[185.16609192 62.57041931]
[168.65200806 66.40727234]
[156.21257019 74.78941345]
[143.77311707 83.17155457]
[145.92691040 90.35565186]
[150.23449707 104.72383118]
[152.38829041 111.90792847]
[167.38748169 112.06396484]
[182.38667297 112.22000122]
[190.13488770 98.95875549]
[203.48361206 91.36223602]
[218.84210205 91.47386169]
[232.07899475 99.26361084]
[239.63363647 112.63608551]
[239.47386169 127.99414825]
[231.64266968 141.20655823]
[218.24658203 148.71923828]
[202.88909912 148.51133728]
[189.70129395 140.63874817]
[182.23063660 127.21918488]
[167.23144531 127.06314850]
[152.23225403 126.90711212]
[141.57063293 137.45840454]
[141.57063293 152.45840454]
[141.57063293 167.45840454]
[141.57063293 182.45840454]
[156.35241699 185.23954773]
[170.36773682 190.68815613]
[183.13977051 198.61730957]
[194.23432922 208.75570679]
[203.27455139 220.75700378]
[209.95373535 234.21156311]
[214.04571533 248.66053772]
[215.41253662 263.61141968]
[214.00910950 278.55490112]
[209.88468933 292.98220825]
[203.18116760 306.40237427]
[194.12814331 318.35900879]
[183.03509521 328.44580078]
[170.28080750 336.32028198]
[156.30044556 341.71554565]
[141.57063293 344.44921875]
[141.57063293 359.44921875]
[141.57063293 374.44921875]
[141.57063293 389.44921875]
[141.57063293 404.44921875]
[141.57063293 419.44921875]
[141.57063293 434.44921875]
[141.57063293 449.44921875]
[141.57063293 464.44921875]
[141.57063293 479.44921875]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[26 125]
[27 124]
[28 123]
[29 122]
[34 49]
[35 48]
[36 47]
[37 46]
[38 45]
[51 93]
[52 92]
[53 64]
[54 63]
[55 62]
[56 61]
[95 103]
[96 102]
[97 101]
[106 121]
[107 120]
[108 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
