%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCAAAGGACCUGGCGGUGCUUCAUAUCCCUCUAGAGGAGCCUGUUCUGUAAUCGAUAAACCxxxxxxxxxxCAGGGCCCUGAAGCGCGUACACACCGCCCGUCACCCUCCUCAAGUAUACUUCAAAGGACAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[156.50976562 299.14999390]
[155.58634949 284.17843628]
[154.66293335 269.20690918]
[153.73951721 254.23535156]
[152.81611633 239.26379395]
[151.89270020 224.29225159]
[150.96928406 209.32069397]
[146.27548218 195.07400513]
[138.11882019 182.48556519]
[129.96214294 169.89712524]
[121.80548096 157.30868530]
[115.83880615 171.07090759]
[101.41526794 175.18936157]
[89.08142090 166.65260315]
[87.85582733 151.70275879]
[98.63464355 141.27120972]
[113.53582764 142.98521423]
[106.71224976 129.62712097]
[99.88867188 116.26902008]
[89.01197815 111.99819946]
[83.80346680 101.53810120]
[86.94995117 90.28456116]
[80.40208435 76.78917694]
[73.85420990 63.29379654]
[67.30634308 49.79841232]
[60.75846863 36.30302811]
[54.21059799 22.80764389]
[46.57762909 9.89494610]
[37.91102219 -2.34800744]
[29.24441338 -14.59096146]
[20.57780647 -26.83391571]
[11.91119862 -39.07686996]
[3.24459147 -51.31982040]
[-12.15680408 -51.64104462]
[-24.27424812 -60.86172867]
[-28.58769417 -75.27901459]
[-23.64372444 -89.30381775]
[-32.31033325 -101.54677582]
[-40.97694016 -113.78972626]
[-49.64354706 -126.03268433]
[-63.57315826 -120.30800629]
[-78.42030334 -117.82796478]
[-93.43983459 -118.71376038]
[-107.87866974 -122.91775513]
[-121.01356506 -130.22602844]
[-132.18733215 -140.26922607]
[-140.84173584 -152.54127502]
[-146.54536438 -166.42486572]
[-149.01513672 -181.22244263]
[-148.13035583 -196.19136047]
[-143.93859863 -210.58108521]
[-136.65321350 -223.67083740]
[-126.64234924 -234.80566406]
[-135.30895996 -247.04862976]
[-143.97557068 -259.29156494]
[-159.01718140 -256.70068359]
[-173.69097900 -260.90090942]
[-185.08349609 -271.05834961]
[-190.93272400 -285.15618896]
[-190.07730103 -300.39532471]
[-182.68705750 -313.75000000]
[-170.22935486 -322.56863403]
[-155.17765808 -325.10028076]
[-140.52050781 -320.84228516]
[-129.16807556 -310.64004517]
[-123.37441254 -296.51928711]
[-124.28984070 -281.28366089]
[-131.73260498 -267.95819092]
[-123.06600189 -255.71522522]
[-114.39939880 -243.47227478]
[-100.57036591 -249.21334839]
[-85.80338287 -251.73416138]
[-70.83850861 -250.90513611]
[-56.42643738 -246.76461792]
[-43.29087067 -239.51719666]
[-32.09214020 -229.52352905]
[-23.39402771 -217.28240967]
[-17.63539124 -203.40591431]
[-15.10801125 -188.58874512]
[-15.94181156 -173.57347107]
[-20.09818459 -159.11334229]
[-27.37176895 -145.93444824]
[-37.40059280 -134.69929504]
[-28.73398590 -122.45633698]
[-20.06737900 -110.21337891]
[-11.40077114 -97.97042847]
[3.46993852 -97.97214508]
[15.63407230 -89.11224365]
[20.30330849 -74.61908722]
[15.48754501 -59.98643112]
[24.15415192 -47.74347687]
[32.82075882 -35.50052261]
[41.48736572 -23.25756836]
[50.15397644 -11.01461506]
[58.82058334 1.22833872]
[60.86498260 -13.63168907]
[71.13859558 -24.56114197]
[85.84386444 -27.52004242]
[99.54511261 -21.41465950]
[107.17780304 -8.50179291]
[105.92056274 6.44542599]
[96.23813629 17.90188789]
[81.70953369 21.63281441]
[67.70598602 16.25977325]
[74.25385284 29.75515747]
[80.80172729 43.25054169]
[87.34959412 56.74592590]
[93.89746857 70.24131012]
[100.44533539 83.73669434]
[114.56377411 92.74810028]
[113.24677277 109.44544220]
[120.07035065 122.80354309]
[126.89392090 136.16165161]
[134.39392090 149.15202332]
[142.55058289 161.74046326]
[150.70726013 174.32890320]
[158.86392212 186.91734314]
[158.39263916 171.92474365]
[161.32795715 157.21475220]
[167.51742554 143.55128479]
[176.63961792 131.64392090]
[188.22080994 122.11102295]
[201.65956116 115.44766998]
[216.25794983 111.99990845]
[231.25785828 111.94678497]
[245.88029480 115.29105377]
[259.36590576 121.85903931]
[271.01431274 131.30966187]
[280.22064209 143.15211487]
[286.50674438 156.77139282]
[289.54617310 171.46023560]
[289.18112183 186.45578003]
[285.43048096 200.97930908]
[278.48910522 214.27656555]
[268.71740723 225.65699768]
[256.62289429 234.52958679]
[242.83364868 240.43354797]
[228.06579590 243.06230164]
[213.08624268 242.27931213]
[198.67292786 238.12525940]
[185.57435608 230.81584167]
[174.47077942 220.73068237]
[165.94082642 208.39729309]
[166.86424255 223.36883545]
[167.78765869 238.34039307]
[168.71107483 253.31193542]
[169.63449097 268.28347778]
[170.55790710 283.25503540]
[171.48130798 298.22659302]
[180.98574829 311.59063721]
[173.91921997 326.38916016]
[157.55117798 327.39871216]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 117]
[9 116]
[10 115]
[11 114]
[17 113]
[18 112]
[19 111]
[22 109]
[23 108]
[24 107]
[25 106]
[26 105]
[27 104]
[28 95]
[29 94]
[30 93]
[31 92]
[32 91]
[33 90]
[37 86]
[38 85]
[39 84]
[40 83]
[53 70]
[54 69]
[55 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
