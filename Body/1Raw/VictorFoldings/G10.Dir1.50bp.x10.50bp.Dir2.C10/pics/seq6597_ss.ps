%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAUUUCAUCACAACAAUUAUCAAUAUAAAACCCCCUGCCAUAACCCAAUACCAAACGCCCCUCxxxxxxxxxxGACGUUGACAAUCGAGUAGUACUCCCGAUUGAAGCCCCCAUUCGUAUAAUAAUUACAUCACAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[9.21510887 173.75903320]
[4.42322969 167.43421936]
[-8.36245060 175.27809143]
[-16.07939529 189.08966064]
[-30.97387886 189.14994812]
[-43.75955963 196.99383545]
[-56.54523849 204.83770752]
[-69.33091736 212.68157959]
[-82.11660004 220.52545166]
[-94.90228271 228.36933899]
[-98.67834473 240.74060059]
[-109.53536987 247.00198364]
[-121.35191345 244.25524902]
[-134.29197693 251.84173584]
[-147.23205566 259.42822266]
[-143.38186646 274.02542114]
[-143.61387634 289.12008667]
[-147.91088867 303.59207153]
[-155.95402527 316.36746216]
[-167.14642334 326.49822998]
[-180.65754700 333.23263550]
[-195.48478699 336.07089233]
[-210.52783203 334.80242920]
[-224.67042542 329.52136230]
[-236.86306763 320.61956787]
[-246.20100403 308.75762939]
[-251.99127197 294.81576538]
[-253.80421448 279.82858276]
[-251.50529480 264.90820312]
[-245.26510620 251.16183472]
[-235.54672241 239.60954285]
[-223.07128906 231.10858154]
[-208.76458740 226.28979492]
[-193.68826294 225.51074219]
[-178.96107483 228.82925415]
[-165.67587280 235.99906921]
[-154.81852722 246.48814392]
[-141.87846375 238.90165710]
[-128.93840027 231.31518555]
[-121.13437653 215.62355042]
[-102.74615479 215.58364868]
[-89.96047211 207.73977661]
[-77.17479706 199.89590454]
[-64.38911438 192.05203247]
[-51.60343552 184.20814514]
[-38.81775284 176.36427307]
[-32.01532745 163.11375427]
[-16.20632553 162.49241638]
[-3.42064619 154.64852905]
[-9.53056908 141.05297852]
[-13.86195564 126.79080963]
[-16.34447479 112.09361267]
[-16.93781471 97.20005035]
[-15.63234234 82.35195160]
[-12.44925404 67.79041290]
[-7.44023752 53.75188828]
[-0.68662727 40.46433640]
[7.70191240 28.14350891]
[17.58917046 16.98947334]
[28.81459808 7.18334770]
[41.19592285 -1.11564040]
[54.53209305 -7.77273226]
[68.60656738 -12.67983246]
[83.19079590 -15.75725842]
[81.99147034 -30.70923615]
[80.79214478 -45.66121292]
[79.59281158 -60.61318970]
[64.87333679 -64.10491180]
[51.95433426 -71.97603607]
[42.10148621 -83.45542908]
[36.28006744 -97.41846466]
[35.06040573 -112.49717712]
[38.56198883 -127.21431732]
[46.44176865 -140.12803650]
[57.92776489 -149.97319031]
[71.89469147 -155.78524780]
[86.97422028 -156.99481201]
[101.68901062 -153.48336792]
[114.59745026 -145.59494019]
[124.43490601 -134.10234070]
[130.23760986 -120.13152313]
[131.43705750 -105.05119324]
[127.91575623 -90.33876038]
[120.01867676 -77.43560791]
[108.51950073 -67.60585785]
[94.54479218 -61.81251526]
[95.74411774 -46.86053848]
[96.94344330 -31.90856361]
[98.14277649 -16.95658684]
[133.99249268 -11.92320061]
[166.58628845 3.83057570]
[192.80223083 28.79579163]
[205.26383972 20.44664764]
[217.72544861 12.09750175]
[230.18705750 3.74835706]
[242.64868164 -4.60078812]
[255.11029053 -12.94993305]
[267.40234375 -21.54674911]
[279.51992798 -30.38779259]
[291.63751221 -39.22883606]
[300.86926270 -53.44893646]
[317.08923340 -48.51449203]
[316.83776855 -31.56240845]
[300.47857666 -27.11124802]
[288.36099243 -18.27020454]
[276.24337769 -9.42916012]
[274.62991333 -4.87993860]
[270.10968018 -1.32016456]
[263.45944214 -0.48832068]
[250.99781799 7.86082411]
[238.53620911 16.20996857]
[226.07460022 24.55911446]
[213.61297607 32.90826035]
[201.15136719 41.25740433]
[204.90130615 48.25051117]
[208.16847229 55.48176956]
[210.93786621 62.91790009]
[213.19671631 70.52468109]
[214.93464661 78.26710510]
[216.14364624 86.10954285]
[216.81816101 94.01590729]
[216.95507812 101.94980621]
[216.55377197 109.87473297]
[215.61608887 117.75421906]
[214.14634705 125.55199432]
[212.15130615 133.23219299]
[209.64013672 140.75944519]
[206.62442017 148.09912109]
[203.11801147 155.21746826]
[199.13705444 162.08168030]
[194.69989014 168.66020203]
[189.82690430 174.92276001]
[184.54054260 180.84051514]
[178.86511230 186.38626099]
[172.82676697 191.53443909]
[166.45326233 196.26139832]
[159.77395630 200.54534912]
[152.81956482 204.36659241]
[145.62208557 207.70755005]
[138.21467590 210.55284119]
[130.63139343 212.88937378]
[122.90714264 214.70639038]
[115.07747650 215.99552917]
[107.17842865 216.75085449]
[99.24634552 216.96890259]
[91.31772614 216.64866638]
[83.42906189 215.79161072]
[75.61666107 214.40168762]
[67.91646576 212.48529053]
[60.36392593 210.05123901]
[52.99378586 207.11073303]
[45.83996582 203.67730713]
[38.93539047 199.76675415]
[32.31183243 195.39709473]
[25.99977493 190.58840942]
[20.02826309 185.36283875]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 49]
[3 48]
[5 46]
[6 45]
[7 44]
[8 43]
[9 42]
[10 41]
[13 39]
[14 38]
[15 37]
[64 89]
[65 88]
[66 87]
[67 86]
[92 114]
[93 113]
[94 112]
[95 111]
[96 110]
[97 109]
[98 106]
[99 105]
[100 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
