%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACACAGACAUCAUAACAAAAAAUUUCCACCAAACCCCCCCUCCCCCGCUUCUGGCCACAGxxxxxxxxxxCAAUAUCUACAAUCAACCAACAAGUCAUUAUUACCCUCACUGUCAACCCAACACAGGCAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-20.48882103 156.90232849]
[-34.39137650 162.53428650]
[-48.29393387 168.16624451]
[-62.19649124 173.79820251]
[-76.09904480 179.43016052]
[-89.94226074 185.20643616]
[-103.72464752 191.12638855]
[-117.50702667 197.04635620]
[-131.28941345 202.96632385]
[-145.07179260 208.88627625]
[-141.55470276 223.50607300]
[-140.55912781 238.50996399]
[-142.11372375 253.46627808]
[-146.17375183 267.94467163]
[-152.62237549 281.52859497]
[-161.27409363 293.82720947]
[-171.87995911 304.48666382]
[-184.13481140 313.20022583]
[-197.68608093 319.71725464]
[-212.14384460 323.85018921]
[-227.09213257 325.48010254]
[-242.10084534 324.56015015]
[-256.73815918 321.11679077]
[-270.58294678 315.24908447]
[-283.23684692 307.12585449]
[-294.33578491 296.98080444]
[-303.56042480 285.10586548]
[-310.64532471 271.84268188]
[-315.38668823 257.57287598]
[-317.64807129 242.70700073]
[-317.36441040 227.67279053]
[-314.54388428 212.90280151]
[-309.26760864 198.82200623]
[-301.68740845 185.83552551]
[-292.02139282 174.31700134]
[-280.54766846 164.59785461]
[-267.59637451 156.95773315]
[-253.54010010 151.61645508]
[-238.78330994 148.72767639]
[-223.75056458 148.37454224]
[-208.87440491 150.56719971]
[-194.58282471 155.24255371]
[-181.28704834 162.26609802]
[-169.36959839 171.43576050]
[-159.17338562 182.48768616]
[-150.99174500 195.10389709]
[-137.20936584 189.18392944]
[-123.42698669 183.26397705]
[-109.64460754 177.34400940]
[-95.86222839 171.42404175]
[-90.92569733 165.85841370]
[-81.73100281 165.52760315]
[-67.82844543 159.89564514]
[-53.92589188 154.26368713]
[-40.02333450 148.63172913]
[-26.12077904 142.99977112]
[-33.12524414 105.75330353]
[-29.36026955 68.04140472]
[-15.13042927 32.91486359]
[8.41312408 3.21531320]
[39.36578751 -18.65464020]
[33.30277634 -32.37469482]
[27.23976135 -46.09474564]
[13.68731689 -55.32855988]
[15.17747402 -71.65986633]
[30.17728615 -78.28841400]
[43.25623322 -68.39532471]
[40.95981598 -52.15776062]
[47.02282715 -38.43770599]
[53.08584213 -24.71765327]
[60.20034790 -27.16689491]
[67.44175720 -29.21065140]
[74.78698730 -30.84240723]
[82.21260834 -32.05695724]
[89.69494629 -32.85043335]
[97.21014404 -33.22029877]
[104.73423767 -33.16537857]
[112.24323273 -32.68584824]
[119.71318817 -31.78323746]
[127.12029266 -30.46042061]
[134.44091797 -28.72161674]
[141.65171814 -26.57237244]
[148.72972107 -24.01953888]
[155.65232849 -21.07125664]
[162.39749146 -17.73692703]
[168.94369507 -14.02717972]
[175.27006531 -9.95384693]
[181.35643005 -5.52991438]
[187.18338013 -0.76948911]
[192.73233032 4.31224966]
[197.98561096 9.69909859]
[202.92643738 15.37388134]
[207.53907776 21.31850243]
[211.80882263 27.51400757]
[215.72204590 33.94064331]
[219.26628113 40.57791138]
[222.43023682 47.40465546]
[225.20379639 54.39910507]
[227.57812500 61.53895950]
[229.54566956 68.80145264]
[231.10014343 76.16342163]
[232.23658752 83.60139465]
[232.95138550 91.09165955]
[233.24226379 98.61032867]
[233.10827637 106.13342285]
[232.54985046 113.63697052]
[231.56878662 121.09703064]
[230.16819763 128.48982239]
[228.35256958 135.79176331]
[226.12765503 142.97958374]
[223.50057983 150.03036499]
[220.47970581 156.92161560]
[217.07467651 163.63136292]
[213.29634094 170.13821411]
[209.15675354 176.42143250]
[204.66909790 182.46096802]
[199.84770203 188.23756409]
[194.70793152 193.73280334]
[189.26617432 198.92918396]
[183.53977966 203.81010437]
[177.54701233 208.36001587]
[171.30697632 212.56440735]
[164.83956909 216.40988159]
[158.16542053 219.88417053]
[151.30580139 222.97619629]
[144.28259277 225.67610168]
[137.11817932 227.97528076]
[129.83541870 229.86639404]
[122.45751190 231.34341431]
[115.00801086 232.40162659]
[107.51064301 233.03767395]
[99.98933411 233.24951172]
[92.46806335 233.03646851]
[84.97080231 232.39923096]
[77.52146149 231.33981323]
[70.14379883 229.86161804]
[62.86133575 227.96932983]
[55.69729233 225.66902161]
[48.67451477 222.96798706]
[41.81539154 219.87486267]
[35.14179611 216.39950562]
[28.67500877 212.55299377]
[22.43564796 208.34759521]
[16.44360733 203.79672241]
[10.71799660 198.91488647]
[5.27706909 193.71765137]
[0.13817592 188.22158813]
[-4.68229771 182.44421387]
[-9.16898155 176.40396118]
[-13.30756950 170.12008667]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 56]
[2 55]
[3 54]
[4 53]
[5 52]
[6 50]
[7 49]
[8 48]
[9 47]
[10 46]
[61 70]
[62 69]
[63 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
