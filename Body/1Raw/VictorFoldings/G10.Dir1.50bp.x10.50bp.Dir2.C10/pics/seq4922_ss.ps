%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUACUCAUCAUUAAUAAUCAUAAUAGCUAUAGCAAUAAAACUAGGAAUAGCCCCCUUUCAxxxxxxxxxxGCAGGCAGUUGAGGUGGAUUAAACCAAACCCAGCUACGCAAAAUCUUAGCAUACUCCUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[105.72119141 280.83450317]
[105.72119141 265.83450317]
[105.72119141 250.83451843]
[105.72119141 235.83451843]
[105.72119141 220.83451843]
[105.72119141 205.83451843]
[105.72119141 190.83451843]
[105.72119141 175.83451843]
[105.72119141 160.83451843]
[105.72119141 145.83451843]
[83.69141388 138.69314575]
[69.89014435 122.83441162]
[66.67678833 104.21317291]
[72.90116119 88.62882233]
[61.00878143 79.48708344]
[49.11640167 70.34535217]
[37.22402191 61.20361710]
[21.56740761 58.92744446]
[16.19239235 45.03649521]
[1.27348077 43.47891617]
[-12.25070953 49.96707916]
[-25.77489853 56.45524597]
[-39.29908752 62.94340897]
[-43.00476456 78.13558197]
[-55.63934326 87.34977722]
[-71.23716736 86.23533630]
[-82.43341827 75.31846619]
[-83.94156647 59.75378036]
[-75.04951477 46.89044189]
[-59.95581436 42.80213165]
[-45.78725433 49.41921997]
[-32.26306534 42.93105316]
[-18.73887444 36.44289017]
[-5.21468449 29.95472527]
[-10.52566528 18.54442596]
[-9.76915264 7.10669231]
[-23.29334259 0.61852700]
[-36.81753159 -5.86963797]
[-50.34172440 -12.35780334]
[-63.86591339 -18.84596825]
[-74.68415833 -8.22799492]
[-88.48283386 -1.95324683]
[-103.59567261 -0.77943063]
[-118.19773102 -4.84829044]
[-130.52574158 -13.66849136]
[-139.09103394 -26.17495155]
[-142.85931396 -40.85745621]
[-141.37553406 -55.94301605]
[-134.81887817 -69.60998535]
[-123.98107910 -80.20800018]
[-110.17086792 -86.45731354]
[-95.05588531 -87.60327148]
[-80.46134949 -83.50751495]
[-68.14961243 -74.66460419]
[-59.60737991 -62.14238358]
[-55.86616898 -47.45296097]
[-57.37774658 -32.37015915]
[-43.85355759 -25.88199234]
[-30.32936859 -19.39382744]
[-16.80517769 -12.90566254]
[-3.28098774 -6.41749763]
[-1.07015955 -8.33346176]
[1.37283885 -9.94294453]
[4.00580978 -11.21814823]
[3.38183236 -26.20516396]
[2.75785494 -41.19218063]
[-11.69717312 -45.75594711]
[-23.71766663 -54.99085617]
[-31.85209084 -67.78174591]
[-35.11817551 -82.58406067]
[-33.12152481 -97.61034393]
[-26.10324287 -111.04610443]
[-14.91082287 -121.26889801]
[-0.89580435 -127.04428101]
[14.24943256 -127.67484283]
[28.69602585 -123.08444977]
[40.69947815 -113.82740021]
[48.81031799 -101.02153778]
[52.04911804 -86.21323395]
[50.02478027 -71.19065094]
[42.98175049 -57.76785660]
[31.77050972 -47.56570435]
[17.74487114 -41.81615829]
[18.36884880 -26.82914162]
[18.99282646 -11.84212494]
[33.43129730 -1.79270446]
[36.75001907 16.71183205]
[25.33412743 33.14411545]
[40.14012146 34.76641083]
[46.36575699 49.31123734]
[58.25813675 58.45297241]
[70.15051270 67.59470367]
[82.04289246 76.73644257]
[111.12541962 63.88575363]
[143.90667725 85.65640259]
[157.68905640 79.73644257]
[171.47143555 73.81647491]
[182.10511780 58.81965637]
[199.42256165 61.48546600]
[213.07879639 55.28005600]
[220.03727722 40.82463837]
[235.70896912 37.39279938]
[248.07189941 47.61715317]
[247.64228821 63.65445328]
[234.74967957 73.20225525]
[219.28421021 68.93630219]
[205.62796021 75.14170837]
[201.06130981 86.38684082]
[189.68106079 91.65076447]
[177.39140320 87.59886169]
[163.60902405 93.51882172]
[149.82664490 99.43878174]
[150.29467773 114.43148041]
[164.41947937 119.48023987]
[178.54428101 124.52899170]
[192.66908264 129.57774353]
[204.32534790 119.57638550]
[219.42358398 116.75884247]
[233.90248108 121.88304138]
[243.86726379 133.57058716]
[246.63745117 148.67758179]
[241.46791077 163.14035034]
[229.74917603 173.06843567]
[214.63357544 175.79127502]
[200.18708801 170.57641602]
[190.29577637 158.82662964]
[187.62033081 143.70256042]
[173.49552917 138.65379333]
[159.37072754 133.60504150]
[145.24592590 128.55628967]
[139.11474609 132.87583923]
[149.08992004 144.07833862]
[159.06509399 155.28082275]
[171.40583801 163.80760193]
[171.47413635 178.80744934]
[159.21154785 187.44624329]
[145.11013794 182.33248901]
[141.23513794 167.84243774]
[134.04376221 154.67869568]
[126.85237122 141.51495361]
[120.72119141 145.83451843]
[120.72119141 160.83451843]
[120.72119141 175.83451843]
[120.72119141 190.83451843]
[120.72119141 205.83451843]
[120.72119141 220.83451843]
[120.72119141 235.83451843]
[120.72119141 250.83451843]
[120.72119141 265.83450317]
[120.72119141 280.83450317]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[14 93]
[15 92]
[16 91]
[17 90]
[19 88]
[20 34]
[21 33]
[22 32]
[23 31]
[36 61]
[37 60]
[38 59]
[39 58]
[40 57]
[64 85]
[65 84]
[66 83]
[95 112]
[96 111]
[97 110]
[99 107]
[100 106]
[113 130]
[114 129]
[115 128]
[116 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
