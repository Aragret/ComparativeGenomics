%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUUACUAAUAAGUGGCUCCUUUAACCUCUCCACCCUUAUCACAACACAAGAACACCUCUxxxxxxxxxxAAGCUUCACCGGCGCAGUCAUUCUCAUAAUCGCCCACGGGCUUACAUCCUCAUUACUAUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[127.80712128 449.53042603]
[127.80712128 434.53042603]
[127.80712128 419.53042603]
[127.80712128 404.53042603]
[127.80712128 389.53042603]
[127.80712128 374.53042603]
[127.80712128 359.53042603]
[127.80712128 344.53042603]
[127.80712128 329.53042603]
[127.80712128 314.53042603]
[110.06440735 310.00784302]
[94.22470093 300.79971313]
[81.49876404 287.60260010]
[72.86138153 271.41812134]
[68.97666168 253.47711182]
[70.14701080 235.14599609]
[76.28958130 217.82269287]
[86.94209290 202.82997131]
[101.29765320 191.31452942]
[118.26584625 184.15925598]
[116.08900452 169.31803894]
[113.91217041 154.47683716]
[111.73532867 139.63563538]
[109.55849457 124.79442596]
[83.50440979 116.87080383]
[80.60098267 93.01837921]
[69.30197144 83.15265656]
[58.00297165 73.28693390]
[46.90192032 83.39952087]
[34.72046280 92.18074036]
[21.61740494 99.51611328]
[7.76357508 105.31000519]
[-6.66041565 109.48687744]
[-21.46652031 111.99227905]
[-36.46171188 112.79354095]
[-51.45049286 111.88023376]
[-66.23745728 109.26424408]
[-80.62982941 104.97969055]
[-94.43997192 99.08242035]
[-107.48784637 91.64933014]
[-119.60333252 82.77731323]
[-130.62849426 72.58204651]
[-140.41958618 61.19643021]
[-148.84898376 48.76891327]
[-155.80676270 35.46150589]
[-161.20222473 21.44770050]
[-164.96502686 6.91019630]
[-167.04612732 -7.96148109]
[-167.41838074 -22.97344971]
[-166.07693481 -37.92999649]
[-163.03929138 -52.63613129]
[-158.34503174 -66.90013123]
[-152.05537415 -80.53604126]
[-144.25230408 -93.36607361]
[-135.03755188 -105.22298431]
[-124.53126526 -115.95217133]
[-112.87039185 -125.41377258]
[-100.20697021 -133.48443604]
[-86.70609283 -140.05892944]
[-72.54376984 -145.05155945]
[-57.90463638 -148.39723206]
[-42.97954178 -150.05232239]
[-27.96306801 -149.99526978]
[-13.05098438 -148.22679138]
[1.56230032 -144.76995850]
[15.68627167 -139.66984558]
[29.13679314 -132.99291992]
[41.73851013 -124.82625580]
[53.32713699 -115.27630615]
[63.75158691 -104.46758270]
[72.87595367 -92.54098511]
[80.58129120 -79.65201569]
[86.76714325 -65.96870422]
[91.35285950 -51.66944122]
[94.27865601 -36.94064331]
[95.50638580 -21.97433281]
[95.02005768 -6.96562624]
[92.82599640 7.88980579]
[88.95281219 22.39829254]
[83.45099640 36.37068939]
[76.39228058 49.62483215]
[67.86869049 61.98793030]
[79.16770172 71.85365295]
[90.46670532 81.71937561]
[97.75956726 78.30709076]
[106.24251556 77.86388397]
[114.69086456 80.78105164]
[121.76551819 86.94234467]
[126.22265625 95.69872284]
[140.12521362 90.06677246]
[154.02777100 84.43481445]
[167.74781799 78.37180328]
[181.27200317 71.88363647]
[194.79620361 65.39546967]
[181.91406250 57.71104050]
[179.67903137 42.87848663]
[189.72474670 31.73920250]
[204.70860291 32.43510818]
[213.67860413 44.45755005]
[210.07882690 59.01858521]
[224.20362854 53.96982956]
[238.32843018 48.92107010]
[246.46443176 35.09410095]
[262.36715698 32.97684860]
[273.83740234 44.19348907]
[272.07617188 60.13957596]
[258.43453979 68.58263397]
[243.37718201 63.04587555]
[229.25238037 68.09462738]
[215.12757874 73.14338684]
[201.28436279 78.91966248]
[187.76017761 85.40782166]
[174.23597717 91.89598846]
[172.72732544 95.15043640]
[169.53233337 97.81385040]
[164.95686340 99.08562469]
[159.65972900 98.33737183]
[145.75717163 103.96932220]
[131.85461426 109.60128021]
[124.39969635 122.61759186]
[126.57653809 137.45880127]
[128.75337219 152.30000305]
[130.93020630 167.14120483]
[133.10704041 181.98240662]
[145.08131409 182.69113159]
[156.73069763 185.53193665]
[167.67884827 190.41137695]
[177.57237244 197.17019653]
[186.09223938 205.58853149]
[192.96406555 215.39299011]
[197.96693420 226.26559448]
[200.94050598 237.85408020]
[201.79020691 249.78329468]
[200.49012756 261.66735840]
[197.08390808 273.12213135]
[191.68324280 283.77764893]
[184.46420288 293.29006958]
[175.66151428 301.35272217]
[165.56092834 307.70605469]
[154.48992920 312.14599609]
[142.80712891 314.53042603]
[142.80712891 329.53042603]
[142.80712891 344.53042603]
[142.80712891 359.53042603]
[142.80712891 374.53042603]
[142.80712891 389.53042603]
[142.80712891 404.53042603]
[142.80712891 419.53042603]
[142.80712891 434.53042603]
[142.80712891 449.53042603]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[20 124]
[21 123]
[22 122]
[23 121]
[24 120]
[26 84]
[27 83]
[28 82]
[89 119]
[90 118]
[91 117]
[92 113]
[93 112]
[94 111]
[100 110]
[101 109]
[102 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
