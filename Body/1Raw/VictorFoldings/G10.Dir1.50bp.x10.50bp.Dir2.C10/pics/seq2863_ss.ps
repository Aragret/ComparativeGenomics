%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCCUAAACUACCAAACCUGCAUUAAAAAUUUCGGUUGGGGCGACCUCGGAGCAGAACCCAxxxxxxxxxxGGAUCCUCCCGAAUCAACCCUGACCCCUCUCCUUCAUAAAUUAUUCAGCUUCCUACACUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[54.89997101 559.16827393]
[57.49097061 539.96051025]
[57.80302811 524.96380615]
[58.11508179 509.96701050]
[58.42713928 494.97027588]
[58.73919678 479.97351074]
[59.05125046 464.97677612]
[59.36330795 449.98001099]
[59.67536545 434.98324585]
[59.98741913 419.98651123]
[46.40566635 417.17996216]
[33.52793884 412.02163696]
[21.75811577 404.67187500]
[11.46557045 395.35980225]
[2.97358990 384.37615967]
[-3.45078015 372.06414795]
[-7.60513592 358.80883789]
[-9.35809135 345.02505493]
[-8.65343189 331.14440918]
[-5.51191759 317.60174561]
[-0.03067350 304.82159424]
[7.61981297 293.20480347]
[17.20099449 283.11593628]
[28.41370201 274.87200928]
[40.90748596 268.73223877]
[54.29156494 264.89013672]
[68.14706421 263.46737671]
[69.39393616 248.51928711]
[70.64080811 233.57119751]
[68.86808777 231.32069397]
[67.90995789 228.21006775]
[68.10717773 224.55726624]
[69.67491913 220.80050659]
[72.66380310 217.44967651]
[75.14891815 202.65696716]
[69.62712860 188.82369995]
[79.54384613 176.49612427]
[82.02896118 161.70341492]
[84.51408386 146.91070557]
[86.99919891 132.11799622]
[89.48432159 117.32528687]
[79.73424530 100.21082306]
[89.12616730 82.89722443]
[86.33383942 68.15942383]
[83.54151154 53.42161560]
[80.74919128 38.68381119]
[77.95686340 23.94600296]
[69.57472229 11.50656319]
[56.96359253 3.38502097]
[40.56642914 3.13010836]
[32.82609558 -11.32739067]
[41.70518494 -25.11484146]
[58.06965256 -24.04889488]
[65.08513641 -9.22610760]
[77.69626617 -1.10456502]
[90.63432312 -8.69447327]
[89.69869232 -23.66526413]
[88.76306152 -38.63605499]
[87.82743835 -53.60684967]
[86.73612213 -68.56709290]
[85.48925018 -83.51518250]
[81.98398590 -89.24411011]
[81.95265961 -95.00868988]
[84.51469421 -99.10887146]
[83.89071655 -114.09588623]
[75.58604431 -127.56225586]
[82.78721619 -140.60037231]
[82.16323853 -155.58738708]
[68.12773895 -161.58468628]
[58.09079361 -173.08348083]
[54.04523849 -187.80068970]
[56.79432297 -202.81419373]
[65.79221344 -215.14305115]
[79.25237274 -222.33935547]
[94.50228119 -222.97428894]
[108.51405334 -216.92175293]
[118.50563812 -205.38352966]
[122.49320984 -190.65049744]
[119.68502045 -175.64793396]
[110.63864899 -163.35461426]
[97.15025330 -156.21136475]
[97.77423096 -141.22434998]
[106.03427124 -128.82995605]
[98.87773132 -114.71986389]
[99.50170898 -99.73284912]
[100.43733978 -84.76205444]
[101.68421173 -69.81397247]
[105.39846039 -63.36804199]
[102.79822540 -54.54247665]
[103.73385620 -39.57168579]
[104.66948700 -24.60089302]
[105.60511017 -9.63010216]
[107.03237152 4.20825291]
[101.73844147 15.33842278]
[92.69467163 21.15367889]
[95.48699951 35.89148331]
[98.27931976 50.62929153]
[101.07164764 65.36709595]
[103.86396790 80.10490417]
[111.32530975 83.19277954]
[116.98873138 88.94884491]
[131.69670105 86.00335693]
[146.40466309 83.05787659]
[151.24661255 68.48217773]
[162.73837280 58.29223251]
[177.78871155 55.22908401]
[192.34916687 60.11670685]
[202.50303650 71.64035034]
[205.51899719 86.70021820]
[200.58575439 101.24527740]
[189.03033447 111.36298370]
[173.96109009 114.33171844]
[159.43156433 109.35291290]
[149.35014343 97.76583862]
[134.64218140 100.71131897]
[119.93421173 103.65679932]
[114.55268860 114.10547638]
[104.27702332 119.81040955]
[101.79190826 134.60311890]
[99.30678558 149.39582825]
[96.82167053 164.18852234]
[94.33655548 178.98123169]
[99.68058777 193.87257385]
[89.94162750 205.14208984]
[87.45651245 219.93478394]
[85.58889771 234.81806946]
[84.34202576 249.76615906]
[83.09514618 264.71423340]
[98.65315247 269.24472046]
[112.94875336 276.86322021]
[125.37685394 287.24484253]
[135.41188049 299.94772339]
[142.63005066 314.43191528]
[146.72723389 330.08236694]
[147.53182983 346.23495483]
[145.01184082 362.20471191]
[139.27627563 377.31481934]
[130.57032776 390.92544556]
[119.26493835 402.46063232]
[105.84099579 411.43280029]
[90.86887360 417.46334839]
[74.98417664 420.29855347]
[74.67211914 435.29531860]
[74.36006165 450.29205322]
[74.04800415 465.28881836]
[73.73594666 480.28558350]
[73.42389679 495.28231812]
[73.11183929 510.27908325]
[72.79978180 525.27581787]
[72.48772430 540.27258301]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 142]
[27 128]
[28 127]
[29 126]
[34 125]
[35 124]
[37 122]
[38 121]
[39 120]
[40 119]
[41 118]
[43 99]
[44 98]
[45 97]
[46 96]
[47 95]
[48 55]
[49 54]
[56 92]
[57 91]
[58 90]
[59 89]
[60 87]
[61 86]
[64 85]
[65 84]
[67 82]
[68 81]
[101 116]
[102 115]
[103 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
