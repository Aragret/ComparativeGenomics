%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACUCACAACACCCUAGGCUCACUAAACAUUCUACUACUCACUCUCACUGCCCAAGAACUAxxxxxxxxxxACCCCAUUAAACGCCUGGCAGCCGGAAGCCUAUUCGCAGGAUUUCUCAUUACUAACAACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[102.60426331 261.42617798]
[102.60426331 246.42617798]
[102.60426331 231.42617798]
[102.60426331 216.42617798]
[102.60426331 201.42617798]
[102.60426331 186.42617798]
[102.60426331 171.42617798]
[102.60426331 156.42617798]
[102.60426331 141.42617798]
[102.60426331 126.42618561]
[98.44637299 112.01396942]
[97.54636383 126.98694611]
[90.34426117 140.14482117]
[78.21681213 148.97233582]
[63.48230743 151.78202820]
[48.95738983 148.03680420]
[37.41864014 138.45257568]
[31.07180405 124.86149597]
[31.13014412 109.86160278]
[37.58250427 96.32029724]
[49.19545364 86.82611847]
[63.74906540 83.19398499]
[78.46127319 86.11820221]
[90.51871490 95.03866577]
[85.91314697 80.76320648]
[81.30758667 66.48774719]
[76.70201874 52.21228409]
[72.09645844 37.93682480]
[67.49089050 23.66136360]
[64.03428650 38.25765991]
[56.98257065 51.49674225]
[46.79853821 62.50970840]
[34.15058136 70.57377625]
[19.86879539 75.15969849]
[4.89050865 75.96648407]
[-9.80124378 72.94118500]
[-23.24223137 66.28237152]
[-34.55030823 56.42704391]
[-42.98331451 44.02202988]
[-47.98778915 29.88147736]
[-49.23528290 14.93344212]
[-46.64392090 0.15897661]
[-40.38377762 -13.47225952]
[-30.86570930 -25.06563568]
[-18.71439552 -33.86027145]
[-4.72733879 -39.27896118]
[10.17748070 -40.96607971]
[25.02184486 -38.81089783]
[38.83150864 -32.95485687]
[50.70013046 -23.78230095]
[59.84876251 -11.89522743]
[65.67826843 1.93087482]
[67.85511017 -12.91033077]
[70.03194427 -27.75153542]
[60.86839294 -40.34784698]
[63.28743362 -55.36793137]
[75.35256195 -64.02635193]
[77.52939606 -78.86755371]
[79.70623779 -93.70876312]
[81.88307190 -108.54996490]
[84.05990601 -123.39117432]
[69.76407623 -128.05349731]
[56.46189499 -135.06491089]
[44.53609085 -144.22369385]
[34.32979584 -155.26631165]
[26.13666153 -167.87506104]
[20.19242287 -181.68716431]
[16.66810799 -196.30520630]
[15.66511726 -211.30860901]
[17.21231079 -226.26568604]
[21.26516914 -240.74609375]
[27.70708656 -254.33320618]
[36.35271835 -266.63610840]
[46.95330429 -277.30078125]
[59.20385361 -286.02041626]
[72.75188446 -292.54412842]
[87.20760345 -296.68420410]
[102.15508270 -298.32153320]
[117.16426086 -297.40902710]
[131.80328369 -293.97286987]
[145.65097046 -288.11203003]
[158.30886841 -279.99505615]
[169.41282654 -269.85549927]
[178.64332581 -257.98510742]
[185.73480225 -244.72544861]
[190.48321533 -230.45797729]
[192.75195312 -215.59323120]
[192.47573853 -200.55888367]
[189.66249084 -185.78750610]
[184.39318848 -171.70408630]
[176.81942749 -158.71385193]
[167.15911865 -147.19056702]
[155.69020081 -137.46574402]
[142.74266052 -129.81921387]
[128.68904114 -124.47097778]
[113.93367767 -121.57490540]
[98.90111542 -121.21433258]
[96.72428131 -106.37313080]
[94.54743958 -91.53192139]
[92.37060547 -76.69071960]
[90.19376373 -61.84951401]
[99.26424408 -50.09102249]
[97.26803589 -35.00892258]
[84.87315369 -25.57469940]
[82.69631195 -10.73349380]
[80.51947784 4.10771179]
[81.76634979 19.05579948]
[86.37191772 33.33126068]
[90.97747803 47.60671997]
[95.58304596 61.88217926]
[100.18860626 76.15763855]
[104.79417419 90.43310547]
[111.14130402 104.02405548]
[111.00724792 89.02465057]
[114.04061127 74.33456421]
[120.10485840 60.61505508]
[128.92701721 48.48370361]
[140.10993958 38.48659515]
[153.15023804 31.07374573]
[167.46093750 26.57883835]
[182.39781189 25.20421028]
[197.28851318 27.01173973]
[211.46272278 31.92006302]
[224.28240967 39.70823288]
[235.17050171 50.02566528]
[243.63687134 62.40793610]
[249.30041504 76.29765320]
[251.90618896 91.06958771]
[251.33689880 106.05877686]
[247.61814880 120.59049988]
[240.91737366 134.01062012]
[231.53617859 145.71502686]
[219.89686584 155.17686462]
[206.52336121 161.97019958]
[192.01768494 165.78924561]
[177.03277588 166.46208191]
[162.24319458 163.95843506]
[148.31468201 158.39099121]
[135.87420654 150.01037598]
[125.48179626 139.19381714]
[117.60426331 126.42618561]
[117.60426331 141.42617798]
[117.60426331 156.42617798]
[117.60426331 171.42617798]
[117.60426331 186.42617798]
[117.60426331 201.42617798]
[117.60426331 216.42617798]
[117.60426331 231.42617798]
[117.60426331 246.42617798]
[117.60426331 261.42617798]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 113]
[24 112]
[25 111]
[26 110]
[27 109]
[28 108]
[29 107]
[52 106]
[53 105]
[54 104]
[57 101]
[58 100]
[59 99]
[60 98]
[61 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
