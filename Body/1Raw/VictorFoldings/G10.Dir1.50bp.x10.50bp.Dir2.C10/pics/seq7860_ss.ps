%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUGCCCAUCGUCCUAGAAUUAAUUCCCCUAAAAAUCUUUGAAAUAGGGCCCGUAUUUACxxxxxxxxxxCUUCUAGUAAGCCUCUACCUGCACGACAACACAUAAUGACCCACCAAUCACAUGCCUAUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[88.57619476 268.25720215]
[88.57619476 253.25721741]
[88.57619476 238.25721741]
[88.57619476 223.25721741]
[88.57619476 208.25721741]
[88.57619476 193.25721741]
[88.57619476 178.25721741]
[88.57619476 163.25721741]
[88.57619476 148.25721741]
[88.57619476 133.25721741]
[72.56479645 107.60599518]
[83.33173370 85.98785400]
[75.87682343 72.97154999]
[68.42191315 59.95523834]
[51.91847610 60.07846451]
[37.67689896 51.92536545]
[29.52081299 37.79354858]
[29.58517075 21.57078934]
[37.75820541 7.66564178]
[30.03411865 -5.19276094]
[22.31003380 -18.05116272]
[14.58594894 -30.90956497]
[-14.28460407 -32.84957886]
[-19.31180954 -57.30416870]
[-30.40312386 -67.40281677]
[-41.49443817 -77.50147247]
[-52.58575439 -87.60012054]
[-63.67707062 -97.69876862]
[-74.76838684 -107.79741669]
[-87.03075409 -116.43653107]
[-102.84810638 -116.08734894]
[-110.45021820 -128.89582825]
[-123.69280243 -135.94096375]
[-136.93539429 -142.98609924]
[-152.75274658 -142.63691711]
[-160.35485840 -155.44538879]
[-173.81082153 -162.07389832]
[-187.46705627 -168.27929688]
[-201.12330627 -174.48471069]
[-214.77954102 -180.69010925]
[-228.43577576 -186.89552307]
[-239.80244446 -176.76048279]
[-254.31066895 -172.13108826]
[-269.44680786 -173.80938721]
[-282.58847046 -181.50463867]
[-291.45874023 -193.88357544]
[-294.52084351 -208.80146790]
[-291.24420166 -223.67370605]
[-282.19653320 -235.92358398]
[-268.94537354 -243.42874146]
[-253.78663635 -244.88885498]
[-239.34658813 -240.05096436]
[-228.12710571 -229.75325012]
[-222.07200623 -215.77986145]
[-222.23037720 -200.55175781]
[-208.57412720 -194.34635925]
[-194.91789246 -188.14094543]
[-181.26165771 -181.93554688]
[-167.60540771 -175.73013306]
[-164.14152527 -176.66233826]
[-160.04840088 -175.92211914]
[-156.13621521 -173.23005676]
[-153.30972290 -168.68797302]
[-138.43955994 -169.54107666]
[-129.89025879 -156.22868347]
[-116.64766693 -149.18354797]
[-103.40508270 -142.13841248]
[-88.53492737 -142.99151611]
[-79.98561859 -129.67912292]
[-86.64611053 -143.11927795]
[-86.93583679 -158.11648560]
[-80.79942322 -171.80386353]
[-69.40990448 -181.56494141]
[-54.94448853 -185.53379822]
[-40.16839218 -182.95175171]
[-27.90621185 -174.31236267]
[-20.50198174 -161.26716614]
[-19.37109375 -146.30986023]
[-24.72973061 -132.29968262]
[-35.55353165 -121.91481781]
[-49.77342606 -117.14044189]
[-64.66973877 -118.88873291]
[-53.57842255 -108.79008484]
[-42.48710632 -98.69143677]
[-31.39579010 -88.59278107]
[-20.30447388 -78.49413300]
[-9.21315956 -68.39548492]
[-2.77759624 -71.71812439]
[5.00057459 -72.51798248]
[13.09555626 -70.28370667]
[20.30094337 -64.92816162]
[31.80274773 -74.55668640]
[30.60391426 -90.02738190]
[38.75615311 -103.23043823]
[53.12475586 -109.08901215]
[68.18470764 -105.35035706]
[78.14514160 -93.45206451]
[79.17607880 -77.96927643]
[70.88109589 -64.85543060]
[56.44977951 -59.15307999]
[41.43127441 -63.05488586]
[29.92947006 -53.42635727]
[27.44435120 -38.63365173]
[35.16843796 -25.77524757]
[42.89252090 -12.91684532]
[50.61660767 -0.05844339]
[64.26123047 -1.19140172]
[77.11965179 3.70147800]
[86.65093994 13.71457291]
[90.94529724 26.92454910]
[89.10649109 40.75964355]
[81.43822479 52.50032806]
[88.89313507 65.51663971]
[96.34804535 78.53294373]
[111.25050354 76.29589081]
[126.70403290 84.85145569]
[135.00386047 103.35788727]
[148.66009521 109.56329346]
[162.31634521 115.76869965]
[175.74636841 107.99605560]
[191.17662048 109.63531494]
[202.67382812 120.05613708]
[205.81710815 135.25151062]
[199.39779663 149.37850952]
[185.88423157 157.00500488]
[170.47268677 155.19845581]
[159.08918762 144.65351868]
[156.11093140 129.42494202]
[142.45469666 123.21953583]
[128.79844666 117.01412964]
[122.49288940 121.07489777]
[131.50233459 133.06781006]
[140.51177979 145.06071472]
[153.02185059 153.33708191]
[152.92938232 168.33679199]
[140.31822205 176.45828247]
[126.62403107 170.33705139]
[124.26452637 155.52392578]
[117.07314301 142.36018372]
[109.88175964 129.19644165]
[103.57619476 133.25721741]
[103.57619476 148.25721741]
[103.57619476 163.25721741]
[103.57619476 178.25721741]
[103.57619476 193.25721741]
[103.57619476 208.25721741]
[103.57619476 223.25721741]
[103.57619476 238.25721741]
[103.57619476 253.25721741]
[103.57619476 268.25720215]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 114]
[13 113]
[14 112]
[19 106]
[20 105]
[21 104]
[22 103]
[24 87]
[25 86]
[26 85]
[27 84]
[28 83]
[29 82]
[30 69]
[32 67]
[33 66]
[34 65]
[36 63]
[37 59]
[38 58]
[39 57]
[40 56]
[41 55]
[91 102]
[92 101]
[117 130]
[118 129]
[119 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
