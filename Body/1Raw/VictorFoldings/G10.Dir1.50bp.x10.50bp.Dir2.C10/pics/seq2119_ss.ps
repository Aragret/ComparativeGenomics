%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACUAGAAAUAACUUUGCAAGGAGAGCCAAAGCUAAGACCCCCGAAACCAGACGAGCUACCxxxxxxxxxxAUGGCCCACCAUAAUUACCCCCAUACUCCUUACACUAUUCCUCAUCACCCAACUAAAAAUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[179.91696167 457.16613770]
[179.30114746 442.17880249]
[178.68531799 427.19143677]
[178.06948853 412.20410156]
[177.45365906 397.21673584]
[176.83784485 382.22940063]
[176.22201538 367.24203491]
[175.60618591 352.25466919]
[171.94747925 337.70773315]
[165.39961243 324.21234131]
[158.85174561 310.71694946]
[152.30386353 297.22158813]
[146.51876831 292.54772949]
[145.76330566 283.38122559]
[139.49389648 269.75424194]
[133.22448730 256.12725830]
[129.13250732 270.55831909]
[117.98540497 280.59536743]
[103.20569611 283.15667725]
[89.33123779 277.45584106]
[80.62193298 265.24322510]
[79.75182343 250.26847839]
[86.98805237 237.12934875]
[100.10887146 229.85995483]
[115.08576965 230.69224548]
[127.31919098 239.36923218]
[123.66048431 224.82228088]
[113.05252075 214.36665344]
[117.19007874 199.09605408]
[113.53137207 184.54910278]
[109.87266541 170.00213623]
[106.21395874 155.45518494]
[102.55525970 140.90823364]
[98.89655304 126.36128235]
[90.01419830 125.61721802]
[81.53836060 121.84983063]
[74.50366211 115.26232910]
[69.84857941 106.41206360]
[68.29486084 96.16688538]
[70.24597168 85.62091827]
[75.71817780 75.97769928]
[63.93604279 66.69431305]
[52.15390396 57.41092682]
[40.37176895 48.12754059]
[42.62442017 62.95742798]
[35.87113571 76.35119629]
[22.60820961 83.35796356]
[7.73816538 81.38773346]
[-3.24241257 71.16878510]
[-6.27465010 56.47846603]
[-0.23770626 42.74692154]
[12.63691425 35.04990005]
[27.58921814 36.23212814]
[17.48378181 25.14699554]
[2.07747746 26.99777603]
[-11.45791531 19.41010475]
[-17.91776085 5.30159569]
[-14.81811810 -9.90274048]
[-3.35086083 -20.35652733]
[12.07461548 -22.04006767]
[25.52689934 -14.30601025]
[31.83331490 -0.12825474]
[28.56891632 15.04156113]
[38.67435074 26.12669563]
[49.65515518 36.34540176]
[61.43729019 45.62878799]
[73.21942902 54.91217422]
[85.00156403 64.19555664]
[79.11245728 50.39996338]
[73.22335052 36.60437012]
[63.27629089 25.37690353]
[59.74519730 10.79844856]
[63.45232391 -3.73624158]
[73.53442383 -14.84260082]
[87.64377594 -19.93439102]
[102.49484253 -17.82592964]
[114.62940979 -9.00819874]
[121.22179413 4.46549749]
[120.73688507 19.45765686]
[113.28823090 32.47653961]
[110.33565521 47.18307877]
[107.38308716 61.88962173]
[117.02490234 50.39895248]
[126.66671753 38.90828705]
[136.30853271 27.41761971]
[128.70785522 14.30253029]
[126.05424500 -0.62174940]
[128.66812134 -15.55304050]
[136.23385620 -28.68831635]
[147.83784485 -38.44142914]
[162.07885742 -43.63463974]
[177.23721313 -43.64085007]
[191.48246765 -38.45930099]
[203.09445190 -28.71569633]
[210.67094421 -15.58662224]
[213.29704285 -0.65747768]
[210.65565491 14.26897049]
[203.06571960 27.39028168]
[191.44378662 37.12199020]
[177.19322205 42.28895187]
[162.03488159 42.26722336]
[147.79919434 37.05943298]
[138.15737915 48.55010223]
[128.51556396 60.04076767]
[118.87375641 71.53143311]
[130.26074219 100.76885986]
[113.44350433 122.70257568]
[117.10221100 137.24952698]
[120.76091766 151.79647827]
[124.41962433 166.34342957]
[128.07832336 180.89039612]
[131.73703003 195.43734741]
[142.60668945 206.93347168]
[138.20744324 221.16357422]
[141.86614990 235.71052551]
[146.85147095 249.85784912]
[153.12088013 263.48483276]
[159.39027405 277.11181641]
[165.79925537 290.67370605]
[172.34712219 304.16909790]
[178.89498901 317.66445923]
[185.44287109 331.15985107]
[186.81715393 316.22293091]
[192.27059937 302.24938965]
[201.37741089 290.33026123]
[213.42652893 281.39614868]
[227.47720337 276.14459229]
[242.43237305 274.98568726]
[257.12435913 278.00988770]
[270.40603638 284.98104858]
[281.24038696 295.35488892]
[288.78149414 308.32147217]
[292.44055176 322.86831665]
[291.93185425 337.85971069]
[287.29516602 352.12506104]
[278.89248657 364.55062866]
[267.37985229 374.16622925]
[253.65618896 380.22106934]
[238.79301453 382.24243164]
[223.95080566 380.07244873]
[210.28842163 373.88055420]
[198.87258911 364.15023804]
[190.59353638 351.63885498]
[191.20936584 366.62622070]
[191.82519531 381.61355591]
[192.44102478 396.60092163]
[193.05683899 411.58825684]
[193.67266846 426.57562256]
[194.28849792 441.56298828]
[194.90431213 456.55032349]
[201.59584045 472.12786865]
[188.47946167 482.87017822]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 122]
[10 121]
[11 120]
[12 119]
[14 118]
[15 117]
[16 116]
[26 115]
[27 114]
[29 112]
[30 111]
[31 110]
[32 109]
[33 108]
[34 107]
[41 68]
[42 67]
[43 66]
[44 65]
[53 64]
[54 63]
[82 105]
[83 104]
[84 103]
[85 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
