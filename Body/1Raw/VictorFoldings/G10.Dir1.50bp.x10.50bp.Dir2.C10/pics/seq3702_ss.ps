%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCCUAUUUAUUCUAGCCACCUCUAGCCUAGCCGUUUACUCAAUCCUCUGAUCAGGGUGAxxxxxxxxxxUGGGAGAACUCUCUGUGCUAGUAACCACGUUCUCCUGAUCAAAUAUCACUCUCCUACUUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[110.28565216 416.97048950]
[110.28565216 401.97048950]
[110.28565216 386.97048950]
[110.28565216 371.97048950]
[110.28565216 356.97048950]
[110.28565216 341.97048950]
[110.28565216 326.97048950]
[110.28565216 311.97048950]
[110.28565216 296.97048950]
[110.28565216 281.97048950]
[92.34192657 276.94549561]
[76.72922516 266.74499512]
[64.90014648 252.30696106]
[57.95858383 234.96401978]
[56.55676651 216.32060242]
[60.83395767 198.10446167]
[70.40269470 182.00660706]
[84.38385773 169.52423096]
[101.48744202 161.82156372]
[99.31060791 146.98034668]
[97.13376617 132.13914490]
[94.95693207 117.29794312]
[82.09853363 109.57385254]
[67.97372437 114.62261200]
[53.84892273 119.67136383]
[39.72412109 124.72012329]
[33.18965912 139.11027527]
[18.36456490 144.58677673]
[4.04430866 137.90054321]
[-1.27515805 123.01837921]
[5.56210995 108.76961517]
[20.49968338 103.60778809]
[34.67536545 110.59532166]
[48.80016708 105.54656219]
[62.92496872 100.49781036]
[77.04977417 95.44905090]
[77.43969727 87.95919800]
[64.85678864 79.79399872]
[78.21954346 72.97947693]
[78.60946655 65.48962402]
[65.08527374 59.00145721]
[53.78926849 69.17341614]
[39.45880890 74.24356842]
[24.27919579 73.43875885]
[10.56520176 66.88171387]
[0.40811518 55.57233810]
[-4.64318323 41.23522186]
[-3.81840706 26.05667877]
[2.75667167 12.35132408]
[14.07940102 2.20912266]
[28.42314720 -2.82331157]
[43.60059357 -1.97856915]
[57.29728699 4.61453247]
[67.42458344 15.95059395]
[72.43814850 30.30094719]
[71.57344055 45.47726822]
[85.09762573 51.96543503]
[97.16034698 70.97004700]
[100.84954071 92.00112152]
[109.36063385 79.64955139]
[117.87172699 67.29797363]
[126.38281250 54.94640350]
[134.89390564 42.59482956]
[143.40499878 30.24325752]
[151.91607666 17.89168549]
[160.42716980 5.54011250]
[146.69256592 11.57009602]
[131.77574158 13.14750290]
[117.08371735 10.12354374]
[104.00231171 2.78345370]
[93.76544189 -8.18041420]
[87.33868408 -21.73389435]
[85.32825470 -36.59855652]
[87.92377472 -51.37229156]
[94.88043213 -64.66156769]
[105.54203796 -75.21288300]
[118.90293884 -82.03097534]
[133.70286560 -84.47273254]
[148.54582214 -82.30783081]
[162.03173828 -75.74049377]
[172.88856506 -65.39015961]
[180.09222412 -52.23313904]
[182.96324158 -37.51045990]
[181.23080444 -22.61084175]
[175.05822754 -8.93952751]
[187.49766541 -17.32167053]
[199.93710327 -25.70381355]
[212.37655640 -34.08595657]
[224.81599426 -42.46810150]
[210.95504761 -48.20169449]
[206.59114075 -62.55287552]
[214.91395569 -75.03208923]
[229.84016418 -76.51804352]
[240.45993042 -65.92462921]
[239.01139832 -50.99533081]
[252.25398254 -58.04046631]
[265.49658203 -65.08560181]
[267.51913452 -80.47029877]
[278.22271729 -91.70474243]
[293.49157715 -94.46907043]
[307.45452881 -87.70033264]
[314.74252319 -74.00125885]
[312.55319214 -58.63940811]
[301.72836304 -47.52173233]
[286.43038940 -44.92320633]
[272.54171753 -51.84301376]
[259.29913330 -44.79788208]
[246.05653381 -37.75274658]
[233.19813538 -30.02865982]
[220.75869751 -21.64651680]
[208.31925964 -13.26437378]
[195.87980652 -4.88223076]
[183.44036865 3.49991226]
[172.77874756 14.05120277]
[164.26765442 26.40277481]
[155.75656128 38.75434875]
[147.24548340 51.10591888]
[138.73439026 63.45749283]
[130.22329712 75.80906677]
[121.71220398 88.16063690]
[113.20111847 100.51220703]
[109.79814148 115.12110138]
[111.97497559 129.96231079]
[114.15180969 144.80351257]
[116.32865143 159.64471436]
[127.99531555 160.50805664]
[139.28327942 163.55944824]
[149.78620911 168.68690491]
[159.12637329 175.70378113]
[166.96833801 184.35546875]
[173.03096008 194.32872009]
[177.09744263 205.26298523]
[179.02313232 216.76339722]
[178.74063110 228.41505432]
[176.26219177 239.79800415]
[171.67915344 250.50238037]
[165.15859985 260.14309692]
[156.93730164 268.37380981]
[147.31304932 274.89929199]
[136.63391113 279.48599243]
[125.28565216 281.97048950]
[125.28565216 296.97048950]
[125.28565216 311.97048950]
[125.28565216 326.97048950]
[125.28565216 341.97048950]
[125.28565216 356.97048950]
[125.28565216 371.97048950]
[125.28565216 386.97048950]
[125.28565216 401.97048950]
[125.28565216 416.97048950]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[19 125]
[20 124]
[21 123]
[22 122]
[23 36]
[24 35]
[25 34]
[26 33]
[40 57]
[41 56]
[59 121]
[60 120]
[61 119]
[62 118]
[63 117]
[64 116]
[65 115]
[66 114]
[85 113]
[86 112]
[87 111]
[88 110]
[89 109]
[95 108]
[96 107]
[97 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
