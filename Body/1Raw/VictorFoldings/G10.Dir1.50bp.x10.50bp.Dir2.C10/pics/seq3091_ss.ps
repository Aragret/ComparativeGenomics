%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUACUUCACAAAGCGCCUUCCCCCGUAAAUGAUAUCAUCUCAACUUAGUAUUAUACCCACAxxxxxxxxxxAACCAGUAAGCUACCCUUUUACCAUCAUUGGACAAGUAGCAUCCGUACUAUACUUCACAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-25.35560226 277.21502686]
[-38.77892685 266.91195679]
[-48.76165390 278.10772705]
[-58.74438095 289.30349731]
[-68.72710419 300.49923706]
[-78.70983124 311.69500732]
[-88.69255829 322.89077759]
[-98.67528534 334.08654785]
[-108.65801239 345.28231812]
[-118.64073944 356.47808838]
[-128.62345886 367.67385864]
[-132.03268433 383.12338257]
[-146.27787781 387.47351074]
[-156.26060486 398.66928101]
[-166.24333191 409.86505127]
[-169.04338074 426.02337646]
[-184.52813721 431.42288208]
[-196.76820374 420.50900269]
[-193.17205811 404.50900269]
[-177.43910217 399.88232422]
[-167.45637512 388.68655396]
[-157.47364807 377.49078369]
[-154.77845764 362.84207153]
[-139.81922913 357.69113159]
[-129.83650208 346.49536133]
[-119.85377502 335.29959106]
[-109.87105560 324.10382080]
[-99.88832855 312.90805054]
[-89.90560150 301.71228027]
[-79.92287445 290.51651001]
[-69.94014740 279.32077026]
[-59.95742035 268.12500000]
[-49.97469330 256.92922974]
[-59.50759125 247.22947693]
[-68.41436005 236.95179749]
[-76.66004181 226.13652039]
[-84.21225739 214.82611084]
[-91.04136658 203.06497192]
[-97.12056732 190.89924622]
[-102.42598724 178.37672424]
[-106.93681335 165.54652405]
[-110.63532257 152.45904541]
[-113.50701141 139.16563416]
[-115.54060364 125.71848297]
[-116.72811127 112.17037964]
[-117.06487274 98.57450104]
[-116.54957581 84.98421478]
[-115.18422699 71.45288086]
[-112.97420502 58.03359604]
[-109.92817688 44.77905273]
[-106.05809021 31.74126816]
[-101.37915039 18.97142792]
[-95.90971375 6.51965714]
[-89.67125702 -5.56516743]
[-82.68827057 -17.23560715]
[-74.98815918 -28.44585037]
[-66.60114288 -39.15189362]
[-57.56015778 -49.31171036]
[-47.90068817 -58.88542175]
[-37.66064835 -67.83544159]
[-26.88023758 -76.12664795]
[-15.60177231 -83.72648621]
[-3.86952424 -90.60512543]
[8.27045250 -96.73556519]
[20.77050400 -102.09373474]
[33.58156204 -106.65861511]
[46.65333939 -110.41227722]
[59.93452072 -113.33998108]
[73.37297821 -115.43025208]
[86.91595459 -116.67486572]
[100.51029205 -117.06895447]
[114.10263062 -116.61095428]
[127.63960266 -115.30268097]
[141.06808472 -113.14925385]
[154.33535767 -110.15913391]
[167.38934326 -106.34405518]
[180.17878723 -101.71899414]
[192.65351868 -96.30210876]
[204.76452637 -90.11466217]
[216.46430969 -83.18093872]
[227.70692444 -75.52816010]
[238.44822693 -67.18636322]
[248.64607239 -58.18828964]
[258.26043701 -48.56927109]
[267.25354004 -38.36705780]
[275.59011841 -27.62170029]
[283.23745728 -16.37537766]
[290.16549683 -4.67223501]
[296.34704590 7.44178677]
[301.75790405 19.91913605]
[315.88269043 14.87037945]
[330.00750732 9.82162285]
[344.13229370 4.77286673]
[358.25711060 -0.27588964]
[361.71282959 -4.35970259]
[365.97427368 -6.45551634]
[370.13150024 -6.59389591]
[373.42343140 -5.16886711]
[387.83566284 -9.32675457]
[395.51263428 -22.88041687]
[410.18789673 -26.89179802]
[423.06192017 -19.48944664]
[437.47415161 -23.64733315]
[451.88635254 -27.80522156]
[462.86303711 -39.98900604]
[478.84432983 -36.31063080]
[483.39004517 -20.55409241]
[471.82394409 -8.92836857]
[456.04425049 -13.39300537]
[441.63201904 -9.23511791]
[427.21981812 -5.07722998]
[420.26708984 8.04508972]
[405.71029663 12.46708679]
[391.99353027 5.08546162]
[377.58132935 9.24334908]
[363.30584717 13.84891319]
[349.18106079 18.89766884]
[335.05624390 23.94642639]
[320.93145752 28.99518204]
[306.80664062 34.04393768]
[311.31594849 50.35360336]
[314.54107666 66.96496582]
[316.46249390 83.77707672]
[317.06845093 100.68777466]
[316.35534668 117.59429169]
[314.32745361 134.39389038]
[310.99710083 150.98448181]
[306.38455200 167.26524353]
[300.51779175 183.13723755]
[293.43255615 198.50401306]
[285.17181396 213.27220154]
[275.78579712 227.35203552]
[265.33157349 240.65795898]
[253.87261963 253.10913086]
[241.47860718 264.62985229]
[228.22485352 275.15014648]
[214.19187927 284.60607910]
[199.46496582 292.94018555]
[184.13362122 300.10177612]
[168.29100037 306.04739380]
[152.03338623 310.74087524]
[135.45956421 314.15371704]
[118.67026520 316.26513672]
[101.76750183 317.06234741]
[84.85399628 316.54049683]
[68.03253937 314.70275879]
[51.40533829 311.56027222]
[35.07344818 307.13217163]
[19.13610649 301.44534302]
[3.69016910 294.53433228]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 33]
[3 32]
[4 31]
[5 30]
[6 29]
[7 28]
[8 27]
[9 26]
[10 25]
[11 24]
[13 22]
[14 21]
[15 20]
[90 120]
[91 119]
[92 118]
[93 117]
[94 116]
[98 115]
[99 114]
[102 111]
[103 110]
[104 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
