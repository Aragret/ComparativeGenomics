%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGCCCUAAACCUCAACAGUUAAAUCAACAAAACUGCUCGCCAGAACACUACGAGCCACAGxxxxxxxxxxUCCUGAUCAAAUAUCACUCUCCUACUUACAGGACUCAACAUACUAGUCACAGCCCUAUACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[65.63785553 428.93414307]
[65.63785553 413.93414307]
[65.63785553 398.93414307]
[65.63785553 383.93414307]
[65.63785553 368.93414307]
[65.63785553 353.93414307]
[65.63785553 338.93414307]
[65.63785553 323.93414307]
[65.63785553 308.93414307]
[65.63785553 293.93414307]
[51.35284805 291.06042480]
[37.90378189 285.44015503]
[25.81334305 277.28961182]
[15.55182266 266.92346191]
[7.51883698 254.74266052]
[2.02775693 241.21882629]
[-0.70651138 226.87603760]
[-0.57593840 212.27055359]
[2.41636157 197.96919250]
[8.15617657 184.52735901]
[16.42255402 172.46746826]
[26.89630508 162.25863647]
[39.17232895 154.29843140]
[52.77529144 148.89744568]
[67.17800903 146.26705933]
[67.49005890 131.27030945]
[56.50439835 121.05682373]
[41.57009125 122.45912933]
[26.63578224 123.86143494]
[11.70147514 125.26374054]
[5.37216949 139.25785828]
[-7.11558056 148.19943237]
[-22.40263367 149.68321228]
[-36.37684631 143.31007385]
[-45.27923203 130.79435730]
[-46.71508408 115.50272369]
[-40.29817581 101.54856110]
[-27.75461578 92.68544769]
[-12.45856285 91.29753113]
[1.47542417 97.75814819]
[10.29917145 110.32942963]
[25.23347855 108.92712402]
[40.16778564 107.52482605]
[55.10209274 106.12252045]
[59.70765686 91.84706116]
[48.40865326 81.98133850]
[37.10964966 72.11561584]
[25.81064415 62.24988937]
[14.51163960 52.38416672]
[1.57150829 52.46696854]
[-7.64282084 43.96313858]
[-8.53620529 31.85904121]
[-19.62752151 21.76039124]
[-35.75585175 18.79240799]
[-40.99398041 3.25232768]
[-29.95336342 -8.87354660]
[-13.99164486 -5.11115551]
[-9.52887154 10.66907501]
[1.56244397 20.76772499]
[18.86190033 23.54778671]
[24.37736320 41.08516312]
[35.67636871 50.95088577]
[46.97537231 60.81660843]
[58.27437592 70.68233490]
[69.57337952 80.54805756]
[80.94089508 72.73484039]
[93.41592407 70.30185699]
[104.76609039 72.84275818]
[113.25154877 79.12563324]
[124.75335693 69.49710083]
[118.76020813 56.30833054]
[116.39904785 42.02777100]
[117.82559967 27.63601685]
[122.93572998 14.11962986]
[131.37301636 2.40351868]
[142.55357361 -6.71235275]
[155.70649719 -12.60758495]
[169.92701721 -14.88356113]
[184.23867798 -13.39039803]
[197.66044617 -8.23679638]
[209.27392578 0.21784495]
[220.97355652 -9.16931725]
[232.67317200 -18.55647850]
[244.37280273 -27.94363976]
[256.07241821 -37.33080292]
[249.84754944 -51.06767654]
[247.23526001 -65.92118835]
[248.39979553 -80.95763397]
[253.26792908 -95.23181152]
[261.53366089 -107.84642792]
[272.67736816 -118.00852203]
[285.99859619 -125.07929993]
[300.65994263 -128.61427307]
[315.73974609 -128.39125061]
[330.29013062 -124.42424011]
[343.39642334 -116.96260834]
[354.23477173 -106.47540283]
[362.12380981 -93.62185669]
[366.56768799 -79.20996094]
[367.28704834 -64.14565277]
[364.23663330 -49.37589264]
[357.60824585 -35.82911301]
[347.81851196 -24.35688210]
[335.48284912 -15.68035221]
[321.37667847 -10.34493542]
[306.38671875 -8.68602276]
[291.45526123 -10.80789375]
[277.52090454 -16.57716560]
[265.45959473 -25.63117790]
[253.75996399 -16.24401665]
[242.06033325 -6.85685492]
[230.36071777 2.53030682]
[218.66108704 11.91746902]
[224.72033691 26.25655556]
[226.50894165 41.73480225]
[223.87474060 57.10646820]
[217.02191162 71.13208008]
[206.49507141 82.67839813]
[193.13606262 90.80994415]
[178.01666260 94.86482239]
[162.35252380 94.50856781]
[147.40547180 89.76174164]
[134.38188171 80.99890900]
[122.88007355 90.62743378]
[120.20932007 122.73572540]
[82.48681641 131.58236694]
[82.17475891 146.57911682]
[97.23824310 150.07176208]
[111.24783325 156.60354614]
[123.59804535 165.88960266]
[133.75564575 177.52606201]
[141.28266907 191.00769043]
[145.85531616 205.74971008]
[147.27787781 221.11325073]
[145.49108887 236.43302917]
[140.57460022 251.04612732]
[132.74348450 264.32067871]
[122.33872223 275.68325806]
[109.81248474 284.64352417]
[95.70835876 290.81549072]
[80.63785553 293.93414307]
[80.63785553 308.93414307]
[80.63785553 323.93414307]
[80.63785553 338.93414307]
[80.63785553 353.93414307]
[80.63785553 368.93414307]
[80.63785553 383.93414307]
[80.63785553 398.93414307]
[80.63785553 413.93414307]
[80.63785553 428.93414307]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[25 127]
[26 126]
[27 44]
[28 43]
[29 42]
[30 41]
[45 65]
[46 64]
[47 63]
[48 62]
[49 61]
[52 59]
[53 58]
[69 124]
[70 123]
[81 113]
[82 112]
[83 111]
[84 110]
[85 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
