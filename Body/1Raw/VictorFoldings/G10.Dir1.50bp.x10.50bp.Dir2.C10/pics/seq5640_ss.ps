%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCCUCCUUAACCUCUACUUCUACCUACGCCUAAUCUACUCCACCUCAAUCACACUACUCCxxxxxxxxxxAUGAUUUGAGAAGCCUUCGCUUCGAAGCGAAAAGUCCUAAUAGUAGAAGAACCCUCCAUAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[42.21697998 622.54034424]
[42.21697998 607.54034424]
[42.21697998 592.54034424]
[42.21697998 577.54034424]
[42.21697998 562.54034424]
[42.21697998 547.54034424]
[42.21697998 532.54034424]
[42.21697998 517.54034424]
[42.21697998 502.54031372]
[42.21697998 487.54031372]
[29.29578972 485.18814087]
[16.95336723 480.68881226]
[5.54386902 474.17019653]
[-4.60511589 465.81817627]
[-13.20196724 455.87124634]
[-19.99941254 444.61370850]
[-24.80163765 432.36767578]
[-27.46993446 419.48373413]
[-27.92670059 406.33090210]
[-26.15769386 393.28613281]
[-22.21248245 380.72348022]
[-16.20304871 369.00335693]
[-8.30061531 358.46221924]
[1.26923788 349.40286255]
[12.23300648 342.08581543]
[24.27708244 336.72174072]
[37.05672455 333.46542358]
[50.20592880 332.41131592]
[51.74322128 317.49029541]
[53.28051376 302.56927490]
[54.81780624 287.64825439]
[56.35509872 272.72723389]
[57.89239120 257.80621338]
[59.42968369 242.88520813]
[47.55963135 252.05592346]
[32.56585693 251.62371826]
[21.24376488 241.78450012]
[18.72469330 226.99754333]
[26.15032196 213.96450806]
[40.15524673 208.59216309]
[54.39222717 213.31533813]
[62.40846634 225.99168396]
[66.06717682 211.44473267]
[54.20880508 200.50968933]
[49.43869781 185.00250244]
[53.14362717 169.11071777]
[64.40832520 157.17555237]
[80.23933411 152.50602722]
[83.59859467 137.88702393]
[86.95785522 123.26801300]
[75.98610687 116.12538147]
[69.05722809 103.81811523]
[68.54962921 88.66924286]
[75.51116180 74.04949188]
[89.23097992 63.62802124]
[87.08239746 48.78269577]
[84.93381500 33.93737411]
[82.78524017 19.09205246]
[80.63665771 4.24672937]
[78.33578491 -10.57575321]
[75.88285828 -25.37383270]
[73.42993164 -40.17190933]
[58.43379974 -41.98652267]
[44.55690002 -47.95379257]
[32.92416763 -57.58998108]
[24.47861290 -70.11392975]
[19.90488243 -84.51037598]
[19.57374573 -99.61226654]
[23.51204872 -114.19535065]
[31.40053177 -127.07745361]
[42.59970474 -137.21427917]
[56.20170975 -143.78407288]
[71.10388947 -146.25425720]
[86.09818268 -144.42457581]
[99.96908569 -138.44337463]
[111.59213257 -128.79550171]
[120.02510071 -116.26306915]
[124.58436584 -101.86203766]
[124.90032959 -86.75982666]
[120.94738007 -72.18070221]
[113.04595947 -59.30653000]
[101.83660126 -49.18096542]
[88.22800446 -42.62483978]
[90.68093872 -27.82675934]
[93.13386536 -13.02868080]
[97.35643005 -6.90641689]
[95.48197937 2.09815025]
[97.63056183 16.94347382]
[99.77914429 31.78879547]
[101.92771912 46.63411713]
[104.07630157 61.47944260]
[110.64711761 65.09529114]
[113.46406555 50.36217499]
[128.34660339 48.48865891]
[134.72721863 62.06392670]
[123.78874969 72.32699585]
[130.35955811 75.94284821]
[144.05018616 69.81367493]
[157.74081421 63.68449783]
[171.43144226 57.55532455]
[185.12207031 51.42615128]
[198.81268311 45.29697800]
[207.98097229 31.70011520]
[224.31927490 33.11141968]
[231.02015686 48.07905579]
[221.19032288 61.20560837]
[204.94186401 58.98760223]
[191.25123596 65.11677551]
[177.56060791 71.24594879]
[163.86997986 77.37512207]
[150.17936707 83.50429535]
[136.48873901 89.63346863]
[126.33934784 118.70143890]
[101.57685852 126.62726593]
[98.21759796 141.24627686]
[94.85834503 155.86528015]
[105.60115051 164.87599182]
[111.37377167 177.58122253]
[111.09696198 191.46733093]
[104.88219452 203.81399536]
[93.99858093 212.22723389]
[80.61412811 215.10343933]
[76.95542145 229.65039062]
[74.35070038 244.42250061]
[72.81340790 259.34350586]
[71.27611542 274.26452637]
[69.73882294 289.18554688]
[68.20153046 304.10656738]
[66.66423798 319.02758789]
[65.12694550 333.94860840]
[81.33621216 339.14324951]
[96.02537537 347.73083496]
[108.49472046 359.29916382]
[118.15091705 373.29425049]
[124.53529358 389.04660034]
[127.34558868 405.80349731]
[126.45028687 422.76470947]
[121.89475250 439.12091064]
[113.89894867 454.09216309]
[102.84680939 466.96520996]
[89.26781464 477.12741089]
[73.81162262 484.09582520]
[57.21697998 487.54031372]
[57.21697998 502.54031372]
[57.21697998 517.54034424]
[57.21697998 532.54034424]
[57.21697998 547.54034424]
[57.21697998 562.54034424]
[57.21697998 577.54034424]
[57.21697998 592.54034424]
[57.21697998 607.54034424]
[57.21697998 622.54034424]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[28 130]
[29 129]
[30 128]
[31 127]
[32 126]
[33 125]
[34 124]
[42 123]
[43 122]
[48 116]
[49 115]
[50 114]
[55 91]
[56 90]
[57 89]
[58 88]
[59 87]
[60 85]
[61 84]
[62 83]
[97 112]
[98 111]
[99 110]
[100 109]
[101 108]
[102 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
