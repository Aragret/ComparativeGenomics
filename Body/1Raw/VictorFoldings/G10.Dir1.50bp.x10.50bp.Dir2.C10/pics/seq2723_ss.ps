%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUCACCUCUAGCAUCACCAGUAUUAGAGGCACCGCCUGCCCAGUGACACAUGUUUAACGxxxxxxxxxxACUGUAAAGCUAACUUAGCAUUAACCUUUUAAGUUAAAGAUUAAGAGAACCAACACCUCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[115.54949951 257.06942749]
[115.54949951 242.06941223]
[115.54949951 227.06941223]
[115.54949951 212.06941223]
[115.54949951 197.06941223]
[115.54949951 182.06941223]
[115.54949951 167.06941223]
[115.54949951 152.06941223]
[115.54949951 137.06941223]
[115.54949951 122.06941223]
[101.03810120 125.22415161]
[88.09217834 120.25254059]
[80.58211517 109.78108978]
[65.68021393 111.49377441]
[50.77830887 113.20646667]
[35.87640762 114.91915894]
[23.13602829 133.76927185]
[-3.44319272 132.31245422]
[-17.22557449 138.23242188]
[-31.00795555 144.15238953]
[-44.79033661 150.07235718]
[-44.94879913 165.30044556]
[-51.29328918 179.14483643]
[-62.72458267 189.20692444]
[-77.26213837 193.74336243]
[-92.38724518 191.96820068]
[-105.47937012 184.18899536]
[-114.27024078 171.75354004]
[-117.23677826 156.81636047]
[-113.86500549 141.96539307]
[-104.73912048 129.77368164]
[-91.44021606 122.35349274]
[-76.27242279 120.99043274]
[-61.86364746 125.92065430]
[-50.71030045 136.28996277]
[-36.92791748 130.37001038]
[-23.14553642 124.45004272]
[-9.36315536 118.53008270]
[-10.14300060 103.55036163]
[-24.46559906 99.09355164]
[-38.78819656 94.63673401]
[-53.11079407 90.17991638]
[-67.92478943 96.33824921]
[-81.90583801 88.46997070]
[-84.32887268 72.61095428]
[-73.33515167 60.92687607]
[-57.35811615 62.38076401]
[-48.65397644 75.85732269]
[-34.33137894 80.31413269]
[-20.00878334 84.77095032]
[-5.68618536 89.22776794]
[10.88441086 83.46992493]
[26.00913239 88.34114075]
[34.16371918 100.01725769]
[49.06562042 98.30456543]
[63.96752167 96.59187317]
[78.86942291 94.87918854]
[85.41149139 82.14636230]
[99.09502411 75.64712524]
[114.73010254 78.96047211]
[125.69338989 91.71171570]
[134.71092224 79.72488403]
[136.82411194 64.04543304]
[150.65838623 58.52621460]
[159.67591858 46.53938293]
[168.69345093 34.55254745]
[177.71098328 22.56571579]
[186.72851562 10.57888317]
[195.74603271 -1.40794897]
[186.21533203 -12.48154736]
[179.21060181 -25.29619408]
[175.03860474 -39.28541565]
[173.88093567 -53.83141327]
[175.78613281 -68.29236603]
[180.66763306 -82.03071594]
[188.30772400 -94.44132996]
[198.36721802 -104.97809601]
[210.40057373 -113.17797852]
[223.87554932 -118.68139648]
[238.19682312 -121.24793243]
[252.73220825 -120.76688385]
[266.84063721 -117.26200104]
[279.90039062 -110.89035797]
[289.16534424 -122.68699646]
[298.43029785 -134.48364258]
[300.86920166 -150.11572266]
[314.81530762 -155.34594727]
[324.08026123 -167.14259338]
[333.34521484 -178.93923950]
[335.13192749 -195.24075317]
[350.24972534 -201.59561157]
[363.14672852 -191.46644592]
[360.55557251 -175.27330017]
[345.14184570 -169.67428589]
[335.87689209 -157.87763977]
[326.61196899 -146.08100891]
[324.83572388 -131.29269409]
[310.22692871 -125.21868896]
[300.96197510 -113.42205048]
[291.69702148 -101.62541199]
[301.47604370 -89.69699097]
[308.37249756 -75.89229584]
[312.04089355 -60.89601517]
[312.29592896 -45.45273209]
[309.12179565 -30.32990074]
[302.67330933 -16.27974892]
[293.26812744 -4.00184107]
[281.37118530 5.89174986]
[267.57183838 12.90695286]
[252.55448914 16.69237518]
[237.06471252 17.05689621]
[221.87229919 13.97931957]
[207.73286438 7.60958099]
[198.71534729 19.59641266]
[189.69781494 31.58324623]
[180.68028259 43.57007980]
[171.66275024 55.55691147]
[162.64521790 67.54374695]
[161.17703247 82.36581421]
[146.69775391 88.74241638]
[137.68022156 100.72924805]
[147.21273804 89.14774323]
[159.67689514 80.80240631]
[174.01644897 76.40044403]
[189.01620483 76.31488800]
[203.40504456 80.55299377]
[215.96357727 88.75561523]
[225.62759399 100.22762299]
[231.57809448 113.99684143]
[233.31083679 128.89642334]
[230.67897034 143.66372681]
[223.90551758 157.04731750]
[213.56451416 167.91302490]
[200.53227234 175.34005737]
[185.91319275 178.69900513]
[170.94615173 177.70523071]
[156.89950562 172.44294739]
[144.96360779 163.35809326]
[136.14994812 151.22056580]
[131.20544434 137.05892944]
[130.54949951 122.06941223]
[130.54949951 137.06941223]
[130.54949951 152.06941223]
[130.54949951 167.06941223]
[130.54949951 182.06941223]
[130.54949951 197.06941223]
[130.54949951 212.06941223]
[130.54949951 227.06941223]
[130.54949951 242.06941223]
[130.54949951 257.06942749]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[13 57]
[14 56]
[15 55]
[16 54]
[18 38]
[19 37]
[20 36]
[21 35]
[39 51]
[40 50]
[41 49]
[42 48]
[61 121]
[62 120]
[64 118]
[65 117]
[66 116]
[67 115]
[68 114]
[69 113]
[83 100]
[84 99]
[85 98]
[87 96]
[88 95]
[89 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
