%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCCGUAAAUGAUAUCAUCUCAACUUAGUAUUAUACCCACACCCACCCAAGAACAGGGUUUxxxxxxxxxxUCACACCCCAUCCUAAAGUAAGGUCAGCUAAAUAAGCUAUCGGGCCCAUACCCCGAAAAUGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[130.81735229 330.99716187]
[129.89393616 316.02560425]
[128.97052002 301.05404663]
[128.04711914 286.08248901]
[127.12369537 271.11096191]
[126.20028687 256.13940430]
[125.27687073 241.16784668]
[122.21847534 226.48295593]
[117.08817291 212.38755798]
[111.95787048 198.29217529]
[106.82756805 184.19677734]
[101.69726562 170.10139465]
[96.56696320 156.00601196]
[91.29132843 150.76388550]
[91.47927856 141.56820679]
[77.54856110 136.00627136]
[64.26122284 142.96662903]
[50.97388077 149.92697144]
[41.52083588 165.69627380]
[24.04886436 164.36405945]
[10.90723324 171.59576416]
[-2.23439837 178.82746887]
[-5.08775139 194.20252991]
[-17.18925095 204.10644531]
[-32.82493591 203.86291504]
[-44.61211777 193.58689880]
[-46.98524857 178.13043213]
[-38.82380676 164.79159546]
[-23.98137665 159.86854553]
[-9.46610069 165.68583679]
[3.67553067 158.45413208]
[16.81716156 151.22242737]
[20.50930405 139.66256714]
[31.45108986 133.54304504]
[44.01352310 136.63963318]
[57.30086517 129.67927551]
[70.58820343 122.71892548]
[66.60115814 114.77158356]
[64.67397308 106.25023651]
[64.84734344 97.67024994]
[67.03714752 89.53279877]
[71.04359436 82.29560852]
[76.56705475 76.34720612]
[83.22930145 71.98622131]
[90.59881592 69.40673065]
[89.67540741 54.43518066]
[88.75199127 39.46363068]
[78.22184753 24.39224052]
[86.57701874 8.98978329]
[85.34640503 -5.95965147]
[79.78446960 -19.89036751]
[70.38061523 -31.57657623]
[60.97675705 -43.26278305]
[51.57289886 -54.94899368]
[36.56776810 -51.93160629]
[21.88239861 -56.24420547]
[10.89138031 -66.89578247]
[6.12036991 -81.43868256]
[8.66570950 -96.53105927]
[17.94249916 -108.70479584]
[31.81900215 -115.16244507]
[47.10649872 -114.42009735]
[60.29203033 -106.64833832]
[68.34566498 -93.63305664]
[69.41673279 -78.36506653]
[63.25910950 -64.35285187]
[72.66296387 -52.66664124]
[82.06682587 -40.98043442]
[91.47068024 -29.29422569]
[89.64187622 -44.18232346]
[90.79083252 -59.13825607]
[94.87223053 -73.57231903]
[101.72514343 -86.91539001]
[111.07938385 -98.64135742]
[122.56610107 -108.28787231]
[135.73239136 -115.47458649]
[150.05911255 -119.91812134]
[164.98136902 -121.44328308]
[179.91079712 -119.98992920]
[194.25872803 -115.61536407]
[207.45944214 -108.49208069]
[218.99243164 -98.90093994]
[228.40298462 -87.22010803]
[235.32000732 -73.91016388]
[239.47079468 -59.49589920]
[240.69169617 -44.54566956]
[238.93453979 -29.64894295]
[234.26863098 -15.39309406]
[226.87792969 -2.34021759]
[217.05384827 8.99501896]
[205.18376160 18.16567612]
[191.73568726 24.81015778]
[177.23986816 28.66648102]
[162.26786804 29.58259010]
[147.41001892 27.52236366]
[133.25216675 22.56703758]
[120.35254669 14.91199493]
[109.21977234 4.85906982]
[100.29584503 -7.19026375]
[101.52645874 7.75917053]
[110.56858063 15.85251141]
[111.68299103 28.33968163]
[103.72354126 38.54021454]
[104.64695740 53.51176453]
[105.57036591 68.48331451]
[121.07157135 75.91018677]
[130.49514771 90.28523254]
[145.45642090 89.20816040]
[160.41770935 88.13108826]
[175.37898254 87.05402374]
[186.92414856 75.91450500]
[202.81233215 78.13827515]
[210.85548401 92.01946259]
[204.88359070 106.90959167]
[189.47776794 111.38623810]
[176.45605469 102.01530457]
[161.49476624 103.09236908]
[146.53349304 104.16944122]
[131.57220459 105.24651337]
[128.16781616 118.54581451]
[119.15531158 129.82287598]
[105.67703247 136.72839355]
[110.66235352 150.87570190]
[115.79265594 164.97109985]
[120.92295837 179.06648254]
[126.05326080 193.16186523]
[131.18356323 207.25726318]
[136.31385803 221.35264587]
[139.82997131 206.77056885]
[148.57324219 194.58224487]
[161.25926208 186.57820129]
[176.02441406 183.93421936]
[190.69963074 187.03875732]
[203.12907410 195.43571472]
[211.48681641 207.89155579]
[214.54507446 222.57647705]
[211.85458374 237.33322144]
[203.81059265 249.99395752]
[191.59477234 258.69876099]
[177.00169373 262.16891479]
[162.17510986 259.89459229]
[149.29312134 252.20991516]
[140.24842834 240.24443054]
[141.17182922 255.21598816]
[142.09524536 270.18753052]
[143.01866150 285.15908813]
[143.94207764 300.13064575]
[144.86549377 315.10217285]
[145.78890991 330.07373047]
[155.29333496 343.43777466]
[148.22680664 358.23629761]
[131.85876465 359.24584961]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 128]
[9 127]
[10 126]
[11 125]
[12 124]
[13 123]
[15 122]
[16 37]
[17 36]
[18 35]
[20 32]
[21 31]
[22 30]
[45 105]
[46 104]
[47 103]
[49 100]
[50 99]
[51 69]
[52 68]
[53 67]
[54 66]
[107 119]
[108 118]
[109 117]
[110 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
