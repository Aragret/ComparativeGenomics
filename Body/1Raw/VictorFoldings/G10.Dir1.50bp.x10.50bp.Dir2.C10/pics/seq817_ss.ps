%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAGACACCCCCCACAGUUUAUGUAGCUUACCUCCUCAAAGCAAUACACUGAAAAUGUUUAxxxxxxxxxxAAUAAAACUAGGAAUAGCCCCCUUUCACUUCUGAGUCCCAGAGGUUACCCAAGGCACCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[25.57749557 245.03277588]
[25.43296623 260.85333252]
[12.39351463 268.05206299]
[4.93860435 281.06838989]
[-2.51630616 294.08468628]
[-9.97121620 307.10101318]
[-17.42612648 320.11730957]
[-24.88103676 333.13360596]
[-25.02556801 348.95416260]
[-38.06501770 356.15292358]
[-37.46710205 372.54116821]
[-51.50263214 381.02267456]
[-65.73305511 372.87237549]
[-65.51934052 356.47463989]
[-51.08132935 348.69799805]
[-51.47002411 333.80847168]
[-37.89734650 325.67871094]
[-30.44243622 312.66241455]
[-22.98752594 299.64608765]
[-15.53261566 286.62979126]
[-8.07770538 273.61346436]
[-0.62279499 260.59716797]
[-1.01148999 245.70762634]
[12.56118584 237.57786560]
[-9.94814777 220.35206604]
[-29.13337708 199.48762512]
[-44.41446686 175.61532593]
[-55.32941818 149.45692444]
[-61.54823685 121.80326843]
[-62.88290787 93.49043274]
[-59.29307175 65.37439728]
[-73.78867340 61.51723862]
[-88.28426361 57.66007614]
[-102.77986145 53.80291748]
[-117.35256958 50.24815750]
[-131.99606323 46.99732971]
[-146.63957214 43.74650574]
[-161.28306580 40.49567795]
[-172.16554260 51.43072891]
[-187.23728943 54.72404480]
[-201.68898010 49.32474899]
[-210.90911865 36.95573044]
[-211.95559692 21.56389999]
[-204.49449158 8.06073475]
[-190.90660095 0.75504714]
[-175.52780151 1.97805381]
[-163.26538086 11.33949852]
[-158.03224182 25.85217667]
[-143.38874817 29.10300255]
[-128.74523926 32.35382843]
[-114.10173798 35.60465622]
[-109.61477661 33.80390549]
[-103.94562531 34.84886932]
[-98.92270660 39.30731964]
[-84.42710876 43.16448212]
[-69.93151093 47.02164078]
[-55.43591309 50.87879944]
[-52.08601379 41.32241058]
[-48.14921570 31.99245834]
[-43.64070511 22.92494965]
[-38.57788467 14.15487385]
[-32.98028946 5.71607494]
[-26.86952019 -2.35888052]
[-20.26916122 -10.03883171]
[-13.20468140 -17.29414177]
[-5.70334387 -24.09681129]
[2.20590472 -30.42059135]
[10.49254227 -36.24107361]
[19.12458992 -41.53580475]
[28.06873703 -46.28434372]
[37.29046631 -50.46836853]
[46.75419617 -54.07173538]
[56.42339706 -57.08053970]
[66.26076508 -59.48316574]
[76.22833252 -61.27034378]
[86.28763580 -62.43517685]
[96.39984894 -62.97317123]
[106.52596283 -62.88225174]
[116.62689209 -62.16276550]
[126.66365814 -60.81748962]
[136.59751892 -58.85161972]
[146.39016724 -56.27273941]
[156.00378418 -53.09079742]
[165.40127563 -49.31807709]
[174.54638672 -44.96913910]
[183.40382385 -40.06076050]
[191.93940735 -34.61188507]
[200.12019348 -28.64354324]
[209.86785889 -40.04456329]
[219.61550903 -51.44558334]
[222.07879639 -67.65867615]
[237.44786072 -73.37914276]
[249.91232300 -62.72226334]
[246.64982605 -46.65092087]
[231.01652527 -41.69793320]
[221.26887512 -30.29691124]
[211.52122498 -18.89589119]
[221.60198975 -8.56414318]
[230.72923279 2.61888170]
[238.83140564 14.56549454]
[245.84497070 27.18202019]
[251.71493530 40.36952591]
[256.39526367 54.02461243]
[259.84927368 68.04019928]
[262.04983521 82.30638885]
[262.97976685 96.71132660]
[262.63171387 111.14204407]
[277.53359985 112.85473633]
[292.43551636 114.56742096]
[307.33740234 116.28011322]
[322.23931885 117.99280548]
[337.14120483 119.70549011]
[352.04312134 121.41818237]
[365.45178223 112.60979462]
[380.65316772 117.73789978]
[385.98608398 132.86865234]
[377.35955811 146.39503479]
[361.39114380 147.94075012]
[350.33041382 136.32008362]
[335.42852783 134.60739136]
[320.52661133 132.89469910]
[305.62472534 131.18202209]
[290.72280884 129.46932983]
[275.82092285 127.75663757]
[260.91900635 126.04394531]
[258.71099854 137.20266724]
[255.73014832 148.18023682]
[251.99102783 158.92321777]
[247.51181030 169.37927246]
[242.31431580 179.49749756]
[236.42385864 189.22862244]
[229.86911011 198.52528381]
[222.68199158 207.34219360]
[214.89749146 215.63641357]
[206.55354309 223.36756897]
[197.69075012 230.49803162]
[188.35226440 236.99304199]
[178.58357239 242.82099915]
[168.43223572 247.95352173]
[157.94767761 252.36561584]
[147.18095398 256.03579712]
[136.18450928 258.94619751]
[125.01185608 261.08267212]
[113.71741486 262.43475342]
[102.35618591 262.99591064]
[90.98348236 262.76336670]
[79.65467834 261.73831177]
[68.42494202 259.92572021]
[57.34896088 257.33438110]
[46.48065186 253.97692871]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 24]
[3 22]
[4 21]
[5 20]
[6 19]
[7 18]
[8 17]
[10 15]
[31 57]
[32 56]
[33 55]
[34 54]
[35 51]
[36 50]
[37 49]
[38 48]
[88 97]
[89 96]
[90 95]
[107 125]
[108 124]
[109 123]
[110 122]
[111 121]
[112 120]
[113 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
