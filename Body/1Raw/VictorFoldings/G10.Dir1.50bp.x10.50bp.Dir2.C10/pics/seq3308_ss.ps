%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUACUCCUCAUUGUACCCAUUCUAAUCGCAAUGGCAUUCCUAAUGCUUACCGAACGAAAxxxxxxxxxxCUCCACCCCUGACUCCCCUCAGCCAUAGAAGGCCCCACCCCAGUCUCAGCCCUACUCCACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[222.31552124 326.14935303]
[233.08955383 315.64617920]
[224.83726501 303.12020874]
[216.58497620 290.59426880]
[208.33268738 278.06829834]
[194.86959839 271.69689941]
[193.73854065 255.91616821]
[185.48625183 243.39021301]
[177.23396301 230.86425781]
[168.98167419 218.33828735]
[160.72938538 205.81233215]
[152.47709656 193.28636169]
[144.22480774 180.76040649]
[130.76171875 174.38900757]
[129.63066101 158.60829163]
[121.37837219 146.08232117]
[99.66300964 151.87403870]
[77.09434509 147.73979187]
[58.07853317 134.07911682]
[46.50054932 113.18927765]
[31.92784500 116.74403381]
[17.35514259 120.29879761]
[2.78244019 123.85356140]
[-11.79026222 127.40832520]
[-26.36296463 130.96308899]
[-29.04214668 145.95448303]
[-37.59262085 158.55642700]
[-50.53297043 166.58558655]
[-65.62120056 168.65083313]
[-80.24317932 164.39436340]
[-91.86557007 154.55361938]
[-98.47471619 140.83360291]
[-98.92553711 125.61135864]
[-93.13993835 111.52424622]
[-82.12030792 101.01293945]
[-67.77585602 95.89859009]
[-52.59185028 97.06728363]
[-39.19900894 104.31653595]
[-29.91772652 116.39038086]
[-15.34502411 112.83561707]
[-0.77232164 109.28086090]
[13.80038071 105.72609711]
[28.37308311 102.17133331]
[42.94578552 98.61656952]
[45.27688980 83.79881287]
[32.49953461 75.94139099]
[19.72217560 68.08396149]
[6.94481850 60.22653580]
[-5.83253860 52.36911011]
[-22.49193382 49.22254181]
[-24.08011055 32.34314346]
[-8.30001926 26.14435005]
[2.02488708 39.59175491]
[14.80224419 47.44918060]
[27.57960129 55.30660629]
[40.35696030 63.16403198]
[53.13431549 71.02145386]
[57.75522232 65.75039673]
[62.94679642 61.17665100]
[68.60772705 57.35868835]
[74.63124084 54.34067535]
[80.90705109 52.15204239]
[87.32337189 50.80733490]
[85.76578522 35.88842392]
[71.00640869 32.50621033]
[58.14624786 24.51276970]
[48.58028793 12.77517605]
[43.34616852 -1.43336785]
[43.01164627 -16.57162476]
[47.61301422 -30.99750900]
[56.65114212 -43.14620972]
[69.14564514 -51.69992828]
[83.74121857 -55.73081589]
[98.85463715 -54.80163956]
[112.84650421 -49.01317978]
[124.19910431 -38.99333572]
[131.68096924 -25.82897949]
[134.48054504 -10.94808102]
[132.29414368 4.03518820]
[125.35893250 17.49555588]
[114.42718506 27.97294426]
[100.68470001 34.33084106]
[102.24227905 49.24975204]
[107.63159943 49.77675629]
[112.93419647 50.87442780]
[118.08983612 52.53029251]
[123.03992462 54.72553635]
[127.72821808 57.43521118]
[132.10145569 60.62853622]
[143.19276428 50.52988815]
[154.28408813 40.43123627]
[165.37539673 30.33258820]
[165.86450195 14.53586960]
[177.43737793 3.77278090]
[193.22804260 4.42887211]
[203.86817932 16.11489487]
[203.04518127 31.89774132]
[191.24731445 42.41372681]
[175.47404480 41.42390442]
[164.38273621 51.52255249]
[153.29141235 61.62120438]
[142.20010376 71.71984863]
[148.46569824 84.77856445]
[150.79133606 99.07468414]
[148.98796082 113.44602203]
[143.20217896 126.72428131]
[133.90432739 137.83003235]
[142.15661621 150.35600281]
[156.20996094 157.62333679]
[156.75076294 172.50811768]
[165.00305176 185.03407288]
[173.25534058 197.56004333]
[181.50762939 210.08599854]
[189.75991821 222.61196899]
[198.01220703 235.13792419]
[206.26449585 247.66387939]
[220.31784058 254.93121338]
[220.85864258 269.81600952]
[229.11093140 282.34197998]
[237.36322021 294.86791992]
[245.61550903 307.39389038]
[259.51821899 301.63967896]
[274.25875854 298.62078857]
[289.30419922 298.44641113]
[304.11074829 301.12283325]
[318.14309692 306.55328369]
[330.89398193 314.54147339]
[341.90249634 324.79861450]
[350.77069092 336.95391846]
[357.17797852 350.56802368]
[360.89270020 365.14871216]
[361.78063965 380.16897583]
[359.80966187 395.08581543]
[355.05099487 409.35995483]
[347.67669678 422.47546387]
[337.95333862 433.95819092]
[326.23239136 443.39300537]
[312.93759155 450.43890381]
[298.54953003 454.84118652]
[283.58831787 456.44064331]
[268.59475708 455.17950439]
[254.11093140 451.10336304]
[240.66036987 444.35955811]
[228.72932434 435.19189453]
[218.74906921 423.93173218]
[211.08041382 410.98614502]
[206.00054932 396.82308960]
[203.69313049 381.95458984]
[204.24156189 366.91812134]
[207.62602234 352.25723267]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 121]
[3 120]
[4 119]
[5 118]
[7 116]
[8 115]
[9 114]
[10 113]
[11 112]
[12 111]
[13 110]
[15 108]
[16 107]
[20 44]
[21 43]
[22 42]
[23 41]
[24 40]
[25 39]
[45 57]
[46 56]
[47 55]
[48 54]
[49 53]
[63 83]
[64 82]
[89 102]
[90 101]
[91 100]
[92 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
