%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCUGACAUCCGGCCUGCUUCUUCUCACAUGACAAAAACUAGCCCCCAUCUCAAUCAUAUxxxxxxxxxxAACCAAACCACUUUCACCGCUACACGACCGGGGGUAUACUACGGUCAAUGCUCUGAAAUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[100.85590363 380.66699219]
[100.85590363 365.66699219]
[100.85590363 350.66699219]
[100.85590363 335.66699219]
[100.85590363 320.66699219]
[100.85590363 305.66699219]
[100.85590363 290.66699219]
[100.85590363 275.66699219]
[100.85590363 260.66699219]
[100.85590363 245.66700745]
[84.05686951 239.46022034]
[70.86089325 227.30282593]
[63.27254105 211.00682068]
[62.45775223 193.01550293]
[68.56478119 176.03706360]
[80.69802094 162.63702393]
[97.04923248 154.85052490]
[95.80236053 139.90243530]
[94.55548859 124.95434570]
[76.13291931 109.09530640]
[79.32880402 84.99787140]
[70.31127930 73.01103973]
[61.29374695 61.02420807]
[48.58705902 69.01211548]
[35.25652313 75.90872955]
[21.39563751 81.66567230]
[7.10163307 86.24256897]
[-7.52522707 89.60731506]
[-22.38234520 91.73630524]
[-37.36550522 92.61460876]
[-52.36961365 92.23606110]
[-67.28942108 90.60332489]
[-82.02027893 87.72784424]
[-96.45885468 83.62979126]
[-110.50387573 78.33790588]
[-124.05682373 71.88932800]
[-137.02262878 64.32926941]
[-149.31033325 55.71076202]
[-160.83377075 46.09426880]
[-171.51210022 35.54723740]
[-181.27041626 24.14365196]
[-190.04028320 11.96349907]
[-197.76016235 -0.90778518]
[-204.37591553 -14.37991524]
[-209.84115601 -28.35839272]
[-214.11750793 -42.74516678]
[-217.17501831 -57.43932343]
[-218.99220276 -72.33779144]
[-219.55633545 -87.33606720]
[-218.86346436 -102.32894897]
[-216.91844177 -117.21126556]
[-213.73490906 -131.87863159]
[-209.33518982 -146.22816467]
[-203.75016785 -160.15921021]
[-197.01899719 -173.57405090]
[-189.18888855 -186.37858582]
[-180.31478882 -198.48300171]
[-170.45893860 -209.80239868]
[-159.69046021 -220.25737000]
[-148.08489990 -229.77458191]
[-135.72364807 -238.28727722]
[-122.69341278 -245.73574829]
[-109.08560944 -252.06774902]
[-94.99567413 -257.23886108]
[-80.52245331 -261.21279907]
[-65.76744843 -263.96170044]
[-50.83417511 -265.46630859]
[-35.82736969 -265.71603394]
[-20.85230255 -264.70913696]
[-6.01400852 -262.45266724]
[8.58342648 -258.96249390]
[22.83761215 -254.26304626]
[36.64856339 -248.38731384]
[49.91940308 -241.37651062]
[62.55704880 -233.27981567]
[74.47284698 -224.15402222]
[85.58322906 -214.06314087]
[95.81024933 -203.07794189]
[105.08217621 -191.27548218]
[113.33397675 -178.73855591]
[120.50775909 -165.55511475]
[126.55321503 -151.81761169]
[131.42793274 -137.62240601]
[135.09773254 -123.06909180]
[137.53684998 -108.25972748]
[138.72817993 -93.29820251]
[138.66339111 -78.28945923]
[137.34291077 -63.33877563]
[134.77601624 -48.55102539]
[130.98069763 -34.02993393]
[125.98358917 -19.87735367]
[119.81974792 -6.19256067]
[112.53239441 6.92845488]
[104.17265320 19.39365768]
[94.79916382 31.11561394]
[84.47767639 42.01209641]
[73.28057861 52.00667953]
[82.29811096 63.99351120]
[91.31564331 75.98034668]
[97.47051239 74.58418274]
[103.77983093 74.73985291]
[109.85836029 76.43785095]
[115.33496094 79.57450104]
[119.87524414 83.95828247]
[123.20198822 89.32153320]
[125.11207581 95.33678436]
[140.01397705 97.04946899]
[154.91587830 98.76216125]
[169.81777954 100.47485352]
[184.71968079 102.18753815]
[199.31304932 96.07653809]
[211.07363892 105.21643066]
[225.97555542 106.92911530]
[239.38420105 98.12073517]
[254.58558655 103.24883270]
[259.91848755 118.37958527]
[251.29199219 131.90596008]
[235.32357788 133.45169067]
[224.26286316 121.83101654]
[209.36096191 120.11833191]
[195.83348083 126.35183716]
[183.00700378 117.08944702]
[168.10508728 115.37675476]
[153.20318604 113.66406250]
[138.30128479 111.95137787]
[123.39939117 110.23868561]
[117.77648163 118.34008789]
[109.50357056 123.70746613]
[110.75045013 138.65556335]
[111.99732208 153.60363770]
[123.98970795 156.21379089]
[134.87457275 161.85244751]
[143.90312195 170.12321472]
[150.45643616 180.44888306]
[154.08798218 192.11178589]
[154.55397034 204.30361938]
[151.82975769 216.18147278]
[146.11096191 226.92611694]
[137.79949951 235.79849243]
[127.47531128 242.19058228]
[115.85590363 245.66700745]
[115.85590363 260.66699219]
[115.85590363 275.66699219]
[115.85590363 290.66699219]
[115.85590363 305.66699219]
[115.85590363 320.66699219]
[115.85590363 335.66699219]
[115.85590363 350.66699219]
[115.85590363 365.66699219]
[115.85590363 380.66699219]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[17 130]
[18 129]
[19 128]
[21 99]
[22 98]
[23 97]
[106 126]
[107 125]
[108 124]
[109 123]
[110 122]
[112 120]
[113 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
