%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACAAAGAACCCUAACACCAGCCUAACCAGAUUUCAAAUUUUAUCUUUUGGCGGUAUGCAxxxxxxxxxxUCUUCAAAGCCAUACUAUUUAUGUGCUCCGGGUCCAUCAUCCACAACCUUAACAAUGAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[154.66883850 459.34555054]
[154.66883850 444.34555054]
[154.66883850 429.34555054]
[154.66883850 414.34555054]
[154.66883850 399.34555054]
[154.66883850 384.34555054]
[154.66883850 369.34555054]
[154.66883850 354.34555054]
[154.66883850 339.34555054]
[154.66883850 324.34555054]
[133.04199219 317.61511230]
[115.24855042 303.56240845]
[103.66578674 284.04339600]
[99.84889984 261.64578247]
[104.32221985 239.34602356]
[116.50727081 220.11361694]
[134.79750061 206.51582336]
[129.89595032 192.33926392]
[124.55443573 178.32254028]
[118.77816010 164.47932434]
[113.00188446 150.63610840]
[107.22561646 136.79289246]
[93.01416016 136.83917236]
[79.80624390 131.59333801]
[69.49925995 121.80897522]
[63.57384109 108.89165497]
[62.88120651 94.69700623]
[48.75640488 89.64824677]
[34.63160324 84.59949493]
[25.43110466 84.65145874]
[20.26732635 79.29598999]
[6.25061369 73.95447540]
[-7.76609945 68.61296082]
[-23.41689491 70.92881012]
[-32.55460358 59.16651917]
[-46.57131577 53.82500458]
[-53.25277328 54.50738144]
[-58.46373749 52.04218674]
[-61.05232239 47.95871735]
[-74.83470154 42.03875351]
[-88.61708832 36.11878967]
[-102.39946747 30.19882774]
[-114.65686035 39.45365906]
[-129.90145874 41.32395554]
[-144.03251648 35.30661392]
[-153.24888611 23.02027130]
[-155.07139587 7.76989269]
[-149.00978088 -6.34224796]
[-136.69461060 -15.52005577]
[-121.43859863 -17.29474640]
[-107.34552765 -11.18893528]
[-98.20636749 1.15494227]
[-96.47950745 16.41644669]
[-82.69712067 22.33641052]
[-68.91474152 28.25637245]
[-55.13236237 34.17633438]
[-41.22980499 39.80829239]
[-27.21309090 45.14980698]
[-12.56486416 42.45189667]
[-2.42458677 54.59624863]
[11.59212589 59.93776321]
[25.60883904 65.27927399]
[39.68035889 70.47469330]
[53.80516052 75.52344513]
[67.92996216 80.57220459]
[79.04705048 68.90497589]
[94.03473663 62.98186874]
[94.65871429 47.99485397]
[80.63307190 42.24530792]
[69.42183685 32.04315567]
[62.37880325 18.62035561]
[60.35446548 3.59777761]
[63.59326553 -11.21053028]
[71.70410156 -24.01639175]
[83.70755768 -33.27343750]
[98.15415192 -37.86383438]
[113.29938507 -37.23327255]
[127.31440735 -31.45788765]
[138.50682068 -21.23509216]
[145.52510071 -7.79933643]
[147.52175903 7.22694683]
[144.25567627 22.02926064]
[136.12124634 34.82015228]
[124.10075378 44.05506516]
[109.64572906 48.61883163]
[109.02175140 63.60584641]
[117.26551056 66.71594238]
[124.55590057 71.66390991]
[136.44828796 62.52217484]
[148.34066772 53.38043976]
[160.13729858 44.11549377]
[171.83692932 34.72832870]
[183.53654480 25.34116745]
[195.23617554 15.95400620]
[198.40730286 0.22748366]
[212.74517822 -6.97007513]
[227.25100708 -0.11731900]
[230.79716492 15.52890396]
[220.66334534 27.96615028]
[204.62333679 27.65362930]
[192.92370605 37.04079056]
[181.22409058 46.42795563]
[169.52445984 55.81511688]
[166.25444031 62.49737549]
[157.48239136 65.27281952]
[145.59001160 74.41455841]
[133.69763184 83.55628967]
[137.48657227 100.82667542]
[132.93997192 117.91324615]
[121.06883240 131.01661682]
[126.84510803 144.85983276]
[132.62138367 158.70304871]
[138.39764404 172.54627991]
[142.65560913 175.78501892]
[144.97013855 179.93173218]
[145.32446289 184.07614136]
[144.07250977 187.43771362]
[148.97406006 201.61427307]
[157.66822815 200.38796997]
[166.44570923 200.39189148]
[175.13333130 201.62519836]
[183.55981445 204.06275940]
[191.55914307 207.65577698]
[198.97381592 212.33264160]
[205.65798950 218.00045776]
[211.48030090 224.54681396]
[216.32644653 231.84205627]
[220.10148621 239.74183655]
[222.73164368 248.08998108]
[224.16577148 256.72155762]
[224.37631226 265.46618652]
[223.35992432 274.15130615]
[221.13739014 282.60568237]
[217.75332642 290.66275024]
[213.27519226 298.16381836]
[207.79200745 304.96133423]
[201.41253662 310.92169189]
[194.26315308 315.92785645]
[186.48533630 319.88171387]
[178.23287964 322.70593262]
[169.66883850 324.34555054]
[169.66883850 339.34555054]
[169.66883850 354.34555054]
[169.66883850 369.34555054]
[169.66883850 384.34555054]
[169.66883850 399.34555054]
[169.66883850 414.34555054]
[169.66883850 429.34555054]
[169.66883850 444.34555054]
[169.66883850 459.34555054]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[17 118]
[18 117]
[19 113]
[20 112]
[21 111]
[22 110]
[27 65]
[28 64]
[29 63]
[31 62]
[32 61]
[33 60]
[35 58]
[36 57]
[39 56]
[40 55]
[41 54]
[42 53]
[67 86]
[68 85]
[88 107]
[89 106]
[90 105]
[91 103]
[92 102]
[93 101]
[94 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
