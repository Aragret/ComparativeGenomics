%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAAGCCCUCAGUAAGUUGCAAUACUUAAUUUCUGUAACAGCUAAGGACUGCAAAACCCCAxxxxxxxxxxAUAUUUACCACAACACAAUGGGGCUCACUCACCCACCACAUUAACAACAUAAAACCCUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[171.54554749 357.39010620]
[171.54554749 342.39010620]
[171.54554749 327.39010620]
[171.54554749 312.39010620]
[171.54554749 297.39010620]
[171.54554749 282.39010620]
[171.54554749 267.39010620]
[171.54554749 252.39012146]
[171.54554749 237.39012146]
[171.54554749 222.39012146]
[168.75321960 207.65231323]
[163.26618958 193.69192505]
[155.67628479 180.75386047]
[146.16792297 169.15252686]
[136.65956116 157.55117798]
[127.15120697 145.94984436]
[117.64285278 134.34849548]
[110.92693329 131.14816284]
[108.06038666 122.40546417]
[98.79544067 110.60882568]
[88.35562897 99.83802032]
[76.85382843 90.20949554]
[65.35202026 80.58096313]
[53.85021973 70.95243835]
[42.34841537 61.32391357]
[29.10582924 54.27877808]
[14.69361305 50.12089157]
[0.28139690 45.96300507]
[-14.13081932 41.80511856]
[-28.54303551 37.64722824]
[-43.94716263 41.25603485]
[-54.03098679 30.29402161]
[-69.43511200 33.90282822]
[-79.51893616 22.94081306]
[-93.93115234 18.78292465]
[-108.34336853 14.62503815]
[-122.75558472 10.46715069]
[-132.21025085 22.36999512]
[-145.50267029 29.74427414]
[-160.60585022 31.46546364]
[-175.21665955 27.27109528]
[-187.10705566 17.80077744]
[-194.46383667 4.49866819]
[-196.16516113 -10.60675907]
[-191.95158386 -25.21203804]
[-182.46562195 -37.08996582]
[-169.15385437 -44.42924881]
[-154.04620361 -46.11069870]
[-139.44647217 -41.87790298]
[-127.58103180 -32.37633514]
[-120.25926971 -19.05491638]
[-118.59769440 -3.94506574]
[-104.18547821 0.21282166]
[-89.77326202 4.37070894]
[-75.36104584 8.52859688]
[-60.98778152 4.62239122]
[-49.87310028 15.88180542]
[-35.49983215 11.97559929]
[-24.38514709 23.23501396]
[-9.97293186 27.39290047]
[4.43928432 31.55078888]
[18.85149956 35.70867538]
[33.26371765 39.86656189]
[23.11566544 28.82042885]
[16.41917229 15.39817333]
[13.69683266 0.64727914]
[15.16110325 -14.28108025]
[20.69771004 -28.22188377]
[29.87457085 -40.08717728]
[41.97551727 -48.95098495]
[56.05618286 -54.12156677]
[71.01769257 -55.19540787]
[85.69244385 -52.08870316]
[98.93521118 -45.04390335]
[109.71250916 -34.61078644]
[117.18326569 -21.60356903]
[120.76447296 -7.03734159]
[120.17662811 7.95113564]
[115.46562195 22.19214821]
[106.99910736 34.57431412]
[95.43780518 44.13132095]
[81.68398285 50.11733246]
[66.81098938 52.06518936]
[51.97694016 49.82210922]
[63.47874451 59.45063782]
[74.98054504 69.07916260]
[86.48235321 78.70768738]
[97.98415375 88.33621216]
[94.99945068 73.63616180]
[99.63394928 59.37007141]
[110.68802643 49.23067093]
[125.30036163 45.84251785]
[139.68859863 50.08262253]
[150.12840271 60.85345078]
[153.91743469 75.36700439]
[150.07493591 89.86649323]
[139.59550476 100.59877014]
[125.19174194 104.78581238]
[110.59207916 101.34387970]
[119.85703278 113.14051819]
[129.24418640 124.84014130]
[138.75254822 136.44148254]
[148.26091003 148.04283142]
[157.76927185 159.64416504]
[167.27761841 171.24551392]
[165.62603760 156.33671570]
[169.37379456 141.81243896]
[178.03282166 129.56413269]
[190.47552490 121.18681335]
[205.08151245 117.77142334]
[219.94874573 119.76274109]
[233.14112854 126.90143585]
[242.94068909 138.25787354]
[248.07125854 152.35316467]
[247.86473083 167.35174561]
[242.34797668 181.30041504]
[232.23944092 192.38272095]
[218.85549927 199.15545654]
[203.93905640 200.73663330]
[189.43264771 196.92036438]
[177.22657776 188.20489502]
[182.71360779 202.16528320]
[185.38800049 187.40560913]
[192.41552734 174.15368652]
[203.13333130 163.65945435]
[216.53045654 156.91281128]
[231.34320068 154.55012512]
[246.17439270 156.79426575]
[259.62503052 163.43353271]
[270.42642212 173.84169006]
[277.55972290 187.03700256]
[280.35208130 201.77479553]
[278.54010010 216.66494751]
[272.29470825 230.30294800]
[262.20498657 241.40238953]
[249.22265625 248.91630554]
[234.57226562 252.13597107]
[219.63572693 250.75767517]
[205.82191467 244.91142273]
[194.43382263 235.14868164]
[186.54554749 222.39012146]
[186.54554749 237.39012146]
[186.54554749 252.39012146]
[186.54554749 267.39010620]
[186.54554749 282.39010620]
[186.54554749 297.39010620]
[186.54554749 312.39010620]
[186.54554749 327.39010620]
[186.54554749 342.39010620]
[186.54554749 357.39010620]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 122]
[12 121]
[13 105]
[14 104]
[15 103]
[16 102]
[17 101]
[19 100]
[20 99]
[21 88]
[22 87]
[23 86]
[24 85]
[25 84]
[26 63]
[27 62]
[28 61]
[29 60]
[30 59]
[32 57]
[34 55]
[35 54]
[36 53]
[37 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
