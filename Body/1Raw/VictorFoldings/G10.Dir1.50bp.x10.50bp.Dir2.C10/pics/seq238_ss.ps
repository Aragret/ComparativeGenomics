%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGACAUCAUAACAAAAAAUUUCCACCAAACCCCCCCUCCCCCGCUUCUGGCCACAGCACUUxxxxxxxxxxUAGGCGCUAUCACCACUCUGUUCGCAGCAGUCUGCGCCCUUACACAAAAUGACAUCAAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[0.19036521 161.59465027]
[-13.05222034 168.63978577]
[-26.29480553 175.68490601]
[-39.53739166 182.73004150]
[-52.77997589 189.77517700]
[-65.94856262 196.95768738]
[-79.04171753 204.27679443]
[-92.13487244 211.59590149]
[-105.22801971 218.91500854]
[-118.32117462 226.23411560]
[-131.41433716 233.55322266]
[-126.95543671 247.93417358]
[-125.58434296 262.92797852]
[-127.36098480 277.87911987]
[-132.20770264 292.13406372]
[-139.91261292 305.06961060]
[-150.13888550 316.12023926]
[-162.43948364 324.80294800]
[-176.27667236 330.73809814]
[-191.04554749 333.66622925]
[-206.10046387 333.45938110]
[-220.78332520 330.12655640]
[-234.45220947 323.81347656]
[-246.50961304 314.79611206]
[-256.42840576 303.46868896]
[-263.77502441 290.32635498]
[-268.22827148 275.94363403]
[-269.59344482 260.94931030]
[-267.81091309 245.99884033]
[-262.95861816 231.74581909]
[-255.24861145 218.81330872]
[-245.01799011 207.76667786]
[-232.71397400 199.08883667]
[-218.87445068 193.15913391]
[-204.10443115 190.23680115]
[-189.04957581 190.44956970]
[-174.36804199 193.78816223]
[-160.70162964 200.10661316]
[-148.64778137 209.12872314]
[-138.73344421 220.46006775]
[-125.64028168 213.14096069]
[-112.54712677 205.82185364]
[-99.45397186 198.50274658]
[-86.36081696 191.18363953]
[-73.26766205 183.86453247]
[-68.93575287 177.81639099]
[-59.82511139 176.53259277]
[-46.58252716 169.48745728]
[-33.33993912 162.44232178]
[-20.09735489 155.39718628]
[-6.85476971 148.35205078]
[-15.72281933 119.08120728]
[-16.72149467 88.51280212]
[-9.78288746 58.72554016]
[4.62116671 31.74502563]
[25.51116371 9.40597916]
[16.74495697 -2.76585770]
[7.97874928 -14.93769455]
[-7.18872499 -21.17305756]
[-9.10401249 -37.45997620]
[4.20317030 -47.04386520]
[19.04353523 -40.06563950]
[20.15058708 -23.70390129]
[28.91679382 -11.53206444]
[37.68300247 0.63977200]
[46.38075256 -4.31126308]
[55.46893311 -8.50275326]
[64.88137054 -11.90417767]
[74.54952240 -14.49077034]
[84.40299225 -16.24369431]
[94.37003326 -17.15018845]
[104.37806702 -17.20365143]
[114.35422516 -16.40369225]
[124.22586060 -14.75613785]
[133.92109680 -12.27298355]
[143.36932373 -8.97231102]
[152.50177002 -4.87815380]
[161.25192261 -0.02032417]
[169.55606079 5.56580544]
[177.35372925 11.83956051]
[184.58815002 18.75525665]
[191.20663452 26.26253891]
[197.16099548 34.30674362]
[210.09904480 26.71683311]
[223.03710938 19.12692451]
[235.97515869 11.53701687]
[248.91322327 3.94710875]
[250.98004150 -0.03908064]
[253.93226624 -2.84183502]
[257.27539062 -4.32689285]
[260.52328491 -4.53927231]
[263.25753784 -3.68416023]
[268.28848267 -15.60656071]
[279.73858643 -20.71676254]
[291.21270752 -16.76057434]
[304.86895752 -22.96598053]
[318.52520752 -29.17138863]
[332.11614990 -35.51851654]
[345.64035034 -42.00668335]
[359.16452026 -48.49484634]
[367.97097778 -62.32881546]
[384.34082031 -61.34896469]
[391.43417358 -46.56328583]
[381.95401001 -33.18201447]
[365.65270996 -34.97065735]
[352.12850952 -28.48249245]
[338.60430908 -21.99432755]
[333.90359497 -16.22815514]
[324.73059082 -15.51514626]
[311.07437134 -9.30973911]
[297.41812134 -3.10433245]
[288.03625488 11.69365788]
[269.74572754 9.84002972]
[256.50314331 16.88516426]
[243.56507874 24.47507286]
[230.62701416 32.06497955]
[217.68896484 39.65488815]
[204.75090027 47.24479675]
[209.06245422 56.85784531]
[212.49394226 66.81902313]
[215.01768494 77.04794312]
[216.61331177 87.46207428]
[217.26794434 97.97737885]
[216.97631836 108.50900269]
[215.74078369 118.97196198]
[213.57128906 129.28182983]
[210.48535156 139.35542297]
[206.50788879 149.11143494]
[201.67097473 158.47116089]
[196.01364136 167.35905457]
[189.58155823 175.70341492]
[182.42660522 183.43690491]
[174.60653687 190.49711609]
[166.18443298 196.82708740]
[157.22827148 202.37571716]
[147.81033325 207.09825134]
[138.00657654 210.95658875]
[127.89614868 213.91957092]
[117.56061554 215.96330261]
[107.08338165 217.07130432]
[96.54898834 217.23460388]
[86.04243469 216.45191956]
[75.64852142 214.72955322]
[65.45109558 212.08139038]
[55.53246307 208.52880859]
[45.97265244 204.10047913]
[36.84880066 198.83212280]
[28.23453522 192.76628113]
[20.19936752 185.95185852]
[12.80813503 178.44387817]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 51]
[2 50]
[3 49]
[4 48]
[5 47]
[6 45]
[7 44]
[8 43]
[9 42]
[10 41]
[11 40]
[56 65]
[57 64]
[58 63]
[83 118]
[84 117]
[85 116]
[86 115]
[87 114]
[92 113]
[95 111]
[96 110]
[97 109]
[98 107]
[99 106]
[100 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
