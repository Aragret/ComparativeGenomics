%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCAUAAACAAAUAGGUUUGGUCCUAGCCUUUCUAUUAGCUCUUAGUAAGAUUACACAUGCxxxxxxxxxxAAUCCUUCUAAUAGCUAUCCUCUUCAACAAUAUACUCUCCGGACAAUGAACCAUAACCAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[102.34910583 299.46780396]
[102.34910583 284.46780396]
[102.34910583 269.46780396]
[102.34910583 254.46778870]
[102.34910583 239.46778870]
[102.34910583 224.46778870]
[102.34910583 209.46778870]
[102.34910583 194.46778870]
[102.34910583 179.46778870]
[102.34910583 164.46778870]
[88.69287109 158.26239014]
[77.39385986 168.12811279]
[66.09485626 177.99383545]
[61.65092087 186.05009460]
[54.45664215 187.94429016]
[42.95483780 197.57281494]
[37.33963394 212.36402893]
[22.61393929 214.60083008]
[19.77067184 230.38990784]
[5.58563519 237.88420105]
[-9.05962467 231.33470154]
[-12.93051720 215.76564026]
[-3.05762506 203.12025452]
[12.98541355 203.09901428]
[17.77793312 188.99650574]
[33.32630920 186.07099915]
[44.82811356 176.44247437]
[56.22913361 166.69482422]
[67.52813721 156.82910156]
[78.82714081 146.96337891]
[69.60137939 137.90252686]
[63.44345474 127.35472107]
[60.47889709 116.24446869]
[60.57529831 105.45770264]
[45.59558487 104.67785645]
[30.61586952 103.89801025]
[17.78275299 113.52561188]
[2.29110265 109.35568237]
[-3.97521424 94.58704376]
[3.79078507 80.54891968]
[19.63169098 78.01016998]
[31.39571571 88.91829681]
[46.37543106 89.69814301]
[61.35514450 90.47798920]
[70.29339600 73.51205444]
[86.12781525 62.69509125]
[83.64270020 47.90238571]
[81.15758514 33.10967636]
[78.67246246 18.31697083]
[76.18734741 3.52426338]
[66.27062988 -8.80332375]
[71.79241943 -22.63658524]
[69.30730438 -37.42929077]
[66.82218170 -52.22200012]
[64.33706665 -67.01470947]
[59.80241394 -75.02025604]
[61.95746231 -82.14074707]
[59.78062820 -96.98194885]
[57.60379028 -111.82315826]
[55.27268600 -126.64091492]
[52.78756714 -141.43362427]
[50.30244827 -156.22633362]
[35.33656311 -158.43482971]
[21.78652382 -165.16175842]
[10.97982407 -175.74809265]
[3.97519636 -189.15667725]
[1.45888197 -204.07389832]
[3.67740345 -219.03829956]
[10.41341305 -232.58383179]
[21.00698471 -243.38343811]
[34.42026901 -250.37907410]
[49.33916855 -252.88539124]
[64.30207825 -250.65684509]
[77.84309387 -243.91175842]
[88.63559723 -233.31095886]
[95.62224579 -219.89299011]
[98.11856842 -204.97241211]
[95.87999725 -190.01098633]
[89.12583923 -176.47450256]
[78.51779938 -165.68910217]
[65.09515381 -158.71144104]
[67.58027649 -143.91874695]
[70.06539154 -129.12603760]
[74.30260468 -123.01116180]
[72.44499207 -113.99999237]
[74.62183380 -99.15879059]
[76.79866791 -84.31758118]
[79.12977600 -69.49982452]
[81.61489105 -54.70711899]
[84.10001373 -39.91440964]
[86.58512878 -25.12170219]
[96.32408905 -13.85219002]
[90.98004913 1.03914475]
[93.46517181 15.83185196]
[95.95028687 30.62455940]
[98.43540955 45.41726685]
[100.92052460 60.20997238]
[115.64878845 61.29030228]
[129.63813782 67.87894440]
[140.81967163 79.54478455]
[147.35581970 95.08141327]
[147.92831421 112.62429810]
[141.96945190 129.87330627]
[156.83250427 131.89562988]
[171.69554138 133.91796875]
[186.55859375 135.94030762]
[192.71691895 122.14713287]
[202.51283264 110.64857483]
[215.15222168 102.37677765]
[229.61045837 98.00228119]
[244.71546936 97.87973022]
[259.24279785 102.01903534]
[272.01473999 110.08465576]
[281.99594116 121.42275238]
[288.37725830 135.11418152]
[290.64141846 150.04904175]
[288.60485840 165.01664734]
[282.43267822 178.80363464]
[272.62521362 190.29234314]
[259.97753906 198.55143738]
[245.51490784 202.91139221]
[230.40977478 203.01878357]
[215.88662720 198.86488342]
[203.12280273 190.78643799]
[193.15298462 179.43832397]
[186.78541565 165.74047852]
[184.53625488 150.80334473]
[169.67321777 148.78102112]
[154.81016541 146.75868225]
[139.94711304 144.73634338]
[134.29762268 149.66920471]
[146.37161255 158.56970215]
[161.07632446 161.53134155]
[169.91786194 173.64857483]
[168.25143433 188.55570984]
[156.95245361 198.42146301]
[141.95674133 198.06295776]
[131.14212036 187.66853333]
[130.18998718 172.69866943]
[122.99861145 159.53492737]
[117.34910583 164.46778870]
[117.34910583 179.46778870]
[117.34910583 194.46778870]
[117.34910583 209.46778870]
[117.34910583 224.46778870]
[117.34910583 239.46778870]
[117.34910583 254.46778870]
[117.34910583 269.46780396]
[117.34910583 284.46780396]
[117.34910583 299.46780396]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 30]
[12 29]
[13 28]
[15 27]
[16 26]
[18 24]
[34 44]
[35 43]
[36 42]
[46 97]
[47 96]
[48 95]
[49 94]
[50 93]
[52 91]
[53 90]
[54 89]
[55 88]
[57 87]
[58 86]
[59 85]
[60 83]
[61 82]
[62 81]
[103 130]
[104 129]
[105 128]
[106 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
