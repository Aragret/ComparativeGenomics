%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACACCAGCCUAACCAGAUUUCAAAUUUUAUCUUUUGGCGGUAUGCACUUUUAACAGUCACCCCCxxxxxxxxxxUAUUACCUCAGAAGUUUUUUUCUUCGCAGGAUUUUUCUGAGCCUUUUACCACUCCAGCCUAGCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[236.44233704 138.12132263]
[232.86599731 127.15390015]
[230.29530334 115.90764618]
[228.75138855 104.47457123]
[213.75796509 104.91907501]
[198.76455688 105.36357117]
[183.77114868 105.80807495]
[168.77772522 106.25257111]
[156.28532410 114.36362457]
[142.26193237 107.03866577]
[127.26852417 107.48316956]
[112.27510834 107.92766571]
[85.24437714 141.96879578]
[70.94233704 146.49114990]
[56.64030457 151.01351929]
[49.35485458 156.61337280]
[42.01083755 155.48092651]
[27.62224579 159.71983337]
[13.23365211 163.95875549]
[2.18249702 175.28051758]
[-12.21252155 171.45524597]
[-26.60111427 175.69416809]
[-31.49091530 180.27105713]
[-37.11472321 181.46989441]
[-41.64240265 179.80419922]
[-56.18722916 183.47135925]
[-70.73205566 187.13851929]
[-85.27687836 190.80567932]
[-89.39421082 205.60240173]
[-100.36951447 216.34661865]
[-115.25050354 220.14819336]
[-130.03425598 215.98449707]
[-140.74401855 204.97557068]
[-144.49891663 190.08273315]
[-140.28889465 175.31210327]
[-129.24645996 164.63691711]
[-114.34192657 160.92871094]
[-99.58457184 165.18499756]
[-88.94403839 176.26084900]
[-74.39921570 172.59368896]
[-59.85438538 168.92652893]
[-45.30956268 165.25938416]
[-30.84002686 161.30557251]
[-16.45143509 157.06665039]
[-6.42944765 146.04808044]
[8.99473953 149.57015991]
[23.38333321 145.33123779]
[37.77192688 141.09233093]
[52.11794281 136.71148682]
[66.41997528 132.18911743]
[80.72201538 127.66675568]
[82.41155243 120.35953522]
[87.48017120 98.43787384]
[76.61486816 88.09644318]
[61.65031433 91.84687042]
[47.04102325 86.88983917]
[37.44876480 74.80712128]
[35.93439484 59.45426559]
[42.98114395 45.73031235]
[56.34041595 38.01452637]
[71.74932098 38.76898575]
[84.29093170 47.75294876]
[89.96326447 62.09966278]
[86.95629883 77.23114014]
[97.82160187 87.57257080]
[111.83061218 92.93425751]
[126.82402802 92.48975372]
[141.81744385 92.04525757]
[155.38226318 83.90240479]
[168.33323669 91.25915527]
[183.32664490 90.81465912]
[198.32005310 90.37015533]
[213.31346130 89.92565918]
[228.30688477 89.48115540]
[230.38711548 70.04032135]
[235.41413879 51.14787674]
[243.26924133 33.24773026]
[253.76719666 16.76037407]
[266.66073608 2.07302141]
[281.64639282 -10.46950722]
[298.37149048 -20.57286644]
[316.44259644 -28.00010109]
[335.43472290 -32.57719421]
[354.90133667 -34.19715500]
[374.38479614 -32.82251358]
[393.42724609 -28.48618698]
[411.58114624 -21.29069328]
[428.42007446 -11.40572739]
[443.54855347 0.93583977]
[456.61132812 15.44344997]
[467.30181885 31.77569580]
[480.84378052 25.32471848]
[494.38574219 18.87373924]
[507.92770386 12.42276192]
[521.46966553 5.97178364]
[535.01165771 -0.47919452]
[548.55364990 -6.93017244]
[545.96704102 -21.80338097]
[547.49029541 -36.82277679]
[553.01031494 -50.87382507]
[562.11749268 -62.91384125]
[574.13604736 -72.04937744]
[588.17401123 -77.60251617]
[603.18975830 -79.16117096]
[618.06903076 -76.60969543]
[631.70764160 -70.13741302]
[643.09356689 -60.22460938]
[651.38189697 -47.60688782]
[655.95745850 -33.22056580]
[656.48089600 -18.13319778]
[652.91320801 -3.46437240]
[645.51928711 9.69738865]
[634.84771729 20.37539291]
[621.69036865 27.77726555]
[607.02368164 31.35373497]
[591.93603516 30.83940506]
[577.54693604 26.27244186]
[564.92425537 17.99174309]
[555.00457764 6.61179495]
[541.46264648 13.06277275]
[527.92065430 19.51375008]
[514.37872314 25.96472931]
[500.83673096 32.41570663]
[487.29476929 38.86668396]
[473.75280762 45.31766129]
[477.60324097 56.17237091]
[480.45712280 67.33113861]
[482.29101562 78.70266724]
[483.08978271 90.19392395]
[482.84680176 101.71086884]
[481.56399536 113.15925598]
[479.25173950 124.44538879]
[475.92886353 135.47688293]
[471.62249756 146.16345215]
[466.36776733 156.41758728]
[460.20758057 166.15533447]
[453.19229126 175.29696655]
[445.37921143 183.76760864]
[436.83221436 191.49789429]
[427.62121582 198.42445374]
[417.82150269 204.49057007]
[407.51321411 209.64649963]
[396.78067017 213.84997559]
[385.71166992 217.06649780]
[374.39678955 219.26965332]
[362.92855835 220.44132996]
[351.40087891 220.57183838]
[339.90802002 219.66001892]
[328.54406738 217.71324158]
[317.40203857 214.74734497]
[306.57315063 210.78648376]
[296.14602661 205.86302185]
[286.20605469 200.01712036]
[276.83459473 193.29658508]
[268.10842896 185.75630188]
[260.09902954 177.45790100]
[252.87196350 168.46925354]
[246.48649597 158.86383057]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 74]
[5 73]
[6 72]
[7 71]
[8 70]
[10 68]
[11 67]
[12 66]
[13 51]
[14 50]
[15 49]
[17 48]
[18 47]
[19 46]
[21 44]
[22 43]
[25 42]
[26 41]
[27 40]
[28 39]
[53 65]
[54 64]
[91 125]
[92 124]
[93 123]
[94 122]
[95 121]
[96 120]
[97 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
