%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAGAAAAACCAUUUCAUAACUUUGUCAAAGUUAAAUUAUAGGCUAAAUCCUAUAUAUCUUxxxxxxxxxxCUUACUACUAAUAAUUAUUACAUUUUGACUACCACAACUCAACGGCUACAUAGAAAAAUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[200.42639160 361.39248657]
[199.80241394 346.40548706]
[199.17843628 331.41845703]
[198.55445862 316.43142700]
[197.93048096 301.44442749]
[197.30650330 286.45739746]
[196.68252563 271.47039795]
[196.05854797 256.48336792]
[191.30473328 242.25659180]
[182.79364014 229.90502930]
[174.28254700 217.55345154]
[165.77145386 205.20187378]
[157.26037598 192.85031128]
[141.04267883 186.21809387]
[139.64964294 167.88671875]
[130.88343811 155.71487427]
[122.11722565 143.54304504]
[113.35102081 131.37120056]
[105.88066101 134.12316895]
[97.85514069 135.09288025]
[89.70029449 134.17207336]
[81.86192322 131.35435486]
[74.78141022 126.73844910]
[68.87094116 120.52576447]
[64.48967743 113.01199341]
[61.92223358 104.57328796]
[61.36077881 95.64747620]
[46.45887756 97.36016846]
[31.55697632 99.07286072]
[16.65507317 100.78554535]
[1.75317097 102.49823761]
[-13.14873123 104.21092987]
[-28.05063438 105.92361450]
[-43.09581375 113.73891449]
[-54.77060699 101.44519806]
[-46.18923569 86.82341766]
[-29.76332283 91.02171326]
[-14.86142063 89.30902863]
[0.04048127 87.59633636]
[14.94238377 85.88364410]
[29.84428596 84.17095947]
[44.74618912 82.45826721]
[59.64809036 80.74557495]
[68.28720856 68.48320770]
[64.88423157 53.87431717]
[61.48125076 39.26542282]
[58.07827377 24.65653038]
[54.67529678 10.04763794]
[51.27231598 -4.56125450]
[43.68240738 -17.49930954]
[32.59109497 -27.59795952]
[21.49977875 -37.69660950]
[5.72651577 -36.70678711]
[-6.07134867 -47.22277069]
[-6.89435101 -63.00561905]
[3.74578047 -74.69164276]
[19.53644562 -75.34773254]
[31.10932159 -64.58464050]
[31.59842682 -48.78792572]
[42.68974304 -38.68927383]
[53.78105927 -28.59062576]
[49.74830627 -43.03835678]
[48.64900208 -57.99802017]
[50.52646637 -72.88005829]
[55.30671692 -87.09797668]
[62.80135727 -100.09145355]
[72.71502686 -111.34841156]
[84.65703583 -120.42521667]
[98.15674591 -126.96416473]
[112.68214417 -130.70755005]
[127.66077423 -131.50784302]
[142.50234985 -129.33351135]
[156.62196350 -124.27023315]
[169.46315002 -116.51757050]
[180.51985168 -106.38104248]
[189.35633850 -94.26012421]
[195.62434387 -80.63249969]
[199.07685852 -66.03524017]
[199.57781982 -51.04360580]
[197.10749817 -36.24842072]
[191.76321411 -22.23275948]
[183.75561523 -9.54897690]
[173.40026855 1.30306518]
[161.10528564 9.89568901]
[147.35519409 15.89026165]
[132.69187927 19.05053711]
[117.69322968 19.25197220]
[102.95034027 16.48662758]
[89.04421234 10.86348343]
[76.52289581 2.60414743]
[65.88121033 -7.96423244]
[69.28418732 6.64466000]
[72.68716431 21.25355339]
[76.09014130 35.86244583]
[79.49311829 50.47133636]
[82.89610291 65.08023071]
[97.61620331 61.87508392]
[112.17673492 64.51602173]
[124.38482666 72.39752197]
[132.48188782 84.14093781]
[135.39611816 97.83162689]
[132.88101196 111.32985687]
[125.52285767 122.60499573]
[134.28906250 134.77682495]
[143.05526733 146.94866943]
[151.82148743 159.12049866]
[164.44299316 161.97552490]
[171.48785400 172.34803772]
[169.61193848 184.33921814]
[178.12303162 196.69079590]
[186.63412476 209.04235840]
[195.14521790 221.39393616]
[203.65629578 233.74551392]
[202.89840698 218.76466370]
[205.31806946 203.96110535]
[210.80635071 190.00122070]
[219.11622620 177.51338196]
[229.87359619 167.05972290]
[242.59425354 159.11083984]
[256.70556641 154.02452087]
[271.57235718 152.02972412]
[286.52536011 153.21626282]
[300.89147949 157.53071594]
[314.02404785 164.77885437]
[325.33190918 174.63442993]
[334.30603027 186.65379333]
[340.54244995 200.29589844]
[343.76046753 214.94664001]
[343.81518555 229.94654846]
[340.70416260 244.62039185]
[334.56744385 258.30761719]
[325.68124390 270.39215088]
[314.44561768 280.32995605]
[301.36627197 287.67373657]
[287.03201294 292.09289551]
[272.08807373 293.38851929]
[257.20715332 291.50225830]
[243.05908203 286.51904297]
[230.28076172 278.66317749]
[219.44740295 268.28829956]
[211.04556274 255.85940552]
[211.66954041 270.84640503]
[212.29351807 285.83343506]
[212.91749573 300.82043457]
[213.54147339 315.80746460]
[214.16545105 330.79449463]
[214.78942871 345.78149414]
[215.41340637 360.76852417]
[222.11338806 376.34240723]
[209.00286865 387.09185791]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 148]
[2 147]
[3 146]
[4 145]
[5 144]
[6 143]
[7 142]
[8 141]
[9 113]
[10 112]
[11 111]
[12 110]
[13 109]
[15 106]
[16 105]
[17 104]
[18 103]
[27 43]
[28 42]
[29 41]
[30 40]
[31 39]
[32 38]
[33 37]
[44 96]
[45 95]
[46 94]
[47 93]
[48 92]
[49 91]
[50 61]
[51 60]
[52 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
