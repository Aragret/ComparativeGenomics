%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUUACCCAAAUAAAGUAUAGGCGAUAGAAAUUGAAACCUGGCGCAAUAGAUAUAGUACCGxxxxxxxxxxAGGAAAGGUUAAAAAAAGUAAAAGGAACUCGGCAAAUCUUACCCCGCCUGUUUACCAAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[89.06329346 284.76055908]
[89.06329346 269.76055908]
[89.06329346 254.76057434]
[89.06329346 239.76057434]
[89.06329346 224.76057434]
[89.06329346 209.76057434]
[89.06329346 194.76057434]
[89.06329346 179.76057434]
[89.06329346 164.76057434]
[89.06329346 149.76057434]
[75.04657745 144.41905212]
[65.06385040 155.61482239]
[55.08112717 166.81059265]
[45.09840012 178.00634766]
[46.25224686 193.76846313]
[35.85955811 205.67507935]
[20.08612823 206.66221619]
[8.29005432 196.14422607]
[7.46973705 180.36123657]
[18.11185646 168.67703247]
[33.90263367 168.02362061]
[43.88536072 156.82786560]
[53.86808777 145.63209534]
[63.85081100 134.43632507]
[53.22166061 114.42276001]
[52.65945816 92.21492004]
[61.88497162 72.49754333]
[78.59576416 59.25314331]
[99.02617645 54.95882797]
[101.20301056 40.11762238]
[103.37985229 25.27641678]
[105.55668640 10.43521023]
[107.73352814 -4.40599489]
[95.80142212 -13.97533226]
[90.29755402 -28.13881493]
[92.60671234 -43.05639267]
[102.00978088 -54.73707199]
[115.90342712 -60.10662842]
[118.08026123 -74.94783783]
[120.10260010 -89.81088257]
[121.97021484 -104.69416046]
[123.83782196 -119.57743835]
[111.12651825 -111.61360168]
[96.46511078 -114.78266907]
[88.17766571 -127.28540039]
[90.96942139 -142.02331543]
[103.25534058 -150.62890625]
[118.06005096 -148.21630859]
[126.97849274 -136.15379333]
[130.68464661 -150.68873596]
[126.59695435 -165.97274780]
[137.23898315 -176.39370728]
[140.94514465 -190.92864990]
[128.98240662 -181.87918091]
[114.11529541 -179.88697815]
[100.19210815 -185.46772766]
[90.81681824 -197.17687988]
[88.41619873 -211.98353577]
[93.61164093 -226.05503845]
[105.05831909 -235.74903870]
[119.79329681 -238.55625916]
[134.00245667 -233.75007629]
[144.00782776 -222.57453918]
[147.21952820 -207.92250061]
[153.84803772 -221.37846375]
[160.47653198 -234.83444214]
[159.63397217 -250.63319397]
[172.19900513 -258.63125610]
[178.82749939 -272.08721924]
[166.69363403 -280.97207642]
[156.28707886 -291.82907104]
[147.92408752 -304.32833862]
[141.85879517 -318.08999634]
[138.27551270 -332.69586182]
[137.28314209 -347.70208740]
[138.91183472 -362.65261841]
[143.11210632 -377.09313965]
[149.75630188 -390.58483887]
[158.64251709 -402.71768188]
[169.50071716 -413.12301636]
[182.00091553 -421.48458862]
[195.76327515 -427.54830933]
[210.36953735 -431.12994385]
[225.37585449 -432.12060547]
[240.32621765 -430.49023438]
[254.76626587 -426.28833008]
[268.25720215 -419.64257812]
[280.38906860 -410.75500488]
[290.79315186 -399.89562988]
[299.15328979 -387.39447021]
[305.21548462 -373.63143921]
[308.79544067 -359.02474976]
[309.78442383 -344.01831055]
[308.15231323 -329.06814575]
[303.94879150 -314.62857056]
[297.30151367 -301.13839722]
[288.41256714 -289.00756836]
[277.55200195 -278.60470581]
[265.04989624 -270.24594116]
[251.28617859 -264.18533325]
[236.67909241 -260.60702515]
[221.67254639 -259.61978149]
[206.72256470 -261.25354004]
[192.28347778 -265.45874023]
[185.65496826 -252.00276184]
[186.97164917 -237.16647339]
[173.93249512 -228.20593262]
[167.30400085 -214.74996948]
[160.67550659 -201.29400635]
[155.48008728 -187.22248840]
[151.77392578 -172.68754578]
[156.12670898 -158.44316101]
[145.21958923 -146.98257446]
[141.51342773 -132.44763184]
[138.72109985 -117.70983124]
[136.85348511 -102.82654572]
[134.98588562 -87.94326782]
[137.28858948 -80.86914825]
[132.92146301 -72.77099609]
[130.74462891 -57.92979431]
[142.51107788 -48.79653549]
[148.16371155 -34.90755844]
[146.09169006 -19.95519829]
[136.75228882 -7.96885538]
[122.57472992 -2.22915816]
[120.39789581 12.61204720]
[118.22105408 27.45325279]
[116.04421997 42.29446030]
[113.86738586 57.13566208]
[123.44271851 61.05310822]
[131.95269775 67.09799194]
[138.92756653 74.98825073]
[143.97073364 84.33880615]
[146.78125000 94.68029785]
[147.17140198 105.48256683]
[145.07873535 116.18188477]
[140.57142639 126.21030426]
[133.84695435 135.02586365]
[125.22364807 142.14178467]
[115.12590790 147.15332031]
[104.06329346 149.76057434]
[104.06329346 164.76057434]
[104.06329346 179.76057434]
[104.06329346 194.76057434]
[104.06329346 209.76057434]
[104.06329346 224.76057434]
[104.06329346 239.76057434]
[104.06329346 254.76057434]
[104.06329346 269.76055908]
[104.06329346 284.76055908]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 24]
[12 23]
[13 22]
[14 21]
[29 129]
[30 128]
[31 127]
[32 126]
[33 125]
[38 120]
[39 119]
[40 117]
[41 116]
[42 115]
[49 114]
[50 113]
[52 111]
[53 110]
[64 109]
[65 108]
[66 107]
[68 105]
[69 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
