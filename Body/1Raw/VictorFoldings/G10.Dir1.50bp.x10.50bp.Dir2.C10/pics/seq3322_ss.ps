%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUACUCCUCAUUGUACCCAUUCUAAUCGCAAUGGCAUUCCUAAUGCUUACCGAACGAAAAAUxxxxxxxxxxUCAACAAUAUACUCUCCGGACAAUGAACCAUAACCAAUACUACCAAUCAAUACUCAUCAUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[214.05670166 378.77874756]
[214.05670166 363.77874756]
[214.05670166 348.77874756]
[214.05670166 333.77874756]
[214.05670166 318.77874756]
[214.05670166 303.77874756]
[214.05670166 288.77874756]
[214.05670166 273.77874756]
[214.05670166 258.77874756]
[214.05670166 243.77874756]
[209.65640259 229.43869019]
[201.24299622 217.02037048]
[186.39672852 218.22607422]
[172.85015869 211.79592896]
[164.28439331 199.36637878]
[163.08230591 184.21870422]
[169.66656494 170.41310120]
[161.25315857 157.99479675]
[152.83975220 145.57647705]
[144.42633057 133.15815735]
[136.01292419 120.73984528]
[127.59951782 108.32153320]
[119.18610382 95.90322113]
[121.68366241 108.73337555]
[115.20111847 122.47626495]
[100.04324341 130.89172363]
[80.66899872 128.75584412]
[65.84651947 131.05671692]
[51.02403641 133.35758972]
[36.20155716 135.65846252]
[29.23446655 149.52349854]
[15.43288803 156.61547852]
[0.10380909 154.20736694]
[-10.85842705 143.22515869]
[-13.23861694 127.89172363]
[-6.12152910 114.10308075]
[7.75617170 107.16124725]
[23.05822563 109.73549652]
[33.90068054 120.83598328]
[48.72316360 118.53511047]
[63.54564285 116.23423004]
[78.36812592 113.93335724]
[80.51670837 99.08803558]
[66.95481110 92.67906189]
[53.39291382 86.27008820]
[39.83101654 79.86110687]
[26.26912117 73.45213318]
[9.36515331 72.15128326]
[5.93568325 55.54781723]
[20.94090843 47.65607452]
[32.67809677 59.89023590]
[46.23999405 66.29920959]
[59.80188751 72.70819092]
[73.36378479 79.11716461]
[86.92568207 85.52613831]
[93.49649811 81.91028595]
[93.80444336 66.91345215]
[106.63813019 74.67858887]
[113.20894623 71.06273651]
[115.05226898 56.17642593]
[116.89559174 41.29011917]
[102.48143005 37.01441574]
[88.96767426 30.42439270]
[76.72300720 21.69983673]
[66.08145905 11.07875633]
[57.33334351 -1.14909494]
[50.71731567 -14.65013409]
[46.41386795 -29.05604172]
[44.54039764 -43.97381592]
[45.14801788 -58.99648666]
[48.22014999 -73.71422577]
[53.67298508 -87.72552490]
[61.35776520 -100.64813995]
[71.06484222 -112.12953949]
[82.52940369 -121.85649872]
[95.43869019 -129.56365967]
[109.44051361 -135.04075623]
[124.15291595 -138.13838196]
[139.17451477 -138.77203369]
[154.09550476 -136.92440796]
[168.50885010 -132.64593506]
[182.02133179 -126.05330658]
[194.26432800 -117.32638550]
[204.90382385 -106.70326233]
[213.64958191 -94.47372437]
[220.26300049 -80.97140503]
[224.56367493 -66.56467438]
[226.43428040 -51.64653778]
[225.82376099 -36.62398148]
[222.74879456 -21.90683556]
[217.29325867 -7.89658833]
[209.60598755 5.02454710]
[199.89669800 16.50407410]
[188.43026733 26.22882271]
[175.51950073 33.93349457]
[161.51661682 39.40789795]
[146.80361938 42.50268936]
[131.78190613 43.13344574]
[129.93858337 58.01975250]
[128.09524536 72.90605927]
[131.60441589 87.48980713]
[140.01782227 99.90811920]
[148.43124390 112.32643890]
[156.84465027 124.74475098]
[165.25805664 137.16307068]
[173.67146301 149.58137512]
[182.08488464 161.99969482]
[197.34776306 161.00386047]
[210.96989441 167.73693848]
[219.33724976 180.30093384]
[220.28601074 195.26608276]
[213.66131592 208.60696411]
[222.07472229 221.02526855]
[221.47351074 206.03732300]
[223.84559631 191.22607422]
[229.09741211 177.17550659]
[237.02191162 164.43963623]
[247.30661011 153.52062988]
[259.54602051 144.84901428]
[273.25753784 138.76669312]
[287.90051270 135.51351929]
[302.89758301 135.21772766]
[317.65747070 137.89100647]
[331.59814453 143.42793274]
[344.16995239 151.61021423]
[354.87719727 162.11520386]
[363.29769897 174.52870178]
[369.09945679 188.36125183]
[372.05371094 203.06745911]
[372.04394531 218.06745911]
[369.07058716 232.76980591]
[363.25082397 246.59480286]
[354.81417847 258.99734497]
[344.09326172 269.48840332]
[331.51083374 277.65429688]
[317.56295776 283.17309570]
[302.79962158 285.82717896]
[287.80294800 285.51187134]
[273.16421509 282.23965454]
[259.46063232 276.13949585]
[247.23251343 267.45196533]
[236.96202087 256.51959229]
[229.05670166 243.77874756]
[229.05670166 258.77874756]
[229.05670166 273.77874756]
[229.05670166 288.77874756]
[229.05670166 303.77874756]
[229.05670166 318.77874756]
[229.05670166 333.77874756]
[229.05670166 348.77874756]
[229.05670166 363.77874756]
[229.05670166 378.77874756]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 113]
[12 112]
[17 107]
[18 106]
[19 105]
[20 104]
[21 103]
[22 102]
[23 101]
[27 42]
[28 41]
[29 40]
[30 39]
[43 55]
[44 54]
[45 53]
[46 52]
[47 51]
[59 100]
[60 99]
[61 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
