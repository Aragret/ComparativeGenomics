%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUAAAACUUAAAACUUUACAGUCAGAGGUUCAAUUCCUCUUCUUAACAACAUACCCAUGxxxxxxxxxxCCGUGAAAUCAAUAUCCCGCACAAGAGUGCUACUCUCCUCGCUCCGGGCCCAUAACACUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[131.27632141 220.74577332]
[130.65234375 205.75875854]
[130.02836609 190.77174377]
[129.40438843 175.78472900]
[128.78041077 160.79771423]
[128.15643311 145.81069946]
[127.53245544 130.82368469]
[126.90847778 115.83666992]
[124.73163605 100.99546051]
[121.02547455 86.46052551]
[117.31931305 71.92559052]
[124.84032440 115.79272461]
[85.81797028 121.65330505]
[74.31616974 131.28182983]
[62.81436157 140.91035461]
[51.31256104 150.53887939]
[53.34983063 165.83113098]
[46.77539444 179.78750610]
[33.68713379 187.95457458]
[18.26145935 187.72624207]
[5.42065096 179.17538452]
[-0.73783654 165.03054810]
[1.75114787 149.80528259]
[12.09337807 138.35794067]
[26.98868561 134.34130859]
[41.68403244 139.03707886]
[53.18583679 129.40855408]
[64.68763733 119.78002930]
[76.18944550 110.15150452]
[71.10345459 94.39273071]
[76.69671631 76.65287781]
[61.98875427 73.70738983]
[50.80105591 80.21041107]
[38.57893372 77.41064453]
[31.78803062 67.35127258]
[17.14452934 64.10044861]
[2.50102878 60.84962082]
[-12.14247227 57.59879684]
[-26.78597450 54.34796906]
[-39.08391953 64.00688171]
[-54.71156311 63.44940186]
[-66.29000854 52.93875885]
[-68.35226440 37.43775558]
[-59.92460632 24.26548958]
[-44.98630524 19.64150620]
[-30.59077644 25.74910736]
[-23.53514862 39.70446777]
[-8.89164639 42.95529556]
[5.75185442 46.20611954]
[20.39535522 49.45694733]
[35.03885651 52.70777130]
[51.43220520 46.52245331]
[64.93423462 58.99943161]
[79.64219666 61.94491196]
[84.33577728 56.09510040]
[72.63615417 46.70793915]
[60.93667984 37.32059479]
[70.32420349 25.62126350]
[82.02331543 35.00831604]
[93.72294617 44.39547729]
[98.41652679 38.54566574]
[92.35350800 24.82561111]
[86.29049683 11.10555840]
[72.73805237 1.87174606]
[74.22821045 -14.45955753]
[89.22801971 -21.08810616]
[102.30696869 -11.19501972]
[100.01055145 5.04254532]
[106.07356262 18.76259804]
[112.13657379 32.48265076]
[113.39352417 17.53540993]
[109.13768768 3.15181398]
[113.18443298 -11.29200363]
[124.29389954 -21.37067604]
[139.06231689 -23.99625397]
[152.96487427 -18.36429977]
[161.74203491 -6.20035791]
[162.70460510 8.76872540]
[155.55767822 21.95665169]
[142.49095154 29.32283974]
[132.99041748 40.93058777]
[146.89295959 35.29862976]
[160.79551697 29.66667366]
[167.62805176 23.50481987]
[175.04635620 24.06548500]
[189.06306458 18.72397232]
[186.99104309 3.80711532]
[188.28993225 -11.18959236]
[192.89140320 -25.51430511]
[200.56161499 -38.44958496]
[210.91310120 -49.34833527]
[223.42440796 -57.66617203]
[237.46626282 -62.98861313]
[252.33329773 -65.05172729]
[267.27944946 -63.75523758]
[281.55538940 -59.16736221]
[294.44616699 -51.52126312]
[305.30688477 -41.20317078]
[313.59509277 -28.73289871]
[327.61181641 -34.07440948]
[341.62850952 -39.41592407]
[355.64523315 -44.75743484]
[365.57113647 -57.81148911]
[381.80288696 -55.47428894]
[387.64263916 -40.15014648]
[377.08294678 -27.60322571]
[360.98675537 -30.74072266]
[346.97003174 -25.39920998]
[332.95330811 -20.05769730]
[318.93661499 -14.71618557]
[321.04959106 0.10735133]
[319.81015015 15.03658962]
[315.27728271 29.32252312]
[307.67523193 42.24770355]
[297.38247681 53.16227341]
[284.91293335 61.51662827]
[270.89013672 66.88910675]
[256.01626587 69.00726318]
[241.03677368 67.76168823]
[226.70323181 63.21163177]
[213.73545837 55.58223724]
[202.78544617 45.25336075]
[194.40458679 32.74068451]
[180.38786316 38.08219910]
[166.42747498 43.56922913]
[152.52491760 49.20118713]
[138.62236023 54.83314514]
[131.85424805 68.21942902]
[135.56040955 82.75436401]
[139.26657104 97.28929901]
[145.43553162 83.61655426]
[157.53352356 74.74871826]
[172.42903137 72.98119354]
[186.26637268 78.77150726]
[195.46382141 90.62085724]
[197.64062500 105.46206665]
[192.23333740 119.45353699]
[180.64161682 128.97361755]
[165.86595154 131.55807495]
[151.73095703 126.53791046]
[141.89549255 115.21269226]
[142.51947021 130.19970703]
[143.14344788 145.18672180]
[143.76742554 160.17373657]
[144.39140320 175.16075134]
[145.01538086 190.14776611]
[145.63935852 205.13478088]
[146.26333618 220.12179565]
[152.96331787 235.69570923]
[139.85279846 246.44514465]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 148]
[2 147]
[3 146]
[4 145]
[5 144]
[6 143]
[7 142]
[8 141]
[9 130]
[10 129]
[11 128]
[13 29]
[14 28]
[15 27]
[16 26]
[31 54]
[32 53]
[35 51]
[36 50]
[37 49]
[38 48]
[39 47]
[61 70]
[62 69]
[63 68]
[81 127]
[82 126]
[83 125]
[85 124]
[86 123]
[99 110]
[100 109]
[101 108]
[102 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
