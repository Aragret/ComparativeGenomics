%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAACUAAUACUAACAUCUCAGACGCUCAGGAAAUAGAAACCGUCUGAACUAUCCUGCCCxxxxxxxxxxGGACUUCACGUCAUUAUUGGCUCAACUUUCCUCACUAUCUGCUUCAUCCGCCAACUAAUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 521.56896973]
[92.50000000 506.56896973]
[92.50000000 491.56896973]
[92.50000000 476.56896973]
[92.50000000 461.56896973]
[92.50000000 446.56896973]
[92.50000000 431.56896973]
[92.50000000 416.56896973]
[92.50000000 401.56896973]
[92.50000000 386.56896973]
[78.03514099 382.73263550]
[65.04627991 375.27700806]
[54.42181396 364.70510864]
[46.89020538 351.73333740]
[42.97005844 337.24288940]
[42.93439102 322.21997070]
[46.79164505 307.68865967]
[54.28468323 294.64102173]
[64.90794373 283.96945190]
[77.94152832 276.40563965]
[92.50000000 272.47039795]
[78.26325989 267.90136719]
[66.11937714 259.14373779]
[57.26499176 247.04496765]
[52.57740021 232.78251648]
[52.52762985 217.74920654]
[57.13313675 203.41728210]
[65.95487213 191.19413757]
[78.13909912 182.28417969]
[92.50000000 177.57017517]
[92.50000000 162.57017517]
[92.50000000 147.57017517]
[92.50000000 132.57017517]
[79.12783051 126.10399628]
[69.87802124 114.48214722]
[66.57746124 100.00000000]
[69.87802124 85.51785278]
[79.12783051 73.89600372]
[92.50000000 67.42983246]
[92.50000000 52.42982864]
[92.50000000 37.42982864]
[92.50000000 22.42982864]
[92.50000000 7.42982864]
[92.50000000 -7.57017136]
[82.22768402 3.36050010]
[67.52317810 6.32319164]
[53.81950760 0.22324777]
[46.17989731 -12.68552399]
[47.42704010 -27.63358879]
[57.10013199 -39.09793472]
[71.62516785 -42.84271240]
[85.63542938 -37.48430634]
[93.95417023 -25.00337601]
[96.43928528 -39.79608536]
[94.76953888 -48.84394455]
[99.13304901 -54.86934662]
[101.92537689 -69.60715485]
[104.71769714 -84.34495544]
[92.59014130 -75.51759338]
[77.59114838 -75.34400177]
[65.26254272 -83.88832855]
[60.15950394 -97.99361420]
[64.16750336 -112.44822693]
[75.80565643 -121.91149139]
[90.77391052 -122.88690186]
[103.54178619 -115.01407623]
[109.39172363 -101.20273590]
[114.58714294 -115.27425385]
[119.78255463 -129.34577942]
[106.99748230 -137.29100037]
[96.07371521 -147.64746094]
[87.45858765 -159.99105835]
[81.50487518 -173.81634521]
[78.45638275 -188.55714417]
[78.43794250 -203.60987854]
[81.45030975 -218.35810852]
[87.37012482 -232.19793701]
[95.95498657 -244.56260681]
[106.85334778 -254.94580078]
[119.61891937 -262.92233276]
[133.72895813 -268.16555786]
[148.60568237 -270.46081543]
[163.63987732 -269.71405029]
[178.21592712 -265.95587158]
[191.73693848 -259.34020996]
[203.64923096 -250.13790894]
[213.46499634 -238.72583008]
[220.78230286 -225.57128906]
[225.30151367 -211.21296692]
[226.83755493 -196.23880005]
[225.32752991 -181.26199341]
[220.83328247 -166.89582825]
[213.53884888 -153.72860718]
[203.74290466 -142.29948425]
[191.84663391 -133.07650757]
[178.33714294 -126.43733978]
[163.76763916 -122.65385437]
[148.73475647 -121.88097382]
[133.85408020 -124.15036011]
[128.65866089 -110.07884216]
[123.46324921 -96.00732422]
[119.45550537 -81.55263519]
[116.66318512 -66.81482697]
[113.87085724 -52.07702255]
[111.23199463 -37.31096649]
[108.74687195 -22.51825905]
[107.50000000 -7.57017136]
[107.50000000 7.42982864]
[107.50000000 22.42982864]
[107.50000000 37.42982864]
[107.50000000 52.42982864]
[107.50000000 67.42983246]
[120.87216949 73.89600372]
[130.12197876 85.51785278]
[133.42253113 100.00000000]
[130.12197876 114.48214722]
[120.87216949 126.10399628]
[107.50000000 132.57017517]
[107.50000000 147.57017517]
[107.50000000 162.57017517]
[107.50000000 177.57017517]
[121.86090088 182.28417969]
[134.04513550 191.19413757]
[142.86686707 203.41728210]
[147.47236633 217.74920654]
[147.42259216 232.78251648]
[142.73501587 247.04496765]
[133.88063049 259.14373779]
[121.73674011 267.90136719]
[107.50000000 272.47039795]
[122.05847168 276.40563965]
[135.09205627 283.96945190]
[145.71531677 294.64102173]
[153.20835876 307.68865967]
[157.06561279 322.21997070]
[157.02993774 337.24288940]
[153.10978699 351.73333740]
[145.57818604 364.70510864]
[134.95372009 375.27700806]
[121.96485901 382.73263550]
[107.50000000 386.56896973]
[107.50000000 401.56896973]
[107.50000000 416.56896973]
[107.50000000 431.56896973]
[107.50000000 446.56896973]
[107.50000000 461.56896973]
[107.50000000 476.56896973]
[107.50000000 491.56896973]
[107.50000000 506.56896973]
[107.50000000 521.56896973]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[21 130]
[30 121]
[31 120]
[32 119]
[33 118]
[39 112]
[40 111]
[41 110]
[42 109]
[43 108]
[44 107]
[53 106]
[54 105]
[56 104]
[57 103]
[58 102]
[67 101]
[68 100]
[69 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
