%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACUUUCCUCACUAUCUGCUUCAUCCGCCAACUAAUAUUUCACUUUACAUCCAAACAUCACUxxxxxxxxxxCCUCUCACUUCAACCUCCCUCACCAUUGGCAGCCUAGCAUUAGCAGGAAUACCUUUCCUCACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[111.30818939 340.00476074]
[111.30818939 325.00476074]
[111.30818939 310.00476074]
[111.30818939 295.00476074]
[111.30818939 280.00476074]
[111.30818939 265.00476074]
[111.30818939 250.00474548]
[111.30818939 235.00474548]
[111.30818939 220.00474548]
[111.30818939 205.00474548]
[109.48853302 190.11552429]
[106.61342621 187.97981262]
[104.65592194 184.31831360]
[104.33405304 179.59005737]
[106.12770081 174.56257629]
[103.40662384 159.81144714]
[100.68554688 145.06031799]
[97.96446991 130.30918884]
[95.24339294 115.55806732]
[86.04222107 108.35817719]
[84.03934479 96.84780884]
[90.26770020 86.96308899]
[87.84614563 72.15984344]
[85.42458344 57.35659790]
[75.40142059 49.17790604]
[73.71601868 36.75678253]
[80.73371124 26.85878944]
[78.61267090 12.00950813]
[76.49162292 -2.83977413]
[74.37058258 -17.68905640]
[60.71600723 -21.45416451]
[49.56835175 -30.12168694]
[42.59698486 -42.35168076]
[40.82981110 -56.27396393]
[44.50181580 -69.77408600]
[53.02443314 -80.81445312]
[65.07961273 -87.74185944]
[63.25995255 -102.63108063]
[61.44029617 -117.52029419]
[59.62063599 -132.40951538]
[57.80097961 -147.29873657]
[42.79657745 -146.85984802]
[27.81569099 -147.80726624]
[12.98612690 -150.13293457]
[-1.56558740 -153.81698608]
[-15.71530056 -158.82800293]
[-29.34228897 -165.12321472]
[-42.33028793 -172.64894104]
[-54.56849289 -181.34095764]
[-65.95248413 -191.12509155]
[-76.38513184 -201.91789246]
[-85.77742767 -213.62725830]
[-94.04924774 -226.15330505]
[-101.13001251 -239.38914490]
[-106.95930481 -253.22186279]
[-111.48739624 -267.53341675]
[-114.67565155 -282.20175171]
[-116.49686432 -297.10168457]
[-116.93550873 -312.10607910]
[-115.98783112 -327.08694458]
[-113.66192627 -341.91647339]
[-109.97763062 -356.46813965]
[-104.96637726 -370.61776733]
[-98.67092896 -384.24465942]
[-91.14499664 -397.23251343]
[-82.45278168 -409.47058105]
[-72.66844940 -420.85440063]
[-61.87547684 -431.28686523]
[-50.16594696 -440.67898560]
[-37.63977051 -448.95059204]
[-24.40381241 -456.03112793]
[-10.57100201 -461.86019897]
[3.74064374 -466.38803101]
[18.40901947 -469.57604980]
[33.30897522 -471.39703369]
[48.31338882 -471.83541870]
[63.29424667 -470.88748169]
[78.12373352 -468.56134033]
[92.67532349 -464.87680054]
[106.82486725 -459.86532593]
[120.45165253 -453.56964111]
[133.43940735 -446.04348755]
[145.67730713 -437.35107422]
[157.06097412 -427.56652832]
[167.49327087 -416.77340698]
[176.88517761 -405.06372070]
[185.15657043 -392.53741455]
[192.23689270 -379.30133057]
[198.06573486 -365.46841431]
[202.59333801 -351.15670776]
[205.78111267 -336.48828125]
[207.60183716 -321.58828735]
[208.03997803 -306.58386230]
[207.09179688 -291.60302734]
[204.76539612 -276.77355957]
[201.08061218 -262.22204590]
[196.06889343 -248.07257080]
[189.77299500 -234.44590759]
[182.24662781 -221.45828247]
[173.55400085 -209.22050476]
[163.76928711 -197.83700562]
[152.97596741 -187.40490723]
[141.26612854 -178.01318359]
[128.73966980 -169.74198914]
[115.50347900 -162.66189575]
[101.67047882 -156.83329773]
[87.35868073 -152.30592346]
[72.69020081 -149.11839294]
[74.50985718 -134.22917175]
[76.32951355 -119.33995819]
[78.14916992 -104.45073700]
[79.96882629 -89.56151581]
[95.17301178 -84.73249817]
[106.80113983 -73.72662354]
[112.49940491 -58.70214081]
[111.08411407 -42.63753128]
[102.78717041 -28.74106598]
[89.21986389 -19.81009865]
[91.34091187 -4.96081734]
[93.46195221 9.88846493]
[95.58299255 24.73774719]
[107.15074158 37.90114975]
[100.22782898 54.93503952]
[102.64939117 69.73828888]
[105.07094574 84.54153442]
[116.02810669 97.21101379]
[109.99452209 112.83699036]
[112.71559906 127.58811951]
[115.43667603 142.33924866]
[118.15774536 157.09037781]
[120.87882233 171.84149170]
[124.04704285 186.50309753]
[129.52879333 172.54061890]
[140.44567871 162.25367737]
[154.70895386 157.61048889]
[169.58953857 159.49946594]
[182.24026489 167.55918884]
[190.24061584 180.24754333]
[192.05984497 195.13681030]
[187.34986877 209.37815857]
[177.01187134 220.24673462]
[163.02386475 225.66299438]
[148.06225586 224.59060669]
[134.98970032 217.23478699]
[126.30818939 205.00474548]
[126.30818939 220.00474548]
[126.30818939 235.00474548]
[126.30818939 250.00474548]
[126.30818939 265.00476074]
[126.30818939 280.00476074]
[126.30818939 295.00476074]
[126.30818939 310.00476074]
[126.30818939 325.00476074]
[126.30818939 340.00476074]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[11 132]
[15 131]
[16 130]
[17 129]
[18 128]
[19 127]
[22 125]
[23 124]
[24 123]
[27 121]
[28 120]
[29 119]
[30 118]
[37 112]
[38 111]
[39 110]
[40 109]
[41 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
