%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUACAUAGAAAAAUCCACCCCUUACGAGUGCGGCUUCGACCCUAUAUCCCCCGCCCGCGUCxxxxxxxxxxCCAGCCACCAUGAAUAUUGUACGGUACCAUAAAUACUUGACCACCUGUAGUACAUAAAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[339.22390747 63.45862961]
[324.51593018 66.40411377]
[309.80798340 69.34959412]
[298.84783936 79.43545532]
[283.79699707 74.55867004]
[269.08905029 77.50415039]
[254.38108826 80.44963074]
[239.67312622 83.39511871]
[224.96516418 86.34059906]
[210.25720215 89.28607941]
[195.54924011 92.23156738]
[192.17301941 95.69229126]
[186.56523132 97.02796936]
[180.16880798 94.98022461]
[165.35104370 97.31133270]
[150.53329468 99.64243317]
[135.71553040 101.97353363]
[134.05410767 113.28244019]
[128.82861328 123.72452545]
[120.42613220 132.18350220]
[109.58050537 137.70286560]
[97.30950165 139.59251404]
[84.81967926 137.51136780]
[73.38769531 131.51657104]
[64.22998810 122.07270050]
[49.65728378 125.62746429]
[35.08457947 129.18222046]
[30.15449715 143.80062866]
[18.08948708 153.41516113]
[2.73944759 154.95783997]
[-10.99747658 147.93640137]
[-18.73788452 134.59138489]
[-18.01183891 119.18111420]
[-9.05101967 106.62296295]
[5.28520966 100.92417908]
[20.42220879 103.90323639]
[31.52981949 114.60952759]
[46.10251999 111.05476379]
[60.67522430 107.50000000]
[60.67522430 92.50000000]
[46.10251999 88.94523621]
[30.52219772 94.06242371]
[18.48250198 82.92789459]
[22.36883926 66.99589539]
[38.18328094 62.65591049]
[49.65728378 74.37253571]
[64.22998810 77.92729950]
[81.94219971 63.78591156]
[103.60482025 61.26632309]
[122.54017639 70.23621368]
[133.38442993 87.15577698]
[148.20217896 84.82467651]
[163.01994324 82.49356842]
[177.83769226 80.16246796]
[192.60375977 77.52360535]
[207.31172180 74.57811737]
[222.01968384 71.63263702]
[236.72764587 68.68715668]
[251.43560791 65.74167633]
[266.14355469 62.79619217]
[280.85153198 59.85070801]
[292.86367798 49.55416870]
[306.86248779 54.64163208]
[321.57046509 51.69615173]
[336.27841187 48.75066757]
[334.99377441 35.56808090]
[334.95019531 22.32365417]
[336.14797974 9.13396263]
[338.57644653 -3.88490295]
[342.21420288 -16.61837006]
[347.02905273 -28.95438385]
[352.97857666 -40.78440094]
[360.01028442 -52.00433350]
[368.06222534 -62.51547623]
[377.06341553 -72.22537231]
[386.93453979 -81.04862976]
[397.58871460 -88.90764618]
[408.93203735 -95.73333740]
[420.86462402 -101.46570587]
[433.28143311 -106.05437469]
[446.07308960 -109.45906830]
[459.12701416 -111.64990234]
[472.32827759 -112.60768890]
[485.56063843 -112.32411194]
[498.70767212 -110.80175018]
[511.65365601 -108.05411530]
[524.28466797 -104.10548401]
[536.48950195 -98.99070740]
[548.16088867 -92.75490570]
[559.19598389 -85.45304871]
[569.49786377 -77.14949036]
[578.97583008 -67.91740417]
[587.54650879 -57.83811951]
[595.13458252 -47.00041580]
[601.67333984 -35.49975204]
[607.10528564 -23.43740273]
[611.38275146 -10.91958332]
[614.46813965 1.94349122]
[616.33441162 15.03857517]
[616.96514893 28.25039101]
[631.94488525 29.03023529]
[646.92462158 29.81007957]
[661.91162109 30.43405724]
[676.90429688 30.90209961]
[691.89703369 31.37014198]
[697.23822021 17.20151520]
[706.89251709 5.53646612]
[719.81268311 -2.35966611]
[734.59716797 -5.63036823]
[749.64227295 -3.92085934]
[763.31610107 2.58342600]
[774.13531494 13.17695141]
[780.92645264 26.71061134]
[782.95269775 41.71637344]
[779.99438477 56.56652832]
[772.37237549 69.65023804]
[760.91339111 79.54827881]
[746.86053467 85.18699646]
[731.73803711 85.95473480]
[717.18634033 81.76821136]
[704.78387451 73.08155823]
[695.87603760 60.83703613]
[691.42895508 46.36283875]
[676.43627930 45.89479446]
[661.44354248 45.42675400]
[654.61572266 48.38072205]
[646.14477539 44.78979492]
[631.16503906 44.00994873]
[616.18530273 43.23010635]
[613.37768555 60.06181335]
[608.55676270 76.43202972]
[601.79296875 92.10085297]
[593.18511963 106.83864594]
[582.85919189 120.42935944]
[570.96618652 132.67373657]
[557.68017578 143.39222717]
[543.19561768 152.42761230]
[527.72460938 159.64729309]
[511.49368286 164.94529724]
[494.74053955 168.24372864]
[477.71057129 169.49404907]
[460.65322876 168.67768860]
[443.81842041 165.80633545]
[427.45285034 160.92181396]
[411.79629517 154.09544373]
[397.07827759 145.42698669]
[383.51449585 135.04322815]
[371.30383301 123.09608459]
[360.62536621 109.76039886]
[351.63574219 95.23139191]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 65]
[2 64]
[3 63]
[5 61]
[6 60]
[7 59]
[8 58]
[9 57]
[10 56]
[11 55]
[14 54]
[15 53]
[16 52]
[17 51]
[25 39]
[26 38]
[27 37]
[40 47]
[41 46]
[100 129]
[101 128]
[102 127]
[103 125]
[104 124]
[105 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
