%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAACAUUAACGAAAAUAACCCCACCCUACUAAACCCCAUUAAACGCCUGGCAGCCGGAAGxxxxxxxxxxCUACACAAUCAAAGACGCCCUCGGCUUACUUCUCUUCCUUCUCUCCUUAAUGACAUUAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-40.62989044 268.94595337]
[-50.87381363 259.86428833]
[-61.53543854 270.41558838]
[-72.19706726 280.96688843]
[-76.56331635 296.17367554]
[-91.05210876 299.62680054]
[-101.71373749 310.17807007]
[-112.37536621 320.72937012]
[-123.03698730 331.28067017]
[-127.40324402 346.48745728]
[-141.89202881 349.94058228]
[-152.55366516 360.49188232]
[-147.13067627 374.72250366]
[-147.97113037 389.92822266]
[-154.92942810 403.47451782]
[-166.79998779 413.01440430]
[-181.52616882 416.89508057]
[-196.55656433 414.44415283]
[-209.28707886 406.08630371]
[-217.51205444 393.26953125]
[-219.80648804 378.21444702]
[-215.77284241 363.52944946]
[-206.10998535 351.75875854]
[-192.49203491 344.94177246]
[-177.27841187 344.25952148]
[-163.10494995 349.83026123]
[-152.44332886 339.27896118]
[-148.83966064 324.82687378]
[-133.58827209 320.61904907]
[-122.92665100 310.06774902]
[-112.26502991 299.51644897]
[-101.60340118 288.96517944]
[-97.99974060 274.51309204]
[-82.74835205 270.30523682]
[-72.08673096 259.75396729]
[-61.42510223 249.20266724]
[-73.51057434 234.95770264]
[-84.34291077 219.73802185]
[-93.84385681 203.65354919]
[-101.94480896 186.82048035]
[-108.58724976 169.36035156]
[-113.72322083 151.39929199]
[-117.31560516 133.06700134]
[-119.33847809 114.49589539]
[-119.77722168 95.82009888]
[-118.62866974 77.17448425]
[-115.90111542 58.69372559]
[-111.61425781 40.51129532]
[-105.79905701 22.75850868]
[-98.49751282 5.56358337]
[-89.76236725 -10.94929409]
[-79.65669250 -26.66086197]
[-68.25348663 -41.45764542]
[-55.63509750 -55.23278046]
[-41.89266968 -67.88677979]
[-27.12545013 -79.32824707]
[-35.37773895 -91.85420990]
[-42.76129913 -97.34373474]
[-43.66825104 -104.72770691]
[-51.65816498 -117.42263794]
[-65.21224213 -127.60710144]
[-59.17794037 -143.45082092]
[-42.28293610 -142.03831482]
[-38.96323776 -125.41255951]
[-30.97332001 -112.71762848]
[-22.85177803 -100.10649872]
[-14.59948826 -87.58053589]
[-3.04464769 -94.16822815]
[8.88747025 -100.04501343]
[21.15317726 -105.18937683]
[33.70756531 -109.58247375]
[46.50467300 -113.20822906]
[59.49763870 -116.05336761]
[72.63890076 -118.10747528]
[85.88033295 -119.36302185]
[99.17346954 -119.81541443]
[112.46962738 -119.46299744]
[125.72013092 -118.30706787]
[138.87646484 -116.35184479]
[151.89045715 -113.60449219]
[164.71447754 -110.07507324]
[177.30154419 -105.77651215]
[189.60559082 -100.72453308]
[201.58155823 -94.93764496]
[213.18562317 -88.43703461]
[224.37525940 -81.24649811]
[235.10954285 -73.39236450]
[245.34913635 -64.90339661]
[255.05656433 -55.81065750]
[264.19628906 -46.14745712]
[272.73483276 -35.94916534]
[280.64096069 -25.25312042]
[293.25207520 -33.37466431]
[305.86322021 -41.49620438]
[313.27633667 -55.47319031]
[328.16595459 -55.85912323]
[340.77706909 -63.98066330]
[347.79257202 -78.80345154]
[364.15701294 -79.86940002]
[373.03613281 -66.08194733]
[365.29577637 -51.62445068]
[348.89862061 -51.36953735]
[336.28747559 -43.24799347]
[329.77639771 -29.85191727]
[313.98477173 -28.88507652]
[301.37362671 -20.76353455]
[288.76251221 -12.64199257]
[295.40823364 -0.67334121]
[301.29605103 11.68578720]
[306.40310669 24.38745499]
[310.70959473 37.38240051]
[314.19882202 50.62021255]
[316.85723877 64.04955292]
[318.67456055 77.61833954]
[319.64370728 91.27392578]
[319.76092529 104.96336365]
[319.02578735 118.63355255]
[317.44110107 132.23146057]
[315.01306152 145.70436096]
[311.75103760 158.99998474]
[307.66772461 172.06677246]
[302.77893066 184.85403442]
[297.10363770 197.31217957]
[290.66381836 209.39288330]
[283.48452759 221.04930115]
[275.59353638 232.23620605]
[267.02148438 242.91020203]
[257.80160522 253.02990723]
[247.96968079 262.55606079]
[237.56382751 271.45172119]
[226.62442017 279.68237305]
[215.19387817 287.21609497]
[203.31654358 294.02368164]
[191.03846741 300.07873535]
[178.40728760 305.35772705]
[165.47200012 309.84020996]
[152.28277588 313.50881958]
[138.89074707 316.34927368]
[125.34789276 318.35058594]
[111.70671082 319.50500488]
[98.02012634 319.80804443]
[84.34122467 319.25854492]
[70.72305298 317.85858154]
[57.21843719 315.61361694]
[43.87975693 312.53237915]
[30.75874519 308.62683105]
[17.90629959 303.91204834]
[5.37226439 298.40637207]
[-6.79474211 292.13116455]
[-18.54752922 285.11074829]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 36]
[3 35]
[4 34]
[6 32]
[7 31]
[8 30]
[9 29]
[11 27]
[12 26]
[56 67]
[57 66]
[59 65]
[60 64]
[92 107]
[93 106]
[94 105]
[96 103]
[97 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
