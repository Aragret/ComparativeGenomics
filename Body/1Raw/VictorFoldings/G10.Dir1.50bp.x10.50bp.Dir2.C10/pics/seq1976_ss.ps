%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUUACCCAAAUAAAGUAUAGGCGAUAGAAAUUGAAACCUGGCGCAAUAGAUAUAGUACCGCxxxxxxxxxxAUUCCAUCCACCCUCCUCUCCCUAGGAGGCCUGCCCCCGCUAACCGGCUUUUUGCCCAAAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[96.25502777 425.39105225]
[96.25502777 410.39105225]
[96.25502777 395.39105225]
[96.25502777 380.39105225]
[96.25502777 365.39105225]
[96.25502777 350.39105225]
[96.25502777 335.39105225]
[96.25502777 320.39105225]
[96.25502777 305.39105225]
[96.25502777 290.39105225]
[82.14367676 287.12991333]
[69.11098480 280.79492188]
[57.81742477 271.70330811]
[48.83615494 260.31222534]
[42.62395096 247.19555664]
[39.49797821 233.01509094]
[39.61958313 218.48715210]
[42.98598099 204.34635925]
[49.43022537 191.30851746]
[58.62948227 180.03436279]
[70.12120056 171.09611511]
[83.32637024 164.94836426]
[97.57869720 161.90504456]
[97.88667297 146.90820312]
[98.19464874 131.91136169]
[83.11295319 125.53170013]
[73.76342010 112.95296478]
[72.15834808 98.06886292]
[78.03787994 85.06837463]
[89.13040161 77.25812531]
[86.98181915 62.41279984]
[84.83324432 47.56747437]
[79.12857819 33.69459534]
[70.21242523 21.63216400]
[61.29627609 9.56973267]
[46.87127304 3.07128620]
[45.52809525 -11.76263237]
[36.61194611 -23.82506371]
[27.69579506 -35.88749695]
[13.77504635 -30.11702156]
[-1.11324561 -27.84742546]
[-16.10299301 -29.20634270]
[-30.32325554 -34.11045837]
[-42.94884491 -42.27059937]
[-53.24821091 -53.20877838]
[-60.62583160 -66.28620148]
[-64.65663147 -80.74056244]
[-65.11049652 -95.73049164]
[-61.96538162 -110.38450623]
[-55.40834808 -123.85169983]
[-45.82445145 -135.35115051]
[-54.74060440 -147.41357422]
[-63.65675354 -159.47601318]
[-78.28922272 -155.44422913]
[-93.38964844 -156.97444153]
[-106.91582489 -163.85971069]
[-117.03844452 -175.16886902]
[-122.38851166 -189.37243652]
[-122.24246216 -204.54949951]
[-116.62006378 -218.64747620]
[-106.28169250 -229.75973511]
[-92.62551880 -236.38345337]
[-77.49844360 -237.62280273]
[-62.94627380 -233.31018066]
[-50.93706512 -224.02882385]
[-43.09497070 -211.03398132]
[-40.48056793 -196.08308411]
[-43.44743347 -181.19812012]
[-51.59432220 -168.39216614]
[-42.67817307 -156.32972717]
[-33.76202011 -144.26730347]
[-19.95703316 -150.05613708]
[-5.15881062 -152.37403870]
[9.77311611 -151.08198547]
[23.97040367 -146.25074768]
[36.60638428 -138.15704346]
[46.94420624 -127.26770782]
[54.37979507 -114.21271515]
[58.47716522 -99.74879456]
[58.99395752 -84.71553040]
[55.89579391 -69.98662567]
[49.35852051 -56.41915131]
[39.75822449 -44.80364609]
[48.67437744 -32.74121475]
[57.59052658 -20.67878342]
[71.37779236 -15.04312325]
[73.35871124 0.65358168]
[82.27485657 12.71601295]
[91.19100952 24.77844429]
[92.62668610 9.84730816]
[106.65650940 4.54032803]
[117.61466217 14.78332233]
[113.26428986 29.13965225]
[126.09794617 21.37451744]
[138.93159485 13.60938263]
[151.76525879 5.84424686]
[164.59890747 -1.92088878]
[177.43255615 -9.68602371]
[180.96487427 -25.09051514]
[194.39939880 -33.41451645]
[209.76568604 -29.71954155]
[217.94717407 -16.19775581]
[214.08995056 -0.87139583]
[200.48242188 7.16668272]
[185.19769287 3.14762974]
[172.36404419 10.91276550]
[159.53039551 18.67790031]
[146.69673157 26.44303513]
[133.86308289 34.20817184]
[121.02942657 41.97330856]
[115.47210693 44.89523697]
[109.86215210 46.38650894]
[104.50457764 46.51781464]
[99.67856598 45.41889572]
[101.82714081 60.26422119]
[103.97572327 75.10954285]
[124.29682159 84.94277954]
[130.50810242 109.53157043]
[144.65541077 114.51689148]
[158.80273438 119.50221252]
[173.83508301 113.89794159]
[187.51446533 122.27970123]
[189.34724426 138.21772766]
[177.92744446 149.48571777]
[162.01536560 147.43984985]
[153.81741333 133.64953613]
[139.67008972 128.66421509]
[125.52277374 123.67888641]
[113.19149017 132.21934509]
[112.88351440 147.21618652]
[112.57553101 162.21302795]
[127.61769867 166.20083618]
[141.26795959 173.65528870]
[152.74127197 184.14292908]
[161.37892151 197.05601501]
[166.68635559 211.64770508]
[168.36146545 227.07527161]
[166.31178284 242.44876099]
[160.65962219 256.88235474]
[151.73472595 269.54534912]
[140.05506897 279.71005249]
[126.29678345 286.79351807]
[111.25502777 290.39105225]
[111.25502777 305.39105225]
[111.25502777 320.39105225]
[111.25502777 335.39105225]
[111.25502777 350.39105225]
[111.25502777 365.39105225]
[111.25502777 380.39105225]
[111.25502777 395.39105225]
[111.25502777 410.39105225]
[111.25502777 425.39105225]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[23 131]
[24 130]
[25 129]
[30 116]
[31 115]
[32 114]
[33 89]
[34 88]
[35 87]
[37 85]
[38 84]
[39 83]
[51 71]
[52 70]
[53 69]
[93 110]
[94 109]
[95 108]
[96 107]
[97 106]
[98 105]
[118 128]
[119 127]
[120 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
