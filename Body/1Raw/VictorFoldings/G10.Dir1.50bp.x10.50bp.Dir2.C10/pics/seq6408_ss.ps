%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAGUUCCCCUAAUAAUCGGUGCCCCCGAUAUGGCGUUUCCCCGCAUAAACAACAUAAGCUUxxxxxxxxxxAAUCCUAUAUAUCUUAAUGGCACAUGCAGCGCAAGUAGGUCUACAAGACGCUACUUCCCCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[67.01735687 262.67498779]
[67.01735687 247.67500305]
[67.01735687 232.67500305]
[67.01735687 217.67500305]
[67.01735687 202.67500305]
[67.01735687 187.67500305]
[67.01735687 172.67500305]
[67.01735687 157.67500305]
[67.01735687 142.67500305]
[67.01735687 127.67500305]
[88.41873169 94.09608459]
[81.40650177 80.83605194]
[74.39427185 67.57601166]
[61.10314941 58.99366760]
[61.99317551 44.12567902]
[54.98094559 30.86563873]
[61.59785843 44.32730484]
[60.27463913 59.26882553]
[51.39492798 71.35810852]
[37.53328705 77.09002686]
[22.70870972 74.80268097]
[11.21938896 65.15926361]
[6.39650059 50.95575333]
[9.63837624 36.31026840]
[20.00507736 25.46907234]
[34.48846817 21.57540512]
[19.89409637 25.04012108]
[5.29972267 28.50483704]
[-9.29465103 31.96955299]
[-23.88902473 35.43426895]
[-33.49633026 48.28258514]
[-49.53544617 48.63804626]
[-59.70253372 36.22797394]
[-56.19827271 20.57231331]
[-41.71083450 13.68074799]
[-27.35374069 20.83989525]
[-12.75936699 17.37517929]
[1.83500636 13.91046333]
[16.42938042 10.44574738]
[31.02375412 6.98103094]
[36.27668762 5.25842953]
[41.40954590 4.97305012]
[46.11164093 6.03152323]
[50.10048294 8.28030205]
[51.01199722 -6.69197750]
[51.92351151 -21.66425705]
[52.83502579 -36.63653564]
[53.74653625 -51.60881424]
[40.78232956 -44.06365967]
[26.72634697 -49.30096054]
[21.86026573 -63.48973465]
[29.74353218 -76.25116730]
[44.60968781 -78.25051880]
[55.58424759 -68.02575684]
[58.00580597 -82.82899475]
[60.42736435 -97.63224030]
[62.84891891 -112.43548584]
[48.44629288 -116.69783020]
[34.69146729 -122.73173523]
[21.80137634 -130.44204712]
[9.97931862 -139.70715332]
[-0.58825850 -150.38092041]
[-9.73468781 -162.29504395]
[-17.31571579 -175.26158142]
[-23.21178055 -189.07604980]
[-27.32989120 -203.52058411]
[-29.60510063 -218.36735535]
[-30.00152588 -233.38221741]
[-28.51291275 -248.32836914]
[-25.16273880 -262.97006226]
[-20.00384331 -277.07641602]
[-13.11758709 -290.42492676]
[-4.61257744 -302.80508423]
[5.37704849 -314.02160645]
[16.69374084 -323.89761353]
[29.15901947 -332.27737427]
[42.57629013 -339.02865601]
[56.73394012 -344.04507446]
[71.40868378 -347.24743652]
[86.36907959 -348.58526611]
[101.37918091 -348.03744507]
[116.20225525 -345.61264038]
[130.60452271 -341.34909058]
[144.35884094 -335.31402588]
[157.24827576 -327.60263062]
[169.06956482 -318.33654785]
[179.63624573 -307.66186523]
[188.78166199 -295.74697876]
[196.36160278 -282.77981567]
[202.25650024 -268.96484375]
[206.37339783 -254.51995850]
[208.64735413 -239.67300415]
[209.04252625 -224.65811157]
[207.55264282 -209.71208191]
[204.20124817 -195.07066345]
[199.04115295 -180.96475220]
[192.15377808 -167.61682129]
[183.64773560 -155.23738098]
[173.65716553 -144.02169800]
[162.33963013 -134.14662170]
[149.87365723 -125.76793671]
[136.45581055 -119.01776123]
[122.29774475 -114.00255585]
[107.62272644 -110.80142975]
[92.66221619 -109.46485901]
[77.65216827 -110.01393127]
[75.23060608 -95.21068573]
[72.80905151 -80.40744019]
[70.38749695 -65.60419464]
[68.71881866 -50.69729996]
[67.80730438 -35.72502136]
[66.89579010 -20.75274277]
[65.98427582 -5.78046417]
[65.07276154 9.19181538]
[68.24098206 23.85341072]
[75.25321198 37.11344910]
[88.04277802 44.74734497]
[87.65431213 60.56378174]
[94.66654205 73.82382202]
[101.67877197 87.08386230]
[112.75788116 97.19589996]
[126.60148621 102.97124481]
[140.44508362 108.74658966]
[154.28869629 114.52192688]
[171.23472595 115.04014587]
[175.42788696 131.46737671]
[160.80342102 140.04417419]
[148.51335144 128.36553955]
[134.66975403 122.59019470]
[120.82614136 116.81484985]
[106.98253632 111.03950500]
[100.74124146 115.19837952]
[110.12129974 126.90369415]
[119.50135803 138.60900879]
[128.88142395 150.31433105]
[142.14471436 157.32041931]
[145.96740723 171.82513428]
[137.87998962 184.45817566]
[123.10706329 187.05833435]
[111.19223785 177.94587708]
[109.83280182 163.00733948]
[102.64141846 149.84359741]
[95.45003510 136.67987061]
[88.25865173 123.51612854]
[82.01735687 127.67500305]
[82.01735687 142.67500305]
[82.01735687 157.67500305]
[82.01735687 172.67500305]
[82.01735687 187.67500305]
[82.01735687 202.67500305]
[82.01735687 217.67500305]
[82.01735687 232.67500305]
[82.01735687 247.67500305]
[82.01735687 262.67498779]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[11 120]
[12 119]
[13 118]
[15 116]
[16 115]
[26 40]
[27 39]
[28 38]
[29 37]
[30 36]
[44 114]
[45 113]
[46 112]
[47 111]
[48 110]
[54 109]
[55 108]
[56 107]
[57 106]
[121 131]
[122 130]
[123 129]
[124 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
