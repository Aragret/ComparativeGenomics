%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUAUUUUAUAUCUUCUUCGAAACCACACUUAUCCCCACCUUGGCUAUCAUCACCCGAUGAGGCxxxxxxxxxxCUAGACCUCAACUACCUAACCAACAAACUUAAAAUAAAAUCCCCACUAUGCACAUUUUAUUUCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[148.46786499 387.86050415]
[148.46786499 372.86050415]
[148.46786499 357.86050415]
[148.46786499 342.86050415]
[148.46786499 327.86050415]
[148.46786499 312.86050415]
[148.46786499 297.86050415]
[148.46786499 282.86050415]
[148.46786499 267.86050415]
[148.46786499 252.86050415]
[146.39984131 238.00373840]
[142.30328369 223.57397461]
[138.20672607 209.14421082]
[133.12286377 195.03199768]
[127.07601166 181.30482483]
[121.02915955 167.57763672]
[114.98230743 153.85044861]
[108.93545532 140.12326050]
[102.88860321 126.39608002]
[96.84175873 112.66889954]
[95.01348877 127.55706024]
[88.95055389 141.27714539]
[79.17294312 152.65248108]
[66.51920319 160.70747375]
[52.07456589 164.75129700]
[37.07785416 164.43714905]
[22.81524086 159.79194641]
[10.50992966 151.21411133]
[1.21726942 139.43928528]
[-4.26576996 125.47733307]
[-5.46894503 110.52566528]
[-2.28906679 95.86659241]
[5.00114727 82.75733185]
[15.77646351 72.32217407]
[29.11275482 65.45606995]
[43.86625290 62.74788666]
[58.77165222 64.42988586]
[72.55061340 70.35781097]
[84.02140045 80.02326965]
[92.20156860 92.60020447]
[91.60897064 77.61191559]
[77.65567017 73.95669556]
[65.31561279 66.51905060]
[55.58816147 55.91182709]
[49.25812912 43.00413513]
[46.83245850 28.85013199]
[48.49962997 14.60293770]
[54.11505890 1.42068422]
[63.21358490 -9.62762260]
[75.04798126 -17.64879608]
[88.65032196 -21.99766541]
[88.35396576 -36.99473953]
[88.05760956 -51.99180984]
[87.76125336 -66.98888397]
[79.75280762 -80.63349152]
[87.23714447 -93.51114655]
[86.94078827 -108.50821686]
[82.41842651 -122.81025696]
[74.03872681 -135.25134277]
[65.65901947 -147.69242859]
[57.27931976 -160.13351440]
[48.89962006 -172.57460022]
[33.93540955 -179.28312683]
[32.53245926 -195.62216187]
[46.13400269 -204.78349304]
[60.74794006 -197.34272766]
[61.34070587 -180.95429993]
[69.72040558 -168.51321411]
[78.10010529 -156.07212830]
[86.47981262 -143.63104248]
[94.85951233 -131.18995667]
[94.10076141 -146.17076111]
[96.31896210 -161.00582886]
[101.42653656 -175.10948181]
[109.22183228 -187.92483521]
[119.39706421 -198.94592285]
[131.55050659 -207.73762512]
[145.20230103 -213.95281982]
[159.81344604 -217.34609985]
[174.80706787 -217.78350830]
[189.59117126 -215.24777222]
[203.58207703 -209.83900452]
[216.22737122 -201.77076721]
[227.02778625 -191.36158752]
[235.55691528 -179.02246094]
[241.47799683 -165.24057007]
[244.55726624 -150.56002808]
[244.67312622 -135.56047058]
[241.82102966 -120.83412170]
[236.11355591 -106.96239471]
[227.77606201 -94.49298096]
[217.13774109 -83.91820526]
[204.61859131 -75.65557098]
[190.71292114 -70.03131104]
[175.96974182 -67.26748657]
[160.97116089 -67.47322083]
[146.30932617 -70.64038086]
[132.56315613 -76.64392853]
[120.27535248 -85.24683380]
[109.93107605 -96.10942078]
[101.93785858 -108.80458069]
[102.23421478 -93.80750275]
[110.22146606 -81.23558807]
[102.75832367 -67.28524017]
[103.05467987 -52.28816605]
[103.35103607 -37.29109573]
[103.64739990 -22.29402351]
[118.66130829 -17.91838837]
[131.60896301 -9.11333084]
[141.22047424 3.27204037]
[146.54870605 18.03676605]
[147.06259155 33.74448776]
[142.70002747 48.86317444]
[133.87512207 61.91455460]
[121.43890381 71.61865234]
[106.59725952 77.01931763]
[107.18985748 92.00760651]
[110.56893921 106.62204742]
[116.61579132 120.34922791]
[122.66264343 134.07641602]
[128.70948792 147.80360413]
[134.75634766 161.53077698]
[140.80319214 175.25796509]
[146.85005188 188.98515320]
[152.56918335 175.11822510]
[165.78596497 168.02481079]
[180.50320435 170.92356873]
[190.04286194 182.49919128]
[190.07624817 197.49916077]
[180.58824158 209.11714172]
[165.88404846 212.08140564]
[152.63648987 205.04765320]
[156.73304749 219.47741699]
[160.82960510 233.90718079]
[165.28820801 219.58514404]
[174.80986023 207.99472046]
[187.99400330 200.84078979]
[202.90129089 199.17568970]
[217.33895874 203.24430847]
[229.18330383 212.44821167]
[236.69206238 225.43351746]
[238.76075745 240.29019165]
[235.08509827 254.83285522]
[226.20573425 266.92239380]
[213.42878723 274.78048706]
[198.63366699 277.25125122]
[183.99667358 273.97125244]
[171.67083740 265.42294312]
[163.46786499 252.86050415]
[163.46786499 267.86050415]
[163.46786499 282.86050415]
[163.46786499 297.86050415]
[163.46786499 312.86050415]
[163.46786499 327.86050415]
[163.46786499 342.86050415]
[163.46786499 357.86050415]
[163.46786499 372.86050415]
[163.46786499 387.86050415]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 158]
[2 157]
[3 156]
[4 155]
[5 154]
[6 153]
[7 152]
[8 151]
[9 150]
[10 149]
[11 134]
[12 133]
[13 132]
[14 124]
[15 123]
[16 122]
[17 121]
[18 120]
[19 119]
[20 118]
[40 117]
[41 116]
[51 107]
[52 106]
[53 105]
[54 104]
[56 102]
[57 101]
[58 71]
[59 70]
[60 69]
[61 68]
[62 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
