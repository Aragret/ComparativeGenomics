%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUGUUCAACGAUUAAAGUCCUACGUGAUCUGAGUUCAGACCGGAGUAAUCCAGGUCGGUUUxxxxxxxxxxAACCUAUUCCCCCGAGCAAUCUCAAUUACAAUAUAUACACCAACAAACAAUGUUCAACCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[157.58689880 395.39562988]
[157.58689880 380.39562988]
[157.58689880 365.39562988]
[157.58689880 350.39562988]
[157.58689880 335.39562988]
[157.58689880 320.39562988]
[157.58689880 305.39562988]
[157.58689880 290.39562988]
[157.58689880 275.39562988]
[157.58689880 260.39562988]
[152.98133850 246.12017822]
[144.21513367 233.94833374]
[135.44892883 221.77650452]
[120.77239990 218.67817688]
[107.83434296 226.26808167]
[94.89628601 233.85800171]
[89.03031921 240.94616699]
[81.60917664 241.46800232]
[68.51602173 248.78710938]
[69.49684143 264.01867676]
[63.76383972 278.16418457]
[52.45530701 288.41503906]
[37.81656647 292.73590088]
[22.75414085 290.26889038]
[10.25869465 281.50381470]
[2.81120324 268.18099976]
[1.89037287 252.94567871]
[7.67903471 238.82286072]
[19.02784538 228.61662292]
[33.68349075 224.35342407]
[48.73608398 226.87974548]
[61.19691849 235.69395447]
[74.29006958 228.37484741]
[87.30638123 220.91993713]
[100.24443817 213.33003235]
[113.18249512 205.74012756]
[107.41210175 189.33267212]
[111.89704132 173.48562622]
[123.98146057 163.70451355]
[121.49633789 148.91180420]
[119.01122284 134.11909485]
[116.52610016 119.32639313]
[104.67977142 125.94592285]
[90.62451935 125.64006042]
[78.24519348 118.00038147]
[71.21099854 104.71202087]
[71.89452362 89.20333099]
[61.01570129 78.87612915]
[50.13687515 68.54891968]
[39.25805283 58.22171783]
[28.27238655 48.00823975]
[17.18107033 37.90958786]
[6.08975554 27.81093979]
[-10.03857708 24.84295654]
[-15.27670288 9.30287552]
[-4.23608637 -2.82299852]
[11.72563171 0.93939245]
[16.18840599 16.71962357]
[27.27972031 26.81827354]
[38.37103653 36.91692352]
[45.48029327 39.10874939]
[49.58525467 47.34289169]
[60.46408081 57.67009735]
[71.34290314 67.99729919]
[82.22173309 78.32450867]
[95.94178772 72.26149750]
[95.62973022 57.26473999]
[95.31767273 42.26798630]
[95.00561523 27.27123260]
[81.27988434 20.49902725]
[72.28292847 8.11704922]
[70.08218384 -7.02941322]
[75.18337250 -21.45981407]
[86.41427612 -31.85815239]
[101.19410706 -35.83496475]
[116.12657928 -32.47641373]
[127.78031921 -22.55426407]
[133.47737122 -8.34855652]
[131.90859985 6.87634325]
[123.43450928 19.62186241]
[110.00237274 26.95917702]
[110.31443024 41.95593262]
[110.62648010 56.95268631]
[110.93853760 71.94944000]
[120.31227875 81.06613159]
[124.28092957 92.44633484]
[134.26365662 81.25056458]
[144.24638367 70.05480194]
[140.01142883 55.22008514]
[144.49087524 40.45736313]
[156.25537109 30.47735596]
[171.55087280 28.46465492]
[185.49667358 35.06150436]
[193.64268494 48.16286850]
[193.38958740 63.58815765]
[184.81809998 76.41521454]
[170.66339111 82.55096436]
[155.44215393 80.03752899]
[145.45942688 91.23329163]
[135.47669983 102.42905426]
[131.31880188 116.84127045]
[133.80392456 131.63398743]
[136.28904724 146.42668152]
[138.77416992 161.21939087]
[153.78930664 167.43147278]
[162.39495850 182.07072449]
[160.35533142 199.66621399]
[147.62075806 213.01029968]
[156.38696289 225.18212891]
[165.15318298 237.35397339]
[164.25502014 222.38087463]
[166.23997498 207.51278687]
[171.03457642 193.29971313]
[178.46148682 180.26739502]
[188.24595642 168.89796448]
[200.02603149 159.61196899]
[213.36596680 152.75294495]
[227.77226257 148.57461548]
[242.71202087 147.23152161]
[257.63256836 148.77337646]
[271.98196411 153.14314270]
[285.22940063 160.17915344]
[296.88482666 169.62115479]
[306.51705933 181.11984253]
[313.76980591 194.24986267]
[318.37475586 208.52552795]
[320.16159058 223.41871643]
[319.06417847 238.37852478]
[315.12313843 252.85153198]
[308.48425293 266.30236816]
[299.39306641 278.23345947]
[288.18597412 288.20343018]
[275.27746582 295.84347534]
[261.14508057 300.87100220]
[246.31161499 303.09997559]
[231.32579041 302.44799805]
[216.74195862 298.93914795]
[203.09962463 292.70324707]
[190.90342712 283.97097778]
[180.60453796 273.06533813]
[172.58689880 260.39562988]
[172.58689880 275.39562988]
[172.58689880 290.39562988]
[172.58689880 305.39562988]
[172.58689880 320.39562988]
[172.58689880 335.39562988]
[172.58689880 350.39562988]
[172.58689880 365.39562988]
[172.58689880 380.39562988]
[172.58689880 395.39562988]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 110]
[12 109]
[13 108]
[14 36]
[15 35]
[16 34]
[18 33]
[19 32]
[39 104]
[40 103]
[41 102]
[42 101]
[47 65]
[48 64]
[49 63]
[50 62]
[51 60]
[52 59]
[53 58]
[66 84]
[67 83]
[68 82]
[69 81]
[86 100]
[87 99]
[88 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
