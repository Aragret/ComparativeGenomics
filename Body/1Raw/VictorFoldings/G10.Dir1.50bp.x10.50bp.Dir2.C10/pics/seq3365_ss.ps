%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGAAAAAUUCUAGGCUAUAUACAACUACGCAAAGGCCCCAACGUUGUAGGCCCCUACGGGCxxxxxxxxxxACCAGUCUUGUAAACCGGAGAUGAAAACCUUUUUCCAAGGACAAAUCAGAGAAAAAGUCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[184.35850525 374.91619873]
[184.04644775 359.91943359]
[183.73439026 344.92266846]
[183.42233276 329.92593384]
[183.11027527 314.92916870]
[182.79821777 299.93243408]
[182.48616028 284.93566895]
[182.17410278 269.93890381]
[181.86204529 254.94215393]
[177.85430908 240.48747253]
[170.39939880 227.47116089]
[162.94448853 214.45484924]
[155.48957825 201.43853760]
[148.03466797 188.42222595]
[140.57975769 175.40592957]
[133.12484741 162.38961792]
[125.13493347 149.69468689]
[116.62384033 137.34310913]
[108.11275482 124.99153900]
[92.99495697 125.32435608]
[80.19722748 117.26974487]
[73.95818329 103.49539185]
[59.14043045 101.16428375]
[44.32266998 98.83318329]
[29.50491333 96.50207520]
[24.51564217 98.43255615]
[19.77094650 98.23195648]
[16.05503273 96.36282349]
[13.84738541 93.53549957]
[-0.79611635 90.28466797]
[-15.43961811 87.03384399]
[-30.08311844 83.78302002]
[-44.72661972 80.53219604]
[-59.37012100 77.28136444]
[-67.25554657 90.20803833]
[-78.91259003 99.87199402]
[-93.07678986 105.22495270]
[-108.21171570 105.68627930]
[-122.67563629 101.20592499]
[-134.89962769 92.26988220]
[-143.55770874 79.84747314]
[-147.71073914 65.28618622]
[-146.90820312 50.16551590]
[-141.23715210 36.12564087]
[-131.31275940 24.68950653]
[-118.21154785 17.09761620]
[-103.35462189 14.17348003]
[-88.35356140 16.23428726]
[-74.83557129 23.05649757]
[-64.26697540 33.90008926]
[-57.79417419 47.58882904]
[-56.11929703 62.63786697]
[-41.47579575 65.88869476]
[-26.83229256 69.13951874]
[-12.18879223 72.39034271]
[2.45470929 75.64116669]
[17.09821129 78.89199829]
[31.83601761 81.68431854]
[46.65377426 84.01542664]
[61.47153473 86.34652710]
[76.28929138 88.67762756]
[85.54454803 78.05840302]
[98.95449066 73.74546051]
[102.66065216 59.21052933]
[98.57295227 43.92650604]
[109.21498108 33.50554657]
[112.92114258 18.97061157]
[116.62730408 4.43567467]
[103.22075653 -2.43543530]
[91.67963409 -12.11790943]
[82.58284760 -24.12607956]
[76.38667297 -37.85762024]
[73.40192413 -52.62376404]
[73.77829742 -67.68384552]
[77.49693298 -82.28246307]
[84.37129211 -95.68734741]
[94.05655670 -107.22612000]
[106.06693268 -116.31999969]
[119.79997253 -122.51284027]
[134.56684875 -125.49401855]
[149.62683105 -125.11399078]
[164.22454834 -121.39182281]
[177.62776184 -114.51421356]
[189.16418457 -104.82614899]
[198.25515747 -92.81356812]
[204.44467163 -79.07902527]
[207.42227173 -64.31143951]
[207.03858948 -49.25154114]
[203.31288147 -34.65473175]
[196.43203735 -21.25317955]
[186.74118042 -9.71910286]
[174.72639465 -0.63104355]
[160.99035645 5.55514336]
[146.22204590 8.52916145]
[131.16224670 8.14183617]
[127.45607758 22.67677307]
[123.74991608 37.21170807]
[128.10270691 51.45609283]
[117.19558716 62.91668701]
[113.48942566 77.45162201]
[123.52321625 88.29307556]
[126.12197876 102.83475494]
[120.46432495 116.48044586]
[128.97541809 128.83201599]
[137.48651123 141.18359375]
[141.61250305 142.95494080]
[144.62261963 145.69541931]
[146.34695435 148.92164612]
[146.79507446 152.14549255]
[146.14115906 154.93470764]
[153.59606934 167.95101929]
[161.05097961 180.96731567]
[168.50588989 193.98362732]
[175.96080017 206.99993896]
[183.41571045 220.01625061]
[190.87062073 233.03256226]
[191.25683594 218.03753662]
[195.15457153 203.55279541]
[202.34570312 190.38891602]
[212.42781067 179.28256226]
[224.83668518 170.85523987]
[238.87794495 165.57856750]
[253.76579285 163.74780273]
[268.66714478 165.46540833]
[282.74804688 170.63528442]
[295.22061157 178.96809387]
[305.38677979 189.99754333]
[312.67770386 203.10641479]
[316.68536377 217.56112671]
[317.18548584 232.55278015]
[314.15008545 247.24244690]
[307.74899292 260.80807495]
[298.34048462 272.49053955]
[286.45101929 281.63604736]
[272.74594116 287.73284912]
[257.99221802 290.43975830]
[243.01544189 289.60528564]
[228.65374756 285.27612305]
[215.71081543 277.69451904]
[204.91093445 267.28479004]
[196.85881042 254.63009644]
[197.17086792 269.62686157]
[197.48291016 284.62359619]
[197.79496765 299.62036133]
[198.10702515 314.61712646]
[198.41908264 329.61386108]
[198.73114014 344.61062622]
[199.04319763 359.60739136]
[199.35525513 374.60412598]
[201.94625854 393.81185913]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 116]
[11 115]
[12 114]
[13 113]
[14 112]
[15 111]
[16 110]
[17 105]
[18 104]
[19 103]
[22 61]
[23 60]
[24 59]
[25 58]
[29 57]
[30 56]
[31 55]
[32 54]
[33 53]
[34 52]
[63 100]
[64 99]
[66 97]
[67 96]
[68 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
