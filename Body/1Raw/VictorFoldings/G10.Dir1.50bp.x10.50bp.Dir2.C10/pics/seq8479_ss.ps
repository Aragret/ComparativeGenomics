%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAACCACCCAACUAUCUAUAAACCUAGCCAUGGCCAUCCCCUUAUGAGCGGGCACAGUGAxxxxxxxxxxAUUACUACCACUGACAUGACUUUCCAAAAAACACAUAAUUUGAAUCAACACAACCACCCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 306.38156128]
[92.50000000 291.38156128]
[92.50000000 276.38156128]
[92.50000000 261.38156128]
[92.50000000 246.38156128]
[92.50000000 231.38156128]
[92.50000000 216.38156128]
[92.50000000 201.38156128]
[92.50000000 186.38156128]
[92.50000000 171.38156128]
[75.46844482 167.45205688]
[59.89173126 159.52229309]
[46.69364929 148.06256104]
[36.65690613 133.75247192]
[22.75434875 139.38442993]
[8.85179234 145.01638794]
[11.01208782 159.93605042]
[9.53839874 174.93910217]
[4.51640368 189.15328979]
[-3.76192617 201.75221252]
[-14.81529903 212.00337219]
[-28.00108528 219.31079102]
[-42.55268097 223.24963379]
[-57.62407684 223.59089661]
[-72.33904266 220.31472778]
[-85.84206390 213.61160278]
[-97.34809875 203.87124634]
[-106.18820190 191.65994263]
[-111.84841156 177.68763733]
[-113.99966431 162.76664734]
[-112.51687622 147.76449585]
[-107.48626709 133.55335999]
[-99.20030212 120.95946503]
[-88.14071655 110.71500397]
[-74.95050049 103.41557312]
[-60.39651871 99.48555756]
[-45.32492065 99.15343475]
[-30.61194420 102.43852234]
[-17.11298752 109.14982605]
[-5.61285925 118.89715576]
[3.21983576 131.11383057]
[17.12239265 125.48186493]
[31.02494812 119.84991455]
[28.59528351 107.27620697]
[28.43879890 94.47087097]
[30.56047630 81.84154510]
[34.89277267 69.79030609]
[41.29776764 58.70079041]
[29.99876213 48.83506775]
[18.69975853 38.96934509]
[7.29873705 29.22169304]
[-4.20306635 19.59316635]
[-20.44090271 17.29866600]
[-26.32093620 1.98993564]
[-15.79429531 -10.58471584]
[0.31011617 -7.48956490]
[5.42545986 8.09136200]
[16.92726326 17.71988869]
[24.12154388 19.61408234]
[28.56548119 27.67033958]
[39.86448669 37.53606415]
[51.16349030 47.40178680]
[66.52313995 36.51081467]
[84.18666077 29.98917770]
[102.93846130 28.28569031]
[105.11530304 13.44448471]
[107.29213715 -1.39672077]
[109.46897888 -16.23792648]
[111.64581299 -31.07913208]
[97.99414825 -37.56938934]
[86.86315155 -47.79642487]
[79.24257660 -60.85086441]
[75.81005859 -75.57190704]
[76.87079620 -90.65057373]
[82.33047485 -104.74608612]
[91.70362854 -116.60506439]
[104.15679169 -125.17302704]
[118.58264923 -129.68811035]
[133.69845581 -129.74885559]
[148.16014099 -125.34983063]
[160.68174744 -116.88221741]
[170.14990234 -105.09893799]
[175.72267151 -91.04776001]
[176.90454102 -75.97810364]
[173.59042358 -61.22994995]
[166.07501221 -48.11469650]
[155.02655029 -37.79854202]
[141.42749023 -31.19879341]
[126.48701477 -28.90229416]
[124.31018066 -14.06108952]
[122.13334656 0.78011620]
[119.95650482 15.62132168]
[117.77967072 30.46252632]
[136.97975159 38.48516464]
[153.07156372 51.67830658]
[164.70256042 68.93303680]
[170.89509583 88.79904175]
[185.87481689 88.01919556]
[200.85452271 87.23934937]
[206.69004822 83.91455078]
[212.45278931 84.06311035]
[216.47103882 86.75183105]
[231.47021484 86.59579468]
[246.46940613 86.43975830]
[255.08241272 83.20432281]
[261.78149414 86.43975830]
[276.78067017 86.59579468]
[291.77984619 86.75183105]
[299.52807617 73.49058533]
[312.87680054 65.89406586]
[328.23529053 66.00569153]
[341.47219849 73.79544830]
[349.02682495 87.16791534]
[348.86706543 102.52597809]
[341.03585815 115.73838806]
[327.63977051 123.25107574]
[312.28228760 123.04316711]
[299.09448242 115.17058563]
[291.62380981 101.75102234]
[276.62463379 101.59498596]
[261.62545776 101.43894958]
[246.62544250 101.43894958]
[231.62625122 101.59498596]
[216.62707520 101.75102234]
[201.63436890 102.21906281]
[186.65466309 102.99890900]
[171.67494202 103.77875519]
[170.92910767 110.98352051]
[169.46092224 118.07643127]
[167.28532410 124.98525238]
[164.42446899 131.63961792]
[160.90750122 137.97174072]
[156.77023315 143.91716003]
[152.05480957 149.41532898]
[146.80923462 154.41021729]
[141.08695984 158.85098267]
[134.94622803 162.69241333]
[128.44960022 165.89535522]
[121.66323853 168.42720032]
[114.65625000 170.26216125]
[107.50000000 171.38156128]
[107.50000000 186.38156128]
[107.50000000 201.38156128]
[107.50000000 216.38156128]
[107.50000000 231.38156128]
[107.50000000 246.38156128]
[107.50000000 261.38156128]
[107.50000000 276.38156128]
[107.50000000 291.38156128]
[107.50000000 306.38156128]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[14 43]
[15 42]
[16 41]
[48 62]
[49 61]
[50 60]
[51 58]
[52 57]
[65 93]
[66 92]
[67 91]
[68 90]
[69 89]
[97 127]
[98 126]
[99 125]
[102 124]
[103 123]
[104 122]
[106 121]
[107 120]
[108 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
