%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACCAACACACUAACCAUAUACCAAUGAUGGCGCGAUGUAACACGAGAAAGCACAUACCAxxxxxxxxxxACAAUUAUAUUACUACCACUGACAUGACUUUCCAAAAAACACAUAAUUUGAAUCAACACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[113.62806702 272.74682617]
[113.62806702 257.74682617]
[113.62806702 242.74681091]
[113.62806702 227.74681091]
[113.62806702 212.74681091]
[113.62806702 197.74681091]
[113.62806702 182.74681091]
[113.62806702 167.74681091]
[113.62806702 152.74681091]
[113.62806702 137.74681091]
[96.84561157 138.48046875]
[81.89291382 132.36685181]
[71.31411743 121.02419281]
[57.78992462 127.51235199]
[44.26573563 134.00051880]
[35.17005157 146.94575500]
[20.34825706 145.47482300]
[6.82406616 151.96298218]
[8.60696030 166.99960327]
[5.40843153 181.79988098]
[-2.42456865 194.75837708]
[-14.04237461 204.46946716]
[-28.18477440 209.87976074]
[-43.31770325 210.40238953]
[-57.79965973 205.98066711]
[-70.05974579 197.09420776]
[-78.76807404 184.70697021]
[-82.98004150 170.16262817]
[-82.23876190 155.03883362]
[-76.62463379 140.97610474]
[-66.74665070 129.49986267]
[-53.67628860 121.85496521]
[-38.83133316 118.87067413]
[-23.82205009 120.87069702]
[-10.27653217 127.63809967]
[0.33590111 138.43879700]
[13.86009121 131.95062256]
[21.98843575 119.46946716]
[37.77756882 120.47633362]
[51.30176163 113.98816681]
[64.82595062 107.50000000]
[64.82595062 92.50000000]
[51.30176163 86.01183319]
[38.66999054 94.74876404]
[23.36079407 95.98329163]
[9.49226570 89.38332367]
[0.79497230 76.72423553]
[-0.39155900 61.41123962]
[6.25184298 47.56346893]
[18.93813705 38.90589905]
[34.25477219 37.76737213]
[48.08165359 44.45414734]
[56.69941330 57.16751480]
[57.78992462 72.48764801]
[71.31411743 78.97580719]
[105.80313873 62.59903336]
[138.03576660 87.20050812]
[143.52279663 73.24011993]
[149.00982666 59.27972794]
[154.49685669 45.31933594]
[159.98388672 31.35894775]
[155.55047607 19.20169640]
[160.45674133 7.66273975]
[171.55390930 2.74743795]
[177.33018494 -11.09577942]
[183.10646057 -24.93899727]
[170.33958435 -32.87643814]
[159.01136780 -42.75914383]
[149.41526794 -54.33113480]
[141.79981995 -67.29266357]
[136.36230469 -81.30799103]
[133.24354553 -96.01409912]
[132.52433777 -111.03005219]
[134.22331238 -125.96691132]
[138.29646301 -140.43775940]
[144.63825989 -154.06779480]
[153.08447266 -166.50393677]
[163.41630554 -177.42407227]
[175.36613464 -186.54534912]
[188.62445068 -193.63150024]
[202.84780884 -198.49897766]
[217.66778564 -201.02168274]
[232.70053101 -201.13430786]
[247.55665588 -198.83390808]
[261.85134888 -194.18008423]
[275.21432495 -187.29336548]
[287.29946899 -178.35215759]
[297.79376221 -167.58802795]
[306.42535400 -155.27981567]
[312.97064209 -141.74633789]
[317.26013184 -127.33813477]
[319.18270874 -112.42840576]
[318.68856812 -97.40336609]
[315.79046631 -82.65218353]
[310.56353760 -68.55696106]
[303.14315796 -55.48278809]
[293.72149658 -43.76832962]
[282.54263306 -33.71701050]
[269.89608765 -25.58918381]
[256.10949707 -19.59538460]
[241.53991699 -15.89086151]
[226.56474304 -14.57157421]
[211.57188416 -15.67169380]
[196.94967651 -19.16272545]
[191.17340088 -5.31950760]
[185.39712524 8.52371025]
[188.60198975 25.74952888]
[173.94427490 36.84597778]
[168.45724487 50.80636978]
[162.97021484 64.76676178]
[157.48318481 78.72714996]
[151.99615479 92.68753815]
[158.20155334 106.34378052]
[172.32635498 111.39253235]
[186.45115662 116.44129181]
[200.57597351 121.49005127]
[212.23222351 111.48867798]
[227.33045959 108.67114258]
[241.80935669 113.79533386]
[251.77413940 125.48287964]
[254.54434204 140.58988953]
[249.37478638 155.05264282]
[237.65605164 164.98074341]
[222.54045105 167.70356750]
[208.09396362 162.48870850]
[198.20265198 150.73892212]
[195.52720642 135.61485291]
[181.40240479 130.56610107]
[167.27760315 125.51734161]
[153.15280151 120.46858215]
[147.02162170 124.78813934]
[156.99679565 135.99063110]
[166.97196960 147.19313049]
[179.31272888 155.71989441]
[179.38101196 170.71974182]
[167.11842346 179.35853577]
[153.01701355 174.24479675]
[149.14201355 159.75473022]
[141.95063782 146.59098816]
[134.75924683 133.42726135]
[128.62806702 137.74681091]
[128.62806702 152.74681091]
[128.62806702 167.74681091]
[128.62806702 182.74681091]
[128.62806702 197.74681091]
[128.62806702 212.74681091]
[128.62806702 227.74681091]
[128.62806702 242.74681091]
[128.62806702 257.74682617]
[128.62806702 272.74682617]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[13 41]
[14 40]
[15 39]
[17 37]
[18 36]
[42 55]
[43 54]
[57 112]
[58 111]
[59 110]
[60 109]
[61 108]
[64 106]
[65 105]
[66 104]
[113 130]
[114 129]
[115 128]
[116 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
