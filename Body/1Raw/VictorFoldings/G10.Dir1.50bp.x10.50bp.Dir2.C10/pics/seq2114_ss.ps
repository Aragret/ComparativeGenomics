%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAUUAACUAGAAAUAACUUUGCAAGGAGAGCCAAAGCUAAGACCCCCGAAACCAGACGAGxxxxxxxxxxCUAUUGAUGAGGGUCUUACUCUUUUAGUAUAAAUAGUACCGUUAACUUCCAAUUAACUAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[102.54073334 485.97375488]
[102.54073334 470.97375488]
[102.54073334 455.97375488]
[102.54073334 440.97375488]
[102.54073334 425.97375488]
[102.54073334 410.97375488]
[102.54073334 395.97375488]
[102.54073334 380.97375488]
[102.54073334 365.97375488]
[102.54073334 350.97375488]
[87.00869751 346.66113281]
[73.29298401 338.16580200]
[62.49434662 326.16040039]
[55.48196411 311.59967041]
[52.82352829 295.64437866]
[54.73927307 279.56900024]
[61.08374023 264.65975952]
[71.35681915 252.11175537]
[84.74314880 242.93319702]
[100.17681122 237.86439514]
[99.55283356 222.87738037]
[98.92885590 207.89036560]
[88.73608398 193.63879395]
[97.32153320 177.38241577]
[96.38590240 162.41162109]
[95.45027161 147.44082642]
[94.51464844 132.47004700]
[82.05772400 127.61281586]
[72.55867767 118.20347595]
[67.58347321 105.79320526]
[67.95228577 92.42790222]
[73.60432434 80.31089020]
[83.60782623 71.43972778]
[79.30023956 57.07154465]
[74.99265289 42.70335770]
[70.68507385 28.33517456]
[66.37748718 13.96699047]
[62.06990051 -0.40119335]
[51.19107819 -10.72839832]
[36.61837387 -14.28316021]
[22.04567146 -17.83792305]
[6.46534777 -12.72073841]
[-5.57434845 -23.85526848]
[-1.68801105 -39.78726196]
[14.12642956 -44.12725067]
[25.60043335 -32.41062546]
[40.17313385 -28.85586357]
[54.74583817 -25.30110168]
[66.04484558 -35.16682434]
[64.48725891 -50.08573532]
[62.92967987 -65.00464630]
[61.37210083 -79.92356110]
[59.81451797 -94.84247589]
[58.25693893 -109.76138306]
[56.69935608 -124.68029785]
[41.69480515 -125.66589355]
[27.07268333 -129.17324829]
[13.25370312 -135.10147095]
[0.63546216 -143.27998352]
[-10.41898727 -153.47346497]
[-19.59158516 -165.38864136]
[-26.61842155 -178.68269348]
[-31.29731560 -192.97309875]
[-33.49364853 -207.84872437]
[-33.14422607 -222.88154602]
[-30.25910568 -237.63906860]
[-24.92129517 -251.69665527]
[-17.28437233 -264.64984131]
[-7.56806898 -276.12597656]
[3.94805789 -285.79483032]
[16.93266678 -293.37823486]
[31.01216316 -298.65798950]
[45.78145599 -301.48217773]
[60.81559753 -301.76956177]
[75.68202972 -299.51184082]
[89.95301056 -294.77401733]
[103.21794128 -287.69238281]
[115.09516144 -278.47070312]
[125.24294281 -267.37426758]
[133.36930847 -254.72238159]
[139.24044800 -240.87904358]
[142.68742371 -226.24258423]
[143.61109924 -211.23408508]
[141.98484802 -196.28540039]
[137.85549927 -181.82661438]
[131.34184265 -168.27374268]
[122.63129425 -156.01672363]
[111.97447968 -145.40823364]
[99.67800140 -136.75347900]
[86.09567261 -130.30148315]
[71.61827087 -126.23787689]
[73.17584991 -111.31896973]
[74.73342896 -96.40005493]
[76.29101562 -81.48114014]
[77.84859467 -66.56223297]
[79.40617371 -51.64331818]
[80.96375275 -36.72440338]
[85.93621826 -18.11332703]
[76.43808746 -4.70877790]
[80.74567413 9.65940571]
[85.05325317 24.02758980]
[89.36083984 38.39577484]
[93.66842651 52.76395798]
[97.97600555 67.13214111]
[112.90057373 69.70201874]
[125.09668732 78.67984772]
[131.98490906 92.16685486]
[146.98410034 92.01081848]
[161.98329163 91.85478210]
[176.98246765 91.69874573]
[189.19007874 81.28942108]
[204.91166687 84.48493958]
[212.08697510 98.83396149]
[205.21173096 113.32914734]
[189.56002808 116.85103607]
[177.13850403 106.69793701]
[162.13932800 106.85397339]
[147.14013672 107.01000977]
[132.14094543 107.16604614]
[124.11727905 122.42207336]
[109.48543549 131.53440857]
[110.42106628 146.50520325]
[111.35669708 161.47599792]
[112.29232025 176.44679260]
[121.45351410 185.58605957]
[121.89073944 198.11714172]
[113.91587067 207.26638794]
[114.53984833 222.25340271]
[115.16382599 237.24041748]
[128.79382324 240.20046997]
[141.29998779 246.35328674]
[151.94738770 255.33198547]
[160.11163330 266.60375977]
[165.31544495 279.50146484]
[167.25659180 293.26324463]
[165.82540894 307.07736206]
[161.11100769 320.13018799]
[153.39572144 331.65411377]
[143.13825989 340.97262573]
[130.94633484 347.54013062]
[117.54073334 350.97375488]
[117.54073334 365.97375488]
[117.54073334 380.97375488]
[117.54073334 395.97375488]
[117.54073334 410.97375488]
[117.54073334 425.97375488]
[117.54073334 440.97375488]
[117.54073334 455.97375488]
[117.54073334 470.97375488]
[117.54073334 485.97375488]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[20 129]
[21 128]
[22 127]
[24 124]
[25 123]
[26 122]
[27 121]
[33 104]
[34 103]
[35 102]
[36 101]
[37 100]
[38 99]
[39 48]
[40 47]
[41 46]
[49 97]
[50 96]
[51 95]
[52 94]
[53 93]
[54 92]
[55 91]
[107 119]
[108 118]
[109 117]
[110 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
