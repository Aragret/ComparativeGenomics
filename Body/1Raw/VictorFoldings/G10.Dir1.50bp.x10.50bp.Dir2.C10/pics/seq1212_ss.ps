%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUCACCCCCUCCCCAAUAAAGCUAAAACUCACCUGAGUUGUAAAAAACUCCAGUUGACACAxxxxxxxxxxAGAAUUAAUUCCCCUAAAAAUCUUUGAAAUAGGGCCCGUAUUUACCCUAUAGCACCCCCUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[12.45457745 270.56591797]
[5.08833790 283.63259888]
[-2.27790141 296.69931030]
[-9.64414120 309.76599121]
[-17.01037979 322.83270264]
[-24.37661934 335.89938354]
[-31.74285889 348.96606445]
[-39.10910034 362.03277588]
[-46.47533798 375.09945679]
[-53.84157944 388.16616821]
[-53.13225174 404.54995728]
[-67.10979462 413.12670898]
[-81.39530182 405.07336426]
[-81.29307556 388.67453003]
[-66.90827179 380.79992676]
[-59.54203415 367.73321533]
[-52.17579269 354.66653442]
[-44.80955505 341.59982300]
[-37.44331360 328.53314209]
[-30.07707596 315.46646118]
[-22.71083641 302.39974976]
[-15.34459591 289.33306885]
[-7.97835684 276.26635742]
[-0.61211729 263.19967651]
[-17.26301003 251.67832947]
[-32.60593033 238.46514893]
[-46.46973801 223.70750427]
[-58.69979858 207.56999207]
[-69.15969086 190.23263550]
[-77.73274994 171.88880920]
[-84.32334137 152.74311829]
[-88.85795593 133.00912476]
[-91.28601837 112.90692902]
[-91.58044434 92.66078186]
[-89.73794556 72.49649048]
[-85.77906799 52.63897705]
[-79.74798584 33.30973816]
[-71.71195984 14.72437763]
[-61.76063156 -2.90980554]
[-74.09191895 -11.45026493]
[-86.42320251 -19.99072266]
[-102.17346191 -21.48731995]
[-108.23102570 -35.09449387]
[-120.56230927 -43.63495255]
[-132.89360046 -52.17541122]
[-145.31190491 -60.58882141]
[-157.81594849 -68.87429810]
[-170.31997681 -77.15976715]
[-182.82402039 -85.44524384]
[-198.26086426 -82.05709839]
[-211.52691650 -90.64705658]
[-214.75166321 -106.11885071]
[-206.02192688 -119.29334259]
[-190.51690674 -122.35433960]
[-177.43544006 -113.48580170]
[-174.53854370 -97.94927979]
[-162.03450012 -89.66380310]
[-149.53047180 -81.37833405]
[-137.02644348 -73.09285736]
[-129.66799927 -72.01322937]
[-124.35313416 -64.50669861]
[-112.02185059 -55.96623611]
[-99.69056702 -47.42577744]
[-84.82232666 -46.54005051]
[-77.88274384 -32.32200623]
[-65.55145264 -23.78154755]
[-53.22017288 -15.24108982]
[-45.70506668 -24.60723877]
[-37.61834335 -33.48453903]
[-28.99172592 -41.83816528]
[-19.85906029 -49.63534164]
[-10.25617504 -56.84548569]
[-0.22074142 -63.44030380]
[10.20786858 -69.39392853]
[20.98874474 -74.68300629]
[32.07958984 -79.28677368]
[43.43689346 -83.18718719]
[55.01610184 -86.36893463]
[66.77178955 -88.81953430]
[78.65782928 -90.52937317]
[90.62760162 -91.49174500]
[102.63414001 -91.70287323]
[114.63034058 -91.16192627]
[126.56915283 -89.87103271]
[138.40373230 -87.83525848]
[150.08764648 -85.06257629]
[161.57505798 -81.56388092]
[172.82090759 -77.35288239]
[183.78106689 -72.44611359]
[194.41255188 -66.86282349]
[204.67362976 -60.62490463]
[214.52407837 -53.75683594]
[223.92523193 -46.28556442]
[232.84020996 -38.24039841]
[241.23403931 -29.65290070]
[249.07380676 -20.55675888]
[256.32873535 -10.98765945]
[262.97033691 -0.98314285]
[268.97262573 9.41754246]
[274.31201172 20.17359161]
[278.96752930 31.24280930]
[282.92095947 42.58177185]
[286.15676880 54.14598846]
[288.66226196 65.89009857]
[290.42758179 77.76802063]
[291.44586182 89.73316956]
[291.71307373 101.73858643]
[291.22817993 113.73719025]
[289.99307251 125.68190002]
[288.01260376 137.52584839]
[302.59634399 141.03501892]
[317.18011475 144.54418945]
[331.76385498 148.05335999]
[346.34759521 151.56253052]
[360.93136597 155.07168579]
[371.45111084 143.88105774]
[386.16143799 139.46495056]
[401.10531616 143.01124573]
[412.26290894 153.56604004]
[416.63290405 168.29013062]
[413.03976440 183.22280884]
[402.45004272 194.34727478]
[387.71234131 198.67108154]
[372.79098511 195.03115845]
[361.69976807 184.40663147]
[357.42218018 169.65544128]
[342.83843994 166.14627075]
[328.25469971 162.63710022]
[313.67092896 159.12794495]
[299.08718872 155.61877441]
[284.50344849 152.10960388]
[279.95190430 166.13804626]
[274.33547974 179.77511597]
[267.68740845 192.94010925]
[260.04702759 205.55509949]
[251.45953369 217.54547119]
[241.97576904 228.84024048]
[231.65185547 239.37258911]
[220.54885864 249.08018494]
[208.73249817 257.90557861]
[196.27272034 265.79653931]
[183.24320984 272.70639038]
[169.72111511 278.59420776]
[155.78643799 283.42520142]
[141.52162170 287.17074585]
[127.01110840 289.80865479]
[112.34075165 291.32339478]
[97.59736633 291.70590210]
[82.86819458 290.95401001]
[68.24040985 289.07211304]
[53.80056000 286.07131958]
[39.63410187 281.96948242]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 24]
[2 23]
[3 22]
[4 21]
[5 20]
[6 19]
[7 18]
[8 17]
[9 16]
[10 15]
[39 67]
[40 66]
[41 65]
[43 63]
[44 62]
[45 61]
[46 59]
[47 58]
[48 57]
[49 56]
[110 131]
[111 130]
[112 129]
[113 128]
[114 127]
[115 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
