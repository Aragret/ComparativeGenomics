%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGGUAGCAUAAUCACUUGUUCCUUAAAUAGGGACCUGUAUGAAUGGCUCCACGAGGGUUCAxxxxxxxxxxCAACCGCUAUGUAUUUCGUACAUUACUGCCAGCCACCAUGAAUAUUGUACGGUACCAUAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[122.98492432 422.56918335]
[125.57592010 403.36145020]
[125.88797760 388.36471558]
[126.20003510 373.36795044]
[126.51209259 358.37118530]
[126.82415009 343.37445068]
[127.13620758 328.37768555]
[127.44825745 313.38095093]
[127.76031494 298.38418579]
[128.07237244 283.38742065]
[128.38442993 268.39068604]
[127.13755798 253.44259644]
[124.34523010 238.70478821]
[121.55290222 223.96697998]
[109.13804626 215.81794739]
[106.09628296 200.91148376]
[114.72792053 187.94488525]
[111.93559265 173.20709229]
[109.14326477 158.46928406]
[99.17196655 147.40481567]
[104.20505524 132.40553284]
[101.41272736 117.66771698]
[89.33274078 108.77536774]
[74.43083954 110.48806000]
[64.61445618 122.58253479]
[49.47740936 124.10716248]
[38.00766754 114.67420959]
[23.10576630 116.38690186]
[8.20386314 118.09958649]
[-6.69803905 119.81227875]
[-21.59994125 121.52497101]
[-36.50184250 123.23765564]
[-47.56256485 134.85832214]
[-63.53097916 133.31260681]
[-72.15748596 119.78622437]
[-66.82456970 104.65547180]
[-51.62318420 99.52737427]
[-38.21453476 108.33575439]
[-23.31263161 106.62306213]
[-8.41072845 104.91037750]
[6.49117374 103.19768524]
[21.39307594 101.48499298]
[36.29497910 99.77230835]
[45.32564926 87.98322296]
[60.41389847 86.03402710]
[72.71814728 95.58615875]
[87.62004852 93.87346649]
[99.31967163 84.48630524]
[104.22122192 70.30974579]
[109.12277222 56.13319016]
[104.18748474 44.17088318]
[108.60949707 32.43782425]
[119.49259186 27.06515121]
[124.68801117 12.99363136]
[129.88342285 -1.07788813]
[135.07884216 -15.14940739]
[140.27426147 -29.22092628]
[136.71882629 -47.25807571]
[150.57492065 -57.98227310]
[155.47647095 -72.15882874]
[142.54226685 -88.32431030]
[144.48539734 -110.53247070]
[162.40411377 -126.32360840]
[162.40411377 -141.32360840]
[162.24807739 -156.32279968]
[161.93601990 -171.31954956]
[161.62396240 -186.31629944]
[161.31190491 -201.31306458]
[147.25744629 -207.17752075]
[136.80807495 -218.25590515]
[131.77420044 -232.62879944]
[133.02798462 -247.80601501]
[140.35220337 -261.15802002]
[152.47787476 -270.37145996]
[167.30416870 -273.85012817]
[182.26232910 -270.99124146]
[194.76077271 -262.29016113]
[202.63406372 -249.25439453]
[204.51811218 -234.14247131]
[200.08650208 -219.57261658]
[190.10700989 -208.06915283]
[176.30867004 -201.62512207]
[176.62072754 -186.62835693]
[176.93278503 -171.63160706]
[177.24482727 -156.63485718]
[180.54978943 -149.96980286]
[177.40411377 -141.32360840]
[177.40411377 -126.32360840]
[191.06036377 -120.11820221]
[202.35935974 -129.98393250]
[213.65837097 -139.84965515]
[224.95736694 -149.71537781]
[236.25637817 -159.58110046]
[238.77055359 -175.42591858]
[252.79661560 -183.21368408]
[267.57495117 -176.97027588]
[271.76892090 -161.48510742]
[262.16122437 -148.63708496]
[246.12210083 -148.28208923]
[234.82308960 -138.41636658]
[223.52409363 -128.55064392]
[212.22508240 -118.68492126]
[200.92608643 -108.81919861]
[202.66932678 -92.11585999]
[196.15390015 -77.54261780]
[183.88522339 -68.68304443]
[169.65303040 -67.25727844]
[164.75148010 -53.08072281]
[169.76301575 -42.02668762]
[165.74563599 -30.14899445]
[154.34577942 -24.02551079]
[149.15036011 -9.95399189]
[143.95494080 4.11752748]
[138.75952148 18.18904686]
[133.56411743 32.26056671]
[137.48277283 49.33815765]
[123.29933167 61.03474045]
[118.39778137 75.21129608]
[113.49623108 89.38785553]
[116.15053558 114.87539673]
[118.94285583 129.61320496]
[129.11389160 141.73181152]
[123.88107300 155.67695618]
[126.67340088 170.41476440]
[129.46572876 185.15257263]
[142.24232483 194.06301880]
[144.86419678 209.04902649]
[136.29071045 221.17465210]
[139.08303833 235.91246033]
[141.87536621 250.65026855]
[148.88514709 237.38893127]
[161.51271057 229.29298401]
[176.48945618 228.45800781]
[189.93869019 235.10015869]
[198.37911987 247.50012207]
[199.62596130 262.44821167]
[193.35649109 276.07516479]
[181.19352722 284.85366821]
[166.28541565 286.51144409]
[152.49107361 280.61938477]
[143.38117981 268.70272827]
[143.06912231 283.69949341]
[142.75706482 298.69622803]
[142.44500732 313.69299316]
[142.13296509 328.68975830]
[141.82090759 343.68649292]
[141.50885010 358.68325806]
[141.19679260 373.68002319]
[140.88473511 388.67675781]
[140.57267761 403.67352295]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 142]
[11 141]
[12 130]
[13 129]
[14 128]
[17 125]
[18 124]
[19 123]
[21 121]
[22 120]
[23 47]
[24 46]
[27 43]
[28 42]
[29 41]
[30 40]
[31 39]
[32 38]
[48 119]
[49 118]
[50 117]
[53 115]
[54 114]
[55 113]
[56 112]
[57 111]
[59 108]
[60 107]
[63 88]
[64 87]
[65 85]
[66 84]
[67 83]
[68 82]
[89 103]
[90 102]
[91 101]
[92 100]
[93 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
