%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGACCAACGGAACAAGUUACCCUAGGGAUAACAGCGCAAUCCUAUUCUAGAGUCCAUAUCAACxxxxxxxxxxCUGCCAUCAUGACCCUUGGCCAUAAUAUGAUUUAUCUCCACACUAGCAGAGACCAACCGAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.34954071 107.34645844]
[92.65354156 92.34954071]
[92.95755005 77.35261536]
[93.26155090 62.35570145]
[93.56555176 47.35877991]
[93.86956024 32.36186218]
[94.17356110 17.36494255]
[94.47756958 2.36802363]
[94.78157043 -12.62889576]
[95.08557892 -27.62581444]
[95.38957977 -42.62273407]
[80.42031860 -43.62426376]
[65.51387024 -45.32116318]
[50.70250320 -47.70975113]
[36.01831055 -50.78485489]
[21.49308968 -54.53981781]
[7.15829706 -58.96650696]
[-6.95501804 -64.05532837]
[-20.81628990 -69.79527283]
[-34.39550018 -76.17390442]
[-47.66323471 -83.17739868]
[-60.59076309 -90.79060364]
[-73.15008545 -98.99701691]
[-85.31400299 -107.77886963]
[-97.05616760 -117.11714935]
[-108.35115051 -126.99162292]
[-119.17448425 -137.38090515]
[-129.50273132 -148.26249695]
[-139.31353760 -159.61282349]
[-148.58563232 -171.40731812]
[-157.29893494 -183.62043762]
[-165.43460083 -196.22570801]
[-172.97497559 -209.19584656]
[-179.90374756 -222.50276184]
[-186.20591736 -236.11761475]
[-191.86781311 -250.01095581]
[-196.87718201 -264.15267944]
[-201.22319031 -278.51211548]
[-204.89640808 -293.05822754]
[-207.88888550 -307.75949097]
[-210.19413757 -322.58404541]
[-211.80718994 -337.49981689]
[-212.72451782 -352.47445679]
[-212.94415283 -367.47558594]
[-212.46562195 -382.47067261]
[-211.28996277 -397.42727661]
[-209.41970825 -412.31295776]
[-206.85891724 -427.09552002]
[-203.61312866 -441.74295044]
[-199.68937683 -456.22348022]
[-195.09617615 -470.50579834]
[-189.84344482 -484.55892944]
[-183.94259644 -498.35244751]
[-177.40637207 -511.85653687]
[-170.24894714 -525.04187012]
[-162.48580933 -537.87988281]
[-154.13378906 -550.34289551]
[-145.21098328 -562.40374756]
[-135.73669434 -574.03649902]
[-125.73143768 -585.21575928]
[-115.21690369 -595.91748047]
[-104.21585846 -606.11840820]
[-92.75212097 -615.79644775]
[-80.85051727 -624.93066406]
[-68.53683472 -633.50122070]
[-55.83773804 -641.48962402]
[-42.78072739 -648.87860107]
[-29.39408493 -655.65203857]
[-15.70680046 -661.79534912]
[-1.74851859 -667.29516602]
[12.45053005 -672.13964844]
[26.85959244 -676.31823730]
[41.44746399 -679.82189941]
[56.18254852 -682.64312744]
[71.03292847 -684.77569580]
[85.96645355 -686.21502686]
[100.95076752 -686.95806885]
[115.95343018 -687.00311279]
[130.94194031 -686.35009766]
[145.88383484 -685.00042725]
[160.74676514 -682.95709229]
[175.49851990 -680.22442627]
[190.10717773 -676.80841064]
[204.54106140 -672.71643066]
[218.76895142 -667.95733643]
[232.76000977 -662.54138184]
[246.48394775 -656.48040771]
[259.91101074 -649.78747559]
[273.01217651 -642.47711182]
[285.75900269 -634.56512451]
[298.12393188 -626.06860352]
[310.08020020 -617.00604248]
[321.60183716 -607.39703369]
[332.66394043 -597.26232910]
[343.24255371 -586.62396240]
[353.31475830 -575.50500488]
[362.85873413 -563.92938232]
[371.85382080 -551.92230225]
[380.28054810 -539.50970459]
[388.12063599 -526.71850586]
[395.35711670 -513.57641602]
[401.97430420 -500.11181641]
[407.95791626 -486.35397339]
[413.29492188 -472.33264160]
[417.97384644 -458.07818604]
[421.98446655 -443.62145996]
[425.31814575 -428.99380493]
[427.96768188 -414.22689819]
[429.92730713 -399.35269165]
[431.19274902 -384.40344238]
[431.76132202 -369.41146851]
[431.63180542 -354.40930176]
[430.80441284 -339.42941284]
[429.28097534 -324.50424194]
[427.06478882 -309.66610718]
[424.16064453 -294.94714355]
[420.57485962 -280.37924194]
[416.31515503 -265.99392700]
[411.39080811 -251.82238770]
[405.81243896 -237.89530945]
[399.59216309 -224.24284363]
[392.74340820 -210.89456177]
[385.28106689 -197.87936401]
[377.22125244 -185.22546387]
[368.58145142 -172.96025085]
[359.38034058 -161.11029053]
[349.63790894 -149.70123291]
[339.37518311 -138.75781250]
[328.61444092 -128.30372620]
[317.37896729 -118.36159515]
[305.69308472 -108.95297241]
[293.58212280 -100.09822083]
[281.07232666 -91.81653595]
[268.19073486 -84.12583160]
[254.96530151 -77.04278564]
[241.42463684 -70.58271790]
[227.59809875 -64.75963593]
[213.51559448 -59.58614731]
[199.20764160 -55.07345200]
[184.70523071 -51.23132706]
[170.03976440 -48.06808853]
[155.24302673 -45.59059525]
[140.34703064 -43.80421066]
[125.38404846 -42.71279907]
[110.38649750 -42.31872940]
[110.08249664 -27.32180977]
[109.77848816 -12.32489109]
[109.47448730 2.67202783]
[109.17048645 17.66894722]
[108.86647797 32.66586685]
[108.56247711 47.66278458]
[108.25846863 62.65970230]
[107.95446777 77.65662384]
[107.65045929 92.65354156]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 154]
[3 153]
[4 152]
[5 151]
[6 150]
[7 149]
[8 148]
[9 147]
[10 146]
[11 145]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
