%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUUUACCCAAAUAAAGUAUAGGCGAUAGAAAUUGAAACCUGGCGCAAUAGAUAUAGUACCxxxxxxxxxxAUAGUUUAAACAAAACGAAUGAUUUCGACUCAUUAAAUUAUGAUAAUCAUAUUUACCAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[109.52536011 257.49234009]
[109.52536011 242.49232483]
[109.52536011 227.49232483]
[109.52536011 212.49232483]
[109.52536011 197.49232483]
[109.52536011 182.49232483]
[109.52536011 167.49232483]
[109.52536011 152.49232483]
[109.52536011 137.49232483]
[109.52536011 122.49232483]
[95.40055847 117.44357300]
[85.89219666 129.04490662]
[76.38384247 140.64625549]
[66.87548065 152.24758911]
[64.75001526 168.50842285]
[49.50328445 174.54737854]
[36.81980896 164.15211487]
[39.74726868 148.01638794]
[55.27413940 142.73924255]
[64.78250122 131.13789368]
[74.29085541 119.53655243]
[83.79921722 107.93521118]
[81.34844208 100.84693146]
[67.17180634 105.74826813]
[62.27069473 91.57155609]
[76.44689178 86.67037201]
[73.99611664 79.58209229]
[59.35261154 76.33126831]
[44.70911026 73.08044434]
[33.38854599 79.34931183]
[21.22731400 76.29588318]
[14.64715290 66.09741211]
[0.07445055 62.54265213]
[-14.49825191 58.98788834]
[-29.73892403 63.23435974]
[-40.27002335 52.70130539]
[-54.84272766 49.14654541]
[-69.41542816 45.59178162]
[-79.97013855 56.74945450]
[-94.69419861 61.11954498]
[-109.62690735 57.52651978]
[-120.75144196 46.93688583]
[-125.07535553 32.19919968]
[-121.43553925 17.27783012]
[-110.81108856 6.18654490]
[-96.05992126 1.90884590]
[-81.15003204 5.59541321]
[-70.09210968 16.25457764]
[-65.86066437 31.01907921]
[-51.28796387 34.57384109]
[-36.71525955 38.12860107]
[-22.51692772 33.62787247]
[-10.94349003 44.41518784]
[3.62921238 47.96994781]
[18.20191574 51.52471161]
[34.72039032 45.68177414]
[47.95993805 58.43694305]
[62.60343933 61.68776703]
[77.24694061 64.93859100]
[91.61511993 60.63100815]
[102.05493927 49.86020279]
[112.49475098 39.08939362]
[116.25363159 30.69161415]
[123.26555634 28.20595169]
[133.92718506 17.65466309]
[138.29344177 2.44787359]
[152.78222656 -1.00525534]
[138.01661682 1.63609993]
[123.42652893 -1.84661543]
[111.44591522 -10.87240601]
[104.07341003 -23.93556786]
[102.53891754 -38.85687256]
[107.09842682 -53.14710999]
[116.99129486 -64.42235565]
[130.56718445 -70.80162811]
[145.56134033 -71.22074127]
[159.47236633 -65.60976410]
[169.97962952 -54.90474319]
[175.33026123 -40.89151001]
[174.63166809 -25.90778542]
[168.00125122 -12.45431328]
[181.09440613 -19.77341843]
[194.18756104 -27.09252548]
[207.28071594 -34.41162872]
[220.37387085 -41.73073578]
[233.46702576 -49.04984283]
[246.56016541 -56.36894608]
[259.65332031 -63.68805313]
[272.74649048 -71.00715637]
[271.34954834 -85.10536957]
[275.43081665 -98.62670135]
[284.33966064 -109.53043365]
[296.69955444 -116.18414307]
[310.62060547 -117.60808563]
[323.98843384 -113.61931610]
[334.78555298 -104.85443878]
[348.02813721 -111.89957428]
[361.27075195 -118.94470978]
[374.51333618 -125.98984528]
[382.73666382 -140.17817688]
[399.13311768 -139.88012695]
[406.83538818 -125.40232849]
[397.92007446 -111.63827515]
[381.55847168 -112.74726105]
[368.31588745 -105.70212555]
[355.07327271 -98.65699005]
[341.83068848 -91.61185455]
[342.78439331 -75.69046021]
[336.69149780 -60.88734818]
[324.71997070 -50.17286682]
[309.22274780 -45.72069168]
[293.27532959 -48.46696854]
[280.06558228 -57.91400528]
[266.97244263 -50.59489822]
[253.87927246 -43.27579117]
[240.78611755 -35.95668793]
[227.69296265 -28.63758087]
[214.59980774 -21.31847572]
[201.50666809 -13.99937057]
[188.41351318 -6.68026447]
[175.32035828 0.63884103]
[163.33352661 9.65637112]
[159.72985840 24.10846138]
[144.47846985 28.31628799]
[133.81684875 38.86758041]
[123.26555634 49.52920532]
[112.82574463 60.30001450]
[102.38593292 71.07082367]
[116.71153259 66.62365723]
[129.71444702 59.14541245]
[144.55445862 56.96046829]
[159.16096497 60.37369537]
[171.49591064 68.90884399]
[179.83824158 81.37502289]
[183.02395630 96.03282928]
[180.60853577 110.83707428]
[172.92901611 123.72214508]
[161.05690002 132.89018250]
[146.64871216 137.06201172]
[131.71673584 135.65606689]
[124.52536011 122.49232483]
[124.52536011 137.49232483]
[124.52536011 152.49232483]
[124.52536011 167.49232483]
[124.52536011 182.49232483]
[124.52536011 197.49232483]
[124.52536011 212.49232483]
[124.52536011 227.49232483]
[124.52536011 242.49232483]
[124.52536011 257.49234009]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 22]
[12 21]
[13 20]
[14 19]
[27 59]
[28 58]
[29 57]
[32 55]
[33 54]
[34 53]
[36 51]
[37 50]
[38 49]
[60 128]
[61 127]
[62 126]
[64 125]
[65 124]
[67 122]
[81 121]
[82 120]
[83 119]
[84 118]
[85 117]
[86 116]
[87 115]
[88 114]
[89 113]
[96 107]
[97 106]
[98 105]
[99 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
