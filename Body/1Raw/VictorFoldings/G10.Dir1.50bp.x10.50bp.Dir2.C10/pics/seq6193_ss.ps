%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAAGAGGCCUAACCCCUGUCUUUAGAUUUACAGUCCAAUGCUUCACUCAGCCAUUUUACCxxxxxxxxxxCGAUGUAACACGAGAAAGCACAUACCAAGGCCACCACACACCACCUGUCCAAAAAGGCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[99.24517059 283.88757324]
[99.24517059 268.88757324]
[99.24517059 253.88757324]
[99.24517059 238.88757324]
[99.24517059 223.88757324]
[99.24517059 208.88757324]
[99.24517059 193.88757324]
[99.24517059 178.88757324]
[99.24517059 163.88757324]
[99.24517059 148.88757324]
[80.39746094 143.24382019]
[65.82864380 130.89218140]
[57.68459702 114.25257874]
[56.91998291 96.31742859]
[63.20561981 80.11679840]
[75.05873108 68.20661163]
[68.15173340 54.89145660]
[61.24473190 41.57630157]
[54.33773422 28.26114464]
[47.43073654 14.94598961]
[32.75729370 17.91250229]
[17.85091782 16.81137276]
[3.81649280 11.73683262]
[-8.30913162 3.07716537]
[-17.63374329 -8.51498127]
[-23.47541237 -22.17177010]
[-38.33845901 -20.14943695]
[-53.20150757 -18.12710190]
[-68.06455231 -16.10476685]
[-73.80624390 -1.85946858]
[-85.91123199 7.59383345]
[-101.12332916 9.71224689]
[-115.35055542 3.92593098]
[-124.76586914 -8.20862579]
[-126.83659363 -23.42728806]
[-121.00570679 -37.63631439]
[-108.84169769 -47.01354218]
[-93.61662292 -49.03654861]
[-79.42594147 -43.16115570]
[-70.08688354 -30.96781349]
[-55.22383881 -32.99015045]
[-40.36079407 -35.01248169]
[-25.49774742 -37.03481674]
[-24.01011276 -49.52722931]
[-19.69734764 -61.34558105]
[-12.78931236 -71.85997009]
[-3.65419650 -80.51000214]
[7.22111273 -86.83464050]
[19.25697708 -90.49679565]
[18.63299942 -105.48381042]
[18.00902176 -120.47082520]
[17.38504601 -135.45783997]
[16.76106834 -150.44485474]
[7.79199076 -159.77275085]
[7.61555099 -172.31021118]
[15.77903080 -181.29156494]
[15.46697426 -196.28833008]
[15.15491867 -211.28507996]
[5.24787331 -226.77153015]
[14.22070980 -241.82106018]
[2.07594061 -233.01739502]
[-12.43467140 -236.81767273]
[-18.70504189 -250.44419861]
[-12.15203857 -263.93710327]
[2.43462420 -267.43414307]
[14.39297104 -258.37985229]
[15.32859993 -273.35064697]
[16.26422882 -288.32144165]
[17.19985580 -303.29223633]
[3.40431118 -309.62051392]
[-7.17080164 -320.50775146]
[-13.09528446 -334.48144531]
[-13.56789970 -349.65185547]
[-8.52472973 -363.96725464]
[1.35217786 -375.49163818]
[14.72705269 -382.66641235]
[29.79105186 -384.52120972]
[44.50689316 -380.80523682]
[56.88438416 -372.02105713]
[65.24956512 -359.35659790]
[68.47111511 -344.52468872]
[66.11334991 -329.53115845]
[58.49513245 -316.40380859]
[46.64676666 -306.91799927]
[32.17064667 -302.35659790]
[31.23501968 -287.38580322]
[30.29939079 -272.41500854]
[29.36376190 -257.44421387]
[29.20772552 -242.44503784]
[37.91552353 -233.99035645]
[38.52145386 -221.46630859]
[30.15167236 -211.59713745]
[30.46372795 -196.60037231]
[30.77578354 -181.60362244]
[40.66986847 -167.14309692]
[31.74808311 -151.06883240]
[32.37206268 -136.08181763]
[32.99604034 -121.09480286]
[33.62001801 -106.10778809]
[34.24399185 -91.12077332]
[50.25111008 -87.12754059]
[64.34777832 -78.51946259]
[75.23742676 -66.07466888]
[81.91438293 -50.92480087]
[83.75675201 -34.45211029]
[80.58432770 -18.16334152]
[72.67611694 -3.55191684]
[60.74589157 8.03899097]
[67.65289307 21.35414696]
[74.55989075 34.66930389]
[81.46688843 47.98445892]
[88.37388611 61.29961395]
[103.49427795 58.32316971]
[119.16130066 61.24056244]
[133.08815002 70.01826477]
[143.10093689 83.74214172]
[147.47415161 100.70175934]
[145.21705627 118.60061646]
[158.99943542 124.52058411]
[172.78181458 130.44053650]
[188.15521240 125.85377502]
[201.24363708 135.13128662]
[202.00680542 151.15618896]
[189.85925293 161.63551331]
[174.11955261 158.53045654]
[166.86184692 144.22293091]
[153.07946777 138.30296326]
[139.29708862 132.38299561]
[133.03410339 136.50914001]
[142.29110718 148.31202698]
[151.54809570 160.11491394]
[160.80509949 171.91778564]
[172.73834229 181.00611877]
[172.22599792 195.99736023]
[159.70011902 204.24977112]
[145.72348022 198.80430603]
[142.08229065 184.25265503]
[134.89091492 171.08891296]
[127.69953156 157.92517090]
[120.50814819 144.76142883]
[114.24517059 148.88757324]
[114.24517059 163.88757324]
[114.24517059 178.88757324]
[114.24517059 193.88757324]
[114.24517059 208.88757324]
[114.24517059 223.88757324]
[114.24517059 238.88757324]
[114.24517059 253.88757324]
[114.24517059 268.88757324]
[114.24517059 283.88757324]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[16 112]
[17 111]
[18 110]
[19 109]
[20 108]
[26 43]
[27 42]
[28 41]
[29 40]
[49 100]
[50 99]
[51 98]
[52 97]
[53 96]
[56 94]
[57 93]
[58 92]
[60 89]
[66 88]
[67 87]
[68 86]
[69 85]
[118 128]
[119 127]
[120 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
