%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACCUCAACAGUUAAAUCAACAAAACUGCUCGCCAGAACACUACGAGCCACAGCUUAAAAxxxxxxxxxxGCUUCAUAUCCCUCUAGAGGAGCCUGUUCUGUAAUCGAUAAACCCCGAUCAACCUCACCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[151.39010620 423.83209229]
[151.39010620 408.83209229]
[151.39010620 393.83209229]
[151.39010620 378.83209229]
[151.39010620 363.83209229]
[151.39010620 348.83209229]
[151.39010620 333.83209229]
[151.39010620 318.83209229]
[151.39010620 303.83209229]
[151.39010620 288.83209229]
[141.12124634 284.43841553]
[132.81549072 277.51217651]
[127.04206085 268.78948975]
[124.11948395 259.11532593]
[124.10215759 249.36344910]
[126.79104614 240.35830688]
[131.76637268 232.80537415]
[138.43833923 227.23600769]
[132.09120178 213.64505005]
[125.74407959 200.05410767]
[119.39694977 186.46315002]
[113.90446472 200.42140198]
[100.80928802 207.73689270]
[86.04366302 205.09562683]
[76.29655457 193.69413757]
[75.98351288 178.69740295]
[85.24633026 166.89909363]
[99.88887787 163.64396667]
[113.27820587 170.40689087]
[108.97061920 156.03871155]
[104.66303253 141.67053223]
[100.35544586 127.30234528]
[92.56817627 126.27379608]
[85.39593506 123.07088470]
[79.43230438 117.95867920]
[75.17080688 111.36025238]
[72.96411133 103.82167816]
[72.99485779 95.96683502]
[59.33861160 89.76142120]
[45.68237305 83.55601501]
[32.02613068 77.35060883]
[18.36989021 71.14520264]
[5.99858809 74.94056702]
[-5.26968765 69.44102478]
[-9.60140419 58.10332108]
[-23.12559319 51.61515427]
[-39.42690659 53.40379715]
[-48.90707779 40.02252579]
[-41.81371689 25.23684692]
[-25.44387054 24.25699806]
[-16.63742828 38.09096527]
[-3.11323881 44.57912827]
[14.25590324 42.27416611]
[24.57529640 57.48896027]
[38.23153687 63.69437027]
[51.88777924 69.89977264]
[65.54402161 76.10518646]
[79.20026398 82.31059265]
[82.70262909 78.87311554]
[86.76374817 76.11808014]
[91.25242615 74.13449860]
[96.02367401 72.98642731]
[100.92336273 72.71096039]
[105.52893066 58.43549728]
[110.13449097 44.16003799]
[98.77005768 53.95032501]
[85.48458099 60.91423798]
[70.96765137 64.69031525]
[55.97278214 65.08255005]
[41.27829361 62.07059097]
[27.64690781 55.81076813]
[15.78617859 46.62800980]
[6.31174374 34.99894714]
[-0.28461847 21.52719879]
[-3.66051912 6.91202450]
[-3.64072967 -8.08796215]
[-0.22627711 -22.69417763]
[6.40560865 -36.14847183]
[15.91069508 -47.75249481]
[27.79561234 -56.90393066]
[41.44346619 -63.12776184]
[56.14585495 -66.10093689]
[71.13964081 -65.66913605]
[85.64655304 -61.85477066]
[98.91361237 -54.85582352]
[110.25216675 -45.03558731]
[119.07369232 -32.90378189]
[124.92029572 -19.09012222]
[127.48851013 -4.31161356]
[126.64501953 10.66465187]
[122.43284607 25.06315994]
[133.52415466 14.96450901]
[144.61547852 4.86585999]
[149.07824707 -10.91437149]
[165.03996277 -14.67676258]
[176.08058167 -2.55088782]
[170.84245300 12.98919201]
[154.71412659 15.95717525]
[143.62280273 26.05582428]
[132.53149414 36.15447617]
[124.40995026 48.76560211]
[119.80438995 63.04106140]
[115.19882202 77.31652069]
[127.30317688 100.28403473]
[114.72363281 122.99475861]
[119.03121948 137.36294556]
[123.33880615 151.73112488]
[127.64638519 166.09931946]
[132.98789978 180.11602783]
[139.33502197 193.70697021]
[145.68215942 207.29792786]
[152.02928162 220.88887024]
[181.79472351 225.68304443]
[195.96360779 257.42904663]
[210.08840942 262.47781372]
[224.21321106 267.52658081]
[238.33801270 272.57531738]
[251.07545471 263.71319580]
[266.58856201 264.06414795]
[278.91223145 273.49319458]
[283.30773926 288.37469482]
[278.08493042 302.98641968]
[265.25210571 311.70983887]
[249.74371338 311.19061279]
[237.52307129 301.62844849]
[233.28924561 286.70013428]
[219.16444397 281.65136719]
[205.03964233 276.60260010]
[190.91484070 271.55386353]
[184.78366089 275.87341309]
[194.75883484 287.07589722]
[204.73400879 298.27841187]
[218.32830811 304.61834717]
[222.72994995 318.95800781]
[215.03384399 331.83319092]
[200.31942749 334.74624634]
[188.29823303 325.77459717]
[186.90405273 310.83999634]
[179.71267700 297.67626953]
[172.52128601 284.51254272]
[166.39010620 288.83209229]
[166.39010620 303.83209229]
[166.39010620 318.83209229]
[166.39010620 333.83209229]
[166.39010620 348.83209229]
[166.39010620 363.83209229]
[166.39010620 378.83209229]
[166.39010620 393.83209229]
[166.39010620 408.83209229]
[166.39010620 423.83209229]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[18 112]
[19 111]
[20 110]
[21 109]
[29 108]
[30 107]
[31 106]
[32 105]
[38 58]
[39 57]
[40 56]
[41 55]
[42 54]
[45 52]
[46 51]
[63 103]
[64 102]
[65 101]
[91 100]
[92 99]
[93 98]
[114 129]
[115 128]
[116 127]
[117 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
