%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGUAAAUCUAACUUUCUUCCCACAACACUUUCUCGGCCUAUCCGGAAUGCCCCGACGUUACUCGxxxxxxxxxxGGGCCCGUAUUUACCCUAUAGCACCCCCUCUACCCCCUCUAGAGCCCACUGUAAAGCUAACUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[227.20617676 324.36746216]
[226.60603333 309.37948608]
[226.00588989 294.39147949]
[225.40574646 279.40350342]
[224.80560303 264.41549683]
[224.20545959 249.42752075]
[223.60530090 234.43952942]
[223.00515747 219.45153809]
[215.67912292 206.36225891]
[203.21751404 198.01312256]
[190.75588989 189.66397095]
[178.29428101 181.31483459]
[165.83267212 172.96568298]
[153.37106323 164.61654663]
[140.90943909 156.26739502]
[128.44783020 147.91825867]
[134.84181213 161.48722839]
[137.03161621 176.32652283]
[134.82949829 191.16400146]
[128.42425537 204.72766113]
[118.36500549 215.85472107]
[105.51409912 223.59126282]
[90.97322083 227.27404785]
[75.98894501 226.58737183]
[61.84585190 221.59008789]
[49.75639725 212.71061707]
[40.75699615 200.71015930]
[35.61915207 186.61752319]
[34.78332138 171.64082336]
[38.32115936 157.06401062]
[45.92937469 144.13671875]
[56.95573044 133.96717834]
[70.45494843 127.42720795]
[85.26976013 125.07747650]
[100.13012695 127.11943054]
[113.75999451 133.37663269]
[105.28659058 120.99917603]
[86.88935852 117.23440552]
[78.35157013 100.50904846]
[64.16175079 95.64602661]
[49.97193146 90.78300476]
[40.78182983 90.95641327]
[35.54852676 85.67811584]
[21.45884705 80.53214264]
[7.36917067 75.38617706]
[-7.72597694 80.81904602]
[-21.30911255 72.28218842]
[-22.96041489 56.32434464]
[-11.41314888 45.18701172]
[4.47461271 47.41379547]
[12.51513863 61.29650116]
[26.60481644 66.44246674]
[40.69449234 71.58843994]
[54.83494949 76.59318542]
[69.02477264 81.45619965]
[83.21459198 86.31922150]
[85.39269257 84.01438141]
[87.88406372 82.05236816]
[84.31674957 67.48273468]
[80.74943542 52.91309738]
[77.18212128 38.34346008]
[72.17737579 24.20300293]
[65.78525543 10.63315487]
[59.39313507 -2.93669391]
[44.43810654 -8.04773235]
[37.55246353 -22.27318192]
[42.82132721 -37.17333603]
[57.11878204 -43.90819931]
[71.96239471 -38.48209381]
[78.54572296 -24.11423302]
[72.96298218 -9.32881451]
[79.35510254 4.24103451]
[85.74722290 17.81088257]
[89.13137054 3.19761682]
[99.27150726 -7.85578203]
[113.53948975 -12.48446655]
[128.23730469 -9.48876190]
[139.55554199 0.35489678]
[144.56069946 14.49520588]
[141.95553589 29.26724625]
[132.41526794 40.84236145]
[118.41256714 46.22048569]
[103.57668304 44.00770569]
[91.75175476 34.77614594]
[95.31906891 49.34578323]
[98.88638306 63.91542053]
[102.45369720 78.48505402]
[115.60777283 84.98963928]
[121.59428406 98.38743591]
[117.66404724 112.52577209]
[126.13745117 124.90322876]
[136.79698181 135.45663452]
[149.25859070 143.80578613]
[161.72019958 152.15492249]
[174.18180847 160.50407410]
[186.64343262 168.85322571]
[199.10504150 177.20236206]
[211.56665039 185.55151367]
[224.02825928 193.90065002]
[228.90612793 187.17201233]
[236.93475342 182.17320251]
[247.38964844 180.22450256]
[259.03570557 182.32298279]
[274.03494263 182.47305298]
[279.54971313 170.72723389]
[289.07608032 161.98583984]
[301.16372681 157.53134155]
[313.99072266 157.99725342]
[325.63796997 163.27827454]
[334.37649536 172.55137634]
[338.92382812 184.40386963]
[353.90509033 185.15394592]
[368.88632202 185.90400696]
[383.86755371 186.65408325]
[398.84878540 187.40414429]
[409.35354614 175.82035828]
[424.85348511 173.75021362]
[438.03002930 182.17117310]
[442.66162109 197.10711670]
[436.56134033 211.50575256]
[422.60955811 218.56848145]
[407.39389038 214.96049500]
[398.09872437 202.38537598]
[383.11749268 201.63531494]
[368.13623047 200.88523865]
[353.15499878 200.13517761]
[338.17376709 199.38511658]
[329.40307617 214.14746094]
[314.30249023 222.50668335]
[296.95874023 222.09820557]
[282.11749268 212.94425964]
[273.88485718 197.47230530]
[258.88562012 197.32223511]
[253.66250610 202.70452881]
[266.75363159 210.02725220]
[279.84475708 217.34997559]
[294.61486816 219.96607971]
[305.12844849 230.66490173]
[307.48617554 245.47845459]
[300.81365967 258.91262817]
[287.58560181 265.98498535]
[272.70800781 264.07247925]
[261.69876099 253.88444519]
[258.64086914 239.20005798]
[250.92857361 226.33457947]
[243.21626282 213.46910095]
[237.99314880 218.85139465]
[238.59329224 233.83938599]
[239.19343567 248.82737732]
[239.79357910 263.81536865]
[240.39372253 278.80334473]
[240.99388123 293.79135132]
[241.59402466 308.77932739]
[242.19416809 323.76733398]
[248.86938477 339.35186768]
[235.74177551 350.08044434]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 99]
[10 98]
[11 97]
[12 96]
[13 95]
[14 94]
[15 93]
[16 92]
[36 91]
[37 90]
[39 56]
[40 55]
[41 54]
[43 53]
[44 52]
[45 51]
[58 87]
[59 86]
[60 85]
[61 84]
[62 73]
[63 72]
[64 71]
[103 133]
[104 132]
[111 127]
[112 126]
[113 125]
[114 124]
[115 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
