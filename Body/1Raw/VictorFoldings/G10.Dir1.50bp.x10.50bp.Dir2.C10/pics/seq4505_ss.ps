%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAAACCCCCUUAUUUCUAGGACUAUGAGAAUCGAACCCAUCCCUGAGAAUCCAAAAUUCUxxxxxxxxxxCCCUACCCCCCAAUUAGGAGGGCACUGGCCCCCAACAGGCAUCACCCCGCUAAAUCCCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[93.82183075 274.56726074]
[93.82183075 259.56726074]
[93.82183075 244.56726074]
[93.82183075 229.56726074]
[93.82183075 214.56726074]
[93.82183075 199.56726074]
[93.82183075 184.56726074]
[93.82183075 169.56726074]
[93.82183075 154.56726074]
[93.82183075 139.56726074]
[79.69702911 134.51849365]
[70.18866730 146.11984253]
[60.68030930 157.72117615]
[62.48884201 173.42164612]
[52.60044479 185.75028992]
[36.88172913 187.39271545]
[24.65833282 177.37452698]
[23.18217850 161.63932800]
[33.32904053 149.52253723]
[49.07896805 148.21282959]
[58.58732605 136.61148071]
[68.09568787 125.01013947]
[68.34676361 119.94705963]
[69.27143097 115.21562195]
[54.69872284 118.77038574]
[40.12602234 122.32514954]
[25.55331993 125.87990570]
[20.62323570 140.49832153]
[8.55822468 150.11283875]
[-6.79181385 151.65551758]
[-20.52873802 144.63409424]
[-28.26914597 131.28906250]
[-27.54310036 115.87879944]
[-18.58228111 103.32064056]
[-4.24605179 97.62186432]
[10.89094830 100.60092163]
[21.99855614 111.30720520]
[36.57125854 107.75244141]
[51.14396286 104.19768524]
[65.71666718 100.64292145]
[77.98960114 73.70736694]
[106.66416168 66.36446381]
[112.72718048 52.64440918]
[101.49709320 42.52795410]
[93.95395660 29.45341682]
[90.82558441 14.70751381]
[92.40604401 -0.26303113]
[98.52803802 -13.99342632]
[108.58053589 -25.14413643]
[121.56970215 -32.63156128]
[136.21719360 -35.73334122]
[151.08593750 -34.15801239]
[157.14895630 -47.87806702]
[163.21195984 -61.59812164]
[169.27497864 -75.31817627]
[168.49513245 -90.29788971]
[161.04022217 -103.31420135]
[153.58531189 -116.33050537]
[146.13040161 -129.34681702]
[138.67549133 -142.36312866]
[123.63285065 -147.93972778]
[118.75094604 -163.22196960]
[127.77474976 -176.48660278]
[143.78198242 -177.55813599]
[154.49325562 -165.61459351]
[151.69180298 -149.81803894]
[159.14671326 -136.80172729]
[166.60162354 -123.78541565]
[174.05653381 -110.76911163]
[181.51144409 -97.75279999]
[189.00494385 -97.44081116]
[188.70300293 -112.43777466]
[188.40104675 -127.43473053]
[188.09910583 -142.43168640]
[186.40753174 -157.33601379]
[199.32283020 -164.96459961]
[211.55921936 -156.28872681]
[208.63453674 -141.57670593]
[207.08702087 -126.65675354]
[205.53948975 -111.73679352]
[203.99195862 -96.81683350]
[211.48547363 -96.50484467]
[219.99656677 -108.85641479]
[228.50765991 -121.20799255]
[237.01873779 -133.55955505]
[230.96971130 -147.75155640]
[233.57623291 -162.95713806]
[244.00659180 -174.32424927]
[258.93249512 -178.22569275]
[273.59112549 -173.41653442]
[283.30496216 -161.43135071]
[284.97439575 -146.09458923]
[278.06668091 -132.30012512]
[264.78607178 -124.44974518]
[249.37031555 -125.04846954]
[240.85922241 -112.69689941]
[232.34812927 -100.34532928]
[223.83705139 -87.99375153]
[228.34580994 -82.00033569]
[241.87210083 -64.02008820]
[256.09887695 -68.77390289]
[270.32565308 -73.52771759]
[284.55242920 -78.28153229]
[295.01278687 -90.91138458]
[311.13327026 -87.90099335]
[316.33050537 -72.34719086]
[305.25802612 -60.25039291]
[289.30624390 -64.05475616]
[275.07946777 -59.30093765]
[260.85269165 -54.54712296]
[246.62591553 -49.79330826]
[229.27227783 -45.36503220]
[213.10736084 -45.98461914]
[199.39828491 -50.90101624]
[189.14018250 -59.07372284]
[182.99502563 -69.25515747]
[176.93202209 -55.53510666]
[170.86900330 -41.81505203]
[164.80598450 -28.09499931]
[175.98109436 -18.16132164]
[183.54890442 -5.24240494]
[186.75741577 9.40292072]
[185.28012085 24.34308624]
[179.24917603 38.11371613]
[169.24366760 49.36116028]
[156.23408508 56.97555923]
[141.48812866 60.20034790]
[126.44723511 58.70742416]
[120.38421631 72.42747498]
[125.61883545 76.43261719]
[130.06036377 81.43526459]
[133.51826477 87.27713776]
[135.83386230 93.76353455]
[136.88720703 100.66975403]
[136.60282898 107.74890900]
[134.95375061 114.74071503]
[131.96383667 121.38105774]
[127.70819855 127.41199493]
[122.31172943 132.59165955]
[115.94557190 136.70393372]
[108.82183075 139.56726074]
[108.82183075 154.56726074]
[108.82183075 169.56726074]
[108.82183075 184.56726074]
[108.82183075 199.56726074]
[108.82183075 214.56726074]
[108.82183075 229.56726074]
[108.82183075 244.56726074]
[108.82183075 259.56726074]
[108.82183075 274.56726074]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 22]
[12 21]
[13 20]
[24 40]
[25 39]
[26 38]
[27 37]
[42 129]
[43 128]
[52 119]
[53 118]
[54 117]
[55 116]
[56 70]
[57 69]
[58 68]
[59 67]
[60 66]
[82 98]
[83 97]
[84 96]
[85 95]
[100 111]
[101 110]
[102 109]
[103 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
