%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCGCCUUAAUCCAAGCCUACGUUUUCACACUUCUAGUAAGCCUCUACCUGCACGACAACAxxxxxxxxxxUAACUUCCAAUUAACUAGUUUUGACAACAUUCAAAAAAGAGUAAUAAACUUCGCCUUAAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 290.50320435]
[92.50000000 275.50320435]
[92.50000000 260.50320435]
[92.50000000 245.50318909]
[92.50000000 230.50318909]
[92.50000000 215.50318909]
[92.50000000 200.50318909]
[92.50000000 185.50318909]
[92.50000000 170.50318909]
[92.50000000 155.50318909]
[86.30471039 154.30738831]
[80.28323364 152.42234802]
[74.51199341 149.87199402]
[69.06423187 146.68867493]
[64.00910187 142.91281128]
[52.91778183 153.01145935]
[41.82646942 163.11010742]
[39.64246368 179.00381470]
[25.78145599 187.08168030]
[10.87642288 181.14707947]
[6.36123133 165.75250244]
[15.69954872 152.70738220]
[31.72781754 152.01879883]
[42.81913376 141.92015076]
[53.91044998 131.82148743]
[45.50501633 112.92868805]
[44.52787781 92.27355194]
[51.11223221 72.67161560]
[64.36055756 56.79486084]
[82.46694183 46.80746078]
[102.96329498 44.07081985]
[105.75561523 29.33301544]
[108.54794312 14.59520912]
[111.34026337 -0.14259726]
[101.22950745 -14.38022041]
[104.44875336 -31.20046234]
[118.53701782 -40.33166122]
[121.02213287 -55.12436676]
[115.67810059 -70.01570129]
[125.41706085 -81.28521729]
[127.90217590 -96.07791901]
[130.38729858 -110.87062836]
[124.46726227 -138.83547974]
[121.36894226 -153.51199341]
[118.27062225 -168.18852234]
[115.17230225 -182.86505127]
[112.07397461 -197.54158020]
[97.09695435 -196.38238525]
[82.09675598 -197.18806458]
[67.33006287 -199.94482422]
[53.04954529 -204.60549927]
[39.49956894 -211.09033203]
[26.91198540 -219.28837585]
[15.50218964 -229.05932617]
[5.46541500 -240.23600769]
[-3.02659416 -252.62716675]
[-9.82852936 -266.02078247]
[-14.82400036 -280.18765259]
[-17.92752838 -294.88537598]
[-19.08600807 -309.86245728]
[-18.27961540 -324.86260986]
[-15.52215004 -339.62918091]
[-10.86079502 -353.90945435]
[-4.37531185 -367.45913696]
[3.82332301 -380.04632568]
[13.59482098 -391.45565796]
[24.77197838 -401.49191284]
[37.16353989 -409.98330688]
[50.55747223 -416.78460693]
[64.72457886 -421.77941895]
[79.42245483 -424.88223267]
[94.39958954 -426.04000854]
[109.39971161 -425.23291016]
[124.16614532 -422.47473145]
[138.44621277 -417.81271362]
[151.99557495 -411.32656860]
[164.58238220 -403.12734985]
[175.99124146 -393.35528564]
[186.02694702 -382.17767334]
[194.51777649 -369.78570557]
[201.31843567 -356.39144897]
[206.31256104 -342.22409058]
[209.41468811 -327.52606201]
[210.57174683 -312.54888916]
[209.76393127 -297.54879761]
[207.00505066 -282.78250122]
[202.34234619 -268.50265503]
[195.85557556 -254.95359802]
[187.65573120 -242.36718750]
[177.88314819 -230.95878601]
[166.70503235 -220.92361450]
[154.31266785 -212.43336487]
[140.91809082 -205.63334656]
[126.75050354 -200.63989258]
[129.84883118 -185.96336365]
[132.94714355 -171.28684998]
[136.04547119 -156.61032104]
[139.14378357 -141.93379211]
[151.83871460 -133.94387817]
[166.41142273 -137.49864197]
[180.98413086 -141.05340576]
[195.55682373 -144.60816956]
[210.12953186 -148.16293335]
[224.70223999 -151.71768188]
[232.69563293 -165.35151672]
[248.00924683 -169.25900269]
[261.55780029 -161.12191772]
[265.30316162 -145.76783752]
[257.02328491 -132.30606079]
[241.63046265 -128.72323608]
[228.25698853 -137.14498901]
[213.68429565 -133.59022522]
[199.11158752 -130.03546143]
[184.53889465 -126.48069763]
[169.96618652 -122.92593384]
[155.39347839 -119.37117767]
[145.18000793 -108.38551331]
[142.69488525 -93.59280396]
[140.20976257 -78.80009460]
[145.73155212 -64.96683502]
[135.81483459 -52.63924789]
[133.32972717 -37.84654236]
[142.21969604 -28.46757126]
[144.09254456 -15.48424435]
[138.03845215 -3.62777710]
[126.07807159 2.64972711]
[123.28574371 17.38753319]
[120.49342346 32.12533951]
[117.70109558 46.86314392]
[129.05313110 52.11712265]
[138.95593262 59.75959778]
[146.91552734 69.40934753]
[152.53486633 80.58502197]
[155.53367615 92.72915649]
[155.76234436 105.23597717]
[153.20947266 117.48162079]
[148.00239563 128.85523987]
[140.40084839 138.78950500]
[130.78404236 146.78884888]
[119.63165283 152.45428467]
[107.50000000 155.50318909]
[107.50000000 170.50318909]
[107.50000000 185.50318909]
[107.50000000 200.50318909]
[107.50000000 215.50318909]
[107.50000000 230.50318909]
[107.50000000 245.50318909]
[107.50000000 260.50320435]
[107.50000000 275.50320435]
[107.50000000 290.50320435]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[15 25]
[16 24]
[17 23]
[31 129]
[32 128]
[33 127]
[34 126]
[37 122]
[38 121]
[40 119]
[41 118]
[42 117]
[43 98]
[44 97]
[45 96]
[46 95]
[47 94]
[99 116]
[100 115]
[101 114]
[102 113]
[103 112]
[104 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
