%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUCACGUCAUUAUUGGCUCAACUUUCCUCACUAUCUGCUUCAUCCGCCAACUAAUAUUUCxxxxxxxxxxCUGAGGAGGCUACUCAGUAGACAGUCCCACCCUCACACGAUUCUUUACCUUUCACUUCAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[126.34527588 375.86505127]
[126.34527588 360.86505127]
[126.34527588 345.86505127]
[126.34527588 330.86505127]
[126.34527588 315.86505127]
[126.34527588 300.86505127]
[126.34527588 285.86505127]
[126.34527588 270.86505127]
[126.34527588 255.86505127]
[126.34527588 240.86505127]
[103.71199799 231.41444397]
[88.29619598 212.26635742]
[83.87524414 188.02847290]
[91.57256317 164.56571960]
[109.57278442 147.58110046]
[104.37736511 133.50958252]
[99.18195343 119.43805695]
[79.57789612 109.80599976]
[79.16200256 84.69708252]
[64.39595032 82.05821991]
[49.62989426 79.41934967]
[34.86383820 76.78048706]
[20.07113075 74.29537201]
[5.25337315 71.96426392]
[-9.56438446 69.63316345]
[-24.38214302 67.30205536]
[-39.19990158 64.97095490]
[-44.57582474 79.03485107]
[-52.75865173 91.67348480]
[-63.39066315 102.33434296]
[-76.00707245 110.55139160]
[-90.05635071 115.96540833]
[-104.92431641 118.33972168]
[-119.96099854 117.57052612]
[-134.50907898 113.69145966]
[-147.93255615 106.87209320]
[-159.64463806 97.41053772]
[-169.13330078 85.72041321]
[-175.98374939 72.31275940]
[-179.89649963 57.77371216]
[-180.70053101 42.73884583]
[-178.36067200 27.86542130]
[-172.97920227 13.80364323]
[-164.79141235 1.16823077]
[-154.15519714 -9.48844910]
[-141.53556824 -17.70053291]
[-127.48416138 -23.10902214]
[-112.61526489 -25.47748375]
[-97.57888031 -24.70237541]
[-83.03232574 -20.81758499]
[-69.61152649 -13.99293613]
[-57.90317917 -4.52677345]
[-48.41911697 7.16708183]
[-41.57394409 20.57742500]
[-37.66690445 35.11801529]
[-36.86879730 50.15319824]
[-22.05103874 52.48430252]
[-7.23328114 54.81540298]
[7.58447695 57.14650726]
[22.40223503 59.47761154]
[29.54475975 57.39675140]
[37.50270462 62.01443481]
[52.26875687 64.65329742]
[67.03481293 67.29216003]
[81.80087280 69.93102264]
[67.12245178 66.84169769]
[54.31032562 59.04108429]
[44.82674789 47.41947556]
[39.75407410 33.30324554]
[39.67124939 18.30347443]
[44.58772278 4.13208389]
[53.94238281 -7.59354496]
[66.66757965 -15.53516865]
[81.31098938 -18.78641129]
[96.20135498 -16.97620773]
[109.63925171 -10.31115818]
[120.09101105 0.44805798]
[126.36377716 14.07349205]
[127.74163055 29.01007462]
[124.06732941 43.55309677]
[115.76020813 56.04276276]
[103.76612091 65.05478668]
[116.02848816 56.41567230]
[128.29086304 47.77655411]
[140.55322266 39.13743973]
[152.81559753 30.49832344]
[160.12229919 13.62847042]
[177.61691284 12.65979099]
[189.69689941 3.76744175]
[201.19869995 -5.86108446]
[212.07752991 -16.18828964]
[222.95635986 -26.51549530]
[233.83518982 -36.84270096]
[241.15980530 -52.13276672]
[257.88000488 -49.32710648]
[259.81259155 -32.48366547]
[244.16238403 -25.96387482]
[233.28356934 -15.63666916]
[222.40473938 -5.30946445]
[211.52590942 5.01774073]
[226.40533447 6.91590071]
[235.73594666 18.66066360]
[234.22029114 33.58389282]
[222.71885681 43.21286392]
[207.76164246 42.08069229]
[197.84066772 30.83016968]
[198.58924866 15.84743023]
[186.50926208 24.73978043]
[184.36383057 36.68567657]
[174.31628418 44.18672943]
[161.45471191 42.76069260]
[149.19233704 51.39980698]
[136.92997742 60.03892517]
[124.66760254 68.67803955]
[112.40523529 77.31715393]
[122.47904205 97.18704987]
[113.25347137 114.24264526]
[118.44888306 128.31416321]
[123.64430237 142.38568115]
[130.88389587 141.45379639]
[138.17843628 141.57917786]
[145.37440491 142.75810242]
[152.32054138 144.96470642]
[158.87097168 148.15151978]
[164.88829041 152.25050354]
[170.24647522 157.17453003]
[174.83346558 162.81913757]
[178.55354309 169.06486511]
[181.32934570 175.77970886]
[183.10345459 182.82194519]
[183.83955383 190.04309082]
[183.52320862 197.29103088]
[182.16217041 204.41329956]
[179.78613281 211.26019287]
[176.44610596 217.68792725]
[172.21334839 223.56175232]
[167.17781067 228.75865173]
[161.44625854 233.16999817]
[155.13995361 236.70378113]
[148.39215088 239.28659058]
[141.34527588 240.86505127]
[141.34527588 255.86505127]
[141.34527588 270.86505127]
[141.34527588 285.86505127]
[141.34527588 300.86505127]
[141.34527588 315.86505127]
[141.34527588 330.86505127]
[141.34527588 345.86505127]
[141.34527588 360.86505127]
[141.34527588 375.86505127]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[15 119]
[16 118]
[17 117]
[19 65]
[20 64]
[21 63]
[22 62]
[23 60]
[24 59]
[25 58]
[26 57]
[27 56]
[82 115]
[83 114]
[84 113]
[85 112]
[86 111]
[88 108]
[89 107]
[90 100]
[91 99]
[92 98]
[93 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
