%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCCUAUGGAGCUUUAAUUUAUUAAUGCAAACAGUACCUAACAAACCCACAGGUCCUAAAxxxxxxxxxxGCGAACUACUAUACUCAAUUGAUCCAAUAACUUGACCAACGGAACAAGUUACCCUAGGGACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[122.75096893 288.82098389]
[122.75096893 273.82098389]
[122.75096893 258.82098389]
[122.75096893 243.82098389]
[122.75096893 228.82098389]
[122.75096893 213.82098389]
[122.75096893 198.82098389]
[122.75096893 183.82098389]
[122.75096893 168.82098389]
[122.75096893 153.82098389]
[97.82188416 152.42346191]
[78.40182495 141.18574524]
[69.38430023 153.17257690]
[67.93710327 169.50773621]
[52.95477676 176.17572021]
[39.84985352 166.31706238]
[42.10355377 150.07351685]
[57.39746475 144.15504456]
[66.41499329 132.16821289]
[62.54773712 127.56945038]
[59.30569839 122.51044464]
[45.18089294 127.55920410]
[34.79016113 139.48997498]
[20.20123291 136.48791504]
[6.07642984 141.53666687]
[-8.04837322 146.58541870]
[-22.17317581 151.63418579]
[-32.36851120 164.47891235]
[-48.54812241 161.80453491]
[-54.06781006 146.36221313]
[-43.24939346 134.03768921]
[-27.22193336 137.50936890]
[-13.09712982 132.46061707]
[1.02767336 127.41186523]
[15.15247631 122.36310577]
[24.53290749 110.79345703]
[40.13213730 113.43440247]
[54.25694275 108.38564301]
[53.65330887 96.16191864]
[56.25947952 84.20401001]
[61.89495468 73.34007263]
[70.16944122 64.32249451]
[80.50988007 57.77581406]
[76.50214386 43.32112503]
[72.49440002 28.86643791]
[64.50448608 16.17150879]
[53.20548248 6.30578518]
[41.90647507 -3.55993772]
[30.60747147 -13.42566109]
[16.35920143 -7.83590555]
[1.14656639 -9.51945210]
[-11.53468037 -18.08943176]
[-18.77048111 -31.57652855]
[-18.89810181 -46.88150406]
[-11.88821697 -60.48738861]
[0.64835429 -69.26764679]
[15.83079910 -71.20464325]
[30.17030334 -65.85327148]
[40.37175369 -54.44322968]
[44.09093094 -39.59646988]
[40.47319412 -24.72466469]
[51.77220154 -14.85894299]
[63.07120514 -4.99321938]
[74.37020874 4.87250376]
[69.98278046 -9.47150230]
[68.61428833 -24.40894508]
[70.32228851 -39.31138611]
[75.03493500 -53.55185318]
[82.55395508 -66.53123474]
[92.56301880 -77.70346069]
[104.64102173 -86.59851074]
[118.27982330 -92.84214783]
[132.90562439 -96.17169189]
[147.90310669 -96.44705963]
[162.64128113 -93.65668488]
[176.50009155 -87.91794586]
[188.89649963 -79.47228241]
[199.30894470 -68.67501831]
[207.29937744 -55.98041534]
[212.53163147 -41.92255020]
[214.78555298 -27.09285545]
[213.96633911 -12.11524200]
[210.10844421 2.38015890]
[203.37417603 15.78350544]
[194.04685974 27.53089714]
[182.51892090 37.12810516]
[169.27532959 44.17136002]
[154.87329102 48.36434174]
[139.91870117 49.53064728]
[125.04072571 47.62120438]
[110.86531067 42.71634674]
[97.98883820 35.02243042]
[86.94908905 24.85869789]
[90.95683289 39.31338501]
[94.96456909 53.76807404]
[120.03001404 53.66296768]
[143.47401428 67.20491028]
[157.94061279 92.43758392]
[171.59684753 86.23217773]
[185.25309753 80.02677155]
[198.90933228 73.82136536]
[210.82820129 61.76412582]
[225.71369934 69.87942505]
[222.03627014 86.42974091]
[205.11474609 87.47760773]
[191.45849609 93.68301392]
[177.80226135 99.88842010]
[164.14601135 106.09382629]
[165.39289856 121.04191589]
[179.88848877 124.89907074]
[194.38407898 128.75622559]
[208.87968445 132.61338806]
[223.37527466 136.47055054]
[237.87088013 140.32771301]
[255.49664307 135.10160828]
[267.46923828 147.89445496]
[282.04193115 151.44921875]
[298.86276245 149.32873535]
[305.55682373 164.90518188]
[292.44223022 175.64964294]
[278.48718262 166.02191162]
[263.91448975 162.46716309]
[253.37736511 168.49015808]
[241.17611694 165.60076904]
[234.01371765 154.82330322]
[219.51811218 150.96614075]
[205.02252197 147.10899353]
[190.52693176 143.25183105]
[176.03132629 139.39466858]
[161.53573608 135.53750610]
[155.58953857 140.10838318]
[166.46141052 150.44291687]
[177.33326721 160.77745056]
[189.50737000 169.54051208]
[189.74336243 184.53865051]
[177.85098267 193.68040466]
[163.41786194 189.59570312]
[158.07992554 175.57759094]
[150.88854980 162.41384888]
[143.69715881 149.25010681]
[137.75097656 153.82098389]
[137.75097656 168.82098389]
[137.75097656 183.82098389]
[137.75097656 198.82098389]
[137.75097656 213.82098389]
[137.75097656 228.82098389]
[137.75097656 243.82098389]
[137.75097656 258.82098389]
[137.75097656 273.82098389]
[137.75097656 288.82098389]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 19]
[13 18]
[21 38]
[22 37]
[24 35]
[25 34]
[26 33]
[27 32]
[43 95]
[44 94]
[45 93]
[46 64]
[47 63]
[48 62]
[49 61]
[98 108]
[99 107]
[100 106]
[101 105]
[109 130]
[110 129]
[111 128]
[112 127]
[113 126]
[114 125]
[116 122]
[117 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
