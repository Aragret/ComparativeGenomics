%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAUUAGGAGGGCACUGGCCCCCAACAGGCAUCACCCCGCUAAAUCCCCUAGAAGUCCCACxxxxxxxxxxGUGCUCCGGGUCCAUCAUCCACAACCUUAACAAUGAACAAGAUAUUCGAAAAAUAGGAGGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[180.28675842 350.19757080]
[179.97470093 335.20080566]
[179.66264343 320.20407104]
[179.35058594 305.20730591]
[179.03852844 290.21054077]
[178.72647095 275.21380615]
[178.41441345 260.21704102]
[178.10235596 245.22029114]
[177.79029846 230.22354126]
[175.45919800 215.40577698]
[171.15161133 201.03759766]
[166.84402466 186.66940308]
[162.53643799 172.30122375]
[140.41252136 168.83326721]
[128.01547241 152.44148254]
[130.29478455 133.86909485]
[118.79297638 124.24057007]
[107.29116821 114.61203766]
[92.33092499 113.52072906]
[79.55356598 121.37815857]
[66.77620697 129.23558044]
[53.99885178 137.09300232]
[46.67651749 151.76663208]
[30.29341507 152.49191284]
[21.70307541 138.52273560]
[29.74250412 124.22938538]
[46.14142609 124.31565094]
[58.91878128 116.45822144]
[71.69613647 108.60079956]
[84.47349548 100.74337006]
[79.42474365 86.61856842]
[64.56169128 88.64090729]
[51.93307877 99.10274506]
[36.65478516 93.14406586]
[34.44381714 76.89464569]
[47.57462311 67.07049561]
[62.53936005 73.77785492]
[77.40240479 71.75552368]
[81.33111572 65.36684418]
[66.33688354 64.95088196]
[59.19992065 51.75756454]
[67.05711365 38.98006058]
[82.05135345 39.39574432]
[89.18854523 52.58948898]
[93.11725616 46.20080948]
[88.21570587 32.02425003]
[83.31415558 17.84769249]
[78.41260529 3.67113471]
[63.61319351 6.30246925]
[48.58435440 6.58614588]
[33.69618607 4.51517868]
[19.31532097 0.14056715]
[5.79590225 -6.42996025]
[-6.52914143 -15.03459835]
[-17.35629463 -25.46144867]
[-26.41893196 -37.45374298]
[-33.49387360 -50.71615982]
[-38.40689468 -64.92209625]
[-41.03701019 -79.72172546]
[-41.31944656 -94.75058746]
[-39.24724960 -109.63858795]
[-34.87145233 -124.01908875]
[-28.29980850 -137.53796387]
[-19.69415283 -149.86230469]
[-9.26640892 -160.68859863]
[2.72663307 -169.75024414]
[15.98963261 -176.82408142]
[30.19597816 -181.73593140]
[44.99582291 -184.36483765]
[60.02470779 -184.64602661]
[74.91253662 -182.57260132]
[89.29267883 -178.19561768]
[102.81101227 -171.62286377]
[115.13463593 -163.01618958]
[125.96006775 -152.58755493]
[135.02072144 -140.59376526]
[142.09347534 -127.33017731]
[147.00415039 -113.12342834]
[149.63182068 -98.32336426]
[149.91178894 -83.29445648]
[147.83712769 -68.40679932]
[143.45895386 -54.02701950]
[136.88508606 -40.50922775]
[128.27740479 -28.18631554]
[117.84786987 -17.36174202]
[105.85333252 -8.30207539]
[92.58916473 -1.23041618]
[97.49071503 12.94614220]
[102.39226532 27.12269974]
[107.29381561 41.29925919]
[116.91970062 103.11023712]
[128.42149353 112.73876190]
[139.92330933 122.36729431]
[162.30967712 116.87704468]
[182.51130676 133.79412842]
[196.73809814 129.04031372]
[210.96487427 124.28649902]
[225.19165039 119.53268433]
[226.22323608 104.36679077]
[232.98451233 90.75232697]
[244.44442749 80.76540375]
[258.85543823 75.92894745]
[274.01995850 76.98048401]
[287.62551880 83.75966644]
[297.59735107 95.23271179]
[302.41485596 109.65006256]
[301.34338379 124.81319427]
[294.54629517 138.40982056]
[283.06015015 148.36656189]
[268.63647461 153.16508484]
[253.47476196 152.07365417]
[239.88708496 145.25869751]
[229.94546509 133.75946045]
[215.71868896 138.51327515]
[201.49191284 143.26708984]
[187.26512146 148.02090454]
[201.77500916 144.21784973]
[215.57678223 150.09248352]
[222.89460754 163.18635559]
[220.66610718 178.01988220]
[209.82388306 188.38549805]
[194.90519714 189.94534302]
[182.15330505 182.04666138]
[176.90463257 167.99363708]
[181.21221924 182.36183167]
[185.51980591 196.73001099]
[189.82737732 211.09819031]
[194.43054199 196.82196045]
[204.35781860 185.57699585]
[217.95315552 179.23924255]
[232.94850159 178.86595154]
[246.84233093 184.51942444]
[257.31683350 195.25650024]
[262.62460327 209.28602600]
[261.88021851 224.26754761]
[255.20783997 237.70181274]
[243.72056580 247.34767151]
[229.33476257 251.59600830]
[214.45025635 249.73808289]
[201.55015564 242.08383179]
[192.78706360 229.91148376]
[193.09910583 244.90823364]
[193.41116333 259.90499878]
[193.72322083 274.90173340]
[194.03527832 289.89849854]
[194.34733582 304.89523315]
[194.65939331 319.89199829]
[194.97145081 334.88876343]
[195.28350830 349.88549805]
[197.87451172 369.09323120]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 127]
[11 126]
[12 125]
[13 124]
[16 93]
[17 92]
[18 91]
[19 30]
[20 29]
[21 28]
[22 27]
[31 38]
[32 37]
[45 90]
[46 89]
[47 88]
[48 87]
[95 116]
[96 115]
[97 114]
[98 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
