%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACACAUGCAAGCAUCCCCGUUCCAGUGAGUUCACCCUCUAAAUCACCACGAUCAAAAGGAxxxxxxxxxxCAUCACAAGACGUCUUGCACUCAUGAGCUGUCCCCACAUUAGGCUUAAAAACAGAUGCAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[159.71031189 360.68576050]
[159.71031189 345.68576050]
[159.71031189 330.68576050]
[159.71031189 315.68576050]
[159.71031189 300.68576050]
[159.71031189 285.68576050]
[159.71031189 270.68576050]
[159.71031189 255.68574524]
[159.71031189 240.68574524]
[159.71031189 225.68574524]
[158.77182007 214.25506592]
[161.41816711 204.35185242]
[166.67341614 196.96151733]
[173.33003235 192.63658142]
[164.06507874 180.83995056]
[154.31742859 169.43891907]
[144.10394287 158.45326233]
[133.89047241 147.46759033]
[123.67698669 136.48193359]
[113.46350861 125.49626160]
[103.25003052 114.51059723]
[110.30520630 127.74783325]
[111.57372284 142.69410706]
[106.85031128 156.93099976]
[96.89926147 168.15492249]
[83.33069611 174.54977417]
[68.34010315 175.08082581]
[54.35303497 169.66215515]
[43.63269424 159.17051697]
[37.91368866 145.30354309]
[38.12139130 130.30499268]
[44.22219086 116.60169220]
[55.22894287 106.41094208]
[69.36068726 101.38165283]
[84.33333588 102.32828522]
[70.10655212 97.57447052]
[55.87977600 92.82065582]
[41.65299606 88.06684113]
[26.11208534 91.03173065]
[16.49299240 79.65973663]
[2.26621246 74.90592194]
[-10.28411293 84.03110504]
[-25.80116272 84.00296783]
[-38.31831360 74.83233643]
[-43.02246857 60.04550171]
[-38.10478210 45.32830048]
[-25.45620537 36.33980179]
[-9.94037342 36.53626251]
[2.47655845 45.84214401]
[7.02002716 60.67914200]
[21.24680710 65.43296051]
[35.77012634 62.12804031]
[46.40681076 73.84006500]
[60.63359070 78.59387970]
[74.86036682 83.34769440]
[89.08715057 88.10150909]
[91.54194641 89.06156921]
[93.74865723 90.33673096]
[93.74865723 75.33673096]
[93.74865723 60.33672714]
[90.60298920 51.69053650]
[93.90794373 45.02548599]
[94.22000122 30.02873039]
[79.63005829 26.25641441]
[66.30363464 19.22057724]
[54.95939255 9.30064964]
[46.20912170 -2.96839690]
[40.52471161 -16.92490768]
[38.21271515 -31.81622696]
[39.39781952 -46.83928680]
[44.01610565 -61.18390656]
[51.81851959 -74.07649994]
[62.38428497 -84.82179260]
[75.14360809 -92.84030151]
[89.40838623 -97.69959259]
[104.40934753 -99.13761902]
[119.33750153 -97.07682037]
[133.38780212 -91.62834167]
[145.80252075 -83.08600616]
[155.91215515 -71.91049957]
[163.17149353 -58.70449066]
[167.18907166 -44.18017197]
[167.74821472 -29.12082100]
[164.81875610 -14.33856678]
[158.55870056 -0.63059843]
[149.30563354 11.26383018]
[137.55856323 20.70326614]
[123.95098877 27.17865562]
[109.21675110 30.34078789]
[108.90469360 45.33753967]
[108.74865723 60.33672714]
[108.74865723 75.33673096]
[108.74865723 90.33673096]
[114.23569489 104.29711914]
[124.44917297 115.28278351]
[134.66265869 126.26844788]
[144.87612915 137.25411987]
[155.08961487 148.23977661]
[165.30308533 159.22544861]
[169.64247131 160.37925720]
[173.01841736 162.65390015]
[175.19271851 165.59571838]
[176.10394287 168.72041321]
[175.86172485 171.57499695]
[185.12666321 183.37162781]
[198.29525757 190.55413818]
[213.22955322 191.95645142]
[228.16386414 193.35874939]
[243.14358521 194.13859558]
[258.14276123 194.29463196]
[273.14196777 194.45066833]
[287.15512085 185.93228149]
[301.40695190 194.04510498]
[301.23635864 210.44335938]
[286.81884766 218.25793457]
[272.98593140 209.44985962]
[257.98672485 209.29382324]
[242.98754883 209.13778687]
[240.87197876 211.06954956]
[237.83929443 212.25143433]
[234.18182373 212.32049561]
[230.32096863 211.03024292]
[226.76156616 208.29306030]
[211.82725525 206.89074707]
[196.89294434 205.48844910]
[191.34729004 210.53778076]
[203.78108215 218.92829895]
[216.21485901 227.31883240]
[228.64865112 235.70935059]
[242.80612183 240.66575623]
[251.80845642 252.66401672]
[252.60833740 267.64266968]
[244.93501282 280.53143311]
[231.38592529 286.96740723]
[216.54743958 284.77203369]
[205.44245911 274.68841553]
[201.83012390 260.12765503]
[194.63873291 246.96389771]
[187.44735718 233.80015564]
[180.25596619 220.63642883]
[174.71031189 225.68574524]
[174.71031189 240.68574524]
[174.71031189 255.68574524]
[174.71031189 270.68576050]
[174.71031189 285.68576050]
[174.71031189 300.68576050]
[174.71031189 315.68576050]
[174.71031189 330.68576050]
[174.71031189 345.68576050]
[174.71031189 360.68576050]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[14 105]
[15 104]
[16 99]
[17 98]
[18 97]
[19 96]
[20 95]
[21 94]
[35 56]
[36 55]
[37 54]
[38 53]
[40 51]
[41 50]
[58 93]
[59 92]
[60 91]
[62 90]
[63 89]
[106 125]
[107 124]
[108 123]
[109 118]
[110 117]
[111 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
