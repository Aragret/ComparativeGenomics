%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUGCAACUCCAAAUAAAAGUAAUAACCAUGCACACUACUAUAACCACCCUAACCCUGACUUCCxxxxxxxxxxCAUGCUUACAAGCAAGUACAGCAAUCAACCCUCAACUAUCACACAUCAACUGCAACUCCAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[142.01802063 91.52232361]
[128.06021118 97.01591492]
[114.10240173 102.50950623]
[105.24599457 113.32872772]
[91.39118958 111.44830322]
[77.43337250 116.94189453]
[63.90005493 123.41099548]
[50.85929871 130.82305908]
[42.68494797 144.36892700]
[27.79677200 143.93127441]
[14.75601768 151.34333801]
[1.71526253 158.75540161]
[-11.32549286 166.16746521]
[-24.36624718 173.57952881]
[-36.76390457 182.02334595]
[-48.43702316 191.44345093]
[-60.11013794 200.86355591]
[-58.34823608 216.18997192]
[-65.17262268 230.02584839]
[-78.40565491 237.95619202]
[-93.82472992 237.45045471]
[-106.50966644 228.67004395]
[-112.41275787 214.41671753]
[-109.65033722 199.23869324]
[-99.10389709 187.97920227]
[-84.13875580 184.23110962]
[-69.53024292 189.19042969]
[-57.85712433 179.77033997]
[-46.18400955 170.35023499]
[-61.14500427 169.26921082]
[-72.71347046 159.72088623]
[-76.61140442 145.23620605]
[-71.39734650 131.17156982]
[-58.99945831 122.72809601]
[-44.00246048 123.02814484]
[-31.95222092 131.96076965]
[-27.30490494 146.22268677]
[-31.77831268 160.53877258]
[-18.73755836 153.12670898]
[-5.69680262 145.71464539]
[7.34395266 138.30258179]
[20.38470840 130.89051819]
[27.62629890 117.87480927]
[43.44723511 117.78230286]
[56.48799133 110.37023926]
[42.12308121 106.05174255]
[33.75272369 93.60436249]
[35.17197418 78.67166138]
[45.73735428 68.02399445]
[60.65860367 66.48894501]
[73.17053986 74.76248932]
[77.60034180 89.09346008]
[71.93978882 102.98408508]
[85.89759827 97.49049377]
[94.75400543 86.67127228]
[108.60881042 88.55169678]
[122.56662750 83.05810547]
[136.52442932 77.56451416]
[131.49412537 60.50621796]
[128.11097717 43.04698563]
[126.40562439 25.34547997]
[126.39347076 7.56255198]
[128.07452393 -10.14021015]
[131.43339539 -27.60196114]
[136.43948364 -44.66405106]
[143.04718018 -61.17147827]
[151.19638062 -76.97428131]
[160.81292725 -91.92891693]
[171.80934143 -105.89955139]
[184.08566284 -118.75930786]
[197.53022766 -130.39140320]
[212.02084351 -140.69021606]
[227.42575073 -149.56225586]
[243.60493469 -156.92700195]
[260.41134644 -162.71760559]
[277.69223022 -166.88154602]
[295.29055786 -169.38110352]
[313.04638672 -170.19366455]
[330.79840088 -169.31193542]
[348.38525391 -166.74404907]
[365.64718628 -162.51341248]
[382.42739868 -156.65856934]
[398.57339478 -149.23284912]
[413.93856812 -140.30377197]
[428.38330078 -129.95259094]
[438.15386963 -141.33396912]
[447.92446899 -152.71533203]
[457.69503784 -164.09671021]
[467.34979248 -175.57650757]
[476.88769531 -187.15356445]
[486.42562866 -198.73062134]
[484.65713501 -214.43565369]
[494.57693481 -226.73902893]
[510.29980469 -228.34136963]
[522.49761963 -218.29203796]
[523.93365479 -202.55311584]
[513.75592041 -190.46224976]
[498.00268555 -189.19270325]
[488.46475220 -177.61564636]
[478.92684937 -166.03858948]
[477.09017944 -158.83399963]
[469.07641602 -154.32612610]
[459.30584717 -142.94474792]
[449.53524780 -131.56336975]
[439.76464844 -120.18200684]
[448.94351196 -111.02538300]
[457.46386719 -101.25278473]
[465.28448486 -90.91144562]
[472.36755371 -80.05138397]
[478.67877197 -68.72509766]
[484.18759155 -56.98735809]
[488.86734009 -44.89492798]
[492.69534302 -32.50628281]
[495.65310669 -19.88133430]
[497.72622681 -7.08113766]
[498.90469360 5.83239937]
[499.18276978 18.79682159]
[498.55905151 31.74942207]
[497.03659058 44.62755585]
[494.62268066 57.36892700]
[491.32897949 69.91191101]
[487.17135620 82.19582367]
[482.16995239 94.16124725]
[476.34887695 105.75030518]
[469.73632812 116.90692139]
[462.36419678 127.57711792]
[454.26812744 137.70927429]
[445.48727417 147.25437927]
[436.06408691 156.16622925]
[426.04412842 164.40170288]
[415.47579956 171.92095947]
[404.41024780 178.68757629]
[392.90097046 184.66883850]
[381.00363159 189.83576965]
[368.77572632 194.16334534]
[356.27639771 197.63063049]
[343.56613159 200.22080994]
[330.70635986 201.92132568]
[317.75927734 202.72393799]
[304.78753662 202.62472534]
[291.85382080 201.62414551]
[279.02075195 199.72702026]
[266.35037231 196.94247437]
[253.90397644 193.28395081]
[241.74177551 188.76913452]
[229.92259216 183.41981506]
[218.50360107 177.26187134]
[207.54006958 170.32501221]
[197.08502197 162.64282227]
[187.18904114 154.25238037]
[177.90002441 145.19429016]
[169.26290894 135.51231384]
[161.31950378 125.25328827]
[154.10823059 114.46678925]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 58]
[2 57]
[3 56]
[5 54]
[6 53]
[7 45]
[8 44]
[10 42]
[11 41]
[12 40]
[13 39]
[14 38]
[15 29]
[16 28]
[17 27]
[85 105]
[86 104]
[87 103]
[88 102]
[89 100]
[90 99]
[91 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
