%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACUUUCCACACAGACAUCAUAACAAAAAAUUUCCACCAAACCCCCCCUCCCCCGCUUCUGGxxxxxxxxxxCAUUUUUUGUAGCCACAGGCUUCCACGGACUUCACGUCAUUAUUGGCUCAACUUUCCUCACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[105.35433960 524.31054688]
[105.35433960 509.31051636]
[105.35433960 494.31051636]
[105.35433960 479.31051636]
[105.35433960 464.31051636]
[105.35433960 449.31051636]
[105.35433960 434.31051636]
[105.35433960 419.31051636]
[105.35433960 404.31051636]
[105.35433960 389.31051636]
[89.85131073 385.67263794]
[75.64718628 378.45541382]
[63.55551529 368.06771851]
[54.26988983 355.10015869]
[48.32419205 340.29150391]
[46.06190109 324.48651123]
[47.61623764 308.58786011]
[52.90233994 293.50448608]
[61.62187576 280.09963989]
[73.27989197 269.14163208]
[87.21288300 261.25949097]
[102.62658691 256.90716553]
[102.01075745 241.91981506]
[93.75746155 229.52091980]
[100.92167664 215.41473389]
[100.30584717 200.42738342]
[97.41619873 196.55450439]
[96.97049713 190.81088257]
[99.98522186 184.81471252]
[99.98522186 169.81471252]
[99.98522186 154.81471252]
[78.88462830 91.53448486]
[70.21801758 79.29153442]
[61.55141068 67.04857635]
[52.88480377 54.80562592]
[44.21819687 42.56267166]
[35.55158997 30.31971931]
[26.88498116 18.07676506]
[18.21837425 5.83381176]
[9.55176640 -6.40914202]
[-3.82229471 0.44032857]
[-18.03503609 5.31667423]
[-32.79710388 8.12061787]
[-47.80796432 8.79507637]
[-62.76200867 7.32631779]
[-77.35479736 3.74424434]
[-91.28923798 -1.87821794]
[-104.28164673 -9.42660236]
[-116.06751251 -18.74723434]
[-126.40689087 -29.65035629]
[-135.08927917 -41.91399765]
[-141.93792725 -55.28848267]
[-146.81338501 -69.50152588]
[-149.61642456 -84.26376343]
[-150.28994751 -99.27466583]
[-148.82026672 -114.22862244]
[-145.23728943 -128.82119751]
[-139.61396790 -142.75527954]
[-132.06477356 -155.74722290]
[-122.74340820 -167.53251648]
[-111.83965302 -177.87121582]
[-99.57546997 -186.55284119]
[-86.20056152 -193.40066528]
[-71.98722076 -198.27523804]
[-57.22480392 -201.07736206]
[-42.21386337 -201.74996948]
[-27.25999641 -200.27935791]
[-12.66765022 -196.69548035]
[1.26609564 -191.07128906]
[14.25756836 -183.52128601]
[26.04227829 -174.19920349]
[36.38030624 -163.29479980]
[45.06117630 -151.03009033]
[51.90816498 -137.65475464]
[56.78187180 -123.44110870]
[59.58307266 -108.67852020]
[60.25474548 -93.66753387]
[58.78321075 -78.71376038]
[55.19842911 -64.12163544]
[49.57337952 -50.18824005]
[42.02258301 -37.19723511]
[32.69976044 -25.41310120]
[21.79471970 -15.07574940]
[30.46132851 -2.83279586]
[39.12793350 9.41015816]
[47.79454422 21.65311241]
[56.46115112 33.89606476]
[65.12775421 46.13901901]
[73.79436493 58.38197327]
[82.46097565 70.62492371]
[91.12757874 82.86788177]
[106.03202820 84.55828094]
[117.22032166 74.56717682]
[128.40861511 64.57608032]
[139.59692383 54.58498764]
[147.38380432 39.52508163]
[164.01078796 42.83866119]
[165.42951965 59.73314667]
[149.58801270 65.77328491]
[138.39971924 75.76438141]
[127.21141815 85.75547791]
[116.02312469 95.74657440]
[119.08771515 102.59188843]
[134.00872803 104.12915039]
[125.21688843 116.28250885]
[128.28147888 123.12782288]
[143.18591309 121.43743134]
[158.09036255 119.74703217]
[166.57661438 106.61243439]
[181.53536987 102.05503845]
[195.90354919 108.22669220]
[202.89694214 122.21334839]
[199.21350098 137.41091919]
[186.59240723 146.64358521]
[170.99296570 145.55195618]
[159.78076172 134.65147400]
[144.87631226 136.34187317]
[129.97186279 138.03227234]
[142.09472656 146.86610413]
[139.52394104 161.64416504]
[125.13007355 165.86514282]
[114.98522186 154.81471252]
[114.98522186 169.81471252]
[114.98522186 184.81471252]
[115.29320526 199.81155396]
[115.90902710 214.79890442]
[124.20636749 228.26979065]
[116.99811554 241.30398560]
[117.61393738 256.29135132]
[131.51715088 258.80447388]
[144.57839966 264.17474365]
[156.21791077 272.16085815]
[165.91964722 282.40557861]
[173.25413513 294.45150757]
[177.89750671 307.76162720]
[179.64581299 321.74322510]
[178.42393494 335.77426147]
[174.28887939 349.23104858]
[167.42703247 361.51602173]
[158.14584351 372.08422852]
[146.86001587 380.46746826]
[134.07295227 386.29513550]
[120.35433960 389.31051636]
[120.35433960 404.31051636]
[120.35433960 419.31051636]
[120.35433960 434.31051636]
[120.35433960 449.31051636]
[120.35433960 464.31051636]
[120.35433960 479.31051636]
[120.35433960 494.31051636]
[120.35433960 509.31051636]
[120.35433960 524.31054688]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[22 129]
[23 128]
[25 126]
[26 125]
[29 124]
[30 123]
[31 122]
[32 91]
[33 90]
[34 89]
[35 88]
[36 87]
[37 86]
[38 85]
[39 84]
[40 83]
[92 102]
[93 101]
[94 100]
[95 99]
[106 118]
[107 117]
[108 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
