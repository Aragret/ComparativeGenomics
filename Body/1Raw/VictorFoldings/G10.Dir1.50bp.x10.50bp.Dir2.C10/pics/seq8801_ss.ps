%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACCAAUCACAUGCCUAUCAUAUAGUAAAACCCAGCCCAUGACCCCUAACAGGGGCCCUCxxxxxxxxxxAACCACGACCAAUGAUAUGAAAAACCAUCGUUGUAUUUCAACUACAAGAACACCAAUGACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[94.86016083 409.30249023]
[94.86016083 394.30249023]
[94.86016083 379.30249023]
[94.86016083 364.30249023]
[94.86016083 349.30249023]
[94.86016083 334.30249023]
[94.86016083 319.30249023]
[94.86016083 304.30249023]
[94.86016083 289.30249023]
[94.86016083 274.30249023]
[78.93235779 270.63134766]
[64.31489563 263.29879761]
[51.83649826 252.71620178]
[42.20562363 239.47943115]
[35.97023773 224.33508301]
[33.48665237 208.13853455]
[34.89915466 191.80555725]
[40.13164139 176.26052856]
[48.89169693 162.38415527]
[60.68693924 150.96356201]
[74.85269165 142.64761353]
[90.58944702 137.91011047]
[89.65381622 122.93931580]
[81.87612152 110.96402740]
[82.83011627 98.98596954]
[89.57482910 91.87499237]
[81.32253265 79.34902954]
[73.07024384 66.82307434]
[64.81795502 54.29710770]
[56.56567001 41.77114868]
[48.31338120 29.24518585]
[34.85800171 28.05755424]
[24.70504189 19.44678497]
[21.43377304 6.74351311]
[26.02646637 -5.33555746]
[18.03655052 -18.03048706]
[-1.74933231 -11.79139996]
[-22.48144722 -11.58021259]
[-42.36523438 -17.40759850]
[-59.68177414 -28.76186180]
[-72.93639374 -44.65386581]
[-80.98767090 -63.70319748]
[-83.14572906 -84.25805664]
[-79.23133850 -104.53851318]
[-69.59078979 -122.79061890]
[-80.68210602 -132.88926697]
[-91.77342224 -142.98791504]
[-102.86473083 -153.08656311]
[-118.27795410 -156.65632629]
[-122.47968292 -170.94599915]
[-133.57099915 -181.04464722]
[-148.73881531 -177.77096558]
[-162.92042542 -184.06869507]
[-170.66271973 -197.51625061]
[-168.98861694 -212.94274902]
[-158.54183960 -224.41641235]
[-143.33941650 -227.52534485]
[-129.22694397 -221.07414246]
[-121.63099670 -207.54339600]
[-123.47235107 -192.13595581]
[-112.38103485 -182.03730774]
[-97.76113892 -179.18988037]
[-92.76608276 -164.17788696]
[-81.67476654 -154.07923889]
[-70.58345032 -143.98059082]
[-59.49213791 -133.88194275]
[-51.40632248 -140.08209229]
[-42.50528336 -145.04672241]
[-32.97644424 -148.67042542]
[-23.02058220 -150.87602234]
[-12.84759045 -151.61622620]
[-2.67205143 -150.87466431]
[7.29128885 -148.66621399]
[16.83204842 -145.03672791]
[25.74865913 -140.06207275]
[33.85261917 -133.84652710]
[40.97247314 -126.52063751]
[46.95745850 -118.23842621]
[51.68067551 -109.17420197]
[55.04179382 -99.51885223]
[56.96917343 -89.47583771]
[57.42139816 -79.25691986]
[56.38816452 -69.07765961]
[53.89051056 -59.15290833]
[49.98038864 -49.69225311]
[44.73959732 -40.89559937]
[38.27804947 -32.94893265]
[30.73147964 -26.02040291]
[38.72139740 -13.32547379]
[55.23947525 -10.32363892]
[64.68767548 3.95976186]
[60.83934021 20.99289703]
[69.09162903 33.51885986]
[77.34391785 46.04481888]
[85.59620667 58.57078171]
[93.84849548 71.09674072]
[102.10078430 83.62270355]
[115.88317108 89.54267120]
[130.64923096 86.90380859]
[145.41528320 84.26493835]
[160.18133545 81.62607574]
[174.94738770 78.98721313]
[189.62391663 75.88889313]
[204.19662476 72.33412933]
[218.76931763 68.77936554]
[230.24333191 57.06274033]
[246.05776978 61.40272903]
[249.94410706 77.33472443]
[237.90440369 88.46925354]
[222.32408142 83.35206604]
[207.75138855 86.90682983]
[193.17868042 90.46159363]
[191.03033447 93.33423615]
[187.35411072 95.28027344]
[182.61460876 95.57953644]
[177.58625793 93.75326538]
[162.82020569 96.39213562]
[148.05413818 99.03099823]
[133.28808594 101.66986084]
[118.52203369 104.30872345]
[132.71093750 109.17443848]
[136.96191406 123.55947113]
[127.69699860 135.35612488]
[112.71433258 134.63533020]
[104.62461090 122.00368500]
[105.56023407 136.97447205]
[119.14217377 138.99693298]
[132.05088806 143.66342163]
[143.77726746 150.78761292]
[153.85932922 160.08633423]
[161.90032959 171.19075012]
[167.58441162 183.66105652]
[170.68905640 197.00386047]
[171.09371948 210.69172668]
[168.78456116 224.18397522]
[163.85487366 236.94812012]
[156.50137329 248.48080444]
[147.01625061 258.32772827]
[135.77568054 266.10147095]
[123.22480774 271.49676514]
[109.86016083 274.30249023]
[109.86016083 289.30249023]
[109.86016083 304.30249023]
[109.86016083 319.30249023]
[109.86016083 334.30249023]
[109.86016083 349.30249023]
[109.86016083 364.30249023]
[109.86016083 379.30249023]
[109.86016083 394.30249023]
[109.86016083 409.30249023]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[22 126]
[23 125]
[26 97]
[27 96]
[28 95]
[29 94]
[30 93]
[31 92]
[35 89]
[36 88]
[45 66]
[46 65]
[47 64]
[48 63]
[50 61]
[51 60]
[98 120]
[99 119]
[100 118]
[101 117]
[102 116]
[103 112]
[104 111]
[105 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
