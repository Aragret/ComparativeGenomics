%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGUUAAAUCAACAAAACUGCUCGCCAGAACACUACGAGCCACAGCUUAAAACUCAAAGGACxxxxxxxxxxUCCCCAUGGAUGACCCCCCUCAGAUAGGGGUCCCUUGACCACCAUCCUCCGUGAAAUCAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[85.24358368 300.63128662]
[85.24358368 285.63128662]
[85.24358368 270.63128662]
[85.24358368 255.63130188]
[85.24358368 240.63130188]
[85.24358368 225.63130188]
[85.24358368 210.63130188]
[85.24358368 195.63130188]
[85.24358368 180.63130188]
[85.24358368 165.63130188]
[71.06703186 160.72975159]
[61.80207825 172.52638245]
[52.53713226 184.32302856]
[53.01649094 200.35891724]
[40.68533325 210.62156677]
[25.00306702 207.23835754]
[17.99978638 192.80459595]
[25.04780579 178.39262390]
[40.74048996 175.05807495]
[50.00543976 163.26144409]
[59.27038956 151.46479797]
[43.26979065 129.16989136]
[38.12419128 103.00624847]
[23.16394043 101.91493988]
[8.83742046 108.62771606]
[-3.29320335 99.98496246]
[-18.25345230 98.89365387]
[-33.24046707 98.26967621]
[-48.23965836 98.11363983]
[-63.23884583 97.95760345]
[-78.23803711 97.80156708]
[-93.23722076 97.64553070]
[-103.01879883 106.11752319]
[-115.54846954 105.64190674]
[-124.09326935 97.02252960]
[-139.08596802 96.55448151]
[-153.27333069 104.77951050]
[-167.35327148 96.37194824]
[-166.84156799 79.98078918]
[-152.26461792 72.46784210]
[-138.61791992 81.56179047]
[-123.62522888 82.02983093]
[-108.66986084 72.90092468]
[-93.08118439 82.64633942]
[-78.08199310 82.80237579]
[-63.08280945 82.95841217]
[-48.08361816 83.11444855]
[-33.08443069 83.27048492]
[-30.29292297 81.01771545]
[-26.24985695 80.04032898]
[-21.58336449 80.92136383]
[-17.16214180 83.93340302]
[-2.20189285 85.02471161]
[11.05457020 78.23387909]
[24.25525093 86.95468903]
[39.21549988 88.04600525]
[42.82865143 76.14438629]
[48.74649048 65.20443726]
[56.73045731 55.66716766]
[66.45870209 47.91703796]
[77.53906250 42.26647568]
[89.52487183 38.94326401]
[101.93295288 38.08136749]
[114.26310730 39.71553040]
[126.01829529 43.77988052]
[136.72462463 50.11057281]
[145.95053101 58.45240402]
[158.21289062 49.81328964]
[170.47526550 41.17417145]
[155.50225830 42.07377625]
[140.96241760 38.38693619]
[128.22718811 30.46140862]
[118.49782562 19.04477310]
[112.69205475 5.21390009]
[111.35750580 -9.72661400]
[114.62005615 -24.36750793]
[122.17196655 -37.32777786]
[133.30090332 -47.38495255]
[146.95713806 -53.59038544]
[161.85253906 -55.35875320]
[176.58209229 -52.52325058]
[189.75645447 -45.35134125]
[200.13293457 -34.51950836]
[206.73278809 -21.04946899]
[208.93347168 -6.21178198]
[206.52742004 8.59399033]
[199.74157715 21.97129440]
[189.21585083 32.65842819]
[203.78855896 29.10366821]
[218.36126709 25.54890633]
[232.93395996 21.99414444]
[247.50666809 18.43938255]
[261.57818604 13.24396706]
[274.96447754 6.47585201]
[288.35076904 -0.29226288]
[301.73703003 -7.06037760]
[315.12332153 -13.82849216]
[316.60845947 -29.18420601]
[326.17767334 -41.28517151]
[340.77749634 -46.27001572]
[355.74917603 -42.54809570]
[366.31527710 -31.30705643]
[369.10421753 -16.13387871]
[363.22604370 -1.87026393]
[350.55648804 6.93231773]
[335.13830566 7.46499491]
[321.89144897 -0.44220757]
[308.50515747 6.32590723]
[295.11886597 13.09402180]
[281.73257446 19.86213684]
[268.34631348 26.63025093]
[283.11270142 29.26725006]
[295.04055786 38.36263275]
[301.49157715 51.90458298]
[301.03881836 66.89775085]
[293.78247070 80.02577972]
[281.32751465 88.38487244]
[266.42892456 90.12608337]
[252.38209534 84.86425781]
[242.29408264 73.76327515]
[238.39624023 59.27856064]
[241.55075073 44.61400986]
[251.06143188 33.01208496]
[236.48872375 36.56684875]
[221.91603088 40.12160873]
[207.34332275 43.67637253]
[192.77061462 47.23113251]
[179.11437988 53.43653870]
[166.85200500 62.07565689]
[154.58964539 70.71477509]
[159.40596008 81.28688812]
[162.18342590 92.63191986]
[162.80220032 104.35825348]
[161.21734619 116.05659485]
[157.46127319 127.31431580]
[151.64335632 137.72993469]
[143.94694519 146.92750549]
[134.62356567 154.57011414]
[123.98481750 160.37222290]
[112.39194489 164.11029053]
[100.24358368 165.63130188]
[100.24358368 180.63130188]
[100.24358368 195.63130188]
[100.24358368 210.63130188]
[100.24358368 225.63130188]
[100.24358368 240.63130188]
[100.24358368 255.63130188]
[100.24358368 270.63128662]
[100.24358368 285.63128662]
[100.24358368 300.63128662]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 21]
[12 20]
[13 19]
[23 56]
[24 55]
[26 53]
[27 52]
[28 48]
[29 47]
[30 46]
[31 45]
[32 44]
[35 42]
[36 41]
[67 130]
[68 129]
[69 128]
[88 127]
[89 126]
[90 125]
[91 124]
[92 123]
[93 111]
[94 110]
[95 109]
[96 108]
[97 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
