%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACCCCUCCCCACAUCAAGCCCGAAUGAUAUUUCCUAUUCGCCUACACAAUUCUCCGAUCCxxxxxxxxxxAGUACAGCAAUCAACCCUCAACUAUCACACAUCAACUGCAACUCCAAAGCCACCCCUCACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-1.89257491 327.18521118]
[-8.44044590 340.68060303]
[-14.98831558 354.17599487]
[-21.53618622 367.67138672]
[-28.08405685 381.16674805]
[-34.63192749 394.66213989]
[-41.17979813 408.15753174]
[-47.72766876 421.65292358]
[-54.27553940 435.14828491]
[-55.74986649 452.03802490]
[-72.38766479 455.29684448]
[-80.12493896 440.21139526]
[-67.77091980 428.60043335]
[-61.22305298 415.10504150]
[-54.67518234 401.60964966]
[-48.12731171 388.11425781]
[-41.57944107 374.61889648]
[-35.03157043 361.12350464]
[-28.48369980 347.62811279]
[-21.93582916 334.13272095]
[-15.38795853 320.63735962]
[-38.57865906 306.86029053]
[-60.14291000 290.65536499]
[-79.82762146 272.21279907]
[-97.40175629 251.74903870]
[-112.65905762 229.50424194]
[-125.42045593 205.73950195]
[-135.53616333 180.73371887]
[-142.88748169 154.78041077]
[-147.38810730 128.18415833]
[-148.98522949 101.25712585]
[-147.66009521 74.31533051]
[-162.52668762 72.31927490]
[-177.39328003 70.32321930]
[-192.25988770 68.32716370]
[-207.12648010 66.33110809]
[-216.44396973 78.54093933]
[-230.62423706 84.44140625]
[-245.85287476 82.44532013]
[-258.03344727 73.08960724]
[-263.88943481 58.89091110]
[-261.84561157 43.66861343]
[-252.45176697 31.51742935]
[-238.23478699 25.70597267]
[-223.01896667 27.79749107]
[-210.89729309 37.22938156]
[-205.13043213 51.46450806]
[-190.26382446 53.46056366]
[-175.39723206 55.45661926]
[-160.53062439 57.45267868]
[-145.66403198 59.44873428]
[-143.42195129 47.64569473]
[-140.61314392 35.96455002]
[-137.24412537 24.43249321]
[-133.32275391 13.07637501]
[-128.85815430 1.92263305]
[-123.86071777 -9.00276279]
[-118.34208679 -19.67437553]
[-112.31510162 -30.06735992]
[-105.79380798 -40.15752029]
[-98.79338074 -49.92136002]
[-91.33011627 -59.33615112]
[-83.42139435 -68.37997437]
[-75.08562469 -77.03176880]
[-66.34221649 -85.27139282]
[-57.21152496 -93.07966614]
[-47.71481323 -100.43840790]
[-37.87418747 -107.33048248]
[-27.71256256 -113.73985291]
[-17.25359154 -119.65158081]
[-6.52163029 -125.05191803]
[4.45833778 -129.92828369]
[15.66074848 -134.26931763]
[27.05951881 -138.06492615]
[38.62811279 -141.30625916]
[50.33959198 -143.98579407]
[62.16669083 -146.09725952]
[74.08187866 -147.63577271]
[86.05740356 -148.59771729]
[98.06539154 -148.98088074]
[110.07788849 -148.78436279]
[122.06691742 -148.00862122]
[134.00456238 -146.65545654]
[145.86305237 -144.72801208]
[157.61474609 -142.23080444]
[169.23231506 -139.16961670]
[180.68869019 -135.55160522]
[191.95719910 -131.38516235]
[203.01162720 -126.68000793]
[213.82620239 -121.44709778]
[224.37577820 -115.69860077]
[234.63577271 -109.44791412]
[244.58230591 -102.70958710]
[254.19223022 -95.49930573]
[263.44314575 -87.83386230]
[272.31353760 -79.73109436]
[280.78274536 -71.20987701]
[288.83105469 -62.29004669]
[296.43969727 -52.99236298]
[303.59100342 -43.33848572]
[310.26831055 -33.35087967]
[316.45605469 -23.05280495]
[322.13986206 -12.46823597]
[327.30645752 -1.62181544]
[331.94384766 9.46120262]
[336.04119873 20.75501442]
[339.58901978 32.23332596]
[342.57901001 43.86941528]
[345.00424194 55.63618851]
[346.85903931 67.50624847]
[348.13906860 79.45196533]
[348.84140015 91.44551849]
[348.96435547 103.45899200]
[348.50769043 115.46440887]
[347.47244263 127.43382263]
[345.86102295 139.33935547]
[343.67715454 151.15332031]
[340.92599487 162.84817505]
[337.61386108 174.39669800]
[333.74853516 185.77201843]
[329.33898926 196.94763184]
[324.39550781 207.89753723]
[318.92956543 218.59623718]
[312.95391846 229.01881409]
[306.48245239 239.14100647]
[299.53024292 248.93925476]
[292.11349487 258.39074707]
[284.24948120 267.47344971]
[275.95645142 276.16622925]
[267.25378418 284.44888306]
[258.16171265 292.30209351]
[248.70141602 299.70758057]
[238.89489746 306.64807129]
[228.76499939 313.10748291]
[218.33531189 319.07070923]
[207.63009644 324.52389526]
[196.67431641 329.45434570]
[185.49345398 333.85058594]
[174.11352539 337.70236206]
[162.56106567 341.00070190]
[150.86294556 343.73794556]
[139.04640198 345.90771484]
[127.13894653 347.50494385]
[115.16830444 348.52593994]
[103.16235352 348.96832275]
[91.14903259 348.83102417]
[79.15632629 348.11441040]
[67.21214294 346.82012939]
[55.34430313 344.95120239]
[43.58042908 342.51196289]
[31.94791031 339.50811768]
[20.47383308 335.94662476]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 21]
[2 20]
[3 19]
[4 18]
[5 17]
[6 16]
[7 15]
[8 14]
[9 13]
[32 51]
[33 50]
[34 49]
[35 48]
[36 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
