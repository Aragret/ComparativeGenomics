%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUAUCUGAACACACAAUAGCUAAGACCCAAACUGGGAUUAGAUACCCCACUAUGCUUAGCxxxxxxxxxxUUAAGAAAGCGUUCAAGCUCAACACCCACUACCUAAAAAAUCCCAAACAUAUAACUGAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[130.17947388 285.61364746]
[129.24385071 270.64285278]
[128.30822754 255.67205811]
[127.37259674 240.70126343]
[126.43696594 225.73046875]
[125.50133514 210.75967407]
[124.56571198 195.78887939]
[121.16273499 181.17999268]
[115.38645935 167.33677673]
[109.61018372 153.49356079]
[103.83391571 139.65034485]
[98.05764008 125.80712128]
[87.83859253 118.95092773]
[83.23464203 109.26455688]
[84.20844269 100.14876556]
[89.00959015 94.19423676]
[77.91827393 84.09558105]
[66.82696533 73.99693298]
[55.73564529 63.89828491]
[44.64433289 53.79963684]
[40.54736328 55.83486557]
[35.99660110 56.94820404]
[31.20212173 57.03899765]
[26.39608955 56.05499649]
[21.82150841 53.99708939]
[17.71997643 50.92146683]
[3.30776072 46.76358032]
[-11.10445499 42.60569382]
[-25.51667213 38.44780731]
[-40.22463226 35.50232315]
[-55.12653351 33.78963470]
[-70.02843475 32.07694244]
[-84.93034363 30.36425400]
[-95.53875732 37.77474213]
[-107.95130920 36.00063324]
[-115.55489349 26.54056740]
[-130.41793823 24.51823235]
[-145.28099060 22.49589920]
[-160.14404297 20.47356415]
[-176.65373230 24.32923126]
[-184.92906189 9.53209209]
[-173.00103760 -2.51608610]
[-158.12170410 5.61051750]
[-143.25865173 7.63285160]
[-128.39561462 9.65518665]
[-113.53256226 11.67752075]
[-97.71010590 4.15091372]
[-83.21765137 15.46235180]
[-68.31575012 17.17504120]
[-53.41384506 18.88773155]
[-38.51194382 20.60042191]
[-48.19824219 9.14723015]
[-49.46260834 -5.79938745]
[-41.83788300 -18.71695518]
[-28.14124680 -24.83268738]
[-13.43333817 -21.88694382]
[-3.14843416 -10.96811771]
[-1.08660340 3.88950205]
[-8.00965023 17.19631958]
[-21.35878372 24.03558922]
[-6.94656801 28.19347763]
[7.46564817 32.35136414]
[21.87786484 36.50925064]
[34.14023209 27.87013626]
[35.07585907 12.89934444]
[36.01148987 -2.07144713]
[36.94711685 -17.04223824]
[22.80319595 -22.37523842]
[10.86059856 -31.64161873]
[2.18125391 -44.01741409]
[-2.46307755 -58.40218735]
[-2.65942454 -73.51684570]
[1.60967195 -88.01740265]
[9.96460629 -100.61448669]
[21.66246414 -110.18796539]
[35.66307831 -115.88657379]
[50.72152710 -117.20360565]
[65.49881744 -114.02193451]
[78.68096924 -106.62448120]
[89.09583282 -95.66902924]
[95.81732941 -82.12971497]
[98.24777222 -67.21044922]
[96.17106628 -52.23785400]
[89.77185822 -38.54327393]
[79.61917114 -27.34441757]
[66.61576843 -19.63708687]
[51.91790771 -16.10660934]
[50.98228073 -1.13581860]
[50.04665375 13.83497334]
[49.11102295 28.80576515]
[54.74298096 42.70832062]
[65.83429718 52.80696869]
[76.92561340 62.90562057]
[88.01692963 73.00427246]
[99.10824585 83.10292053]
[113.92600250 85.43402100]
[127.58224487 79.22861481]
[128.38766479 63.94431305]
[136.21376038 50.79095840]
[149.26216125 42.79109573]
[164.53443909 41.78303528]
[178.52113342 47.99842072]
[188.00819397 60.00900269]
[190.81558228 75.05484009]
[186.29817200 89.67850494]
[175.49403381 100.51958466]
[160.88587952 105.08689117]
[145.83055115 102.33087158]
[133.78764343 92.88485718]
[120.13140869 99.09026337]
[135.09091187 100.19165802]
[149.77914429 97.14925385]
[163.53642273 103.12728882]
[171.33465576 115.94086456]
[170.32366943 130.90675354]
[160.87295532 142.55509949]
[146.43666077 146.62858582]
[132.29106140 141.63836670]
[123.60681152 129.41012573]
[111.90086365 120.03084564]
[117.67713165 133.87406921]
[123.45340729 147.71728516]
[129.22967529 161.56050110]
[135.00595093 175.40371704]
[137.56510925 160.62364197]
[144.94146729 147.56265259]
[156.27735901 137.73934937]
[170.25479126 132.29585266]
[185.24861145 131.86511230]
[199.51548767 136.49717712]
[211.39663696 145.65350342]
[219.51065063 158.26948547]
[222.91410828 172.87826538]
[221.21130371 187.78129578]
[214.60020447 201.24581909]
[203.84948730 211.70632935]
[190.20913696 217.94657898]
[175.26509094 219.24102783]
[160.75489807 215.43917847]
[148.36563110 206.98306274]
[139.53649902 194.85325623]
[140.47213745 209.82405090]
[141.40776062 224.79484558]
[142.34338379 239.76562500]
[143.27902222 254.73641968]
[144.21464539 269.70721436]
[145.15026855 284.67800903]
[154.66560364 298.03430176]
[147.61116028 312.83859253]
[131.24394226 313.86148071]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 147]
[2 146]
[3 145]
[4 144]
[5 143]
[6 142]
[7 141]
[8 124]
[9 123]
[10 122]
[11 121]
[12 120]
[16 95]
[17 94]
[18 93]
[19 92]
[20 91]
[26 63]
[27 62]
[28 61]
[29 60]
[30 51]
[31 50]
[32 49]
[33 48]
[36 46]
[37 45]
[38 44]
[39 43]
[64 90]
[65 89]
[66 88]
[67 87]
[96 110]
[97 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
