%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUUCACGUCAUUAUUGGCUCAACUUUCCUCACUAUCUGCUUCAUCCGCCAACUAAUAUUUxxxxxxxxxxCAAUCGCCCACAUCACUCGAGACGUAAAUUAUGGCUGAAUCAUCCGCUACCUUCACGCCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[101.57534027 282.81973267]
[101.57534027 267.81973267]
[101.57534027 252.81974792]
[101.57534027 237.81974792]
[101.57534027 222.81974792]
[101.57534027 207.81974792]
[101.57534027 192.81974792]
[101.57534027 177.81974792]
[101.57534027 162.81974792]
[101.57534027 147.81974792]
[80.55710602 141.87155151]
[65.08799744 127.56978607]
[58.05474854 108.53650665]
[60.33096695 89.15449524]
[70.72625732 73.56266785]
[61.70873260 61.57583618]
[52.69120026 49.58900452]
[43.67367172 37.60217285]
[34.65614319 25.61533928]
[10.83802605 14.08852577]
[-3.80547500 10.83769989]
[-18.44897652 7.58687401]
[-33.09247589 4.33604813]
[-47.76900482 1.23772645]
[-62.47696304 -1.70775604]
[-77.18492889 -4.65323830]
[-91.89289093 -7.59872103]
[-106.60085297 -10.54420376]
[-112.55715942 3.28388691]
[-121.25865173 15.57118607]
[-132.32493591 25.78054619]
[-145.27224731 33.46565628]
[-159.53457642 38.29056168]
[-174.48843384 40.04433060]
[-189.48010254 38.65029907]
[-203.85423279 34.16941071]
[-216.98242188 26.79754829]
[-228.29077148 16.85697937]
[-237.28492737 4.78226042]
[-243.57170105 -8.89875221]
[-246.87626648 -23.58798218]
[-247.05416870 -38.64328384]
[-244.09762573 -53.40649796]
[-238.13587952 -67.23224640]
[-229.42955017 -79.51612091]
[-218.35925293 -89.72112274]
[-205.40892029 -97.40113831]
[-191.14469910 -102.22042847]
[-176.19013977 -103.96832275]
[-161.19902039 -102.56838989]
[-146.82666016 -98.08184814]
[-133.70137024 -90.70481873]
[-122.39693451 -80.75980377]
[-113.40753174 -68.68154907]
[-107.12613678 -54.99806213]
[-103.82734680 -40.30753326]
[-103.65536499 -25.25216484]
[-88.94740295 -22.30668259]
[-74.23944092 -19.36120033]
[-59.53148270 -16.41571808]
[-44.82352066 -13.47023487]
[-37.60061646 -15.25217724]
[-29.84165192 -10.30745316]
[-15.19815063 -7.05662727]
[-0.55464929 -3.80580163]
[14.08885193 -0.55497581]
[2.79649949 -10.42831230]
[-11.66104412 -14.42574024]
[-23.97048187 -22.99765587]
[-32.73454285 -35.17103958]
[-36.95839310 -49.56406021]
[-36.16257858 -64.54293823]
[-30.43743134 -78.40737152]
[-20.43282509 -89.58359528]
[-7.28440905 -96.80295563]
[7.51530981 -99.24596405]
[22.28638077 -96.63532257]
[35.35210419 -89.26735687]
[45.22935867 -77.97843170]
[50.79695511 -64.04998016]
[51.42289734 -49.06304550]
[47.03614044 -34.71883392]
[38.13607788 -22.64698601]
[35.35369110 -7.90730190]
[44.86204910 -19.50864410]
[54.37040710 -31.10998535]
[48.33878708 -45.17690277]
[49.54683685 -60.43466187]
[57.71695328 -73.37713623]
[70.97170258 -81.03025055]
[86.26524353 -81.63536835]
[100.08323669 -75.05343628]
[109.25039673 -62.79693985]
[111.66018677 -47.68232727]
[106.75885010 -33.18283081]
[95.67267609 -22.63032150]
[80.94919586 -18.44969559]
[65.97174835 -21.60162544]
[56.46339035 -10.00028515]
[46.95503235 1.60105646]
[46.64297485 16.59781075]
[55.66050339 28.58464241]
[64.67803192 40.57147598]
[73.69556427 52.55830765]
[82.71309662 64.54514313]
[95.26954651 59.63137817]
[109.14649200 59.16687393]
[122.76891327 63.46975327]
[134.50331116 72.30226135]
[142.85279846 84.86981201]
[146.64541626 99.88798523]
[145.19213867 115.71244812]
[159.51472473 120.16926575]
[173.83732605 124.62608337]
[188.15992737 129.08290100]
[203.63578796 125.79533386]
[213.48937988 136.96476746]
[227.81198120 141.42156982]
[243.68115234 137.28617859]
[255.00288391 149.15000916]
[250.13035583 164.80856323]
[234.07600403 168.15367126]
[223.35516357 155.74417114]
[209.03256226 151.28735352]
[194.58114624 154.89369202]
[183.70310974 143.40550232]
[169.38050842 138.94868469]
[155.05790710 134.49186707]
[140.73532104 130.03504944]
[134.69532776 134.48121643]
[145.12786865 145.25906372]
[155.56042480 156.03691101]
[169.11460876 162.46217346]
[173.58163452 176.78158569]
[166.08485413 189.77381897]
[151.45199585 193.07220459]
[139.10624695 184.55267334]
[136.99810791 169.70104980]
[129.80671692 156.53730774]
[122.61533356 143.37356567]
[116.57534027 147.81974792]
[116.57534027 162.81974792]
[116.57534027 177.81974792]
[116.57534027 192.81974792]
[116.57534027 207.81974792]
[116.57534027 222.81974792]
[116.57534027 237.81974792]
[116.57534027 252.81974792]
[116.57534027 267.81973267]
[116.57534027 282.81973267]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[15 105]
[16 104]
[17 103]
[18 102]
[19 101]
[20 66]
[21 65]
[22 64]
[23 63]
[24 61]
[25 60]
[26 59]
[27 58]
[28 57]
[84 100]
[85 99]
[86 98]
[112 129]
[113 128]
[114 127]
[115 126]
[117 124]
[118 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
