%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGGCUACAAAGUAAGCGCAAGUACCCACGUAAAGACGUUAGGUCAAGGUGUAGCCCAUGAxxxxxxxxxxAAAGAGCACACCCGUCUAUGUAGCAAAAUAGUGGGAAGAUUUAUAGGUAGAGGCGACAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[227.01412964 424.09240723]
[227.01412964 409.09240723]
[227.01412964 394.09240723]
[227.01412964 379.09240723]
[227.01412964 364.09240723]
[227.01412964 349.09240723]
[227.01412964 334.09240723]
[227.01412964 319.09240723]
[227.01412964 304.09240723]
[227.01412964 289.09240723]
[207.99934387 277.30505371]
[201.78024292 258.19522095]
[208.57171631 241.71189880]
[198.82406616 230.31088257]
[189.07641602 218.90986633]
[179.32876587 207.50883484]
[169.58111572 196.10781860]
[159.83345032 184.70680237]
[145.68185425 180.06123352]
[142.59477234 164.54412842]
[132.84712219 153.14311218]
[129.31416321 152.52204895]
[125.91874695 150.11938477]
[123.51318359 146.02479553]
[122.87414551 140.71336365]
[113.85661316 128.72653198]
[104.83908844 116.73970032]
[103.84101105 131.70646667]
[92.11788177 141.06425476]
[77.30210114 138.72064209]
[69.03954315 126.20145416]
[72.70958710 111.65735626]
[85.92239380 104.55738831]
[71.27889252 101.30656433]
[56.63539124 98.05574036]
[39.24227524 104.01052094]
[26.74788094 91.72679138]
[12.03991985 88.78131104]
[-2.66804123 85.83583069]
[-17.37600327 82.89034271]
[-32.72997284 88.65121460]
[-45.22242737 78.02716064]
[-42.00220108 61.94729233]
[-26.38198471 56.95320129]
[-14.43052006 68.18238068]
[0.27744123 71.12786865]
[14.98540306 74.07334900]
[29.69336510 77.01882935]
[39.97080612 70.56271362]
[52.28168869 72.94203949]
[59.88621521 83.41223907]
[74.52971649 86.66306305]
[89.17321777 89.91388702]
[94.92411804 85.09962463]
[92.33644867 70.32451630]
[106.42592621 75.47109985]
[112.17682648 70.65683746]
[111.55284882 55.66981888]
[110.92887115 40.68280411]
[110.30489349 25.69578743]
[109.68091583 10.70877266]
[106.17829895 2.20092058]
[109.20314026 -4.59584522]
[108.89108276 -19.59259796]
[94.26985168 -23.35054970]
[81.20527649 -30.91490364]
[70.66683197 -41.72433472]
[63.43654633 -54.97671509]
[60.05095291 -69.68862152]
[60.76128387 -84.76834869]
[65.51482391 -99.09686279]
[73.95883942 -111.61090851]
[85.46672058 -121.38184357]
[99.18450928 -127.68461609]
[114.09424591 -130.05151367]
[129.08953857 -128.30688477]
[143.05764771 -122.58020782]
[154.96202087 -113.29644012]
[163.91928101 -101.14448547]
[169.26475525 -87.02611542]
[170.60176086 -71.98899078]
[167.83110046 -57.14898300]
[161.15835571 -43.60730362]
[151.07868958 -32.36884689]
[138.34008789 -24.26757431]
[123.88783264 -19.90465546]
[124.19989014 -4.90790129]
[124.66793060 10.08479500]
[125.29190826 25.07181168]
[125.91588593 40.05882645]
[126.53986359 55.04584503]
[127.16384125 70.03285980]
[116.82592010 107.72217560]
[125.84344482 119.70900726]
[134.86097717 131.69584656]
[144.24813843 143.39546204]
[153.99578857 154.79647827]
[168.84461975 160.25752258]
[171.23448181 174.95915222]
[180.98213196 186.36016846]
[190.72978210 197.76118469]
[200.47743225 209.16221619]
[210.22508240 220.56323242]
[219.97273254 231.96424866]
[245.29469299 229.60795593]
[264.02377319 253.22009277]
[279.01647949 253.68814087]
[294.00918579 254.15618896]
[309.00186157 254.62422180]
[317.65850830 241.85449219]
[331.85372925 235.81304932]
[347.05792236 238.42771912]
[358.41943359 248.86416626]
[362.31289673 263.79214478]
[357.49588013 278.44821167]
[345.50552368 288.15563965]
[330.16784668 289.81686401]
[316.37710571 282.90176392]
[308.53381348 269.61691284]
[293.54113770 269.14886475]
[278.54843140 268.68084717]
[263.55575562 268.21279907]
[258.17034912 273.43270874]
[271.10327148 281.03134155]
[284.03622437 288.62994385]
[296.96914673 296.22857666]
[311.91134644 297.54421997]
[324.74118042 305.31564331]
[332.82772827 317.94921875]
[334.51275635 332.85427856]
[329.45068359 346.97433472]
[318.67956543 357.41381836]
[304.40817261 362.03204346]
[289.56307983 359.88189697]
[277.18844604 351.40435791]
[269.82189941 338.33786011]
[268.97366333 323.36373901]
[261.78228760 310.19998169]
[254.59091187 297.03625488]
[247.39952087 283.87249756]
[242.01412964 289.09240723]
[242.01412964 304.09240723]
[242.01412964 319.09240723]
[242.01412964 334.09240723]
[242.01412964 349.09240723]
[242.01412964 364.09240723]
[242.01412964 379.09240723]
[242.01412964 394.09240723]
[242.01412964 409.09240723]
[242.01412964 424.09240723]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[13 104]
[14 103]
[15 102]
[16 101]
[17 100]
[18 99]
[20 97]
[21 96]
[25 95]
[26 94]
[27 93]
[33 53]
[34 52]
[35 51]
[37 48]
[38 47]
[39 46]
[40 45]
[57 92]
[58 91]
[59 90]
[60 89]
[61 88]
[63 87]
[64 86]
[106 122]
[107 121]
[108 120]
[109 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
