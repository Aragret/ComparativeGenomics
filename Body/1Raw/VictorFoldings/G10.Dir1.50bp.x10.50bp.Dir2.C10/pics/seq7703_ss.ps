%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUCCUUUACAUAACAGACGAGGUCAACGAUCCCUCCCUUACCAUCAAAUCAAUUGGCCACxxxxxxxxxxUCAGUUGAUGAUACGCCCGAGCAGAUGCCAACACAGCAGCCAUUCAAGCAAUCCUAUACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 458.02871704]
[92.50000000 443.02871704]
[92.50000000 428.02871704]
[92.50000000 413.02871704]
[92.50000000 398.02871704]
[92.50000000 383.02871704]
[92.50000000 368.02871704]
[92.50000000 353.02871704]
[92.50000000 338.02871704]
[92.50000000 323.02871704]
[77.77018738 320.29507446]
[63.78981781 314.89981079]
[51.03553772 307.02529907]
[39.94248962 296.93853760]
[30.88946152 284.98190308]
[24.18593407 271.56173706]
[20.06152153 257.13442993]
[18.65810013 242.19093323]
[20.02492142 227.24005127]
[24.11689758 212.79109192]
[30.79607773 199.33651733]
[39.83630371 187.33523560]
[50.93086243 177.19683838]
[63.70289993 169.26768494]
[77.71820831 163.81907654]
[92.50000000 161.03793335]
[92.50000000 146.03793335]
[67.53578186 133.49349976]
[54.21851349 108.93286133]
[39.22581482 109.40090179]
[24.23311996 109.86894226]
[9.24042416 110.33699036]
[1.39715612 123.62181854]
[-12.39359951 130.53691101]
[-27.73126221 128.87570190]
[-39.72164154 119.16826630]
[-44.53865051 104.51220703]
[-40.64519501 89.58422852]
[-29.28366852 79.14778900]
[-14.07949066 76.53311920]
[0.11574236 82.57455444]
[8.77238178 95.34429169]
[23.76507759 94.87625122]
[38.75777435 94.40820312]
[53.75046921 93.94016266]
[55.10222244 87.35364532]
[57.38690186 81.02989960]
[60.55703735 75.10033417]
[64.54675293 69.68815613]
[69.27314758 64.90583038]
[74.63800812 60.85271454]
[80.52986908 57.61303711]
[86.82629395 55.25411606]
[84.95867920 40.37083817]
[83.09106445 25.48755836]
[81.22344971 10.60427761]
[77.48290253 5.02612114]
[77.21181488 -0.73216081]
[79.60106659 -4.93537331]
[78.35418701 -19.88346100]
[77.10731506 -34.83154678]
[75.86044312 -49.77963257]
[74.61356354 -64.72772217]
[73.36669159 -79.67581177]
[72.11981964 -94.62389374]
[57.48745346 -98.58240509]
[45.09320831 -107.30928802]
[36.43374252 -119.75072479]
[32.55473328 -134.40435791]
[33.92458344 -149.50070190]
[40.37788391 -163.21678162]
[51.13536072 -173.89630127]
[64.89800262 -180.24969482]
[80.00389862 -181.50973511]
[94.62893677 -177.52426147]
[107.00708008 -168.77456665]
[115.64360809 -156.31718445]
[119.49560547 -141.65641785]
[118.09793854 -126.56263733]
[111.61936951 -112.85847473]
[100.84223175 -102.19878387]
[87.06790161 -95.87077332]
[88.31478119 -80.92268372]
[89.56165314 -65.97459412]
[90.80852509 -51.02650833]
[92.05540466 -36.07842255]
[93.30227661 -21.13033485]
[94.54914856 -6.18224764]
[96.10673523 8.73666477]
[97.97434235 23.61994362]
[99.84195709 38.50322342]
[101.70957184 53.38650513]
[113.32134247 55.29784775]
[124.08520508 60.05449295]
[133.31604004 67.35368347]
[145.57841492 58.71456909]
[151.97122192 43.61277771]
[168.27717590 41.86701584]
[177.72212219 55.27317429]
[170.58988953 70.04014587]
[154.21752930 70.97693634]
[141.95515442 79.61605072]
[144.08421326 84.75786591]
[145.58573914 90.11664581]
[158.96499634 81.67234039]
[172.07731628 88.73749542]
[187.05702209 87.95764923]
[202.03674316 87.17780304]
[211.30691528 74.58423615]
[226.51538086 70.94601440]
[240.48115540 77.98098755]
[246.61004639 92.36746979]
[242.00816345 107.31259155]
[228.84838867 115.75972748]
[213.34434509 113.72040558]
[202.81658936 102.15751648]
[187.83686829 102.93736267]
[172.85716248 103.71720886]
[160.54936218 112.10572815]
[146.36558533 105.09635925]
[142.31192017 119.63269043]
[133.82940674 132.11404419]
[121.80592346 141.23399353]
[107.50000000 146.03793335]
[107.50000000 161.03793335]
[122.28179169 163.81907654]
[136.29710388 169.26768494]
[149.06913757 177.19683838]
[160.16369629 187.33523560]
[169.20391846 199.33651733]
[175.88310242 212.79109192]
[179.97508240 227.24005127]
[181.34190369 242.19093323]
[179.93847656 257.13442993]
[175.81407166 271.56173706]
[169.11053467 284.98190308]
[160.05751038 296.93853760]
[148.96446228 307.02529907]
[136.21018982 314.89981079]
[122.22981262 320.29507446]
[107.50000000 323.02871704]
[107.50000000 338.02871704]
[107.50000000 353.02871704]
[107.50000000 368.02871704]
[107.50000000 383.02871704]
[107.50000000 398.02871704]
[107.50000000 413.02871704]
[107.50000000 428.02871704]
[107.50000000 443.02871704]
[107.50000000 458.02871704]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[26 125]
[27 124]
[29 45]
[30 44]
[31 43]
[32 42]
[53 92]
[54 91]
[55 90]
[56 89]
[59 88]
[60 87]
[61 86]
[62 85]
[63 84]
[64 83]
[65 82]
[95 102]
[96 101]
[104 120]
[106 118]
[107 117]
[108 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
