%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCCGCCACAUCUACCAUCACCCUCUACAUCACCGCCCCGACCUUAGCUCUCACCAUCGCxxxxxxxxxxAUGAACGAAAAUCUGUUCGCUUCAUUCAUUGCCCCCACAAUCCUAGGCCUACCCGCCGCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-17.66448593 189.68307495]
[-25.31295967 178.64253235]
[-38.40611267 185.96163940]
[-51.49926758 193.28074646]
[-64.59242249 200.59985352]
[-72.86293793 214.08721924]
[-87.74761963 213.54365540]
[-100.84077454 220.86276245]
[-109.11128235 234.35014343]
[-123.99596405 233.80657959]
[-137.08912659 241.12568665]
[-132.63023376 255.50663757]
[-131.25914001 270.50042725]
[-133.03578186 285.45159912]
[-137.88249207 299.70651245]
[-145.58740234 312.64205933]
[-155.81367493 323.69271851]
[-168.11427307 332.37539673]
[-181.95146179 338.31054688]
[-196.72033691 341.23870850]
[-211.77526855 341.03182983]
[-226.45811462 337.69903564]
[-240.12699890 331.38595581]
[-252.18440247 322.36859131]
[-262.10321045 311.04113770]
[-269.44979858 297.89880371]
[-273.90304565 283.51608276]
[-275.26824951 268.52175903]
[-273.48571777 253.57130432]
[-268.63339233 239.31828308]
[-260.92340088 226.38577271]
[-250.69277954 215.33914185]
[-238.38876343 206.66130066]
[-224.54924011 200.73159790]
[-209.77922058 197.80924988]
[-194.72438049 198.02203369]
[-180.04283142 201.36062622]
[-166.37641907 207.67907715]
[-154.32257080 216.70117188]
[-144.40823364 228.03253174]
[-131.31507874 220.71342468]
[-123.98107147 207.74955750]
[-108.15988159 207.76960754]
[-95.06672668 200.45050049]
[-87.73271942 187.48664856]
[-71.91152954 187.50669861]
[-58.81837463 180.18759155]
[-45.72521973 172.86848450]
[-32.63206482 165.54937744]
[-37.69670868 154.10731506]
[-41.77636719 142.27821350]
[-44.84185410 130.14668274]
[-46.87124634 117.79950714]
[-47.85002518 105.32499695]
[-47.77118683 92.81240082]
[-46.63529968 80.35121918]
[-44.45048523 68.03059387]
[-41.23237228 55.93865585]
[-37.00398636 44.16189575]
[-31.79556465 32.78456879]
[-25.64437294 21.88804817]
[-18.59440994 11.55028820]
[-10.69610500 1.84523535]
[-2.00595784 -7.15768766]
[7.41386795 -15.39407921]
[17.49599075 -22.80502319]
[28.16828728 -29.33750725]
[39.35441971 -34.94480133]
[50.97436523 -39.58679199]
[62.94500732 -43.23028183]
[75.18071747 -45.84919739]
[87.59396362 -47.42481232]
[100.09595490 -47.94585419]
[112.59725952 -47.40859604]
[125.00845337 -45.81687927]
[137.24075317 -43.18209457]
[149.20666504 -39.52307892]
[160.82057190 -34.86602020]
[171.99942017 -29.24421883]
[182.66323853 -22.69789886]
[192.73573303 -15.27388191]
[202.71846008 -26.46964836]
[212.70118713 -37.66541290]
[222.68391418 -48.86117935]
[232.66664124 -60.05694580]
[242.53236389 -71.35594940]
[252.28001404 -82.75697327]
[262.02767944 -94.15798950]
[271.77532959 -105.55901337]
[270.29382324 -121.29370880]
[280.43655396 -133.41395569]
[296.18603516 -134.72903442]
[308.19836426 -124.45871735]
[309.34686279 -108.69621277]
[298.95010376 -96.79312897]
[283.17636108 -95.81136322]
[273.42868042 -84.41033936]
[263.68103027 -73.00932312]
[253.93339539 -61.60829926]
[251.96446228 -54.43411255]
[243.86241150 -50.07421875]
[233.87968445 -38.87845230]
[223.89695740 -27.68268776]
[213.91423035 -16.48692131]
[203.93150330 -5.29115582]
[219.97673035 13.43459415]
[232.68870544 34.56534576]
[241.71424866 57.51403809]
[246.80262756 81.64309692]
[247.81245422 106.28215027]
[244.71568298 130.74667358]
[259.21127319 134.60383606]
[273.70687866 138.46099854]
[283.60357666 126.84127045]
[297.56527710 120.67412567]
[312.81988525 121.18406677]
[326.33856201 128.26982117]
[335.43716431 140.52453613]
[338.30920410 155.51501465]
[334.38436890 170.26487732]
[324.44198608 181.84553528]
[310.45611572 187.95765686]
[295.20364380 187.38764954]
[281.71298218 180.24870300]
[272.66268921 167.95825195]
[269.84970093 152.95658875]
[255.35411072 149.09944153]
[240.85852051 145.24227905]
[236.17504883 157.83027649]
[230.36927795 169.94166565]
[223.48904419 181.47662354]
[215.59106445 192.34008789]
[206.74041748 202.44250488]
[197.01007080 211.70063782]
[186.48017883 220.03817749]
[175.23756409 227.38639832]
[163.37487793 233.68475342]
[150.98985291 238.88131714]
[138.18461609 242.93327332]
[125.06465912 245.80723572]
[111.73812866 247.47949219]
[98.31485748 247.93629456]
[84.90547943 247.17384338]
[71.62049866 245.19845581]
[58.56941986 242.02638245]
[45.85979080 237.68377686]
[33.59636688 232.20643616]
[21.88021660 225.63951111]
[10.80790234 218.03709412]
[0.47067666 209.46186829]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 49]
[3 48]
[4 47]
[5 46]
[7 44]
[8 43]
[10 41]
[11 40]
[81 105]
[82 104]
[83 103]
[84 102]
[85 101]
[86 99]
[87 98]
[88 97]
[89 96]
[111 128]
[112 127]
[113 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
