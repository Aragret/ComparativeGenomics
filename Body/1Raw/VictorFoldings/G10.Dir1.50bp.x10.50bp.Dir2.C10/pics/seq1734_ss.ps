%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUAACUAAAACCCCUACGCAUUUAUAUAGAGGAGACAAGUCGUAACAUGGUAAGUGUACUxxxxxxxxxxAAUUCUUCUCACCCUAACAGGUCAACCUCGCUUCCCCACCCUUACUAACAUUAACGAAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[161.42881775 583.22930908]
[161.11677551 568.23254395]
[160.80471802 553.23583984]
[160.49266052 538.23907471]
[160.18060303 523.24230957]
[159.86854553 508.24554443]
[159.55648804 493.24880981]
[159.24443054 478.25204468]
[158.93237305 463.25531006]
[156.91003418 448.39224243]
[153.20387268 433.85729980]
[149.49771118 419.32238770]
[145.79154968 404.78744507]
[130.83489990 405.60754395]
[116.00090790 403.49313354]
[101.85997772 398.52365112]
[88.95620728 390.88830566]
[77.78649139 380.87896729]
[68.78137970 368.87887573]
[62.28847122 355.34817505]
[58.55899048 340.80609131]
[57.73809814 325.81100464]
[59.85920715 310.93917847]
[64.84265900 296.76245117]
[72.49868011 283.82629395]
[82.53463745 272.62887573]
[94.56620789 263.60174561]
[108.13209534 257.09341431]
[104.42593384 242.55847168]
[97.77174377 256.00173950]
[84.98275757 263.84024048]
[69.98374176 263.66836548]
[57.37770462 255.53892517]
[51.03328323 241.94671631]
[52.89749146 227.06300354]
[62.39823532 215.45542908]
[76.61985016 210.68620300]
[91.19791412 214.21893311]
[101.65897369 224.97016907]
[100.72334290 209.99938965]
[99.78771210 195.02859497]
[98.85208893 180.05780029]
[88.36502838 166.02136230]
[96.61042786 149.58988953]
[95.36355591 134.64179993]
[94.11667633 119.69371033]
[85.29566193 114.36099243]
[80.17280579 105.41646576]
[80.03651428 95.10968781]
[67.77414703 86.47056580]
[51.40177917 85.53378296]
[44.26955795 70.76680756]
[53.71450043 57.36064911]
[70.02046204 59.10641098]
[76.41326904 74.20819855]
[88.67563629 82.84732056]
[91.69216156 81.20011902]
[94.94100189 80.07859802]
[96.80860901 65.19532013]
[90.84974670 50.53917694]
[100.11148071 38.87429047]
[101.97909546 23.99101257]
[94.42436218 7.23076487]
[105.48622894 -6.35727930]
[107.04380798 -21.27619171]
[108.60139465 -36.19510269]
[94.45886230 -41.43339920]
[82.06383514 -50.02490234]
[72.19545746 -61.42955017]
[65.47406769 -74.93042755]
[62.32218170 -89.67887115]
[62.93793106 -104.74776459]
[67.28260040 -119.18988037]
[75.08309174 -132.09736633]
[85.84905243 -142.65884399]
[98.90373230 -150.21041870]
[113.42649078 -154.27738953]
[128.50442505 -154.60409546]
[143.18971252 -151.17001343]
[156.55924988 -144.19100952]
[167.77258301 -134.10577393]
[176.12484741 -121.54828644]
[181.09101868 -107.30792236]
[182.35891724 -92.27984619]
[179.84883118 -77.40872192]
[173.71855164 -63.62936783]
[164.35343933 -51.80796814]
[152.34219360 -42.68762207]
[138.43984985 -36.84164810]
[123.52030182 -34.63752365]
[121.96272278 -19.71861076]
[120.40514374 -4.79969835]
[127.79379272 4.82917261]
[126.57579041 17.30857277]
[116.86237335 25.85862541]
[114.99475861 40.74190521]
[121.08721161 54.33349228]
[111.69189453 67.06292725]
[109.82427979 81.94621277]
[120.54927826 100.42759705]
[109.06476593 118.44683838]
[110.31163788 133.39492798]
[111.55851746 148.34301758]
[120.90785217 157.28973389]
[121.60568237 169.80899048]
[113.82287598 179.12217712]
[114.75850677 194.09295654]
[115.69413757 209.06375122]
[116.62976074 224.03454590]
[118.96086884 238.85231018]
[122.66703033 253.38723755]
[137.69300842 252.60514832]
[152.57807922 254.76898193]
[166.75041199 259.79370117]
[179.66595459 267.48446655]
[190.82923889 277.54406738]
[199.81251526 289.58444214]
[206.27200317 303.14178467]
[209.96112061 317.69418335]
[210.73991394 332.68188477]
[208.58032227 347.52874756]
[203.56718445 361.66445923]
[195.89495850 374.54632568]
[185.86010742 385.68023682]
[173.84971619 394.63949585]
[160.32649231 401.08126831]
[164.03265381 415.61621094]
[167.73881531 430.15115356]
[171.44497681 444.68609619]
[177.21949768 430.84213257]
[188.68374634 421.16891479]
[203.30192566 417.80606079]
[217.84063721 421.49740601]
[229.08404541 431.42642212]
[234.54521179 445.39697266]
[233.01618958 460.31881714]
[224.83517456 472.89144897]
[211.81172180 480.33389282]
[196.82652283 480.99993896]
[183.19413757 474.74227905]
[173.92912292 462.94323730]
[174.24118042 477.94000244]
[174.55323792 492.93673706]
[174.86529541 507.93350220]
[175.17735291 522.93023682]
[175.48941040 537.92700195]
[175.80146790 552.92376709]
[176.11352539 567.92053223]
[176.42558289 582.91729736]
[179.01657104 602.12500000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 129]
[11 128]
[12 127]
[13 126]
[28 111]
[29 110]
[39 109]
[40 108]
[41 107]
[42 106]
[44 103]
[45 102]
[46 101]
[49 56]
[50 55]
[58 99]
[59 98]
[61 96]
[62 95]
[64 92]
[65 91]
[66 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
