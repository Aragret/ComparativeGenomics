%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAGGCCUAAAAGCAGCCACCAAUUAAGAAAGCGUUCAAGCUCAACACCCACUACCUAAAAAxxxxxxxxxxUAUAAUAAUUACAUCACAAGACGUCUUGCACUCAUGAGCUGUCCCCACAUUAGGCUUAAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[97.57057190 223.55657959]
[96.95474243 208.56922913]
[96.33892059 193.58187866]
[95.72309113 178.59452820]
[95.10726929 163.60716248]
[94.49143982 148.61981201]
[93.87561798 133.63246155]
[93.25979614 118.64511108]
[79.32907867 113.08317566]
[68.56039429 123.52518463]
[57.79171753 133.96719360]
[53.77593613 142.24180603]
[46.69310379 144.51022339]
[35.71229935 154.72892761]
[24.73149872 164.94763184]
[27.56827164 180.11193848]
[21.73511124 194.39401245]
[9.09335804 203.23651123]
[-6.32305002 203.81781006]
[-19.59479332 195.95240784]
[-26.48690796 182.15016174]
[-24.80014420 166.81527710]
[-15.07274246 154.84109497]
[-0.40868109 150.04850769]
[14.51279068 153.96682739]
[25.49359322 143.74812317]
[36.47439575 133.52941895]
[47.34970856 123.19850922]
[58.11838913 112.75650024]
[68.88706970 102.31449127]
[66.54016876 95.19114685]
[52.29347610 99.88494873]
[38.04670334 104.57851410]
[33.35337830 90.33166504]
[47.59967422 85.63825989]
[61.84636688 80.94445801]
[59.49946594 73.82110596]
[44.63286591 71.82505035]
[29.76626968 69.82899475]
[14.81341267 76.56280518]
[1.66525972 66.76187897]
[3.84750175 50.50857544]
[19.11523628 44.52289581]
[31.76232529 54.96239853]
[46.62892532 56.95845413]
[61.49552155 58.95450974]
[83.58675385 71.51054382]
[97.27226257 90.92148590]
[102.11207581 76.72373199]
[106.95189667 62.52597809]
[111.79170990 48.32822800]
[116.63153076 34.13047409]
[121.47134399 19.93272209]
[107.80497742 13.72005844]
[94.81336975 6.19775629]
[82.62165070 -2.56173873]
[71.34722900 -12.47406578]
[61.09869385 -23.44376183]
[51.97473526 -35.36518097]
[44.06323242 -48.12350845]
[37.44037628 -61.59587097]
[32.16995239 -75.65251923]
[28.30271721 -90.15808105]
[25.87591553 -104.97285461]
[24.91292000 -119.95415497]
[25.42300415 -134.95770264]
[27.40125656 -149.83901978]
[30.82862473 -164.45475769]
[35.67210007 -178.66416931]
[41.88503647 -192.33041382]
[49.40760040 -205.32186890]
[58.16733932 -217.51341248]
[68.07988739 -228.78764343]
[79.04978943 -239.03596497]
[90.97138977 -248.15968323]
[103.72987366 -256.07092285]
[117.20236969 -262.69351196]
[131.25912476 -267.96365356]
[145.76477051 -271.83059692]
[160.57958984 -274.25711060]
[175.56091309 -275.21978760]
[190.56445312 -274.70941162]
[205.44572449 -272.73086548]
[220.06138611 -269.30319214]
[234.27070618 -264.45944214]
[247.93682861 -258.24624634]
[260.92813110 -250.72341919]
[273.11950684 -241.96343994]
[284.39352417 -232.05065918]
[294.64163208 -221.08055115]
[303.76510620 -209.15876770]
[311.67611694 -196.40011597]
[318.29843140 -182.92749023]
[323.56826782 -168.87063599]
[327.43493652 -154.36491394]
[329.86114502 -139.55004883]
[330.82354736 -124.56871033]
[330.31286621 -109.56517792]
[328.33401489 -94.68394470]
[324.90606689 -80.06834412]
[320.06201172 -65.85911560]
[313.84854126 -52.19312286]
[306.32543945 -39.20197296]
[297.56521606 -27.01077652]
[287.65222168 -15.73695087]
[276.68191528 -5.48906994]
[264.75994873 3.63417172]
[252.00114441 11.54490948]
[238.52838135 18.16695786]
[224.47142029 23.43653870]
[209.96562195 27.30290413]
[195.15071106 29.72881508]
[180.16934204 30.69091225]
[165.16581726 30.17992783]
[150.28463745 28.20078278]
[135.66909790 24.77253723]
[130.82928467 38.97029114]
[125.98946381 53.16804123]
[121.14965057 67.36579895]
[116.30982971 81.56354523]
[111.47001648 95.76129913]
[118.37841034 82.44686890]
[128.55827332 71.43003845]
[141.28652954 63.49332428]
[155.65910339 59.20044708]
[170.65516663 58.85633469]
[185.20953369 62.48542023]
[198.28845215 69.82994080]
[208.96293640 80.36822510]
[216.47479248 93.35175323]
[220.29046631 107.85832977]
[220.13893127 122.85755920]
[216.03097534 137.28408813]
[208.25834656 150.11320496]
[197.37313843 160.43368530]
[184.14851379 167.51248169]
[169.52378845 170.84678650]
[154.53775024 170.19978333]
[140.25483704 165.61741638]
[127.68951416 157.42517090]
[117.73430634 146.20494080]
[111.09630585 132.75366211]
[108.24714661 118.02928162]
[108.86296844 133.01663208]
[109.47879791 148.00399780]
[110.09461975 162.99134827]
[110.71044922 177.97869873]
[111.32627106 192.96604919]
[111.94210052 207.95339966]
[112.55792236 222.94075012]
[119.24944305 238.51831055]
[106.13307190 249.26060486]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 30]
[10 29]
[11 28]
[13 27]
[14 26]
[15 25]
[37 46]
[38 45]
[39 44]
[48 121]
[49 120]
[50 119]
[51 118]
[52 117]
[53 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
