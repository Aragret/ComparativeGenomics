%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCCCAGAAAACUACGAUAGCCCUUAUGAAACUUAAGGGUCGAAGGUGGAUUUAGCAGUAxxxxxxxxxxUGCAUAAUGAAUUAACUAGAAAUAACUUUGCAAGGAGAGCCAAAGCUAAGACCCCCGAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[87.98245239 274.23526001]
[87.98245239 259.23526001]
[87.98245239 244.23527527]
[87.98245239 229.23527527]
[87.98245239 214.23527527]
[87.98245239 199.23527527]
[87.98245239 184.23527527]
[87.98245239 169.23527527]
[87.98245239 154.23527527]
[87.98245239 139.23527527]
[67.74923706 118.90708923]
[67.02866364 92.86632538]
[52.09435272 94.26863098]
[37.17544174 95.82621002]
[22.27353859 97.53890228]
[8.68258858 103.88603210]
[-2.19623709 114.21323395]
[-6.32975626 130.08288574]
[-22.20974922 134.17652893]
[-33.50024033 122.28296661]
[-28.58653831 106.63728333]
[-12.52344227 103.33441162]
[-1.64461684 93.00720215]
[-6.98637390 78.98986816]
[-12.32764149 64.97377777]
[-27.32033730 64.50573730]
[-42.31303406 64.03769684]
[-47.02312088 66.57435608]
[-51.75587463 66.96606445]
[-55.67559433 65.57413483]
[-58.21808624 63.04367828]
[-73.15239716 61.64137268]
[-88.08670044 60.23907089]
[-103.02101135 58.83676529]
[-117.95531464 57.43446350]
[-132.88961792 56.03215790]
[-143.88926697 67.14709473]
[-159.46472168 68.53971863]
[-172.26171875 59.55246353]
[-176.23793030 44.42884445]
[-169.51588440 30.30977058]
[-155.26954651 23.86183739]
[-140.22560120 28.12956047]
[-131.48731995 41.09785080]
[-116.55301666 42.50015640]
[-101.61870575 43.90245819]
[-86.68440247 45.30476379]
[-71.75009155 46.70706558]
[-56.81578445 48.10937119]
[-41.84499359 49.04499817]
[-26.85229492 49.51303864]
[-11.85960007 49.98108292]
[8.31651402 55.87063217]
[19.53537941 68.93991089]
[20.56085014 82.63700104]
[35.46275330 80.92430878]
[41.78964615 77.01073456]
[50.69205093 79.33432007]
[65.62635803 77.93202209]
[75.37400818 66.53099823]
[74.43838501 51.56020737]
[73.50275421 36.58941269]
[61.93498230 26.15751839]
[61.19938660 10.96167850]
[71.21589661 -0.00213378]
[70.28026581 -14.97292519]
[69.34463501 -29.94371605]
[55.05838776 -35.21846390]
[44.15721130 -45.85257339]
[38.52980804 -60.00362396]
[39.15115738 -75.21985626]
[45.91360474 -88.86497498]
[57.64551926 -98.57487488]
[72.31427002 -102.66725159]
[87.37841797 -100.43308258]
[100.22799683 -92.25945282]
[108.63674164 -79.56249237]
[111.14778900 -64.54202271]
[107.32608795 -49.80043411]
[97.83376312 -37.89179230]
[84.31542969 -30.87934494]
[85.25105286 -15.90855408]
[86.18668365 -0.93776226]
[97.49032593 8.69360638]
[98.65245056 23.86278915]
[88.47354126 35.65378571]
[89.40917206 50.62457657]
[90.34480286 65.59536743]
[97.10689545 68.83945465]
[109.48789215 60.37121582]
[110.63108826 75.32761383]
[117.39318085 78.57170105]
[129.65554810 69.93258667]
[141.91792297 61.29346848]
[142.00923157 45.77666092]
[151.23075867 33.29695511]
[166.03663635 28.65304947]
[180.73368835 33.63062286]
[189.67060852 46.31569290]
[189.41096497 61.83059692]
[180.05459595 74.20953369]
[165.19921875 78.69255066]
[150.55703735 73.55583191]
[138.29466248 82.19495392]
[126.03229523 90.83406830]
[129.13061523 105.51058960]
[143.83857727 108.45607758]
[158.54653931 111.40155792]
[173.59738159 106.52477264]
[184.55751038 116.61063385]
[199.26547241 119.55611420]
[213.60751343 109.59400940]
[230.39335632 112.98805237]
[239.37750244 127.17053986]
[254.14355469 129.80940247]
[269.37435913 123.73036194]
[282.08514404 134.09222412]
[279.20013428 150.23561096]
[263.68719482 155.55357361]
[251.50469971 144.57545471]
[236.73863220 141.93659973]
[227.26770020 150.72853088]
[214.26559448 152.46621704]
[202.47274780 146.28910828]
[196.31999207 134.26408386]
[181.61203003 131.31858826]
[167.61322021 136.40605164]
[155.60105896 126.10951996]
[140.89309692 123.16403961]
[126.18513489 120.21855164]
[120.38446808 124.97273254]
[131.87977600 134.60900879]
[146.54475403 137.76155090]
[155.15354919 150.04522705]
[153.11270142 164.90573120]
[141.51116943 174.41386414]
[126.53926086 173.49626160]
[116.18565369 162.64256287]
[115.97451019 147.64483643]
[108.78312683 134.48109436]
[102.98245239 139.23527527]
[102.98245239 154.23527527]
[102.98245239 169.23527527]
[102.98245239 184.23527527]
[102.98245239 199.23527527]
[102.98245239 214.23527527]
[102.98245239 229.23527527]
[102.98245239 244.23527527]
[102.98245239 259.23526001]
[102.98245239 274.23526001]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 59]
[13 58]
[14 56]
[15 55]
[16 23]
[17 22]
[25 52]
[26 51]
[27 50]
[31 49]
[32 48]
[33 47]
[34 46]
[35 45]
[36 44]
[60 88]
[61 87]
[62 86]
[65 83]
[66 82]
[67 81]
[92 105]
[93 104]
[94 103]
[106 130]
[107 129]
[108 128]
[110 126]
[111 125]
[114 121]
[115 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
