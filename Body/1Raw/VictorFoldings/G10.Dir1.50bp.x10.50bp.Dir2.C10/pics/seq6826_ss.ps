%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACACCUAUUCUGAUUUUUCGGUCACCCUGAAGUUUAUAUUCUUAUCCUACCAGGCUUCGGxxxxxxxxxxAUUAACAACAUAAAACCCUCAUUCACACGAGAAAACACCCUCAUGUUCAUACACCUAUCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[112.53734589 333.54324341]
[112.53734589 318.54324341]
[112.53734589 303.54324341]
[112.53734589 288.54324341]
[112.53734589 273.54324341]
[112.53734589 258.54324341]
[112.53734589 243.54325867]
[112.53734589 228.54325867]
[112.53734589 213.54325867]
[112.53734589 198.54325867]
[110.36050415 183.70205688]
[106.05292511 169.33386230]
[101.74533844 154.96568298]
[94.28534698 167.97908020]
[80.26715851 173.31671143]
[66.04114532 168.56059265]
[58.05184174 155.86528015]
[59.91846848 140.98187256]
[70.79543304 130.65270996]
[85.75536346 129.55699158]
[98.02149200 138.19143677]
[95.84465027 123.35022736]
[93.66781616 108.50901794]
[90.72233582 93.80106354]
[87.01617432 79.26612091]
[83.31001282 64.73118591]
[79.60385132 50.19625092]
[75.74668884 35.70065689]
[71.73895264 21.24596596]
[67.73120880 6.79127836]
[53.51743698 5.46104527]
[40.64303207 -0.63789028]
[30.65230560 -10.75129700]
[24.73590469 -23.64477921]
[23.58893585 -37.75442123]
[27.32936096 -51.37648010]
[35.48621750 -62.87310028]
[47.05882645 -70.86926270]
[43.35266876 -85.40419769]
[39.64650726 -99.93913269]
[26.48443794 -112.77423096]
[31.80910492 -129.46697998]
[27.80136490 -143.92167664]
[23.79362488 -158.37635803]
[19.78588486 -172.83105469]
[4.91683483 -170.70039368]
[-10.10260296 -170.48869324]
[-25.02579689 -172.19943237]
[-39.60769272 -175.80451965]
[-53.60884476 -181.24475098]
[-66.79933929 -188.43078613]
[-78.96257782 -197.24464417]
[-89.89882660 -207.54156494]
[-99.42850494 -219.15249634]
[-107.39513397 -231.88674927]
[-113.66787720 -245.53521729]
[-118.14374542 -259.87380981]
[-120.74923706 -274.66705322]
[-121.44155884 -289.67199707]
[-120.20935822 -304.64230347]
[-117.07285309 -319.33212280]
[-112.08355713 -333.50024414]
[-105.32340240 -346.91397095]
[-96.90338135 -359.35308838]
[-86.96177673 -370.61331177]
[-75.66182709 -380.50976562]
[-63.18909073 -388.87991333]
[-49.74838257 -395.58630371]
[-35.56040955 -400.51879883]
[-20.85815048 -403.59646606]
[-5.88303232 -404.76870728]
[9.11904144 -404.01629639]
[23.90172195 -401.35159302]
[38.22226715 -396.81835938]
[51.84551620 -390.49099731]
[64.54776764 -382.47344971]
[76.12043762 -372.89733887]
[86.37348938 -361.91995239]
[95.13856506 -349.72149658]
[102.27172089 -336.50234985]
[107.65583801 -322.47952271]
[111.20249939 -307.88330078]
[112.85346985 -292.95336914]
[112.58163452 -277.93490601]
[110.39144897 -263.07452393]
[106.31889343 -248.61621094]
[100.43083191 -234.79740906]
[92.82395935 -221.84504700]
[83.62318420 -209.97180176]
[72.97959137 -199.37263489]
[61.06795502 -190.22160339]
[48.08387756 -182.66899109]
[34.24057388 -176.83879089]
[38.24831390 -162.38409424]
[42.25605392 -147.92941284]
[46.26379395 -133.47471619]
[56.66261673 -127.21598816]
[60.09402084 -115.15595245]
[54.18144226 -103.64529419]
[57.88760376 -89.11035919]
[61.59376526 -74.57542419]
[77.28322601 -72.56900024]
[91.04141998 -64.68772125]
[100.75579071 -52.10779572]
[104.92173004 -36.72949219]
[102.87555695 -20.89007759]
[94.90007019 -7.00860167]
[82.18589783 2.78353786]
[86.19364166 17.23822594]
[90.20137787 31.69291496]
[95.05064392 37.33474350]
[94.13878632 46.49008942]
[97.84494781 61.02502823]
[101.55110931 75.55995941]
[105.25727081 90.09490204]
[115.32170105 78.97251892]
[130.30435181 79.69361115]
[139.25413513 91.73111725]
[135.62947083 106.28659058]
[122.07969666 112.72116089]
[108.50901794 106.33218384]
[110.68585968 121.17339325]
[112.86269379 136.01460266]
[116.11351776 150.65809631]
[120.42110443 165.02627563]
[124.72869110 179.39447021]
[129.11769104 165.05093384]
[138.57893372 153.41114807]
[151.72319031 146.18420410]
[166.62040710 144.43128967]
[181.08317566 148.40977478]
[192.98785400 157.53549194]
[200.58641052 170.46847534]
[202.76312256 185.30970764]
[199.19836426 199.87995911]
[190.41557312 212.03984070]
[177.70437622 220.00384521]
[162.93119812 222.60258484]
[148.26527405 219.45446777]
[135.86006165 211.02174377]
[127.53734589 198.54325867]
[127.53734589 213.54325867]
[127.53734589 228.54325867]
[127.53734589 243.54325867]
[127.53734589 258.54324341]
[127.53734589 273.54324341]
[127.53734589 288.54324341]
[127.53734589 303.54324341]
[127.53734589 318.54324341]
[127.53734589 333.54324341]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 126]
[12 125]
[13 124]
[21 123]
[22 122]
[23 121]
[24 115]
[25 114]
[26 113]
[27 112]
[28 110]
[29 109]
[30 108]
[38 101]
[39 100]
[40 99]
[42 96]
[43 95]
[44 94]
[45 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
