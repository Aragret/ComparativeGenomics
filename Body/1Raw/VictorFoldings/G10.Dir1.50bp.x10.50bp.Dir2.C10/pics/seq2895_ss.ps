%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAAUUUCGGUUGGGGCGACCUCGGAGCAGAACCCAACCUCCGAGCAGUACAUGCUAAGACUxxxxxxxxxxUUACCACGCUACUCCUACCUAUCUCCCCUUUUAUACUAAUAAUCUUAUAGAAAUUUAGGUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[174.63092041 396.39993286]
[174.63092041 381.39993286]
[174.63092041 366.39993286]
[174.63092041 351.39993286]
[174.63092041 336.39993286]
[174.63092041 321.39993286]
[174.63092041 306.39993286]
[174.63092041 291.39993286]
[174.63092041 276.39993286]
[174.63092041 261.39993286]
[170.08363342 247.10580444]
[161.41702271 234.86283875]
[152.75042725 222.61988831]
[150.70602417 237.47991943]
[140.43240356 248.40937805]
[125.72714233 251.36827087]
[112.02588654 245.26289368]
[104.39320374 232.35002136]
[105.65043640 217.40280151]
[115.33287048 205.94633484]
[129.86146545 202.21542358]
[143.86502075 207.58845520]
[137.31715393 194.09307861]
[130.76927185 180.59768677]
[124.22140503 167.10231018]
[111.70445251 159.02920532]
[112.64152527 143.23576355]
[106.09365082 129.74038696]
[81.95475006 124.41294861]
[69.78047943 102.89888763]
[54.95799637 100.59800720]
[40.13551331 98.29713440]
[25.31303215 95.99626160]
[10.49054909 93.69538879]
[-4.33193302 91.39450836]
[-19.15441513 89.09363556]
[-28.21054077 101.43240356]
[-41.96853638 108.13882446]
[-57.26691818 107.67181396]
[-70.59023285 100.13868713]
[-78.87686920 87.27050018]
[-80.22262573 72.02427673]
[-74.31826019 57.90347290]
[-62.52054977 48.15295410]
[-47.54052353 45.01331711]
[-32.82047653 49.20603180]
[-21.74297333 59.76763535]
[-16.85354042 74.27115631]
[-2.03105807 76.57202911]
[12.79142380 78.87290192]
[27.61390686 81.17377472]
[42.43638992 83.47465515]
[57.25886917 85.77552795]
[72.08135223 88.07640076]
[79.54778290 77.56498718]
[90.70327759 71.10028076]
[89.77986145 56.12872696]
[88.85644531 41.15717697]
[87.93303680 26.18562698]
[84.97438049 21.73572540]
[84.14504242 17.06477165]
[85.16378021 13.03590393]
[87.44265747 10.26932812]
[87.44265747 -4.73067141]
[72.80344391 -8.33022499]
[59.45137024 -15.32919884]
[48.16271591 -25.32068062]
[39.59378433 -37.72378159]
[34.24276733 -51.81739807]
[32.42076111 -66.78215027]
[34.23369598 -81.74800110]
[39.57616806 -95.84485626]
[48.13757706 -108.25315094]
[59.42016983 -118.25147247]
[72.76799774 -125.25853729]
[87.40502930 -128.86697388]
[102.48028564 -128.86697388]
[117.11731720 -125.25853729]
[130.46514893 -118.25147247]
[141.74774170 -108.25315094]
[150.30914307 -95.84485626]
[155.65162659 -81.74800110]
[157.46455383 -66.78215027]
[155.64254761 -51.81739807]
[150.29153442 -37.72378159]
[141.72259521 -25.32068062]
[130.43394470 -15.32919884]
[117.08187103 -8.33022499]
[102.44265747 -4.73067141]
[102.44265747 10.26932812]
[102.90458679 25.26221466]
[103.82799530 40.23376465]
[104.75141144 55.20531464]
[105.67482758 70.17686462]
[112.88346100 72.51110077]
[119.28951263 76.55777740]
[124.49391937 82.06481171]
[128.17245483 88.68911743]
[130.09596252 96.01805115]
[130.14463806 103.59503937]
[128.31541443 110.94807434]
[124.72227478 117.61908722]
[119.58903503 123.19251251]
[126.13690948 136.68789673]
[139.12220764 145.72628784]
[137.71679688 160.55442810]
[144.26466370 174.04981995]
[150.81253052 187.54519653]
[157.36039734 201.04058838]
[164.99337769 213.95327759]
[173.65998840 226.19624329]
[182.32658386 238.43919373]
[181.47901917 223.46315002]
[183.51481628 208.60194397]
[188.35859680 194.40554810]
[195.83113098 181.39935303]
[205.65586853 170.06468201]
[217.46919250 160.82102966]
[230.83393860 154.01048279]
[245.25549316 149.88508606]
[260.20013428 148.59751892]
[275.11477661 150.19541931]
[289.44747925 154.61965942]
[302.66778564 161.70651245]
[314.28643799 171.19369507]
[323.87347412 182.73010254]
[331.07406616 195.88880920]
[335.62176514 210.18281555]
[337.34823608 225.08312988]
[336.18957520 240.03831482]
[332.18872070 254.49490356]
[325.49368286 267.91787720]
[316.35223389 279.81048584]
[305.10272217 289.73260498]
[292.16146851 297.31704712]
[278.00735474 302.28308105]
[263.16424561 304.44692993]
[248.18147278 303.72857666]
[233.61347961 300.15451050]
[219.99943542 293.85708618]
[207.84315491 285.06930542]
[197.59452820 274.11642456]
[189.63092041 261.39993286]
[189.63092041 276.39993286]
[189.63092041 291.39993286]
[189.63092041 306.39993286]
[189.63092041 321.39993286]
[189.63092041 336.39993286]
[189.63092041 351.39993286]
[189.63092041 366.39993286]
[189.63092041 381.39993286]
[189.63092041 396.39993286]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 112]
[12 111]
[13 110]
[22 109]
[23 108]
[24 107]
[25 106]
[27 104]
[28 103]
[30 54]
[31 53]
[32 52]
[33 51]
[34 50]
[35 49]
[36 48]
[56 94]
[57 93]
[58 92]
[59 91]
[63 90]
[64 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
