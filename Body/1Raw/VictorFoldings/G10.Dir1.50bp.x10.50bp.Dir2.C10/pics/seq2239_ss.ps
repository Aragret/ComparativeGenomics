%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUCUAAAUCCCCUUGUAAAUUUAACUGUUAGUCCAAAGAGGAACAGCUCUUUGGACACUxxxxxxxxxxAACAUCUCCGCAUGAUGAAACUUCGGCUCACUCCUUGGCGCCUGCCUGAUCCUCCAAAUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.23355103 231.44645691]
[94.92149353 216.44970703]
[94.60943604 201.45295715]
[94.29737854 186.45620728]
[93.98532104 171.45944214]
[93.67326355 156.46269226]
[93.36121368 141.46594238]
[93.04915619 126.46918488]
[92.73709869 111.47243500]
[87.39558411 97.45571899]
[77.64793396 86.05470276]
[67.90028381 74.65367889]
[54.31120300 78.12959290]
[40.61108017 75.73603821]
[29.20243835 67.99194336]
[16.42508125 75.84937286]
[3.64772439 83.70679474]
[-9.12963295 91.56422424]
[-21.90699005 99.42164612]
[-21.40078354 114.77219391]
[-28.65181923 128.31169128]
[-41.70960617 136.39808655]
[-57.06166840 136.85617065]
[-70.57836914 129.56274414]
[-78.62379456 116.47966766]
[-79.03376007 101.12624359]
[-71.69798279 87.63246918]
[-58.58976364 79.62809753]
[-43.23513412 79.26625824]
[-29.76441574 86.64429474]
[-16.98705864 78.78686523]
[-4.20970154 70.92944336]
[8.56765556 63.07201385]
[21.34501266 55.21458817]
[19.70600891 43.87890625]
[22.07943153 32.67395401]
[28.17369270 22.97632599]
[37.24007797 15.97742081]
[33.53391647 1.44248438]
[29.82775497 -13.09245205]
[7.44914389 -22.40299034]
[3.39312196 -51.70803833]
[-8.10868168 -61.33656311]
[-19.61048508 -70.96508789]
[-31.11228752 -80.59362030]
[-42.61408997 -90.22214508]
[-54.11589432 -99.85066986]
[-65.61769867 -109.47919464]
[-77.11949921 -119.10771942]
[-88.62130737 -128.73625183]
[-100.12310791 -138.36477661]
[-115.84154510 -136.71966553]
[-128.06665039 -146.73577881]
[-129.54547119 -162.47071838]
[-119.40067291 -174.58924866]
[-103.65097046 -175.90164185]
[-91.64038849 -165.62927246]
[-90.49458313 -149.86657715]
[-78.99278259 -140.23805237]
[-67.49097443 -130.60952759]
[-55.98917389 -120.98100281]
[-44.48736954 -111.35247040]
[-32.98556519 -101.72394562]
[-21.48376274 -92.09542084]
[-9.98195839 -82.46689606]
[1.51984477 -72.83837128]
[13.02164841 -63.20984268]
[20.45317078 -64.22100830]
[14.97555065 -78.18509674]
[9.49793053 -92.14917755]
[4.02030945 -106.11326599]
[-4.82519770 -118.22759247]
[-5.43018436 -133.21539307]
[2.41013956 -146.00325012]
[16.04180717 -152.26245117]
[30.85046959 -149.87425232]
[41.82336426 -139.64704895]
[45.24613953 -125.04278564]
[39.95879364 -111.00321960]
[38.41127014 -96.08325958]
[36.86374283 -81.16329956]
[35.31621933 -66.24333954]
[42.74774170 -67.25450897]
[51.25883102 -79.60608673]
[59.76992416 -91.95765686]
[68.28101349 -104.30922699]
[63.94620895 -119.33399200]
[70.33052063 -133.60896301]
[84.41945648 -140.39392090]
[99.56066895 -136.48522949]
[108.60492706 -123.72845459]
[107.28181458 -108.14694977]
[96.21606445 -97.09782410]
[80.63258362 -95.79814148]
[72.12149811 -83.44656372]
[63.61040497 -71.09499359]
[55.09931564 -58.74341965]
[59.46517563 -32.53884506]
[44.36269379 -16.79861259]
[48.06885147 -2.26367688]
[51.77501297 12.27125931]
[69.23570251 16.70959663]
[81.79499054 29.78849983]
[85.57053375 47.64305496]
[79.30130005 64.90602875]
[89.04895782 76.30704498]
[98.79660797 87.70806885]
[134.18736267 77.50016022]
[148.83085632 80.75098419]
[163.47436523 84.00180817]
[156.73373413 70.60166168]
[161.25958252 56.30072403]
[174.48233032 49.21841812]
[188.89469910 53.37574768]
[196.31402588 66.41236877]
[192.52795410 80.92669678]
[179.68450928 88.67839813]
[193.80931091 93.72714996]
[207.93411255 98.77590942]
[223.96157837 95.30422974]
[234.77999878 107.62875366]
[229.26029968 123.07106781]
[213.08068848 125.74544525]
[202.88536072 112.90071106]
[188.76055908 107.85195160]
[174.63575745 102.80319977]
[160.22354126 98.64530945]
[145.58003235 95.39448547]
[130.93653870 92.14366150]
[125.13586426 96.89784241]
[136.42822266 106.77117920]
[147.72056580 116.64451599]
[161.34953308 122.90959930]
[166.21383667 137.09898376]
[159.29516602 150.40808105]
[144.88658142 154.57852173]
[131.92868042 147.02255249]
[128.46188354 132.42875671]
[120.99820709 119.41748047]
[113.53452301 106.40619659]
[107.73384857 111.16037750]
[108.04590607 126.15712738]
[108.35796356 141.15388489]
[108.67002106 156.15063477]
[108.98207855 171.14738464]
[109.29413605 186.14414978]
[109.60618591 201.14089966]
[109.91824341 216.13764954]
[110.23030090 231.13439941]
[112.82129669 250.34213257]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 107]
[11 106]
[12 105]
[15 34]
[16 33]
[17 32]
[18 31]
[19 30]
[38 101]
[39 100]
[40 99]
[42 67]
[43 66]
[44 65]
[45 64]
[46 63]
[47 62]
[48 61]
[49 60]
[50 59]
[51 58]
[83 97]
[84 96]
[85 95]
[86 94]
[108 129]
[109 128]
[110 127]
[117 126]
[118 125]
[119 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
