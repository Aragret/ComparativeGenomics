%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUAGCCCUACUAGUCUCAAUCUCCAACACAUAUGGCCUAGACUACGUACAUAACCUAAAxxxxxxxxxxCUAUUCGCCUACACAAUUCUCCGAUCCGUCCCUAACAAACUAGGAGGCGUCCUUGCCCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.29188538 291.88522339]
[95.29188538 276.88522339]
[95.29188538 261.88522339]
[95.29188538 246.88522339]
[95.29188538 231.88522339]
[95.29188538 216.88522339]
[95.29188538 201.88522339]
[95.29188538 186.88522339]
[95.29188538 171.88522339]
[95.29188538 156.88522339]
[88.10050201 170.04896545]
[82.89224243 184.11573792]
[70.02912140 191.83195496]
[55.16669846 189.80502319]
[44.83956909 178.92613220]
[43.58829117 163.97840881]
[51.96300507 151.53396606]
[66.28126526 147.06427002]
[79.80107880 140.56698608]
[64.82136536 139.78713989]
[49.84165192 139.00729370]
[34.85463333 138.38331604]
[19.86193848 137.91528320]
[4.86924314 137.44723511]
[-10.12345314 136.97918701]
[-25.11614990 136.51115417]
[-40.10884476 136.04310608]
[-45.50704956 146.28039551]
[-54.31645966 153.70648193]
[-65.22145081 157.26295471]
[-76.61231995 156.46557617]
[-86.82288361 151.46978760]
[-94.37419128 143.04232788]
[-98.18872070 132.44374084]
[-113.12303162 131.04144287]
[-128.05734253 129.63914490]
[-139.05697632 140.75407410]
[-154.63243103 142.14669800]
[-167.42942810 133.15943909]
[-171.40563965 118.03582764]
[-164.68359375 103.91674805]
[-150.43725586 97.46881866]
[-135.39331055 101.73654175]
[-126.65502930 114.70483398]
[-111.72072601 116.10713196]
[-96.78641510 117.50943756]
[-85.34918213 102.81088257]
[-67.24010468 97.86250305]
[-49.64048386 104.81160736]
[-39.64080429 121.05041504]
[-24.64810753 121.51845551]
[-9.65541077 121.98649597]
[5.33728504 122.45453644]
[20.32998085 122.92258453]
[35.32267761 123.39062500]
[42.15053940 120.43665314]
[50.62149811 124.02758026]
[65.60121155 124.80742645]
[80.58092499 125.58727264]
[71.55881500 96.84374237]
[89.57472229 77.15674591]
[87.70710754 62.27346420]
[85.83949280 47.39018631]
[70.97843170 44.56104660]
[57.71995163 37.27627563]
[47.36298370 26.24956322]
[40.92219543 12.56119442]
[39.02859116 -2.44778490]
[41.86769104 -17.30694771]
[49.16134262 -30.56054306]
[60.19499207 -40.91012192]
[73.88767242 -47.34173584]
[88.89791870 -49.22528076]
[103.75517273 -46.37622833]
[117.00388336 -39.07369614]
[127.34606171 -28.03311348]
[133.76849365 -14.33612537]
[135.64198303 0.67537808]
[132.78297424 15.53072262]
[125.47157288 28.77453232]
[114.42406464 39.10931396]
[100.72277069 45.52257156]
[102.59038544 60.40585327]
[104.45800018 75.28913116]
[127.65724182 92.65561676]
[120.63455200 124.61756134]
[135.20724487 121.06279755]
[149.77995300 117.50804138]
[164.35266113 113.95327759]
[178.92535400 110.39851379]
[164.62948608 105.85671234]
[152.14779663 97.53761292]
[142.45437622 86.09045410]
[136.30569458 72.40857697]
[134.18161011 57.55972672]
[136.24787903 42.70272446]
[142.34327698 28.99702263]
[151.99208069 17.51222229]
[164.44129944 9.14461136]
[178.71937561 4.54720259]
[193.71206665 4.07878208]
[208.24929810 7.77590656]
[221.19659424 15.35004807]
[231.54353333 26.21011543]
[238.48260498 39.50857925]
[241.47232056 54.20761490]
[240.27932739 69.16009521]
[234.99673462 83.19912720]
[226.03680420 95.22908020]
[214.09878540 104.31112671]
[200.11167908 109.73712158]
[214.87773132 112.37598419]
[229.64379883 115.01484680]
[244.40985107 117.65370941]
[257.23196411 108.41419220]
[272.81829834 111.02991486]
[281.92175293 123.94900513]
[279.14138794 139.50680542]
[266.12677002 148.47314453]
[250.59922791 145.52845764]
[241.77098083 132.41976929]
[227.00492859 129.78089905]
[212.23887634 127.14203644]
[197.47282410 124.50317383]
[182.48011780 124.97121429]
[167.90742493 128.52598572]
[153.33471680 132.08073425]
[138.76200867 135.63549805]
[124.18930817 139.19026184]
[138.68231201 143.05718994]
[153.66928101 142.43232727]
[167.07920837 149.15348816]
[175.54759216 161.53437805]
[176.94978333 176.46868896]
[170.93395996 190.20950317]
[159.00946045 199.30931091]
[144.16809082 201.48501587]
[130.13345337 196.19076538]
[120.42678070 184.75483704]
[117.48326874 170.04896545]
[110.29188538 156.88522339]
[110.29188538 171.88522339]
[110.29188538 186.88522339]
[110.29188538 201.88522339]
[110.29188538 216.88522339]
[110.29188538 231.88522339]
[110.29188538 246.88522339]
[110.29188538 261.88522339]
[110.29188538 276.88522339]
[110.29188538 291.88522339]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[19 59]
[20 58]
[21 57]
[22 55]
[23 54]
[24 53]
[25 52]
[26 51]
[27 50]
[34 46]
[35 45]
[36 44]
[61 84]
[62 83]
[63 82]
[86 129]
[87 128]
[88 127]
[89 126]
[90 125]
[111 124]
[112 123]
[113 122]
[114 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
