%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAAACCUCAACAGUUAAAUCAACAAAACUGCUCGCCAGAACACUACGAGCCACAGCUUAAAAxxxxxxxxxxACUAUGCCUAGAAGGAAUAAUACUAUCGCUGUUCAUUAUAGCUACUCUCAUAACCCUCAACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[97.08926392 321.65444946]
[97.08926392 306.65444946]
[97.08926392 291.65444946]
[97.08926392 276.65444946]
[97.08926392 261.65444946]
[97.08926392 246.65444946]
[97.08926392 231.65444946]
[97.08926392 216.65444946]
[97.08926392 201.65444946]
[97.08926392 186.65444946]
[93.47682953 172.09593201]
[86.46459961 158.83589172]
[79.45236969 145.57585144]
[85.85379028 159.14131165]
[83.52687073 173.95973206]
[73.27573395 184.91026306]
[58.64288330 188.20870972]
[44.68503571 182.71520996]
[36.22563171 170.32818604]
[36.18801880 155.32823181]
[44.58518219 142.89892578]
[58.51565552 137.33546448]
[44.34667969 142.25889587]
[30.17770386 147.18232727]
[16.00872803 152.10575867]
[13.19941235 167.20553589]
[3.20439434 178.86723328]
[-11.28771687 183.95390320]
[-26.37861633 181.09727478]
[-38.00892639 171.06575012]
[-43.05015182 156.55776978]
[-40.14623260 141.47589111]
[-30.07830238 129.87709045]
[-15.55458736 124.88136292]
[-0.48189342 127.83254242]
[11.08530045 137.93678284]
[25.25427628 133.01335144]
[39.42325211 128.08992004]
[53.59222412 123.16649628]
[54.50373840 108.19421387]
[41.03667068 101.58830261]
[27.56960297 94.98239136]
[14.10253525 88.37648010]
[0.63546699 81.77056885]
[-11.83859921 85.19875336]
[-22.93775940 79.37349701]
[-26.93680000 67.91810608]
[-40.26721954 61.04061508]
[-56.61353302 62.35594559]
[-65.70181274 48.70547867]
[-58.18280792 34.13164139]
[-41.79143524 33.62675095]
[-33.38972855 47.71019363]
[-20.05930901 54.58768845]
[-2.62786627 52.78969574]
[7.24137926 68.30349731]
[20.70844650 74.90940857]
[34.17551422 81.51531982]
[47.64258194 88.12123871]
[61.10965347 94.72714996]
[79.82220459 72.81533813]
[104.50639343 71.89552307]
[110.69989014 58.23387146]
[116.89337921 44.57221985]
[123.08686829 30.91057014]
[129.28034973 17.24892044]
[116.59175110 9.20246124]
[105.14653778 -0.53165984]
[95.16748810 -11.76396751]
[86.84885406 -24.27581978]
[80.35256195 -37.82367325]
[75.80506134 -52.14381027]
[73.29486847 -66.95748901]
[72.87084961 -81.97635651]
[74.54125214 -96.90806580]
[78.27356720 -111.46195984]
[83.99514008 -125.35475159]
[91.59460449 -138.31600952]
[100.92403412 -150.09344482]
[111.80181885 -160.45780945]
[124.01622772 -169.20733643]
[137.32949829 -176.17173767]
[151.48249817 -181.21543884]
[166.19972229 -184.24024963]
[181.19468689 -185.18731689]
[196.17553711 -184.03819275]
[210.85064697 -180.81524658]
[224.93435669 -175.58120728]
[238.15254211 -168.43797302]
[250.24787903 -159.52456665]
[260.98495483 -149.01451111]
[270.15475464 -137.11238098]
[277.57879639 -124.04984283]
[283.11257935 -110.08118439]
[286.64834595 -95.47829437]
[288.11730957 -80.52542114]
[287.49087524 -65.51364136]
[284.78118896 -50.73514557]
[280.04104614 -36.47761536]
[273.36270142 -23.01856995]
[264.87615967 -10.61999607]
[254.74659729 0.47676337]
[243.17120361 10.05570793]
[230.37527466 17.93037987]
[216.60791016 23.94749641]
[202.13708496 27.98993492]
[187.24447632 29.97900391]
[172.21997070 29.87598991]
[157.35604858 27.68289566]
[142.94200134 23.44240952]
[136.74851990 37.10406113]
[130.55502319 50.76570892]
[124.36153412 64.42736053]
[118.16804504 78.08901215]
[130.41156006 93.21549225]
[130.63703918 114.40559387]
[116.62644958 132.54995728]
[92.71240997 138.56362915]
[99.72463989 151.82366943]
[106.73686981 165.08370972]
[107.51114655 150.10369873]
[111.78421021 135.72521973]
[119.31671143 122.75364685]
[129.68670654 111.91561127]
[142.31333923 103.81818390]
[156.48931885 98.91494751]
[171.42057800 97.48056030]
[186.27075195 99.59535980]
[200.20800781 105.14089203]
[212.45164490 113.80652618]
[222.31585693 125.10685730]
[229.24807739 138.40888977]
[232.86003113 152.96752930]
[232.94937134 167.96725464]
[229.51109314 182.56788635]
[222.73779297 195.95155334]
[213.00889587 207.36857605]
[200.86933899 216.17942810]
[186.99911499 221.89057922]
[172.17520142 224.18211365]
[157.22790527 222.92567444]
[142.99453735 218.19165039]
[130.27235413 210.24519348]
[119.77399445 199.53144836]
[112.08926392 186.65444946]
[112.08926392 201.65444946]
[112.08926392 216.65444946]
[112.08926392 231.65444946]
[112.08926392 246.65444946]
[112.08926392 261.65444946]
[112.08926392 276.65444946]
[112.08926392 291.65444946]
[112.08926392 306.65444946]
[112.08926392 321.65444946]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[11 120]
[12 119]
[13 118]
[22 39]
[23 38]
[24 37]
[25 36]
[40 60]
[41 59]
[42 58]
[43 57]
[44 56]
[47 54]
[48 53]
[62 114]
[63 113]
[64 112]
[65 111]
[66 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
