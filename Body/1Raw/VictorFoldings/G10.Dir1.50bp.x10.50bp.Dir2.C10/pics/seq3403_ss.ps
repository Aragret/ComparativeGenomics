%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAACGUUGUAGGCCCCUACGGGCUACUACAACCCUUCGCUGACGCCAUAAAACUCUUCACCAAAxxxxxxxxxxGGCAUUGUAUUAGCAAACUCAUCACUAGACAUCGUACUACACGACACGUACUACGUUGUAGCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[73.84185028 419.03527832]
[73.84185028 404.03527832]
[73.84185028 389.03527832]
[73.84185028 374.03527832]
[73.84185028 359.03527832]
[73.84185028 344.03527832]
[73.84185028 329.03527832]
[73.84185028 314.03527832]
[73.84185028 299.03527832]
[73.84185028 284.03527832]
[64.10133362 281.88864136]
[54.87611389 278.09637451]
[46.44192505 272.77191162]
[39.05084991 266.07431030]
[32.92380142 258.20379639]
[19.38183212 264.65475464]
[5.83986521 271.10574341]
[-7.70210218 277.55673218]
[-21.24407005 284.00769043]
[-34.78603745 290.45867920]
[-48.32800293 296.90966797]
[-61.73987579 303.62692261]
[-75.01641846 310.60784912]
[-88.29295349 317.58880615]
[-101.56949615 324.56973267]
[-109.86143494 338.71807861]
[-126.25624084 338.34066772]
[-133.88833618 323.82574463]
[-124.90647888 310.10501099]
[-108.55043030 311.29321289]
[-95.27389526 304.31225586]
[-81.99735260 297.33132935]
[-68.72081757 290.35037231]
[-66.46222687 286.08737183]
[-61.47507858 283.22506714]
[-54.77898407 283.36767578]
[-41.23701477 276.91671753]
[-27.69504738 270.46572876]
[-14.15307999 264.01473999]
[-0.61111259 257.56378174]
[12.93085480 251.11279297]
[26.47282219 244.66181946]
[23.93955612 220.14389038]
[31.87534332 196.76411438]
[48.86683655 178.79391479]
[71.84292603 169.53161621]
[96.62976074 170.69706726]
[102.40422821 156.85310364]
[102.07497406 149.42958069]
[108.43196106 142.79446411]
[114.47881317 129.06727600]
[85.60041809 125.65798950]
[73.72591400 102.26084900]
[85.28073120 81.91239929]
[80.05770874 67.85110474]
[74.83467865 53.78981018]
[59.93978882 55.98886871]
[44.91320038 55.04265976]
[30.41181374 50.99254227]
[17.06956482 44.01557159]
[5.46972370 34.41674805]
[-3.88061714 22.61569786]
[-10.57270050 9.12830734]
[-14.31397724 -5.45581198]
[-14.94089413 -20.49910545]
[-12.42604542 -35.34394455]
[-6.87937021 -49.34137344]
[1.45665538 -61.87948990]
[12.21761608 -72.41017914]
[24.93308830 -80.47308350]
[39.04720688 -85.71572876]
[53.94296265 -87.90892792]
[68.96917725 -86.95681000]
[83.46897125 -82.90098572]
[96.80847168 -75.91876984]
[108.40454102 -66.31538391]
[117.75023651 -54.51065445]
[124.43701172 -41.02063370]
[128.17254639 -26.43504333]
[128.79354858 -11.39150429]
[126.27286530 3.45234323]
[120.72068024 17.44759178]
[112.37972260 29.98242760]
[101.61462402 40.50888062]
[88.89597321 48.56678391]
[94.11900330 62.62807846]
[99.34202576 76.68937683]
[109.31956482 75.33049011]
[120.06892395 78.48445129]
[129.50733948 86.44052124]
[141.33964539 77.22118378]
[153.17196655 68.00183868]
[155.54571533 55.28861237]
[165.63534546 47.85659027]
[177.68292236 49.26715088]
[189.69506836 40.28337860]
[201.70722961 31.29960632]
[199.22354126 16.19696236]
[204.05390930 1.67366278]
[215.08833313 -8.93294144]
[229.79118347 -13.18553162]
[244.78387451 -10.10689354]
[256.62118530 -0.40447599]
[262.58294678 13.69217682]
[261.29925537 28.94375801]
[253.06507874 41.84556580]
[239.77253723 49.43285751]
[224.47618103 49.96213150]
[210.69099426 43.31175995]
[198.67884827 52.29553223]
[186.66668701 61.27930450]
[180.66177368 77.74479675]
[162.39131165 79.83415222]
[150.55899048 89.05349731]
[138.72668457 98.27284241]
[142.82324219 112.70260620]
[157.73475647 114.32947540]
[172.64627075 115.95633698]
[187.55778503 117.58320618]
[200.91549683 108.69776917]
[216.14616394 113.73826599]
[221.56610107 128.83805847]
[213.01762390 142.41387939]
[197.05836487 144.05151367]
[185.93092346 132.49472046]
[171.01940918 130.86785889]
[156.10789490 129.24098206]
[141.19638062 127.61412048]
[128.20599365 135.11412048]
[122.15914154 148.84130859]
[116.24819946 162.62756348]
[110.47373962 176.47152710]
[117.48532867 181.27803040]
[123.71836853 187.05236816]
[129.04054260 193.67031860]
[133.33911133 200.98977661]
[136.52331543 208.85374451]
[138.52624512 217.09381104]
[139.30632019 225.53367615]
[138.84808350 233.99291992]
[137.16252136 242.29093933]
[134.28684998 250.25071716]
[130.28364563 257.70263672]
[125.23946381 264.48812866]
[119.26304626 270.46292114]
[112.48291016 275.50027466]
[105.04460907 279.49359131]
[97.10760498 282.35861206]
[88.84185028 284.03527832]
[88.84185028 299.03527832]
[88.84185028 314.03527832]
[88.84185028 329.03527832]
[88.84185028 344.03527832]
[88.84185028 359.03527832]
[88.84185028 374.03527832]
[88.84185028 389.03527832]
[88.84185028 404.03527832]
[88.84185028 419.03527832]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 158]
[2 157]
[3 156]
[4 155]
[5 154]
[6 153]
[7 152]
[8 151]
[9 150]
[10 149]
[15 42]
[16 41]
[17 40]
[18 39]
[19 38]
[20 37]
[21 36]
[22 33]
[23 32]
[24 31]
[25 30]
[47 132]
[48 131]
[50 130]
[51 129]
[54 87]
[55 86]
[56 85]
[90 115]
[91 114]
[92 113]
[95 111]
[96 110]
[97 109]
[116 128]
[117 127]
[118 126]
[119 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
