%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCGGCGUAAAGAGUGUUUUAGAUCACCCCCUCCCCAAUAAAGCUAAAACUCACCUGAGUUxxxxxxxxxxAGACACACGAGCAUAUUUCACCUCCGCUACCAUAAUCAUCGCUAUCCCCACCGGCGUCAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-37.57244110 206.09730530]
[-49.83480835 214.73643494]
[-62.09717941 223.37554932]
[-74.35954285 232.01466370]
[-86.62191772 240.65377808]
[-98.88428497 249.29289246]
[-111.14665222 257.93200684]
[-123.40901947 266.57113647]
[-135.67138672 275.21023560]
[-147.93376160 283.84936523]
[-145.08042908 297.72628784]
[-147.73558044 311.59832764]
[-155.46406555 323.36819458]
[-167.06623840 331.26937866]
[-180.76414490 334.13116455]
[-194.47392273 331.55206299]
[-206.12280273 323.95571899]
[-218.56224060 332.33786011]
[-231.00169373 340.72000122]
[-243.44113159 349.10214233]
[-255.88056946 357.48431396]
[-262.58615112 372.44982910]
[-278.92492676 373.85598755]
[-288.08892822 360.25622559]
[-280.65103149 345.64083862]
[-264.26272583 345.04486084]
[-251.82327271 336.66271973]
[-239.38383484 328.28057861]
[-226.94439697 319.89843750]
[-214.50494385 311.51629639]
[-217.10675049 295.77999878]
[-212.58393860 280.42422485]
[-201.78970337 268.52456665]
[-186.83854675 262.48724365]
[-170.69218445 263.56271362]
[-156.57287598 271.58697510]
[-144.31050110 262.94787598]
[-132.04814148 254.30876160]
[-119.78576660 245.66964722]
[-107.52339935 237.03051758]
[-95.26103210 228.39140320]
[-82.99866486 219.75228882]
[-70.73629761 211.11317444]
[-58.47392654 202.47406006]
[-46.21155930 193.83494568]
[-57.38111496 173.57989502]
[-65.76090240 152.02056885]
[-71.20238495 129.53910828]
[-73.60910797 106.53402710]
[-72.93840790 83.41312408]
[-69.20216370 60.58625031]
[-62.46661758 38.45802689]
[-52.85115814 17.42070770]
[-40.52623367 -2.15279555]
[-25.71031761 -19.91552162]
[-8.66603756 -35.55260468]
[10.30447483 -48.78685760]
[3.12196589 -61.95544052]
[-4.06054306 -75.12402344]
[-11.24305153 -88.29260254]
[-18.42556000 -101.46118927]
[-32.69866180 -109.53649902]
[-32.57120132 -125.93515015]
[-18.17430115 -133.78761292]
[-4.31825542 -125.01595306]
[-5.25697803 -108.64369965]
[1.92553067 -95.47511292]
[9.10803986 -82.30653381]
[16.29054832 -69.13794708]
[23.47305679 -55.96936798]
[34.49543762 -60.90981293]
[45.83445740 -65.07244110]
[57.43531036 -68.43711853]
[69.24192047 -70.98759460]
[81.19720459 -72.71152496]
[93.24338531 -73.60058594]
[105.32222748 -73.65048218]
[117.37533569 -72.86096954]
[129.34445190 -71.23585510]
[141.17173767 -68.78301239]
[152.79998779 -65.51428223]
[164.17300415 -61.44547272]
[175.23582458 -56.59625244]
[185.93496704 -50.99006271]
[196.21868896 -44.65399933]
[206.03730774 -37.61869049]
[215.34335327 -29.91814804]
[224.09184265 -21.58959389]
[232.24049377 -12.67328644]
[239.74989319 -3.21232772]
[252.18933105 -11.59447098]
[264.62878418 -19.97661400]
[261.94967651 -34.96802521]
[265.60607910 -49.75148392]
[274.96444702 -61.76567459]
[288.40341187 -68.92906189]
[303.59457397 -70.00054169]
[317.90600586 -64.79447937]
[328.85812378 -54.21285629]
[334.55343628 -40.08900070]
[334.00518799 -24.86995697]
[327.30838013 -11.19251633]
[315.62322998 -1.42637646]
[300.97430420 2.73641825]
[285.89959717 0.57463861]
[273.01092529 -7.53717375]
[260.57147217 0.84496945]
[248.13203430 9.22711277]
[254.03501892 19.65058517]
[259.20568848 30.45605087]
[263.61950684 41.59214020]
[267.25540161 53.00590897]
[270.09616089 64.64309692]
[272.12826538 76.44837952]
[273.34201050 88.36562347]
[273.73168945 100.33818817]
[273.29541016 112.30913544]
[272.03524780 124.22157288]
[269.95721436 136.01884460]
[267.07119751 147.64489746]
[263.39086914 159.04441833]
[258.93374634 170.16323853]
[253.72103882 180.94850159]
[247.77751160 191.34890747]
[241.13142395 201.31503296]
[233.81439209 210.79948425]
[225.86116028 219.75718689]
[217.30958557 228.14553833]
[208.20028687 235.92466736]
[198.57659912 243.05758667]
[188.48425293 249.51037598]
[177.97123718 255.25238037]
[167.08753967 260.25628662]
[155.88488770 264.49832153]
[144.41656494 267.95828247]
[132.73706055 270.61975098]
[120.90193176 272.47006226]
[108.96743011 273.50042725]
[96.99028778 273.70596313]
[85.02746582 273.08563232]
[73.13581848 271.64245605]
[61.37188721 269.38323975]
[49.79160309 266.31875610]
[38.45001602 262.46359253]
[27.40104866 257.83602905]
[16.69722748 252.45806885]
[6.38944340 246.35531616]
[-3.47330189 239.55676270]
[-12.84411812 232.09474182]
[-21.67845535 224.00471497]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 45]
[2 44]
[3 43]
[4 42]
[5 41]
[6 40]
[7 39]
[8 38]
[9 37]
[10 36]
[17 30]
[18 29]
[19 28]
[20 27]
[21 26]
[57 70]
[58 69]
[59 68]
[60 67]
[61 66]
[90 108]
[91 107]
[92 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
