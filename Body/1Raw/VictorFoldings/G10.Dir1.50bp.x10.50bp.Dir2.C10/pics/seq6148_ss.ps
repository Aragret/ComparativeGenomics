%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUACUUCUCCCGCCGCCGGGAAAAAAGGCGGGAGAAGCCCCGGCAGGUUUGAAGCUGCUUxxxxxxxxxxCACUGAGCCACAACCCAAACAACCCAGCUCUCCCUAAGCUUCAAACUAGACUACUUCUCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[104.20606995 293.66519165]
[104.20606995 278.66519165]
[104.20606995 263.66519165]
[104.20606995 248.66520691]
[104.20606995 233.66520691]
[104.20606995 218.66520691]
[104.20606995 203.66520691]
[104.20606995 188.66520691]
[104.20606995 173.66520691]
[104.20606995 158.66520691]
[102.49337769 143.76330566]
[99.09040070 129.15440369]
[95.68742371 114.54550934]
[82.67111969 107.09059906]
[68.34851837 111.54741669]
[54.02592087 116.00423431]
[39.70332336 120.46105194]
[25.38072586 124.91786194]
[11.05812931 129.37467957]
[-3.26446795 133.83149719]
[-17.58706474 138.28831482]
[-31.90966225 142.74513245]
[-46.23226166 147.20195007]
[-60.55485916 151.65875244]
[-62.74134445 166.76445007]
[-71.27253723 179.42074585]
[-84.45455933 187.11470032]
[-99.67012024 188.31867981]
[-113.89814758 182.79365540]
[-124.31365967 171.63659668]
[-128.84864807 157.06277466]
[-126.60269928 141.96580505]
[-118.02173615 129.34321594]
[-104.80950928 121.70122528]
[-89.58933258 120.55716705]
[-75.38317108 126.13818359]
[-65.01167297 137.33616638]
[-50.68907547 132.87934875]
[-36.36647797 128.42253113]
[-22.04388046 123.96571350]
[-7.72128391 119.50889587]
[6.60131359 115.05208588]
[20.92391014 110.59526825]
[35.24650955 106.13845062]
[49.56910706 101.68164062]
[63.89170456 97.22482300]
[78.21430206 92.76800537]
[64.92906189 85.80364227]
[57.10861969 73.00361633]
[56.97465134 58.00421143]
[64.56520844 45.06653976]
[77.72393799 37.86598969]
[92.71263885 38.44812775]
[105.27324677 46.64758301]
[111.83749390 60.13500977]
[110.54057312 75.07883453]
[101.75050354 87.23408508]
[111.01544952 75.43744659]
[120.28040314 63.64080429]
[129.54534912 51.84416580]
[138.81030273 40.04752350]
[148.07525635 28.25088501]
[157.34019470 16.45424461]
[166.60514832 4.65760469]
[175.87010193 -7.13903522]
[185.13504028 -18.93567467]
[190.62208557 -32.89606476]
[191.86895752 -47.84415054]
[193.11582947 -62.79224014]
[179.34150696 -69.12025452]
[168.56436157 -79.77994537]
[162.08580017 -93.48410797]
[160.68812561 -108.57788849]
[164.54013062 -123.23864746]
[173.17665100 -135.69602966]
[185.55479431 -144.44573975]
[200.17984009 -148.43119812]
[215.28573608 -147.17117310]
[229.04837036 -140.81777954]
[239.80584717 -130.13824463]
[246.25915527 -116.42216492]
[247.62899780 -101.32583618]
[243.74998474 -86.67219543]
[235.09053040 -74.23075104]
[222.69627380 -65.50387573]
[208.06391907 -61.54536438]
[206.81704712 -46.59727859]
[205.57015991 -31.64919090]
[214.52088928 -43.68598938]
[225.73922729 -53.64334869]
[238.75318909 -61.10235214]
[253.01527405 -65.74918365]
[267.92544556 -67.38835144]
[282.85641479 -65.95088959]
[297.17999268 -61.49726868]
[310.29360962 -54.21486664]
[321.64550781 -44.41006470]
[330.75811768 -32.49536133]
[337.24807739 -18.97202492]
[340.84231567 -4.40900898]
[341.38961792 10.58100319]
[338.86697388 25.36735725]
[333.38052368 39.32796860]
[325.16104126 51.87549591]
[314.55441284 62.48204803]
[302.00677490 70.70138550]
[288.04611206 76.18770599]
[273.25973511 78.71020508]
[258.26974487 78.16274261]
[243.70675659 74.56835938]
[230.18348694 68.07826996]
[218.26887512 58.96553421]
[208.46418762 47.61352921]
[201.18191528 34.49985123]
[196.72843933 20.17621613]
[195.29112244 5.24523735]
[196.93168640 -9.67072582]
[187.66673279 2.12591410]
[178.40179443 13.92255402]
[169.13684082 25.71919441]
[159.87188721 37.51583481]
[150.60693359 49.31247330]
[141.34199524 61.10911560]
[132.07704163 72.90575409]
[122.81209564 84.70239258]
[113.54714203 96.49903107]
[110.29631805 111.14253235]
[113.69929504 125.75142670]
[117.10227203 140.36032104]
[123.16355133 126.63950348]
[134.82655334 117.20687866]
[149.51153564 114.14885712]
[163.97030640 118.14185333]
[175.00471497 128.30264282]
[180.17407227 142.38375854]
[178.33494568 157.27058411]
[169.89413452 169.67028809]
[156.71867371 176.84017944]
[141.72285461 177.19433594]
[128.22361755 170.65443420]
[119.20606995 158.66520691]
[119.20606995 173.66520691]
[119.20606995 188.66520691]
[119.20606995 203.66520691]
[119.20606995 218.66520691]
[119.20606995 233.66520691]
[119.20606995 248.66520691]
[119.20606995 263.66519165]
[119.20606995 278.66519165]
[119.20606995 293.66519165]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 129]
[12 128]
[13 127]
[14 47]
[15 46]
[16 45]
[17 44]
[18 43]
[19 42]
[20 41]
[21 40]
[22 39]
[23 38]
[24 37]
[57 126]
[58 125]
[59 124]
[60 123]
[61 122]
[62 121]
[63 120]
[64 119]
[65 118]
[66 117]
[67 88]
[68 87]
[69 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
