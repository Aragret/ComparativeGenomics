%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUAGCUAAGACCCAAACUGGGAUUAGAUACCCCACUAUGCUUAGCCCUAAACCUCAACAGUUAxxxxxxxxxxUAUACCUUCUGCAUAAUGAAUUAACUAGAAAUAACUUUGCAAGGAGAGCCAAAGCUAAGACCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 251.80125427]
[92.50000000 236.80125427]
[92.50000000 221.80125427]
[92.50000000 206.80125427]
[92.50000000 191.80125427]
[92.50000000 176.80125427]
[92.50000000 161.80125427]
[92.50000000 146.80125427]
[92.50000000 131.80125427]
[92.50000000 116.80126190]
[86.71732330 112.02520752]
[72.66229248 117.26506805]
[75.15197754 102.47309875]
[69.36930084 97.69704437]
[54.63951492 100.53134918]
[39.90972519 103.36565399]
[25.17993355 106.19995880]
[10.45014191 109.03426361]
[-4.27964830 111.86856079]
[-10.76100159 132.44622803]
[-36.68635178 141.33110046]
[-49.62641907 148.91758728]
[-62.56648636 156.50405884]
[-75.50655365 164.09054565]
[-86.11248779 177.31742859]
[-101.75847626 170.78755188]
[-99.81502533 153.94535828]
[-83.09303284 151.15048218]
[-70.15296173 143.56399536]
[-57.21289825 135.97752380]
[-44.27283096 128.39103699]
[-46.05648804 121.10622406]
[-49.62379837 106.53658295]
[-51.40745544 99.25177002]
[-66.38868713 98.50170135]
[-81.36992645 97.75163269]
[-91.00173950 109.91748047]
[-105.95397949 114.06598663]
[-120.47721100 108.60196686]
[-128.98693848 95.62644958]
[-128.21101379 80.12878418]
[-118.44779968 68.06814575]
[-103.45143127 64.08208466]
[-88.98833466 69.70333099]
[-80.61985779 82.77040100]
[-65.63862610 83.52046967]
[-50.65738678 84.27053070]
[-31.20166397 78.43193817]
[-14.80416489 84.56802368]
[-7.11395121 97.13877106]
[7.61583948 94.30446625]
[22.34563065 91.47016907]
[37.07542038 88.63586426]
[51.80521011 85.80155945]
[66.53500366 82.96725464]
[88.44270325 77.23088074]
[102.16175079 86.65547180]
[110.88111877 74.45003510]
[107.14997101 61.47328568]
[111.52727509 48.90624619]
[122.19580841 41.28238297]
[135.11331177 41.21393967]
[144.07514954 29.18540955]
[153.03698730 17.15688133]
[161.75636292 4.95144653]
[170.22976685 -7.42600965]
[178.70317078 -19.80346489]
[180.98854065 -28.70655823]
[187.47200012 -32.34148788]
[196.19136047 -44.54692459]
[204.91073608 -56.75235748]
[213.63009644 -68.95779419]
[222.34947205 -81.16323090]
[211.52270508 -91.58432770]
[202.32872009 -103.47080994]
[194.96348572 -116.56932831]
[189.58398438 -130.60067749]
[186.30488586 -145.26577759]
[185.19606018 -160.25205994]
[186.28117371 -175.24006653]
[189.53709412 -189.91033936]
[194.89440918 -203.95018005]
[202.23892212 -217.06031799]
[211.41410828 -228.96131897]
[222.22436523 -239.39952087]
[234.43930054 -248.15243530]
[247.79853821 -255.03346252]
[262.01733398 -259.89596558]
[276.79260254 -262.63626099]
[291.80941772 -263.19601440]
[306.74768066 -261.56320190]
[321.28897095 -257.77267456]
[335.12341309 -251.90524292]
[347.95602417 -244.08595276]
[359.51333618 -234.48146057]
[369.54901123 -223.29649353]
[377.84912109 -210.76948547]
[384.23672485 -197.16740417]
[388.57571411 -182.78022766]
[390.77355957 -167.91458130]
[390.78344727 -152.88734436]
[388.60516357 -138.01882935]
[384.28512573 -123.62594604]
[377.91540527 -110.01548767]
[369.63180542 -97.47755432]
[359.61087036 -86.27939606]
[348.06619263 -76.65971375]
[335.24386597 -68.82353210]
[321.41717529 -62.93789673]
[306.88085938 -59.12824631]
[291.94476318 -57.47579575]
[276.92721558 -58.01575851]
[262.14834595 -60.73662949]
[247.92318726 -65.58041382]
[234.55490112 -72.44386292]
[225.83554077 -60.23843002]
[217.11616516 -48.03299332]
[208.39680481 -35.82755661]
[199.67744446 -23.62212181]
[191.08062744 -11.33006096]
[182.60722351 1.04739487]
[174.13381958 13.42485142]
[174.13064575 18.25172234]
[171.05715942 23.11568451]
[165.06552124 26.11871910]
[156.10368347 38.14724731]
[147.14184570 50.17577362]
[150.29360962 66.66990662]
[140.36767578 80.63052368]
[123.08655548 83.16939545]
[114.36718750 95.37483215]
[124.70706177 84.50804901]
[138.20455933 77.96453094]
[153.14031982 76.57781219]
[167.61178589 80.52452850]
[179.77554321 89.30194092]
[188.08213806 101.79196167]
[191.47343445 116.40357208]
[189.51747131 131.27549744]
[182.46336365 144.51330566]
[171.20971680 154.43074036]
[157.19004822 159.76448059]
[142.19021606 159.83508301]
[128.12094116 154.63359070]
[116.77442169 144.82255554]
[109.59600067 131.65173340]
[107.50000000 116.80126190]
[107.50000000 131.80125427]
[107.50000000 146.80125427]
[107.50000000 161.80125427]
[107.50000000 176.80125427]
[107.50000000 191.80125427]
[107.50000000 206.80125427]
[107.50000000 221.80125427]
[107.50000000 236.80125427]
[107.50000000 251.80125427]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 156]
[2 155]
[3 154]
[4 153]
[5 152]
[6 151]
[7 150]
[8 149]
[9 148]
[10 147]
[14 55]
[15 54]
[16 53]
[17 52]
[18 51]
[19 50]
[21 31]
[22 30]
[23 29]
[24 28]
[34 47]
[35 46]
[36 45]
[57 131]
[58 130]
[62 127]
[63 126]
[64 125]
[65 122]
[66 121]
[67 120]
[69 119]
[70 118]
[71 117]
[72 116]
[73 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
