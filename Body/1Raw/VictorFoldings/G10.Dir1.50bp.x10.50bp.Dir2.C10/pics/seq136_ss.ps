%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUACGUUCAAUAUUACAGGCGAACAUACUUACUAAAGUGUGUUAAUUAAUUAAUGCUUGUAxxxxxxxxxxCCCGGACGUCUAAACCAAACCACUUUCACCGCUACACGACCGGGGGUAUACUACGGUCAAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.07046509 396.66925049]
[92.07046509 381.66925049]
[92.07046509 366.66925049]
[92.07046509 351.66925049]
[92.07046509 336.66925049]
[92.07046509 321.66925049]
[92.07046509 306.66925049]
[92.07046509 291.66925049]
[92.07046509 276.66925049]
[92.07046509 261.66925049]
[77.05490112 257.77325439]
[63.54269409 250.13052368]
[52.45114136 239.25332642]
[44.53489685 225.87368774]
[40.33465195 210.89419556]
[40.14018250 195.32705688]
[43.97038651 180.22576904]
[51.57160187 166.61373901]
[62.43440628 155.41499329]
[75.82775116 147.39141846]
[90.84815979 143.09094238]
[90.54017639 128.09410095]
[90.23220062 113.09725952]
[81.69174194 100.76597595]
[67.76102448 95.20404053]
[53.83031082 89.64210510]
[39.89959335 84.08016968]
[25.96887779 78.51822662]
[12.03816223 72.95629120]
[-1.89255381 67.39435577]
[-15.82326984 61.83241653]
[-30.25065422 57.72747040]
[-45.02276993 55.12274933]
[-59.79488754 52.51802826]
[-74.56700134 49.91330338]
[-89.33911896 47.30858231]
[-104.11123657 44.70385742]
[-118.88335419 42.09913635]
[-133.65547180 39.49441528]
[-148.42758179 36.88969040]
[-163.64428711 43.00392914]
[-176.37898254 32.67147064]
[-173.53129578 16.52146339]
[-158.03070068 11.16765022]
[-145.82286072 22.11757469]
[-131.05075073 24.72229767]
[-116.27863312 27.32702065]
[-101.50651550 29.93174362]
[-86.73439789 32.53646469]
[-71.96228027 35.14118958]
[-57.19016647 37.74591064]
[-42.41804886 40.35063171]
[-27.64593124 42.95535660]
[-37.58969498 31.72496796]
[-40.71900558 17.05501938]
[-36.22348404 2.74452400]
[-25.26731491 -7.50058937]
[-10.68776989 -11.02718639]
[3.73954535 -6.92199993]
[14.27845192 3.75186825]
[18.19973183 18.23025131]
[14.48790836 32.76374054]
[4.10421705 43.58866501]
[-10.26133251 47.90169907]
[3.66938353 53.46363831]
[17.60009956 59.02557373]
[31.53081512 64.58750916]
[45.46153259 70.14945221]
[59.39225006 75.71138763]
[73.32296753 81.27332306]
[87.25367737 86.83525848]
[74.80179596 78.47161865]
[67.90817261 65.14952850]
[68.27263641 50.15396118]
[75.80532837 37.18250656]
[88.64882660 29.43366241]
[103.63619232 28.81814003]
[117.07184601 35.48771286]
[125.64282990 47.79779816]
[127.23571014 62.71298218]
[121.45772552 76.55548096]
[109.73471069 85.91152191]
[123.16216278 79.22544861]
[136.58961487 72.53937531]
[150.01705933 65.85329437]
[163.44450378 59.16722107]
[172.34910583 46.08980942]
[187.19090271 47.34292221]
[200.61834717 40.65684891]
[214.04580688 33.97077179]
[210.49340820 19.33081818]
[210.28829956 4.26742935]
[213.44076538 -10.46381950]
[219.79267883 -24.12401581]
[229.02543640 -36.02796936]
[240.67590332 -45.57858276]
[254.15971375 -52.29680252]
[268.80053711 -55.84564590]
[283.86398315 -56.04710388]
[298.59445190 -52.89106750]
[312.25311279 -46.53584671]
[324.15481567 -37.30021667]
[333.70260620 -25.64742851]
[340.41757202 -12.16198635]
[343.96286011 2.47968745]
[344.16067505 17.54317284]
[341.00106812 32.27289200]
[334.64254761 45.93001175]
[325.40402222 57.82948685]
[313.74893188 67.37445831]
[300.26184082 74.08614349]
[285.61932373 77.62788391]
[270.55578613 77.82204437]
[255.82682800 74.65886688]
[242.17126465 68.29702759]
[230.27401733 59.05563354]
[220.73187256 47.39822006]
[207.30442810 54.08429718]
[193.87698364 60.77037430]
[185.93280029 73.36955261]
[170.13058472 72.59467316]
[156.70314026 79.28074646]
[143.27568054 85.96681976]
[129.84823608 92.65290070]
[116.42078400 99.33897400]
[115.22692871 104.14038849]
[112.72422791 108.17775726]
[109.25437927 111.12535858]
[105.22904205 112.78928375]
[105.53701782 127.78612518]
[105.84499359 142.78295898]
[119.99984741 146.07614136]
[132.94084167 152.66856384]
[143.91233826 162.17018127]
[152.27490234 174.02120972]
[157.54260254 187.52513123]
[159.41127014 201.88958740]
[157.77598572 216.27296448]
[152.73701477 229.83357239]
[144.59370422 241.77899170]
[133.82658386 251.41238403]
[121.06912994 258.17309570]
[107.07046509 261.66925049]
[107.07046509 276.66925049]
[107.07046509 291.66925049]
[107.07046509 306.66925049]
[107.07046509 321.66925049]
[107.07046509 336.66925049]
[107.07046509 351.66925049]
[107.07046509 366.66925049]
[107.07046509 381.66925049]
[107.07046509 396.66925049]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[21 131]
[22 130]
[23 129]
[24 71]
[25 70]
[26 69]
[27 68]
[28 67]
[29 66]
[30 65]
[31 64]
[32 53]
[33 52]
[34 51]
[35 50]
[36 49]
[37 48]
[38 47]
[39 46]
[40 45]
[82 125]
[83 124]
[84 123]
[85 122]
[86 121]
[88 119]
[89 118]
[90 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
