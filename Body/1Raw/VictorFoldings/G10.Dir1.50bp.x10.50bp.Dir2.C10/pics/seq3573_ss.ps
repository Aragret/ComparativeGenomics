%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACCCCCCUCCCCAUACCCAACCCCCUGGUCAACCUCAACCUAGGCCUCCUAUUUAUUCUAxxxxxxxxxxAACAACAACCUAUUUAGCUGUUCCCCAACCUUUUCCUCCGACCCCCUAACAACCCCCCUCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-8.16786671 317.28726196]
[-15.26427078 330.50247192]
[-22.36067390 343.71765137]
[-29.45707703 356.93283081]
[-36.55348206 370.14801025]
[-43.64988327 383.36318970]
[-50.74628830 396.57836914]
[-57.84268951 409.79354858]
[-64.93909454 423.00872803]
[-72.03549957 436.22390747]
[-74.20198822 453.03887939]
[-90.95955658 455.61187744]
[-98.07096863 440.22149658]
[-85.25067902 429.12753296]
[-78.15427399 415.91232300]
[-71.05787659 402.69714355]
[-63.96147156 389.48196411]
[-56.86506653 376.26678467]
[-49.76866150 363.05160522]
[-42.67226028 349.83642578]
[-35.57585526 336.62124634]
[-28.47945404 323.40606689]
[-21.38304901 310.19085693]
[-43.28969955 295.91351318]
[-63.53335953 279.36245728]
[-81.87908936 260.72973633]
[-98.11396027 240.23161316]
[-112.04956818 218.10600281]
[-123.52417755 194.60966492]
[-132.40460205 170.01531982]
[-138.58779907 144.60839844]
[-142.00199890 118.68374634]
[-142.60755920 92.54225922]
[-140.39747620 66.48732758]
[-135.39739990 40.82133865]
[-149.82478333 36.71639252]
[-164.25216675 32.61144638]
[-178.72093201 28.65483856]
[-193.22955322 24.84697914]
[-207.73818970 21.03911972]
[-219.66119385 30.96995354]
[-235.14649963 31.96240234]
[-248.23968506 23.63484955]
[-253.90614319 9.18940830]
[-249.96702576 -5.81935358]
[-237.93698120 -15.62026119]
[-222.44183350 -16.44466591]
[-209.43975830 -7.97556686]
[-203.93032837 6.53049469]
[-189.42169189 10.33835316]
[-174.91307068 14.14621258]
[-167.59983826 12.79386711]
[-160.14721680 18.18406296]
[-145.71983337 22.28900909]
[-131.29244995 26.39395332]
[-127.39657593 15.11863708]
[-122.95140839 4.04835653]
[-117.96768951 -6.79014635]
[-112.45745087 -17.37069130]
[-106.43401337 -27.66771889]
[-99.91191864 -37.65635681]
[-92.90692139 -47.31247711]
[-85.43595123 -56.61275864]
[-77.51704407 -65.53472900]
[-69.16933441 -74.05683899]
[-60.41298676 -82.15850067]
[-51.26915359 -89.82015228]
[-41.75991821 -97.02328491]
[-31.90825081 -103.75048828]
[-21.73795128 -109.98551941]
[-11.27358723 -115.71331787]
[-0.54043406 -120.92005157]
[10.43558025 -125.59313202]
[21.62794304 -129.72128296]
[33.00962067 -133.29452515]
[44.55311584 -136.30422974]
[56.23054504 -138.74313354]
[68.01370239 -140.60533142]
[79.87413025 -141.88633728]
[91.78316498 -142.58303833]
[103.71205139 -142.69377136]
[115.63197327 -142.21826172]
[127.51413727 -141.15766907]
[139.32983398 -139.51452637]
[151.05052185 -137.29283142]
[162.64790344 -134.49794006]
[174.09396362 -131.13661194]
[185.36102295 -127.21694946]
[196.42190552 -122.74843597]
[207.24986267 -117.74185181]
[217.81875610 -112.20930481]
[228.10305786 -106.16414642]
[238.07791138 -99.62098694]
[247.71922302 -92.59563446]
[257.00372314 -85.10504913]
[265.90896606 -77.16733551]
[274.41342163 -68.80166626]
[282.49661255 -60.02824020]
[290.13894653 -50.86825562]
[297.32199097 -41.34384155]
[304.02838135 -31.47800255]
[310.24194336 -21.29456902]
[315.94766235 -10.81814003]
[321.13171387 -0.07402392]
[325.78161621 10.91182709]
[329.88613892 22.11287689]
[333.43536377 33.50206757]
[336.42071533 45.05188751]
[338.83496094 56.73443985]
[340.67230225 68.52149963]
[341.92825317 80.38460541]
[342.59985352 92.29508209]
[342.68539429 104.22418213]
[342.18475342 116.14307404]
[341.09906006 128.02296448]
[339.43099976 139.83517456]
[337.18457031 151.55114746]
[334.36523438 163.14260864]
[330.97973633 174.58154297]
[327.03631592 185.84031677]
[322.54446411 196.89173889]
[317.51504517 207.70910645]
[311.96020508 218.26629639]
[305.89337158 228.53781128]
[299.32916260 238.49884033]
[292.28347778 248.12530518]
[284.77331543 257.39398193]
[276.81683350 266.28244019]
[268.43322754 274.76925659]
[259.64279175 282.83389282]
[250.46669006 290.45687866]
[240.92713928 297.61981201]
[231.04716492 304.30538940]
[220.85064697 310.49743652]
[210.36219788 316.18103027]
[199.60716248 321.34240723]
[188.61152649 325.96911621]
[177.40184021 330.04998779]
[166.00518799 333.57516479]
[154.44909668 336.53613281]
[142.76147461 338.92572021]
[130.97056580 340.73818970]
[119.10483551 341.96911621]
[107.19296265 342.61557007]
[95.26371002 342.67593384]
[83.34590912 342.15014648]
[71.46833038 341.03939819]
[59.65966797 339.34640503]
[47.94845581 337.07525635]
[36.36297607 334.23144531]
[24.93121338 330.82183838]
[13.68078709 326.85467529]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 23]
[2 22]
[3 21]
[4 20]
[5 19]
[6 18]
[7 17]
[8 16]
[9 15]
[10 14]
[35 55]
[36 54]
[37 53]
[38 51]
[39 50]
[40 49]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
