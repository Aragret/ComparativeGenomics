%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGAAGCCCCCAUUCGUAUAAUAAUUACAUCACAAGACGUCUUGCACUCAUGAGCUGUCCCCxxxxxxxxxxCAGGCAAAUCAGCCCAAUUAGGUCUCCACCCCUGACUCCCCUCAGCCAUAGAAGGCCCCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[76.07417297 433.82272339]
[78.66516876 414.61499023]
[78.97722626 399.61825562]
[79.28928375 384.62149048]
[79.60134125 369.62472534]
[79.91339111 354.62799072]
[80.22544861 339.63122559]
[80.53750610 324.63446045]
[80.84956360 309.63772583]
[81.16162109 294.64096069]
[81.47367859 279.64422607]
[68.34454346 276.39990234]
[56.18664551 270.46148682]
[45.54610062 262.09265137]
[36.90153503 251.66624451]
[30.64253807 239.64779663]
[27.05210495 226.57464600]
[26.29384995 213.03199768]
[28.40454865 199.62666321]
[33.29235840 186.95986938]
[40.74082565 175.60032654]
[50.41845322 166.05871582]
[61.89346313 158.76463318]
[74.65306091 154.04736328]
[88.12635040 152.12097168]
[89.37322998 137.17288208]
[90.62010193 122.22479248]
[70.94366455 106.09416962]
[74.39691925 75.76519775]
[106.17440796 59.65024567]
[99.82727814 46.05929565]
[93.48014832 32.46834564]
[87.13301849 18.87739563]
[80.78588867 5.28644371]
[66.17739105 5.03260183]
[53.12098694 -3.08056760]
[45.71943283 -17.41583824]
[46.75231552 -34.27924728]
[33.50972748 -41.32438278]
[20.26714325 -48.36951828]
[6.61090231 -54.57492447]
[-7.40581036 -59.91643906]
[-21.42252350 -65.25794983]
[-35.43923569 -70.59946442]
[-51.53544998 -67.46196747]
[-62.09513092 -80.00888824]
[-56.25537872 -95.33303070]
[-40.02363586 -97.67022705]
[-30.09772491 -84.61617279]
[-16.08101082 -79.27466583]
[-2.06429791 -73.93315125]
[11.95241547 -68.59163666]
[7.22781324 -82.82814789]
[13.78113079 -96.32088470]
[27.89169502 -101.40930176]
[41.54817581 -95.20442200]
[46.99705505 -81.22909546]
[41.14470291 -67.41786957]
[27.31227875 -61.61210251]
[40.55486298 -54.56696701]
[53.79745102 -47.52183151]
[66.96603394 -54.70434189]
[68.21290588 -69.65242767]
[69.45977783 -84.60051727]
[70.70665741 -99.54860687]
[56.41731644 -104.35258484]
[43.69324493 -112.43722534]
[33.27420044 -123.33249664]
[25.76593399 -136.40496826]
[21.60496712 -150.89460754]
[21.03320885 -165.95901489]
[24.08390427 -180.72238159]
[30.57968903 -194.32635498]
[40.14290619 -205.98004150]
[52.21756363 -215.00588989]
[66.10165405 -220.87916565]
[80.98798370 -223.25840759]
[96.01107025 -222.00527954]
[110.29749298 -217.19264221]
[123.01666260 -209.10028076]
[133.42909241 -198.19869995]
[140.92944336 -185.12167358]
[145.08161926 -170.62951660]
[145.64424133 -155.56475830]
[142.58459473 -140.80325317]
[136.08056641 -127.20321655]
[126.51028442 -115.55533600]
[114.43016052 -106.53680420]
[100.54251099 -100.67194366]
[85.65473938 -98.30172729]
[84.40786743 -83.35364532]
[83.16099548 -68.40555573]
[81.91411591 -53.45746613]
[101.00633240 -39.97466278]
[105.31476593 -18.44556236]
[94.37683868 -1.06068575]
[100.72396851 12.53026485]
[107.07109833 26.12121582]
[113.41822815 39.71216583]
[119.76535797 53.30311966]
[133.54772949 59.22307968]
[147.77452087 54.46926498]
[162.00129700 49.71545029]
[172.46163940 37.08560181]
[188.58210754 40.09599304]
[193.77934265 55.64979553]
[182.70687866 67.74658966]
[166.75511169 63.94223022]
[152.52833557 68.69604492]
[138.30154419 73.44985962]
[138.69146729 80.93972015]
[139.86123657 103.40928650]
[154.50474548 106.66011810]
[169.14823914 109.91094208]
[183.79174805 113.16176605]
[196.98712158 104.46362305]
[212.45114136 107.72544861]
[221.00929260 121.01204681]
[217.58415222 136.44071960]
[204.20782471 144.85791016]
[188.81622314 141.26985168]
[180.54092407 127.80526733]
[165.89741516 124.55444336]
[151.25392151 121.30361938]
[136.61041260 118.05278778]
[125.76203918 124.06575775]
[114.91049194 125.67268372]
[105.56819153 123.47166443]
[104.32131195 138.41975403]
[103.07444000 153.36784363]
[118.74799347 158.76803589]
[132.51086426 167.99107361]
[143.45072937 180.41926575]
[150.84402466 195.22261047]
[154.20378113 211.41430664]
[153.31173706 227.91653442]
[148.23245239 243.63214111]
[139.30873108 257.51763916]
[127.13843536 268.65243530]
[112.53445435 276.29995728]
[96.47042847 279.95626831]
[96.15837097 294.95303345]
[95.84631348 309.94976807]
[95.53426361 324.94653320]
[95.22220612 339.94329834]
[94.91014862 354.94003296]
[94.59809113 369.93679810]
[94.28603363 384.93353271]
[93.97397614 399.93029785]
[93.66192627 414.92706299]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 142]
[11 141]
[25 130]
[26 129]
[27 128]
[30 100]
[31 99]
[32 98]
[33 97]
[34 96]
[38 61]
[39 60]
[40 59]
[41 52]
[42 51]
[43 50]
[44 49]
[62 93]
[63 92]
[64 91]
[65 90]
[101 110]
[102 109]
[103 108]
[112 125]
[113 124]
[114 123]
[115 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
