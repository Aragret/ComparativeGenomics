%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUGACCCCCAUGCCUCAGGAUACUCCUCAAUAGCCAUCGCUGUAGUAUAUCCAAAGACAACxxxxxxxxxxAUUUACCGUACAUAGCACAUUACAGUCAAAUCCCUUCUCGUCCCCAUGGAUGACCCCCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[107.18030548 422.74932861]
[107.18030548 407.74932861]
[107.18030548 392.74932861]
[107.18030548 377.74932861]
[107.18030548 362.74932861]
[107.18030548 347.74932861]
[107.18030548 332.74932861]
[107.18030548 317.74932861]
[107.18030548 302.74932861]
[107.18030548 287.74932861]
[89.81421661 281.45135498]
[76.11193848 269.01391602]
[68.13884735 252.27861023]
[67.10932159 233.73727417]
[73.20179749 216.16101074]
[85.52847290 202.18598938]
[102.26457977 193.91810608]
[100.70700073 178.99920654]
[99.14941406 164.08029175]
[97.59183502 149.16137695]
[96.03425598 134.24246216]
[87.70602417 132.20452881]
[80.13835907 128.17425537]
[73.79943085 122.40097809]
[69.08141327 115.24185944]
[66.27616882 107.13980865]
[65.55725861 98.59604645]
[51.06166077 94.73888397]
[36.56606674 90.88172913]
[22.07046890 87.02456665]
[7.49776649 83.46980286]
[-7.14573479 80.21897888]
[-21.78923607 76.96815491]
[-16.40456200 90.96834564]
[-23.80836868 104.01378632]
[-38.58907318 106.56932831]
[-49.94317627 96.76706696]
[-49.57174683 81.77165985]
[-37.74691391 72.54369354]
[-51.97369385 67.78987885]
[-66.20046997 63.03606415]
[-80.42725372 58.28224945]
[-94.65402985 53.52843475]
[-110.60579681 57.33279419]
[-121.67826843 45.23600006]
[-116.48103333 29.68219566]
[-100.36056519 26.67180252]
[-89.90021515 39.30165482]
[-75.67343903 44.05546951]
[-61.44665909 48.80928421]
[-47.21987915 53.56309891]
[-32.99309921 58.31691360]
[-18.53841019 62.32465363]
[-3.89490914 65.57547760]
[10.74859238 68.82630157]
[15.23555279 67.02555847]
[20.90471077 68.07051849]
[25.92762947 72.52896881]
[40.42322540 76.38613129]
[54.91882324 80.24329376]
[69.41442108 84.10044861]
[78.16055298 73.32956696]
[90.44480133 66.87944031]
[104.27704620 65.79502106]
[117.41638184 70.25200653]
[127.62985992 59.26634216]
[137.84333801 48.28067780]
[128.10577393 36.84842300]
[119.76129150 24.36298943]
[112.92272949 10.99322510]
[107.68257904 -3.08005929]
[104.11170959 -17.66653824]
[102.25839996 -32.56894684]
[102.14772797 -47.58574677]
[103.78118896 -62.51385117]
[107.13668060 -77.15138245]
[112.16883850 -91.30036926]
[118.80959320 -104.76947784]
[126.96915436 -117.37654114]
[136.53715515 -128.95108032]
[147.38421631 -139.33654785]
[159.36361694 -148.39248657]
[172.31338501 -155.99644470]
[186.05836487 -162.04557800]
[200.41268921 -166.45808411]
[215.18220520 -169.17427063]
[230.16719055 -170.15742493]
[245.16499329 -169.39424133]
[259.97277832 -166.89505005]
[274.39028931 -162.69363403]
[288.22256470 -156.84681702]
[301.28250122 -149.43368530]
[313.39349365 -140.55447388]
[324.39175415 -130.32928467]
[334.12854004 -118.89638519]
[342.47219849 -106.41039276]
[349.30987549 -93.04016876]
[354.54907227 -78.96653748]
[358.11898804 -64.37982178]
[359.97128296 -49.47728729]
[360.08096313 -34.46047974]
[358.44650269 -19.53248215]
[355.09005737 -4.89518023]
[350.05694580 9.25347519]
[343.41528320 22.72213745]
[335.25488281 35.32866287]
[325.68612671 46.90255737]
[314.83834839 57.28730011]
[302.85833740 66.34244537]
[289.90808105 73.94554138]
[276.16268921 79.99375153]
[261.80807495 84.40529633]
[247.03837585 87.12050629]
[232.05331421 88.10265350]
[217.05557251 87.33847046]
[202.24795532 84.83828735]
[187.83071899 80.63591003]
[173.99885559 74.78817749]
[160.93940735 67.37416840]
[148.82901001 58.49415588]
[138.61552429 69.47982025]
[128.40205383 80.46548462]
[134.46788025 100.48811340]
[127.83749390 120.33094788]
[110.95317078 132.68489075]
[112.51074982 147.60379028]
[114.06832886 162.52270508]
[115.62590790 177.44161987]
[117.18349457 192.36053467]
[128.76724243 194.44584656]
[139.49162292 199.26658630]
[148.72192383 206.53114319]
[155.91340637 215.80343628]
[160.64341736 226.52915955]
[162.63624573 238.06883240]
[161.77915955 249.73597717]
[158.12884521 260.83795166]
[151.90757751 270.71704102]
[143.48982239 278.78948975]
[133.37957764 284.57992554]
[122.18030548 287.74932861]
[122.18030548 302.74932861]
[122.18030548 317.74932861]
[122.18030548 332.74932861]
[122.18030548 347.74932861]
[122.18030548 362.74932861]
[122.18030548 377.74932861]
[122.18030548 392.74932861]
[122.18030548 407.74932861]
[122.18030548 422.74932861]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[17 129]
[18 128]
[19 127]
[20 126]
[21 125]
[27 61]
[28 60]
[29 59]
[30 58]
[31 55]
[32 54]
[33 53]
[39 52]
[40 51]
[41 50]
[42 49]
[43 48]
[65 122]
[66 121]
[67 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
