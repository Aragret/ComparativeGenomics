%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCAUGACCCCUAACAGGGGCCCUCUCAGCCCUCCUAAUGACCUCCGGCCUAGCCAUGUGAxxxxxxxxxxCAAUCCUACCUCCAUCGCUAACCCCACUAAAACACUCACCAAGACCUCAACCCCUGACCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[171.23925781 57.72153091]
[159.08592224 66.51337433]
[146.93258667 75.30521393]
[134.77925110 84.09706116]
[122.62592316 92.88890076]
[110.47258759 101.68074799]
[98.78637695 111.08460236]
[87.59808350 121.07569885]
[76.40979004 131.06680298]
[65.22148895 141.05789185]
[54.03319168 151.04899597]
[42.84489822 161.04008484]
[31.65659904 171.03118896]
[26.51684570 185.99426270]
[11.87013912 188.70040894]
[0.68184221 198.69149780]
[2.37435627 214.11599731]
[-5.35187626 227.57276917]
[-19.52596092 233.88743591]
[-34.69767380 230.63186646]
[-45.03318024 219.05787659]
[-46.55826950 203.61593628]
[-38.68651199 190.24375916]
[-24.44475746 184.08323669]
[-9.30925465 187.50320435]
[1.87904179 177.51210022]
[6.21853352 163.26365662]
[21.66550255 159.84288025]
[32.85379791 149.85179138]
[44.04209518 139.86068726]
[55.23039246 129.86959839]
[66.41868591 119.87850189]
[77.60698700 109.88740540]
[88.79528046 99.89630890]
[74.28069305 96.11125183]
[67.99853516 82.49014282]
[74.54235840 68.99279785]
[89.12728119 65.48851776]
[101.08876038 74.53965759]
[101.68074799 89.52741241]
[113.83407593 80.73557281]
[125.98741150 71.94372559]
[138.14074707 63.15188599]
[150.29408264 54.36004257]
[162.44741821 45.56819916]
[149.05021667 22.63448334]
[138.59780884 -1.78097963]
[131.25090027 -27.30191994]
[127.12233734 -53.53507233]
[126.27541351 -80.07624817]
[128.72282410 -106.51653290]
[134.42654419 -132.44863892]
[143.29835510 -157.47314453]
[155.20127869 -181.20460510]
[169.95162964 -203.27760315]
[187.32188416 -223.35226440]
[207.04418945 -241.11953735]
[198.12805176 -253.18197632]
[189.21189880 -265.24441528]
[174.93472290 -274.38763428]
[179.76831055 -290.63793945]
[196.72161865 -290.49179077]
[201.27432251 -274.16055298]
[210.19047546 -262.09811401]
[219.10662842 -250.03569031]
[228.48478699 -256.11917114]
[238.16809082 -261.70431519]
[248.13006592 -266.77593994]
[258.34350586 -271.32009888]
[268.78048706 -275.32443237]
[279.41253662 -278.77798462]
[290.21057129 -281.67126465]
[301.14511108 -283.99639893]
[312.18630981 -285.74703979]
[323.30395508 -286.91833496]
[334.46771240 -287.50714111]
[345.64703369 -287.51184082]
[356.81143188 -286.93237305]
[367.93035889 -285.77032471]
[378.97344971 -284.02886963]
[389.91055298 -281.71273804]
[400.71176147 -278.82830811]
[411.34756470 -275.38336182]
[421.78890991 -271.38739014]
[432.00729370 -266.85125732]
[441.97473145 -261.78738403]
[451.66403198 -256.20953369]
[461.04870605 -250.13299561]
[470.10314941 -243.57435608]
[478.80255127 -236.55149841]
[487.12316895 -229.08363342]
[495.04226685 -221.19114685]
[502.53820801 -212.89561462]
[509.59048462 -204.21965027]
[516.17987061 -195.18699646]
[522.28826904 -185.82231140]
[527.89910889 -176.15118408]
[532.99694824 -166.20001221]
[537.56793213 -155.99598694]
[541.59948730 -145.56700134]
[545.08062744 -134.94152832]
[548.00183105 -124.14859772]
[550.35510254 -113.21769714]
[552.13403320 -102.17869568]
[553.33367920 -91.06174469]
[553.95086670 -79.89720917]
[553.98382568 -68.71560669]
[553.43249512 -57.54747772]
[552.29833984 -46.42333603]
[550.58447266 -35.37357330]
[548.29559326 -24.42838669]
[545.43786621 -13.61767387]
[542.01916504 -2.97097635]
[538.04876709 7.48261595]
[533.53759766 17.71453857]
[528.49786377 27.69683647]
[522.94342041 37.40222931]
[516.88940430 46.80420303]
[510.35229492 55.87705612]
[503.35003662 64.59600830]
[495.90170288 72.93722534]
[488.02764893 80.87790680]
[479.74938965 88.39636993]
[471.08950806 95.47205353]
[462.07168579 102.08561707]
[452.72055054 108.21900177]
[443.06161499 113.85542297]
[433.12133789 118.97949219]
[422.92678833 123.57719421]
[412.50588989 127.63596344]
[401.88705444 131.14469910]
[391.09930420 134.09381104]
[380.17211914 136.47521973]
[369.13537598 138.28244019]
[358.01919556 139.51049805]
[346.85394287 140.15605164]
[335.67013550 140.21731567]
[324.49835205 139.69412231]
[313.36904907 138.58789062]
[302.31271362 136.90164185]
[291.35949707 134.63995361]
[280.53933716 131.80902100]
[269.88183594 128.41654968]
[259.41607666 124.47181702]
[249.17063904 119.98558807]
[239.17355347 114.97011566]
[229.45211792 109.43907928]
[220.03291321 103.40760803]
[210.94166565 96.89215088]
[202.20321655 89.91052246]
[193.84146118 82.48177338]
[185.87922668 74.62620544]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 45]
[2 44]
[3 43]
[4 42]
[5 41]
[6 40]
[7 34]
[8 33]
[9 32]
[10 31]
[11 30]
[12 29]
[13 28]
[15 26]
[16 25]
[57 65]
[58 64]
[59 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
