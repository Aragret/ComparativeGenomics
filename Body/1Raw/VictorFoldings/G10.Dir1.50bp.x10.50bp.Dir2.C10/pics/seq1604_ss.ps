%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGCAAACCCUGAUGAAGGCUACAAAGUAAGCGCAAGUACCCACGUAAAGACGUUAGGUCAAGxxxxxxxxxxCAAACUACCACCUACCUCCCUCACCAAAGCCCAUAAAAAUAAAAAAUUAUAACAAACCCUGACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 256.52816772]
[92.50000000 241.52818298]
[92.50000000 226.52818298]
[92.50000000 211.52818298]
[92.50000000 196.52818298]
[92.50000000 181.52818298]
[92.50000000 166.52818298]
[92.50000000 151.52818298]
[92.50000000 136.52818298]
[92.50000000 121.52818298]
[85.44082642 118.99479675]
[71.32247162 113.92803192]
[64.26329041 111.39465332]
[54.72537994 122.97171021]
[54.83011246 139.01441956]
[42.26264954 148.98629761]
[26.66367149 145.23777771]
[19.99937820 130.64439392]
[27.38204575 116.40095520]
[43.14832306 113.43379211]
[52.68623734 101.85673523]
[55.25768661 87.07879639]
[50.19092560 72.96044159]
[45.12416077 58.84208679]
[40.26463699 54.21991348]
[38.74315643 48.66737366]
[40.15083694 44.04762650]
[35.66039276 29.73553848]
[31.16994476 15.42344952]
[26.67949677 1.11136115]
[12.93045712 2.58740759]
[-0.84839964 1.47631323]
[-14.17467213 -2.18135405]
[-26.58211517 -8.25589943]
[-37.63695526 -16.53310013]
[-46.95304108 -26.72175598]
[-54.20536041 -38.46394348]
[-59.14134979 -51.34757233]
[-61.58970261 -64.92086792]
[-61.46631241 -78.70819855]
[-58.77716827 -92.22674561]
[-53.61806870 -105.00341797]
[-46.17123032 -116.59140015]
[-36.69884109 -126.58577728]
[-25.53382874 -134.63769531]
[-13.06816292 -140.46652222]
[-16.68060112 -155.02503967]
[-24.09266472 -168.06579590]
[-34.75287628 -178.61851501]
[-45.41308594 -189.17123413]
[-63.30676651 -193.40164185]
[-67.32987976 -210.45750427]
[-78.20177460 -220.79200745]
[-89.07366943 -231.12651062]
[-99.94555664 -241.46101379]
[-116.00643158 -244.77465820]
[-120.90962982 -260.42364502]
[-109.61116028 -272.30963135]
[-93.73392487 -268.20532227]
[-89.61105347 -252.33290100]
[-78.73916626 -241.99839783]
[-67.86727142 -231.66389465]
[-56.99538040 -221.32939148]
[-44.86203766 -221.31188965]
[-35.71644974 -212.73965454]
[-34.86036301 -199.83145142]
[-24.20015335 -189.27873230]
[-13.53994370 -178.72601318]
[-17.19691086 -193.27339172]
[-17.70101166 -208.26492310]
[-15.02953243 -223.02511597]
[-9.30284119 -236.88891602]
[-0.77896625 -249.23167419]
[10.15803242 -259.49725342]
[23.01536560 -267.22311401]
[37.21372223 -272.06115723]
[52.11336517 -273.79339600]
[67.04296112 -272.34179688]
[81.32982635 -267.77172852]
[94.33023834 -260.28912354]
[105.45843506 -250.23114014]
[114.21302032 -238.05093384]
[120.19953156 -224.29733276]
[123.14823914 -209.59001160]
[122.92627716 -194.59165955]
[119.54364777 -179.97804260]
[113.15277100 -166.40760803]
[104.04159546 -154.49179077]
[92.62063599 -144.76751709]
[79.40449524 -137.67289734]
[64.98864746 -133.52760315]
[50.02263641 -132.51841736]
[35.18077850 -134.69079590]
[21.13180733 -139.94686890]
[8.50872421 -148.04981995]
[-2.12208748 -158.63748169]
[1.49035001 -144.07896423]
[17.72302628 -144.60148621]
[33.68088150 -141.54693604]
[48.58501816 -135.06152344]
[61.70734024 -125.45893860]
[72.40611267 -113.20529175]
[80.15734863 -98.89637756]
[84.58047485 -83.22878265]
[85.45700073 -66.96593475]
[82.74134064 -50.90090561]
[76.56314087 -35.81777191]
[67.22113037 -22.45329666]
[55.16862106 -11.46098042]
[40.99158478 -3.37908578]
[45.48203278 10.93300343]
[49.97248077 25.24509239]
[54.46292496 39.55718231]
[59.24251556 53.77532196]
[64.30928040 67.89367676]
[69.37603760 82.01203156]
[80.65944672 69.23624420]
[96.92753601 62.96692657]
[114.64009857 64.95245361]
[129.76310730 75.10125732]
[138.68721008 91.42282104]
[152.41091919 97.47754669]
[166.13462830 103.53227234]
[179.85835266 109.58699799]
[196.09452820 107.28076935]
[205.99551392 120.35374451]
[199.37602234 135.35755920]
[183.04562378 136.85757446]
[173.80361938 123.31070709]
[160.07991028 117.25598907]
[146.35620117 111.20126343]
[132.63247681 105.14653778]
[126.34936523 109.24194336]
[135.49026489 121.13496399]
[144.63116455 133.02798462]
[153.77206421 144.92100525]
[165.75924683 153.93807983]
[165.25497437 168.92961121]
[152.68898010 177.12080383]
[138.76914978 171.53167725]
[135.35726929 156.92398071]
[128.16589355 143.76023865]
[120.97450256 130.59651184]
[113.78311920 117.43276978]
[107.50000000 121.52818298]
[107.50000000 136.52818298]
[107.50000000 151.52818298]
[107.50000000 166.52818298]
[107.50000000 181.52818298]
[107.50000000 196.52818298]
[107.50000000 211.52818298]
[107.50000000 226.52818298]
[107.50000000 241.52818298]
[107.50000000 256.52816772]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[13 21]
[14 20]
[22 116]
[23 115]
[24 114]
[27 113]
[28 112]
[29 111]
[30 110]
[46 97]
[47 96]
[48 68]
[49 67]
[50 66]
[52 63]
[53 62]
[54 61]
[55 60]
[121 132]
[122 131]
[123 130]
[124 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
