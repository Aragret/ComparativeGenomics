%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUAGCCACACCCCCACGGGAAACAGCAGUGAUUAACCUUUAGCAAUAAACGAAAGUUUAxxxxxxxxxxCACAAAGACAUUGGAACACUAUACCUAUUAUUCGGCGCAUGAGCUGGAGUCCUAGGCACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[122.55529785 383.83422852]
[122.55529785 368.83422852]
[122.55529785 353.83422852]
[122.55529785 338.83422852]
[122.55529785 323.83422852]
[122.55529785 308.83422852]
[122.55529785 293.83422852]
[122.55529785 278.83422852]
[122.55529785 263.83422852]
[122.55529785 248.83422852]
[120.53295898 233.97117615]
[116.52522278 219.51649475]
[111.67595673 213.87466431]
[112.58781433 204.71931458]
[108.88165283 190.18437195]
[105.17549133 175.64944458]
[94.90912628 169.17572021]
[91.72935486 157.04692078]
[97.88011932 145.66175842]
[94.47714233 131.05285645]
[80.75708771 124.98984528]
[67.66393280 132.30894470]
[54.57078171 139.62805176]
[46.64438248 153.98439026]
[30.24529266 154.02752686]
[22.24348831 139.71308899]
[30.87053871 125.76654053]
[47.25167465 126.53490448]
[60.34482956 119.21579742]
[73.43798065 111.89669037]
[72.40716553 103.82537842]
[73.67247772 96.14004517]
[76.93600464 89.45278931]
[81.74858856 84.24104309]
[87.56064606 80.81399536]
[93.77927399 79.29642487]
[94.71490479 64.32563782]
[93.15732574 49.40672302]
[89.14958191 34.95203400]
[85.14184570 20.49734688]
[81.13410187 6.04265881]
[74.15571594 19.32053947]
[60.77736282 26.10431480]
[45.94207382 23.88751221]
[35.13119507 13.48919964]
[32.33913040 -1.24865592]
[38.59749603 -14.88070965]
[51.59394455 -22.37018776]
[66.52655029 -20.94988060]
[77.87755585 -11.14530659]
[76.31997681 -26.06421852]
[66.78652954 -34.81449509]
[65.82840729 -47.31653595]
[73.41577911 -56.78960800]
[72.16890717 -71.73769379]
[70.92202759 -86.68578339]
[69.67515564 -101.63387299]
[65.36756897 -116.00205231]
[58.18506241 -129.17063904]
[51.00255203 -142.33921814]
[43.82004547 -155.50779724]
[29.54694176 -163.58311462]
[29.67440224 -179.98176575]
[44.07130432 -187.83422852]
[57.92734909 -179.06257629]
[56.98862457 -162.69030762]
[64.17113495 -149.52172852]
[71.35364532 -136.35314941]
[78.53615570 -123.18456268]
[79.24913788 -138.16760254]
[84.07889557 -152.36878967]
[92.64852142 -164.67982483]
[104.28922272 -174.13995361]
[118.09255219 -180.01089478]
[132.98129272 -181.83448792]
[147.79350281 -179.46841431]
[161.37322998 -173.09732056]
[172.66070557 -163.21839905]
[180.77505493 -150.60264587]
[185.08299255 -136.23455811]
[185.24835205 -121.23547363]
[181.25822449 -106.77591705]
[173.42399597 -93.98432159]
[162.35707092 -83.85896301]
[148.92109680 -77.19001770]
[134.16465759 -74.49795532]
[119.23932648 -75.99285126]
[105.30991364 -81.55805206]
[93.46347809 -90.75924683]
[84.62324524 -102.88074493]
[85.87011719 -87.93265533]
[87.11698914 -72.98457336]
[88.36386871 -58.03648376]
[99.14066315 -44.22125244]
[91.23888397 -27.62179947]
[92.79647064 -12.70288754]
[95.58879089 2.03491855]
[99.59653473 16.48960686]
[103.60427094 30.94429588]
[107.61201477 45.39898300]
[114.44454956 32.04546738]
[129.44276428 32.27719116]
[135.85951233 45.83540726]
[126.52870178 57.58129883]
[141.34646606 55.25019455]
[148.28526306 41.37097168]
[162.07234192 34.25086212]
[177.40629578 36.62769318]
[188.39091492 47.58752441]
[190.80236816 62.91607666]
[183.71342468 76.71920776]
[169.84991455 83.68933105]
[154.54264832 81.14630127]
[143.67756653 70.06795502]
[128.85980225 72.39905548]
[118.07688141 70.49340057]
[109.68569946 65.26126862]
[108.75006866 80.23205566]
[125.33001709 101.25768280]
[109.08603668 127.64987946]
[112.48901367 142.25877380]
[125.38121796 155.36491394]
[119.71042633 171.94328308]
[123.41658783 186.47821045]
[127.12274933 201.01315308]
[130.97990417 215.50874329]
[134.98765564 229.96343994]
[139.88681030 215.78605652]
[150.04588318 204.75006104]
[163.77011108 198.69650269]
[178.76998901 198.63525391]
[192.54319763 204.57653809]
[202.79205322 215.52922058]
[207.80680847 229.66612244]
[206.75091553 244.62890625]
[199.80049133 257.92144775]
[188.11505127 267.32626343]
[173.64396667 271.27438354]
[158.80134583 269.10720825]
[146.06327820 261.18624878]
[137.55529785 248.83422852]
[137.55529785 263.83422852]
[137.55529785 278.83422852]
[137.55529785 293.83422852]
[137.55529785 308.83422852]
[137.55529785 323.83422852]
[137.55529785 338.83422852]
[137.55529785 353.83422852]
[137.55529785 368.83422852]
[137.55529785 383.83422852]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 127]
[12 126]
[14 125]
[15 124]
[16 123]
[19 121]
[20 120]
[21 30]
[22 29]
[23 28]
[36 118]
[37 117]
[38 100]
[39 99]
[40 98]
[41 97]
[50 96]
[51 95]
[54 93]
[55 92]
[56 91]
[57 90]
[58 69]
[59 68]
[60 67]
[61 66]
[104 115]
[105 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
