%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACUUCGAGUCUCCCUUCACCAUUUCCGACGGCAUCUACGGCUCAACAUUUUUUGUAGCCAxxxxxxxxxxCAGUCUGCGCCCUUACACAAAAUGACAUCAAAAAAAUCGUAGCCUUCUCCACUUCAAGUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 250.13226318]
[92.50000000 235.13226318]
[92.50000000 220.13226318]
[92.50000000 205.13226318]
[92.50000000 190.13226318]
[92.50000000 175.13226318]
[92.50000000 160.13226318]
[92.50000000 145.13226318]
[92.50000000 130.13226318]
[92.50000000 115.13225555]
[86.07080078 111.27021790]
[72.95236206 118.54389954]
[73.21239471 103.54612732]
[66.78319550 99.68408966]
[53.54061127 106.72922516]
[40.29802322 113.77436066]
[43.16423416 128.61605835]
[41.52678299 143.64305115]
[35.53127289 157.51911926]
[25.71081543 169.01042175]
[12.93864155 177.09515381]
[-1.64955401 181.05444336]
[-16.75660133 180.53622437]
[-31.03918839 175.58656311]
[-43.22732162 166.64559937]
[-52.23723984 154.50834656]
[-57.26778412 140.25405884]
[-57.87164307 125.15018463]
[-53.99512482 110.53977966]
[-45.98292160 97.72197723]
[-34.54747772 87.83653259]
[-20.70562553 81.76245117]
[-5.68816853 80.03983307]
[9.16954803 82.82186127]
[22.54638672 89.86114502]
[33.25288773 100.53176880]
[46.49547577 93.48664093]
[59.73806000 86.44150543]
[80.67200470 80.91738129]
[96.07881165 88.82994843]
[100.08655548 74.37525940]
[104.09429169 59.92057037]
[102.74610901 54.74350739]
[103.48714447 50.05274582]
[105.76833344 46.57455063]
[108.82923889 44.70416260]
[113.73078918 30.52760506]
[118.63233948 16.35104561]
[123.53388977 2.17448831]
[111.42639160 -0.44583878]
[101.82408905 -7.79342890]
[96.40335083 -18.26802826]
[95.97340393 -29.75732994]
[100.36428070 -40.06135559]
[108.50660706 -47.31367111]
[118.67913818 -50.31875229]
[121.47146606 -65.05655670]
[124.26378632 -79.79436493]
[127.05611420 -94.53217316]
[129.84843445 -109.26997375]
[132.64076233 -124.00778198]
[127.60767365 -139.00706482]
[137.57897949 -150.07153320]
[140.37130737 -164.80934143]
[143.16362000 -179.54714966]
[145.95594788 -194.28495789]
[148.28704834 -209.10270691]
[150.15466309 -223.98599243]
[151.86735535 -238.88789368]
[153.42494202 -253.80680847]
[139.90458679 -260.70349121]
[129.79151917 -272.02120972]
[124.45344543 -286.22927856]
[124.61230469 -301.40621948]
[130.24661255 -315.49945068]
[140.59436035 -326.60296631]
[154.25611877 -333.21514893]
[169.38423157 -334.44171143]
[183.93276978 -330.11682129]
[195.93412781 -320.82531738]
[203.76524353 -307.82385254]
[206.36701965 -292.87075806]
[203.38758850 -277.98831177]
[195.22988892 -265.18923950]
[182.99719238 -256.20449829]
[168.34385681 -252.24922180]
[166.78627014 -237.33030701]
[169.23565674 -230.30563354]
[165.03794861 -222.11837769]
[163.17033386 -207.23510742]
[165.08963013 -204.20463562]
[165.59899902 -200.07640076]
[164.19090271 -195.54103088]
[160.69375610 -191.49263000]
[157.90142822 -176.75482178]
[155.10910034 -162.01701355]
[152.31678772 -147.27920532]
[157.54959106 -133.33407593]
[147.37857056 -121.21545410]
[144.58624268 -106.47765350]
[141.79391479 -91.73984528]
[139.00158691 -77.00203705]
[136.20927429 -62.26423264]
[133.41694641 -47.52642822]
[142.96528625 -40.91210556]
[148.75727844 -30.00485229]
[148.91743469 -16.92120552]
[163.89715576 -17.70104980]
[173.16732788 -30.29461670]
[188.37579346 -33.93283844]
[202.34156799 -26.89786148]
[208.47045898 -12.51138306]
[203.86857605 2.43373942]
[190.70878601 10.88087749]
[175.20475769 8.84154892]
[164.67700195 -2.72133589]
[149.69728088 -1.94149077]
[137.71044922 7.07603884]
[132.80889893 21.25259781]
[127.90734863 35.42915344]
[123.00579834 49.60571289]
[118.54898071 63.92831039]
[114.54124451 78.38299561]
[110.53350067 92.83768463]
[118.51564026 80.13786316]
[130.27102661 70.82062531]
[144.45800781 65.94934082]
[159.45744324 66.07997131]
[173.55743408 71.19760895]
[185.14875793 80.71817780]
[192.90849304 93.55509186]
[195.95103455 108.24328613]
[193.92912292 123.10639191]
[187.07351685 136.44808960]
[176.16667175 146.74568176]
[162.45335388 152.82391357]
[147.49867249 153.98907471]
[133.00941467 150.10820007]
[120.63921356 141.62419128]
[111.79990387 129.50534058]
[107.50000000 115.13225555]
[107.50000000 130.13226318]
[107.50000000 145.13226318]
[107.50000000 160.13226318]
[107.50000000 175.13226318]
[107.50000000 190.13226318]
[107.50000000 205.13226318]
[107.50000000 220.13226318]
[107.50000000 235.13226318]
[107.50000000 250.13226318]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[14 38]
[15 37]
[16 36]
[40 124]
[41 123]
[42 122]
[46 121]
[47 120]
[48 119]
[49 118]
[56 104]
[57 103]
[58 102]
[59 101]
[60 100]
[61 99]
[63 97]
[64 96]
[65 95]
[66 94]
[67 90]
[68 89]
[69 87]
[70 86]
[107 117]
[108 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
