%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAAUGGGCUACAUUUUCUACCCCAGAAAACUACGAUAGCCCUUAUGAAACUUAAGGGUCGxxxxxxxxxxCCACCCUCCUCUCCCUAGGAGGCCUGCCCCCGCUAACCGGCUUUUUGCCCAAAUGGGCCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[142.21728516 397.33728027]
[142.21728516 382.33728027]
[142.21728516 367.33728027]
[142.21728516 352.33728027]
[142.21728516 337.33728027]
[142.21728516 322.33728027]
[142.21728516 307.33728027]
[142.21728516 292.33728027]
[142.21728516 277.33728027]
[142.21728516 262.33728027]
[139.88616943 247.51953125]
[135.28060913 233.24406433]
[130.67504883 218.96861267]
[125.32503510 191.34403992]
[139.01838684 176.07534790]
[131.02847290 163.38041687]
[123.03855133 150.68548584]
[115.04863739 137.99055481]
[103.29219055 140.72966003]
[91.24844360 139.91433716]
[79.96842957 135.61573792]
[70.43655396 128.20898438]
[63.48464203 118.34046173]
[49.07242584 122.49835205]
[34.66020966 126.65624237]
[20.24799347 130.81413269]
[5.83577824 134.97201538]
[-8.57643795 139.12989807]
[-17.55905533 152.42245483]
[-33.56288147 153.54365540]
[-44.31115341 141.63339233]
[-41.55871201 125.82821655]
[-27.41699982 118.25250244]
[-12.73432541 124.71768951]
[1.67789090 120.55979919]
[16.09010696 116.40190887]
[30.50232315 112.24402618]
[44.91453934 108.08613586]
[59.32675552 103.92824554]
[57.92528915 92.57733917]
[59.76587296 80.78648376]
[64.97055054 69.49782562]
[73.38467407 59.68247223]
[62.72304916 49.13118362]
[52.06142426 38.57989120]
[46.88465118 37.23059464]
[43.15177155 34.29494858]
[41.22882080 30.60659599]
[41.08974075 27.02216721]
[31.10701561 15.82640076]
[21.12429047 4.63063478]
[11.14156342 -6.56513119]
[1.15883684 -17.76089668]
[-8.82388973 -28.95666313]
[-24.44792938 -28.30597496]
[-36.80327225 -37.89135361]
[-40.05610275 -53.18688202]
[-32.67053604 -66.97047424]
[-18.13380623 -72.73394012]
[-3.30971742 -67.75595093]
[4.80225134 -54.38695526]
[2.37187624 -38.93938828]
[12.35460281 -27.74362373]
[22.33732986 -16.54785728]
[32.32005692 -5.35209179]
[42.30278015 5.84367418]
[52.28550720 17.03944016]
[62.61271286 27.91826439]
[73.27433777 38.46955490]
[83.93596649 49.02084732]
[91.43434143 48.86481857]
[87.13644409 34.49373245]
[82.83854675 20.12265015]
[73.17834473 8.64743519]
[71.12530518 -6.21140194]
[77.31192780 -19.87616348]
[89.83223724 -28.13702393]
[104.82899475 -28.44898224]
[117.68200684 -20.71593094]
[124.43153381 -7.32026291]
[122.99817657 7.61109686]
[113.82382202 19.47789955]
[110.12745667 34.01533127]
[106.43109894 48.55276108]
[113.92947388 48.39673233]
[124.14295197 37.41106796]
[134.35643005 26.42540359]
[144.56991577 15.43973923]
[154.78338623 4.45407438]
[164.99687195 -6.53158998]
[164.17118835 -22.31429482]
[174.80932617 -34.00212860]
[190.59988403 -34.66090775]
[202.17459106 -23.89978790]
[202.66638184 -8.10315323]
[191.78349304 3.35713458]
[175.98254395 3.68188953]
[165.76905823 14.66755390]
[155.55557251 25.65321922]
[145.34210205 36.63888550]
[135.12861633 47.62454987]
[124.91513824 58.61021423]
[139.21516418 75.10792542]
[144.35356140 95.44967651]
[139.96884155 115.09532166]
[127.74356842 130.00064087]
[135.73347473 142.69557190]
[143.72340393 155.39050293]
[151.71331787 168.08543396]
[164.57171631 175.80950928]
[179.53196716 176.90083313]
[194.49221802 177.99214172]
[207.52284241 168.63359070]
[222.92439270 173.12490845]
[228.88211060 188.02072144]
[220.82574463 201.89424133]
[204.93545532 204.10289001]
[193.40090942 192.95239258]
[178.44065857 191.86106873]
[163.48040771 190.76976013]
[158.84793091 196.66809082]
[149.58297729 208.46472168]
[144.95050049 214.36303711]
[149.55607605 228.63850403]
[154.16163635 242.91397095]
[158.07818604 228.43431091]
[166.87919617 216.28761292]
[179.41856384 208.05569458]
[194.06332397 204.81054688]
[208.90637207 206.97477722]
[222.01477051 214.26654053]
[231.68147278 225.73626709]
[236.64764404 239.89031982]
[236.26654053 254.88548279]
[230.58781433 268.76901245]
[220.35095215 279.73287964]
[206.88908386 286.34939575]
[191.95526123 287.75683594]
[177.49424744 283.77197266]
[165.38923645 274.91372681]
[157.21728516 262.33728027]
[157.21728516 277.33728027]
[157.21728516 292.33728027]
[157.21728516 307.33728027]
[157.21728516 322.33728027]
[157.21728516 337.33728027]
[157.21728516 352.33728027]
[157.21728516 367.33728027]
[157.21728516 382.33728027]
[157.21728516 397.33728027]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 125]
[12 124]
[13 123]
[15 109]
[16 108]
[17 107]
[18 106]
[23 39]
[24 38]
[25 37]
[26 36]
[27 35]
[28 34]
[43 70]
[44 69]
[45 68]
[49 67]
[50 66]
[51 65]
[52 64]
[53 63]
[54 62]
[85 102]
[86 101]
[87 100]
[88 99]
[89 98]
[90 97]
[110 120]
[111 119]
[112 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
