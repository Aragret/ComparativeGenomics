%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAGCCUAGCCCCUACCCCCCAAUUAGGAGGGCACUGGCCCCCAACAGGCAUCACCCCGCUAxxxxxxxxxxCAAACAACUAACCUGCCACUAAUAGUUAUGUCAUCCCUCUUAUUAAUCAUCAUCCUAGCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[7.91748905 237.19361877]
[-0.99866188 249.25604248]
[-9.91481304 261.31848145]
[-18.83096313 273.38092041]
[-27.74711418 285.44332886]
[-36.66326523 297.50576782]
[-45.32987213 309.74871826]
[-53.74328232 322.16705322]
[-62.15669250 334.58535767]
[-70.57010651 347.00366211]
[-78.98351288 359.42199707]
[-75.75402069 374.89279175]
[-84.47972870 388.06994629]
[-99.98381805 391.13571167]
[-113.06799316 382.27117920]
[-115.96964264 366.73553467]
[-106.96726990 353.74581909]
[-91.40182495 351.00857544]
[-82.98841858 338.59027100]
[-74.57500458 326.17193604]
[-66.16159821 313.75363159]
[-57.74818802 301.33532715]
[-57.76985931 296.50326538]
[-54.71421051 291.61953735]
[-48.72569656 288.58963013]
[-39.80954742 276.52719116]
[-30.89339447 264.46475220]
[-21.97724342 252.40232849]
[-13.06109333 240.33988953]
[-4.14494228 228.27746582]
[-25.42034721 207.56864929]
[-42.64620590 183.38667297]
[-55.26633072 156.51232910]
[-62.87325287 127.81331635]
[-65.22135162 98.21628571]
[-62.23481750 68.67684174]
[-76.81856537 65.16767120]
[-85.95767212 66.20329285]
[-91.66421509 61.43384171]
[-106.17283630 57.62598419]
[-120.68146515 53.81812668]
[-135.19009399 50.01026917]
[-150.85711670 54.85550308]
[-162.70118713 43.51311111]
[-158.53814697 27.65117264]
[-142.65057373 23.58708954]
[-131.38223267 35.50164032]
[-116.87360382 39.30950165]
[-102.36498260 43.11735916]
[-87.85635376 46.92521667]
[-73.30940247 50.58392334]
[-58.72565079 54.09309006]
[-51.99389267 35.19928360]
[-43.02246094 17.26033401]
[-31.94355011 0.54057902]
[-18.92041016 -14.71361160]
[-4.14494228 -28.27746391]
[-13.06109333 -40.33989334]
[-28.64959717 -44.13174438]
[-35.27331543 -58.74358749]
[-27.85109901 -72.96646881]
[-12.07663727 -75.88980865]
[-0.05074677 -65.27107239]
[-0.99866188 -49.25604630]
[7.91748905 -37.19361496]
[16.88116455 -42.80243683]
[26.18523598 -47.82644272]
[35.79159927 -52.24505997]
[45.66091537 -56.04018784]
[55.75276184 -59.19628906]
[66.02581787 -61.70043564]
[76.43800354 -63.54237747]
[86.94668579 -64.71456146]
[97.50881958 -65.21219635]
[108.08116150 -65.03324127]
[118.62039948 -64.17842865]
[129.08338928 -62.65126038]
[139.42727661 -60.45798874]
[149.60969543 -57.60759735]
[159.58894348 -54.11175919]
[169.32415771 -49.98478699]
[178.77548218 -45.24358749]
[187.90419006 -39.90757370]
[196.67291260 -33.99860001]
[205.04573059 -27.54086685]
[212.98834229 -20.56081390]
[220.46824646 -13.08703327]
[231.85932922 -22.84630775]
[243.25039673 -32.60558319]
[254.64147949 -42.36485672]
[266.03253174 -52.12413025]
[262.06481934 -66.86251831]
[264.89321899 -81.86128235]
[273.95617676 -94.14241028]
[287.45416260 -101.26747131]
[302.70721436 -101.82177734]
[316.68679810 -95.69528198]
[326.61727905 -84.10439301]
[330.52691650 -69.35050201]
[327.63946533 -54.36299133]
[318.52825928 -42.11764908]
[305.00228882 -35.04579926]
[289.74716187 -34.55155563]
[275.79180908 -40.73305893]
[264.40075684 -30.97378349]
[253.00967407 -21.21450806]
[241.61860657 -11.45523357]
[230.22752380 -1.69595945]
[236.22337341 6.48814249]
[241.70565796 15.02479744]
[246.65367126 23.88182068]
[251.04878235 33.02582169]
[254.87442017 42.42232513]
[258.11618042 52.03590393]
[260.76177979 61.83031464]
[262.80130005 71.76863098]
[264.22705078 81.81338501]
[265.03363037 91.92670441]
[265.21801758 102.07045746]
[264.77947998 112.20640564]
[263.71972656 122.29633331]
[262.04272461 132.30220032]
[259.75479126 142.18629456]
[256.86456299 151.91133118]
[253.38293457 161.44065857]
[249.32301331 170.73834229]
[244.70014954 179.76933289]
[239.53172302 188.49957275]
[233.83724976 196.89616394]
[227.63818359 204.92744446]
[220.95791626 212.56314087]
[213.82160950 219.77444458]
[206.25617981 226.53417969]
[198.29016113 232.81686401]
[189.95356750 238.59881592]
[181.27783203 243.85823059]
[172.29566956 248.57527161]
[163.04093933 252.73217773]
[153.54853821 256.31323242]
[143.85424805 259.30499268]
[133.99462891 261.69613647]
[124.00683594 263.47766113]
[113.92853546 264.64285278]
[103.79772186 265.18731689]
[93.65259552 265.10900879]
[83.53139496 264.40820312]
[73.47228241 263.08758545]
[63.51318741 261.15206909]
[53.69165421 258.60900879]
[44.04470825 255.46794128]
[34.60871887 251.74075317]
[25.41926765 247.44148254]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 30]
[2 29]
[3 28]
[4 27]
[5 26]
[6 25]
[7 22]
[8 21]
[9 20]
[10 19]
[11 18]
[36 52]
[37 51]
[39 50]
[40 49]
[41 48]
[42 47]
[57 65]
[58 64]
[87 108]
[88 107]
[89 106]
[90 105]
[91 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
