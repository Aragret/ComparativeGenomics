%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUAGCAAUAAACGAAAGUUUAACUAAGCUAUACUAACCCCAGGGUUGGUCAAUUUCGUGCxxxxxxxxxxUACCCUAUAGCACCCCCUCUACCCCCUCUAGAGCCCACUGUAAAGCUAACUUAGCAUUAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[118.22912598 327.43893433]
[117.91706848 312.44216919]
[117.60501862 297.44543457]
[117.29296112 282.44866943]
[116.98090363 267.45193481]
[116.66884613 252.45516968]
[116.35678864 237.45841980]
[116.04473114 222.46165466]
[115.73268127 207.46490479]
[113.86506653 192.58163452]
[110.46208954 177.97273254]
[107.05910492 163.36384583]
[103.65612793 148.75494385]
[100.25315094 134.14605713]
[96.85017395 119.53716278]
[88.00361633 117.69667816]
[80.28902435 111.79336548]
[75.57112122 102.53237915]
[62.79376221 110.38980103]
[50.01640320 118.24723053]
[37.23904800 126.10465240]
[24.46168900 133.96208191]
[17.13935661 148.63571167]
[0.75625414 149.36099243]
[-7.83408451 135.39179993]
[0.20534326 121.09845734]
[16.60426331 121.18472290]
[29.38162041 113.32730103]
[42.15897751 105.46987152]
[54.93633652 97.61244965]
[67.71369171 89.75502014]
[75.30360413 76.81696320]
[75.92758179 61.82994843]
[55.77917099 50.50897980]
[44.84846497 30.25388908]
[46.43224716 7.38721085]
[59.93877792 -11.01467133]
[53.03178024 -24.32982635]
[46.12478256 -37.64498138]
[39.21778107 -50.96013641]
[32.31078339 -64.27529144]
[21.98357964 -75.15412140]
[9.04552269 -82.74402618]
[-3.89253306 -90.33393860]
[-16.83058929 -97.92384338]
[-29.76864433 -105.51375580]
[-42.70669937 -113.10366058]
[-55.64475632 -120.69356537]
[-72.03833008 -120.26616669]
[-80.37337494 -134.38916016]
[-72.07550812 -148.53402710]
[-55.68086624 -148.14974976]
[-48.05484772 -133.63162231]
[-35.11679459 -126.04171753]
[-22.17873764 -118.45180511]
[-9.24068069 -110.86190033]
[3.69737506 -103.27198792]
[16.63543129 -95.68208313]
[29.57348633 -88.09217834]
[22.54776382 -101.34506989]
[18.47612190 -115.78189087]
[17.54183960 -130.75276184]
[19.78697777 -145.58378601]
[25.11046982 -159.60736084]
[33.27268219 -172.19219971]
[43.90619659 -182.77182007]
[56.53235245 -190.86997986]
[70.58278656 -196.12214661]
[85.42503357 -198.29190063]
[100.39096832 -197.28155518]
[114.80690765 -193.13659668]
[128.02394104 -186.04362488]
[139.44708252 -176.32191467]
[148.56214905 -164.40908813]
[154.95881653 -150.84138489]
[158.34915161 -136.22955322]
[158.58053589 -121.23133087]
[155.64256287 -106.52187347]
[149.66746521 -92.76329803]
[140.92420959 -80.57495880]
[129.80639648 -70.50549316]
[116.81446075 -63.00818253]
[102.53324127 -58.42050934]
[87.60559845 -56.94898987]
[72.70348358 -58.65985489]
[58.49771881 -63.47610092]
[45.62593842 -71.18228912]
[52.53293610 -57.86713791]
[59.43993759 -44.55197906]
[66.34693146 -31.23682594]
[73.25393677 -17.92166901]
[82.20687103 -19.57656097]
[91.30414581 -19.21129417]
[100.09558105 -16.84394646]
[108.14616394 -12.59165859]
[115.05751038 -6.66485167]
[120.48763275 0.64319718]
[134.61242676 -4.40555906]
[148.73722839 -9.45431519]
[162.86204529 -14.50307178]
[176.98684692 -19.55182838]
[182.25001526 -34.27707672]
[195.77308655 -42.12950516]
[211.17086792 -39.40143204]
[221.17300415 -27.38097382]
[221.05677795 -11.74382305]
[210.87709045 0.12663729]
[195.44046021 2.62553811]
[182.03559875 -5.42702532]
[167.91079712 -0.37826887]
[153.78599548 4.67048740]
[139.66119385 9.71924400]
[125.53638458 14.76800060]
[126.05474091 24.04283333]
[124.46691895 33.21783066]
[120.84474182 41.81974411]
[115.36518860 49.40262604]
[108.30184174 55.57093811]
[100.01117706 60.00017548]
[90.91459656 62.45392609]
[90.29061890 77.44094086]
[107.48751831 77.86489105]
[119.33110809 89.13620758]
[120.47348022 104.59155273]
[111.45906830 116.13418579]
[114.86204529 130.74307251]
[118.26502228 145.35197449]
[121.66799927 159.96086121]
[125.07097626 174.56976318]
[128.47395325 189.17864990]
[134.92602539 175.63720703]
[147.20588684 167.02296448]
[162.13493347 165.56570435]
[175.84881592 171.64263916]
[184.79776001 183.68075562]
[186.66535950 198.56404114]
[180.96817017 212.44000244]
[169.18089294 221.71687317]
[154.35464478 223.99336243]
[140.32716370 218.68023682]
[130.72943115 207.15284729]
[131.04148865 222.14961243]
[131.35354614 237.14636230]
[131.66560364 252.14311218]
[131.97766113 267.13986206]
[132.28971863 282.13662720]
[132.60177612 297.13336182]
[132.91381836 312.13012695]
[133.22587585 327.12689209]
[135.81687927 346.33459473]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 130]
[11 129]
[12 128]
[13 127]
[14 126]
[15 125]
[18 31]
[19 30]
[20 29]
[21 28]
[22 27]
[32 121]
[33 120]
[37 91]
[38 90]
[39 89]
[40 88]
[41 87]
[42 59]
[43 58]
[44 57]
[45 56]
[46 55]
[47 54]
[48 53]
[97 113]
[98 112]
[99 111]
[100 110]
[101 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
