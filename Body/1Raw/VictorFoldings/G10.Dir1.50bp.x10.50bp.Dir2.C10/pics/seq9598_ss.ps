%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCCCUACUAUGCCUAGAAGGAAUAAUACUAUCGCUGUUCAUUAUAGCUACUCUCAUAACCxxxxxxxxxxUCGGAGGACAACCAGUAAGCUACCCUUUUACCAUCAUUGGACAAGUAGCAUCCGUACUAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 272.00585938]
[92.50000000 257.00585938]
[92.50000000 242.00584412]
[92.50000000 227.00584412]
[92.50000000 212.00584412]
[92.50000000 197.00584412]
[92.50000000 182.00584412]
[92.50000000 167.00584412]
[92.50000000 152.00584412]
[92.50000000 137.00584412]
[86.52707672 135.27268982]
[80.91968536 132.58258057]
[75.82994843 129.00846863]
[64.13032532 138.39562988]
[52.43070221 147.78279114]
[46.50899887 162.45399475]
[31.73996162 164.38395691]
[20.04033661 173.77111816]
[8.34071350 183.15827942]
[2.90233493 198.62940979]
[-13.26298237 201.38887024]
[-23.52574539 188.59794617]
[-17.32850456 173.41485596]
[-1.04644835 171.45864868]
[10.65317535 162.07148743]
[22.35279846 152.68432617]
[27.43766594 138.68457031]
[43.04354095 136.08317566]
[54.74316406 126.69600677]
[66.44278717 117.30884552]
[63.22628784 108.56602478]
[62.24824142 99.30178070]
[47.60474014 96.05095673]
[32.96123886 92.80012512]
[18.31773949 89.54930115]
[3.67423725 86.29847717]
[-11.03372478 83.35299683]
[-25.79977989 80.71412659]
[-37.68528366 90.87625885]
[-53.32258987 90.96934509]
[-65.32823944 80.94944763]
[-68.03353119 65.54764557]
[-60.16111374 52.03620529]
[-45.42809296 46.79481506]
[-30.79095840 52.29829788]
[-23.16091537 65.94807434]
[-8.39486027 68.58693695]
[-3.98669171 66.60109711]
[1.72102797 67.40932465]
[6.92506313 71.65497589]
[21.56856346 74.90579987]
[36.21206665 78.15662384]
[50.85556793 81.40745544]
[65.49906921 84.65827942]
[88.03363037 64.18814850]
[118.34749603 66.99921417]
[128.09515381 55.59819031]
[137.84280396 44.19717026]
[147.59045410 32.79615021]
[157.33810425 21.39512825]
[167.08575439 9.99410725]
[171.83956909 -4.23267221]
[170.90394592 -19.20346451]
[169.96832275 -34.17425537]
[155.27044678 -37.70473099]
[142.26705933 -45.41206360]
[132.11436462 -56.61091614]
[125.71515656 -70.30549622]
[123.63845062 -85.27809906]
[126.06890106 -100.19735718]
[132.79039001 -113.73667145]
[143.20524597 -124.69213104]
[156.38740540 -132.08958435]
[171.16470337 -135.27124023]
[186.22314453 -133.95422363]
[200.22375488 -128.25561523]
[211.92161560 -118.68212891]
[220.27655029 -106.08504486]
[224.54565430 -91.58448792]
[224.34930420 -76.46983337]
[219.70497131 -62.08506012]
[211.02561951 -49.70926285]
[199.08302307 -40.44288254]
[184.93910217 -35.10988235]
[185.87474060 -20.13909149]
[186.81036377 -5.16830063]
[192.98614502 -0.91275573]
[197.26385498 -15.28986359]
[212.25918579 -15.66427040]
[217.24905396 -1.51855755]
[205.33772278 7.59833431]
[211.51350403 11.85387993]
[225.83610535 7.39706373]
[240.15870667 2.94024825]
[254.17541504 -2.40126443]
[267.83166504 -8.60667133]
[281.48788452 -14.81207848]
[295.14413452 -21.01748466]
[297.26675415 -36.29813004]
[307.33108521 -47.99055481]
[322.12564087 -52.36375427]
[336.92950439 -48.02225494]
[347.01885986 -36.35141373]
[349.17422485 -21.07535172]
[342.70779419 -7.06860685]
[329.68301392 1.19931972]
[314.25604248 1.09016347]
[301.34954834 -7.36124420]
[287.69329834 -1.15583730]
[274.03707886 5.04956961]
[260.38082886 11.25497723]
[273.82315063 17.91108322]
[278.80374146 32.06007004]
[272.49481201 45.66880035]
[258.47830200 51.01085663]
[244.71214294 45.05326462]
[239.01211548 31.17847633]
[244.61552429 17.26284599]
[230.29292297 21.71966171]
[215.97032166 26.17647743]
[204.19015503 30.11978912]
[193.16430664 29.71730995]
[184.28582764 25.83702469]
[178.48678589 19.74175835]
[168.73912048 31.14278030]
[158.99147034 42.54380035]
[149.24382019 53.94482040]
[139.49617004 65.34584045]
[129.74851990 76.74686432]
[133.24519348 82.09916687]
[135.78874207 87.96467590]
[137.30622864 94.17523956]
[137.75416565 100.55279541]
[137.11970520 106.91450500]
[135.42103577 113.07797241]
[132.70684814 118.86650085]
[129.05496216 124.11413574]
[124.57009125 128.67042542]
[119.38079834 132.40473938]
[113.63587189 135.21002197]
[107.50000000 137.00584412]
[107.50000000 152.00584412]
[107.50000000 167.00584412]
[107.50000000 182.00584412]
[107.50000000 197.00584412]
[107.50000000 212.00584412]
[107.50000000 227.00584412]
[107.50000000 242.00584412]
[107.50000000 257.00585938]
[107.50000000 272.00585938]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[13 30]
[14 29]
[15 28]
[17 26]
[18 25]
[19 24]
[32 54]
[33 53]
[34 52]
[35 51]
[36 50]
[37 47]
[38 46]
[56 129]
[57 128]
[58 127]
[59 126]
[60 125]
[61 124]
[62 86]
[63 85]
[64 84]
[92 120]
[93 119]
[94 118]
[95 111]
[96 110]
[97 109]
[98 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
