%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCUCCAGCAUUCCCCCUCAAACCUAAGAAAUAUGUCUGAUAAAAGAGUUACUUUGAUAGAxxxxxxxxxxCUACCUAACCAACAAACUUAAAAUAAAAUCCCCACUAUGCACAUUUUAUUUCUCCAACAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[80.57792664 263.64236450]
[80.57792664 248.64237976]
[80.57792664 233.64237976]
[80.57792664 218.64237976]
[80.57792664 203.64237976]
[80.57792664 188.64237976]
[80.57792664 173.64237976]
[80.57792664 158.64237976]
[80.57792664 143.64237976]
[80.57792664 128.64237976]
[80.91731262 114.78639221]
[87.12343597 104.60592651]
[72.26038361 106.62825775]
[57.39733887 108.65059662]
[42.68937683 111.59607697]
[28.19378090 115.45323944]
[13.69818497 119.31039429]
[-0.75650370 123.31813812]
[-15.16872025 127.47602081]
[-29.44417953 132.08158875]
[-43.56898499 137.13034058]
[-57.69378662 142.17910767]
[-58.40964508 157.36317444]
[-64.88622284 171.11534119]
[-76.13589478 181.33851624]
[-90.44316864 186.47373962]
[-105.62628174 185.73789978]
[-119.36992645 179.24324036]
[-129.57829285 167.98013306]
[-134.69468689 153.66610718]
[-133.93888855 138.48397827]
[-127.42613983 124.74888611]
[-116.14961243 114.55534363]
[-101.82888031 109.45779419]
[-86.64775085 110.23356628]
[-72.92124176 116.76436615]
[-62.74254227 128.05429077]
[-48.61774063 123.00553894]
[-34.49293518 117.95678711]
[-32.65449142 114.87658691]
[-29.20021439 112.55934143]
[-24.51741409 111.76954651]
[-19.32660675 113.06380463]
[-4.91439104 108.90592194]
[0.67668909 103.99822235]
[9.84102535 104.81479645]
[24.33662224 100.95764160]
[38.83221817 97.10047913]
[26.67840195 88.30930328]
[24.11078644 73.53069305]
[32.58714294 61.15526199]
[47.29499054 58.20920944]
[59.88388824 66.36517334]
[63.20643616 80.99256897]
[55.37500381 93.78754425]
[70.23805237 91.76521301]
[85.10109711 89.74288177]
[95.87191010 79.30306244]
[98.35702515 64.51036072]
[100.84214783 49.71765137]
[93.99114990 32.65764618]
[105.60868835 19.54152107]
[107.78553009 4.70031643]
[109.96236420 -10.14088917]
[112.13919830 -24.98209381]
[98.05433655 -30.31413269]
[85.44524384 -38.54972076]
[74.90167999 -49.30366135]
[66.91677856 -62.07297516]
[61.86400986 -76.26042175]
[59.97970581 -91.20242310]
[61.35199356 -106.20011902]
[65.91669464 -120.55204010]
[73.46030426 -133.58691406]
[83.62998962 -144.69508362]
[95.95011139 -153.35700989]
[109.84442139 -159.16752625]
[124.66306305 -161.85490417]
[139.71293640 -161.29341125]
[154.29014587 -157.50933838]
[167.71287537 -150.67965698]
[179.35331726 -141.12382507]
[188.66703796 -129.28875732]
[195.21841431 -115.72802734]
[198.70101929 -101.07587433]
[198.95196533 -86.01761627]
[195.95953369 -71.25755310]
[189.86366272 -57.48604584]
[180.94949341 -45.34720612]
[169.63392639 -35.40878677]
[156.44622803 -28.13563347]
[142.00321960 -23.86792183]
[126.98040771 -22.80525780]
[124.80356598 -7.96405220]
[122.62673187 6.87715340]
[120.44989777 21.71835899]
[127.43160248 31.64625168]
[125.69553375 44.06418228]
[115.63484955 52.20277023]
[113.14973450 66.99547577]
[110.66461182 81.78818512]
[119.68214417 93.77501678]
[134.58404541 95.48770905]
[149.48594666 97.20039368]
[164.38784790 98.91308594]
[179.28974915 100.62577820]
[194.19165039 102.33846283]
[209.09355164 104.05115509]
[223.99546814 105.76384735]
[231.70123291 92.62836456]
[244.08728027 83.76800537]
[259.00762939 80.71788025]
[273.87722778 84.00644684]
[286.11984253 93.06393433]
[293.61437988 106.32107544]
[295.06234741 121.48100281]
[290.21289062 135.91716003]
[279.90615845 147.12838745]
[265.92794800 153.17228699]
[250.69996643 153.00170898]
[236.86062622 146.64620972]
[226.80764771 135.20690918]
[222.28277588 120.66574860]
[207.38087463 118.95305634]
[192.47897339 117.24037170]
[177.57705688 115.52767944]
[162.67515564 113.81498718]
[147.77325439 112.10230255]
[132.87135315 110.38961029]
[117.96945190 108.67691803]
[112.37157440 113.66828156]
[124.62811279 122.31565857]
[139.34564209 125.21297455]
[148.26426697 137.27357483]
[146.72277832 152.19416809]
[135.52684021 162.17669678]
[120.52783203 162.00392151]
[109.56479645 151.76615906]
[108.36718750 136.81474304]
[101.17580414 123.65100861]
[95.57792664 128.64237976]
[95.57792664 143.64237976]
[95.57792664 158.64237976]
[95.57792664 173.64237976]
[95.57792664 188.64237976]
[95.57792664 203.64237976]
[95.57792664 218.64237976]
[95.57792664 233.64237976]
[95.57792664 248.64237976]
[95.57792664 263.64236450]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 57]
[13 56]
[14 55]
[15 48]
[16 47]
[17 46]
[18 44]
[19 43]
[20 39]
[21 38]
[22 37]
[58 101]
[59 100]
[60 99]
[62 96]
[63 95]
[64 94]
[65 93]
[102 130]
[103 129]
[104 128]
[105 127]
[106 126]
[107 125]
[108 124]
[109 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
