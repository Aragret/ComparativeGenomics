%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAGCCGCCGCCUGAUACUGGCAUUUUGUAGAUGUGGUUUGACUAUUUCUGUAUGUCUCCAxxxxxxxxxxAAACAAUGUUCAACCAGUAACUACUACUAAUCAACGCCCAUAAUCAUACAAAGCCCCCGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[126.55249786 634.81011963]
[126.55249786 619.81011963]
[126.55249786 604.81011963]
[126.55249786 589.81011963]
[126.55249786 574.81011963]
[126.55249786 559.81011963]
[126.55249786 544.81011963]
[126.55249786 529.81011963]
[126.55249786 514.81011963]
[126.55249786 499.81015015]
[110.62468719 496.13900757]
[96.00722504 488.80645752]
[83.52883148 478.22384644]
[73.89795685 464.98706055]
[67.66256714 449.84274292]
[65.17898560 433.64617920]
[66.59149170 417.31320190]
[71.82397461 401.76818848]
[80.58403015 387.89181519]
[92.37927246 376.47122192]
[106.54502869 368.15527344]
[122.28177643 363.41775513]
[121.34615326 348.44696045]
[120.41052246 333.47616577]
[119.47489166 318.50537109]
[105.36190033 310.17898560]
[98.90663147 294.93774414]
[102.82373810 278.68545532]
[115.76788330 267.84564209]
[114.52101135 252.89755249]
[113.27413940 237.94946289]
[111.40652466 223.06619263]
[108.92140198 208.27348328]
[106.43628693 193.48077393]
[96.74357605 186.17607117]
[94.58302307 173.82492065]
[101.65888977 162.99043274]
[99.48205566 148.14923096]
[97.30521393 133.30802917]
[95.12837982 118.46681976]
[83.56729889 109.73254395]
[81.46453857 95.39641571]
[90.03041840 83.71001434]
[87.23809052 68.97220612]
[83.83511353 54.36331558]
[80.43213654 39.75442123]
[77.02915955 25.14553070]
[73.62618256 10.53663731]
[60.48997116 2.16539097]
[57.24697495 -12.69857979]
[65.30863190 -25.17035866]
[61.90565491 -39.77925110]
[56.88048935 -47.48635864]
[58.58719635 -54.72740936]
[55.48887634 -69.40393066]
[51.90826035 -73.37870026]
[50.40612030 -77.88380432]
[50.82949066 -82.02172852]
[52.68533325 -85.09147644]
[50.50849533 -99.93267822]
[48.33165741 -114.77388763]
[33.35630798 -116.68214417]
[19.45157242 -122.56099701]
[7.64927816 -131.97419739]
[-1.17476761 -144.22323608]
[-6.36576176 -158.39913940]
[-7.53849792 -173.44995117]
[-4.60595131 -188.25883484]
[2.21426344 -201.72683716]
[12.41604137 -212.85456848]
[25.24234200 -220.81625366]
[39.74137115 -225.02111816]
[54.83720016 -225.15708923]
[69.40962219 -221.21411133]
[82.37726593 -213.48475647]
[92.77784729 -202.54261780]
[99.83956909 -189.19966125]
[103.03840637 -174.44601440]
[102.13698578 -159.37651062]
[97.20220184 -145.10939026]
[88.60025024 -132.70338440]
[76.96943665 -123.07910919]
[63.17286301 -116.95072174]
[65.34970093 -102.10951996]
[67.52653503 -87.26831055]
[70.16540527 -72.50225830]
[73.26372528 -57.82572937]
[76.51454926 -43.18222809]
[79.91752625 -28.57333565]
[92.66062927 -20.94779396]
[96.31984711 -6.18077707]
[88.23506927 7.13365936]
[91.63805389 21.74255180]
[95.04103088 36.35144424]
[98.44400787 50.96033859]
[101.84698486 65.56922913]
[104.22507477 67.16674042]
[106.09199524 69.83293152]
[107.02584839 73.36985016]
[106.68730927 77.42649841]
[104.87162018 81.53318024]
[116.43270111 90.26745605]
[118.53546143 104.60358429]
[109.96958160 116.28998566]
[112.14642334 131.13119507]
[114.32325745 145.97239685]
[116.50009155 160.81359863]
[128.25822449 174.94604492]
[121.22899628 190.99565125]
[123.71411133 205.78836060]
[126.19923401 220.58106995]
[129.18811035 223.93190002]
[130.75585938 227.68865967]
[130.95307922 231.34146118]
[129.99494934 234.45208740]
[128.22222900 236.70259094]
[129.46910095 251.65068054]
[130.71597290 266.59875488]
[143.03082275 272.87121582]
[150.56437683 284.32803345]
[151.42948914 297.90383911]
[145.50633240 310.02932739]
[134.44567871 317.56976318]
[135.38131714 332.54055786]
[136.31694031 347.51132202]
[137.25256348 362.48211670]
[150.83450317 364.50457764]
[163.74320984 369.17108154]
[175.46960449 376.29525757]
[185.55166626 385.59396362]
[193.59266663 396.69839478]
[199.27674866 409.16870117]
[202.38139343 422.51150513]
[202.78605652 436.19937134]
[200.47689819 449.69161987]
[195.54721069 462.45578003]
[188.19369507 473.98846436]
[178.70858765 483.83538818]
[167.46801758 491.60913086]
[154.91714478 497.00439453]
[141.55249023 499.81015015]
[141.55249023 514.81011963]
[141.55249023 529.81011963]
[141.55249023 544.81011963]
[141.55249023 559.81011963]
[141.55249023 574.81011963]
[141.55249023 589.81011963]
[141.55249023 604.81011963]
[141.55249023 619.81011963]
[141.55249023 634.81011963]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[22 126]
[23 125]
[24 124]
[25 123]
[29 118]
[30 117]
[31 116]
[32 111]
[33 110]
[34 109]
[37 107]
[38 106]
[39 105]
[40 104]
[43 101]
[44 96]
[45 95]
[46 94]
[47 93]
[48 92]
[51 89]
[52 88]
[54 87]
[55 86]
[59 85]
[60 84]
[61 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
