%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUAGUCCUCAUCGCCCUCCCAUCCCUACGCAUCCUUUACAUAACAGACGAGGUCAACGAUxxxxxxxxxxUACCUAAAACUCACAGCCCUCGCUGUCACUUUCCUAGGACUUCUAACAGCCCUAGACCUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-22.64475441 239.99746704]
[-32.97565842 250.87278748]
[-43.30656052 261.74810791]
[-53.41199493 272.83322144]
[-63.28770065 284.12350464]
[-73.16340637 295.41378784]
[-83.03911591 306.70407104]
[-92.91481781 317.99435425]
[-102.79052734 329.28463745]
[-112.66622925 340.57492065]
[-122.54193878 351.86520386]
[-116.50403595 365.88327026]
[-117.15486908 381.13250732]
[-124.36521149 394.58514404]
[-136.70344543 403.57015991]
[-151.71980286 406.30358887]
[-166.43278503 402.24267578]
[-177.92111206 392.19375610]
[-183.90376282 378.15200806]
[-183.19288635 362.90545654]
[-175.92962646 349.48129272]
[-163.55610657 340.54492188]
[-148.52909851 337.87066650]
[-133.83221436 341.98947144]
[-123.95651245 330.69918823]
[-114.08080292 319.40893555]
[-104.20510101 308.11865234]
[-94.32939148 296.82836914]
[-84.45368958 285.53808594]
[-74.57798004 274.24780273]
[-64.70227814 262.95751953]
[-64.12998199 258.15942383]
[-60.49733734 253.68821716]
[-54.18187332 251.41719055]
[-43.85097122 240.54188538]
[-33.52006912 229.66656494]
[-43.36894608 218.68601990]
[-52.31735611 206.96003723]
[-60.30908966 194.56227112]
[-67.29396057 181.57057190]
[-73.22809601 168.06654358]
[-78.07421875 154.13499451]
[-81.80190277 139.86344910]
[-84.38772583 125.34152985]
[-85.81545258 110.66044617]
[-86.07611084 95.91240692]
[-85.16806793 81.19004059]
[-83.09702301 66.58580780]
[-79.87598419 52.19145203]
[-75.52518463 38.09736633]
[-70.07195282 24.39207649]
[-63.55053329 11.16166592]
[-56.00189209 -1.51077127]
[-47.47343445 -13.54564190]
[-38.01873016 -24.86735725]
[-27.69716072 -35.40480804]
[-16.57355309 -45.09181213]
[-25.48970413 -57.15424347]
[-34.40585327 -69.21667480]
[-48.68303299 -78.35990143]
[-43.84944153 -94.61021423]
[-26.89612579 -94.46405792]
[-22.34342384 -78.13282776]
[-13.42727184 -66.07039642]
[-4.51112127 -54.00796127]
[8.66428566 -62.16909027]
[22.47299957 -69.20576477]
[36.81927490 -75.06919098]
[51.60363388 -79.71871948]
[66.72356415 -83.12210846]
[82.07423401 -85.25575256]
[97.54919434 -86.10486603]
[113.04114532 -85.66355133]
[128.44267273 -83.93488312]
[143.64698792 -80.93083954]
[158.54866028 -76.67224121]
[173.04435730 -71.18863678]
[187.03358459 -64.51802826]
[200.41932678 -56.70668411]
[213.10877991 -47.80875778]
[225.01396179 -37.88595200]
[236.05232239 -27.00706291]
[246.14730835 -15.24752903]
[255.22892761 -2.68888688]
[268.06259155 -10.45402241]
[280.89624023 -18.21915817]
[293.72988892 -25.98429298]
[306.40139771 -34.01129150]
[318.90542603 -42.29676437]
[331.40948486 -50.58224106]
[332.20483398 -65.96643829]
[341.79431152 -77.79418182]
[356.33758545 -81.66160583]
[370.20349121 -76.28808594]
[382.70751953 -84.57355499]
[395.21154785 -92.85903168]
[407.71560669 -101.14450836]
[420.21963501 -109.42998505]
[427.04101562 -124.34308624]
[443.39016724 -125.62255859]
[452.44848633 -111.95219421]
[444.89755249 -97.39488220]
[428.50509644 -96.92594910]
[416.00106812 -88.64047241]
[403.49703979 -80.35499573]
[390.99298096 -72.06951904]
[378.48895264 -63.78404617]
[378.03271484 -48.92033768]
[368.80242920 -37.03481293]
[354.17236328 -32.81410980]
[339.69494629 -38.07820511]
[327.19091797 -29.79272842]
[314.68688965 -21.50725555]
[312.86923218 -17.03004456]
[308.18585205 -13.67537594]
[301.49502563 -13.15063953]
[288.66137695 -5.38550377]
[275.82772827 2.37963152]
[262.99404907 10.14476681]
[269.64047241 23.42890930]
[275.20639038 37.20076370]
[279.65634155 51.37261581]
[282.96200562 65.85419464]
[285.10226440 80.55326080]
[286.06356812 95.37619019]
[285.83972168 110.22857666]
[284.43218994 125.01580811]
[281.84994507 139.64370728]
[278.10940552 154.01908875]
[273.23443604 168.05041504]
[267.25604248 181.64828491]
[260.21234131 194.72612000]
[252.14814758 207.20059204]
[243.11488342 218.99226379]
[233.17005920 230.02601624]
[222.37699890 240.23158264]
[210.80448914 249.54394531]
[198.52621460 257.90380859]
[185.62037659 265.25790405]
[172.16918945 271.55941772]
[158.25833130 276.76818848]
[143.97639465 280.85104370]
[129.41435242 283.78198242]
[114.66496277 285.54235840]
[99.82216644 286.12091064]
[84.98049927 285.51400757]
[70.23450470 283.72546387]
[55.67809296 280.76669312]
[41.40398407 276.65655518]
[27.50310326 271.42120361]
[14.06398296 265.09399414]
[1.17222631 257.71524048]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 36]
[2 35]
[3 34]
[4 31]
[5 30]
[6 29]
[7 28]
[8 27]
[9 26]
[10 25]
[11 24]
[57 65]
[58 64]
[59 63]
[84 119]
[85 118]
[86 117]
[87 116]
[88 113]
[89 112]
[90 111]
[94 107]
[95 106]
[96 105]
[97 104]
[98 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
