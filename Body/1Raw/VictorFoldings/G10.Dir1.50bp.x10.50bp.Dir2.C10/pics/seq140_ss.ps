%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCAAUAUUACAGGCGAACAUACUUACUAAAGUGUGUUAAUUAAUUAAUGCUUGUAGGACAxxxxxxxxxxCAGUAGCCCAAACAAUCUCAUAUGAAGUCACCCUAGCCAUCAUUCUACUAUCAACAUUACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 328.58145142]
[92.50000000 313.58145142]
[92.50000000 298.58145142]
[92.50000000 283.58145142]
[92.50000000 268.58145142]
[92.50000000 253.58145142]
[92.50000000 238.58145142]
[92.50000000 223.58145142]
[92.50000000 208.58145142]
[92.50000000 193.58145142]
[74.43138885 190.33262634]
[57.34049606 183.62956238]
[41.88086700 173.72857666]
[28.64366531 161.00828552]
[18.13506317 145.95507812]
[10.75690651 129.14459229]
[6.79132652 111.21965027]
[6.38996458 92.86567688]
[-8.42779350 90.53456879]
[-23.24555206 88.20346832]
[-38.06330872 85.87236023]
[-52.88106918 83.54125977]
[-67.69882965 81.21015167]
[-82.51658630 78.87905121]
[-97.33434296 76.54794312]
[-112.31405640 75.76810455]
[-127.29376984 76.54794312]
[-142.27348328 77.32778931]
[-157.25320435 78.10763550]
[-172.23291016 78.88748169]
[-187.21263123 79.66732788]
[-202.19233704 80.44717407]
[-217.17205811 81.22702026]
[-232.15176392 82.00685883]
[-245.60632324 91.38274384]
[-260.33642578 84.17467499]
[-261.18899536 67.79770660]
[-247.28701782 59.09905624]
[-232.93161011 67.02714539]
[-217.95190430 66.24730682]
[-202.97218323 65.46746063]
[-187.99247742 64.68761444]
[-173.01275635 63.90776825]
[-158.03305054 63.12792206]
[-143.05332947 62.34807587]
[-128.07360840 61.56823349]
[-113.09390259 60.78838730]
[-125.28907776 52.05467987]
[-131.60864258 38.45088577]
[-130.41679382 23.49831200]
[-122.02202606 11.06738377]
[-108.59731293 4.37580824]
[-93.61760712 5.15568018]
[-80.96034241 13.20513248]
[-73.90181732 26.44058800]
[-74.26911926 41.43609238]
[-81.96716309 54.31010056]
[-95.00323486 61.73019028]
[-80.18547821 64.06129456]
[-65.36772156 66.39239502]
[-50.54996490 68.72350311]
[-35.73220444 71.05460358]
[-20.91444778 73.38571167]
[-6.09668970 75.71681213]
[8.72106838 78.04791260]
[12.92938137 64.89380646]
[19.02201271 52.49944305]
[26.86710930 41.13305283]
[36.29489517 31.04061317]
[47.10134125 22.44054413]
[59.05257797 15.51896095]
[71.88996887 10.42565250]
[85.33570099 7.27084780]
[99.09878540 6.12281847]
[112.88137054 7.00641060]
[126.38518524 9.90250111]
[139.31799316 14.74841690]
[151.39991760 21.43928337]
[162.36947632 29.83030319]
[171.98927307 39.73988724]
[180.05114746 50.95357132]
[186.38059998 63.22868729]
[200.60737610 58.47486877]
[214.83415222 53.72105408]
[229.06092834 48.96723938]
[243.28771973 44.21342468]
[240.81047058 29.38744354]
[240.68315125 14.35646629]
[242.90887451 -0.50935459]
[247.43284607 -14.84393406]
[254.14366150 -28.29427147]
[262.87603760 -40.52914047]
[273.41494751 -51.24724197]
[285.50088501 -60.18463898]
[298.83618164 -67.12123871]
[313.09243774 -71.88621521]
[327.91864014 -74.36223602]
[342.94961548 -74.48831940]
[357.81524658 -72.26136780]
[372.14947510 -67.73621368]
[385.59924316 -61.02429581]
[397.83340454 -52.29090118]
[408.55062866 -41.75110245]
[417.48703003 -29.66444588]
[424.42251587 -16.32857704]
[429.18634033 -2.07190657]
[431.66113281 12.75448418]
[431.78598022 27.78548241]
[429.55780029 42.65093613]
[425.03146362 56.98476791]
[418.31842041 70.43399811]
[409.58401489 82.66742706]
[399.04333496 93.38378906]
[386.95593262 102.31919098]
[373.61950684 109.25358582]
[359.36242676 114.01621246]
[344.53585815 116.48978424]
[329.50482178 116.61338806]
[314.63955688 114.38397980]
[300.30609131 109.85646057]
[286.85742188 103.14232635]
[274.62472534 94.40691376]
[263.90924072 83.86534882]
[254.97482300 71.77721405]
[248.04153442 58.44020462]
[233.81475830 63.19401932]
[219.58796692 67.94783783]
[205.36119080 72.70165253]
[191.13441467 77.45546722]
[193.43046570 90.80835724]
[193.78054810 104.35269928]
[192.17738342 117.80637360]
[188.65435791 130.88919067]
[183.28485107 143.32864380]
[176.18069458 154.86564636]
[167.48985291 165.25991821]
[157.39334106 174.29496765]
[146.10144043 181.78260803]
[133.84934998 187.56687927]
[120.89224243 191.52732849]
[107.50000000 193.58145142]
[107.50000000 208.58145142]
[107.50000000 223.58145142]
[107.50000000 238.58145142]
[107.50000000 253.58145142]
[107.50000000 268.58145142]
[107.50000000 283.58145142]
[107.50000000 298.58145142]
[107.50000000 313.58145142]
[107.50000000 328.58145142]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[18 65]
[19 64]
[20 63]
[21 62]
[22 61]
[23 60]
[24 59]
[25 58]
[26 47]
[27 46]
[28 45]
[29 44]
[30 43]
[31 42]
[32 41]
[33 40]
[34 39]
[82 129]
[83 128]
[84 127]
[85 126]
[86 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
