%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUUCACUUCUGAGUCCCAGAGGUUACCCAAGGCACCCCUCUGACAUCCGGCCUGCUUCUUxxxxxxxxxxUAUUUACCAAAUGCCCCUCAUUUACAUAAAUAUUAUACUAGCAUUUACCAUCUCACUUCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[77.85768127 411.11288452]
[77.85768127 396.11288452]
[77.85768127 381.11288452]
[77.85768127 366.11288452]
[77.85768127 351.11288452]
[77.85768127 336.11288452]
[77.85768127 321.11288452]
[77.85768127 306.11288452]
[77.85768127 291.11288452]
[77.85768127 276.11288452]
[63.25343704 272.80865479]
[49.74420929 266.33416748]
[38.00891113 257.01119995]
[28.63810539 245.30480957]
[22.10426521 231.80010986]
[18.73797798 217.17297363]
[18.71120262 202.15626526]
[22.02849960 187.50312805]
[28.52663422 173.94914246]
[37.88260651 162.17547607]
[49.62971497 152.77459717]
[63.18081284 146.22050476]
[77.85768127 142.84480286]
[77.85768127 127.84480286]
[68.34932709 116.24346161]
[53.64136505 113.29798126]
[38.77831650 111.27564240]
[23.81806946 110.18433380]
[8.85782051 109.09302521]
[-6.10242796 108.00171661]
[-21.06267738 106.91040039]
[-36.02292633 105.81909180]
[-42.81511307 119.41815948]
[-54.29769135 129.37902832]
[-68.71965027 134.18272400]
[-83.88174438 133.09674072]
[-97.47186279 126.28667450]
[-107.41761780 114.79100800]
[-112.20234680 100.36273956]
[-111.09641266 85.20208740]
[-104.26847076 71.62094116]
[-92.75972748 61.69031525]
[-78.32518005 56.92457199]
[-63.16600037 58.05044174]
[-49.59384155 64.89624786]
[-39.67836761 76.41804504]
[-34.93161392 90.85884094]
[-19.97136688 91.95015717]
[-5.01111746 93.04146576]
[9.94913101 94.13277435]
[24.90937996 95.22408295]
[39.86962891 96.31539917]
[31.25570107 84.03532410]
[33.65824509 69.22898102]
[45.71320724 60.30273056]
[60.57633209 62.32448578]
[69.80902100 74.14639282]
[68.16938019 89.05651093]
[56.58684921 98.59001923]
[71.29480743 101.53549957]
[78.12881470 84.35805511]
[93.18665314 75.91329193]
[108.99514008 78.64235687]
[118.97786713 67.44659424]
[128.96060181 56.25082397]
[138.94332886 45.05506134]
[132.47996521 35.72561646]
[128.01528931 25.29834366]
[125.72714233 14.19546509]
[125.70533752 2.86598492]
[127.94808197 -8.23248100]
[132.36215210 -18.65218163]
[138.76678467 -27.97329521]
[146.90109253 -35.82085037]
[156.43464661 -41.87979507]
[166.98095703 -45.90767288]
[178.11306763 -47.74428558]
[189.38090515 -47.31809998]
[200.32945251 -44.64900589]
[210.51712036 -39.84741592]
[219.53355408 -33.10969543]
[231.03535461 -42.73822021]
[242.53715515 -52.36674881]
[254.03897095 -61.99527359]
[265.54077148 -71.62380219]
[277.04257202 -81.25232697]
[278.24777222 -98.67314148]
[291.39981079 -109.64164734]
[308.08416748 -107.77350616]
[319.38317871 -117.63922882]
[330.68218994 -127.50495148]
[341.98117065 -137.37068176]
[353.28018188 -147.23640442]
[355.79437256 -163.08122253]
[369.82043457 -170.86898804]
[384.59878540 -164.62557983]
[388.79272461 -149.14041138]
[379.18502808 -136.29238892]
[363.14590454 -135.93739319]
[351.84689331 -126.07167053]
[340.54791260 -116.20594788]
[329.24890137 -106.34022522]
[317.94989014 -96.47450256]
[318.88037109 -83.58531952]
[312.09884644 -72.35654449]
[299.90078735 -67.02411652]
[286.67111206 -69.75051880]
[275.16928101 -60.12199783]
[263.66748047 -50.49346924]
[252.16569519 -40.86494446]
[240.66387939 -31.23641777]
[229.16207886 -21.60789108]
[236.48449707 -4.06074190]
[237.51705933 14.94613552]
[232.12664795 33.22396851]
[220.92059326 48.66317749]
[205.17832947 59.47687149]
[186.70529175 64.40764618]
[167.62586975 62.87376404]
[150.13908386 55.03778458]
[140.15635681 66.23355103]
[130.17362976 77.42932129]
[120.19091034 88.62508392]
[124.50614929 101.73511505]
[120.59703064 115.80206299]
[108.93201447 125.85388184]
[92.85768127 127.84480286]
[92.85768127 142.84480286]
[107.53455353 146.22050476]
[121.08565521 152.77459717]
[132.83276367 162.17547607]
[142.18873596 173.94914246]
[148.68687439 187.50312805]
[152.00416565 202.15626526]
[151.97738647 217.17297363]
[148.61109924 231.80010986]
[142.07727051 245.30480957]
[132.70645142 257.01119995]
[120.97116089 266.33416748]
[107.46193695 272.80865479]
[92.85768127 276.11288452]
[92.85768127 291.11288452]
[92.85768127 306.11288452]
[92.85768127 321.11288452]
[92.85768127 336.11288452]
[92.85768127 351.11288452]
[92.85768127 366.11288452]
[92.85768127 381.11288452]
[92.85768127 396.11288452]
[92.85768127 411.11288452]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[23 128]
[24 127]
[25 60]
[26 59]
[27 52]
[28 51]
[29 50]
[30 49]
[31 48]
[32 47]
[63 123]
[64 122]
[65 121]
[66 120]
[81 112]
[82 111]
[83 110]
[84 109]
[85 108]
[86 107]
[89 103]
[90 102]
[91 101]
[92 100]
[93 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
