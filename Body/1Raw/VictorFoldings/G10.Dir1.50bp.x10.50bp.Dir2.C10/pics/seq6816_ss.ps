%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUACCAACACCUAUUCUGAUUUUUCGGUCACCCUGAAGUUUAUAUUCUUAUCCUACCAGGxxxxxxxxxxCGUAGGAAUUAUAUCCUUCUUGCUCAUCAGUUGAUGAUACGCCCGAGCAGAUGCCAACACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[105.02611542 278.56988525]
[105.02611542 263.56988525]
[105.02611542 248.56990051]
[105.02611542 233.56990051]
[105.02611542 218.56990051]
[105.02611542 203.56990051]
[105.02611542 188.56990051]
[105.02611542 173.56990051]
[105.02611542 158.56990051]
[105.02611542 143.56990051]
[91.61735535 140.15078735]
[80.81723022 133.00440979]
[73.52199554 123.39354706]
[60.42884064 130.71264648]
[47.33568573 138.03175354]
[50.70645142 152.75637817]
[49.79088974 167.83413696]
[44.66322708 182.04270935]
[35.73913956 194.23030090]
[23.74205971 203.40890503]
[9.64453983 208.83445740]
[-5.41059923 210.06712341]
[-20.20290375 207.00698853]
[-33.53322601 199.90213013]
[-44.32094193 189.32847595]
[-51.69153214 176.14321899]
[-55.04750443 161.41522217]
[-54.11679840 146.33839417]
[-48.97486115 132.13497925]
[-40.03853607 119.95635986]
[-28.03223991 110.78981018]
[-13.92927647 105.37842560]
[1.12709332 104.16088104]
[15.91631603 107.23587036]
[29.23949432 114.35412598]
[40.01658249 124.93860626]
[53.10973740 117.61949921]
[66.20288849 110.30039215]
[64.78260803 102.84220886]
[64.98847961 95.25279236]
[66.81098938 87.88256836]
[70.16598511 81.07186890]
[74.89855194 75.13516235]
[80.79017639 70.34658051]
[87.56880188 66.92723083]
[85.39196014 52.08602905]
[83.21512604 37.24482346]
[81.03828430 22.40361595]
[68.64340210 12.96939468]
[66.64719391 -2.11270809]
[75.71767426 -13.87119770]
[73.54083252 -28.71240425]
[71.36399841 -43.55360794]
[69.18715668 -58.39481354]
[59.52905273 -70.92604065]
[65.33743286 -84.64143372]
[62.41890335 -88.05371094]
[60.92966080 -91.84227753]
[60.80847549 -95.49839783]
[61.83110428 -98.58840942]
[63.65026474 -100.80155182]
[62.71463776 -115.77234650]
[61.77900696 -130.74313354]
[60.84337997 -145.71392822]
[59.90775299 -160.68472290]
[58.97212219 -175.65550232]
[44.49600601 -180.21691895]
[32.64764023 -189.70272827]
[25.02942467 -202.83007812]
[22.67165756 -217.82359314]
[25.89320755 -232.65551758]
[34.25838852 -245.31996155]
[46.63587570 -254.10417175]
[61.35171890 -257.82012939]
[76.41571808 -255.96531677]
[89.79059601 -248.79055786]
[99.66750336 -237.26618958]
[104.71067047 -222.95077515]
[104.23805237 -207.78038025]
[98.31357574 -193.80665588]
[87.73845673 -182.91943359]
[73.94291687 -176.59114075]
[74.87854004 -161.62034607]
[75.81417084 -146.64955139]
[76.74980164 -131.67875671]
[77.68542480 -116.70796967]
[78.62105560 -101.73718262]
[80.17863464 -86.81826782]
[89.68103790 -75.34858704]
[84.02836609 -60.57165146]
[86.20520020 -45.73044586]
[88.38204193 -30.88924026]
[90.55887604 -16.04803467]
[102.62400818 -7.38961411]
[105.04304504 7.63046885]
[95.87949371 20.22677994]
[98.05632782 35.06798553]
[100.23316956 49.90919113]
[102.41000366 64.75039673]
[131.34226990 75.80381012]
[143.08876038 108.18268585]
[158.04901123 109.27399445]
[173.00926208 110.36530304]
[187.96949768 111.45661926]
[202.92974854 112.54792786]
[217.92893982 112.70396423]
[232.90866089 111.92411804]
[247.88836670 111.14427185]
[262.86807251 110.36442566]
[274.63211060 99.45629883]
[290.47302246 101.99504852]
[298.23901367 116.03317261]
[291.97268677 130.80181885]
[276.48104858 134.97174072]
[263.64791870 125.34413910]
[248.66821289 126.12398529]
[233.68850708 126.90383148]
[218.70878601 127.68367767]
[228.78465271 138.79570007]
[228.24430847 153.78596497]
[217.39453125 164.14369202]
[202.39533997 163.98823547]
[191.76257324 153.40785217]
[191.53303528 138.40962219]
[201.83843994 127.50817871]
[186.87818909 126.41686249]
[171.91793823 125.32555389]
[156.95770264 124.23424530]
[141.99745178 123.14293671]
[136.50462341 128.24967957]
[149.11026001 136.37971497]
[164.05607605 137.65367126]
[175.08912659 147.81594849]
[177.58479309 162.60687256]
[170.49696350 175.82666016]
[156.79661560 181.93405151]
[142.22640991 178.36907959]
[132.89363098 166.62602234]
[132.71032715 151.62689209]
[125.51895142 138.46315002]
[120.02611542 143.56990051]
[120.02611542 158.56990051]
[120.02611542 173.56990051]
[120.02611542 188.56990051]
[120.02611542 203.56990051]
[120.02611542 218.56990051]
[120.02611542 233.56990051]
[120.02611542 248.56990051]
[120.02611542 263.56988525]
[120.02611542 278.56988525]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[13 38]
[14 37]
[15 36]
[45 99]
[46 98]
[47 97]
[48 96]
[51 93]
[52 92]
[53 91]
[54 90]
[56 88]
[61 87]
[62 86]
[63 85]
[64 84]
[65 83]
[66 82]
[101 129]
[102 128]
[103 127]
[104 126]
[105 125]
[106 118]
[107 117]
[108 116]
[109 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
