%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAGGAUUAGACUGAACCGAAUUGGUAUAUAGUUUAAACAAAACGAAUGAUUUCGACUCAUxxxxxxxxxxACACCCGACCACACCGCUAACAAUCAAUACUAAACCCCCAUAAAUAGGAGAAGGCUUAGACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[89.27467346 268.75360107]
[89.27467346 253.75360107]
[89.27467346 238.75360107]
[89.27467346 223.75360107]
[89.27467346 208.75360107]
[89.27467346 193.75360107]
[89.27467346 178.75360107]
[89.27467346 163.75360107]
[89.27467346 148.75360107]
[89.27467346 133.75360107]
[74.12994385 117.15235901]
[73.45043182 97.54555511]
[83.99833679 84.48851776]
[77.36983490 71.03255463]
[64.33068848 62.07202148]
[65.64736176 47.23572922]
[59.01886368 33.77976227]
[52.39036560 20.32379723]
[45.76186752 6.86783266]
[47.41237640 21.77675056]
[37.51834869 33.05097961]
[22.52133560 33.35037613]
[12.18521404 22.48002434]
[13.23936176 7.51711130]
[24.99703979 -1.79657614]
[10.77026176 2.95723867]
[-3.45651770 7.71105337]
[-11.87840843 21.36577034]
[-27.82174301 23.15172768]
[-39.05615997 11.69889259]
[-36.96357346 -4.20710135]
[-23.14924049 -12.36453629]
[-8.21033287 -6.51572561]
[6.01644659 -11.26954079]
[20.24322510 -16.02335548]
[30.48614693 -15.41450024]
[40.14103317 -12.61530113]
[38.58345032 -27.53421402]
[37.02587128 -42.45312500]
[23.85184479 -34.89471054]
[6.09663153 -35.23833084]
[-7.80592442 -40.87028885]
[-21.70848083 -46.50224304]
[-35.61103821 -52.13420105]
[-50.88567734 -47.22859573]
[-64.16429138 -56.23181915]
[-65.26065826 -72.23736572]
[-53.33374405 -82.96715546]
[-37.53285599 -80.19020081]
[-29.97908020 -66.03675842]
[-16.07652473 -60.40480042]
[-2.17396784 -54.77284241]
[11.72858810 -49.14088821]
[18.42173004 -52.52494431]
[19.25348282 -67.50186920]
[31.80801582 -59.29306030]
[38.50115967 -62.67711639]
[42.20731735 -77.21205139]
[45.91347885 -91.74698639]
[49.61964035 -106.28192139]
[53.32580185 -120.81686401]
[55.03849411 -135.71876526]
[54.72643661 -150.71551514]
[54.41437912 -165.71226501]
[39.79314804 -169.47021484]
[26.72857475 -177.03457642]
[16.19013214 -187.84400940]
[8.95984650 -201.09638977]
[5.57425213 -215.80830383]
[6.28458214 -230.88801575]
[11.03812599 -245.21653748]
[19.48213959 -257.73059082]
[30.99001884 -267.50152588]
[44.70780563 -273.80429077]
[59.61754608 -276.17117310]
[74.61283875 -274.42657471]
[88.58094025 -268.69989014]
[100.48531342 -259.41610718]
[109.44258118 -247.26416016]
[114.78805542 -233.14578247]
[116.12506866 -218.10867310]
[113.35439301 -203.26866150]
[106.68164825 -189.72697449]
[96.60198212 -178.48852539]
[83.86338043 -170.38725281]
[69.41113281 -166.02432251]
[69.72319031 -151.02757263]
[70.03524780 -136.03082275]
[78.28542328 -148.55816650]
[90.85626984 -156.74192810]
[105.65068817 -159.21684265]
[120.20063019 -155.57006836]
[132.07885742 -146.40994263]
[139.30378723 -133.26458740]
[140.67016602 -118.32695007]
[135.95004272 -104.08895874]
[125.93082428 -92.92582703]
[112.28395844 -86.69982910]
[97.28604889 -86.44958496]
[83.43907166 -92.21685028]
[73.05302429 -103.03950500]
[67.86074066 -117.11070251]
[64.15457916 -102.57576752]
[60.44841766 -88.04082489]
[56.74225616 -73.50588989]
[53.03609467 -58.97095490]
[51.94478226 -44.01070786]
[53.50236511 -29.09179497]
[55.05994415 -14.17288208]
[59.21783447 0.23933387]
[65.84632874 13.69529915]
[72.47483063 27.15126419]
[79.10332489 40.60723114]
[91.66836548 48.60530090]
[90.82580566 64.40405273]
[97.45429993 77.86002350]
[120.23252106 79.43208313]
[135.24656677 103.46663666]
[149.02894592 109.38659668]
[162.90998840 102.18584442]
[178.16069031 105.64274597]
[187.58013916 118.12505341]
[186.72074890 133.73899841]
[175.98832703 145.11216736]
[160.45036316 146.87449646]
[147.44342041 138.19384766]
[143.10897827 123.16898346]
[129.32659912 117.24901581]
[123.06362152 121.37516022]
[132.32061768 133.17803955]
[141.57760620 144.98092651]
[150.83460999 156.78381348]
[162.76785278 165.87213135]
[162.25550842 180.86338806]
[149.72962952 189.11579895]
[135.75299072 183.67031860]
[132.11180115 169.11866760]
[124.92042542 155.95492554]
[117.72904205 142.79118347]
[110.53765869 129.62745667]
[104.27467346 133.75360107]
[104.27467346 148.75360107]
[104.27467346 163.75360107]
[104.27467346 178.75360107]
[104.27467346 193.75360107]
[104.27467346 208.75360107]
[104.27467346 223.75360107]
[104.27467346 238.75360107]
[104.27467346 253.75360107]
[104.27467346 268.75360107]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[13 116]
[14 115]
[16 113]
[17 112]
[18 111]
[19 110]
[25 35]
[26 34]
[27 33]
[37 109]
[38 108]
[39 107]
[41 53]
[42 52]
[43 51]
[44 50]
[57 106]
[58 105]
[59 104]
[60 103]
[61 102]
[62 88]
[63 87]
[64 86]
[118 128]
[119 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
