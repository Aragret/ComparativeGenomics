%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAUUACUCGCAUCAGGAGUAUCAAUCACCUGAGCUCACCAUAGUCUAAUAGAAAACAACCGAAxxxxxxxxxxCACAUCAUCGAAACCGCAAACAUAUCAUACACAAACGCCUGAGCCCUAUCUAUUACUCUCAUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[113.58536530 263.87741089]
[113.58536530 248.87739563]
[113.58536530 233.87739563]
[113.58536530 218.87739563]
[113.58536530 203.87739563]
[113.58536530 188.87739563]
[113.58536530 173.87739563]
[113.58536530 158.87739563]
[113.58536530 143.87739563]
[113.58536530 128.87739563]
[107.57109833 124.39647675]
[100.37972260 137.56021118]
[93.18833923 150.72395325]
[90.88392639 165.54588318]
[78.45156097 173.93852234]
[63.84305191 170.53388977]
[56.40208054 157.50961304]
[60.88793182 143.19607544]
[74.43035126 136.74835205]
[84.98646545 126.09149170]
[95.54257202 115.43464661]
[89.52831268 110.95372772]
[75.15528107 115.24512482]
[60.78225708 119.53652191]
[46.40922928 123.82791901]
[32.03620148 128.11930847]
[29.16053772 143.15225220]
[19.61903954 155.11964417]
[5.60427475 161.27146912]
[-9.66326714 160.19407654]
[-22.67521667 152.13505554]
[-30.44152260 138.94631958]
[-31.17754364 123.65851593]
[-24.71415138 109.78468323]
[-12.53658104 100.51293182]
[2.55684686 97.97383881]
[17.09777451 102.75086212]
[27.74480438 113.74628448]
[42.11783218 109.45488739]
[56.49085999 105.16349030]
[70.86388397 100.87209320]
[85.23691559 96.58069611]
[95.68314362 85.81611633]
[99.54126740 71.32077789]
[103.39938354 56.82543564]
[107.25750732 42.33009338]
[111.11562347 27.83475304]
[96.97493744 22.80545807]
[83.29124451 16.64029312]
[70.15560150 9.38028526]
[57.65542984 1.07375050]
[45.87391663 -8.22403145]
[34.88946915 -18.45118523]
[24.77518463 -29.53964996]
[15.59837437 -41.41563034]
[7.42010927 -54.00009918]
[0.29481521 -67.20929718]
[-5.73008919 -80.95532990]
[-10.61450863 -95.14670563]
[-14.32593822 -109.68899536]
[-16.83967781 -124.48541260]
[-18.13899803 -139.43748474]
[-18.21525383 -154.44570923]
[-17.06793785 -169.41021729]
[-14.70468330 -184.23141479]
[-11.14121914 -198.81066895]
[-6.40125895 -213.05094910]
[-0.51634753 -226.85748291]
[6.47435141 -240.13841248]
[14.52431583 -252.80532837]
[23.57997322 -264.77395630]
[33.58105850 -275.96463013]
[44.46101761 -286.30285645]
[56.14744186 -295.71987915]
[68.56256104 -304.15301514]
[81.62374878 -311.54614258]
[95.24408722 -317.85003662]
[109.33293915 -323.02276611]
[123.79653931 -327.02987671]
[138.53863525 -329.84475708]
[153.46110535 -331.44863892]
[168.46466064 -331.83087158]
[183.44944763 -330.98886108]
[198.31575012 -328.92825317]
[212.96461487 -325.66278076]
[227.29856873 -321.21411133]
[241.22221375 -315.61190796]
[254.64289856 -308.89343262]
[267.47131348 -301.10336304]
[279.62207031 -292.29360962]
[291.01431274 -282.52273560]
[301.57220459 -271.85580444]
[311.22552490 -260.36380005]
[319.91000366 -248.12319946]
[327.56787109 -235.21545410]
[334.14813232 -221.72645569]
[339.60702515 -207.74600220]
[343.90820312 -193.36709595]
[347.02304077 -178.68545532]
[348.93081665 -163.79878235]
[349.61883545 -148.80613708]
[349.08251953 -133.80729675]
[347.32540894 -118.90207672]
[344.35925293 -104.18968201]
[340.20376587 -89.76801300]
[334.88656616 -75.73303986]
[328.44308472 -62.17817307]
[320.91619873 -49.19361877]
[312.35598755 -36.86578369]
[302.81939697 -25.27671432]
[292.36993408 -14.50352955]
[281.07711792 -4.61792803]
[269.01611328 4.31430387]
[256.26718140 12.23372269]
[242.91514587 19.08762360]
[229.04887390 24.83039665]
[214.76065063 29.42382431]
[200.14556885 32.83733368]
[185.30087280 35.04821396]
[170.32537842 36.04174805]
[155.31872559 35.81132507]
[140.38078308 34.35847473]
[125.61096954 31.69287300]
[121.75284576 46.18821335]
[117.89472961 60.68355560]
[114.03660583 75.17889404]
[110.17848969 89.67424011]
[120.51374054 78.80306244]
[128.29554749 65.97950745]
[139.29342651 55.77918625]
[152.66546631 48.98297119]
[167.38798523 46.11113739]
[182.33392334 47.38353348]
[196.35911560 52.70275497]
[208.38987732 61.66159058]
[217.50521851 73.57421112]
[223.00732422 87.52867126]
[224.47497559 102.45669556]
[221.79585266 117.21549988]
[215.17501831 130.67523193]
[205.11933899 141.80552673]
[192.39860535 149.75428772]
[177.98663330 153.91304016]
[162.98670959 153.96339417]
[148.54714966 149.90150452]
[135.77674866 142.04113770]
[128.58537292 128.87739563]
[128.58537292 143.87739563]
[128.58537292 158.87739563]
[128.58537292 173.87739563]
[128.58537292 188.87739563]
[128.58537292 203.87739563]
[128.58537292 218.87739563]
[128.58537292 233.87739563]
[128.58537292 248.87739563]
[128.58537292 263.87741089]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 156]
[2 155]
[3 154]
[4 153]
[5 152]
[6 151]
[7 150]
[8 149]
[9 148]
[10 147]
[22 42]
[23 41]
[24 40]
[25 39]
[26 38]
[43 127]
[44 126]
[45 125]
[46 124]
[47 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
