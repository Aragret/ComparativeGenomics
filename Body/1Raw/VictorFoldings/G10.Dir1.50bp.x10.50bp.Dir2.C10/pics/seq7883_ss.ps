%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCCUAAAAAUCUUUGAAAUAGGGCCCGUAUUUACCCUAUAGCACCCCCUCUACCCCCUCxxxxxxxxxxGUUGUAUUUCAACUACAAGAACACCAAUGACCCCAAUACGCAAAACUAACCCCCUAAUAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[171.10783386 97.89384460]
[156.24479675 99.91618347]
[141.38174438 101.93851471]
[126.51869965 103.96085358]
[111.65565491 105.98318481]
[96.88959503 108.62204742]
[82.24609375 111.87287903]
[67.60259247 115.12370300]
[52.95909500 118.37452698]
[38.31559372 121.62535095]
[52.30178833 127.04627228]
[63.22239304 137.32928467]
[69.47388458 150.96449280]
[70.13832855 165.94976807]
[65.11814880 180.08476257]
[55.15050125 191.29394531]
[41.69897079 197.93144226]
[26.73871422 199.02262878]
[12.46641350 194.40727234]
[0.97774231 184.76307678]
[-6.04036474 171.50614929]
[-7.55740499 156.58306885]
[-3.35062432 142.18504333]
[5.96227551 130.42622375]
[19.01320648 123.03340912]
[4.05295849 121.94210052]
[-7.84328508 131.99780273]
[-22.99955940 130.67794800]
[-32.51282120 119.27472687]
[-47.47306824 118.18341064]
[-62.43331909 117.09210205]
[-77.39356995 116.00079346]
[-92.35381317 114.90948486]
[-107.31406403 113.81816864]
[-115.87437439 126.57029724]
[-129.67094421 133.31939697]
[-144.99255371 132.25000000]
[-157.71778870 123.64975739]
[-164.42359924 109.83210754]
[-163.30618286 94.51391602]
[-154.66610718 81.81570435]
[-140.82749939 75.15322876]
[-125.51288605 76.31865692]
[-112.84181976 84.99850464]
[-106.22275543 98.85792542]
[-91.26250458 99.94923401]
[-76.30225372 101.04054260]
[-61.34200668 102.13185120]
[-46.38175964 103.22316742]
[-31.42151070 104.31447601]
[-20.35409546 94.41255951]
[-5.16672945 95.30619049]
[5.14426899 106.98184967]
[20.10451698 108.07316589]
[35.06476593 106.98184967]
[49.70826721 103.73102570]
[64.35176849 100.48020172]
[78.99526978 97.22937775]
[93.63877106 93.97854614]
[95.51107788 91.48287201]
[98.35607910 89.63337708]
[101.92843628 88.80016327]
[105.84654999 89.25441742]
[109.63331604 91.12014008]
[124.49636841 89.09780121]
[139.35940552 87.07546997]
[154.22245789 85.05313873]
[169.08551025 83.03079987]
[168.97671509 58.96566391]
[172.71141052 35.19417191]
[180.19302368 12.32615948]
[191.22889709 -9.05184650]
[205.53518677 -28.39165306]
[222.74426270 -45.19746780]
[242.41401672 -59.03860855]
[264.03933716 -69.56052399]
[287.06503296 -76.49391174]
[310.90008545 -79.66156769]
[334.93280029 -78.98295593]
[358.54656982 -74.47621155]
[381.13565063 -66.25769806]
[388.04266357 -79.57285309]
[394.94967651 -92.88800812]
[401.85665894 -106.20317078]
[398.40051270 -121.86952209]
[408.60568237 -134.24829102]
[424.64364624 -133.84355164]
[434.21142578 -120.96578217]
[429.96945190 -105.49369812]
[415.17181396 -99.29616547]
[408.26483154 -85.98101044]
[401.35781860 -72.66585541]
[394.45080566 -59.35070038]
[403.05450439 -53.93144226]
[411.27163696 -47.94183731]
[419.06439209 -41.40935516]
[426.39703369 -34.36397934]
[433.23587036 -26.83803177]
[439.54943848 -18.86605072]
[445.30877686 -10.48462296]
[450.48736572 -1.73221505]
[455.06143188 7.35099888]
[459.00994873 16.72332573]
[462.31475830 26.34174156]
[464.96066284 36.16209412]
[466.93545532 46.13929749]
[468.23004150 56.22754669]
[468.83850098 66.38052368]
[468.75796509 76.55161285]
[467.98876953 86.69411469]
[466.53445435 96.76145172]
[464.40164185 106.70738983]
[461.60009766 116.48626709]
[458.14263916 126.05316162]
[454.04516602 135.36415100]
[449.32641602 144.37644958]
[444.00808716 153.04869080]
[438.11450195 161.34101868]
[431.67272949 169.21534729]
[424.71234131 176.63549805]
[417.26528931 183.56739807]
[409.36569214 189.97917175]
[401.04983521 195.84136963]
[392.35589600 201.12705994]
[383.32373047 205.81192017]
[373.99487305 209.87445068]
[364.41207886 213.29594421]
[354.61938477 216.06065369]
[344.66171265 218.15589905]
[334.58480835 219.57199097]
[324.43490601 220.30241394]
[314.25863647 220.34378052]
[304.10272217 219.69587708]
[294.01376343 218.36164856]
[284.03814697 216.34719849]
[274.22161865 213.66172791]
[264.60931396 210.31756592]
[255.24533081 206.33001709]
[246.17271423 201.71737671]
[237.43312073 196.50079346]
[229.06669617 190.70419312]
[221.11187744 184.35417175]
[213.60519409 177.47985840]
[206.58114624 170.11280823]
[200.07199097 162.28680420]
[194.10766602 154.03779602]
[188.71556091 145.40361023]
[183.92045593 136.42390442]
[179.74440002 127.13986206]
[176.20660400 117.59413147]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 68]
[2 67]
[3 66]
[4 65]
[5 64]
[6 59]
[7 58]
[8 57]
[9 56]
[10 55]
[25 54]
[26 53]
[29 50]
[30 49]
[31 48]
[32 47]
[33 46]
[34 45]
[81 93]
[82 92]
[83 91]
[84 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
