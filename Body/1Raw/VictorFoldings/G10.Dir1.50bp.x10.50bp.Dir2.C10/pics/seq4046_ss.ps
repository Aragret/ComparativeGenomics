%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGCCGCAGGCCCCUUCGCCCUAUUCUUCAUAGCCGAAUACACAAACAUUAUUAUAAUAAACxxxxxxxxxxAACAAAGCAUAAUAUUUCGCCCACUAAGCCAAUCACUUUAUUGACUCCUAGCCGCAGACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[98.45062256 114.98468018]
[89.68441772 127.15651703]
[80.91820526 139.32835388]
[79.13167572 155.04837036]
[65.41519928 160.85420227]
[56.64899445 173.02603149]
[47.88278961 185.19787598]
[39.11658096 197.36970520]
[30.35037422 209.54154968]
[21.58416557 221.71337891]
[12.81795883 233.88522339]
[4.05175209 246.05705261]
[-4.71445513 258.22888184]
[-9.06472588 274.61520386]
[-26.01493645 274.97113037]
[-31.04923630 258.78189087]
[-16.88629150 249.46269226]
[-8.12008476 237.29084778]
[0.64612228 225.11901855]
[9.41232967 212.94717407]
[18.17853737 200.77534485]
[26.94474411 188.60350037]
[35.71095276 176.43167114]
[44.47715759 164.25982666]
[53.24336624 152.08799744]
[54.40288162 137.23858643]
[68.74636841 130.56214905]
[77.51258087 118.39030457]
[86.27878571 106.21846771]
[79.79061890 92.69428253]
[64.81090546 91.91443634]
[49.83119202 91.13459015]
[34.85147476 90.35474396]
[19.87176323 89.57489777]
[10.95133781 102.16178131]
[-3.36650681 107.90659332]
[-18.51300049 104.97618866]
[-29.65495110 94.30564117]
[-33.23700333 79.29989624]
[-28.11613846 64.74722290]
[-15.92640305 55.29133224]
[-0.55749947 53.94955826]
[13.08641148 61.15006256]
[20.65160751 74.59518433]
[35.63132095 75.37503052]
[50.61103439 76.15487671]
[65.59075165 76.93472290]
[80.57046509 77.71456909]
[67.46999359 70.40855408]
[55.13760376 61.86970139]
[43.68892288 52.17807007]
[33.23131180 41.42454147]
[23.86283493 29.70995140]
[15.67133713 17.14414978]
[8.73363400 3.84496689]
[3.11477971 -10.06289005]
[-1.13253665 -24.44900513]
[-3.96848798 -39.17847824]
[-5.36648130 -54.11318970]
[-5.31340694 -69.11309814]
[-3.80976343 -84.03754425]
[-0.86964989 -98.74657440]
[3.47936368 -113.10227203]
[9.19649601 -126.97002411]
[16.22813797 -140.21977234]
[24.50835037 -152.72729492]
[33.95949173 -164.37530518]
[44.49293900 -175.05455017]
[56.00991440 -184.66493225]
[68.40242767 -193.11630249]
[81.55426788 -200.32942200]
[95.34210968 -206.23664856]
[109.63666534 -210.78259277]
[124.30389404 -213.92463684]
[139.20625305 -215.63330078]
[154.20402527 -215.89257812]
[169.15653992 -214.70001221]
[183.92359924 -212.06681824]
[198.36674500 -208.01766968]
[212.35052490 -202.59053040]
[225.74383545 -195.83630371]
[238.42105103 -187.81832886]
[250.26332092 -178.61177063]
[261.15960693 -168.30297852]
[271.00769043 -156.98860168]
[279.71527100 -144.77476501]
[287.20068359 -131.77597046]
[293.39373779 -118.11411285]
[298.23632812 -103.91731262]
[301.68310547 -89.31868744]
[303.70169067 -74.45513153]
[304.27319336 -59.46602631]
[303.39224243 -44.49191666]
[301.06710815 -29.67322159]
[297.31958008 -15.14889812]
[292.18478394 -1.05513966]
[285.71090698 12.47589397]
[277.95864868 25.31731987]
[269.00067139 37.34872437]
[258.92098999 48.45729065]
[247.81413269 58.53884506]
[235.78424072 67.49885559]
[222.94413757 75.25331116]
[209.41419983 81.72948456]
[195.32130432 86.86665344]
[180.79762268 90.61664581]
[165.97932434 92.94430542]
[151.00535583 93.82778931]
[136.01615906 93.25882721]
[121.14653015 91.24168396]
[136.00958252 93.26402283]
[150.87261963 95.28635406]
[165.73567200 97.30868530]
[178.16233826 87.54378510]
[193.84399414 89.50887299]
[203.47695923 102.03809357]
[201.34619141 117.69808197]
[188.71582031 127.19805145]
[173.07923889 124.90183258]
[163.71333313 112.17173767]
[148.85028076 110.14939880]
[133.98724365 108.12706757]
[119.12419128 106.10472870]
[131.19818115 115.00521851]
[143.27217102 123.90570831]
[155.34617615 132.80619812]
[169.89782715 136.44613647]
[183.26081848 143.26011658]
[194.75288391 152.90026855]
[203.78727722 164.87440491]
[209.90274048 178.57115173]
[212.78704834 193.29122925]
[212.29293823 208.28309631]
[208.44563293 222.78131104]
[201.44155884 236.04565430]
[191.63832092 247.39892578]
[179.53643799 256.26144409]
[165.75376892 262.18075562]
[150.99401855 264.85461426]
[136.01074219 264.14651489]
[121.56892395 260.09262085]
[108.40592194 252.89988708]
[97.19377136 242.93556213]
[88.50492096 230.70838928]
[82.78299713 216.84262085]
[80.32012177 202.04618835]
[81.24205017 187.07455444]
[85.50171661 172.69209290]
[92.87787628 159.63829041]
[94.73545837 144.75375366]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 29]
[2 28]
[3 27]
[5 25]
[6 24]
[7 23]
[8 22]
[9 21]
[10 20]
[11 19]
[12 18]
[13 17]
[30 48]
[31 47]
[32 46]
[33 45]
[34 44]
[110 123]
[111 122]
[112 121]
[113 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
