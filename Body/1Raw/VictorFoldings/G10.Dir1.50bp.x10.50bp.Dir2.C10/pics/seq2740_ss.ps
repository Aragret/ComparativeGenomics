%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAGCAUCACCAGUAUUAGAGGCACCGCCUGCCCAGUGACACAUGUUUAACGGCCGCGGUAxxxxxxxxxxACUAAUCAUAUUUUAUAUCUUCUUCGAAACCACACUUAUCCCCACCUUGGCUAUCAUCACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 260.48608398]
[92.50000000 245.48608398]
[92.50000000 230.48608398]
[92.50000000 215.48608398]
[92.50000000 200.48608398]
[92.50000000 185.48608398]
[92.50000000 170.48608398]
[92.50000000 155.48608398]
[92.50000000 140.48608398]
[92.50000000 125.48607635]
[85.85633087 122.00589752]
[73.18498230 130.03315735]
[72.56898499 115.04554749]
[65.92531586 111.56536865]
[53.59403229 120.10582733]
[46.65444946 134.32386780]
[31.78620338 135.20959473]
[19.45491982 143.75006104]
[20.79492569 159.05038452]
[14.29070187 172.96406555]
[1.69185007 181.74839783]
[-13.61260033 183.04043579]
[-27.50582886 176.49263000]
[-36.25062943 163.86630249]
[-37.49468994 148.55787659]
[-30.90336990 134.68524170]
[-18.24969673 125.98007202]
[-2.93744731 124.78399658]
[10.91446114 131.41877747]
[23.24574471 122.87831116]
[29.30331230 109.27114105]
[45.05357361 107.77454376]
[57.38485718 99.23408508]
[57.07688141 84.23724365]
[44.40536499 76.21025085]
[31.73384857 68.18325043]
[19.06233215 60.15625381]
[6.39081669 52.12925720]
[-6.38331652 54.18478012]
[-16.78616524 47.18820572]
[-19.51748085 35.36441040]
[-32.02151871 27.07893562]
[-44.52555466 18.79346085]
[-56.35829163 28.21903801]
[-70.52526855 33.52487946]
[-85.63854980 34.19116974]
[-100.21748352 30.15263748]
[-112.83378601 21.80493546]
[-122.25143433 9.96588326]
[-127.54778290 -4.20464611]
[-128.20394897 -19.31836891]
[-124.15563965 -33.89459991]
[-115.79948425 -46.50530243]
[-103.95413208 -55.91501236]
[-89.78005219 -61.20186234]
[-74.66589355 -61.84790039]
[-60.09238052 -57.78983307]
[-47.48727798 -49.42522812]
[-38.08550644 -37.57356644]
[-32.80815506 -23.39595413]
[-32.17224884 -8.28136444]
[-36.24007797 6.28942585]
[-23.73604202 14.57490063]
[-11.23200703 22.86037445]
[6.29036093 22.96607018]
[14.41781425 39.45774078]
[27.08933067 47.48473740]
[39.76084518 55.51173401]
[52.43236160 63.53873062]
[65.10387421 71.56572723]
[57.83192444 58.44632721]
[46.34943771 48.79477310]
[37.58795929 36.61952972]
[32.08380127 22.66588402]
[30.17389107 7.78797340]
[31.97513580 -7.10348463]
[37.37727737 -21.09694290]
[46.04963684 -33.33582306]
[57.46135712 -43.07094955]
[70.91389465 -49.70640564]
[85.58377838 -52.83602142]
[100.57302094 -52.26822662]
[114.96410370 -48.03776932]
[127.87610626 -40.40361404]
[138.51863098 -29.83306503]
[146.24024963 -16.97317696]
[150.56826782 -2.61113763]
[151.23779297 12.37391376]
[148.20780945 27.06469917]
[141.66380310 40.56195831]
[132.00558472 52.04018402]
[124.73363495 65.15958405]
[137.40515137 57.13258743]
[150.07666016 49.10559082]
[147.82261658 34.04441071]
[151.89561462 19.37026596]
[161.59001160 7.62554264]
[175.22619629 0.84508252]
[190.44158936 0.20364225]
[204.60006714 5.81235504]
[215.24855042 16.69947815]
[220.54216003 30.97875023]
[219.56372070 46.17620468]
[212.48277283 59.65878296]
[200.52612305 69.09055328]
[185.76533508 72.83740997]
[170.75779724 70.25017548]
[158.10366821 61.77710724]
[145.43214417 69.80410004]
[132.76063538 77.83110046]
[135.06150818 92.65357971]
[149.57012939 96.46144104]
[164.07875061 100.26930237]
[172.95100403 87.95477295]
[185.67478943 79.68011475]
[200.52931213 76.56442261]
[215.50563049 79.02905273]
[228.57830811 86.74069214]
[237.97938538 98.65640259]
[242.43743896 113.16468048]
[241.34956360 128.30340576]
[234.86286926 142.02517700]
[223.85462952 152.47425842]
[209.81362915 158.23748779]
[194.63879395 158.53541565]
[180.38238525 153.32778931]
[168.97248840 143.31886292]
[161.95217896 129.86227417]
[160.27090454 114.77792358]
[145.76226807 110.97006989]
[131.25364685 107.16220856]
[125.31523895 111.74317169]
[136.22216797 122.04069519]
[147.12910461 132.33821106]
[160.64086914 138.85218811]
[165.18035889 153.14878845]
[157.90135193 166.26428223]
[143.36769104 169.97544861]
[130.69175720 161.95544434]
[127.82117462 147.23258972]
[120.62979126 134.06884766]
[113.43841553 120.90511322]
[107.50000000 125.48607635]
[107.50000000 140.48608398]
[107.50000000 155.48608398]
[107.50000000 170.48608398]
[107.50000000 185.48608398]
[107.50000000 200.48608398]
[107.50000000 215.48608398]
[107.50000000 230.48608398]
[107.50000000 245.48608398]
[107.50000000 260.48608398]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[14 33]
[15 32]
[17 30]
[18 29]
[34 70]
[35 69]
[36 68]
[37 67]
[38 66]
[41 64]
[42 63]
[43 62]
[92 110]
[93 109]
[94 108]
[111 131]
[112 130]
[113 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
