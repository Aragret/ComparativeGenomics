%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGACUAUUUCUGUAUGUCUCCAUCUAUUGAUGAGGGUCUUACUCUUUUAGUAUAAAUAGUAxxxxxxxxxxGACACUGAGCCACAACCCAAACAACCCAGCUCUCCCUAAGCUUCAAACUAGACUACUUCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[98.45988464 439.48361206]
[98.45988464 424.48361206]
[98.45988464 409.48361206]
[98.45988464 394.48361206]
[98.45988464 379.48361206]
[98.45988464 364.48361206]
[98.45988464 349.48361206]
[98.45988464 334.48361206]
[98.45988464 319.48361206]
[98.45988464 304.48361206]
[82.94121552 300.53744507]
[68.94754791 292.73226929]
[57.42059708 281.58706665]
[49.13770676 267.84582520]
[44.65938950 252.42778015]
[44.29144287 236.36605835]
[48.06404114 220.73835754]
[55.72935104 206.59468079]
[66.77781677 194.88671875]
[80.47201538 186.40394592]
[95.89588928 181.72024536]
[95.27191162 166.73323059]
[87.01187134 154.33883667]
[94.16840363 140.22874451]
[93.54443359 125.24172974]
[88.96519470 123.60195923]
[84.77054596 121.13961029]
[81.10667419 117.94049835]
[78.10127258 114.11612701]
[75.85908508 109.79977417]
[60.92477798 111.20207977]
[45.99047089 112.60438538]
[31.05616379 114.00669098]
[18.00328255 123.93414307]
[2.98608875 117.34506989]
[1.45298302 101.01773834]
[14.98109436 91.74831390]
[29.65386009 99.07238007]
[44.58816910 97.67007446]
[59.52247620 96.26777649]
[74.45678711 94.86547089]
[84.30474091 75.91515350]
[106.77958679 69.29871368]
[106.46752930 54.30195999]
[106.15547180 39.30520630]
[105.84342194 24.30845261]
[95.93637085 8.82199669]
[104.90921021 -6.22752619]
[104.28523254 -21.21454239]
[99.08981323 -35.28606033]
[89.82486725 -47.08270264]
[80.55992126 -58.87934113]
[67.83055878 -61.20685959]
[60.36032486 -71.27733612]
[61.73579407 -83.33616638]
[52.71826553 -95.32299805]
[43.70073318 -107.30982971]
[34.68320465 -119.29666901]
[20.32945061 -128.31919861]
[25.02586365 -144.60968018]
[41.97981262 -144.60646057]
[46.67003632 -128.31419373]
[55.68756866 -116.32736206]
[64.70510101 -104.34053040]
[73.72262573 -92.35369873]
[90.20217133 -86.40184784]
[92.35655975 -68.14429474]
[101.62150574 -56.34765244]
[110.88645935 -44.55101013]
[109.36622620 -59.47377396]
[110.73095703 -74.41156006]
[114.93016815 -88.81179047]
[121.80852509 -102.14176941]
[131.11157227 -113.90838623]
[142.49517822 -123.67636871]
[155.53823853 -131.08438110]
[169.75825500 -135.85838318]
[184.62921143 -137.82177734]
[199.60098267 -136.90191650]
[214.11972046 -133.13285828]
[227.64837646 -126.65400696]
[239.68647766 -117.70503998]
[249.78871155 -106.61698151]
[257.58139038 -93.80002594]
[262.77621460 -79.72828674]
[265.18099976 -64.92231750]
[264.70684814 -49.92980957]
[261.37127686 -35.30538177]
[255.29766846 -21.59001732]
[246.71069336 -9.29108143]
[235.92800903 1.13646340]
[223.34848022 9.30687904]
[209.43746948 14.91792393]
[194.70957947 17.76203346]
[179.70959473 17.73399734]
[164.99243164 14.83485317]
[151.10249329 9.17184544]
[138.55360413 0.95446301]
[127.80998230 -9.51331615]
[119.27224731 -21.83852005]
[119.89622498 -6.85150385]
[128.60401917 1.60317361]
[129.20996094 14.12722301]
[120.84017181 23.99639702]
[121.15222931 38.99314880]
[121.46428680 53.98990250]
[121.77634430 68.98665619]
[132.10354614 79.86548615]
[147.06379700 80.95679474]
[162.02404785 82.04810333]
[176.98429871 83.13941193]
[187.75032043 71.79804993]
[203.29342651 70.08170319]
[216.27462769 78.80078888]
[220.56460571 93.83840942]
[214.13775635 108.09426880]
[200.02864075 114.83718872]
[184.89915466 110.88336182]
[175.89297485 98.09966278]
[160.93273926 97.00835419]
[145.97248840 95.91704559]
[131.01223755 94.82572937]
[124.71690369 114.67978668]
[108.53144836 124.61775208]
[109.15542603 139.60476685]
[117.46009064 153.07113647]
[110.25892639 166.10925293]
[110.88290405 181.09626770]
[124.66429901 183.81457520]
[137.47770691 189.55142212]
[148.67169189 198.01126099]
[157.67797852 208.76020813]
[164.04035950 221.24830627]
[167.43782043 234.83760071]
[167.70063782 248.83480835]
[164.81898499 262.52664185]
[158.94311523 275.21621704]
[150.37567139 286.25836182]
[139.55596924 295.09262085]
[127.03756714 301.27160645]
[113.45988464 304.48361206]
[113.45988464 319.48361206]
[113.45988464 334.48361206]
[113.45988464 349.48361206]
[113.45988464 364.48361206]
[113.45988464 379.48361206]
[113.45988464 394.48361206]
[113.45988464 409.48361206]
[113.45988464 424.48361206]
[113.45988464 439.48361206]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[21 128]
[22 127]
[24 125]
[25 124]
[30 41]
[31 40]
[32 39]
[33 38]
[43 107]
[44 106]
[45 105]
[46 104]
[48 101]
[49 100]
[50 69]
[51 68]
[52 67]
[55 65]
[56 64]
[57 63]
[58 62]
[108 122]
[109 121]
[110 120]
[111 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
