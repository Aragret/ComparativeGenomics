%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGUAUCAAUCACCUGAGCUCACCAUAGUCUAAUAGAAAACAACCGAAACCAAAUAAUUCAxxxxxxxxxxGCCAUACUAGUCUUUGCCGCCUGCGAAGCAGCGGUGGGCCUAGCCCUACUAGUCUCAAUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[98.95957184 352.90435791]
[98.95957184 337.90435791]
[98.95957184 322.90435791]
[98.95957184 307.90435791]
[98.95957184 292.90435791]
[98.95957184 277.90435791]
[98.95957184 262.90435791]
[98.95957184 247.90434265]
[98.95957184 232.90434265]
[98.95957184 217.90434265]
[97.40199280 202.98542786]
[94.30366516 188.30891418]
[91.20534515 173.63238525]
[88.10702515 158.95585632]
[67.88519287 116.48606110]
[89.00860596 95.04924774]
[78.12978363 84.72204590]
[67.25096130 74.39484406]
[56.06533432 84.40157318]
[44.10128403 93.46326447]
[31.43842888 101.51962280]
[18.16103363 108.51702118]
[4.35746145 114.40888977]
[-9.88042545 119.15603638]
[-24.45787621 122.72685242]
[-39.27787781 125.09758759]
[-54.24180222 126.25245667]
[-69.25006866 126.18376923]
[-84.20279694 124.89199066]
[-99.00048065 122.38571930]
[-113.54463959 118.68162537]
[-127.73847961 113.80436707]
[-141.48754883 107.78639221]
[-154.70034790 100.66777039]
[-167.28892517 92.49584961]
[-179.16954041 83.32503510]
[-190.26310730 73.21634674]
[-200.49580383 62.23705673]
[-209.79953003 50.46023560]
[-218.11236572 37.96425629]
[-225.37899780 24.83227921]
[-231.55107117 11.15169525]
[-236.58749390 -2.98645186]
[-240.45475769 -17.48807335]
[-243.12713623 -32.25666046]
[-244.58683777 -47.19393158]
[-244.82414246 -62.20048141]
[-243.83747864 -77.17643738]
[-241.63340759 -92.02214050]
[-238.22660828 -106.63879395]
[-233.63973999 -120.92911530]
[-227.90332031 -134.79801941]
[-221.05554199 -148.15319824]
[-213.14196777 -160.90576172]
[-204.21527100 -172.97087097]
[-194.33485413 -184.26821899]
[-183.56646729 -194.72262573]
[-171.98176575 -204.26451111]
[-159.65786743 -212.83038330]
[-146.67675781 -220.36323547]
[-133.12484741 -226.81292725]
[-119.09232330 -232.13655090]
[-104.67255402 -236.29866028]
[-89.96151733 -239.27157593]
[-75.05711365 -241.03550720]
[-60.05852127 -241.57870483]
[-45.06556320 -240.89755249]
[-30.17801094 -238.99661255]
[-15.49494267 -235.88850403]
[-1.11407423 -231.59391785]
[12.86889267 -226.14144897]
[26.36090088 -219.56736755]
[39.27216339 -211.91543579]
[51.51675415 -203.23657227]
[63.01318741 -193.58851624]
[73.68495941 -183.03550720]
[83.46104431 -171.64775085]
[92.27638245 -159.50103760]
[100.07231140 -146.67620850]
[106.79695129 -133.25860596]
[112.40554810 -119.33753204]
[116.86077881 -105.00561523]
[120.13298798 -90.35824585]
[122.20040894 -75.49290466]
[123.04927826 -60.50850296]
[122.67394257 -45.50477219]
[121.07690430 -30.58155823]
[118.26879120 -15.83817768]
[114.26828766 -1.37274301]
[109.10202789 12.71847820]
[102.80437469 26.34170914]
[95.41725922 39.40628815]
[86.98982239 51.82527542]
[77.57816315 63.51601410]
[88.45698547 73.84322357]
[99.33581543 84.17042542]
[113.97931671 87.42124939]
[128.20610046 82.66743469]
[142.43287659 77.91362000]
[156.65965271 73.15980530]
[163.86322021 67.43613434]
[171.23211670 68.45842743]
[185.55470276 64.00160980]
[199.87730408 59.54479218]
[213.20465088 49.06536865]
[226.96391296 58.97087479]
[221.25445557 74.93453979]
[204.33412170 73.86739349]
[190.01152039 78.32420349]
[175.68893433 82.78102112]
[161.41346741 87.38658905]
[147.18669128 92.14040375]
[132.95991516 96.89421844]
[118.73313141 101.64803314]
[118.73313904 116.64869690]
[118.73313141 131.64802551]
[132.95991516 136.40184021]
[147.18669128 141.15565491]
[161.41346741 145.90946960]
[178.35234070 145.19456482]
[183.72845459 161.27354431]
[169.76609802 170.89067078]
[156.65965271 160.13626099]
[142.43287659 155.38244629]
[128.20610046 150.62863159]
[113.97931671 145.87481689]
[102.78354645 155.85752869]
[105.88187408 170.53405762]
[108.98019409 185.21058655]
[112.07851410 199.88711548]
[118.81089783 186.48281860]
[131.26730347 178.12591553]
[146.22343445 176.97955322]
[159.80793762 183.34046936]
[168.50451660 195.56216431]
[170.06207275 210.48107910]
[164.07743835 224.23550415]
[152.09973145 233.26515198]
[137.22932434 235.23271179]
[123.31540680 229.62890625]
[113.95957184 217.90434265]
[113.95957184 232.90434265]
[113.95957184 247.90434265]
[113.95957184 262.90435791]
[113.95957184 277.90435791]
[113.95957184 292.90435791]
[113.95957184 307.90435791]
[113.95957184 322.90435791]
[113.95957184 337.90435791]
[113.95957184 352.90435791]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 130]
[12 129]
[13 128]
[14 127]
[16 96]
[17 95]
[18 94]
[97 114]
[98 113]
[99 112]
[100 111]
[102 110]
[103 109]
[104 108]
[116 126]
[117 125]
[118 124]
[119 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
