%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUUCUGACUCUUACCUCCCUCUCUCCUACUCCUGCUCGCAUCUGCUAUAGUGGAGGCCGGxxxxxxxxxxACCCCAGUCUCAGCCCUACUCCACUCAAGCACUAUAGUUGUAGCAGGAAUCUUCUUACUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[37.32096100 514.48370361]
[37.32096100 499.48370361]
[37.32096100 484.48370361]
[37.32096100 469.48370361]
[37.32096100 454.48370361]
[37.32096100 439.48370361]
[37.32096100 424.48370361]
[37.32096100 409.48370361]
[37.32096100 394.48370361]
[37.32096100 379.48370361]
[22.77856827 375.93304443]
[9.50061321 369.00079346]
[-1.73906386 359.08609009]
[-10.28424644 346.76196289]
[-15.63464642 332.74237061]
[-17.47519684 317.84066772]
[-15.69460011 302.92254639]
[-10.39204884 288.85568237]
[-1.87170815 276.45932007]
[9.37472439 266.45648193]
[22.69639587 259.43185425]
[37.32096100 255.79760742]
[29.36135101 268.51156616]
[17.76260567 278.02310181]
[3.73609090 283.33880615]
[-11.25327396 283.90356445]
[-25.64000893 279.65832520]
[-37.92156982 271.04653931]
[-46.81528091 258.96752930]
[-51.39228439 244.68289185]
[-51.17456436 229.68447876]
[-46.18485641 215.53871155]
[-36.94428635 203.72296143]
[-24.41793060 195.47126770]
[-9.91403484 191.64543152]
[5.05262184 192.64501953]
[18.91893196 198.36563110]
[30.23670578 208.20982361]
[37.82392120 221.14945984]
[40.88830566 235.83615112]
[46.08372116 221.76461792]
[51.27913666 207.69309998]
[56.47455215 193.62158203]
[61.66996765 179.55006409]
[66.86538696 165.47854614]
[72.06079865 151.40702820]
[67.28030396 140.25112915]
[71.54392242 128.45957947]
[83.06871033 122.57458496]
[88.55574036 108.61418915]
[86.66880798 94.76026917]
[97.48387146 85.89877319]
[102.23768616 71.67199707]
[106.24542236 57.21730804]
[110.25316620 42.76262283]
[114.26091003 28.30793190]
[106.73699188 14.66870689]
[111.00732422 0.06668876]
[124.05661011 -7.02215862]
[128.06434631 -21.47684669]
[132.07208252 -35.93153381]
[136.07983398 -50.38622284]
[140.08757019 -64.84091187]
[144.09530640 -79.29560089]
[147.49829102 -93.90449524]
[150.29061890 -108.64229584]
[153.08293152 -123.38010406]
[139.31959534 -129.51747131]
[127.34299469 -138.66392517]
[117.79901123 -150.32621765]
[111.20233154 -163.87541199]
[107.90871429 -178.58081055]
[108.09578705 -193.64938354]
[111.75344849 -208.26847839]
[118.68444824 -221.64973450]
[128.51501465 -233.07150269]
[140.71499634 -241.91781616]
[154.62644958 -247.71162415]
[169.49916077 -250.14044189]
[184.53105164 -249.07331848]
[198.91148376 -244.56777954]
[211.86494446 -236.86682129]
[222.69284058 -226.38574219]
[230.81127930 -213.68975830]
[235.78239441 -199.46356201]
[237.33815002 -184.47434998]
[235.39460754 -169.53048706]
[230.05659485 -155.43785095]
[221.61198425 -142.95645142]
[210.51618958 -132.75939941]
[197.36756897 -125.39659882]
[182.87524414 -121.26512146]
[167.82073975 -120.58778381]
[165.02841187 -105.84997559]
[162.23609924 -91.11216736]
[163.76554871 -88.68975067]
[164.39549255 -85.49645233]
[163.82003784 -81.88387299]
[161.87066650 -78.31021118]
[158.55000305 -75.28785706]
[154.54225159 -60.83317184]
[150.53451538 -46.37848282]
[146.52677917 -31.92379570]
[142.51904297 -17.46910667]
[138.51129150 -3.01441836]
[146.04716492 9.78191757]
[142.18865967 24.49811935]
[128.71559143 32.31567383]
[124.70785522 46.77036285]
[120.70011139 61.22504807]
[116.69237518 75.67974091]
[130.95358276 71.03021240]
[143.59645081 79.10223389]
[145.38009644 93.99581146]
[135.00079346 104.82494354]
[120.04498291 103.67440796]
[111.44425964 91.38581085]
[113.33119202 105.23973083]
[102.51612854 114.10122681]
[97.02909851 128.06161499]
[100.20852661 146.16882324]
[86.13231659 156.60244751]
[80.93690491 170.67396545]
[75.74148560 184.74548340]
[70.54607391 198.81700134]
[65.35065460 212.88851929]
[60.15523911 226.96003723]
[54.95982361 241.03155518]
[52.32096100 255.79760742]
[66.94552612 259.43185425]
[80.26719666 266.45648193]
[91.51363373 276.45932007]
[100.03397369 288.85568237]
[105.33652496 302.92254639]
[107.11711884 317.84066772]
[105.27656555 332.74237061]
[99.92617035 346.76196289]
[91.38098907 359.08609009]
[80.14131165 369.00079346]
[66.86335754 375.93304443]
[52.32096100 379.48370361]
[52.32096100 394.48370361]
[52.32096100 409.48370361]
[52.32096100 424.48370361]
[52.32096100 439.48370361]
[52.32096100 454.48370361]
[52.32096100 469.48370361]
[52.32096100 484.48370361]
[52.32096100 499.48370361]
[52.32096100 514.48370361]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[22 129]
[40 128]
[41 127]
[42 126]
[43 125]
[44 124]
[45 123]
[46 122]
[49 120]
[50 119]
[52 117]
[53 111]
[54 110]
[55 109]
[56 108]
[59 105]
[60 104]
[61 103]
[62 102]
[63 101]
[64 100]
[65 95]
[66 94]
[67 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
