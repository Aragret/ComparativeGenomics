%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACAAAAAACAAUAGCCUCAUCAUCCCCACCAUCAUAGCCACCAUCACCCUCCUUAACCUCxxxxxxxxxxAACUAGGCGGCUAUGGUAUAAUACGCCUCACACUCAUUCUCAACCCCCUGACAAAACACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[86.50604248 377.07745361]
[86.50604248 362.07745361]
[86.50604248 347.07745361]
[86.50604248 332.07745361]
[86.50604248 317.07745361]
[86.50604248 302.07745361]
[86.50604248 287.07745361]
[86.50604248 272.07745361]
[86.50604248 257.07745361]
[86.50604248 242.07745361]
[70.96947479 237.32379150]
[57.63209152 228.01254272]
[47.79275513 215.03654480]
[42.41393661 199.64622498]
[42.02758789 183.32907104]
[46.68255234 167.66586304]
[55.93871689 154.17753601]
[68.90861511 144.17752075]
[84.34249115 138.64378357]
[83.71851349 123.65676880]
[86.01551056 96.08176422]
[75.80203247 85.09609985]
[65.58855438 74.11043549]
[55.37507629 63.12477112]
[45.16159439 52.13910675]
[34.94811630 41.15343857]
[37.95920944 55.84811020]
[36.78798294 70.80231476]
[31.52583313 84.84901428]
[22.58342743 96.89199066]
[10.65863705 105.99140930]
[-3.31791782 111.43713379]
[-18.25549507 112.80417633]
[-32.98834991 109.98585510]
[-46.36672211 103.20211792]
[-57.34655380 92.98236084]
[-65.07096100 80.12415314]
[-68.93713379 65.63095856]
[-68.64334869 50.63383865]
[-64.21252441 36.30317688]
[-55.99046326 23.75735283]
[-44.61881256 13.97545433]
[-30.98502350 7.72086954]
[-16.15309334 5.48171043]
[-1.28051615 7.43272352]
[12.47203922 13.42164898]
[24.03313637 22.98310852]
[19.13158607 8.80655098]
[14.23003483 -5.37000751]
[-0.59394950 -2.86015773]
[-15.62886238 -2.82463908]
[-30.46454048 -5.26442051]
[-44.69625473 -10.11294365]
[-57.93575287 -17.23793602]
[-69.82185364 -26.44502258]
[-80.03029633 -37.48302841]
[-88.28258514 -50.05083084]
[-94.35359192 -63.80556488]
[-98.07769012 -78.37199402]
[-99.35329437 -93.35273743]
[-98.14559937 -108.33911133]
[-94.48755646 -122.92227173]
[-88.47895050 -136.70437622]
[-80.28370667 -149.30944824]
[-70.12538910 -160.39361572]
[-58.28113937 -169.65447998]
[-45.07406998 -176.83940125]
[-30.86447525 -181.75236511]
[-16.04000664 -184.25936890]
[-1.00508833 -184.29199219]
[13.83011913 -181.84934998]
[28.06089783 -176.99807739]
[41.29902649 -169.87054443]
[53.18335342 -160.66116333]
[63.38966751 -149.62118530]
[71.63953400 -137.05180359]
[77.70789337 -123.29589081]
[81.42918396 -108.72874451]
[82.70190430 -93.74775696]
[81.49131775 -78.76161957]
[77.83046722 -64.17916107]
[71.81920624 -50.39821243]
[63.62153244 -37.79471970]
[53.46108246 -26.71251678]
[41.61504745 -17.45393562]
[28.40659332 -10.27155781]
[33.30814362 3.90499997]
[38.20969391 18.08155823]
[45.93378067 30.93996048]
[56.14725876 41.92562485]
[66.36074066 52.91128922]
[76.57421875 63.89695358]
[86.78769684 74.88262177]
[97.00118256 85.86828613]
[111.12598419 90.91703796]
[125.98902893 88.89470673]
[140.85208130 86.87236786]
[142.31118774 71.87344360]
[147.19052124 57.61550903]
[155.22695923 44.86746979]
[165.98707581 34.31681824]
[178.89064026 26.53253174]
[193.24172974 21.93441200]
[208.26643372 20.77042770]
[223.15449524 23.10335159]
[237.10299683 28.80737114]
[249.35974121 37.57487869]
[259.26370239 48.93304825]
[266.28082275 62.26935196]
[270.03262329 76.86457825]
[270.31680298 91.93163300]
[267.11801147 106.65795135]
[260.60882568 120.24937439]
[251.14018250 131.97293091]
[239.22277832 141.19639587]
[225.49928284 147.42233276]
[210.70977783 150.31500244]
[195.65187073 149.71841431]
[181.13758850 145.66471863]
[167.94967651 138.37254333]
[156.79934692 128.23515320]
[148.28791809 115.79922485]
[142.87440491 101.73542023]
[128.01136780 103.75775146]
[113.14831543 105.78009033]
[125.54721832 114.22207642]
[123.44991302 129.07472229]
[109.19825745 133.75344849]
[98.70552826 123.03279114]
[99.32950592 138.01980591]
[112.77464294 141.25765991]
[124.90253448 147.87699890]
[134.88050842 157.41575623]
[142.02548218 169.21170044]
[145.85067749 182.44837952]
[146.09890747 196.21163940]
[142.75967407 209.55279541]
[136.06962585 221.55397034]
[126.49565887 231.39126587]
[114.70239258 238.39134216]
[101.50604248 242.07745361]
[101.50604248 257.07745361]
[101.50604248 272.07745361]
[101.50604248 287.07745361]
[101.50604248 302.07745361]
[101.50604248 317.07745361]
[101.50604248 332.07745361]
[101.50604248 347.07745361]
[101.50604248 362.07745361]
[101.50604248 377.07745361]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[19 130]
[20 129]
[21 94]
[22 93]
[23 92]
[24 91]
[25 90]
[26 89]
[47 88]
[48 87]
[49 86]
[95 125]
[96 124]
[97 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
