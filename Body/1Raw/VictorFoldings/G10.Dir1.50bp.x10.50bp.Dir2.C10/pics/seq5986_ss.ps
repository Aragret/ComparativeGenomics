%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUCAAAGCCCUCAGUAAGUUGCAAUACUUAAUUUCUGUAACAGCUAAGGACUGCAAAACCxxxxxxxxxxCAACAAACAAUGUUCAACCAGUAACUACUACUAAUCAACGCCCAUAAUCAUACAAAGCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[145.71218872 278.74060059]
[145.71218872 263.74060059]
[145.71218872 248.74061584]
[145.71218872 233.74061584]
[145.71218872 218.74061584]
[145.71218872 203.74061584]
[145.71218872 188.74061584]
[145.71218872 173.74061584]
[145.71218872 158.74061584]
[145.71218872 143.74061584]
[141.70445251 129.28591919]
[133.98036194 116.42752075]
[118.15192413 130.46427917]
[98.48184967 133.14665222]
[81.82266235 124.98866272]
[73.20243835 110.04923248]
[58.26812744 111.45153809]
[43.33382034 112.85383606]
[34.61632156 128.69108582]
[18.30066681 136.10604858]
[0.94258690 132.32482910]
[-10.60543919 119.03156281]
[-25.46848679 121.05389404]
[-40.33153152 123.07623291]
[-55.09758759 125.71509552]
[-69.74108887 128.96592712]
[-84.38459015 132.21675110]
[-99.02809143 135.46757507]
[-113.67159271 138.71839905]
[-121.94689178 152.18298340]
[-137.33848572 155.77104187]
[-150.71482849 147.35385132]
[-154.13996887 131.92517090]
[-145.58181763 118.63858032]
[-130.11779785 115.37675476]
[-116.92241669 124.07489777]
[-102.27891541 120.82407379]
[-87.63541412 117.57324219]
[-72.99191284 114.32241821]
[-58.34841537 111.07159424]
[-56.72625351 108.71025085]
[-54.04078674 106.87116241]
[-50.49434662 105.97415161]
[-46.44143295 106.35488129]
[-42.35386658 108.21318054]
[-27.49081993 106.19084930]
[-12.62777328 104.16851807]
[-8.49693108 92.67604828]
[0.19749482 83.99724579]
[11.83376217 79.83830261]
[24.20374298 81.05413055]
[34.93190765 87.47338867]
[41.93151855 97.91953278]
[56.86582565 96.51722717]
[71.80013275 95.11492157]
[78.82610321 76.46114349]
[97.71680450 65.37328339]
[121.33837891 68.86798859]
[123.20599365 53.98470688]
[115.90625763 43.29977798]
[117.80939484 30.90635109]
[127.34804535 23.40158463]
[129.52488708 8.56037903]
[119.86870575 20.03898239]
[107.18441010 28.04576302]
[92.66842651 31.82548141]
[77.68997955 31.02161980]
[63.66191483 25.70999718]
[51.90742111 16.39163589]
[43.53524017 3.94548798]
[39.33507919 -10.45446587]
[39.70312119 -25.44994926]
[44.60464478 -39.62651825]
[53.57731628 -51.64696503]
[65.77478790 -60.37746429]
[80.04653931 -64.99451447]
[95.04638672 -65.06260681]
[109.35946655 -60.57532883]
[121.63570404 -51.95593262]
[130.71714783 -40.01744461]
[135.74717712 -25.88596344]
[136.25132751 -10.89425278]
[143.70623779 -23.91056252]
[151.16114807 -36.92687225]
[158.61605835 -49.94318008]
[155.81460571 -65.73974609]
[166.52587891 -77.68328857]
[182.53311157 -76.61174011]
[191.55691528 -63.34710693]
[186.67500305 -48.06488037]
[171.63237000 -42.48826981]
[164.17745972 -29.47196198]
[156.72254944 -16.45565224]
[149.26763916 -3.43934202]
[144.36608887 10.73721600]
[142.18925476 25.57842064]
[149.55085754 41.47831726]
[138.08927917 55.85232162]
[136.22166443 70.73560333]
[147.72346497 80.36412811]
[162.04606628 75.90731049]
[176.36865234 71.45049286]
[190.69125366 66.99368286]
[199.39540100 53.51712418]
[215.37243652 52.06323624]
[226.36614990 63.74731064]
[223.94311523 79.60633087]
[209.96206665 87.47460938]
[195.14807129 81.31627655]
[180.82546997 85.77309418]
[166.50288391 90.22991180]
[152.18028259 94.68672180]
[146.83876038 108.70343781]
[154.56285095 121.56183624]
[154.69769287 106.56244659]
[158.10501099 91.95456696]
[164.62030029 78.44342804]
[173.92904663 66.68131256]
[185.58183289 57.23606110]
[199.01608276 50.56367493]
[213.58323669 46.98626709]
[228.58004761 46.67655563]
[243.28248596 49.64948273]
[256.98077393 55.76153183]
[269.01358032 64.71762848]
[278.79998779 76.08538818]
[285.86755371 89.31601715]
[289.87506104 103.77076721]
[290.62905884 118.75180054]
[288.09313965 133.53588867]
[282.38970947 147.40927124]
[273.79412842 159.70219421]
[262.72137451 169.82118225]
[249.70599365 177.27772522]
[235.37634277 181.71183777]
[220.42424011 182.90945435]
[205.57150269 180.81274414]
[191.53518677 175.52294922]
[178.99293518 167.29542542]
[168.55026245 156.52740479]
[160.71218872 143.74061584]
[160.71218872 158.74061584]
[160.71218872 173.74061584]
[160.71218872 188.74061584]
[160.71218872 203.74061584]
[160.71218872 218.74061584]
[160.71218872 233.74061584]
[160.71218872 248.74061584]
[160.71218872 263.74060059]
[160.71218872 278.74060059]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 114]
[12 113]
[16 55]
[17 54]
[18 53]
[22 47]
[23 46]
[24 45]
[25 40]
[26 39]
[27 38]
[28 37]
[29 36]
[58 99]
[59 98]
[62 96]
[63 95]
[82 94]
[83 93]
[84 92]
[85 91]
[100 112]
[101 111]
[102 110]
[103 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
