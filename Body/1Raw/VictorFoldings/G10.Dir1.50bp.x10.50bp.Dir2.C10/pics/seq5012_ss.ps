%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAUAGCCCCCUUUCACUUCUGAGUCCCAGAGGUUACCCAAGGCACCCCUCUGACAUCCGGxxxxxxxxxxACCCAAGGCACCCCUCUGACAUCCGGCCUGCUUCUUCUCACAUGACAAAAACUAGCCCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.01500702 539.72052002]
[95.01500702 524.72052002]
[95.01500702 509.72052002]
[95.01500702 494.72052002]
[95.01500702 479.72052002]
[95.01500702 464.72052002]
[95.01500702 449.72052002]
[95.01500702 434.72052002]
[95.01500702 419.72052002]
[95.01500702 404.72052002]
[80.55015564 400.88418579]
[67.56129456 393.42855835]
[56.93682480 382.85665894]
[49.40521622 369.88488770]
[45.48506927 355.39443970]
[45.44940186 340.37152100]
[49.30665207 325.84020996]
[56.79969406 312.79257202]
[67.42295074 302.12100220]
[80.45654297 294.55718994]
[95.01500702 290.62194824]
[95.01500702 275.62194824]
[95.01500702 260.62194824]
[80.30773163 254.80123901]
[68.92338562 243.76496887]
[62.61841202 229.17486572]
[62.38127136 213.24404907]
[68.27757263 198.40129089]
[79.43556976 186.92076111]
[94.17497253 180.57359314]
[93.86291504 165.57684326]
[93.55085754 150.58009338]
[93.23880005 135.58334351]
[79.44073486 129.81953430]
[69.14694977 118.97306061]
[64.11198425 104.89267731]
[65.19404602 89.97834778]
[51.95146179 82.93321228]
[38.70887756 75.88807678]
[25.46629143 68.84294128]
[12.22370625 61.79780579]
[-1.01887965 54.75267029]
[-12.72824669 64.44592285]
[-27.25720978 68.91556549]
[-42.39020538 67.48000336]
[-55.81956482 60.35815430]
[-65.49740601 48.63604355]
[-69.94792938 34.10121536]
[-68.49246216 18.97011948]
[-61.35295486 5.55014038]
[-49.61812592 -4.11227322]
[-35.07745361 -8.54367352]
[-19.94828796 -7.06830359]
[-6.53771114 0.08885327]
[3.10925722 11.83638191]
[7.52152586 26.38287163]
[6.02625513 41.51008606]
[19.26884079 48.55522156]
[32.51142502 55.60035324]
[45.75401306 62.64548874]
[58.99659729 69.69062805]
[72.23918152 76.73575592]
[89.23828125 65.41571045]
[109.65904236 65.09168243]
[116.56604767 51.77652740]
[115.28403473 33.43705368]
[130.36755371 24.52149200]
[136.99606323 11.06552601]
[143.62455750 -2.39043951]
[150.25305176 -15.84640503]
[136.67907715 -9.46304512]
[121.72107697 -10.58468437]
[109.25087738 -18.92098999]
[102.49634552 -32.31413651]
[103.20587921 -47.29734421]
[111.19582367 -59.99225998]
[124.39799500 -67.11283875]
[139.39505005 -66.81594849]
[152.30505371 -59.17842865]
[159.78630066 -46.17723465]
[159.90229797 -31.17778587]
[157.48315430 -48.47186279]
[168.08596802 -61.92044830]
[184.79640198 -63.53882980]
[193.81393433 -75.52566528]
[202.70628357 -87.60565186]
[211.47248840 -99.77748871]
[220.23870850 -111.94932556]
[221.34574890 -128.31106567]
[236.18611145 -135.28929138]
[249.49330139 -125.70539856]
[247.57801819 -109.41847992]
[232.41053772 -103.18312073]
[223.64433289 -91.01128387]
[214.87812805 -78.83944702]
[213.51235962 -71.52642059]
[205.80076599 -66.50813293]
[196.78324890 -54.52130127]
[200.35597229 -42.10226822]
[196.04006958 -29.71488190]
[185.20646667 -21.97787857]
[171.69894409 -21.91283607]
[163.70901489 -9.21790600]
[157.08052063 4.23805904]
[150.45202637 17.69402504]
[143.82353210 31.14999008]
[147.41976929 42.74198532]
[141.95477295 54.02705765]
[129.88119507 58.68352509]
[122.97420502 71.99868011]
[130.57498169 80.58200073]
[135.11227417 91.11091614]
[136.13148499 102.53047943]
[133.53048706 113.69649506]
[127.56988525 123.49018860]
[118.84690857 130.93026733]
[108.23555756 135.27128601]
[108.54761505 150.26803589]
[108.85967255 165.26478577]
[109.17172241 180.26155090]
[122.61614227 185.06243896]
[133.58447266 194.15325928]
[140.76664734 206.42158508]
[143.31393433 220.37712097]
[140.93916321 234.33270264]
[133.94900513 246.60823059]
[123.20449066 255.73303223]
[110.01500702 260.62194824]
[110.01500702 275.62194824]
[110.01500702 290.62194824]
[124.57347870 294.55718994]
[137.60707092 302.12100220]
[148.23033142 312.79257202]
[155.72337341 325.84020996]
[159.58061218 340.37152100]
[159.54495239 355.39443970]
[155.62480164 369.88488770]
[148.09320068 382.85665894]
[137.46873474 393.42855835]
[124.47986603 400.88418579]
[110.01500702 404.72052002]
[110.01500702 419.72052002]
[110.01500702 434.72052002]
[110.01500702 449.72052002]
[110.01500702 464.72052002]
[110.01500702 479.72052002]
[110.01500702 494.72052002]
[110.01500702 509.72052002]
[110.01500702 524.72052002]
[110.01500702 539.72052002]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[21 130]
[22 129]
[23 128]
[30 120]
[31 119]
[32 118]
[33 117]
[37 62]
[38 61]
[39 60]
[40 59]
[41 58]
[42 57]
[64 110]
[65 109]
[67 106]
[68 105]
[69 104]
[70 103]
[81 102]
[84 98]
[85 97]
[86 95]
[87 94]
[88 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
