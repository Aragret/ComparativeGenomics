%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUACCGCCAUCUUCAGCAAACCCUGAUGAAGGCUACAAAGUAAGCGCAAGUACCCACGUAxxxxxxxxxxCUAAUUCCCCCCAUCCUUACCACCCUCGUUAACCCUAACAAAAAAAACUCAUACCCCCAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[346.77545166 166.97183228]
[333.25125122 160.48367310]
[319.72708130 153.99551392]
[304.90527344 155.46644592]
[295.80960083 142.52120972]
[282.28540039 136.03305054]
[268.76123047 129.54487610]
[255.23703003 123.05671692]
[241.71282959 116.56855011]
[228.18864441 110.08038330]
[214.66445923 103.59222412]
[199.98793030 100.49389648]
[184.99523926 100.96194458]
[170.00253296 101.42998505]
[155.03175354 102.36561584]
[140.09744263 103.76791382]
[125.16313171 105.17021942]
[119.82621765 119.31269836]
[106.73120117 128.89303589]
[89.42102814 129.83573914]
[73.42963409 120.63935852]
[59.01742172 124.79724121]
[44.60520554 128.95513916]
[30.19298744 133.11302185]
[15.78077221 137.27090454]
[4.66608906 148.53031921]
[-9.70717812 144.62411499]
[-24.11939430 148.78199768]
[-33.10201263 162.07456970]
[-49.10583878 163.19575500]
[-59.85411072 151.28549194]
[-57.10166931 135.48031616]
[-42.95995712 127.90460205]
[-28.27728271 134.36978149]
[-13.86506557 130.21189880]
[-3.78124142 119.24988556]
[11.62288475 122.85868835]
[26.03510094 118.70080566]
[40.44731522 114.54291534]
[54.85953140 110.38502502]
[69.27175140 106.22714233]
[69.89572906 91.24012756]
[55.87901306 85.89861298]
[41.86230087 80.55709839]
[25.76608467 83.69459534]
[15.20640659 71.14767456]
[21.04615593 55.82353210]
[37.27790070 53.48633194]
[47.20381165 66.54039001]
[61.22052765 71.88189697]
[75.23723602 77.22341156]
[95.12956238 69.39233398]
[113.87363434 75.28721619]
[123.76082611 90.23590851]
[138.69512939 88.83361053]
[153.62944031 87.43130493]
[157.98704529 84.32794189]
[162.63420105 83.35001373]
[166.69673157 84.24308014]
[169.53450012 86.43728638]
[184.52719116 85.96924591]
[199.51988220 85.50120544]
[186.45555115 78.13078308]
[175.58572388 67.79411316]
[167.56809998 55.11665726]
[162.88784790 40.86551285]
[161.82814026 25.90299225]
[164.45309448 11.13445950]
[170.60391235 -2.54646206]
[179.90837097 -14.31195736]
[191.80349731 -23.45011330]
[205.56953430 -29.40799141]
[220.37350464 -31.82509041]
[235.31965637 -30.55515099]
[249.50360107 -25.67502022]
[262.06710815 -17.47998619]
[272.24993896 -6.46591902]
[279.43597412 6.70073509]
[283.19039917 21.22327995]
[283.28604126 36.22297668]
[279.71710205 50.79220963]
[272.69952393 64.04941559]
[262.65792847 75.19242859]
[250.19995117 83.54698944]
[236.07937622 88.60757446]
[221.15261841 90.06803131]
[234.67681885 96.55619812]
[248.20100403 103.04436493]
[261.72518921 109.53252411]
[275.24938965 116.02069092]
[288.77355957 122.50885773]
[302.29776001 128.99702454]
[318.08688354 127.99015808]
[326.21524048 140.47131348]
[339.73944092 146.95948792]
[353.26361084 153.44764709]
[365.74993896 136.32507324]
[381.56756592 122.22964478]
[400.00131226 111.79585266]
[420.21829224 105.49271393]
[441.30551147 103.60264587]
[462.31121826 106.20884705]
[482.28775024 113.19159698]
[500.33432007 124.23381042]
[515.63763428 138.83537292]
[527.50860596 156.33586121]
[535.41326904 175.94432068]
[538.99682617 196.77511597]
[553.99597168 196.93115234]
[568.99517822 197.08718872]
[583.99438477 197.24322510]
[598.00750732 188.72482300]
[612.25933838 196.83764648]
[612.08874512 213.23590088]
[597.67126465 221.05047607]
[583.83831787 212.24240112]
[568.83911133 212.08636475]
[553.83996582 211.93032837]
[538.84075928 211.77429199]
[537.43029785 222.00744629]
[534.96618652 232.04006958]
[531.47479248 241.76394653]
[526.99365234 251.07421875]
[521.57080078 259.87042236]
[515.26464844 268.05764771]
[508.14291382 275.54751587]
[500.28231812 282.25918579]
[491.76745605 288.12011719]
[482.69000244 293.06704712]
[473.14773560 297.04641724]
[463.24343872 300.01522827]
[453.08383179 301.94125366]
[442.77841187 302.80352783]
[432.43823242 302.59265137]
[422.17474365 301.31063843]
[412.09866333 298.97116089]
[402.31863403 295.59924316]
[392.94009399 291.23107910]
[384.06430054 285.91360474]
[375.78695679 279.70391846]
[368.19744873 272.66888428]
[361.37771606 264.88415527]
[355.40136719 256.43356323]
[350.33300781 247.40806580]
[346.22744751 237.90487671]
[343.12908936 228.02638245]
[341.07153320 217.87901306]
[340.07711792 207.57209778]
[340.15673828 197.21675110]
[341.30975342 186.92457581]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 96]
[2 95]
[3 94]
[5 92]
[6 91]
[7 90]
[8 89]
[9 88]
[10 87]
[11 86]
[12 62]
[13 61]
[14 60]
[15 56]
[16 55]
[17 54]
[21 41]
[22 40]
[23 39]
[24 38]
[25 37]
[27 35]
[28 34]
[42 51]
[43 50]
[44 49]
[108 119]
[109 118]
[110 117]
[111 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
