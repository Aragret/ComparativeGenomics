%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUCCCCAUACCCAACCCCCUGGUCAACCUCAACCUAGGCCUCCUAUUUAUUCUAGCCACCxxxxxxxxxxAACAACGUAAAAAUAAAAUGACAGUUUGAACAUACAAAACCCACCCCAUUCCUCCCCACACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[106.80733490 143.08020020]
[97.89118195 155.14262390]
[88.97502899 167.20506287]
[80.05888367 179.26748657]
[71.14273071 191.32992554]
[63.24624634 204.08317566]
[56.42267227 217.44128418]
[49.59909821 230.79937744]
[42.77552032 244.15748596]
[44.15688705 260.49835205]
[30.54325104 269.64169312]
[15.93915462 262.18164062]
[15.36804104 245.79244995]
[29.41742134 237.33390808]
[36.24099731 223.97579956]
[43.06457138 210.61770630]
[49.88814926 197.25961304]
[35.77614594 202.34403992]
[21.32738876 198.31495667]
[11.88273430 186.66169739]
[10.93331623 171.69177246]
[18.83007812 158.93869019]
[32.65405273 153.11651611]
[47.29532623 156.37736511]
[57.34188080 167.51588440]
[59.08029938 182.41377258]
[67.99645233 170.35134888]
[76.91259766 158.28890991]
[85.82875061 146.22648621]
[94.74490356 134.16404724]
[91.40186310 127.45032501]
[81.37274933 107.30915070]
[66.37354279 107.15515137]
[51.37433243 107.00115204]
[42.23369980 119.54022980]
[27.45817184 124.27978516]
[12.72923660 119.39735413]
[3.71047282 106.77033997]
[3.86977816 91.25408173]
[13.14589691 78.81490326]
[27.97197151 74.23591614]
[42.64707565 79.27783966]
[51.52832794 92.00194550]
[66.52754211 92.15594482]
[81.52674866 92.30993652]
[84.52089691 85.43352509]
[90.50919342 71.68069458]
[93.50334167 64.80428314]
[83.17243958 53.92896652]
[72.84153748 43.05365372]
[58.81543350 48.85304260]
[43.64141464 49.19008636]
[29.37164307 44.01920700]
[17.93598366 34.03972244]
[10.88101768 20.60127258]
[9.16087246 5.52130127]
[13.00818253 -9.16075039]
[21.90262985 -21.45925522]
[34.64131546 -29.71094322]
[49.50143433 -32.79983902]
[64.47328186 -30.30819511]
[77.53202820 -22.57298660]
[86.91159821 -10.64033794]
[91.34347534 3.87595987]
[90.22828674 19.01269531]
[83.71685028 32.72275162]
[94.04775238 43.59806442]
[104.37865448 54.47338104]
[100.52633667 39.97649384]
[96.67401886 25.47961044]
[92.82170868 10.98272610]
[83.24601746 -0.56310439]
[75.75126648 -13.55651569]
[70.55149841 -27.62642670]
[67.79521179 -42.37101364]
[67.56112671 -57.36919022]
[69.85592651 -72.19261169]
[74.61406708 -86.41794586]
[81.69966888 -99.63892365]
[90.91036987 -111.47796631]
[101.98312378 -121.59696198]
[114.60170746 -129.70692444]
[128.40573120 -135.57623291]
[143.00097656 -139.03727722]
[157.97061157 -139.99121094]
[172.88711548 -138.41078186]
[187.32450867 -134.34112549]
[200.87043762 -127.89848328]
[213.13806152 -119.26683807]
[223.77702332 -108.69269562]
[232.48348999 -96.47805786]
[239.00881958 -82.97175598]
[243.16664124 -68.55952454]
[244.83821106 -53.65295029]
[243.97579956 -38.67776489]
[240.60401917 -24.06163597]
[234.81918335 -10.22199440]
[226.78649902 2.44591713]
[216.73536682 13.58031368]
[204.95285034 22.86320686]
[191.77542114 30.02948380]
[177.57943726 34.87448502]
[162.77375793 37.25958252]
[150.32971191 45.63488770]
[137.88566589 54.01018906]
[125.44161987 62.38549042]
[140.37763977 61.00146484]
[155.31364441 59.61743927]
[170.24966431 58.23341370]
[180.15208435 45.91605377]
[195.87266541 44.29151917]
[208.08464050 54.32361984]
[209.54287720 70.06049347]
[199.38221741 82.16572571]
[183.63081360 83.45749664]
[171.63368225 73.16942596]
[156.69767761 74.55345154]
[141.76165771 75.93747711]
[126.82564545 77.32150269]
[140.59677124 83.26761627]
[154.36788940 89.21372223]
[168.13900757 95.15983582]
[181.91012573 101.10594177]
[196.89686584 101.73670197]
[211.55934143 104.90080261]
[225.47250366 110.50651550]
[238.23298645 118.39132690]
[249.47084045 128.32664490]
[258.86029053 140.02444458]
[266.12908936 153.14558411]
[271.06655884 167.30967712]
[273.52954102 182.10607910]
[273.44659424 197.10585022]
[270.82015991 211.87413025]
[265.72637939 225.98275757]
[258.31292725 239.02272034]
[248.79472351 250.61596680]
[237.44769287 260.42642212]
[224.60079956 268.16964722]
[210.62651062 273.62118530]
[195.92994690 276.62295532]
[180.93714905 277.08798218]
[166.08279419 275.00271606]
[151.79753113 270.42767334]
[138.49548340 263.49545288]
[126.56230164 254.40705872]
[116.34393311 243.42593384]
[108.13661957 230.87045288]
[102.17830658 217.10461426]
[98.64085388 202.52183533]
[100.68247223 187.66142273]
[102.72409058 172.80102539]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 30]
[2 29]
[3 28]
[4 27]
[5 26]
[6 17]
[7 16]
[8 15]
[9 14]
[32 45]
[33 44]
[34 43]
[48 68]
[49 67]
[50 66]
[106 119]
[107 118]
[108 117]
[109 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
