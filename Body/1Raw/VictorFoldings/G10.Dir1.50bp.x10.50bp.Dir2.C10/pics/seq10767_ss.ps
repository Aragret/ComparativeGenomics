%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCGCUAACAACCUAUUCCAACUGUUCAUCGGCUGAGAGGGCGUAGGAAUUAUAUCCUUCUUGxxxxxxxxxxAAACCCAUAUAACCUCCCCCAAAAUUCAGAAUAAUAACACACCCGACCACACCGCUAACAAUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 251.17173767]
[92.50000000 236.17173767]
[92.50000000 221.17173767]
[92.50000000 206.17173767]
[92.50000000 191.17173767]
[92.50000000 176.17173767]
[92.50000000 161.17173767]
[92.50000000 146.17173767]
[92.50000000 131.17173767]
[92.50000000 116.17174530]
[86.02996826 112.37850189]
[85.93000793 127.37816620]
[72.88998413 134.79151917]
[59.94977570 127.20527649]
[60.04945755 112.20561218]
[73.08989716 104.79202271]
[66.61986542 100.99878693]
[53.53059387 108.32482910]
[40.44131851 115.65087128]
[27.35204697 122.97692108]
[28.34094048 138.20796204]
[22.61543655 152.35652161]
[11.31234074 162.61335754]
[-3.32411027 166.94198608]
[-18.38783836 164.48295593]
[-30.88792992 155.72450256]
[-38.34248352 142.40562439]
[-39.27138901 127.17080688]
[-33.49021530 113.04491425]
[-22.14681435 102.83266449]
[-7.49343014 98.56170654]
[7.56049776 101.08003998]
[20.02600288 109.88764954]
[33.11527634 102.56159973]
[46.20454788 95.23555756]
[59.29381943 87.90950775]
[73.09187317 83.00167084]
[85.82585144 84.24683380]
[95.33316040 90.53279114]
[98.60823822 75.89469147]
[101.88331604 61.25659943]
[105.15839386 46.61849976]
[106.50725555 31.67927170]
[105.90711212 16.69128227]
[105.30696869 1.70329285]
[104.70682526 -13.28469658]
[89.24252319 -26.02961922]
[88.06395721 -45.73087311]
[101.48040009 -59.79009628]
[99.98213959 -74.71508026]
[98.48387909 -89.64006805]
[95.73755646 -93.16695404]
[94.42466736 -97.00216675]
[94.46219635 -100.64605713]
[95.60997772 -103.67993164]
[97.51195526 -105.81118011]
[97.21182251 -120.80817413]
[96.91168976 -135.80517578]
[87.01792145 -151.30490112]
[96.01307678 -166.34542847]
[95.41293335 -181.33341980]
[94.81278992 -196.32139587]
[94.21264648 -211.30938721]
[93.61250305 -226.29737854]
[93.01235962 -241.28536987]
[78.24084473 -244.29634094]
[64.61943817 -250.75549316]
[52.94007111 -260.28732300]
[43.88175964 -272.33764648]
[37.97114563 -286.20590210]
[35.55186081 -301.08575439]
[36.76456833 -316.11215210]
[41.53875351 -330.41146851]
[49.59685516 -343.15237427]
[60.47038651 -353.59411621]
[73.52717590 -361.12960815]
[88.00811768 -365.32077026]
[103.07130432 -365.92391968]
[117.84098816 -362.90399170]
[131.45848083 -356.43658447]
[143.13206482 -346.89767456]
[152.18307495 -334.84185791]
[158.08526611 -320.97003174]
[160.49552917 -306.08871460]
[159.27371216 -291.06304932]
[154.49085999 -276.76663208]
[146.42503357 -264.03060913]
[135.54518127 -253.59547424]
[122.48382568 -246.06790161]
[108.00035095 -241.88551331]
[108.60049438 -226.89752197]
[109.20063782 -211.90953064]
[109.80078125 -196.92155457]
[110.40092468 -181.93356323]
[111.00106812 -166.94557190]
[119.69258881 -158.48194885]
[120.28353882 -145.96273804]
[111.90868378 -136.10530090]
[112.20881653 -121.10830688]
[112.50894928 -106.11130524]
[113.40886688 -91.13832855]
[114.90712738 -76.21334076]
[116.40538025 -61.28835678]
[125.89385986 -57.12669754]
[132.83064270 -49.32169342]
[135.89701843 -39.25521088]
[134.46763611 -28.74776840]
[128.73674011 -19.72933388]
[119.69481659 -13.88484097]
[120.29496002 1.10314882]
[120.89510345 16.09113884]
[121.49524689 31.07912827]
[129.41406250 18.33972549]
[141.76837158 9.83260918]
[156.49441528 6.97888088]
[171.13221741 10.25525093]
[183.23657227 19.11440659]
[190.78546143 32.07644272]
[192.51783752 46.97606659]
[188.14434814 61.32432556]
[178.39553833 72.72435760]
[164.89996338 79.27182007]
[149.91200256 79.87295532]
[135.93540955 74.42735291]
[125.30491638 63.84468842]
[119.79649353 49.89357758]
[116.52141571 64.53167725]
[113.24633789 79.16976929]
[109.97126007 93.80786896]
[117.34612274 80.74604034]
[128.47633362 70.69027710]
[142.21726990 64.67472839]
[157.15579224 63.31803131]
[171.75559998 66.75971222]
[184.51527405 74.64582825]
[194.12258911 86.16535950]
[199.58950806 100.13363647]
[200.35382080 115.11415100]
[196.33691406 129.56629944]
[187.95191956 142.00381470]
[176.06111145 151.14759827]
[161.88739014 156.05732727]
[146.88836670 156.22805786]
[132.60653687 151.64224243]
[120.51068878 142.77148438]
[111.84474182 130.52806091]
[107.50000000 116.17174530]
[107.50000000 131.17173767]
[107.50000000 146.17173767]
[107.50000000 161.17173767]
[107.50000000 176.17173767]
[107.50000000 191.17173767]
[107.50000000 206.17173767]
[107.50000000 221.17173767]
[107.50000000 236.17173767]
[107.50000000 251.17173767]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 156]
[2 155]
[3 154]
[4 153]
[5 152]
[6 151]
[7 150]
[8 149]
[9 148]
[10 147]
[17 36]
[18 35]
[19 34]
[20 33]
[39 129]
[40 128]
[41 127]
[42 126]
[43 112]
[44 111]
[45 110]
[46 109]
[49 103]
[50 102]
[51 101]
[56 100]
[57 99]
[58 98]
[60 95]
[61 94]
[62 93]
[63 92]
[64 91]
[65 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
