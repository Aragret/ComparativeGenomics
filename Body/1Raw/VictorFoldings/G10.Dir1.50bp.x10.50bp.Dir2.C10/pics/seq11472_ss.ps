%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCCACCCCAUCCAACAUCUCCGCAUGAUGAAACUUCGGCUCACUCCUUGGCGCCUGCCUGxxxxxxxxxxAUAAAUACUUGACCACCUGUAGUACAUAAAAACCCAAUCCACAUCAAAACCCCCUCCCCAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[20.60296822 301.13128662]
[14.61467266 314.88412476]
[8.62637520 328.63693237]
[2.63807893 342.38977051]
[4.22276163 358.13140869]
[-7.95220137 366.71160889]
[-13.94049740 380.46441650]
[-19.92879486 394.21725464]
[-20.70847130 411.15325928]
[-37.19845200 415.09240723]
[-45.54853821 400.33734131]
[-33.68162155 388.22897339]
[-27.69332695 374.47613525]
[-21.70503044 360.72329712]
[-23.71803665 345.96536255]
[-11.11474991 336.40148926]
[-5.12645340 322.64865112]
[0.86184329 308.89581299]
[6.85013962 295.14297485]
[-16.75633049 282.00451660]
[-38.54024124 266.02496338]
[-58.16154480 247.45375061]
[-75.31395721 226.58081055]
[-89.72972107 203.73193359]
[-101.18381500 179.26382446]
[-109.49744415 153.55839539]
[-124.15016937 156.76739502]
[-138.80290222 159.97639465]
[-153.45562744 163.18539429]
[-160.55107117 177.12054443]
[-174.96398926 183.18701172]
[-189.88902283 178.52038574]
[-198.27902222 165.32411194]
[-196.17251587 149.82907104]
[-184.56410217 139.35153198]
[-168.93493652 138.83868408]
[-156.66461182 148.53266907]
[-142.01188660 145.32366943]
[-127.35916901 142.11466980]
[-112.70644379 138.90567017]
[-114.68804169 125.82102966]
[-115.86551666 112.63967133]
[-116.23444366 99.41096497]
[-115.79344940 86.18447113]
[-114.54418182 73.00971985]
[-112.49132538 59.93606567]
[-109.64256287 47.01247406]
[-106.00856781 34.28734970]
[-101.60295105 21.80835915]
[-96.44221497 9.62224102]
[-90.54568481 -2.22535992]
[-83.93545532 -13.69006729]
[-76.63627625 -24.72893906]
[-68.67549133 -35.30062866]
[-60.08292389 -45.36553955]
[-50.89074707 -54.88597107]
[-41.13339996 -63.82626724]
[-30.84742737 -72.15293884]
[-20.07135201 -79.83479309]
[-8.84554195 -86.84306335]
[-15.94194508 -100.05824280]
[-23.03834915 -113.27342987]
[-37.25843811 -121.44172668]
[-37.02394485 -137.83920288]
[-22.57609558 -145.59753418]
[-8.77759933 -136.73561096]
[-9.82316589 -120.36983490]
[-2.72676206 -107.15464783]
[4.36964130 -93.93946838]
[17.77075577 -99.99008179]
[31.55208397 -105.11598206]
[45.64990616 -109.29345703]
[59.99903107 -112.50318909]
[74.53311920 -114.73034668]
[89.18495178 -115.96462250]
[103.88680267 -116.20030975]
[118.57067871 -115.43633270]
[133.16868591 -113.67620850]
[147.61332703 -110.92807770]
[161.83779907 -107.20465088]
[175.77636719 -102.52314758]
[189.36454773 -96.90521240]
[202.53950500 -90.37681580]
[215.24035645 -82.96814728]
[227.40835571 -74.71346283]
[238.98722839 -65.65093231]
[249.92344666 -55.82246399]
[260.69213867 -66.26447296]
[271.46081543 -76.70648193]
[282.22949219 -87.14849091]
[284.43554688 -93.48693848]
[288.86923218 -97.16529083]
[293.66119385 -97.78681946]
[304.84948730 -107.77791595]
[307.18685913 -123.64978790]
[321.12521362 -131.59346008]
[335.97222900 -125.51522827]
[340.33859253 -110.07778931]
[330.87475586 -97.12342834]
[314.84060669 -96.58961487]
[303.65231323 -86.59851837]
[292.67150879 -76.37981415]
[281.90283203 -65.93780518]
[271.13415527 -55.49579620]
[260.36544800 -45.05378723]
[268.06103516 -36.06311798]
[275.25320435 -26.66490173]
[281.92044067 -16.88728333]
[288.04275513 -6.75955153]
[293.60183716 3.68795872]
[298.58102417 14.42395401]
[302.96539307 25.41627502]
[306.74182129 36.63199997]
[309.89898682 48.03752899]
[312.42742920 59.59870529]
[314.31961060 71.28089142]
[315.56982422 83.04910278]
[316.17434692 94.86808777]
[316.13134766 106.70244598]
[315.44097900 118.51672363]
[314.10528564 130.27554321]
[312.12829590 141.94367981]
[309.51589966 153.48617554]
[306.27593994 164.86845398]
[302.41812134 176.05645752]
[297.95401001 187.01663208]
[292.89694214 197.71615601]
[287.26211548 208.12300110]
[281.06637573 218.20597839]
[274.32824707 227.93490601]
[267.06799316 237.28060913]
[259.30731201 246.21513367]
[251.06944275 254.71168518]
[242.37907410 262.74484253]
[233.26225281 270.29049683]
[223.74624634 277.32611084]
[213.85960388 283.83056641]
[203.63189697 289.78439331]
[193.09379578 295.16973877]
[182.27684021 299.97052002]
[171.21343994 304.17230225]
[159.93673706 307.76254272]
[148.48049927 310.73043823]
[136.87905884 313.06716919]
[125.16713715 314.76568604]
[113.37984467 315.82089233]
[101.55247498 316.22967529]
[89.72045135 315.99078369]
[77.91921997 315.10491943]
[66.18412781 313.57473755]
[54.55031967 311.40484619]
[43.05265045 308.60174561]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 19]
[2 18]
[3 17]
[4 16]
[6 14]
[7 13]
[8 12]
[26 40]
[27 39]
[28 38]
[29 37]
[60 69]
[61 68]
[62 67]
[87 105]
[88 104]
[89 103]
[90 102]
[93 101]
[94 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
