%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCACACCCAAUUGGACCAAUCUAUCACCCUAUAGAAGAACUAAUGUUAGUAUAAGUAACAxxxxxxxxxxGCAUUGUUCGUUACAUGGUCCAUCAUAGAAUUCUCACUGUGAUAUAUAAACUCAGACCCAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[81.87070465 396.87353516]
[81.87070465 381.87353516]
[81.87070465 366.87353516]
[81.87070465 351.87353516]
[81.87070465 336.87353516]
[81.87070465 321.87353516]
[81.87070465 306.87353516]
[81.87070465 291.87353516]
[81.87070465 276.87353516]
[81.87070465 261.87353516]
[67.32830811 258.32287598]
[54.05035782 251.39064026]
[42.81068039 241.47592163]
[34.26549530 229.15180969]
[28.91509628 215.13221741]
[27.07454491 200.23051453]
[28.85514259 185.31239319]
[34.15769577 171.24554443]
[42.67803574 158.84916687]
[53.92446518 148.84632874]
[67.24613953 141.82170105]
[81.87070465 138.18746948]
[81.87070465 123.18746185]
[85.55680084 92.83037567]
[77.66031647 80.07711792]
[69.76383209 67.32386780]
[61.86735153 54.57060623]
[53.97087097 41.81735229]
[46.07438660 29.06409264]
[22.27777481 26.20050621]
[8.26610947 7.21412134]
[-6.73309994 7.06012440]
[-21.73230934 6.90612745]
[-36.73151779 6.75213051]
[-51.73072815 6.59813356]
[-62.84337616 17.83577728]
[-78.64766693 17.84061623]
[-89.76718903 6.60977888]
[-89.60493469 -9.19367695]
[-78.25716400 -20.19384193]
[-62.45630646 -19.86451340]
[-51.57673264 -8.40107536]
[-36.57752228 -8.24707890]
[-21.57831192 -8.09308147]
[-6.57910299 -7.93908501]
[8.42010689 -7.78508806]
[13.15671825 -17.54599571]
[21.09868622 -24.93761063]
[16.55139542 -39.23174286]
[12.00410461 -53.52587128]
[7.45681477 -67.81999969]
[1.83967125 -75.10309601]
[2.96616364 -82.45450592]
[-1.28668308 -96.83898926]
[-7.41585684 -110.52960968]
[-15.31233978 -123.28286743]
[-23.20882225 -136.03613281]
[-31.10530472 -148.78938293]
[-39.00178528 -161.54263306]
[-52.84502792 -169.20262146]
[-52.96668625 -184.09672546]
[-66.44561768 -194.38044739]
[-60.29513168 -210.17942810]
[-43.41095734 -208.64289856]
[-40.21342850 -191.99320984]
[-26.93499947 -185.24542236]
[-26.24852943 -169.43911743]
[-18.35204697 -156.68586731]
[-10.45556450 -143.93260193]
[-2.55908251 -131.17935181]
[5.33739996 -118.42609406]
[6.03300238 -133.40995789]
[12.66294193 -146.86521912]
[24.12066650 -156.54615784]
[38.49385834 -160.83700562]
[53.38359833 -159.02160645]
[66.30475616 -151.40296936]
[75.10076141 -139.25265503]
[78.30354309 -124.59856415]
[75.37855530 -109.88651276]
[66.81397247 -97.57197571]
[54.03925323 -89.71025848]
[39.18651962 -87.61351776]
[24.73472977 -91.63169098]
[13.09779835 -101.09183502]
[17.35064507 -86.70735168]
[21.75094414 -72.36729431]
[26.29823494 -58.07316208]
[30.84552574 -43.77902985]
[35.39281464 -29.48490143]
[45.39234543 -28.41743469]
[54.49818802 -24.04355431]
[61.64582062 -16.84079552]
[65.98838806 -7.61930275]
[66.99694824 2.56922770]
[64.52474976 12.55147457]
[58.82764435 21.16761017]
[66.72412872 33.92086792]
[74.62060547 46.67412567]
[82.51708984 59.42738342]
[90.41357422 72.18064117]
[98.31005859 84.93389893]
[111.59739685 91.89424896]
[126.57763672 91.12459564]
[141.55787659 90.35493469]
[156.53811646 89.58527374]
[171.51835632 88.81561279]
[186.49859619 88.04595184]
[201.47885132 87.27629089]
[209.83021545 74.19828796]
[224.28594971 68.55813599]
[239.28752136 72.52457428]
[249.06651306 84.57244110]
[249.86270142 100.06907654]
[241.36994934 113.05570984]
[226.85388184 118.53871918]
[211.89622498 114.40976715]
[202.24850464 102.25653076]
[187.26826477 103.02619171]
[172.28802490 103.79585266]
[157.30778503 104.56551361]
[142.32754517 105.33517456]
[127.34729767 106.10483551]
[112.36705780 106.87449646]
[126.88512421 110.64619446]
[133.89251709 123.90879059]
[128.82704163 138.02760315]
[114.98660278 143.81051636]
[101.38207245 137.49253845]
[96.87070465 123.18746185]
[96.87070465 138.18746948]
[111.49526978 141.82170105]
[124.81694031 148.84632874]
[136.06336975 158.84916687]
[144.58370972 171.24554443]
[149.88626099 185.31239319]
[151.66685486 200.23051453]
[149.82630920 215.13221741]
[144.47590637 229.15180969]
[135.93072510 241.47592163]
[124.69104767 251.39064026]
[111.41309357 258.32287598]
[96.87070465 261.87353516]
[96.87070465 276.87353516]
[96.87070465 291.87353516]
[96.87070465 306.87353516]
[96.87070465 321.87353516]
[96.87070465 336.87353516]
[96.87070465 351.87353516]
[96.87070465 366.87353516]
[96.87070465 381.87353516]
[96.87070465 396.87353516]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[22 131]
[23 130]
[24 102]
[25 101]
[26 100]
[27 99]
[28 98]
[29 97]
[31 46]
[32 45]
[33 44]
[34 43]
[35 42]
[48 90]
[49 89]
[50 88]
[51 87]
[53 86]
[54 85]
[55 71]
[56 70]
[57 69]
[58 68]
[59 67]
[61 65]
[103 124]
[104 123]
[105 122]
[106 121]
[107 120]
[108 119]
[109 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
