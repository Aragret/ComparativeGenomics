%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGCUUAAAACUCAAAGGACCUGGCGGUGCUUCAUAUCCCUCUAGAGGAGCCUGUUCUGUAAxxxxxxxxxxUUAUCUCGAACUGACACUGAGCCACAACCCAAACAACCCAGCUCUCCCUAAGCUUCAAACUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[239.96928406 607.33557129]
[239.66130066 592.33874512]
[239.35333252 577.34185791]
[239.04534912 562.34503174]
[238.73736572 547.34820557]
[238.42939758 532.35137939]
[238.12141418 517.35455322]
[237.81344604 502.35769653]
[237.50546265 487.36083984]
[234.59799194 472.64532471]
[229.17936707 458.65823364]
[223.76074219 444.67117310]
[218.34211731 430.68408203]
[212.92349243 416.69699097]
[198.60716248 418.49383545]
[184.26895142 416.79818726]
[170.74893188 411.70486450]
[158.84031677 403.50778198]
[149.24298096 392.68316650]
[142.52224731 379.86181641]
[139.07566833 365.79229736]
[139.10948181 351.29736328]
[142.62626648 337.22570801]
[149.42448425 324.40234375]
[159.11015320 313.58026123]
[171.11952209 305.39614868]
[165.98922729 291.30075073]
[151.64471436 287.37991333]
[142.24839783 275.62521362]
[141.56744385 260.41369629]
[150.07235718 247.56954956]
[144.94206238 233.47415161]
[139.81175232 219.37876892]
[134.68145752 205.28337097]
[129.26283264 191.29629517]
[123.55816650 177.42341614]
[117.85350800 163.55053711]
[112.14884186 149.67764282]
[108.10885620 147.02665710]
[105.72560120 141.78186035]
[106.50770569 135.11621094]
[101.37740326 121.02081299]
[96.24710083 106.92543030]
[86.47542572 114.40288544]
[73.18583679 116.79180145]
[58.45258713 112.94904327]
[45.78107071 104.92205048]
[33.10955429 96.89505005]
[18.26369095 101.80772400]
[3.75247884 95.98031616]
[-3.57233167 82.16433716]
[-0.25218934 66.88328552]
[12.14523602 57.35239410]
[27.76626015 58.07186508]
[39.23511124 68.70198059]
[41.13655090 84.22353363]
[53.80806732 92.25053406]
[66.47958374 100.27752686]
[73.12325287 96.79734802]
[66.16311646 83.50989532]
[79.45069122 76.54998016]
[86.41059113 89.83699799]
[93.05426788 86.35681915]
[93.67008972 71.36946106]
[94.28591919 56.38211060]
[94.90174103 41.39475632]
[80.49681854 36.90470886]
[67.74535370 28.83856201]
[57.51677704 17.74628639]
[50.50848389 4.38416767]
[47.19830704 -10.33674049]
[47.81194305 -25.41274452]
[52.30755615 -39.81593323]
[60.37862396 -52.56427765]
[71.47484589 -62.78857422]
[84.83966827 -69.79170990]
[99.56185913 -73.09619904]
[114.63761902 -72.47674561]
[129.03907776 -67.97557068]
[141.78430176 -59.89958191]
[152.00431824 -48.79940796]
[159.00228882 -35.43188095]
[162.30108643 -20.70842171]
[161.67581177 -5.63289738]
[157.16908264 8.76681709]
[149.08816528 21.50892448]
[137.98405457 31.72464752]
[124.61383057 38.71746063]
[109.88909149 42.01058197]
[109.27326965 56.99793625]
[108.65744019 71.98529053]
[108.04161835 86.97264099]
[110.34249115 101.79512787]
[115.47279358 115.89051056]
[120.60309601 129.98590088]
[126.02172089 143.97299194]
[131.72637939 157.84587097]
[137.43104553 171.71875000]
[143.13571167 185.59162903]
[148.20431519 189.99070740]
[149.97647095 195.47224426]
[148.77684021 200.15307617]
[153.90715027 214.24845886]
[159.03744507 228.34385681]
[164.16775513 242.43923950]
[178.93896484 246.81158447]
[188.19509888 258.90197754]
[188.55287170 273.94644165]
[180.08460999 286.17047119]
[185.21492004 300.26583862]
[200.77453613 298.84991455]
[216.16191101 301.49343872]
[230.33662415 308.01187134]
[242.34178162 317.95883179]
[251.36856079 330.65673828]
[256.81072998 345.24291992]
[258.30532837 360.72817993]
[255.75692749 376.06399536]
[249.34365845 390.21340942]
[239.50477600 402.22122192]
[226.91056824 411.27838135]
[232.32919312 425.26544189]
[237.74781799 439.25253296]
[243.16644287 453.23962402]
[248.58506775 467.22671509]
[251.37063599 452.48760986]
[258.71243286 439.40719604]
[269.84335327 429.35220337]
[283.60028076 423.37332153]
[298.54574585 422.09530640]
[313.11804199 425.65167236]
[325.79452515 433.67080688]
[335.25061035 445.31481934]
[340.49819946 459.36697388]
[340.98895264 474.35891724]
[336.67160034 488.72418213]
[327.99728394 500.96166992]
[315.87237549 509.79269409]
[301.56384277 514.29443359]
[286.56680298 513.99658203]
[272.44833374 508.93020630]
[260.68365479 499.62469482]
[252.50230408 487.05288696]
[252.81027222 502.04971313]
[253.11825562 517.04656982]
[253.42623901 532.04339600]
[253.73420715 547.04022217]
[254.04219055 562.03704834]
[254.35015869 577.03387451]
[254.65814209 592.03076172]
[254.96612549 607.02758789]
[257.55191040 626.23602295]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 151]
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 125]
[11 124]
[12 123]
[13 122]
[14 121]
[26 110]
[27 109]
[31 105]
[32 104]
[33 103]
[34 102]
[35 99]
[36 98]
[37 97]
[38 96]
[41 95]
[42 94]
[43 93]
[46 58]
[47 57]
[48 56]
[63 92]
[64 91]
[65 90]
[66 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
