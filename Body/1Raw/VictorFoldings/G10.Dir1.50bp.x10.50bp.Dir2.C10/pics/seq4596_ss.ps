%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACCCCAUCCUAAAGUAAGGUCAGCUAAAUAAGCUAUCGGGCCCAUACCCCGAAAAUGUUGGUxxxxxxxxxxUAAUAACCAUGCACACUACUAUAACCACCCUAACCCUGACUUCCCUAAUUCCCCCCAUCCUUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[117.07137299 488.53451538]
[117.07137299 473.53451538]
[117.07137299 458.53451538]
[117.07137299 443.53451538]
[117.07137299 428.53451538]
[117.07137299 413.53451538]
[117.07137299 398.53451538]
[117.07137299 383.53451538]
[117.07137299 368.53451538]
[117.07137299 353.53451538]
[102.00923157 350.19229126]
[88.05594635 343.59237671]
[75.90666199 334.06018066]
[66.16743469 322.06726074]
[59.32493973 308.20803833]
[55.72219467 293.17034912]
[55.54134369 277.70117188]
[58.79446030 262.56973267]
[65.32279968 248.52912903]
[74.80451965 236.27879333]
[86.77057648 226.42980957]
[100.62790680 219.47428894]
[115.68881226 215.76086426]
[115.38867950 200.76387024]
[107.39826965 188.19395447]
[114.85789490 174.24172974]
[114.55776215 159.24473572]
[106.56735229 146.67481995]
[114.02697754 132.72259521]
[113.72684479 117.72560883]
[103.88076782 126.21276855]
[89.08594513 128.56359863]
[73.35633087 122.16340637]
[58.35708237 122.31348419]
[43.35783386 122.46355438]
[28.35858536 122.61363220]
[16.14684486 133.01809692]
[0.42653045 129.81632996]
[-6.74307728 115.46446228]
[0.13793121 100.97200775]
[15.79103470 97.45633698]
[28.20851135 107.61437988]
[43.20775986 107.46430969]
[58.20701218 107.31423187]
[73.20626068 107.16416168]
[75.49532318 100.02201843]
[82.36251068 78.59558868]
[70.24492645 69.75454712]
[58.12733459 60.91350555]
[46.00974655 52.07246017]
[33.89215851 43.23141479]
[18.75597382 47.15951538]
[4.65834570 40.39261627]
[-1.74425852 26.12584877]
[2.57127571 11.09554100]
[15.56728458 2.39854383]
[31.10745049 4.14131451]
[41.85418320 15.50096989]
[42.73320389 31.11382866]
[54.85079193 39.95487213]
[66.96837616 48.79591751]
[79.08596802 57.63695908]
[91.20355225 66.47800446]
[114.21271515 75.25285339]
[121.59784698 93.98699188]
[130.79856873 82.14018250]
[136.78056335 68.38461304]
[139.17153931 53.57640076]
[141.56251526 38.76818466]
[143.50801086 23.89488602]
[145.00627136 8.96989918]
[146.50453186 -5.95508766]
[148.00279236 -20.88007355]
[134.45512390 -27.72296333]
[124.29713440 -39.00037003]
[118.90262604 -53.18711090]
[119.00115204 -68.36455536]
[124.57938385 -82.48007202]
[134.88291931 -93.62464905]
[148.51828003 -100.29108429]
[163.64138794 -101.57778931]
[178.20700073 -97.31075287]
[190.24520874 -88.06705475]
[198.12794495 -75.09683228]
[200.78915405 -60.15419006]
[197.86891174 -45.26000977]
[189.76216125 -32.42860413]
[177.56526184 -23.39531326]
[162.92778015 -19.38181686]
[161.42951965 -4.45682955]
[159.93125916 10.46815681]
[158.43299866 25.39314270]
[160.41903687 28.37038612]
[161.02972412 32.47344208]
[159.74478149 37.03028488]
[156.37072754 41.15916061]
[153.97976685 55.96737671]
[151.58879089 70.77558899]
[161.20278931 59.26164246]
[173.17485046 50.22452545]
[186.88270569 44.13397598]
[201.61383057 41.30656815]
[216.60250854 41.88927078]
[231.06965637 45.85179520]
[244.26329041 52.98817444]
[255.49763489 62.92747116]
[264.18872070 75.15305328]
[269.88482666 89.02944946]
[272.28985596 103.83538818]
[271.27880859 118.80126953]
[266.90423584 133.14920044]
[259.39352417 146.13339233]
[249.13706970 157.07893372]
[236.66798401 165.41691589]
[222.63438416 170.71391296]
[207.76573181 172.69461060]
[192.83486938 171.25604248]
[178.61788940 166.47300720]
[165.85377502 158.59408569]
[155.20596313 148.02885437]
[147.22795105 135.32644653]
[142.33438110 121.14712524]
[140.77964783 106.22791290]
[142.64537048 91.34090424]
[133.44465637 103.18770599]
[128.72384644 117.42547607]
[129.02397156 132.42247009]
[137.03585815 146.06506348]
[129.55476379 158.94461060]
[129.85488892 173.94160461]
[137.86676025 187.58419800]
[130.38568115 200.46372986]
[130.68580627 215.46072388]
[145.01466370 218.29292297]
[158.43070984 224.05226135]
[170.34346008 232.48249817]
[180.22920227 243.20989990]
[187.65396118 255.75981140]
[192.29261780 269.57766724]
[193.94305420 284.05349731]
[192.53504944 298.54879761]
[188.13319397 312.42477417]
[180.93397522 325.07043457]
[171.25697327 335.92959595]
[159.53071594 344.52514648]
[146.27369690 350.48019409]
[132.07136536 353.53451538]
[132.07136536 368.53451538]
[132.07136536 383.53451538]
[132.07136536 398.53451538]
[132.07136536 413.53451538]
[132.07136536 428.53451538]
[132.07136536 443.53451538]
[132.07136536 458.53451538]
[132.07136536 473.53451538]
[132.07136536 488.53451538]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 156]
[2 155]
[3 154]
[4 153]
[5 152]
[6 151]
[7 150]
[8 149]
[9 148]
[10 147]
[23 133]
[24 132]
[26 130]
[27 129]
[29 127]
[30 126]
[33 45]
[34 44]
[35 43]
[36 42]
[47 63]
[48 62]
[49 61]
[50 60]
[51 59]
[65 125]
[66 124]
[67 98]
[68 97]
[69 96]
[70 92]
[71 91]
[72 90]
[73 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
