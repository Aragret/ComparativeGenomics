%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCAUCUCAACUUAGUAUUAUACCCACACCCACCCAAGAACAGGGUUUGUUAAGAUGGCAGxxxxxxxxxxCUUCUCCUUACACCUAGCAGGUGUCUCCUCUAUCUUAGGGGCCAUCAAUUUCAUCACAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[101.22960663 424.83035278]
[101.22960663 409.83035278]
[101.22960663 394.83035278]
[101.22960663 379.83035278]
[101.22960663 364.83035278]
[101.22960663 349.83035278]
[101.22960663 334.83035278]
[101.22960663 319.83035278]
[101.22960663 304.83035278]
[101.22960663 289.83035278]
[88.19054413 287.20697021]
[75.86876678 282.18728638]
[64.70055389 274.94723511]
[55.08172226 265.74127197]
[47.35354614 254.89366150]
[41.79068375 242.78686523]
[38.59139252 229.84822083]
[37.87047577 216.53475952]
[39.65517044 203.31706238]
[43.88409805 190.66270447]
[50.40940857 179.01960754]
[59.00191498 168.80029297]
[69.35916901 160.36717224]
[81.11608124 154.01976013]
[93.85781860 149.98400879]
[107.13442230 148.40425110]
[108.38129425 133.45617676]
[109.62816620 118.50808716]
[91.49835968 116.66576385]
[83.62491608 102.43595886]
[69.39813995 97.68214417]
[57.48781967 102.74160767]
[45.70939255 98.44188690]
[40.22380066 87.61527252]
[26.09899712 82.56651306]
[10.49976635 85.20745850]
[1.11933517 73.63780212]
[-13.00546741 68.58905029]
[-27.13027000 63.54029465]
[-41.25507355 58.49153519]
[-52.47109222 68.90592957]
[-67.24522400 72.90387726]
[-82.18247986 69.56668854]
[-93.85039520 59.66121674]
[-99.56776428 45.46367264]
[-98.02078247 30.23654366]
[-89.56491852 17.47891617]
[-76.14328766 10.12239742]
[-60.84007263 9.85746193]
[-47.17184448 16.74499130]
[-38.27945709 29.20228004]
[-36.20631790 44.36673355]
[-22.08151436 49.41548920]
[-7.95671129 54.46424484]
[6.16809130 59.51300430]
[20.75702095 56.51094055]
[31.14775276 68.44171143]
[45.27255630 73.49046326]
[62.30846024 69.39437103]
[74.15195465 83.45536804]
[88.37873077 88.20918274]
[105.30819702 82.05986023]
[120.37209320 95.50238037]
[131.03372192 84.95109558]
[141.69534302 74.39980316]
[152.35697937 63.84851074]
[163.01860046 53.29722214]
[173.68022156 42.74592972]
[182.69775391 30.75909805]
[189.88026428 17.59051514]
[176.87655640 25.06739235]
[162.26536560 28.46049500]
[147.29750061 27.47935867]
[133.25425720 22.20797157]
[121.33783722 13.09759331]
[112.56835175 0.92812181]
[107.69650269 -13.25867176]
[107.13935089 -28.24831963]
[110.94459534 -42.75763321]
[118.78649139 -55.54452896]
[129.99371338 -65.51438904]
[143.60687256 -71.81373596]
[158.46061707 -73.90330505]
[173.28338623 -71.60423279]
[186.80625916 -65.11331940]
[197.87161255 -54.98622513]
[205.53218079 -42.08988953]
[209.13220215 -27.52829933]
[208.36347961 -12.54801083]
[203.29020691 1.57159758]
[214.98983765 -7.81556416]
[226.68945312 -17.20272636]
[238.38908386 -26.58988762]
[250.08871460 -35.97705078]
[261.78833008 -45.36421204]
[270.35858154 -59.99250412]
[286.78768921 -55.80668640]
[287.31347656 -38.86089325]
[271.17550659 -33.66458893]
[259.47586060 -24.27742577]
[247.77624512 -14.89026451]
[236.07661438 -5.50310230]
[224.37699890 3.88405943]
[212.67736816 13.27122116]
[203.04884338 24.77302551]
[195.86633301 37.94160843]
[203.59042358 50.80001068]
[218.58961487 50.64397430]
[233.58880615 50.48793793]
[243.37481689 38.29089737]
[258.72146606 35.28847122]
[272.38250732 42.89831543]
[277.90765381 57.52729416]
[272.68804932 72.26805115]
[259.18826294 80.16044617]
[243.78248596 77.47794342]
[233.74484253 65.48712158]
[218.74565125 65.64315796]
[203.74645996 65.79919434]
[191.21255493 61.70489120]
[184.23152161 53.40755844]
[173.56988525 63.95884705]
[162.90826416 74.51013947]
[152.24664307 85.06142426]
[141.58500671 95.61271667]
[130.92338562 106.16400909]
[124.57625580 119.75495911]
[123.32938385 134.70304871]
[122.08250427 149.65113831]
[138.11000061 154.77505493]
[152.47795105 163.51770020]
[164.38360596 175.38632202]
[173.16279602 189.71362305]
[178.32699585 205.69531250]
[179.59048462 222.43521118]
[176.88618469 238.99554443]
[170.36914062 254.44946289]
[160.40774536 267.93292236]
[147.56280518 278.69299316]
[132.55607605 286.12988281]
[116.22960663 289.83035278]
[116.22960663 304.83035278]
[116.22960663 319.83035278]
[116.22960663 334.83035278]
[116.22960663 349.83035278]
[116.22960663 364.83035278]
[116.22960663 379.83035278]
[116.22960663 394.83035278]
[116.22960663 409.83035278]
[116.22960663 424.83035278]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[26 129]
[27 128]
[28 127]
[30 61]
[31 60]
[34 58]
[35 57]
[37 55]
[38 54]
[39 53]
[40 52]
[63 126]
[64 125]
[65 124]
[66 123]
[67 122]
[68 121]
[69 106]
[70 105]
[90 104]
[91 103]
[92 102]
[93 101]
[94 100]
[95 99]
[107 119]
[108 118]
[109 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
