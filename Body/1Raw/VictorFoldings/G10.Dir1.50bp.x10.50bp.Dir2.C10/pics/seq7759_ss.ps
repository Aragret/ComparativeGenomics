%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCCUACAUACUUCCCCCAUUAUUCCUAGAACCAGGCGACCUGCGACUCCUUGACGUUGAxxxxxxxxxxAUACAAAGCCCCCGCACCAAUAGGAUCCUCCCGAAUCAACCCUGACCCCUCUCCUUCAUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[262.93063354 175.77615356]
[249.68804932 168.73101807]
[234.81790161 169.58412170]
[226.26858521 156.27172852]
[211.39843750 157.12483215]
[202.84913635 143.81243896]
[189.60653687 136.76730347]
[176.36395264 129.72216797]
[163.12136841 122.67703247]
[149.87878418 115.63189697]
[136.63619995 108.58676147]
[123.39361572 101.54162598]
[121.94814301 137.08705139]
[73.48705292 156.86875916]
[60.10076904 163.63687134]
[46.71448135 170.40498352]
[49.46980667 185.25708008]
[47.92782593 200.28369141]
[42.21354675 214.26667786]
[32.79019928 226.07247925]
[20.42168808 234.74407959]
[6.11067486 239.57849121]
[-8.98270988 240.18383789]
[-23.63491249 236.51101685]
[-36.65814590 228.85777283]
[-46.99667358 217.84452820]
[-53.81240082 204.36407471]
[-56.55280304 189.50921631]
[-54.99572754 174.48416138]
[-49.26740265 160.50692749]
[-39.83219910 148.71060181]
[-27.45498276 140.05142212]
[-13.13912106 135.23138428]
[1.95486403 134.64122009]
[16.60337067 138.32875061]
[29.61890793 145.99507141]
[39.94636917 157.01869202]
[53.33265305 150.25057983]
[66.71894073 143.48246765]
[66.56291199 135.98410034]
[53.41929626 128.75599670]
[66.25085449 120.98734283]
[66.09482574 113.48896027]
[52.43858337 107.28355408]
[38.78234100 101.07814789]
[25.12610054 94.87274170]
[8.20456696 93.82487488]
[4.52713585 77.27456665]
[19.41264153 69.15926361]
[31.33150864 81.21649933]
[44.98775101 87.42190552]
[58.64398956 93.62731171]
[72.30023193 99.83271790]
[81.68739319 88.13309479]
[72.66986084 76.14626312]
[58.19058609 69.76966095]
[56.72239685 54.94759750]
[41.10247803 51.28730392]
[34.35580826 36.73182678]
[41.65784836 22.44687653]
[57.40710449 19.39064980]
[69.52208710 29.90761948]
[68.70922852 45.93006516]
[82.54351044 51.44928741]
[84.65670013 67.12873840]
[93.67422485 79.11557007]
[107.99682617 74.65875244]
[108.62080383 59.67173767]
[109.24478149 44.68471909]
[95.44039917 38.32016754]
[85.12609100 27.15398979]
[79.87471771 12.88894367]
[80.48707581 -2.29965305]
[86.86978149 -16.09564972]
[98.04952240 -26.39525604]
[112.32146454 -31.62785912]
[127.50923920 -30.99552345]
[141.29682922 -24.59467506]
[151.58172607 -13.40139771]
[156.79554749 0.87741417]
[156.14323425 16.06434631]
[149.72424316 29.84350395]
[138.51745605 40.11366272]
[124.23179626 45.30869675]
[123.60781860 60.29571533]
[122.98384094 75.28273010]
[130.43875122 88.29904175]
[143.68133545 95.34417725]
[156.92391968 102.38931274]
[170.16650391 109.43444061]
[183.40908813 116.47957611]
[196.65167236 123.52471161]
[209.89425659 130.56985474]
[225.71160889 130.22065735]
[233.31372070 143.02914429]
[249.13107300 142.67996216]
[256.73318481 155.48843384]
[269.97576904 162.53356934]
[288.74804688 143.36666870]
[314.22155762 133.43563843]
[342.03680420 134.89181519]
[367.24523926 147.89765930]
[385.18966675 170.52400208]
[399.68527222 166.66683960]
[414.18084717 162.80967712]
[427.93258667 152.89372253]
[441.26788330 163.36302185]
[434.89932251 179.07534790]
[418.03802490 177.30526733]
[403.54241943 181.16242981]
[389.04681396 185.01959229]
[388.89080811 192.51797485]
[403.88754272 192.83026123]
[403.57504272 207.82699585]
[388.57873535 207.51472473]
[388.42272949 215.01309204]
[402.74530029 219.46990967]
[417.06790161 223.92672729]
[432.93707275 219.79133606]
[444.25881958 231.65516663]
[439.38629150 247.31372070]
[423.33193970 250.65882874]
[412.61108398 238.24932861]
[398.28848267 233.79251099]
[383.96591187 229.33569336]
[379.91470337 236.02494812]
[375.14978027 242.19383240]
[369.73660278 247.76695251]
[363.74853516 252.67706299]
[357.26583862 256.86581421]
[350.37454224 260.28451538]
[343.16531372 262.89456177]
[335.73233032 264.66799927]
[328.17199707 265.58773804]
[320.58166504 265.64776611]
[313.05853271 264.85308838]
[305.69815063 263.21954346]
[298.59341431 260.77371216]
[291.83337402 257.55227661]
[285.50195312 253.60163879]
[279.67709351 248.97724915]
[274.42974854 243.74276733]
[269.82293701 237.96920776]
[265.91110229 231.73400879]
[262.73934937 225.12001038]
[260.34313965 218.21429443]
[258.74761963 211.10708618]
[257.96759033 203.89054871]
[258.00729370 196.65762329]
[258.86047363 189.50079346]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 98]
[2 97]
[4 95]
[6 93]
[7 92]
[8 91]
[9 90]
[10 89]
[11 88]
[12 87]
[14 39]
[15 38]
[16 37]
[43 53]
[44 52]
[45 51]
[46 50]
[54 66]
[55 65]
[57 63]
[67 86]
[68 85]
[69 84]
[103 111]
[104 110]
[105 109]
[116 125]
[117 124]
[118 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
