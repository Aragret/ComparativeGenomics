%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCAGCCUAUAUACCGCCAUCUUCAGCAAACCCUGAUGAAGGCUACAAAGUAAGCGCAAGUxxxxxxxxxxAAAAUCCCAAACAUAUAACUGAACUCCUCACACCCAAUUGGACCAAUCUAUCACCCUAUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 251.09718323]
[92.50000000 236.09718323]
[92.50000000 221.09718323]
[92.50000000 206.09718323]
[92.50000000 191.09718323]
[92.50000000 176.09718323]
[92.50000000 161.09718323]
[92.50000000 146.09718323]
[92.50000000 131.09718323]
[92.50000000 116.09718323]
[86.72372437 102.25396729]
[76.06210327 91.70267487]
[65.40047455 81.15139008]
[54.73884964 70.60009766]
[41.81874847 69.87559509]
[33.15279388 60.81357574]
[33.01614380 48.67732239]
[22.57633018 37.90651321]
[12.13651752 27.13570595]
[1.69670522 16.36489677]
[-8.74310684 5.59408808]
[-21.35423470 -2.52745390]
[-35.47903824 -7.57621050]
[-49.75449753 -12.18177509]
[-64.16671753 -16.33966255]
[-78.57893372 -20.49754906]
[-89.22649384 -8.97303486]
[-105.38188171 -4.91482639]
[-122.04405975 -10.66010284]
[-133.46092224 -25.33499718]
[-148.39521790 -26.73729897]
[-163.32952881 -28.13960266]
[-178.26383972 -29.54190636]
[-193.19815063 -30.94421005]
[-207.66122437 -24.53093147]
[-219.60942078 -33.42417908]
[-234.54371643 -34.82648468]
[-247.76622009 -25.74105453]
[-263.07101440 -30.55180359]
[-268.71752930 -45.56833267]
[-260.37429810 -59.27124786]
[-244.44149780 -61.14884186]
[-233.14141846 -49.76079178]
[-218.20710754 -48.35848618]
[-204.81224060 -54.87207031]
[-191.79583740 -45.87851715]
[-176.86154175 -44.47621536]
[-161.92723083 -43.07390976]
[-146.99291992 -41.67160797]
[-132.05860901 -40.26930237]
[-125.99559784 -53.98935699]
[-137.08691406 -64.08800507]
[-148.17823792 -74.18665314]
[-164.30656433 -77.15464020]
[-169.54469299 -92.69471741]
[-158.50407410 -104.82059479]
[-142.54235840 -101.05820465]
[-138.07958984 -85.27796936]
[-126.98826599 -75.17932129]
[-115.89694977 -65.08067322]
[-94.31726837 -65.41378021]
[-78.52742767 -53.01778793]
[-74.42104340 -34.90976715]
[-60.00882721 -30.75187874]
[-45.59661102 -26.59399033]
[-42.30468369 -28.01902008]
[-38.14746094 -27.88064003]
[-33.88600922 -25.78482628]
[-30.43028259 -21.70101357]
[-16.30547905 -16.65225601]
[-25.77117157 -28.28843498]
[-31.96978569 -41.94776154]
[-34.49449921 -56.73376083]
[-33.17961121 -71.67601776]
[-28.11142540 -85.79386139]
[-19.62256432 -98.16072083]
[-8.27016163 -107.96495819]
[5.20071411 -114.56309509]
[19.90596008 -117.52210999]
[34.88045502 -116.64778900]
[49.14141846 -111.99752045]
[61.75288010 -103.87650299]
[71.88714600 -92.81771851]
[78.87909698 -79.54697418]
[82.26984406 -64.93524170]
[81.83684540 -49.94149017]
[77.60852814 -35.54978180]
[69.86238861 -22.70465088]
[59.10682678 -12.24913788]
[46.04772568 -4.86944342]
[31.54216957 -1.04990494]
[16.54217148 -1.04120159]
[2.02770114 -4.84572411]
[12.46751404 5.92508411]
[22.90732574 16.69589233]
[33.34713745 27.46670151]
[43.78694916 38.23751068]
[60.87931442 42.09121704]
[65.29013824 59.93846893]
[75.95176697 70.48976135]
[86.61338806 81.04105377]
[97.27501678 91.59233856]
[101.99237061 82.48299408]
[113.58272552 77.33694458]
[128.97929382 79.99541473]
[143.97846985 80.15145111]
[158.97766113 80.30748749]
[165.69654846 66.60276794]
[177.70162964 57.17721558]
[192.60925293 53.90227509]
[207.45953369 57.42819214]
[219.30392456 67.05488586]
[225.79069519 80.87097931]
[225.63192749 96.13327026]
[218.85911560 109.81142426]
[206.81703186 119.18962860]
[191.89662170 122.40583801]
[177.06033325 118.82147217]
[165.25395203 109.14820862]
[158.82162476 95.30667877]
[143.82243347 95.15064240]
[128.82325745 94.99460602]
[123.49243927 100.27024841]
[136.58065796 107.59817505]
[149.66886902 114.92610931]
[162.75709534 122.25403595]
[177.69732666 123.59167480]
[190.53424072 131.35142517]
[198.66235352 143.95832825]
[200.43193054 158.85357666]
[195.48382568 173.01394653]
[184.82231140 183.56535339]
[170.61132812 188.36621094]
[155.73524475 186.44210815]
[143.21340942 178.18356323]
[135.58732605 165.26678467]
[134.40496826 150.31275940]
[127.21357727 137.14901733]
[120.02219391 123.98527527]
[112.83081055 110.82154083]
[107.50000000 116.09718323]
[107.50000000 131.09718323]
[107.50000000 146.09718323]
[107.50000000 161.09718323]
[107.50000000 176.09718323]
[107.50000000 191.09718323]
[107.50000000 206.09718323]
[107.50000000 221.09718323]
[107.50000000 236.09718323]
[107.50000000 251.09718323]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 102]
[12 101]
[13 100]
[14 99]
[17 97]
[18 96]
[19 95]
[20 94]
[21 93]
[22 70]
[23 69]
[24 65]
[25 64]
[26 63]
[30 50]
[31 49]
[32 48]
[33 47]
[34 46]
[36 44]
[37 43]
[51 60]
[52 59]
[53 58]
[105 122]
[106 121]
[107 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
