%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGUCUGAGCUAUGAUAUCAAUUGGCUUCCUAGGGUUUAUCGUGUGAGCACACCAUAUAUUUAxxxxxxxxxxCAACAAAACUAACUAAUACUAACAUCUCAGACGCUCAGGAAAUAGAAACCGUCUGAACUAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[112.37905884 282.39987183]
[114.96482849 263.19143677]
[115.27280426 248.19459534]
[115.58078766 233.19775391]
[115.88876343 218.20092773]
[116.19673920 203.20408630]
[116.50471497 188.20724487]
[116.81269836 173.21040344]
[117.12067413 158.21356201]
[117.42864990 143.21673584]
[117.73662567 128.21989441]
[105.06454468 120.19254303]
[92.39360046 112.16590118]
[78.96614838 118.85197449]
[65.75096130 125.94837952]
[52.76058197 133.44837952]
[39.77020264 140.94837952]
[26.77982140 148.44837952]
[13.78944016 155.94837952]
[14.98142338 171.16488647]
[9.44516754 185.38854980]
[-1.72009993 195.79525757]
[-16.29750633 200.31874084]
[-31.39269829 198.06088257]
[-44.00851059 189.46995544]
[-51.64007187 176.25170898]
[-52.77212143 161.03062439]
[-47.17989731 146.82887268]
[-35.97373581 136.46621704]
[-21.37862778 132.00016785]
[-6.29244518 134.31745911]
[6.28944063 142.95799255]
[19.27982140 135.45799255]
[32.27020264 127.95799255]
[45.26058197 120.45799255]
[58.25096512 112.95799255]
[59.50745010 109.60114288]
[62.48718643 106.70446014]
[66.94702148 105.08720398]
[72.28007507 105.42452240]
[85.70751953 98.73844910]
[96.03842163 87.86313629]
[102.02671814 74.11030579]
[108.01501465 60.35747910]
[114.00331116 46.60464859]
[119.99160767 32.85181808]
[118.40692902 17.11017609]
[130.58189392 8.52999210]
[135.12918091 -5.76413774]
[138.18757629 -20.44903564]
[141.24597168 -35.13393402]
[136.48497009 -50.22179031]
[146.65473938 -61.10411835]
[149.71313477 -75.78901672]
[152.77153015 -90.47391510]
[155.82992554 -105.15881348]
[141.60279846 -109.96990204]
[128.05935669 -116.46084595]
[115.39707184 -124.53697968]
[103.80060577 -134.08053589]
[93.43907928 -144.95233154]
[84.46357727 -156.99383545]
[77.00499725 -170.02943420]
[71.17210388 -183.86904907]
[67.04996490 -198.31083679]
[64.69869232 -213.14421082]
[64.15257263 -228.15283203]
[65.41956329 -243.11787415]
[68.48119354 -257.82104492]
[73.29281616 -272.04800415]
[79.78426361 -285.59118652]
[87.86087036 -298.25317383]
[97.40485382 -309.84927368]
[108.27703857 -320.21041870]
[120.31887817 -329.18545532]
[133.35476685 -336.64355469]
[147.19459534 -342.47592163]
[161.63653564 -346.59753418]
[176.46998596 -348.94824219]
[191.47865295 -349.49380493]
[206.44363403 -348.22625732]
[221.14669800 -345.16406250]
[235.37345886 -340.35192871]
[248.91642761 -333.85995483]
[261.57809448 -325.78289795]
[273.17385864 -316.23846436]
[283.53457642 -305.36590576]
[292.50915527 -293.32373047]
[299.96676636 -280.28756714]
[305.79861450 -266.44750977]
[309.91967773 -252.00541687]
[312.26986694 -237.17187500]
[312.81484985 -222.16319275]
[311.54675293 -207.19825745]
[308.48400879 -192.49530029]
[303.67132568 -178.26872253]
[297.17886353 -164.72599792]
[289.10131836 -152.06462097]
[279.55645752 -140.46923828]
[268.68350220 -130.10891724]
[256.64099121 -121.13477325]
[243.60455322 -113.67765045]
[229.76428223 -107.84631348]
[215.32203674 -103.72579956]
[200.48840332 -101.37618256]
[185.47970581 -100.83174896]
[170.51481628 -102.10041809]
[167.45642090 -87.41551971]
[164.39802551 -72.73062134]
[161.33963013 -58.04572296]
[166.31939697 -44.00822830]
[155.93086243 -32.07553864]
[152.87246704 -17.39064026]
[149.81407166 -2.70574212]
[161.34535217 -12.29894733]
[176.10472107 -14.97501373]
[190.26998901 -10.04093075]
[200.17285156 1.22554100]
[203.24879456 15.90677261]
[198.70126343 30.20082664]
[187.70791626 40.40603256]
[173.11563110 43.87958908]
[158.70333862 39.72196579]
[148.20332336 29.00984573]
[144.33471680 14.51828861]
[146.34773254 29.27623940]
[133.74444580 38.84011459]
[127.75614166 52.59294510]
[121.76784515 66.34577179]
[115.77954865 80.09860229]
[109.79125214 93.85143280]
[121.63993835 84.65312958]
[133.54438782 75.52713013]
[148.15809631 72.14488983]
[162.86157227 75.11266327]
[175.01925659 83.89849091]
[182.45190430 96.92752838]
[183.82723999 111.86434174]
[178.89871216 126.03154755]
[168.54977417 136.88969421]
[154.63543701 142.49249268]
[139.65306091 141.83648682]
[132.73345947 128.52787781]
[132.42549133 143.52470398]
[132.11750793 158.52154541]
[131.80953979 173.51838684]
[131.50155640 188.51522827]
[131.19357300 203.51205444]
[130.88560486 218.50889587]
[130.57762146 233.50573730]
[130.26965332 248.50257874]
[129.96166992 263.49942017]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 152]
[3 151]
[4 150]
[5 149]
[6 148]
[7 147]
[8 146]
[9 145]
[10 144]
[11 143]
[13 41]
[14 40]
[15 36]
[16 35]
[17 34]
[18 33]
[19 32]
[42 131]
[43 130]
[44 129]
[45 128]
[46 127]
[48 125]
[49 114]
[50 113]
[51 112]
[53 110]
[54 109]
[55 108]
[56 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
