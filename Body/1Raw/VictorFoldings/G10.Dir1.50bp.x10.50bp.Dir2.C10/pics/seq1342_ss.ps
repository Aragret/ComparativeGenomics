%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGCUAAGACCCAAACUGGGAUUAGAUACCCCACUAUGCUUAGCCCUAAACCUCAACAGUUxxxxxxxxxxUGCAAAACCCCACUCUGCAUCAACUGAACGCAAAUCAGCCACUUUAAUUAAGCUAAGCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-33.47375488 184.75971985]
[-39.60701752 174.22488403]
[-44.91044235 163.24884033]
[-58.92715454 168.59036255]
[-72.94387054 173.93186951]
[-88.01535034 215.69354248]
[-100.45478821 224.07568359]
[-112.89422607 232.45782471]
[-125.33367157 240.83996582]
[-132.45442200 254.96815491]
[-147.33277893 255.66375732]
[-154.45352173 269.79193115]
[-169.33187866 270.48754883]
[-181.77131653 278.86968994]
[-194.21075439 287.25183105]
[-206.65019226 295.63397217]
[-209.89765930 308.16027832]
[-220.48493958 314.87802124]
[-232.41174316 312.62887573]
[-245.02287292 320.75042725]
[-257.63400269 328.87197876]
[-270.24511719 336.99349976]
[-280.28805542 350.65280151]
[-296.19366455 344.78363037]
[-294.95700073 327.87484741]
[-278.36666870 324.38238525]
[-265.75555420 316.26083374]
[-253.14440918 308.13928223]
[-240.53327942 300.01776123]
[-233.39825439 284.01489258]
[-215.03233337 283.19454956]
[-202.59289551 274.81240845]
[-190.15345764 266.43023682]
[-177.71401978 258.04809570]
[-171.48301697 244.51947021]
[-155.71492004 243.22431946]
[-149.48391724 229.69567871]
[-133.71580505 228.40052795]
[-121.27636719 220.01838684]
[-108.83692932 211.63624573]
[-96.39749146 203.25410461]
[-97.79986572 188.31912231]
[-99.20209503 173.38548279]
[-112.98448181 167.46551514]
[-126.76686096 161.54556274]
[-142.97966003 164.01075745]
[-153.00827026 151.03543091]
[-146.53610229 135.96748352]
[-130.22119141 134.30752563]
[-120.84690094 147.76318359]
[-107.06451416 153.68313599]
[-93.28213501 159.60310364]
[-78.28537750 159.91516113]
[-64.26866913 154.57365417]
[-50.25195312 149.23213196]
[-54.20874786 134.91583252]
[-56.80469131 120.29141235]
[-58.01688385 105.48793030]
[-57.83462524 90.63600922]
[-56.25952148 75.86672974]
[-53.30547714 61.31041718]
[-48.99855804 47.09552765]
[-43.37677002 33.34750366]
[-36.48972321 20.18767166]
[-28.39820099 7.73215580]
[-19.17360115 -3.90912342]
[-8.89732933 -14.63343620]
[2.33992791 -24.34614372]
[14.43900585 -32.96153259]
[27.29313278 -40.40357590]
[40.78887558 -46.60660172]
[54.80714035 -51.51586914]
[69.22422028 -55.08805466]
[83.91287994 -57.29163361]
[98.74351501 -58.10715866]
[113.58522797 -57.52743912]
[128.30705261 -55.55758667]
[142.77908325 -52.21498871]
[156.87361145 -47.52913666]
[170.46623230 -41.54138184]
[183.43701172 -34.30456924]
[191.94810486 -46.65614319]
[200.45919800 -59.00771713]
[208.97027588 -71.35929108]
[201.79022217 -84.87614441]
[201.72579956 -100.18151855]
[208.79179382 -113.75834656]
[221.36450195 -122.48677063]
[236.55482483 -124.36106873]
[250.87210083 -118.95053864]
[261.02636719 -107.49848175]
[264.68420410 -92.63648987]
[261.00509644 -77.77974701]
[250.83448792 -66.34222412]
[236.50947571 -60.95217514]
[221.32185364 -62.84819794]
[212.81076050 -50.49662781]
[204.29968262 -38.14505386]
[195.78858948 -25.79348183]
[214.14595032 -9.40820408]
[229.73876953 9.62686634]
[242.18940735 30.85071373]
[251.19631958 53.74930954]
[256.54135132 77.76806641]
[271.47564697 76.36576843]
[286.40997314 74.96346283]
[301.34426880 73.56115723]
[310.08255005 60.59286499]
[325.12649536 56.32514572]
[339.37283325 62.77307892]
[346.09487915 76.89215088]
[342.11868286 92.01576996]
[329.32165527 101.00302124]
[313.74621582 99.61040497]
[302.74658203 88.49546814]
[287.81225586 89.89776611]
[272.87796021 91.30007172]
[257.94366455 92.70237732]
[258.03643799 104.89216614]
[257.18984985 117.05287933]
[255.40892029 129.11222839]
[252.70420837 140.99853516]
[249.09179688 152.64114380]
[244.59317017 163.97084045]
[239.23506165 174.92028809]
[233.04933167 185.42439270]
[226.07273865 195.42073059]
[218.34675598 204.84988403]
[209.91731262 213.65579224]
[200.83448792 221.78611755]
[191.15231323 229.19253540]
[180.92829895 235.83100891]
[170.22325134 241.66209412]
[159.10078430 246.65112305]
[147.62701416 250.76843262]
[135.87014771 253.98956299]
[123.90005493 256.29534912]
[111.78791046 257.67211914]
[99.60569000 258.11166382]
[87.42581177 257.61135864]
[75.32067871 256.17422485]
[63.36224365 253.80873108]
[51.62158585 250.52900696]
[40.16849518 246.35450745]
[29.07105064 241.31007385]
[18.39521408 235.42567444]
[8.20444775 228.73628235]
[-1.44067526 221.28166199]
[-10.48282337 213.10614014]
[-18.86824799 204.25830078]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 55]
[4 54]
[5 53]
[6 41]
[7 40]
[8 39]
[9 38]
[11 36]
[13 34]
[14 33]
[15 32]
[16 31]
[19 29]
[20 28]
[21 27]
[22 26]
[43 52]
[44 51]
[45 50]
[81 99]
[82 98]
[83 97]
[84 96]
[104 118]
[105 117]
[106 116]
[107 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
