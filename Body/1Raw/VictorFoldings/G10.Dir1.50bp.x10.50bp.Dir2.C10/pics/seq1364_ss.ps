%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCCACUAUGCUUAGCCCUAAACCUCAACAGUUAAAUCAACAAAACUGCUCGCCAGAACACUACGxxxxxxxxxxUACCAUCUCACUUCUAGGAAUACUAGUAUAUCGCUCACACCUCAUAUCCUCCCUACUAUGCCUAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-16.22564507 296.97290039]
[-24.26799011 309.63467407]
[-32.31033325 322.29644775]
[-4.73852491 358.14230347]
[-9.89937496 372.22653198]
[-15.06022549 386.31076050]
[-20.22107697 400.39498901]
[-19.99343109 417.34741211]
[-36.22032547 422.25906372]
[-45.43207169 408.02600098]
[-34.30530930 395.23416138]
[-29.14445877 381.14990234]
[-23.98360825 367.06567383]
[-18.82275772 352.98144531]
[-25.11411476 348.89871216]
[-43.98818588 336.65045166]
[-54.74887466 347.10070801]
[-65.50955963 357.55096436]
[-69.46234894 373.46658325]
[-85.29476166 377.74053955]
[-96.71977234 365.97613525]
[-91.98430634 350.27557373]
[-75.95980835 346.79025269]
[-65.19911957 336.34002686]
[-54.43843460 325.88977051]
[-44.97211456 314.25411987]
[-36.92977142 301.59231567]
[-28.88742638 288.93054199]
[-49.65686798 272.94375610]
[-68.46085358 254.68568420]
[-85.05243683 234.39611816]
[-99.21371460 212.34150696]
[-110.75870514 188.81152344]
[-119.53578949 164.11517334]
[-125.42970276 138.57679749]
[-128.36303711 112.53177643]
[-128.29725647 86.32218170]
[-125.23323822 60.29222488]
[-119.21121979 34.78374481]
[-133.44046021 30.03728485]
[-147.66969299 25.29082489]
[-161.89892578 20.54436493]
[-176.12815857 15.79790401]
[-187.56852722 26.04551506]
[-202.60327148 29.18431664]
[-217.18811035 24.36998367]
[-227.39982605 12.89755058]
[-230.49147034 -2.14695740]
[-225.63145447 -16.71664238]
[-214.12705994 -26.89233398]
[-199.07293701 -29.93681908]
[-184.51855469 -25.03114891]
[-174.37898254 -13.49492359]
[-171.38169861 1.56866992]
[-157.15246582 6.31513023]
[-142.92323303 11.06159115]
[-128.69400024 15.80805111]
[-114.46475983 20.55451202]
[-110.02929688 9.47699547]
[-105.02210999 -1.35410631]
[-99.45682526 -11.90931129]
[-93.34860229 -22.15988731]
[-86.71405792 -32.07793045]
[-79.57125854 -41.63644028]
[-71.93965149 -50.80940247]
[-63.84000015 -59.57184219]
[-55.29436111 -67.89990997]
[-46.32598877 -75.77094269]
[-36.95930481 -83.16349792]
[-27.21980286 -90.05746460]
[-17.13399315 -96.43407440]
[-6.72933245 -102.27597046]
[3.96585798 -107.56724548]
[14.92246437 -112.29350281]
[26.11066055 -116.44187164]
[37.49999237 -120.00106049]
[49.05945587 -122.96138763]
[60.75758362 -125.31478119]
[72.56253815 -127.05484772]
[84.44217682 -128.17684937]
[96.36416626 -128.67771912]
[108.29605103 -128.55610657]
[120.20535278 -127.81233978]
[132.05966187 -126.44844055]
[143.82669067 -124.46812439]
[155.47442627 -121.87678528]
[166.97114563 -118.68146515]
[178.28556824 -114.89087677]
[189.38688660 -110.51532745]
[200.24488831 -105.56673431]
[210.83000183 -100.05856323]
[221.11343384 -94.00581360]
[231.06718445 -87.42495728]
[240.66413879 -80.33390808]
[249.87820435 -72.75196838]
[258.68429565 -64.69978333]
[267.05841064 -56.19926453]
[274.97778320 -47.27355194]
[282.42083740 -37.94694519]
[294.67538452 -46.59715271]
[306.92993164 -55.24735641]
[319.18447876 -63.89756012]
[323.31634521 -79.39940643]
[338.06954956 -85.70196533]
[352.12670898 -77.97046661]
[354.70434570 -62.13584137]
[343.82513428 -50.34506607]
[327.83468628 -51.64301300]
[315.58013916 -42.99280930]
[303.32559204 -34.34260178]
[291.07104492 -25.69239807]
[297.42224121 -15.46072102]
[303.22607422 -4.90891886]
[308.46646118 5.93375254]
[313.12881470 17.03723145]
[317.20028687 28.37073135]
[320.66955566 39.90283203]
[323.52697754 51.60155487]
[325.76464844 63.43446732]
[327.37637329 75.36875916]
[328.35769653 87.37134552]
[328.70587158 99.40895081]
[328.41992188 111.44818878]
[327.50067139 123.45568085]
[325.95062256 135.39814758]
[323.77413940 147.24246216]
[320.97723389 158.95581055]
[317.56762695 170.50567627]
[313.55477905 181.86007690]
[308.94985962 192.98750305]
[303.76559448 203.85711670]
[298.01638794 214.43878174]
[291.71813965 224.70314026]
[284.88833618 234.62176514]
[277.54592896 244.16712952]
[269.71127319 253.31277466]
[261.40603638 262.03335571]
[252.65332031 270.30468750]
[243.47734070 278.10382080]
[233.90357971 285.40914917]
[223.95854187 292.20040894]
[213.66981506 298.45880127]
[203.06593323 304.16693115]
[192.17630005 309.30899048]
[181.03108215 313.87072754]
[169.66120911 317.83947754]
[158.09820557 321.20425415]
[146.37409973 323.95571899]
[134.52142334 326.08624268]
[122.57304382 327.58993530]
[110.56206512 328.46261597]
[98.52181244 328.70184326]
[86.48564911 328.30697632]
[74.48696136 327.27914429]
[62.55900955 325.62112427]
[50.73486710 323.33755493]
[39.04731369 320.43478394]
[27.52875900 316.92080688]
[16.21113777 312.80541992]
[5.12582731 308.10000610]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 28]
[2 27]
[3 26]
[4 14]
[5 13]
[6 12]
[7 11]
[16 25]
[17 24]
[18 23]
[39 58]
[40 57]
[41 56]
[42 55]
[43 54]
[99 111]
[100 110]
[101 109]
[102 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
