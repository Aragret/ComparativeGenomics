%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUAGCCCUCGUAGUAACAGCCAUUCUCAUCCAAACCCCCUGAAGCUUCACCGGCGCAGUCxxxxxxxxxxCGCCUGAGCCCUAUCUAUUACUCUCAUCGCUACCUCCCUGACAAGCGCCUAUAGCACUCGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 284.61770630]
[92.50000000 269.61770630]
[92.50000000 254.61770630]
[92.50000000 239.61770630]
[92.50000000 224.61770630]
[92.50000000 209.61770630]
[92.50000000 194.61770630]
[92.50000000 179.61770630]
[92.50000000 164.61770630]
[92.50000000 149.61770630]
[74.69544983 143.33412170]
[60.47314835 130.91592407]
[51.84648895 114.12109375]
[36.98344040 116.14343262]
[22.12039375 118.16576385]
[27.69591141 136.68370056]
[16.39029884 159.00053406]
[4.12793016 167.63964844]
[-1.12853503 175.19090271]
[-8.48061562 176.32780457]
[-20.92005539 184.70996094]
[-27.62565041 199.67547607]
[-43.96440125 201.08163452]
[-53.12839890 187.48188782]
[-45.69051361 172.86650085]
[-29.30219841 172.27050781]
[-16.86275864 163.88836670]
[-4.51118612 155.37727356]
[7.75118208 146.73815918]
[6.27844095 139.38418579]
[-7.93177843 134.58110046]
[3.33295846 124.67622375]
[1.86021709 117.32224274]
[-12.78328419 114.07141876]
[-27.42678642 110.82058716]
[-35.82212067 123.46506500]
[-48.22050858 132.21974182]
[-62.94516373 135.90063477]
[-78.00469971 134.00991821]
[-91.36244202 126.80331421]
[-101.21185303 115.25543976]
[-106.22089386 100.92805481]
[-105.71213531 85.75881958]
[-99.75436401 71.79925537]
[-89.15334320 60.93727493]
[-75.34275055 54.64186859]
[-60.19037628 53.76444244]
[-45.74544144 58.42366028]
[-33.96150970 67.98939514]
[-26.43225861 81.16797638]
[-24.17596054 96.17708588]
[-9.53245831 99.42791748]
[5.11104298 102.67874146]
[20.09805870 103.30271912]
[34.96110535 101.28038025]
[49.82415390 99.25804901]
[53.54533768 81.02289581]
[63.65625381 65.39800262]
[78.76617432 54.53253174]
[96.79675293 49.92100906]
[115.26793671 52.19773865]
[131.63905334 61.04955673]
[142.73036194 50.95090866]
[153.82167053 40.85226059]
[164.91299438 30.75360870]
[176.00430298 20.65496063]
[181.15373230 3.00663733]
[198.39161682 -0.13271599]
[209.27043152 -10.45992088]
[220.14926147 -20.78712654]
[212.98008728 -34.05506897]
[209.49241638 -48.71526718]
[209.91810608 -63.76700211]
[214.22216797 -78.18441010]
[222.10543823 -90.98643494]
[233.02543640 -101.30354309]
[246.23364258 -108.43682098]
[260.82687378 -111.90530396]
[275.80892944 -111.47840118]
[290.15872192 -107.19121552]
[302.89981079 -99.34174347]
[313.77865601 -109.66894531]
[314.90594482 -122.56015015]
[324.23394775 -130.93913269]
[336.36856079 -130.69702148]
[347.45986938 -140.79566956]
[358.55117798 -150.89431763]
[369.64248657 -160.99296570]
[364.45599365 -175.28173828]
[365.13735962 -190.46739197]
[371.58267212 -204.23423767]
[382.80908203 -214.48294067]
[397.10467529 -219.65065002]
[412.28939819 -218.94931030]
[426.04776001 -212.48588562]
[436.28170776 -201.24600220]
[441.43060303 -186.94364929]
[440.70928955 -171.75982666]
[434.22775269 -158.00997925]
[422.97442627 -147.79084778]
[408.66531372 -142.66076660]
[393.48245239 -143.40205383]
[379.74114990 -149.90165710]
[368.64984131 -139.80300903]
[357.55850220 -129.70436096]
[346.46719360 -119.60571289]
[342.08203125 -102.64191437]
[324.10583496 -98.79012299]
[313.22702026 -88.46292114]
[320.40347290 -75.33097076]
[323.93881226 -60.77768326]
[323.58624268 -45.79368591]
[319.36373901 -31.40053177]
[311.55340576 -18.58103752]
[300.68252563 -8.21219540]
[287.48797607 -1.00515807]
[272.86630249 2.54352379]
[257.81280518 2.18611217]
[243.35374451 -2.05903411]
[230.47647095 -9.90830040]
[219.59764099 0.41890430]
[208.71881104 10.74610901]
[208.07743835 22.86617279]
[199.04200745 31.55985451]
[186.10295105 31.74627495]
[175.01164246 41.84492493]
[163.92031860 51.94357300]
[152.82901001 62.04222488]
[141.73770142 72.14087677]
[145.79705811 79.48667908]
[148.57534790 87.40629578]
[149.99488831 95.67819214]
[150.01593018 104.07097626]
[148.63790894 112.34988403]
[145.89936829 120.28334045]
[141.87690735 127.64941406]
[136.68305969 134.24206543]
[130.46308899 139.87689209]
[123.39098358 144.39625549]
[115.66458130 147.67375183]
[107.50000000 149.61770630]
[107.50000000 164.61770630]
[107.50000000 179.61770630]
[107.50000000 194.61770630]
[107.50000000 209.61770630]
[107.50000000 224.61770630]
[107.50000000 239.61770630]
[107.50000000 254.61770630]
[107.50000000 269.61770630]
[107.50000000 284.61770630]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[13 56]
[14 55]
[15 54]
[17 29]
[18 28]
[20 27]
[21 26]
[33 53]
[34 52]
[35 51]
[62 129]
[63 128]
[64 127]
[65 126]
[66 125]
[68 122]
[69 121]
[70 120]
[81 109]
[82 108]
[85 106]
[86 105]
[87 104]
[88 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
