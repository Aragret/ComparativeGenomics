%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUUAUAAUAAACACCCUCACCACUACAAUCUUCCUAGGAACAACAUAUGACGCACUCUCCxxxxxxxxxxAACCGAAUUGGUAUAUAGUUUAAACAAAACGAAUGAUUUCGACUCAUUAAAUUAUGAUAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[5.80247116 232.07998657]
[-3.46247840 243.87661743]
[-5.90139484 259.50869751]
[-19.84750748 264.73892212]
[-29.11245537 276.53558350]
[-38.37740707 288.33221436]
[-47.64235306 300.12884521]
[-56.90730286 311.92550659]
[-59.34622192 327.55758667]
[-73.29233551 332.78781128]
[-75.73124695 348.41989136]
[-89.67736053 353.65011597]
[-98.94230652 365.44677734]
[-108.20726013 377.24340820]
[-113.23541260 393.43457031]
[-130.18576050 393.08508301]
[-134.54225159 376.70040894]
[-120.00389862 367.97845459]
[-110.73895264 356.18182373]
[-101.47399902 344.38516235]
[-99.69777679 329.59686279]
[-85.08897400 323.52285767]
[-83.31274414 308.73455811]
[-68.70394135 302.66055298]
[-59.43899536 290.86389160]
[-50.17404556 279.06726074]
[-40.90909576 267.27062988]
[-31.64414597 255.47398376]
[-29.86792183 240.68566895]
[-15.25911808 234.61167908]
[-5.99416876 222.81503296]
[-12.71544743 216.67700195]
[-19.08189201 210.17167664]
[-25.07346535 203.31951904]
[-30.67130089 196.14212036]
[-35.85778046 188.66204834]
[-40.61657333 180.90287781]
[-44.93269730 172.88902283]
[-48.79257202 164.64570618]
[-52.18404388 156.19886780]
[-55.09643173 147.57513428]
[-57.52057266 138.80162048]
[-59.44882965 129.90596008]
[-60.87513733 120.91616058]
[-61.79500580 111.86051178]
[-62.20553970 102.76752472]
[-62.10544205 93.66582489]
[-61.49502945 84.58406830]
[-60.37622833 75.55084229]
[-58.75255585 66.59458160]
[-56.62912369 57.74348068]
[-54.01261902 49.02540588]
[-50.91127777 40.46780014]
[-47.33485794 32.09760666]
[-43.29462814 23.94116783]
[-38.80329895 16.02416801]
[-33.87501144 8.37152672]
[-28.52528191 1.00733483]
[-22.77095032 -6.04522467]
[-16.63013268 -12.76395035]
[-10.12215710 -19.12768936]
[-3.26751375 -25.11641312]
[3.91221929 -30.71126366]
[11.39443970 -35.89463043]
[19.15559387 -40.65019608]
[27.17124939 -44.96299362]
[35.41617203 -48.81943893]
[43.86440659 -52.20739746]
[52.48936081 -55.11619949]
[61.26387787 -57.53668976]
[70.16033936 -59.46125031]
[79.15073395 -60.88382339]
[88.20676422 -61.79992294]
[97.29991913 -62.20667648]
[106.40157318 -62.10279465]
[115.48307800 -61.48860931]
[124.51583862 -60.36605072]
[133.47142029 -58.73865128]
[142.32164001 -56.61154175]
[151.03862000 -53.99140930]
[159.59494019 -50.88650894]
[167.96365356 -47.30661392]
[174.87065125 -60.62176895]
[181.77764893 -73.93692780]
[178.32150269 -89.60327911]
[188.52667236 -101.98205566]
[204.56462097 -101.57731628]
[214.13240051 -88.69953918]
[209.89044189 -73.22745514]
[195.09280396 -67.02993011]
[188.18580627 -53.71477127]
[181.27880859 -40.39961624]
[195.21543884 -31.34807205]
[208.15296936 -20.91828346]
[219.95564270 -9.21968651]
[230.49960327 3.62496114]
[239.67422485 17.48088074]
[247.38323975 32.20268250]
[261.28579712 26.57072449]
[275.18835449 20.93876839]
[289.09091187 15.30681038]
[296.64468384 1.15336490]
[312.44558716 -1.62358415]
[324.37249756 9.10620117]
[323.27612305 25.11174774]
[309.99749756 34.11497116]
[294.72286987 29.20936584]
[280.82031250 34.84132385]
[266.91775513 40.47328186]
[253.01519775 46.10523605]
[262.00976562 91.56575775]
[257.78439331 137.71450806]
[272.19659424 141.87240601]
[286.60882568 146.03028870]
[301.02102661 150.18817139]
[315.43325806 154.34606934]
[328.30972290 145.47305298]
[343.87216187 147.00422668]
[354.77246094 158.21659851]
[355.86383057 173.81605530]
[346.63095093 186.43699646]
[331.43331909 190.12019348]
[317.44677734 183.12655640]
[311.27536011 168.75828552]
[296.86315918 164.60038757]
[282.45092773 160.44250488]
[268.03872681 156.28462219]
[253.62649536 152.12672424]
[249.12107849 163.88427734]
[243.71736145 175.25698853]
[237.44792175 186.17637634]
[230.35049438 196.57662964]
[222.46784973 206.39511108]
[213.84747314 215.57269287]
[204.54130554 224.05407715]
[194.60537720 231.78816223]
[184.09954834 238.72837830]
[173.08712769 244.83290100]
[161.63442993 250.06495667]
[149.81045532 254.39305115]
[137.68641663 257.79110718]
[125.33537292 260.23861694]
[112.83171082 261.72088623]
[100.25074768 262.22894287]
[87.66827393 261.75976562]
[75.16008759 260.31616211]
[62.80152893 257.90682983]
[50.66705322 254.54629517]
[38.82975388 250.25477600]
[27.36093903 245.05813599]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 31]
[2 30]
[4 28]
[5 27]
[6 26]
[7 25]
[8 24]
[10 22]
[12 20]
[13 19]
[14 18]
[82 92]
[83 91]
[84 90]
[98 110]
[99 109]
[100 108]
[101 107]
[112 128]
[113 127]
[114 126]
[115 125]
[116 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
