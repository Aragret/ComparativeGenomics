%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACACAUUAUUUUCCCCUCCCACUCCCAUACUACUAAUCUCAUCAAUACAACCCCCGCCCxxxxxxxxxxUAAUCCAAGCCUACGUUUUCACACUUCUAGUAAGCCUCUACCUGCACGACAACACAUAAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-65.18643188 304.74612427]
[-68.27350616 320.26321411]
[-82.42511749 324.90878296]
[-92.17276764 336.30981445]
[-101.92041779 347.71081543]
[-111.66807556 359.11184692]
[-121.41572571 370.51287842]
[-131.16337585 381.91387939]
[-140.91102600 393.31491089]
[-150.65867615 404.71594238]
[-160.40632629 416.11694336]
[-170.15399170 427.51797485]
[-165.61132812 442.26138306]
[-169.78269958 457.11410522]
[-181.33700562 467.33666992]
[-196.58734131 469.66714478]
[-210.66734314 463.36184692]
[-219.08416748 450.43280029]
[-219.15202332 435.00558472]
[-210.84924316 422.00299072]
[-196.82524109 415.57409668]
[-181.55500793 417.77032471]
[-171.80735779 406.36929321]
[-162.05970764 394.96829224]
[-152.31204224 383.56726074]
[-142.56439209 372.16622925]
[-132.81674194 360.76522827]
[-123.06909180 349.36419678]
[-113.32144165 337.96316528]
[-103.57379150 326.56216431]
[-93.82613373 315.16113281]
[-91.43627930 300.45950317]
[-76.58744812 294.99847412]
[-86.69082642 285.34851074]
[-96.26763153 275.17575073]
[-105.29087067 264.50894165]
[-113.73508453 253.37811279]
[-121.57646179 241.81468201]
[-128.79287720 229.85125732]
[-135.36398315 217.52160645]
[-141.27124023 204.86047363]
[-146.49800110 191.90357971]
[-151.02951050 178.68746948]
[-154.85298157 165.24943542]
[-157.95764160 151.62734985]
[-160.33474731 137.85964966]
[-161.97755432 123.98517609]
[-162.88146973 110.04304504]
[-163.04393005 96.07259369]
[-162.46446228 82.11321259]
[-161.14471436 68.20428467]
[-159.08840942 54.38503647]
[-156.30134583 40.69444656]
[-152.79138184 27.17112732]
[-148.56842041 13.85322094]
[-143.64437866 0.77829301]
[-138.03312683 -12.01677990]
[-131.75050354 -24.49591064]
[-124.81423950 -36.62389755]
[-117.24387360 -48.36653900]
[-109.06077576 -59.69071198]
[-100.28801727 -70.56447601]
[-90.95034790 -80.95716095]
[-81.07410431 -90.83946228]
[-70.68714142 -100.18349457]
[-59.81875229 -108.96290588]
[-48.49959564 -117.15294647]
[-36.76159286 -124.73049927]
[-24.63785553 -131.67419434]
[-12.16257668 -137.96446228]
[0.62905651 -143.58355713]
[13.70096588 -148.51560974]
[27.01628304 -152.74671936]
[40.53744888 -156.26496887]
[54.22632980 -159.06042480]
[68.04431915 -161.12518311]
[81.95243073 -162.45346069]
[95.91145325 -163.04147339]
[109.88200378 -162.88757324]
[123.82468414 -161.99220276]
[137.70016479 -160.35787964]
[151.46931458 -157.98922729]
[165.09329224 -154.89291382]
[178.53367615 -151.07766724]
[191.75256348 -146.55424500]
[204.71264648 -141.33543396]
[217.37739563 -135.43592834]
[229.71107483 -128.87237549]
[241.67892456 -121.66329193]
[253.24714661 -113.82900238]
[264.38314819 -105.39160919]
[275.05548096 -96.37490845]
[285.23410034 -86.80432892]
[294.89025879 -76.70687103]
[303.99673462 -66.11100769]
[312.52780151 -55.04663467]
[320.45947266 -43.54494476]
[327.76931763 -31.63838959]
[334.43673706 -19.36054802]
[340.44296265 -6.74604845]
[345.77096558 6.16952801]
[350.40582275 19.34975433]
[354.33438110 32.75745392]
[357.54556274 46.35481262]
[372.31164551 43.71594620]
[387.07769775 41.07708359]
[397.39202881 28.78912354]
[413.42575073 29.33580971]
[422.87918091 42.29776764]
[418.50042725 57.73169708]
[403.64852905 63.79800415]
[389.71655273 55.84313965]
[374.95050049 58.48200226]
[360.18444824 61.12086868]
[362.11840820 77.60632324]
[363.00888062 94.18092346]
[362.85232544 110.77869415]
[361.64938354 127.33354950]
[359.40484619 143.77960205]
[356.12762451 160.05136108]
[351.83078003 176.08406067]
[346.53143311 191.81387329]
[340.25064087 207.17819214]
[333.01342773 222.11582947]
[324.84860229 236.56733704]
[315.78866577 250.47517395]
[305.86968994 263.78399658]
[295.13119507 276.44079590]
[283.61584473 288.39520264]
[271.36956787 299.59960938]
[258.44107056 310.00942993]
[244.88183594 319.58322144]
[230.74583435 328.28283691]
[216.08934021 336.07369995]
[200.97068787 342.92477417]
[185.45010376 348.80877686]
[169.58932495 353.70230103]
[153.45153809 357.58584595]
[137.10095215 360.44393921]
[120.60266876 362.26525879]
[104.02236938 363.04248047]
[87.42606354 362.77258301]
[70.87980652 361.45657349]
[54.44947815 359.09976196]
[38.20048141 355.71145630]
[22.19750404 351.30520630]
[6.50425386 345.89849854]
[-8.81679630 339.51290894]
[-23.70465469 332.17382812]
[-38.10005188 323.91049194]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 33]
[3 31]
[4 30]
[5 29]
[6 28]
[7 27]
[8 26]
[9 25]
[10 24]
[11 23]
[12 22]
[104 114]
[105 113]
[106 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
