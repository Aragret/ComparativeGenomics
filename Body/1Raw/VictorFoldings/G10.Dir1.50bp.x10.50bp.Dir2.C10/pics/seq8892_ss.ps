%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCCUCAUACUAGGCCUACUAACCAACACACUAACCAUAUACCAAUGAUGGCGCGAUGUAACAxxxxxxxxxxCCGAUCCGUCCCUAACAAACUAGGAGGCGUCCUUGCCCUAUUACUAUCCAUCCUCAUCCUAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[62.40280914 487.21276855]
[62.40280914 472.21276855]
[62.40280914 457.21276855]
[62.40280914 442.21276855]
[62.40280914 427.21276855]
[62.40280914 412.21276855]
[62.40280914 397.21276855]
[62.40280914 382.21276855]
[62.40280914 367.21276855]
[62.40280914 352.21276855]
[46.89736557 348.57391357]
[32.69145203 341.35455322]
[20.59899521 330.96383667]
[11.31389427 317.99273682]
[5.37019634 303.18051147]
[3.11138701 287.37243652]
[4.67054033 271.47164917]
[9.96248627 256.38757324]
[18.68845367 242.98387146]
[30.35293198 232.02894592]
[44.29181671 224.15197754]
[59.71020508 219.80676270]
[59.10232162 204.81907654]
[46.58970642 199.26855469]
[37.65597916 188.80999756]
[34.09515762 175.45555115]
[36.66025162 161.80720520]
[44.90488815 150.54981995]
[57.25974274 143.92303467]
[56.95573807 128.92611694]
[56.65173340 113.92919159]
[47.59082031 101.97512054]
[33.23395920 97.62994385]
[18.87709999 93.28476715]
[3.42729473 96.69270325]
[-6.51295328 85.60033417]
[-20.86981392 81.25515747]
[-29.70702171 93.55078125]
[-42.05923462 102.30873108]
[-56.58657074 106.57899475]
[-71.71321869 105.89837646]
[-85.79835510 100.34069824]
[-97.31411743 90.50881958]
[-105.01137543 77.46923065]
[-108.05518341 62.63636017]
[-106.11537170 47.61917496]
[-99.40235138 34.04662323]
[-88.64431000 23.39095688]
[-75.00819397 16.80802155]
[-59.97314453 15.01188278]
[-45.17005920 18.19737434]
[-32.20466232 26.01895714]
[-22.48333931 37.62820435]
[-17.06059074 51.76583099]
[-16.52463531 66.89829254]
[-2.16777563 71.24347687]
[12.25513172 67.52473450]
[23.22227859 78.92790222]
[37.57913971 83.27307892]
[51.93599701 87.61825562]
[63.60911560 78.19815826]
[62.39434814 63.24742508]
[58.56074524 54.89011002]
[61.30960083 47.98189926]
[60.39809036 33.00961685]
[59.48657608 18.03733826]
[44.79441833 14.48319244]
[31.80344963 6.75492620]
[21.66881180 -4.46026611]
[15.29167366 -18.16513824]
[13.23908520 -33.14106369]
[15.69356155 -48.05638885]
[22.43685150 -61.58485794]
[32.86934662 -72.52352142]
[46.06339645 -79.89973450]
[60.84579468 -83.05759430]
[75.90209961 -81.71631622]
[89.89351654 -75.99516296]
[101.57594299 -66.40284729]
[109.91057587 -53.79232788]
[114.15631104 -39.28490829]
[113.93561554 -24.17058754]
[109.26811981 -9.79331779]
[100.56885529 2.56848383]
[88.61135101 11.81561470]
[74.45885468 17.12582588]
[75.37036896 32.09810638]
[76.28188324 47.07038498]
[77.34507751 62.03265762]
[78.55984497 76.98339081]
[86.96401978 68.69911194]
[98.57148743 63.66958237]
[112.06185913 63.11194229]
[123.73497772 53.69183731]
[135.40809631 44.27173615]
[147.08120728 34.85163116]
[148.51033020 19.11208916]
[160.70372009 9.05741024]
[176.42727661 10.65285492]
[186.35247803 22.95187569]
[184.59088135 38.65768051]
[172.18762207 48.45229721]
[156.50131226 46.52474976]
[144.82820129 55.94485092]
[133.15507507 65.36495209]
[121.48196411 74.78505707]
[124.36963654 81.70686340]
[133.03265381 102.47226715]
[147.93954468 100.80358887]
[162.84643555 99.13491821]
[177.75334167 97.46623993]
[190.62692261 87.30735779]
[205.75933838 93.62730408]
[207.58366394 109.92465973]
[194.22319031 119.43410492]
[179.42201233 112.37313080]
[164.51512146 114.04180908]
[149.60821533 115.71048737]
[134.70132446 117.37916565]
[119.29824829 131.53506470]
[99.71348572 135.13156128]
[82.16036224 128.11126709]
[71.64865112 113.62519073]
[71.95265961 128.62210083]
[72.25666046 143.61903381]
[86.80195618 151.42320251]
[95.39241791 165.40856934]
[95.77285004 181.72343445]
[87.93412781 195.92994690]
[74.08999634 204.21119690]
[74.69788361 219.19888306]
[88.59701538 221.71864319]
[101.65308380 227.09403992]
[113.28678131 235.08366394]
[122.98248291 245.33018494]
[130.31114197 257.37634277]
[134.94929504 270.68530273]
[136.69326782 284.66458130]
[135.46818542 298.69247437]
[131.33116150 312.14572144]
[124.46859741 324.42706299]
[115.18788910 334.99194336]
[103.90353394 343.37243652]
[91.11871338 349.19824219]
[77.40280914 352.21276855]
[77.40280914 367.21276855]
[77.40280914 382.21276855]
[77.40280914 397.21276855]
[77.40280914 412.21276855]
[77.40280914 427.21276855]
[77.40280914 442.21276855]
[77.40280914 457.21276855]
[77.40280914 472.21276855]
[77.40280914 487.21276855]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[22 131]
[23 130]
[29 125]
[30 124]
[31 123]
[32 60]
[33 59]
[34 58]
[36 56]
[37 55]
[61 90]
[62 89]
[64 88]
[65 87]
[66 86]
[93 106]
[94 105]
[95 104]
[96 103]
[108 119]
[109 118]
[110 117]
[111 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
