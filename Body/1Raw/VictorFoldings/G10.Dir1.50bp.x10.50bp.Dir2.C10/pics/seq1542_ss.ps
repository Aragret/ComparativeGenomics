%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGAUCAACCUCACCACCUCUUGCUCAGCCUAUAUACCGCCAUCUUCAGCAAACCCUGAUGAAGGxxxxxxxxxxCUCACCAUCGCUCUUCUACUAUGAACCCCCCUCCCCAUACCCAACCCCCUGGUCAACCUCAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[350.19055176 384.57025146]
[340.07208252 373.49700928]
[329.95361328 362.42379761]
[319.83511353 351.35055542]
[309.71664429 340.27731323]
[299.59817505 329.20410156]
[289.47970581 318.13085938]
[279.36120605 307.05764771]
[269.24273682 295.98440552]
[259.12426758 284.91116333]
[249.00579834 273.83795166]
[234.70863342 269.66177368]
[231.11131287 254.25497437]
[220.99282837 243.18173218]
[210.87435913 232.10850525]
[198.06909180 239.88021851]
[183.98913574 245.00590515]
[169.17497253 247.28680420]
[154.19569397 246.63340759]
[139.62709045 243.06895447]
[126.02952576 236.72862244]
[113.92639160 227.85440063]
[103.78396606 216.78582764]
[95.99345398 203.94706726]
[90.85585785 189.83058167]
[88.57039642 174.97827148]
[89.22677612 159.96067810]
[92.80162048 145.35508728]
[99.15936279 131.72326660]
[108.05735779 119.58993530]
[97.93888092 108.51670837]
[94.85212708 108.13564301]
[91.84083557 106.59700012]
[89.34368134 103.92870331]
[87.78186798 100.32385254]
[87.49797058 96.12974548]
[74.11759949 103.00010681]
[59.70641708 107.29359436]
[44.75563812 108.86537933]
[29.77459335 107.66339874]
[15.27337646 103.73004913]
[1.74546921 97.20069122]
[-10.34904671 88.29902649]
[-20.59913826 77.32939911]
[-28.65678978 64.66638947]
[-34.24881744 50.74206161]
[-37.18613815 36.03117371]
[-37.37014771 21.03502083]
[-34.79605103 6.26434565]
[-29.55295181 -7.77806091]
[-21.82078934 -20.61447144]
[-11.86415482 -31.80847168]
[-21.06487274 -43.65527344]
[-30.26559258 -55.50207901]
[-39.46631241 -67.34888458]
[-48.66703033 -79.19568634]
[-63.24261856 -85.34896851]
[-64.93846893 -100.14671326]
[-74.13919067 -111.99352264]
[-89.81352234 -115.41327667]
[-96.78313446 -129.86332703]
[-89.70153809 -144.25883484]
[-74.00112152 -147.55679321]
[-61.72590637 -137.22729492]
[-62.29238510 -121.19423676]
[-53.09166336 -109.34743500]
[-39.17417526 -104.04151917]
[-36.82022858 -88.39640808]
[-27.61950684 -76.54959869]
[-18.41878891 -64.70279694]
[-9.21806908 -52.85599518]
[-0.01735029 -41.00918961]
[13.29283810 -47.88516998]
[27.64370918 -52.19935989]
[42.54693985 -53.80342484]
[57.49512482 -52.64128113]
[71.97906494 -48.75104904]
[85.50510406 -42.26379395]
[97.61194611 -33.39913940]
[107.88640594 -22.45779991]
[115.97750092 -9.81140327]
[121.60843658 4.11014414]
[124.58608246 18.83326721]
[124.80759430 33.85683060]
[122.26396179 48.66920471]
[117.04036713 62.76567078]
[109.31333923 75.66564178]
[99.34477234 86.92903137]
[109.01210785 98.39823151]
[119.13058472 109.47145844]
[132.01490784 101.70059967]
[146.16320801 96.59443665]
[161.03109741 94.34746552]
[176.04685974 95.04419708]
[190.63348389 98.65596771]
[204.23078918 105.04216003]
[216.31698608 113.95563507]
[226.42866516 125.05229187]
[234.17857361 137.90440369]
[239.27047729 152.01702881]
[241.51042175 166.84713745]
[240.81416321 181.82449341]
[237.21035767 196.37351990]
[230.83930969 209.93551636]
[221.94758606 221.99003601]
[232.06605530 233.06326294]
[242.18453979 244.13648987]
[257.20544434 249.10467529]
[260.07901001 263.71945190]
[270.19750977 274.79269409]
[280.31597900 285.86593628]
[290.43444824 296.93914795]
[300.55291748 308.01239014]
[310.67141724 319.08563232]
[320.78988647 330.15884399]
[330.90835571 341.23208618]
[341.02682495 352.30532837]
[351.14529419 363.37854004]
[361.26379395 374.45178223]
[373.80856323 366.17077637]
[387.49438477 359.95428467]
[401.98422241 355.95541382]
[416.92123413 354.27255249]
[431.93762207 354.94723511]
[446.66354370 357.96279907]
[460.73638916 363.24499512]
[473.80957031 370.66375732]
[485.56121826 380.03637695]
[495.70184326 391.13201904]
[503.98181152 403.67749023]
[510.19717407 417.36383057]
[514.19488525 431.85400391]
[515.87646484 446.79116821]
[515.20056152 461.80746460]
[512.18377686 476.53314209]
[506.90042114 490.60556030]
[499.48059082 503.67813110]
[490.10702515 515.42901611]
[479.01052856 525.56872559]
[466.46435547 533.84765625]
[452.77749634 540.06188965]
[438.28701782 544.05841064]
[423.34973145 545.73876953]
[408.33346558 545.06158447]
[393.60803223 542.04357910]
[379.53607178 536.75909424]
[366.46408081 529.33819580]
[354.71401978 519.96362305]
[344.57519531 508.86630249]
[336.29730225 496.31945801]
[330.08419800 482.63208008]
[326.08889771 468.14126587]
[324.40975952 453.20382690]
[325.08816528 438.18762207]
[328.10736084 423.46246338]
[333.39303589 409.39093018]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 119]
[2 118]
[3 117]
[4 116]
[5 115]
[6 114]
[7 113]
[8 112]
[9 111]
[10 110]
[11 109]
[13 107]
[14 106]
[15 105]
[30 90]
[31 89]
[36 88]
[52 72]
[53 71]
[54 70]
[55 69]
[56 68]
[58 66]
[59 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
