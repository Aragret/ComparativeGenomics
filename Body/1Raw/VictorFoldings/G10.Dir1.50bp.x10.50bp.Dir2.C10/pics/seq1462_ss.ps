%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCAGAACACUACGAGCCACAGCUUAAAACUCAAAGGACCUGGCGGUGCUUCAUAUCCCUCUAGAxxxxxxxxxxGGUCAAGGUGUAGCCCAUGAGGUGGCAAGAAAUGGGCUACAUUUUCUACCCCAGAAAACUACGACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 250.32380676]
[92.50000000 235.32380676]
[92.50000000 220.32380676]
[92.50000000 205.32380676]
[92.50000000 190.32380676]
[92.50000000 175.32380676]
[92.50000000 160.32380676]
[92.50000000 145.32380676]
[92.50000000 130.32380676]
[92.50000000 115.32379913]
[85.39505005 112.92177582]
[71.18515778 108.11772919]
[64.08020782 105.71570587]
[54.97820663 117.63852692]
[53.41562271 133.96305847]
[38.38655853 140.52500916]
[25.35162163 130.57400513]
[27.72004318 114.34677887]
[43.05538940 108.53652191]
[52.15739441 96.61370087]
[47.43173218 90.78977203]
[32.61874008 93.15095520]
[37.98041534 79.14191437]
[33.25475693 73.31798553]
[19.71278954 79.76896667]
[6.17082262 86.21994781]
[-2.67359972 100.02966309]
[-19.04069328 99.00482941]
[-26.09339714 84.19971466]
[-16.57649231 70.84455109]
[-0.28015548 72.67797852]
[13.26181221 66.22699738]
[26.80377960 59.77602005]
[64.60671997 68.91384888]
[93.68409729 91.37177277]
[95.16357422 76.44491577]
[96.64305115 61.51805115]
[98.12252045 46.59119034]
[91.34572601 49.92010498]
[83.32806396 51.48684311]
[74.48191833 50.99410248]
[65.28022003 48.23471069]
[56.23772049 43.10289001]
[42.82584763 36.38562012]
[29.41397667 29.66835022]
[13.60999870 30.40649605]
[5.69513178 17.78888321]
[-7.71673918 11.07161331]
[-21.12861061 4.35434389]
[-37.45798874 5.86544561]
[-46.70917511 -7.67514467]
[-39.36534119 -22.33802795]
[-22.98119545 -23.03928757]
[-14.41134071 -9.05752754]
[-0.99946952 -2.34025764]
[12.41240120 4.37701178]
[27.25707245 3.15840149]
[36.13124466 16.25647926]
[49.54311752 22.97374725]
[62.95498657 29.69101715]
[69.33620453 25.75019073]
[56.12923050 18.63851357]
[55.68454742 3.64510655]
[68.44683075 -4.23678350]
[81.65393066 2.87464929]
[82.09862518 17.86853600]
[88.47984314 13.92770863]
[88.47984314 -1.07229125]
[88.47984314 -16.07229042]
[73.98232269 -20.31476974]
[61.26804352 -28.47098160]
[51.36769485 -39.87973785]
[45.08385086 -53.61618805]
[42.92591858 -68.56677246]
[45.06883240 -83.51951599]
[51.33887100 -97.26227570]
[61.22775269 -108.68096924]
[73.93383026 -116.84995270]
[88.42707825 -121.10699463]
[103.53260040 -121.10699463]
[118.02584839 -116.84995270]
[130.73193359 -108.68096924]
[140.62080383 -97.26227570]
[146.89085388 -83.51951599]
[149.03376770 -68.56677246]
[146.87582397 -53.61618805]
[140.59197998 -39.87973785]
[130.69163513 -28.47098160]
[117.97736359 -20.31476974]
[103.47984314 -16.07229042]
[103.47984314 -1.07229125]
[103.47984314 13.92770863]
[116.00310516 22.18409538]
[129.78935242 16.27314949]
[143.57560730 10.36220551]
[157.36186218 4.45126104]
[171.14810181 -1.45968354]
[184.93435669 -7.37062836]
[198.72061157 -13.28157330]
[212.50686646 -19.19251823]
[226.29312134 -25.10346222]
[240.07936096 -31.01440620]
[240.24778748 -46.24239349]
[246.60133362 -60.08263397]
[258.03921509 -70.13722992]
[272.57974243 -74.66416168]
[287.70367432 -72.87910461]
[300.79071045 -65.09133911]
[309.57345581 -52.65013885]
[312.53021240 -37.71101379]
[309.14871216 -22.86226082]
[300.01486206 -10.67651558]
[286.71109009 -3.26503277]
[271.54241943 -1.91189647]
[257.13687134 -6.85154533]
[245.99031067 -17.22815514]
[232.20405579 -11.31721020]
[218.41780090 -5.40626621]
[204.63156128 0.50467867]
[190.84530640 6.41562319]
[177.05905151 12.32656765]
[163.27279663 18.23751259]
[149.48655701 24.14845657]
[135.70030212 30.05940247]
[121.91404724 35.97034836]
[113.04938507 48.07066727]
[111.56990814 62.99752426]
[110.09043121 77.92438507]
[108.61096191 92.85124969]
[114.66666412 79.12796021]
[124.41817474 67.73024750]
[137.03912354 59.62397385]
[151.45996094 55.49610138]
[166.45863342 55.69643784]
[180.76406860 60.20800781]
[193.16400146 68.64848328]
[202.60760498 80.30259705]
[208.29461670 94.18272400]
[209.74307251 109.11262512]
[206.83023071 123.82708740]
[199.80294800 137.07916260]
[189.25672913 147.74580383]
[176.08531189 154.92309570]
[161.40486145 158.00282288]
[146.45947266 156.72396851]
[132.51567078 151.19493103]
[120.75508881 141.88424683]
[112.17436981 129.58094788]
[107.50000000 115.32379913]
[107.50000000 130.32380676]
[107.50000000 145.32380676]
[107.50000000 160.32380676]
[107.50000000 175.32380676]
[107.50000000 190.32380676]
[107.50000000 205.32380676]
[107.50000000 220.32380676]
[107.50000000 235.32380676]
[107.50000000 250.32380676]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 158]
[2 157]
[3 156]
[4 155]
[5 154]
[6 153]
[7 152]
[8 151]
[9 150]
[10 149]
[13 20]
[14 19]
[24 33]
[25 32]
[26 31]
[35 129]
[36 128]
[37 127]
[38 126]
[43 60]
[44 59]
[45 58]
[47 56]
[48 55]
[49 54]
[67 92]
[68 91]
[69 90]
[93 125]
[94 124]
[95 123]
[96 122]
[97 121]
[98 120]
[99 119]
[100 118]
[101 117]
[102 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
