%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUGAGCCCUAUCUAUUACUCUCAUCGCUACCUCCCUGACAAGCGCCUAUAGCACUCGAAxxxxxxxxxxGCCCAUAAUCAUACAAAGCCCCCGCACCAAUAGGAUCCUCCCGAAUCAACCCUGACCCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.48880768 273.89398193]
[95.48880768 258.89398193]
[95.48880768 243.89398193]
[95.48880768 228.89398193]
[95.48880768 213.89398193]
[95.48880768 198.89398193]
[95.48880768 183.89398193]
[95.48880768 168.89398193]
[95.48880768 153.89398193]
[95.48880768 138.89398193]
[89.02552032 133.82363892]
[84.33946991 127.86508179]
[81.50178528 121.50858307]
[69.06234741 129.89071655]
[56.62290192 138.27287292]
[44.18346405 146.65501404]
[47.24143982 161.54518127]
[44.36351395 176.47119141]
[35.98854446 189.15695190]
[23.39365387 197.66795349]
[8.49947166 200.70634460]
[-6.42274570 197.80877686]
[-19.09747124 189.41712952]
[-27.59189796 176.81105042]
[-30.61069107 161.91288757]
[-27.69350433 146.99449158]
[-19.28518867 134.33082581]
[-6.66794968 125.85298157]
[8.23417377 122.85379028]
[23.14871788 125.79060364]
[35.80131912 134.21557617]
[48.24076080 125.83342743]
[60.68020248 117.45128632]
[73.11964417 109.06913757]
[69.35521698 95.98223114]
[72.13726044 81.50032043]
[57.91048431 76.74650574]
[43.68370438 71.99269104]
[29.45692635 67.23887634]
[18.85471153 78.21866608]
[4.53551960 83.50292969]
[-10.65756512 82.04248047]
[-23.70794487 74.12728119]
[-32.02445602 61.32891083]
[-33.95585251 46.18848419]
[-29.11865044 31.71215248]
[-18.47327995 20.77419662]
[-4.13338995 15.54635811]
[11.05382633 17.06662750]
[24.07293510 25.03315544]
[32.33898163 37.86418152]
[34.21073914 53.01209259]
[48.43751907 57.76590729]
[62.66429901 62.51972198]
[76.89107513 67.27353668]
[90.54731750 61.06813049]
[96.32359314 47.22491455]
[102.09986115 33.38169479]
[107.87613678 19.53847885]
[113.65241241 5.69526052]
[100.60661316 -1.74697483]
[88.57429504 -10.73601437]
[77.73784637 -21.13558769]
[68.26155853 -32.78803635]
[60.28908920 -45.51671982]
[53.94129181 -59.12866592]
[49.31440353 -73.41752625]
[46.47856140 -88.16667938]
[45.47676086 -103.15254211]
[46.32418442 -118.14792633]
[49.00798798 -132.92550659]
[53.48748779 -147.26124573]
[59.69477081 -160.93785095]
[67.53574371 -173.74795532]
[76.89153290 -185.49737549]
[87.62030029 -196.00798035]
[99.55941772 -205.12045288]
[112.52788544 -212.69664001]
[126.32909393 -218.62168884]
[140.75382996 -222.80577087]
[155.58341980 -225.18547058]
[170.59304810 -225.72470093]
[185.55516052 -224.41529846]
[200.24296570 -221.27708435]
[214.43376160 -216.35766602]
[227.91244507 -209.73161316]
[240.47468567 -201.49937439]
[251.93002319 -191.78573608]
[262.10482788 -180.73796082]
[270.84481812 -168.52352905]
[278.01748657 -155.32762146]
[283.51416016 -141.35026550]
[287.25146484 -126.80337524]
[289.17276001 -111.90746307]
[289.24890137 -96.88834381]
[287.47875977 -81.97371674]
[283.88912964 -67.38967896]
[278.53448486 -53.35731125]
[271.49594116 -40.08935165]
[262.88024902 -27.78693581]
[252.81800842 -16.63656616]
[241.46174622 -6.80727720]
[228.98362732 1.55191982]
[215.57281494 8.31430149]
[201.43261719 13.37735271]
[186.77738953 16.66431808]
[171.82931519 18.12537003]
[156.81500244 17.73835564]
[141.96205139 15.50914669]
[127.49562836 11.47153282]
[121.71935272 25.31475067]
[115.94308472 39.15797043]
[110.16680908 53.00118637]
[104.39053345 66.84440613]
[129.18368530 78.41311646]
[138.62036133 106.44670105]
[153.03257751 110.60458374]
[167.71525574 104.13940430]
[181.85696411 111.71511841]
[184.60940552 127.52030182]
[173.86112976 139.43055725]
[157.85729980 138.30935669]
[148.87469482 125.01679993]
[134.46247864 120.85891724]
[128.46905518 125.36768341]
[139.12356567 135.92614746]
[149.77807617 146.48463440]
[160.43258667 157.04310608]
[171.08709717 167.60157776]
[184.38369751 174.54425049]
[190.46990967 188.25402832]
[186.70071411 202.77273560]
[174.71417236 211.79066467]
[159.71955872 211.38867188]
[148.23342896 201.74147034]
[145.24775696 187.04016113]
[138.05636597 173.87641907]
[130.86499023 160.71269226]
[123.67360687 147.54895020]
[116.48222351 134.38520813]
[110.48880768 138.89398193]
[110.48880768 153.89398193]
[110.48880768 168.89398193]
[110.48880768 183.89398193]
[110.48880768 198.89398193]
[110.48880768 213.89398193]
[110.48880768 228.89398193]
[110.48880768 243.89398193]
[110.48880768 258.89398193]
[110.48880768 273.89398193]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[13 34]
[14 33]
[15 32]
[16 31]
[36 55]
[37 54]
[38 53]
[39 52]
[56 114]
[57 113]
[58 112]
[59 111]
[60 110]
[116 124]
[117 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
