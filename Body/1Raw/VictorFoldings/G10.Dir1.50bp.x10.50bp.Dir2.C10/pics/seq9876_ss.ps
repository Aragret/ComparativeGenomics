%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAACAACCCCCCUCCUAAUACUAACUACCUGACUCCUACCCCUCACAAUCAUGGCAAGCCAxxxxxxxxxxUAUUGCAGCCCUAGCAACACUCCACCUCCUAUUCUUGCACGAAACGGGAUCAAACAACCCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[3.55984831 295.00119019]
[-10.54509735 287.36581421]
[-18.60815239 300.01443481]
[-26.67120743 312.66302490]
[-34.73426437 325.31164551]
[-42.79731750 337.96023560]
[-50.86037445 350.60882568]
[-58.92342758 363.25744629]
[-66.98648071 375.90603638]
[-75.04953766 388.55465698]
[-70.17916870 403.41442871]
[-76.04788971 417.90899658]
[-89.88466644 425.19442749]
[-105.15620422 421.83078003]
[-114.65174866 409.40625000]
[-113.88778687 393.78735352]
[-103.22504425 382.34881592]
[-87.69814301 380.49157715]
[-79.63508606 367.84298706]
[-71.57202911 355.19439697]
[-63.50897598 342.54577637]
[-55.44591904 329.89718628]
[-47.38286591 317.24856567]
[-39.31980896 304.59997559]
[-31.25675583 291.95138550]
[-23.19370079 279.30276489]
[-32.41956711 272.60134888]
[-41.28162003 265.42575073]
[-49.75551224 257.79562378]
[-57.81795883 249.73197937]
[-65.44681549 241.25694275]
[-72.62110901 232.39381409]
[-79.32114410 223.16694641]
[-85.52851105 213.60169983]
[-91.22614288 203.72431946]
[-96.39839172 193.56196594]
[-101.03105927 183.14256287]
[-105.11139679 172.49473572]
[-108.62821198 161.64773560]
[-111.57183075 150.63134766]
[-113.93416595 139.47586060]
[-115.70874023 128.21191406]
[-116.89066315 116.87046051]
[-117.47669220 105.48265839]
[-117.46522522 94.07978821]
[-116.85627747 82.69319153]
[-115.65154266 71.35413361]
[-113.85430908 60.09378433]
[-111.46952820 48.94307327]
[-108.50375366 37.93264008]
[-104.96512604 27.09272957]
[-100.86336517 16.45312881]
[-96.20975494 6.04306650]
[-91.01705933 -4.10885477]
[-85.29956818 -13.97474384]
[-79.07297516 -23.52749443]
[-72.35438538 -32.74086380]
[-65.16226959 -41.58953476]
[-57.51638031 -50.04919815]
[-49.43772507 -58.09661102]
[-40.94850159 -65.70966339]
[-32.07202911 -72.86743927]
[-22.83269691 -79.55027008]
[-13.25588989 -85.73980713]
[-3.36792040 -91.41902924]
[6.80404568 -96.57234192]
[17.23206139 -101.18558502]
[27.88747597 -105.24608612]
[38.74101639 -108.74268341]
[49.76285934 -111.66577911]
[60.92272949 -114.00733185]
[72.18995667 -115.76091766]
[83.53359222 -116.92171478]
[94.92247009 -117.48652649]
[106.32529449 -117.45381927]
[117.71074677 -116.82366180]
[129.04753113 -115.59780121]
[140.30451965 -113.77960205]
[151.45075989 -111.37405396]
[162.45565796 -108.38777161]
[173.28895569 -104.82895660]
[183.92089844 -100.70738220]
[194.32228088 -96.03438568]
[204.46450806 -90.82279205]
[214.31973267 -85.08692932]
[222.63746643 -97.56951904]
[230.95521545 -110.05211639]
[239.27296448 -122.53470612]
[234.70475769 -137.49015808]
[240.86604309 -151.86279297]
[254.84762573 -158.86630249]
[270.04785156 -155.19383240]
[279.28964233 -142.57940674]
[278.20928955 -126.97919464]
[267.31692505 -115.75911713]
[251.75555420 -114.21695709]
[243.43780518 -101.73436737]
[235.12007141 -89.25177765]
[226.80232239 -76.76918030]
[244.89147949 -62.27332687]
[261.33551025 -45.93499756]
[275.94772339 -27.93970108]
[288.56222534 -8.49176216]
[299.03573608 12.18800640]
[307.24938965 33.86480331]
[313.10989380 56.29250717]
[316.55072021 79.21647644]
[317.53280640 102.37641907]
[316.04501343 125.50938416]
[330.87203979 127.78079987]
[345.69906616 130.05221558]
[360.52609253 132.32362366]
[377.48892212 125.22845459]
[390.76889038 136.66221619]
[405.63891602 138.63265991]
[420.50891113 140.60311890]
[432.90142822 130.79490662]
[448.58984375 132.70524597]
[458.26647949 145.20077515]
[456.19036865 160.86810303]
[443.59326172 170.41209412]
[427.94873047 168.17045593]
[418.53848267 155.47312927]
[403.66845703 153.50267029]
[388.79843140 151.53222656]
[378.97207642 158.64985657]
[366.53451538 157.09042358]
[358.25466919 147.15065002]
[343.42764282 144.87924194]
[328.60061646 142.60781860]
[313.77359009 140.33641052]
[310.22073364 155.97691345]
[305.52520752 171.31315613]
[299.71249390 186.26177979]
[292.81420898 200.74150085]
[284.86788940 214.67361450]
[275.91665649 227.98242188]
[266.00921631 240.59555054]
[255.19941711 252.44445801]
[243.54600525 263.46472168]
[231.11231995 273.59646606]
[217.96595764 282.78457642]
[204.17837524 290.97915649]
[189.82450867 298.13562012]
[174.98239136 304.21511841]
[159.73269653 309.18453979]
[144.15832520 313.01693726]
[128.34391785 315.69143677]
[112.37544250 317.19351196]
[96.33969116 317.51498413]
[80.32384491 316.65414429]
[64.41494751 314.61566162]
[48.69948196 311.41058350]
[33.26286697 307.05633545]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 26]
[3 25]
[4 24]
[5 23]
[6 22]
[7 21]
[8 20]
[9 19]
[10 18]
[85 99]
[86 98]
[87 97]
[88 96]
[109 131]
[110 130]
[111 129]
[112 128]
[114 125]
[115 124]
[116 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
