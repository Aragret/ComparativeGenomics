%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAAUCACCACGAUCAAAAGGAACAAGCAUCAAGCACGCAGCAAUGCAGCUCAAAACGCUUxxxxxxxxxxAGACCUAACCUGACUAGAAAAGCUAUUACCUAAAACAAUUUCACAGCACCAAAUCUCCACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 293.23071289]
[92.50000000 278.23071289]
[92.50000000 263.23071289]
[92.50000000 248.23069763]
[92.50000000 233.23069763]
[92.50000000 218.23069763]
[92.50000000 203.23069763]
[92.50000000 188.23069763]
[92.50000000 173.23069763]
[92.50000000 158.23069763]
[83.07849884 156.22035217]
[74.11257172 152.69635010]
[65.84362793 147.75360107]
[55.63014603 158.73927307]
[45.41666412 169.72492981]
[44.56138229 185.74517822]
[31.41981888 194.94728088]
[16.07305717 190.27220154]
[10.29381847 175.30622864]
[18.51544189 161.53001404]
[34.43099976 159.51145935]
[44.64448166 148.52578735]
[54.85795975 137.54013062]
[46.40032196 123.96120453]
[41.92205811 108.60334778]
[41.75564575 92.60675049]
[45.91344070 77.15905762]
[54.08675385 63.40712357]
[43.64694214 52.63631439]
[33.20713043 41.86550522]
[20.30489922 40.87237167]
[11.82934093 31.63203239]
[11.94519997 19.49556160]
[0.54417944 9.74791050]
[-11.89526081 1.36576724]
[-24.33470154 -7.01637602]
[-36.77414322 -15.39851952]
[-52.32077789 -7.32399607]
[-69.72901917 -8.19155025]
[-84.24745178 -17.67488670]
[-91.95859528 -33.10835266]
[-90.83575439 -50.23562622]
[-103.61311340 -58.09305191]
[-116.39047241 -65.95047760]
[-129.13806152 -63.72497177]
[-139.63391113 -70.58470154]
[-142.52029419 -82.37351227]
[-155.13142395 -90.49505615]
[-167.74255371 -98.61660004]
[-184.13972473 -98.87151337]
[-191.88005066 -113.32901001]
[-183.00096130 -127.11646271]
[-166.63648987 -126.05051422]
[-159.62101746 -111.22772980]
[-147.00988770 -103.10618591]
[-134.39875793 -94.98464203]
[-116.87778473 -95.10908508]
[-108.53304291 -78.72783661]
[-95.75568390 -70.87040710]
[-82.97833252 -63.01298523]
[-72.51454163 -70.21775818]
[-60.05252457 -72.91796112]
[-47.45270157 -70.67407227]
[-36.60992050 -63.78735733]
[-29.16851616 -53.26002502]
[-26.27296829 -40.64947891]
[-28.39199829 -27.83795929]
[-15.95255756 -19.45581627]
[-3.51311755 -11.07367325]
[8.92632294 -2.69152975]
[4.02298021 -16.86746788]
[6.14204121 -31.71703339]
[14.81478882 -43.95563889]
[28.12289238 -50.87621689]
[43.12271881 -50.94799805]
[56.49644852 -44.15510941]
[65.28593445 -32.00007248]
[67.54701996 -17.17146683]
[62.77958298 -2.94924855]
[52.03812790 7.52076149]
[37.69856644 11.92269325]
[22.93086433 9.28208256]
[39.93935776 13.49053955]
[43.97793961 31.42569351]
[54.41775131 42.19650269]
[64.85756683 52.96731186]
[85.13182831 43.20209122]
[107.59036255 41.78100586]
[128.93380737 48.91282272]
[146.02661133 63.54981232]
[156.35768127 83.54166412]
[171.17543030 81.21056366]
[179.22772217 76.75943756]
[186.32540894 78.98843384]
[201.18846130 76.96610260]
[215.44245911 65.35561371]
[231.41807556 72.55142975]
[246.23582458 70.22032166]
[261.05358887 67.88922119]
[275.87133789 65.55811310]
[278.23541260 50.61601257]
[285.10293579 37.13668060]
[295.80108643 26.44069099]
[309.28182983 19.57592583]
[324.22442627 17.21492195]
[339.16491699 19.58898926]
[352.63964844 26.46554184]
[363.32849121 37.17088318]
[370.18420410 50.65621185]
[372.53518677 65.60037994]
[370.15112305 80.53929901]
[363.26553345 94.00941467]
[352.55303955 104.69105530]
[339.06311035 111.53775024]
[324.11737061 113.87872314]
[309.18005371 111.48463440]
[295.71456909 104.59003448]
[285.04010010 93.87037659]
[278.20245361 80.37586975]
[263.38470459 82.70697784]
[248.56694031 85.03807831]
[233.74917603 87.36918640]
[226.34403992 96.98538208]
[213.97108459 99.01734161]
[203.21080017 91.82914734]
[188.34774780 93.85148621]
[173.50654602 96.02832031]
[158.68878174 98.35942078]
[158.49884033 104.99504089]
[157.56105042 111.56680298]
[155.88739014 117.99068451]
[153.49925232 124.18458557]
[150.42720032 130.06930542]
[146.71046448 135.56961060]
[142.39659119 140.61518860]
[137.54071045 145.14155579]
[132.20491028 149.09082031]
[126.45739746 152.41250610]
[120.37165070 155.06414795]
[114.02548218 157.01184082]
[107.50000000 158.23069763]
[107.50000000 173.23069763]
[107.50000000 188.23069763]
[107.50000000 203.23069763]
[107.50000000 218.23069763]
[107.50000000 233.23069763]
[107.50000000 248.23069763]
[107.50000000 263.23071289]
[107.50000000 278.23071289]
[107.50000000 293.23071289]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[13 23]
[14 22]
[15 21]
[28 86]
[29 85]
[30 84]
[33 82]
[34 70]
[35 69]
[36 68]
[37 67]
[42 60]
[43 59]
[44 58]
[47 56]
[48 55]
[49 54]
[91 128]
[92 127]
[94 126]
[95 125]
[97 122]
[98 121]
[99 120]
[100 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
