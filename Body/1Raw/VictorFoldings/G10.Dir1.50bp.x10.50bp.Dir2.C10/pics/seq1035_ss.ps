%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAAAGGAACAAGCAUCAAGCACGCAGCAAUGCAGCUCAAAACGCUUAGCCUAGCCACACCxxxxxxxxxxUUUGCCCACAGAACCCUCUAAAUCCCCUUGUAAAUUUAACUGUUAGUCCAAAGAGGAACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[110.70652008 269.49453735]
[110.70652008 254.49453735]
[110.70652008 239.49453735]
[110.70652008 224.49453735]
[110.70652008 209.49453735]
[110.70652008 194.49453735]
[110.70652008 179.49453735]
[110.70652008 164.49453735]
[110.70652008 149.49453735]
[110.70652008 134.49453735]
[96.53256226 134.34535217]
[84.15315247 128.85713196]
[75.38998413 119.37889862]
[71.31520081 107.79881287]
[56.31600952 107.95484924]
[41.31682205 108.11088562]
[33.03310013 118.78035736]
[20.29648781 122.65419769]
[7.84513235 118.52648163]
[0.17640235 108.12516022]
[-14.82278633 107.96912384]
[-29.82197380 107.81308746]
[-44.82116318 107.65705109]
[-53.36138153 122.95281982]
[-68.37566376 131.80554199]
[-85.71677399 131.87370300]
[-100.64683533 123.22808075]
[-109.13180542 108.30797577]
[-124.12449646 108.77601624]
[-139.11720276 109.24405670]
[-148.53787231 118.11561584]
[-161.07649231 118.16162872]
[-169.97245789 109.90515900]
[-184.97164917 110.06119537]
[-199.97082520 110.21723175]
[-213.80375671 119.02530670]
[-228.22126770 111.21073151]
[-228.39184570 94.81247711]
[-214.14004517 86.69965363]
[-200.12686157 95.21804810]
[-185.12768555 95.06201172]
[-170.12849426 94.90596771]
[-155.56581116 85.16284943]
[-139.58523560 94.25135803]
[-124.59254456 93.78331757]
[-109.59984589 93.31527710]
[-104.82563019 81.54214478]
[-95.90457916 72.43128967]
[-84.14842987 67.37326050]
[-71.30527496 67.15892792]
[-59.29958344 71.85601044]
[-49.94388962 80.79363251]
[-44.66512680 92.65786743]
[-29.66593742 92.81390381]
[-14.66674995 92.96994019]
[0.33243892 93.12597656]
[11.79969215 80.86383820]
[28.92394447 80.65388489]
[41.16078568 93.11170197]
[56.15997314 92.95566559]
[71.15916443 92.79962921]
[78.22928619 79.75955963]
[90.72042084 71.75944519]
[89.78479004 56.78865814]
[75.08692932 53.25817871]
[62.08352661 45.55084991]
[51.93083954 34.35199356]
[45.53163528 20.65741158]
[43.45492554 5.68481398]
[45.88537598 -9.23444653]
[52.60686493 -22.77375793]
[63.02172852 -33.72921753]
[76.20388031 -41.12666702]
[90.98117065 -44.30833435]
[106.03961945 -42.99131012]
[120.04023743 -37.29269791]
[131.73809814 -27.71921730]
[140.09303284 -15.12213516]
[144.36212158 -0.62157577]
[144.16577148 14.49308109]
[139.52145386 28.87785149]
[130.84210205 41.25365067]
[118.89950562 50.52002716]
[104.75558472 55.85302734]
[105.69120789 70.82382202]
[119.84724426 75.08142853]
[131.05757141 86.19553375]
[136.04917908 102.22687531]
[150.62188721 98.67211151]
[158.00694275 88.04597473]
[170.26567078 85.41104889]
[180.67520142 91.65196228]
[195.31869507 88.40113831]
[209.96220398 85.15031433]
[214.51707458 72.10223389]
[224.85359192 63.09282684]
[238.18879700 60.40528870]
[251.00215149 64.63958740]
[259.96496582 74.58262634]
[274.67291260 71.63714600]
[289.38088989 68.69165802]
[304.08883667 65.74617767]
[318.79681396 62.80069733]
[323.63876343 48.22499847]
[335.13052368 38.03505325]
[350.18087769 34.97190475]
[364.74130249 39.85952759]
[374.89520264 51.38317108]
[377.91113281 66.44303894]
[372.97790527 80.98809814]
[361.42248535 91.10580444]
[346.35324097 94.07453918]
[331.82373047 89.09573364]
[321.74227905 77.50865936]
[307.03433228 80.45413971]
[292.32635498 83.39962006]
[277.61840820 86.34510803]
[262.91043091 89.29058838]
[256.56283569 104.39730835]
[242.33105469 112.84850311]
[225.69902039 111.15833282]
[213.21302795 99.79381561]
[198.56951904 103.04463959]
[183.92602539 106.29546356]
[171.68988037 118.83646393]
[154.17665100 113.24481201]
[139.60394287 116.79957581]
[154.09693909 120.66650391]
[168.88722229 118.16699982]
[183.34510803 122.16320801]
[194.75219727 131.90376282]
[200.96371460 145.55722046]
[200.81178284 160.55644226]
[194.32495117 174.08126831]
[182.72288513 183.58874512]
[168.18701172 187.29125977]
[153.45039368 184.49266052]
[141.28382874 175.71913147]
[133.97488403 162.62031555]
[132.89790344 147.65827942]
[125.70652008 134.49453735]
[125.70652008 149.49453735]
[125.70652008 164.49453735]
[125.70652008 179.49453735]
[125.70652008 194.49453735]
[125.70652008 209.49453735]
[125.70652008 224.49453735]
[125.70652008 239.49453735]
[125.70652008 254.49453735]
[125.70652008 269.49453735]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[14 61]
[15 60]
[16 59]
[20 56]
[21 55]
[22 54]
[23 53]
[28 46]
[29 45]
[30 44]
[33 42]
[34 41]
[35 40]
[63 85]
[64 84]
[88 127]
[89 126]
[92 124]
[93 123]
[94 122]
[99 118]
[100 117]
[101 116]
[102 115]
[103 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
