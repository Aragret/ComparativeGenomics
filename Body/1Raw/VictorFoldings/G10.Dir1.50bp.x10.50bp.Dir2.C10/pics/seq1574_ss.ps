%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACCACCUCUUGCUCAGCCUAUAUACCGCCAUCUUCAGCAAACCCUGAUGAAGGCUACAAxxxxxxxxxxAAUUAAUUCCCCUAAAAAUCUUUGAAAUAGGGCCCGUAUUUACCCUAUAGCACCCCCUCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[105.63980103 278.85906982]
[105.32775116 263.86230469]
[105.01569366 248.86555481]
[104.70363617 233.86880493]
[104.39157867 218.87205505]
[104.07952118 203.87530518]
[103.76746368 188.87854004]
[103.45541382 173.88179016]
[103.14335632 158.88504028]
[88.96679688 153.98348999]
[79.45843506 165.58482361]
[69.95008087 177.18617249]
[74.00790405 192.16328430]
[68.45597839 206.65312195]
[55.42913437 215.08407593]
[39.93645859 214.21426392]
[27.93519783 204.37812805]
[24.04008675 189.35789490]
[29.74887085 174.92912292]
[42.86640930 166.63998413]
[58.34873962 167.67781067]
[67.85709381 156.07647705]
[77.36545563 144.47512817]
[65.06919098 128.76963806]
[60.95508194 111.13969421]
[64.36550903 95.22755432]
[50.24070740 90.17879486]
[36.11590576 85.13004303]
[21.99110222 80.08128357]
[7.86629915 75.03253174]
[16.12017250 87.55744934]
[17.73580170 102.47018433]
[12.35582924 116.47218323]
[1.17025292 126.46632385]
[-13.34678078 130.24200439]
[-27.98423767 126.96406555]
[-39.50444794 117.35756683]
[-45.35924530 103.54737854]
[-44.25360489 88.58818054]
[-36.43208313 75.78881836]
[-23.62472534 67.98037720]
[-8.66245174 66.89035797]
[-21.27358055 58.76881409]
[-37.06521606 57.80197525]
[-43.57631302 44.40589523]
[-56.18744278 36.28435516]
[-68.79856873 28.16281128]
[-81.40969849 20.04126930]
[-96.80099487 23.63064194]
[-110.17804718 15.21458912]
[-113.60449219 -0.21379474]
[-105.04747772 -13.50112247]
[-89.58373260 -16.76425743]
[-76.38761902 -8.06724167]
[-73.28815460 7.43014193]
[-60.67702866 15.55168438]
[-48.06589890 23.67322540]
[-35.45477295 31.79476929]
[-20.56516647 32.18070221]
[-13.15203762 46.15768433]
[-0.54090989 54.27922821]
[12.91505527 60.90772629]
[27.03985786 65.95648193]
[41.16466141 71.00524139]
[55.28946304 76.05399323]
[69.41426849 81.10275269]
[86.15518188 66.81997681]
[108.08290100 64.96773529]
[114.43003082 51.37678146]
[120.77716064 37.78583145]
[108.59294128 28.95739365]
[98.29989624 17.98243332]
[90.27011871 5.25769138]
[84.79386139 -8.75684261]
[82.06910706 -23.55455208]
[82.19434357 -38.60050964]
[85.16505432 -53.35081100]
[90.87383270 -67.27224731]
[99.11432648 -79.86155701]
[109.58863831 -90.66365814]
[121.91812897 -99.28804779]
[135.65708923 -105.42297363]
[150.30888367 -108.84664917]
[165.34384155 -109.43531799]
[180.21846008 -107.16769409]
[194.39503479 -102.12576294]
[207.36109924 -94.49177551]
[218.64793396 -84.54169464]
[227.84751892 -72.63522339]
[234.62728882 -59.20275497]
[238.74218750 -44.72987747]
[240.04342651 -29.73977280]
[238.48400879 -14.77432442]
[234.12026978 -0.37452146]
[227.10997009 12.93909073]
[217.70652771 24.68523216]
[206.24987793 34.43928909]
[193.15417480 41.84865952]
[178.89279175 46.64549637]
[163.98129272 48.65639496]
[148.95870972 47.80867004]
[134.36811829 44.13296127]
[128.02098083 57.72391129]
[121.67385101 71.31486511]
[136.62751770 82.47792816]
[145.23101807 101.41715240]
[143.58100891 124.31162262]
[158.34707642 126.95048523]
[173.11312866 129.58935547]
[187.87918091 132.22821045]
[202.64523315 134.86708069]
[217.41128540 137.50595093]
[227.24948120 125.71164703]
[241.67228699 120.43164825]
[256.80004883 123.08625031]
[268.56344604 132.96136475]
[273.79818726 147.40065002]
[271.09619141 162.52000427]
[261.18426514 174.25238037]
[246.72863770 179.44186401]
[231.61782837 176.69248962]
[219.91656494 166.74382019]
[214.77243042 152.27200317]
[200.00637817 149.63313293]
[185.24031067 146.99427795]
[170.47425842 144.35540771]
[155.70820618 141.71653748]
[140.94215393 139.07768250]
[135.24163818 143.95150757]
[146.93493652 153.34655762]
[158.62821960 162.74159241]
[172.95790100 167.17559814]
[180.91744995 179.88958740]
[178.64607239 194.71662903]
[167.24549866 204.46481323]
[152.24562073 204.40576172]
[140.92214966 194.56813049]
[138.76797485 179.72172546]
[131.30430603 166.71043396]
[123.84062195 153.69915771]
[118.14010620 158.57298279]
[118.45216370 173.56973267]
[118.76422119 188.56649780]
[119.07627869 203.56324768]
[119.38833618 218.55999756]
[119.70038605 233.55674744]
[120.01244354 248.55351257]
[120.32450104 263.55026245]
[120.63655853 278.54702759]
[123.22755432 297.75473022]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 23]
[11 22]
[12 21]
[26 66]
[27 65]
[28 64]
[29 63]
[30 62]
[42 61]
[43 60]
[45 58]
[46 57]
[47 56]
[48 55]
[68 104]
[69 103]
[70 102]
[107 128]
[108 127]
[109 126]
[110 125]
[111 124]
[112 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
