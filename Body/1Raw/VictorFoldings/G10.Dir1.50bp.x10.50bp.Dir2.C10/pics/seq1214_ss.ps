%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCACCCCCUCCCCAAUAAAGCUAAAACUCACCUGAGUUGUAAAAAACUCCAGUUGACACAxxxxxxxxxxAACCCCUGUCUUUAGAUUUACAGUCCAAUGCUUCACUCAGCCAUUUUACCUCACCCCCACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[108.27170563 140.37774658]
[101.08919525 153.54632568]
[93.90668488 166.71492004]
[86.72418213 179.88349915]
[79.54167175 193.05207825]
[72.35916138 206.22065735]
[65.17665100 219.38923645]
[57.99414444 232.55783081]
[50.81163406 245.72640991]
[43.62912750 258.89498901]
[41.35292816 275.69543457]
[24.57892609 278.15902710]
[17.56811523 262.72256470]
[30.46054268 251.71247864]
[37.64305115 238.54389954]
[44.82556152 225.37532043]
[52.00806808 212.20674133]
[59.19057846 199.03814697]
[66.37308502 185.86956787]
[73.55559540 172.70098877]
[80.73810577 159.53240967]
[87.92061615 146.36381531]
[95.10312653 133.19523621]
[75.80016327 120.07131958]
[70.69686127 98.84158325]
[80.49156189 81.02889252]
[73.03665161 68.01258087]
[65.58174133 54.99627304]
[58.12682724 41.97996140]
[44.55414963 33.85020065]
[44.94284439 18.96066856]
[37.48793411 5.94435835]
[30.03302574 -7.07195139]
[22.57811546 -20.08826065]
[15.12320518 -33.10456848]
[7.53329659 -46.04262543]
[-0.19078840 -58.90102768]
[-10.51799297 -69.77985382]
[-22.95743370 -78.16199493]
[-35.39687347 -86.54414368]
[-51.16497803 -87.83929443]
[-57.39597702 -101.36792755]
[-69.83541870 -109.75006866]
[-82.27485657 -118.13221741]
[-94.80081940 -126.38450623]
[-107.41194916 -134.50604248]
[-120.02307892 -142.62759399]
[-132.63420105 -150.74913025]
[-148.02549744 -147.15975952]
[-161.40255737 -155.57580566]
[-164.82899475 -171.00419617]
[-156.27198792 -184.29151917]
[-140.80824280 -187.55465698]
[-127.61212158 -178.85763550]
[-124.51266479 -163.36026001]
[-111.90153503 -155.23872375]
[-99.29040527 -147.11717224]
[-86.67927551 -138.99563599]
[-79.30513763 -138.01191711]
[-73.89271545 -130.57165527]
[-61.45327377 -122.18951416]
[-49.01383591 -113.80737305]
[-34.13548279 -113.11176300]
[-27.01473045 -98.98358154]
[-14.57529068 -90.60144043]
[-2.13585019 -82.21929169]
[-8.42428112 -95.83750153]
[-10.88089085 -110.63497162]
[-9.33018398 -125.55460358]
[-3.88294125 -139.53056335]
[5.07170010 -151.56445312]
[16.89403915 -160.79658508]
[30.73951340 -166.56744385]
[45.61903381 -168.46476746]
[60.46964264 -166.35302734]
[74.23043823 -160.38305664]
[85.91838837 -150.98136902]
[94.69852448 -138.81958008]
[99.94361877 -124.76649475]
[101.27896881 -109.82604980]
[98.60917664 -95.06555939]
[92.12497711 -81.53946686]
[82.28958130 -70.21405792]
[69.80561066 -61.89838409]
[55.56488419 -57.18650818]
[40.58473587 -56.41503143]
[25.93531418 -59.63906860]
[12.66761398 -66.62511444]
[20.39169884 -53.76671219]
[26.57207680 -49.62562561]
[28.13951492 -40.55947876]
[35.59442520 -27.54317093]
[43.04933548 -14.52686119]
[50.50424576 -1.51055205]
[57.95915604 11.50575733]
[70.99860382 18.70450592]
[71.14313507 34.52505112]
[78.59804535 47.54136276]
[86.05295563 60.55767059]
[93.50786591 73.57398224]
[102.37787628 71.98282623]
[111.57560730 73.38425446]
[120.08869934 77.81318665]
[126.92089081 84.96217346]
[131.20736694 94.19710541]
[132.32106018 104.61157227]
[129.95712280 115.11534882]
[144.85902405 116.82804108]
[159.76094055 118.54072571]
[174.66284180 120.25341797]
[189.58174133 121.81099701]
[204.51605225 123.21330261]
[216.52577209 112.93991852]
[232.27558899 114.25096893]
[242.42141724 126.36862946]
[240.94392395 142.10369873]
[228.71968079 152.12084961]
[213.00109863 150.47708130]
[203.11375427 138.14761353]
[188.17944336 136.74530029]
[181.18061829 139.26763916]
[172.95014954 135.15531921]
[158.04824829 133.44262695]
[143.14634705 131.72993469]
[128.24444580 130.01725769]
[140.50097656 138.66462708]
[152.75752258 147.31201172]
[165.01406860 155.95938110]
[179.72586060 158.88569641]
[193.27775574 165.31578064]
[204.84933472 174.86033630]
[213.74003601 186.94154358]
[219.41159058 200.82798767]
[221.52066040 215.67897034]
[219.93954468 230.59541321]
[214.76397705 244.67424011]
[206.30728149 257.06311035]
[195.08143616 267.01202393]
[181.76606750 273.91860962]
[167.16731262 277.36477661]
[152.16896057 277.14187622]
[137.67906189 273.26339722]
[124.57481384 265.96414185]
[113.64958954 255.68605042]
[105.56479645 243.05133057]
[100.80989075 228.82492065]
[99.67275238 213.86808777]
[102.22222137 199.08633423]
[108.30204010 185.37773132]
[108.29192352 170.37774658]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 23]
[2 22]
[3 21]
[4 20]
[5 19]
[6 18]
[7 17]
[8 16]
[9 15]
[10 14]
[26 100]
[27 99]
[28 98]
[29 97]
[31 95]
[32 94]
[33 93]
[34 92]
[35 91]
[36 89]
[37 88]
[38 66]
[39 65]
[40 64]
[42 62]
[43 61]
[44 60]
[45 58]
[46 57]
[47 56]
[48 55]
[107 125]
[108 124]
[109 123]
[110 122]
[111 120]
[112 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
