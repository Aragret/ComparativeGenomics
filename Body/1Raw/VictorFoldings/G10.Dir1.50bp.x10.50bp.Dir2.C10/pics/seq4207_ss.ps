%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAACAUAUUUUGUCACCAAGACCCUACUUCUAACCUCCCUGUUCUUAUGAAUUCGAACAGCAUxxxxxxxxxxCUCAGAGUACUUCGAGUCUCCCUUCACCAUUUCCGACGGCAUCUACGGCUCAACAUUUUUUGUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[75.66936493 534.84808350]
[75.66936493 519.84808350]
[75.66936493 504.84805298]
[75.66936493 489.84805298]
[75.66936493 474.84805298]
[75.66936493 459.84805298]
[75.66936493 444.84805298]
[75.66936493 429.84805298]
[75.66936493 414.84805298]
[75.66936493 399.84805298]
[60.93955612 397.11441040]
[46.95918274 391.71914673]
[34.20490265 383.84463501]
[23.11185837 373.75787354]
[14.05882835 361.80123901]
[7.35530138 348.38107300]
[3.23088956 333.95376587]
[1.82746673 319.01028442]
[3.19428849 304.05938721]
[7.28626490 289.61041260]
[13.96544552 276.15585327]
[23.00567245 264.15457153]
[34.10023117 254.01617432]
[46.87226486 246.08702087]
[60.88757324 240.63841248]
[75.66936493 237.85725403]
[75.66936493 222.85725403]
[66.07964325 208.18867493]
[75.34535217 192.30551147]
[75.04522705 177.30851746]
[74.74509430 162.31150818]
[64.86378479 147.83773804]
[73.80983734 131.77235413]
[73.20969391 116.78437042]
[68.48888397 102.54660797]
[60.01548386 90.16915131]
[51.54207611 77.79169464]
[43.06867218 65.41423798]
[25.84235764 72.09365845]
[7.50254440 74.25867462]
[-10.78816223 71.77644348]
[-27.87137985 64.80860901]
[-42.66630554 53.80075073]
[-54.23808670 39.45388794]
[-61.85691071 22.67985153]
[-65.04401398 4.54333305]
[-63.60176468 -13.80570602]
[-57.62593460 -31.20493889]
[-47.49932480 -46.55330276]
[-57.83733749 -57.42185974]
[-68.17534637 -68.29041290]
[-78.51335907 -79.15897369]
[-88.85137177 -90.02752686]
[-99.18938446 -100.89608002]
[-114.10069275 -97.21524048]
[-128.85020447 -101.49860382]
[-139.47039795 -112.59396362]
[-143.10449219 -127.51673126]
[-138.77491760 -142.25276184]
[-127.64631653 -152.83811951]
[-112.71222687 -156.42541504]
[-97.98984528 -152.04966736]
[-87.43942261 -140.88793945]
[-83.89896393 -125.94268799]
[-88.32083130 -111.23409271]
[-77.98281860 -100.36553955]
[-67.64480591 -89.49697876]
[-57.30679321 -78.62842560]
[-46.96878052 -67.75987244]
[-36.63076782 -56.89131546]
[-26.66989708 -63.38491821]
[-15.78440189 -68.17763519]
[-4.26233244 -71.14147949]
[7.59122896 -72.19686890]
[19.46224403 -71.31476593]
[31.03603745 -68.51749420]
[42.00564194 -63.87813187]
[52.07992935 -57.51865387]
[60.99135208 -49.60668564]
[68.50303650 -40.35111237]
[74.41509247 -29.99653625]
[78.56990051 -18.81683922]
[80.85636902 -7.10792637]
[81.21284485 4.82010937]
[79.62882233 16.65119362]
[76.14521027 28.07164383]
[70.85331726 38.77849579]
[63.89242172 48.48753357]
[55.44612885 56.94083405]
[63.91953278 69.31829071]
[72.39293671 81.69574738]
[80.86634064 94.07320404]
[88.99073029 84.77829742]
[100.31705475 82.46195221]
[110.02124786 87.14943695]
[123.65436554 80.89340210]
[137.28749084 74.63736725]
[135.29699707 59.65306473]
[137.81329346 44.74803925]
[144.61260986 31.24764252]
[155.09036255 20.35231781]
[168.31486511 13.03086853]
[183.11022949 9.93431377]
[198.16084290 11.33799839]
[212.12843323 17.11710739]
[223.77098083 26.75776482]
[232.05326843 39.40272903]
[236.23883057 53.92762375]
[235.95549011 69.04090118]
[231.22842407 83.39869690]
[222.47798157 95.72432709]
[210.48225403 104.92181396]
[196.30786133 110.17330933]
[181.21520996 111.01185608]
[166.54631042 107.36289978]
[153.60551453 99.55089569]
[143.54353333 88.27049255]
[129.91040039 94.52652740]
[116.27728271 100.78256226]
[107.84042358 116.38396454]
[88.19768524 116.18422699]
[88.79782867 131.17221069]
[97.74898529 140.50944519]
[97.91017914 153.04156494]
[89.74208832 162.01138306]
[90.04222107 177.00837708]
[90.34235382 192.00537109]
[99.10488892 201.51983643]
[99.01529694 214.05267334]
[90.66936493 222.85725403]
[90.66936493 237.85725403]
[105.45116425 240.63841248]
[119.46646881 246.08702087]
[132.23851013 254.01617432]
[143.33306885 264.15457153]
[152.37329102 276.15585327]
[159.05247498 289.61041260]
[163.14443970 304.05938721]
[164.51126099 319.01028442]
[163.10784912 333.95376587]
[158.98342896 348.38107300]
[152.27990723 361.80123901]
[143.22688293 373.75787354]
[132.13383484 383.84463501]
[119.37955475 391.71914673]
[105.39917755 397.11441040]
[90.66936493 399.84805298]
[90.66936493 414.84805298]
[90.66936493 429.84805298]
[90.66936493 444.84805298]
[90.66936493 459.84805298]
[90.66936493 474.84805298]
[90.66936493 489.84805298]
[90.66936493 504.84805298]
[90.66936493 519.84808350]
[90.66936493 534.84808350]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 156]
[2 155]
[3 154]
[4 153]
[5 152]
[6 151]
[7 150]
[8 149]
[9 148]
[10 147]
[26 131]
[27 130]
[29 127]
[30 126]
[31 125]
[33 122]
[34 121]
[35 92]
[36 91]
[37 90]
[38 89]
[49 70]
[50 69]
[51 68]
[52 67]
[53 66]
[54 65]
[95 119]
[96 118]
[97 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
