%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCAAUAACUUGACCAACGGAACAAGUUACCCUAGGGAUAACAGCGCAAUCCUAUUCUAGAxxxxxxxxxxAAACAUUCUACUACUCACUCUCACUGCCCAAGAACUAUCAAACUCCUGAGCCAACAACUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[78.56182861 268.01657104]
[78.56182861 253.01658630]
[78.56182861 238.01658630]
[78.56182861 223.01658630]
[78.56182861 208.01658630]
[78.56182861 193.01658630]
[78.56182861 178.01658630]
[78.56182861 163.01658630]
[78.56182861 148.01658630]
[78.56182861 133.01658630]
[72.17314911 129.08786011]
[64.31551361 141.86509705]
[51.53841400 134.00724792]
[59.39579391 121.23043823]
[53.00711441 117.30172729]
[39.62083054 124.06983948]
[26.23454285 130.83795166]
[12.84825897 137.60607910]
[-0.53802598 144.37419128]
[-13.92431068 151.14230347]
[-27.31059647 157.91041565]
[-36.98814392 173.54130554]
[-54.43813324 171.96087646]
[-67.68071747 179.00601196]
[-78.82430267 191.78320312]
[-94.18701935 184.61219788]
[-91.54907990 167.86473083]
[-74.72585297 165.76342773]
[-61.48326874 158.71829224]
[-57.62693405 147.21020508]
[-46.59718323 141.24668884]
[-34.07870865 144.52412415]
[-20.69242477 137.75601196]
[-7.30614090 130.98789978]
[6.08014393 124.21978760]
[19.46642876 117.45167542]
[32.85271454 110.68355560]
[46.23899841 103.91544342]
[59.76049042 83.01550293]
[78.46838379 74.40020752]
[94.76877594 77.37223053]
[103.15164948 87.38954926]
[105.63676453 72.59683990]
[108.12188721 57.80413437]
[102.48992920 43.90158081]
[90.40994263 35.00922775]
[78.32995605 26.11688042]
[66.24996185 17.22452927]
[51.87613297 22.82778931]
[36.75929260 19.74807549]
[25.72316933 8.96811485]
[22.28935242 -6.07224607]
[27.55355835 -20.57368279]
[39.83600235 -29.90884018]
[55.21739578 -31.09890175]
[68.78959656 -23.76412582]
[76.22176361 -10.24501133]
[75.14231110 5.14454174]
[87.22230530 14.03689194]
[99.30229187 22.92924118]
[111.38227844 31.82159042]
[118.75118256 30.42542839]
[133.48898315 27.63310432]
[140.85789490 26.23694229]
[148.84780884 13.54201221]
[156.83772278 0.84708261]
[164.82763672 -11.84784698]
[153.34817505 -21.54156494]
[143.32960510 -32.73862839]
[134.96691895 -45.22108078]
[128.42291260 -58.74595261]
[123.82495880 -73.04997253]
[121.26256561 -87.85470581]
[120.78561401 -102.87198639]
[122.40337372 -117.80948639]
[126.08436584 -132.37644958]
[131.75692749 -146.28932190]
[139.31066895 -159.27729797]
[148.59851074 -171.08753967]
[159.43969727 -181.49017334]
[171.62319946 -190.28271484]
[184.91183472 -197.29399109]
[199.04696655 -202.38754272]
[213.75343323 -205.46421814]
[228.74497986 -206.46414185]
[243.72978210 -205.36782837]
[258.41616821 -202.19662476]
[272.51821899 -197.01226807]
[285.76150513 -189.91566467]
[297.88818359 -181.04495239]
[308.66226196 -170.57279968]
[317.87396240 -158.70306396]
[325.34399414 -145.66679382]
[330.92697144 -131.71771240]
[334.51419067 -117.12738037]
[336.03585815 -102.17977905]
[335.46231079 -87.16587830]
[332.80474854 -72.37792969]
[328.11489868 -58.10377884]
[321.48403931 -44.62127686]
[313.04125977 -32.19286728]
[302.95086670 -21.06047058]
[291.40930176 -11.44078255]
[278.64120483 -3.52105570]
[264.89514160 2.54455233]
[250.43865967 6.63797235]
[235.55314636 8.67952442]
[220.52838135 8.62946987]
[205.65681458 6.48878241]
[191.22792053 2.29913116]
[177.52256775 -3.85793090]
[169.53265381 8.83699894]
[161.54273987 21.53192902]
[153.55282593 34.22685623]
[122.91459656 60.28925323]
[120.42947388 75.08196259]
[117.94435883 89.87466431]
[124.98949432 103.11725616]
[138.64573669 109.32266235]
[152.30197144 115.52806854]
[167.00942993 109.74307251]
[181.46623230 116.12871552]
[187.09541321 130.89651489]
[180.55726624 145.28500366]
[165.73078918 150.75772095]
[151.41223145 144.06782532]
[146.09657288 129.18431091]
[132.44032288 122.97890472]
[118.78408813 116.77349854]
[112.47852325 120.83426666]
[121.48796844 132.82717896]
[130.49742126 144.82008362]
[139.50686646 156.81298828]
[149.17210388 168.28396606]
[142.88691711 181.90367126]
[127.88717651 181.99232483]
[121.44154358 168.44702148]
[114.25016022 155.28327942]
[107.05877686 142.11955261]
[99.86739349 128.95581055]
[93.56182861 133.01658630]
[93.56182861 148.01658630]
[93.56182861 163.01658630]
[93.56182861 178.01658630]
[93.56182861 193.01658630]
[93.56182861 208.01658630]
[93.56182861 223.01658630]
[93.56182861 238.01658630]
[93.56182861 253.01658630]
[93.56182861 268.01657104]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[15 38]
[16 37]
[17 36]
[18 35]
[19 34]
[20 33]
[21 32]
[23 29]
[24 28]
[42 117]
[43 116]
[44 115]
[45 61]
[46 60]
[47 59]
[48 58]
[64 114]
[65 113]
[66 112]
[67 111]
[118 129]
[119 128]
[120 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
