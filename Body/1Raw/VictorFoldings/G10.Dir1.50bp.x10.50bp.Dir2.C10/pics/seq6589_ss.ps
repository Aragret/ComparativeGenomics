%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCUUAGGGGCCAUCAAUUUCAUCACAACAAUUAUCAAUAUAAAACCCCCUGCCAUAACCCAAxxxxxxxxxxUAUAGCAACAGCCUUCAUAGGCUAUGUCCUCCCGUGAGGCCAAAUAUCAUUCUGAGGGGCCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[128.85496521 322.16793823]
[128.85496521 307.16793823]
[128.85496521 292.16793823]
[128.85496521 277.16793823]
[128.85496521 262.16793823]
[128.85496521 247.16792297]
[128.85496521 232.16792297]
[128.85496521 217.16792297]
[128.85496521 202.16792297]
[128.85496521 187.16792297]
[126.43341827 172.36468506]
[115.04400635 162.76620483]
[117.98073578 147.21995544]
[113.20114899 133.00181580]
[86.34487915 129.61999512]
[71.87891388 109.51715088]
[56.91664124 110.58034515]
[41.95436859 111.64353943]
[26.99209595 112.70674133]
[25.51067734 127.67047119]
[21.52151871 142.16856384]
[15.13939762 155.78387451]
[6.54794073 168.12464905]
[-4.00565863 178.83584595]
[-16.21775246 187.60925293]
[-29.73697472 194.19245911]
[-44.17435074 198.39605713]
[-59.11448669 200.09907532]
[-74.12752533 199.25254822]
[-88.78151703 195.88081360]
[-102.65483093 190.08088684]
[-115.34830475 182.01963806]
[-126.49672699 171.92901611]
[-135.77932739 160.09933472]
[-142.92903137 146.87095642]
[-147.74012756 132.62451172]
[-150.07418823 117.76988220]
[-149.86407471 102.73445892]
[-147.11579895 87.95085144]
[-141.90846252 73.84441376]
[-134.39189148 60.82100677]
[-124.78232574 49.25535202]
[-113.35627747 39.48020935]
[-100.44248962 31.77683067]
[-86.41251373 26.36685753]
[-71.67002106 23.40594482]
[-56.63919067 22.97928429]
[-41.75247955 25.09915352]
[-27.43821144 29.70455742]
[-14.10823727 36.66299057]
[-2.14608645 45.77424622]
[8.10406685 56.77617264]
[16.34730339 69.35221863]
[22.34645081 83.14055634]
[25.92890167 97.74446106]
[40.89117432 96.68126678]
[55.85344696 95.61807251]
[70.81571960 94.55487823]
[77.08676910 81.12261963]
[89.07075500 72.39704132]
[87.25109863 57.50782394]
[85.43144226 42.61860657]
[70.46367645 40.82152939]
[56.36116409 35.49399185]
[43.94380951 26.94573212]
[33.93354034 15.67373466]
[26.91233635 2.33334017]
[23.28840446 -12.29986000]
[23.27243423 -27.37511063]
[26.86535454 -42.01595688]
[33.85827637 -55.37119675]
[43.84464264 -66.66437531]
[56.24385834 -75.23892975]
[70.33505249 -80.59632874]
[85.29897308 -82.42511749]
[100.26564026 -80.61896515]
[114.36492157 -75.28288269]
[126.77709198 -66.72709656]
[136.78053284 -55.44903183]
[143.79364014 -42.10438156]
[147.40870667 -27.46898651]
[147.41552734 -12.39372921]
[143.81373596 2.24493527]
[136.81271362 15.59593487]
[126.81950378 26.88305855]
[114.41509247 35.45008850]
[100.32065582 40.79895020]
[102.14031982 55.68816757]
[103.95997620 70.57738495]
[108.42714691 71.53327179]
[112.69478607 73.16320038]
[116.66182709 75.42857361]
[127.94360352 65.54315186]
[139.22537231 55.65772629]
[150.50714111 45.77230072]
[161.78892517 35.88687515]
[166.55163574 20.19456863]
[182.58216858 16.73707581]
[193.38966370 29.07117271]
[187.85630798 44.50859451]
[171.67434692 47.16864777]
[160.39256287 57.05407333]
[149.11079407 66.93949890]
[137.82902527 76.82492065]
[126.54725647 86.71034241]
[131.83592224 92.90912628]
[135.53234863 100.91770172]
[150.52540588 100.46173096]
[164.08401489 92.30851746]
[177.04060364 99.65535736]
[192.03366089 99.19938660]
[207.02673340 98.74342346]
[222.01980591 98.28745270]
[235.67381287 89.20450592]
[250.24472046 96.72918701]
[250.74320984 113.12075806]
[236.65649414 121.51696777]
[222.47576904 113.28052521]
[207.48269653 113.73648834]
[192.48963928 114.19245911]
[177.49656677 114.64842224]
[165.01037598 122.76903534]
[150.98138428 115.45480347]
[135.98831177 115.91076660]
[127.41928864 128.22222900]
[132.19886780 142.44036865]
[143.93014526 153.05581665]
[140.65155029 167.58509827]
[144.17146301 153.00393677]
[152.38793945 140.45445251]
[164.34475708 131.39714050]
[178.65036011 126.88610840]
[193.63989258 127.44633484]
[207.56887817 133.01261902]
[218.81625366 142.93716431]
[226.07305908 156.06495667]
[228.49475098 170.86817932]
[225.79948425 185.62403870]
[218.30094910 198.61526489]
[206.87181091 208.32994080]
[192.84219360 213.63746643]
[177.84486389 213.92015076]
[163.62518311 209.14511108]
[151.83805847 199.86805725]
[143.85496521 187.16792297]
[143.85496521 202.16792297]
[143.85496521 217.16792297]
[143.85496521 232.16792297]
[143.85496521 247.16792297]
[143.85496521 262.16793823]
[143.85496521 277.16793823]
[143.85496521 292.16793823]
[143.85496521 307.16793823]
[143.85496521 322.16793823]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[11 128]
[13 126]
[14 125]
[16 58]
[17 57]
[18 56]
[19 55]
[60 89]
[61 88]
[62 87]
[92 105]
[93 104]
[94 103]
[95 102]
[96 101]
[107 124]
[108 123]
[110 121]
[111 120]
[112 119]
[113 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
