%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCCCCCUCCCCCGCUUCUGGCCACAGCACUUAAACACAUCUCUGCCAAACCCCAAAAACxxxxxxxxxxCUAGGCCUACCCGCCGCAGUACUGAUCAUUCUAUUUCCCCCUCUAUUGAUCCCCACCUCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[26.91222191 249.66392517]
[19.72971344 262.83248901]
[12.54720402 276.00109863]
[5.36469507 289.16967773]
[-1.81781363 302.33825684]
[-9.00032234 315.50683594]
[-16.18283081 328.67541504]
[-23.36534119 341.84399414]
[-30.54784966 355.01257324]
[-37.73035812 368.18115234]
[-40.00655746 384.98162842]
[-56.78055954 387.44519043]
[-63.79137039 372.00872803]
[-50.89894104 360.99865723]
[-43.71643066 347.83007812]
[-36.53392410 334.66149902]
[-29.35141373 321.49291992]
[-22.16890526 308.32431030]
[-14.98639584 295.15573120]
[-7.80388737 281.98715210]
[-0.62137842 268.81857300]
[6.56113052 255.64999390]
[13.74363899 242.48141479]
[-6.91046000 227.71556091]
[-25.08027458 209.98197937]
[-40.34358978 189.69274902]
[-52.34573364 167.31932068]
[-60.80780792 143.38157654]
[-75.45130920 146.63240051]
[-90.09481049 149.88322449]
[-101.81008148 161.35861206]
[-117.53080750 156.69056702]
[-121.08486176 140.68116760]
[-108.81613159 129.79951477]
[-93.34563446 135.23973083]
[-78.70213318 131.98890686]
[-64.05863190 128.73806763]
[-66.19496918 110.97016907]
[-66.41263580 93.07562256]
[-64.70912170 75.26101685]
[-61.10409546 57.73200989]
[-55.63917160 40.69097519]
[-48.37744522 24.33464241]
[-39.40274811 8.85184383]
[-28.81868935 -5.57867908]
[-16.74746132 -18.79033089]
[-3.32842207 -30.63058472]
[11.28351116 -40.96274948]
[26.91964912 -49.66754532]
[43.39947510 -56.64447784]
[60.53273392 -61.81299973]
[78.12163544 -65.11344147]
[95.96311188 -66.50770569]
[96.27516937 -81.50445557]
[96.58722687 -96.50121307]
[96.89927673 -111.49796295]
[88.75926971 -98.89875031]
[78.14441681 -88.30039978]
[65.53256226 -80.17999268]
[51.49140549 -74.90306854]
[36.65301132 -72.70715332]
[21.68531799 -73.69110870]
[7.26208973 -77.81063843]
[-5.96741867 -84.88030243]
[-17.40768814 -94.58185577]
[-26.54373932 -106.47859955]
[-32.96432114 -120.03501129]
[-36.38041306 -134.64083862]
[-36.63823700 -149.63862610]
[-33.72619247 -164.35324097]
[-27.77536201 -178.12232971]
[-19.05362129 -190.32606506]
[-7.95357037 -200.41511536]
[5.02512455 -207.93531799]
[19.29823494 -212.54815674]
[34.22326279 -214.04598999]
[49.12836838 -212.36140442]
[63.34260178 -207.57022095]
[76.22612000 -199.88809204]
[87.19898224 -189.66085815]
[95.76724243 -177.34887695]
[101.54520416 -163.50636292]
[104.27278137 -148.75643921]
[103.82688904 -133.76080322]
[112.07917786 -146.28675842]
[120.33146667 -158.81271362]
[116.90239716 -174.24052429]
[125.45714569 -187.52929688]
[140.92033386 -190.79507446]
[154.11793518 -182.10029602]
[157.22003174 -166.60343933]
[148.38621521 -153.49851990]
[132.85742188 -150.56042480]
[124.60514069 -138.03446960]
[116.35285187 -125.50850677]
[111.89603424 -111.18591309]
[111.58397675 -96.18915558]
[111.27191925 -81.19240570]
[110.95986176 -66.19564819]
[121.99671173 -65.09771729]
[132.93601990 -63.26766586]
[143.72926331 -60.71360779]
[154.32859802 -57.44686508]
[164.68701172 -53.48192978]
[174.75857544 -48.83638000]
[184.49861145 -43.53081894]
[193.86395264 -37.58877182]
[202.81304932 -31.03659058]
[211.30622864 -23.90332985]
[219.30581665 -16.22062111]
[226.77635193 -8.02253532]
[233.68469238 0.65457493]
[240.00022888 9.77223110]
[245.69491577 19.28999901]
[250.74353027 29.16567612]
[255.12367249 39.35546494]
[258.81591797 49.81418228]
[261.80389404 60.49544907]
[264.07437134 71.35189056]
[265.61724854 82.33538055]
[266.42572021 93.39720154]
[266.49615479 104.48830414]
[265.82827759 115.55949402]
[264.42501831 126.56169891]
[262.29263306 137.44610596]
[259.44058228 148.16445923]
[255.88146973 158.66923523]
[251.63111877 168.91384888]
[246.70835876 178.85284424]
[241.13500977 188.44218445]
[234.93582153 197.63932800]
[228.13824463 206.40348816]
[220.77244568 214.69580078]
[212.87109375 222.47950745]
[204.46920776 229.72007751]
[195.60406494 236.38539124]
[186.31495667 242.44592285]
[176.64308167 247.87477112]
[166.63134766 252.64788818]
[156.32412720 256.74407959]
[145.76715088 260.14517212]
[135.00721741 262.83615112]
[124.09203339 264.80499268]
[113.07002258 266.04302979]
[101.99005127 266.54473877]
[90.90126038 266.30792236]
[79.85281372 265.33361816]
[68.89370728 263.62612915]
[58.07254028 261.19305420]
[47.43730545 258.04516602]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 23]
[2 22]
[3 21]
[4 20]
[5 19]
[6 18]
[7 17]
[8 16]
[9 15]
[10 14]
[28 37]
[29 36]
[30 35]
[53 99]
[54 98]
[55 97]
[56 96]
[84 95]
[85 94]
[86 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
