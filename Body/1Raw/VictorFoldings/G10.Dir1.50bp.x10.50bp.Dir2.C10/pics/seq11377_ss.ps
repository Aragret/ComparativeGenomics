%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUCAACCCCUGACCCCCAUGCCUCAGGAUACUCCUCAAUAGCCAUCGCUGUAGUAUAUCxxxxxxxxxxCCUCCAAAUCACCACAGGACUAUUCCUAGCCAUGCACUACUCACCAGACGCCUCAACCGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-10.71798611 273.89559937]
[-19.22907639 286.24719238]
[-27.74016762 298.59875488]
[-36.25125885 310.95031738]
[-44.76234818 323.30191040]
[-53.01463699 335.82785034]
[-61.00455093 348.52279663]
[-68.99446869 361.21771240]
[-76.98438263 373.91265869]
[-84.97430420 386.60757446]
[-81.22501373 401.96069336]
[-89.50145721 415.42459106]
[-104.89336395 419.01135254]
[-118.26898956 410.59301758]
[-121.69281006 395.16403198]
[-113.13353729 381.87817383]
[-97.66922760 378.61767578]
[-89.67931366 365.92272949]
[-81.68939972 353.22781372]
[-73.69948578 340.53286743]
[-65.70956421 327.83795166]
[-65.89501190 323.00668335]
[-63.00287247 318.02001953]
[-57.11391830 314.79080200]
[-48.60282898 302.43923950]
[-40.09173965 290.08767700]
[-31.58064842 277.73608398]
[-23.06955910 265.38452148]
[-43.28355408 248.21598816]
[-61.12614059 228.59440613]
[-76.30201721 206.84454346]
[-88.56001282 183.32633972]
[-97.69725037 158.42904663]
[-103.56250763 132.56472778]
[-106.05871582 106.16145325]
[-105.14454651 79.65619659]
[-120.00759888 77.63386536]
[-134.87065125 75.61152649]
[-149.73368835 73.58919525]
[-166.24339294 77.44486237]
[-174.51872253 62.64772034]
[-162.59069824 50.59954453]
[-147.71134949 58.72614670]
[-132.84831238 60.74848175]
[-117.98526001 62.77081680]
[-103.12221527 64.79315186]
[-98.25071716 43.47734451]
[-91.14893341 22.79740524]
[-81.89677429 2.98598003]
[-70.59831238 -15.73405933]
[-57.38065720 -33.15211487]
[-68.47196960 -43.25076294]
[-79.56328583 -53.34941483]
[-95.69161987 -56.31739807]
[-100.92974854 -71.85747528]
[-89.88912964 -83.98335266]
[-73.92741394 -80.22096252]
[-69.46463776 -64.44072723]
[-58.37332153 -54.34207916]
[-47.28200531 -44.24343109]
[-39.71494675 -51.58459854]
[-31.78246689 -58.52929688]
[-23.50531006 -65.05937195]
[-14.90512848 -71.15773010]
[-6.00441408 -76.80843353]
[3.17355227 -81.99668884]
[12.60476685 -86.70894623]
[22.26456070 -90.93286133]
[32.12767029 -94.65740204]
[42.16830063 -97.87281799]
[52.36018753 -100.57070160]
[62.67667770 -102.74398804]
[73.09078217 -104.38700867]
[83.57527161 -105.49546051]
[94.10271454 -106.06644440]
[104.64558411 -106.09845734]
[115.17630768 -105.59143066]
[125.66732788 -104.54668427]
[136.09121704 -102.96694183]
[146.42071533 -100.85634613]
[156.62881470 -98.22042084]
[166.68878174 -95.06604767]
[176.57432556 -91.40148163]
[186.25959778 -87.23631287]
[195.71926880 -82.58142853]
[204.92857361 -77.44901276]
[213.86344910 -71.85247040]
[222.50050354 -65.80645752]
[230.81716919 -59.32678223]
[238.79168701 -52.43038940]
[246.40319824 -45.13531876]
[253.63179016 -37.46064758]
[260.45855713 -29.42645264]
[266.86566162 -21.05374336]
[272.83633423 -12.36442184]
[278.35491943 -3.38121223]
[291.59750366 -10.42634678]
[304.84008789 -17.47148132]
[318.08270264 -24.51661682]
[326.30603027 -38.70494461]
[342.70248413 -38.40690231]
[350.40475464 -23.92909622]
[341.48944092 -10.16504765]
[325.12783813 -11.27403164]
[311.88522339 -4.22889662]
[298.64263916 2.81623840]
[285.40005493 9.86137295]
[290.27868652 20.67678452]
[294.52703857 31.75495338]
[298.13101196 43.05918121]
[301.07867432 54.55202484]
[303.36029053 66.19541931]
[304.96826172 77.95078278]
[305.89727783 89.77919006]
[306.14428711 101.64144897]
[305.70840454 113.49826813]
[304.59115601 125.31037903]
[302.79620361 137.03865051]
[300.32946777 148.64422607]
[297.19915771 160.08868408]
[293.41561890 171.33407593]
[288.99142456 182.34320068]
[283.94116211 193.07954407]
[278.28161621 203.50756836]
[272.03152466 213.59274292]
[265.21157837 223.30162048]
[257.84436035 232.60208130]
[249.95429993 241.46328735]
[241.56752014 249.85591125]
[232.71179199 257.75213623]
[223.41645813 265.12582397]
[213.71232605 271.95251465]
[203.63150024 278.20962524]
[193.20741272 283.87640381]
[182.47457886 288.93411255]
[171.46855164 293.36599731]
[160.22576904 297.15731812]
[148.78350830 300.29559326]
[137.17964172 302.77038574]
[125.45262146 304.57351685]
[113.64129639 305.69897461]
[101.78477478 306.14309692]
[89.92234802 305.90432739]
[78.09329987 304.98355103]
[66.33681488 303.38372803]
[54.69184494 301.11022949]
[43.19695282 298.17056274]
[31.89022255 294.57443237]
[20.80910301 290.33380127]
[9.99030113 285.46270752]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 28]
[2 27]
[3 26]
[4 25]
[5 24]
[6 21]
[7 20]
[8 19]
[9 18]
[10 17]
[36 46]
[37 45]
[38 44]
[39 43]
[51 60]
[52 59]
[53 58]
[96 107]
[97 106]
[98 105]
[99 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
