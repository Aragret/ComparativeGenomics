%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUUGAAGCCCCCAUUCGUAUAAUAAUUACAUCACAAGACGUCUUGCACUCAUGAGCUGUCxxxxxxxxxxGUCCCACCCUCACACGAUUCUUUACCUUUCACUUCAUCUUGCCCUUCAUUAUUGCAGCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[108.25236511 371.99591064]
[108.25236511 356.99591064]
[108.25236511 341.99591064]
[108.25236511 326.99591064]
[108.25236511 311.99591064]
[108.25236511 296.99591064]
[108.25236511 281.99591064]
[108.25236511 266.99591064]
[108.25236511 251.99591064]
[108.25236511 236.99591064]
[106.69478607 222.07699585]
[96.49546051 211.22236633]
[101.21541595 196.12161255]
[98.11709595 181.44508362]
[95.01876831 166.76855469]
[91.92044830 152.09204102]
[88.82212830 137.41551208]
[84.50485992 151.78079224]
[84.52504730 166.78077698]
[75.87947083 179.03858948]
[61.74259949 184.05345154]
[47.30516052 179.98399353]
[37.86826324 168.32444763]
[36.89692307 153.35592651]
[44.74778748 140.57453918]
[58.53787231 134.67335510]
[70.03318787 125.03707886]
[55.32522202 127.98255920]
[40.61725998 130.92803955]
[33.27283478 144.73359680]
[18.75336266 150.54039001]
[3.91449142 145.60664368]
[-4.23731470 132.26190186]
[-1.85302305 116.80715942]
[9.94157696 106.53966522]
[25.57743645 106.30741882]
[37.67177963 116.22007751]
[52.37974167 113.27459717]
[67.08769989 110.32911682]
[67.14344788 97.62177277]
[71.71613312 86.38561249]
[79.75307465 78.08353424]
[89.78593445 73.62379456]
[100.18434906 73.26837921]
[104.49192810 58.90019226]
[108.79951477 44.53200912]
[113.10710144 30.16382408]
[117.41468811 15.79563904]
[118.66156006 0.84755206]
[116.79394531 -14.03572750]
[114.92633057 -28.91900826]
[102.55549622 -33.20302963]
[93.87856293 -44.90920258]
[93.20474243 -60.95080566]
[82.99126434 -71.93647003]
[67.16545868 -76.23484802]
[63.23723221 -92.15656281]
[75.24759674 -103.32272339]
[90.84133148 -98.24653625]
[93.97692871 -82.14994812]
[104.19040680 -71.16428375]
[118.31520844 -76.21304321]
[119.25083923 -91.18383026]
[120.18646240 -106.15462494]
[121.12209320 -121.12541199]
[106.77390289 -125.77086639]
[94.03220367 -133.83932495]
[83.69795227 -144.82359314]
[76.42076874 -158.03318787]
[72.65809631 -172.63774109]
[72.64646912 -187.71920776]
[76.38661194 -202.32954407]
[83.64341736 -215.55035400]
[93.96072388 -226.55053711]
[106.68996429 -234.63862610]
[121.03096771 -239.30621338]
[136.08226013 -240.25985718]
[150.89770508 -237.43962097]
[164.54597473 -231.02281189]
[176.16912842 -221.41276550]
[185.03654480 -209.21359253]
[190.59078979 -195.19213867]
[192.48272705 -180.22981262]
[190.59344482 -165.26715088]
[185.04167175 -151.24470520]
[176.17642212 -139.04396057]
[164.55496216 -129.43186951]
[150.90782166 -123.01263428]
[136.09288025 -120.18978882]
[135.15725708 -105.21899414]
[134.22163391 -90.24820709]
[133.28599548 -75.27741241]
[145.01280212 -49.59178162]
[129.80961609 -30.78662109]
[131.67723083 -15.90334129]
[133.54484558 -1.02006114]
[139.68923950 -14.70386124]
[149.37907410 -26.15405464]
[161.85816956 -34.47705841]
[176.15261841 -39.02333832]
[191.14688110 -39.43809891]
[205.67079163 -35.68897247]
[218.59089661 -28.06854248]
[228.89889526 -17.17151642]
[235.79034424 -3.84830379]
[238.72741699 10.86133766]
[237.48092651 25.80945587]
[232.14813232 39.82948685]
[223.14520264 51.82729721]
[211.17475891 60.86656189]
[197.17095947 66.24185944]
[182.22669983 67.53368378]
[167.50820923 64.64122772]
[154.16415405 57.79022217]
[143.23591614 47.51532364]
[135.57633972 34.61838913]
[131.78286743 20.10322380]
[127.47528839 34.47140884]
[123.16770172 48.83959198]
[118.86011505 63.20777512]
[114.55252838 77.57595825]
[128.87867737 94.93276978]
[125.44441223 119.25275421]
[103.49864960 134.31718445]
[106.59697723 148.99371338]
[109.69529724 163.67024231]
[112.79361725 178.34677124]
[115.89193726 193.02328491]
[126.31287384 204.92768860]
[121.37130737 218.97866821]
[128.10369873 205.57438660]
[140.56010437 197.21746826]
[155.51623535 196.07112122]
[169.10073853 202.43203735]
[177.79730225 214.65371704]
[179.35485840 229.57263184]
[173.37023926 243.32705688]
[161.39251709 252.35670471]
[146.52212524 254.32426453]
[132.60820007 248.72045898]
[123.25236511 236.99591064]
[123.25236511 251.99591064]
[123.25236511 266.99591064]
[123.25236511 281.99591064]
[123.25236511 296.99591064]
[123.25236511 311.99591064]
[123.25236511 326.99591064]
[123.25236511 341.99591064]
[123.25236511 356.99591064]
[123.25236511 371.99591064]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 130]
[13 128]
[14 127]
[15 126]
[16 125]
[17 124]
[27 39]
[28 38]
[29 37]
[44 121]
[45 120]
[46 119]
[47 118]
[48 117]
[49 96]
[50 95]
[51 94]
[54 61]
[55 60]
[62 92]
[63 91]
[64 90]
[65 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
