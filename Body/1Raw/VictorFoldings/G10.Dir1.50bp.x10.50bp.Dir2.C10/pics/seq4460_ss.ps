%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUCCCCCUCAAACCUAAGAAAUAUGUCUGAUAAAAGAGUUACUUUGAUAGAGUAAAUAAUAxxxxxxxxxxCAUUGCCCCCACAAUCCUAGGCCUACCCGCCGCAGUACUGAUCAUUCUAUUUCCCCCUCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[63.02254486 523.16662598]
[65.60832214 503.95816040]
[65.91629791 488.96133423]
[66.22427368 473.96450806]
[66.53224945 458.96765137]
[66.84023285 443.97082520]
[67.14820862 428.97399902]
[67.45618439 413.97714233]
[67.76416016 398.98031616]
[68.07213593 383.98345947]
[54.09325027 381.14956665]
[40.82488251 375.90618896]
[28.67896652 368.41473389]
[18.03281975 358.90646362]
[9.21743107 347.67529297]
[2.50716567 335.06875610]
[-1.88877118 321.47717285]
[-3.83285880 307.32168579]
[-3.26356125 293.04104614]
[-0.19727470 279.07821655]
[5.27214241 265.86645508]
[12.97624016 253.81591797]
[22.67716789 243.30102539]
[34.07501602 234.64869690]
[46.81708145 228.12825012]
[60.50879669 223.94302368]
[74.72593689 222.22399902]
[75.64934540 207.25244141]
[76.57276154 192.28089905]
[77.49617767 177.30934143]
[66.01263428 186.95964050]
[51.01375961 187.14338684]
[39.29726410 177.77728271]
[36.17323685 163.10621643]
[43.05753326 149.77931213]
[56.83008957 143.83651733]
[71.24897766 147.97120667]
[79.77888489 160.30776978]
[82.83728027 145.62286377]
[85.89567566 130.93797302]
[88.95407104 116.25307465]
[76.50746155 106.02142334]
[74.30290985 86.88016510]
[60.74101639 80.47119141]
[47.17911911 74.06221771]
[33.61722183 67.65324402]
[18.08966064 71.68739319]
[5.34131670 61.94782257]
[5.15162754 45.90589142]
[17.66610718 35.86759567]
[33.28471756 39.53345871]
[40.02619934 54.09134293]
[53.58809280 60.50032043]
[67.14999390 66.90929413]
[80.71188354 73.31826782]
[70.13334656 62.68368530]
[70.84992218 47.70080948]
[82.39508057 38.12431717]
[97.25230408 40.18902588]
[105.74871826 52.55069733]
[102.35296631 67.16085052]
[110.50962830 54.57241440]
[118.66629791 41.98397446]
[126.82295990 29.39553642]
[113.31278992 35.91283417]
[98.49437714 38.23977661]
[83.63687897 36.17706680]
[70.01279449 29.90137100]
[58.78898621 19.95018196]
[50.92674255 7.17579031]
[47.09943390 -7.32771683]
[47.63486481 -22.31815720]
[52.48717117 -36.51164627]
[61.24077225 -48.69255447]
[73.14594269 -57.81761932]
[87.18304443 -63.10531235]
[102.14984894 -64.10276031]
[116.76448059 -60.72452545]
[129.77525330 -53.25994873]
[140.06782532 -42.34835052]
[146.76066589 -28.92427635]
[149.28056335 -14.13745403]
[147.41169739 0.74566799]
[141.31295776 14.45223904]
[153.64424133 5.91177988]
[165.97552490 -2.62867904]
[178.30680847 -11.16913795]
[163.30699158 -11.09499168]
[149.52926636 -17.02579880]
[139.27317810 -27.97169685]
[134.25048828 -42.10578918]
[135.29948425 -57.06906128]
[142.24508667 -70.36412048]
[153.92807007 -79.77198029]
[168.39851379 -83.72245789]
[183.24127197 -81.55619812]
[195.97904968 -73.63477325]
[204.48588562 -61.28026581]
[207.34196472 -46.55468369]
[204.07061768 -31.91575623]
[195.22003174 -19.80874634]
[209.36735535 -24.79406738]
[223.51467896 -29.77939034]
[230.11364746 -44.14006805]
[244.96316528 -49.55000305]
[259.25326538 -42.79956818]
[264.50588989 -27.89368439]
[257.60476685 -13.67574310]
[242.64418030 -8.58099937]
[228.50000000 -15.63207340]
[214.35267639 -10.64675140]
[200.20536804 -5.66142941]
[186.84725952 1.16214585]
[174.51597595 9.70260429]
[162.18469238 18.24306297]
[149.85340881 26.78352165]
[139.41140747 37.55220032]
[131.25473022 50.14064026]
[123.09806824 62.72908020]
[114.94140625 75.31752014]
[123.86426544 104.31900787]
[103.63896942 119.31147003]
[100.58057404 133.99636841]
[97.52217865 148.68125916]
[94.46378326 163.36616516]
[92.46772766 178.23275757]
[91.54431152 193.20431519]
[90.62089539 208.17585754]
[89.69748688 223.14741516]
[104.97750092 227.09112549]
[119.20407867 233.90986633]
[131.84220886 243.34526062]
[142.41699219 255.04061890]
[150.53149414 268.55435181]
[155.88162231 283.37667847]
[158.26754761 298.94879150]
[157.60108948 314.68405151]
[153.90911865 329.98995972]
[147.33232117 344.29049683]
[138.11996460 357.04791260]
[126.62035370 367.78274536]
[113.26773834 376.09204102]
[98.56585693 381.66436768]
[83.06897736 384.29144287]
[82.76100159 399.28829956]
[82.45302582 414.28512573]
[82.14504242 429.28195190]
[81.83706665 444.27880859]
[81.52909088 459.27563477]
[81.22111511 474.27246094]
[80.91313171 489.26931763]
[80.60515594 504.26614380]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 152]
[3 151]
[4 150]
[5 149]
[6 148]
[7 147]
[8 146]
[9 145]
[10 144]
[27 129]
[28 128]
[29 127]
[30 126]
[38 125]
[39 124]
[40 123]
[41 122]
[43 55]
[44 54]
[45 53]
[46 52]
[61 120]
[62 119]
[63 118]
[64 117]
[84 116]
[85 115]
[86 114]
[87 113]
[101 112]
[102 111]
[103 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
