%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUAAUAUGAUUUAUCUCCACACUAGCAGAGACCAACCGAACCCCCUUCGACCUUGCCGAxxxxxxxxxxAUCGUCCCAACAAUUAUAUUACUACCACUGACAUGACUUUCCAAAAAACACAUAAUUUGACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[239.24586487 403.65631104]
[239.24586487 388.65631104]
[239.24586487 373.65631104]
[239.24586487 358.65631104]
[239.24586487 343.65631104]
[239.24586487 328.65631104]
[239.24586487 313.65631104]
[239.24586487 298.65631104]
[239.24586487 283.65631104]
[239.24586487 268.65631104]
[234.64030457 254.38084412]
[225.87408447 242.20901489]
[216.24555969 230.70721436]
[205.80575562 219.93640137]
[195.36593628 209.16558838]
[184.92613220 198.39477539]
[174.48631287 187.62397766]
[164.04650879 176.85316467]
[153.60668945 166.08235168]
[143.16688538 155.31155396]
[132.72706604 144.54074097]
[122.28725433 133.76992798]
[99.44969940 140.45771790]
[76.80249786 133.15126038]
[62.17926407 114.37782288]
[47.41320801 117.01669312]
[32.64715576 119.65555573]
[17.88109779 122.29441833]
[12.73695946 136.76623535]
[1.03569543 146.71490479]
[-14.07511139 149.46427917]
[-28.53072929 144.27481079]
[-38.44267273 132.54241943]
[-41.14467239 117.42306519]
[-35.90991211 102.98378754]
[-24.14650917 93.10866547]
[-9.01876354 90.45407104]
[5.40403795 95.73406982]
[15.24223423 107.52836609]
[30.00828934 104.88950348]
[44.77434540 102.25063324]
[59.54040146 99.61177063]
[61.00947952 89.18939972]
[65.11703491 79.49857330]
[53.81802750 69.63285065]
[42.51902390 59.76712799]
[22.61661339 56.84438705]
[17.01966858 38.37538910]
[5.32004404 28.98822784]
[-6.37957954 19.60106659]
[-18.07920265 10.21390438]
[-34.11921310 10.52642536]
[-44.25304031 -1.91082108]
[-40.70687866 -17.55704498]
[-26.20104218 -24.40980148]
[-11.86316586 -17.21224213]
[-8.69204140 -1.48571885]
[3.00758243 7.90144300]
[14.70720577 17.28860474]
[26.40682983 26.67576599]
[36.50236130 24.64793777]
[46.23807907 28.62724686]
[52.27080917 37.51036835]
[52.38474655 48.46812439]
[63.68375015 58.33384705]
[74.98275757 68.19956970]
[83.64543915 62.99110413]
[93.32878876 60.09229660]
[93.64083862 45.09554291]
[93.95289612 30.09878922]
[80.52075958 22.76147652]
[72.04666138 10.01595497]
[70.47789764 -5.20894384]
[76.17494965 -19.41465187]
[87.82868958 -29.33680153]
[102.76116180 -32.69535446]
[117.54099274 -28.71854019]
[128.77189636 -18.32020187]
[133.87307739 -3.88980079]
[131.67234802 11.25666142]
[122.67538452 23.63863945]
[108.94965363 30.41084480]
[108.63759613 45.40760040]
[108.32553864 60.40435410]
[117.76345062 63.64632416]
[126.12082672 69.09963989]
[132.88931274 76.43258667]
[137.65718079 85.19911194]
[140.13441467 94.86595154]
[140.17031860 104.84509277]
[137.76272583 114.52951050]
[133.05805969 123.33011627]
[143.49787903 134.10092163]
[153.93768311 144.87173462]
[164.37750244 155.64254761]
[174.81730652 166.41334534]
[185.25712585 177.18415833]
[195.69692993 187.95497131]
[206.13674927 198.72578430]
[216.57656860 209.49658203]
[227.01637268 220.26739502]
[227.64620972 205.28062439]
[237.63201904 194.08761597]
[252.45016479 191.75891113]
[265.38784790 199.34944153]
[270.58419800 213.42062378]
[265.68521118 227.59806824]
[252.91015625 235.45924377]
[238.04592896 233.44281006]
[246.81213379 245.61463928]
[252.43051147 239.28933716]
[261.19512939 235.09307861]
[272.24185181 234.24456787]
[284.29052734 237.61741638]
[298.30722046 242.95892334]
[310.41769409 238.39929199]
[322.00708008 243.18525696]
[327.03753662 254.23069763]
[340.94009399 259.86267090]
[354.84265137 265.49459839]
[371.00067139 262.69265747]
[381.29702759 275.45654297]
[375.13973999 290.65588379]
[358.86288452 292.65490723]
[349.21069336 279.39715576]
[335.30813599 273.76519775]
[321.40560913 268.13327026]
[304.21405029 271.51712036]
[292.96572876 256.97564697]
[278.94900513 251.63412476]
[272.77322388 255.88967896]
[282.51318359 267.29727173]
[292.25314331 278.70486450]
[304.63619995 287.17007446]
[304.66430664 302.17004395]
[292.31307983 310.68164062]
[278.30596924 305.31500244]
[274.80441284 290.72824097]
[267.61303711 277.56451416]
[260.42166138 264.40075684]
[254.24586487 268.65631104]
[254.24586487 283.65631104]
[254.24586487 298.65631104]
[254.24586487 313.65631104]
[254.24586487 328.65631104]
[254.24586487 343.65631104]
[254.24586487 358.65631104]
[254.24586487 373.65631104]
[254.24586487 388.65631104]
[254.24586487 403.65631104]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 110]
[12 109]
[13 101]
[14 100]
[15 99]
[16 98]
[17 97]
[18 96]
[19 95]
[20 94]
[21 93]
[22 92]
[25 42]
[26 41]
[27 40]
[28 39]
[44 66]
[45 65]
[46 64]
[48 60]
[49 59]
[50 58]
[51 57]
[68 84]
[69 83]
[70 82]
[114 130]
[115 129]
[118 127]
[119 126]
[120 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
