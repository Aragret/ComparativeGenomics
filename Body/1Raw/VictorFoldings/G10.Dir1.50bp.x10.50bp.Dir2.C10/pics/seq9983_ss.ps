%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUCUCCCUACAAAUCUCCUUAAUUAUAACAUUCACAGCCACAGAACUAAUCAUAUUUUAUxxxxxxxxxxCCUACCCCUUCCUUGUACUAUCCCUAUGAGGCAUAAUUAUAACAAGCUCCAUCUGCCUACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 429.21261597]
[92.50000000 414.21261597]
[92.50000000 399.21261597]
[92.50000000 384.21261597]
[92.50000000 369.21261597]
[92.50000000 354.21261597]
[92.50000000 339.21261597]
[92.50000000 324.21261597]
[92.50000000 309.21261597]
[92.50000000 294.21261597]
[77.80443573 291.31182861]
[63.95278549 285.59783936]
[51.47812653 277.28851318]
[40.86095047 266.70169067]
[32.51063156 254.24287415]
[26.74966240 240.38989258]
[23.80118752 225.67445374]
[23.78036499 210.66174316]
[26.68986511 195.92875671]
[32.41970444 182.04211426]
[40.75139618 169.53620911]
[51.36627960 158.89277649]
[63.85771179 150.52215576]
[77.74665070 144.74765015]
[92.50000000 141.79290771]
[92.50000000 126.79291534]
[78.00877380 117.04394531]
[72.18318176 100.57881927]
[77.31880951 83.88560486]
[91.39194489 73.54226685]
[90.76796722 58.55525208]
[90.14398956 43.56823349]
[89.52001190 28.58121872]
[88.89603424 13.59420204]
[88.27205658 -1.39281428]
[87.64808655 -16.37983131]
[78.78798676 -4.27616549]
[65.11919403 1.90154135]
[50.17982483 0.55420929]
[37.83689499 -7.96940899]
[31.28533173 -21.46300125]
[32.22098541 -36.43379211]
[40.40166855 -49.00663376]
[53.70983505 -55.92709351]
[68.70070648 -55.40382385]
[81.49394226 -47.57227325]
[88.77802277 -34.45971680]
[91.26313782 -49.25242615]
[93.74826050 -64.04513550]
[88.40422058 -78.93647003]
[98.14318085 -90.20597839]
[100.62829590 -104.99868774]
[86.19123840 -109.12800598]
[72.30730438 -114.84782410]
[59.15109634 -122.08621216]
[46.88807678 -130.75215149]
[35.67246246 -140.73663330]
[25.64529991 -151.91410828]
[16.93269348 -164.14401245]
[9.64421368 -177.27253723]
[3.87151861 -191.13456726]
[-0.31279212 -205.55578613]
[-2.85609698 -220.35482788]
[-3.72641134 -235.34558105]
[-2.91278982 -250.33950806]
[-0.42546460 -265.14807129]
[3.70428348 -279.58499146]
[9.42451859 -293.46878052]
[16.66330147 -306.62475586]
[25.32959938 -318.88751221]
[35.31442261 -330.10284424]
[46.49220276 -340.12966919]
[58.72236252 -348.84188843]
[71.85110474 -356.12997437]
[85.71331024 -361.90228271]
[100.13465118 -366.08615112]
[114.93376923 -368.62899780]
[129.92454529 -369.49887085]
[144.91845703 -368.68481445]
[159.72692871 -366.19705200]
[174.16374207 -362.06686401]
[188.04734802 -356.34622192]
[201.20310974 -349.10702515]
[213.46562195 -340.44036865]
[224.68063354 -330.45520020]
[234.70712280 -319.27713013]
[243.41900635 -307.04669189]
[250.70669556 -293.91775513]
[256.47857666 -280.05535889]
[260.66201782 -265.63391113]
[263.20443726 -250.83470154]
[264.07385254 -235.84390259]
[263.25933838 -220.85002136]
[260.77111816 -206.04161072]
[256.64050293 -191.60491943]
[250.91944885 -177.72149658]
[243.67987061 -164.56594849]
[235.01284790 -152.30371094]
[225.02734375 -141.08898926]
[213.84896851 -131.06283569]
[201.61828613 -122.35131836]
[188.48910522 -115.06401825]
[174.62655640 -109.29256439]
[160.20495605 -105.10955048]
[145.40570068 -102.56757355]
[130.41487122 -101.69860077]
[115.42100525 -102.51356506]
[112.93589020 -87.72086334]
[118.45767975 -73.88760376]
[108.54096222 -61.56001282]
[106.05584717 -46.76730728]
[103.57072449 -31.97459984]
[102.63510132 -17.00380707]
[103.25907898 -2.01679158]
[103.88305664 12.97022438]
[104.50703430 27.95724106]
[105.13101196 42.94425583]
[105.75498962 57.93127441]
[106.37895966 72.91828918]
[117.29683685 78.20711517]
[124.92627716 87.63914490]
[127.81681824 99.42118073]
[125.41889954 111.31326294]
[118.18841553 121.05449677]
[107.50000000 126.79291534]
[107.50000000 141.79290771]
[122.25334930 144.74765015]
[136.14228821 150.52215576]
[148.63372803 158.89277649]
[159.24861145 169.53620911]
[167.58029175 182.04211426]
[173.31013489 195.92875671]
[176.21963501 210.66174316]
[176.19880676 225.67445374]
[173.25033569 240.38989258]
[167.48936462 254.24287415]
[159.13905334 266.70169067]
[148.52186584 277.28851318]
[136.04721069 285.59783936]
[122.19556427 291.31182861]
[107.50000000 294.21261597]
[107.50000000 309.21261597]
[107.50000000 324.21261597]
[107.50000000 339.21261597]
[107.50000000 354.21261597]
[107.50000000 369.21261597]
[107.50000000 384.21261597]
[107.50000000 399.21261597]
[107.50000000 414.21261597]
[107.50000000 429.21261597]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[25 126]
[26 125]
[30 119]
[31 118]
[32 117]
[33 116]
[34 115]
[35 114]
[36 113]
[47 112]
[48 111]
[49 110]
[51 108]
[52 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
