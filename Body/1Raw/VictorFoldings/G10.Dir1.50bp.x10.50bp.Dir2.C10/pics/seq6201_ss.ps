%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGCCUAACCCCUGUCUUUAGAUUUACAGUCCAAUGCUUCACUCAGCCAUUUUACCUCACCCxxxxxxxxxxUACUCCCACUAAUAGCUUUUUGAUGACUUCUAGCAAGCCUCGCUAACCUCGCCUUACCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[117.56168365 297.63391113]
[117.24962616 282.63714600]
[116.93756866 267.64041138]
[116.62551880 252.64364624]
[116.31346130 237.64689636]
[116.00140381 222.65014648]
[115.68934631 207.65338135]
[115.37728882 192.65663147]
[115.06523132 177.65988159]
[111.51047516 163.08717346]
[104.88197327 149.63121033]
[98.25347137 136.17524719]
[103.68838501 150.15600586]
[99.42805481 164.53828430]
[87.25536346 173.30329895]
[72.26438904 172.78306580]
[60.72860336 163.19526672]
[57.47555542 148.55226135]
[63.86658478 134.98190308]
[77.22840881 128.16297913]
[63.32585144 133.79493713]
[49.42329407 139.42689514]
[35.52073669 145.05885315]
[33.47675323 160.28112793]
[24.08277130 172.43220520]
[9.86572742 178.24349976]
[-5.35006762 176.15180969]
[-17.47163963 166.71978760]
[-23.23834801 152.48460388]
[-21.09897614 137.27543640]
[-11.62900352 125.18348694]
[2.62419295 119.46143341]
[17.82657623 121.64846802]
[29.88878059 131.15629578]
[43.79133606 125.52433777]
[57.69389343 119.89237976]
[71.59645081 114.26042175]
[69.97683716 104.72069550]
[71.33882904 95.56909180]
[75.29230499 87.67472839]
[81.21340942 81.70793915]
[88.32737732 78.08414459]
[95.80226135 76.93878937]
[97.97909546 62.09758377]
[100.15593719 47.25637817]
[102.33277130 32.41517258]
[103.73507690 17.48086548]
[104.35905457 2.49384999]
[104.98303223 -12.49316597]
[102.19975281 -21.26272774]
[105.77909851 -27.78453064]
[106.71472931 -42.75532150]
[107.65036011 -57.72611618]
[92.90132904 -60.57118607]
[78.63722229 -65.27901459]
[65.09226990 -71.77229309]
[52.48889923 -79.94439697]
[41.03406143 -89.66113281]
[30.91585541 -100.76294708]
[22.30043411 -113.06753540]
[15.32926846 -126.37284088]
[10.11683273 -140.46038818]
[6.74871922 -155.09883118]
[5.28023577 -170.04780579]
[5.73549604 -185.06182861]
[8.10702419 -199.89437866]
[12.35587788 -214.30184937]
[18.41228676 -228.04769897]
[26.17679787 -240.90618896]
[35.52191544 -252.66616821]
[46.29417801 -263.13452148]
[58.31669617 -272.13937378]
[71.39205933 -279.53283691]
[85.30554199 -285.19351196]
[99.82868195 -289.02844238]
[114.72299194 -290.97467041]
[129.74389648 -291.00021362]
[144.64474487 -289.10464478]
[159.18084717 -285.31912231]
[173.11349487 -279.70581055]
[186.21392822 -272.35684204]
[198.26699829 -263.39291382]
[209.07479858 -252.96124268]
[218.45983887 -241.23310852]
[226.26803589 -228.40109253]
[232.37115479 -214.67593384]
[236.66897583 -200.28297424]
[239.09092712 -185.45858765]
[239.59722900 -170.44619751]
[238.17959595 -155.49230957]
[234.86126709 -140.84249878]
[229.69677734 -126.73731232]
[222.77088928 -113.40837860]
[214.19735718 -101.07456970]
[204.11695862 -89.93840790]
[192.69523621 -80.18277740]
[180.11972046 -71.96786499]
[166.59692383 -65.42856598]
[152.34892273 -60.67225647]
[137.60964966 -57.77705002]
[122.62114716 -56.79048538]
[121.68551636 -41.81969452]
[120.74989319 -26.84890366]
[119.97004700 -11.86918831]
[119.34606934 3.11782742]
[118.72209167 18.10484314]
[131.55664062 10.34117699]
[145.70112610 15.33450222]
[150.81709290 29.43510056]
[143.16517639 42.33657837]
[128.33830261 44.60899734]
[117.17398071 34.59201050]
[114.99713898 49.43321609]
[112.82030487 64.27442169]
[110.64346313 79.11563110]
[127.58077240 101.29743958]
[111.70944214 129.54675293]
[118.33793640 143.00271606]
[124.96643829 156.45867920]
[126.27779388 141.51611328]
[131.50032043 127.45462799]
[140.26091003 115.27875519]
[151.93374634 105.85830688]
[165.68495178 99.86625671]
[180.53213501 97.73066711]
[195.41468811 99.60409546]
[209.26940918 105.35272217]
[221.10656738 114.56585693]
[230.08052063 126.58535004]
[235.55018616 140.55255127]
[237.12484741 155.46966553]
[234.69200134 170.27105713]
[228.42544556 183.89935303]
[218.77285767 195.38096619]
[206.42378235 203.89567566]
[192.26040649 208.83520508]
[177.29455566 209.84671021]
[162.59533691 206.85789490]
[149.21282959 200.08230591]
[138.10305786 190.00396729]
[130.06198120 177.34782410]
[130.37403870 192.34457397]
[130.68609619 207.34133911]
[130.99815369 222.33808899]
[131.31021118 237.33483887]
[131.62226868 252.33158875]
[131.93432617 267.32833862]
[132.24638367 282.32510376]
[132.55844116 297.32186890]
[135.14942932 316.52957153]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 119]
[11 118]
[12 117]
[20 37]
[21 36]
[22 35]
[23 34]
[43 115]
[44 114]
[45 113]
[46 112]
[47 106]
[48 105]
[49 104]
[51 103]
[52 102]
[53 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
