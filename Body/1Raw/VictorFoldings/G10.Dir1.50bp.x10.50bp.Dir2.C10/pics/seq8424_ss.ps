%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAAUCAUUUUUAUUGCCACAACUAACCUCCUCGGACUCCUGCCUCACUCAUUUACACCAACCxxxxxxxxxxUUGGUAUAUAGUUUAAACAAAACGAAUGAUUUCGACUCAUUAAAUUAUGAUAAUCAUAUUUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[70.03125000 248.31871033]
[69.72724915 233.32179260]
[69.42324066 218.32487488]
[69.11923981 203.32795715]
[68.81523132 188.33103943]
[68.51123047 173.33412170]
[68.20722198 158.33720398]
[67.90322113 143.34028625]
[67.59921265 128.34336853]
[88.42340851 95.09380341]
[80.61835480 82.28438568]
[72.42753601 69.71814728]
[63.85851288 57.40669250]
[55.28948975 45.09524155]
[46.72046661 32.78379059]
[38.15144348 20.47233772]
[29.58241844 8.16088581]
[21.01339531 -4.15056562]
[5.76425457 -2.96272969]
[-7.94152737 -9.52385330]
[-16.46633148 -21.98154449]
[-17.60334969 -36.93357468]
[-11.14706707 -50.35676193]
[-19.71609116 -62.66821289]
[-28.28511429 -74.97966766]
[-43.53425598 -73.79183197]
[-57.24003601 -80.35295105]
[-65.76483917 -92.81064606]
[-66.90185547 -107.76267242]
[-60.44557571 -121.18585968]
[-69.01460266 -133.49731445]
[-77.58362579 -145.80876160]
[-86.15264893 -158.12022400]
[-94.72167206 -170.43167114]
[-93.81093597 -155.45935059]
[-95.97571564 -140.61637878]
[-101.12483978 -126.52784729]
[-109.04146576 -113.78708649]
[-119.39218903 -102.93063354]
[-131.74111938 -94.41570282]
[-145.56817627 -88.60088348]
[-160.29109192 -85.73104858]
[-175.28981018 -85.92707062]
[-189.93269348 -89.18067932]
[-203.60307312 -95.35486603]
[-215.72526550 -104.18960571]
[-225.78874207 -115.31285095]
[-233.36968994 -128.25614929]
[-238.14888000 -142.47442627]
[-239.92501831 -157.36889648]
[-238.62332153 -172.31231689]
[-234.29859924 -186.67535400]
[-227.13298035 -199.85313416]
[-217.42825317 -211.29069519]
[-205.59307861 -220.50637817]
[-192.12590027 -227.11207581]
[-177.59387207 -230.82958984]
[-162.60896301 -231.50236511]
[-147.80224609 -229.10208130]
[-133.79730225 -223.72981262]
[-121.18389893 -215.61178589]
[-110.49324799 -205.08992004]
[-102.17748260 -192.61094666]
[-102.78536224 -207.59863281]
[-111.07556915 -221.07389832]
[-103.86040497 -234.10427856]
[-104.46829224 -249.09196472]
[-105.07617188 -264.07962036]
[-105.68405914 -279.06732178]
[-106.29193878 -294.05499268]
[-120.32099152 -300.06735229]
[-130.34558105 -311.57693481]
[-134.37533569 -326.29846191]
[-131.61012268 -341.30902100]
[-122.59899902 -353.62820435]
[-109.13111877 -360.81005859]
[-93.88053894 -361.42858887]
[-79.87527466 -355.36102295]
[-69.89608765 -343.81207275]
[-65.92433929 -329.07476807]
[-68.74863434 -314.07522583]
[-77.80820465 -301.79162598]
[-91.30426025 -294.66287231]
[-90.69638062 -279.67520142]
[-90.08849335 -264.68753052]
[-89.48061371 -249.69984436]
[-88.87272644 -234.71215820]
[-80.62600708 -222.30889893]
[-87.79769135 -208.20651245]
[-87.18980408 -193.21884155]
[-82.41021729 -179.00068665]
[-73.84119415 -166.68923950]
[-65.27217102 -154.37779236]
[-56.70314789 -142.06634521]
[-48.13412476 -129.75488281]
[-33.30419922 -131.14733887]
[-19.67779541 -124.88817596]
[-10.95627689 -112.56739807]
[-9.56365967 -97.43606567]
[-15.97366142 -83.54869080]
[-7.40463877 -71.23723602]
[1.16438460 -58.92578506]
[15.99430943 -60.31823349]
[29.62071419 -54.05907440]
[38.34223175 -41.73830032]
[39.73484802 -26.60696220]
[33.32484818 -12.71958923]
[41.89387131 -0.40813729]
[50.46289444 11.90331459]
[59.03191757 24.21476555]
[67.60093689 36.52621841]
[76.16996002 48.83766937]
[84.73898315 61.14912033]
[88.18686676 62.11846161]
[91.32192230 64.84055328]
[93.30960846 69.14279175]
[93.42777252 74.47933197]
[101.23282623 87.28875732]
[112.71263123 96.94349670]
[126.67044067 102.43708801]
[140.62825012 107.93067932]
[154.58605957 113.42427063]
[168.97593689 106.88922119]
[183.74253845 112.52156067]
[190.12507629 126.97973633]
[184.33692932 141.68595886]
[169.81208801 147.91528320]
[155.16787720 141.97196960]
[149.09246826 127.38208008]
[135.13465881 121.88848877]
[121.17684937 116.39489746]
[107.21903992 110.90131378]
[101.06330872 115.18582153]
[110.67867279 126.69863129]
[120.29403687 138.21144104]
[129.90940857 149.72424316]
[141.96809387 158.64546204]
[141.75137329 173.64389038]
[129.43994141 182.21293640]
[115.29982758 177.20721436]
[111.12194824 162.80070496]
[103.66525269 149.78541565]
[96.20855713 136.77012634]
[88.75186157 123.75484467]
[82.59613800 128.03935242]
[82.90013885 143.03627014]
[83.20413971 158.03318787]
[83.50814819 173.03012085]
[83.81214905 188.02703857]
[84.11615753 203.02395630]
[84.42015839 218.02087402]
[84.72416687 233.01779175]
[85.02816772 248.01470947]
[87.60885620 267.22381592]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 153]
[2 152]
[3 151]
[4 150]
[5 149]
[6 148]
[7 147]
[8 146]
[9 145]
[10 118]
[11 117]
[12 113]
[13 112]
[14 111]
[15 110]
[16 109]
[17 108]
[18 107]
[23 102]
[24 101]
[25 100]
[30 95]
[31 94]
[32 93]
[33 92]
[34 91]
[63 90]
[64 89]
[66 87]
[67 86]
[68 85]
[69 84]
[70 83]
[119 132]
[120 131]
[121 130]
[122 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
