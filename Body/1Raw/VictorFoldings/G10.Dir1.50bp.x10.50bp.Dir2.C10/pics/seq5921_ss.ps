%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCCCCUUUUAUACUAAUAAUCUUAUAGAAAUUUAGGUUAAAUACAGACCAAGAGCCUUCAxxxxxxxxxxCUAGCCGCAGACCUCCUCAUUCUAACCUGAAUCGGAGGACAACCAGUAAGCUACCCUUUUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[126.72999573 336.01022339]
[126.72999573 321.01022339]
[126.72999573 306.01022339]
[126.72999573 291.01022339]
[126.72999573 276.01022339]
[126.72999573 261.01022339]
[126.72999573 246.01020813]
[126.72999573 231.01020813]
[126.72999573 216.01020813]
[126.72999573 201.01020813]
[123.07128906 186.46325684]
[115.97488403 173.24807739]
[108.87847900 160.03288269]
[101.78207397 146.81770325]
[94.52776337 144.91377258]
[90.71966553 159.42233276]
[76.21116638 155.61399841]
[80.01914215 141.10591125]
[72.76482391 139.20199585]
[60.09331131 147.22898865]
[47.42179489 155.25598145]
[34.75027847 163.28297424]
[27.62413406 178.05288696]
[11.25215149 178.99641418]
[2.47642398 165.14294434]
[10.32466698 150.74374390]
[26.72328186 150.61146545]
[39.39479828 142.58447266]
[52.06631470 134.55746460]
[64.73783112 126.53047180]
[59.60752869 112.43508148]
[44.74092865 114.43113708]
[29.87433052 116.42720032]
[14.98065090 124.52748871]
[3.07394457 112.45823669]
[11.37541485 97.67575073]
[27.87827301 101.56060028]
[42.74487305 99.56454468]
[57.61146927 97.56848145]
[74.07579803 79.91181946]
[92.95092010 77.96564484]
[93.25889587 62.96880341]
[93.56687164 47.97196579]
[93.87485504 32.97512817]
[94.18283081 17.97828865]
[94.49080658 2.98145127]
[94.79878235 -12.01538658]
[95.10676575 -27.01222420]
[95.41474152 -42.00906372]
[95.72271729 -57.00590134]
[95.87671661 -72.00511169]
[95.87671661 -87.00511169]
[95.87671661 -102.00511169]
[80.98323059 -103.96449280]
[66.47293091 -107.85115814]
[52.59410095 -113.59860229]
[39.58423233 -121.10848236]
[27.66593170 -130.25228882]
[17.04314423 -140.87355042]
[7.89763737 -152.79054260]
[0.38590252 -165.79934692]
[-5.36352396 -179.67735291]
[-9.25226212 -194.18710327]
[-11.21377087 -209.08030701]
[-11.21448612 -224.10212708]
[-9.25439548 -238.99551392]
[-5.36703825 -253.50563049]
[0.38106713 -267.38418579]
[7.89156342 -280.39370728]
[17.03593636 -292.31155396]
[27.65771294 -302.93383789]
[39.57514191 -312.07879639]
[52.58429718 -319.58990479]
[66.46257782 -325.33865356]
[80.97251129 -329.22671509]
[95.86580658 -331.18750000]
[110.88762665 -331.18750000]
[125.78092194 -329.22671509]
[140.29084778 -325.33865356]
[154.16912842 -319.58990479]
[167.17828369 -312.07879639]
[179.09571838 -302.93383789]
[189.71749878 -292.31155396]
[198.86186218 -280.39370728]
[206.37236023 -267.38418579]
[212.12046814 -253.50563049]
[216.00782776 -238.99551392]
[217.96791077 -224.10212708]
[217.96720886 -209.08030701]
[216.00569153 -194.18710327]
[212.11695862 -179.67735291]
[206.36752319 -165.79934692]
[198.85578918 -152.79054260]
[189.71028137 -140.87355042]
[179.08749390 -130.25228882]
[167.16920471 -121.10848236]
[154.15933228 -113.59860229]
[140.28050232 -107.85115814]
[125.77019501 -103.96449280]
[110.87671661 -102.00511169]
[110.87671661 -87.00511169]
[110.87671661 -72.00511169]
[114.04127502 -65.27474976]
[110.71955872 -56.69792175]
[110.41157532 -41.70108414]
[110.10359955 -26.70424652]
[109.79562378 -11.70740891]
[109.48764801 3.28942895]
[109.17967224 18.28626633]
[108.87168884 33.28310394]
[108.56371307 48.27994156]
[108.25573730 63.27677917]
[107.94776154 78.27362061]
[132.79588318 99.83070374]
[114.99726105 139.72129822]
[122.09366608 152.93649292]
[129.19006348 166.15167236]
[136.28646851 179.36685181]
[137.02308655 164.38494873]
[141.25912476 149.99551392]
[148.75741577 137.00413513]
[159.09815979 126.13818359]
[171.70242310 118.00598145]
[185.86453247 113.06283569]
[200.79159546 111.58547211]
[215.64791870 113.65662384]
[229.60174561 119.16033173]
[241.87185669 127.78845215]
[251.77127075 139.05793762]
[258.74578857 152.33786011]
[262.40493774 166.88470459]
[262.54379272 181.88406372]
[259.15466309 196.49617004]
[252.42724609 209.90295410]
[242.73818970 221.35380554]
[230.62994385 230.20765686]
[216.78042603 235.96879578]
[201.96499634 238.31468201]
[187.01313782 237.11398315]
[172.76193237 232.43391418]
[160.00924683 224.53649902]
[149.46907043 213.86387634]
[141.72999573 201.01020813]
[141.72999573 216.01020813]
[141.72999573 231.01020813]
[141.72999573 246.01020813]
[141.72999573 261.01022339]
[141.72999573 276.01022339]
[141.72999573 291.01022339]
[141.72999573 306.01022339]
[141.72999573 321.01022339]
[141.72999573 336.01022339]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 118]
[12 117]
[13 116]
[14 115]
[19 30]
[20 29]
[21 28]
[22 27]
[31 39]
[32 38]
[33 37]
[41 113]
[42 112]
[43 111]
[44 110]
[45 109]
[46 108]
[47 107]
[48 106]
[49 105]
[50 104]
[51 102]
[52 101]
[53 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
