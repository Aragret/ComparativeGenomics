%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAACCAGUAACUACUACUAAUCAACGCCCAUAAUCAUACAAAGCCCCCGCACCAAUAGGAxxxxxxxxxxUUUAUUGACUCCUAGCCGCAGACCUCCUCAUUCUAACCUGAAUCGGAGGACAACCAGUAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[93.79148102 110.82017517]
[79.21878052 114.37493896]
[67.64533997 125.16224670]
[53.44700623 120.66152191]
[41.87356949 131.44883728]
[27.67523575 126.94810486]
[13.10253239 130.50286865]
[-1.47017002 134.05763245]
[-16.04287338 137.61238098]
[-30.61557579 141.16714478]
[-45.18827820 144.72190857]
[-43.78877640 159.68383789]
[-44.58275223 174.69007874]
[-47.55328751 189.42079163]
[-52.63706207 203.56198120]
[-59.72571182 216.81222534]
[-68.66815186 228.88908386]
[-79.27375793 239.53515625]
[-91.31649017 248.52351379]
[-104.53964233 255.66256714]
[-118.66136169 260.80014038]
[-133.38066101 263.82675171]
[-148.38377380 264.67785645]
[-163.35092163 263.33535767]
[-177.96307373 259.82781982]
[-191.90876770 254.23001099]
[-204.89076233 246.66128540]
[-216.63233948 237.28294373]
[-226.88322449 226.29489136]
[-235.42492676 213.93135071]
[-242.07536316 200.45584106]
[-246.69279480 186.15557861]
[-249.17880249 171.33540344]
[-249.48037720 156.31120300]
[-247.59111023 141.40319824]
[-243.55126953 126.92916870]
[-237.44694519 113.19762421]
[-229.40827942 100.50126648]
[-219.60659790 89.11070251]
[-208.25082397 79.26873016]
[-195.58302307 71.18513489]
[-181.87318420 65.03221130]
[-167.41355896 60.94112015]
[-152.51234436 58.99905396]
[-137.48716736 59.24740982]
[-122.65827179 61.68089294]
[-108.34175110 66.24763489]
[-94.84276581 72.85030365]
[-82.44903564 81.34814453]
[-71.42474365 91.56004333]
[-62.00487137 103.26832581]
[-54.39020157 116.22342682]
[-48.74304199 130.14921570]
[-34.17033768 126.59444427]
[-19.59763527 123.03968811]
[-5.02493191 119.48492432]
[9.54777050 115.93016052]
[24.12047386 112.37539673]
[34.65157318 101.84234619]
[49.89224625 106.08881378]
[60.42334366 95.55576324]
[75.66401672 99.80223083]
[90.23671722 96.24747467]
[84.76190186 88.94621277]
[82.84791565 78.90167236]
[85.43785095 67.56253052]
[88.23017883 52.82472229]
[91.02249908 38.08691788]
[93.81482697 23.34910965]
[96.60714722 8.61130428]
[83.23728180 1.55877709]
[72.54135132 -9.12244034]
[65.47042084 -22.48258209]
[62.65324402 -37.33367157]
[64.34031677 -52.35516357]
[70.38162231 -66.21135712]
[80.23997498 -77.67016602]
[93.03878021 -85.71267700]
[107.63996887 -89.62376404]
[122.74522400 -89.05564880]
[137.01138306 -84.05886078]
[149.16992188 -75.07769012]
[158.13970947 -62.91075134]
[163.12315369 -48.63991928]
[163.67712402 -33.53414154]
[159.75238037 -18.93661499]
[151.69789124 -6.14534378]
[140.22985840 3.70228195]
[126.36801910 9.73061752]
[111.34495544 11.40362835]
[108.55262756 26.14143372]
[105.76030731 40.87924194]
[102.96797943 55.61704636]
[100.17565918 70.35485077]
[104.62183380 76.39484406]
[114.13800812 64.79991913]
[122.58529663 52.40462494]
[137.58282471 52.13218307]
[146.47473145 64.21250153]
[141.75746155 78.45143890]
[127.41294098 82.83351135]
[113.51418304 88.47483826]
[117.96035767 94.51483154]
[132.86225891 96.22751617]
[147.76416016 97.94020844]
[162.66606140 99.65290070]
[177.56796265 101.36558533]
[188.17637634 93.95510101]
[200.58894348 95.72920990]
[208.19252014 105.18927765]
[223.05557251 107.21160889]
[237.91860962 109.23394012]
[252.78166199 111.25627899]
[265.20834351 101.49137878]
[280.88998413 103.45645905]
[290.52294922 115.98567963]
[288.39218140 131.64567566]
[275.76181030 141.14564514]
[260.12524414 138.84942627]
[250.75932312 126.11932373]
[235.89628601 124.09699249]
[221.03323364 122.07465363]
[206.17018127 120.05232239]
[190.34773254 127.57892609]
[175.85527039 116.26748657]
[160.95336914 114.55480194]
[146.05146790 112.84210968]
[131.14956665 111.12941742]
[116.24766541 109.41673279]
[130.74829102 113.25494385]
[143.80146790 120.64510345]
[154.55374146 131.10400391]
[162.30209351 143.94779968]
[166.53987122 158.33673096]
[166.99003601 173.32997131]
[163.62312317 187.94721985]
[156.65928650 201.23274231]
[146.55384827 212.31787109]
[133.96754456 220.47782898]
[119.72330475 225.17907715]
[104.75248718 226.11422729]
[90.03392792 223.22215271]
[76.52999115 216.69192505]
[65.12361908 206.95054626]
[56.56060028 194.63491821]
[51.40082169 180.55029297]
[49.98164368 165.61756897]
[52.39585876 150.81312561]
[58.48561859 137.10493469]
[67.85275269 125.38925934]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 63]
[2 62]
[4 60]
[6 58]
[7 57]
[8 56]
[9 55]
[10 54]
[11 53]
[66 94]
[67 93]
[68 92]
[69 91]
[70 90]
[103 129]
[104 128]
[105 127]
[106 126]
[107 125]
[110 123]
[111 122]
[112 121]
[113 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
