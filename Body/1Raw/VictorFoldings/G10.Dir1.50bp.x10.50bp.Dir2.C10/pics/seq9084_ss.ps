%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAAACACAUCCGUAUUACUCGCAUCAGGAGUAUCAAUCACCUGAGCUCACCAUAGUCUAxxxxxxxxxxACUAGGCGGCUAUGGUAUAAUACGCCUCACACUCAUUCUCAACCCCCUGACAAAACACAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[155.37516785 475.66403198]
[155.37516785 460.66403198]
[155.37516785 445.66403198]
[155.37516785 430.66403198]
[155.37516785 415.66403198]
[155.37516785 400.66403198]
[155.37516785 385.66403198]
[155.37516785 370.66403198]
[155.37516785 355.66403198]
[155.37516785 340.66403198]
[140.39909363 336.41653442]
[127.20712280 328.12515259]
[116.86611176 316.45080566]
[110.21506500 302.32839966]
[107.79704285 286.89190674]
[109.81484222 271.38342285]
[116.11402893 257.05307007]
[126.19468689 245.05838013]
[139.25111389 236.37066650]
[154.23620605 231.69647217]
[153.92414856 216.69970703]
[149.91641235 202.24502563]
[142.46150208 189.22871399]
[135.00659180 176.21240234]
[127.55168152 163.19609070]
[120.09677124 150.17979431]
[112.64186096 137.16348267]
[105.18695068 124.14717102]
[94.43944550 124.06388092]
[84.74496460 119.42354584]
[77.93937683 111.10491180]
[75.31147003 100.68330383]
[60.89925766 96.52541351]
[51.71991730 97.15116119]
[46.23214340 92.12821198]
[31.90954781 87.67139435]
[17.58695030 83.21457672]
[3.26435328 78.75776672]
[-11.05824375 74.30094910]
[-21.83132935 85.17289734]
[-36.42636490 89.78196716]
[-51.48951721 87.06903076]
[-63.55938339 77.65750122]
[-69.86240387 63.71007919]
[-68.95018005 48.43177795]
[-61.03233719 35.33344269]
[-47.92834473 27.42497444]
[-32.64939499 26.52367783]
[-18.70648575 32.83666611]
[-9.30359077 44.91326141]
[-6.60142851 59.97835159]
[7.72116899 64.43516541]
[22.04376602 68.89198303]
[36.36636353 73.34880066]
[50.68896103 77.80561066]
[65.05714417 82.11319733]
[79.46936035 86.27108765]
[83.66949463 81.47151184]
[88.95862579 77.90750885]
[94.98404694 75.81673431]
[96.54162598 60.89781952]
[98.09920502 45.97890854]
[99.65678406 31.05999565]
[101.21437073 16.14108276]
[102.77194977 1.22217143]
[104.32952881 -13.69674110]
[105.88710785 -28.61565208]
[91.84754944 -34.16481400]
[79.82644653 -43.29694748]
[70.71586609 -55.33438110]
[65.19186401 -69.38386536]
[63.66435623 -84.40283203]
[66.24669647 -99.27677155]
[72.74726105 -112.90193939]
[82.68366241 -124.26725769]
[95.31855011 -132.52935791]
[109.71434021 -137.07510376]
[124.80275726 -137.56721497]
[139.46415710 -133.96913147]
[152.61054993 -126.54788971]
[163.26638794 -115.85417175]
[170.64094543 -102.68153381]
[174.18698120 -88.00746918]
[173.64135742 -72.92089081]
[169.04454041 -58.54132080]
[160.73768616 -45.93582535]
[149.33717346 -36.03981018]
[135.68902588 -29.58762741]
[120.80602264 -27.05807114]
[119.24844360 -12.13916016]
[117.69086456 2.77975249]
[116.13327789 17.69866371]
[114.57569885 32.61757660]
[113.01811981 47.53648758]
[111.46054077 62.45540237]
[109.90295410 77.37431335]
[124.16536713 94.89851379]
[118.20326233 116.69226074]
[125.65817261 129.70857239]
[133.11308289 142.72488403]
[140.56799316 155.74118042]
[148.02290344 168.75749207]
[155.47781372 181.77380371]
[162.93272400 194.79011536]
[163.31893921 179.79508972]
[167.21667480 165.31034851]
[174.40780640 152.14646912]
[184.48991394 141.04011536]
[196.89880371 132.61279297]
[210.94004822 127.33612061]
[225.82789612 125.50535583]
[240.72923279 127.22296906]
[254.81016541 132.39283752]
[267.28271484 140.72564697]
[277.44888306 151.75509644]
[284.73980713 164.86396790]
[288.74746704 179.31867981]
[289.24758911 194.31033325]
[286.21218872 209.00000000]
[279.81109619 222.56562805]
[270.40258789 234.24809265]
[258.51312256 243.39361572]
[244.80805969 249.49041748]
[230.05432129 252.19731140]
[215.07754517 251.36282349]
[200.71585083 247.03366089]
[187.77291870 239.45207214]
[176.97303772 229.04234314]
[168.92091370 216.38766479]
[169.23297119 231.38441467]
[183.27044678 234.96359253]
[195.88656616 242.05886841]
[206.21902466 252.17805481]
[213.56349182 264.62252808]
[217.42163086 278.53546143]
[217.53486633 292.96084595]
[213.90174866 306.90908813]
[206.77760315 319.42507935]
[196.65658569 329.65335083]
[184.23741150 336.89682007]
[170.37516785 340.66403198]
[170.37516785 355.66403198]
[170.37516785 370.66403198]
[170.37516785 385.66403198]
[170.37516785 400.66403198]
[170.37516785 415.66403198]
[170.37516785 430.66403198]
[170.37516785 445.66403198]
[170.37516785 460.66403198]
[170.37516785 475.66403198]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[20 130]
[21 129]
[22 104]
[23 103]
[24 102]
[25 101]
[26 100]
[27 99]
[28 98]
[32 57]
[33 56]
[35 55]
[36 54]
[37 53]
[38 52]
[39 51]
[60 96]
[61 95]
[62 94]
[63 93]
[64 92]
[65 91]
[66 90]
[67 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
