%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUCUCAGCCCUCCUAAUGACCUCCGGCCUAGCCAUGUGAUUUCACUUCCACUCCAUAACxxxxxxxxxxCUCCUAGCAGCAGCAGGCAAAUCAGCCCAAUUAGGUCUCCACCCCUGACUCCCCUCAGCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[149.18910217 206.81349182]
[141.73419189 193.79718018]
[134.27928162 180.78086853]
[126.82437134 167.76455688]
[113.78491974 160.56581116]
[113.64038849 144.74526978]
[106.18547821 131.72895813]
[91.19846344 131.10498047]
[82.68737030 143.45655823]
[74.17627716 155.80812073]
[65.66519165 168.15969849]
[68.77256012 183.65550232]
[59.94320679 196.76342773]
[44.41542053 199.70680237]
[31.40156555 190.73934937]
[28.62253189 175.18132019]
[37.72706985 162.26300049]
[53.31361771 159.64860535]
[61.82470703 147.29702759]
[70.33580017 134.94546509]
[78.84688568 122.59388733]
[72.88083649 97.87332153]
[86.83510590 80.58895874]
[82.82736969 66.13426971]
[78.81962585 51.67958450]
[74.81188965 37.22489548]
[70.80414581 22.77020645]
[66.79640961 8.31551838]
[67.36446381 23.30475807]
[58.63831329 35.50534439]
[44.26971054 39.81153107]
[30.27168083 34.42124939]
[22.50217247 21.59024048]
[24.21260071 6.68807840]
[34.68717575 -4.04892588]
[49.54370117 -6.12727070]
[34.60939407 -7.52957439]
[19.67508698 -8.93187809]
[3.34006810 -4.39276934]
[-5.54363298 -18.83285904]
[5.87287903 -31.36679649]
[21.07739067 -23.86618614]
[36.01169968 -22.46388245]
[50.94600677 -21.06157875]
[58.07657623 -16.68622398]
[64.90070343 -11.87340355]
[66.14758301 -26.82149124]
[66.92742157 -41.80120468]
[67.23947906 -56.79795837]
[67.55153656 -71.79471588]
[67.86359406 -86.79146576]
[68.17565155 -101.78822327]
[68.48770905 -116.78497314]
[57.82712173 -128.14233398]
[58.35722351 -143.34672546]
[69.25043488 -153.43997192]
[69.56249237 -168.43673706]
[61.33189392 -155.89649963]
[50.78630066 -145.22924805]
[38.34131241 -136.85533142]
[24.48738480 -131.10479736]
[9.77049255 -128.20426941]
[-5.22937155 -128.26803589]
[-19.92106819 -131.29360962]
[-33.72560120 -137.16172791]
[-46.09893417 -145.64115906]
[-56.55344009 -156.39770508]
[-64.67710876 -169.00746155]
[-70.14978790 -182.97348022]
[-72.75580597 -197.74537659]
[-72.39244843 -212.74096680]
[-69.07405090 -227.36930847]
[-62.93137360 -241.05387878]
[-54.20650864 -253.25538635]
[-43.24329758 -263.49295044]
[-30.47380066 -271.36315918]
[-16.40125847 -276.55578613]
[-1.58026683 -278.86624146]
[13.40508270 -278.20346069]
[27.96422195 -274.59353638]
[41.52337646 -268.17877197]
[53.54818726 -259.21194458]
[63.56475449 -248.04644775]
[71.17832947 -235.12229919]
[76.08886719 -220.94885254]
[78.10283661 -206.08467102]
[77.14122009 -191.11766052]
[85.90742493 -203.28950500]
[87.01448059 -219.65122986]
[101.85484314 -226.62945557]
[115.16202545 -217.04557800]
[113.24674225 -200.75865173]
[98.07926178 -194.52328491]
[89.31305695 -182.35145569]
[84.55924225 -168.12467957]
[84.24718475 -153.12791443]
[94.71109772 -142.59027100]
[94.60826874 -127.37698364]
[83.48445892 -116.47291565]
[83.17240143 -101.47616577]
[82.86034393 -86.47940826]
[82.54829407 -71.48265839]
[82.23623657 -56.48590088]
[81.92417908 -41.48914719]
[84.14778900 -38.67435837]
[85.08306885 -34.62134171]
[84.15353394 -29.96426582]
[81.09566498 -25.57461548]
[79.84879303 -10.62652874]
[81.25109863 4.30777836]
[85.25883484 18.76246643]
[89.26657867 33.21715546]
[93.27431488 47.67184448]
[97.28205872 62.12653351]
[101.28979492 76.58122253]
[115.51621246 79.98070526]
[125.92958832 91.77637482]
[127.80168915 108.51521301]
[119.20178986 124.27404785]
[126.65670013 137.29035950]
[140.22937012 145.42012024]
[139.84068298 160.30964661]
[147.29559326 173.32595825]
[154.75050354 186.34226990]
[162.20541382 199.35858154]
[176.61424255 194.96160889]
[191.64027405 193.88168335]
[206.52978516 196.17294312]
[220.53594971 201.72047424]
[232.95622253 210.24600220]
[243.16758728 221.32191467]
[250.65786743 234.39262390]
[255.05133057 248.80252075]
[256.12762451 263.82879639]
[253.83276367 278.71777344]
[248.28184509 292.72259521]
[239.75329590 305.14080811]
[228.67491150 315.34948730]
[215.60238647 322.83657837]
[201.19142151 327.22656250]
[186.16487122 328.29922485]
[171.27647400 326.00073242]
[157.27299500 320.44644165]
[144.85685730 311.91488647]
[134.65086365 300.83401489]
[127.16692352 287.75967407]
[122.78043365 273.34765625]
[121.71141815 258.32086182]
[124.01350403 243.43299866]
[129.57121277 229.43086243]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 125]
[2 124]
[3 123]
[4 122]
[6 120]
[7 119]
[8 21]
[9 20]
[10 19]
[11 18]
[23 115]
[24 114]
[25 113]
[26 112]
[27 111]
[28 110]
[36 44]
[37 43]
[38 42]
[46 109]
[47 108]
[48 104]
[49 103]
[50 102]
[51 101]
[52 100]
[53 99]
[56 96]
[57 95]
[87 94]
[88 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
