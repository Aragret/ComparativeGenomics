%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGCCGUUUACUCAAUCCUCUGAUCAGGGUGAGCAUCAAACUCAAACUACGCCCUGAUCGGxxxxxxxxxxAUAAUCCUAUUUAUUACCUCAGAAGUUUUUUUCUUCGCAGGAUUUUUCUGAGCCUUUUACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[107.36610413 488.43362427]
[107.36610413 473.43362427]
[107.36610413 458.43362427]
[107.36610413 443.43362427]
[107.36610413 428.43362427]
[107.36610413 413.43362427]
[107.36610413 398.43362427]
[107.36610413 383.43362427]
[107.36610413 368.43362427]
[107.36610413 353.43362427]
[91.12394714 350.01107788]
[76.01451874 343.12377930]
[62.76733780 333.10128784]
[52.02268982 320.42456055]
[44.30063629 305.70300293]
[39.97586823 289.64498901]
[39.25951004 273.02395630]
[42.18883514 256.64105225]
[48.62532043 241.28656006]
[58.26119614 227.70172119]
[70.63416290 216.54302979]
[85.14958954 208.35046387]
[101.10904694 203.52134705]
[99.86217499 188.57325745]
[98.61529541 173.62516785]
[97.36842346 158.67707825]
[96.12155151 143.72900391]
[94.87467194 128.78091431]
[76.67038727 120.55498505]
[67.08869171 101.64528656]
[71.71520996 79.70643616]
[58.47262192 72.66130066]
[45.23003387 65.61616516]
[31.98744965 58.57102966]
[18.74486351 51.52589417]
[5.50227833 44.48075867]
[-7.74030733 37.43562698]
[-20.98289299 30.39048958]
[-34.70294571 24.32747650]
[-48.82775116 19.27872086]
[-62.95255280 14.22996426]
[-77.07735443 9.18120766]
[-90.48221588 17.23377228]
[-105.91884613 14.73487091]
[-116.09854126 2.86441016]
[-116.21475983 -12.77274132]
[-106.21263123 -24.79319954]
[-90.81484985 -27.52127075]
[-77.29177856 -19.66884422]
[-72.02860260 -4.94359493]
[-57.90379715 0.10516147]
[-43.77899170 5.15391779]
[-29.65419006 10.20267391]
[-35.71184540 -3.51974607]
[-31.70011139 -17.97332573]
[-19.43634224 -26.61045456]
[-4.47614574 -25.51842499]
[6.40336227 -15.19193935]
[8.27365875 -0.30899632]
[0.28748095 12.38828564]
[-13.93775845 17.14790535]
[-0.69517249 24.19303894]
[12.54741287 31.23817444]
[25.78999901 38.28330994]
[39.03258514 45.32844543]
[52.27516937 52.37358093]
[65.51775360 59.41871262]
[78.76033783 66.46385193]
[92.72073364 60.97681808]
[97.62228394 46.80025864]
[85.18389893 55.18397522]
[70.28878021 56.95464706]
[56.23157501 51.72061920]
[46.12161636 40.63961029]
[42.19512939 26.16263962]
[45.32062531 11.49187660]
[54.80676270 -0.12764035]
[68.55529785 -6.12578106]
[83.52519226 -5.17581177]
[96.40522766 2.51214290]
[104.34646606 15.23757839]
[105.59207916 30.18770409]
[113.58199310 17.49277496]
[121.57190704 4.79784489]
[129.56182861 -7.89708471]
[124.60576630 -22.72852135]
[130.39073181 -37.25671005]
[144.18522644 -44.62187958]
[159.47592163 -41.34642792]
[169.04302979 -28.97691917]
[168.36921692 -13.35385990]
[157.77267456 -1.85397840]
[142.25675964 0.09283140]
[134.26683044 12.78776073]
[126.27692413 25.48269081]
[118.28700256 38.17761993]
[111.79884338 51.70180893]
[106.89728546 65.87836456]
[114.02818298 69.66977692]
[119.80962372 74.83982849]
[124.00591278 80.97885132]
[126.49514771 87.64618683]
[141.26119995 85.00732422]
[156.02726746 82.36845398]
[170.79331970 79.72959137]
[178.42335510 66.07981110]
[193.06050110 60.57633209]
[207.79351807 65.81772614]
[215.66593933 79.32916260]
[212.96064758 94.73096466]
[200.95498657 104.75086212]
[185.31768799 104.65777588]
[173.43217468 94.49565125]
[158.66612244 97.13451385]
[143.90007019 99.77337646]
[129.13401794 102.41223907]
[126.13697052 113.09460449]
[119.37523651 121.89086151]
[109.82276154 127.53403473]
[111.06963348 142.48211670]
[112.31651306 157.43020630]
[113.56338501 172.37829590]
[114.81025696 187.32638550]
[116.05713654 202.27447510]
[129.48368835 203.70721436]
[142.44058228 207.49395752]
[154.51861572 213.51368713]
[165.33656311 221.57485962]
[174.55331421 231.42156982]
[181.87849426 242.74160767]
[187.08172607 255.17637634]
[189.99975586 268.33224487]
[190.54170227 281.79309082]
[188.69181824 295.13327026]
[184.50993347 307.93133545]
[178.12954712 319.78311157]
[169.75357056 330.31460571]
[159.64784241 339.19375610]
[148.13275146 346.14093018]
[135.57299805 350.93765259]
[122.36610413 353.43362427]
[122.36610413 368.43362427]
[122.36610413 383.43362427]
[122.36610413 398.43362427]
[122.36610413 413.43362427]
[122.36610413 428.43362427]
[122.36610413 443.43362427]
[122.36610413 458.43362427]
[122.36610413 473.43362427]
[122.36610413 488.43362427]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[23 124]
[24 123]
[25 122]
[26 121]
[27 120]
[28 119]
[31 68]
[32 67]
[33 66]
[34 65]
[35 64]
[36 63]
[37 62]
[38 61]
[39 53]
[40 52]
[41 51]
[42 50]
[69 98]
[70 97]
[82 96]
[83 95]
[84 94]
[85 93]
[102 116]
[103 115]
[104 114]
[105 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
