%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUUACGACCCCUUAUUUACCGAGAAAGCUCACAAGAACUGCUAACUCAUGCCCCCAUGUCxxxxxxxxxxUGCACACUACUAUAACCACCCUAACCCUGACUUCCCUAAUUCCCCCCAUCCUUACCACCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[168.51411438 98.02838898]
[153.80616760 100.97387695]
[139.09820557 103.91935730]
[124.39023590 106.86483765]
[109.68227386 109.81031799]
[97.33070374 118.32141113]
[89.34078979 131.01634216]
[81.35086823 143.71127319]
[73.36095428 156.40620422]
[72.55844116 172.20704651]
[59.23081589 178.85713196]
[59.14648819 195.25607300]
[44.77029037 203.14637756]
[30.89122200 194.41117859]
[31.78687859 178.03651428]
[46.53588867 170.86721802]
[46.76691055 155.97441101]
[60.66602325 148.41629028]
[68.65593719 135.72135925]
[76.64585876 123.02642059]
[84.63577271 110.33149719]
[81.89225769 103.35130310]
[68.79417419 110.66157532]
[60.15141678 122.92137909]
[45.21978760 124.35189056]
[34.40653229 113.95604706]
[35.24842834 98.97969055]
[47.15867996 89.86125183]
[61.83492279 92.95549011]
[76.40522766 89.39090729]
[73.66171265 82.41071320]
[59.16611481 78.55355835]
[44.67051697 74.69639587]
[31.11029625 82.36178589]
[16.46464729 78.24358368]
[9.24043846 65.26874542]
[-5.25515842 61.41158295]
[-19.75075531 57.55442429]
[-30.06225967 68.86510468]
[-44.45293045 74.07731628]
[-59.61589813 71.99333191]
[-72.06682587 63.09204102]
[-78.94457245 49.41888809]
[-78.66869354 34.11586380]
[-71.30258179 20.69949722]
[-58.53890991 12.25276566]
[-43.31068039 10.71666813]
[-29.11722755 16.44418907]
[-19.22010422 28.11918449]
[-15.89359570 43.05882645]
[-1.39799893 46.91598511]
[13.09759808 50.77314758]
[25.81484985 43.10456848]
[40.57039261 46.80978012]
[48.52767563 60.20079803]
[63.02327347 64.05796051]
[77.51886749 67.91511536]
[93.04621887 69.31299591]
[103.91319275 76.57156372]
[108.43685150 86.35697174]
[106.73679352 95.10235596]
[121.44475555 92.15687561]
[136.15270996 89.21139526]
[150.86067200 86.26591492]
[165.56863403 83.32042694]
[163.67887878 68.43344879]
[162.85597229 53.44959259]
[163.10409546 38.44520187]
[164.42199707 23.49674416]
[166.80294800 8.68039131]
[170.23483276 -5.92835379]
[174.70014954 -20.25504875]
[180.17614746 -34.22668839]
[186.63493347 -47.77207184]
[194.04357910 -60.82217789]
[202.36433411 -73.31050110]
[211.55480957 -85.17340851]
[221.56814575 -96.35044861]
[232.35334778 -106.78466034]
[243.85543823 -116.42287445]
[256.01580811 -125.21598053]
[268.77249146 -133.11917114]
[282.06045532 -140.09216309]
[295.81204224 -146.09942627]
[309.95715332 -151.11036682]
[324.42367554 -155.09942627]
[339.13793945 -158.04627991]
[354.02493286 -159.93592834]
[369.00878906 -160.75872803]
[384.01318359 -160.51048279]
[398.96163940 -159.19247437]
[413.77795410 -156.81140137]
[428.38668823 -153.37940979]
[442.71334839 -148.91397095]
[456.68493652 -143.43786621]
[470.23028564 -136.97898865]
[483.28033447 -129.57023621]
[495.76858521 -121.24938965]
[507.63143921 -112.05883026]
[518.80841064 -102.04540253]
[529.24249268 -91.26012421]
[538.88067627 -79.75795746]
[547.67364502 -67.59752655]
[555.57672119 -54.84078217]
[562.54962158 -41.55274200]
[568.55682373 -27.80111504]
[573.56762695 -13.65597820]
[577.55657959 0.81058896]
[580.50329590 15.52486610]
[582.39282227 30.41187096]
[583.21551514 45.39574432]
[582.96716309 60.40013123]
[581.64904785 75.34857178]
[579.26788330 90.16488647]
[575.83575439 104.77357483]
[571.37023926 119.10020447]
[565.89398193 133.07176208]
[559.43499756 146.61705017]
[552.02618408 159.66703796]
[543.70520020 172.15522766]
[534.51458740 184.01800537]
[524.50103760 195.19488525]
[513.71569824 205.62893677]
[502.21347046 215.26696777]
[490.05297852 224.05989075]
[477.29617310 231.96287537]
[464.00805664 238.93566895]
[450.25640869 244.94273376]
[436.11120605 249.95344543]
[421.64462280 253.94229126]
[406.93032837 256.88891602]
[392.04330444 258.77832031]
[377.05941772 259.60089111]
[362.05505371 259.35244751]
[347.10659790 258.03417969]
[332.29031372 255.65289307]
[317.68164062 252.22067261]
[303.35504150 247.75502014]
[289.38354492 242.27870178]
[275.83831787 235.81961060]
[262.78836060 228.41065979]
[250.30023193 220.08961487]
[238.43754578 210.89888000]
[227.26072693 200.88528442]
[216.82676697 190.09983826]
[207.18881226 178.59753418]
[198.39599609 166.43696594]
[190.49310303 153.68009949]
[183.52040100 140.39195251]
[177.51345825 126.64023590]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 65]
[2 64]
[3 63]
[4 62]
[5 61]
[6 21]
[7 20]
[8 19]
[9 18]
[11 16]
[31 57]
[32 56]
[33 55]
[36 52]
[37 51]
[38 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
