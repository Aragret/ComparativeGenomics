%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAACAGCCCAAUAUCUACAAUCAACCAACAAGUCAUUAUUACCCUCACUGUCAACCCAACxxxxxxxxxxGGGCCAGCCAGGCAACCUUCUAGGUAACGACCACAUCUACAACGUUAUCGUCACAGCCCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[124.38048553 283.39364624]
[124.38048553 268.39364624]
[124.38048553 253.39364624]
[124.38048553 238.39364624]
[124.38048553 223.39364624]
[124.38048553 208.39364624]
[124.38048553 193.39364624]
[124.38048553 178.39364624]
[124.38048553 163.39364624]
[124.38048553 148.39364624]
[92.88547516 149.64379883]
[68.52101135 133.69812012]
[58.85123825 108.78823853]
[43.85854340 109.25627899]
[28.86584854 109.72431946]
[13.87315178 110.19235992]
[12.15201759 125.12071228]
[8.27554989 139.63934326]
[2.32637691 153.43881226]
[-5.56869507 166.22496033]
[-15.24138165 177.72526550]
[-26.48550987 187.69459534]
[-39.06140900 195.92044067]
[-52.70102310 202.22747803]
[-67.11362457 206.48127747]
[-81.99200439 208.59115601]
[-97.01903534 208.51216125]
[-111.87441254 206.24595642]
[-126.24148560 201.84085083]
[-139.81402588 195.39073181]
[-152.30274963 187.03311157]
[-163.44142151 176.94610596]
[-172.99264526 165.34472656]
[-180.75283813 152.47627258]
[-186.55659485 138.61500549]
[-190.28018188 124.05641937]
[-191.84425354 109.11079407]
[-191.21546936 94.09671783]
[-188.40721130 79.33421326]
[-183.47937012 65.13793945]
[-176.53697205 51.81049347]
[-167.72796631 39.63594818]
[-157.24015808 28.87380981]
[-145.29707336 19.75346947]
[-132.15328979 12.46932888]
[-118.08895874 7.17665052]
[-103.40386200 3.98824787]
[-88.41102600 2.97208238]
[-73.43000793 4.14981318]
[-58.78014374 7.49633694]
[-44.77368164 12.94032192]
[-31.70918274 20.36573029]
[-19.86511230 29.61428833]
[-9.49392605 40.48886108]
[-0.81668824 52.75765991]
[5.98164511 66.15917206]
[10.75616741 80.40774536]
[13.40510941 95.19966888]
[28.39780617 94.73162079]
[43.39050293 94.26358032]
[58.38319778 93.79553986]
[60.70307922 81.56224823]
[66.64453125 70.18561554]
[75.89331818 60.74214554]
[87.81499481 54.19383240]
[86.56812286 39.24574661]
[72.07872772 34.64946747]
[60.45440674 24.85438538]
[53.46779251 11.35417557]
[52.18428802 -3.79247618]
[56.79962158 -18.27581596]
[66.60998535 -29.88723946]
[80.11937714 -36.85609055]
[95.26770020 -38.11966705]
[109.74495697 -33.48528671]
[121.34346771 -23.65965462]
[128.29454041 -10.14111042]
[129.53819275 5.00886583]
[124.88476562 19.48001289]
[115.04388428 31.06558609]
[101.51621246 37.99887085]
[102.76308441 52.94695663]
[117.40658569 56.19778442]
[124.86149597 43.18147278]
[132.31640625 30.16516495]
[129.51495361 14.36860085]
[140.22622681 2.42506003]
[156.23345947 3.49660468]
[165.25726318 16.76123619]
[160.37535095 32.04346466]
[145.33271790 37.62007523]
[137.87780762 50.63638306]
[130.42289734 63.65269470]
[142.85609436 72.73558044]
[152.37646484 86.10542297]
[165.15380859 78.24800110]
[177.93116760 70.39057159]
[190.70852661 62.53314972]
[201.03343201 49.08574677]
[216.81352234 55.28453827]
[215.22535706 72.16393280]
[198.56594849 75.31050873]
[185.78860474 83.16793060]
[173.01124573 91.02536011]
[160.23388672 98.88278198]
[163.48471069 113.52628326]
[178.38661194 115.23897552]
[193.28851318 116.95166016]
[208.19041443 118.66435242]
[215.89619446 105.52886963]
[228.28222656 96.66851044]
[243.20257568 93.61839294]
[258.07217407 96.90695190]
[270.31481934 105.96443939]
[277.80932617 119.22158813]
[279.25729370 134.38151550]
[274.40783691 148.81765747]
[264.10113525 160.02890015]
[250.12289429 166.07279968]
[234.89492798 165.90222168]
[221.05558777 159.54670715]
[211.00260925 148.10742188]
[206.47772217 133.56625366]
[191.57582092 131.85356140]
[176.67391968 130.14086914]
[161.77201843 128.42819214]
[156.17413330 133.41955566]
[168.43067932 142.06692505]
[180.68722534 150.71430969]
[195.56977844 152.58766174]
[207.06886292 162.21945190]
[211.52308655 176.54284668]
[207.51420593 190.99722290]
[196.31869507 200.98022461]
[181.50122070 203.31320190]
[167.77978516 197.25334167]
[159.52333069 184.73011780]
[159.36112976 169.72975159]
[152.16975403 156.56600952]
[144.97837830 143.40228271]
[139.38049316 148.39364624]
[139.38049316 163.39364624]
[139.38049316 178.39364624]
[139.38049316 193.39364624]
[139.38049316 208.39364624]
[139.38049316 223.39364624]
[139.38049316 238.39364624]
[139.38049316 253.39364624]
[139.38049316 268.39364624]
[139.38049316 283.39364624]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[13 61]
[14 60]
[15 59]
[16 58]
[65 82]
[66 81]
[83 93]
[84 92]
[85 91]
[95 105]
[96 104]
[97 103]
[98 102]
[106 126]
[107 125]
[108 124]
[109 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
