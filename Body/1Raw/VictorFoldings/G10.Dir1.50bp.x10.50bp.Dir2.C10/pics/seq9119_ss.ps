%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUUCAAGCACUGCUUAUUACAAUUUUACUGGGUCUCUAUUUUACCCUCCUACAAGCCUCAGxxxxxxxxxxUCUUGCUCAUCAGUUGAUGAUACGCCCGAGCAGAUGCCAACACAGCAGCCAUUCAAGCAAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[119.71572876 536.24444580]
[119.71572876 521.24444580]
[119.71572876 506.24444580]
[119.71572876 491.24444580]
[119.71572876 476.24444580]
[119.71572876 461.24444580]
[119.71572876 446.24444580]
[119.71572876 431.24444580]
[119.71572876 416.24444580]
[119.71572876 401.24444580]
[103.19802856 396.82580566]
[88.54575348 387.98779297]
[76.91492462 375.41937256]
[69.22554016 360.10415649]
[66.08872986 343.24340820]
[67.75823975 326.16183472]
[74.10988617 310.20355225]
[84.65078735 296.62628174]
[98.55760193 286.50219727]
[114.74082184 280.63333130]
[113.51020813 265.68389893]
[112.27959442 250.73446655]
[111.04898071 235.78503418]
[109.81836700 220.83560181]
[96.54855347 210.54895020]
[94.75936890 193.51573181]
[106.03706360 180.18154907]
[104.49977112 165.26052856]
[93.45667267 151.65557861]
[101.03816223 134.90589905]
[99.19483185 120.01959991]
[97.57611847 134.93200684]
[87.85800171 146.35821533]
[73.39880371 150.34963989]
[59.19522095 145.52696228]
[50.15561676 133.55677795]
[49.40383530 118.57562256]
[57.19966888 105.76059723]
[70.84909058 99.54020691]
[85.63555145 102.06420898]
[71.82197571 96.21742249]
[58.00838852 90.37063599]
[44.19480515 84.52384186]
[31.51335335 93.30930328]
[16.09448433 93.82115173]
[2.85830188 85.89606476]
[-3.97157359 72.06290436]
[-2.21575475 56.73578262]
[7.56548309 44.80553055]
[22.25098228 40.07904434]
[37.15465546 44.06453323]
[47.52079010 55.49024200]
[50.04159546 70.71026611]
[63.85517883 76.55705261]
[77.66876221 82.40383911]
[91.48234558 88.25062561]
[105.35522461 82.54596710]
[111.05989075 68.67308044]
[98.98354340 77.57038879]
[85.25531769 83.61486816]
[70.53826904 86.51459503]
[55.54321289 86.12950134]
[40.99440002 82.47819519]
[27.59452438 75.73702240]
[15.99078846 66.23159027]
[6.74364185 54.42098999]
[0.29971409 40.87566376]
[-3.02975965 26.24984550]
[-3.08396864 11.24994278]
[0.13970514 -3.39955974]
[6.48556137 -16.99110603]
[15.64710140 -28.86823463]
[27.18182945 -38.45729065]
[40.53263092 -45.29513550]
[55.05467224 -49.05150604]
[70.04655457 -49.54496765]
[84.78417969 -46.75169373]
[98.55573273 -40.80659103]
[110.69606781 -31.99680710]
[120.61881256 -20.74784470]
[127.84471130 -7.60301924]
[132.02474976 6.80278730]
[132.95704651 21.77378654]
[130.59655762 36.58689499]
[125.05518341 50.53066635]
[137.02543640 41.49114609]
[148.99569702 32.45162582]
[160.96595764 23.41210556]
[172.93621826 14.37258625]
[184.32728577 4.61331177]
[195.09596252 -5.82869720]
[205.86465454 -16.27070618]
[216.63333130 -26.71271515]
[218.31709290 -42.66716766]
[231.91755676 -51.17638397]
[247.00161743 -45.71281815]
[251.99807739 -30.46765709]
[243.07406616 -17.13567924]
[227.07533264 -15.94403648]
[216.30665588 -5.50202751]
[205.53797913 4.93998146]
[194.76930237 15.38199043]
[209.67027283 17.10271454]
[219.13819885 28.73707771]
[217.79536438 43.67684937]
[206.40447998 53.43634796]
[191.43548584 52.47225189]
[181.39067078 41.33215714]
[181.97573853 26.34284401]
[170.00547791 35.38236237]
[158.03521729 44.42188263]
[146.06495667 53.46140289]
[134.09469604 62.50092316]
[124.93276978 74.37774658]
[119.22810364 88.25062561]
[114.08113861 118.17626953]
[115.92446899 133.06257629]
[125.62273407 141.62689209]
[126.82180786 154.10621643]
[119.42079163 163.72323608]
[120.95808411 178.64425659]
[132.34407043 185.90847778]
[137.37542725 198.23190308]
[134.41499329 211.00939941]
[124.76780701 219.60498047]
[125.99842072 234.55442810]
[127.22902679 249.50386047]
[128.45964050 264.45327759]
[129.69026184 279.40274048]
[142.57929993 281.33972168]
[154.76240540 285.95162964]
[165.69148254 293.02774048]
[174.87548828 302.24667358]
[181.90254211 313.19079590]
[186.45837402 325.36520386]
[188.34039307 338.22012329]
[187.46665955 351.17565918]
[183.87953186 363.64807129]
[177.74348450 375.07595825]
[169.33772278 384.94561768]
[159.04338074 392.81408691]
[147.32624817 398.32901001]
[134.71572876 401.24444580]
[134.71572876 416.24444580]
[134.71572876 431.24444580]
[134.71572876 446.24444580]
[134.71572876 461.24444580]
[134.71572876 476.24444580]
[134.71572876 491.24444580]
[134.71572876 506.24444580]
[134.71572876 521.24444580]
[134.71572876 536.24444580]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[20 129]
[21 128]
[22 127]
[23 126]
[24 125]
[27 121]
[28 120]
[30 117]
[31 116]
[40 56]
[41 55]
[42 54]
[43 53]
[57 115]
[58 114]
[85 113]
[86 112]
[87 111]
[88 110]
[89 109]
[90 102]
[91 101]
[92 100]
[93 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
