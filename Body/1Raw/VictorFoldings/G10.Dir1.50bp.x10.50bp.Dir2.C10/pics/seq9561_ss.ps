%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUACAUAAAUAUUAUACUAGCAUUUACCAUCUCACUUCUAGGAAUACUAGUAUAUCGCUCAxxxxxxxxxxCCAGCCACCAUGAAUAUUGUACGGUACCAUAAAUACUUGACCACCUGUAGUACAUAAAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[108.37555695 311.56469727]
[108.37555695 296.56469727]
[108.37555695 281.56469727]
[108.37555695 266.56469727]
[108.37555695 251.56468201]
[108.37555695 236.56468201]
[108.37555695 221.56468201]
[108.37555695 206.56468201]
[108.37555695 191.56468201]
[108.37555695 176.56468201]
[106.66286469 161.66278076]
[103.25988770 147.05389404]
[99.85691071 132.44500732]
[96.45393372 117.83610535]
[82.52281189 109.24349213]
[80.34198761 91.65255737]
[93.63349915 77.95827484]
[83.42002106 66.97261047]
[73.20654297 55.98694229]
[62.99306107 45.00127792]
[52.77957916 34.01561356]
[42.56610107 23.02994919]
[29.47294617 15.71084309]
[14.76498508 12.76536083]
[0.05702316 9.81987858]
[-14.65093803 6.87439585]
[-29.35890007 3.92891312]
[-44.06686020 0.98343062]
[-58.77482224 -1.96205187]
[-73.82565308 2.91473150]
[-84.78579712 -7.17112684]
[-99.49375916 -10.11660957]
[-114.20172119 -13.06209183]
[-120.67779541 -11.28219891]
[-126.22515869 -12.85000038]
[-129.45449829 -16.44817543]
[-144.02720642 -20.00293732]
[-153.68003845 -8.17983723]
[-167.51040649 -1.72357547]
[-182.77230835 -1.91604769]
[-196.43548584 -8.71903896]
[-205.78707886 -20.78180885]
[-208.97033691 -35.70928955]
[-205.35321045 -50.53761292]
[-195.65390015 -62.32260895]
[-181.79820251 -68.72435760]
[-166.53718567 -68.47178650]
[-152.90090942 -61.61504364]
[-143.59689331 -49.51554108]
[-140.47244263 -34.57564163]
[-125.89974213 -31.02087975]
[-111.25624084 -27.77005386]
[-96.54827881 -24.82457161]
[-81.84031677 -21.87908745]
[-67.84149170 -26.96655273]
[-55.82934189 -16.67001343]
[-41.12137985 -13.72453117]
[-26.41341782 -10.77904797]
[-11.70545578 -7.83356571]
[3.00250554 -4.88808346]
[17.71046638 -1.94260097]
[32.41843033 1.00288153]
[21.56548882 -9.35152245]
[12.89555454 -21.59212112]
[6.72934723 -35.26610565]
[3.29496717 -49.86764908]
[2.71946025 -64.85660553]
[5.02411556 -79.67849731]
[10.12367916 -93.78504181]
[17.82950592 -106.65438843]
[27.85654068 -117.81049347]
[39.83386230 -126.84064484]
[53.31840515 -133.41081238]
[67.81134033 -137.27795410]
[82.77655029 -138.29901123]
[97.66043091 -136.43620300]
[111.91239929 -131.75845337]
[125.00524902 -124.43880463]
[136.45463562 -114.74800873]
[145.83703613 -103.04455566]
[152.80534363 -89.76139069]
[157.10182190 -75.38988495]
[158.56752014 -60.46166229]
[157.14822388 -45.52896118]
[152.89642334 -31.14417076]
[145.96940613 -17.83941650]
[136.62342834 -6.10686922]
[125.20420837 3.61945629]
[112.13417053 10.97976303]
[97.89680481 15.70177746]
[83.01878357 17.61082077]
[68.05047607 16.63627434]
[53.55176544 12.81646919]
[63.76524353 23.80213356]
[73.97872162 34.78779984]
[84.19220734 45.77346420]
[94.40568542 56.75912857]
[104.61916351 67.74478912]
[118.57955170 73.23182678]
[133.53981018 72.14051056]
[139.30488586 68.69503021]
[145.06947327 68.72367859]
[149.14279175 71.32822418]
[164.13548279 70.86017609]
[179.12817383 70.39213562]
[184.47154236 56.16129303]
[194.85772705 45.06193542]
[208.70289612 38.78664017]
[223.89579773 38.29234314]
[238.11959839 43.65441895]
[249.20529175 54.05519104]
[255.46235657 67.90861511]
[255.93667603 83.10214996]
[250.55589294 97.31889343]
[240.14054871 108.39088440]
[226.27890015 114.62973022]
[211.08476257 115.08405304]
[196.87510681 109.68457794]
[185.81683350 99.25467682]
[179.59622192 85.38483429]
[164.60353088 85.85287476]
[149.61082458 86.32091522]
[134.63111877 87.10076141]
[119.67086792 88.19207001]
[120.20124817 103.84535980]
[111.06282806 114.43312836]
[114.46580505 129.04202271]
[117.86878204 143.65090942]
[121.27175903 158.25981140]
[127.33303833 144.53898621]
[138.99603271 135.10636902]
[153.68101501 132.04833984]
[168.13978577 136.04133606]
[179.17419434 146.20213318]
[184.34355164 160.28324890]
[182.50442505 175.17007446]
[174.06361389 187.56977844]
[160.88816833 194.73966980]
[145.89234924 195.09382629]
[132.39309692 188.55392456]
[123.37555695 176.56468201]
[123.37555695 191.56468201]
[123.37555695 206.56468201]
[123.37555695 221.56468201]
[123.37555695 236.56468201]
[123.37555695 251.56468201]
[123.37555695 266.56469727]
[123.37555695 281.56469727]
[123.37555695 296.56469727]
[123.37555695 311.56469727]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 129]
[12 128]
[13 127]
[14 126]
[17 98]
[18 97]
[19 96]
[20 95]
[21 94]
[22 93]
[23 62]
[24 61]
[25 60]
[26 59]
[27 58]
[28 57]
[29 56]
[31 54]
[32 53]
[33 52]
[36 51]
[37 50]
[99 124]
[100 123]
[103 122]
[104 121]
[105 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
