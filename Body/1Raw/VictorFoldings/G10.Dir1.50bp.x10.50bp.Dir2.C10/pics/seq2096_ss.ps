%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCCCUAUACCUUCUGCAUAAUGAAUUAACUAGAAAUAACUUUGCAAGGAGAGCCAAAGCxxxxxxxxxxUCCUGAUCAAAUAUCACUCUCCUACUUACAGGACUCAACAUACUAGUCACAGCCCUAUACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[108.84310150 397.52462769]
[108.84310150 382.52462769]
[108.84310150 367.52462769]
[108.84310150 352.52462769]
[108.84310150 337.52462769]
[108.84310150 322.52462769]
[108.84310150 307.52462769]
[108.84310150 292.52462769]
[108.84310150 277.52462769]
[108.84310150 262.52462769]
[94.30070496 258.97396851]
[81.02275085 252.04171753]
[69.78307343 242.12701416]
[61.23789215 229.80290222]
[55.88749313 215.78329468]
[54.04693985 200.88160706]
[55.82753754 185.96348572]
[61.13008881 171.89663696]
[69.65042877 159.50025940]
[80.89685822 149.49740601]
[94.21853638 142.47279358]
[108.84310150 138.83854675]
[82.62831879 132.74900818]
[68.03076172 112.45510864]
[70.25837708 89.47676849]
[55.35647583 87.76408386]
[40.45457458 86.05139160]
[25.55267334 84.33869934]
[20.30516434 98.47118378]
[11.82743168 110.93679810]
[0.61236155 121.01080322]
[-12.68801785 128.10751343]
[-27.30043983 131.81434631]
[-42.37535858 131.91577148]
[-57.03633499 128.40589905]
[-70.43099976 121.48880005]
[-81.78060913 111.56661224]
[-90.42530823 99.21620178]
[-95.86250305 85.15560150]
[-97.77609253 70.20228577]
[-96.05480957 55.22562027]
[-90.79872894 41.09632111]
[-82.31344604 28.63584900]
[-71.09226990 18.56864357]
[-57.78758621 11.47999477]
[-43.17292023 7.78202963]
[-28.09794426 7.68974257]
[-13.43909645 11.20849895]
[-0.04862590 18.13372231]
[11.29496479 28.06278992]
[19.93217278 40.41843796]
[25.36084557 54.48232651]
[27.26536179 69.43679810]
[42.16726303 71.14949036]
[57.06916809 72.86218262]
[71.97106934 74.57486725]
[84.05105591 65.68251801]
[86.84338379 50.94471359]
[89.63570404 36.20690918]
[92.42803192 21.46910095]
[95.22035217 6.73129559]
[98.01268005 -8.00650978]
[100.80500793 -22.74431610]
[90.75595856 -11.60803986]
[78.01851654 -3.68606758]
[63.58672714 0.40336445]
[48.58685684 0.34111297]
[34.18950653 -3.86796379]
[21.51826096 -11.89538574]
[11.56199265 -23.11468697]
[5.09769678 -36.65030289]
[2.62985396 -51.44589996]
[4.35105610 -66.34682465]
[10.12697887 -80.19018555]
[19.50686455 -91.89564514]
[31.75870132 -100.54969025]
[45.92634201 -105.47695923]
[60.90413284 -106.29292297]
[75.52319336 -102.93389893]
[88.64263916 -95.66202545]
[99.23862457 -85.04481506]
[106.48422241 -71.91083527]
[109.81398010 -57.28508377]
[108.96751404 -42.30630112]
[117.47859955 -54.65787125]
[125.98969269 -67.00944519]
[134.50077820 -79.36101532]
[133.02210999 -95.33578491]
[144.68911743 -106.34761047]
[160.55187988 -103.94917297]
[168.44183350 -89.98034668]
[162.30648804 -75.15681458]
[146.85235596 -70.84992981]
[138.34126282 -58.49835587]
[129.83016968 -46.14678192]
[121.31908417 -33.79520798]
[115.54280853 -19.95199203]
[112.75048828 -5.21418571]
[109.95816040 9.52362061]
[107.16584015 24.26142693]
[104.37351227 38.99923325]
[101.58119202 53.73703766]
[98.78886414 68.47484589]
[119.66584778 70.21635437]
[137.20503235 85.77260590]
[151.84854126 82.52178192]
[166.00085449 73.18645477]
[178.88909912 84.20142365]
[171.87242126 99.63523865]
[155.09936523 97.16528320]
[140.45585632 100.41610718]
[139.98782349 115.40880585]
[154.40003967 119.56668854]
[168.81225586 123.72457886]
[183.22447205 127.88246918]
[194.76782227 117.64750671]
[210.01565552 115.30070496]
[224.10240173 121.59091949]
[232.53306580 134.51095581]
[232.61744690 149.93809509]
[224.32859802 162.94956970]
[210.31149292 169.39349365]
[195.03890991 167.21360779]
[183.38429260 157.10551453]
[179.06657410 142.29467773]
[164.65435791 138.13679504]
[150.24214172 133.97891235]
[135.82992554 129.82101440]
[123.84310150 138.83854675]
[138.46766663 142.47279358]
[151.78933716 149.49740601]
[163.03576660 159.50025940]
[171.55610657 171.89663696]
[176.85865784 185.96348572]
[178.63925171 200.88160706]
[176.79870605 215.78329468]
[171.44830322 229.80290222]
[162.90312195 242.12701416]
[151.66345215 252.04171753]
[138.38549805 258.97396851]
[123.84310150 262.52462769]
[123.84310150 277.52462769]
[123.84310150 292.52462769]
[123.84310150 307.52462769]
[123.84310150 322.52462769]
[123.84310150 337.52462769]
[123.84310150 352.52462769]
[123.84310150 367.52462769]
[123.84310150 382.52462769]
[123.84310150 397.52462769]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[22 129]
[25 56]
[26 55]
[27 54]
[28 53]
[57 103]
[58 102]
[59 101]
[60 100]
[61 99]
[62 98]
[63 97]
[84 96]
[85 95]
[86 94]
[87 93]
[105 111]
[106 110]
[112 128]
[113 127]
[114 126]
[115 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
