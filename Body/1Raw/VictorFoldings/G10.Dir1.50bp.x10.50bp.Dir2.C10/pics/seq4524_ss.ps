%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCCCCUUAUUUCUAGGACUAUGAGAAUCGAACCCAUCCCUGAGAAUCCAAAAUUCUCCGxxxxxxxxxxCUCACUCAUUUACACCAACCACCCAACUAUCUAUAAACCUAGCCAUGGCCAUCCCCUUAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[114.53066254 466.01336670]
[114.53066254 451.01336670]
[114.53066254 436.01336670]
[114.53066254 421.01336670]
[114.53066254 406.01336670]
[114.53066254 391.01336670]
[114.53066254 376.01336670]
[114.53066254 361.01336670]
[114.53066254 346.01336670]
[114.53066254 331.01336670]
[97.61451721 327.55459595]
[81.83831024 320.52365112]
[67.94683075 310.24975586]
[56.59651184 297.21514893]
[48.32437515 282.03274536]
[43.52264404 265.41705322]
[42.42013550 248.15072632]
[45.07137299 231.04760742]
[51.35387802 214.91441345]
[60.97383499 200.51264954]
[73.47982788 188.52272034]
[88.28402710 179.51171875]
[104.68981171 173.90661621]
[102.82219696 159.02334595]
[100.95458984 144.14006042]
[99.08697510 129.25677490]
[97.21936035 114.37350464]
[91.75932312 112.43427277]
[87.38581085 108.47031403]
[84.82839203 103.03047943]
[84.55627441 96.91710663]
[86.69457245 91.06786346]
[77.67704010 79.08103180]
[68.65950775 67.09420013]
[59.64198303 55.10736465]
[46.07595444 61.61542130]
[31.50554657 65.35047913]
[16.49121666 66.17079163]
[1.61011994 64.04671478]
[-12.56607056 59.06172943]
[-25.49313354 51.40919876]
[-36.67518616 41.38484192]
[-45.68371582 29.37533569]
[-52.17398834 15.84336853]
[-55.89824295 1.30983496]
[-56.71516418 -13.66622353]
[-54.59522247 -28.50911903]
[-49.62174606 -42.64865112]
[-41.98765564 -55.54200363]
[-31.98796463 -66.69459534]
[-46.46724319 -73.07119751]
[-47.93543243 -87.89326477]
[-56.95296097 -99.88009644]
[-65.97048950 -111.86692810]
[-74.98802185 -123.85376740]
[-84.00555420 -135.84059143]
[-93.02307892 -147.82742310]
[-108.64299774 -151.48771667]
[-115.38967133 -166.04319763]
[-108.08763123 -180.32815552]
[-92.33837128 -183.38436890]
[-80.22338867 -172.86740112]
[-81.03624725 -156.84495544]
[-72.01871490 -144.85812378]
[-63.00119019 -132.87129211]
[-53.98365784 -120.88446045]
[-44.96612930 -108.89762878]
[-35.94860077 -96.91079712]
[-22.11431503 -91.39157104]
[-20.00113106 -75.71212769]
[-6.51372147 -82.22856140]
[7.99051189 -85.98956299]
[22.95458794 -86.84877777]
[37.80348969 -84.77130890]
[51.96625519 -79.83515167]
[64.89794922 -72.22824097]
[76.10060120 -62.24133682]
[85.14241791 -50.25687027]
[91.67437744 -36.73431396]
[95.44375610 -22.19258118]
[96.30387115 -7.19009352]
[94.21978760 7.69665670]
[89.26975250 21.89525604]
[81.64225006 34.85938644]
[71.62881470 46.08983231]
[80.64634705 58.07666779]
[89.66387177 70.06349945]
[98.68140411 82.05033112]
[113.21633911 85.75649261]
[126.87258148 79.55108643]
[140.52882385 73.34568024]
[154.18505859 67.14027405]
[151.86749268 52.22278595]
[153.66168213 37.23334122]
[159.43452454 23.28425598]
[168.75761414 11.41064644]
[180.93911743 2.49361181]
[195.07508850 -2.80514503]
[210.11654663 -4.09242105]
[224.94731140 -1.27269137]
[238.46685791 5.44480133]
[249.67192078 15.56157398]
[257.73101807 28.32689476]
[262.04611206 42.79349518]
[262.29702759 57.88785172]
[258.46508789 72.48986816]
[250.83467102 85.51597595]
[239.97201538 95.99954987]
[226.68319702 103.16263580]
[211.95433044 106.47369385]
[196.87840271 105.68701935]
[182.57414246 100.86098480]
[170.10301208 92.35372162]
[160.39047241 80.79651642]
[146.73422241 87.00192261]
[133.07798767 93.20732880]
[119.42174530 99.41273499]
[112.10263824 112.50588989]
[113.97025299 127.38916779]
[115.83786774 142.27244568]
[117.70548248 157.15573120]
[119.57309723 172.03900146]
[132.47709656 172.70611572]
[145.10162354 175.44511414]
[157.11630249 180.18331909]
[168.20687866 186.79577637]
[178.08345032 195.10847473]
[186.48802185 204.90304565]
[193.20124817 215.92234802]
[198.04818726 227.87736511]
[200.90280151 240.45468140]
[201.69128418 253.32473755]
[200.39398193 266.15048218]
[197.04580688 278.59613037]
[191.73538208 290.33612061]
[184.60264587 301.06335449]
[175.83515930 310.49755859]
[165.66322327 318.39230347]
[154.35377502 324.54162598]
[142.20343018 328.78540039]
[129.53065491 331.01336670]
[129.53065491 346.01336670]
[129.53065491 361.01336670]
[129.53065491 376.01336670]
[129.53065491 391.01336670]
[129.53065491 406.01336670]
[129.53065491 421.01336670]
[129.53065491 436.01336670]
[129.53065491 451.01336670]
[129.53065491 466.01336670]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[23 122]
[24 121]
[25 120]
[26 119]
[27 118]
[32 88]
[33 87]
[34 86]
[35 85]
[50 70]
[52 68]
[53 67]
[54 66]
[55 65]
[56 64]
[57 63]
[89 117]
[90 116]
[91 115]
[92 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
