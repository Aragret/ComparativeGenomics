%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCCGAAAAUGUUGGUUAUACCCUUCCCGUACUAAUUAAUCCCCUGGCCCAACCCGUCAUCUACUCxxxxxxxxxxACAUGGCUUUCUCAACUUUUAAAGGAUAACAGCUAUCCAUUGGUCUUAGGCCCCAAAAAUUUUGGUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[107.81796265 286.93576050]
[107.81796265 271.93576050]
[107.81796265 256.93576050]
[107.81796265 241.93577576]
[107.81796265 226.93577576]
[107.81796265 211.93577576]
[107.81796265 196.93577576]
[107.81796265 181.93577576]
[107.81796265 166.93577576]
[107.81796265 151.93577576]
[104.52042389 137.30271912]
[98.08669281 123.75255585]
[89.09020233 117.37705231]
[85.15345764 108.69712830]
[86.12229919 100.68975830]
[90.38276672 95.58245850]
[79.72518158 85.02709198]
[69.06759644 74.47171783]
[58.41000748 63.91634750]
[50.06810379 60.07589340]
[47.65119934 53.05335236]
[37.19902039 42.29454422]
[26.74684334 31.53573608]
[16.29466438 20.77692795]
[4.70300961 30.31071472]
[-7.63635254 38.85469818]
[-20.63913155 46.35051727]
[-34.21650314 52.74696350]
[-48.27571869 58.00034332]
[-62.72073746 62.07477188]
[-77.45288086 64.94241333]
[-92.37152100 66.58367920]
[-107.37474060 66.98735809]
[-122.36005402 66.15069580]
[-137.22508240 64.07940674]
[-151.86830139 60.78763199]
[-166.18966675 56.29786682]
[-180.09135437 50.64077759]
[-193.47839355 43.85501099]
[-206.25935364 35.98691940]
[-218.34689331 27.09025192]
[-229.65847778 17.22578049]
[-240.11680603 6.46089363]
[-249.65045166 -5.13087416]
[-258.19430542 -17.47033882]
[-265.68994141 -30.47320557]
[-272.08624268 -44.05065155]
[-277.33944702 -58.10993195]
[-281.41369629 -72.55500031]
[-284.28118896 -87.28717804]
[-285.92227173 -102.20584106]
[-286.32577515 -117.20906067]
[-285.48892212 -132.19436646]
[-283.41744995 -147.05937195]
[-280.12551880 -161.70254517]
[-275.63555908 -176.02386475]
[-269.97830200 -189.92547607]
[-263.19238281 -203.31243896]
[-255.32414246 -216.09329224]
[-246.42733765 -228.18074036]
[-236.56272888 -239.49220276]
[-225.79771423 -249.95040894]
[-214.20584106 -259.48391724]
[-201.86627197 -268.02761841]
[-188.86331177 -275.52310181]
[-175.28578186 -281.91925049]
[-161.22644043 -287.17227173]
[-146.78132629 -291.24636841]
[-132.04911804 -294.11364746]
[-117.13043976 -295.75457764]
[-102.12721252 -296.15789795]
[-87.14192200 -295.32086182]
[-72.27693176 -293.24923706]
[-57.63379669 -289.95709229]
[-43.31253433 -285.46697998]
[-29.41098404 -279.80957031]
[-16.02410316 -273.02349854]
[-3.24334168 -265.15509033]
[8.84399509 -256.25814819]
[20.15533638 -246.39340210]
[30.61341286 -235.62826538]
[40.14678574 -224.03627014]
[48.69032669 -211.69659424]
[56.18568039 -198.69355774]
[62.58164215 -185.11595154]
[67.83451843 -171.05654907]
[71.90843201 -156.61138916]
[74.77554321 -141.87913513]
[76.41628265 -126.96043396]
[76.81942749 -111.95720673]
[75.98222351 -96.97192383]
[73.91040039 -82.10696411]
[70.61810303 -67.46385956]
[66.12783051 -53.14265823]
[60.47024155 -39.24117279]
[53.68399429 -25.85437202]
[45.81544876 -13.07370472]
[36.91834641 -0.98647398]
[27.05347252 10.32474995]
[37.50564957 21.08355904]
[47.95782852 31.84236717]
[58.41000748 42.60117722]
[68.96537781 53.25876236]
[79.62296295 63.81413269]
[90.28054810 74.36950684]
[100.93813324 84.92487335]
[115.31563568 89.20127106]
[130.00952148 86.18636322]
[141.97291565 75.83321381]
[155.99560547 80.85450745]
[170.68949890 77.83959961]
[185.38337708 74.82468414]
[200.07727051 71.80977631]
[214.77114868 68.79486847]
[224.76847839 56.24763489]
[240.81094360 56.38488007]
[250.59214783 69.10131836]
[246.60877991 84.64198303]
[231.91653442 91.08541107]
[217.78605652 83.48875427]
[203.09217834 86.50366211]
[188.39828491 89.51856995]
[173.70440674 92.53348541]
[159.01051331 95.54839325]
[148.09812927 105.68589783]
[133.02442932 100.88024902]
[118.33054352 103.89516449]
[111.63685608 117.31881714]
[118.07059479 130.86898804]
[119.27043152 115.91705322]
[124.08872986 101.71198273]
[132.23316956 89.11562347]
[143.20959473 78.89221954]
[156.35205078 71.66202545]
[170.86318970 67.86373138]
[185.86257935 67.72776794]
[200.44017029 71.26238251]
[213.71154785 78.25313568]
[224.87150574 88.27588654]
[233.24293518 100.72253418]
[238.31796265 114.83792114]
[239.78863525 129.76565552]
[237.56576538 144.60003662]
[231.78421021 158.44104004]
[222.79472351 170.44891357]
[211.14273071 179.89514160]
[197.53517151 186.20657349]
[182.79762268 189.00030518]
[167.82426453 188.10682678]
[153.52352905 183.58036804]
[140.76306152 175.69552612]
[130.31707764 164.93070984]
[122.81796265 151.93577576]
[122.81796265 166.93577576]
[122.81796265 181.93577576]
[122.81796265 196.93577576]
[122.81796265 211.93577576]
[122.81796265 226.93577576]
[122.81796265 241.93577576]
[122.81796265 256.93576050]
[122.81796265 271.93576050]
[122.81796265 286.93576050]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 162]
[2 161]
[3 160]
[4 159]
[5 158]
[6 157]
[7 156]
[8 155]
[9 154]
[10 153]
[11 129]
[12 128]
[16 106]
[17 105]
[18 104]
[19 103]
[21 102]
[22 101]
[23 100]
[24 99]
[107 127]
[108 126]
[110 124]
[111 123]
[112 122]
[113 121]
[114 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
