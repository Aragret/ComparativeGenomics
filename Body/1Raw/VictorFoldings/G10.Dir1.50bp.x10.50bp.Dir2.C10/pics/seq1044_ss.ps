%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGCAUCAAGCACGCAGCAAUGCAGCUCAAAACGCUUAGCCUAGCCACACCCCCACGGGAAxxxxxxxxxxAUUCUAGCCACCUCUAGCCUAGCCGUUUACUCAAUCCUCUGAUCAGGGUGAGCAUCAAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[79.78697968 279.31347656]
[79.78697968 264.31347656]
[79.78697968 249.31347656]
[79.78697968 234.31347656]
[79.78697968 219.31347656]
[79.78697968 204.31347656]
[79.78697968 189.31347656]
[79.78697968 174.31347656]
[79.78697968 159.31347656]
[79.78697968 144.31347656]
[67.26101685 136.06118774]
[53.47863388 141.98114014]
[39.69625092 147.90110779]
[38.06732941 165.34365845]
[27.91249084 179.50976562]
[12.07864571 186.58140564]
[-5.07200670 184.70825195]
[-18.86367607 174.49090576]
[-32.38786697 180.97906494]
[-45.91205597 187.46722412]
[-50.94298172 199.38963318]
[-62.39308167 204.49983215]
[-73.86722565 200.54364014]
[-87.52346802 206.74905396]
[-101.17970276 212.95445251]
[-110.27204132 226.60221863]
[-126.61795807 225.28202820]
[-133.40219116 210.35198975]
[-123.64568329 197.17083740]
[-107.38510895 199.29821777]
[-93.72887421 193.09280396]
[-80.07263184 186.88740540]
[-70.69076538 172.08941650]
[-52.40021896 173.94303894]
[-38.87602997 167.45487976]
[-25.35184097 160.96670532]
[-25.74371910 148.26843262]
[-21.26651192 136.32911682]
[-12.55797577 126.95083618]
[-0.89735430 121.56357574]
[11.98245907 121.00714874]
[24.15242767 125.40055084]
[33.77628708 134.11872864]
[47.55867004 128.19876099]
[61.34105301 122.27880096]
[58.07526016 109.72055817]
[58.63868713 97.21880341]
[62.71316528 85.87512970]
[49.93580627 78.01770020]
[33.27641296 74.87113190]
[31.68823624 57.99173355]
[47.46832657 51.79294205]
[57.79323196 65.24034119]
[70.57058716 73.09777069]
[85.69679260 62.78120804]
[103.83901215 60.31269455]
[121.17172241 66.21274567]
[131.38519287 55.22708511]
[141.59867859 44.24142075]
[151.81216431 33.25575256]
[162.02563477 22.27009010]
[155.90214539 0.78212923]
[168.66281128 -20.66463852]
[195.55577087 -26.74963379]
[201.33204651 -40.59285355]
[207.10832214 -54.43606949]
[212.88459778 -68.27928925]
[200.57911682 -59.70168686]
[186.10702515 -55.75725937]
[171.15097046 -56.90462875]
[157.44987488 -63.01038361]
[146.59677124 -73.36461639]
[139.85353088 -86.76345062]
[138.00419617 -101.64900970]
[141.26376343 -116.29056549]
[149.25326538 -128.98576355]
[161.04376221 -138.25852966]
[175.26437378 -143.03073120]
[190.26170349 -142.74751282]
[204.29200745 -137.44181824]
[215.72399902 -127.73049927]
[223.22848511 -114.74271393]
[225.93293762 -99.98853302]
[223.52195740 -85.18067169]
[233.50468445 -96.37643433]
[243.48741150 -107.57220459]
[253.47013855 -118.76796722]
[248.02890015 -133.07360840]
[249.87060547 -148.26791382]
[258.57205200 -160.85932922]
[272.13366699 -167.95443726]
[287.43914795 -167.92283630]
[300.97137451 -160.77180481]
[309.62075806 -148.14457703]
[311.39971924 -132.94279480]
[305.89947510 -118.65973663]
[294.38391113 -108.57752991]
[279.49926758 -105.01300049]
[264.66589355 -108.78524017]
[254.68318176 -97.58947754]
[244.70045471 -86.39370728]
[234.71772766 -75.19794464]
[226.72781372 -62.50301361]
[220.95153809 -48.65979767]
[215.17526245 -34.81657791]
[209.39898682 -20.97336197]
[212.85249329 -14.31578350]
[218.95610046 -28.01782799]
[233.47427368 -31.78909111]
[245.47480774 -22.78980446]
[245.92127991 -7.79645014]
[234.47747803 1.90094376]
[219.75949097 -1.00062799]
[223.21298218 5.65695000]
[237.85649109 8.90777588]
[252.50000000 12.15860176]
[267.97048950 6.71839571]
[280.23922729 17.60004425]
[276.68518066 33.60943985]
[260.96444702 38.27748871]
[249.24916077 26.80210304]
[234.60566711 23.55127716]
[219.96215820 20.30045128]
[205.97015381 34.70098495]
[188.17779541 38.53227234]
[173.01130676 32.48357010]
[162.79782104 43.46923447]
[152.58435059 54.45489883]
[142.37086487 65.44056702]
[132.15737915 76.42623138]
[136.77436829 83.50570679]
[139.83488464 91.48136139]
[141.16705322 100.01140594]
[140.67396545 108.72164917]
[138.33967590 117.22190094]
[134.23150635 125.12342834]
[128.49871826 132.05676270]
[121.36735535 137.68888855]
[113.13144684 141.73915100]
[104.14096832 143.99308777]
[94.78697968 144.31347656]
[94.78697968 159.31347656]
[94.78697968 174.31347656]
[94.78697968 189.31347656]
[94.78697968 204.31347656]
[94.78697968 219.31347656]
[94.78697968 234.31347656]
[94.78697968 249.31347656]
[94.78697968 264.31347656]
[94.78697968 279.31347656]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 45]
[12 44]
[13 43]
[18 36]
[19 35]
[20 34]
[23 32]
[24 31]
[25 30]
[48 54]
[49 53]
[57 130]
[58 129]
[59 128]
[60 127]
[61 126]
[64 106]
[65 105]
[66 104]
[67 103]
[84 102]
[85 101]
[86 100]
[87 99]
[114 123]
[115 122]
[116 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
