%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCCUACUCCUCAUUGUACCCAUUCUAAUCGCAAUGGCAUUCCUAAUGCUUACCGAACGAAxxxxxxxxxxAGGAGGGCACUGGCCCCCAACAGGCAUCACCCCGCUAAAUCCCCUAGAAGUCCCACUCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[90.02672577 384.59768677]
[90.02672577 369.59768677]
[90.02672577 354.59768677]
[90.02672577 339.59768677]
[90.02672577 324.59768677]
[90.02672577 309.59768677]
[90.02672577 294.59768677]
[90.02672577 279.59768677]
[90.02672577 264.59768677]
[90.02672577 249.59767151]
[74.49015808 244.84402466]
[61.15277863 235.53276062]
[51.31343842 222.55677795]
[45.93461990 207.16645813]
[45.54827118 190.84928894]
[50.20323563 175.18608093]
[59.45940018 161.69776917]
[72.42929840 151.69775391]
[87.86317444 146.16401672]
[87.23919678 131.17700195]
[75.44255829 121.91204834]
[60.73459244 124.85752869]
[46.02663040 127.80300903]
[31.31867027 130.74848938]
[16.61070824 133.69396973]
[1.90274727 136.63946533]
[-1.39773417 151.50642395]
[-10.46503162 163.74179077]
[-23.72817993 171.22569275]
[-38.88925934 172.66149902]
[-53.32152176 167.80046082]
[-64.52449036 157.48477173]
[-70.55718231 143.50169373]
[-70.37439728 128.27386475]
[-64.00780487 114.43962860]
[-52.56045151 104.39582062]
[-38.01566696 99.88259888]
[-22.89341927 101.68191528]
[-9.81373119 109.48201752]
[-1.04273522 121.93149567]
[13.66522598 118.98601532]
[28.37318802 116.04053497]
[43.08115005 113.09504700]
[57.78911209 110.14956665]
[72.49707031 107.20408630]
[75.44255829 92.49612427]
[63.00311279 84.11398315]
[50.56367493 75.73183441]
[38.12423325 67.34969330]
[25.68479347 58.96755219]
[9.17071152 55.13069916]
[8.28606606 38.19984436]
[24.31035995 32.66284561]
[34.06693649 46.52811050]
[46.50637817 54.91025543]
[58.94581604 63.29239655]
[71.38526154 71.67453766]
[83.82469940 80.05668640]
[76.92667389 66.73687744]
[67.97721100 54.69914246]
[68.55387878 39.71023178]
[78.40177917 28.39568710]
[93.16783905 25.75687790]
[106.32503510 32.96023560]
[112.05747986 46.82165909]
[107.83135986 61.21385193]
[105.97377777 76.09838867]
[114.73999023 63.92655182]
[104.31788635 52.50346756]
[96.48802948 39.17581940]
[91.58735657 24.52174568]
[89.82580566 9.17634678]
[91.27732086 -6.19581413]
[95.87673187 -20.92950249]
[103.42270660 -34.38759995]
[113.58655548 -45.98865128]
[125.92653656 -55.23199081]
[139.90704346 -61.71934509]
[154.92190552 -65.17199707]
[170.32060242 -65.44275665]
[185.43649292 -62.52223587]
[199.61566162 -56.53915024]
[208.12673950 -68.89072418]
[210.44238281 -77.79519653]
[216.94560242 -81.40821075]
[225.71180725 -93.58004761]
[234.47801208 -105.75188446]
[243.24421692 -117.92372131]
[244.35127258 -134.28546143]
[259.19165039 -141.26368713]
[272.49880981 -131.67979431]
[270.58352661 -115.39287567]
[255.41606140 -109.15750885]
[246.64985657 -96.98567200]
[237.88363647 -84.81383514]
[229.11743164 -72.64199829]
[220.47831726 -60.37963486]
[211.96722412 -48.02806091]
[222.09948730 -37.55633926]
[229.98498535 -25.29730415]
[235.31604004 -11.72564220]
[237.88395691 2.63267517]
[237.58717346 17.22077942]
[234.43522644 31.47249794]
[228.54853821 44.83433533]
[220.15379333 56.78696060]
[209.57513428 66.86539459]
[197.22177124 74.67710876]
[183.57206726 79.91729736]
[169.15502930 82.38076782]
[154.52981567 81.97000122]
[140.26406860 78.69898987]
[126.91182709 72.69275665]
[118.14561462 84.86459351]
[122.75118256 99.14005280]
[136.97796631 103.89386749]
[151.20474243 108.64768219]
[164.43917847 100.31799316]
[179.92445374 102.49521637]
[190.34889221 114.15132904]
[190.79040527 129.78268433]
[181.04049683 142.00862122]
[165.70280457 145.05642700]
[152.01930237 137.48703003]
[146.45092773 122.87446594]
[132.22415161 118.12065125]
[117.99736786 113.36683655]
[112.77211761 123.24884033]
[102.22621155 130.55302429]
[102.85018921 145.54003906]
[116.29532623 148.77789307]
[128.42321777 155.39723206]
[138.40119934 164.93598938]
[145.54615784 176.73193359]
[149.37136841 189.96859741]
[149.61958313 203.73187256]
[146.28036499 217.07302856]
[139.59031677 229.07420349]
[130.01634216 238.91149902]
[118.22307587 245.91156006]
[105.02672577 249.59767151]
[105.02672577 264.59768677]
[105.02672577 279.59768677]
[105.02672577 294.59768677]
[105.02672577 309.59768677]
[105.02672577 324.59768677]
[105.02672577 339.59768677]
[105.02672577 354.59768677]
[105.02672577 369.59768677]
[105.02672577 384.59768677]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[19 130]
[20 129]
[21 45]
[22 44]
[23 43]
[24 42]
[25 41]
[26 40]
[46 58]
[47 57]
[48 56]
[49 55]
[50 54]
[67 114]
[68 113]
[82 98]
[83 97]
[85 96]
[86 95]
[87 94]
[88 93]
[115 127]
[116 126]
[117 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
