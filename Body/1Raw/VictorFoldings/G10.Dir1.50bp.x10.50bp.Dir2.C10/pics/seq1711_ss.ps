%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCCUCAAGUAUACUUCAAAGGACAUUUAACUAAAACCCCUACGCAUUUAUAUAGAGGAGAxxxxxxxxxxGAACCCAUCCCUGAGAAUCCAAAAUUCUCCGUGCCACCUAUCACACCCCAUCCUAAAGUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[81.93634796 265.97137451]
[81.93634796 250.97137451]
[81.93634796 235.97137451]
[81.93634796 220.97137451]
[81.93634796 205.97137451]
[81.93634796 190.97137451]
[81.93634796 175.97137451]
[81.93634796 160.97137451]
[81.93634796 145.97137451]
[81.93634796 130.97137451]
[71.72286224 119.98570251]
[56.76261520 118.89439392]
[41.80236816 117.80308533]
[26.84211922 116.71177673]
[11.88187027 115.62046051]
[1.59090090 123.46583557]
[-10.88470936 122.20960236]
[-18.87523651 113.07402039]
[-33.80954361 111.67171478]
[-48.74385071 110.26941681]
[-63.67816162 108.86711121]
[-78.61246490 107.46480560]
[-86.01515198 121.70336151]
[-98.27704620 131.99655151]
[-113.50946045 136.79734802]
[-129.38079834 135.40179443]
[-143.47352600 128.05204773]
[-153.65228271 115.89493561]
[-158.38757324 100.80315399]
[-173.34782410 99.71184540]
[-188.30805969 98.62053680]
[-197.45001221 108.56449890]
[-210.46456909 111.36619568]
[-222.52970886 106.21774292]
[-229.30729675 95.21496582]
[-244.24159241 93.81266022]
[-259.17590332 92.41035461]
[-272.39840698 101.49578094]
[-287.70318604 96.68503571]
[-293.34973145 81.66851044]
[-285.00646973 67.96559143]
[-269.07366943 66.08799744]
[-257.77359009 77.47605133]
[-242.83929443 78.87834930]
[-227.90498352 80.28065491]
[-215.45812988 69.01416779]
[-198.37568665 70.22840118]
[-187.21675110 83.66028595]
[-172.25651550 84.75159454]
[-157.29626465 85.84290314]
[-151.46070862 73.04406738]
[-141.57838440 62.99188995]
[-128.82681274 56.91335297]
[-114.73545074 55.56020355]
[-101.00222015 59.11605453]
[-89.28893280 67.17176819]
[-81.02019501 78.77243042]
[-77.21016693 92.53050232]
[-62.27585602 93.93280029]
[-47.34154892 95.33510590]
[-32.40724182 96.73741150]
[-17.47293282 98.13971710]
[-1.97726822 89.96143341]
[12.97318077 100.66021729]
[27.93342972 101.75152588]
[42.89367676 102.84283447]
[57.85392761 103.93414307]
[72.81417847 105.02545929]
[72.36928558 35.57896042]
[74.54612732 20.73775673]
[61.08001328 13.81369591]
[50.59357452 2.89063358]
[44.22429276 -10.84657764]
[42.66306305 -25.90782928]
[46.07923889 -40.65938950]
[54.10225296 -53.50111389]
[65.86183167 -63.04003525]
[80.08238220 -68.24143982]
[95.22136688 -68.54112244]
[109.63662720 -63.90656662]
[121.76449585 -54.84050369]
[130.28942871 -42.32634354]
[134.28672791 -27.72153664]
[133.32276917 -12.61029911]
[127.50212097 1.36821461]
[117.45616913 12.69771957]
[104.27462769 20.14927483]
[89.38732910 22.91459465]
[87.21049500 37.75579834]
[93.38627625 42.01134491]
[106.93287659 35.57008743]
[105.73785400 50.52243423]
[111.91363525 54.77798080]
[125.00679016 47.45887375]
[138.09994507 40.13976669]
[151.19309998 32.82066345]
[164.28625488 25.50155640]
[177.37940979 18.18245125]
[183.11219788 3.19863653]
[198.44438171 -1.52403414]
[211.61442566 7.63726854]
[212.51939392 23.65477753]
[200.46508789 34.24123001]
[184.69851685 31.27560616]
[171.60536194 38.59471130]
[158.51220703 45.91381836]
[145.41905212 53.23292160]
[132.32589722 60.55202866]
[119.23274231 67.87113190]
[120.32115936 75.29174042]
[123.58641815 97.55354309]
[138.22991943 100.80436707]
[152.87341309 104.05519867]
[163.19372559 92.68035889]
[177.82368469 88.00490570]
[192.82791138 91.28649139]
[204.17033386 101.64240265]
[208.79991150 116.28694153]
[205.47131348 131.28080750]
[195.07989502 142.59071350]
[180.42091370 147.17437744]
[165.43756104 143.79878235]
[154.16027832 133.37197876]
[149.62258911 118.69869995]
[134.97909546 115.44786835]
[120.33559418 112.19704437]
[114.48577881 116.89062500]
[125.77812958 126.76396179]
[137.07048035 136.63729858]
[148.36283875 146.51063538]
[162.05688477 152.63215637]
[168.83328247 166.01425171]
[165.66316223 180.67543030]
[153.96347046 190.06251526]
[138.96369934 189.97969055]
[127.36837769 180.46397400]
[124.36030579 165.76899719]
[117.16892242 152.60527039]
[109.97753906 139.44152832]
[102.78615570 126.27778625]
[96.93634796 130.97137451]
[96.93634796 145.97137451]
[96.93634796 160.97137451]
[96.93634796 175.97137451]
[96.93634796 190.97137451]
[96.93634796 205.97137451]
[96.93634796 220.97137451]
[96.93634796 235.97137451]
[96.93634796 250.97137451]
[96.93634796 265.97137451]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 68]
[12 67]
[13 66]
[14 65]
[15 64]
[18 62]
[19 61]
[20 60]
[21 59]
[22 58]
[29 50]
[30 49]
[31 48]
[35 45]
[36 44]
[37 43]
[69 89]
[70 88]
[93 109]
[94 108]
[95 107]
[96 106]
[97 105]
[98 104]
[111 126]
[112 125]
[113 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
