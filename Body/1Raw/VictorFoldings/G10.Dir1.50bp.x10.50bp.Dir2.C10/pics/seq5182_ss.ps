%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCAAUCUUAUCCAUCAUAGCAGGCAGUUGAGGUGGAUUAAACCAAACCCAGCUACGCAAxxxxxxxxxxGGAGCCUCCGUAGACCUAACCAUCUUCUCCUUACACCUAGCAGGUGUCUCCUCUAUCUUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[93.56901550 291.84289551]
[93.56901550 276.84289551]
[93.56901550 261.84289551]
[93.56901550 246.84288025]
[93.56901550 231.84288025]
[93.56901550 216.84288025]
[93.56901550 201.84288025]
[93.56901550 186.84288025]
[93.56901550 171.84288025]
[93.56901550 156.84288025]
[80.79165649 148.98545837]
[67.40537262 155.75357056]
[54.01908875 162.52168274]
[40.63280487 169.28979492]
[27.24651909 176.05790710]
[20.94984436 182.76640320]
[13.51060295 182.82431030]
[-0.01358660 189.31248474]
[1.76930785 204.34910583]
[-1.42922127 219.14938354]
[-9.26222134 232.10787964]
[-20.88002777 241.81896973]
[-35.02242661 247.22926331]
[-50.15535736 247.75189209]
[-64.63731384 243.33016968]
[-76.89739990 234.44371033]
[-85.60572815 222.05647278]
[-89.81769562 207.51213074]
[-89.07640839 192.38833618]
[-83.46228790 178.32560730]
[-73.58430481 166.84936523]
[-60.51394272 159.20446777]
[-45.66898727 156.22016907]
[-30.65970230 158.22019958]
[-17.11418533 164.98759460]
[-6.50175190 175.78829956]
[7.02243805 169.30012512]
[20.47840309 162.67163086]
[33.86468887 155.90351868]
[47.25097275 149.13540649]
[60.63725662 142.36727905]
[74.02354431 135.59916687]
[60.95862579 106.24035645]
[71.58001709 79.56356812]
[94.98109436 69.94329834]
[96.22796631 54.99520874]
[97.47483826 40.04712296]
[83.34841156 36.09825134]
[70.19799805 29.61019325]
[58.47535324 20.80753326]
[48.58288193 9.99434376]
[40.85980225 -2.45631981]
[35.57052612 -16.11529160]
[32.89561081 -30.51208687]
[32.92558289 -45.15111160]
[35.65788269 -59.52871323]
[40.99701309 -73.15052795]
[48.75785446 -85.54844666]
[58.67210770 -96.29674530]
[70.39756012 -105.02665710]
[83.52987671 -111.43905640]
[97.61658478 -115.31470490]
[112.17262268 -116.52172852]
[113.73020172 -131.44064331]
[115.28778839 -146.35955811]
[116.84536743 -161.27847290]
[118.40294647 -176.19738770]
[104.36338043 -181.74653625]
[92.34228516 -190.87867737]
[83.23170471 -202.91610718]
[77.70770264 -216.96559143]
[76.18019104 -231.98455811]
[78.76253510 -246.85848999]
[85.26309967 -260.48367310]
[95.19950104 -271.84899902]
[107.83438873 -280.11108398]
[122.23017120 -284.65682983]
[137.31858826 -285.14892578]
[151.97998047 -281.55087280]
[165.12637329 -274.12960815]
[175.78222656 -263.43591309]
[183.15678406 -250.26325989]
[186.70281982 -235.58918762]
[186.15719604 -220.50260925]
[181.56037903 -206.12304688]
[173.25352478 -193.51754761]
[161.85301208 -183.62153625]
[148.20486450 -177.16935730]
[133.32185364 -174.63980103]
[131.76428223 -159.72088623]
[130.20669556 -144.80197144]
[128.64912415 -129.88305664]
[127.09153748 -114.96414948]
[141.78489685 -110.49018860]
[155.33436584 -103.24686432]
[167.22358704 -93.50814819]
[176.99909973 -81.64315796]
[184.28761292 -68.10215759]
[188.81025696 -53.39945221]
[190.39323425 -38.09387970]
[188.97453308 -22.76755333]
[184.60635376 -8.00372601]
[177.45314026 5.63540554]
[167.78543091 17.63010597]
[155.96966553 27.52291107]
[142.45419312 34.93606949]
[127.75235748 39.58597183]
[112.42292786 41.29399490]
[111.17605591 56.24208450]
[109.92917633 71.19017029]
[128.27705383 79.36624908]
[139.52751160 99.13563538]
[136.70056152 124.39560699]
[151.11277771 128.55349731]
[165.52499390 132.71138000]
[179.93721008 136.86926270]
[194.34942627 141.02716064]
[208.76164246 145.18504333]
[225.65611267 143.76611328]
[231.69644165 159.60754395]
[218.14622498 169.79714966]
[204.60375977 159.59725952]
[190.19154358 155.43937683]
[175.77932739 151.28147888]
[161.36711121 147.12359619]
[146.95489502 142.96571350]
[132.54267883 138.80781555]
[126.54926300 143.31658936]
[137.20378113 153.87506104]
[147.85829163 164.43353271]
[158.51280212 174.99200439]
[171.38436890 182.69413757]
[175.07522583 197.23297119]
[167.43606567 210.14199829]
[152.91543579 213.90383911]
[139.96925354 206.32781982]
[136.13658142 191.82533264]
[128.94519043 178.66159058]
[121.75381470 165.49784851]
[114.56243134 152.33412170]
[108.56901550 156.84288025]
[108.56901550 171.84288025]
[108.56901550 186.84288025]
[108.56901550 201.84288025]
[108.56901550 216.84288025]
[108.56901550 231.84288025]
[108.56901550 246.84288025]
[108.56901550 261.84289551]
[108.56901550 276.84289551]
[108.56901550 291.84289551]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 42]
[12 41]
[13 40]
[14 39]
[15 38]
[17 37]
[18 36]
[45 110]
[46 109]
[47 108]
[63 93]
[64 92]
[65 91]
[66 90]
[67 89]
[113 127]
[114 126]
[115 125]
[116 124]
[117 123]
[118 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
