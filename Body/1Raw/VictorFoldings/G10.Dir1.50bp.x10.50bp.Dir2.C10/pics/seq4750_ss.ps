%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGAAAUAAACAUGCUAGCUUUUAUUCCAGUUCUAACCAAAAAAAUAAACCCUCGUUCCACxxxxxxxxxxUGAGUAGGCCUAGAAAUAAACAUGCUAGCUUUUAUUCCAGUUCUAACCAAAAAAAUAAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[150.47392273 383.83569336]
[150.47392273 368.83569336]
[150.47392273 353.83569336]
[150.47392273 338.83569336]
[150.47392273 323.83569336]
[150.47392273 308.83569336]
[150.47392273 293.83569336]
[150.47392273 278.83569336]
[150.47392273 263.83569336]
[150.47392273 248.83567810]
[147.98880005 234.04298401]
[143.08724976 219.86642456]
[138.18569946 205.68986511]
[133.28414917 191.51330566]
[127.65219879 177.61074829]
[121.30506897 164.01979065]
[114.95793915 150.42884827]
[108.61080933 136.83789062]
[102.26367950 123.24694061]
[96.54671478 118.48648071]
[95.92916870 109.30658722]
[90.01226044 103.75012207]
[89.88603973 95.23746490]
[84.10977173 81.39424896]
[78.33349609 67.55102539]
[72.55722809 53.70780945]
[66.78095245 39.86459351]
[61.00468063 26.02137566]
[55.08471680 12.23899364]
[48.87931061 -1.41724789]
[42.53218079 -15.00819874]
[36.18505096 -28.59914970]
[29.83792114 -42.19010162]
[23.49079323 -55.78105164]
[17.14366341 -69.37200165]
[9.32564354 -56.57049561]
[-5.52935839 -54.48989105]
[-16.56353760 -64.65093994]
[-15.71180248 -79.62673187]
[-3.59670210 -88.47119141]
[10.92609882 -84.72013855]
[6.02454853 -98.89669800]
[1.12299752 -113.07324982]
[-3.77855325 -127.24980927]
[-17.96198654 -138.94639587]
[-14.04333115 -156.02398682]
[-19.23874664 -170.09550476]
[-33.96738052 -167.10087585]
[-48.98052979 -166.38975525]
[-63.92627716 -167.97883606]
[-78.45426178 -171.83085632]
[-92.22393036 -177.85552979]
[-104.91250610 -185.91160583]
[-116.22254181 -195.81027222]
[-125.88892365 -207.31945801]
[-133.68505859 -220.16938782]
[-139.42817688 -234.05885315]
[-142.98367310 -248.66223145]
[-144.26818848 -263.63723755]
[-143.25161743 -278.63278198]
[-139.95779419 -293.29742432]
[-134.46391296 -307.28732300]
[-126.89878082 -320.27459717]
[-117.43972015 -331.95477295]
[-106.30846405 -342.05407715]
[-93.76595306 -350.33572388]
[-80.10620117 -356.60562134]
[-65.64941406 -360.71676636]
[-50.73446655 -362.57281494]
[-35.71099854 -362.13024902]
[-20.93118095 -359.39941406]
[-6.74147034 -354.44436646]
[6.52550507 -347.38125610]
[18.55874825 -338.37561035]
[29.07618332 -327.63858032]
[37.83126450 -315.42181396]
[44.61876297 -302.01174927]
[49.27956772 -287.72268677]
[51.70442200 -272.88958740]
[51.83648682 -257.86016846]
[49.67266464 -242.98677063]
[45.26367950 -228.61801147]
[38.71288681 -215.09072876]
[30.17383957 -202.72200012]
[19.84671021 -191.80180359]
[7.97357941 -182.58610535]
[-5.16722775 -175.29092407]
[0.02818784 -161.21940613]
[10.91128063 -155.84672546]
[15.33329773 -144.11366272]
[10.39800453 -132.15136719]
[15.29955578 -117.97480774]
[20.20110703 -103.79824829]
[25.10265732 -89.62168884]
[30.73461342 -75.71913147]
[37.08174515 -62.12818146]
[43.42887115 -48.53723145]
[49.77600098 -34.94627762]
[56.12313080 -21.35532761]
[62.47026062 -7.76437759]
[68.18722534 -3.00391555]
[68.80477142 6.17598009]
[74.42146301 11.05434608]
[74.84790039 20.24510193]
[80.62416840 34.08832169]
[86.40044403 47.93153763]
[92.17671204 61.77475357]
[97.95298767 75.61797333]
[103.72926331 89.46118927]
[109.64922333 103.24357605]
[115.85462952 116.89981079]
[122.20175934 130.49076843]
[128.54888916 144.08171082]
[134.89602661 157.67266846]
[141.24314880 171.26361084]
[149.06117249 158.46211243]
[163.91616821 156.38150024]
[174.95034790 166.54255676]
[174.09861755 181.51835632]
[161.98352051 190.36280823]
[147.46070862 186.61175537]
[152.36225891 200.78831482]
[157.26380920 214.96487427]
[162.16535950 229.14143372]
[165.64146423 214.54975891]
[173.81813049 201.97430420]
[185.74468994 192.87719727]
[200.03443909 188.31616211]
[215.02592468 188.82150269]
[228.97608948 194.33444214]
[240.26298523 204.21403503]
[247.57426453 217.31155396]
[250.05987549 232.10417175]
[247.43080139 246.87197876]
[239.99272156 259.89791870]
[228.61047363 269.66748047]
[214.60743713 275.04476929]
[199.61175537 275.40454102]
[185.36695862 270.70501709]
[173.52926636 261.49258423]
[165.47392273 248.83567810]
[165.47392273 263.83569336]
[165.47392273 278.83569336]
[165.47392273 293.83569336]
[165.47392273 308.83569336]
[165.47392273 323.83569336]
[165.47392273 338.83569336]
[165.47392273 353.83569336]
[165.47392273 368.83569336]
[165.47392273 383.83569336]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 124]
[12 123]
[13 122]
[14 121]
[15 115]
[16 114]
[17 113]
[18 112]
[19 111]
[21 110]
[23 109]
[24 108]
[25 107]
[26 106]
[27 105]
[28 104]
[29 102]
[30 100]
[31 99]
[32 98]
[33 97]
[34 96]
[35 95]
[41 94]
[42 93]
[43 92]
[44 91]
[46 88]
[47 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
