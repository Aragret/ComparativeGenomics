%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAAAGACACCCCCCACAGUUUAUGUAGCUUACCUCCUCAAAGCAAUACACUGAAAAUGUUUxxxxxxxxxxGGAAUCACCUCCCAUUCCGAUAAAAUCACCUUCCACCCUUACUACACAAUCAAAGACGCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[96.01279449 125.11762238]
[102.10253143 111.39704132]
[94.46956635 124.30973816]
[86.83659363 137.22244263]
[79.20362091 150.13513184]
[71.57065582 163.04783630]
[63.93768311 175.96052551]
[63.57589340 191.77760315]
[50.43880463 198.79658508]
[50.07701492 214.61366272]
[36.93992615 221.63264465]
[34.08492279 238.34448242]
[17.23585129 240.22734070]
[10.76228333 224.55796814]
[24.02722740 213.99967957]
[23.84305954 199.10621643]
[37.52610779 191.16362000]
[37.34193802 176.27015686]
[51.02498627 168.32756042]
[58.65795517 155.41487122]
[66.29092407 142.50216675]
[73.92389679 129.58946228]
[81.55686951 116.67677307]
[89.18983459 103.76407623]
[83.10655212 105.51802063]
[76.95357513 107.03714752]
[62.36982727 103.52797699]
[47.78607941 100.01881409]
[43.53846359 101.45319366]
[39.47364426 101.42499542]
[36.03919220 100.17949677]
[33.55302048 98.08470154]
[32.17406082 95.57681274]
[17.92736816 90.88301086]
[3.68067622 86.18920898]
[-10.56601620 81.49540710]
[-24.90607643 77.09510803]
[-39.33346176 72.99016571]
[-53.76084518 68.88521576]
[-68.18823242 64.78027344]
[-79.69393158 75.05754852]
[-94.93303680 77.46031189]
[-109.04279327 71.22186279]
[-117.52083588 58.33286285]
[-117.66184998 42.90614319]
[-109.42083740 29.86431694]
[-95.42747498 23.36898041]
[-80.14699554 25.49277496]
[-68.45534515 35.55800247]
[-64.08328247 50.35289001]
[-49.65590286 54.45783234]
[-35.22851562 58.56277847]
[-20.80113220 62.66772461]
[-16.21852875 61.13509369]
[-10.62388134 62.50906754]
[-5.87221527 67.24871826]
[8.37447643 71.94252014]
[22.62116814 76.63631439]
[36.86786270 81.33011627]
[51.29524612 85.43506622]
[65.87899780 88.94422913]
[80.46274567 92.45339966]
[69.34668732 82.38198853]
[58.23062515 72.31058502]
[44.06150055 67.38758850]
[32.19357681 58.21412659]
[23.85911751 45.74269104]
[19.92349625 31.26819801]
[20.79535484 16.29355812]
[26.38416672 2.37360144]
[36.10963821 -9.04634571]
[48.96196365 -16.78053856]
[63.60667038 -20.02592468]
[78.52318573 -18.44553375]
[92.16270447 -12.20345974]
[103.10902405 -1.94782388]
[110.22557831 11.25652027]
[112.77343750 26.03854942]
[110.48806763 40.86343002]
[103.60467529 54.19467545]
[102.48175049 69.15258026]
[101.35881805 84.11048889]
[109.51548767 71.52204895]
[117.67214966 58.93361282]
[125.82881927 46.34517288]
[133.98548889 33.75673294]
[128.28433228 19.32494736]
[132.18737793 4.30676556]
[144.19384766 -5.52301407]
[159.68698120 -6.38464022]
[172.70936584 2.05319953]
[178.25361633 16.54598427]
[174.18788147 31.52094078]
[162.07548523 41.21989441]
[146.57391357 41.91339874]
[138.41725159 54.50183868]
[130.26058960 67.09027863]
[122.10392761 79.67871857]
[113.94725800 92.26715851]
[123.50730133 80.70837402]
[134.27084351 70.26107025]
[146.10949707 61.04986191]
[158.88204956 53.18461990]
[172.43614197 46.75916672]
[186.61010742 41.85013580]
[201.23489380 38.51608276]
[216.13603210 36.79678345]
[231.13578796 36.71274185]
[246.05526733 38.26495743]
[260.71649170 41.43491745]
[274.94458008 46.18481064]
[288.56982422 52.45798492]
[301.42968750 60.17960358]
[313.37081909 69.25757599]
[324.25076294 79.58361053]
[333.93972778 91.03454590]
[342.32217407 103.47378540]
[349.29809570 116.75296783]
[354.78427124 130.71368408]
[358.71527100 145.18943787]
[361.04425049 160.00752258]
[361.74337769 174.99122620]
[360.80432129 189.96180725]
[358.23828125 204.74069214]
[354.07589722 219.15161133]
[348.36679077 233.02265930]
[341.17904663 246.18838501]
[332.59844971 258.49176025]
[322.72729492 269.78601074]
[311.68331909 279.93646240]
[299.59832764 288.82196045]
[286.61639404 296.33660889]
[272.89242554 302.39071655]
[258.59005737 306.91207886]
[243.87995911 309.84680176]
[228.93753052 311.15982056]
[213.94104004 310.83551025]
[199.06935120 308.87774658]
[184.49986267 305.30984497]
[170.40634155 300.17440796]
[156.95690918 293.53265381]
[144.31199646 285.46383667]
[132.62240601 276.06414795]
[122.02759552 265.44577026]
[112.65393066 253.73533630]
[104.61322021 241.07252502]
[98.00137329 227.60836792]
[92.89725494 213.50347900]
[89.36174774 198.92608643]
[87.43702698 184.05009460]
[87.14604187 169.05291748]
[88.49227142 154.11344910]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 24]
[3 23]
[4 22]
[5 21]
[6 20]
[7 19]
[9 17]
[11 15]
[26 62]
[27 61]
[28 60]
[33 59]
[34 58]
[35 57]
[36 56]
[37 53]
[38 52]
[39 51]
[40 50]
[82 99]
[83 98]
[84 97]
[85 96]
[86 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
