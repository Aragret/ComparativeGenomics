%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCCCUCACUAAACGUAAGCCUUCUCCUCACUCUCUCAAUCUUAUCCAUCAUAGCAGGCAxxxxxxxxxxCCCCGAUAUGGCGUUUCCCCGCAUAAACAACAUAAGCUUCUGACUCUUACCUCCCUCUCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[1.75457084 543.07617188]
[1.75457084 528.07617188]
[1.75457084 513.07617188]
[1.75457084 498.07617188]
[1.75457084 483.07617188]
[1.75457084 468.07617188]
[1.75457084 453.07617188]
[1.75457084 438.07617188]
[1.75457084 423.07617188]
[1.75457084 408.07617188]
[-11.08987331 405.31283569]
[-23.13544464 400.05273438]
[-33.90189362 392.50311279]
[-42.95949173 382.96255493]
[-49.94615936 371.80920410]
[-54.58196259 359.48565674]
[-56.68031693 346.48156738]
[-56.15550232 333.31405640]
[-53.02616119 320.50720215]
[-47.41463089 308.57122803]
[-39.54219437 297.98199463]
[-29.72032356 289.16232300]
[-18.33837318 282.46478271]
[-5.84814358 278.15789795]
[7.25405645 276.41516113]
[8.50093079 261.46707153]
[9.74780560 246.51896667]
[10.99468040 231.57089233]
[12.24155521 216.62280273]
[3.29082823 228.65959167]
[-7.92750311 238.61695862]
[-20.94146729 246.07595825]
[-35.20354843 250.72279358]
[-50.11371613 252.36196899]
[-65.04467773 250.92449951]
[-79.36827087 246.47088623]
[-92.48188019 239.18847656]
[-103.83378601 229.38366699]
[-112.94640350 217.46896362]
[-119.43635559 203.94563293]
[-123.03059387 189.38261414]
[-123.57790375 174.39260864]
[-121.05525970 159.60624695]
[-115.56879425 145.64564514]
[-107.34933472 133.09811401]
[-96.74267578 122.49156189]
[-84.19506836 114.27222443]
[-70.23439789 108.78590393]
[-55.44802094 106.26340485]
[-40.45801544 106.81086731]
[-25.89503288 110.40525055]
[-12.37176418 116.89533234]
[-0.45715150 126.00807190]
[9.34753990 137.36007690]
[16.62981033 150.47375488]
[21.08328629 164.79739380]
[22.52060127 179.72837830]
[20.88003349 194.64433289]
[30.02176666 182.75195312]
[39.03929901 170.76512146]
[48.05682755 158.77828979]
[49.20743942 141.29469299]
[66.15238953 134.16387939]
[74.91859436 121.99203491]
[83.68479919 109.82019806]
[74.62808228 92.49382782]
[85.15281677 69.55173492]
[85.15281677 54.55173874]
[71.09562683 48.76693726]
[60.32575226 38.03948212]
[54.48552322 24.00523376]
[54.46552658 8.80431080]
[60.26881409 -5.24525452]
[71.01042938 -16.00100708]
[85.05234528 -21.82277107]
[100.25328064 -21.82277107]
[114.29519653 -16.00100708]
[125.03681183 -5.24525452]
[130.84010315 8.80431080]
[130.82009888 24.00523376]
[124.97987366 38.03948212]
[114.20999908 48.76693726]
[100.15281677 54.55173874]
[100.15281677 69.55173492]
[106.66096497 73.27919006]
[119.67727661 80.73410034]
[126.18543243 84.46155548]
[139.12348938 76.87165070]
[152.06153870 69.28173828]
[164.99960327 61.69183350]
[169.08975220 46.66158295]
[182.31890869 39.14864731]
[196.62274170 43.14060974]
[209.56080627 35.55070114]
[222.49885559 27.96079445]
[235.43690491 20.37088585]
[236.81774902 4.91537142]
[247.04473877 -6.75460529]
[262.18539429 -10.15170097]
[276.41781616 -3.96966243]
[284.26934814 9.41439056]
[282.72094727 24.85401535]
[272.36795044 36.41236115]
[257.19134521 39.64501190]
[243.02682495 33.30894089]
[230.08876038 40.89884949]
[217.15071106 48.48875809]
[204.21264648 56.07866669]
[200.71772766 70.51200104]
[187.70481873 78.39355469]
[172.58950806 74.62989044]
[159.65145874 82.21979523]
[146.71339417 89.80970764]
[133.77534485 97.39961243]
[117.32994843 119.99374390]
[95.85663605 118.58641052]
[87.09043121 130.75823975]
[78.32422638 142.93008423]
[79.61639404 155.80580139]
[72.01123047 165.77478027]
[60.04365921 167.79582214]
[51.02613068 179.78265381]
[42.00859833 191.76948547]
[39.32455444 200.56993103]
[32.67667389 203.90928650]
[27.18964195 217.86967468]
[25.94276810 232.81776428]
[24.69589233 247.76585388]
[23.44901848 262.71392822]
[22.20214272 277.66201782]
[38.30118561 283.13253784]
[52.46944046 292.51492310]
[63.77652740 305.18695068]
[71.48149872 320.31066895]
[75.08139038 336.88766479]
[74.34403992 353.82507324]
[69.32306671 370.00756836]
[60.35398865 384.37075806]
[48.03183365 395.97140503]
[33.17164230 404.04904175]
[16.75457001 408.07617188]
[16.75457001 423.07617188]
[16.75457001 438.07617188]
[16.75457001 453.07617188]
[16.75457001 468.07617188]
[16.75457001 483.07617188]
[16.75457001 498.07617188]
[16.75457001 513.07617188]
[16.75457001 528.07617188]
[16.75457001 543.07617188]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[25 130]
[26 129]
[27 128]
[28 127]
[29 126]
[58 125]
[59 123]
[60 122]
[61 121]
[63 118]
[64 117]
[65 116]
[67 84]
[68 83]
[87 114]
[88 113]
[89 112]
[90 111]
[93 108]
[94 107]
[95 106]
[96 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
