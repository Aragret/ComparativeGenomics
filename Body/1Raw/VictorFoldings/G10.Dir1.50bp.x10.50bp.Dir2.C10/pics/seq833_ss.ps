%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCCCACAGUUUAUGUAGCUUACCUCCUCAAAGCAAUACACUGAAAAUGUUUAGACGGGCxxxxxxxxxxACAAACCCUGAGAACCAAAAUGAACGAAAAUCUGUUCGCUUCAUUCAUUGCCCCCACAAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.15933990 258.22250366]
[95.15933990 243.22250366]
[95.15933990 228.22250366]
[95.15933990 213.22250366]
[95.15933990 198.22250366]
[95.15933990 183.22250366]
[95.15933990 168.22250366]
[95.15933990 153.22250366]
[95.15933990 138.22250366]
[95.15933990 123.22251129]
[89.56146240 118.23114777]
[86.51393890 132.91830444]
[72.27069855 137.62255859]
[61.07514572 127.63957977]
[64.12298584 112.95249176]
[78.36569214 108.24842072]
[72.76781464 103.25705719]
[57.86590958 104.96974945]
[42.96400833 106.68243408]
[39.46231842 109.49307251]
[35.62913132 110.86337280]
[31.97101402 110.87042236]
[28.91440964 109.75186920]
[26.75910950 107.86454010]
[11.76641464 108.33258057]
[-3.22628188 108.80062866]
[-18.21897888 109.26866913]
[-33.19869232 110.04851532]
[-48.15893936 111.13982391]
[-63.11919022 112.23113251]
[-78.07943726 113.32244110]
[-85.36328888 126.92204285]
[-98.85444641 134.40483093]
[-114.24794006 133.38308716]
[-126.63175201 124.18282318]
[-132.05426025 109.73983765]
[-128.78515625 94.66281891]
[-117.86760712 83.76278687]
[-102.78535461 80.51791382]
[-88.35109711 85.96361542]
[-79.17074585 98.36219788]
[-64.21050262 97.27088165]
[-49.25025177 96.17957306]
[-34.29000473 95.08826447]
[-30.50916290 92.07482910]
[-24.77871132 91.44775391]
[-18.68701935 94.27597046]
[-3.69432402 93.80792999]
[11.29837227 93.33988953]
[26.29106903 92.87184143]
[41.25131607 91.78053284]
[56.15322113 90.06784821]
[71.05512238 88.35515594]
[75.60287476 83.83820343]
[80.71846771 80.63127899]
[86.07087708 78.76575470]
[91.34197998 78.19570160]
[96.24359131 78.80471039]
[100.53224182 80.41642761]
[101.46787262 65.44564056]
[102.40350342 50.47484589]
[90.33636475 43.33130264]
[82.57311249 31.73290253]
[80.58793640 17.98502731]
[84.71334076 4.79075861]
[94.08599854 -5.28060198]
[106.82675934 -10.29382420]
[108.07363892 -25.24191093]
[109.32051086 -40.18999863]
[95.54618835 -46.51801300]
[84.76904297 -57.17770386]
[78.29048157 -70.88186646]
[76.89280701 -85.97564697]
[80.74481201 -100.63640594]
[89.38133240 -113.09378815]
[101.75947571 -121.84349823]
[116.38451385 -125.82896423]
[131.49041748 -124.56892395]
[145.25305176 -118.21553802]
[156.01052856 -107.53600311]
[162.46383667 -93.81992340]
[163.83367920 -78.72359467]
[159.95466614 -64.06995392]
[151.29521179 -51.62851334]
[138.90095520 -42.90163040]
[124.26860046 -38.94312286]
[123.02172089 -23.99503708]
[121.77484894 -9.04695034]
[135.25126648 -0.18479966]
[142.47784424 14.33961964]
[141.40615845 30.62094307]
[132.23339844 44.22814941]
[117.37429047 51.41047287]
[116.43866730 66.38126373]
[115.50303650 81.35205841]
[125.83023834 92.23088074]
[140.82943726 92.07484436]
[155.82861328 91.91880798]
[170.82131958 91.45076752]
[185.80102539 90.67092133]
[200.78074646 89.89107513]
[215.76045227 89.11122894]
[230.74017334 88.33138275]
[245.71987915 87.55154419]
[260.69067383 86.61591339]
[275.65093994 85.52460480]
[290.61117554 84.43328857]
[305.57141113 83.34197998]
[315.71313477 71.22087097]
[331.46249390 69.90445709]
[343.47570801 80.17375183]
[344.62554932 95.93615723]
[334.22979736 107.84011841]
[318.45611572 108.82323456]
[306.66271973 98.30223083]
[291.70248413 99.39353943]
[276.74224854 100.48484802]
[261.78198242 101.57616425]
[255.29777527 105.22315979]
[246.49972534 102.53125763]
[231.52001953 103.31110382]
[216.54029846 104.09094238]
[201.56059265 104.87078857]
[186.58087158 105.65063477]
[171.60116577 106.43048096]
[167.75845337 109.36460114]
[162.01618958 109.87232971]
[155.98464966 106.91799927]
[140.98547363 107.07403564]
[125.98627472 107.23007202]
[139.22410583 114.28412628]
[154.14476013 115.82498932]
[165.94920349 125.07998657]
[171.00595093 139.20193481]
[167.75935364 153.84637451]
[157.20817566 164.50811768]
[142.59838867 167.90719604]
[128.42449951 162.99794006]
[119.04694366 151.29060364]
[117.35072327 136.38624573]
[110.15933990 123.22251129]
[110.15933990 138.22250366]
[110.15933990 153.22250366]
[110.15933990 168.22250366]
[110.15933990 183.22250366]
[110.15933990 198.22250366]
[110.15933990 213.22250366]
[110.15933990 228.22250366]
[110.15933990 243.22250366]
[110.15933990 258.22250366]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[17 53]
[18 52]
[19 51]
[24 50]
[25 49]
[26 48]
[27 47]
[28 44]
[29 43]
[30 42]
[31 41]
[59 95]
[60 94]
[61 93]
[67 88]
[68 87]
[69 86]
[96 130]
[97 129]
[98 128]
[99 125]
[100 124]
[101 123]
[102 122]
[103 121]
[104 120]
[105 118]
[106 117]
[107 116]
[108 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
