%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAUUUAACUGUUAGUCCAAAGAGGAACAGCUCUUUGGACACUAGGAAAAAACCUUGUAGAxxxxxxxxxxAGUCUAAUAGAAAACAACCGAAACCAAAUAAUUCAAGCACUGCUUAUUACAAUUUUACUGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[224.07553101 414.15078735]
[224.07553101 399.15078735]
[224.07553101 384.15078735]
[224.07553101 369.15078735]
[224.07553101 354.15078735]
[224.07553101 339.15078735]
[224.07553101 324.15078735]
[224.07553101 309.15078735]
[224.07553101 294.15078735]
[224.07553101 279.15078735]
[199.53256226 265.82592773]
[190.61488342 241.56625366]
[199.21682739 219.40867615]
[189.23410034 208.21290588]
[179.25137329 197.01713562]
[163.00939941 199.18598938]
[148.51875305 191.18681335]
[141.56086731 175.98583984]
[145.04536438 159.46585083]
[134.83187866 148.48017883]
[124.61840057 137.49450684]
[114.40491486 126.50885010]
[80.94900513 131.51155090]
[56.52884293 99.36899567]
[41.54912949 100.14884186]
[26.56941414 100.92868805]
[11.58969975 101.70853424]
[-3.39001417 102.48838043]
[-18.36972809 103.26821899]
[-33.34944153 104.04806519]
[-48.32915878 104.82791138]
[-63.30887222 105.60775757]
[-78.28858948 106.38760376]
[-88.68025970 118.29510498]
[-104.45360565 119.28358459]
[-116.25057983 108.76659393]
[-117.07223511 92.98368073]
[-106.43111420 81.29856110]
[-90.64038849 80.64381409]
[-79.06842804 91.40789032]
[-64.08871460 90.62804413]
[-49.10900116 89.84819794]
[-34.12928772 89.06835175]
[-19.14957428 88.28850555]
[-4.16985941 87.50865936]
[10.80985451 86.72882080]
[25.78956985 85.94897461]
[40.76928329 85.16912842]
[55.74899673 84.38928223]
[61.66896057 70.60690308]
[51.92131042 59.20587921]
[37.07248306 53.74484253]
[34.68262100 39.04321671]
[24.93497086 27.64219666]
[15.18731880 16.24117470]
[-0.58644706 15.25940514]
[-10.98318863 3.35632563]
[-9.83470440 -12.40617847]
[2.17763114 -22.67649269]
[17.92711258 -21.36142159]
[28.06985092 -9.24117374]
[26.58833885 6.49352312]
[36.33599091 17.89454460]
[46.08364487 29.29556465]
[60.23525238 33.94112396]
[63.32233047 49.45822906]
[73.06998444 60.85924911]
[87.24654388 55.95769882]
[87.87051392 40.97068405]
[88.49449158 25.98366547]
[75.00609589 18.84042168]
[65.95972443 6.54709578]
[63.15153885 -8.45546532]
[67.13910675 -23.18849182]
[77.13069153 -34.72673035]
[91.14246368 -40.77925491]
[106.39237213 -40.14433289]
[119.85253143 -32.94802475]
[128.85041809 -20.61916924]
[131.59950256 -5.60566664]
[127.55395508 9.11154270]
[117.51700592 20.61034393]
[103.48151398 26.60764313]
[102.85753632 41.59465790]
[102.23355865 56.58167648]
[112.86053467 60.21442413]
[121.79723358 66.28287506]
[128.53317261 74.17301941]
[132.75619507 83.17887115]
[134.36380005 92.56195068]
[133.45761108 101.61007690]
[130.32220459 109.69074249]
[125.39057922 116.29537201]
[135.60406494 127.28103638]
[145.81753540 138.26669312]
[156.03102112 149.25236511]
[169.59020996 146.57885742]
[182.59136963 150.93579102]
[191.65699768 161.07801819]
[194.48825073 174.27253723]
[190.44712830 187.03440857]
[200.42985535 198.23017883]
[210.41258240 209.42594910]
[221.79853821 204.29449463]
[234.83462524 203.75923157]
[247.65711975 208.30845642]
[258.28228760 217.67515564]
[264.91079712 230.82205200]
[266.22357178 246.04818726]
[280.79626465 249.60295105]
[295.36895752 253.15771484]
[309.94168091 256.71249390]
[316.48617554 255.20352173]
[321.96353149 257.00073242]
[325.04040527 260.73013306]
[339.45260620 264.88800049]
[353.86483765 269.04589844]
[368.27703857 273.20379639]
[385.17150879 271.78485107]
[391.21182251 287.62628174]
[377.66162109 297.81588745]
[364.11917114 287.61599731]
[349.70693970 283.45812988]
[335.29473877 279.30023193]
[320.88250732 275.14233398]
[306.38690186 271.28518677]
[291.81420898 267.73040771]
[277.24151611 264.17565918]
[262.66879272 260.62091064]
[256.77047729 265.25335693]
[267.85498047 275.35949707]
[278.93948364 285.46560669]
[292.43518066 292.01287842]
[297.00323486 306.30038452]
[289.80917358 319.46267700]
[275.31695557 323.33245850]
[262.51904297 315.50854492]
[259.35659790 300.84579468]
[252.16522217 287.68206787]
[244.97384644 274.51831055]
[239.07553101 279.15078735]
[239.07553101 294.15078735]
[239.07553101 309.15078735]
[239.07553101 324.15078735]
[239.07553101 339.15078735]
[239.07553101 354.15078735]
[239.07553101 369.15078735]
[239.07553101 384.15078735]
[239.07553101 399.15078735]
[239.07553101 414.15078735]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[13 103]
[14 102]
[15 101]
[19 96]
[20 95]
[21 94]
[22 93]
[24 49]
[25 48]
[26 47]
[27 46]
[28 45]
[29 44]
[30 43]
[31 42]
[32 41]
[33 40]
[50 67]
[51 66]
[53 64]
[54 63]
[55 62]
[68 85]
[69 84]
[70 83]
[109 129]
[110 128]
[111 127]
[112 126]
[115 125]
[116 124]
[117 123]
[118 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
