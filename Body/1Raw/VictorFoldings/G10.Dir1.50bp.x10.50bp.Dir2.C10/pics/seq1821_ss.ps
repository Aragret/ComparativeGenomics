%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGAUUUCAACUUAACUUGACCGCUCUGAGCUAAACCUAGCCCCAAACCCACUCCACCUUACxxxxxxxxxxAAAAAGGAUUAGACUGAACCGAAUUGGUAUAUAGUUUAAACAAAACGAAUGAUUUCGACUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.55675507 336.16876221]
[98.14775085 316.96105957]
[98.45980835 301.96429443]
[98.77186584 286.96752930]
[99.08391571 271.97079468]
[99.39597321 256.97402954]
[99.70803070 241.97727966]
[100.02008820 226.98052979]
[100.33214569 211.98377991]
[100.64420319 196.98701477]
[100.95625305 181.99026489]
[99.70938110 167.04217529]
[96.91706085 152.30436707]
[94.12473297 137.56657410]
[80.05321503 132.37115479]
[68.35359192 141.75831604]
[56.65396500 151.14547729]
[44.95434189 160.53263855]
[43.48086548 176.26808167]
[31.25917435 186.28836060]
[15.54018116 184.64860535]
[5.64968681 172.32165527]
[7.45554543 156.62086487]
[19.88637352 146.86125183]
[35.56718063 148.83300781]
[47.26680374 139.44584656]
[58.96642685 130.05868530]
[70.66605377 120.67153168]
[62.81880951 104.93231201]
[63.24555206 86.57946014]
[72.56214905 69.87273407]
[89.24150848 59.01846695]
[109.82576752 57.12010956]
[103.47863770 43.52915955]
[90.62872314 34.29930496]
[92.25376129 19.49361229]
[80.38433838 14.33893490]
[75.39352417 2.83629608]
[79.46885681 -8.59606934]
[73.40584564 -22.31612206]
[67.34283447 -36.03617477]
[61.27981949 -49.75622940]
[48.62469864 -59.25141144]
[50.55740356 -74.02009583]
[44.49438858 -87.74015045]
[38.43137741 -101.46019745]
[23.90191269 -97.60777283]
[8.94866753 -96.07580566]
[-6.06012487 -96.90202332]
[-20.75485802 -100.06609344]
[-34.77366257 -105.49007416]
[-47.77131271 -113.04041290]
[-59.42772675 -122.53117371]
[-69.45585632 -133.72863770]
[-77.60874939 -146.35704041]
[-83.68563843 -160.10542297]
[-87.53686523 -174.63520813]
[-89.06759644 -189.58857727]
[-88.24014282 -204.59730530]
[-85.07486725 -219.29177856]
[-79.64971924 -233.31013489]
[-72.09831238 -246.30715942]
[-62.60659027 -257.96279907]
[-51.40830231 -267.98999023]
[-38.77921677 -276.14184570]
[-25.03033638 -282.21759033]
[-10.50023842 -286.06762695]
[4.45326042 -287.59713745]
[19.46191597 -286.76843262]
[34.15612793 -283.60192871]
[48.17403793 -278.17562866]
[61.17043686 -270.62316895]
[72.82528687 -261.13046265]
[82.85157013 -249.93136597]
[91.00238037 -237.30160522]
[97.07699585 -223.55223083]
[100.92582703 -209.02180481]
[102.45409393 -194.06817627]
[101.62416077 -179.05960083]
[98.45645905 -164.36564636]
[93.02899933 -150.34819031]
[85.47544098 -137.35240173]
[75.98180389 -125.69834137]
[64.78186035 -115.67298126]
[52.15142822 -107.52321625]
[58.21444321 -93.80316162]
[64.27745819 -80.08310699]
[76.49890900 -71.56927490]
[74.99987030 -55.81924438]
[81.06288910 -42.09918976]
[87.12590027 -28.37913513]
[93.18891144 -14.65908241]
[107.88850403 -5.12378693]
[105.84471130 13.14648342]
[118.24063873 21.40422249]
[117.06958771 37.18202972]
[123.41671753 50.77297974]
[137.48823547 55.96839523]
[151.14448547 49.76298904]
[164.80072021 43.55758286]
[171.75920105 29.10216141]
[187.43089294 25.67032242]
[199.79382324 35.89468002]
[199.36421204 51.93198013]
[186.47160339 61.47977829]
[171.00611877 57.21382141]
[157.34988403 63.41923141]
[143.69364929 69.62463379]
[144.23930359 77.10475922]
[158.13017273 71.44406891]
[167.80619812 82.90594482]
[159.89518738 95.65019989]
[145.33061218 92.06501007]
[145.87626648 99.54513550]
[160.28848267 103.70301819]
[174.70069885 107.86090851]
[189.11291504 112.01879883]
[203.79559326 105.55361176]
[217.93730164 113.12933350]
[220.68974304 128.93450928]
[209.94146729 140.84477234]
[193.93763733 139.72357178]
[184.95503235 126.43101501]
[170.54281616 122.27312469]
[156.13059998 118.11523438]
[141.71838379 113.95735168]
[127.18693542 129.25675964]
[108.86254120 134.77424622]
[111.65486145 149.51205444]
[114.44718933 164.24984741]
[121.45697784 150.98852539]
[134.08454895 142.89256287]
[149.06127930 142.05760193]
[162.51051331 148.69975281]
[170.95094299 161.09971619]
[172.19779968 176.04780579]
[165.92831421 189.67474365]
[153.76535034 198.45326233]
[138.85723877 200.11103821]
[125.06290436 194.21897888]
[115.95301056 182.30232239]
[115.64095306 197.29907227]
[115.32889557 212.29583740]
[115.01683807 227.29258728]
[114.70478821 242.28933716]
[114.39273071 257.28610229]
[114.08067322 272.28283691]
[113.76861572 287.27960205]
[113.45655823 302.27636719]
[113.14450073 317.27310181]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 142]
[11 141]
[12 130]
[13 129]
[14 128]
[15 28]
[16 27]
[17 26]
[18 25]
[33 97]
[34 96]
[36 94]
[39 92]
[40 91]
[41 90]
[42 89]
[44 87]
[45 86]
[46 85]
[98 108]
[99 107]
[100 106]
[114 126]
[115 125]
[116 124]
[117 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
