%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGCCAAACCCCAAAAACAAAGAACCCUAACACCAGCCUAACCAGAUUUCAAAUUUUAUCUUxxxxxxxxxxAAGGAACAAGCAUCAAGCACGCAGCAAUGCAGCUCAAAACGCUUAGCCUAGCCACACCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[113.94248962 296.31707764]
[113.63043213 281.32034302]
[113.31837463 266.32357788]
[113.00631714 251.32682800]
[112.69426727 236.33006287]
[112.38220978 221.33331299]
[112.07015228 206.33656311]
[111.75809479 191.33981323]
[111.44603729 176.34304810]
[109.26920319 161.50184631]
[105.26145935 147.04716492]
[101.25372314 132.59246826]
[89.02740479 130.71551514]
[78.37921143 124.42094421]
[70.84059906 114.61405182]
[67.49581146 102.70530701]
[68.82589722 90.40747833]
[55.88784409 82.81757355]
[47.09616470 94.98519897]
[37.18767548 106.26201630]
[26.25211143 116.54589844]
[14.38851070 125.74370575]
[1.70431221 133.77214050]
[-11.68561077 140.55851746]
[-25.65999413 146.04133606]
[-40.09227753 150.17097473]
[-54.85176468 152.91001892]
[-69.80477905 154.23365784]
[-84.81591034 154.12991333]
[-99.74920654 152.59973145]
[-114.46942139 149.65695190]
[-128.84326172 145.32824707]
[-142.74052429 139.65280151]
[-156.03536987 132.68202209]
[-168.60739136 124.47904205]
[-180.34274292 115.11814117]
[-191.13513184 104.68409729]
[-200.88681030 93.27141571]
[-209.50947571 80.98343658]
[-216.92504883 67.93145752]
[-223.06634521 54.23368073]
[-227.87776184 40.01415253]
[-231.31573486 25.40165138]
[-233.34910583 10.52851677]
[-233.95947266 -4.47055626]
[-233.14131165 -19.45973206]
[-230.90202332 -34.30326080]
[-227.26190186 -48.86671448]
[-222.25389099 -63.01820374]
[-215.92335510 -76.62956238]
[-208.32763672 -89.57752991]
[-199.53552246 -101.74483490]
[-189.62661743 -113.02129364]
[-178.69067383 -123.30477142]
[-166.82675171 -132.50215149]
[-154.14225769 -140.53013611]
[-140.75209045 -147.31600952]
[-126.77750397 -152.79832458]
[-112.34506226 -156.92742920]
[-97.58547974 -159.66593933]
[-82.63241577 -160.98902893]
[-67.62129211 -160.88475037]
[-52.68804932 -159.35401917]
[-37.96793747 -156.41070557]
[-23.59426498 -152.08146667]
[-9.69720268 -146.40551758]
[3.59739184 -139.43426514]
[16.16911697 -131.23081970]
[27.90411949 -121.86949158]
[38.69612503 -111.43505096]
[48.44739151 -100.02201080]
[57.06961060 -87.73371887]
[64.48470306 -74.68147278]
[70.62550354 -60.98346710]
[75.43640137 -46.76376343]
[78.87384033 -32.15114212]
[80.90666962 -17.27793121]
[81.51649475 -2.27883577]
[80.69778442 12.71030903]
[78.45796204 27.55375671]
[74.81729889 42.11707687]
[69.80877686 56.26838303]
[63.47774887 69.87951660]
[76.41580963 77.46942139]
[88.91068268 69.32642365]
[103.72413635 67.59673309]
[117.75894165 72.64198303]
[128.08067322 83.40731049]
[142.40325928 78.95050049]
[156.72586060 74.49368286]
[171.04846191 70.03686523]
[174.47978210 52.85775757]
[186.05072021 39.82269287]
[202.53327942 34.43344879]
[219.39671326 38.07738113]
[232.05287170 49.67160416]
[246.17767334 44.62284470]
[260.30249023 39.57408905]
[266.54421997 28.23854637]
[278.46304321 24.34493256]
[289.46435547 29.47119522]
[303.69113159 24.71738052]
[317.91790771 19.96356583]
[328.37826538 7.33371401]
[344.49874878 10.34410763]
[349.69598389 25.89791107]
[338.62350464 37.99470520]
[322.67172241 34.19034576]
[308.44494629 38.94416046]
[294.21817017 43.69797516]
[283.35043335 57.44176865]
[265.35122681 53.69889450]
[251.22642517 58.74765015]
[237.10162354 63.79640579]
[236.17282104 76.46672058]
[230.48004150 87.87660217]
[220.84475708 96.29989624]
[208.68775940 100.44721222]
[195.81979370 99.66320038]
[184.17182922 94.02984619]
[175.50527954 84.35946655]
[161.18267822 88.81627655]
[146.86007690 93.27309418]
[132.53747559 97.72991180]
[128.63427734 115.61791992]
[115.70841217 128.58473206]
[119.71614838 143.03941345]
[123.72389221 157.49411011]
[128.88581848 143.41026306]
[139.56314087 132.87486267]
[153.71478271 127.90183258]
[168.63551331 129.44183350]
[181.47309875 137.20046997]
[189.77351379 149.69459534]
[191.95002747 164.53584290]
[187.58659363 178.88717651]
[177.51731873 190.00515747]
[163.66705322 195.76451111]
[148.68341064 195.06427002]
[135.43064880 188.03828430]
[126.44279480 176.03100586]
[126.75485229 191.02775574]
[127.06690216 206.02450562]
[127.37895966 221.02125549]
[127.69101715 236.01802063]
[128.00306702 251.01477051]
[128.31512451 266.01153564]
[128.62718201 281.00827026]
[128.93923950 296.00503540]
[131.53024292 315.21273804]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 128]
[11 127]
[12 126]
[17 84]
[18 83]
[88 124]
[89 123]
[90 122]
[91 121]
[96 114]
[97 113]
[98 112]
[101 110]
[102 109]
[103 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
