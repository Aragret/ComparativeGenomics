%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUUACCCCGCCUGUUUACCAAAAACAUCACCUCUAGCAUCACCAGUAUUAGAGGCACCGCxxxxxxxxxxGACAGUUUGAACAUACAAAACCCACCCCAUUCCUCCCCACACUCAUCGCCCUUACCACGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[112.33184052 176.63436890]
[110.15776825 161.79275513]
[109.53668213 146.80462646]
[109.83863068 131.80767822]
[102.38372040 144.82397461]
[102.23918915 160.64453125]
[89.19973755 167.84327698]
[81.74482727 180.85958862]
[74.28991699 193.87590027]
[66.83500671 206.89219666]
[67.43292236 223.28044128]
[53.39739227 231.76194763]
[39.16696930 223.61167908]
[39.38068771 207.21392822]
[53.81869888 199.43728638]
[61.27360916 186.42098999]
[68.72851562 173.40467834]
[76.18342590 160.38836670]
[75.79473114 145.49882507]
[89.36740875 137.36906433]
[96.82231903 124.35276031]
[87.07466888 112.95173645]
[73.05795288 118.29325104]
[59.04124069 123.63476562]
[45.02452850 128.97627258]
[31.00781631 134.31779480]
[23.16123009 148.31101990]
[7.30598974 150.75865173]
[-4.39512253 139.78306580]
[-2.96601415 123.80379486]
[10.49702454 115.07876587]
[25.66630363 120.30107880]
[39.68301773 114.95956421]
[53.69972992 109.61804962]
[67.71644592 104.27654266]
[81.73315430 98.93502808]
[82.58950043 91.48407745]
[70.54039764 82.54991913]
[84.30219269 76.58217621]
[85.15853882 69.13122559]
[72.71909332 60.74908066]
[60.27965546 52.36693573]
[47.84021378 43.98479080]
[35.40077209 35.60264969]
[22.96133423 27.22050667]
[10.07264137 35.33231735]
[-5.00205946 37.49409866]
[-19.65098572 33.33130264]
[-31.33612061 23.56516457]
[-38.03294754 9.88772202]
[-38.58119965 -5.33132219]
[-32.88588333 -19.45517731]
[-21.93375587 -30.03680038]
[-7.62233305 -35.24286270]
[7.56884241 -34.17137909]
[21.00780869 -27.00799370]
[30.36618233 -14.99380493]
[34.02256775 -0.21034369]
[31.34347725 14.78106594]
[43.78291702 23.16320992]
[56.22235870 31.54535294]
[68.66179657 39.92749405]
[81.10123444 48.30963898]
[93.54067993 56.69178009]
[86.64265442 43.37197495]
[79.74463654 30.05216599]
[72.84661102 16.73235703]
[60.60339737 8.06611538]
[51.69235992 -4.00009298]
[47.01105881 -18.25089645]
[47.03101730 -33.25088501]
[51.75023270 -47.48917770]
[60.69335175 -59.53162766]
[72.95958710 -68.16525269]
[87.31341553 -72.52043915]
[102.30904388 -72.15850067]
[116.43605042 -67.11589813]
[128.27146912 -57.90055084]
[136.62319946 -45.44067001]
[140.65000916 -30.99127769]
[139.94627380 -16.00779533]
[134.58290100 -1.99943149]
[125.10053253 9.62244892]
[122.01210785 24.30105972]
[118.92367554 38.97967148]
[115.83525085 53.65827942]
[125.58290100 42.25725937]
[135.33055115 30.85623741]
[145.07820129 19.45521736]
[143.59669495 3.72052073]
[153.73942566 -8.39972687]
[169.48890686 -9.71479797]
[181.50125122 0.55551577]
[182.64973450 16.31801987]
[172.25299072 28.22109985]
[156.47923279 29.20286942]
[146.73156738 40.60388947]
[136.98391724 52.00490952]
[127.23626709 63.40593338]
[141.25657654 58.07386780]
[151.23799133 46.87692642]
[162.32817078 36.77703476]
[174.40721130 27.88340378]
[187.34451294 20.29219818]
[201.00016785 14.08550072]
[215.22651672 9.33042526]
[229.86975098 6.07838774]
[244.77153015 4.36455202]
[259.77069092 4.20744991]
[274.70510864 5.60877943]
[289.41323853 8.55338860]
[303.73608398 13.00943756]
[317.51873779 18.92874336]
[330.61221313 26.24730301]
[342.87487793 34.88597870]
[354.17419434 44.75135803]
[364.38793945 55.73677444]
[373.40567017 67.72344208]
[381.12991333 80.58174896]
[387.47714233 94.17265320]
[392.37872314 108.34921265]
[395.78161621 122.95812225]
[397.64907837 137.84141541]
[397.96087646 152.83818054]
[396.71365356 167.78623962]
[393.92092896 182.52395630]
[389.61285400 196.89199829]
[383.83602905 210.73498535]
[376.65289307 223.90324402]
[368.14117432 236.25437927]
[358.39288330 247.65483093]
[347.51339722 257.98135376]
[335.62036133 267.12225342]
[322.84243774 274.97872925]
[309.31771851 281.46578979]
[295.19247437 286.51333618]
[280.61944580 290.06674194]
[265.75619507 292.08761597]
[250.76344299 292.55407715]
[235.80331421 291.46112061]
[221.03756714 288.82055664]
[206.62585449 284.66091919]
[192.72402954 279.02716064]
[179.48237610 271.98025513]
[167.04411316 263.59640503]
[155.54370117 253.96618652]
[145.10551453 243.19380188]
[135.84242249 231.39570618]
[127.85457611 218.69947815]
[121.22834778 205.24240112]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 21]
[5 20]
[7 18]
[8 17]
[9 16]
[10 15]
[22 36]
[23 35]
[24 34]
[25 33]
[26 32]
[40 64]
[41 63]
[42 62]
[43 61]
[44 60]
[45 59]
[86 99]
[87 98]
[88 97]
[89 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
