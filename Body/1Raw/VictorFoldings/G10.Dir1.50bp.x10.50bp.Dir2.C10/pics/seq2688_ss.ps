%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAUCUUACCCCGCCUGUUUACCAAAAACAUCACCUCUAGCAUCACCAGUAUUAGAGGCACxxxxxxxxxxAUAUACCAAAUCUCUCCCUCACUAAACGUAAGCCUUCUCCUCACUCUCUCAAUCUUAUCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[132.11509705 171.38426208]
[125.69132233 157.82936096]
[120.19641876 143.87207031]
[115.65610504 129.57838440]
[107.40381622 142.10435486]
[106.27275848 157.88507080]
[92.80967712 164.25646973]
[84.55738831 176.78242493]
[76.30509949 189.30839539]
[68.05281067 201.83435059]
[72.69924164 216.76568604]
[66.61328888 231.17037964]
[52.66855240 238.24697876]
[37.44930649 234.65412903]
[28.14161491 222.08827209]
[29.14028549 206.48260498]
[39.97377777 195.20565796]
[55.52684402 193.58206177]
[63.77913666 181.05610657]
[72.03142548 168.53013611]
[80.28371429 156.00418091]
[80.82451630 141.11940002]
[94.87785339 133.85206604]
[103.13014221 121.32610321]
[94.49102783 109.06373596]
[79.91832733 112.61849213]
[65.34562683 116.17325592]
[50.77292252 119.72801971]
[36.20021820 123.28278351]
[26.67242622 136.19017029]
[10.63581181 136.64465332]
[0.39229321 124.29759979]
[3.79982114 108.62059784]
[18.24443245 101.63970947]
[32.64545441 108.71007538]
[47.21815872 105.15531921]
[61.79086304 101.60055542]
[76.36356354 98.04579163]
[90.93626404 94.49102783]
[92.71364594 87.20468140]
[81.87048340 76.84003448]
[96.26840973 72.63197327]
[98.04579163 65.34562683]
[86.74678802 55.47990036]
[75.44778442 45.61417770]
[64.14877319 35.74845505]
[52.84977341 25.88273239]
[41.55076599 16.01700783]
[27.75238419 22.46096039]
[12.52582741 22.72900581]
[-1.49081099 16.77470016]
[-11.86906338 5.62966728]
[-16.81083488 -8.77515125]
[-15.45993233 -23.94403267]
[-8.05041027 -37.24887466]
[4.13398886 -46.38453674]
[18.98224258 -49.76820755]
[33.92180252 -46.81364822]
[46.36429977 -38.03274918]
[54.15399551 -24.94685936]
[55.94127655 -9.82318497]
[51.41648865 4.71800375]
[62.71549606 14.58372688]
[74.01450348 24.44944954]
[85.31350708 34.31517410]
[96.61251068 44.18089676]
[107.91151428 54.04661942]
[109.45700836 39.12644958]
[112.00531769 24.34449768]
[115.54483795 9.76808453]
[120.05944061 -4.53640366]
[125.52856445 -18.50381851]
[131.92730713 -32.07054520]
[139.22651672 -45.17480087]
[147.39295959 -57.75689697]
[156.38945007 -69.75953674]
[166.17498779 -81.12804413]
[176.70503235 -91.81066132]
[187.93162537 -101.75871277]
[199.80360413 -110.92691040]
[212.26693726 -119.27349091]
[225.26484680 -126.76044464]
[238.73812866 -133.35366821]
[252.62542725 -139.02313232]
[266.86349487 -143.74302673]
[281.38751221 -147.49183655]
[296.13125610 -150.25250244]
[311.02764893 -152.01245117]
[326.00885010 -152.76367188]
[341.00656128 -152.50271606]
[355.95254517 -151.23080444]
[370.77868652 -148.95372009]
[385.41751099 -145.68182373]
[399.80230713 -141.43002319]
[413.86755371 -136.21769714]
[427.54922485 -130.06855774]
[440.78500366 -123.01062012]
[453.51458740 -115.07604218]
[465.68002319 -106.30094910]
[477.22589111 -96.72530365]
[488.09960938 -86.39272308]
[498.25164795 -75.35026550]
[507.63580322 -63.64822006]
[516.20928955 -51.33988571]
[523.93310547 -38.48131561]
[530.77203369 -25.13107300]
[536.69494629 -11.34996128]
[541.67486572 2.79925561]
[545.68914795 17.25213623]
[548.71942139 31.94285774]
[550.75195312 46.80451202]
[551.77752686 61.76941299]
[551.79138184 76.76940918]
[550.79345703 91.73617554]
[548.78833008 106.60156250]
[545.78515625 121.29785156]
[541.79760742 135.75811768]
[536.84381104 149.91650391]
[530.94635010 163.70852661]
[524.13208008 177.07136536]
[516.43200684 189.94416809]
[507.88125610 202.26831055]
[498.51870728 213.98767090]
[488.38708496 225.04884338]
[477.53244019 235.40147400]
[466.00427246 244.99841309]
[453.85507202 253.79595947]
[441.14013672 261.75402832]
[427.91741943 268.83636475]
[414.24713135 275.01077271]
[400.19152832 280.24905396]
[385.81460571 284.52740479]
[371.18185425 287.82629395]
[356.35992432 290.13076782]
[341.41632080 291.43026733]
[326.41909790 291.71890259]
[311.43655396 290.99533081]
[296.53695679 289.26287842]
[281.78811646 286.52944946]
[267.25720215 282.80743408]
[253.01045227 278.11386108]
[239.11271667 272.47003174]
[225.62727356 265.90170288]
[212.61557007 258.43875122]
[200.13685608 250.11518860]
[188.24795532 240.96893311]
[177.00303650 231.04161072]
[166.45329285 220.37844849]
[156.64677429 209.02803040]
[147.62814331 197.04202271]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 24]
[5 23]
[7 21]
[8 20]
[9 19]
[10 18]
[25 39]
[26 38]
[27 37]
[28 36]
[29 35]
[43 67]
[44 66]
[45 65]
[46 64]
[47 63]
[48 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
