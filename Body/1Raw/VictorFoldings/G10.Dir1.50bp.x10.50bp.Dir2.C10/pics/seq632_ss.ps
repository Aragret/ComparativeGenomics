%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUACUAAUCUCAUCAAUACAACCCCCGCCCAUCCUACCCAGCACACACACACCGCUGCUAACxxxxxxxxxxCUAUUGCCAUACUAGUCUUUGCCGCCUGCGAAGCAGCGGUGGGCCUAGCCCUACUAGUCUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[86.96901703 116.17972565]
[75.88990784 126.29176331]
[64.81079865 136.40380859]
[59.83388519 151.42182922]
[45.21743774 154.28691101]
[34.13833237 164.39895630]
[23.05922318 174.51100159]
[11.98011589 184.62303162]
[0.90100783 194.73507690]
[7.85119104 208.12751770]
[11.09738636 222.86267090]
[10.41826248 237.93585205]
[5.86012411 252.31938171]
[-2.26624775 265.03253174]
[-13.40678406 275.20852661]
[-26.80190277 282.15356445]
[-41.53830338 285.39404297]
[-56.61123657 284.70910645]
[-70.99300385 280.14541626]
[-83.70302582 272.01412964]
[-93.87471771 260.86968994]
[-100.81455231 247.47187805]
[-104.04936981 232.73422241]
[-103.35860443 217.66156006]
[-98.78936005 203.28155518]
[-90.65317535 190.57467651]
[-79.50478363 180.40728760]
[-66.10430908 173.47262573]
[-51.36540604 170.24349976]
[-36.29301071 170.94007874]
[-21.91477394 175.51487732]
[-9.21103287 183.65597534]
[1.86807442 173.54393005]
[12.94718170 163.43188477]
[24.02628899 153.31983948]
[35.10539627 143.20780945]
[39.28985977 128.91307068]
[54.69875717 125.32469940]
[65.77786255 115.21265411]
[76.85697174 105.10061646]
[63.06370926 110.99517822]
[48.17840958 112.84664917]
[33.36141586 110.51071167]
[19.76772308 104.16945648]
[8.45698357 94.31718445]
[0.31088552 81.72190857]
[-4.03557205 67.36543274]
[-4.24357653 52.36687469]
[-0.29691327 37.89538956]
[7.49676895 25.07905197]
[18.52994347 14.91691303]
[31.94255447 8.20112419]
[46.68907547 5.45519161]
[61.61999130 6.89316463]
[75.57141876 12.40295124]
[87.45581818 21.55505562]
[96.34678650 33.63605881]
[101.55126190 47.70422745]
[102.66355133 62.66293335]
[99.59617615 77.34825897]
[107.65922546 64.69966125]
[115.72228241 52.05105591]
[123.78533936 39.40245438]
[131.84838867 26.75385284]
[139.91145325 14.10525036]
[147.97450256 1.45664775]
[156.03755188 -11.19195461]
[164.10061646 -23.84055710]
[172.16366577 -36.48915863]
[160.71166992 -46.21363831]
[150.69053650 -57.40696716]
[142.28695679 -69.86062622]
[135.65748596 -83.34260559]
[130.92562866 -97.60175323]
[128.17951965 -112.37242889]
[127.47035217 -127.37944794]
[128.81130981 -142.34326172]
[132.17741394 -156.98509216]
[137.50596619 -171.03216553]
[144.69767761 -184.22279358]
[153.61860657 -196.31126404]
[164.10252380 -207.07235718]
[175.95414734 -216.30558777]
[188.95268250 -223.83897400]
[202.85597229 -229.53216553]
[217.40499878 -233.27909851]
[232.32873535 -235.00996399]
[247.34915161 -234.69252014]
[262.18643188 -232.33268738]
[276.56417847 -227.97442627]
[290.21450806 -221.69892883]
[302.88317871 -213.62309265]
[314.33410645 -203.89736938]
[324.35403442 -192.70295715]
[332.75625610 -180.24838257]
[339.38427734 -166.76568604]
[344.11459351 -152.50602722]
[346.85910034 -137.73506165]
[347.56665039 -122.72795868]
[346.22406006 -107.76429749]
[342.85638428 -93.12283325]
[337.52630615 -79.07633209]
[330.33316040 -65.88647461]
[321.41091919 -53.79898071]
[310.92584229 -43.03902435]
[299.07321167 -33.80706787]
[286.07388306 -26.27508736]
[272.16995239 -20.58340454]
[257.62054443 -16.83804893]
[242.69660950 -15.10879803]
[227.67622375 -15.42786407]
[212.83920288 -17.78930283]
[198.46192932 -22.14912415]
[184.81227112 -28.42610359]
[176.74922180 -15.77750206]
[168.68615723 -3.12889957]
[160.62310791 9.51970291]
[152.56004333 22.16830444]
[144.49699402 34.81690598]
[136.43394470 47.46551132]
[128.37088013 60.11411285]
[120.30783081 72.76271820]
[112.24477386 85.41131592]
[116.15152740 99.89362335]
[129.48194885 106.77111816]
[142.81236267 113.64861298]
[159.66076660 115.53749084]
[162.50979614 132.25035095]
[147.23878479 139.61460876]
[135.93487549 126.97903442]
[122.60445404 120.10153961]
[109.27403259 113.22404480]
[117.67533112 125.65055847]
[126.07663727 138.07707214]
[134.47793579 150.50358582]
[146.59373474 159.34707642]
[155.79467773 171.19369507]
[161.36451721 185.12126160]
[162.86965942 200.04554749]
[160.19293213 214.80479431]
[153.54270935 228.25003052]
[143.43667603 239.33462524]
[130.66156006 247.19569397]
[116.21182251 251.22126770]
[101.21233368 251.09799194]
[86.83071899 246.83544922]
[74.18653107 238.76547241]
[64.26406097 227.51628113]
[57.83572769 213.96354675]
[55.40195084 199.16230774]
[57.15218735 184.26475525]
[62.95018768 170.43063354]
[72.34442902 158.73699951]
[77.21929169 144.55123901]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 40]
[2 39]
[3 38]
[5 36]
[6 35]
[7 34]
[8 33]
[9 32]
[60 123]
[61 122]
[62 121]
[63 120]
[64 119]
[65 118]
[66 117]
[67 116]
[68 115]
[69 114]
[124 132]
[125 131]
[126 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
