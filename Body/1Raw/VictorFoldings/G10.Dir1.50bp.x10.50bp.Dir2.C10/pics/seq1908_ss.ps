%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCACUCCACCUUACUACCAGACAACCUUAGCCAAACCAUUUACCCAAAUAAAGUAUAGGCGAUxxxxxxxxxxAUCAUAGCCACCAUCACCCUCCUUAACCUCUACUUCUACCUACGCCUAAUCUACUCCACCUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[111.35822296 258.36560059]
[111.35822296 243.36560059]
[111.35822296 228.36560059]
[111.35822296 213.36560059]
[111.35822296 198.36560059]
[111.35822296 183.36560059]
[111.35822296 168.36560059]
[111.35822296 153.36560059]
[111.35822296 138.36560059]
[111.35822296 123.36560822]
[98.07564545 123.76358032]
[87.49476624 117.73773956]
[82.16381836 108.03889465]
[67.17057037 108.48905945]
[52.17732620 108.93921661]
[50.66579056 123.88479614]
[47.21633911 138.50520325]
[41.88799667 152.55026245]
[34.77193832 165.77964783]
[25.98992920 177.96699524]
[15.69223976 188.90374756]
[4.05507803 198.40277100]
[-8.72242928 206.30152893]
[-22.42164230 212.46485901]
[-36.80814743 216.78729248]
[-51.63577652 219.19487000]
[-66.65081024 219.64640808]
[-81.59631348 218.13415527]
[-96.21655273 214.68400574]
[-110.26136780 209.35499573]
[-123.49041748 202.23831177]
[-135.67733765 193.45571899]
[-146.61360168 183.15750122]
[-156.11207581 171.51989746]
[-164.01022339 158.74200439]
[-170.17289734 145.04251099]
[-174.49464417 130.65579224]
[-176.90151978 115.82804871]
[-177.35234070 100.81299591]
[-175.83937073 85.86756134]
[-172.38853455 71.24748230]
[-167.05885315 57.20293045]
[-159.94154358 43.97422028]
[-151.15837097 31.78771400]
[-140.85963440 20.85193825]
[-129.22157288 11.35402107]
[-116.44330597 3.45648336]
[-102.74350739 -2.70553827]
[-88.35659027 -7.02660322]
[-73.52873230 -9.43277264]
[-58.51366043 -9.88287354]
[-43.56829834 -8.36920357]
[-28.94838524 -4.91766453]
[-14.90408421 0.41268355]
[-1.67571175 7.53063154]
[10.51037693 16.31438255]
[21.44566154 26.61363220]
[30.94302368 38.25215149]
[38.83995438 51.03078461]
[45.00132370 64.73088074]
[49.32170486 79.11800385]
[51.72716522 93.94597626]
[66.72041321 93.49581146]
[81.71365356 93.04565430]
[100.51795197 77.23384094]
[124.67810822 91.87892914]
[135.44268799 81.43270111]
[146.20727539 70.98646545]
[156.97184753 60.54022980]
[167.73643494 50.09399796]
[178.50102234 39.64776230]
[169.31524658 27.76914024]
[161.51725769 14.93670940]
[155.20509338 1.31185508]
[150.45816040 -12.93407726]
[147.33613586 -27.62192917]
[145.87829590 -42.56698608]
[146.10296631 -57.58129501]
[148.00732422 -72.47604370]
[151.56742859 -87.06390381]
[156.73849487 -101.16142273]
[163.45549011 -114.59130859]
[171.63395691 -127.18466949]
[181.17103577 -138.78312683]
[191.94677734 -149.24081421]
[203.82566833 -158.42623901]
[216.65834045 -166.22384644]
[230.28338623 -172.53559875]
[244.52944946 -177.28210449]
[259.21740723 -180.40368652]
[274.16250610 -181.86108398]
[289.17681885 -181.63597107]
[304.07150269 -179.73115540]
[318.65924072 -176.17062378]
[332.75662231 -170.99913025]
[346.18630981 -164.28173828]
[358.77941895 -156.10289001]
[370.37759399 -146.56547546]
[380.83496094 -135.78941345]
[390.02001953 -123.91024017]
[397.81723022 -111.07733917]
[404.12860107 -97.45211029]
[408.87466431 -83.20589447]
[411.99581909 -68.51785278]
[413.45275879 -53.57271194]
[413.22720337 -38.55841446]
[411.32196045 -23.66378403]
[407.76098633 -9.07613564]
[402.58905029 5.02107573]
[395.87124634 18.45056152]
[387.69204712 31.04343224]
[378.15426636 42.64131927]
[367.37789917 53.09836960]
[355.49844360 62.28306961]
[342.66531372 70.07991791]
[329.03991699 76.39085388]
[314.79354858 81.13651276]
[300.10540771 84.25721741]
[285.16021729 85.71371460]
[270.14593506 85.48770142]
[255.25135803 83.58200073]
[240.66381836 80.02059174]
[226.56675720 74.84825897]
[213.13748169 68.13005066]
[200.54484558 59.95045853]
[188.94725037 50.41234589]
[178.18266296 60.85857773]
[167.41809082 71.30480957]
[156.65350342 81.75104523]
[145.88893127 92.19728088]
[135.12434387 102.64350891]
[146.39952087 92.75055695]
[160.43074036 87.44729614]
[175.43069458 87.40927887]
[189.48863220 92.64133453]
[200.81381226 102.47700500]
[207.96359253 115.66338348]
[210.02722168 130.52075195]
[206.74182129 145.15653992]
[198.52590942 157.70639038]
[186.42604065 166.57167053]
[171.98353577 170.62309265]
[157.03813171 169.34457397]
[143.49359131 162.89897156]
[133.07528687 152.10736084]
[127.11032104 138.34440613]
[126.35822296 123.36560822]
[126.35822296 138.36560059]
[126.35822296 153.36560059]
[126.35822296 168.36560059]
[126.35822296 183.36560059]
[126.35822296 198.36560059]
[126.35822296 213.36560059]
[126.35822296 228.36560059]
[126.35822296 243.36560059]
[126.35822296 258.36560059]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 156]
[2 155]
[3 154]
[4 153]
[5 152]
[6 151]
[7 150]
[8 149]
[9 148]
[10 147]
[13 64]
[14 63]
[15 62]
[66 131]
[67 130]
[68 129]
[69 128]
[70 127]
[71 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
