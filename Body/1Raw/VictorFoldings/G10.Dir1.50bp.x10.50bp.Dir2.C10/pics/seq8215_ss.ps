%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCCUAGGCCUACCCGCCGCAGUACUGAUCAUUCUAUUUCCCCCUCUAUUGAUCCCCACCUCxxxxxxxxxxCACAAUCCCCUAUCUAGGCCUUCUUACGAGCCAAAACCUGCCCCUACUCCUCCUAGACCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[7.62011290 256.36520386]
[-0.53655297 268.95364380]
[-1.54741013 284.74252319]
[-14.96158600 291.21624756]
[-23.11825180 303.80468750]
[-31.27491760 316.39312744]
[-32.28577423 332.18200684]
[-45.69995117 338.65573120]
[-53.85661697 351.24417114]
[-62.01328278 363.83261108]
[-70.16994476 376.42105103]
[-68.23793030 392.34735107]
[-79.58731079 403.68624878]
[-95.51181793 401.73956299]
[-103.79553223 388.00057983]
[-98.08389282 373.00866699]
[-82.75838470 368.26437378]
[-74.60172272 355.67593384]
[-66.44505310 343.08749390]
[-58.28839111 330.49905396]
[-57.86095047 315.61059570]
[-43.86335754 308.23645020]
[-35.70669174 295.64801025]
[-27.55002594 283.05957031]
[-27.12258720 268.17111206]
[-13.12499237 260.79696655]
[-4.96832657 248.20852661]
[-26.30424881 230.50422668]
[-44.69676971 209.75865173]
[-59.71726990 186.45524597]
[-71.01570892 161.13710022]
[-78.32878876 134.39419556]
[-81.48608398 106.84976959]
[-80.41400909 79.14572144]
[-75.13756561 51.92765808]
[-65.77970123 25.82987595]
[-79.20715332 19.14380074]
[-92.63459778 12.45772552]
[-106.06204987 5.77165031]
[-119.48950195 -0.91442490]
[-130.07426453 9.89381599]
[-143.48182678 16.90039635]
[-158.39868164 19.41888237]
[-173.36340332 17.20254135]
[-186.90991211 10.46850491]
[-197.71105957 -0.12349427]
[-204.70866394 -13.53575897]
[-207.21714783 -28.45429420]
[-204.99078369 -43.41753006]
[-198.24766541 -56.95952606]
[-187.64843750 -67.75357056]
[-174.23147583 -74.74217987]
[-159.31126404 -77.24066925]
[-144.34953308 -75.00428009]
[-130.81205750 -68.25209045]
[-120.02511597 -57.64562607]
[-113.04550171 -44.22399521]
[-110.55700684 -29.30211449]
[-112.80342102 -14.34187412]
[-99.37597656 -7.65579891]
[-85.94852448 -0.96972358]
[-72.52108002 5.71635199]
[-59.09362793 12.40242672]
[-53.22928238 2.50690413]
[-46.75027847 -6.99753666]
[-39.68260193 -16.07276917]
[-32.05460358 -24.68239021]
[-23.89688492 -32.79186249]
[-15.24216938 -40.36865616]
[-6.12517262 -47.38237762]
[3.41753292 -53.80488968]
[13.34766769 -59.61043167]
[23.62539864 -64.77571869]
[34.20949554 -69.28002167]
[45.05750275 -73.10528564]
[56.12590790 -76.23615265]
[67.37030792 -78.66007233]
[78.74559784 -80.36730957]
[90.20614624 -81.35103607]
[101.70598602 -81.60728455]
[113.19897461 -81.13504028]
[124.63902283 -79.93619537]
[135.98023987 -78.01555634]
[147.17710876 -75.38083649]
[158.18475342 -72.04258728]
[168.95898438 -68.01421356]
[179.45658875 -63.31186676]
[189.63548279 -57.95441818]
[199.45480347 -51.96335220]
[208.87516785 -45.36270142]
[217.85879517 -38.17894745]
[226.36964417 -30.44090462]
[234.37358093 -22.17961311]
[241.83848572 -13.42821312]
[248.73443604 -4.22180843]
[255.03373718 5.40266943]
[260.71115112 15.40661335]
[265.74389648 25.74989510]
[279.67462158 20.18795776]
[293.60531616 14.62601948]
[295.72586060 -0.58578014]
[305.18087769 -12.68943977]
[319.42697144 -18.42913628]
[334.63204956 -16.26091766]
[346.70602417 -6.76802731]
[352.40103149 7.49599743]
[350.18515015 22.69420433]
[340.65447998 34.73835373]
[326.37268066 40.38862610]
[311.18148804 38.12513351]
[299.16726685 28.55673599]
[285.23654175 34.11867142]
[271.30584717 39.68061066]
[274.59381104 49.98884964]
[277.26211548 60.47459030]
[279.30126953 71.10062408]
[280.70401001 81.82922363]
[281.46539307 92.62232208]
[281.58267212 103.44160461]
[281.05548096 114.24866486]
[279.88568115 125.00516510]
[278.07739258 135.67289734]
[275.63705444 146.21403503]
[272.57333374 156.59114075]
[268.89712524 166.76737976]
[264.62139893 176.70664978]
[259.76141357 186.37365723]
[254.33438110 195.73410034]
[248.35955811 204.75474548]
[241.85816956 213.40359497]
[234.85328674 221.64994812]
[227.36976624 229.46450806]
[219.43417358 236.81958008]
[211.07466125 243.68902588]
[202.32092285 250.04847717]
[193.20401001 255.87536621]
[183.75630188 261.14898682]
[174.01130676 265.85067749]
[164.00361633 269.96368408]
[153.76876831 273.47344971]
[143.34307861 276.36749268]
[132.76354980 278.63555908]
[122.06772614 280.26962280]
[111.29357910 281.26382446]
[100.47935486 281.61465454]
[89.66342163 281.32092285]
[78.88418579 280.38357544]
[68.17988586 278.80603027]
[57.58853149 276.59384155]
[47.14770889 273.75485229]
[36.89447021 270.29916382]
[26.86521530 266.23904419]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 27]
[2 26]
[4 24]
[5 23]
[6 22]
[8 20]
[9 19]
[10 18]
[11 17]
[36 63]
[37 62]
[38 61]
[39 60]
[40 59]
[98 113]
[99 112]
[100 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
