%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACUUUCUUCCCACAACACUUUCUCGGCCUAUCCGGAAUGCCCCGACGUUACUCGGACUAxxxxxxxxxxACAUUUUUUGUAGCCACAGGCUUCCACGGACUUCACGUCAUUAUUGGCUCAACUUUCCUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[80.25321960 444.58145142]
[80.25321960 429.58145142]
[80.25321960 414.58145142]
[80.25321960 399.58145142]
[80.25321960 384.58145142]
[80.25321960 369.58145142]
[80.25321960 354.58145142]
[80.25321960 339.58145142]
[80.25321960 324.58145142]
[80.25321960 309.58145142]
[65.18271637 306.46282959]
[51.07859421 300.29083252]
[38.55235291 291.33056641]
[28.14760017 279.96801758]
[20.31647491 266.69345093]
[15.39999294 252.08035278]
[13.61319733 236.76057434]
[15.03575611 221.39703369]
[19.60840988 206.65501404]
[27.13543701 193.17340088]
[37.29303741 181.53692627]
[49.64324570 172.25086975]
[63.65283585 165.71908569]
[78.71631622 162.22644043]
[78.40425873 147.22969055]
[78.09220886 132.23294067]
[67.54091644 121.57130432]
[52.54821777 121.10326385]
[46.45652771 123.93148041]
[40.72607803 123.30440521]
[36.94523621 120.29096985]
[21.98498726 119.19966125]
[7.02473927 118.10835266]
[-1.82739854 120.61663818]
[-8.23434067 116.83553314]
[-23.16864777 115.43323517]
[-38.10295486 114.03092957]
[-51.32545853 123.11635590]
[-66.63023376 118.30561066]
[-72.27677917 103.28907776]
[-63.93353653 89.58616638]
[-48.00073242 87.70857239]
[-36.70065308 99.09661865]
[-21.76634407 100.49892426]
[-6.83203697 101.90122986]
[8.11604977 103.14810181]
[23.07629776 104.23941040]
[38.03654861 105.33072662]
[53.01626205 106.11057281]
[68.00895691 106.57861328]
[68.97969055 93.96689606]
[74.56989288 83.08363342]
[83.62334442 75.48271942]
[94.52017975 72.10835266]
[105.46105957 73.18447113]
[112.36805725 59.86931610]
[119.27505493 46.55416107]
[126.18205261 33.23900604]
[133.08905029 19.92384911]
[139.43617249 6.33289814]
[137.60980225 -9.38253784]
[149.65148926 -18.14878082]
[143.88432312 -32.61865997]
[149.93948364 -46.57536697]
[163.76983643 -51.98431778]
[169.54611206 -65.82753754]
[175.32238770 -79.67075348]
[163.19856262 -70.83825684]
[149.33921814 -65.10076904]
[134.51994324 -62.77936935]
[119.57001495 -64.00395966]
[105.32604218 -68.70601654]
[92.58513641 -76.62240601]
[82.06027222 -87.31011963]
[74.34043884 -100.17107391]
[69.85762787 -114.48555756]
[68.86271667 -129.45252991]
[71.41137695 -144.23442078]
[77.36097717 -158.00402832]
[86.37857056 -169.99081421]
[97.95954132 -179.52397156]
[111.45581055 -186.07002258]
[126.11210632 -189.26266479]
[141.10826111 -188.92320251]
[155.60508728 -185.07066345]
[168.79133606 -177.92062378]
[179.92907715 -167.87321472]
[188.39505005 -155.49067688]
[193.71549988 -141.46594238]
[195.59268188 -126.58386993]
[193.92155457 -111.67725372]
[188.79597473 -97.58094025]
[200.49559021 -106.96810150]
[212.19522095 -116.35526276]
[223.89483643 -125.74242401]
[232.46510315 -140.37071228]
[248.89419556 -136.18489075]
[249.41999817 -119.23910522]
[233.28199768 -114.04280090]
[221.58238220 -104.65563965]
[209.88275146 -95.26847839]
[198.18313599 -85.88130951]
[189.16560364 -73.89447784]
[183.38932800 -60.05126190]
[177.61305237 -46.20804596]
[183.49705505 -32.57300949]
[177.83628845 -18.45173264]
[163.49472046 -12.37250805]
[165.73423767 2.35276842]
[153.27940369 12.10917091]
[154.27551270 14.79526520]
[154.23226929 18.04981804]
[152.92303467 21.46562958]
[150.27755737 24.55957413]
[146.40420532 26.83084869]
[139.49720764 40.14600372]
[132.59020996 53.46115875]
[125.68321228 66.77631378]
[118.77621460 80.09146881]
[127.19757843 91.73777771]
[128.74185181 106.57250214]
[122.46100616 120.69678497]
[109.53553009 130.12858582]
[93.08895874 131.92088318]
[93.40101624 146.91763306]
[93.71307373 161.91438293]
[108.11578369 164.54476929]
[121.71875000 169.94577026]
[133.99478149 177.90596008]
[144.46852112 188.11479187]
[152.73490906 200.17468262]
[158.47471619 213.61651611]
[161.46701050 227.91787720]
[161.59759521 242.52336121]
[158.86332703 256.86614990]
[153.37223816 270.38998413]
[145.33924866 282.57080078]
[135.07772827 292.93692017]
[122.98729706 301.08746338]
[109.53823090 306.70776367]
[95.25321960 309.58145142]
[95.25321960 324.58145142]
[95.25321960 339.58145142]
[95.25321960 354.58145142]
[95.25321960 369.58145142]
[95.25321960 384.58145142]
[95.25321960 399.58145142]
[95.25321960 414.58145142]
[95.25321960 429.58145142]
[95.25321960 444.58145142]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[24 126]
[25 125]
[26 124]
[27 50]
[28 49]
[31 48]
[32 47]
[33 46]
[35 45]
[36 44]
[37 43]
[55 119]
[56 118]
[57 117]
[58 116]
[59 115]
[60 110]
[62 108]
[65 105]
[66 104]
[67 103]
[92 102]
[93 101]
[94 100]
[95 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
