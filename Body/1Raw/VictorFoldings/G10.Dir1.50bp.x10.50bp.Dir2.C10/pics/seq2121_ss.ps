%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAGAAAUAACUUUGCAAGGAGAGCCAAAGCUAAGACCCCCGAAACCAGACGAGCUACCUxxxxxxxxxxGCACACUCAUCACAGCGCUAAGCUCGCACUGAUUUUUUACCUGAGUAGGCCUAGAAAUAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[124.84246826 341.02606201]
[124.84246826 326.02606201]
[124.84246826 311.02606201]
[124.84246826 296.02606201]
[124.84246826 281.02606201]
[124.84246826 266.02606201]
[124.84246826 251.02606201]
[124.84246826 236.02606201]
[124.84246826 221.02606201]
[124.84246826 206.02606201]
[111.80005646 196.48501587]
[104.65321350 183.07435608]
[104.09969330 168.85122681]
[109.43013763 156.69543457]
[118.81975555 148.72804260]
[113.33271790 134.76765442]
[107.84568787 120.80726624]
[102.00277710 134.62249756]
[87.02745819 135.48255920]
[79.64129639 122.42712402]
[88.09281921 110.03350830]
[73.38485718 112.97898865]
[58.67689133 115.92446899]
[46.66473770 126.22100830]
[32.66591644 121.13354492]
[17.95795631 124.07902527]
[8.55822277 138.79576111]
[-8.24011135 142.12744141]
[-21.99287605 132.49835205]
[-36.63637924 135.74917603]
[-48.35164642 147.22456360]
[-64.07238007 142.55651855]
[-67.62642670 126.54711914]
[-55.35769653 115.66546631]
[-39.88720322 121.10567474]
[-25.24370193 117.85485077]
[-19.88879013 106.09382629]
[-8.55854702 99.48323059]
[4.70356178 100.64272308]
[15.01247311 109.37106323]
[29.72043419 106.42558289]
[40.68057632 96.33972168]
[55.73141098 101.21650696]
[70.43936920 98.27102661]
[85.14733124 95.32554626]
[70.27112579 93.40241241]
[59.68484497 82.77552795]
[57.81867981 67.89206696]
[65.45359039 54.98051453]
[79.39449310 49.44414902]
[93.80733490 53.59984970]
[102.66059113 65.70851898]
[102.24886322 80.70406342]
[107.44428253 66.63254547]
[112.63969421 52.56102753]
[110.16116333 36.93516922]
[121.82776642 27.67559624]
[127.02318573 13.60407734]
[132.21859741 -0.46744201]
[128.66316223 -18.50459099]
[142.51927185 -29.22878838]
[147.42082214 -43.40534592]
[152.32237244 -57.58190536]
[157.22392273 -71.75846100]
[162.12547302 -85.93502045]
[167.02702332 -100.11157990]
[153.88133240 -107.41652679]
[142.20397949 -116.89336395]
[132.34980774 -128.25410461]
[124.61827850 -141.15350342]
[119.24434662 -155.19956970]
[116.39131165 -169.96545410]
[116.14588165 -185.00244141]
[118.51550293 -199.85356140]
[123.42818451 -214.06753540]
[130.73461914 -227.21237183]
[140.21278381 -238.88865662]
[151.57464600 -248.74154663]
[164.47492981 -256.47161865]
[178.52159119 -261.84396362]
[193.28779602 -264.69531250]
[208.32481384 -264.93905640]
[223.17567444 -262.56771851]
[237.38908386 -257.65344238]
[250.53309631 -250.34550476]
[262.20831299 -240.86602783]
[272.05990601 -229.50305176]
[279.78851318 -216.60189819]
[285.15924072 -202.55461121]
[288.00894165 -187.78808594]
[288.25097656 -172.75103760]
[285.87796021 -157.90045166]
[280.96206665 -143.68760681]
[273.65264893 -130.54440308]
[264.17184448 -118.87027740]
[252.80773926 -109.01997375]
[239.90571594 -101.29283142]
[225.85781860 -95.92367554]
[211.09095764 -93.07566071]
[196.05389404 -92.83535004]
[181.20358276 -95.21002960]
[176.30203247 -81.03347015]
[171.40048218 -66.85691071]
[166.49891663 -52.68035507]
[161.59736633 -38.50379562]
[156.69581604 -24.32723808]
[161.70736694 -13.27320099]
[157.68997192 -1.39550948]
[146.29011536 4.72797346]
[141.09471130 18.79949379]
[135.89929199 32.87101364]
[138.74943542 47.49038315]
[126.71121216 57.75644302]
[121.51580048 71.82796478]
[116.32038116 85.89948273]
[121.80607605 115.32023621]
[127.29311371 129.28062439]
[132.78013611 143.24101257]
[159.01771545 148.19725037]
[172.16529846 176.92492676]
[185.55158997 183.69303894]
[198.93786621 190.46115112]
[215.27285767 189.01202393]
[224.47259521 202.58761597]
[217.07318115 217.22253418]
[200.68649292 217.86161804]
[192.16975403 203.84742737]
[178.78346252 197.07931519]
[165.39718628 190.31120300]
[159.00849915 194.23991394]
[167.51126099 206.59722900]
[176.01403809 218.95452881]
[184.51679993 231.31184387]
[194.54914856 242.46315002]
[188.22209167 256.06344604]
[173.23011780 255.57307434]
[167.80529785 241.58856201]
[160.61390686 228.42481995]
[153.42253113 215.26107788]
[146.23115540 202.09733582]
[139.84246826 206.02606201]
[139.84246826 221.02606201]
[139.84246826 236.02606201]
[139.84246826 251.02606201]
[139.84246826 266.02606201]
[139.84246826 281.02606201]
[139.84246826 296.02606201]
[139.84246826 311.02606201]
[139.84246826 326.02606201]
[139.84246826 341.02606201]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[15 118]
[16 117]
[17 116]
[21 45]
[22 44]
[23 43]
[25 41]
[26 40]
[29 36]
[30 35]
[53 115]
[54 114]
[55 113]
[57 111]
[58 110]
[59 109]
[61 106]
[62 105]
[63 104]
[64 103]
[65 102]
[66 101]
[120 129]
[121 128]
[122 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
