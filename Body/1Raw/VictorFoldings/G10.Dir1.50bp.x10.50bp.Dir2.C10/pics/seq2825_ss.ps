%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAAUGCAAACAGUACCUAACAAACCCACAGGUCCUAAACUACCAAACCUGCAUUAAAAAUxxxxxxxxxxAGGAAUCUUCUUACUCAUCCGCUUCCACCCCCUAGCAGAAAAUAGCCCACUAAUCCAAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 249.51058960]
[92.50000000 234.51058960]
[92.50000000 219.51058960]
[92.50000000 204.51058960]
[92.50000000 189.51058960]
[92.50000000 174.51058960]
[92.50000000 159.51058960]
[92.50000000 144.51058960]
[92.50000000 129.51058960]
[92.50000000 114.51058197]
[81.94870758 103.84896088]
[66.94952393 103.69292450]
[51.95033264 103.53688812]
[36.95114517 103.38085175]
[21.95195580 103.22481537]
[6.95276785 103.06877899]
[-8.04642105 102.91274261]
[4.70199728 110.81703186]
[15.02378941 121.70098877]
[22.24152756 134.85029602]
[25.88150597 149.40194702]
[25.70483017 164.40090942]
[21.72309494 178.86277771]
[14.19762516 191.83842468]
[3.62232375 202.47624207]
[-9.30874348 210.07804871]
[-23.74690056 214.14494324]
[-38.74456024 214.41000366]
[-53.31740952 210.85585022]
[-66.50902557 203.71572876]
[-77.45362091 193.45825195]
[-85.43290710 180.75663757]
[-89.92318726 166.44450378]
[-90.62976837 151.46115112]
[-87.50627136 136.78996277]
[-80.75769043 123.39381409]
[-70.82694244 112.15191650]
[-58.36579895 103.80207062]
[-44.19208908 98.89229584]
[-29.23120117 97.74507141]
[-42.61748505 90.97695923]
[-56.00377274 84.20884705]
[-67.78218842 93.86227417]
[-82.47042847 97.88414764]
[-97.52366638 95.57764435]
[-110.33383942 87.34238434]
[-118.68149567 74.60517883]
[-121.12036896 59.57282257]
[-117.22789764 44.84975815]
[-107.67848206 32.98685074]
[-94.12661743 26.03942108]
[-78.92024231 25.21115112]
[-64.69395447 30.64554214]
[-53.91254425 41.40105820]
[-48.44395447 55.61423492]
[-49.23565674 70.82255554]
[-35.84937286 77.59067535]
[-22.46308708 84.35878754]
[-7.89038420 87.91355133]
[7.10880423 88.06958771]
[22.10799217 88.22562408]
[37.10718155 88.38166046]
[52.10636902 88.53769684]
[67.10556030 88.69373322]
[82.10474396 88.84976959]
[67.90161133 84.02577209]
[55.99081421 74.90805054]
[47.62647629 62.45663071]
[43.68930435 47.98255920]
[44.59385300 33.00985718]
[50.24488449 19.11504364]
[60.04737854 7.76114273]
[72.96920776 0.14363985]
[87.64979553 -2.93539572]
[102.54337311 -1.15176308]
[116.08175659 5.30673361]
[126.83944702 15.76006031]
[133.68374634 29.10755730]
[135.89398193 43.94382477]
[133.23744202 58.70671082]
[125.99383545 71.84178925]
[114.92512512 81.96651459]
[128.94183350 76.62500000]
[140.19015503 62.08350754]
[157.38171387 65.46738434]
[171.28427124 59.83543015]
[181.16969299 47.48274612]
[195.87088013 49.87533569]
[209.77343750 44.24337769]
[223.67599487 38.61141968]
[237.57855225 32.97946548]
[223.36087036 28.19848824]
[213.86972046 16.58306694]
[212.01780701 1.69782615]
[218.37344360 -11.88914394]
[230.98619080 -20.00817680]
[245.98535156 -20.16764259]
[258.76785278 -12.31860447]
[265.41094971 1.13016784]
[263.87591553 16.05141830]
[254.63320923 27.86647415]
[269.34118652 24.92099190]
[284.04913330 21.97550774]
[288.89108276 7.39980936]
[300.38284302 -2.79013610]
[315.43319702 -5.85328293]
[329.99365234 -0.96566087]
[340.14752197 10.55798531]
[343.16348267 25.61785126]
[338.23022461 40.16291046]
[326.67480469 50.28061295]
[311.60556030 53.24935150]
[297.07604980 48.27054596]
[286.99462891 36.68347168]
[272.28665161 39.62895203]
[257.57870483 42.57443619]
[243.21051025 46.88201904]
[229.30795288 52.51397705]
[215.40539551 58.14593124]
[201.50283813 63.77788925]
[192.61181641 75.72773743]
[176.91622925 73.73798370]
[163.01367188 79.36994171]
[157.98318481 90.41537476]
[146.39382935 95.20134735]
[134.28335571 90.64171600]
[120.26663208 95.98322296]
[135.12831116 98.01557922]
[149.80323792 94.90963745]
[164.42630005 98.25115204]
[176.29568481 107.42272186]
[183.21832275 120.72975922]
[183.91514587 135.71356201]
[178.25740051 149.60563660]
[167.29045105 159.83921814]
[153.04061890 164.52346802]
[138.14077759 162.79289246]
[125.34392548 154.96726990]
[117.01448059 142.49247742]
[114.69138336 127.67432404]
[107.50000000 114.51058197]
[107.50000000 129.51058960]
[107.50000000 144.51058960]
[107.50000000 159.51058960]
[107.50000000 174.51058960]
[107.50000000 189.51058960]
[107.50000000 204.51058960]
[107.50000000 219.51058960]
[107.50000000 234.51058960]
[107.50000000 249.51058960]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 65]
[12 64]
[13 63]
[14 62]
[15 61]
[16 60]
[17 59]
[40 58]
[41 57]
[42 56]
[82 127]
[83 126]
[85 123]
[86 122]
[88 120]
[89 119]
[90 118]
[91 117]
[101 116]
[102 115]
[103 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
