%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCUCCUACUCCUGCUCGCAUCUGCUAUAGUGGAGGCCGGAGCAGGAACAGGUUGAACAGUxxxxxxxxxxCUACUCAUCGCACUAAUUUACACUCACAACACCCUAGGCUCACUAAACAUUCUACUACUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[110.98442078 259.16433716]
[110.98442078 244.16433716]
[110.98442078 229.16433716]
[110.98442078 214.16433716]
[110.98442078 199.16433716]
[110.98442078 184.16433716]
[110.98442078 169.16433716]
[110.98442078 154.16433716]
[110.98442078 139.16433716]
[110.98442078 124.16432953]
[100.64758301 124.89867401]
[91.48440552 121.65632629]
[84.85805511 115.45118713]
[81.54173279 107.69242859]
[66.54254150 107.84846497]
[51.54335403 108.00450134]
[40.52415848 119.01427460]
[25.31062698 118.95884705]
[14.88239670 108.38588715]
[-0.11679151 108.54192352]
[-15.11598015 108.69795990]
[-30.11516762 108.85399628]
[-45.11435699 109.01003265]
[-60.11354446 109.16606903]
[-75.11273193 109.32210541]
[-90.11192322 109.47814178]
[-105.10461426 109.94618225]
[-120.08433533 110.72602844]
[-133.46357727 119.17033386]
[-146.57589722 112.10517883]
[-161.55561829 112.88502502]
[-176.53532410 113.66487122]
[-191.51504517 114.44471741]
[-206.49476624 115.22456360]
[-219.94931030 124.60044098]
[-234.67941284 117.39237976]
[-235.53199768 101.01541138]
[-221.63000488 92.31675720]
[-207.27459717 100.24485016]
[-192.29489136 99.46500397]
[-177.31517029 98.68515778]
[-162.33546448 97.90531158]
[-147.35574341 97.12546539]
[-135.04794312 88.73694611]
[-120.86417389 95.74631500]
[-105.88446045 94.96646881]
[-102.04174805 92.03234100]
[-96.29949188 91.52462006]
[-90.26795959 94.47895050]
[-75.26876831 94.32291412]
[-60.26958084 94.16687775]
[-45.27039337 94.01084137]
[-30.27120399 93.85480499]
[-15.27201653 93.69876862]
[-0.27282807 93.54273224]
[14.72636032 93.38669586]
[24.93237686 82.59907532]
[40.14146423 82.22715759]
[51.38731766 93.00531006]
[66.38650513 92.84927368]
[81.38569641 92.69323730]
[100.96454620 76.74959564]
[125.42681122 92.38096619]
[136.72581482 82.51524353]
[127.98931885 70.30749512]
[120.47183228 57.31353378]
[114.24356079 43.65468597]
[109.36264801 29.45848274]
[105.87467194 14.85747242]
[103.81219482 -0.01201705]
[103.19447327 -15.01114845]
[104.02728271 -29.99987602]
[106.30284119 -44.83824921]
[109.99990082 -59.38772583]
[115.08394623 -73.51245880]
[121.50750732 -87.08055878]
[129.21061707 -99.96534729]
[138.12132263 -112.04651642]
[148.15644836 -123.21126556]
[159.22230530 -133.35536194]
[171.21554565 -142.38406372]
[184.02421570 -150.21308899]
[197.52870178 -156.76934814]
[211.60290527 -161.99160767]
[226.11544800 -165.83110046]
[240.93080139 -168.25199890]
[255.91064453 -169.23168945]
[270.91510010 -168.76103210]
[285.80410767 -166.84440613]
[300.43859863 -163.49972534]
[314.68197632 -158.75819397]
[328.40121460 -152.66410828]
[341.46823120 -145.27435303]
[353.76104736 -136.65794373]
[365.16482544 -126.89530945]
[375.57315063 -116.07761383]
[384.88879395 -104.30586243]
[393.02481079 -91.68996429]
[399.90521240 -78.34771729]
[405.46575928 -64.40369415]
[409.65454102 -49.98809433]
[412.43246460 -35.23551178]
[413.77355957 -20.28368759]
[413.66531372 -5.27223253]
[412.10873413 9.65869522]
[409.11837769 24.36968613]
[404.72213745 38.72338486]
[398.96109009 52.58576584]
[391.88897705 65.82740784]
[383.57189941 78.32466125]
[374.08746338 89.96085358]
[363.52423096 100.62732697]
[351.98083496 110.22448730]
[339.56506348 118.66274261]
[326.39282227 125.86328888]
[312.58712769 131.75889587]
[298.27685547 136.29452515]
[283.59564209 139.42782593]
[268.68057251 141.12954712]
[253.67088318 141.38378906]
[238.70672607 140.18817139]
[223.92781067 137.55387878]
[209.47215271 133.50549316]
[195.47471619 128.08081055]
[182.06617737 121.33050537]
[169.37174988 113.31758118]
[157.50994873 104.11685944]
[146.59153748 93.81424713]
[135.29254150 103.67996979]
[148.00822449 95.72312927]
[162.94154358 94.31027985]
[176.92384338 99.74120331]
[186.98832703 110.86353302]
[190.99945068 125.31728363]
[188.10609436 140.03558350]
[178.92221069 151.89544678]
[165.39646912 158.38037109]
[150.39881897 158.11436462]
[137.11155701 151.15386963]
[128.35401917 138.97578430]
[125.98442078 124.16432953]
[125.98442078 139.16433716]
[125.98442078 154.16433716]
[125.98442078 169.16433716]
[125.98442078 184.16433716]
[125.98442078 199.16433716]
[125.98442078 214.16433716]
[125.98442078 229.16433716]
[125.98442078 244.16433716]
[125.98442078 259.16433716]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[14 61]
[15 60]
[16 59]
[19 56]
[20 55]
[21 54]
[22 53]
[23 52]
[24 51]
[25 50]
[26 49]
[27 46]
[28 45]
[30 43]
[31 42]
[32 41]
[33 40]
[34 39]
[63 129]
[64 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
