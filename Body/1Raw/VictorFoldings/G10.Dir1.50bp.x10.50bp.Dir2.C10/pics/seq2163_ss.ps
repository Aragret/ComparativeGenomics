%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUACCUAAGAACAGCUAAAAGAGCACACCCGUCUAUGUAGCAAAAUAGUGGGAAGAUUUAUxxxxxxxxxxACAGCAAGACGAGAAGACCCUAUGGAGCUUUAAUUUAUUAAUGCAAACAGUACCUAACAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[96.23464966 269.61917114]
[96.23464966 254.61918640]
[96.23464966 239.61918640]
[96.23464966 224.61918640]
[96.23464966 209.61918640]
[96.23464966 194.61918640]
[96.23464966 179.61918640]
[96.23464966 164.61918640]
[96.23464966 149.61918640]
[96.23464966 134.61918640]
[78.26283264 121.96607971]
[73.20701599 103.19847107]
[80.37442780 87.88613129]
[70.86606598 76.28479004]
[55.38278961 74.58013153]
[45.90522766 62.67927170]
[47.62577438 47.92884064]
[38.11741638 36.32749939]
[22.30081367 42.73785782]
[5.30904579 43.93300629]
[-11.18604755 39.81554031]
[-25.56774330 30.80978584]
[-36.43289566 17.81815147]
[-50.21527481 23.73811531]
[-63.99765778 29.65807724]
[-71.25535583 43.96560669]
[-86.99504852 47.07067490]
[-99.14260101 36.59133530]
[-98.37944794 20.56644249]
[-85.29100800 11.28892422]
[-69.91761780 15.87569618]
[-56.13523865 9.95573330]
[-42.35285568 4.03577042]
[-44.16960526 -7.13579416]
[-43.61624527 -18.44058228]
[-40.71712112 -29.38130760]
[-35.59976196 -39.47670746]
[-28.48927498 -48.28269196]
[-19.69843864 -55.41189957]
[-26.04556847 -69.00285339]
[-32.39269638 -82.59380341]
[-38.73982620 -96.18475342]
[-45.08695602 -109.77570343]
[-51.59569931 -116.27863312]
[-51.42146683 -123.71606445]
[-57.48447800 -137.43611145]
[-63.54749298 -151.15617371]
[-78.11154175 -147.42276001]
[-93.09146881 -146.13758850]
[-108.07860565 -147.33570862]
[-122.66410065 -150.98445129]
[-136.45004272 -156.98425293]
[-149.06034851 -165.17143250]
[-160.15100098 -175.32266235]
[-169.41941833 -187.16099548]
[-176.61277771 -200.36347961]
[-181.53482056 -214.56993103]
[-184.05128479 -229.39279175]
[-184.09352112 -244.42768860]
[-181.66035461 -259.26446533]
[-176.81817627 -273.49832153]
[-169.69909668 -286.74099731]
[-160.49731445 -298.63122559]
[-149.46385193 -308.84457397]
[-136.89973450 -317.10247803]
[-123.14771271 -323.17962646]
[-108.58294678 -326.91021729]
[-93.60277557 -328.19250488]
[-78.61586761 -326.99148560]
[-64.03107452 -323.33993530]
[-50.24628830 -317.33749390]
[-37.63756180 -309.14785767]
[-26.54887009 -298.99450684]
[-17.28272629 -287.15438843]
[-10.09191227 -273.95053101]
[-5.17260027 -259.74313354]
[-2.65899348 -244.91976929]
[-2.61966419 -229.88487244]
[-5.05568552 -215.04856873]
[-9.90060139 -200.81562805]
[-17.02223778 -187.57432556]
[-26.22631264 -175.68589783]
[-37.26173019 -165.47465515]
[-49.82743835 -157.21917725]
[-43.76442719 -143.49913025]
[-37.70141220 -129.77906799]
[-31.49600601 -116.12283325]
[-25.14887619 -102.53188324]
[-18.80174637 -88.94093323]
[-12.45461750 -75.34998322]
[-6.10748768 -61.75902939]
[9.33261585 -64.18557739]
[24.83737373 -62.08578491]
[39.10628891 -55.62614059]
[50.93976593 -45.33922195]
[59.33995056 -32.07980347]
[63.59487915 -16.95383835]
[63.33881378 -1.22621226]
[58.58366013 13.78502941]
[49.71875763 26.81913948]
[59.22711563 38.42048264]
[74.02822876 39.62990570]
[83.83631897 51.25986481]
[82.46740723 66.77643585]
[91.97576904 78.37777710]
[116.35124207 76.11802673]
[134.81958008 99.48757935]
[149.75389099 100.88987732]
[164.21696472 94.47660065]
[176.16516113 103.36985016]
[191.09945679 104.77215576]
[206.03376770 106.17445374]
[220.96807861 107.57675934]
[235.64083862 100.25269318]
[249.16896057 109.52211761]
[247.63584900 125.84944916]
[232.61865234 132.43852234]
[219.56578064 122.51107025]
[204.63146973 121.10876465]
[189.69715881 119.70645905]
[174.76284790 118.30415344]
[161.36798096 124.81774139]
[148.35157776 115.82418823]
[133.41728210 114.42188263]
[127.87162018 119.47120667]
[140.30540466 127.86173248]
[152.73919678 136.25225830]
[165.17298889 144.64279175]
[179.75735474 148.14939880]
[190.44500732 158.67431641]
[194.17494202 173.20317078]
[189.87890625 187.57481384]
[178.78729248 197.67312622]
[164.07679749 200.60592651]
[149.96057129 195.53321838]
[140.48158264 183.90786743]
[138.35444641 169.06108093]
[131.16307068 155.89733887]
[123.97168732 142.73359680]
[116.78030396 129.56985474]
[111.23464966 134.61918640]
[111.23464966 149.61918640]
[111.23464966 164.61918640]
[111.23464966 179.61918640]
[111.23464966 194.61918640]
[111.23464966 209.61918640]
[111.23464966 224.61918640]
[111.23464966 239.61918640]
[111.23464966 254.61918640]
[111.23464966 269.61917114]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[13 105]
[14 104]
[17 101]
[18 100]
[23 33]
[24 32]
[25 31]
[39 91]
[40 90]
[41 89]
[42 88]
[43 87]
[45 86]
[46 85]
[47 84]
[107 124]
[108 123]
[110 121]
[111 120]
[112 119]
[113 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
