%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAUAUUGUGCCUAUUGCCAUACUAGUCUUUGCCGCCUGCGAAGCAGCGGUGGGCCUAGCCxxxxxxxxxxCACCCAUCAACAACCGCUAUGUAUUUCGUACAUUACUGCCAGCCACCAUGAAUAUUGUACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[80.10800171 543.29406738]
[80.10800171 528.29406738]
[80.10800171 513.29406738]
[80.10800171 498.29406738]
[80.10800171 483.29406738]
[80.10800171 468.29406738]
[80.10800171 453.29406738]
[80.10800171 438.29406738]
[80.10800171 423.29406738]
[80.10800171 408.29406738]
[65.02948761 405.37002563]
[50.80113602 399.57281494]
[37.96493149 391.12130737]
[27.01021576 380.33554077]
[18.35502243 367.62457275]
[12.33012486 353.47097778]
[9.16639328 338.41250610]
[8.98595333 323.02172852]
[11.79746819 307.88412476]
[17.49574471 293.57592773]
[25.86566162 280.64221191]
[36.59030151 269.57592773]
[49.26293564 260.79943848]
[63.40246201 254.64804077]
[78.47166443 251.35746765]
[78.15960693 236.36070251]
[64.87126923 231.74723816]
[53.93925095 222.84794617]
[46.69522858 210.72047424]
[44.03064728 196.81733704]
[46.28704834 182.81181335]
[53.21244431 170.39672852]
[63.98928070 161.07969666]
[77.33090973 156.00015259]
[77.33090973 141.00015259]
[77.33090973 126.00014496]
[68.43856049 113.92015839]
[54.11596298 109.46334076]
[39.79336548 105.00653076]
[25.47076797 100.54971313]
[11.14817142 96.09289551]
[-3.17442608 91.63607788]
[-17.98842430 97.79441071]
[-31.96947289 89.92613220]
[-34.39250946 74.06711578]
[-23.39878654 62.38303757]
[-7.42174816 63.83692932]
[1.28238964 77.31348419]
[15.60498714 81.77030182]
[29.92758369 86.22711182]
[44.25018311 90.68392944]
[58.57278061 95.14074707]
[72.89537811 99.59756470]
[79.37277985 80.78818512]
[97.48969269 70.83901215]
[98.11367035 55.85200119]
[98.73764801 40.86498260]
[99.36162567 25.87796783]
[99.98560333 10.89095116]
[99.51755524 -4.10174465]
[97.95997620 -19.02065659]
[96.40239716 -33.93956757]
[94.84481812 -48.85848236]
[80.01280975 -51.77449417]
[66.70005035 -58.93423080]
[56.09029770 -69.70105743]
[49.12695694 -83.11758423]
[46.42921066 -97.99083710]
[48.23693466 -112.99828339]
[54.38939285 -126.80548096]
[64.33950806 -138.18469238]
[77.20252991 -146.12409973]
[91.83467865 -149.91773987]
[106.93487549 -149.22825623]
[121.16043091 -144.11697388]
[133.24639893 -135.03840637]
[142.11811829 -122.79977417]
[146.98672485 -108.48935699]
[147.41929626 -93.37961578]
[143.37736511 -78.81409454]
[135.22035217 -66.08796692]
[123.67356110 -56.33281326]
[109.76372528 -50.41606140]
[111.32130432 -35.49715042]
[112.87889099 -20.57823753]
[114.43647003 -5.65932560]
[124.18857574 -17.05653954]
[138.95535278 -19.69132423]
[152.04731750 -12.37009430]
[157.53369141 1.59055889]
[152.92906189 15.86632442]
[140.31939697 23.99013901]
[125.41699219 22.28183746]
[114.97261810 11.51492882]
[114.34864044 26.50194550]
[113.72466278 41.48896027]
[113.10068512 56.47597885]
[112.47670746 71.46298981]
[124.36908722 80.60472870]
[138.69168091 76.14791107]
[153.01428223 71.69109344]
[167.33688354 67.23428345]
[181.65946960 62.77746582]
[190.36361694 49.30091095]
[206.34065247 47.84701920]
[217.33438110 59.53109360]
[214.91133118 75.39011383]
[200.93028259 83.25839233]
[186.11628723 77.10005951]
[171.79370117 81.55687714]
[157.47109985 86.01369476]
[143.14849854 90.47051239]
[128.82589722 94.92732239]
[118.77853394 121.02243042]
[92.33090973 126.00014496]
[92.33090973 141.00015259]
[92.33090973 156.00015259]
[107.19916534 162.03929138]
[118.59358978 173.28521729]
[124.79739380 188.00209045]
[124.89173126 203.93440247]
[118.89164734 218.65251160]
[107.73936462 229.92321777]
[93.15635681 236.04864502]
[93.46841431 251.04541016]
[107.92852783 253.50605774]
[121.68156433 258.59350586]
[134.25489807 266.13131714]
[145.21672058 275.85885620]
[154.19090271 287.44024658]
[160.86991882 300.47613525]
[165.02531433 314.51736450]
[166.51560974 329.08035278]
[165.29103088 343.66397095]
[161.39523315 357.76654053]
[154.96372986 370.90332031]
[146.21916199 382.62298584]
[135.46360779 392.52325439]
[123.06813049 400.26464844]
[109.46001434 405.58209229]
[95.10800171 408.29406738]
[95.10800171 423.29406738]
[95.10800171 438.29406738]
[95.10800171 453.29406738]
[95.10800171 468.29406738]
[95.10800171 483.29406738]
[95.10800171 498.29406738]
[95.10800171 513.29406738]
[95.10800171 528.29406738]
[95.10800171 543.29406738]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[25 125]
[26 124]
[34 117]
[35 116]
[36 115]
[37 53]
[38 52]
[39 51]
[40 50]
[41 49]
[42 48]
[55 98]
[56 97]
[57 96]
[58 95]
[59 94]
[60 86]
[61 85]
[62 84]
[63 83]
[99 113]
[100 112]
[101 111]
[102 110]
[103 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
