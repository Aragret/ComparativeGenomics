%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCUCUAAAUCCCCUUGUAAAUUUAACUGUUAGUCCAAAGAGGAACAGCUCUUUGGACACxxxxxxxxxxUAUCACUCUCCUACUUACAGGACUCAACAUACUAGUCACAGCCCUAUACUCCCUCUACAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[129.31329346 272.55187988]
[128.37767029 257.58108521]
[127.44203949 242.61030579]
[126.50640869 227.63951111]
[125.57078552 212.66871643]
[124.63515472 197.69792175]
[123.69952393 182.72712708]
[120.29654694 168.11824036]
[114.52027130 154.27502441]
[108.74400330 140.43180847]
[102.96772766 126.58858490]
[98.22326660 126.69464111]
[93.53470612 125.96074677]
[89.04957581 124.41001129]
[84.90900421 122.09122467]
[81.24325562 119.07733917]
[68.15010071 126.39644623]
[55.05694580 133.71556091]
[41.96379089 141.03465271]
[28.87063789 148.35375977]
[28.73784637 163.71208191]
[20.92986488 176.93823242]
[7.54699802 184.47444153]
[-7.81082869 184.29350281]
[-21.01243782 176.44410706]
[-28.50666046 163.03768921]
[-28.27759171 147.68049622]
[-20.38684654 134.50355530]
[-6.95699883 127.05139923]
[8.39939117 127.32860565]
[21.55153275 135.26060486]
[34.64468765 127.94150543]
[47.73784256 120.62239838]
[60.83099747 113.30329132]
[73.92414856 105.98418427]
[76.78820801 82.02721405]
[99.12214661 68.05261230]
[94.81455994 53.68442917]
[90.50697327 39.31624603]
[86.19939423 24.94806099]
[74.82496643 13.95110416]
[78.58144379 -0.46201959]
[74.27385712 -14.83020401]
[69.96627045 -29.19838715]
[61.97635651 -41.89331818]
[50.88504410 -51.99196625]
[39.79372787 -62.09061813]
[28.70241165 -72.18926239]
[17.61109543 -82.28791809]
[6.51978064 -92.38656616]
[-4.57153463 -102.48521423]
[-15.66285038 -112.58386230]
[-31.43611145 -111.59403992]
[-43.23397827 -122.11002350]
[-44.05698013 -137.89286804]
[-33.41684723 -149.57890320]
[-17.62618256 -150.23498535]
[-6.05330658 -139.47189331]
[-5.56420040 -123.67517853]
[5.52711487 -113.57653046]
[16.61843109 -103.47788239]
[27.70974541 -93.37923431]
[38.80105972 -83.28057861]
[49.89237595 -73.18193054]
[60.98369217 -63.08328247]
[72.07500458 -52.98463440]
[67.89675140 -67.39096069]
[66.96557617 -82.36203003]
[69.32641602 -97.17507935]
[74.86531067 -111.11496735]
[83.31484985 -123.50872803]
[94.26711273 -133.75801086]
[107.19335938 -141.36802673]
[121.46953583 -145.97135925]
[136.40643311 -147.34577942]
[151.28294373 -145.42494202]
[165.38085938 -140.30158997]
[178.01956177 -132.22303772]
[188.58891296 -121.57930756]
[196.57862854 -108.88425446]
[201.60299683 -94.75075531]
[203.41946411 -79.86114502]
[201.94032288 -64.93425751]
[197.23698425 -50.69070816]
[189.53651428 -37.81814957]
[179.21067810 -26.93802834]
[166.75796509 -18.57561111]
[152.77957153 -13.13461208]
[137.95033264 -10.87770844]
[122.98616028 -11.91385651]
[108.60948944 -16.19303513]
[95.51438904 -23.50865364]
[84.33445740 -33.50597382]
[88.64204407 -19.13778877]
[92.94963074 -4.76960421]
[104.01594543 5.19964314]
[100.56757355 20.64047623]
[104.87516022 35.00865936]
[109.18274689 49.37684250]
[113.49032593 63.74502945]
[126.26768494 71.60245514]
[141.03373718 68.96359253]
[155.79978943 66.32472229]
[170.56585693 63.68585968]
[176.39816284 49.40343475]
[189.03938293 40.56019211]
[204.45576477 39.97797775]
[217.72796631 47.84257889]
[224.62091064 61.64442444]
[222.93505859 76.97940063]
[213.20837402 88.95417023]
[198.54460144 93.74762726]
[183.62289429 89.83019257]
[173.20471191 78.45191956]
[158.43865967 81.09078217]
[143.67260742 83.72964478]
[128.90655518 86.36850739]
[130.48054504 96.70613098]
[128.61430359 106.55974579]
[123.79436493 114.86334229]
[116.81095123 120.81231689]
[122.58721924 134.65553284]
[128.36349487 148.49874878]
[134.13977051 162.34196472]
[136.69892883 147.56188965]
[144.07528687 134.50090027]
[155.41117859 124.67758942]
[169.38861084 119.23410797]
[184.38241577 118.80335999]
[198.64930725 123.43543243]
[210.53045654 132.59175110]
[218.64447021 145.20773315]
[222.04792786 159.81651306]
[220.34510803 174.71954346]
[213.73402405 188.18406677]
[202.98330688 198.64457703]
[189.34295654 204.88482666]
[174.39891052 206.17929077]
[159.88871765 202.37742615]
[147.49945068 193.92131042]
[138.67031860 181.79150391]
[139.60594177 196.76229858]
[140.54158020 211.73309326]
[141.47720337 226.70387268]
[142.41282654 241.67466736]
[143.34846497 256.64547729]
[144.28408813 271.61624146]
[153.79942322 284.97253418]
[146.74497986 299.77682495]
[130.37776184 300.79974365]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 147]
[2 146]
[3 145]
[4 144]
[5 143]
[6 142]
[7 141]
[8 124]
[9 123]
[10 122]
[11 121]
[16 35]
[17 34]
[18 33]
[19 32]
[20 31]
[37 100]
[38 99]
[39 98]
[40 97]
[42 95]
[43 94]
[44 93]
[45 66]
[46 65]
[47 64]
[48 63]
[49 62]
[50 61]
[51 60]
[52 59]
[101 117]
[102 116]
[103 115]
[104 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
