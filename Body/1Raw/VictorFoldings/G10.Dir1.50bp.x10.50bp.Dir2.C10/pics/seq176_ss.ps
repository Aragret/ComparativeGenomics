%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGGACAUAAUAAUAACAAUUGAAUGUCUGCACAGCCACUUUCCACACAGACAUCAUAACAAxxxxxxxxxxCUUAUCACAACACAAGAACACCUCUGAUUACUCCUGCCAUCAUGACCCUUGGCCAUAAUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[170.86312866 379.41183472]
[170.86312866 364.41183472]
[170.86312866 349.41183472]
[170.86312866 334.41183472]
[170.86312866 319.41183472]
[170.86312866 304.41183472]
[170.86312866 289.41183472]
[170.86312866 274.41183472]
[170.86312866 259.41183472]
[170.86312866 244.41183472]
[166.85539246 229.95713806]
[159.13130188 217.09873962]
[151.40721130 204.24034119]
[139.71420288 200.98751831]
[133.18531799 190.28273010]
[135.80749512 177.61079407]
[128.35258484 164.59448242]
[120.89768219 151.57817078]
[113.44277191 138.56185913]
[101.87387848 140.79478455]
[90.14900208 139.63185120]
[79.24414062 135.16987610]
[70.06704712 127.78028107]
[63.38163757 118.07819366]
[59.74442291 106.87123871]
[59.45817184 95.09230804]
[62.54670715 83.72190094]
[68.75294495 73.70652771]
[59.24458313 62.10518265]
[49.73622513 50.50384140]
[28.70848274 47.08158112]
[20.07002640 28.25588799]
[6.16747141 22.62393188]
[-7.73508501 16.99197578]
[-21.63764000 11.36001873]
[-35.54019547 5.72806168]
[-49.44275284 0.09610508]
[-63.34531021 -5.53585148]
[-73.26338196 5.90576315]
[-86.36040497 13.50488949]
[-101.21571350 16.43723106]
[-116.21790314 14.38470840]
[-129.73966980 7.56996489]
[-140.31425476 -3.26778746]
[-146.79460144 -16.95294952]
[-148.47779846 -32.00106049]
[-145.18124390 -46.77980804]
[-137.26252747 -59.68611145]
[-125.58060455 -69.31998444]
[-111.40265656 -74.63642120]
[-96.26659393 -75.05873108]
[-81.81426239 -70.54110718]
[-69.61334991 -61.57358932]
[-60.98731232 -49.12890625]
[-56.87184143 -34.55695724]
[-57.71335220 -19.43840790]
[-43.81079483 -13.80645084]
[-29.90823936 -8.17449379]
[-16.00568390 -2.54253745]
[-2.10312819 3.08941913]
[11.79942799 8.72137547]
[25.70198441 14.35333252]
[29.26672554 11.20470715]
[33.43147278 8.90773201]
[32.80749512 -6.07928371]
[32.18351746 -21.06629944]
[31.55954170 -36.05331421]
[17.27388191 -41.24835205]
[6.06708574 -51.51850891]
[-0.35189342 -65.29766846]
[-1.00420785 -80.48459625]
[4.20961571 -94.76341248]
[14.49450779 -105.95668793]
[28.28209496 -112.35753632]
[43.46987152 -112.98987579]
[57.74181366 -107.75727081]
[68.92155457 -97.45766449]
[75.30426025 -83.66166687]
[75.91661072 -68.47306824]
[70.66524506 -54.20802307]
[60.35093689 -43.04184341]
[46.54655838 -36.67729187]
[47.17053604 -21.69027710]
[47.79450989 -6.70326090]
[48.41848755 8.28375530]
[59.31284714 15.45625591]
[64.29508209 27.78011322]
[61.33756638 40.99548340]
[70.84592438 52.59682465]
[80.35428619 64.19816589]
[90.50923157 60.28034592]
[101.33839417 59.18414307]
[112.07247925 60.98743057]
[121.94895172 65.56210327]
[130.26620483 72.58318329]
[143.04356384 64.72575378]
[155.82092285 56.86832809]
[160.92544556 41.65900803]
[176.04789734 36.30263138]
[189.58764648 44.90814972]
[191.15814209 60.87414932]
[179.55464172 71.95288086]
[163.67834473 69.64568329]
[150.90098572 77.50311279]
[138.12364197 85.36053467]
[139.57165527 110.09009552]
[126.45907593 131.10694885]
[133.91398621 144.12326050]
[141.36889648 157.13957214]
[148.82380676 170.15588379]
[164.93670654 179.00770569]
[164.26562500 196.51625061]
[171.98970032 209.37466431]
[179.71379089 222.23306274]
[179.84863281 207.23367310]
[183.25593567 192.62577820]
[189.77124023 179.11463928]
[199.07998657 167.35252380]
[210.73275757 157.90728760]
[224.16702271 151.23489380]
[238.73417664 147.65748596]
[253.73098755 147.34777832]
[268.43341064 150.32070923]
[282.13171387 156.43275452]
[294.16448975 165.38883972]
[303.95092773 176.75660706]
[311.01849365 189.98722839]
[315.02600098 204.44198608]
[315.77999878 219.42301941]
[313.24407959 234.20710754]
[307.54064941 248.08049011]
[298.94506836 260.37341309]
[287.87231445 270.49240112]
[274.85693359 277.94894409]
[260.52728271 282.38305664]
[245.57516479 283.58065796]
[230.72242737 281.48397827]
[216.68612671 276.19415283]
[204.14387512 267.96664429]
[193.70120239 257.19860840]
[185.86312866 244.41183472]
[185.86312866 259.41183472]
[185.86312866 274.41183472]
[185.86312866 289.41183472]
[185.86312866 304.41183472]
[185.86312866 319.41183472]
[185.86312866 334.41183472]
[185.86312866 349.41183472]
[185.86312866 364.41183472]
[185.86312866 379.41183472]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 114]
[12 113]
[13 112]
[16 110]
[17 109]
[18 108]
[19 107]
[28 90]
[29 89]
[30 88]
[32 62]
[33 61]
[34 60]
[35 59]
[36 58]
[37 57]
[38 56]
[64 85]
[65 84]
[66 83]
[67 82]
[95 105]
[96 104]
[97 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
