%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUAGAAAUCGCUGUCGCCUUAAUCCAAGCCUACGUUUUCACACUUCUAGUAAGCCUCUAxxxxxxxxxxCCCCAAUUAGGAGGGCACUGGCCCCCAACAGGCAUCACCCCGCUAAAUCCCCUAGAAGUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[145.72956848 306.78686523]
[145.41751099 291.79013062]
[145.10545349 276.79336548]
[144.79339600 261.79660034]
[144.48133850 246.79985046]
[144.16928101 231.80310059]
[143.85722351 216.80635071]
[143.54516602 201.80960083]
[143.23310852 186.81283569]
[138.77630615 172.49024963]
[130.52401733 159.96427917]
[122.27172089 147.43832397]
[114.01943207 134.91235352]
[85.87429047 134.86949158]
[65.63472748 115.31160736]
[50.99122620 118.56243134]
[36.34772491 121.81325531]
[21.70422363 125.06407928]
[9.90887547 135.60829163]
[-4.19275427 130.81315613]
[-18.83625603 134.06398010]
[-19.47937965 149.13874817]
[-24.00315475 163.53312683]
[-32.09914017 176.26565552]
[-43.21534348 186.46823120]
[-56.59383774 193.44520569]
[-71.32245636 196.72090149]
[-86.39698029 196.07196045]
[-100.78960419 191.54261780]
[-113.51901245 183.44172668]
[-123.71729279 172.32157898]
[-130.68910217 158.94039917]
[-133.95910645 144.21051025]
[-133.30435181 129.13623047]
[-128.76945496 114.74536133]
[-120.66363525 102.01908875]
[-109.53955841 91.82510376]
[-96.15568542 84.85845184]
[-81.42453766 81.59413910]
[-66.35051727 82.25472260]
[-51.96139526 86.79516602]
[-39.23825073 94.90589905]
[-29.04856110 106.03391266]
[-22.08708191 119.42047882]
[-7.44358015 116.16965485]
[3.30436730 105.85796356]
[18.45339775 110.42057800]
[33.09690094 107.16975403]
[47.74040222 103.91893005]
[62.38390350 100.66810608]
[61.58345413 93.10643768]
[62.34036255 85.26893616]
[64.72840118 77.48260498]
[68.75177765 70.09182739]
[59.24341583 58.49048996]
[49.73505783 46.88914871]
[33.97639847 43.88179016]
[26.63008118 29.61956024]
[33.33156967 15.04322338]
[48.94005966 11.33449650]
[61.48204803 21.33839607]
[61.33639908 37.38079071]
[70.84475708 48.98213196]
[80.35311890 60.58347321]
[94.72129822 56.27588654]
[96.27888489 41.35697556]
[97.83646393 26.43806267]
[83.79689789 20.88890076]
[71.77580261 11.75676918]
[62.66521835 -0.28066641]
[57.14121628 -14.33014870]
[55.61370850 -29.34911346]
[58.19605255 -44.22305298]
[64.69661713 -57.84822464]
[74.63301086 -69.21354675]
[87.26790619 -77.47563934]
[101.66368866 -82.02139282]
[116.75211334 -82.51349640]
[131.41349792 -78.91542053]
[144.55989075 -71.49417114]
[155.21574402 -60.80045700]
[162.59030151 -47.62781906]
[166.13633728 -32.95375061]
[165.59069824 -17.86717224]
[160.99389648 -3.48760533]
[152.68702698 9.11789131]
[141.28652954 19.01390648]
[127.63838196 25.46608734]
[112.75537872 27.99564362]
[111.19779205 42.91455460]
[109.64021301 57.83346939]
[119.05100250 64.33052063]
[125.81879425 72.63566589]
[138.08116150 63.99654770]
[150.34353638 55.35742950]
[162.60589600 46.71831512]
[168.99870300 31.61652374]
[185.30467224 29.87076378]
[194.74960327 43.27692032]
[187.61738586 58.04389191]
[171.24501038 58.98068237]
[158.98265076 67.61979675]
[146.72027588 76.25891113]
[134.45791626 84.89803314]
[136.77215576 92.04854584]
[137.61892700 99.51638794]
[136.96441650 107.00352478]
[134.83474731 114.21117401]
[131.31492615 120.85169220]
[126.54539490 126.66007233]
[134.79768372 139.18603516]
[143.04997253 151.71199036]
[151.30226135 164.23796082]
[150.85618591 149.24458313]
[153.58329773 134.49456787]
[159.36080933 120.65187836]
[167.92866516 108.33961487]
[178.90119934 98.11202240]
[191.78446960 90.42948914]
[205.99855042 85.63784027]
[220.90359497 83.95276642]
[235.82867432 85.45012665]
[250.10194397 90.06250763]
[263.08087158 97.58229065]
[274.18124390 107.67098236]
[282.90338135 119.87443542]
[288.85467529 133.64332581]
[291.76718140 148.35784912]
[291.50982666 163.35565186]
[288.09420776 177.96159363]
[281.67407227 191.51820374]
[272.53842163 203.41523743]
[261.09844971 213.11717224]
[247.86917114 220.18725586]
[233.44607544 224.30725098]
[218.47842407 225.29168701]
[203.63995361 223.09625244]
[189.59863281 217.81977844]
[176.98651123 209.69978333]
[166.37132263 199.10177612]
[158.22987366 186.50077820]
[158.54193115 201.49754333]
[158.85398865 216.49429321]
[159.16603088 231.49104309]
[159.47808838 246.48779297]
[159.79014587 261.48455811]
[160.10220337 276.48129272]
[160.41426086 291.47805786]
[160.72631836 306.47482300]
[163.31732178 325.68252563]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 113]
[11 112]
[12 111]
[13 110]
[15 50]
[16 49]
[17 48]
[18 47]
[20 45]
[21 44]
[54 64]
[55 63]
[56 62]
[65 91]
[66 90]
[67 89]
[93 104]
[94 103]
[95 102]
[96 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
