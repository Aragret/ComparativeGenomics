%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCGACCCCCUAACAACCCCCCUCCUAAUACUAACUACCUGACUCCUACCCCUCACAAUCAUGGCxxxxxxxxxxCUCCACUCAAGCACUAUAGUUGUAGCAGGAAUCUUCUUACUCAUCCGCUUCCACCCCCUAGCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-34.44826508 301.10403442]
[-43.16762924 313.30944824]
[-51.88699722 325.51489258]
[-60.60636139 337.72033691]
[-69.32572937 349.92575073]
[-78.04509735 362.13119507]
[-86.01649475 374.83776855]
[-93.21121979 387.99966431]
[-100.40593719 401.16159058]
[-107.60066223 414.32351685]
[-106.67712402 430.69662476]
[-120.54129791 439.45544434]
[-134.93090820 431.58959961]
[-135.04316711 415.19085693]
[-120.76257324 407.12878418]
[-113.56785583 393.96685791]
[-106.37313080 380.80496216]
[-99.17841339 367.64303589]
[-113.91384125 370.44787598]
[-126.41979218 362.16531372]
[-129.58724976 347.50354004]
[-121.61565399 334.79708862]
[-107.03648376 331.26895142]
[-94.13727570 338.92471313]
[-90.25052643 353.41183472]
[-81.53116608 341.20639038]
[-72.81179810 329.00097656]
[-64.09243011 316.79553223]
[-55.37306595 304.59008789]
[-46.65369797 292.38464355]
[-56.68509293 284.30667114]
[-66.27233124 275.70620728]
[-75.38824463 266.60769653]
[-84.00698853 257.03689575]
[-92.10413361 247.02096558]
[-99.65672302 236.58827209]
[-106.64335632 225.76838684]
[-113.04421997 214.59199524]
[-118.84117126 203.09077454]
[-124.01777649 191.29731750]
[-128.55937195 179.24505615]
[-132.45306396 166.96817017]
[-135.68783569 154.50146484]
[-138.25450134 141.88024902]
[-140.14579773 129.14031982]
[-141.35636902 116.31777954]
[-141.88275146 103.44898987]
[-141.72349548 90.57042694]
[-140.87901306 77.71858978]
[-139.35173035 64.92991638]
[-137.14596558 52.24065018]
[-134.26795959 39.68676758]
[-130.72589111 27.30385590]
[-126.52977753 15.12701321]
[-121.69152832 3.19075823]
[-116.22486115 -8.47107410]
[-110.14526367 -19.82542610]
[-103.46997070 -30.84011269]
[-96.21790314 -41.48390961]
[-88.40962982 -51.72664642]
[-80.06727600 -61.53928375]
[-71.21448517 -70.89401245]
[-61.87635803 -79.76431274]
[-52.07936478 -88.12503815]
[-41.85127258 -95.95249176]
[-31.22108269 -103.22448730]
[-20.21892166 -109.92040253]
[-8.87597942 -116.02126312]
[2.77559114 -121.50976562]
[14.70276070 -126.37036896]
[26.87172127 -130.58927917]
[39.24797440 -134.15455627]
[51.79644394 -137.05607605]
[64.48155212 -139.28561401]
[77.26734161 -140.83685303]
[90.11757660 -141.70539856]
[102.99581909 -141.88879395]
[115.86557007 -141.38650513]
[128.69035339 -140.19996643]
[141.43380737 -138.33255005]
[154.05979919 -135.78952026]
[166.53256226 -132.57812500]
[178.81672668 -128.70742798]
[190.87745667 -124.18842316]
[202.68058777 -119.03392029]
[214.19265747 -113.25852966]
[225.38102722 -106.87861633]
[236.21397400 -99.91226959]
[246.66081238 -92.37924194]
[256.69189453 -84.30087280]
[266.27880859 -75.70007324]
[275.39440918 -66.60122681]
[284.01278687 -57.03011322]
[292.10955811 -47.01387405]
[299.66177368 -36.58089447]
[306.64801025 -25.76075554]
[313.04846191 -14.58412457]
[318.84497070 -3.08268547]
[324.02114868 8.71095943]
[328.56228638 20.76338005]
[332.45553589 33.04040909]
[335.68984985 45.50724792]
[338.25604248 58.12855911]
[340.14688110 70.86856079]
[341.35696411 83.69113922]
[341.88287354 96.55994415]
[341.72314453 109.43850708]
[356.68637085 110.48818207]
[371.64959717 111.53784943]
[380.48590088 109.00650787]
[386.90075684 112.76117706]
[401.83999634 114.11003876]
[416.77923584 115.45890045]
[424.16244507 102.13945007]
[436.32879639 92.97974396]
[451.17031860 89.56675720]
[466.11569214 92.49180603]
[478.57550049 101.24811554]
[486.39102173 114.31859589]
[488.20819092 129.43872070]
[483.71212769 143.98881531]
[473.68182373 155.44799805]
[459.85507202 161.83090210]
[444.62750244 162.03164673]
[430.63729858 156.01544189]
[420.30841064 144.82464600]
[415.43035889 130.39813232]
[400.49111938 129.04927063]
[385.55191040 127.70040894]
[370.59991455 126.50108337]
[355.63668823 125.45140839]
[340.67346191 124.40173340]
[337.98867798 143.36535645]
[333.81204224 162.05714417]
[328.16976929 180.35993958]
[321.09719849 198.15898132]
[312.63870239 215.34272766]
[302.84725952 231.80345154]
[291.78430176 247.43795776]
[279.51910400 262.14825439]
[266.12863159 275.84210205]
[251.69674683 288.43371582]
[236.31396484 299.84411621]
[220.07669067 310.00180054]
[203.08673096 318.84307861]
[185.45056152 326.31253052]
[167.27874756 332.36337280]
[148.68519592 336.95761108]
[129.78646851 340.06649780]
[110.70101929 341.67053223]
[91.54848480 341.75967407]
[72.44893646 340.33331299]
[53.52209091 337.40045166]
[34.88659286 332.97940063]
[16.65925598 327.09796143]
[-1.04565966 319.79293823]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 30]
[2 29]
[3 28]
[4 27]
[5 26]
[6 25]
[7 18]
[8 17]
[9 16]
[10 15]
[107 132]
[108 131]
[109 130]
[111 129]
[112 128]
[113 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
