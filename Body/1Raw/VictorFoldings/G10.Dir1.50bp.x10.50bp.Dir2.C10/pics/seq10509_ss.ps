%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCCAUUCUCCUCCUAUCCCUCAACCCCGACAUCAUUACCGGGUUUUCCUCUUGUAAAUAUxxxxxxxxxxCUAGGAGGCGUCCUUGCCCUAUUACUAUCCAUCCUCAUCCUAGCAAUAAUCCCCAUCCUCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[66.15704346 301.09844971]
[51.62446594 298.10537720]
[37.34798431 294.06353760]
[32.21768188 308.15890503]
[27.08738136 322.25430298]
[21.95707893 336.34970093]
[25.33607483 352.39694214]
[12.94923401 363.14395142]
[-2.46092343 357.53512573]
[-5.04174900 341.34033203]
[7.86168957 331.21939087]
[12.99199200 317.12399292]
[18.12229347 303.02862549]
[23.25259590 288.93322754]
[11.35275936 283.65075684]
[-0.18573731 277.61965942]
[-11.31586075 270.86459351]
[-21.99224472 263.41302490]
[-32.17136765 255.29539490]
[-41.81174088 246.54473877]
[-50.87406540 237.19673157]
[-59.32140350 227.28950500]
[-67.11932373 216.86341858]
[-74.23603821 205.96098328]
[-80.64253998 194.62663269]
[-86.31271362 182.90657043]
[-91.22344971 170.84857178]
[-95.35472870 158.50177002]
[-98.68971252 145.91651917]
[-101.21480560 133.14410400]
[-102.91970825 120.23658752]
[-103.79748535 107.24657440]
[-103.84455109 94.22703552]
[-103.06071472 81.23101807]
[-101.44917297 68.31150818]
[-99.01648712 55.52117157]
[-113.52511597 51.71331406]
[-128.03373718 47.90545273]
[-142.54235840 44.09759521]
[-153.28967285 55.06987381]
[-168.08755493 59.18303299]
[-182.95547485 55.33065033]
[-193.89401245 44.54899979]
[-197.96075439 29.73829269]
[-194.06179810 14.88253117]
[-183.24591064 3.97784281]
[-168.42253113 -0.04246658]
[-153.57905579 3.90304589]
[-142.70832825 14.75305748]
[-138.73449707 29.58897018]
[-124.22587585 33.39682770]
[-109.71725464 37.20468521]
[-95.20862579 41.01254654]
[-89.84768677 25.54341125]
[-83.26312256 10.55417347]
[-75.49737549 -3.85856009]
[-66.60048676 -17.60189438]
[-56.62981415 -30.58724785]
[-45.64961243 -42.73093033]
[-33.73065948 -53.95466614]
[-20.94976807 -64.18611908]
[-7.38932180 -73.35934448]
[6.86328173 -81.41521454]
[21.71617889 -88.30181122]
[37.07363892 -93.97474670]
[52.83668137 -98.39745331]
[68.90370178 -101.54142761]
[85.17115021 -103.38641357]
[101.53417206 -103.92050934]
[117.88730621 -103.14028168]
[134.12515259 -101.05074310]
[150.14305115 -97.66538239]
[165.83775330 -93.00600433]
[181.10812378 -87.10264587]
[195.85572815 -79.99335480]
[209.98551941 -71.72395325]
[223.40640259 -62.34773636]
[236.03190613 -51.92514038]
[247.78063965 -40.52334213]
[258.57687378 -28.21583176]
[268.35104370 -15.08192921]
[277.04016113 -1.20628893]
[290.32748413 -8.16664505]
[303.61483765 -15.12700176]
[316.90216064 -22.08735657]
[330.18951416 -29.04771423]
[343.47686768 -36.00806808]
[355.16305542 -45.41192627]
[364.80487061 -56.90259171]
[374.44668579 -68.39325714]
[384.08850098 -79.88392639]
[386.40176392 -96.11910248]
[401.71728516 -101.98143768]
[414.27975464 -91.44026947]
[411.16601562 -75.33944702]
[395.57916260 -70.24211121]
[385.93734741 -58.75144577]
[376.29556274 -47.26078033]
[366.65374756 -35.77011108]
[380.86239624 -40.57777023]
[395.85446167 -41.06606674]
[410.34585571 -37.19318008]
[423.09545898 -29.29080963]
[433.01132202 -18.03577232]
[439.24414062 -4.39202499]
[441.26013184 10.47188473]
[438.88662720 25.28290749]
[432.32687378 38.77252579]
[422.14273071 49.78539276]
[409.20642090 57.37828827]
[394.62591553 60.90090942]
[379.64999390 60.05154800]
[365.56127930 54.90295410]
[353.56643677 45.89608383]
[344.69277954 33.80235291]
[339.70031738 19.65755463]
[339.01666260 4.67314196]
[342.70031738 -9.86751080]
[350.43722534 -22.72072792]
[337.14987183 -15.76037216]
[323.86251831 -8.80001640]
[310.57519531 -1.83965993]
[297.28784180 5.12069607]
[284.00051880 12.08105278]
[289.90618896 25.69271660]
[294.80648804 39.69776154]
[298.67550659 54.02204514]
[301.49273682 68.58973694]
[303.24328613 83.32370758]
[303.91784668 98.14596558]
[303.51290894 112.97803497]
[302.03054810 127.74140167]
[299.47866821 142.35791016]
[295.87072754 156.75016785]
[291.22589111 170.84199524]
[285.56869507 184.55879211]
[278.92910767 197.82794189]
[271.34225464 210.57919312]
[262.84835815 222.74502563]
[253.49232483 234.26106262]
[243.32371521 245.06632996]
[232.39634705 255.10362244]
[220.76809692 264.31979370]
[208.50048828 272.66607666]
[195.65849304 280.09826660]
[182.31007385 286.57699585]
[168.52592468 292.06802368]
[154.37898254 296.54223633]
[139.94416809 299.97598267]
[125.29789734 302.35104370]
[110.51769257 303.65487671]
[95.68180847 303.88055420]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 14]
[4 13]
[5 12]
[6 11]
[36 53]
[37 52]
[38 51]
[39 50]
[82 124]
[83 123]
[84 122]
[85 121]
[86 120]
[87 119]
[88 99]
[89 98]
[90 97]
[91 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
