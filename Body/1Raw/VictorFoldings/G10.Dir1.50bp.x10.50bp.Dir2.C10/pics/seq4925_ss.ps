%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUACUCAUCAUUAAUAAUCAUAAUAGCUAUAGCAAUAAAACUAGGAAUAGCCCCCUUUCAxxxxxxxxxxAUAACAAGCUCCAUCUGCCUACGACAAACAGACCUAAAAUCGCUCAUUGCAUACUCUUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 250.27755737]
[92.50000000 235.27755737]
[92.50000000 220.27755737]
[92.50000000 205.27755737]
[92.50000000 190.27755737]
[92.50000000 175.27755737]
[92.50000000 160.27755737]
[92.50000000 145.27755737]
[92.50000000 130.27755737]
[92.50000000 115.27756500]
[79.56194305 107.68765259]
[66.46878815 115.00675964]
[53.37563705 122.32586670]
[40.35932541 129.78077698]
[27.42127037 137.37068176]
[25.35444069 141.35687256]
[22.40221786 144.15962219]
[19.05909348 145.64468384]
[15.81118965 145.85707092]
[13.07694054 145.00195312]
[-0.44724903 151.49011230]
[-13.97143936 157.97828674]
[-27.49562836 164.46644592]
[-31.20130539 179.65861511]
[-43.83588409 188.87281799]
[-59.43370438 187.75837708]
[-70.62995148 176.84150696]
[-72.13810730 161.27682495]
[-63.24605560 148.41348267]
[-48.15235519 144.32516479]
[-33.98379517 150.94226074]
[-20.45960426 144.45408630]
[-6.93541431 137.96592712]
[6.58877563 131.47776794]
[19.83136177 124.43262482]
[32.76941681 116.84272003]
[36.97457123 110.70575714]
[46.05653000 109.23271179]
[59.14968491 101.91360474]
[72.24283600 94.59449768]
[86.11833191 84.66486359]
[98.78528595 86.96517944]
[105.13241577 73.37422943]
[111.47954559 59.78327942]
[117.82667542 46.19232941]
[124.17380524 32.60137558]
[111.89451599 18.67983055]
[106.88935089 0.85652995]
[110.10852051 -17.32299232]
[120.87068939 -32.26203537]
[137.00662231 -41.02432251]
[155.29627991 -41.91106033]
[160.49168396 -55.98257828]
[165.68710327 -70.05410004]
[170.88252258 -84.12561798]
[162.16789246 -86.80269623]
[154.24555969 -93.86000061]
[149.08721924 -104.88922119]
[148.42037964 -118.66297913]
[147.79640198 -133.64999390]
[147.17242432 -148.63700867]
[132.35737610 -151.36871338]
[118.52185059 -157.32907104]
[106.35980988 -166.21908569]
[96.48130798 -177.59288025]
[89.38185120 -190.87991333]
[85.41754150 -205.41374207]
[84.78721619 -220.46533203]
[87.52250671 -235.27970886]
[93.48621368 -249.11380005]
[102.37918854 -261.27368164]
[113.75536346 -271.14941406]
[127.04412079 -278.24566650]
[141.57890320 -282.20645142]
[156.63064575 -282.83312988]
[171.44436646 -280.09423828]
[185.27700806 -274.12719727]
[197.43473816 -265.23129272]
[207.30772400 -253.85270691]
[214.40074158 -240.56222534]
[218.35801697 -226.02648926]
[218.98103333 -210.97459412]
[216.23857117 -196.16152954]
[210.26817322 -182.33033752]
[201.36929321 -170.17477417]
[189.98834229 -160.30453491]
[176.69613647 -153.21473694]
[162.15943909 -149.26098633]
[162.78341675 -134.27397156]
[163.40739441 -119.28695679]
[169.79608154 -115.35824585]
[182.98933411 -122.49532318]
[182.57342529 -107.50082397]
[188.96211243 -103.57210541]
[202.61834717 -109.77751923]
[216.27459717 -115.98292542]
[229.93083191 -122.18833160]
[230.73625183 -137.47262573]
[238.56234741 -150.62599182]
[251.61074829 -158.62585449]
[266.88302612 -159.63391113]
[280.86972046 -153.41851807]
[290.35678101 -141.40794373]
[293.16418457 -126.36210632]
[288.64675903 -111.73844147]
[277.84262085 -100.89735413]
[263.23446655 -96.33005524]
[248.17913818 -99.08606720]
[236.13624573 -108.53208923]
[222.47999573 -102.32668304]
[208.82376099 -96.12127686]
[195.16751099 -89.91587067]
[184.95404053 -78.93019867]
[179.75862122 -64.85868073]
[174.56320190 -50.78716278]
[169.36779785 -36.71564484]
[178.51840210 -29.39678764]
[185.24302673 -19.77739525]
[188.98619080 -8.63302135]
[189.43328857 3.13405156]
[186.53707886 14.56787300]
[180.52233887 24.73647499]
[171.86854553 32.80784225]
[161.27154541 38.11798859]
[149.58772278 40.22555923]
[137.76475525 38.94850540]
[131.41763306 52.53945923]
[125.07049561 66.13040924]
[118.72336578 79.72135925]
[112.37623596 93.31230927]
[123.65518951 83.42366791]
[138.30018616 80.17958069]
[152.70007324 84.37998199]
[163.30412292 94.98913574]
[167.49760437 109.39103699]
[164.24647522 124.03446960]
[154.35241699 135.30867004]
[140.25509644 140.43363953]
[125.43061066 138.14567566]
[113.53439331 129.00894165]
[107.50000000 115.27756500]
[107.50000000 130.27755737]
[107.50000000 145.27755737]
[107.50000000 160.27755737]
[107.50000000 175.27755737]
[107.50000000 190.27755737]
[107.50000000 205.27755737]
[107.50000000 220.27755737]
[107.50000000 235.27755737]
[107.50000000 250.27755737]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 40]
[12 39]
[13 38]
[14 36]
[15 35]
[20 34]
[21 33]
[22 32]
[23 31]
[42 130]
[43 129]
[44 128]
[45 127]
[46 126]
[52 116]
[53 115]
[54 114]
[55 113]
[59 90]
[60 89]
[61 88]
[94 112]
[95 111]
[96 110]
[97 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
