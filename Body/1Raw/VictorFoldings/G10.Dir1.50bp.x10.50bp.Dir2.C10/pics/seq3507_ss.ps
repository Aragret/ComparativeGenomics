%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCAUCACCCUCUACAUCACCGCCCCGACCUUAGCUCUCACCAUCGCUCUUCUACUAUGAAxxxxxxxxxxUAACAUCUCAGACGCUCAGGAAAUAGAAACCGUCUGAACUAUCCUGCCCGCCAUCAUCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-3.26039052 222.08219910]
[-13.47387028 233.06785583]
[-23.68734932 244.05352783]
[-33.90082932 255.03918457]
[-37.63072205 270.41442871]
[-51.96332932 274.46728516]
[-62.17681122 285.45297241]
[-71.31854248 297.34533691]
[-79.30846405 310.04028320]
[-87.29837799 322.73519897]
[-83.54909515 338.08831787]
[-91.82553864 351.55221558]
[-107.21744537 355.13894653]
[-120.59306335 346.72061157]
[-124.01688385 331.29165649]
[-115.45761108 318.00579834]
[-99.99330902 314.74526978]
[-92.00338745 302.05035400]
[-84.01347351 289.35543823]
[-98.34455872 293.78488159]
[-112.83441925 289.90625000]
[-123.03631592 278.90982056]
[-125.81939697 264.17025757]
[-120.32958984 250.21096802]
[-108.25163269 241.31584167]
[-93.29210663 240.21472168]
[-80.04189301 247.24549866]
[-72.56731415 260.25051880]
[-73.16247559 275.23947144]
[-62.94899750 264.25381470]
[-59.94963837 249.66432190]
[-44.88649368 244.82571411]
[-34.67301559 233.84004211]
[-24.45953560 222.85438538]
[-14.24605465 211.86871338]
[-31.87364388 190.42185974]
[-45.52595901 166.24926758]
[-54.79145432 140.07962036]
[-59.39082336 112.70179749]
[-59.18542480 84.94108582]
[-54.18144608 57.63431168]
[-44.52973557 31.60463524]
[-57.77231979 24.55949974]
[-71.01490784 17.51436424]
[-83.99918365 25.71827126]
[-99.34648895 26.31488609]
[-112.92845917 19.14372635]
[-121.09162903 6.13379622]
[-121.64012909 -9.21529865]
[-114.42643738 -22.77472878]
[-101.39098358 -30.89707375]
[-86.04024506 -31.39746666]
[-72.50348663 -24.14130211]
[-64.42204285 -11.08045292]
[-63.96977234 4.27177954]
[-50.72718430 11.31691456]
[-37.48460007 18.36204910]
[-31.60947037 9.19406700]
[-25.12398720 0.44720855]
[-18.05822372 -7.83796167]
[-10.44495201 -15.62302017]
[-2.31947851 -22.87186241]
[6.28051424 -29.55087090]
[15.31514263 -35.62907410]
[24.74250793 -41.07827759]
[34.51889038 -45.87321472]
[44.59894562 -49.99164581]
[54.93593216 -53.41447067]
[65.48191071 -56.12582016]
[76.18796539 -58.11311722]
[87.00445557 -59.36714172]
[97.88121796 -59.88208389]
[108.76779938 -59.65555573]
[119.61372375 -58.68860245]
[130.36868286 -56.98571014]
[140.98280334 -54.55477905]
[151.40687561 -51.40708160]
[161.59252930 -47.55721283]
[171.49253845 -43.02302933]
[181.06098938 -37.82556152]
[190.25352478 -31.98891068]
[199.02748108 -25.54014397]
[207.34219360 -18.50916862]
[215.15908813 -10.92859364]
[222.44192505 -2.83357382]
[229.15692139 5.73834991]
[235.27293396 14.74742317]
[240.76161194 24.15186691]
[254.28579712 17.66370201]
[267.80999756 11.17553616]
[281.33416748 4.68737078]
[294.85836792 -1.80079412]
[308.38256836 -8.28895950]
[321.90673828 -14.77712440]
[320.39517212 -29.85992622]
[324.13638306 -44.54935074]
[332.67861938 -57.07157516]
[344.99035645 -65.91447449]
[359.58489990 -70.01023865]
[374.69985962 -68.86428070]
[388.51007080 -62.61497116]
[399.34786987 -52.01695251]
[405.90454102 -38.34998322]
[407.38830566 -23.26442146]
[403.62002563 -8.58191776]
[395.05474854 3.92454267]
[382.72674561 12.74474335]
[368.12466431 16.81360245]
[353.01184082 15.63978672]
[339.21316528 9.36503887]
[328.39492798 -1.25293434]
[314.87072754 5.23523092]
[301.34652710 11.72339630]
[287.82235718 18.21156120]
[274.29815674 24.69972610]
[260.77395630 31.18789101]
[247.24977112 37.67605591]
[251.57606506 49.09356689]
[255.01853943 60.80790329]
[257.55712891 72.75076294]
[259.17703247 84.85250854]
[259.86877441 97.04257965]
[259.62835693 109.24989319]
[258.45715332 121.40327454]
[256.36203003 133.43185425]
[253.35516357 145.26550293]
[249.45410156 156.83520508]
[244.68161011 168.07351685]
[239.06549072 178.91490173]
[232.63848877 189.29614258]
[225.43811035 199.15670776]
[217.50630188 208.43910217]
[208.88934326 217.08920288]
[199.63746643 225.05657959]
[189.80461121 232.29475403]
[179.44812012 238.76155090]
[168.62837219 244.41923523]
[157.40846252 249.23484802]
[145.85382080 253.18028259]
[134.03179932 256.23254395]
[122.01135254 258.37384033]
[109.86255646 259.59167480]
[97.65625763 259.87893677]
[85.46362305 259.23397827]
[73.35574341 257.66055298]
[61.40322876 255.16784668]
[49.67576218 251.77035522]
[38.24172974 247.48791504]
[27.16780472 242.34550476]
[16.51855087 236.37307739]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 35]
[2 34]
[3 33]
[4 32]
[6 30]
[7 29]
[8 19]
[9 18]
[10 17]
[42 57]
[43 56]
[44 55]
[88 117]
[89 116]
[90 115]
[91 114]
[92 113]
[93 112]
[94 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
