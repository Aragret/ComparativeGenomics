%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGCAGUAAUAUUAAUAAUUUUCAUGAUUUGAGAAGCCUUCGCUUCGAAGCGAAAAGUCCUxxxxxxxxxxAAAACCAUACCUCUCACUUCAACCUCCCUCACCAUUGGCAGCCUAGCAUUAGCAGGAAUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[90.42269135 417.67526245]
[90.42269135 402.67526245]
[90.42269135 387.67526245]
[90.42269135 372.67526245]
[90.42269135 357.67526245]
[90.42269135 342.67526245]
[90.42269135 327.67526245]
[90.42269135 312.67526245]
[90.42269135 297.67526245]
[90.42269135 282.67526245]
[76.84500885 279.46325684]
[64.32659912 273.28430176]
[53.50690079 264.45001221]
[44.93945312 253.40788269]
[39.06359482 240.71832275]
[36.18193436 227.02647400]
[36.44475937 213.02926636]
[39.84221268 199.43997192]
[46.20460129 186.95188904]
[55.21088409 176.20294189]
[66.40486145 167.74310303]
[79.21827698 162.00625610]
[92.99967194 159.28793335]
[93.62364960 144.30091858]
[94.24762726 129.31390381]
[80.45690155 121.50042725]
[72.93434143 108.04955292]
[73.46647644 93.08632660]
[58.50622940 94.17763519]
[43.54597855 95.26894379]
[28.58573151 96.36025238]
[13.62548161 97.45156860]
[-1.33476686 98.54287720]
[-12.86931610 109.69338226]
[-28.75960922 107.48472595]
[-36.81597137 93.61120605]
[-30.85825539 78.71540070]
[-15.45670700 74.22409058]
[-2.42607737 83.58262634]
[12.53417110 82.49131775]
[27.49441910 81.40000916]
[42.45466995 80.30869293]
[57.41491699 79.21738434]
[72.37516785 78.12607574]
[83.97650909 68.61771393]
[87.98424530 54.16302872]
[91.99198914 39.70833969]
[87.83409882 25.29612350]
[76.74278259 15.19747353]
[65.65146637 5.09882402]
[54.56015396 -4.99982548]
[43.46883774 -15.09847546]
[32.37752533 -25.19712448]
[16.24919128 -28.16510773]
[11.01106548 -43.70518875]
[22.05168152 -55.83106232]
[38.01340103 -52.06867218]
[42.47617340 -36.28844070]
[53.56748962 -26.18979073]
[64.65880585 -16.09114075]
[75.75012207 -5.99249125]
[86.84143829 4.10615826]
[97.93274689 14.20480824]
[112.83465576 12.49211788]
[121.34574127 0.14054555]
[110.11850739 -9.83586979]
[100.20239258 -21.11639404]
[91.74771881 -33.53002167]
[84.88265991 -46.88855743]
[79.71128082 -60.98949814]
[76.31198883 -75.61907196]
[74.73630524 -90.55549622]
[75.00813293 -105.57234955]
[77.12333679 -120.44196320]
[81.04985046 -134.93893433]
[86.72815704 -148.84347534]
[94.07217407 -161.94482422]
[102.97056580 -174.04432678]
[113.28843689 -184.95860291]
[124.86936188 -194.52215576]
[137.53779602 -202.59002686]
[151.10166931 -209.03991699]
[165.35536194 -213.77401733]
[180.08279419 -216.72059631]
[195.06069946 -217.83494568]
[210.06202698 -217.10020447]
[224.85935974 -214.52749634]
[239.22834778 -210.15582275]
[252.95120239 -204.05146790]
[265.81985474 -196.30694580]
[277.63922119 -187.03970337]
[288.23013306 -176.39019775]
[297.43203735 -164.51986694]
[305.10543823 -151.60868835]
[311.13403320 -137.85238647]
[315.42636108 -123.45948792]
[317.91738892 -108.64820099]
[318.56936646 -93.64305115]
[317.37240601 -78.67150879]
[314.34463501 -63.96055603]
[309.53198242 -49.73319244]
[303.00735474 -36.20510483]
[294.86972046 -23.58138084]
[285.24243164 -12.05338573]
[274.27139282 -1.79588354]
[262.12298584 7.03562403]
[248.98132324 14.30725384]
[235.04566956 19.90876961]
[220.52726746 23.75525475]
[205.64619446 25.78839493]
[190.62808228 25.97737312]
[175.70057678 24.31931877]
[161.08998108 20.83937263]
[147.01777649 15.59028625]
[133.69731140 8.65163612]
[125.18622589 21.00320816]
[106.44667816 43.71607971]
[102.43893433 58.17076874]
[98.43119812 72.62545776]
[122.51661682 82.29102325]
[128.58120728 108.68960571]
[142.10540771 115.17777252]
[159.00146484 116.57744598]
[162.33380127 133.20068359]
[147.28268433 141.00454712]
[135.61723328 128.70196533]
[122.09304810 122.21379852]
[109.23464203 129.93788147]
[108.61066437 144.92489624]
[107.98668671 159.91191101]
[123.41056061 164.59561157]
[137.10475159 173.07839966]
[148.15322876 184.78634644]
[155.81852722 198.93003845]
[159.59112549 214.55773926]
[159.22319031 230.61946106]
[154.74487305 246.03749084]
[146.46197510 259.77874756]
[134.93502808 270.92395020]
[120.94136047 278.72909546]
[105.42269135 282.67526245]
[105.42269135 297.67526245]
[105.42269135 312.67526245]
[105.42269135 327.67526245]
[105.42269135 342.67526245]
[105.42269135 357.67526245]
[105.42269135 372.67526245]
[105.42269135 387.67526245]
[105.42269135 402.67526245]
[105.42269135 417.67526245]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[23 130]
[24 129]
[25 128]
[28 44]
[29 43]
[30 42]
[31 41]
[32 40]
[33 39]
[45 119]
[46 118]
[47 117]
[48 63]
[49 62]
[50 61]
[51 60]
[52 59]
[53 58]
[64 116]
[65 115]
[121 127]
[122 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
