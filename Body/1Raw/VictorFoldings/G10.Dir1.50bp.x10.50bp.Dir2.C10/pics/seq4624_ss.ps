%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCGGGCCCAUACCCCGAAAAUGUUGGUUAUACCCUUCCCGUACUAAUUAAUCCCCUGGCCCAAxxxxxxxxxxCAUCCUCCGUGAAAUCAAUAUCCCGCACAAGAGUGCUACUCUCCUCGCUCCGGGCCCAUAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[103.87526703 294.15881348]
[103.87526703 279.15881348]
[103.87526703 264.15881348]
[103.87526703 249.15882874]
[103.87526703 234.15882874]
[103.87526703 219.15882874]
[103.87526703 204.15882874]
[103.87526703 189.15882874]
[103.87526703 174.15882874]
[103.87526703 159.15882874]
[89.86250305 153.80696106]
[79.86325836 164.98797607]
[69.86401367 176.16899109]
[59.86476517 187.35000610]
[62.27233124 202.80114746]
[54.14063263 216.15814209]
[39.30920792 221.11424255]
[24.78100586 215.32931519]
[17.41579628 201.53483582]
[20.69120789 186.24414062]
[33.06069183 176.67700195]
[48.68375397 177.35076904]
[58.68299866 166.16975403]
[68.68224335 154.98873901]
[78.68148804 143.80772400]
[62.91838837 126.22058105]
[58.15748596 104.75103760]
[64.09728241 85.26905823]
[77.70278931 72.37190247]
[70.96073914 58.97247314]
[64.21869659 45.57304001]
[57.47664642 32.17360687]
[50.73459625 18.77417374]
[43.99254990 5.37474251]
[37.25049973 -8.02468967]
[30.50845146 -21.42412186]
[23.76640320 -34.82355499]
[9.71303177 -29.53821182]
[-4.82252884 -25.77662086]
[-19.67557907 -23.58139992]
[-34.67782211 -22.97742271]
[-49.65927124 -23.97153473]
[-64.45018005 -26.55247307]
[-78.88294220 -30.69098854]
[-92.79403687 -36.34019470]
[-106.02584076 -43.43607712]
[-118.42842102 -51.89823532]
[-129.86125183 -61.63078690]
[-140.19477844 -72.52345276]
[-149.31193542 -84.45281982]
[-157.10939026 -97.28370667]
[-163.49882507 -110.87072754]
[-168.40780640 -125.05995178]
[-171.78074646 -139.69058228]
[-173.57940674 -154.59684753]
[-173.78341675 -169.60986328]
[-172.39044189 -184.55950928]
[-169.41630554 -199.27638245]
[-164.89466858 -213.59375000]
[-158.87678528 -227.34938049]
[-151.43084717 -240.38739014]
[-142.64120483 -252.56008911]
[-132.60746765 -263.72952271]
[-121.44331360 -273.76913452]
[-109.27524567 -282.56515503]
[-96.24114227 -290.01794434]
[-82.48868561 -296.04306030]
[-68.17369843 -300.57223511]
[-53.45838165 -303.55410767]
[-38.50947571 -304.95492554]
[-23.49636078 -304.75881958]
[-8.58914566 -302.96798706]
[6.04325771 -299.60275269]
[20.23505402 -294.70120239]
[33.82543945 -288.31893921]
[46.66042328 -280.52822876]
[58.59457397 -271.41732788]
[69.49267578 -261.08953857]
[79.23123169 -249.66181946]
[87.69991302 -237.26370239]
[94.80274963 -224.03562927]
[100.45926666 -210.12750244]
[104.60536957 -195.69691467]
[107.19408417 -180.90736389]
[108.19606781 -165.92643738]
[107.59998322 -150.92388916]
[105.41256714 -136.06968689]
[101.65861511 -121.53214264]
[96.38066101 -107.47599792]
[89.63851166 -94.06050110]
[81.50855255 -81.43767548]
[72.08290863 -69.75052643]
[61.46837234 -59.13150024]
[49.78522110 -49.70090485]
[37.16583633 -41.56560135]
[43.90788269 -28.16617012]
[50.64993286 -14.76673794]
[57.39197922 -1.36730599]
[64.13402557 12.03212643]
[70.87607574 25.43155861]
[77.61812592 38.83098984]
[84.36017609 52.23042297]
[91.10221863 65.62985229]
[112.62901306 63.30512619]
[133.40798950 74.36262512]
[145.30500793 96.83433533]
[142.39970398 123.99709320]
[157.33735657 125.36331177]
[168.28291321 112.50478363]
[184.56945801 108.72023773]
[199.75900269 115.30313110]
[207.96722412 129.48828125]
[222.92950439 130.55148315]
[237.89178467 131.61466980]
[252.85404968 132.67787170]
[267.81631470 133.74107361]
[284.04418945 128.83261108]
[293.25314331 143.06747437]
[282.12387085 155.85714722]
[266.75311279 148.70333862]
[251.79084778 147.64013672]
[236.82858276 146.57695007]
[221.86630249 145.51374817]
[206.90403748 144.45056152]
[199.27200317 155.44425964]
[187.10032654 161.26441956]
[173.53540039 160.28755188]
[162.14303589 152.66281128]
[155.97114563 140.30096436]
[141.03349304 138.93473816]
[135.49392700 143.99076843]
[147.94795227 152.35122681]
[160.40197754 160.71168518]
[175.28599548 162.57336426]
[186.81849670 172.16510010]
[191.36103821 186.46075439]
[187.48045349 200.95008850]
[176.40106201 211.06182861]
[161.61836243 213.60574341]
[147.79620361 207.77925110]
[139.29542542 195.42059326]
[138.79759216 180.43028259]
[131.60620117 167.26654053]
[124.41482544 154.10279846]
[118.87526703 159.15882874]
[118.87526703 174.15882874]
[118.87526703 189.15882874]
[118.87526703 204.15882874]
[118.87526703 219.15882874]
[118.87526703 234.15882874]
[118.87526703 249.15882874]
[118.87526703 264.15881348]
[118.87526703 279.15881348]
[118.87526703 294.15881348]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[11 25]
[12 24]
[13 23]
[14 22]
[29 103]
[30 102]
[31 101]
[32 100]
[33 99]
[34 98]
[35 97]
[36 96]
[37 95]
[107 130]
[108 129]
[112 124]
[113 123]
[114 122]
[115 121]
[116 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
