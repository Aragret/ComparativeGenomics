%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCAUUAAUAAUCAUAAUAGCUAUAGCAAUAAAACUAGGAAUAGCCCCCUUUCACUUCUGAxxxxxxxxxxACUAAACCCCAUUAAACGCCUGGCAGCCGGAAGCCUAUUCGCAGGAUUUCUCAUUACUAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[90.47595978 521.92419434]
[90.47595978 506.92422485]
[90.47595978 491.92422485]
[90.47595978 476.92422485]
[90.47595978 461.92422485]
[90.47595978 446.92422485]
[90.47595978 431.92422485]
[90.47595978 416.92422485]
[90.47595978 401.92422485]
[90.47595978 386.92422485]
[73.86275482 382.03646851]
[59.51949310 372.30230713]
[48.82052231 358.64178467]
[42.79484940 342.35174561]
[42.02718353 324.98281860]
[46.60122681 308.19161987]
[56.09067535 293.58294678]
[69.59893799 282.55627441]
[85.84384155 276.17172241]
[84.59696960 261.22363281]
[83.35009766 246.27555847]
[82.10321808 231.32746887]
[73.33474731 219.28741455]
[79.89812469 204.89183044]
[78.18544006 189.98992920]
[76.00859833 175.14872742]
[73.83176422 160.30752563]
[71.65493011 145.46632385]
[69.47808838 130.62510681]
[58.28232574 120.64238739]
[43.28962708 120.17434692]
[28.29693222 119.70629883]
[21.29438591 133.26828003]
[9.09582901 142.44203186]
[-5.87670803 145.40614319]
[-20.65041733 141.57203674]
[-32.29196930 131.70101929]
[-38.48992157 117.75297546]
[-38.01366806 102.49728394]
[-30.95777130 88.96299744]
[-18.72318268 79.83734131]
[-3.73908901 76.93222809]
[11.01940727 80.82446289]
[22.62199593 90.74125671]
[28.76497459 104.71360779]
[43.75767136 105.18164825]
[58.75036621 105.64968872]
[64.23739624 91.68930054]
[52.93839264 81.82357788]
[41.63938904 71.95785522]
[33.05754471 68.64065552]
[30.21069527 61.76743698]
[19.11938095 51.66878891]
[2.99104786 48.70080566]
[-2.24707747 33.16072464]
[8.79353905 21.03485107]
[24.75525665 24.79724121]
[29.21802902 40.57747269]
[40.30934525 50.67612457]
[51.50511169 60.65884781]
[62.80411530 70.52457428]
[74.10311890 80.39029694]
[90.25380707 74.96147156]
[103.81089020 79.09112549]
[111.53497314 66.23271942]
[119.25905609 53.37432098]
[126.98314667 40.51591873]
[134.70722961 27.65751457]
[142.43132019 14.79911232]
[130.91387939 5.14017630]
[121.04931641 -6.20164871]
[113.08056641 -18.94705963]
[107.20385742 -32.78218842]
[103.56391144 -47.36633301]
[102.25036621 -62.34034729]
[103.29557037 -77.33547974]
[106.67378235 -91.98246765]
[112.30181122 -105.92060852]
[120.04106140 -118.80666351]
[129.70095825 -130.32330322]
[141.04359436 -140.18693542]
[153.78965759 -148.15463257]
[167.62527466 -154.03019714]
[182.20971680 -157.66893005]
[197.18383789 -158.98124695]
[212.17889404 -157.93479919]
[226.82559204 -154.55538940]
[240.76327515 -148.92620850]
[253.64869690 -141.18588257]
[265.16455078 -131.52505493]
[275.02722168 -120.18160248]
[282.99386597 -107.43487549]
[288.86828613 -93.59877777]
[292.50582886 -79.01403046]
[293.81689453 -64.03980255]
[292.76922607 -49.04483795]
[289.38861084 -34.39841080]
[283.75827026 -20.46119881]
[276.01687622 -7.57641888]
[266.35510254 3.93863058]
[255.01083374 13.80038071]
[242.26345825 21.76597786]
[228.42686462 27.63925934]
[213.84182739 31.27559280]
[198.86749268 32.58543015]
[183.87260437 31.53651428]
[169.22645569 28.15467644]
[155.28971863 22.52319717]
[147.56562805 35.38159943]
[139.84155273 48.24000168]
[132.11746216 61.09840393]
[124.39337921 73.95681000]
[116.66928864 86.81520844]
[120.50374603 117.36412048]
[84.31929779 128.44827271]
[86.49613190 143.28947449]
[88.67296600 158.13069153]
[90.84980774 172.97189331]
[93.02664185 187.81309509]
[96.35236359 192.00346375]
[97.57057190 196.59349060]
[96.88992310 200.69696045]
[94.84621429 203.64495850]
[103.70387268 216.75421143]
[97.05130768 230.08059692]
[98.29817963 245.02868652]
[99.54505920 259.97677612]
[100.79193115 274.92486572]
[113.44454956 277.05194092]
[125.28332520 281.97457886]
[135.69966125 289.43551636]
[144.15905762 299.04699707]
[150.22850037 310.31112671]
[153.59864807 322.64553833]
[154.09965515 335.41354370]
[151.70960999 347.95693970]
[146.55555725 359.63009644]
[138.90669250 369.83300781]
[129.16038513 378.04220581]
[117.82142639 383.83767700]
[105.47595978 386.92422485]
[105.47595978 401.92422485]
[105.47595978 416.92422485]
[105.47595978 431.92422485]
[105.47595978 446.92422485]
[105.47595978 461.92422485]
[105.47595978 476.92422485]
[105.47595978 491.92422485]
[105.47595978 506.92422485]
[105.47595978 521.92419434]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[19 128]
[20 127]
[21 126]
[22 125]
[24 123]
[25 119]
[26 118]
[27 117]
[28 116]
[29 115]
[30 47]
[31 46]
[32 45]
[48 62]
[49 61]
[50 60]
[52 59]
[53 58]
[64 113]
[65 112]
[66 111]
[67 110]
[68 109]
[69 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
