%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAAGCGAACUACUAUACUCAAUUGAUCCAAUAACUUGACCAACGGAACAAGUUACCCUAGxxxxxxxxxxGCCCGUAUUUACCCUAUAGCACCCCCUCUACCCCCUCUAGAGCCCACUGUAAAGCUAACUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[205.57708740 218.30213928]
[195.59436035 207.10636902]
[185.61163330 195.91061401]
[175.62890625 184.71484375]
[165.64617920 173.51907349]
[155.20635986 162.74827576]
[144.32754517 152.42106628]
[133.44871521 142.09385681]
[122.56989288 131.76664734]
[111.69106293 121.43945312]
[105.04329681 123.89343262]
[97.97085571 124.33544159]
[91.06928253 122.72824860]
[81.56092072 134.32958984]
[79.43545532 150.59040833]
[64.18872070 156.62937927]
[51.50524902 146.23411560]
[54.43270874 130.09837341]
[69.95957947 124.82122803]
[79.46794128 113.21988678]
[75.59200287 99.23802948]
[80.33251190 85.52516174]
[71.56630707 73.35332489]
[62.80009842 61.18148804]
[54.03388977 49.00965118]
[45.26768494 36.83781433]
[33.76588058 27.20928764]
[20.24169159 20.72112274]
[2.69175744 33.16813660]
[-20.13178253 31.26674271]
[-37.35697937 14.14078236]
[-52.31722641 15.23209286]
[-67.27747345 16.32340431]
[-82.23772430 17.41471481]
[-97.59498596 24.59739113]
[-108.74827576 11.82866001]
[-99.56608582 -2.42349029]
[-83.32903290 2.45446539]
[-68.36878967 1.36315477]
[-53.40853882 0.27184421]
[-38.44828796 -0.81946635]
[-34.44054794 -15.27415466]
[-46.70291901 -23.91327095]
[-58.96528625 -32.55238724]
[-71.22765350 -41.19150162]
[-83.49002075 -49.83061981]
[-95.75238800 -58.46973419]
[-114.09726715 -59.67200089]
[-120.89782715 -75.81982422]
[-133.33726501 -84.20197296]
[-149.85134888 -88.03882599]
[-150.73599243 -104.96967316]
[-134.71170044 -110.50667572]
[-124.95512390 -96.64141083]
[-112.51568604 -88.25926971]
[-100.54467010 -90.25981140]
[-90.09944153 -83.32324219]
[-87.11327362 -70.73210144]
[-74.85090637 -62.09298706]
[-62.58853912 -53.45387268]
[-50.32616806 -44.81475449]
[-38.06380081 -36.17564011]
[-25.80143356 -27.53652382]
[-12.34027672 -33.16928864]
[1.83932579 -33.00013351]
[14.41017723 -27.38205910]
[23.43711281 -17.53608322]
[27.67391586 -5.30259037]
[26.72985649 7.19693184]
[40.25404739 13.68509674]
[32.06380463 1.11847556]
[27.05462265 -13.02040958]
[25.50681114 -27.94033813]
[27.50698853 -42.80638504]
[32.94322205 -56.78663254]
[41.51130295 -69.09873962]
[52.73174667 -79.05371857]
[65.97666168 -86.09448242]
[80.50484467 -89.82701874]
[95.50329590 -90.04245758]
[110.13269806 -86.72874451]
[123.57437134 -80.07131195]
[135.07611084 -70.44271851]
[143.99429321 -58.38178253]
[149.82983398 -44.56344223]
[152.25616455 -29.76097870]
[151.13752747 -14.80274868]
[146.53651428 -0.52582198]
[138.71060181 12.27085686]
[128.09771729 22.87117958]
[115.29178619 30.68194389]
[101.00942230 35.26605606]
[86.04987335 36.36698532]
[71.25029755 33.92312622]
[57.43952179 28.07160568]
[66.20572662 40.24344254]
[74.97193909 52.41527939]
[83.73814392 64.58712006]
[92.50434875 76.75895691]
[110.94348907 78.16949463]
[123.10662079 92.09967041]
[122.01827240 110.56062317]
[132.89709473 120.88783264]
[143.77592468 131.21504211]
[154.65473938 141.54223633]
[165.53356934 151.86944580]
[169.93646240 152.75033569]
[173.44772339 154.80998230]
[175.80128479 157.61045837]
[176.90563965 160.67221069]
[176.84194946 163.53634644]
[186.82467651 174.73211670]
[196.80740356 185.92788696]
[206.79013062 197.12364197]
[216.77285767 208.31941223]
[229.48712158 200.29463196]
[243.34887695 194.47213745]
[257.97998047 191.01077271]
[272.98123169 190.00495911]
[287.94345093 191.48214722]
[302.45843506 195.40203857]
[316.13018799 201.65769958]
[328.58572388 210.07844543]
[339.48529053 220.43458557]
[348.53149414 232.44357300]
[355.47760010 245.77780151]
[360.13406372 260.07351685]
[362.37387085 274.94070435]
[362.13592529 289.97375488]
[359.42669678 304.76260376]
[354.32012939 318.90377808]
[346.95550537 332.01150513]
[337.53375244 343.72817993]
[326.31188965 353.73416138]
[313.59606934 361.75650024]
[299.73318481 367.57632446]
[285.10144043 371.03488159]
[270.09997559 372.03778076]
[255.13804626 370.55770874]
[240.62384033 366.63504028]
[226.95329285 360.37673950]
[214.49935913 351.95358276]
[203.60180664 341.59536743]
[194.55789185 329.58462524]
[187.61437988 316.24905396]
[182.96066284 301.95245361]
[180.72372437 287.08483887]
[180.96456909 272.05181885]
[183.67663574 257.26348877]
[188.78593445 243.12329102]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 115]
[2 114]
[3 113]
[4 112]
[5 111]
[6 106]
[7 105]
[8 104]
[9 103]
[10 102]
[13 20]
[14 19]
[22 99]
[23 98]
[24 97]
[25 96]
[26 95]
[27 70]
[28 69]
[31 41]
[32 40]
[33 39]
[34 38]
[42 63]
[43 62]
[44 61]
[45 60]
[46 59]
[47 58]
[49 55]
[50 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
