%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACAGGUCUAUCACCCUAUUAACCACUCACGGGAGCUCUCCAUGCAUUUGGUAUUUUCGUxxxxxxxxxxGACAUUGGAACACUAUACCUAUUAUUCGGCGCAUGAGCUGGAGUCCUAGGCACAGCUCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[126.73518372 378.79699707]
[126.73518372 363.79699707]
[126.73518372 348.79699707]
[126.73518372 333.79699707]
[126.73518372 318.79699707]
[126.73518372 303.79699707]
[126.73518372 288.79699707]
[126.73518372 273.79699707]
[126.73518372 258.79699707]
[126.73518372 243.79699707]
[125.17760468 228.87809753]
[112.59590149 220.98908997]
[109.24468994 206.14915466]
[117.60469818 193.00578308]
[114.50637817 178.32925415]
[111.40805817 163.65274048]
[101.20873260 152.79809570]
[105.92868805 137.69735718]
[102.83036804 123.02082825]
[99.00984955 137.52612305]
[84.97221375 142.81242371]
[72.53275299 134.43031311]
[72.16159058 119.43489838]
[84.17120361 110.44761658]
[69.40515137 113.08647919]
[54.63909149 115.72534180]
[51.41751480 130.58097839]
[42.75205231 143.07009888]
[29.96412277 151.28820801]
[15.00379658 153.98210144]
[0.15241280 150.74098206]
[-12.32530022 142.05909729]
[-20.52658081 129.26037598]
[-23.20079422 114.29651642]
[-19.94014359 99.44940948]
[-11.24185085 86.98313141]
[1.56765378 78.79869080]
[16.53501511 76.14416504]
[31.37782097 79.42434692]
[43.83264923 88.13902283]
[52.00022888 100.95928955]
[66.76628113 98.32041931]
[81.53234100 95.68155670]
[92.51800537 85.46807861]
[96.22416687 70.93314362]
[99.93032837 56.39820480]
[103.63648987 41.86326981]
[102.18089294 36.71537399]
[102.82418060 32.01021194]
[105.03252411 28.48531151]
[108.05384827 26.55165100]
[112.65941620 12.27618980]
[117.26497650 -1.99927068]
[121.87054443 -16.27473068]
[126.47611237 -30.55019188]
[129.87908936 -45.15908432]
[132.05592346 -60.00028992]
[124.98005676 -70.83477020]
[127.14060974 -83.18592072]
[136.83332825 -90.49062347]
[139.31843567 -105.28333282]
[141.80355835 -120.07604218]
[144.28868103 -134.86874390]
[146.77378845 -149.66145325]
[132.70228577 -154.99801636]
[119.94243622 -162.97750854]
[108.98468781 -173.29322815]
[100.25023651 -185.54866028]
[94.07481384 -199.27273560]
[90.69577789 -213.93794250]
[90.24301147 -228.98059082]
[92.73391724 -243.82247925]
[98.07276154 -257.89312744]
[106.05432129 -270.65170288]
[116.37181854 -281.60775757]
[128.62866211 -290.34024048]
[142.35374451 -296.51342773]
[157.01950073 -299.89010620]
[172.06221008 -300.34042358]
[186.90370178 -297.84710693]
[200.97348022 -292.50601196]
[213.73074341 -284.52236938]
[224.68515015 -274.20309448]
[233.41563416 -261.94485474]
[239.58662415 -248.21876526]
[242.96090698 -233.55247498]
[243.40879822 -218.50967407]
[240.91308594 -203.66859436]
[235.56968689 -189.59968567]
[227.58399963 -176.84370422]
[217.26295471 -165.89097595]
[205.00329590 -157.16247559]
[191.27621460 -150.99371338]
[176.60937500 -147.62179565]
[161.56649780 -147.17633057]
[159.08139038 -132.38362122]
[156.59626770 -117.59091949]
[154.11114502 -102.79821014]
[151.62602234 -88.00550842]
[158.65525818 -71.95590210]
[146.89712524 -57.82345200]
[144.72029114 -42.98224640]
[156.47015381 -52.30646133]
[171.44894409 -53.10383224]
[184.12229919 -45.07975388]
[189.80767822 -31.19896126]
[186.40444946 -16.59012794]
[175.17001343 -6.65093088]
[160.25529480 -5.05370331]
[147.17097473 -12.38858986]
[140.75157166 -25.94462776]
[136.14601135 -11.66916656]
[131.54043579 2.60629368]
[126.93487549 16.88175392]
[122.32931519 31.15721512]
[118.17142487 45.56943130]
[114.46526337 60.10436630]
[110.75910187 74.63930511]
[107.05294037 89.17424011]
[116.21585083 93.54264832]
[121.38134003 105.12917328]
[117.50688934 119.92250824]
[120.60520935 134.59902954]
[131.02615356 146.50343323]
[126.08457947 160.55441284]
[129.18290710 175.23094177]
[132.28121948 189.90747070]
[145.24043274 198.55018616]
[148.17350769 213.47840881]
[139.85412598 225.77976990]
[146.58651733 212.37547302]
[159.04292297 204.01856995]
[173.99905396 202.87220764]
[187.58355713 209.23312378]
[196.28013611 221.45481873]
[197.83767700 236.37373352]
[191.85305786 250.12815857]
[179.87535095 259.15780640]
[165.00494385 261.12536621]
[151.09101868 255.52156067]
[141.73518372 243.79699707]
[141.73518372 258.79699707]
[141.73518372 273.79699707]
[141.73518372 288.79699707]
[141.73518372 303.79699707]
[141.73518372 318.79699707]
[141.73518372 333.79699707]
[141.73518372 348.79699707]
[141.73518372 363.79699707]
[141.73518372 378.79699707]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 130]
[14 127]
[15 126]
[16 125]
[18 123]
[19 122]
[24 43]
[25 42]
[26 41]
[44 119]
[45 118]
[46 117]
[47 116]
[51 115]
[52 114]
[53 113]
[54 112]
[55 111]
[56 102]
[57 101]
[60 99]
[61 98]
[62 97]
[63 96]
[64 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
