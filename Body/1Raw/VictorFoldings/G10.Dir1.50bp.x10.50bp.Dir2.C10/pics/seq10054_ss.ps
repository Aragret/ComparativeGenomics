%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACGCCUGAACGCAGGCACAUACUUCCUAUUCUACACCCUAGUAGGCUCCCUUCCCCUACUxxxxxxxxxxGUUUCUACUCCAAAGACCACAUCAUCGAAACCGCAAACAUAUCAUACACAAACGCCUGAGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[256.87811279 98.29618835]
[253.48033142 83.76526642]
[238.65785217 86.06613922]
[223.83535767 88.36701965]
[209.01287842 90.66789246]
[194.19039917 92.96876526]
[179.36791992 95.26964569]
[164.54544067 97.57051849]
[149.72296143 99.87139130]
[134.90046692 102.17226410]
[120.07798767 104.47314453]
[113.94361877 115.12316895]
[102.83155823 120.37442017]
[90.70866394 118.35227203]
[79.52037048 128.34336853]
[68.33206940 138.33445740]
[57.14377594 148.32556152]
[45.95547867 158.31665039]
[41.34056091 174.05307007]
[25.34326363 177.66117859]
[14.42023277 165.42927551]
[19.80814552 149.94049072]
[35.96438217 147.12835693]
[47.15267944 137.13726807]
[58.34097672 127.14616394]
[69.52927399 117.15506744]
[80.71756744 107.16397095]
[80.21501923 105.62931061]
[79.83440399 104.05995941]
[64.90031433 109.28334045]
[53.70996857 99.45352173]
[38.93785095 96.84879303]
[24.16573524 94.24407196]
[9.39361954 91.63935089]
[1.83595502 104.77927399]
[-9.76204300 114.53951263]
[-23.99985886 119.74147034]
[-39.15821075 119.75698853]
[-53.40664673 114.58419037]
[-65.02460480 104.84772491]
[-72.60916138 91.72330475]
[-75.24443817 76.79577637]
[-72.61222076 61.86771011]
[-65.03034973 48.74173737]
[-53.41438675 39.00289154]
[-39.16700745 33.82717896]
[-24.00865364 33.83959198]
[-9.76977253 39.03863907]
[1.83022332 48.79650116]
[9.39057827 61.93487549]
[11.99834156 76.86723328]
[26.77045822 79.47195435]
[41.54257584 82.07667542]
[56.31468964 84.68140411]
[70.19217682 79.27171326]
[82.43912506 89.28784180]
[100.21118164 79.43084717]
[117.77711487 89.65065765]
[132.59959412 87.34978485]
[147.42207336 85.04891205]
[162.24456787 82.74803162]
[177.06704712 80.44715881]
[191.88952637 78.14628601]
[206.71200562 75.84541321]
[221.53448486 73.54453278]
[236.35696411 71.24365997]
[251.17945862 68.94278717]
[250.00549316 53.89615631]
[249.97938538 38.80409241]
[251.10124207 23.75403214]
[253.36453247 8.83316326]
[256.75607300 -5.87207174]
[261.25622559 -20.27648735]
[266.83883667 -34.29664230]
[273.47155762 -47.85132217]
[281.11587524 -60.86201859]
[289.72750854 -73.25337219]
[299.25653076 -84.95361328]
[309.64767456 -95.89498138]
[320.84072876 -106.01412201]
[332.77081299 -115.25242615]
[345.36880493 -123.55641174]
[358.56164551 -130.87800598]
[372.27291870 -137.17481995]
[386.42315674 -142.41041565]
[400.93035889 -146.55448914]
[415.71047974 -149.58308411]
[430.67788696 -151.47868347]
[445.74581909 -152.23034668]
[460.82702637 -151.83377075]
[475.83410645 -150.29127502]
[490.68014526 -147.61184692]
[505.27908325 -143.81105042]
[519.54638672 -138.91096497]
[533.39947510 -132.93998718]
[546.75793457 -125.93275452]
[559.54455566 -117.92991638]
[571.68524170 -108.97785950]
[583.10961914 -99.12848663]
[593.75158691 -88.43889618]
[603.54943848 -76.97103882]
[612.44653320 -64.79138947]
[620.39135742 -51.97053146]
[627.33782959 -38.58276749]
[633.24578857 -24.70567894]
[638.08105469 -10.41968155]
[641.81567383 4.19244432]
[656.58776855 1.58772147]
[668.79565430 -9.36220264]
[684.29620361 -4.00838947]
[687.14392090 12.14161777]
[674.40924072 22.47407722]
[659.19250488 16.35983849]
[644.42041016 18.96455956]
[645.89825439 33.80362320]
[646.25592041 48.71206284]
[645.49133301 63.60544205]
[643.60876465 78.39939880]
[640.61883545 93.01012421]
[636.53851318 107.35485840]
[631.39080811 121.35234070]
[625.20483398 134.92326355]
[618.01562500 147.99075317]
[609.86389160 160.48075867]
[600.79565430 172.32254028]
[590.86242676 183.44897461]
[580.12030029 193.79701233]
[568.63012695 203.30801392]
[556.45703125 211.92810059]
[543.66986084 219.60838318]
[530.34106445 226.30534363]
[516.54614258 231.98100281]
[502.36312866 236.60317993]
[487.87243652 240.14566040]
[473.15609741 242.58834839]
[458.29748535 243.91734314]
[443.38070679 244.12510681]
[428.49032593 243.21040344]
[413.71063232 241.17837524]
[399.12536621 238.04051208]
[384.81716919 233.81452942]
[370.86706543 228.52433777]
[357.35409546 222.19987488]
[344.35479736 214.87690735]
[331.94287109 206.59687805]
[320.18859863 197.40667725]
[309.15859985 187.35830688]
[298.91540527 176.50866699]
[289.51699829 164.91918945]
[281.01669312 152.65548706]
[273.46264648 139.78698730]
[266.89767456 126.38659668]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 67]
[3 66]
[4 65]
[5 64]
[6 63]
[7 62]
[8 61]
[9 60]
[10 59]
[11 58]
[14 27]
[15 26]
[16 25]
[17 24]
[18 23]
[29 56]
[31 54]
[32 53]
[33 52]
[34 51]
[107 114]
[108 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
