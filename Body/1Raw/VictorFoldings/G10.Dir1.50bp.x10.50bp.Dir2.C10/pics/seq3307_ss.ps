%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUACUCCUCAUUGUACCCAUUCUAAUCGCAAUGGCAUUCCUAAUGCUUACCGAACGAAAxxxxxxxxxxCUGAACGCAGGCACAUACUUCCUAUUCUACACCCUAGUAGGCUCCCUUCCCCUACUCAUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[171.99946594 363.17715454]
[171.68740845 348.18038940]
[171.37535095 333.18365479]
[171.06329346 318.18688965]
[170.75123596 303.19015503]
[170.43917847 288.19338989]
[170.12712097 273.19662476]
[169.81506348 258.19989014]
[169.50302124 243.20312500]
[166.40469360 228.52659607]
[160.62841797 214.68338013]
[154.85214233 200.84016418]
[149.07588196 186.99694824]
[143.29960632 173.15373230]
[137.52333069 159.31051636]
[131.74705505 145.46730042]
[122.72953033 133.48045349]
[111.02990723 124.09329987]
[99.33028412 114.70613861]
[84.68678284 111.45531464]
[70.11407471 115.01007080]
[55.54137421 118.56483459]
[40.96866989 122.11959839]
[26.39596748 125.67436218]
[11.82326508 129.22912598]
[9.14408398 144.22052002]
[0.59360826 156.82246399]
[-12.34674072 164.85162354]
[-27.43496895 166.91687012]
[-42.05694962 162.66040039]
[-53.67933655 152.81965637]
[-60.28848267 139.09963989]
[-60.73931122 123.87739563]
[-54.95371246 109.79028320]
[-43.93407822 99.27897644]
[-29.58962631 94.16462708]
[-14.40561962 95.33332062]
[-1.01277971 102.58257294]
[8.26850319 114.65641785]
[22.84120560 111.10165405]
[37.41390991 107.54689789]
[51.98661041 103.99213409]
[66.55931854 100.43737030]
[81.13201904 96.88260651]
[83.46311951 82.06484985]
[70.68576050 74.20742798]
[57.90840530 66.34999847]
[45.13105011 58.49257278]
[32.35369110 50.63514709]
[15.69429779 47.48857498]
[14.10612011 30.60918045]
[29.88621140 24.41038704]
[40.21111679 37.85779190]
[52.98847580 45.71521759]
[65.76583099 53.57264328]
[78.54319000 61.43006897]
[91.32054901 69.28749084]
[97.94184113 65.76492310]
[90.49570465 52.74359512]
[77.96263885 44.50209427]
[78.65785217 29.51821136]
[91.90019226 22.47261620]
[104.71530151 30.26832581]
[104.54685974 45.26829529]
[111.18442535 58.71979141]
[117.80571747 55.19722366]
[118.42969513 40.21020889]
[104.24272156 34.95806503]
[92.37436676 25.57737350]
[83.98737335 12.98715878]
[79.90341187 -1.57911813]
[80.52258301 -16.69440269]
[85.78423309 -30.87785149]
[95.17287445 -42.73991776]
[107.76870728 -51.11847305]
[122.33771515 -55.19267654]
[137.45257568 -54.56337738]
[151.63250732 -49.29222488]
[163.48826599 -39.89563751]
[171.85838318 -27.29419518]
[175.92282104 -12.72245789]
[175.28340149 2.39198303]
[170.00274658 16.56836891]
[160.59822083 28.41784096]
[147.99116516 36.77951050]
[133.41671753 40.83418655]
[132.79273987 55.82120132]
[130.68502808 90.50551605]
[108.71744537 103.00651550]
[120.41706848 112.39367676]
[132.11668396 121.78083801]
[126.99092865 107.68379211]
[125.31997681 92.77715302]
[127.19733429 77.89510345]
[132.51794434 63.87044144]
[140.98406982 51.48800659]
[152.12193298 41.44071960]
[165.30825806 34.29083252]
[179.80513000 30.43846321]
[194.80130005 30.09918785]
[209.45755005 33.29199219]
[222.95373535 39.83820724]
[234.53460693 49.37150192]
[243.55206299 61.35838699]
[249.50149536 75.12806702]
[252.04997253 89.90999603]
[251.05488586 104.87695312]
[246.57191467 119.19138336]
[238.85192871 132.05224609]
[228.32693481 142.73983765]
[215.58593750 150.65608215]
[201.34191895 155.35795593]
[186.39196777 156.58238220]
[171.57270813 154.26080322]
[157.71343994 148.52314758]
[145.59027100 139.69102478]
[151.36654663 153.53424072]
[157.14282227 167.37745667]
[162.91909790 181.22067261]
[168.69535828 195.06388855]
[174.47163391 208.90710449]
[180.24790955 222.75032043]
[182.61465454 207.93821716]
[189.36497498 194.54295349]
[199.86213684 183.82803345]
[213.11601257 176.80413818]
[227.87640381 174.13380432]
[242.75105286 176.06890869]
[256.33691406 182.42691040]
[267.35250854 192.60812378]
[274.75878906 205.65216064]
[277.85711670 220.32868958]
[276.35531616 235.25331116]
[270.39498901 249.01829529]
[260.53836060 260.32522583]
[247.71514893 268.10760498]
[233.13491821 271.63134766]
[218.17292786 270.56408691]
[204.24047852 265.00646973]
[192.65174866 255.48275757]
[184.49977112 242.89106750]
[184.81182861 257.88781738]
[185.12388611 272.88458252]
[185.43594360 287.88131714]
[185.74798584 302.87808228]
[186.06004333 317.87484741]
[186.37210083 332.87158203]
[186.68415833 347.86834717]
[186.99621582 362.86511230]
[189.58721924 382.07281494]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 122]
[11 121]
[12 120]
[13 119]
[14 118]
[15 117]
[16 116]
[17 91]
[18 90]
[19 89]
[20 44]
[21 43]
[22 42]
[23 41]
[24 40]
[25 39]
[45 57]
[46 56]
[47 55]
[48 54]
[49 53]
[66 87]
[67 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
