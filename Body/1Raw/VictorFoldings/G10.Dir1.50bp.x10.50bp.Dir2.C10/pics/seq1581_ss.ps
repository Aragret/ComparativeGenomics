%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUCUUGCUCAGCCUAUAUACCGCCAUCUUCAGCAAACCCUGAUGAAGGCUACAAAGUAAGCGxxxxxxxxxxAACAACCUAUUCCAACUGUUCAUCGGCUGAGAGGGCGUAGGAAUUAUAUCCUUCUUGCUCAUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[287.60626221 504.72351074]
[287.30612183 489.72650146]
[287.00598145 474.72952271]
[286.70587158 459.73251343]
[286.40573120 444.73550415]
[286.10559082 429.73852539]
[285.80548096 414.74151611]
[285.50534058 399.74453735]
[285.20520020 384.74752808]
[280.91381836 370.37451172]
[272.94241333 357.66793823]
[264.97100830 344.96136475]
[258.71731567 340.94403076]
[256.97018433 331.91986084]
[249.25460815 319.05633545]
[244.86891174 317.04031372]
[241.73002625 312.21829224]
[241.49957275 305.52017212]
[234.30485535 292.35824585]
[227.11013794 279.19635010]
[219.91540527 266.03442383]
[212.72068787 252.87251282]
[205.52597046 239.71060181]
[198.33125305 226.54869080]
[185.43745422 219.09219360]
[185.60740662 203.27189636]
[178.41268921 190.10998535]
[164.09178162 186.17967224]
[156.60781860 172.93411255]
[160.82737732 157.93968201]
[153.63265991 144.77777100]
[143.18643188 134.01318359]
[130.24635315 126.42670441]
[117.30628967 118.84022522]
[104.82495117 127.16183472]
[88.71182251 127.35402679]
[74.14266205 118.15821838]
[66.43324280 101.51314545]
[52.34356308 96.36717987]
[38.25388718 91.22120667]
[24.16420937 86.07524109]
[10.07453156 80.92926788]
[-5.54252672 83.46266174]
[-14.84300995 71.82864380]
[-28.93268776 66.68267822]
[-44.02783585 72.11554718]
[-57.61096954 63.57868576]
[-59.26227570 47.62084198]
[-47.71500778 36.48350906]
[-31.82724571 38.71029663]
[-23.78671837 52.59299850]
[-9.69704151 57.73896790]
[4.91222858 54.83750534]
[15.22049999 66.83959198]
[29.31017685 71.98556519]
[43.39985657 77.13153076]
[57.48953247 82.27749634]
[71.57920837 87.42346954]
[80.77993011 75.57666779]
[72.30652618 63.19920731]
[63.83311844 50.82175064]
[48.81867981 44.22640610]
[47.29239273 27.89843750]
[60.82437515 18.63466454]
[75.49407959 25.96485901]
[76.21057892 42.34834671]
[84.68398285 54.72580338]
[93.15738678 67.10325623]
[113.85379791 72.34829712]
[125.60229492 88.04668427]
[124.89276886 105.90016174]
[137.83283997 113.48664093]
[150.77290344 121.07312012]
[143.57516479 107.91285706]
[139.31802368 93.52964783]
[138.19340515 78.57186127]
[140.25201416 63.71379471]
[145.40103149 49.62523270]
[153.40835571 36.94127655]
[163.91302490 26.23370552]
[176.44148254 17.98521042]
[190.42897034 12.56762600]
[205.24493408 10.22517300]
[220.22149658 11.06344604]
[234.68350220 15.04465771]
[247.97904968 21.98933792]
[259.50875854 31.58442497]
[268.75289917 43.39738083]
[275.29473877 56.89569092]
[278.83938599 71.47085571]
[279.22705078 86.46585083]
[276.44024658 101.20469666]
[270.60458374 115.02299500]
[261.98318481 127.29782104]
[250.96466064 137.47583008]
[238.04571533 145.09822083]
[223.80871582 149.82138062]
[208.89547729 151.43237305]
[193.97827148 149.85859680]
[179.72953796 145.17097473]
[166.79457092 137.58303833]
[173.98928833 150.74496460]
[188.88882446 155.28828430]
[195.99778748 168.73883057]
[191.57460022 182.91525269]
[198.76931763 196.07717896]
[212.17773438 204.47509766]
[211.49316406 219.35397339]
[218.68788147 232.51588440]
[225.88259888 245.67779541]
[233.07733154 258.83972168]
[240.27204895 272.00161743]
[247.46676636 285.16354370]
[254.66148376 298.32543945]
[262.11813354 311.34078979]
[269.83367920 324.20428467]
[277.67755127 336.98995972]
[285.64895630 349.69653320]
[293.62036133 362.40310669]
[293.31680298 347.40615845]
[296.18618774 332.68316650]
[302.09921265 318.89782715]
[310.78930664 306.67150879]
[321.86471558 296.55545044]
[334.82620239 289.00561523]
[349.08944702 284.36236572]
[364.01147461 282.83499146]
[378.91964722 284.49237061]
[393.14187622 289.25979614]
[406.03704834 296.92236328]
[417.02383423 307.13461304]
[425.60702515 319.43618774]
[431.39962769 333.27258301]
[434.14056396 348.02001953]
[433.70626831 363.01373291]
[430.11627197 377.57781982]
[423.53247070 391.05569458]
[414.25164795 402.83984375]
[402.69210815 412.39901733]
[389.37503052 419.30227661]
[374.90069580 423.23849487]
[359.92160034 424.03015137]
[345.11300659 421.64160156]
[331.14242554 416.18054199]
[318.63970947 407.89309692]
[308.16839600 397.15289307]
[300.20220947 384.44738770]
[300.50231934 399.44439697]
[300.80245972 414.44137573]
[301.10260010 429.43838501]
[301.40274048 444.43539429]
[301.70285034 459.43237305]
[302.00299072 474.42938232]
[302.30313110 489.42636108]
[302.60327148 504.42337036]
[305.17898560 523.63317871]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 155]
[2 154]
[3 153]
[4 152]
[5 151]
[6 150]
[7 149]
[8 148]
[9 147]
[10 119]
[11 118]
[12 117]
[14 116]
[15 115]
[18 114]
[19 113]
[20 112]
[21 111]
[22 110]
[23 109]
[24 108]
[26 106]
[27 105]
[30 102]
[31 101]
[32 73]
[33 72]
[34 71]
[38 58]
[39 57]
[40 56]
[41 55]
[42 54]
[44 52]
[45 51]
[59 68]
[60 67]
[61 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
