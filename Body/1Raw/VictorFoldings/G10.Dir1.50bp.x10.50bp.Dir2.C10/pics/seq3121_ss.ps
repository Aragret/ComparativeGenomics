%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAUCAUCUCAACUUAGUAUUAUACCCACACCCACCCAAGAACAGGGUUUGUUAAGAUGGCxxxxxxxxxxCUAGUCCUGUAUGCCCUUUUCCUAACACUCACAACAAAACUAACUAAUACUAACAUCUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[110.55468750 294.49276733]
[110.24263000 279.49603271]
[109.93057251 264.49926758]
[109.61852264 249.50251770]
[109.30646515 234.50576782]
[108.99440765 219.50900269]
[108.68235016 204.51225281]
[108.37029266 189.51550293]
[108.05823517 174.51875305]
[106.19062805 159.63546753]
[102.78765106 145.02658081]
[99.38466644 130.41767883]
[95.98168945 115.80879211]
[84.89037323 105.71014404]
[70.02732849 103.68780518]
[55.16428375 101.66547394]
[40.30123520 99.64313507]
[25.43818855 97.62080383]
[10.51927662 96.06322479]
[-4.44097185 94.97190857]
[-19.40122032 93.88059998]
[-7.17624140 102.57254791]
[2.30974483 114.19218445]
[8.37907982 127.90944672]
[10.59818268 142.74438477]
[8.80852699 157.63723755]
[3.13796043 171.52409363]
[-6.00842285 183.41290283]
[-17.97722626 192.45434570]
[-31.91342545 198.00253296]
[-46.82144547 199.66111755]
[-61.63629532 197.31159973]
[-75.29963684 191.12182617]
[-86.83538055 181.53399658]
[-95.41944122 169.23301697]
[-100.43860626 155.09767151]
[-101.53430176 140.13774109]
[-98.62825775 125.42194366]
[-91.92807770 112.00152588]
[-81.91240692 100.83522034]
[-69.29674530 92.72072601]
[-54.98232269 88.23772430]
[-39.99720001 87.70592499]
[-53.09035492 80.38681793]
[-66.18350983 73.06771088]
[-79.27666473 65.74860382]
[-93.83037567 71.46903992]
[-108.63967896 66.44721985]
[-116.71205902 53.05428696]
[-114.23599243 37.61397552]
[-102.38060760 27.41673470]
[-86.74364471 27.27738571]
[-74.70840454 37.26172256]
[-71.95755768 52.65545273]
[-58.86440277 59.97455597]
[-45.77124786 67.29366302]
[-32.67809296 74.61277008]
[-18.30990982 78.92035675]
[-3.34966159 80.01166534]
[11.61058712 81.10297394]
[14.53717613 79.02870941]
[18.63333511 78.30541229]
[23.23578644 79.47580719]
[27.46052361 82.75775909]
[42.32357025 84.78009033]
[57.18661880 86.80242920]
[72.04966736 88.82476044]
[86.91271210 90.84709167]
[72.08715057 88.56614685]
[59.26715469 80.77848053]
[50.40969849 68.67288208]
[46.86686707 54.09727478]
[49.17947388 39.27661896]
[56.99449921 26.47328758]
[69.11898804 17.64170265]
[83.70212555 14.13000870]
[98.51780701 16.47426414]
[111.30442047 24.31661797]
[120.11009216 36.45993805]
[123.59062958 51.05054474]
[121.21474457 65.86119080]
[113.34316254 78.63310242]
[126.72944641 71.86499023]
[140.11573792 65.09687042]
[153.50201416 58.32875824]
[158.52172852 43.58290100]
[172.19374084 36.90976334]
[186.22071838 41.78615952]
[199.60700989 35.01804352]
[212.99328613 28.24992943]
[219.28996277 21.54144669]
[226.72920227 21.48352623]
[240.25340271 14.99536037]
[238.22691345 0.00374384]
[240.93428040 -14.87998486]
[248.11024475 -28.19766808]
[259.05178833 -38.64457703]
[272.68695068 -45.19722748]
[287.67993164 -47.21366119]
[302.56182861 -44.49632645]
[315.87472534 -37.31143951]
[326.31430054 -26.36289978]
[332.85778809 -12.72334003]
[334.86419678 2.27097893]
[332.13687134 17.15106583]
[324.94308472 30.45912170]
[313.98754883 40.89135742]
[300.34359741 47.42572784]
[285.34793091 49.42206955]
[270.46969604 46.68479156]
[257.16644287 39.48206711]
[246.74156189 28.51955032]
[233.21737671 35.00771713]
[219.76141357 41.63621521]
[206.37512207 48.40432739]
[192.98883057 55.17244339]
[188.60043335 69.35967255]
[175.12124634 76.41419983]
[160.27012634 71.71504211]
[146.88385010 78.48315430]
[133.49755859 85.25127411]
[120.11128235 92.01938629]
[135.03407288 93.53926086]
[142.43769836 106.58482361]
[136.09059143 120.17578888]
[121.33506012 122.87283325]
[110.59058380 112.40581512]
[113.99356079 127.01470947]
[117.39653778 141.62359619]
[120.79951477 156.23249817]
[127.25158691 142.69104004]
[139.53144836 134.07681274]
[154.46049500 132.61955261]
[168.17437744 138.69648743]
[177.12332153 150.73460388]
[178.99092102 165.61788940]
[173.29373169 179.49383545]
[161.50645447 188.77070618]
[146.68020630 191.04721069]
[132.65272522 185.73406982]
[123.05499268 174.20669556]
[123.36705017 189.20344543]
[123.67910767 204.20019531]
[123.99115753 219.19696045]
[124.30321503 234.19371033]
[124.61527252 249.19046021]
[124.92733002 264.18722534]
[125.23938751 279.18395996]
[125.55144501 294.18072510]
[128.14244080 313.38845825]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 130]
[11 129]
[12 128]
[13 127]
[14 68]
[15 67]
[16 66]
[17 65]
[18 64]
[19 60]
[20 59]
[21 58]
[43 57]
[44 56]
[45 55]
[46 54]
[82 122]
[83 121]
[84 120]
[85 119]
[88 116]
[89 115]
[90 114]
[92 113]
[93 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
