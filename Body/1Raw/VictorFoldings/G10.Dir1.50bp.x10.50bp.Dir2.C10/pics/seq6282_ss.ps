%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACACUAUACCUAUUAUUCGGCGCAUGAGCUGGAGUCCUAGGCACAGCUCUAAGCCUCCUxxxxxxxxxxUAAUCACAGCAGUCCUACUUCUCCUAUCUCUCCCAGUCCUAGCUGCUGGCAUCACUAUACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[82.50750732 294.46301270]
[82.50750732 279.46301270]
[82.50750732 264.46301270]
[82.50750732 249.46301270]
[82.50750732 234.46301270]
[82.50750732 219.46301270]
[82.50750732 204.46301270]
[82.50750732 189.46301270]
[82.50750732 174.46301270]
[82.50750732 159.46301270]
[76.03848267 155.66806030]
[68.84709930 168.83180237]
[61.65571594 181.99552917]
[57.66400146 196.45465088]
[42.71212769 197.65525818]
[36.46437836 184.01832581]
[47.13771057 173.47877502]
[55.11906815 160.77845764]
[63.10042572 148.07815552]
[56.63139725 144.28318787]
[43.53824615 151.60229492]
[41.83617401 167.02574158]
[31.36862183 178.48043823]
[16.16057396 181.56181335]
[2.05983448 175.08502197]
[-5.51157284 161.54052734]
[-3.64228845 146.13645935]
[6.94891024 134.79598999]
[22.18949127 131.87977600]
[36.21913910 138.50914001]
[49.31229401 131.19003296]
[46.45873642 123.20707703]
[44.82363510 115.05564880]
[44.39582825 106.91684723]
[45.13786316 98.96507263]
[46.98771286 91.36424255]
[49.86098862 84.26448059]
[36.33679581 77.77631378]
[22.81260681 71.28814697]
[9.28841782 64.79998016]
[-4.23577213 58.31181717]
[-17.75996208 51.82365036]
[-30.20754433 55.36082077]
[-41.35897064 49.62805176]
[-45.45388031 38.20268250]
[-58.84016800 31.43456841]
[-74.46971893 35.05348969]
[-86.95398712 24.97764397]
[-86.71610260 8.93635368]
[-73.93855286 -0.76487303]
[-58.42317963 3.31591392]
[-52.07205200 18.04828453]
[-38.68576813 24.81639862]
[-21.27243233 22.87327766]
[-11.27179718 38.29946136]
[2.25239277 44.78762817]
[15.77658272 51.27579117]
[29.30077362 57.76395798]
[42.82496262 64.25212097]
[56.34915161 70.74028778]
[72.65142059 55.12704086]
[93.99984741 47.79343414]
[116.45538330 50.09260941]
[135.87469482 61.60034180]
[147.57431030 52.21318054]
[159.27394104 42.82601929]
[144.40229797 44.78420639]
[129.54318237 42.73323441]
[115.75807190 36.81962585]
[104.03176117 27.46582603]
[95.20194244 15.34005833]
[89.89939880 1.30855668]
[88.50292969 -13.62629795]
[91.11230469 -28.39759254]
[97.54111481 -41.95009995]
[107.33009338 -53.31565857]
[119.77993774 -61.68233490]
[134.00126648 -66.45243073]
[148.97813416 -67.28519440]
[163.64062500 -64.12111664]
[176.94128418 -57.18624115]
[187.92994690 -46.97598267]
[195.82159424 -34.21973801]
[200.05247498 -19.82877922]
[200.32034302 -4.83117151]
[196.60606384 9.70169163]
[189.17497253 22.73161507]
[178.56230164 33.32444000]
[193.13500977 29.76968002]
[207.70771790 26.21491814]
[222.28041077 22.66015625]
[236.85311890 19.10539246]
[251.42581177 15.55063152]
[257.60458374 -0.16162834]
[271.77770996 -9.02752113]
[288.27908325 -7.73527670]
[300.64898682 3.01141572]
[315.14456177 -0.84574366]
[329.64016724 -4.70290327]
[331.27017212 -19.79288483]
[338.24468994 -33.27325821]
[349.62048340 -43.32091141]
[363.85910034 -48.57698441]
[379.03488159 -48.33063126]
[393.09536743 -42.61517334]
[404.13906860 -32.20358276]
[410.67239380 -18.50393295]
[411.81173706 -3.36899519]
[407.40301514 11.15435600]
[398.04251099 23.10195732]
[384.99609375 30.85799217]
[370.02825928 33.37351990]
[355.16323853 30.30834007]
[342.41137695 22.07699013]
[333.49731445 9.79269314]
[319.00173950 13.64985275]
[304.50613403 17.50701332]
[300.85974121 30.38722229]
[291.23648071 39.84788513]
[278.08630371 43.32981491]
[264.83255005 39.81550217]
[254.98057556 30.12333488]
[240.40788269 33.67809677]
[225.83517456 37.23285675]
[211.26246643 40.78762054]
[196.68977356 44.34238052]
[182.11706543 47.89714432]
[168.66110229 54.52564240]
[156.96147156 63.91280365]
[145.26185608 73.29996490]
[150.17601013 82.36924744]
[153.26849365 92.33879852]
[154.37556458 102.84186554]
[153.40750122 113.48226166]
[150.35374451 123.84930420]
[145.28512573 133.53363037]
[138.35287476 142.14335632]
[129.78446960 149.31990051]
[119.87630463 154.75274658]
[108.98355865 158.19270325]
[97.50750732 159.46301270]
[97.50750732 174.46301270]
[97.50750732 189.46301270]
[97.50750732 204.46301270]
[97.50750732 219.46301270]
[97.50750732 234.46301270]
[97.50750732 249.46301270]
[97.50750732 264.46301270]
[97.50750732 279.46301270]
[97.50750732 294.46301270]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[20 31]
[21 30]
[37 60]
[38 59]
[39 58]
[40 57]
[41 56]
[42 55]
[45 53]
[46 52]
[64 130]
[65 129]
[66 128]
[88 127]
[89 126]
[90 125]
[91 124]
[92 123]
[93 122]
[97 117]
[98 116]
[99 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
