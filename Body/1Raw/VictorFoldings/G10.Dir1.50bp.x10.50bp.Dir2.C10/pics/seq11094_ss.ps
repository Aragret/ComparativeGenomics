%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCCCCACCCUUACUAACAUUAACGAAAAUAACCCCACCCUACUAAACCCCAUUAAACGCCxxxxxxxxxxACUAGGAGGCGUCCUUGCCCUAUUACUAUCCAUCCUCAUCCUAGCAAUAAUCCCCAUCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[19.43611908 300.86395264]
[13.37310600 314.58401489]
[7.31009293 328.30404663]
[8.80912971 344.05407715]
[-3.41232347 352.56793213]
[-9.47533607 366.28796387]
[-15.53835011 380.00802612]
[-21.60136223 393.72808838]
[-22.47314644 410.65960693]
[-38.98431015 414.50900269]
[-47.25401306 399.70870972]
[-35.32141495 387.66506958]
[-29.25840378 373.94500732]
[-23.19539070 360.22497559]
[-17.13237762 346.50491333]
[-19.06508064 331.73623657]
[-6.40996075 322.24105835]
[-0.34694764 308.52099609]
[5.71606541 294.80093384]
[-5.85660410 288.76239014]
[-17.04417229 282.03717041]
[-27.80593872 274.64965820]
[-38.10275269 266.62680054]
[-47.89715195 257.99777222]
[-57.15351105 248.79394531]
[-65.83815002 239.04881287]
[-73.91947937 228.79783630]
[-81.36808777 218.07827759]
[-88.15689850 206.92916870]
[-94.26119232 195.39105225]
[-99.65878296 183.50590515]
[-104.33001709 171.31697083]
[-108.25790405 158.86859131]
[-111.42816162 146.20603943]
[-113.82924652 133.37539673]
[-115.45243835 120.42334747]
[-116.29181671 107.39698792]
[-116.34433746 94.34371948]
[-115.60980225 81.31102753]
[-114.09088898 68.34632111]
[-111.79312897 55.49677658]
[-108.72486877 42.80913162]
[-104.89727020 30.32954407]
[-100.32427216 18.10341454]
[-95.02249908 6.17522097]
[-89.01124573 -5.41164160]
[-82.31237793 -16.61502075]
[-74.95025635 -27.39415932]
[-66.95168304 -37.70984268]
[-58.34574127 -47.52454376]
[-49.16374588 -56.80255890]
[-39.43909836 -65.51013184]
[-29.20717621 -73.61558533]
[-18.50520515 -81.08943176]
[-7.37211609 -87.90447998]
[4.15158796 -94.03594208]
[16.02398491 -99.46150970]
[28.20188141 -104.16144562]
[40.64097977 -108.11864471]
[53.29602051 -111.31872559]
[66.12097168 -113.75003052]
[79.06916809 -115.40372467]
[92.09351349 -116.27378845]
[105.14662170 -116.35706329]
[118.18100739 -115.65322876]
[131.14924622 -114.16486359]
[144.00418091 -111.89737701]
[156.69902039 -108.85900879]
[169.18759155 -105.06082916]
[181.42445374 -100.51663971]
[193.36509705 -95.24298096]
[204.96609497 -89.25904083]
[216.18522644 -82.58657837]
[226.98167419 -75.24987793]
[237.31617737 -67.27561951]
[247.15112305 -58.69282532]
[256.45074463 -49.53271103]
[265.18118286 -39.82860184]
[273.31072998 -29.61580467]
[280.80975342 -18.93146896]
[287.65103149 -7.81446552]
[293.80960083 3.69476247]
[307.46585083 -2.51064467]
[321.12210083 -8.71605206]
[334.77835083 -14.92145920]
[348.43457031 -21.12686539]
[362.09082031 -27.33227348]
[374.26266479 -36.09848022]
[384.47613525 -47.08414459]
[394.68960571 -58.06980896]
[404.90310669 -69.05547333]
[408.03869629 -85.15206146]
[423.63241577 -90.22824860]
[435.64279175 -79.06208801]
[431.71456909 -63.14037323]
[415.88876343 -58.84199524]
[405.67529297 -47.85633087]
[395.46179199 -36.87066650]
[385.24832153 -25.88500023]
[399.69622803 -29.91713905]
[414.69274902 -29.59494781]
[428.95416260 -24.94600487]
[441.25955200 -16.36828804]
[450.55554199 -4.59609222]
[456.04632568 9.36281681]
[457.26190186 24.31348228]
[454.09817505 38.97604752]
[446.82598877 52.09531784]
[436.06787109 62.54821396]
[422.74478149 69.43991089]
[407.99725342 72.18044281]
[393.08776855 70.53520966]
[379.29263306 64.64504242]
[367.79278564 55.01418304]
[359.57266235 42.46707535]
[355.33599854 28.07782173]
[355.44543457 13.07822132]
[359.89160156 -1.24768150]
[368.29623413 -13.67603207]
[354.63998413 -7.47062492]
[340.98373413 -1.26521766]
[327.32751465 4.94018936]
[313.67126465 11.14559650]
[300.01501465 17.35100365]
[306.22558594 34.36562729]
[310.99166870 51.83998871]
[314.27981567 69.65168762]
[316.06707764 87.67595673]
[316.34088135 105.78655243]
[315.09933472 123.85662079]
[312.35113525 141.75958252]
[308.11550903 159.37004089]
[302.42214966 176.56463623]
[295.31091309 193.22293091]
[286.83160400 209.22825623]
[277.04367065 224.46849060]
[266.01562500 238.83688354]
[253.82470703 252.23278809]
[240.55633545 264.56237793]
[226.30343628 275.73931885]
[211.16584778 285.68527222]
[195.24960327 294.33059692]
[178.66616821 301.61471558]
[161.53173828 307.48666382]
[143.96629333 311.90524292]
[126.09288788 314.83953857]
[108.03671265 316.26898193]
[89.92424774 316.18359375]
[71.88236237 314.58392334]
[54.03742218 311.48123169]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 19]
[2 18]
[3 17]
[5 15]
[6 14]
[7 13]
[8 12]
[82 124]
[83 123]
[84 122]
[85 121]
[86 120]
[87 119]
[88 99]
[89 98]
[90 97]
[91 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
