%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGAUUUCAAAUUUUAUCUUUUGGCGGUAUGCACUUUUAACAGUCACCCCCCAACUAACACAUxxxxxxxxxxUGGACGAACCAGAGUGUAGCUUAACACAAAGCACCCAACUUACACUUAGGAGAUUUCAACUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[107.10832214 257.99597168]
[107.10832214 242.99598694]
[107.10832214 227.99598694]
[107.10832214 212.99598694]
[107.10832214 197.99598694]
[107.10832214 182.99598694]
[107.10832214 167.99598694]
[107.10832214 152.99598694]
[107.10832214 137.99598694]
[107.10832214 122.99597931]
[93.26471710 117.22063446]
[82.60450745 127.77336121]
[71.94429016 138.32608032]
[61.28408432 148.87879944]
[65.26158905 163.71372986]
[61.27324677 178.54574585]
[50.39190292 189.38511658]
[35.54458237 193.31610107]
[20.72513962 189.28128052]
[9.91993237 178.36601257]
[6.03550577 163.50643921]
[10.11675167 148.69972229]
[21.06583405 137.92878723]
[35.93750763 134.09095764]
[50.73136139 138.21859741]
[61.39157104 127.66587067]
[72.05178070 117.11315155]
[82.71199036 106.56042480]
[80.97963715 99.26323700]
[75.78256226 77.37168121]
[61.51671219 72.73642731]
[47.25086594 68.10116577]
[32.98501587 63.46591568]
[23.79596901 63.78621292]
[18.47870255 58.58945465]
[4.30972719 53.66602707]
[-9.78250790 60.30279541]
[-24.08172607 55.10789490]
[-30.32202530 41.63220215]
[-44.49100113 36.70877457]
[-53.68465424 36.84277344]
[-58.89550400 31.53931808]
[-72.96178436 26.32974052]
[-87.02806854 21.12016106]
[-101.28254700 27.94550705]
[-116.16025543 22.61359406]
[-122.83451843 8.28774834]
[-117.34560394 -6.53275728]
[-102.94999695 -13.05518055]
[-88.18834686 -7.40988350]
[-81.81848907 7.05387926]
[-67.75220490 12.26345825]
[-53.68592453 17.47303772]
[-39.56757355 22.53980064]
[-25.39859581 27.46322823]
[-12.14676476 20.76065254]
[2.29272723 25.55186653]
[9.23315525 39.49705124]
[23.40213013 44.42047882]
[37.62027359 49.20006561]
[51.88611984 53.83532333]
[66.15196991 58.47057724]
[80.41781616 63.10583115]
[95.04654694 59.78919220]
[105.91844177 49.45468903]
[116.79033661 39.12018585]
[102.12857056 42.28763962]
[87.12895966 42.39546204]
[72.42317963 39.43910980]
[58.63054276 33.54308319]
[46.33189774 24.95568848]
[36.04518890 14.03856468]
[28.20361710 1.25147033]
[23.13742256 -12.86708736]
[21.05995750 -27.72252846]
[22.05871010 -42.68923950]
[26.09162140 -57.13692856]
[32.98884964 -70.45714569]
[42.45993042 -82.08893585]
[54.10600662 -91.54244995]
[67.43662262 -98.41956329]
[81.89038086 -102.43066406]
[96.85858154 -103.40682220]
[111.71086884 -101.30693817]
[125.82176208 -96.21943665]
[138.59701538 -88.35857391]
[149.49859619 -78.05539703]
[158.06741333 -65.74380493]
[163.94261169 -51.94227982]
[166.87677002 -37.23205185]
[166.74630737 -22.23262024]
[163.55671692 -7.57565832]
[157.44233704 6.12158108]
[148.66065979 18.28226089]
[137.58483887 28.39179039]
[152.30763245 25.52136612]
[167.03042603 22.65094185]
[181.75321960 19.78051758]
[196.47601318 16.91009331]
[211.19880676 14.03966904]
[225.64077759 9.98635387]
[239.70706177 4.77677441]
[253.77334595 -0.43280414]
[267.83963013 -5.64238310]
[274.20947266 -20.10614586]
[288.97113037 -25.75144196]
[303.36672974 -19.22901917]
[308.85565186 -4.40851402]
[302.18139648 9.91733074]
[287.30368042 15.24924564]
[273.04919434 8.42389870]
[258.98291016 13.63347816]
[244.91664124 18.84305573]
[230.85035706 24.05263519]
[244.68707275 29.84446144]
[252.61007690 42.58126068]
[251.68943787 57.55298233]
[242.26562500 69.22309875]
[227.82354736 73.27602386]
[213.70385742 68.21298218]
[205.12800598 55.90628815]
[205.26733398 40.90693283]
[214.06922913 28.76246262]
[199.34643555 31.63288689]
[184.62364197 34.50331116]
[169.90084839 37.37373734]
[155.17805481 40.24415970]
[140.45526123 43.11458588]
[127.12483978 49.99207687]
[116.25294495 60.32658005]
[105.38105774 70.66108704]
[119.87666321 66.80397034]
[132.73973083 59.08764648]
[147.49455261 56.38674545]
[162.25692749 59.04617691]
[175.14161682 66.72632599]
[184.50321960 78.44641113]
[189.14622498 92.70973969]
[188.47769165 107.69483948]
[182.58302307 121.48805237]
[172.21496582 132.32795715]
[158.69755554 138.83023071]
[143.75701904 140.16455078]
[129.29969788 136.15971375]
[122.10832214 122.99597931]
[122.10832214 137.99598694]
[122.10832214 152.99598694]
[122.10832214 167.99598694]
[122.10832214 182.99598694]
[122.10832214 197.99598694]
[122.10832214 212.99598694]
[122.10832214 227.99598694]
[122.10832214 242.99598694]
[122.10832214 257.99597168]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[11 28]
[12 27]
[13 26]
[14 25]
[30 63]
[31 62]
[32 61]
[33 60]
[35 59]
[36 58]
[39 55]
[40 54]
[42 53]
[43 52]
[44 51]
[64 131]
[65 130]
[66 129]
[95 128]
[96 127]
[97 126]
[98 125]
[99 124]
[100 123]
[101 114]
[102 113]
[103 112]
[104 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
