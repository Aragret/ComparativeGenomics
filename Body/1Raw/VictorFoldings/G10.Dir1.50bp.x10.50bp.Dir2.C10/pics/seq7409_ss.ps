%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUUUCAAAAAGGUAUUAGAAAAACCAUUUCAUAACUUUGUCAAAGUUAAAUUAUAGGCUAxxxxxxxxxxAAUGCUAAAACUAAUCGUCCCAACAAUUAUAUUACUACCACUGACAUGACUUUCCAAAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[111.63939667 263.98135376]
[111.63939667 248.98135376]
[111.63939667 233.98135376]
[111.63939667 218.98135376]
[111.63939667 203.98135376]
[111.63939667 188.98135376]
[111.63939667 173.98135376]
[111.63939667 158.98135376]
[111.63939667 143.98135376]
[111.63939667 128.98135376]
[105.83872223 124.22717285]
[105.63828278 139.22583008]
[93.78698730 148.42077637]
[79.20890045 144.88818359]
[72.88134003 131.28810120]
[79.56897736 117.86143494]
[94.23738098 114.71881104]
[88.43671417 109.96463776]
[73.72875214 112.91011810]
[59.02079010 115.85559845]
[44.31282806 118.80107880]
[32.30067062 129.09762573]
[18.30185127 124.01015472]
[3.59388995 126.95564270]
[-11.11407185 129.90112305]
[-16.40530586 134.03758240]
[-22.12860489 134.72689819]
[-26.49450493 132.64978027]
[-41.31226349 134.98088074]
[-56.13002014 137.31199646]
[-70.94777679 139.64309692]
[-81.51552582 151.71382141]
[-97.53441620 150.83369446]
[-106.71613312 137.67787170]
[-102.01725006 122.33837891]
[-87.04234314 116.58235931]
[-73.27888489 124.82533264]
[-58.46112442 122.49423218]
[-43.64336777 120.16313171]
[-28.82560921 117.83202362]
[-14.05955410 115.19316101]
[0.64840740 112.24768066]
[15.35636902 109.30219269]
[26.31651115 99.21633911]
[41.36734390 104.09312439]
[56.07530594 101.14763641]
[70.78326416 98.20215607]
[85.49122620 95.25667572]
[97.93067169 86.87452698]
[106.18296051 74.34857178]
[114.43524933 61.82260513]
[122.68753815 49.29664230]
[116.46305084 26.59556389]
[135.97174072 7.15904331]
[134.41415405 -7.75986862]
[132.85658264 -22.67878151]
[131.29899597 -37.59769440]
[128.15046692 -41.92277908]
[127.12425995 -46.55950928]
[127.97501373 -50.63110352]
[130.13958740 -53.49154663]
[129.51560974 -68.47856140]
[128.89163208 -83.46557617]
[126.01901245 -87.97863007]
[125.28401184 -92.67034149]
[126.38707733 -96.68094635]
[128.72586060 -99.40080261]
[129.03791809 -114.39755249]
[114.99105835 -120.14649963]
[103.97220612 -130.58438110]
[97.47156525 -144.29956055]
[96.36829376 -159.43716431]
[100.81159973 -173.94996643]
[110.20056152 -185.87522888]
[123.26540375 -193.60015869]
[138.23919678 -196.08001709]
[153.09689331 -192.97941589]
[165.82907104 -184.71769714]
[174.71383667 -172.41220093]
[178.54957581 -157.72712708]
[176.81756592 -142.64851379]
[169.75201416 -129.21562195]
[158.30850220 -119.24514008]
[144.03466797 -114.08549500]
[143.72261047 -99.08874512]
[143.87864685 -84.08955383]
[144.50262451 -69.10253906]
[145.12660217 -54.11552429]
[146.21791077 -39.15527344]
[147.77549744 -24.23636246]
[149.33306885 -9.31744957]
[150.89065552 5.60146236]
[156.05049133 -8.48313999]
[170.52084351 -12.43394661]
[182.12220764 -2.92561769]
[181.08987427 12.03881645]
[168.29266357 19.86400032]
[183.22697449 18.46169662]
[198.16128540 17.05939293]
[200.52049255 2.16358924]
[206.51075745 -11.67719746]
[215.75555420 -23.59292412]
[227.67373657 -32.83456039]
[241.51611328 -38.82116318]
[256.41253662 -41.17641449]
[271.42663574 -39.75226212]
[285.61456299 -34.63822556]
[298.08447266 -26.15577888]
[308.05252075 -14.83813667]
[314.89208984 -1.39673579]
[318.17321777 13.32348728]
[317.68966675 28.39720535]
[313.47186279 42.87687302]
[305.78488159 55.85228729]
[295.11196899 66.50780487]
[282.12405396 74.17359924]
[267.63751221 78.36780548]
[252.56303406 78.82676697]
[237.84819031 75.52163696]
[224.41795349 68.66017151]
[213.11657715 58.67369080]
[204.65447998 46.18995285]
[199.56358337 31.99370003]
[184.62927246 33.39600372]
[169.69496155 34.79830933]
[156.58746338 56.13204575]
[135.21350098 57.54893494]
[126.96121216 70.07489777]
[118.70892334 82.60086060]
[110.45663452 95.12681580]
[123.70396423 88.09061432]
[136.89485168 80.94916534]
[151.88987732 80.56282806]
[165.43101501 87.01554871]
[174.57614136 98.90532684]
[177.33827209 113.64881897]
[173.11724854 128.04267883]
[162.83021545 138.95948792]
[148.71224976 144.02732849]
[133.83078003 142.14509583]
[126.63939667 128.98135376]
[126.63939667 143.98135376]
[126.63939667 158.98135376]
[126.63939667 173.98135376]
[126.63939667 188.98135376]
[126.63939667 203.98135376]
[126.63939667 218.98135376]
[126.63939667 233.98135376]
[126.63939667 248.98135376]
[126.63939667 263.98135376]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[18 48]
[19 47]
[20 46]
[21 45]
[23 43]
[24 42]
[25 41]
[28 40]
[29 39]
[30 38]
[31 37]
[49 130]
[50 129]
[51 128]
[52 127]
[54 92]
[55 91]
[56 90]
[57 89]
[61 88]
[62 87]
[63 86]
[67 85]
[68 84]
[97 125]
[98 124]
[99 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
