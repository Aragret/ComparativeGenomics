%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUGACAACAUUCAAAAAAGAGUAAUAAACUUCGCCUUAAUUUUAAUAAUCAACACCCUCCUxxxxxxxxxxCCCAUUAAACGCCUGGCAGCCGGAAGCCUAUUCGCAGGAUUUCUCAUUACUAACAACAUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[86.89279175 522.21838379]
[86.89279175 507.21841431]
[86.89279175 492.21841431]
[86.89279175 477.21841431]
[86.89279175 462.21841431]
[86.89279175 447.21841431]
[86.89279175 432.21841431]
[86.89279175 417.21841431]
[86.89279175 402.21841431]
[86.89279175 387.21841431]
[72.68650818 384.16281128]
[59.42620468 378.20492554]
[47.69783020 369.60528564]
[38.02023315 358.74111938]
[30.82219124 346.08999634]
[26.42341995 332.20870972]
[25.02036858 317.70877075]
[26.67745781 303.22952271]
[31.32411575 289.40997314]
[38.75778580 276.86050415]
[48.65275574 266.13595581]
[60.57441711 257.71112061]
[73.99836731 251.95970154]
[88.33348846 249.13772583]
[88.64553833 234.14096069]
[80.48206329 225.15960693]
[80.65850067 212.62214661]
[89.62757874 203.29425049]
[90.25155640 188.30723572]
[90.87553406 173.32022095]
[83.67436981 160.28210449]
[91.97903442 146.81573486]
[92.60301208 131.82872009]
[93.22698975 116.84170532]
[85.33683777 110.39576721]
[82.22175598 100.80077362]
[84.76965332 91.14369965]
[92.06458282 84.47000885]
[89.88774109 69.62879944]
[87.71090698 54.78759766]
[85.53407288 39.94639206]
[82.58858490 25.23843002]
[78.88242340 10.70349407]
[75.17626953 -3.83144164]
[60.26976013 -6.92295456]
[48.23279190 -16.14241219]
[41.42025757 -29.61867142]
[41.13557434 -44.65462494]
[47.38166428 -58.26696777]
[58.87095642 -67.77809906]
[55.16479492 -82.31303406]
[51.45863724 -96.84796906]
[47.75247574 -111.38290405]
[44.04631424 -125.91783905]
[40.34015274 -140.45277405]
[25.29620361 -139.84179688]
[10.45403767 -142.37237549]
[-3.53750944 -147.93386841]
[-16.06678772 -156.28317261]
[-26.58606911 -167.05528259]
[-34.63549805 -179.77929688]
[-39.86318970 -193.89895630]
[-42.04060745 -208.79702759]
[-41.07256699 -223.82223511]
[-37.00138474 -238.31771851]
[-30.00503731 -251.64981079]
[-20.38937378 -263.23568726]
[-8.57475090 -272.56887817]
[4.92234802 -279.24136353]
[19.51188660 -282.96145630]
[34.55607605 -283.56649780]
[49.39724350 -281.03009033]
[63.38660049 -275.46310425]
[75.91259766 -267.10885620]
[86.42763519 -256.33261108]
[94.47206116 -243.60543823]
[99.69419861 -229.48371887]
[101.86575317 -214.58479309]
[100.89179993 -199.55998230]
[96.81491852 -185.06608582]
[89.81332397 -171.73674011]
[80.19310760 -160.15464783]
[68.37480927 -150.82611084]
[54.87508774 -144.15893555]
[58.58124924 -129.62400818]
[62.28741074 -115.08906555]
[65.99356842 -100.55413055]
[69.69972992 -86.01919556]
[73.40589142 -71.48426056]
[88.04666138 -68.63584900]
[100.04818726 -59.67633820]
[106.99798584 -46.33987427]
[107.47011566 -31.24692154]
[101.31738281 -17.38940048]
[89.71120453 -7.53760290]
[93.41736603 6.99733305]
[97.12352753 21.53226852]
[107.18795013 10.40989113]
[122.17060852 11.13098526]
[131.12039185 23.16848946]
[127.49571991 37.72396088]
[113.94594574 44.15853119]
[100.37527466 37.76955414]
[102.55211639 52.61075974]
[104.72895050 67.45196533]
[106.90578461 82.29317474]
[118.40759277 91.92169952]
[133.40028381 91.45365906]
[148.39299011 90.98561096]
[159.03013611 79.29687500]
[174.82063293 78.63674927]
[186.39625549 89.39688873]
[186.88938904 105.19348145]
[176.00747681 116.65469360]
[160.20654297 116.98079681]
[148.86102295 105.97830963]
[133.86833191 106.44635010]
[118.87563324 106.91439056]
[108.21400452 117.46568298]
[107.59002686 132.45269775]
[106.96604919 147.43971252]
[114.12258911 161.54980469]
[105.86254883 173.94419861]
[105.23857117 188.93121338]
[104.61459351 203.91822815]
[113.53637695 219.99249268]
[103.64229584 234.45301819]
[103.33023834 249.44976807]
[118.38443756 253.17373657]
[132.23332214 260.13720703]
[144.18997192 269.99133301]
[153.66215515 282.24401855]
[160.18151855 296.28442383]
[163.42684937 311.41348267]
[163.23989868 326.87860107]
[159.63299561 341.91122437]
[152.78843689 355.76498413]
[143.04913330 367.75274658]
[130.90148926 377.28060913]
[116.95117188 383.87753296]
[101.89279175 387.21841431]
[101.89279175 402.21841431]
[101.89279175 417.21841431]
[101.89279175 432.21841431]
[101.89279175 447.21841431]
[101.89279175 462.21841431]
[101.89279175 477.21841431]
[101.89279175 492.21841431]
[101.89279175 507.21841431]
[101.89279175 522.21838379]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[24 128]
[25 127]
[28 125]
[29 124]
[30 123]
[32 121]
[33 120]
[34 119]
[38 106]
[39 105]
[40 104]
[41 103]
[42 97]
[43 96]
[44 95]
[50 89]
[51 88]
[52 87]
[53 86]
[54 85]
[55 84]
[107 118]
[108 117]
[109 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
