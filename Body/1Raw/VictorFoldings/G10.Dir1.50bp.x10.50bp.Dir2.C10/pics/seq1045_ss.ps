%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGCAUCAAGCACGCAGCAAUGCAGCUCAAAACGCUUAGCCUAGCCACACCCCCACGGGAAAxxxxxxxxxxCGUAGCCUUCUCCACUUCAAGUCAACUAGGACUCAUAAUAGUUACAAUCGGCAUCAACCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[85.93962860 309.88928223]
[88.53062439 290.68154907]
[88.84268188 275.68481445]
[89.15473938 260.68804932]
[89.46679688 245.69129944]
[89.77885437 230.69453430]
[90.09090424 215.69778442]
[90.40296173 200.70103455]
[90.71501923 185.70428467]
[91.02707672 170.70753479]
[91.33913422 155.71076965]
[84.06193542 154.08030701]
[77.06359863 151.50361633]
[70.46657562 148.02580261]
[64.38627625 143.70770264]
[58.92908859 138.62487793]
[54.19049835 132.86625671]
[40.94791031 139.91139221]
[27.70532608 146.95651245]
[23.17470741 159.07788086]
[11.94709492 164.65995789]
[0.31831518 161.18450928]
[-13.06796932 167.95262146]
[-26.45425415 174.72073364]
[-34.97099304 188.73490906]
[-51.35768127 188.09584045]
[-58.75710297 173.46092224]
[-49.55736542 159.88533020]
[-33.22237015 161.33445740]
[-19.83608437 154.56632996]
[-6.44979954 147.79821777]
[2.30837297 132.62277222]
[20.66019058 133.71392822]
[33.90277863 126.66880035]
[47.14536285 119.62366486]
[43.62454987 99.28614807]
[47.65919495 79.04431152]
[58.70857239 61.61095428]
[75.29183960 49.32251358]
[95.18650055 43.82588577]
[115.72627258 45.85773087]
[121.78928375 32.13767624]
[120.29024506 16.38764763]
[132.51170349 7.87381363]
[138.57470703 -5.84624004]
[142.88229370 -20.21442413]
[145.36741638 -35.00712967]
[147.69851685 -49.82489014]
[149.87535095 -64.66609192]
[152.05220032 -79.50730133]
[154.22903442 -94.34850311]
[156.40586853 -109.18971252]
[142.37426758 -114.65962219]
[129.91777039 -123.11089325]
[119.65929413 -134.11701965]
[112.11099243 -147.12380981]
[107.64863586 -161.47732544]
[106.49295807 -176.45677185]
[108.69870758 -191.31060791]
[114.15208435 -205.29438782]
[122.57659149 -217.70791626]
[133.54705811 -227.93046570]
[146.51109314 -235.45167542]
[160.81689453 -239.89714050]
[175.74606323 -241.04696655]
[177.92289734 -255.88816833]
[179.94523621 -270.75122070]
[181.81285095 -285.63449097]
[183.68045044 -300.51779175]
[169.97917175 -306.93103027]
[158.93165588 -317.26580811]
[151.62025452 -330.50964355]
[148.76124573 -345.36495972]
[150.63473511 -360.37646484]
[157.05717468 -374.07345581]
[167.39935303 -385.11404419]
[180.64805603 -392.41656494]
[195.50531006 -395.26562500]
[210.51556396 -393.38208008]
[224.20823669 -386.95046997]
[235.24188232 -376.60089111]
[242.53553772 -363.34729004]
[245.37463379 -348.48812866]
[243.48103333 -333.47915649]
[237.04025269 -319.79080200]
[226.68327332 -308.76406860]
[213.42480469 -301.47930908]
[198.56373596 -298.65017700]
[196.69612122 -283.76687622]
[194.82850647 -268.88360596]
[197.13122559 -261.80947876]
[192.76409912 -253.71133423]
[190.58726501 -238.87013245]
[204.55738831 -233.48149109]
[216.98400879 -225.11505127]
[227.24211121 -214.18771362]
[234.81484985 -201.24534607]
[239.31968689 -186.93539429]
[240.52760315 -171.97457886]
[238.37484741 -157.11296082]
[232.96615601 -143.09635925]
[224.56982422 -130.62889099]
[213.60427856 -120.33761597]
[200.61724854 -112.74103546]
[186.25846863 -108.22290039]
[171.24707031 -107.01287079]
[169.07023621 -92.17166901]
[166.89340210 -77.33046722]
[164.71656799 -62.48925781]
[162.53973389 -47.64805222]
[164.69477844 -40.52756119]
[160.16012573 -32.52201462]
[157.67500305 -17.72930527]
[168.31150818 -28.30592918]
[182.44380188 -33.33365250]
[197.37039185 -31.85137749]
[210.23788452 -24.14245415]
[218.58654785 -11.68051910]
[220.82044983 3.15220475]
[216.51255798 17.52029610]
[206.48635864 28.67715263]
[192.65847778 34.49002838]
[177.67222595 33.84774017]
[164.39239502 26.87306213]
[155.35755920 14.89927769]
[152.29476929 0.21677302]
[146.23175049 13.93682671]
[148.16445923 28.70550728]
[135.50933838 38.20069122]
[129.44631958 51.92074585]
[139.44718933 59.71824265]
[147.45233154 69.55369568]
[153.05673218 80.92949677]
[155.97686768 93.27012634]
[156.06500244 105.95123291]
[153.31665039 118.33125305]
[147.87089539 129.78385925]
[140.00323486 139.72961426]
[130.11170959 147.66535950]
[118.69675446 153.18959045]
[106.33588409 156.02282715]
[106.02382660 171.01957703]
[105.71177673 186.01634216]
[105.39971924 201.01309204]
[105.08766174 216.00984192]
[104.77560425 231.00659180]
[104.46354675 246.00335693]
[104.15148926 261.00009155]
[103.83943939 275.99685669]
[103.52738190 290.99362183]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 142]
[11 141]
[17 35]
[18 34]
[19 33]
[22 31]
[23 30]
[24 29]
[41 130]
[42 129]
[44 127]
[45 126]
[46 113]
[47 112]
[48 110]
[49 109]
[50 108]
[51 107]
[52 106]
[65 93]
[66 92]
[67 90]
[68 89]
[69 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
