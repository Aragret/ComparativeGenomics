%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAAACCUAGCCCCAAACCCACUCCACCUUACUACCAGACAACCUUAGCCAAACCAUUUAxxxxxxxxxxUCGCUCUUCUACUAUGAACCCCCCUCCCCAUACCCAACCCCCUGGUCAACCUCAACCUAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-55.08975601 318.63360596]
[-64.10728455 330.62042236]
[-73.12481689 342.60726929]
[-68.73483276 357.37322998]
[-73.82183838 371.72509766]
[-86.23744965 380.22900391]
[-101.10187531 379.79663086]
[-110.11940765 391.78347778]
[-119.13693237 403.77029419]
[-128.15446472 415.75714111]
[-137.17199707 427.74395752]
[-146.18952942 439.73080444]
[-155.20704651 451.71762085]
[-156.65425110 468.05279541]
[-171.63658142 474.72076416]
[-184.74150085 464.86212158]
[-182.48779297 448.61856079]
[-167.19389343 442.70010376]
[-158.17636108 430.71325684]
[-149.15882874 418.72644043]
[-140.14129639 406.73959351]
[-131.12376404 394.75277710]
[-122.10623932 382.76593018]
[-113.08870697 370.77911377]
[-117.62444305 356.61700439]
[-112.89527893 342.33068848]
[-100.51588440 333.46478271]
[-85.11164856 333.58972168]
[-76.09411621 321.60290527]
[-67.07659149 309.61605835]
[-77.35518646 300.99407959]
[-87.18952942 291.86859131]
[-96.55496979 282.26251221]
[-105.42804718 272.19985962]
[-113.78655243 261.70587158]
[-121.60952759 250.80682373]
[-128.87738037 239.53001404]
[-135.57191467 227.90367126]
[-141.67636108 215.95695496]
[-147.17541504 203.71977234]
[-152.05532837 191.22277832]
[-156.30384827 178.49726868]
[-159.91033936 165.57513428]
[-162.86576843 152.48873901]
[-165.16273499 139.27085876]
[-166.79550171 125.95460510]
[-167.75994873 112.57334137]
[-168.05368042 99.16058350]
[-167.67594910 85.74993134]
[-166.62771606 72.37496948]
[-164.91159058 59.06920624]
[-162.53187561 45.86597443]
[-159.49453735 32.79834366]
[-155.80718994 19.89904976]
[-151.47904968 7.20040321]
[-146.52098083 -5.26578665]
[-140.94538879 -17.46829224]
[-134.76625061 -29.37654686]
[-127.99902344 -40.96072388]
[-120.66068268 -52.19179916]
[-112.76959991 -63.04164505]
[-104.34553528 -73.48308563]
[-95.40960693 -83.48995972]
[-85.98419189 -93.03720093]
[-76.09289551 -102.10089874]
[-65.76049042 -110.65834808]
[-55.01287460 -118.68811035]
[-43.87695694 -126.17006683]
[-32.38064194 -133.08549500]
[-20.55271721 -139.41705322]
[-8.42281628 -145.14888000]
[3.97867584 -150.26663208]
[16.62069511 -154.75747681]
[29.47157478 -158.61016846]
[42.49912262 -161.81506348]
[55.67070770 -164.36413574]
[68.95333862 -166.25097656]
[82.31373596 -167.47088623]
[95.71842957 -168.02079773]
[109.13385773 -167.89933777]
[122.52640533 -167.10679626]
[135.86251831 -165.64517212]
[149.10881042 -163.51812744]
[162.23207092 -160.73098755]
[175.19946289 -157.29074097]
[187.97846985 -153.20597839]
[200.53710938 -148.48696899]
[212.84390259 -143.14550781]
[224.86802673 -137.19497681]
[236.57936096 -130.65029907]
[247.94857788 -123.52784729]
[258.94720459 -115.84547424]
[269.54766846 -107.62242126]
[279.72341919 -98.87929535]
[289.44897461 -89.63798523]
[298.69998169 -79.92163849]
[307.45324707 -69.75460815]
[315.68685913 -59.16234589]
[323.38021851 -48.17139816]
[330.51397705 -36.80928802]
[337.07034302 -25.10447884]
[343.03286743 -13.08629131]
[348.38659668 -0.78483009]
[353.11813354 11.76909065]
[357.21560669 24.54402351]
[360.66879272 37.50796890]
[363.46902466 50.62845612]
[365.60928345 63.87261200]
[367.08419800 77.20726776]
[367.89010620 90.59901428]
[368.02493286 104.01431274]
[367.48840332 117.41955566]
[366.28179932 130.78115845]
[364.40820312 144.06565857]
[361.87228394 157.23977661]
[358.68035889 170.27052307]
[354.84048462 183.12522888]
[368.96530151 188.17399597]
[383.09008789 193.22274780]
[399.11755371 189.75106812]
[409.93597412 202.07559204]
[404.41629028 217.51789856]
[388.23666382 220.19227600]
[378.04135132 207.34754944]
[363.91653442 202.29879761]
[349.79174805 197.25003052]
[342.39343262 214.45045471]
[333.81243896 231.09242249]
[324.09060669 247.09478760]
[313.27542114 262.37942505]
[301.41958618 276.87179565]
[288.58099365 290.50115967]
[274.82226562 303.20101929]
[260.21054077 314.90942383]
[244.81712341 325.56924438]
[228.71711731 335.12844849]
[211.98905945 343.54040527]
[194.71458435 350.76409912]
[176.97796631 356.76422119]
[158.86576843 361.51156616]
[140.46635437 364.98294067]
[121.86948395 367.16137695]
[103.16590881 368.03628540]
[84.44689178 367.60339355]
[65.80376434 365.86480713]
[47.32748413 362.82901001]
[29.10820198 358.51080322]
[11.23482037 352.93127441]
[-6.20545769 346.11761475]
[-23.12753487 338.10311890]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 30]
[2 29]
[3 28]
[7 24]
[8 23]
[9 22]
[10 21]
[11 20]
[12 19]
[13 18]
[117 126]
[118 125]
[119 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
