%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAUCGCCCACAUCACUCGAGACGUAAAUUAUGGCUGAAUCAUCCGCUACCUUCACGCCAAUxxxxxxxxxxAAGUGAACUGUAUCCGACAUCUGGUUCCUACUUCAGGGUCAUAAAGCCUAAAUAGCCCACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[70.90289307 248.54678345]
[70.59491730 233.54994202]
[70.28693390 218.55310059]
[69.97895813 203.55627441]
[69.67098236 188.55943298]
[69.36300659 173.56259155]
[69.05502319 158.56575012]
[68.74704742 143.56892395]
[68.43907166 128.57208252]
[88.35732269 95.40637970]
[80.20065308 82.81793976]
[72.04399109 70.22949982]
[62.16828156 58.93922043]
[50.77721024 49.17994690]
[39.38613510 39.42067337]
[24.37155724 42.86576080]
[10.37104797 36.87918472]
[2.67130756 23.94945145]
[4.04511070 9.14233589]
[-7.34596300 -0.61693859]
[-18.73703575 -10.37621307]
[-30.32608414 -19.89955139]
[-42.10822296 -29.18293571]
[-53.89035797 -38.46632004]
[-65.67249298 -47.74970627]
[-77.45463562 -57.03309250]
[-88.63241577 -47.57936859]
[-101.44211578 -40.50253677]
[-115.38576508 -36.07546997]
[-129.92173767 -34.46808624]
[-144.48583984 -35.74081039]
[-158.51312256 -39.84230804]
[-171.45988464 -46.61157227]
[-182.82469177 -55.78421783]
[-192.16778564 -67.00282288]
[-199.12817383 -79.83084106]
[-203.43748474 -93.76962280]
[-204.93040466 -108.27774048]
[-203.55093384 -122.79208374]
[-199.35455322 -136.74967957]
[-192.50593567 -149.60949707]
[-204.09498596 -159.13284302]
[-215.68403625 -168.65617371]
[-227.27307129 -178.17951965]
[-238.95928955 -187.58337402]
[-250.74142456 -196.86676025]
[-262.52355957 -206.15014648]
[-274.30569458 -215.43353271]
[-287.99551392 -208.68429565]
[-303.25805664 -208.55183411]
[-317.06292725 -215.06240845]
[-326.66921997 -226.92337036]
[-330.16952515 -241.77969360]
[-326.86889648 -256.68167114]
[-317.42266846 -268.67047119]
[-303.70639038 -275.36572266]
[-288.44345093 -275.43811035]
[-274.66430664 -268.87319946]
[-265.10482788 -256.97451782]
[-261.66302490 -242.10452271]
[-265.02230835 -227.21566772]
[-253.24017334 -217.93228149]
[-241.45803833 -208.64889526]
[-229.67590332 -199.36550903]
[-222.43084717 -197.68582153]
[-217.74974060 -189.76856995]
[-206.16069031 -180.24522400]
[-194.57164001 -170.72189331]
[-182.98258972 -161.19854736]
[-171.00387573 -170.86280823]
[-157.27941895 -177.84138489]
[-142.40240479 -181.83003235]
[-127.01637268 -182.65383911]
[-111.78737640 -180.27476501]
[-97.37515259 -174.79353333]
[-84.40454102 -166.44528198]
[-73.43840027 -155.58950806]
[-64.95318604 -142.69458008]
[-59.31822968 -128.31753540]
[-56.77968597 -113.08001709]
[-57.44976807 -97.64138031]
[-61.30179596 -82.67018127]
[-68.17124939 -68.81523132]
[-56.38911057 -59.53184509]
[-44.60697556 -50.24845886]
[-32.82483673 -40.96507263]
[-21.04269981 -31.68168831]
[-16.22156334 -31.35634041]
[-11.56984138 -27.95790291]
[-8.97776222 -21.76728630]
[2.41331172 -12.00801277]
[13.80438519 -2.24873781]
[28.22553635 -5.87757063]
[42.18332672 -0.25226584]
[50.24661636 12.66426373]
[49.14540863 28.02959824]
[60.53648376 37.78887177]
[71.92755890 47.54814911]
[67.82948303 33.11880875]
[69.46038818 18.20773506]
[76.58068848 5.00541401]
[88.14439392 -4.54868650]
[102.45274353 -9.05103493]
[117.40379333 -7.84021950]
[130.80117798 -1.09411383]
[140.67678833 10.19625473]
[145.57984924 24.37229156]
[144.79008484 39.35148621]
[138.42350769 52.93334198]
[127.41540527 63.12263489]
[113.38290405 68.42252350]
[98.38742065 68.05442810]
[84.63243103 62.07283401]
[92.78909302 74.66127777]
[100.94576263 87.24971771]
[112.72789764 96.53309631]
[126.87521362 101.51842499]
[141.02253723 106.50374603]
[156.60975647 103.79283142]
[166.04200745 115.32026672]
[181.07435608 109.71599579]
[194.75375366 118.09775543]
[196.58651733 134.03578186]
[185.16671753 145.30377197]
[169.25465393 143.25790405]
[161.05668640 129.46759033]
[146.48136902 132.53507996]
[136.03720093 120.65106201]
[121.88989258 115.66574097]
[107.74257660 110.68041992]
[101.66590881 115.07633972]
[111.69125366 126.23395538]
[121.71660614 137.39157104]
[131.74195862 148.54919434]
[143.60791016 157.72520447]
[143.36784363 172.72328186]
[131.21430969 181.51483154]
[116.89453125 177.04896545]
[111.89300537 162.90811157]
[104.43286133 149.89480591]
[96.97271729 136.88148499]
[89.51257324 123.86817932]
[83.43590546 128.26409912]
[83.74388885 143.26094055]
[84.05186462 158.25778198]
[84.35984039 173.25460815]
[84.66781616 188.25144958]
[84.97579956 203.24829102]
[85.28377533 218.24513245]
[85.59175110 233.24197388]
[85.89972687 248.23880005]
[88.48550415 267.44723511]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 151]
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 115]
[11 114]
[12 113]
[13 98]
[14 97]
[15 96]
[19 92]
[20 91]
[21 90]
[22 87]
[23 86]
[24 85]
[25 84]
[26 83]
[41 69]
[42 68]
[43 67]
[44 66]
[45 64]
[46 63]
[47 62]
[48 61]
[116 130]
[117 129]
[118 128]
[120 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
