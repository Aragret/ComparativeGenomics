%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCCCCCACAGUUUAUGUAGCUUACCUCCUCAAAGCAAUACACUGAAAAUGUUUAGACGGGxxxxxxxxxxAUUCGAAGAACCCGUAUACAUAAAAUCUAGACAAAAAAGGAAGGAAUCGAACCCCCCAAAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[164.59649658 233.28036499]
[159.17787170 247.26745605]
[153.75924683 261.25454712]
[148.34062195 275.24160767]
[142.92199707 289.22869873]
[137.50337219 303.21578979]
[142.64205933 318.41360474]
[133.84301758 331.82836914]
[117.85611725 333.16946411]
[106.94513702 321.40808105]
[109.48004913 305.56655884]
[123.51628113 297.79714966]
[128.93490601 283.81008911]
[134.35353088 269.82299805]
[139.77215576 255.83590698]
[145.19078064 241.84883118]
[150.60940552 227.86174011]
[136.89810181 233.94450378]
[123.99833679 226.28967285]
[122.76768494 211.34024048]
[134.24195862 201.67893982]
[148.76348877 205.43759155]
[141.13052368 192.52490234]
[133.49754333 179.61219788]
[125.86457825 166.69950867]
[118.23161316 153.78680420]
[110.59864044 140.87409973]
[102.96566772 127.96141052]
[95.33270264 115.04870605]
[82.26600647 107.68247223]
[67.26679230 107.83646393]
[52.26758575 107.99046326]
[37.26837540 108.14446259]
[29.14864922 121.26213837]
[15.21611691 127.88695526]
[-0.08339846 125.90493774]
[-11.86787701 115.94855499]
[-16.37693596 101.19483948]
[-12.17174816 86.35166168]
[-0.59417695 76.15541840]
[14.66141891 73.85969543]
[28.72703362 80.19705200]
[37.11437988 93.14524841]
[52.11359024 92.99125671]
[67.11280060 92.83725739]
[82.11200714 92.68325806]
[85.24671173 85.86977386]
[71.61972809 79.60036469]
[57.99285126 73.33074951]
[64.26267242 59.70396423]
[77.88913727 65.97338867]
[91.51611328 72.24279022]
[94.65081787 65.42930603]
[85.00900269 53.93863678]
[75.36718750 42.44796753]
[65.72537994 30.95730209]
[56.08356094 19.46663666]
[40.49673462 14.36930466]
[37.38296890 -1.73151875]
[49.94544601 -12.27268791]
[65.26096344 -6.41035080]
[67.57422638 9.82482147]
[77.21604156 21.31548882]
[86.85785675 32.80615616]
[96.49967194 44.29682159]
[106.14148712 55.78748703]
[120.68843842 52.12878418]
[123.74683380 37.44388580]
[126.80522919 22.75898743]
[129.86363220 8.07409000]
[132.92202759 -6.61080742]
[121.67199707 3.31073213]
[107.13043213 6.99080467]
[92.51522827 3.61504889]
[81.06056976 -6.06951618]
[75.30125427 -19.91979790]
[76.51175690 -34.87087250]
[84.42421722 -47.61422729]
[97.28767395 -55.32989120]
[112.25558472 -56.31046295]
[126.01571655 -50.33895874]
[135.52308655 -38.73680878]
[138.67373657 -24.06851006]
[144.94314575 -37.69548798]
[151.21255493 -51.32246780]
[152.33979797 -68.23889923]
[168.90716553 -71.83864594]
[176.95254517 -56.91523361]
[164.83952332 -45.05306244]
[158.57012939 -31.42608261]
[152.30072021 -17.79910469]
[147.60691833 -3.55241227]
[144.54852295 11.13248539]
[141.49012756 25.81738281]
[138.43173218 40.50228119]
[135.37333679 55.18717957]
[133.96742249 97.10397339]
[108.24539948 107.41574097]
[115.87836456 120.32843781]
[123.51133728 133.24113464]
[131.14430237 146.15383911]
[138.77728271 159.06652832]
[146.41024780 171.97923279]
[154.04321289 184.89192200]
[161.67619324 197.80462646]
[163.53933716 182.92079163]
[167.20417786 168.37538147]
[172.61593628 154.38563538]
[179.69380188 141.16052246]
[188.33207703 128.89755249]
[198.40170288 117.77989197]
[209.75231934 107.97358704]
[222.21438599 99.62510681]
[235.60176086 92.85914612]
[249.71449280 87.77675629]
[264.34179688 84.45384216]
[279.26522827 82.94004059]
[294.26184082 83.25796509]
[309.10769653 85.40285492]
[323.58105469 89.34268188]
[337.46572876 95.01860046]
[350.55432129 102.34584045]
[362.65139771 111.21495819]
[373.57620239 121.49348450]
[383.16564941 133.02790833]
[391.27642822 145.64595032]
[397.78747559 159.15913391]
[402.60150146 173.36566162]
[405.64660645 188.05331421]
[406.87731934 203.00274658]
[406.27523804 217.99066162]
[403.84936523 232.79319763]
[399.63595581 247.18928528]
[393.69793701 260.96386719]
[386.12396240 273.91128540]
[377.02716064 285.83807373]
[366.54345703 296.56613159]
[354.82937622 305.93524170]
[342.05987549 313.80548096]
[328.42572021 320.05923462]
[314.13052368 324.60314941]
[299.38778687 327.36935425]
[284.41772461 328.31652832]
[269.44390869 327.43051147]
[254.69000244 324.72457886]
[240.37635803 320.23907471]
[226.71676636 314.04107666]
[213.91523743 306.22308350]
[202.16297913 296.90188599]
[191.63551331 286.21673584]
[182.49008179 274.32720947]
[174.86328125 261.41085815]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 17]
[2 16]
[3 15]
[4 14]
[5 13]
[6 12]
[22 105]
[23 104]
[24 103]
[25 102]
[26 101]
[27 100]
[28 99]
[29 98]
[30 46]
[31 45]
[32 44]
[33 43]
[53 66]
[54 65]
[55 64]
[56 63]
[57 62]
[67 96]
[68 95]
[69 94]
[70 93]
[71 92]
[83 91]
[84 90]
[85 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
