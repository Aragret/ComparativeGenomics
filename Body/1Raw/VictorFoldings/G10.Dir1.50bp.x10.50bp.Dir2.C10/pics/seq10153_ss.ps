%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAAAGCCCAUGUCGAAGCCCCCAUCGCUGGGUCAAUAGUACUUGCCGCAGUACUCUUAAAxxxxxxxxxxAACCUCGCUUCCCCACCCUUACUAACAUUAACGAAAAUAACCCCACCCUACUAAACCCCAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[113.98204041 96.88906860]
[109.97138214 110.28333282]
[96.45996857 113.87960815]
[85.69129181 124.32161713]
[81.17017365 139.48309326]
[66.64691925 142.78826904]
[55.87824249 153.23028564]
[45.10956192 163.67228699]
[34.34088135 174.11430359]
[23.57220459 184.55630493]
[12.80352497 194.99832153]
[2.03484654 205.44032288]
[7.66755390 219.55914307]
[7.46346092 234.75871277]
[1.45368910 248.72120667]
[-9.44531441 259.31744385]
[-23.57153130 264.93157959]
[-38.77081299 264.70748901]
[-52.72538376 258.67935181]
[-63.30727386 247.76640320]
[-68.90281677 233.63282776]
[-68.65872955 218.43385315]
[-62.61224747 204.48721313]
[-51.68540573 193.91969299]
[-37.54446793 188.34274292]
[-22.34582520 188.60682678]
[-8.40716267 194.67164612]
[2.36151600 184.22964478]
[13.13019466 173.78762817]
[23.89887428 163.34562683]
[34.66755295 152.90361023]
[45.43622971 142.46160889]
[56.20491028 132.01959229]
[59.95577240 117.60501099]
[75.24927521 113.55294037]
[86.01795959 103.11093140]
[90.02861786 89.71666718]
[103.54003143 86.12039185]
[85.80371857 63.26095200]
[71.54393005 38.08810806]
[61.05722809 11.12655354]
[54.56153488 -17.06183243]
[52.19159698 -45.88969040]
[53.99620819 -74.75642395]
[59.93718719 -103.06070709]
[69.89019775 -130.21301270]
[83.64736176 -155.64790344]
[100.92155457 -178.83580017]
[89.94075775 -189.05450439]
[78.95995331 -199.27320862]
[67.97914886 -209.49192810]
[56.99834824 -219.71063232]
[46.01754379 -229.92933655]
[30.23444939 -229.11116028]
[18.55167961 -239.75486755]
[17.90041733 -255.54573059]
[28.66704369 -267.11532593]
[44.46390915 -267.59957886]
[55.91901779 -256.71124268]
[56.23625183 -240.91014099]
[67.21705627 -230.69143677]
[78.19786072 -220.47271729]
[89.17865753 -210.25401306]
[100.15946198 -200.03530884]
[111.14026642 -189.81660461]
[118.80607605 -197.06896973]
[126.84321594 -203.90765381]
[135.22940063 -210.31367493]
[143.94134521 -216.26924133]
[152.95489502 -221.75781250]
[162.24504089 -226.76417542]
[171.78599548 -231.27439880]
[181.55130005 -235.27598572]
[191.51385498 -238.75781250]
[201.64601135 -241.71020508]
[211.91966248 -244.12496948]
[222.30630493 -245.99539185]
[232.77711487 -247.31626892]
[243.30303955 -248.08393860]
[253.85485840 -248.29626465]
[264.40332031 -247.95263672]
[274.91909790 -247.05400085]
[285.37307739 -245.60284424]
[295.73620605 -243.60319519]
[305.97973633 -241.06057739]
[316.07525635 -237.98204041]
[325.99472046 -234.37612915]
[335.71060181 -230.25282288]
[345.19595337 -225.62358093]
[354.42443848 -220.50123596]
[363.37048340 -214.89997864]
[372.00918579 -208.83535767]
[380.31661987 -202.32417297]
[388.26971436 -195.38452148]
[395.84640503 -188.03562927]
[403.02566528 -180.29789734]
[409.78753662 -172.19276428]
[416.11325073 -163.74275208]
[421.98526001 -154.97128296]
[427.38729858 -145.90269470]
[432.30432129 -136.56213379]
[436.72265625 -126.97554779]
[440.63009644 -117.16950989]
[444.01577759 -107.17124176]
[446.87026978 -97.00847626]
[449.18563843 -86.70941162]
[450.95547485 -76.30262756]
[452.17483521 -65.81700897]
[452.84036255 -55.28163528]
[452.95019531 -44.72575760]
[452.50399780 -34.17865372]
[451.50299072 -23.66960144]
[449.94995117 -13.22776031]
[447.84921265 -2.88210535]
[445.20657349 7.33865118]
[442.02935791 17.40614700]
[438.32635498 27.29244041]
[434.10784912 36.97009659]
[429.38555908 46.41225433]
[424.17254639 55.59271240]
[418.48330688 64.48598480]
[412.33358765 73.06739807]
[405.74044800 81.31313324]
[398.72216797 89.20028687]
[391.29827881 96.70699310]
[383.48928833 103.81239319]
[375.31692505 110.49677277]
[366.80383301 116.74157715]
[357.97366333 122.52946472]
[348.85086060 127.84437561]
[339.46075439 132.67153931]
[329.82940674 136.99757385]
[319.98355103 140.81045532]
[309.95050049 144.09959412]
[299.75805664 146.85585022]
[289.43453979 149.07157898]
[279.00860596 150.74061584]
[268.50915527 151.85832214]
[257.96533203 152.42158508]
[247.40638733 152.42883301]
[236.86161804 151.88005066]
[226.36032104 150.77673340]
[215.93159485 149.12193298]
[205.60440063 146.92025757]
[195.40739441 144.17778015]
[185.36888123 140.90211487]
[175.51670837 137.10235596]
[165.87821960 132.78901672]
[156.48016357 127.97406006]
[147.34863281 122.67085266]
[138.50897217 116.89409637]
[129.98570251 110.65981293]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 38]
[3 36]
[4 35]
[6 33]
[7 32]
[8 31]
[9 30]
[10 29]
[11 28]
[12 27]
[48 65]
[49 64]
[50 63]
[51 62]
[52 61]
[53 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
