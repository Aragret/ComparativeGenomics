%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAGAACCCAACCUCCGAGCAGUACAUGCUAAGACUUCACCAGUCAAAGCGAACUACUAUAxxxxxxxxxxUUAGGGGCCAUCAAUUUCAUCACAACAAUUAUCAAUAUAAAACCCCCUGCCAUAACCCAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[110.49839783 294.25112915]
[110.18634033 279.25436401]
[109.87428284 264.25759888]
[109.56222534 249.26084900]
[109.25016785 234.26409912]
[108.93811798 219.26734924]
[108.62606049 204.27059937]
[108.31400299 189.27383423]
[108.00194550 174.27708435]
[106.13433075 159.39381409]
[102.73135376 144.78491211]
[99.32837677 130.17602539]
[95.92539978 115.56713104]
[86.41703796 103.96578979]
[72.76080322 97.76038361]
[64.15940094 109.60829163]
[53.40591049 119.53672791]
[40.91897583 127.16181183]
[27.18420219 132.18930054]
[12.73527431 134.42593384]
[-1.86677778 133.78683472]
[-16.05536842 130.29875183]
[-29.28033638 124.09896851]
[-41.02928162 115.42982483]
[-50.84741211 104.62933350]
[-58.35515594 92.11795807]
[-63.26282883 78.38222504]
[-65.38182068 63.95586014]
[-64.63182068 49.39899063]
[-61.04388809 35.27643967]
[-74.56807709 28.78827286]
[-88.09226990 22.30010796]
[-101.61645508 15.81194305]
[-117.97523499 21.92159081]
[-133.40205383 14.48537254]
[-138.60348511 -1.47717857]
[-152.25973511 -7.68258572]
[-165.91596985 -13.88799286]
[-179.57220459 -20.09339905]
[-194.21499634 -14.78052807]
[-207.97596741 -21.26823235]
[-212.95074463 -35.26063156]
[-226.60697937 -41.46603775]
[-240.26322937 -47.67144394]
[-253.91946411 -53.87685013]
[-269.38494873 -49.61089706]
[-282.27755737 -59.15869522]
[-282.70715332 -75.19599915]
[-270.34423828 -85.42034912]
[-254.67253113 -81.98851013]
[-247.71405029 -67.53309631]
[-234.05781555 -61.32768631]
[-220.40158081 -55.12228012]
[-206.74533081 -48.91687012]
[-192.93333435 -54.37254715]
[-178.99557495 -48.27392197]
[-173.36680603 -33.74964142]
[-159.71055603 -27.54423332]
[-146.05432129 -21.33882713]
[-132.39808655 -15.13341999]
[-121.04849243 -21.31270981]
[-108.02016449 -19.78399277]
[-98.11916351 -10.88465500]
[-95.12829590 2.28775311]
[-81.60410309 8.77591801]
[-68.07991028 15.26408291]
[-54.55572510 21.75224876]
[-45.22525406 9.51344395]
[-33.55986404 -0.53335577]
[-20.06301880 -7.95146275]
[-5.31786728 -12.41770554]
[10.03795624 -13.73651028]
[25.33990479 -11.84846020]
[39.92527771 -6.83297443]
[53.16192245 1.09503603]
[64.47563934 11.59437275]
[73.37506104 24.21223450]
[79.47303772 38.40374756]
[82.50344849 53.55548096]
[82.33282471 69.01199341]
[78.96620941 84.10414124]
[92.62244415 90.30954742]
[100.36998749 84.04841614]
[112.66804504 84.87076569]
[126.79284668 79.82200623]
[140.91764832 74.77325439]
[155.04244995 69.72449493]
[152.44412231 54.91379929]
[152.38636780 39.87702179]
[154.87083435 25.04680252]
[159.82604980 10.84983349]
[167.10942078 -2.30540752]
[176.51141357 -14.04041958]
[187.76152039 -24.01756096]
[200.53602600 -31.94977188]
[214.46739197 -37.60882568]
[229.15480042 -40.83190155]
[244.17564392 -41.52626038]
[259.09774780 -39.67193222]
[273.49179077 -35.32226181]
[286.94363403 -28.60239983]
[299.06619263 -19.70569229]
[309.51071167 -8.88811588]
[317.97668457 3.53908896]
[324.22048950 17.21836472]
[328.06256104 31.75613403]
[329.39227295 46.73411179]
[328.17138672 61.72135544]
[324.43505859 76.28665161]
[318.29077148 90.01092529]
[309.91531372 102.49930573]
[299.54965210 113.39247894]
[287.49203491 122.37701416]
[274.08938599 129.19442749]
[259.72732544 133.64854431]
[244.81907654 135.61123657]
[229.79359436 135.02601624]
[215.08316040 131.90972900]
[201.11103821 126.35202789]
[188.27925110 118.51283264]
[176.95697021 108.61768341]
[167.46997070 96.95127869]
[160.09121704 83.84929657]
[145.96640015 88.89805603]
[131.84159851 93.94681549]
[117.71680450 98.99556732]
[110.53429413 112.16415405]
[113.93727112 126.77304077]
[117.34024811 141.38194275]
[120.74322510 155.99082947]
[127.19528961 142.44938660]
[139.47515869 133.83514404]
[154.40419006 132.37788391]
[168.11808777 138.45481873]
[177.06703186 150.49293518]
[178.93461609 165.37622070]
[173.23742676 179.25218201]
[161.45016479 188.52905273]
[146.62391663 190.80554199]
[132.59642029 185.49241638]
[122.99870300 173.96502686]
[123.31075287 188.96177673]
[123.62281036 203.95854187]
[123.93486786 218.95529175]
[124.24692535 233.95204163]
[124.55898285 248.94879150]
[124.87104034 263.94555664]
[125.18309021 278.94229126]
[125.49514771 293.93905640]
[128.08615112 313.14678955]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 130]
[11 129]
[12 128]
[13 127]
[14 82]
[15 81]
[30 67]
[31 66]
[32 65]
[33 64]
[36 60]
[37 59]
[38 58]
[39 57]
[42 54]
[43 53]
[44 52]
[45 51]
[84 126]
[85 125]
[86 124]
[87 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
