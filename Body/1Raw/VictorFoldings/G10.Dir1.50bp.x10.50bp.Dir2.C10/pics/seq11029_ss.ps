%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCAACCUCCCUCACCAUUGGCAGCCUAGCAUUAGCAGGAAUACCUUUCCUCACAGGUUUCUxxxxxxxxxxUCCCUGACAAGCGCCUAUAGCACUCGAAUAAUUCUUCUCACCCUAACAGGUCAACCUCGCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[169.09944153 519.26367188]
[169.09944153 504.26370239]
[169.09944153 489.26370239]
[169.09944153 474.26370239]
[169.09944153 459.26370239]
[169.09944153 444.26370239]
[169.09944153 429.26370239]
[169.09944153 414.26370239]
[169.09944153 399.26370239]
[169.09944153 384.26370239]
[155.38084412 381.24832153]
[142.59378052 375.42065430]
[131.30793762 367.03741455]
[122.02675629 356.46920776]
[115.16490936 344.18423462]
[111.02984619 330.72741699]
[109.80797577 316.69638062]
[111.55628204 302.71481323]
[116.19965363 289.40469360]
[123.53414154 277.35876465]
[133.23587036 267.11404419]
[144.87539673 259.12789917]
[157.93664551 253.75764465]
[171.83984375 251.24452209]
[172.45567322 236.25715637]
[168.49906921 221.78839111]
[160.34239197 209.19995117]
[146.92822266 202.72622681]
[145.91735840 186.93734741]
[137.76069641 174.34890747]
[129.60403442 161.76046753]
[123.28842163 157.83297729]
[121.41221619 148.82876587]
[113.51573181 136.07551575]
[96.55985260 139.84622192]
[79.01287842 135.76112366]
[64.45561218 124.08316040]
[56.09963989 106.67591858]
[41.23303986 104.67986298]
[26.28018379 111.41366577]
[13.13203049 101.61274719]
[15.31427288 85.35944366]
[30.58200645 79.37376404]
[43.22909546 89.81326294]
[58.09569550 91.80931854]
[63.51432037 77.82223511]
[51.18303680 69.28177643]
[38.85175323 60.74131775]
[26.52046776 52.20085907]
[14.18918419 43.66040039]
[-1.78905320 45.10105133]
[-12.77308941 33.40786743]
[-10.33691120 17.55086517]
[3.65065336 9.69417381]
[18.45954323 15.86477852]
[22.72964287 31.32911873]
[35.06092834 39.86957550]
[47.39221191 48.41003418]
[59.72349548 56.95049286]
[72.05477905 65.49095154]
[78.19092560 63.58675385]
[84.28740692 62.68899918]
[90.18801117 62.74623871]
[89.26460266 47.77468872]
[88.34118652 32.80313873]
[87.41777039 17.83159065]
[72.81512451 13.82642078]
[60.30557251 5.29472876]
[51.24605179 -6.83803082]
[46.61928177 -21.25578690]
[46.92713165 -36.39461136]
[52.13621140 -50.61235046]
[61.68147659 -62.36677933]
[74.52753448 -70.38286591]
[89.28093719 -73.79107666]
[104.34133911 -72.22171783]
[118.07511139 -65.84502411]
[128.99250793 -55.35268784]
[135.90930176 -41.88284302]
[138.07521057 -26.89659500]
[135.25527954 -12.01954269]
[127.75539398 1.13456583]
[116.38910675 11.13886929]
[102.38932037 16.90817642]
[103.31273651 31.87972641]
[104.23615265 46.85127640]
[105.15956116 61.82282639]
[121.29615784 67.89717865]
[133.16687012 80.40212250]
[138.39382935 96.83277893]
[135.93003845 113.89785767]
[126.26898956 128.17903137]
[134.16548157 140.93228149]
[142.19247437 153.60380554]
[150.34913635 166.19224548]
[158.50579834 178.78068542]
[172.50340271 186.15481567]
[172.93083191 201.04328918]
[181.08750916 213.63172913]
[180.85549927 198.63352966]
[183.49969482 183.86842346]
[188.92222595 169.88285828]
[196.92242432 157.19441223]
[207.20422363 146.27264404]
[219.38710022 137.52178955]
[233.02018738 131.26567078]
[247.59893799 127.73583221]
[262.58383179 127.06289673]
[277.42031860 129.27177429]
[291.55929565 134.28071594]
[304.47750854 141.90435791]
[315.69686890 151.86053467]
[324.80218506 163.78082275]
[331.45648193 177.22404480]
[335.41348267 191.69270325]
[336.52676392 206.65133667]
[334.75512695 221.54634094]
[330.16409302 235.82649231]
[322.92364502 248.96328735]
[313.30166626 260.47058105]
[301.65426636 269.92248535]
[288.41253662 276.96920776]
[274.06649780 281.34994507]
[259.14706421 282.90261841]
[244.20640564 281.56973267]
[229.79742432 277.40060425]
[216.45339966 270.54956055]
[204.66815186 261.27011108]
[194.87783813 249.90571594]
[187.44302368 236.87298584]
[186.82719421 251.86033630]
[202.24090576 256.21264648]
[216.17388916 264.09478760]
[227.83190918 275.05282593]
[236.55145264 288.45764160]
[241.83755493 303.54104614]
[243.39189148 319.43969727]
[241.12959290 335.24468994]
[235.18389893 350.05334473]
[225.89826965 363.02090454]
[213.80659485 373.40859985]
[199.60247803 380.62582397]
[184.09944153 384.26370239]
[184.09944153 399.26370239]
[184.09944153 414.26370239]
[184.09944153 429.26370239]
[184.09944153 444.26370239]
[184.09944153 459.26370239]
[184.09944153 474.26370239]
[184.09944153 489.26370239]
[184.09944153 504.26370239]
[184.09944153 519.26367188]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[24 131]
[25 130]
[26 99]
[27 98]
[29 96]
[30 95]
[31 94]
[33 93]
[34 92]
[38 45]
[39 44]
[46 60]
[47 59]
[48 58]
[49 57]
[50 56]
[63 87]
[64 86]
[65 85]
[66 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
