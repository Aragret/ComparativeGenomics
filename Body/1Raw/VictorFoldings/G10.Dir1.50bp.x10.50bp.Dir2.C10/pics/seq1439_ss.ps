%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUAAAUCAACAAAACUGCUCGCCAGAACACUACGAGCCACAGCUUAAAACUCAAAGGACCUGGCGxxxxxxxxxxCCAACAAUUAUAUUACUACCACUGACAUGACUUUCCAAAAAACACAUAAUUUGAAUCAACACAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[174.29562378 373.21313477]
[174.29562378 358.21313477]
[174.29562378 343.21313477]
[174.29562378 328.21313477]
[174.29562378 313.21313477]
[174.29562378 298.21313477]
[174.29562378 283.21313477]
[174.29562378 268.21313477]
[174.29562378 253.21313477]
[174.29562378 238.21313477]
[170.38978577 223.73059082]
[162.84757996 210.76466370]
[155.05381775 197.94837952]
[147.01147461 185.28659058]
[138.96913147 172.62481689]
[130.80363464 160.04209900]
[122.51576233 147.53964233]
[114.22789764 135.03720093]
[107.68401337 137.02693176]
[100.88875580 137.80540466]
[94.06442261 137.34712219]
[87.43426514 135.66708374]
[81.21517944 132.82025146]
[75.61060333 128.89974976]
[70.80389404 124.03384399]
[66.95229340 118.38170624]
[64.18179321 112.12823486]
[49.30228424 114.02565765]
[34.42277145 115.92308044]
[19.54326439 117.82049561]
[4.66375494 119.71791840]
[-3.85931373 129.44276428]
[-16.32649994 130.69256592]
[-25.97113228 123.33906555]
[-40.88483047 124.94580078]
[-53.80050659 135.05111694]
[-68.90654755 128.66835022]
[-70.66314697 112.36355591]
[-57.26327515 102.90969849]
[-42.49156570 110.03209686]
[-27.57786560 108.42536926]
[-14.01746464 97.32009125]
[2.76633430 104.83840942]
[17.64584351 102.94098663]
[32.52535248 101.04356384]
[47.40486145 99.14614868]
[62.28437042 97.24872589]
[66.67995453 82.11669922]
[76.86093903 70.08976746]
[91.05959320 63.25619507]
[90.47434998 48.26761627]
[89.88910675 33.27903748]
[83.64578247 19.64008904]
[72.68324280 9.40179157]
[61.72070694 -0.83650541]
[46.51264954 2.24483228]
[32.41193008 -4.23199368]
[24.84055710 -17.77651024]
[26.70988274 -33.18057632]
[37.30110931 -44.52101517]
[52.54169846 -47.43719101]
[66.57132721 -40.80778122]
[73.99532318 -27.18192673]
[71.95900726 -11.79904461]
[82.92154694 -1.56074774]
[93.88407898 8.67754936]
[101.14406586 6.79537058]
[97.37993622 -7.72466040]
[111.90002441 -11.48857021]
[115.66403961 3.03101254]
[122.92402649 1.14883339]
[127.53144073 -13.12603188]
[132.13883972 -27.40089798]
[118.99170685 -34.72475815]
[107.52619934 -44.47300339]
[98.18302155 -56.27093887]
[91.32130432 -69.66508484]
[87.20479584 -84.14060211]
[85.99172211 -99.14109039]
[87.72870636 -114.08997345]
[92.34899139 -128.41265869]
[99.67497253 -141.55860901]
[109.42507935 -153.02253723]
[121.22452545 -162.36381531]
[134.61978149 -169.22335815]
[149.09596252 -173.33752441]
[164.09664917 -174.54817200]
[179.04524231 -172.80876160]
[193.36718750 -168.18615723]
[206.51194763 -160.85804749]
[217.97430420 -151.10609436]
[227.31365967 -139.30513000]
[234.17103577 -125.90876770]
[238.28286743 -111.43191528]
[239.49108887 -96.43103790]
[237.74926758 -81.48271942]
[233.12434387 -67.16152954]
[225.79409790 -54.01794815]
[216.04028320 -42.55717087]
[204.23780823 -33.21972656]
[190.84034729 -26.36451340]
[176.36282349 -22.25503349]
[161.36175537 -21.04924393]
[146.41371155 -22.79348755]
[141.80630493 -8.51862240]
[137.19889832 5.75624275]
[104.87768555 32.69379425]
[105.46292877 47.68237305]
[106.04817200 62.67095184]
[124.63839722 71.31224060]
[135.98774719 88.38446045]
[136.76078796 108.87033081]
[126.73034668 126.74932861]
[135.01821899 139.25178528]
[143.30607605 151.75422668]
[150.69445801 157.21293640]
[151.63090515 164.58247375]
[159.67324829 177.24424744]
[167.71559143 189.90603638]
[173.45968628 193.34188843]
[176.16282654 198.41322327]
[175.81349182 203.22245789]
[183.35569763 216.18838501]
[183.43376160 201.18858337]
[186.67813110 186.54365540]
[192.94242859 172.91432190]
[201.94403076 160.91552734]
[213.27680969 151.08860779]
[226.42944336 143.87695312]
[240.80853271 139.60592651]
[255.76533508 138.46821594]
[270.62500000 140.51515198]
[284.71713257 145.65440369]
[297.40591431 153.65406799]
[308.11886597 164.15325928]
[316.37265015 176.67823792]
[321.79483032 190.66394043]
[324.14083862 205.47935486]
[323.30477905 220.45603943]
[319.32440186 234.91827393]
[312.37927246 248.21357727]
[302.78274536 259.74209595]
[290.96777344 268.98367310]
[277.46746826 275.52139282]
[262.89089966 279.06024170]
[247.89570618 279.44055176]
[233.15847778 276.64523315]
[219.34410095 270.80032349]
[207.07583618 262.16955566]
[196.90722656 251.14236450]
[189.29562378 238.21313477]
[189.29562378 253.21313477]
[189.29562378 268.21313477]
[189.29562378 283.21313477]
[189.29562378 298.21313477]
[189.29562378 313.21313477]
[189.29562378 328.21313477]
[189.29562378 343.21313477]
[189.29562378 358.21313477]
[189.29562378 373.21313477]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 160]
[2 159]
[3 158]
[4 157]
[5 156]
[6 155]
[7 154]
[8 153]
[9 152]
[10 151]
[11 123]
[12 122]
[13 119]
[14 118]
[15 117]
[16 115]
[17 114]
[18 113]
[27 47]
[28 46]
[29 45]
[30 44]
[31 43]
[34 41]
[35 40]
[50 109]
[51 108]
[52 107]
[53 66]
[54 65]
[55 64]
[71 106]
[72 105]
[73 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
