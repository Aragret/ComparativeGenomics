%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGCAUUGCGAGACGCUGGAGCCGGAGCACCCUAUGUCGCAGUAUCUGUCUUUGAUUCCUGCxxxxxxxxxxCAAUCCUCUGAUCAGGGUGAGCAUCAAACUCAAACUACGCCCUGAUCGGCGCACUGCGAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.42711639 240.74908447]
[95.11505890 225.75231934]
[94.80300903 210.75556946]
[94.49095154 195.75881958]
[94.17889404 180.76206970]
[93.86683655 165.76530457]
[93.55477905 150.76855469]
[93.24272156 135.77180481]
[92.93067169 120.77504730]
[79.21061707 114.71203613]
[67.91161346 124.57775879]
[56.61260605 134.44348145]
[51.09714508 151.98086548]
[33.79768753 154.76092529]
[28.80263519 169.77291870]
[14.18273735 172.62034607]
[3.09142160 182.71899414]
[-7.99989367 192.81764221]
[-15.64102364 207.95202637]
[-32.29922104 204.79911804]
[-33.88098907 187.91912842]
[-18.09854317 181.72633362]
[-7.00722790 171.62767029]
[4.08408737 161.52902222]
[8.28581429 147.23934937]
[23.69903755 143.66960144]
[24.59242249 131.56550598]
[33.80675125 123.06167603]
[46.74688339 123.14447784]
[58.04588699 113.27875519]
[69.34489441 103.41303253]
[70.59176636 88.46494293]
[61.08340836 76.86360168]
[51.57505035 65.26226044]
[37.71283722 72.21466827]
[22.66158676 75.92156219]
[7.17006302 76.20170593]
[-7.99176168 73.04425812]
[-22.07098770 66.60916138]
[-34.36917114 57.21902847]
[-44.27697372 45.34299088]
[-51.30435181 31.57324791]
[-55.10479736 16.59554672]
[-55.49241257 1.15501857]
[-52.45101929 -13.98087788]
[-46.13478851 -28.06050873]
[-36.86043930 -40.38539505]
[-46.60808945 -51.78641510]
[-56.35574341 -63.18743515]
[-66.10339355 -74.58845520]
[-83.58244324 -80.28604889]
[-86.18240356 -97.61349487]
[-96.16513062 -108.80925751]
[-106.14785767 -120.00502014]
[-121.77189636 -119.35433197]
[-134.12724304 -128.93971252]
[-137.38006592 -144.23524475]
[-129.99450684 -158.01882935]
[-115.45777130 -163.78230286]
[-100.63368225 -158.80430603]
[-92.52171326 -145.43531799]
[-94.95208740 -129.98774719]
[-84.96936035 -118.79198456]
[-74.98663330 -107.59621429]
[-62.89248657 -106.57697296]
[-54.48497009 -97.27468109]
[-54.70237350 -84.33610535]
[-44.95471954 -72.93508911]
[-35.20706940 -61.53406525]
[-25.45941734 -50.13304520]
[-12.67601395 -57.04244232]
[1.27440369 -61.13117599]
[15.77719402 -62.21646118]
[30.19282532 -60.24788666]
[43.88507462 -55.30977631]
[56.24911880 -47.61755371]
[66.73822784 -37.50837326]
[74.88796234 -25.42631912]
[80.33673096 -11.90291882]
[82.84182739 2.46626067]
[82.29026031 17.04782677]
[78.70380402 31.19848633]
[72.23821259 44.29342651]
[63.17639160 55.75390244]
[72.68474579 67.35524750]
[82.19310760 78.95658875]
[103.91304779 75.31681824]
[119.06268311 88.20559692]
[133.77064514 85.26011658]
[148.47860718 82.31462860]
[163.18656921 79.36914825]
[177.89453125 76.42366791]
[192.60249329 73.47817993]
[207.31045532 70.53269958]
[222.01841736 67.58721924]
[236.72637939 64.64173889]
[251.43434143 61.69625473]
[265.88903809 57.68851471]
[280.01382446 52.63975525]
[294.13864136 47.59099960]
[308.26342773 42.54224396]
[313.52661133 27.81699562]
[327.04968262 19.96456909]
[342.44744873 22.69264030]
[352.44958496 34.71309662]
[352.33337402 50.35025024]
[342.15368652 62.22071075]
[326.71704102 64.71961212]
[313.31219482 56.66704559]
[299.18737793 61.71580505]
[285.06259155 66.76455688]
[270.93777466 71.81331635]
[284.32141113 78.58665466]
[290.38064575 92.30838776]
[286.37054443 106.76242828]
[274.10778809 115.40095520]
[259.14746094 114.31063080]
[248.26676941 103.98538971]
[246.39477539 89.10266113]
[254.37982178 76.40421295]
[239.67185974 79.34970093]
[224.96389771 82.29518127]
[210.25593567 85.24066162]
[195.54797363 88.18614197]
[180.84001160 91.13162994]
[166.13204956 94.07711029]
[151.42408752 97.02259064]
[136.71612549 99.96807861]
[122.00816345 102.91355896]
[136.32775879 107.38002777]
[151.31336975 106.72319031]
[164.71896362 113.45296478]
[173.14500427 125.86272430]
[174.45468140 140.80543518]
[168.31587219 154.49174500]
[156.28535461 163.45091248]
[141.41397095 165.41093445]
[127.47297668 159.87478638]
[117.99773407 148.24638367]
[115.39110565 133.47427368]
[107.92742157 120.46298981]
[108.23947906 135.45974731]
[108.55153656 150.45649719]
[108.86359406 165.45324707]
[109.17564392 180.45001221]
[109.48770142 195.44676208]
[109.79975891 210.44351196]
[110.11181641 225.44026184]
[110.42387390 240.43702698]
[113.01486969 259.64474487]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 31]
[11 30]
[12 29]
[14 26]
[16 24]
[17 23]
[18 22]
[32 86]
[33 85]
[34 84]
[47 70]
[48 69]
[49 68]
[50 67]
[52 64]
[53 63]
[54 62]
[88 129]
[89 128]
[90 127]
[91 126]
[92 125]
[93 124]
[94 123]
[95 122]
[96 121]
[97 120]
[98 112]
[99 111]
[100 110]
[101 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
