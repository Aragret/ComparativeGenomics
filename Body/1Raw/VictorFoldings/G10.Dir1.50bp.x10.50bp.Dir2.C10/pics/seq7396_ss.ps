%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCAACCCCAUGGCCUCCAUGACUUUUUCAAAAAGGUAUUAGAAAAACCAUUUCAUAACUUxxxxxxxxxxAAUCAAUACUAAACCCCCAUAAAUAGGAGAAGGCUUAGAAGAAAACCCCACAAACCCCAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[147.97741699 313.84158325]
[147.66535950 298.84481812]
[147.35330200 283.84805298]
[147.04124451 268.85131836]
[146.72920227 253.85455322]
[146.41714478 238.85780334]
[146.10508728 223.86105347]
[145.79302979 208.86430359]
[145.48097229 193.86753845]
[141.17338562 179.49935913]
[133.18347168 166.80442810]
[125.19355011 154.10949707]
[110.65819550 151.06663513]
[102.37444305 138.30599976]
[105.66463470 123.08060455]
[95.42830658 128.63728333]
[81.89414215 129.05445862]
[67.75257874 122.75682831]
[55.14145279 130.87837219]
[42.53032303 138.99990845]
[29.91919518 147.12145996]
[17.30806732 155.24299622]
[7.26515245 168.90228271]
[-8.64048290 163.03311157]
[-7.40380335 146.12432861]
[9.18652534 142.63186646]
[21.79765320 134.51033020]
[34.40878296 126.38878632]
[47.01990891 118.26724243]
[59.63103867 110.14569855]
[58.54261780 102.72509766]
[56.36578369 87.88388824]
[55.27736282 80.46328735]
[40.86514664 76.30539703]
[26.45293236 72.14751434]
[12.04071522 67.98962402]
[-2.37150049 63.83173752]
[-16.78371620 59.67385101]
[-28.47325897 65.22438812]
[-40.42035294 61.41834641]
[-46.35156631 50.82929611]
[-60.67416382 46.37247849]
[-75.48815918 52.53081131]
[-89.46921539 44.66252899]
[-91.89225006 28.80351257]
[-80.89852905 17.11943817]
[-64.92148590 18.57332802]
[-56.21735001 32.04988098]
[-41.89475250 36.50669861]
[-25.04398727 31.70548439]
[-12.62582874 45.26163483]
[1.78638709 49.41952133]
[16.19860268 53.57741165]
[30.61081886 57.73529816]
[45.02303696 61.89318466]
[59.43525314 66.05107117]
[72.52840424 58.73196793]
[76.53614807 44.27727890]
[80.39330292 29.78168106]
[84.09946442 15.24674511]
[87.80562592 0.71180916]
[91.51178741 -13.82312679]
[77.70569611 -19.76772881]
[64.99958801 -27.79899597]
[53.70635605 -37.71915054]
[44.10411835 -49.28390121]
[36.42932892 -62.20845795]
[30.87099075 -76.17453766]
[27.56598282 -90.83821106]
[26.59569359 -105.83837891]
[27.98401642 -120.80564880]
[31.69676208 -135.37142944]
[37.64250183 -149.17703247]
[45.67481995 -161.88247681]
[55.59590530 -173.17488098]
[67.16144562 -182.77616882]
[80.08663940 -190.44989014]
[94.05317688 -196.00708008]
[108.71712494 -199.31088257]
[123.71736908 -200.27993774]
[138.68452454 -198.89038086]
[153.25000000 -195.17642212]
[167.05511475 -189.22955322]
[179.75990295 -181.19618225]
[191.05148315 -171.27416992]
[200.65182495 -159.70782471]
[208.32447815 -146.78201294]
[213.88050842 -132.81501770]
[217.18309021 -118.15078735]
[218.15090942 -103.15045929]
[216.76011658 -88.18342590]
[213.04496765 -73.61825562]
[207.09695435 -59.81363297]
[199.06253052 -47.10951233]
[189.13958740 -35.81874084]
[177.57246399 -26.21936417]
[164.64599609 -18.54777527]
[150.67854309 -12.99289417]
[136.01405334 -9.69151497]
[121.01364899 -8.72493839]
[106.04672241 -10.11696625]
[102.34056091 4.41797018]
[98.63439941 18.95290565]
[94.92823792 33.48784256]
[96.33226013 40.79362106]
[90.99083710 48.28501892]
[86.98309326 62.73970795]
[125.92475891 81.90174866]
[118.35956573 115.09069061]
[133.51011658 118.70986938]
[141.43218994 131.69815063]
[137.88848877 146.11958313]
[145.87840271 158.81451416]
[153.86831665 171.50944519]
[153.69108582 156.51049805]
[156.79376221 141.83488464]
[163.02656555 128.19113159]
[172.08859253 116.23789978]
[183.54235840 106.55227661]
[196.83489990 99.60185242]
[211.32447815 95.72216797]
[226.31159973 95.10053253]
[241.07269287 97.76695251]
[254.89517212 103.59270477]
[267.11169434 112.29653168]
[277.13247681 123.45823669]
[284.47375488 136.53897095]
[288.78112793 150.90721130]
[289.84661865 165.86932373]
[287.61880493 180.70297241]
[282.20523071 194.69200134]
[273.86724854 207.16108704]
[263.00738525 217.50825500]
[250.14996338 225.23394775]
[235.91566467 229.96520996]
[220.99169922 231.47361755]
[206.09855652 229.68635559]
[191.95524597 224.68971252]
[179.24453735 216.72489929]
[168.58010864 206.17645264]
[160.47772217 193.55549622]
[160.78977966 208.55224609]
[161.10183716 223.54899597]
[161.41389465 238.54574585]
[161.72595215 253.54251099]
[162.03800964 268.53924561]
[162.35006714 283.53601074]
[162.66212463 298.53277588]
[162.97416687 313.52951050]
[165.56517029 332.73724365]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 114]
[11 113]
[12 112]
[15 109]
[18 30]
[19 29]
[20 28]
[21 27]
[22 26]
[33 56]
[34 55]
[35 54]
[36 53]
[37 52]
[38 51]
[41 49]
[42 48]
[57 107]
[58 106]
[59 104]
[60 103]
[61 102]
[62 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
