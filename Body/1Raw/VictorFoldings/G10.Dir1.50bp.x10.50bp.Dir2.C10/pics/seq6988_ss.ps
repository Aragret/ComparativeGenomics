%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCUUUCUUUUCACCGUAGGUGGCCUGACUGGCAUUGUAUUAGCAAACUCAUCACUAGACAxxxxxxxxxxCCUCCAUCAUCACCUCAACCCAAAAAGGCAUAAUUAAACUUUACUUCCUCUCUUUCUUCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[183.89732361 383.80822754]
[183.89732361 368.80822754]
[183.89732361 353.80822754]
[183.89732361 338.80822754]
[183.89732361 323.80822754]
[183.89732361 308.80822754]
[183.89732361 293.80822754]
[183.89732361 278.80822754]
[183.89732361 263.80822754]
[183.89732361 248.80821228]
[179.58973694 234.44003296]
[164.72912598 235.45385742]
[151.26676941 228.84925842]
[142.86227417 216.31008911]
[141.85595703 201.14814758]
[148.61801147 187.42875671]
[140.36572266 174.90278625]
[132.11343384 162.37683105]
[123.86114502 149.85086060]
[115.60885620 137.32490540]
[100.14300537 140.45693970]
[84.65540314 137.43431091]
[71.50215149 128.71685791]
[62.68424988 115.63072205]
[59.54314804 100.16670990]
[62.55669785 84.67733765]
[71.26645660 71.51898956]
[62.75536346 59.16741562]
[54.24427414 46.81584167]
[45.73318481 34.46426773]
[37.22209167 22.11269569]
[28.71100426 9.76112366]
[22.82205200 6.53191853]
[19.92991257 1.54525340]
[20.11535645 -3.28601217]
[12.12544060 -15.98094177]
[4.13552475 -28.67587090]
[-3.13223457 -34.31781387]
[-3.88537383 -41.71905899]
[-11.60945892 -54.57746124]
[-19.33354378 -67.43586731]
[-33.18359756 -61.60862350]
[-47.72200394 -57.81184387]
[-62.65277863 -56.12282944]
[-77.67194366 -56.57595825]
[-92.47373962 -59.16200638]
[-106.75681305 -63.82833099]
[-120.23038483 -70.47992706]
[-132.62013245 -78.98137665]
[-143.67384338 -89.15960693]
[-153.16645813 -100.80739594]
[-160.90473938 -113.68760681]
[-166.73112488 -127.53802490]
[-170.52699280 -142.07666016]
[-172.21508789 -157.00753784]
[-171.76103210 -172.02668762]
[-169.17407227 -186.82832336]
[-164.50686646 -201.11109924]
[-157.85443115 -214.58425903]
[-149.35221863 -226.97349548]
[-139.17329407 -238.02656555]
[-127.52492523 -247.51846313]
[-114.64423370 -255.25593567]
[-100.79345703 -261.08145142]
[-86.25457764 -264.87643433]
[-71.32360077 -266.56359863]
[-56.30448532 -266.10861206]
[-41.50301361 -263.52075195]
[-27.22051620 -258.85266113]
[-13.74777222 -252.19938660]
[-1.35906720 -243.69639587]
[9.69338036 -233.51679993]
[19.18455696 -221.86784363]
[26.92123413 -208.98667908]
[32.74590302 -195.13552856]
[36.53998184 -180.59642029]
[38.22623062 -165.66534424]
[37.77031326 -150.64625549]
[35.18151093 -135.84494019]
[30.51253700 -121.56273651]
[23.85843849 -108.09040070]
[15.35468769 -95.70222473]
[5.17440844 -84.65040588]
[-6.47514153 -75.15995026]
[1.24894357 -62.30154800]
[8.97302818 -49.44314575]
[16.83045387 -36.66578674]
[24.82036972 -23.97085762]
[32.81028748 -11.27592850]
[41.06257629 1.25003362]
[49.57366562 13.60160637]
[58.08475494 25.95317841]
[66.59584808 38.30475235]
[75.10693359 50.65632248]
[83.61802673 63.00789642]
[97.24264526 59.63687515]
[111.19912720 61.12372971]
[123.80773926 67.28950500]
[133.55099487 77.39213562]
[139.25624084 90.21571350]
[140.23683167 104.21686554]
[136.37475586 117.71051025]
[128.13481140 129.07261658]
[136.38710022 141.59857178]
[144.63938904 154.12454224]
[152.89167786 166.65049744]
[161.14396667 179.17646790]
[176.41844177 178.37786865]
[189.95245361 185.28636169]
[198.15681458 197.95739746]
[198.91218567 212.93354797]
[192.11569214 226.18774414]
[191.72024536 211.19294739]
[194.39251709 196.43290710]
[200.02011108 182.52857971]
[208.36624146 170.06495667]
[219.07977295 159.56637573]
[231.70999146 151.47454834]
[245.72550964 146.12991333]
[260.53668213 143.75730896]
[275.52038574 144.45657349]
[290.04620361 148.19827271]
[303.50305176 154.82499695]
[315.32473755 164.05793762]
[325.01394653 175.50868225]
[332.16302490 188.69543457]
[336.47119141 203.06344604]
[337.75720215 218.00822449]
[335.96694946 232.90100098]
[331.17575073 247.11523438]
[323.58520508 260.05291748]
[313.51461792 271.16970825]
[301.38769531 279.99792480]
[287.71463013 286.16616821]
[273.07064819 289.41491699]
[258.07189941 289.60751343]
[243.34934998 286.73580933]
[229.52241516 280.92062378]
[217.17283630 272.40667725]
[206.82014465 261.55209351]
[198.89732361 248.80821228]
[198.89732361 263.80822754]
[198.89732361 278.80822754]
[198.89732361 293.80822754]
[198.89732361 308.80822754]
[198.89732361 323.80822754]
[198.89732361 338.80822754]
[198.89732361 353.80822754]
[198.89732361 368.80822754]
[198.89732361 383.80822754]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 112]
[16 107]
[17 106]
[18 105]
[19 104]
[20 103]
[27 95]
[28 94]
[29 93]
[30 92]
[31 91]
[32 90]
[35 89]
[36 88]
[37 87]
[39 86]
[40 85]
[41 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
