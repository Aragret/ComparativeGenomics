%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGCUUCGACCCUAUAUCCCCCGCCCGCGUCCCUUUCUCCAUAAAAUUCUUCUUAGUAGCUAxxxxxxxxxxCCUACUCCACUCAAGCACUAUAGUUGUAGCAGGAAUCUUCUUACUCAUCCGCUUCCACCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-23.19260406 237.87449646]
[-27.24155235 253.16883850]
[-41.65537262 256.92263794]
[-52.09518433 267.69345093]
[-62.53499985 278.46426392]
[-66.58394623 293.75857544]
[-80.99776459 297.51239014]
[-91.43758392 308.28320312]
[-101.87739563 319.05401611]
[-112.31720734 329.82482910]
[-122.75701904 340.59561157]
[-116.68934631 354.53305054]
[-116.42217255 369.73162842]
[-121.99623871 383.87371826]
[-132.56152344 394.80270386]
[-146.50692749 400.85205078]
[-161.70585632 401.09921265]
[-175.84057617 395.50656128]
[-186.75567627 384.92691040]
[-192.78665161 370.97357178]
[-193.01383972 355.77432251]
[-187.40258789 341.64697266]
[-176.80857849 330.74578857]
[-162.84732056 324.73318481]
[-147.64779663 324.52597046]
[-133.52783203 330.15582275]
[-123.08801270 319.38500977]
[-112.64820099 308.61419678]
[-102.20838928 297.84338379]
[-91.76857758 287.07257080]
[-88.46635437 272.54864502]
[-73.30580902 268.02444458]
[-62.86599350 257.25363159]
[-52.42618179 246.48281860]
[-49.12395859 231.95889282]
[-33.96341324 227.43469238]
[-44.10167313 215.84689331]
[-53.24066544 203.45576477]
[-61.31700516 190.34721375]
[-68.27469635 176.61215210]
[-74.06548309 162.34582520]
[-78.64921570 147.64717102]
[-81.99411011 132.61810303]
[-84.07696533 117.36283112]
[-84.88333130 101.98716736]
[-84.40763092 86.59772491]
[-82.65316010 71.30121613]
[-79.63207245 56.20372391]
[-75.36533356 41.40993118]
[-69.88252258 27.02243423]
[-63.22166061 13.14100075]
[-55.42893982 -0.13811070]
[-46.55839539 -12.72281456]
[-36.67154312 -24.52584267]
[-25.83694267 -35.46534729]
[-14.12972641 -45.46546555]
[-1.63107812 -54.45685577]
[11.57233047 -62.37716293]
[25.38894081 -69.17147064]
[39.72294235 -74.79265594]
[54.47493362 -79.20174408]
[69.54261780 -82.36815643]
[84.82151031 -84.26993561]
[84.19753265 -99.25695038]
[83.57355499 -114.24396515]
[82.94957733 -129.23098755]
[82.32559967 -144.21800232]
[68.03993988 -149.41304016]
[56.83314514 -159.68319702]
[50.41416550 -173.46235657]
[49.76185226 -188.64929199]
[54.97567749 -202.92810059]
[65.26056671 -214.12136841]
[79.04815674 -220.52221680]
[94.23593140 -221.15455627]
[108.50787354 -215.92195129]
[119.68761444 -205.62234497]
[126.07032013 -191.82635498]
[126.68267059 -176.63775635]
[121.43130493 -162.37271118]
[111.11699677 -151.20652771]
[97.31261444 -144.84197998]
[97.93659210 -129.85496521]
[98.56056976 -114.86794281]
[99.18454742 -99.88092804]
[99.80852509 -84.89391327]
[112.98034668 -84.43781281]
[126.08620453 -83.04454803]
[139.05952454 -80.72119141]
[151.83436584 -77.47956085]
[164.34582520 -73.33612061]
[176.53033447 -68.31192017]
[188.32598877 -62.43249893]
[199.67282104 -55.72772598]
[210.51321411 -48.23166656]
[220.79205322 -39.98241043]
[230.45713806 -31.02188110]
[239.45933533 -21.39560127]
[247.75289917 -11.15248585]
[255.29571533 -0.34458229]
[262.04943848 10.97319126]
[267.97976685 22.74332809]
[273.05654907 34.90602112]
[277.25399780 47.39947128]
[280.55078125 60.16019440]
[282.93014526 73.12335205]
[284.38003540 86.22306824]
[284.89300537 99.39279938]
[284.46652222 112.56560516]
[283.10275269 125.67456818]
[280.80856323 138.65307617]
[277.59567261 151.43518066]
[291.82244873 156.18899536]
[306.04922485 160.94281006]
[316.30203247 149.68225098]
[330.25109863 143.57136536]
[345.47970581 143.66888428]
[359.34939575 149.95791626]
[369.45712280 161.34886169]
[374.05169678 175.86814880]
[372.33709717 191.00022888]
[364.61035156 204.12338257]
[352.21017456 212.96394348]
[337.28497314 215.99023438]
[322.42065430 212.67793274]
[310.19250488 203.60090637]
[302.71914673 190.33180237]
[301.29541016 175.16958618]
[287.06863403 170.41577148]
[272.84185791 165.66195679]
[266.39871216 180.60559082]
[258.66656494 194.92480469]
[249.70526123 208.50866699]
[239.58424377 221.25193787]
[228.38192749 233.05592346]
[216.18505859 243.82916260]
[203.08815002 253.48820496]
[189.19265747 261.95822144]
[174.60621643 269.17361450]
[159.44181824 275.07846069]
[143.81694031 279.62704468]
[127.85263824 282.78408813]
[111.67256927 284.52520752]
[95.40207672 284.83682251]
[79.16719818 283.71661377]
[63.09370804 281.17318726]
[47.30611801 277.22625732]
[31.92673111 271.90643311]
[17.07468414 265.25491333]
[2.86503291 257.32321167]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 36]
[3 34]
[4 33]
[5 32]
[7 30]
[8 29]
[9 28]
[10 27]
[11 26]
[63 86]
[64 85]
[65 84]
[66 83]
[67 82]
[112 130]
[113 129]
[114 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
