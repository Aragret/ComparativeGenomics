%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGUCACAGCCCUAUACUCCCUCUACAUAUUUACCACAACACAAUGGGGCUCACUCACCCACCAxxxxxxxxxxCAAUUAGGUCUCCACCCCUGACUCCCCUCAGCCAUAGAAGGCCCCACCCCAGUCUCAGCCCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[118.66623688 154.53924561]
[112.00388336 141.10000610]
[105.34152222 127.66077423]
[98.67916870 114.22154236]
[89.83811951 102.10395050]
[79.07353973 91.65772247]
[68.30895996 81.21148682]
[57.54437637 70.76525116]
[46.77979660 60.31901932]
[36.01521683 49.87278748]
[25.25063515 39.42655182]
[14.48605442 28.98031807]
[3.72147298 18.53408432]
[-7.04310799 8.08785152]
[-17.80768967 -2.35838199]
[-31.12631416 2.14674830]
[-46.29676056 -3.24931979]
[-61.29000473 -2.79915929]
[-76.28324890 -2.34899855]
[-91.27648926 -1.89883792]
[-106.26973724 -1.44867730]
[-121.26297760 -0.99851662]
[-136.25622559 -0.54835600]
[-151.24946594 -0.09819533]
[-153.93103027 14.71743488]
[-159.63470459 28.65163040]
[-168.11114502 41.09524918]
[-178.98980713 51.50430298]
[-191.79510498 59.42376328]
[-205.96726990 64.50741577]
[-220.88674927 66.53303528]
[-235.90130615 65.41205597]
[-250.35458374 61.19349670]
[-263.61474609 54.06176376]
[-275.10214233 44.32863617]
[-284.31454468 32.41959381]
[-290.84924316 18.85525703]
[-294.42059326 4.22859621]
[-294.87243652 -10.82097244]
[-292.18505859 -25.63554764]
[-286.47589111 -39.56749725]
[-277.99456787 -52.00777817]
[-267.11181641 -62.41255569]
[-254.30339050 -70.32697296]
[-240.12922668 -75.40505219]
[-225.20896912 -77.42479706]
[-210.19483948 -76.29792023]
[-195.74322510 -72.07366943]
[-182.48585510 -64.93672180]
[-171.00230408 -55.19907379]
[-161.79458618 -43.28641129]
[-155.26521301 -29.71950340]
[-151.69963074 -15.09143925]
[-136.70639038 -15.54159927]
[-121.71314240 -15.99176025]
[-106.71989441 -16.44192123]
[-91.72665405 -16.89208221]
[-76.73340607 -17.34224129]
[-61.74016571 -17.79240227]
[-46.74692154 -18.24256325]
[-61.18395615 -22.31344032]
[-67.91581726 -35.71799469]
[-62.55969238 -49.72912979]
[-48.60271072 -55.22483063]
[-35.13163376 -48.62709808]
[-30.91680908 -34.23185730]
[-30.61667633 -49.22885513]
[-30.31654358 -64.22585297]
[-44.77225876 -68.57727814]
[-57.51729584 -76.66841888]
[-67.60589600 -87.89885712]
[-74.28940582 -101.43522644]
[-77.07187653 -116.27303314]
[-75.74682617 -131.31120300]
[-70.41257477 -145.43382263]
[-61.46497345 -157.59289551]
[-49.56798172 -166.88613892]
[-35.60444260 -172.62391663]
[-20.61053848 -174.38046265]
[-5.69891977 -172.02542114]
[8.02387333 -165.73355103]
[19.53951836 -155.97177124]
[27.99347878 -143.46444702]
[32.75841522 -129.13970947]
[33.48073578 -114.06056213]
[30.10683823 -99.34596252]
[22.88709068 -86.08783722]
[12.35724735 -75.27003479]
[-0.70130897 -67.69528961]
[-15.31954670 -63.92572021]
[-15.61967945 -48.92872238]
[-15.91981125 -33.93172455]
[-11.51412106 -48.27013016]
[-0.31156528 -58.24523544]
[14.43982315 -60.96489334]
[28.46307564 -55.64057159]
[37.69233322 -43.81598663]
[39.45170212 -28.91952515]
[33.23106766 -15.27021217]
[20.83402443 -6.82548904]
[5.85493279 -6.03379011]
[-7.36145544 -13.12296295]
[3.40312552 -2.67672968]
[14.16770649 7.76950407]
[24.93228722 18.21573830]
[35.69686890 28.66197014]
[46.46144867 39.10820389]
[57.22603226 49.55443954]
[67.99060822 60.00067139]
[78.75519562 70.44690704]
[89.51977539 80.89313507]
[100.28435516 91.33937073]
[109.99745941 75.63252258]
[129.86636353 67.67272949]
[144.82958984 68.72240448]
[159.79281616 69.77207947]
[171.55688477 59.21829605]
[187.33323669 60.15750885]
[197.76205444 72.03250122]
[196.65609741 87.79804230]
[184.67150879 98.10072327]
[168.91854858 96.82814789]
[158.74314880 84.73530579]
[143.77992249 83.68563080]
[128.81668091 82.63595581]
[124.64211273 88.86676788]
[137.10359192 97.21610260]
[128.75407410 109.67745972]
[116.29296875 101.32837677]
[112.11840057 107.55918121]
[118.78075409 120.99842072]
[125.44311523 134.43765259]
[132.10546875 147.87687683]
[146.82022095 144.59979248]
[161.89164734 144.94009399]
[176.44349670 148.87800598]
[189.62974548 156.18460083]
[200.68376160 166.43507385]
[208.96289062 179.03346252]
[213.98577881 193.24732971]
[215.46041870 208.25028992]
[213.30107117 223.17010498]
[207.63327026 237.13932800]
[198.78652954 249.34584045]
[187.27520752 259.07995605]
[173.76855469 265.77572632]
[159.05180359 269.04391479]
[143.98060608 268.69445801]
[129.43113708 264.74771118]
[116.24932861 257.43313599]
[105.20152283 247.17597961]
[96.93003845 234.57255554]
[91.91576385 220.35565186]
[90.45021820 205.35180664]
[92.61861420 190.43330383]
[98.29488373 176.46751404]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 133]
[2 132]
[3 131]
[4 130]
[5 112]
[6 111]
[7 110]
[8 109]
[9 108]
[10 107]
[11 106]
[12 105]
[13 104]
[14 103]
[15 102]
[17 60]
[18 59]
[19 58]
[20 57]
[21 56]
[22 55]
[23 54]
[24 53]
[66 92]
[67 91]
[68 90]
[114 125]
[115 124]
[116 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
