%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCUCCCUUCACCAUUUCCGACGGCAUCUACGGCUCAACAUUUUUUGUAGCCACAGGCUUCxxxxxxxxxxAACAAUGAACAAGAUAUUCGAAAAAUAGGAGGACUACUCAAAACCAUACCUCUCACUUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[141.44398499 318.57489014]
[141.44398499 303.57489014]
[141.44398499 288.57489014]
[141.44398499 273.57489014]
[141.44398499 258.57489014]
[141.44398499 243.57487488]
[141.44398499 228.57487488]
[141.44398499 213.57487488]
[141.44398499 198.57487488]
[141.44398499 183.57487488]
[137.13639832 169.20669556]
[128.88410950 156.68072510]
[120.63182068 144.15476990]
[112.37953186 131.62879944]
[104.12724304 119.10284424]
[112.08407593 131.81852722]
[113.49692535 146.75184631]
[108.06600952 160.73416138]
[96.94367981 170.79864502]
[82.48992920 174.80975342]
[67.77162170 171.91641235]
[55.91176224 162.73251343]
[49.42683411 149.20677185]
[49.69284439 134.20913696]
[56.65334320 120.92186737]
[68.83142090 112.16432953]
[83.64287567 109.79473114]
[68.77983093 111.81707001]
[53.91678619 113.83940125]
[48.17509079 128.08470154]
[36.07010651 137.53800964]
[20.85800934 139.65641785]
[6.63077879 133.87010193]
[-2.78453326 121.73554230]
[-4.85525465 106.51688385]
[0.97562891 92.30785370]
[13.13963890 82.93062592]
[28.36471748 80.90761566]
[42.55539322 86.78301239]
[51.89445114 98.97635651]
[66.75749969 96.95401764]
[81.62054443 94.93168640]
[66.73799133 93.05828857]
[56.95362091 81.68876648]
[57.31912994 66.69322205]
[67.64579773 55.81388474]
[82.60195160 54.66778946]
[94.46569061 63.84666443]
[97.11135101 78.61344910]
[98.35822296 63.66535950]
[99.60510254 48.71727371]
[100.85197449 33.76918793]
[102.09884644 18.82110023]
[103.34572601 3.87301302]
[69.33766937 -22.04858208]
[65.63150787 -36.58351898]
[61.92534256 -51.11845398]
[56.29338837 -65.02101135]
[48.83847809 -78.03732300]
[41.38356781 -91.05362701]
[33.92865753 -104.06993866]
[20.80996704 -114.80941772]
[27.49812508 -130.38839722]
[44.31974792 -128.27430725]
[46.94496536 -111.52484894]
[54.39987564 -98.50853729]
[61.85478592 -85.49223328]
[69.30970001 -72.47592163]
[70.55404663 -87.42421722]
[77.67140198 -100.62812805]
[89.47442627 -109.88494110]
[103.99411011 -113.65042114]
[118.80824280 -111.29638672]
[131.44549561 -103.21556091]
[139.79769897 -90.75598907]
[142.47149658 -75.99622345]
[139.02085876 -61.39851379]
[130.02142334 -49.39809036]
[116.97450256 -41.99689102]
[102.05661011 -40.42960358]
[87.75638580 -44.95768356]
[76.46028137 -54.82461548]
[80.16644287 -40.28968048]
[83.87260437 -25.75474358]
[98.44595337 -22.19983101]
[113.01800537 -18.64521980]
[123.00073242 -29.84098625]
[132.98345947 -41.03675079]
[142.96618652 -52.23251724]
[140.53581238 -67.68008423]
[148.64778137 -81.04907990]
[163.47187805 -86.02706909]
[178.00860596 -80.26360321]
[185.39416504 -66.48001099]
[182.14134216 -51.18448257]
[169.78599548 -41.59910202]
[154.16195679 -42.24979019]
[144.17922974 -31.05402565]
[134.19650269 -19.85825920]
[124.21377563 -8.66249371]
[118.29380798 5.11988783]
[117.04693604 20.06797409]
[115.80006409 35.01605988]
[114.55318451 49.96414948]
[113.30631256 64.91223907]
[112.05944061 79.86032104]
[121.11962891 95.12403107]
[116.65319824 110.85055542]
[124.90549469 123.37651825]
[133.15777588 135.90248108]
[141.41006470 148.42843628]
[149.66235352 160.95440674]
[149.26690674 145.95960999]
[151.93917847 131.19956970]
[157.56677246 117.29524231]
[165.91290283 104.83161163]
[176.62643433 94.33303833]
[189.25665283 86.24121094]
[203.27217102 80.89656830]
[218.08334351 78.52397156]
[233.06703186 79.22322845]
[247.59286499 82.96493530]
[261.04971313 89.59165955]
[272.87139893 98.82460785]
[282.56060791 110.27533722]
[289.70968628 123.46209717]
[294.01785278 137.83010864]
[295.30386353 152.77488708]
[293.51361084 167.66766357]
[288.72241211 181.88189697]
[281.13186646 194.81956482]
[271.06127930 205.93637085]
[258.93435669 214.76460266]
[245.26127625 220.93284607]
[230.61730957 224.18159485]
[215.61854553 224.37416077]
[200.89601135 221.50245667]
[187.06907654 215.68730164]
[174.71949768 207.17332458]
[164.36680603 196.31874084]
[156.44398499 183.57487488]
[156.44398499 198.57487488]
[156.44398499 213.57487488]
[156.44398499 228.57487488]
[156.44398499 243.57487488]
[156.44398499 258.57489014]
[156.44398499 273.57489014]
[156.44398499 288.57489014]
[156.44398499 303.57489014]
[156.44398499 318.57489014]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 112]
[12 111]
[13 110]
[14 109]
[15 108]
[27 42]
[28 41]
[29 40]
[49 106]
[50 105]
[51 104]
[52 103]
[53 102]
[54 101]
[55 84]
[56 83]
[57 82]
[58 68]
[59 67]
[60 66]
[61 65]
[86 100]
[87 99]
[88 98]
[89 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
