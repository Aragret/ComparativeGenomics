%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCAGACAACCUUAGCCAAACCAUUUACCCAAAUAAAGUAUAGGCGAUAGAAAUUGAAACCxxxxxxxxxxAUGUGCCUAGACCAAGAAGUUAUUAUCUCGAACUGACACUGAGCCACAACCCAAACAACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[138.52476501 321.66244507]
[137.90078735 306.67544556]
[137.27680969 291.68841553]
[136.65283203 276.70138550]
[136.02885437 261.71438599]
[135.40487671 246.72737122]
[134.78089905 231.74035645]
[134.15692139 216.75334167]
[131.21144104 202.04537964]
[126.01602936 187.97386169]
[120.82061768 173.90232849]
[115.47910309 159.88562012]
[109.99207306 145.92523193]
[104.50503540 131.96484375]
[92.12389374 131.30516052]
[80.90467834 126.02719879]
[72.50249481 116.90956879]
[68.15687561 105.29735565]
[68.50891876 92.90365601]
[73.50667572 81.55683899]
[63.52394867 70.36106873]
[53.54122162 59.16530609]
[60.28612900 72.56330109]
[59.10535812 87.51675415]
[50.34126282 99.69010925]
[36.53487396 105.55387115]
[21.68917274 103.40790558]
[10.10847187 93.87442017]
[5.15044308 79.71751404]
[8.25260067 65.04180145]
[18.51551437 54.10230255]
[32.96114349 50.07078552]
[17.96195412 50.22682190]
[2.96276546 50.38285828]
[-12.03642273 50.53889465]
[-25.86934853 59.34696960]
[-40.28685379 51.53239441]
[-40.45744705 35.13413620]
[-26.20563316 27.02131462]
[-12.19246006 35.53970718]
[2.80672884 35.38367081]
[17.80591774 35.22763443]
[32.80510712 35.07159805]
[37.37597275 29.12540627]
[31.64744949 15.26236153]
[46.51770782 17.23302650]
[51.08857346 11.28683662]
[47.38241196 -3.24809909]
[36.47529221 -14.70869541]
[40.82807922 -28.95307922]
[37.12191772 -43.48801422]
[33.41575623 -58.02295303]
[29.70959663 -72.55789185]
[26.00343513 -87.09282684]
[22.29727364 -101.62776184]
[7.25332594 -101.01678467]
[-7.58884001 -103.54735565]
[-21.58038712 -109.10885620]
[-34.10966492 -117.45816040]
[-44.62894821 -128.23027039]
[-52.67837524 -140.95428467]
[-57.90606689 -155.07394409]
[-60.08348465 -169.97201538]
[-59.11544418 -184.99720764]
[-55.04426193 -199.49270630]
[-48.04791641 -212.82479858]
[-38.43225098 -224.41069031]
[-26.61762810 -233.74386597]
[-13.12052917 -240.41635132]
[1.46900988 -244.13642883]
[16.51319695 -244.74150085]
[31.35436630 -242.20507812]
[45.34372330 -236.63807678]
[57.86971664 -228.28384399]
[68.38475800 -217.50759888]
[76.42918396 -204.78042603]
[81.65132141 -190.65870667]
[83.82287598 -175.75978088]
[82.84892273 -160.73495483]
[78.77204132 -146.24107361]
[71.77044678 -132.91172791]
[62.15022659 -121.32962799]
[50.33193207 -112.00109100]
[36.83221054 -105.33392334]
[40.53837204 -90.79898834]
[44.24453354 -76.26404572]
[47.95069504 -61.72911453]
[51.65685654 -47.19417572]
[55.36301804 -32.65924072]
[66.00505066 -22.23828125]
[61.91735077 -6.95426035]
[65.62351227 7.58067608]
[74.43303680 31.91760826]
[64.73699188 49.18257904]
[74.71971130 60.37834549]
[84.70243835 71.57411194]
[108.62485504 68.89279175]
[127.75107574 83.50987244]
[142.07366943 79.05305481]
[156.39627075 74.59624481]
[170.71887207 70.13942719]
[174.72752380 55.24197006]
[186.16934204 44.89361191]
[201.39326477 42.39647293]
[215.54139709 48.54738617]
[224.09913635 61.38361359]
[224.33572388 76.80916595]
[216.17565918 89.90179443]
[202.22280884 96.48370361]
[186.92947388 94.45462036]
[175.17568970 84.46202087]
[160.85308838 88.91883850]
[146.53048706 93.37565613]
[132.20788574 97.83247375]
[131.97116089 104.46002960]
[130.38504028 110.89934540]
[127.51650238 116.87864685]
[123.48660278 122.14556122]
[118.46543121 126.47781372]
[123.95246124 140.43820190]
[129.43949890 154.39859009]
[135.52993774 161.29484558]
[134.89213562 168.70692444]
[140.08755493 182.77844238]
[145.28295898 196.84996033]
[148.59379578 182.21990967]
[156.88191223 169.71762085]
[169.06797791 160.97120667]
[183.56506348 157.11965942]
[198.48529053 158.66456604]
[211.88568115 165.40473938]
[222.02113342 176.46243286]
[227.57179260 190.39764404]
[227.81478882 205.39567566]
[222.71850586 219.50340271]
[212.94660950 230.88363647]
[199.77162170 238.05439758]
[184.90927124 240.08186340]
[170.29501343 236.70199585]
[157.83198547 228.35496521]
[149.14395142 216.12936401]
[149.76791382 231.11637878]
[150.39189148 246.10339355]
[151.01586914 261.09039307]
[151.63984680 276.07742310]
[152.26382446 291.06445312]
[152.88780212 306.05145264]
[153.51177979 321.03848267]
[160.21177673 336.61236572]
[147.10124207 347.36181641]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 148]
[2 147]
[3 146]
[4 145]
[5 144]
[6 143]
[7 142]
[8 141]
[9 125]
[10 124]
[11 123]
[12 121]
[13 120]
[14 119]
[20 96]
[21 95]
[22 94]
[32 43]
[33 42]
[34 41]
[35 40]
[47 92]
[48 91]
[50 89]
[51 88]
[52 87]
[53 86]
[54 85]
[55 84]
[98 114]
[99 113]
[100 112]
[101 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
