%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCGAAACCAGACGAGCUACCUAAGAACAGCUAAAAGAGCACACCCGUCUAUGUAGCAAAAUAxxxxxxxxxxUUAAUUAUAACAUUCACAGCCACAGAACUAAUCAUAUUUUAUAUCUUCUUCGAAACCACACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[111.10250854 255.73228455]
[111.10250854 240.73228455]
[111.10250854 225.73228455]
[111.10250854 210.73228455]
[111.10250854 195.73228455]
[111.10250854 180.73228455]
[111.10250854 165.73228455]
[111.10250854 150.73228455]
[111.10250854 135.73228455]
[111.10250854 120.73229218]
[96.95519257 115.74696350]
[87.55133820 127.43317413]
[91.74341583 142.37326050]
[86.32175446 156.91235352]
[73.37110138 165.45988464]
[57.87123871 164.72914124]
[45.78218842 155.00111389]
[41.75242996 140.01643372]
[47.33149338 125.53701019]
[60.37410736 117.13047791]
[75.86512756 118.02931976]
[85.26898956 106.34310913]
[76.98351288 93.83907318]
[62.55612564 97.94401550]
[48.12874222 102.04896545]
[33.70135880 106.15390778]
[30.03297806 121.06828308]
[19.38730812 132.13920593]
[4.62797928 136.38864136]
[-10.27482319 132.67353821]
[-21.31232071 121.99321747]
[-25.51548004 107.22064209]
[-21.75367546 92.32955933]
[-11.03881073 81.32559204]
[3.74686766 77.16875458]
[18.62608719 80.97721863]
[29.59641266 91.72652435]
[44.02379608 87.62158203]
[58.45118332 83.51663208]
[72.87857056 79.41168976]
[84.06686401 69.42059326]
[89.77153015 55.54771042]
[95.33346558 41.61699677]
[100.75209045 27.62991333]
[106.17071533 13.64282894]
[111.58934021 -0.34425446]
[108.08016968 -14.92800426]
[96.89187622 -24.91910172]
[85.60159302 -34.79480743]
[74.21051788 -44.55408096]
[62.81944656 -54.31335449]
[47.75735474 -50.58335114]
[33.39211655 -56.45016861]
[25.24746132 -69.65790558]
[26.45517731 -85.12790680]
[36.55086899 -96.91165161]
[51.65254211 -100.47804260]
[65.95329285 -94.45573425]
[73.95418549 -81.16042328]
[72.57872009 -65.70442963]
[83.96979523 -55.94515610]
[95.36087036 -46.18588257]
[102.53086090 -44.21017075]
[106.88297272 -36.10739899]
[118.07126617 -26.11630058]
[133.03254700 -27.19337082]
[142.67436218 -38.68403625]
[152.31617737 -50.17470169]
[161.95799255 -61.66537094]
[171.59980774 -73.15603638]
[181.24162292 -84.64670563]
[171.15376282 -95.77993011]
[162.67588806 -108.18313599]
[155.96594238 -121.62525177]
[151.14894104 -135.85586548]
[148.31459045 -150.60984802]
[147.51573181 -165.61236572]
[148.76721191 -180.58392334]
[152.04574585 -195.24560547]
[157.29022217 -209.32429504]
[164.40296936 -222.55767822]
[173.25148010 -234.69924927]
[183.67089844 -245.52281189]
[195.46711731 -254.82673645]
[208.42037964 -262.43768311]
[222.28939819 -268.21386719]
[236.81576538 -272.04769897]
[251.72888184 -273.86773682]
[266.75094604 -273.64010620]
[281.60205078 -271.36898804]
[296.00558472 -267.09674072]
[309.69320679 -260.90295410]
[322.40988159 -252.90298462]
[333.91876221 -243.24589539]
[344.00543213 -232.11157227]
[352.48196411 -219.70745850]
[359.19042969 -206.26461792]
[364.00592041 -192.03347778]
[366.83865356 -177.27919006]
[367.63589478 -162.27658081]
[366.38278198 -147.30516052]
[363.10269165 -132.64382935]
[357.85665894 -118.56571960]
[350.74249268 -105.33309937]
[341.89266968 -93.19248962]
[331.47207642 -82.37004852]
[319.67486572 -73.06740570]
[306.72076416 -65.45785522]
[292.85113525 -59.68316650]
[278.32434082 -55.85091019]
[263.41101074 -54.03248215]
[248.38899231 -54.26176071]
[233.53811646 -56.53446960]
[219.13505554 -60.80826950]
[205.44812012 -67.00354767]
[192.73228455 -75.00489044]
[183.09046936 -63.51422119]
[173.44865417 -52.02355576]
[163.80683899 -40.53289032]
[154.16502380 -29.04222298]
[144.52320862 -17.55155563]
[144.06375122 -9.59375191]
[140.32765198 -2.34140658]
[133.82363892 2.88734746]
[125.57642365 5.07437038]
[120.15779877 19.06145477]
[114.73917389 33.04853821]
[109.32054901 47.03562164]
[109.84012604 54.45466614]
[103.64440918 61.25237656]
[97.93974304 75.12525940]
[104.04874420 61.42561722]
[114.95246887 51.12470245]
[128.97703552 45.80385590]
[143.96948242 46.27989960]
[157.62823486 52.47975922]
[167.85650635 63.45166016]
[173.08407593 77.51126099]
[172.50846863 92.50021362]
[166.21801758 106.11749268]
[155.17842102 116.27265930]
[141.08441162 121.40673065]
[126.10250854 120.73229218]
[126.10250854 135.73228455]
[126.10250854 150.73228455]
[126.10250854 165.73228455]
[126.10250854 180.73228455]
[126.10250854 195.73228455]
[126.10250854 210.73228455]
[126.10250854 225.73228455]
[126.10250854 240.73228455]
[126.10250854 255.73228455]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 22]
[12 21]
[23 40]
[24 39]
[25 38]
[26 37]
[41 131]
[42 130]
[43 128]
[44 127]
[45 126]
[46 125]
[47 65]
[48 64]
[49 62]
[50 61]
[51 60]
[66 121]
[67 120]
[68 119]
[69 118]
[70 117]
[71 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
