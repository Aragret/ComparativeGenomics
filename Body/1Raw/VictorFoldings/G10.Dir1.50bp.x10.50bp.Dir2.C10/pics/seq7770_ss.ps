%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCCCCCAUUAUUCCUAGAACCAGGCGACCUGCGACUCCUUGACGUUGACAAUCGAGUAGUAxxxxxxxxxxACAUAAAACCCUCAUUCACACGAGAAAACACCCUCAUGUUCAUACACCUAUCCCCCAUUCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[59.85115433 270.57977295]
[50.01702881 267.96157837]
[40.35146332 264.77694702]
[34.64680099 278.64984131]
[28.94213867 292.52270508]
[23.23747444 306.39559937]
[17.53281212 320.26846313]
[20.25013733 336.44091797]
[7.43252230 346.67031860]
[-7.73437214 340.43356323]
[-9.64814377 324.14645386]
[3.65993071 314.56381226]
[9.36459446 300.69091797]
[15.06925774 286.81805420]
[20.77392006 272.94515991]
[26.47858429 259.07229614]
[16.01785278 253.80633545]
[5.93220949 247.85343933]
[-3.73329949 241.24018860]
[-12.93550491 233.99612427]
[-21.63330650 226.15359497]
[-29.78785896 217.74761963]
[-37.36274338 208.81575012]
[-44.32412338 199.39787292]
[-50.64090729 189.53607178]
[-56.28488922 179.27435303]
[-61.23085403 168.65858459]
[-65.45671082 157.73617554]
[-68.94359589 146.55589294]
[-71.67592621 135.16767883]
[-73.64151001 123.62238312]
[-88.57752228 125.00640869]
[-103.51353455 126.39043427]
[-118.44954681 127.77445984]
[-133.66322327 135.25645447]
[-145.06439209 122.70855713]
[-136.16302490 108.27935028]
[-119.83357239 112.83844757]
[-104.89756012 111.45442200]
[-89.96154785 110.07039642]
[-75.02553558 108.68637085]
[-72.12683105 67.11013794]
[-59.49229050 27.39422226]
[-37.83654022 -8.21496391]
[-49.22761536 -17.97423744]
[-60.61868668 -27.73351288]
[-72.00975800 -37.49278641]
[-90.16007996 -40.42477798]
[-95.40136719 -57.14522934]
[-106.99041748 -66.66856384]
[-118.57946777 -76.19190216]
[-133.91651917 -73.14084625]
[-147.60162354 -80.70735168]
[-153.17309570 -95.31874084]
[-148.00024414 -110.07596588]
[-134.52555847 -118.01111603]
[-119.11134338 -115.37745667]
[-109.03573608 -103.41851807]
[-109.05612946 -87.78095245]
[-97.46707916 -78.25761414]
[-85.87803650 -68.73427582]
[-73.77319336 -69.59167480]
[-64.03273010 -61.69897842]
[-62.25048828 -48.88386154]
[-50.85941315 -39.12458801]
[-39.46833801 -29.36531258]
[-28.07726479 -19.60603714]
[-19.83036232 -27.86740875]
[-11.05175686 -35.56141663]
[-1.78039980 -42.65391922]
[7.94257069 -49.11344528]
[18.07401276 -54.91133881]
[28.56896973 -60.02186584]
[39.38087845 -64.42235565]
[50.46176147 -68.09328461]
[61.76245117 -71.01836395]
[73.23280334 -73.18460846]
[84.82192993 -74.58240509]
[96.47840118 -75.20555878]
[108.15049744 -75.05130768]
[119.78643036 -74.12032318]
[131.33456421 -72.41674805]
[142.74366760 -69.94813538]
[153.96311951 -66.72544098]
[164.94311523 -62.76296234]
[175.63494873 -58.07828140]
[185.99119568 -52.69218826]
[195.96588135 -46.62858200]
[205.51473999 -39.91436005]
[214.59542847 -32.57932281]
[223.16764832 -24.65601158]
[231.19334412 -16.17958641]
[238.63691711 -7.18765688]
[245.46534729 2.27987933]
[251.64833069 12.18101215]
[257.15841675 22.47180939]
[261.97119141 33.10660934]
[266.06524658 44.03822708]
[269.42248535 55.21815109]
[284.07519531 52.00915527]
[298.72793579 48.80015945]
[310.55334473 38.28967667]
[324.64120483 43.12506104]
[339.29394531 39.91606522]
[353.94665527 36.70706940]
[360.04699707 22.43942642]
[373.38580322 14.51126862]
[388.83404541 15.97113228]
[400.45156860 26.25767136]
[403.77120972 41.41550064]
[397.51644897 55.61612320]
[384.09240723 63.39911652]
[368.66091919 61.77175522]
[357.15567017 51.35979462]
[342.50292969 54.56879044]
[327.85021973 57.77778625]
[317.07287598 68.05873871]
[301.93692017 63.45288467]
[287.28421021 66.66188049]
[272.63146973 69.87088013]
[274.08932495 79.94260406]
[274.96005249 90.08197021]
[275.24075317 100.25479126]
[274.93048096 110.42674255]
[274.03027344 120.56353760]
[272.54312134 130.63098145]
[270.47412109 140.59512329]
[267.83020020 150.42236328]
[264.62026978 160.07955933]
[260.85519409 169.53414917]
[256.54763794 178.75422668]
[251.71212769 187.70872498]
[246.36499023 196.36741638]
[240.52424622 204.70112610]
[234.20959473 212.68174744]
[227.44233704 220.28234863]
[220.24528503 227.47731018]
[212.64271545 234.24235535]
[204.66026306 240.55468750]
[196.32485962 246.39300537]
[187.66459656 251.73762512]
[178.70870972 256.57052612]
[169.48736572 260.87539673]
[160.03169250 264.63775635]
[150.37356567 267.84484863]
[140.54556274 270.48593140]
[130.58081055 272.55203247]
[120.51293182 274.03622437]
[110.37587738 274.93350220]
[100.20383453 275.24084473]
[90.03109741 274.95718384]
[79.89198303 274.08346558]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 16]
[4 15]
[5 14]
[6 13]
[7 12]
[31 41]
[32 40]
[33 39]
[34 38]
[44 67]
[45 66]
[46 65]
[47 64]
[49 61]
[50 60]
[51 59]
[99 120]
[100 119]
[101 118]
[103 116]
[104 115]
[105 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
