%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUUGGACGAACCAGAGUGUAGCUUAACACAAAGCACCCAACUUACACUUAGGAGAUUUCAxxxxxxxxxxUUCAUCUUGCCCUUCAUUAUUGCAGCCCUAGCAACACUCCACCUCCUAUUCUUGCACGAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[122.51850128 262.79962158]
[122.51850128 247.79963684]
[122.51850128 232.79963684]
[122.51850128 217.79963684]
[122.51850128 202.79963684]
[122.51850128 187.79963684]
[122.51850128 172.79963684]
[122.51850128 157.79963684]
[122.51850128 142.79963684]
[122.51850128 127.79962921]
[115.53830719 125.05611420]
[101.57791901 119.56908417]
[94.59772491 116.82556915]
[84.38424683 127.81123352]
[74.17076111 138.79689026]
[73.31548309 154.81713867]
[60.17391586 164.01924133]
[44.82715607 159.34416199]
[39.04791641 144.37820435]
[47.26953888 130.60197449]
[63.18510056 128.58341980]
[73.39858246 117.59775543]
[83.61206055 106.61209106]
[81.16128540 99.52381134]
[73.80895996 78.25897217]
[58.99119949 75.92787170]
[44.17344284 73.59676361]
[29.35568237 71.26566315]
[14.53792477 68.93455505]
[-0.27983329 66.60345459]
[-15.24008179 65.51213837]
[-30.23927116 65.66817474]
[-45.23846054 65.82421875]
[-60.23764801 65.98025513]
[-71.11566162 77.44516754]
[-86.91647339 77.77664948]
[-98.26573944 66.77802277]
[-98.43014526 50.97459030]
[-87.31214905 39.74224091]
[-71.50785828 39.74493027]
[-60.39368439 50.98106384]
[-45.39449692 50.82502747]
[-30.39530754 50.66899109]
[-15.39611816 50.51295471]
[-26.43305588 40.35490036]
[-29.54854965 25.68201065]
[-23.59148788 11.91562462]
[-10.76288509 4.14214611]
[4.19734430 5.23372221]
[15.76169395 14.78703690]
[19.65736580 29.27233124]
[14.44498920 43.33757401]
[2.05127048 51.78569412]
[16.86902809 54.11679840]
[31.68678665 56.44790268]
[46.50454330 58.77900696]
[61.32230377 61.11011124]
[76.14006042 63.44121552]
[90.31661987 58.53966141]
[100.53009796 47.55399704]
[110.74357605 36.56833267]
[120.95706177 25.58266830]
[131.17053223 14.59700394]
[141.38401794 3.61133933]
[131.51644897 -7.70453119]
[122.88580322 -19.98986626]
[115.58660889 -33.11006546]
[109.69886780 -46.92136765]
[105.28707123 -61.27245712]
[102.39956665 -76.00609589]
[101.06798553 -90.96084595]
[101.30692291 -105.97286224]
[103.11376190 -120.87766266]
[106.46869659 -135.51194763]
[111.33497620 -149.71536255]
[117.65927887 -163.33229065]
[125.37232208 -176.21354675]
[134.38958740 -188.21798706]
[144.61227417 -199.21409607]
[155.92837524 -209.08139038]
[168.21392822 -217.71174622]
[181.33430481 -225.01060486]
[195.14575195 -230.89802551]
[209.49694824 -235.30946350]
[224.23065186 -238.19660950]
[239.18544006 -239.52783203]
[254.19744873 -239.28852844]
[269.10220337 -237.48133850]
[283.73638916 -234.12603760]
[297.93969727 -229.25941467]
[311.55648804 -222.93478394]
[324.43753052 -215.22142029]
[336.44177246 -206.20387268]
[347.43762207 -195.98091125]
[357.30462646 -184.66456604]
[365.93469238 -172.37881470]
[373.23324585 -159.25825500]
[379.12033081 -145.44667053]
[383.53143311 -131.09536743]
[386.41821289 -116.36158752]
[387.74905396 -101.40676880]
[387.50939941 -86.39476776]
[385.70184326 -71.49005890]
[382.34619141 -56.85594177]
[377.47921753 -42.65275955]
[371.15426636 -29.03613472]
[363.44058228 -16.15525436]
[354.42276001 -4.15124750]
[344.19952393 6.84436178]
[332.88293457 16.71109962]
[320.59695435 25.34086037]
[307.47622681 32.63909149]
[293.66448975 38.52583313]
[279.31307983 42.93658066]
[264.57925415 45.82301331]
[249.62440491 47.15350342]
[234.61239624 46.91347122]
[219.70773315 45.10554886]
[205.07369995 41.74954605]
[190.87063599 36.88223267]
[177.25416565 30.55693245]
[164.37347412 22.84295654]
[152.36968994 13.82481956]
[142.15620422 24.81048393]
[131.94271851 35.79615021]
[121.72924042 46.78181458]
[111.51576233 57.76747894]
[101.30228424 68.75314331]
[115.53226471 64.00891876]
[128.53059387 56.52271652]
[143.29797363 53.89125824]
[158.08212280 56.42679214]
[171.12878418 63.82845306]
[180.88987732 75.21797180]
[186.20715332 89.24389648]
[186.44969177 104.24193573]
[181.58868408 118.43244934]
[172.20097351 130.13162231]
[159.40045166 137.95126343]
[144.70988464 140.96336365]
[137.51850891 127.79962921]
[137.51850891 142.79963684]
[137.51850891 157.79963684]
[137.51850891 172.79963684]
[137.51850891 187.79963684]
[137.51850891 202.79963684]
[137.51850891 217.79963684]
[137.51850891 232.79963684]
[137.51850891 247.79963684]
[137.51850891 262.79962158]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[13 23]
[14 22]
[15 21]
[25 58]
[26 57]
[27 56]
[28 55]
[29 54]
[30 53]
[31 44]
[32 43]
[33 42]
[34 41]
[59 128]
[60 127]
[61 126]
[62 125]
[63 124]
[64 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
