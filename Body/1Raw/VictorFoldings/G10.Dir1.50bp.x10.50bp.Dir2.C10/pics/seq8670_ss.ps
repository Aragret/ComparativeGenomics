%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCUAAUUGGAAGCGCCACCCUAGCAAUAUCAACCAUUAACCUUCCCUCUACACUUAUCAxxxxxxxxxxUCCUAGCCCUAAGUCUGGCCUAUGAGUGACUACAAAAAGGAUUAGACUGAACCGAAUUGGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[122.58563232 353.79559326]
[122.58563232 338.79559326]
[122.58563232 323.79559326]
[122.58563232 308.79559326]
[122.58563232 293.79559326]
[122.58563232 278.79559326]
[122.58563232 263.79559326]
[122.58563232 248.79560852]
[122.58563232 233.79560852]
[122.58563232 218.79560852]
[120.71801758 203.91232300]
[107.80131531 192.07345581]
[112.84378815 174.39427185]
[108.83604431 159.93959045]
[104.82830811 145.48489380]
[100.82056427 131.03021240]
[96.81282806 116.57552338]
[83.87477112 108.98561096]
[69.30206299 112.54037476]
[54.72936249 116.09513855]
[54.55685043 131.17562866]
[50.63859558 145.73921204]
[43.22090530 158.87042236]
[32.77006531 169.74382019]
[19.94301796 177.67588806]
[5.54608679 182.16801453]
[-9.51572609 182.93782043]
[-24.29562378 179.93690491]
[-37.86452866 173.35392761]
[-49.36948776 163.60267639]
[-58.08728790 151.29614258]
[-63.46992493 137.20791626]
[-65.17903900 122.22360229]
[-63.10719299 107.28511810]
[-57.38462448 93.33152008]
[-48.37106323 81.23992920]
[-36.63310623 71.77043915]
[-22.90861320 65.51831818]
[-8.06031418 62.87656784]
[6.97841215 64.01125336]
[21.26221848 68.85105896]
[33.89321518 77.09173584]
[44.07740402 88.21527100]
[51.17460251 101.52243042]
[65.74730682 97.96767426]
[80.32000732 94.41291046]
[84.16485596 91.27648926]
[88.30512238 89.52472687]
[92.33089447 89.10723114]
[95.87473297 89.86432648]
[98.63877106 91.54451752]
[104.70178223 77.82446289]
[110.76479340 64.10440826]
[116.82781219 50.38435745]
[105.29594421 39.43457413]
[98.21218872 25.22714233]
[96.41308594 9.48088455]
[100.09708405 -5.90617180]
[108.80281830 -19.08559227]
[121.46677399 -28.48057747]
[136.55325317 -32.97460938]
[152.24049377 -32.04412079]
[158.01676941 -45.88734055]
[163.79304504 -59.73055649]
[169.56932068 -73.57377625]
[175.34559631 -87.41699219]
[181.12185669 -101.26020813]
[186.89813232 -115.10342407]
[174.59266663 -106.52582550]
[160.12055969 -102.58139801]
[145.16450500 -103.72876740]
[131.46342468 -109.83452606]
[120.61032104 -120.18875885]
[113.86708069 -133.58758545]
[112.01773834 -148.47314453]
[115.27730560 -163.11470032]
[123.26680756 -175.80990601]
[135.05729675 -185.08267212]
[149.27792358 -189.85487366]
[164.27523804 -189.57165527]
[178.30555725 -184.26594543]
[189.73754883 -174.55464172]
[197.24203491 -161.56684875]
[199.94648743 -146.81266785]
[197.53550720 -132.00480652]
[207.51823425 -143.20057678]
[217.38395691 -154.49958801]
[227.13160706 -165.90060425]
[223.38624573 -180.95887756]
[229.23840332 -195.33009338]
[242.43782043 -203.48822021]
[257.90905762 -202.29627991]
[269.70309448 -192.21261597]
[273.28488159 -177.11457825]
[267.27716064 -162.80770874]
[253.99002075 -154.79324341]
[238.53262329 -156.15295410]
[228.78497314 -144.75192261]
[226.81604004 -137.57774353]
[218.71398926 -133.21784973]
[208.73127747 -122.02208710]
[200.74134827 -109.32715607]
[194.96508789 -95.48394012]
[189.18881226 -81.64071655]
[183.41253662 -67.79750061]
[177.63626099 -53.95428467]
[171.85998535 -40.11106491]
[166.08372498 -26.26784897]
[176.80384827 -16.97216034]
[184.13211060 -4.79685020]
[187.33760071 9.06957054]
[186.09263611 23.26869202]
[180.50622559 36.40528488]
[171.11457825 47.18439484]
[158.82975769 54.53899002]
[144.85102844 57.73558426]
[130.54786682 56.44737244]
[124.48484802 70.16742706]
[118.42183685 83.88748169]
[112.35882568 97.60752869]
[111.26751709 112.56777954]
[115.27525330 127.02246857]
[119.28299713 141.47715759]
[123.29073334 155.93183899]
[127.29847717 170.38653564]
[138.14987183 177.43643188]
[141.16601562 189.60696411]
[135.25294495 200.20616150]
[140.70675659 186.23275757]
[151.60093689 175.92176819]
[165.85298157 171.24421692]
[180.73844910 173.09428406]
[193.41184998 181.11831665]
[201.45053101 193.78240967]
[203.31782532 208.66574097]
[198.65676880 222.92317200]
[188.35838318 233.82928467]
[174.39131165 239.29925537]
[159.42547607 238.28744507]
[146.32174683 230.98727417]
[137.58563232 218.79560852]
[137.58563232 233.79560852]
[137.58563232 248.79560852]
[137.58563232 263.79559326]
[137.58563232 278.79559326]
[137.58563232 293.79559326]
[137.58563232 308.79559326]
[137.58563232 323.79559326]
[137.58563232 338.79559326]
[137.58563232 353.79559326]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 128]
[13 125]
[14 124]
[15 123]
[16 122]
[17 121]
[18 46]
[19 45]
[20 44]
[51 120]
[52 119]
[53 118]
[54 117]
[62 108]
[63 107]
[64 106]
[65 105]
[66 104]
[67 103]
[68 102]
[85 101]
[86 100]
[87 98]
[88 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
