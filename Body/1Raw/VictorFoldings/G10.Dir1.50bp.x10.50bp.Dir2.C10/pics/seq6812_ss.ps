%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAUACCAACACCUAUUCUGAUUUUUCGGUCACCCUGAAGUUUAUAUUCUUAUCCUACCAGxxxxxxxxxxAUUUCUCUACUCAGAAACCUGAAACAUCGGCAUUAUCCUCCUGCUUGCAACUAUAGCAACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[78.60320282 409.50137329]
[78.60320282 394.50137329]
[78.60320282 379.50137329]
[78.60320282 364.50137329]
[78.60320282 349.50137329]
[78.60320282 334.50137329]
[78.60320282 319.50137329]
[78.60320282 304.50137329]
[78.60320282 289.50137329]
[78.60320282 274.50137329]
[65.56984711 271.87948608]
[53.25304794 266.86325073]
[42.08859253 259.62823486]
[32.47186661 250.42861938]
[24.74382782 239.58813477]
[19.17892456 227.48878479]
[15.97534180 214.55728149]
[15.24795532 201.25009155]
[17.02420235 188.03721619]
[21.24305916 175.38571167]
[27.75712967 163.74310303]
[36.33779526 153.52156067]
[46.68324661 145.08331299]
[58.42908859 138.72785950]
[71.16117096 134.68124390]
[84.43021393 133.08808899]
[85.66082764 118.13865662]
[81.50334167 100.75664520]
[90.51641083 89.83453369]
[86.26355743 75.45005035]
[82.01071167 61.06556702]
[77.75786591 46.68108749]
[66.42539215 35.64090347]
[70.23672485 21.24218559]
[65.98387909 6.85770512]
[61.73102951 -7.52677584]
[57.47818375 -21.91125679]
[53.07788467 -36.25131989]
[48.53059387 -50.54544830]
[43.98330307 -64.83957672]
[32.49423981 -68.16971588]
[24.14528275 -76.56736755]
[20.94767189 -87.84420776]
[23.59122658 -99.14015961]
[31.29941368 -107.64868164]
[27.34280396 -122.11744690]
[23.38619232 -136.58621216]
[19.42958260 -151.05497742]
[4.52653170 -149.14573669]
[-10.49719810 -149.32925415]
[-25.34916496 -151.60195923]
[-39.74027252 -155.91961670]
[-53.39039230 -162.19818115]
[-66.03382111 -170.31544495]
[-77.42445374 -180.11338806]
[-87.34056091 -191.40129089]
[-95.58912659 -203.95945740]
[-102.00959778 -217.54339600]
[-106.47698212 -231.88873291]
[-108.90433502 -246.71621704]
[-109.24440002 -261.73721313]
[-107.49055481 -276.65936279]
[-103.67694855 -291.19216919]
[-97.87780762 -305.05276489]
[-90.20601654 -317.97134399]
[-80.81090546 -329.69644165]
[-69.87535858 -339.99984741]
[-57.61223602 -348.68096924]
[-44.26023865 -355.57083130]
[-30.07927322 -360.53533936]
[-15.34537506 -363.47784424]
[-0.34534347 -364.34109497]
[14.62884235 -363.10824585]
[29.28570366 -359.80331421]
[43.33994293 -354.49063110]
[56.51798630 -347.27362061]
[68.56332397 -338.29275513]
[79.24148560 -327.72283936]
[88.34462738 -315.76965332]
[95.69553375 -302.66583252]
[101.15113831 -288.66644287]
[104.60523987 -274.04403687]
[105.99059296 -259.08319092]
[105.28024292 -244.07513428]
[102.48801422 -229.31201172]
[97.66825867 -215.08119202]
[90.91478729 -201.65969849]
[82.35906982 -189.30874634]
[72.16764069 -178.26878357]
[60.53887558 -168.75468445]
[47.69913483 -160.95166016]
[33.89834976 -155.01159668]
[37.85496140 -140.54283142]
[41.81156921 -126.07405853]
[45.76818085 -111.60529327]
[62.16400528 -103.56452179]
[67.62907410 -85.80742645]
[58.27743149 -69.38687134]
[62.82472229 -55.09273911]
[67.37200928 -40.79860687]
[72.42798615 -35.34431076]
[71.86266327 -26.16410446]
[76.11550903 -11.77962303]
[80.36835480 2.60485840]
[84.62120819 16.98933983]
[95.64948273 27.00064850]
[92.14234924 42.42824173]
[96.39519501 56.81272125]
[100.64804077 71.19720459]
[104.90088654 85.58168030]
[115.88169098 95.80039215]
[130.53440857 99.00938416]
[145.18713379 102.21838379]
[154.18017578 89.92833710]
[167.39775085 82.36425018]
[182.54986572 80.83665466]
[197.01130676 85.61020660]
[208.27653503 95.85785675]
[214.39379883 109.80414581]
[214.30323792 125.03279114]
[208.02053833 138.90534973]
[196.63421631 149.01829529]
[182.11703491 153.61950684]
[166.98416138 151.91180420]
[153.85748291 144.19105530]
[145.01124573 131.79492188]
[141.97814941 116.87110901]
[127.32541656 113.66210938]
[112.67269135 110.45311737]
[100.61026001 119.36927032]
[99.37965393 134.31869507]
[115.41720581 139.42753601]
[129.79769897 148.15917969]
[141.71705627 160.02113342]
[150.50987244 174.34594727]
[155.68644714 190.32887268]
[156.96017456 207.07299805]
[154.26335144 223.63960266]
[147.75071716 239.10078430]
[137.79069519 252.59146118]
[124.94444275 263.35769653]
[109.93431854 270.79891968]
[93.60320282 274.50137329]
[93.60320282 289.50137329]
[93.60320282 304.50137329]
[93.60320282 319.50137329]
[93.60320282 334.50137329]
[93.60320282 349.50137329]
[93.60320282 364.50137329]
[93.60320282 379.50137329]
[93.60320282 394.50137329]
[93.60320282 409.50137329]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[26 131]
[27 130]
[29 110]
[30 109]
[31 108]
[32 107]
[34 105]
[35 104]
[36 103]
[37 102]
[38 100]
[39 99]
[40 98]
[45 95]
[46 94]
[47 93]
[48 92]
[111 129]
[112 128]
[113 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
