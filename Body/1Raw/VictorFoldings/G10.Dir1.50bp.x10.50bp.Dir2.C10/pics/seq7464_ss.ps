%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUACUUCCCCUAUCAUAGAAGAGCUUAUCACCUUUCAUGAUCACGCCCUCAUAAUCAUUUxxxxxxxxxxCACUGAGCCACAACCCAAACAACCCAGCUCUCCCUAAGCUUCAAACUAGACUACUUCUCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[111.97165680 301.44454956]
[111.97165680 286.44454956]
[111.97165680 271.44454956]
[111.97165680 256.44454956]
[111.97165680 241.44454956]
[111.97165680 226.44454956]
[111.97165680 211.44454956]
[111.97165680 196.44454956]
[111.97165680 181.44454956]
[111.97165680 166.44454956]
[110.25896454 151.54264832]
[106.85598755 136.93374634]
[103.45301056 122.32485962]
[89.38149261 117.12944794]
[77.30150604 126.02179718]
[65.22151184 134.91413879]
[53.14152527 143.80648804]
[54.92199326 159.06184387]
[48.82152557 173.15722656]
[36.48110962 182.30105591]
[21.22025871 184.03369141]
[7.14406776 177.88906860]
[-1.96104181 165.52006531]
[-3.64583993 150.25386047]
[2.54287505 136.19699097]
[14.94037056 127.13069916]
[30.21178246 125.49375916]
[44.24917603 131.72650146]
[56.32916641 122.83415222]
[68.40915680 113.94180298]
[80.48914337 105.04945374]
[87.39614105 91.73429871]
[87.70819855 76.73754883]
[88.02025604 61.74079514]
[88.33230591 46.74404144]
[88.64436340 31.74728584]
[88.95642090 16.75053215]
[80.39868164 14.15163612]
[72.62426758 9.48117828]
[66.13317871 2.96826482]
[61.35985565 -5.03777885]
[58.64435959 -14.08589172]
[58.20880508 -23.64859009]
[60.14046478 -33.15269470]
[64.38291168 -42.01367950]
[70.73580170 -49.67161942]
[78.86372375 -55.62643814]
[68.65023804 -66.61210632]
[58.43675995 -77.59777069]
[48.22328186 -88.58343506]
[38.00979996 -99.56909943]
[23.44456291 -95.00657654]
[8.34337902 -97.22400665]
[-4.29540062 -105.78111267]
[-11.96233654 -118.97886658]
[-13.13515186 -134.19685364]
[-7.58098507 -148.41354370]
[3.59738088 -158.80618286]
[18.18047333 -163.31130981]
[33.27280807 -161.03442383]
[45.87779236 -152.42761230]
[53.49269485 -139.19976807]
[54.60557556 -123.97727966]
[48.99546432 -109.78257751]
[59.20894623 -98.79691315]
[69.42242432 -87.81124878]
[79.63590240 -76.82558441]
[89.84938812 -65.83992004]
[86.15302277 -80.37734985]
[82.45665741 -94.91477966]
[72.68340302 -106.29386139]
[68.02635956 -120.55261230]
[69.19894409 -135.50671387]
[76.02153015 -148.86531067]
[87.44895172 -158.58200073]
[101.73063660 -163.16824341]
[116.67872620 -161.92147827]
[130.00332642 -155.03269958]
[139.66319275 -143.55722046]
[144.17852783 -129.25296021]
[142.85762024 -114.31123352]
[135.90283203 -101.02098083]
[124.37904358 -91.41788483]
[118.32527924 -77.69374847]
[112.27151489 -63.96960831]
[124.16389465 -73.11134338]
[136.05627441 -82.25307465]
[147.94865417 -91.39481354]
[142.86929321 -105.64455414]
[142.44395447 -120.76653290]
[146.71434021 -135.27925110]
[155.26206970 -147.76089478]
[167.24972534 -156.98866272]
[181.50286865 -162.05847168]
[196.62512207 -162.47366333]
[211.13497925 -158.19355774]
[223.61090088 -149.63746643]
[232.83062744 -137.64364624]
[237.89088440 -123.38710022]
[238.29594421 -108.26456451]
[234.00611877 -93.75758362]
[225.44166565 -81.28739929]
[213.44166565 -72.07572174]
[199.18173218 -67.02500916]
[184.05892944 -66.63008118]
[169.55482483 -70.92963409]
[157.09039307 -79.50243378]
[145.19801331 -70.36069489]
[133.30563354 -61.21896362]
[121.41325378 -52.07722855]
[132.98492432 -37.15281296]
[136.50625610 -19.08222961]
[131.64105225 -1.81865132]
[119.84213257 11.05356598]
[103.95317841 17.06258965]
[103.64112091 32.05934143]
[103.32906342 47.05609512]
[103.01700592 62.05284882]
[102.70494843 77.04960632]
[102.39289093 92.04635620]
[106.04368591 90.98163605]
[110.40592957 91.54699707]
[114.79465485 94.02140808]
[118.43918610 98.41275787]
[120.58498383 104.43712616]
[120.59841156 111.53475189]
[118.06190491 118.92188263]
[121.46488190 133.53077698]
[124.86785889 148.13966370]
[130.92913818 134.41885376]
[142.59213257 124.98622131]
[157.27711487 121.92820740]
[171.73588562 125.92119598]
[182.77029419 136.08198547]
[187.93965149 150.16310120]
[186.10052490 165.04992676]
[177.65971375 177.44964600]
[164.48426819 184.61953735]
[149.48844910 184.97369385]
[135.98919678 178.43377686]
[126.97165680 166.44454956]
[126.97165680 181.44454956]
[126.97165680 196.44454956]
[126.97165680 211.44454956]
[126.97165680 226.44454956]
[126.97165680 241.44454956]
[126.97165680 256.44454956]
[126.97165680 271.44454956]
[126.97165680 286.44454956]
[126.97165680 301.44454956]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 129]
[12 128]
[13 127]
[14 31]
[15 30]
[16 29]
[17 28]
[32 120]
[33 119]
[34 118]
[35 117]
[36 116]
[37 115]
[47 68]
[48 67]
[49 66]
[50 65]
[51 64]
[85 110]
[86 109]
[87 108]
[88 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
