%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:33:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCAACAUUUUUUGUAGCCACAGGCUUCCACGGACUUCACGUCAUUAUUGGCUCAACUUUxxxxxxxxxxAGCUCACAAGAACUGCUAACUCAUGCCCCCAUGUCUAACAACAUGGCUUUCUCAACUUUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[102.08828735 278.78097534]
[102.08828735 263.78097534]
[102.08828735 248.78096008]
[102.08828735 233.78096008]
[102.08828735 218.78096008]
[102.08828735 203.78096008]
[102.08828735 188.78096008]
[102.08828735 173.78096008]
[102.08828735 158.78096008]
[102.08828735 143.78096008]
[85.72848511 139.86665344]
[72.59548187 130.30397034]
[64.44930267 116.91800690]
[62.16833496 101.99707794]
[65.66999054 87.90677643]
[73.98789978 76.71569824]
[65.22169495 64.54386139]
[56.45548630 52.37202454]
[46.47276306 41.17625809]
[35.38144684 31.07761002]
[24.29013062 20.97896004]
[13.19881535 10.88031101]
[2.10750008 0.78166151]
[-8.98381519 -9.31698799]
[-20.07513046 -19.41563797]
[-33.16828537 -26.73474312]
[-47.58050156 -30.89263153]
[-61.99271774 -35.05051804]
[-76.40493011 -39.20840454]
[-90.81714630 -43.36629105]
[-106.13278961 -28.08904266]
[-129.17100525 -26.28261375]
[-149.08180237 -40.70613861]
[-164.04205322 -39.61482620]
[-179.39930725 -32.43214798]
[-190.55259705 -45.20088196]
[-181.37040710 -59.45302963]
[-165.13336182 -54.57507706]
[-150.17311096 -55.66638565]
[-148.15077209 -70.52943420]
[-162.27557373 -75.57818604]
[-176.40037537 -80.62694550]
[-189.80523682 -72.57437897]
[-205.24186707 -75.07328033]
[-215.42156982 -86.94374084]
[-215.53778076 -102.58089447]
[-205.53565979 -114.60135651]
[-190.13787842 -117.32942200]
[-176.61480713 -109.47699738]
[-171.35162354 -94.75174713]
[-157.22682190 -89.70299530]
[-143.10202026 -84.65423584]
[-132.50434875 -91.07244873]
[-120.67205048 -93.48414612]
[-109.02975464 -91.81366730]
[-98.90883636 -86.46456909]
[-91.39514923 -78.24864960]
[-87.21325684 -68.26977539]
[-86.65926361 -57.77850723]
[-72.24704742 -53.62062073]
[-57.83483124 -49.46273422]
[-43.42261505 -45.30484772]
[-29.01039696 -41.14696121]
[-39.18346786 -52.17005539]
[-46.22201538 -65.41614532]
[-49.66409302 -80.01586914]
[-49.28379440 -95.01105499]
[-45.10607910 -109.41753387]
[-37.40513229 -122.28981018]
[-26.68637848 -132.78305054]
[-13.65329361 -140.20860291]
[0.83874863 -144.07910156]
[15.83862305 -144.14051819]
[30.36187553 -140.38882446]
[43.45533371 -133.07026672]
[54.25965881 -122.66514587]
[62.06576157 -109.85636902]
[66.36131287 -95.48458099]
[66.86440277 -80.49301910]
[63.54199982 -65.86559296]
[56.61216354 -52.56230927]
[46.52970886 -41.45627213]
[33.95634460 -33.27638626]
[19.71728134 -28.55949593]
[4.74703455 -27.61518288]
[-9.97648144 -30.50695229]
[1.11483431 -20.40830421]
[12.20615005 -10.30965424]
[23.29746437 -0.21100435]
[34.38877869 9.88764477]
[45.48009491 19.98629570]
[56.57141113 30.08494377]
[54.20079041 15.27345657]
[59.42472458 1.21250010]
[70.89101410 -8.45829010]
[85.63164520 -11.23566055]
[99.83105469 -6.40069485]
[109.81375885 4.79508877]
[112.99577332 19.45369720]
[108.55343628 33.78079224]
[97.63664246 44.06785202]
[83.07116699 47.65209961]
[68.62732697 43.60581970]
[77.39353180 55.77765656]
[86.15973663 67.94949341]
[105.29664612 63.23857498]
[125.17725372 69.73159027]
[139.40672302 86.66806793]
[142.73075867 109.75785065]
[157.49681091 112.39671326]
[172.26286316 115.03558350]
[187.02893066 117.67444611]
[201.79498291 120.31330872]
[216.56103516 122.95217133]
[229.38316345 113.71265411]
[244.96948242 116.32836914]
[254.07292175 129.24746704]
[251.29257202 144.80526733]
[238.27795410 153.77160645]
[222.75041199 150.82691956]
[213.92216492 137.71823120]
[199.15611267 135.07936096]
[184.39006042 132.44050598]
[169.62400818 129.80163574]
[154.85795593 127.16277313]
[140.09188843 124.52391052]
[134.34098816 129.33816528]
[146.03428650 138.73321533]
[157.72758484 148.12826538]
[169.42086792 157.52330017]
[183.02716064 163.83750916]
[189.77033997 177.23637390]
[186.73454285 191.92596436]
[175.23251343 201.55419922]
[160.23793030 201.95767212]
[148.23477173 192.96188354]
[144.41334534 178.45791626]
[137.22195435 165.29417419]
[130.03057861 152.13043213]
[122.83918762 138.96669006]
[117.08828735 143.78096008]
[117.08828735 158.78096008]
[117.08828735 173.78096008]
[117.08828735 188.78096008]
[117.08828735 203.78096008]
[117.08828735 218.78096008]
[117.08828735 233.78096008]
[117.08828735 248.78096008]
[117.08828735 263.78097534]
[117.08828735 278.78097534]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[16 105]
[17 104]
[18 103]
[19 92]
[20 91]
[21 90]
[22 89]
[23 88]
[24 87]
[25 86]
[26 63]
[27 62]
[28 61]
[29 60]
[30 59]
[33 39]
[34 38]
[40 52]
[41 51]
[42 50]
[109 126]
[110 125]
[111 124]
[112 123]
[113 122]
[114 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
