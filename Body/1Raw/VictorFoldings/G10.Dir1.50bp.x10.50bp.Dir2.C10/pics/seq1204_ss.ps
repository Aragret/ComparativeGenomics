%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAGCCGGCGUAAAGAGUGUUUUAGAUCACCCCCUCCCCAAUAAAGCUAAAACUCACCUGAxxxxxxxxxxUAGAAGAACUAAUGUUAGUAUAAGUAACAUGAAAACAUUCUCCUCCGCAUAAGCCUGCGUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[119.25526428 525.71972656]
[119.25526428 510.71972656]
[119.25526428 495.71972656]
[119.25526428 480.71972656]
[119.25526428 465.71972656]
[119.25526428 450.71972656]
[119.25526428 435.71972656]
[119.25526428 420.71972656]
[119.25526428 405.71972656]
[119.25526428 390.71972656]
[117.69768524 375.80081177]
[107.49835968 364.94616699]
[112.21831512 349.84542847]
[109.11999512 335.16891479]
[104.63208008 329.23559570]
[106.11322784 320.15493774]
[103.32090759 305.41714478]
[91.62921906 301.88937378]
[82.51013184 293.65792847]
[77.75185394 282.25360107]
[78.32292175 269.83715820]
[84.17574310 258.78976440]
[94.24385071 251.25651550]
[92.06701660 236.41531372]
[89.89017487 221.57411194]
[87.71334076 206.73289490]
[85.53650665 191.89169312]
[83.35966492 177.05049133]
[81.18283081 162.20928955]
[79.00599670 147.36808777]
[76.82915497 132.52687073]
[74.65232086 117.68566895]
[69.31080627 103.66895294]
[61.05851746 91.14299774]
[47.00517654 83.87566376]
[46.46437454 68.99087524]
[38.21208572 56.46491623]
[24.73311043 63.09216690]
[10.52979088 67.97775269]
[-4.17386913 71.04460907]
[-19.14596939 72.24438477]
[-34.15037918 71.55813599]
[-48.95045471 68.99670410]
[-63.31278229 64.60047913]
[-77.01084900 58.43880081]
[-89.82860565 50.60883713]
[-101.56390381 41.23408890]
[-112.03166962 30.46240234]
[-121.06679535 18.46366501]
[-128.52679443 5.42711544]
[-134.29400635 -8.44164276]
[-138.27748108 -22.92387962]
[-140.41439819 -37.79118729]
[-140.67103577 -52.80908966]
[-139.04335022 -67.74073029]
[-135.55703735 -82.35061646]
[-130.26705933 -96.40833282]
[-123.25683594 -109.69216156]
[-114.63695526 -121.99259949]
[-104.54335022 -133.11566162]
[-93.13521576 -142.88591003]
[-80.59247589 -151.14924622]
[-67.11294556 -157.77537537]
[-52.90921021 -162.65975952]
[-38.20529556 -165.72537231]
[-23.23309326 -166.92388916]
[-8.22874069 -166.23638916]
[6.57112122 -163.67370605]
[20.93307877 -159.27627563]
[34.63062286 -153.11343384]
[47.44772339 -145.28239441]
[59.18223572 -135.90666199]
[69.64908600 -125.13409424]
[78.68320465 -113.13459015]
[86.14211273 -100.09741974]
[91.90815735 -86.22817230]
[95.89041138 -71.74559784]
[98.02606964 -56.87811279]
[98.28144836 -41.86018753]
[96.65251160 -26.92868423]
[93.16496277 -12.31909180]
[87.87379456 1.73817670]
[80.86246490 15.02141666]
[72.24154663 27.32113266]
[62.14700317 38.44334030]
[50.73804855 48.21262741]
[58.99033737 60.73858643]
[72.45342255 67.10997772]
[73.58448029 82.89070892]
[81.83676910 95.41666412]
[93.57510376 84.22141266]
[108.02133942 86.92377472]
[121.11449432 79.60466766]
[134.20765686 72.28556061]
[147.30081177 64.96645355]
[160.39396667 57.64735031]
[173.48712158 50.32824707]
[181.75762939 36.84087372]
[196.64230347 37.38443375]
[207.51766968 24.37817192]
[223.02624512 31.22802734]
[220.73728943 48.02674866]
[203.96141052 50.47758865]
[196.62741089 63.44144821]
[180.80621338 63.42139816]
[167.71305847 70.74050903]
[154.61991882 78.05960846]
[141.52676392 85.37871552]
[128.43360901 92.69782257]
[115.34044647 100.01692963]
[107.97466278 115.05482483]
[89.49352264 115.50883484]
[91.67036438 130.35003662]
[93.84719849 145.19123840]
[96.02403259 160.03245544]
[98.20087433 174.87365723]
[100.37770844 189.71485901]
[102.55455017 204.55606079]
[104.73138428 219.39727783]
[106.90821838 234.23847961]
[109.08506012 249.07968140]
[125.35410309 256.96200562]
[133.60728455 272.87011719]
[130.73362732 290.40130615]
[118.05870819 302.62481689]
[120.85103607 317.36260986]
[123.79651642 332.07058716]
[126.89483643 346.74710083]
[137.31578064 358.65151978]
[132.37420654 372.70248413]
[139.10659790 359.29818726]
[151.56300354 350.94128418]
[166.51913452 349.79492188]
[180.10363770 356.15585327]
[188.80020142 368.37753296]
[190.35775757 383.29644775]
[184.37313843 397.05087280]
[172.39541626 406.08053589]
[157.52502441 408.04809570]
[143.61109924 402.44427490]
[134.25526428 390.71972656]
[134.25526428 405.71972656]
[134.25526428 420.71972656]
[134.25526428 435.71972656]
[134.25526428 450.71972656]
[134.25526428 465.71972656]
[134.25526428 480.71972656]
[134.25526428 495.71972656]
[134.25526428 510.71972656]
[134.25526428 525.71972656]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 130]
[13 128]
[14 127]
[16 126]
[17 125]
[23 121]
[24 120]
[25 119]
[26 118]
[27 117]
[28 116]
[29 115]
[30 114]
[31 113]
[32 112]
[33 90]
[34 89]
[36 87]
[37 86]
[92 110]
[93 109]
[94 108]
[95 107]
[96 106]
[97 105]
[99 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
