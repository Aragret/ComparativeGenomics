%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGAUUUUUCGGUCACCCUGAAGUUUAUAUUCUUAUCCUACCAGGCUUCGGAAUAAUCUCCCxxxxxxxxxxUCGAUACGGGAUAAUCCUAUUUAUUACCUCAGAAGUUUUUUUCUUCGCAGGAUUUUUCUGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[81.26194763 266.09317017]
[81.26194763 251.09315491]
[81.26194763 236.09315491]
[81.26194763 221.09315491]
[81.26194763 206.09315491]
[81.26194763 191.09315491]
[81.26194763 176.09315491]
[81.26194763 161.09315491]
[81.26194763 146.09315491]
[81.26194763 131.09315491]
[70.82213593 120.32234955]
[55.82943726 119.85430145]
[40.83674240 119.38626099]
[25.84404564 118.91822052]
[11.80916786 126.22114563]
[-0.67048126 118.09049225]
[-15.66317749 117.62244415]
[-30.65587425 117.15440369]
[-44.97846985 121.61122131]
[-57.05846024 130.50357056]
[-63.13570786 145.73509216]
[-79.40181732 147.81970215]
[-89.12361908 134.61293030]
[-82.30014801 119.70077515]
[-65.95080566 118.42358398]
[-53.87081909 109.53123474]
[-57.12164688 94.88773346]
[-71.82960510 91.94224548]
[-86.53756714 88.99676514]
[-101.24552917 86.05128479]
[-115.95349121 83.10580444]
[-116.90464783 90.26240540]
[-121.17612457 97.42121124]
[-128.74234009 103.20762634]
[-139.05172729 106.29750824]
[-154.01197815 105.20619965]
[-168.97222900 104.11489105]
[-183.48945618 111.74262238]
[-197.20747375 102.75663757]
[-196.01437378 86.40094757]
[-181.13751221 79.50088501]
[-167.88092041 89.15464020]
[-152.92066956 90.24594879]
[-137.96041870 91.33726501]
[-133.95268250 76.88257599]
[-147.33897400 70.11445618]
[-160.72525024 63.34634399]
[-177.58854675 61.59547424]
[-180.57432556 44.90651321]
[-165.36412048 37.41745377]
[-153.95713806 49.96006012]
[-140.57084656 56.72817230]
[-127.18457031 63.49628830]
[-113.00801086 68.39784241]
[-98.30004883 71.34332275]
[-83.59208679 74.28880310]
[-68.88412476 77.23428345]
[-54.17616272 80.17977142]
[-30.18783188 102.16171265]
[-15.19513512 102.62975311]
[-0.20243911 103.09779358]
[12.76006126 95.76139069]
[26.31208801 103.92552185]
[41.30478287 104.39356995]
[56.29748154 104.86161041]
[71.29017639 105.32965088]
[82.21398163 45.85224915]
[84.39081573 31.01104355]
[86.56765747 16.16983795]
[88.74449158 1.32863271]
[75.27838135 -5.59542799]
[64.79194641 -16.51848984]
[58.42266083 -30.25570297]
[56.86143494 -45.31695175]
[60.27760696 -60.06851196]
[68.30062103 -72.91024017]
[80.06019592 -82.44915771]
[94.28075409 -87.65056610]
[109.41973877 -87.95024872]
[123.83499146 -83.31568909]
[135.96286011 -74.24962616]
[144.48780823 -61.73546982]
[148.48509216 -47.13066101]
[147.52113342 -32.01942444]
[141.70048523 -18.04090881]
[131.65454102 -6.71140480]
[118.47299957 0.74015129]
[103.58570099 3.50546956]
[101.40885925 18.34667587]
[99.23202515 33.18788147]
[97.05519104 48.02908707]
[109.75011444 56.01900101]
[122.18955994 47.63685989]
[134.62899780 39.25471497]
[147.06843567 30.87257195]
[148.53016663 15.30345631]
[159.69380188 4.35324335]
[175.28822327 3.19228935]
[187.95022583 12.36876106]
[191.70120239 27.54981041]
[184.77005005 41.56740952]
[170.42944336 47.80287552]
[155.45057678 43.31201172]
[143.01113892 51.69415665]
[130.57170105 60.07629776]
[118.13226318 68.45844269]
[119.45169067 75.84146881]
[132.67968750 68.76896667]
[143.49357605 79.16413879]
[136.94868469 92.66097260]
[122.09055328 90.60752869]
[123.40998840 97.99055481]
[137.98269653 101.54531860]
[152.55538940 105.10007477]
[167.12809753 108.65483856]
[179.62432861 99.25386047]
[195.23698425 100.13633728]
[206.59426880 110.88558197]
[208.33360291 126.42613220]
[199.63372803 139.42021179]
[184.60246277 143.73242188]
[170.33711243 137.32666016]
[163.57333374 123.22753906]
[149.00062561 119.67278290]
[134.42793274 116.11801910]
[119.85522461 112.56325531]
[113.95690918 117.19573212]
[125.04141235 127.30185699]
[136.12591553 137.40797424]
[147.21041870 147.51409912]
[160.94805908 153.53715515]
[167.74215698 166.91027832]
[164.50555420 181.55694580]
[152.70893860 190.82192993]
[137.71249390 190.49537659]
[126.33036041 180.72567749]
[123.73441315 165.95188904]
[116.54302979 152.78816223]
[109.35164642 139.62442017]
[102.16026306 126.46067810]
[96.26194763 131.09315491]
[96.26194763 146.09315491]
[96.26194763 161.09315491]
[96.26194763 176.09315491]
[96.26194763 191.09315491]
[96.26194763 206.09315491]
[96.26194763 221.09315491]
[96.26194763 236.09315491]
[96.26194763 251.09315491]
[96.26194763 266.09317017]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 66]
[12 65]
[13 64]
[14 63]
[16 61]
[17 60]
[18 59]
[19 26]
[20 25]
[27 58]
[28 57]
[29 56]
[30 55]
[31 54]
[35 44]
[36 43]
[37 42]
[45 53]
[46 52]
[47 51]
[67 91]
[68 90]
[69 89]
[70 88]
[92 106]
[93 105]
[94 104]
[95 103]
[112 126]
[113 125]
[114 124]
[115 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
