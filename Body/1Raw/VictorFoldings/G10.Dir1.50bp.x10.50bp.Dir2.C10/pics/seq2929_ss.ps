%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUGCUAAGACUUCACCAGUCAAAGCGAACUACUAUACUCAAUUGAUCCAAUAACUUGACCAxxxxxxxxxxAUCUCCAACACAUAUGGCCUAGACUACGUACAUAACCUAAACCUACUCCAAUGCUAAAACUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[87.24904633 248.91111755]
[89.83482361 229.70269775]
[90.14279938 214.70585632]
[90.45077515 199.70901489]
[90.75875854 184.71217346]
[91.06673431 169.71534729]
[91.37471008 154.71850586]
[91.68268585 139.72166443]
[91.99066162 124.72482300]
[92.29864502 109.72798920]
[85.72782898 106.11213684]
[72.58619690 98.88043213]
[66.01538086 95.26457977]
[53.51134491 103.55005646]
[41.00730896 111.83553314]
[37.74448013 127.06680298]
[24.94557762 135.29133606]
[10.44499493 132.08685303]
[-2.05904102 140.37232971]
[-14.56307697 148.65780640]
[-27.06711197 156.94328308]
[-31.65382576 172.31668091]
[-46.58628464 178.18193054]
[-60.40959167 170.03971863]
[-62.51968002 154.13603210]
[-51.29787827 142.67083740]
[-35.35258865 144.43923950]
[-22.84855080 136.15376282]
[-10.34451580 127.86829376]
[2.15952015 119.58281708]
[4.86062431 104.98009491]
[17.42346573 96.39932251]
[32.72183228 99.33149719]
[45.22586823 91.04602051]
[57.72990417 82.76054382]
[98.48772430 87.97560883]
[86.03708649 79.60247040]
[74.09436035 70.51954651]
[62.69997025 60.75758743]
[51.89246368 50.34961319]
[41.70841599 39.33084488]
[32.18228531 27.73856926]
[23.34630203 15.61200905]
[15.23036575 2.99219728]
[7.86193991 -10.07816505]
[1.26595664 -23.55485153]
[-4.53526545 -37.39226151]
[-9.52209759 -51.54357147]
[-13.67766476 -65.96089935]
[-16.98790550 -80.59545898]
[-19.44161987 -95.39773560]
[-21.03050423 -110.31763458]
[-21.74918365 -125.30467987]
[-21.59522629 -140.30816650]
[-20.56915283 -155.27729797]
[-18.67443275 -170.16145325]
[-15.91748047 -184.91026306]
[-12.30762386 -199.47381592]
[-7.85707617 -213.80282593]
[-2.58089852 -227.84883118]
[3.50305700 -241.56427002]
[10.37420368 -254.90277100]
[18.00929260 -267.81918335]
[26.38248825 -280.26977539]
[35.46545792 -292.21246338]
[45.22746658 -303.60681152]
[55.63548279 -314.41427612]
[66.65429688 -324.59829712]
[78.24660492 -334.12435913]
[90.37320709 -342.96029663]
[102.99304962 -351.07617188]
[116.06344604 -358.44454956]
[129.54016113 -365.04049683]
[143.37759399 -370.84164429]
[157.52891541 -375.82843018]
[171.94625854 -379.98391724]
[186.58084106 -383.29409790]
[201.38311768 -385.74777222]
[216.30303955 -387.33657837]
[231.29008484 -388.05520630]
[246.29356384 -387.90118408]
[261.26269531 -386.87506104]
[276.14685059 -384.98025513]
[290.89562988 -382.22326660]
[305.45916748 -378.61334229]
[319.78817749 -374.16271973]
[333.83413696 -368.88650513]
[347.54956055 -362.80249023]
[360.88803101 -355.93127441]
[373.80441284 -348.29614258]
[386.25497437 -339.92288208]
[398.19763184 -330.83987427]
[409.59194946 -321.07781982]
[420.39935303 -310.66973877]
[430.58331299 -299.65090942]
[440.10934448 -288.05853271]
[448.94525146 -275.93191528]
[457.06106567 -263.31204224]
[464.42938232 -250.24160767]
[471.02526855 -236.76487732]
[476.82635498 -222.92741394]
[481.81307983 -208.77606201]
[485.96853638 -194.35870361]
[489.27865601 -179.72410583]
[491.73223877 -164.92181396]
[493.32101440 -150.00190735]
[494.03955078 -135.01484680]
[493.88546753 -120.01136780]
[492.85928345 -105.04223633]
[490.96444702 -90.15809631]
[488.20736694 -75.40930939]
[484.59738159 -60.84579468]
[480.14672852 -46.51681519]
[474.87042236 -32.47085953]
[468.78634644 -18.75546265]
[461.91510010 -5.41702604]
[454.27990723 7.49931479]
[445.90661621 19.94985390]
[436.82354736 31.89246368]
[427.06143188 43.28673553]
[416.65332031 54.09410858]
[405.63442993 64.27802277]
[394.04202271 73.80400848]
[381.91537476 82.63983917]
[369.29544067 90.75562286]
[356.22500610 98.12388611]
[342.74822998 104.71970367]
[328.91073608 110.52075195]
[314.75936890 115.50740814]
[300.34201050 119.66279602]
[285.70739746 122.97285461]
[270.90509033 125.42638397]
[255.98516846 127.01508331]
[240.99810791 127.73358154]
[225.99464417 127.57943726]
[211.02551270 126.55317688]
[196.14137268 124.65827179]
[181.39260864 121.90113831]
[166.82910156 118.29109955]
[152.50013733 113.84037018]
[138.45420837 108.56401825]
[124.73883057 102.47989655]
[111.40042877 95.60858154]
[107.29547882 110.03596497]
[106.98750305 125.03280640]
[106.67952728 140.02964783]
[106.37155151 155.02647400]
[106.06356812 170.02331543]
[105.75559235 185.02015686]
[105.44761658 200.01699829]
[105.13964081 215.01382446]
[104.83165741 230.01066589]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 152]
[3 151]
[4 150]
[5 149]
[6 148]
[7 147]
[8 146]
[9 145]
[10 144]
[13 35]
[14 34]
[15 33]
[18 30]
[19 29]
[20 28]
[21 27]
[36 143]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
