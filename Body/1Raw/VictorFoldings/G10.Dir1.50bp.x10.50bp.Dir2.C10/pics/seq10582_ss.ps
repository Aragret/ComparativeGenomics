%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAACUCCAAAUAAAAGUAAUAACCAUGCACACUACUAUAACCACCCUAACCCUGACUUCCxxxxxxxxxxCUCACCAUUGGCAGCCUAGCAUUAGCAGGAAUACCUUUCCUCACAGGUUUCUACUCCAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[86.55245972 257.60183716]
[86.55245972 242.60182190]
[86.55245972 227.60182190]
[86.55245972 212.60182190]
[86.55245972 197.60182190]
[86.55245972 182.60182190]
[86.55245972 167.60182190]
[86.55245972 152.60182190]
[86.55245972 137.60182190]
[86.55245972 122.60182190]
[83.69097900 114.57936859]
[84.09992981 107.19304657]
[87.06678772 101.56237793]
[91.54278564 98.42258453]
[79.84316254 89.03542328]
[68.04652405 79.77046967]
[56.15414429 70.62873840]
[44.26176453 61.48700333]
[32.36938477 52.34526825]
[22.19183540 63.37811661]
[11.06627274 73.45423126]
[-0.91772586 82.49248505]
[-13.66367054 90.42010498]
[-27.06893539 97.17326355]
[-41.02558899 102.69757843]
[-55.42125320 106.94857788]
[-70.14002991 109.89203644]
[-85.06340027 111.50425720]
[-100.07121277 111.77224731]
[-115.04262543 110.69385529]
[-129.85710144 108.27776337]
[-144.39537048 104.54342651]
[-158.54034424 99.52091217]
[-172.17817688 93.25066376]
[-185.19902039 85.78315735]
[-197.49806213 77.17852020]
[-208.97627258 67.50603485]
[-219.54122925 56.84357834]
[-229.10787964 45.27700806]
[-237.59916687 32.89944077]
[-244.94676208 19.81054497]
[-251.09147644 6.11570311]
[-255.98384094 -8.07482052]
[-259.58447266 -22.64676857]
[-261.86437988 -37.48281479]
[-262.80520630 -52.46350479]
[-262.39938354 -67.46822357]
[-260.65014648 -82.37615204]
[-257.57159424 -97.06726837]
[-253.18855286 -111.42327881]
[-247.53625488 -125.32859802]
[-240.66024780 -138.67126465]
[-232.61589050 -151.34385681]
[-223.46792603 -163.24432373]
[-213.29003906 -174.27685547]
[-202.16416931 -184.35263062]
[-190.17990112 -193.39051819]
[-177.43371582 -201.31774902]
[-164.02824402 -208.07049561]
[-150.07142639 -213.59439087]
[-135.67562866 -217.84495544]
[-120.95676422 -220.78796387]
[-106.03334045 -222.39971924]
[-91.02552032 -222.66725159]
[-76.05413818 -221.58840942]
[-61.23973465 -219.17185974]
[-46.70158768 -215.43708801]
[-32.55675888 -210.41413879]
[-18.91912842 -204.14347839]
[-5.89850426 -196.67556763]
[6.40027666 -188.07055664]
[17.87819099 -178.39772034]
[28.44282150 -167.73493958]
[38.00910950 -156.16807556]
[46.50003052 -143.79025269]
[53.84721756 -130.70112610]
[59.99151611 -117.00610352]
[64.88345337 -102.81542969]
[68.48364258 -88.24337006]
[70.76309204 -73.40725708]
[71.70346069 -58.42653656]
[71.29716492 -43.42183304]
[69.54747772 -28.51395226]
[66.46849060 -13.82293129]
[62.08499908 0.53294545]
[56.43228531 14.43809128]
[49.55587006 27.78054810]
[41.51111984 40.45288849]
[53.40349960 49.59462357]
[65.29587555 58.73635864]
[77.18825531 67.87808990]
[84.45510864 69.47137451]
[89.23032379 77.33580017]
[100.92994690 86.72296143]
[115.29813385 91.03054047]
[130.23243713 89.62824249]
[145.16674805 88.22593689]
[156.81190491 69.34999847]
[182.59375000 67.82135773]
[196.11795044 61.33319473]
[204.92439270 47.49922943]
[221.29423523 48.47907639]
[228.38758850 63.26475525]
[218.90742493 76.64602661]
[202.60610962 74.85738373]
[189.08192444 81.34555054]
[192.18023682 96.02207947]
[207.17294312 96.49011993]
[222.16563416 96.95816040]
[237.15832520 97.42620087]
[252.15103149 97.89424133]
[264.78106689 88.00175476]
[280.35610962 91.84849548]
[286.92831421 106.48357391]
[279.45605469 120.68022156]
[263.67138672 123.54797363]
[251.68298340 112.88694000]
[236.69029236 112.41889954]
[221.69758606 111.95085907]
[206.70489502 111.48281097]
[191.71220398 111.01477051]
[178.81236267 119.37640381]
[164.50418091 119.95951080]
[152.82899475 113.65453339]
[146.56904602 103.16024017]
[131.63475037 104.56254578]
[116.70043945 105.96485138]
[130.47882080 111.89410400]
[144.25721741 117.82335663]
[159.10716248 119.93968201]
[171.28643799 128.69557190]
[178.02267456 142.09791565]
[177.78254700 157.09599304]
[170.62069702 170.27581787]
[158.16737366 178.63731384]
[143.25727844 180.27716064]
[129.28436279 174.82209778]
[119.42926025 163.51382446]
[115.93522644 148.92930603]
[108.74384308 135.76556396]
[101.55245972 122.60182190]
[101.55245972 137.60182190]
[101.55245972 152.60182190]
[101.55245972 167.60182190]
[101.55245972 182.60182190]
[101.55245972 197.60182190]
[101.55245972 212.60182190]
[101.55245972 227.60182190]
[101.55245972 242.60182190]
[101.55245972 257.60183716]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[14 94]
[15 93]
[16 91]
[17 90]
[18 89]
[19 88]
[95 127]
[96 126]
[97 125]
[99 106]
[100 105]
[107 121]
[108 120]
[109 119]
[110 118]
[111 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
