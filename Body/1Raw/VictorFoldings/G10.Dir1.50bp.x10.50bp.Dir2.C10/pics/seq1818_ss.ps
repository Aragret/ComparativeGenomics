%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUUACACUUAGGAGAUUUCAACUUAACUUGACCGCUCUGAGCUAAACCUAGCCCCAAACCCxxxxxxxxxxGCAGGGAACUACUCCCACCCUGGAGCCUCCGUAGACCUAACCAUCUUCUCCUUACACCUAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[151.60571289 359.30963135]
[151.60571289 344.30963135]
[151.60571289 329.30963135]
[151.60571289 314.30963135]
[151.60571289 299.30963135]
[151.60571289 284.30963135]
[151.60571289 269.30963135]
[151.60571289 254.30963135]
[151.60571289 239.30963135]
[151.60571289 224.30963135]
[147.50077820 209.88223267]
[139.60429382 197.12898254]
[136.21034241 195.97647095]
[133.22326660 193.08735657]
[131.46943665 188.67942810]
[131.64236450 183.33851624]
[124.54595947 170.12333679]
[121.22939301 168.76406860]
[118.42584229 165.69654846]
[116.94670105 161.18902588]
[117.44808960 155.86889648]
[111.17868042 142.24191284]
[104.90927887 128.61492920]
[98.63986969 114.98795319]
[92.88726044 128.84101868]
[77.91786957 129.79881287]
[70.44664764 116.79186249]
[78.81710052 104.34335327]
[63.99461365 106.64422607]
[49.17213440 108.94509888]
[34.34965134 111.24597168]
[25.22427177 124.14958191]
[9.63352299 126.73880768]
[-3.17288113 117.47750854]
[-5.59712696 101.86026001]
[3.79904675 89.15248871]
[19.44105721 86.89348602]
[32.04877472 96.42349243]
[46.87125778 94.12261963]
[61.69374084 91.82173920]
[76.51622009 89.52086639]
[82.69910431 90.24953461]
[88.49622345 92.01602173]
[93.77033234 94.75062561]
[93.15450287 79.76327515]
[92.53868103 64.77591705]
[91.92285156 49.78856659]
[85.79367828 36.09794235]
[75.02500153 25.65593147]
[57.08960342 21.61215019]
[52.88758087 4.60075617]
[41.90677643 -5.61795092]
[30.92597580 -15.83665848]
[19.94517326 -26.05536461]
[3.85008144 -29.19862175]
[-1.21868348 -44.79476547]
[9.95318890 -56.79981995]
[25.87303352 -52.86401367]
[30.16387939 -37.03616714]
[41.14468384 -26.81746101]
[52.12548447 -16.59875298]
[63.10628891 -6.38004637]
[75.24094391 -6.49063635]
[84.47705841 1.98672318]
[85.46701050 14.88725281]
[96.23568726 25.32926178]
[103.72146606 24.86755562]
[99.27722931 10.54104996]
[94.83298492 -3.78545451]
[90.38874817 -18.11195946]
[81.22705078 -29.98896599]
[79.49848175 -44.88903427]
[85.69771576 -58.54807663]
[98.05067444 -67.05715942]
[113.02218628 -67.98116302]
[126.32772827 -61.05566025]
[134.15953064 -48.26257706]
[134.27629089 -33.26303101]
[126.64299774 -20.34804535]
[123.99300385 -5.58398294]
[121.34300995 9.18007946]
[118.69301605 23.94414139]
[126.17878723 23.48243523]
[135.58264160 11.79622650]
[144.98649597 0.11001743]
[154.39036560 -11.57619095]
[163.79421997 -23.26239967]
[157.63659668 -37.27462006]
[158.70765686 -52.54260254]
[166.76129150 -65.55788422]
[179.94682312 -73.32965088]
[195.23432922 -74.07199860]
[209.11082458 -67.61434174]
[218.38761902 -55.44061279]
[220.93295288 -40.34823608]
[216.16194153 -25.80533218]
[205.17092896 -15.15375328]
[190.48556519 -10.84115601]
[175.48042297 -13.85854244]
[166.07656860 -2.17233419]
[156.67271423 9.51387405]
[147.26885986 21.20008278]
[137.86500549 32.88629150]
[106.91020966 49.17274094]
[107.52603149 64.16009521]
[108.14186096 79.14744568]
[108.75768280 94.13480377]
[112.26685333 108.71855164]
[118.53625488 122.34552765]
[124.80566406 135.97250366]
[131.07507324 149.59948730]
[137.76113892 163.02693176]
[144.85754395 176.24212646]
[152.35754395 189.23249817]
[160.25402832 201.98576355]
[160.16468811 186.98602295]
[163.24263000 172.30520630]
[169.34921265 158.60449219]
[178.20944214 146.50093079]
[189.42427063 136.53961182]
[202.48860168 129.16918945]
[216.81405640 124.72158051]
[231.75546265 123.39710999]
[246.63990784 125.25542450]
[260.79702759 130.21282959]
[273.58923340 138.04605103]
[284.44039917 148.40232849]
[292.86181641 160.81521606]
[298.47421265 174.72567749]
[301.02481079 189.50723267]
[300.39874268 204.49417114]
[296.62420654 219.01148987]
[289.87121582 232.40541077]
[280.44387817 244.07267761]
[268.76678467 253.48785400]
[255.36582947 260.22689819]
[240.84457397 263.98629761]
[225.85699463 264.59674072]
[211.07810974 262.03073120]
[197.17349243 256.40383911]
[184.76939392 247.96948242]
[174.42443848 237.10752869]
[166.60571289 224.30963135]
[166.60571289 239.30963135]
[166.60571289 254.30963135]
[166.60571289 269.30963135]
[166.60571289 284.30963135]
[166.60571289 299.30963135]
[166.60571289 314.30963135]
[166.60571289 329.30963135]
[166.60571289 344.30963135]
[166.60571289 359.30963135]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 115]
[12 114]
[16 113]
[17 112]
[21 111]
[22 110]
[23 109]
[24 108]
[28 41]
[29 40]
[30 39]
[31 38]
[44 107]
[45 106]
[46 105]
[47 104]
[48 66]
[49 65]
[51 62]
[52 61]
[53 60]
[54 59]
[83 103]
[84 102]
[85 101]
[86 100]
[87 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
