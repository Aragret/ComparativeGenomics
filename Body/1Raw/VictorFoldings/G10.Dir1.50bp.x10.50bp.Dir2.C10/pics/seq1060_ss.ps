%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGCCUAGCCACACCCCCACGGGAAACAGCAGUGAUUAACCUUUAGCAAUAAACGAAAGUUUxxxxxxxxxxCCUCAGAAGUUUUUUUCUUCGCAGGAUUUUUCUGAGCCUUUUACCACUCCAGCCUAGCCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[1.25073683 266.19525146]
[-6.90592909 278.78369141]
[-15.06259441 291.37213135]
[-23.21926117 303.96057129]
[-31.37592697 316.54901123]
[-32.38678360 332.33789062]
[-45.80096054 338.81161499]
[-46.81181717 354.60049438]
[-60.22599030 361.07421875]
[-68.38265991 373.66265869]
[-63.62265778 388.55816650]
[-69.59873962 403.00878906]
[-83.48918915 410.19137573]
[-98.73535156 406.71453857]
[-108.13845825 394.21990967]
[-107.25865173 378.60708618]
[-96.51135254 367.24798584]
[-80.97109985 365.50601196]
[-72.81443024 352.91757202]
[-72.38699341 338.02908325]
[-58.38939667 330.65493774]
[-57.96195984 315.76647949]
[-43.96436691 308.39233398]
[-35.80770111 295.80389404]
[-27.65103340 283.21545410]
[-19.49436760 270.62701416]
[-11.33770275 258.03857422]
[-20.87620354 250.86822510]
[-29.95413780 243.12303162]
[-38.53691864 234.83248901]
[-46.59183884 226.02821350]
[-54.08821106 216.74374390]
[-60.99747086 207.01445007]
[-67.29329681 196.87741089]
[-72.95169067 186.37123108]
[-77.95110321 175.53598022]
[-82.27247620 164.41290283]
[-85.89935303 153.04440308]
[-88.81790924 141.47378540]
[-91.01702881 129.74514771]
[-92.48832703 117.90317535]
[-93.22619629 105.99298859]
[-93.22782898 94.05996704]
[-92.49322510 82.14957428]
[-91.02516937 70.30719757]
[-88.82926941 58.57796097]
[-85.91388702 47.00654602]
[-82.29012299 35.63705444]
[-77.97179413 24.51279640]
[-72.97535706 13.67616367]
[-67.31983948 3.16844416]
[-61.02679443 -6.97032452]
[-54.12019730 -16.70151138]
[-46.62636948 -25.98803902]
[-38.57386398 -34.79452133]
[-29.99335480 -43.08740616]
[-20.91754341 -50.83509445]
[-11.38100815 -58.00806808]
[-1.42008495 -64.57899475]
[8.92727184 -70.52283478]
[2.37940168 -84.01821899]
[-4.16846895 -97.51360321]
[-10.71633911 -111.00898743]
[-24.58909035 -119.75420380]
[-23.68159676 -136.12821960]
[-8.92741013 -143.28684998]
[4.49562693 -133.86592102]
[2.77904463 -117.55685425]
[9.32691479 -104.06147003]
[15.87478542 -90.56608582]
[22.42265701 -77.07070160]
[42.62512207 -84.60877991]
[63.54140854 -89.85007477]
[84.91129303 -92.72937012]
[106.46889496 -93.21084595]
[127.94602203 -91.28852081]
[149.07545471 -86.98630524]
[169.59432983 -80.35771942]
[189.24734497 -71.48524475]
[207.79002380 -60.47925186]
[224.99162292 -47.47668457]
[240.63816833 -32.63930130]
[254.53497314 -16.15170479]
[266.86627197 -24.69216347]
[279.19754028 -33.23262405]
[291.52883911 -41.77308273]
[303.86010742 -50.31354141]
[316.19140625 -58.85400009]
[328.52267456 -67.39445496]
[323.58294678 -81.65985870]
[322.67630005 -96.72904968]
[325.86999512 -111.48380280]
[332.92709351 -124.82921600]
[343.32388306 -135.77497864]
[356.28881836 -143.50881958]
[370.85989380 -147.45686340]
[385.95574951 -147.32612610]
[400.45623779 -143.12631226]
[413.28530884 -135.16908264]
[423.49096680 -124.04489136]
[430.31585693 -110.57925415]
[433.25354004 -95.77140045]
[432.08602905 -80.72016907]
[426.89996338 -66.54246521]
[418.08016968 -54.29037094]
[406.28112793 -44.87306595]
[392.37844849 -38.98938370]
[377.40377808 -37.07592773]
[362.46829224 -39.27468872]
[348.68038940 -45.42250824]
[337.06314087 -55.06317520]
[324.73187256 -46.52271652]
[312.40057373 -37.98225784]
[300.06927490 -29.44179726]
[287.73800659 -20.90133858]
[275.40670776 -12.36087990]
[263.07543945 -3.82042074]
[270.14596558 8.22514248]
[276.32833862 20.74978256]
[281.59024048 33.68811798]
[285.90420532 46.97261047]
[289.24774170 60.53391266]
[291.60336304 74.30123138]
[292.95880127 88.20270538]
[293.30697632 102.16575623]
[292.64605713 116.11750793]
[290.97949219 129.98512268]
[288.31600952 143.69621277]
[284.66949463 157.17919922]
[280.05895996 170.36370850]
[274.50851440 183.18089294]
[268.04708862 195.56387329]
[260.70843506 207.44801331]
[252.53088379 218.77124023]
[243.55709839 229.47447205]
[233.83390808 239.50183105]
[223.41210938 248.80097961]
[212.34606934 257.32336426]
[200.69357300 265.02447510]
[188.51544189 271.86416626]
[175.87525940 277.80670166]
[162.83898926 282.82107544]
[149.47468567 286.88107300]
[135.85212708 289.96554565]
[122.04241180 292.05834961]
[108.11763000 293.14859009]
[94.15047455 293.23059082]
[80.21385956 292.30389404]
[66.38052368 290.37335205]
[52.72269058 287.44900513]
[39.31164932 283.54617310]
[26.21740913 278.68521118]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 27]
[2 26]
[3 25]
[4 24]
[5 23]
[7 21]
[9 19]
[10 18]
[60 71]
[61 70]
[62 69]
[63 68]
[83 117]
[84 116]
[85 115]
[86 114]
[87 113]
[88 112]
[89 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
