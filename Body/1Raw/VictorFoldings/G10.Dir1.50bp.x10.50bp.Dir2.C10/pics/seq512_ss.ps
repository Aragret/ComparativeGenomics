%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCACCCCCCAACUAACACAUUAUUUUCCCCUCCCACUCCCAUACUACUAAUCUCAUCAAUxxxxxxxxxxCACAGCCCUAUACUCCCUCUACAUAUUUACCACAACACAAUGGGGCUCACUCACCCACCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[144.41215515 72.29818726]
[133.11315918 82.16390991]
[121.81414795 92.02963257]
[110.51514435 101.89535522]
[101.12798309 113.59497833]
[93.94547272 126.76356506]
[86.76296234 139.93214417]
[79.58045197 153.10072327]
[72.39794922 166.26931763]
[65.21543884 179.43789673]
[62.93923950 196.23834229]
[46.16523743 198.70193481]
[39.15442657 183.26545715]
[52.04685593 172.25538635]
[59.22936249 159.08680725]
[66.41187286 145.91821289]
[73.59438324 132.74963379]
[80.77689362 119.58105469]
[87.95939636 106.41247559]
[77.74591827 95.42681122]
[64.08967590 101.63221741]
[54.72665405 114.38542175]
[39.93866730 112.60645294]
[26.28242493 118.81185913]
[12.62618446 125.01726532]
[3.53385043 138.66503906]
[-12.81207085 137.34484863]
[-19.59629631 122.41479492]
[-9.83979702 109.23364258]
[6.42077732 111.36103058]
[20.07701874 105.15561676]
[33.73326111 98.95021057]
[42.11949921 86.64085388]
[57.88426971 87.97597504]
[71.54051208 81.77056885]
[90.28809357 80.69346619]
[100.64942169 90.59635162]
[111.94842529 80.73062897]
[123.24742889 70.86490631]
[134.54643250 60.99918365]
[126.86171722 50.52752304]
[120.02009583 39.48691940]
[114.06347656 27.94509888]
[109.02835083 15.97285748]
[104.94554901 3.64362645]
[101.84005737 -8.96697617]
[99.73088074 -21.78161240]
[98.63090515 -34.72169495]
[98.54681396 -47.70787048]
[99.47909546 -60.66051102]
[101.42197418 -73.50019073]
[104.36348724 -86.14818573]
[108.28556824 -98.52694702]
[113.16410065 -110.56059265]
[118.96913910 -122.17533875]
[125.66503906 -133.29998779]
[133.21070862 -143.86634827]
[141.55982971 -153.80966187]
[150.66116333 -163.06898499]
[160.45889282 -171.58757019]
[170.89288330 -179.31320190]
[181.89913940 -186.19857788]
[193.41014099 -192.20147705]
[205.35528564 -197.28517151]
[217.66128540 -201.41850281]
[230.25270081 -204.57618713]
[243.05229187 -206.73890686]
[255.98155212 -207.89343262]
[268.96121216 -208.03274536]
[281.91168213 -207.15603638]
[294.75354004 -205.26872253]
[307.40805054 -202.38241577]
[319.79763794 -198.51489258]
[331.84634399 -193.68988037]
[343.48028564 -187.93701172]
[354.62817383 -181.29164124]
[365.22161865 -173.79450989]
[375.19577026 -165.49166870]
[384.48941040 -156.43405151]
[393.04565430 -146.67721558]
[400.81204224 -136.28105164]
[407.74099731 -125.30931854]
[413.79003906 -113.82932281]
[418.92214966 -101.91148376]
[433.14892578 -106.66529846]
[447.37570190 -111.41911316]
[461.60247803 -116.17292786]
[475.82925415 -120.92674255]
[490.05603027 -125.68055725]
[504.28283691 -130.43437195]
[518.50958252 -135.18818665]
[516.80572510 -150.14781189]
[518.24975586 -165.13475037]
[522.77862549 -179.49385071]
[530.19421387 -192.59736633]
[540.17248535 -203.87248230]
[552.27709961 -212.82630920]
[565.97900391 -219.06741333]
[580.67919922 -222.32295227]
[595.73504639 -222.45062256]
[610.48828125 -219.44482422]
[624.29406738 -213.43698120]
[636.54882812 -204.68972778]
[646.71685791 -193.58543396]
[654.35357666 -180.60955811]
[659.12530518 -166.32933044]
[660.82324219 -151.36903381]
[659.37335205 -136.38265991]
[654.83886719 -122.02535248]
[647.41809082 -108.92475128]
[637.43542480 -97.65356445]
[625.32720947 -88.70450592]
[611.62286377 -82.46879578]
[596.92138672 -79.21903229]
[581.86553955 -79.09729004]
[567.11346436 -82.10887909]
[553.31005859 -88.12215424]
[541.05871582 -96.87423706]
[530.89508057 -107.98252106]
[523.26342773 -120.96140289]
[509.03665161 -116.20758820]
[494.80984497 -111.45377350]
[480.58306885 -106.69995880]
[466.35629272 -101.94614410]
[452.12951660 -97.19232941]
[437.90274048 -92.43851471]
[423.67596436 -87.68470001]
[427.59249878 -70.53113556]
[429.66821289 -53.05826950]
[429.87954712 -35.46309280]
[428.22399902 -17.94397926]
[424.72003174 -0.69846094]
[419.40704346 16.07899666]
[412.34478760 32.19918823]
[403.61270142 47.48030853]
[393.30914307 61.74999237]
[381.55017090 74.84726715]
[368.46820068 86.62436676]
[354.21066284 96.94839478]
[338.93817139 105.70282745]
[322.82290649 112.78883362]
[306.04644775 118.12638855]
[288.79788208 121.65515137]
[271.27169800 123.33519745]
[253.66543579 123.14743805]
[236.17762756 121.09382629]
[219.00544739 117.19737244]
[202.34254456 111.50185394]
[186.37681580 104.07134247]
[171.28834534 94.98947144]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 40]
[2 39]
[3 38]
[4 37]
[5 19]
[6 18]
[7 17]
[8 16]
[9 15]
[10 14]
[20 35]
[21 34]
[23 32]
[24 31]
[25 30]
[84 127]
[85 126]
[86 125]
[87 124]
[88 123]
[89 122]
[90 121]
[91 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
