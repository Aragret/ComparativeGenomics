%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAUCACCCUAUAGAAGAACUAAUGUUAGUAUAAGUAACAUGAAAACAUUCUCCUCCGCAUxxxxxxxxxxACUCUCAUCGCUACCUCCCUGACAAGCGCCUAUAGCACUCGAAUAAUUCUUCUCACCCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[219.26330566 124.71587372]
[207.69538879 134.09844971]
[192.97805786 128.29237366]
[178.11500549 130.31469727]
[163.25196838 132.33703613]
[148.38891602 134.35937500]
[133.52586365 136.38169861]
[120.99990845 144.63398743]
[113.27582550 157.49240112]
[105.55174255 170.35079956]
[97.82765198 183.20919800]
[94.85455322 199.90042114]
[77.99259186 201.66410828]
[71.62998199 185.94935608]
[84.96925354 175.48512268]
[92.69333649 162.62670898]
[100.41741943 149.76831055]
[108.14151001 136.90991211]
[102.97790527 131.47050476]
[92.65069580 120.59167480]
[87.48709869 115.15225983]
[74.24451447 122.19739532]
[61.00192642 129.24252319]
[54.95866013 144.10383606]
[39.53154373 148.50651550]
[26.55493736 139.07321167]
[25.98338509 123.04034424]
[38.25533295 112.70695496]
[53.95679092 115.99994659]
[67.19937897 108.95481110]
[80.44196320 101.90967560]
[77.80310059 87.14361572]
[62.94005203 85.12128448]
[48.07700348 83.09894562]
[33.21395493 81.07661438]
[18.35091019 79.05428314]
[3.48786283 77.03194427]
[-11.22947216 82.83803558]
[-22.79738045 73.45545197]
[-39.30707932 77.31111908]
[-47.58240509 62.51398468]
[-35.65438080 50.46580505]
[-20.77504539 58.59240723]
[-7.12081623 52.64167023]
[5.51019716 62.16889954]
[20.37324333 64.19123077]
[35.23628998 66.21356964]
[50.09933853 68.23590088]
[64.96238708 70.25823975]
[79.82543182 72.28057098]
[86.17256165 58.68962097]
[75.08124542 48.59096909]
[63.98992920 38.49232101]
[47.86159897 35.52433777]
[42.62347412 19.98425865]
[53.66408920 7.85838366]
[69.62580872 11.62077522]
[74.08857727 27.40100670]
[85.17989349 37.49965668]
[96.27120972 47.59830475]
[139.32032776 77.41950226]
[131.50354004 121.51866150]
[146.36657715 119.49632263]
[161.22962952 117.47399139]
[176.09268188 115.45165253]
[190.95571899 113.42932129]
[203.58673096 103.90209198]
[217.24096680 109.85282898]
[216.77687073 91.13143158]
[218.59732056 72.49404907]
[222.67491150 54.21839905]
[228.94862366 36.57678223]
[237.32470703 19.83201218]
[247.67813110 4.23351717]
[259.85437012 -9.98638630]
[273.67175293 -22.61595535]
[288.92422485 -33.46716690]
[305.38430786 -42.37852097]
[322.80661011 -49.21744537]
[340.93133545 -53.88226318]
[359.48837280 -56.30370331]
[378.20111084 -56.44594574]
[396.79071045 -54.30712509]
[414.98010254 -49.91937637]
[432.49835205 -43.34833908]
[449.08444214 -34.69218445]
[464.49133301 -24.08013725]
[478.48953247 -11.67056656]
[490.87066650 2.35140347]
[503.13302612 -6.28771257]
[515.39538574 -14.92682838]
[527.65777588 -23.56594467]
[525.10058594 -38.61333084]
[529.33374023 -53.27767944]
[539.51672363 -64.64737701]
[553.62768555 -70.46495819]
[568.86486816 -69.57534027]
[582.20288086 -62.15515900]
[590.99353027 -49.67769241]
[593.49139404 -34.62035751]
[589.20056152 -19.97279167]
[578.97290039 -8.64328384]
[564.83917236 -2.88131452]
[549.60559082 -3.83092761]
[536.29687500 -11.30357647]
[524.03448486 -2.66446066]
[511.77212524 5.97465563]
[499.50976562 14.61377144]
[505.65710449 25.22442055]
[510.93643188 36.29296494]
[515.31390381 47.74854279]
[518.76135254 59.51779556]
[521.25671387 71.52536774]
[522.78393555 83.69435883]
[523.33312988 95.94683075]
[522.90087891 108.20433044]
[521.48974609 120.38833618]
[519.10876465 132.42080688]
[515.77313232 144.22467041]
[511.50415039 155.72431946]
[506.32916260 166.84606934]
[500.28118896 177.51867676]
[493.39898682 187.67375183]
[485.72656250 197.24621582]
[477.31298828 206.17475891]
[468.21215820 214.40213013]
[458.48229980 221.87561035]
[448.18569946 228.54728699]
[437.38824463 234.37437439]
[426.15914917 239.31951904]
[414.57022095 243.35099792]
[402.69570923 246.44294739]
[390.61163330 248.57548523]
[378.39541626 249.73493958]
[366.12527466 249.91378784]
[353.87979126 249.11087036]
[341.73736572 247.33125305]
[329.77584839 244.58628845]
[318.07177734 240.89350891]
[306.70019531 236.27650452]
[295.73394775 230.76480103]
[285.24325562 224.39366150]
[275.29537964 217.20382690]
[265.95401001 209.24131775]
[257.27908325 200.55708313]
[249.32614136 191.20672607]
[242.14616394 181.25006104]
[235.78521729 170.75085449]
[230.28405762 159.77632141]
[225.67796326 148.39671326]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 68]
[3 66]
[4 65]
[5 64]
[6 63]
[7 62]
[8 18]
[9 17]
[10 16]
[11 15]
[21 31]
[22 30]
[23 29]
[32 50]
[33 49]
[34 48]
[35 47]
[36 46]
[37 45]
[39 43]
[51 60]
[52 59]
[53 58]
[89 108]
[90 107]
[91 106]
[92 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
