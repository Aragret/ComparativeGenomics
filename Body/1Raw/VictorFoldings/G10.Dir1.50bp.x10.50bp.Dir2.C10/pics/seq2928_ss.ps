%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGCAGUACAUGCUAAGACUUCACCAGUCAAAGCGAACUACUAUACUCAAUUGAUCCAAUAxxxxxxxxxxUCCAAAGCCACCCCUCACCCACUAGGAUACCAACAAACCUACCCACCCUUAACAGUACAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[91.79195404 287.57217407]
[91.79195404 272.57217407]
[91.79195404 257.57217407]
[91.79195404 242.57218933]
[91.79195404 227.57218933]
[91.79195404 212.57218933]
[91.79195404 197.57218933]
[91.79195404 182.57218933]
[91.79195404 167.57218933]
[91.79195404 152.57218933]
[77.72043610 147.37677002]
[67.97277832 158.77778625]
[58.22512817 170.17881775]
[48.47747803 181.57983398]
[48.28935242 197.62178040]
[35.54195786 207.36259460]
[20.01400185 203.32995605]
[13.61720562 188.61735535]
[21.25864220 174.51104736]
[37.07645416 171.83218384]
[46.82410812 160.43116760]
[56.57175827 149.03013611]
[66.31941223 137.62911987]
[62.39069748 131.24043274]
[54.53327179 118.46308136]
[50.60456085 112.07440186]
[36.03185654 115.62916565]
[21.45915413 119.18392944]
[6.88645172 122.73869324]
[-2.64134049 135.64608765]
[-18.67795372 136.10057068]
[-28.92147255 123.75350952]
[-25.51394463 108.07650757]
[-11.06933498 101.09561920]
[3.33168960 108.16598511]
[17.90439224 104.61122131]
[32.47709656 101.05646515]
[47.04979706 97.50170135]
[72.79084015 66.02143860]
[105.86903381 66.45825195]
[111.64530182 52.61503220]
[117.42157745 38.77181244]
[104.02526093 32.00894165]
[91.15186310 24.29704475]
[78.86849976 15.67633057]
[67.23920441 6.19174528]
[56.32461929 -4.10726404]
[46.18164444 -15.16700172]
[36.86315918 -26.92980576]
[28.41774750 -39.33435440]
[20.88943863 -52.31596756]
[14.31748486 -65.80696869]
[8.73614788 -79.73703003]
[4.17452669 -94.03350830]
[0.65640396 -108.62187958]
[-1.79987836 -123.42607880]
[-3.18151402 -138.36892700]
[-3.48130012 -153.37252808]
[-2.69767332 -168.35864258]
[-0.83471948 -183.24914551]
[2.09784913 -197.96641541]
[6.08474302 -212.43370056]
[11.10517597 -226.57559204]
[17.13297462 -240.31834412]
[24.13671112 -253.59033203]
[32.07987213 -266.32232666]
[40.92104340 -278.44799805]
[50.61413193 -289.90405273]
[61.10860062 -300.63085938]
[72.34973907 -310.57241821]
[84.27893829 -319.67691040]
[96.83399963 -327.89688110]
[109.94947815 -335.18948364]
[123.55698395 -341.51669312]
[137.58557129 -346.84552002]
[151.96211243 -351.14816284]
[166.61164856 -354.40222168]
[181.45780945 -356.59069824]
[196.42317200 -357.70220947]
[211.42974854 -357.73095703]
[226.39926147 -356.67678833]
[241.25369263 -354.54516602]
[255.91557312 -351.34725952]
[270.30850220 -347.09970093]
[284.35739136 -341.82464600]
[297.98904419 -335.54962158]
[311.13235474 -328.30731201]
[323.71881104 -320.13546753]
[335.68280029 -311.07672119]
[346.96191406 -301.17828369]
[357.49740601 -290.49179077]
[367.23431396 -279.07290649]
[376.12185669 -266.98123169]
[384.11370850 -254.27973938]
[391.16824341 -241.03468323]
[397.24862671 -227.31510925]
[402.32318115 -213.19255066]
[406.36547852 -198.74064636]
[409.35440063 -184.03471375]
[411.27435303 -169.15145874]
[412.11538696 -154.16845703]
[411.87307739 -139.16381836]
[410.54867554 -124.21578217]
[408.14910889 -109.40228271]
[404.68688965 -94.80054474]
[400.18008423 -80.48669434]
[394.65213013 -66.53536224]
[388.13189697 -53.01928711]
[380.65338135 -40.00893021]
[372.25552368 -27.57212830]
[362.98217773 -15.77371693]
[352.88162231 -4.67521048]
[342.00656128 5.66552877]
[330.41369629 15.19458771]
[318.16345215 23.86228752]
[305.31967163 31.62343597]
[291.94937134 38.43756866]
[278.12219238 44.26916504]
[263.91030884 49.08781815]
[249.38772583 52.86840057]
[234.63021851 55.59120941]
[219.71470642 57.24205017]
[204.71896362 57.81230927]
[189.72114563 57.29901505]
[174.79946899 55.70484543]
[160.03172302 53.03811264]
[145.49490356 49.31271744]
[131.26480103 44.54808807]
[125.48852539 58.39130402]
[119.71224976 72.23451996]
[126.52381134 75.99327850]
[132.58198547 81.43847656]
[137.46943665 88.40779114]
[140.80668640 96.63632202]
[142.27711487 105.76603699]
[141.64944458 115.36128235]
[138.79621887 124.92952728]
[133.70736694 133.94650269]
[126.49744415 141.88438416]
[117.40618134 148.24153137]
[106.79195404 152.57218933]
[106.79195404 167.57218933]
[106.79195404 182.57218933]
[106.79195404 197.57218933]
[106.79195404 212.57218933]
[106.79195404 227.57218933]
[106.79195404 242.57218933]
[106.79195404 257.57217407]
[106.79195404 272.57217407]
[106.79195404 287.57217407]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 23]
[12 22]
[13 21]
[14 20]
[26 38]
[27 37]
[28 36]
[29 35]
[40 130]
[41 129]
[42 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
