%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACAAAGCACCCAACUUACACUUAGGAGAUUUCAACUUAACUUGACCGCUCUGAGCUAAACxxxxxxxxxxACXUUCAAAUUCCUCCCUGUACGAAAGGACAAGAGAAAUAAGGCCUACUUCACAAAGCGCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[117.50443268 265.76785278]
[117.50443268 250.76785278]
[117.50443268 235.76785278]
[117.50443268 220.76785278]
[117.50443268 205.76785278]
[117.50443268 190.76785278]
[117.50443268 175.76785278]
[117.50443268 160.76785278]
[117.50443268 145.76785278]
[117.50443268 130.76785278]
[110.69094086 127.63314819]
[104.42132568 141.26002502]
[90.79454041 134.99020386]
[97.06396484 121.36373901]
[90.25047302 118.22903442]
[78.85939789 127.98831177]
[67.46832275 137.74758911]
[67.80977631 153.38143921]
[57.98183441 165.54472351]
[42.62495041 168.49430847]
[28.99017334 160.83749390]
[23.51543045 146.18959045]
[28.78572845 131.46688843]
[42.31259155 123.62099457]
[57.70905304 126.35651398]
[69.10012817 116.59723663]
[80.49119568 106.83796692]
[77.35649872 100.02447510]
[62.42045593 98.64075470]
[71.08708954 86.39749146]
[67.95238495 79.58400726]
[53.12990570 81.88488007]
[40.69982529 92.58184814]
[25.31241226 86.91090393]
[22.79692078 70.70583344]
[35.74106979 60.63702011]
[50.82903290 67.06240082]
[65.65151215 64.76152039]
[76.09352112 53.99284363]
[77.93684387 39.10653687]
[79.78017426 24.22022820]
[81.62349701 9.33392143]
[83.46681976 -5.55238628]
[76.15042114 -16.22356415]
[78.03144073 -28.61844635]
[87.55464935 -36.13979721]
[89.70323181 -50.98511887]
[91.85180664 -65.83044434]
[81.19116974 -75.15896606]
[76.91476440 -88.51235199]
[80.10662079 -102.01731873]
[89.70681763 -111.83677673]
[86.04811859 -126.38372803]
[82.38941193 -140.93067932]
[78.73070526 -155.47764587]
[63.70031738 -154.72016907]
[48.81100845 -156.90983582]
[34.63507462 -161.96247864]
[21.71740723 -169.68388367]
[10.55452442 -179.77725220]
[1.57549787 -191.85464478]
[-4.87454271 -205.45182800]
[-8.54767418 -220.04614258]
[-9.30271244 -235.07666016]
[-7.11063480 -249.96560669]
[-2.05569935 -264.14071655]
[5.66779613 -277.05715942]
[15.76298046 -288.21838379]
[27.84182167 -297.19546509]
[41.44004059 -303.64331055]
[56.03496170 -307.31408691]
[71.06558990 -308.06668091]
[85.95419312 -305.87219238]
[100.12848663 -300.81497192]
[113.04365540 -293.08938599]
[124.20326996 -282.99240112]
[133.17839050 -270.91207886]
[139.62402344 -257.31283569]
[143.29243469 -242.71731567]
[144.04260254 -227.68656921]
[141.84570312 -212.79830933]
[136.78617859 -198.62484741]
[129.05850220 -185.71092224]
[118.95970917 -174.55294800]
[106.87796783 -165.57978821]
[93.27765656 -159.13633728]
[96.93636322 -144.58938599]
[100.59506989 -130.04243469]
[104.25377655 -115.49548340]
[109.74971771 -114.60161591]
[114.92095184 -112.53696442]
[119.52125549 -109.39983368]
[132.19276428 -117.42682648]
[144.86428833 -125.45382690]
[157.53579712 -133.48081970]
[156.22860718 -148.73040771]
[162.16868591 -162.83622742]
[173.99101257 -172.55686951]
[188.97894287 -175.65859985]
[203.68833923 -171.42868042]
[214.73908997 -160.83908081]
[219.59181213 -146.32324219]
[217.13139343 -131.21678162]
[207.92323303 -118.99107361]
[194.08326721 -112.45547485]
[178.79183960 -113.11183167]
[165.56280518 -120.80931091]
[152.89128113 -112.78231049]
[140.21977234 -104.75531769]
[127.54824829 -96.72831726]
[124.70973969 -75.70572662]
[106.69712830 -63.68186188]
[104.54855347 -48.83654022]
[102.39997101 -33.99121475]
[109.79110718 -18.10362053]
[98.35312653 -3.70906210]
[96.50980377 11.17724514]
[94.66648102 26.06355286]
[92.82315826 40.94985962]
[90.97982788 55.83617020]
[164.69702148 101.54743195]
[178.12446594 108.23350525]
[191.55192566 114.91958618]
[207.15904236 111.20509338]
[219.70472717 121.20435333]
[219.56500244 137.24679565]
[206.84706116 147.02603149]
[191.30700684 143.04026794]
[184.86584473 128.34703064]
[171.43840027 121.66095734]
[158.01094055 114.97488403]
[151.63432312 118.92312622]
[160.21253967 131.22816467]
[168.79075623 143.53321838]
[177.36897278 155.83825684]
[187.34797668 167.03735352]
[181.02729797 180.64062500]
[166.03276062 180.23591614]
[160.45521545 166.31082153]
[153.26382446 153.14707947]
[146.07244873 139.98333740]
[138.88105774 126.81960297]
[132.50442505 130.76785278]
[132.50442505 145.76785278]
[132.50442505 160.76785278]
[132.50442505 175.76785278]
[132.50442505 190.76785278]
[132.50442505 205.76785278]
[132.50442505 220.76785278]
[132.50442505 235.76785278]
[132.50442505 250.76785278]
[132.50442505 265.76785278]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[15 27]
[16 26]
[17 25]
[31 38]
[32 37]
[39 120]
[40 119]
[41 118]
[42 117]
[43 116]
[46 114]
[47 113]
[48 112]
[52 89]
[53 88]
[54 87]
[55 86]
[92 110]
[93 109]
[94 108]
[95 107]
[121 131]
[122 130]
[123 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
