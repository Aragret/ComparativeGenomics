%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUCUUCUUCAUAGUAAUACCCAUCAUAAUCGGAGGCUUUGGCAACUGACUAGUUCCCCUAAxxxxxxxxxxCCACAGGCUUCCACGGACUUCACGUCAUUAUUGGCUCAACUUUCCUCACUAUCUGCUUCAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[133.30125427 479.12634277]
[133.30125427 464.12634277]
[133.30125427 449.12634277]
[133.30125427 434.12634277]
[133.30125427 419.12634277]
[133.30125427 404.12634277]
[133.30125427 389.12634277]
[133.30125427 374.12634277]
[133.30125427 359.12634277]
[133.30125427 344.12634277]
[130.39378357 329.41079712]
[126.22795105 343.82073975]
[115.50984955 354.31463623]
[101.01509857 358.17498779]
[86.49735260 354.40206909]
[75.71619415 343.97296143]
[71.46359253 329.58840942]
[74.84081268 314.97354126]
[84.97327423 303.91308594]
[99.23702240 299.27136230]
[113.93822479 302.25039673]
[125.26921844 312.07791138]
[122.51297760 297.33331299]
[119.75673676 282.58871460]
[106.57472992 278.89401245]
[96.22968292 269.82672119]
[90.78677368 257.12088013]
[91.36533356 243.24407959]
[97.90914917 230.91830444]
[109.18628693 222.58602905]
[106.73336029 207.78794861]
[104.28043365 192.98986816]
[100.93675995 189.50146484]
[99.78860474 183.85614014]
[102.04362488 177.53494263]
[100.20030212 162.64863586]
[98.35697937 147.76232910]
[96.51365662 132.87602234]
[94.67032623 117.98971558]
[77.34007263 102.51496887]
[86.92072296 76.56758118]
[81.21605682 62.69469833]
[75.51139832 48.82181931]
[69.80673218 34.94893646]
[64.10206604 21.07605743]
[58.39740372 7.20317602]
[50.50092316 -5.55008078]
[40.62521744 -16.84036064]
[25.71570015 -22.13346100]
[23.16006660 -36.80717850]
[13.28435993 -48.09746170]
[-4.25882149 -53.59904480]
[-7.05105066 -70.89782715]
[-17.15648460 -81.98296356]
[-27.26192093 -93.06809998]
[-37.36735535 -104.15322876]
[-53.15031433 -108.60634613]
[-56.92247009 -124.56575775]
[-44.80335617 -135.61380005]
[-29.26007271 -130.38517761]
[-26.28222084 -114.25866699]
[-16.17678642 -103.17353058]
[-6.07135201 -92.08840179]
[4.03408289 -81.00326538]
[16.13690948 -80.11794281]
[24.64639473 -70.91142273]
[24.57464027 -57.97316742]
[34.45034790 -46.68288422]
[48.65348434 -42.19734192]
[51.91549683 -26.71606636]
[61.79120255 -15.42578697]
[59.47935486 -30.24656105]
[62.28283691 -44.98225021]
[69.87552643 -57.91867447]
[81.37416840 -67.55097198]
[95.44116211 -72.75862885]
[110.44011688 -72.93585205]
[124.62622833 -68.06202698]
[136.34925842 -58.70410919]
[144.24548340 -45.95069504]
[147.39636230 -31.28536415]
[145.43534851 -16.41410255]
[138.59057617 -3.06685662]
[127.65825653 7.20371294]
[113.91015625 13.20285130]
[98.94554901 14.23268890]
[84.50524139 10.17342854]
[72.27028656 1.49851274]
[77.97494507 15.37139320]
[83.67961121 29.24427414]
[89.38427734 43.11715317]
[95.08893585 56.99003601]
[100.79360199 70.86291504]
[115.17808533 75.11576080]
[127.50936890 66.57530212]
[139.84065247 58.03484344]
[141.10325623 42.44831467]
[152.12600708 31.35630417]
[167.70433044 29.99611855]
[180.48258972 39.00999451]
[184.42729187 54.14186096]
[177.67587280 68.24690247]
[163.41615295 74.66516113]
[148.38110352 70.36612701]
[136.04981995 78.90658569]
[123.71854401 87.44704437]
[121.94362640 106.18666077]
[109.55664062 116.14639282]
[111.39996338 131.03269958]
[113.24328613 145.91900635]
[115.08660889 160.80531311]
[116.92993164 175.69161987]
[119.07851410 190.53694153]
[121.53144073 205.33502197]
[123.98436737 220.13310242]
[139.49789429 225.76834106]
[150.00648499 238.37432861]
[152.72607422 254.46406555]
[147.01037598 269.64819336]
[134.50132751 279.83245850]
[137.25756836 294.57705688]
[140.01380920 309.32165527]
[144.26666260 323.70614624]
[146.60108948 308.88891602]
[153.12521362 295.38201904]
[163.28025818 284.34231567]
[176.19648743 276.71533203]
[190.76763916 273.15423584]
[205.74575806 273.96408081]
[219.84802246 279.07546997]
[231.86659241 288.05065918]
[240.77212524 300.12094116]
[245.80189514 314.25250244]
[246.52510071 329.23507690]
[242.87980652 343.78540039]
[235.17823792 356.65728760]
[224.08000183 366.74832153]
[210.53561401 373.19424438]
[195.70512390 375.44293213]
[180.85873413 373.30184937]
[167.26795959 366.95434570]
[156.09681702 356.94406128]
[148.30125427 344.12634277]
[148.30125427 359.12634277]
[148.30125427 374.12634277]
[148.30125427 389.12634277]
[148.30125427 404.12634277]
[148.30125427 419.12634277]
[148.30125427 434.12634277]
[148.30125427 449.12634277]
[148.30125427 464.12634277]
[148.30125427 479.12634277]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 123]
[22 122]
[23 121]
[24 120]
[30 115]
[31 114]
[32 113]
[35 112]
[36 111]
[37 110]
[38 109]
[39 108]
[41 93]
[42 92]
[43 91]
[44 90]
[45 89]
[46 88]
[47 71]
[48 70]
[50 68]
[51 67]
[53 64]
[54 63]
[55 62]
[56 61]
[94 106]
[95 105]
[96 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
