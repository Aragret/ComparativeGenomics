%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGCUAAGCCCUUACUAGACCAAUGGGACUUAAACCCACAAACACUUAGUUAACAGCUAAGxxxxxxxxxxUAAGCCCUUACUAGACCAAUGGGACUUAAACCCACAAACACUUAGUUAACAGCUAAGCACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[130.70445251 381.38131714]
[130.70445251 366.38131714]
[130.70445251 351.38131714]
[130.70445251 336.38131714]
[130.70445251 321.38131714]
[130.70445251 306.38131714]
[130.70445251 291.38131714]
[130.70445251 276.38131714]
[130.70445251 261.38131714]
[130.70445251 246.38130188]
[128.68211365 231.51826477]
[124.67437744 217.06356812]
[120.66663361 202.60888672]
[116.65889740 188.15419006]
[112.65115356 173.69950867]
[108.64340973 159.24481201]
[104.63567352 144.79013062]
[90.99156189 144.11907959]
[78.17652893 139.38757324]
[67.37000275 131.03108215]
[54.93056107 139.41322327]
[48.22496414 154.37875366]
[31.88621330 155.78491211]
[22.72221375 142.18516541]
[30.16010094 127.56977081]
[46.54841614 126.97378540]
[58.98785782 118.59164429]
[55.37812805 106.04431915]
[55.51979446 92.98883820]
[59.40093994 80.52279663]
[66.69527435 69.69421387]
[76.78956604 61.41345978]
[88.83517456 56.37670517]
[87.58830261 41.42861938]
[86.34142303 26.48053169]
[85.09455109 11.53244400]
[75.74520874 2.58572936]
[75.04738617 -9.93353653]
[82.83018494 -19.24671555]
[81.89456177 -34.21750641]
[80.95893097 -49.18829727]
[80.02330017 -64.15908813]
[69.48062134 -79.22002411]
[77.81964874 -94.62977600]
[76.57277679 -109.57786560]
[75.32590485 -124.52594757]
[74.07902527 -139.47402954]
[61.00389862 -142.86940002]
[49.64025497 -150.13150024]
[41.09578705 -160.53565979]
[36.19817734 -173.05177307]
[35.41493225 -186.44625854]
[38.80881500 -199.40365601]
[46.03303528 -210.65583801]
[56.36666107 -219.10606384]
[68.78651428 -223.93594360]
[68.16253662 -238.92295837]
[67.53855896 -253.90997314]
[66.91458130 -268.89697266]
[63.41196823 -277.40484619]
[66.43680573 -284.20159912]
[66.12474823 -299.19836426]
[55.00094223 -310.10241699]
[54.89810562 -325.31570435]
[65.36202240 -335.85336304]
[65.04996490 -350.85012817]
[64.73790741 -365.84686279]
[50.46406937 -371.00650024]
[39.02055359 -380.97698975]
[31.95501137 -394.40988159]
[30.22299194 -409.48849487]
[34.05874252 -424.17358398]
[42.94350433 -436.47906494]
[55.67568588 -444.74078369]
[70.53337097 -447.84136963]
[85.50717163 -445.36154175]
[98.57201385 -437.63659668]
[107.96097565 -425.71133423]
[112.40427399 -411.19854736]
[111.30100250 -396.06094360]
[104.80036163 -382.34576416]
[93.78151703 -371.90786743]
[79.73466492 -366.15893555]
[80.04672241 -351.16217041]
[80.35877228 -336.16540527]
[91.25198364 -326.07217407]
[91.78208923 -310.86776733]
[81.12149811 -299.51040649]
[81.43355560 -284.51367188]
[81.90160370 -269.52096558]
[82.52557373 -254.53395081]
[83.14955139 -239.54693604]
[83.77352905 -224.55992126]
[99.49221802 -219.23687744]
[112.00627899 -208.28123474]
[119.39334106 -193.33877563]
[120.50442505 -176.67045593]
[115.14255524 -160.81039429]
[104.09696960 -148.18055725]
[89.02711487 -140.72091675]
[90.27398682 -125.77282715]
[91.52086639 -110.82473755]
[92.76773834 -95.87664795]
[101.81970215 -87.79151917]
[102.94609070 -75.30352020]
[94.99409485 -65.09471893]
[95.92972565 -50.12392807]
[96.86534882 -35.15313721]
[97.80097961 -20.18234444]
[108.28803253 -6.14590454]
[100.04264069 10.28556919]
[101.28951263 25.23365593]
[102.53638458 40.18174362]
[103.78326416 55.12982941]
[119.92432404 59.61848831]
[133.30731201 69.69705200]
[142.07965088 83.97038269]
[145.02700806 100.46265411]
[141.74139404 116.89087677]
[132.67761230 130.98094177]
[119.09036255 140.78239441]
[123.09809875 155.23707581]
[127.10584259 169.69177246]
[131.11358643 184.14645386]
[135.12132263 198.60115051]
[139.12905884 213.05583191]
[143.13681030 227.51051331]
[148.03596497 213.33312988]
[158.19503784 202.29713440]
[171.91926575 196.24359131]
[186.91914368 196.18234253]
[200.69235229 202.12362671]
[210.94120789 213.07629395]
[215.95596313 227.21321106]
[214.90007019 242.17599487]
[207.94964600 255.46853638]
[196.26420593 264.87335205]
[181.79312134 268.82147217]
[166.95050049 266.65429688]
[154.21243286 258.73333740]
[145.70445251 246.38130188]
[145.70445251 261.38131714]
[145.70445251 276.38131714]
[145.70445251 291.38131714]
[145.70445251 306.38131714]
[145.70445251 321.38131714]
[145.70445251 336.38131714]
[145.70445251 351.38131714]
[145.70445251 366.38131714]
[145.70445251 381.38131714]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 127]
[12 126]
[13 125]
[14 124]
[15 123]
[16 122]
[17 121]
[20 27]
[21 26]
[33 114]
[34 113]
[35 112]
[36 111]
[39 109]
[40 108]
[41 107]
[42 106]
[44 103]
[45 102]
[46 101]
[47 100]
[56 93]
[57 92]
[58 91]
[59 90]
[61 89]
[62 88]
[65 85]
[66 84]
[67 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
