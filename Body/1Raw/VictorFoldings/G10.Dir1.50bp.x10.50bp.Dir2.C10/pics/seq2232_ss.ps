%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCCUCUAAAUCCCCUUGUAAAUUUAACUGUUAGUCCAAAGAGGAACAGCUCUUUGGACACUxxxxxxxxxxCCAUAAAACUCUUCACCAAAGAGCCCCUAAAACCCGCCACAUCUACCAUCACCCUCUACAUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-2.51379323 291.09478760]
[-10.05763245 304.05975342]
[-17.60147285 317.02474976]
[-25.14531136 329.98971558]
[-31.75122452 343.45678711]
[-37.38597870 357.35818481]
[-43.02073669 371.25961304]
[-40.22203064 387.41818237]
[-52.98799133 397.71197510]
[-68.18608856 391.55163574]
[-70.18182373 375.27438354]
[-56.92215729 365.62487793]
[-51.28740311 351.72344971]
[-45.65264511 337.82202148]
[-59.60022736 343.34152222]
[-73.88551331 338.76654053]
[-82.03166199 326.17126465]
[-80.34526825 311.26638794]
[-69.59094238 300.80960083]
[-54.64459991 299.54193115]
[-42.28280640 308.03817749]
[-38.11028290 322.44586182]
[-30.56644440 309.48089600]
[-23.02260399 296.51593018]
[-15.47876453 283.55096436]
[-31.36489868 272.53857422]
[-46.20729065 260.15530396]
[-59.88800812 246.49955750]
[-72.29835510 231.67980957]
[-83.33972931 215.81382751]
[-92.92440033 199.02764893]
[-100.97621155 181.45465088]
[-107.43119049 163.23446655]
[-112.23805237 144.51187134]
[-115.35860443 125.43560791]
[-116.76804352 106.15724945]
[-116.45518494 86.82996368]
[-114.42250824 67.60733032]
[-110.68616486 48.64205933]
[-105.27583313 30.08484840]
[-98.23451233 12.08314037]
[-89.61814880 -5.22003460]
[-79.49519348 -21.68719673]
[-67.94607544 -37.18750763]
[-79.22785187 -47.07293320]
[-90.50962067 -56.95835876]
[-101.79139709 -66.84378052]
[-113.07316589 -76.72920227]
[-124.35494232 -86.61463165]
[-135.63671875 -96.50005341]
[-146.91848755 -106.38547516]
[-158.20025635 -116.27090454]
[-169.48202515 -126.15632629]
[-185.23356628 -124.86605835]
[-197.22970581 -135.15527344]
[-198.35336304 -150.91957092]
[-187.93789673 -162.80625916]
[-172.16259766 -163.76319885]
[-160.38668823 -153.22262573]
[-159.59660339 -137.43809509]
[-148.31483459 -127.55267334]
[-137.03306580 -117.66725159]
[-125.75128937 -107.78182983]
[-114.46951294 -97.89640045]
[-103.18774414 -88.01097870]
[-91.90596771 -78.12555695]
[-80.62419891 -68.24012756]
[-69.34242249 -58.35470581]
[-58.06065369 -48.46928024]
[-46.75962448 -59.64933395]
[-34.66995239 -69.97147369]
[-21.85659599 -79.38023376]
[-8.38841629 -87.82505035]
[5.66221380 -95.26054382]
[20.21978951 -101.64675903]
[35.20608521 -106.94937897]
[50.54056168 -111.13990784]
[66.14082336 -114.19583130]
[81.92303467 -116.10071564]
[97.80239105 -116.84433746]
[113.69355011 -116.42269897]
[129.51112366 -114.83805847]
[145.17012024 -112.09893799]
[160.58638000 -108.22004700]
[175.67706299 -103.22224426]
[190.36106873 -97.13237762]
[204.55950928 -89.98316956]
[218.19607544 -81.81304932]
[231.19749451 -72.66590881]
[243.49388123 -62.59091187]
[255.01916504 -51.64219284]
[266.09826660 -61.75423431]
[277.17739868 -71.86627197]
[288.25650024 -81.97831726]
[299.33560181 -92.09035492]
[301.50039673 -107.98668671]
[315.35165405 -116.08129120]
[330.26382446 -110.16469574]
[334.79760742 -94.77559662]
[325.47506714 -81.71920013]
[309.44763184 -81.01125336]
[298.36853027 -70.89920807]
[287.28942871 -60.78716660]
[276.21032715 -50.67512512]
[265.13119507 -40.56308746]
[272.51428223 -31.39679527]
[279.38916016 -21.84343147]
[285.73559570 -11.93114185]
[291.53491211 -1.68912315]
[296.76995850 8.85245323]
[301.42538452 19.66253281]
[305.48745728 30.70927238]
[308.94418335 41.96012878]
[311.78540039 53.38196182]
[314.00274658 64.94111633]
[315.58966064 76.60355377]
[316.54150391 88.33491516]
[316.85543823 100.10063934]
[316.53057861 111.86605835]
[315.56787109 123.59652710]
[313.97009277 135.25749207]
[311.74203491 146.81459045]
[308.89022827 158.23377991]
[305.42306519 169.48141479]
[301.35073853 180.52438354]
[296.68530273 191.33013916]
[291.44042969 201.86685181]
[285.63165283 212.10348511]
[279.27600098 222.00987244]
[272.39227295 231.55685425]
[265.00067139 240.71629333]
[257.12301636 249.46119690]
[248.78253174 257.76583862]
[240.00373840 265.60571289]
[230.81253052 272.95773315]
[221.23597717 279.80026245]
[211.30227661 286.11312866]
[201.04069519 291.87774658]
[190.48147583 297.07714844]
[179.65571594 301.69598389]
[168.59529114 305.72064209]
[157.33280945 309.13931274]
[145.90142822 311.94186401]
[134.33483887 314.12008667]
[122.66709900 315.66757202]
[110.93259430 316.57971191]
[99.16587830 316.85388184]
[87.40161896 316.48919678]
[75.67446899 315.48681641]
[64.01898193 313.84963989]
[52.46949005 311.58248901]
[41.06000900 308.69204712]
[29.82415771 305.18685913]
[18.79503059 301.07723999]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 25]
[2 24]
[3 23]
[4 22]
[5 14]
[6 13]
[7 12]
[44 69]
[45 68]
[46 67]
[47 66]
[48 65]
[49 64]
[50 63]
[51 62]
[52 61]
[53 60]
[91 105]
[92 104]
[93 103]
[94 102]
[95 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
