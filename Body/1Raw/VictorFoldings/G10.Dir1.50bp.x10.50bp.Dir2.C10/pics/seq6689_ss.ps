%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCCUAAUCACAGCAGUCCUACUUCUCCUAUCUCUCCCAGUCCUAGCUGCUGGCAUCACUAxxxxxxxxxxCAUCUCCGCAUGAUGAAACUUCGGCUCACUCCUUGGCGCCUGCCUGAUCCUCCAAAUCACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[86.92536163 265.63732910]
[86.92536163 250.63731384]
[86.92536163 235.63731384]
[86.92536163 220.63731384]
[86.92536163 205.63731384]
[86.92536163 190.63731384]
[86.92536163 175.63731384]
[86.92536163 160.63731384]
[86.92536163 145.63731384]
[86.92536163 130.63731384]
[79.73397827 143.80105591]
[75.52803040 158.19931030]
[63.84795380 167.61079407]
[48.88459778 168.65863037]
[36.00684357 160.96684265]
[29.83525848 147.29528809]
[32.58422089 132.54933167]
[43.26739883 122.01985931]
[58.05251694 119.48499298]
[71.95127869 113.84366608]
[57.04937363 112.13098145]
[42.14746857 110.41828918]
[27.24556732 108.70559692]
[12.34366512 106.99291229]
[-2.55823684 105.28022003]
[-17.46013832 103.56752777]
[-28.69855309 116.16713715]
[-45.06518173 119.57522583]
[-60.09757614 112.64752960]
[-67.97953796 98.28160095]
[-82.91384888 96.87929535]
[-97.84815979 95.47698975]
[-104.60383606 109.06835938]
[-115.81571960 119.29861450]
[-129.96749878 124.78418732]
[-145.14526367 124.78321838]
[-159.29634094 119.29582214]
[-170.50691223 109.06413269]
[-177.26083374 95.47189331]
[-178.64471436 80.35735321]
[-174.47138977 65.76462555]
[-165.30525208 53.66725922]
[-152.38595581 45.70131683]
[-137.46072388 42.94413376]
[-122.54808044 45.76859283]
[-109.66484070 53.79270935]
[-100.55334473 65.93128967]
[-96.44585419 80.54268646]
[-81.51154327 81.94499207]
[-66.57723999 83.34729004]
[-58.69535065 72.52732086]
[-46.39094543 66.98538208]
[-32.84875870 68.27368164]
[-21.63259125 76.16105652]
[-15.74744987 88.66562653]
[-0.84554720 90.37831879]
[14.05635548 92.09100342]
[28.95825768 93.80369568]
[43.86016083 95.51638794]
[58.76206207 97.22907257]
[73.66396332 98.94176483]
[78.18902588 81.55956268]
[93.66944122 69.89231873]
[95.84628296 55.05111694]
[98.02311707 40.20991135]
[100.19995117 25.36870575]
[102.37679291 10.52749920]
[88.46440887 4.70543051]
[76.43750000 -4.39425278]
[67.05207825 -16.19953537]
[60.89812851 -29.96833038]
[58.36248398 -44.83511734]
[59.60454178 -59.86535645]
[64.54622650 -74.11423492]
[72.87689972 -86.68605804]
[84.07288361 -96.79055023]
[97.43038940 -103.79253387]
[112.10975647 -107.25186157]
[127.18823242 -106.95106506]
[141.71795654 -102.90906525]
[154.78559875 -95.37994385]
[165.56970215 -84.83699036]
[173.39236450 -71.94293213]
[177.76185608 -57.50830841]
[178.40351868 -42.44049072]
[175.27697754 -27.68665695]
[168.57881165 -14.17424202]
[158.73005676 -2.75264907]
[146.34980774 5.86015034]
[132.21630859 11.12274933]
[117.21799469 12.70433617]
[115.04116058 27.54554176]
[112.86432648 42.38674927]
[110.68748474 57.22795105]
[108.51065063 72.06916046]
[113.01941681 78.06257629]
[116.76860809 63.53868103]
[130.46138000 57.41427994]
[143.78698730 64.30107880]
[146.71121216 79.01328278]
[137.03208923 90.47253418]
[122.03694153 90.04940796]
[126.54570770 96.04282379]
[141.40875244 98.06515503]
[156.12608337 92.25907135]
[167.69400024 101.64164734]
[182.55705261 103.66398621]
[197.42008972 105.68631744]
[189.58891296 92.89286041]
[192.91032410 78.26520538]
[205.49859619 70.10826874]
[220.20666504 73.05318451]
[228.68399048 85.42795563]
[226.11750793 100.20676422]
[213.96287537 108.99925232]
[228.45848083 112.85640717]
[242.95407104 116.71356964]
[258.63748169 111.92162323]
[270.44293213 123.30421448]
[266.22598267 139.15190125]
[250.32467651 143.16195679]
[239.09690857 131.20916748]
[224.60131836 127.35200500]
[210.10571289 123.49485016]
[195.39775085 120.54936218]
[180.53471375 118.52703094]
[165.67166138 116.50469971]
[152.01744080 122.45543671]
[139.38641357 112.92820740]
[124.52337646 110.90586853]
[118.87387085 115.83872986]
[130.94786072 124.73921967]
[145.65257263 127.70086670]
[154.49412537 139.81808472]
[152.82768250 154.72523499]
[141.52870178 164.59098816]
[126.53298950 164.23248291]
[115.71837616 153.83805847]
[114.76625061 138.86819458]
[107.57486725 125.70445251]
[101.92536163 130.63731384]
[101.92536163 145.63731384]
[101.92536163 160.63731384]
[101.92536163 175.63731384]
[101.92536163 190.63731384]
[101.92536163 205.63731384]
[101.92536163 220.63731384]
[101.92536163 235.63731384]
[101.92536163 250.63731384]
[101.92536163 265.63732910]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[20 61]
[21 60]
[22 59]
[23 58]
[24 57]
[25 56]
[26 55]
[30 50]
[31 49]
[32 48]
[63 95]
[64 94]
[65 93]
[66 92]
[67 91]
[103 130]
[104 129]
[106 127]
[107 126]
[108 125]
[115 124]
[116 123]
[117 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
