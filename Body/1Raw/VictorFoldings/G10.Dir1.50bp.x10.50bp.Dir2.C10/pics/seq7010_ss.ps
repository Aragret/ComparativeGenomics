%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCACUAGACAUCGUACUACACGACACGUACUACGUUGUAGCCCACUUCCACUAUGUCCUAxxxxxxxxxxCCAUCCCAUACAUUGGGACAGACCUAGUUCAAUGAAUCUGAGGAGGCUACUCAGUAGACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[97.06884766 264.19482422]
[96.75679016 249.19807434]
[96.44473267 234.20130920]
[96.13267517 219.20455933]
[95.82062531 204.20780945]
[95.50856781 189.21105957]
[95.19651031 174.21429443]
[94.88445282 159.21754456]
[94.57239532 144.22079468]
[80.20421600 139.91320801]
[71.69312286 152.26478577]
[63.18203354 164.61634827]
[62.41560745 180.99757385]
[47.72362518 188.28303528]
[34.21994400 178.97805786]
[35.79598618 162.65481567]
[50.83045959 156.10525513]
[59.34154892 143.75369263]
[67.85263824 131.40211487]
[67.95713043 127.34585571]
[68.45158386 123.45362854]
[54.92739868 129.94178772]
[41.40320587 136.42996216]
[27.87901688 142.91812134]
[21.22277451 157.51518250]
[5.62586641 161.27230835]
[-6.94709492 151.30735779]
[-6.85120964 135.26458740]
[5.83996820 125.45063782]
[21.39085197 129.39393616]
[34.91504288 122.90576935]
[48.43923187 116.41760254]
[61.96342087 109.92943573]
[61.30185318 106.91580200]
[60.87866592 103.85957336]
[45.94435883 102.45726776]
[31.01005173 101.05496216]
[16.07574463 99.65265656]
[-0.25927457 104.19176483]
[-9.14297581 89.75167847]
[2.27353621 77.21774292]
[17.47804832 84.71835327]
[32.41235352 86.12065887]
[47.34666443 87.52295685]
[62.28097153 88.92526245]
[82.26245880 64.91788483]
[113.44187164 63.05827713]
[121.16596222 50.19987488]
[128.89004517 37.34146881]
[136.61413574 24.48306847]
[144.33821106 11.62466621]
[152.06230164 -1.23373652]
[138.40710449 4.97397423]
[123.40886688 5.20411921]
[109.56963348 -0.58169454]
[99.19810486 -11.41826439]
[94.02446747 -25.49780655]
[94.91181183 -40.47153854]
[101.71210480 -53.84150314]
[113.29090881 -63.37729263]
[127.71662140 -67.48812103]
[142.58270264 -65.48821259]
[155.40916443 -57.71120071]
[164.05625916 -45.45445633]
[167.08145142 -30.76268387]
[163.98065186 -16.08810043]
[174.85948181 -26.41530609]
[185.73831177 -36.74251175]
[196.61712646 -47.06971359]
[182.11894226 -43.22232819]
[167.82711792 -38.66778564]
[152.85621643 -39.60172653]
[139.24125671 -45.89719391]
[128.83294678 -56.69844055]
[123.04608154 -70.53723145]
[122.66728973 -85.53244781]
[127.74806213 -99.64576721]
[137.59776306 -110.95874786]
[150.87750244 -117.93359375]
[165.78215027 -119.62220764]
[180.28570557 -115.79505920]
[192.41665649 -106.97237396]
[200.52511597 -94.35575104]
[198.35827637 -79.51307678]
[207.37580872 -91.49990845]
[216.39334106 -103.48674774]
[225.41087341 -115.47357941]
[234.42840576 -127.46041107]
[233.61553955 -143.48284912]
[245.73052979 -153.99983215]
[261.47976685 -150.94360352]
[268.78182983 -136.65864563]
[262.03515625 -122.10317230]
[246.41523743 -118.44287872]
[237.39770508 -106.45604706]
[228.38017273 -94.46921539]
[219.36264038 -82.48238373]
[210.34510803 -70.49555206]
[218.06919861 -57.63714600]
[232.88696289 -59.96825027]
[247.70471191 -62.29935455]
[262.52246094 -64.63045502]
[252.38969421 -75.69060516]
[254.50831604 -90.54023743]
[267.32980347 -98.32546997]
[281.48266602 -93.35592651]
[286.62231445 -79.26394653]
[278.99264526 -66.34999847]
[293.97235107 -67.12983704]
[308.95208740 -67.90968323]
[324.45544434 -74.77131653]
[335.34066772 -61.77332306]
[325.86398315 -47.71527863]
[309.73193359 -52.92996979]
[294.75219727 -52.15012741]
[279.77249146 -51.37028122]
[264.85357666 -49.81269836]
[250.03581238 -47.48159790]
[235.21806335 -45.15049362]
[220.40029907 -42.81938934]
[206.94433594 -36.19089127]
[196.06550598 -25.86368561]
[185.18669128 -15.53647995]
[174.30786133 -5.20927525]
[164.92070007 6.49034834]
[157.19660950 19.34875107]
[149.47253418 32.20715332]
[141.74844360 45.06555557]
[134.02436829 57.92395782]
[126.30027771 70.78236389]
[131.97901917 76.26802826]
[136.51046753 82.85760498]
[139.68028259 90.31049347]
[141.32469177 98.34458160]
[141.33850098 106.64691925]
[139.68086243 114.88585663]
[136.37847900 122.72434998]
[131.52610779 129.83367920]
[125.28420258 135.90724182]
[117.87387848 140.67364502]
[109.56915283 143.90873718]
[109.88121033 158.90548706]
[110.19326019 173.90223694]
[110.50531769 188.89900208]
[110.81737518 203.89575195]
[111.12943268 218.89250183]
[111.44149017 233.88925171]
[111.75354767 248.88601685]
[112.06559753 263.88275146]
[114.65660095 283.09048462]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 19]
[11 18]
[12 17]
[21 33]
[22 32]
[23 31]
[24 30]
[35 45]
[36 44]
[37 43]
[38 42]
[47 130]
[48 129]
[49 128]
[50 127]
[51 126]
[52 125]
[66 124]
[67 123]
[68 122]
[69 121]
[84 98]
[85 97]
[86 96]
[87 95]
[88 94]
[99 120]
[100 119]
[101 118]
[102 117]
[108 116]
[109 115]
[110 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
