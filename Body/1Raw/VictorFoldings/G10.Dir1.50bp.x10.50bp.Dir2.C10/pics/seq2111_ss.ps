%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAUGAAUUAACUAGAAAUAACUUUGCAAGGAGAGCCAAAGCUAAGACCCCCGAAACCAGAxxxxxxxxxxCUCAAUAGCCAUCGCUGUAGUAUAUCCAAAGACAACCAUCAUUCCCCCUAAAUAAAUUAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[152.41395569 341.77416992]
[150.85638428 326.85528564]
[149.29879761 311.93637085]
[147.74122620 297.01745605]
[146.18363953 282.09854126]
[142.78065491 267.48965454]
[137.58525085 253.41812134]
[132.38983154 239.34660339]
[127.19441223 225.27508545]
[121.99900055 211.20356750]
[116.80358124 197.13204956]
[111.60816956 183.06053162]
[106.41275024 168.98901367]
[101.21733856 154.91749573]
[96.02191925 140.84596252]
[81.60970306 136.68807983]
[69.71732330 145.82981873]
[57.82494354 154.97155762]
[57.33719635 170.60153198]
[46.87831879 182.22674561]
[31.38666916 184.35815430]
[18.17693710 175.98933411]
[13.48634815 161.07182312]
[19.52965927 146.64918518]
[33.45340347 139.53135681]
[48.68321228 143.07917786]
[60.57559204 133.93743896]
[72.46797180 124.79570007]
[65.01790619 103.78701019]
[71.04170227 83.51626587]
[86.94433594 71.38159180]
[84.15200806 56.64378738]
[81.35968781 41.90598297]
[78.56735992 27.16817665]
[75.77503967 12.43037033]
[57.07134247 7.82912827]
[42.59243774 -4.77471972]
[35.50581741 -22.54491806]
[37.32561111 -41.52389145]
[47.58950424 -57.51411057]
[39.33721542 -70.04006958]
[31.08492661 -82.56603241]
[19.58312225 -92.19455719]
[5.80074072 -98.11452484]
[-7.98164034 -104.03448486]
[-24.19443893 -101.56928253]
[-34.22304153 -114.54460907]
[-27.75088692 -129.61256409]
[-11.43596840 -131.27252197]
[-2.06167746 -117.81686401]
[11.72070408 -111.89690399]
[25.50308609 -105.97694397]
[16.92343521 -118.28099060]
[11.03468037 -132.07673645]
[8.08457279 -146.78376770]
[8.19722557 -161.78334045]
[11.36790085 -176.44441223]
[17.46320343 -190.15014648]
[26.22669220 -202.32394409]
[37.28967667 -212.45361328]
[50.18672180 -220.11300659]
[64.37522888 -224.97987366]
[79.25826263 -226.84944153]
[94.20967102 -225.64308167]
[108.60043335 -221.41152954]
[121.82509613 -214.33282471]
[133.32728577 -204.70475769]
[142.62309265 -192.93241882]
[149.32142639 -179.51107788]
[153.14047241 -165.00540161]
[153.91955566 -150.02565002]
[151.62591553 -135.20204163]
[146.35601807 -121.15824127]
[138.33160400 -108.48509216]
[127.89026642 -97.71576691]
[115.47128296 -89.30334473]
[101.59713745 -83.60175323]
[86.85153961 -80.85086823]
[71.85486603 -81.16642761]
[57.23803329 -84.53514099]
[43.61088943 -90.81832123]
[51.86317825 -78.29235840]
[60.11546707 -65.76639557]
[77.31723022 -68.84132385]
[94.20385742 -64.34714508]
[103.46881104 -76.14378357]
[112.73375702 -87.94042206]
[121.99870300 -99.73706818]
[131.26365662 -111.53370667]
[133.05036926 -127.83522797]
[148.16818237 -134.19007874]
[161.06517029 -124.06092072]
[158.47402954 -107.86777496]
[143.06030273 -102.26875305]
[133.79534912 -90.47211456]
[124.53039551 -78.67547607]
[115.26544952 -66.87883759]
[106.00049591 -55.08219528]
[110.98741913 -48.10053635]
[114.39170837 -40.20721817]
[116.05307007 -31.75648689]
[115.88956451 -23.12920380]
[113.90168762 -14.71567345]
[110.17261505 -6.89799881]
[104.86476135 -0.03271728]
[98.21270752 5.56545496]
[90.51284027 9.63804626]
[93.30516815 24.37585258]
[96.09748840 39.11365891]
[98.88981628 53.85146332]
[101.68213654 68.58927155]
[112.67053223 70.44635773]
[122.55204773 76.10771942]
[130.02572632 85.02182007]
[134.04223633 96.19883728]
[133.94877625 108.31949615]
[129.58866882 119.89054871]
[121.34107208 129.42874146]
[110.09343719 135.65055847]
[115.28885651 149.72207642]
[120.48426819 163.79359436]
[125.67968750 177.86511230]
[130.87510681 191.93663025]
[136.07051086 206.00814819]
[141.26593018 220.07966614]
[146.46134949 234.15118408]
[151.65676880 248.22270203]
[156.85217285 262.29421997]
[160.82551575 247.83004761]
[170.59013367 236.44354248]
[184.27941895 230.31137085]
[199.27653503 230.60575867]
[212.71463013 237.27041626]
[222.02487183 249.03134155]
[225.42753601 263.64028931]
[222.27215576 278.30465698]
[213.16192627 290.22119141]
[199.83833313 297.11190796]
[184.84834290 297.65960693]
[171.05741882 291.75958252]
[161.10255432 280.54095459]
[162.66012573 295.45986938]
[164.21771240 310.37878418]
[165.77529907 325.29769897]
[167.33287048 340.21661377]
[179.76452637 349.97515869]
[181.57173157 365.67578125]
[171.68228149 378.00357056]
[155.96342468 379.64468384]
[143.74089050 369.62542725]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 145]
[2 144]
[3 143]
[4 142]
[5 141]
[6 128]
[7 127]
[8 126]
[9 125]
[10 124]
[11 123]
[12 122]
[13 121]
[14 120]
[15 119]
[16 28]
[17 27]
[18 26]
[31 111]
[32 110]
[33 109]
[34 108]
[35 107]
[40 83]
[41 82]
[42 81]
[43 52]
[44 51]
[45 50]
[85 98]
[86 97]
[87 96]
[88 95]
[89 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
