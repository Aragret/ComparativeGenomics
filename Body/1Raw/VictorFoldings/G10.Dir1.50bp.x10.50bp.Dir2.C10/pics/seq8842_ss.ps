%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCUCAGCCCUCCUAAUGACCUCCGGCCUAGCCAUGUGAUUUCACUUCCACUCCAUAACGCUCCxxxxxxxxxxAUUAGGUCUCCACCCCUGACUCCCCUCAGCCAUAGAAGGCCCCACCCCAGUCUCAGCCCUACUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 313.37481689]
[92.50000000 298.37481689]
[92.50000000 283.37481689]
[92.50000000 268.37481689]
[92.50000000 253.37483215]
[92.50000000 238.37483215]
[92.50000000 223.37483215]
[92.50000000 208.37483215]
[92.50000000 193.37483215]
[92.50000000 178.37483215]
[78.16015625 175.64314270]
[64.57108307 170.31114197]
[52.19991684 162.56210327]
[41.47193909 152.66241455]
[32.75593185 140.95240784]
[26.35151672 127.83459473]
[22.47885513 113.75994873]
[21.27107620 99.21228790]
[22.76969528 84.69169617]
[26.92319679 70.69735718]
[33.58880234 57.71032333]
[42.53736877 46.17705154]
[53.46128082 36.49400330]
[65.98501587 28.99405098]
[79.67805481 23.93501091]
[94.06968689 21.49079323]
[94.36981964 6.49379683]
[80.49571991 0.34684294]
[70.06015778 -10.61409187]
[64.63079834 -24.69726181]
[65.00592804 -39.74541473]
[71.09725952 -53.46622086]
[81.94810486 -63.78148270]
[95.88350677 -69.14188385]
[96.18363190 -84.13887787]
[96.48376465 -99.13587952]
[96.78389740 -114.13287354]
[97.08403015 -129.12986755]
[82.14544678 -130.56376648]
[67.35809326 -133.12336731]
[52.80666733 -136.79397583]
[38.57452011 -141.55459595]
[24.74317932 -147.37792969]
[11.39186382 -154.23065186]
[-1.40294755 -162.07350159]
[-13.56796741 -170.86154175]
[-25.03351402 -180.54444885]
[-35.73391342 -191.06674194]
[-45.60787201 -202.36817932]
[-54.59883499 -214.38400269]
[-62.65530396 -227.04537964]
[-69.73112488 -240.27981567]
[-75.78577423 -254.01147461]
[-80.78456879 -268.16171265]
[-84.69887543 -282.64950562]
[-87.50627136 -297.39181519]
[-89.19067383 -312.30422974]
[-89.74244690 -327.30133057]
[-89.15841675 -342.29721069]
[-87.44193268 -357.20596313]
[-84.60282898 -371.94219971]
[-80.65736389 -386.42153931]
[-75.62814331 -400.56097412]
[-69.54396820 -414.27960205]
[-62.43968964 -427.49877930]
[-54.35600281 -440.14279175]
[-45.33921051 -452.13925171]
[-35.44095993 -463.41940308]
[-24.71794891 -473.91867065]
[-13.23159885 -483.57687378]
[-1.04770195 -492.33874512]
[11.76395226 -500.15402222]
[25.12997818 -506.97802734]
[38.97381592 -512.77160645]
[53.21617126 -517.50158691]
[67.77545929 -521.14086914]
[82.56828308 -523.66864014]
[97.50991821 -525.07043457]
[112.51477814 -525.33813477]
[127.49691010 -524.47027588]
[142.37049866 -522.47186279]
[157.05033875 -519.35424805]
[171.45236206 -515.13531494]
[185.49406433 -509.83932495]
[199.09503174 -503.49649048]
[212.17732239 -496.14318848]
[224.66603088 -487.82156372]
[236.48960876 -478.57925415]
[247.58035278 -468.46920776]
[257.87469482 -457.54934692]
[267.31372070 -445.88217163]
[275.84332275 -433.53457642]
[283.41464233 -420.57723999]
[289.98434448 -407.08441162]
[295.51477051 -393.13336182]
[299.97424316 -378.80401611]
[303.33724976 -364.17843628]
[305.58447266 -349.34039307]
[306.70309448 -334.37490845]
[306.68667603 -319.36767578]
[305.53530884 -304.40466309]
[303.25561523 -289.57156372]
[299.86062622 -274.95336914]
[295.36981201 -260.63381958]
[289.80886841 -246.69490051]
[283.20968628 -233.21647644]
[275.61001587 -220.27574158]
[267.05343628 -207.94682312]
[257.58892822 -196.30035400]
[247.27069092 -185.40303040]
[236.15786743 -175.31727600]
[224.31410217 -166.10084534]
[211.80720520 -157.80656433]
[198.70886230 -150.48191833]
[185.09405518 -144.16886902]
[171.04080200 -138.90356445]
[156.62957764 -134.71618652]
[141.94294739 -131.63070679]
[127.06502533 -129.66481018]
[112.08103180 -128.82974243]
[111.78089905 -113.83274078]
[111.48076630 -98.83574677]
[111.18063354 -83.83874512]
[110.88050079 -68.84175110]
[124.59027863 -62.92809296]
[135.01971436 -52.18695450]
[140.55720520 -38.23342133]
[140.32997131 -23.18230820]
[134.34149170 -9.32764149]
[123.47574615 1.20699430]
[109.36682129 6.79392910]
[109.06668854 21.79092598]
[124.07801819 25.03925514]
[138.17308044 31.14014435]
[150.81550598 39.86142349]
[161.52420044 50.87122345]
[169.89164734 63.75056458]
[175.59944153 78.00934601]
[178.43037415 93.10495758]
[178.27670288 108.46295929]
[175.14430237 123.49890900]
[169.15234375 137.64062500]
[160.52886963 150.34997559]
[149.60203552 161.14329529]
[136.78764343 169.60986328]
[122.57331848 175.42750549]
[107.50000000 178.37483215]
[107.50000000 193.37483215]
[107.50000000 208.37483215]
[107.50000000 223.37483215]
[107.50000000 238.37483215]
[107.50000000 253.37483215]
[107.50000000 268.37481689]
[107.50000000 283.37481689]
[107.50000000 298.37481689]
[107.50000000 313.37481689]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 156]
[2 155]
[3 154]
[4 153]
[5 152]
[6 151]
[7 150]
[8 149]
[9 148]
[10 147]
[26 132]
[27 131]
[34 124]
[35 123]
[36 122]
[37 121]
[38 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
