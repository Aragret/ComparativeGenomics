%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUCAAGCCAACCCCAUGGCCUCCAUGACUUUUUCAAAAAGGUAUUAGAAAAACCAUUUCAxxxxxxxxxxAAUCGCCCACAUCACUCGAGACGUAAAUUAUGGCUGAAUCAUCCGCUACCUUCACGCCAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[157.80307007 381.23016357]
[157.80307007 366.23016357]
[157.80307007 351.23016357]
[157.80307007 336.23016357]
[157.80307007 321.23016357]
[157.80307007 306.23016357]
[157.80307007 291.23016357]
[157.80307007 276.23016357]
[157.80307007 261.23016357]
[157.80307007 246.23016357]
[154.40010071 231.62127686]
[147.77159119 218.16529846]
[141.14309692 204.70933533]
[134.51460266 191.25337219]
[128.69984436 186.61288452]
[127.89144897 177.44781494]
[121.54431915 163.85685730]
[115.19718933 150.26591492]
[108.85005951 136.67495728]
[99.23755646 137.71995544]
[89.67512512 136.28736877]
[80.79087067 132.47131348]
[73.16834259 126.52241516]
[67.30820465 118.83143616]
[53.08142853 123.58525085]
[38.85464859 128.33906555]
[24.62786865 133.09288025]
[10.40109062 137.84669495]
[-2.70535374 148.60112000]
[-16.66770744 138.98399353]
[-11.29159260 122.90501404]
[5.64727545 123.61991882]
[19.87405396 118.86610413]
[34.10083389 114.11228943]
[48.32761383 109.35847473]
[62.55439377 104.60466003]
[62.28773117 98.92242432]
[62.87841415 93.26468658]
[64.31301880 87.76007080]
[51.37496567 80.17015839]
[38.43690872 72.58025360]
[25.49885178 64.99034119]
[12.56079578 57.40043640]
[-0.37726000 49.81052780]
[-13.07578945 52.30075073]
[-23.71208572 45.66085815]
[-26.84309196 33.93464279]
[-39.62044907 26.07721710]
[-55.49673462 28.38440895]
[-67.10023499 17.30567741]
[-65.52974701 1.33967984]
[-51.99000168 -7.26583862]
[-36.86754227 -1.90946031]
[-31.76302338 13.29986000]
[-18.98566628 21.15728569]
[-1.47107518 20.66837311]
[7.21264839 36.87247086]
[20.15070343 44.46237946]
[33.08876038 52.05228806]
[46.02681732 59.64219666]
[58.96487045 67.23210144]
[71.90293121 74.82201385]
[82.77160645 66.43575287]
[95.92135620 62.49345398]
[109.61112213 63.51708984]
[116.23962402 50.06112289]
[122.86811829 36.60515976]
[129.49661255 23.14919281]
[117.28520203 14.37815094]
[106.68410492 3.71669388]
[97.98254395 -8.54432583]
[91.41788483 -22.07041740]
[87.16923523 -36.49258041]
[85.35248566 -51.41736984]
[86.01721191 -66.43762207]
[89.14527130 -81.14357758]
[94.65132904 -95.13404846]
[102.38518524 -108.02735138]
[112.13584137 -119.47176361]
[123.63729095 -129.15507507]
[136.57577515 -136.81309509]
[150.59832764 -142.23693848]
[165.32240295 -145.27861023]
[180.34629822 -145.85514832]
[195.26016235 -143.95082092]
[209.65713501 -139.61756897]
[223.14445496 -132.97363281]
[235.35418701 -124.20023346]
[245.95321655 -113.53673553]
[254.65242004 -101.27404022]
[261.21447754 -87.74668121]
[265.46035767 -73.32369995]
[267.27423096 -58.39856339]
[266.60659790 -43.37843704]
[263.47570801 -28.67308426]
[257.96694946 -14.68367958]
[250.23062134 -1.79186022]
[240.47775269 9.65067387]
[228.97444153 19.33176041]
[216.03446960 26.98729515]
[202.01087952 32.40842819]
[187.28622437 35.44726944]
[172.26222229 36.02091217]
[157.34872437 34.11370850]
[142.95257568 29.77769089]
[136.32408142 43.23365784]
[129.69558716 56.68962097]
[123.06708527 70.14558411]
[136.07167053 88.94506836]
[135.83387756 111.80296326]
[122.44100952 130.32783508]
[128.78814697 143.91877747]
[135.13526917 157.50973511]
[141.48240662 171.10069275]
[147.97056580 184.62487793]
[154.59906006 198.08084106]
[161.22756958 211.53680420]
[167.85606384 224.99276733]
[169.15782166 210.04936218]
[174.21359253 195.92707825]
[182.69158936 183.55276489]
[194.03536987 173.73855591]
[207.50044250 167.12858582]
[222.20309448 164.15664673]
[237.17834473 165.01780701]
[251.44338989 169.65554810]
[264.06198120 177.76548767]
[274.20596313 188.81535339]
[281.20956421 202.07995605]
[284.61315918 216.68870544]
[284.19332886 231.68283081]
[279.97766113 246.07824707]
[272.24279785 258.93017578]
[261.49642944 269.39514160]
[248.44381714 276.78631592]
[233.94163513 280.61859131]
[218.94165039 280.64047241]
[204.42832947 276.85052490]
[191.35420227 269.49746704]
[180.57734680 259.06390381]
[172.80307007 246.23016357]
[172.80307007 261.23016357]
[172.80307007 276.23016357]
[172.80307007 291.23016357]
[172.80307007 306.23016357]
[172.80307007 321.23016357]
[172.80307007 336.23016357]
[172.80307007 351.23016357]
[172.80307007 366.23016357]
[172.80307007 381.23016357]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 118]
[12 117]
[13 116]
[14 115]
[16 114]
[17 113]
[18 112]
[19 111]
[24 36]
[25 35]
[26 34]
[27 33]
[28 32]
[39 62]
[40 61]
[41 60]
[42 59]
[43 58]
[44 57]
[47 55]
[48 54]
[65 108]
[66 107]
[67 106]
[68 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
