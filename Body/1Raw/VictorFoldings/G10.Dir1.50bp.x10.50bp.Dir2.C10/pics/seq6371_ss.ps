%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUCAUAGUAAUACCCAUCAUAAUCGGAGGCUUUGGCAACUGACUAGUUCCCCUAAUAAUCxxxxxxxxxxUAUCAAACUCCUGAGCCAACAACUUAAUAUGACUAGCUUACACAAUAGCUUUUAUAGUAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[89.53124237 268.56732178]
[89.53124237 253.56732178]
[89.53124237 238.56732178]
[89.53124237 223.56732178]
[89.53124237 208.56732178]
[89.53124237 193.56732178]
[89.53124237 178.56732178]
[89.53124237 163.56732178]
[89.53124237 148.56732178]
[89.53124237 133.56732178]
[72.73364258 108.54697418]
[82.64322662 86.50260925]
[74.65331268 73.80768585]
[66.66339874 61.11275482]
[58.67348099 48.41782379]
[50.68356323 35.72289276]
[36.78445053 28.16477203]
[36.55342484 13.27195835]
[28.56351089 0.57702899]
[20.57359314 -12.11790085]
[7.78550911 -7.89170361]
[-5.61733007 -6.65189886]
[-18.94727325 -8.45835972]
[-31.52125359 -13.21476364]
[-42.69578552 -20.67371941]
[-51.89989090 -30.44963074]
[-58.66429138 -42.03863144]
[-62.64531326 -54.84455872]
[-63.64236450 -68.20960236]
[-61.60802078 -81.44812775]
[-56.65028381 -93.88181305]
[-49.02684402 -104.87442780]
[-39.13169861 -113.86437988]
[-46.31420517 -127.03295898]
[-53.63331223 -140.12611389]
[-61.08822250 -153.14242554]
[-68.54312897 -166.15873718]
[-75.99803925 -179.17504883]
[-81.59818268 -182.88259888]
[-84.06579590 -188.09240723]
[-83.47940063 -192.89154053]
[-90.38639832 -206.20669556]
[-97.29339600 -219.52185059]
[-107.27612305 -230.71762085]
[-119.71556091 -239.09976196]
[-128.64364624 -241.32264709]
[-132.32411194 -247.78791809]
[-144.58647156 -256.42703247]
[-156.84884644 -265.06616211]
[-169.11120605 -273.70526123]
[-185.48358154 -274.64205933]
[-192.61579895 -289.40902710]
[-183.17085266 -302.81518555]
[-166.86489868 -301.06942749]
[-160.47209167 -285.96765137]
[-148.20973206 -277.32852173]
[-135.94735718 -268.68939209]
[-123.68498993 -260.05029297]
[-111.33341980 -251.53919983]
[-98.89397430 -243.15705872]
[-105.17381287 -256.77923584]
[-108.07810211 -271.49539185]
[-107.44430542 -286.48199463]
[-103.30790710 -300.90039062]
[-95.90037537 -313.94372559]
[-85.63623810 -324.88208008]
[-73.08988190 -333.10333252]
[-58.96341324 -338.14739990]
[-44.04735184 -339.73205566]
[-29.17641258 -337.76861572]
[-15.18278027 -332.36691284]
[-2.84954596 -323.82928467]
[7.13311481 -312.63345337]
[14.20656681 -299.40597534]
[17.97497559 -284.88705444]
[18.22745705 -269.88919067]
[14.94988632 -255.25163269]
[8.32567501 -241.79356384]
[-1.27448153 -230.26806641]
[-13.31335354 -221.32012939]
[-27.11723709 -215.45048523]
[-41.91366196 -212.98759460]
[-56.87460709 -214.06927490]
[-71.16285706 -218.63502502]
[-83.97824097 -226.42884827]
[-77.07124329 -213.11369324]
[-70.16423798 -199.79853821]
[-62.98173141 -186.62995911]
[-55.52682114 -173.61364746]
[-48.07191086 -160.59733582]
[-40.61700058 -147.58102417]
[-34.52411270 -143.31225586]
[-33.14562225 -134.21546936]
[-25.96311378 -121.04689026]
[-9.78781986 -124.89335632]
[6.83185959 -124.07707977]
[22.57765198 -118.65536499]
[36.19852066 -109.05107880]
[46.61006927 -96.01974487]
[52.98085403 -80.59005737]
[54.79879761 -63.98272324]
[51.91233444 -47.51385880]
[44.54301834 -32.49069214]
[33.26852417 -20.10781670]
[41.25843811 -7.41288710]
[49.24835587 5.28204250]
[62.57597733 11.93213844]
[63.37849426 27.73297882]
[71.36840820 40.42790604]
[79.35832214 53.12283707]
[87.34824371 65.81776428]
[95.33815765 78.51269531]
[110.48324585 75.79378510]
[126.39579773 84.18621826]
[135.04206848 102.90047455]
[148.94462585 108.53243256]
[162.84718323 114.16439056]
[176.74974060 119.79634857]
[189.84481812 111.47176361]
[205.32989502 112.46772003]
[217.25065613 122.40126038]
[221.02331543 137.45272827]
[215.19721985 151.83451843]
[202.01260376 160.01655579]
[186.53924561 158.85267639]
[174.72694397 148.79040527]
[171.11778259 133.69889832]
[157.21522522 128.06694031]
[143.31266785 122.43498993]
[129.41012573 116.80303192]
[123.19039917 120.99410248]
[132.69093323 132.60185242]
[142.19146729 144.20959473]
[154.61662292 152.61291504]
[154.60385132 167.61291504]
[142.16441345 175.99507141]
[128.25704956 170.37496948]
[125.13372803 155.70372009]
[117.94234467 142.53997803]
[110.75096130 129.37625122]
[104.53124237 133.56732178]
[104.53124237 148.56732178]
[104.53124237 163.56732178]
[104.53124237 178.56732178]
[104.53124237 193.56732178]
[104.53124237 208.56732178]
[104.53124237 223.56732178]
[104.53124237 238.56732178]
[104.53124237 253.56732178]
[104.53124237 268.56732178]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 112]
[13 111]
[14 110]
[15 109]
[16 108]
[18 106]
[19 105]
[20 104]
[33 94]
[34 93]
[35 91]
[36 90]
[37 89]
[38 88]
[41 87]
[42 86]
[43 85]
[44 60]
[45 59]
[47 58]
[48 57]
[49 56]
[50 55]
[115 130]
[116 129]
[117 128]
[118 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
