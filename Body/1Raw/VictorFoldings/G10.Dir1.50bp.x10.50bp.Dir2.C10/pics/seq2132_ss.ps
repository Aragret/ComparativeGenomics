%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUUGCAAGGAGAGCCAAAGCUAAGACCCCCGAAACCAGACGAGCUACCUAAGAACAGCUAxxxxxxxxxxUUGUAGUAUAAACUAAUACACCAGUCUUGUAAACCGGAGAUGAAAACCUUUUUCCAAGGACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[135.84822083 342.53381348]
[135.22424316 327.54681396]
[134.60026550 312.55978394]
[133.97628784 297.57275391]
[133.35231018 282.58575439]
[132.72833252 267.59872437]
[132.10435486 252.61172485]
[131.48037720 237.62469482]
[128.99525452 222.83200073]
[124.68767548 208.46380615]
[120.38008881 194.09562683]
[116.07250214 179.72744751]
[111.76492310 165.35925293]
[100.69860077 155.39001465]
[104.14697266 139.94917297]
[99.83938599 125.58099365]
[89.41709137 123.28981018]
[80.83631897 116.94598389]
[67.18007660 123.15139008]
[61.26362228 141.09561157]
[44.42634201 148.94438171]
[27.46904755 142.17330933]
[14.08276272 148.94142151]
[0.69647765 155.70953369]
[-7.82025957 169.72370911]
[-24.20694923 169.08462524]
[-31.60637093 154.44972229]
[-22.40663147 140.87411499]
[-6.07163715 142.32324219]
[7.31464767 135.55513000]
[20.70093346 128.78701782]
[21.84403992 117.35969543]
[28.45401192 107.82156372]
[38.96810532 102.63237762]
[50.79976273 103.19878387]
[60.97467041 109.49514771]
[74.63091278 103.28974152]
[79.24174500 85.04981995]
[95.08016968 74.89604950]
[96.63774872 59.97713852]
[98.19532776 45.05822754]
[85.71147156 30.87540245]
[87.46116638 12.38118839]
[101.88175964 1.18101895]
[102.81739044 -13.78977299]
[95.95594788 -28.04568863]
[104.47204590 -40.26556015]
[105.40767670 -55.23635483]
[106.34329987 -70.20714569]
[107.27893066 -85.17793274]
[86.32425690 -101.66773987]
[89.44353485 -133.24755859]
[80.67732239 -145.41938782]
[71.91111755 -157.59123230]
[63.14491272 -169.76306152]
[47.87187195 -168.14138794]
[33.84070969 -174.38815308]
[24.82574081 -186.82301331]
[23.25194168 -202.10107422]
[29.54265976 -216.11257935]
[42.00572205 -225.08853149]
[57.28862762 -226.61442566]
[71.28034973 -220.27981567]
[80.21719360 -207.78868103]
[81.69518280 -192.50106812]
[75.31674957 -178.52928162]
[84.08295441 -166.35743713]
[92.84915924 -154.18560791]
[101.61537170 -142.01376343]
[109.11496735 -141.93574524]
[107.25738525 -156.82028198]
[105.39980316 -171.70481873]
[96.77057648 -183.97415161]
[98.54299164 -198.86906433]
[109.81045532 -208.77079773]
[124.80963898 -208.61460876]
[135.86845398 -198.48037720]
[137.33030701 -183.55178833]
[128.44781494 -171.46504211]
[126.28098297 -156.62237549]
[124.11415100 -141.77970886]
[131.61373901 -141.70169067]
[140.63127136 -153.68852234]
[149.64880371 -165.67535400]
[158.66633606 -177.66218567]
[160.77952576 -193.34162903]
[174.61380005 -198.86085510]
[183.63133240 -210.84768677]
[182.81846619 -226.87013245]
[194.93345642 -237.38710022]
[210.68270874 -234.33088684]
[217.98475647 -220.04592896]
[211.23808289 -205.49044800]
[195.61816406 -201.83015442]
[186.60063171 -189.84332275]
[185.13244629 -175.02125549]
[170.65316772 -168.64465332]
[161.63563538 -156.65782166]
[152.61810303 -144.67098999]
[143.60058594 -132.68415833]
[149.10250854 -115.65522766]
[145.61801147 -99.50794983]
[135.40733337 -88.32213593]
[122.24972534 -84.24230957]
[121.31409454 -69.27151489]
[120.37846375 -54.30072403]
[119.44284058 -39.32993317]
[126.37120819 -26.14482880]
[117.78818512 -12.85414410]
[116.85255432 2.11664724]
[126.13063812 8.88477707]
[131.01303101 19.41235924]
[130.16882324 31.10684967]
[123.69352722 41.02549362]
[113.11424255 46.61580658]
[111.55665588 61.53471756]
[109.99907684 76.45362854]
[120.64911652 84.89943695]
[125.46946716 97.60846710]
[123.09922791 110.99267578]
[114.20757294 121.27340698]
[118.51515961 135.64158630]
[129.88958740 146.63854980]
[126.13310242 161.05166626]
[130.44068909 175.41986084]
[134.74827576 189.78804016]
[139.05586243 204.15621948]
[143.36344910 218.52441406]
[148.23124695 204.33622742]
[158.68708801 193.58097839]
[172.73220825 188.31462097]
[187.68176270 189.54386902]
[200.67797852 197.03375244]
[209.23651123 209.35250854]
[211.72129822 224.14526367]
[207.65737915 238.58425903]
[197.82157898 249.90931702]
[184.09413147 255.95556641]
[169.09916687 255.56718445]
[155.70310974 248.81843567]
[146.46739197 237.00071716]
[147.09136963 251.98774719]
[147.71534729 266.97476196]
[148.33932495 281.96176147]
[148.96330261 296.94879150]
[149.58728027 311.93579102]
[150.21125793 326.92282104]
[150.83523560 341.90985107]
[157.53521729 357.48373413]
[144.42469788 368.23318481]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 148]
[2 147]
[3 146]
[4 145]
[5 144]
[6 143]
[7 142]
[8 141]
[9 128]
[10 127]
[11 126]
[12 125]
[13 124]
[15 122]
[16 121]
[18 37]
[19 36]
[22 31]
[23 30]
[24 29]
[39 117]
[40 116]
[41 115]
[44 110]
[45 109]
[47 107]
[48 106]
[49 105]
[50 104]
[52 69]
[53 68]
[54 67]
[55 66]
[82 100]
[83 99]
[84 98]
[85 97]
[87 95]
[88 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
