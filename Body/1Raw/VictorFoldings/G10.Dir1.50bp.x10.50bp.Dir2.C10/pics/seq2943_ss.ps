%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCGAACUACUAUACUCAAUUGAUCCAAUAACUUGACCAACGGAACAAGUUACCCUAGGGAUxxxxxxxxxxUACCGUACAACCCUAACAUAACCAUUCUUAAUUUAACUAUUUAUAUUAUCCUAACUACUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[199.46176147 404.52416992]
[199.46176147 389.52416992]
[199.46176147 374.52416992]
[199.46176147 359.52416992]
[199.46176147 344.52416992]
[199.46176147 329.52416992]
[199.46176147 314.52416992]
[199.46176147 299.52416992]
[199.46176147 284.52416992]
[199.46176147 269.52416992]
[182.14662170 247.44160461]
[189.24957275 225.77998352]
[179.98463440 213.98333740]
[170.71968079 202.18670654]
[155.99478149 204.43231201]
[142.02999878 198.96961975]
[132.61227417 187.17247009]
[130.34910583 172.14666748]
[135.94732666 157.91264343]
[126.68238068 146.11601257]
[117.41743469 134.31936646]
[107.73863983 138.66252136]
[96.99334717 140.26048279]
[85.96372223 138.85844421]
[75.49003601 134.42506409]
[66.40674591 127.16476440]
[59.47637939 117.51154327]
[44.90367508 121.06630707]
[30.33097267 124.62107086]
[15.75826931 128.17582703]
[1.80322444 137.80355835]
[-11.31138515 127.05909729]
[-4.61731052 111.48265076]
[12.20350742 113.60312653]
[26.77621078 110.04837036]
[41.34891129 106.49360657]
[55.92161560 102.93884277]
[57.47919846 88.01992798]
[43.95500565 81.53176880]
[30.43081665 75.04360199]
[16.90662766 68.55543518]
[3.38243699 62.06727219]
[-10.14175320 55.57910538]
[-28.43229485 57.43273544]
[-37.81416321 42.63474274]
[-51.47040558 36.42933655]
[-68.39193726 35.38146973]
[-72.06936646 18.83115768]
[-57.18386459 10.71585941]
[-45.26499557 22.77309608]
[-31.60875511 28.97850227]
[-20.13461494 25.02231407]
[-8.68451595 30.13251495]
[-3.65358782 42.05491638]
[9.87060165 48.54307938]
[23.39479256 55.03124619]
[36.91898346 61.51941299]
[50.44317245 68.00757599]
[63.96736145 74.49574280]
[70.06241608 69.11458588]
[76.88047791 65.07770538]
[84.14055634 62.46294403]
[91.55842590 61.29175568]
[98.85758209 61.53077698]
[101.34270477 46.73807144]
[103.82781982 31.94536400]
[106.31294250 17.15265656]
[108.79805756 2.35994983]
[95.06766510 -3.89615273]
[83.42494965 -13.49351883]
[74.66371155 -25.77778625]
[69.38132477 -39.91138840]
[67.93793488 -54.93067932]
[70.43196869 -69.81161499]
[76.69337463 -83.53958893]
[86.29523468 -95.17860413]
[98.58288574 -103.93508911]
[112.71852875 -109.21202087]
[127.73837280 -110.64961243]
[142.61834717 -108.14983368]
[156.34390259 -101.88312531]
[167.97920227 -92.27677155]
[176.73094177 -79.98574829]
[182.00242615 -65.84806824]
[183.43420410 -50.82766724]
[180.92868042 -35.94866180]
[174.65667725 -22.22552872]
[165.04583740 -10.59393215]
[152.75143433 -1.84693384]
[138.61170959 3.41908169]
[123.59076691 4.84506845]
[121.10564423 19.63777542]
[118.62052917 34.43048096]
[116.13540649 49.22319031]
[113.65029144 64.01589966]
[132.41850281 79.25808716]
[138.39231873 102.68635559]
[129.21408081 125.05442047]
[138.47901917 136.85105896]
[147.74397278 148.64770508]
[162.89920044 146.58218384]
[176.96064758 152.34175110]
[186.18988037 164.28694153]
[188.18753052 179.14848328]
[182.51632690 192.92175293]
[191.78126526 204.71839905]
[201.04621887 216.51502991]
[223.54122925 214.58119202]
[241.11183167 236.10633850]
[255.75534058 239.35716248]
[270.39883423 242.60798645]
[285.04232788 245.85881042]
[300.19137573 241.29620361]
[310.93933105 251.60789490]
[325.58282471 254.85871887]
[340.22631836 258.10952759]
[355.69680786 252.66934204]
[367.96554565 263.55099487]
[364.41149902 279.56039429]
[348.69076538 284.22842407]
[336.97549438 272.75305176]
[322.33200073 269.50222778]
[307.68850708 266.25140381]
[293.58685303 271.04653931]
[281.79150391 260.50231934]
[267.14801025 257.25149536]
[252.50451660 254.00067139]
[237.86100769 250.74984741]
[232.01119995 255.44342041]
[243.30355835 265.31677246]
[254.59590149 275.19009399]
[268.83721924 279.90020752]
[276.49838257 292.79620361]
[273.82345581 307.55575562]
[262.12384033 316.94293213]
[247.13534546 316.35562134]
[236.20614624 306.08175659]
[234.69433594 291.15805054]
[227.50296021 277.99432373]
[220.31158447 264.83059692]
[214.46176147 269.52416992]
[214.46176147 284.52416992]
[214.46176147 299.52416992]
[214.46176147 314.52416992]
[214.46176147 329.52416992]
[214.46176147 344.52416992]
[214.46176147 359.52416992]
[214.46176147 374.52416992]
[214.46176147 389.52416992]
[214.46176147 404.52416992]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 107]
[13 106]
[14 105]
[19 100]
[20 99]
[21 98]
[27 37]
[28 36]
[29 35]
[30 34]
[38 59]
[39 58]
[40 57]
[41 56]
[42 55]
[43 54]
[45 51]
[46 50]
[64 95]
[65 94]
[66 93]
[67 92]
[68 91]
[109 128]
[110 127]
[111 126]
[112 125]
[114 123]
[115 122]
[116 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
