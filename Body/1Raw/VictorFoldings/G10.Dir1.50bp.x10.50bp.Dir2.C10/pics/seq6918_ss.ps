%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:33:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCAUAAUCAUCGCUAUCCCCACCGGCGUCAAAGUAUUUAGCUGACUCGCCACACUCCACGxxxxxxxxxxGAUAACCAUACACAACACUAAAGGACGAACCUGAUCUCUUAUACUAGUAUCCUUAAUCAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[98.70810699 125.83042145]
[88.96045685 137.23144531]
[85.87338257 152.74855042]
[71.72177124 157.39410400]
[61.97412109 168.79513550]
[52.22646713 180.19615173]
[42.47881699 191.59716797]
[39.56681061 209.74931335]
[22.85393906 215.01048279]
[13.34558010 226.61181641]
[3.83722186 238.21316528]
[9.33173943 252.55560303]
[6.90305996 267.72125244]
[-2.79551482 279.63064575]
[-17.15511703 285.08016968]
[-32.31308365 282.60397339]
[-44.19200134 272.86810303]
[-49.59649658 258.49148560]
[-47.07279205 243.34136963]
[-37.29974747 231.49302673]
[-22.90626526 226.13362122]
[-7.76411915 228.70480347]
[1.74423909 217.10345459]
[11.25259781 205.50212097]
[10.37994862 193.39651489]
[18.26263428 183.64549255]
[31.07779503 181.84951782]
[40.82544708 170.44850159]
[50.57309723 159.04747009]
[60.32075119 147.64645386]
[62.71060944 132.94482422]
[77.55944061 127.48379517]
[87.30709076 116.08277130]
[83.75232697 101.51007080]
[69.84976959 95.87811279]
[55.94721603 90.24615479]
[42.04465866 84.61419678]
[28.02794647 79.27268219]
[13.90314293 74.22393036]
[-0.22165965 69.17517090]
[-11.43767643 79.58956146]
[-26.21180916 83.58751678]
[-41.14907074 80.25032043]
[-52.81698227 70.34485626]
[-58.53435135 56.14730835]
[-56.98736572 40.92018127]
[-48.53150558 28.16255188]
[-35.10987473 20.80603409]
[-19.80665970 20.54109955]
[-6.13842869 27.42862701]
[2.75395846 39.88591385]
[4.82709694 55.05036926]
[18.95190048 60.09912491]
[33.07670212 65.14788055]
[37.75295639 63.91980743]
[43.24789429 65.66249084]
[47.67661667 70.71163940]
[61.57917023 76.34359741]
[75.48172760 81.97555542]
[89.38428497 87.60751343]
[79.88375092 75.99976349]
[70.38320923 64.39202118]
[56.91185760 57.79484558]
[44.56546783 49.27624130]
[33.61607361 39.02388763]
[24.30492210 27.26367950]
[16.83716774 14.25473499]
[11.37735081 0.28367928]
[8.04576683 -14.34165955]
[6.91582108 -29.29903984]
[8.01241112 -44.25890350]
[11.31137371 -58.89163589]
[16.74002457 -72.87483215]
[24.17875099 -85.90039825]
[33.46365738 -97.68133545]
[44.39016342 -107.95807648]
[56.71752548 -116.50419617]
[70.17413330 -123.13138580]
[84.46349335 -127.69364166]
[99.27077484 -130.09042358]
[114.26970673 -130.26895142]
[129.12983704 -128.22525024]
[143.52372742 -124.00439453]
[157.13426208 -117.69934845]
[169.66152954 -109.44905090]
[180.82952881 -99.43527222]
[190.39219666 -87.87865448]
[198.13883972 -75.03382874]
[203.89875793 -61.18379974]
[207.54505920 -46.63372803]
[208.99739075 -31.70420265]
[208.22375488 -16.72416687]
[205.24119568 -2.02367640]
[200.11544800 12.07336807]
[192.95942688 25.25636482]
[183.93081665 37.23484802]
[173.22853088 47.74489975]
[161.08839417 56.55494308]
[147.77786255 63.47087097]
[133.58419800 68.34188843]
[122.71233368 78.67642212]
[111.84046936 89.01095581]
[126.33606720 85.15379333]
[140.83166504 81.29663849]
[150.08886719 68.19382477]
[166.11256409 67.40581512]
[176.61073303 79.53710175]
[173.53007507 95.28159332]
[159.23382568 102.56147003]
[144.68882751 95.79223633]
[130.19322205 99.64939117]
[115.69763184 103.50655365]
[130.26792908 107.07113647]
[144.83824158 110.63571930]
[159.40853882 114.20030212]
[174.31822205 112.55672455]
[189.30198669 113.25445557]
[203.99441528 116.27648926]
[218.03718567 121.54912567]
[231.08781433 128.94377136]
[242.82804871 138.28009033]
[252.97157288 149.33038330]
[261.27099609 161.82518005]
[267.52389526 175.45973206]
[271.57781982 189.90153503]
[273.33386230 204.79838562]
[272.74923706 219.78698730]
[269.83816528 234.50180054]
[264.67163086 248.58396912]
[257.37570190 261.69003296]
[248.12823486 273.50039673]
[237.15480042 283.72702026]
[224.72300720 292.12048340]
[211.13601685 298.47610474]
[196.72521973 302.63888550]
[181.84204102 304.50732422]
[166.84945679 304.03579712]
[152.11309814 301.23587036]
[137.99234009 296.17575073]
[124.83158875 288.97894287]
[112.95178223 279.82086182]
[102.64264679 268.92492676]
[94.15559387 256.55682373]
[87.69761658 243.01818848]
[83.42620087 228.63920593]
[81.44551849 213.77055359]
[81.80387115 198.77482605]
[84.49253082 184.01776123]
[89.44282532 169.86625671]
[92.53125000 155.18763733]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 33]
[2 32]
[4 30]
[5 29]
[6 28]
[7 27]
[9 24]
[10 23]
[11 22]
[34 60]
[35 59]
[36 58]
[37 57]
[38 54]
[39 53]
[40 52]
[102 112]
[103 111]
[104 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
