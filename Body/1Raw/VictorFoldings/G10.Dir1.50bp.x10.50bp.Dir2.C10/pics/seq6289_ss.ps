%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACUAUACCUAUUAUUCGGCGCAUGAGCUGGAGUCCUAGGCACAGCUCUAAGCCUCCUUAUxxxxxxxxxxAACUUCGGCUCACUCCUUGGCGCCUGCCUGAUCCUCCAAAUCACCACAGGACUAUUCCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[102.73628998 294.49304199]
[102.73628998 279.49304199]
[102.73628998 264.49304199]
[102.73628998 249.49304199]
[102.73628998 234.49304199]
[102.73628998 219.49304199]
[102.73628998 204.49304199]
[102.73628998 189.49304199]
[102.73628998 174.49304199]
[102.73628998 159.49304199]
[95.81468201 156.60490417]
[83.89069366 165.70536804]
[81.97146606 150.82862854]
[75.04985809 147.94050598]
[64.38822937 158.49179077]
[53.72660065 169.04307556]
[52.20564270 185.01387024]
[38.69266129 193.66134644]
[23.55365753 188.35191345]
[18.40198517 173.15849304]
[27.18956184 159.73619080]
[43.17531204 158.38145447]
[53.83693695 147.83016968]
[64.49856567 137.27886963]
[56.24300385 110.42423248]
[63.74544525 87.09078217]
[80.57120514 74.58951569]
[74.50819397 60.86946106]
[68.44518280 47.14941025]
[62.38216782 33.42935562]
[56.31915283 19.70930099]
[36.20055771 39.79680634]
[10.95227242 34.70243454]
[2.26409698 13.31266499]
[-11.96268177 8.55885029]
[-26.18946075 3.80503511]
[-40.41624069 -0.94877976]
[-54.64302063 -5.70259476]
[-68.86979675 -10.45640945]
[-80.78012085 -5.39694643]
[-92.55854034 -9.69667244]
[-98.04413605 -20.52328682]
[-112.16893768 -25.57204247]
[-127.22628784 -20.03528404]
[-140.86793518 -28.47834206]
[-142.62915039 -44.42442703]
[-131.15890503 -55.64106750]
[-115.25617981 -53.52381516]
[-107.12018585 -39.69684601]
[-92.99537659 -34.64809036]
[-75.95948029 -38.74418259]
[-64.11598206 -24.68318939]
[-49.88920593 -19.92937469]
[-35.66242599 -15.17555904]
[-21.43564606 -10.42174435]
[-7.20886707 -5.66792917]
[7.01791191 -0.91411436]
[12.42136192 -9.38247681]
[21.74359703 -15.46868515]
[33.81751251 -17.40471458]
[33.50545502 -32.40147018]
[33.19340134 -47.39822388]
[32.88134384 -62.39497757]
[18.19665718 -65.83165741]
[4.82836676 -72.81303406]
[-6.38318634 -82.90025330]
[-14.73323345 -95.45921326]
[-19.69688416 -109.70045471]
[-20.96211815 -124.72875977]
[-18.44940376 -139.59944153]
[-12.31669140 -153.37770081]
[-2.94948745 -165.19744873]
[9.06337643 -174.31567383]
[22.96676254 -180.15917969]
[37.88669205 -182.36067200]
[52.88528442 -180.78173828]
[67.01971436 -175.52163696]
[79.40148926 -166.91102600]
[89.25226593 -155.49118042]
[95.95282745 -141.97994995]
[99.08196259 -127.22666931]
[98.44297791 -112.15873718]
[94.07604218 -97.72334290]
[86.25565338 -84.82790375]
[75.47341919 -74.28303528]
[62.40711212 -66.75160217]
[47.87809753 -62.70703125]
[48.19015503 -47.71027756]
[48.50220871 -32.71352386]
[48.81426620 -17.71677017]
[62.65748596 -11.94049835]
[73.53630829 -22.26770401]
[75.38919067 -38.20339966]
[89.07914734 -46.56788254]
[104.10441589 -40.94464111]
[108.93889618 -25.64734077]
[99.87399292 -12.41076469]
[83.86351776 -11.38887882]
[72.98468781 -1.06167352]
[70.03920746 13.64628792]
[76.10221863 27.36634254]
[82.16522980 41.08639526]
[88.22824860 54.80644989]
[94.29125977 68.52650452]
[121.12335968 67.83100128]
[143.80407715 89.77541351]
[144.38636780 126.07521820]
[159.02986145 129.32604980]
[173.67337036 132.57687378]
[188.31686401 135.82769775]
[196.44419861 123.03228760]
[208.45956421 113.79071045]
[222.91204834 109.21892548]
[238.05645752 109.86899567]
[252.06402588 115.66242218]
[263.24328613 125.89962006]
[270.24426270 139.34440613]
[272.22155762 154.37324524]
[268.93640137 169.17134094]
[260.78552246 181.95175171]
[248.75312805 191.17117310]
[234.29223633 195.71632385]
[219.14904785 195.03834534]
[205.15217590 189.21910095]
[193.99182129 178.96131897]
[187.01564026 165.50366211]
[185.06604004 150.47119141]
[170.42254639 147.22036743]
[155.77903748 143.96954346]
[141.13554382 140.71871948]
[135.28572083 145.41230774]
[146.57807922 155.28564453]
[157.87043762 165.15898132]
[169.96206665 174.03547668]
[170.28398132 189.03202820]
[158.58439636 198.41923523]
[144.01400757 194.85502625]
[137.96887207 181.12693787]
[130.77748108 167.96319580]
[123.58610535 154.79946899]
[117.73628998 159.49304199]
[117.73628998 174.49304199]
[117.73628998 189.49304199]
[117.73628998 204.49304199]
[117.73628998 219.49304199]
[117.73628998 234.49304199]
[117.73628998 249.49304199]
[117.73628998 264.49304199]
[117.73628998 279.49304199]
[117.73628998 294.49304199]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[14 24]
[15 23]
[16 22]
[27 104]
[28 103]
[29 102]
[30 101]
[31 100]
[34 57]
[35 56]
[36 55]
[37 54]
[38 53]
[39 52]
[42 50]
[43 49]
[60 90]
[61 89]
[62 88]
[63 87]
[91 99]
[92 98]
[107 130]
[108 129]
[109 128]
[110 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
