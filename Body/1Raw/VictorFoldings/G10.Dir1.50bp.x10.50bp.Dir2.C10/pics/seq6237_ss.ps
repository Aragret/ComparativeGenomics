%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAGCCAUUUUACCUCACCCCCACUGAUGUUCGCCGACCGUUGACUAUUCUCUACAAACCAxxxxxxxxxxAAAAUCGCUCAUUGCAUACUCUUCAAUCAGCCACAUAGCCCUCGUAGUAACAGCCAUUCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-21.76142311 267.17584229]
[-31.02637100 278.97247314]
[-40.29132080 290.76910400]
[-49.55627060 302.56576538]
[-58.82122040 314.36239624]
[-61.26013565 329.99447632]
[-75.20624542 335.22470093]
[-84.47119904 347.02136230]
[-93.73614502 358.81799316]
[-103.00109863 370.61462402]
[-96.67813873 384.55300903]
[-97.56850433 399.83261108]
[-105.46760559 412.94226074]
[-118.56027222 420.86947632]
[-133.83792114 421.79260254]
[-147.78984070 415.49957275]
[-157.21000671 403.43643188]
[-159.93370056 388.37524414]
[-155.33508301 373.77691650]
[-144.47084045 362.99603271]
[-129.83750916 358.51000977]
[-114.79773712 361.34967041]
[-105.53278351 349.55303955]
[-96.26783752 337.75640869]
[-87.00289154 325.95974731]
[-85.22666168 311.17144775]
[-70.61785889 305.09744263]
[-61.35290909 293.30081177]
[-52.08795929 281.50418091]
[-42.82301331 269.70751953]
[-33.55806351 257.91088867]
[-50.57125473 241.78117371]
[-65.64969635 223.82965088]
[-78.59962463 204.28700256]
[-89.25466156 183.40431213]
[-97.47787476 161.44992065]
[-103.16361237 138.70594788]
[-106.23882294 115.46460724]
[-106.66397095 92.02456665]
[-104.43360901 68.68700409]
[-99.57639313 45.75179291]
[-113.89899445 41.29497910]
[-128.71298218 47.45330811]
[-142.69403076 39.58502960]
[-145.11708069 23.72601128]
[-134.12335205 12.04193687]
[-118.14631653 13.49582672]
[-109.44217682 26.97238159]
[-95.11957550 31.42919731]
[-90.87863159 20.38245201]
[-86.01284790 9.59632874]
[-80.53817749 -0.89386415]
[-74.47251892 -11.05378914]
[-67.83574677 -20.85018730]
[-60.64957047 -30.25099182]
[-52.93751907 -39.22542953]
[-44.72483826 -47.74412155]
[-36.03841400 -55.77918625]
[-26.90667725 -63.30431747]
[-17.35951996 -70.29488373]
[-7.42819643 -76.72800446]
[2.85478640 -82.58261871]
[13.45576668 -87.83956146]
[24.34004402 -92.48162079]
[35.47198868 -96.49361420]
[46.81515884 -99.86239624]
[58.33242798 -102.57694244]
[69.98609161 -104.62837219]
[81.73799896 -106.00996399]
[93.54969788 -106.71719360]
[105.38249969 -106.74774933]
[117.19768524 -106.10153961]
[128.95657349 -104.78066254]
[140.62068176 -102.78945923]
[152.15182495 -100.13443756]
[163.51223755 -96.82428741]
[174.66474915 -92.86985016]
[185.57286072 -88.28406525]
[196.20085144 -83.08194733]
[206.51394653 -77.28052521]
[216.47836304 -70.89878845]
[226.06149292 -63.95762634]
[235.23197937 -56.47976303]
[243.95979309 -48.48967361]
[252.21636963 -40.01351166]
[259.97467041 -31.07902908]
[267.20928955 -21.71546745]
[279.64874268 -30.09761047]
[292.08816528 -38.47975540]
[299.20892334 -52.60793304]
[314.08728027 -53.30354309]
[326.52673340 -61.68568802]
[338.96615601 -70.06783295]
[351.40560913 -78.44997406]
[350.96728516 -93.87110901]
[358.95538330 -107.06935120]
[372.82095337 -113.83319855]
[388.13952637 -112.00432587]
[400.02301025 -102.16631317]
[404.67941284 -87.45845032]
[400.62292480 -72.57394409]
[389.14791870 -62.26240540]
[373.91604614 -59.81419373]
[359.78775024 -66.01052856]
[347.34829712 -57.62838745]
[334.90887451 -49.24624634]
[322.46942139 -40.86410141]
[316.23843384 -27.33546829]
[300.47033691 -26.04031372]
[288.03088379 -17.65817070]
[275.59143066 -9.27602673]
[282.53713989 2.76936460]
[288.65777588 15.25423336]
[293.92568970 28.12214661]
[298.31707764 41.31494522]
[301.81210327 54.77299500]
[304.39492798 68.43547058]
[306.05389404 82.24061584]
[306.78152466 96.12602997]
[306.57449341 110.02895355]
[305.43377686 123.88655090]
[303.36450195 137.63618469]
[300.37603760 151.21569824]
[296.48187256 164.56372070]
[291.69964600 177.61991882]
[286.05093384 190.32528687]
[279.56127930 202.62239075]
[272.26000977 214.45562744]
[264.18014526 225.77154541]
[255.35820007 236.51898193]
[245.83404541 246.64936829]
[235.65072632 256.11691284]
[224.85426331 264.87878418]
[213.49348450 272.89544678]
[201.61970520 280.13061523]
[189.28662109 286.55160522]
[176.54995728 292.12939453]
[163.46730042 296.83877563]
[150.09777832 300.65844727]
[136.50180054 303.57116699]
[122.74085236 305.56375122]
[108.87711334 306.62719727]
[94.97325134 306.75671387]
[81.09210968 305.95169067]
[67.29642487 304.21575928]
[53.64856339 301.55682373]
[40.21020889 297.98681641]
[27.04209709 293.52197266]
[14.20375252 288.18237305]
[1.75320125 281.99221802]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 31]
[2 30]
[3 29]
[4 28]
[5 27]
[7 25]
[8 24]
[9 23]
[10 22]
[41 49]
[42 48]
[87 111]
[88 110]
[89 109]
[91 107]
[92 106]
[93 105]
[94 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
