%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCUUGUAAAUUUAACUGUUAGUCCAAAGAGGAACAGCUCUUUGGACACUAGGAAAAAACxxxxxxxxxxCUUAGCAUGAUUUAUCCUACACUCCAACUCAUGAGACCCACAACAAAUAGCCCUUCUAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[88.38243103 496.83547974]
[88.38243103 481.83547974]
[88.38243103 466.83547974]
[88.38243103 451.83547974]
[88.38243103 436.83547974]
[88.38243103 421.83547974]
[88.38243103 406.83547974]
[88.38243103 391.83547974]
[88.38243103 376.83547974]
[88.38243103 361.83547974]
[74.26972198 358.57388306]
[61.23595047 352.23782349]
[49.94174957 343.14474487]
[40.96042633 331.75189209]
[34.74885178 318.63336182]
[31.62420273 304.45114136]
[31.74779892 289.92178345]
[35.11675262 275.78012085]
[41.56395340 262.74212646]
[50.76636124 251.46871948]
[62.26117706 242.53211975]
[75.46913147 236.38694763]
[89.72365570 233.34707642]
[90.03571320 218.35031128]
[79.57180023 207.81266785]
[79.67463684 192.59938049]
[90.79843903 181.69531250]
[91.11049652 166.69856262]
[91.42255402 151.70181274]
[91.73461151 136.70504761]
[69.70003510 122.30448151]
[62.49673080 96.98628235]
[48.08451462 92.82839203]
[33.67229843 88.67050934]
[19.26008415 84.51261902]
[4.84786797 80.35472870]
[-9.56434822 76.19684601]
[-23.97656441 72.03895569]
[-38.38877869 67.88107300]
[-52.80099487 63.72318268]
[-67.21321106 59.56529617]
[-80.92543793 67.42343140]
[-96.15589905 63.20339203]
[-103.86862183 49.40884781]
[-99.48779297 34.22385788]
[-85.61247253 26.65740967]
[-70.47465515 31.19854164]
[-63.05532455 45.15307999]
[-48.64310837 49.31096649]
[-34.23089218 53.46885300]
[-19.81867599 57.62673950]
[-5.40646076 61.78462982]
[9.00575542 65.94251251]
[23.41797066 70.10040283]
[37.83018875 74.25829315]
[52.24240494 78.41617584]
[66.65461731 82.57406616]
[74.69793701 72.15429688]
[85.83822632 65.14283752]
[98.71191406 62.39789200]
[101.19702911 47.60518646]
[103.68215179 32.81248093]
[106.16726685 18.01977158]
[108.65238953 3.22706485]
[103.30834961 -11.66426945]
[113.04730988 -22.93378258]
[115.53242493 -37.72649002]
[118.01754761 -52.51919556]
[104.28715515 -58.77529907]
[92.64443207 -68.37266541]
[83.88320160 -80.65692902]
[78.60080719 -94.79053497]
[77.15742493 -109.80982208]
[79.65145874 -124.69075775]
[85.91286469 -138.41873169]
[95.51472473 -150.05775452]
[107.80236816 -158.81423950]
[121.93801117 -164.09117126]
[136.95785522 -165.52876282]
[151.83782959 -163.02897644]
[165.56338501 -156.76226807]
[177.19868469 -147.15591431]
[185.95043945 -134.86489868]
[191.22190857 -120.72721100]
[192.65370178 -105.70681763]
[190.14817810 -90.82781219]
[183.87617493 -77.10467529]
[174.26531982 -65.47307587]
[161.97091675 -56.72608185]
[147.83120728 -51.46006393]
[132.81025696 -50.03408051]
[130.32513428 -35.24137115]
[127.84001923 -20.44866371]
[133.36180115 -6.61540318]
[123.44509125 5.71218348]
[120.95997620 20.50489044]
[118.47485352 35.29759598]
[115.98973846 50.09030533]
[113.50461578 64.88301086]
[122.33511353 69.72261047]
[129.56571960 76.73101807]
[134.67851257 85.40620422]
[149.38647461 82.46072388]
[164.09443665 79.51524353]
[170.44985962 65.35939026]
[183.92883301 57.67192459]
[199.34838867 59.40882874]
[210.77940369 69.90222931]
[213.82641602 85.11719513]
[207.31779480 99.20326996]
[193.75624084 106.74406433]
[178.35643005 104.83998871]
[167.03991699 94.22320557]
[152.33195496 97.16868591]
[137.62399292 100.11416626]
[136.86441040 107.52282715]
[134.66041565 114.63671875]
[131.09834290 121.17711639]
[126.31778717 126.88775635]
[120.50605011 131.54487610]
[113.89083862 134.96601868]
[106.73136139 137.01710510]
[106.41930389 152.01385498]
[106.10724640 167.01062012]
[105.79519653 182.00737000]
[116.45578003 193.36473083]
[115.92567444 208.56912231]
[105.03247070 218.66236877]
[104.72041321 233.65913391]
[119.76021576 237.65051270]
[133.40750122 245.10754395]
[144.87754822 255.59674072]
[153.51196289 268.51034546]
[158.81645203 283.10165405]
[160.48913574 298.52810669]
[158.43771362 313.89999390]
[152.78457642 328.33175659]
[143.85945129 340.99291992]
[132.18023682 351.15606689]
[118.42290497 358.23843384]
[103.38243103 361.83547974]
[103.38243103 376.83547974]
[103.38243103 391.83547974]
[103.38243103 406.83547974]
[103.38243103 421.83547974]
[103.38243103 436.83547974]
[103.38243103 451.83547974]
[103.38243103 466.83547974]
[103.38243103 481.83547974]
[103.38243103 496.83547974]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[23 129]
[24 128]
[27 125]
[28 124]
[29 123]
[30 122]
[32 57]
[33 56]
[34 55]
[35 54]
[36 53]
[37 52]
[38 51]
[39 50]
[40 49]
[41 48]
[60 99]
[61 98]
[62 97]
[63 96]
[64 95]
[66 93]
[67 92]
[68 91]
[102 115]
[103 114]
[104 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
