%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGCCAAAGCUAAGACCCCCGAAACCAGACGAGCUACCUAAGAACAGCUAAAAGAGCACACCCGUxxxxxxxxxxCCUUUUUCCAAGGACAAAUCAGAGAAAAAGUCUUUAACUCCACCAUUAGCACCCAAAGCUAAGACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[115.00725555 452.11068726]
[115.00725555 437.11068726]
[115.00725555 422.11068726]
[115.00725555 407.11068726]
[115.00725555 392.11068726]
[115.00725555 377.11068726]
[115.00725555 362.11068726]
[115.00725555 347.11068726]
[115.00725555 332.11068726]
[115.00725555 317.11068726]
[96.83064270 311.44326782]
[81.58963013 299.99636841]
[71.05747223 284.08392334]
[66.46553040 265.54046631]
[68.35935211 246.50962830]
[76.53386688 229.19628906]
[90.05551147 215.61116028]
[107.36880493 207.33728027]
[105.30077362 192.48051453]
[103.23274994 177.62376404]
[101.16471863 162.76699829]
[99.09668732 147.91024780]
[90.71935272 147.70217896]
[82.39058685 146.02041626]
[74.37104034 142.87640381]
[66.91864777 138.32794189]
[60.28034210 132.47850037]
[54.68400192 125.47509766]
[50.33069229 117.50473022]
[35.65234375 120.59440613]
[29.43613815 134.81195068]
[16.03326607 142.63131714]
[0.59740460 141.04582214]
[-10.93604183 130.66511536]
[-14.13222790 115.48077393]
[-7.76215410 101.33150482]
[5.72475576 93.65798950]
[21.14250946 95.41084290]
[32.56266785 105.91606140]
[47.24101257 102.82638550]
[48.57295227 87.88563538]
[34.67260742 82.24822235]
[20.77226448 76.61080933]
[6.87191963 70.97339630]
[-5.19401693 80.47648621]
[-20.39725685 82.65755463]
[-34.64820480 76.92990112]
[-44.11343002 64.83423615]
[-46.24683380 49.62423325]
[-40.47453690 35.39130783]
[-28.34926414 25.96404266]
[-13.13264847 23.87832832]
[1.08211410 29.69520760]
[10.47132492 41.84997177]
[12.50933361 57.07305145]
[26.40967751 62.71046448]
[40.31002045 68.34787750]
[54.21036530 73.98529053]
[80.04278564 53.83819199]
[111.29766846 53.43209076]
[117.07212830 39.58811951]
[122.84658813 25.74414444]
[128.62104797 11.90017128]
[134.39550781 -1.94380224]
[122.39998627 7.06216097]
[108.44608307 12.56566620]
[93.53243256 14.17284679]
[78.72634888 11.76868248]
[65.08746338 5.52523041]
[53.59184647 -4.11068630]
[45.06221390 -16.44946098]
[40.10899353 -30.60804749]
[39.08666992 -45.57316971]
[42.06841278 -60.27382278]
[48.84082031 -73.65793610]
[58.91922379 -84.76765442]
[71.58234406 -92.80789185]
[85.92391968 -97.20323944]
[100.91758728 -97.63913727]
[115.49029541 -94.08438873]
[128.59912109 -86.79339600]
[139.30592346 -76.28794861]
[146.84445190 -63.31988144]
[150.67518616 -48.81728363]
[150.52398682 -33.81804276]
[146.40025330 -19.39233780]
[157.26554871 -29.73377037]
[168.13085938 -40.07519913]
[178.99615479 -50.41663361]
[189.86146545 -60.75806427]
[200.72676086 -71.09949493]
[211.59207153 -81.44092560]
[205.77909851 -95.46140289]
[205.42735291 -110.63508606]
[210.58441162 -124.90986633]
[220.55281067 -136.35517883]
[233.98442078 -143.42315674]
[249.06272888 -145.15791321]
[263.74850464 -141.32482910]
[276.05560303 -132.44229126]
[284.31964111 -119.71160126]
[287.42291260 -104.85448456]
[284.94577026 -89.88023376]
[277.22320557 -76.81399536]
[265.29965210 -67.42287445]
[250.78765869 -62.97693634]
[235.64985657 -64.07746887]
[221.93350220 -70.57562256]
[211.06819153 -60.23419189]
[200.20289612 -49.89276123]
[189.33758545 -39.55133057]
[178.47229004 -29.20989799]
[167.60697937 -18.86846733]
[156.74168396 -8.52703571]
[148.23948669 3.83065891]
[142.46502686 17.67463303]
[136.69056702 31.51860619]
[130.91609192 45.36257935]
[125.14163971 59.20655441]
[133.04199219 65.29505157]
[139.51078796 72.88716888]
[144.26771545 81.65398407]
[147.10671997 91.21566010]
[147.90476990 101.15792084]
[146.62728882 111.05001831]
[143.32965088 120.46335602]
[138.15469360 128.99009705]
[131.32666016 136.26081848]
[123.14136505 141.96051025]
[113.95344543 145.84220886]
[116.02147675 160.69897461]
[118.08950806 175.55572510]
[120.15753174 190.41249084]
[122.22556305 205.26924133]
[133.47879028 206.37954712]
[144.27804565 209.71012878]
[154.19010925 215.12458801]
[162.81793213 222.40299988]
[169.81648254 231.25080872]
[174.90660095 241.31077576]
[177.88612366 252.17742920]
[178.63786316 263.41333008]
[177.13427734 274.56680298]
[173.43846130 285.18991089]
[167.70143127 294.85662842]
[160.15605164 303.17984009]
[151.10754395 309.82687378]
[140.92111206 314.53271484]
[130.00724792 317.11068726]
[130.00724792 332.11068726]
[130.00724792 347.11068726]
[130.00724792 362.11068726]
[130.00724792 377.11068726]
[130.00724792 392.11068726]
[130.00724792 407.11068726]
[130.00724792 422.11068726]
[130.00724792 437.11068726]
[130.00724792 452.11068726]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 158]
[2 157]
[3 156]
[4 155]
[5 154]
[6 153]
[7 152]
[8 151]
[9 150]
[10 149]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[29 40]
[30 39]
[41 58]
[42 57]
[43 56]
[44 55]
[60 119]
[61 118]
[62 117]
[63 116]
[64 115]
[86 114]
[87 113]
[88 112]
[89 111]
[90 110]
[91 109]
[92 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
