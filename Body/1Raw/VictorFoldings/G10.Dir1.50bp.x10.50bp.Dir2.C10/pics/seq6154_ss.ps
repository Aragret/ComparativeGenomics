%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUACUUCUCCCGCCGCCGGGAAAAAAGGCGGGAGAAGCCCCGGCAGGUUUGAAGCUGCUUCxxxxxxxxxxCUGAACCUACGAGUACACCGACUACGGCGGACUAAUCUUCAACUCCUACAUACUUCCCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[110.83329773 276.76669312]
[110.83329773 261.76669312]
[110.83329773 246.76669312]
[110.83329773 231.76669312]
[110.83329773 216.76669312]
[110.83329773 201.76669312]
[110.83329773 186.76669312]
[110.83329773 171.76669312]
[110.83329773 156.76669312]
[110.83329773 141.76669312]
[106.97614288 127.27110291]
[90.25019836 126.40682983]
[76.97571564 116.19449615]
[62.85091019 121.24324799]
[48.72610474 126.29200745]
[34.60130310 131.34075928]
[20.47650146 136.38951111]
[6.35169744 141.43827820]
[-7.77310562 146.48703003]
[-21.89790916 151.53578186]
[-36.02271271 156.58454895]
[-50.14751434 161.63330078]
[-64.27231598 166.68205261]
[-65.82853699 181.86563110]
[-73.82585907 194.86584473]
[-86.67642212 203.10148621]
[-101.82872009 204.93737793]
[-116.27426910 200.00900269]
[-127.14488220 189.29487610]
[-132.28219604 174.92230225]
[-130.66619873 159.74497986]
[-122.61774445 146.77636719]
[-109.73485565 138.59138489]
[-94.57543945 136.81517029]
[-80.14941406 141.80039978]
[-69.32107544 152.55725098]
[-55.19626999 147.50849915]
[-41.07146835 142.45974731]
[-26.94666481 137.41098022]
[-12.82186222 132.36222839]
[1.30294120 127.31346893]
[15.42774391 122.26471710]
[29.55254745 117.21595764]
[43.67734909 112.16720581]
[57.80215454 107.11844635]
[71.92695618 102.06968689]
[71.69493866 91.19147491]
[75.72856140 80.49308777]
[83.82719421 71.65591431]
[95.12881470 66.22113800]
[92.03049469 51.54461670]
[81.63996887 43.83158112]
[79.38883209 31.49661827]
[85.95151520 21.28689003]
[83.15918732 6.54908419]
[80.36686707 -8.18872166]
[77.57453918 -22.92652702]
[74.78221130 -37.66433334]
[71.98989105 -52.40214157]
[67.38432312 -66.67759705]
[61.03719711 -80.26855469]
[54.69006729 -93.85950470]
[48.34293747 -107.45045471]
[36.16236877 -119.24324799]
[44.12238312 -134.21237183]
[60.71005249 -130.70730591]
[61.93388748 -113.79758453]
[68.28102112 -100.20663452]
[74.62815094 -86.61568451]
[80.97527313 -73.02472687]
[83.73253632 -87.76913452]
[92.51685333 -99.92790985]
[105.64901733 -107.17678070]
[120.61869812 -108.13005066]
[134.56428528 -102.60549927]
[144.81994629 -91.65920258]
[149.42520142 -77.38364410]
[147.49971008 -62.50773621]
[139.41156006 -49.87516403]
[126.70687866 -41.90076828]
[111.81428528 -40.10892868]
[97.58065033 -44.84217072]
[86.72769928 -55.19446564]
[89.52001953 -40.45665741]
[92.31234741 -25.71885300]
[95.10466766 -10.98104668]
[97.89699554 3.75675941]
[100.68931580 18.49456596]
[112.84241486 31.11606598]
[106.70702362 48.44629288]
[109.80534363 63.12281799]
[123.26130676 69.75131989]
[136.78549194 63.26315308]
[150.30969238 56.77498627]
[159.40536499 43.82975388]
[174.22717285 45.30069351]
[183.32284546 32.35545731]
[198.14465332 33.82639694]
[211.66883850 27.33823204]
[225.19302368 20.85006523]
[233.99946594 7.01609993]
[250.36930847 7.99594831]
[257.46267700 22.78162766]
[247.98249817 36.16289902]
[231.68119812 34.37425613]
[218.15699768 40.86242294]
[204.63281250 47.35058594]
[196.50447083 59.83174515]
[180.71533203 58.82488251]
[172.58699036 71.30603790]
[156.79785156 70.29917908]
[143.27366638 76.78734589]
[129.74946594 83.27550507]
[130.85789490 104.17285919]
[119.99244690 119.81619263]
[120.40433502 104.82184601]
[124.19942474 90.30987549]
[131.18074036 77.03353119]
[140.98591614 65.68193817]
[153.10598755 56.84430695]
[166.91186523 50.97935867]
[181.68695068 48.39151764]
[196.66432190 49.21511078]
[211.06657410 53.40738678]
[224.14614868 60.75074005]
[235.22412109 70.86401367]
[243.72550964 83.22226715]
[249.20903015 97.18403625]
[251.39004517 112.02462769]
[250.15536499 126.97373199]
[245.56907654 141.25538635]
[237.86921692 154.12832642]
[227.45547485 164.92433167]
[214.86836243 173.08305359]
[200.76124573 178.18099976]
[185.86634827 179.95355225]
[170.95680237 178.30873108]
[156.80650330 173.33187866]
[144.14993286 165.28132629]
[133.64404297 154.57496643]
[125.83329773 141.76669312]
[125.83329773 156.76669312]
[125.83329773 171.76669312]
[125.83329773 186.76669312]
[125.83329773 201.76669312]
[125.83329773 216.76669312]
[125.83329773 231.76669312]
[125.83329773 246.76669312]
[125.83329773 261.76669312]
[125.83329773 276.76669312]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 115]
[13 46]
[14 45]
[15 44]
[16 43]
[17 42]
[18 41]
[19 40]
[20 39]
[21 38]
[22 37]
[23 36]
[50 91]
[51 90]
[54 88]
[55 87]
[56 86]
[57 85]
[58 84]
[59 83]
[60 70]
[61 69]
[62 68]
[63 67]
[92 113]
[93 112]
[94 111]
[96 109]
[98 107]
[99 106]
[100 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
