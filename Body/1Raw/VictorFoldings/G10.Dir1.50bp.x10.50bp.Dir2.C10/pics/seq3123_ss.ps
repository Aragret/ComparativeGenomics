%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUCAUCUCAACUUAGUAUUAUACCCACACCCACCCAAGAACAGGGUUUGUUAAGAUGGCAGxxxxxxxxxxAAAAGCUAUUACCUAAAACAAUUUCACAGCACCAAAUCUCCACCUCCAUCAUCACCUCAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 290.41094971]
[92.50000000 275.41094971]
[92.50000000 260.41094971]
[92.50000000 245.41094971]
[92.50000000 230.41094971]
[92.50000000 215.41094971]
[92.50000000 200.41094971]
[92.50000000 185.41094971]
[92.50000000 170.41094971]
[92.50000000 155.41094971]
[83.55396271 153.44297791]
[75.04926300 150.04083252]
[67.21412659 145.29580688]
[60.25881958 139.33525085]
[54.36998367 132.31912231]
[49.70565414 124.43568420]
[46.39100266 115.89649963]
[44.51496887 106.93073273]
[29.51576042 106.77673340]
[14.51655197 106.62273407]
[27.28886414 114.48835754]
[37.52080536 125.45683289]
[44.48108673 138.74421692]
[47.67223740 153.40083313]
[46.86618423 168.37916565]
[42.12054062 182.60867310]
[33.77447891 195.07234192]
[22.42451286 204.87939453]
[8.88183975 211.32888794]
[-5.88562155 213.95988464]
[-20.82241631 212.58430481]
[-34.86098480 207.30050659]
[-46.99796677 198.48611450]
[-56.36591339 186.77108765]
[-62.29528046 172.99275208]
[-64.36228180 158.13584900]
[-62.41919708 143.26223755]
[-56.60488892 129.43495178]
[-47.33492279 117.64225769]
[-35.27183914 108.72698975]
[-21.27780151 103.32634735]
[-6.35743475 101.82616425]
[-19.91933060 95.41719055]
[-33.48122787 89.00821686]
[-47.04312515 82.59923553]
[-61.17275238 89.29905701]
[-76.29010010 85.29907227]
[-85.25720978 72.48795319]
[-83.84009552 56.91471100]
[-72.70787048 45.93255997]
[-57.11683273 44.72694016]
[-44.42859268 53.86709976]
[-40.63414764 69.03733826]
[-27.07225227 75.44631958]
[-13.51035500 81.85529327]
[0.05154097 88.26426697]
[14.67054844 91.62352753]
[29.66975784 91.77752686]
[44.66896820 91.93151855]
[53.09297180 69.56393433]
[70.08747101 52.75738907]
[92.54736328 44.58266068]
[116.36894226 46.53336334]
[137.19970703 58.25308609]
[148.59078979 48.49380875]
[159.98185730 38.73453522]
[171.37294006 28.97525978]
[182.76400757 19.21598625]
[174.24040222 6.85613489]
[167.05548096 -6.32697868]
[161.28793335 -20.18891335]
[157.00097656 -34.57778931]
[154.24159241 -49.33595276]
[153.03997803 -64.30171204]
[153.40931702 -79.31108093]
[155.34558105 -94.19962311]
[158.82751465 -108.80420685]
[163.81701660 -122.96480560]
[170.25936890 -136.52629089]
[178.08403015 -149.34004211]
[187.20524597 -161.26570129]
[197.52307129 -172.17257690]
[208.92446899 -181.94119263]
[221.28453064 -190.46449280]
[234.46781921 -197.64909363]
[248.32989502 -203.41630554]
[262.71887207 -207.70291138]
[277.47711182 -210.46194458]
[292.44290161 -211.66319275]
[307.45227051 -211.29347229]
[322.34075928 -209.35685730]
[336.94525146 -205.87455750]
[351.10574341 -200.88473511]
[364.66705322 -194.44203186]
[377.48062134 -186.61706543]
[389.40606689 -177.49557495]
[400.31268311 -167.17747498]
[410.08102417 -155.77583313]
[418.60400391 -143.41557312]
[425.78829956 -130.23210144]
[431.55517578 -116.36988831]
[435.84143066 -101.98080444]
[438.60009766 -87.22250366]
[439.80099487 -72.25669098]
[439.43090820 -57.24733734]
[437.49392700 -42.35889053]
[434.01129150 -27.75448036]
[429.02111816 -13.59411812]
[422.57809448 -0.03295403]
[414.75280762 12.78042889]
[405.63101196 24.70563889]
[395.31265259 35.61201859]
[383.91076660 45.38006973]
[371.55029297 53.90277100]
[358.36666870 61.08674240]
[344.50430298 66.85327148]
[330.11511230 71.13917542]
[315.35675049 73.89749908]
[300.39089966 75.09801483]
[285.38156128 74.72757721]
[270.49316406 72.79023743]
[255.88883972 69.30722809]
[241.72859192 64.31670380]
[228.16758728 57.87335205]
[215.35440063 50.04776764]
[203.42941284 40.92568588]
[192.52328491 30.60705948]
[181.13220215 40.36633301]
[169.74113464 50.12561035]
[158.35006714 59.88488388]
[146.95898438 69.64415741]
[151.36286926 77.89843750]
[154.32888794 86.77143097]
[155.77401733 96.01474762]
[155.65780640 105.36962891]
[153.98348999 114.57419586]
[150.79794312 123.37076569]
[146.19035339 131.51309204]
[140.28970337 138.77322388]
[133.26118469 144.94793701]
[125.30152893 149.86437988]
[116.63359070 153.38490295]
[107.50000000 155.41094971]
[107.50000000 170.41094971]
[107.50000000 185.41094971]
[107.50000000 200.41094971]
[107.50000000 215.41094971]
[107.50000000 230.41094971]
[107.50000000 245.41094971]
[107.50000000 260.41094971]
[107.50000000 275.41094971]
[107.50000000 290.41094971]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[18 59]
[19 58]
[20 57]
[42 56]
[43 55]
[44 54]
[45 53]
[64 131]
[65 130]
[66 129]
[67 128]
[68 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
