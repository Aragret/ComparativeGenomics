%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUCUUCAGCAAACCCUGAUGAAGGCUACAAAGUAAGCGCAAGUACCCACGUAAAGACGUUxxxxxxxxxxUACCACUCACCCUAGCAUUACUUAUAUGAUAUGUCUCCAUACCCAUUACAAUCUCCAGCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[107.05073547 282.26913452]
[107.05073547 267.26913452]
[107.05073547 252.26913452]
[107.05073547 237.26913452]
[107.05073547 222.26913452]
[107.05073547 207.26913452]
[107.05073547 192.26913452]
[107.05073547 177.26913452]
[107.05073547 162.26913452]
[107.05073547 147.26913452]
[92.91770172 144.62734985]
[80.98852539 138.09965515]
[72.22206116 128.74459839]
[59.95969009 137.38371277]
[47.69732285 146.02282715]
[35.43495178 154.66194153]
[23.17258453 163.30107117]
[16.34729385 177.57432556]
[1.48663259 178.57931519]
[-10.77573586 187.21842957]
[-14.92163086 202.71652222]
[-29.68053818 209.00573730]
[-43.73068619 201.26152039]
[-46.29400253 185.42457581]
[-35.40413284 173.64364624]
[-19.41485214 174.95605469]
[-7.15248346 166.31694031]
[-1.20427966 152.66160583]
[14.53346920 151.03869629]
[26.79583740 142.39958191]
[39.05820465 133.76046753]
[51.32057190 125.12134552]
[63.58294296 116.48223114]
[60.75084686 107.57430267]
[60.06491089 98.25220490]
[61.56264496 89.02568054]
[65.16214752 80.39923096]
[70.66659546 72.84456635]
[77.77500916 66.77477264]
[86.09869385 62.52173996]
[83.61357880 47.72903442]
[81.12845612 32.93632889]
[78.64334106 18.14361954]
[76.15821838 3.35091257]
[73.67310333 -11.44179440]
[63.61242676 -19.58038139]
[61.87635040 -31.99831390]
[68.85806274 -41.92620468]
[66.68122101 -56.76741028]
[57.02311707 -69.29863739]
[62.83149338 -83.01403046]
[60.65465927 -97.85523224]
[37.28275299 -102.58410645]
[17.90662575 -116.42372131]
[5.88738155 -136.93885803]
[3.29585648 -160.53933716]
[10.55586243 -183.10832214]
[26.37518311 -200.72044373]
[19.19267273 -213.88902283]
[12.01016426 -227.05760193]
[4.82765579 -240.22619629]
[-9.44544601 -248.30149841]
[-9.31798553 -264.70016479]
[5.07891607 -272.55261230]
[18.93496132 -263.78094482]
[17.99623871 -247.40869141]
[25.17874718 -234.24011230]
[32.36125565 -221.07153320]
[39.54376602 -207.90295410]
[47.14533997 -210.24630737]
[55.00311661 -211.50273132]
[62.96242142 -211.64662170]
[70.86646271 -210.67431641]
[78.55942535 -208.60411072]
[85.88951874 -205.47599792]
[92.71200562 -201.35081482]
[98.89203644 -196.30911255]
[104.30732727 -190.44956970]
[108.85057068 -183.88703918]
[112.43156433 -176.75033569]
[114.97899628 -169.17968750]
[116.44189453 -161.32397461]
[116.79058838 -153.33779907]
[116.01737976 -145.37846375]
[114.13665771 -137.60287476]
[111.18465424 -130.16439819]
[107.21873474 -123.20989990]
[102.31630707 -116.87680817]
[96.57328033 -111.29040527]
[90.10221863 -106.56136322]
[83.03009796 -102.78353119]
[75.49586487 -100.03207397]
[77.67269897 -85.19086456]
[87.17510223 -73.72118378]
[81.52243042 -58.94424820]
[83.69926453 -44.10304260]
[95.31680298 -30.98691750]
[88.46581268 -13.92691326]
[90.95092773 0.86579406]
[93.43605042 15.65850163]
[95.92116547 30.45120811]
[98.40628815 45.24391556]
[100.89140320 60.03662109]
[124.94654846 65.49362183]
[142.58155823 84.88146210]
[146.15495300 112.40177917]
[161.05685425 114.11447144]
[175.95875549 115.82716370]
[192.63951111 108.09848785]
[206.34188843 119.01841736]
[221.27619934 120.42071533]
[236.21051025 121.82302094]
[251.14482117 123.22532654]
[265.81759644 115.90126038]
[279.34570312 125.17068481]
[277.81259155 141.49801636]
[262.79537964 148.08708191]
[249.74250793 138.15963745]
[234.80821228 136.75732422]
[219.87390137 135.35502625]
[204.93959045 133.95272827]
[195.38810730 141.44113159]
[182.89669800 140.35301208]
[174.24607849 130.72906494]
[159.34417725 129.01637268]
[144.44226074 127.30368805]
[138.84439087 132.29504395]
[151.10092163 140.94242859]
[163.35746765 149.58981323]
[178.24002075 151.46316528]
[189.73910522 161.09494019]
[194.19332886 175.41835022]
[190.18446350 189.87272644]
[178.98893738 199.85571289]
[164.17147827 202.18870544]
[150.45002747 196.12882996]
[142.19358826 183.60560608]
[142.03138733 168.60525513]
[134.83999634 155.44151306]
[127.64862061 142.27777100]
[122.05073547 147.26913452]
[122.05073547 162.26913452]
[122.05073547 177.26913452]
[122.05073547 192.26913452]
[122.05073547 207.26913452]
[122.05073547 222.26913452]
[122.05073547 237.26913452]
[122.05073547 252.26913452]
[122.05073547 267.26913452]
[122.05073547 282.26913452]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[13 33]
[14 32]
[15 31]
[16 30]
[17 29]
[19 27]
[20 26]
[40 103]
[41 102]
[42 101]
[43 100]
[44 99]
[45 98]
[48 96]
[49 95]
[51 93]
[52 92]
[58 69]
[59 68]
[60 67]
[61 66]
[106 126]
[107 125]
[108 124]
[110 121]
[111 120]
[112 119]
[113 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
