%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCUGGCCCAACCCGUCAUCUACUCUACCAUCUUUGCAGGCACACUCAUCACAGCGCUAAxxxxxxxxxxCUUAUGAGCGGGCACAGUGAUUAUAGGCUUUCGCUCUAAGAUUAAAAAUGCCCUAGCCCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.31270599 235.25054932]
[95.00064850 220.25379944]
[94.68859100 205.25704956]
[94.37653351 190.26029968]
[94.06447601 175.26353455]
[93.75242615 160.26678467]
[93.44036865 145.27003479]
[93.12831116 130.27328491]
[92.81625366 115.27652740]
[85.49714661 102.18337250]
[72.88601685 94.06182861]
[60.27489090 85.94028473]
[47.66376495 77.81874084]
[32.98723984 74.72042084]
[18.16948128 77.05152893]
[3.37677336 79.53664398]
[-11.38928223 82.17550659]
[-26.15533829 84.81437683]
[-40.86330032 87.75985718]
[-55.50680161 91.01068115]
[-70.15029907 94.26150513]
[-70.79342651 109.33628082]
[-75.31719971 123.73065186]
[-83.41318512 136.46318054]
[-94.52938843 146.66575623]
[-107.90788269 153.64273071]
[-122.63650513 156.91842651]
[-137.71102905 156.26948547]
[-152.10365295 151.74015808]
[-164.83305359 143.63925171]
[-175.03134155 132.51910400]
[-182.00315857 119.13791656]
[-185.27316284 104.40803528]
[-184.61839294 89.33376312]
[-180.08349609 74.94289398]
[-171.97769165 62.21661377]
[-160.85360718 52.02262878]
[-147.46972656 45.05598068]
[-132.73858643 41.79166412]
[-117.66456604 42.45225143]
[-103.27544403 46.99269485]
[-90.55229950 55.10342407]
[-80.36260986 66.23143768]
[-73.40113068 79.61800385]
[-58.75762558 76.36717987]
[-44.11412430 73.11635590]
[-40.81062698 69.58613586]
[-35.23184204 68.13408661]
[-28.79420280 70.04831696]
[-14.02814674 67.40945435]
[0.73790908 64.77059174]
[6.80837345 60.46999359]
[15.83837700 62.23376846]
[30.65613556 59.90266418]
[39.42234039 47.73082733]
[36.93722153 32.93812180]
[34.45210648 18.14541245]
[31.96698570 3.35270572]
[29.48186684 -11.44000149]
[14.44860363 -12.56446552]
[0.12150022 -17.25461769]
[-12.66648483 -25.23777962]
[-23.17187500 -36.04981995]
[-30.78389931 -49.06214142]
[-35.06000519 -63.51822662]
[-35.75158691 -78.57761383]
[-32.81843185 -93.36476898]
[-26.43107796 -107.01999664]
[-16.96087074 -118.74938965]
[-4.95839882 -127.87101746]
[8.87853050 -133.85455322]
[23.74545670 -136.35214233]
[38.77803421 -135.21856689]
[53.10229492 -130.51972961]
[65.88543701 -122.52881622]
[76.38426971 -111.71041107]
[83.98840332 -98.69347382]
[88.25574493 -84.23480225]
[88.93819427 -69.17499542]
[85.99607849 -54.38962173]
[79.60044861 -40.73827362]
[70.12313080 -29.01462555]
[58.11513138 -19.90027618]
[44.27457428 -13.92512035]
[46.75969315 0.86758721]
[49.24481201 15.66029453]
[51.72993088 30.45300102]
[54.21504974 45.24570847]
[57.75912094 55.76717758]
[55.78530502 65.20761871]
[68.39643097 73.32915497]
[81.00756073 81.45069885]
[93.61869049 89.57224274]
[104.00765228 80.24807739]
[122.83576965 83.65353394]
[137.82847595 83.18549347]
[151.38049316 75.02135468]
[164.34300232 82.35776520]
[173.76368713 73.48620605]
[186.30229187 73.44019318]
[195.19825745 81.69665527]
[210.19744873 81.54061890]
[225.19662476 81.38458252]
[240.17634583 80.60474396]
[255.11065674 79.20243835]
[270.04495239 77.80013275]
[284.96386719 76.24255371]
[299.86578369 74.52986145]
[312.70928955 64.33300781]
[327.86032104 70.60824585]
[329.73275757 86.90014648]
[316.40042114 96.44899750]
[301.57846069 89.43176270]
[286.67657471 91.14445496]
[280.34967041 95.05802917]
[271.44726562 92.73444366]
[256.51296997 94.13674164]
[241.57864380 95.53904724]
[239.67510986 97.68004608]
[236.78155518 99.17045593]
[233.15103149 99.61893463]
[229.17704773 98.73654938]
[225.35266113 96.38377380]
[210.35348511 96.53981018]
[195.35429382 96.69584656]
[180.79161072 106.43897247]
[164.81103516 97.35045624]
[152.33139038 105.48111725]
[138.29650879 98.17819214]
[123.30381775 98.64623260]
[136.68553162 105.42337036]
[151.63500977 106.65348816]
[163.62944031 115.66090393]
[168.97888184 129.67459106]
[166.03764343 144.38340759]
[155.71055603 155.26234436]
[141.17463684 158.96463013]
[126.90167999 154.35130310]
[117.28260803 142.84159851]
[115.27668762 127.97575378]
[107.81301117 114.96446991]
[108.12506104 129.96122742]
[108.43711853 144.95797729]
[108.74917603 159.95472717]
[109.06123352 174.95147705]
[109.37329102 189.94824219]
[109.68534851 204.94499207]
[109.99739838 219.94174194]
[110.30945587 234.93849182]
[112.90045929 254.14622498]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 93]
[11 92]
[12 91]
[13 90]
[14 54]
[15 53]
[16 51]
[17 50]
[18 49]
[19 46]
[20 45]
[21 44]
[55 88]
[56 87]
[57 86]
[58 85]
[59 84]
[95 130]
[96 129]
[98 127]
[101 125]
[102 124]
[103 123]
[104 118]
[105 117]
[106 116]
[107 114]
[108 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
