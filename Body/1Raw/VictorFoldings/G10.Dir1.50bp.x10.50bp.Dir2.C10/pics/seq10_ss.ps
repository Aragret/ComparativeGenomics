%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAUCACCCUAUUAACCACUCACGGGAGCUCUCCAUGCAUUUGGUAUUUUCGUCUGGGGGxxxxxxxxxxCCAGCACCACGACCCUACUACUAUCUCGCACCUGAAACAAGCUAACAUGACUAACACCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[86.23828125 265.44519043]
[85.92622375 250.44844055]
[85.61416626 235.45169067]
[85.30210876 220.45494080]
[84.99005890 205.45817566]
[84.67800140 190.46142578]
[84.36594391 175.46467590]
[84.05388641 160.46792603]
[83.74182892 145.47116089]
[70.57324982 138.28865051]
[57.79589081 146.14608765]
[45.01853180 154.00350952]
[43.03507996 158.03182983]
[40.14180374 160.89540100]
[36.83029556 162.44967651]
[33.58751297 162.72958374]
[30.83606720 161.93153381]
[17.44978333 168.69966125]
[4.06349802 175.46777344]
[5.24374199 190.62281799]
[0.52980697 205.07437134]
[-9.35946655 216.61866760]
[-22.91603661 223.49528503]
[-38.07262421 224.65557861]
[-52.51795578 219.92263794]
[-64.04923248 210.01818848]
[-70.90801239 196.45259094]
[-72.04837799 181.29449463]
[-67.29644012 166.85539246]
[-57.37682724 155.33715820]
[-43.80221558 148.49623108]
[-28.64262772 147.37580872]
[-14.20979404 152.14672852]
[-2.70461702 162.08148193]
[10.68166828 155.31336975]
[24.06795311 148.54525757]
[37.16110611 141.22615051]
[49.93846512 133.36872864]
[62.71582031 125.51129913]
[56.08482361 104.93206024]
[59.81869125 84.11905670]
[72.60194397 67.87672424]
[91.08393097 59.74058533]
[110.74672699 61.21179199]
[117.37522888 47.75582504]
[124.00372314 34.29985809]
[130.63221741 20.84389305]
[130.57746887 14.12790489]
[133.51901245 9.17022705]
[137.82659912 6.97472763]
[145.00910950 -6.19385481]
[144.82449341 -22.01398468]
[157.71134949 -29.48244476]
[157.52673340 -45.30257416]
[170.41358948 -52.77103424]
[166.18013000 -67.76154327]
[173.65179443 -81.01404572]
[187.96905518 -84.95762634]
[195.15156555 -98.12621307]
[202.33407593 -111.29479218]
[209.51658630 -124.46337891]
[213.82415771 -138.83155823]
[215.07104492 -153.77964783]
[216.31791687 -168.72773743]
[217.40922546 -183.68798828]
[218.34484863 -198.65878296]
[219.28048706 -213.62956238]
[212.41903687 -227.88548279]
[220.93513489 -240.10536194]
[207.13958740 -246.43365479]
[196.56448364 -257.32086182]
[190.63999939 -271.29458618]
[190.16737366 -286.46499634]
[195.21055603 -300.78039551]
[205.08746338 -312.30477905]
[218.46232605 -319.47952271]
[233.52633667 -321.33435059]
[248.24217224 -317.61837769]
[260.61965942 -308.83416748]
[268.98483276 -296.16973877]
[272.20639038 -281.33779907]
[269.84863281 -266.34429932]
[262.23040771 -253.21694946]
[250.38204956 -243.73114014]
[235.90592957 -239.16972351]
[242.83428955 -225.98461914]
[234.25126648 -212.69393921]
[233.31564331 -197.72314453]
[232.38002014 -182.75234985]
[235.11949158 -175.83564758]
[231.26600647 -167.48086548]
[230.01911926 -152.53277588]
[228.77224731 -137.58468628]
[237.61059570 -149.70423889]
[249.45657349 -158.90603638]
[263.38571167 -164.47193909]
[278.31094360 -165.96759033]
[293.06753540 -163.27626038]
[306.50384521 -156.60800171]
[317.57128906 -146.48320007]
[325.40615845 -133.69200134]
[329.39700317 -119.23264313]
[329.23242188 -104.23354340]
[324.92520142 -89.86524963]
[316.81149292 -77.24907684]
[305.52450562 -67.36959839]
[291.94509888 -60.99781418]
[277.13299561 -58.63098907]
[262.24417114 -60.45383072]
[248.44055176 -66.32408142]
[236.79937744 -75.78362274]
[228.22912598 -88.09423065]
[223.39865112 -102.29515839]
[222.68516541 -117.28086853]
[215.50265503 -104.11228943]
[208.32014465 -90.94370270]
[201.13763428 -77.77512360]
[205.57397461 -63.60280609]
[198.47747803 -50.14567566]
[183.58218384 -45.58852386]
[184.28054810 -30.71030045]
[170.87994385 -22.29993439]
[171.57830811 -7.42171097]
[158.17768860 0.98865414]
[150.99519348 14.15723705]
[144.08819580 27.47239304]
[137.45968628 40.92835617]
[130.83119202 54.38432312]
[124.20269012 67.84028625]
[130.69458008 73.33386993]
[135.94558716 80.13262177]
[139.69471741 87.95740509]
[141.74348450 96.47724915]
[141.96620178 105.32328796]
[140.31704712 114.10473633]
[136.83366394 122.42617035]
[131.63711548 129.90530396]
[124.92789459 136.19053650]
[116.97836304 140.97738647]
[108.12184143 144.02319336]
[98.73858643 145.15910339]
[99.05064392 160.15586853]
[99.36269379 175.15261841]
[99.67475128 190.14936829]
[99.98680878 205.14611816]
[100.29886627 220.14288330]
[100.61092377 235.13963318]
[100.92298126 250.13638306]
[101.23503113 265.13314819]
[103.82603455 284.34085083]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 39]
[11 38]
[12 37]
[17 36]
[18 35]
[19 34]
[44 129]
[45 128]
[46 127]
[47 126]
[50 125]
[51 124]
[53 122]
[55 120]
[58 117]
[59 116]
[60 115]
[61 114]
[62 93]
[63 92]
[64 91]
[65 89]
[66 88]
[67 87]
[69 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
