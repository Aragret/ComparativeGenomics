%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACGAUCAAAAGGAACAAGCAUCAAGCACGCAGCAAUGCAGCUCAAAACGCUUAGCCUAGxxxxxxxxxxCCCCUAGGAAUCACCUCCCAUUCCGAUAAAAUCACCUUCCACCCUUACUACACAAUCAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[128.83865356 432.52243042]
[128.83865356 417.52243042]
[128.83865356 402.52243042]
[128.83865356 387.52243042]
[128.83865356 372.52243042]
[128.83865356 357.52243042]
[128.83865356 342.52243042]
[128.83865356 327.52243042]
[128.83865356 312.52243042]
[128.83865356 297.52243042]
[111.88775635 293.06503296]
[96.81726074 284.09188843]
[84.80368042 271.29547119]
[76.78709412 255.66708374]
[73.39761353 238.42004395]
[74.90578461 220.89543152]
[81.20108795 204.45783997]
[91.79994202 190.38916016]
[105.88289642 179.78855896]
[122.35794067 173.48663330]
[120.80035400 158.56771851]
[119.24277496 143.64881897]
[117.68519592 128.72990417]
[100.43759918 132.29621887]
[84.54006958 126.71002960]
[74.28987122 114.30928802]
[72.02664185 99.15014648]
[57.70404053 94.69332886]
[43.38144684 90.23651123]
[29.05884743 85.77970123]
[16.48583031 97.97867584]
[-0.43829310 102.14682770]
[-17.06854820 97.23223877]
[-28.88695335 84.66326904]
[-32.72988510 67.93496704]
[-47.22548294 64.07780457]
[-61.72108078 60.22064590]
[-73.29261780 66.01316833]
[-85.31630707 62.45649719]
[-91.46652985 51.99312973]
[-105.87874603 47.83523941]
[-120.29096222 43.67735291]
[-136.07066345 48.14199066]
[-147.63676453 36.51626587]
[-143.09104919 20.75972748]
[-127.10975647 17.08135223]
[-116.13307953 29.26513672]
[-101.72086334 33.42302322]
[-87.30864716 37.58091354]
[-70.56140900 32.43017960]
[-57.86392212 45.72505188]
[-43.36832428 49.58221054]
[-28.87272644 53.43936920]
[-20.91869354 43.53316116]
[-9.75701618 37.36793900]
[2.95647383 35.89899826]
[15.32021809 39.38189316]
[25.47134018 47.32883453]
[31.86632347 58.57669067]
[33.51566315 71.45709991]
[47.83826065 75.91391754]
[62.16085815 80.37073517]
[76.48345184 84.82755280]
[81.23609161 79.23592377]
[87.27890778 75.07200623]
[94.19640350 72.62210083]
[95.13202667 57.65130997]
[96.06765747 42.68051529]
[97.00328827 27.70972633]
[97.93891907 12.73893452]
[84.42057800 5.72648668]
[74.92825317 -6.18215418]
[71.10655212 -20.92374420]
[73.61760712 -35.94421387]
[82.02635193 -48.64117813]
[94.87593079 -56.81480789]
[109.94007111 -59.04897308]
[124.60882568 -54.95659256]
[136.34074402 -45.24669266]
[143.10317993 -31.60157967]
[143.72453308 -16.38534355]
[138.09713745 -2.23429346]
[127.19596100 8.39981651]
[112.90970612 13.67456245]
[111.97407532 28.64535332]
[111.03845215 43.61614609]
[110.10282135 58.58693695]
[109.16719055 73.55773163]
[123.57366943 80.08224487]
[133.27310181 94.42559052]
[145.53546143 85.78647614]
[157.79783630 77.14735413]
[155.24069214 62.09997177]
[159.47384644 47.43562317]
[169.65681458 36.06592941]
[183.76774597 30.24834633]
[199.00491333 31.13796234]
[212.34297180 38.55814362]
[221.13363647 51.03561020]
[223.63150024 66.09294891]
[219.34062195 80.74050903]
[209.11296082 92.07002258]
[194.97923279 97.83198547]
[179.74568176 96.88237762]
[166.43695068 89.40972900]
[154.17459106 98.04884338]
[141.91221619 106.68795776]
[156.81527710 104.98531342]
[170.25541687 98.32479095]
[185.20497131 97.09572601]
[199.55247498 101.47170258]
[211.27146912 110.83467102]
[218.70677185 123.86219025]
[220.80822754 138.71426392]
[217.27899170 153.29316711]
[208.61758423 165.53979492]
[196.04730225 173.72441101]
[181.34358215 176.69104004]
[166.58319092 174.02066040]
[153.85089111 166.09043884]
[144.94497681 154.02044678]
[141.12351990 139.51815796]
[132.60411072 127.17231750]
[134.16168213 142.09123230]
[135.71926880 157.01014709]
[137.27685547 171.92906189]
[149.84489441 173.41146851]
[161.86038208 177.36500549]
[172.84278870 183.62908936]
[182.35339355 191.95072937]
[190.01283264 201.99482727]
[195.51617432 213.35765076]
[198.64514160 225.58302307]
[199.27670288 238.18069458]
[197.38790894 250.64593506]
[193.05677795 262.47982788]
[186.45901489 273.20919800]
[177.86090088 282.40548706]
[167.60856628 289.70202637]
[156.11401367 294.80847168]
[143.83865356 297.52243042]
[143.83865356 312.52243042]
[143.83865356 327.52243042]
[143.83865356 342.52243042]
[143.83865356 357.52243042]
[143.83865356 372.52243042]
[143.83865356 387.52243042]
[143.83865356 402.52243042]
[143.83865356 417.52243042]
[143.83865356 432.52243042]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[20 126]
[21 125]
[22 124]
[23 123]
[27 63]
[28 62]
[29 61]
[30 60]
[35 53]
[36 52]
[37 51]
[40 49]
[41 48]
[42 47]
[66 88]
[67 87]
[68 86]
[69 85]
[70 84]
[90 107]
[91 106]
[92 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
