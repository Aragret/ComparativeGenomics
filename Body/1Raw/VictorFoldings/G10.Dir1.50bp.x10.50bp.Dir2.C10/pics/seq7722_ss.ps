%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCCCUUACCAUCAAAUCAAUUGGCCACCAAUGGUACUGAACCUACGAGUACACCGACUAxxxxxxxxxxCCAGAACGCCUGAACGCAGGCACAUACUUCCUAUUCUACACCCUAGUAGGCUCCCUUCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[112.20403290 255.95153809]
[112.20403290 240.95153809]
[112.20403290 225.95153809]
[112.20403290 210.95153809]
[112.20403290 195.95153809]
[112.20403290 180.95153809]
[112.20403290 165.95153809]
[112.20403290 150.95153809]
[112.20403290 135.95153809]
[112.20403290 120.95153809]
[96.42791748 120.92818451]
[86.13019562 111.80728149]
[71.71797943 115.96516418]
[66.58610535 128.46002197]
[55.34754562 135.59603882]
[42.24599457 134.94515991]
[32.07699966 126.97093201]
[17.58140564 130.82809448]
[3.08580804 134.68525696]
[-11.40978813 138.54240417]
[-25.90538597 142.39956665]
[-12.39361095 148.91355896]
[-4.42251825 161.62031555]
[-4.43833399 176.62030029]
[-12.43620491 189.31022644]
[-25.96168518 195.79570007]
[-40.86397934 194.08641052]
[-52.56976318 184.70692444]
[-57.48667908 170.53569031]
[-54.10578918 155.92167664]
[-43.46393967 145.34933472]
[-58.42419052 146.44065857]
[-73.38443756 147.53196716]
[-88.34468842 148.62327576]
[-103.70195007 155.80595398]
[-114.85523987 143.03721619]
[-105.67304993 128.78506470]
[-89.43599701 133.66302490]
[-74.47574615 132.57171631]
[-59.51549911 131.48040771]
[-44.55525208 130.38909912]
[-29.76254463 127.90397644]
[-15.26694775 124.04681396]
[-0.77135128 120.18965149]
[13.72424507 116.33249664]
[28.21984100 112.47533417]
[35.99398041 97.59512329]
[52.43960190 92.81750488]
[67.56009674 101.55294800]
[81.97231293 97.39506531]
[97.30158997 78.94133759]
[122.34792328 90.59384155]
[131.36544800 78.60700989]
[140.38298035 66.62017822]
[149.40051270 54.63334274]
[158.41804504 42.64651108]
[165.32504272 29.33135414]
[169.93060303 15.05589390]
[174.53616333 0.78043342]
[179.14172363 -13.49502754]
[183.74729919 -27.77048874]
[173.22821045 -34.66652679]
[165.33717346 -45.02896500]
[161.20977783 -57.85313797]
[161.59742737 -71.76696014]
[166.75088501 -85.17742157]
[176.35920715 -96.45287323]
[189.55497742 -104.12026978]
[189.86703491 -119.11701965]
[176.06869507 -125.56105804]
[166.08920288 -137.06452942]
[161.65757751 -151.63436890]
[163.54162598 -166.74629211]
[171.41491699 -179.78205872]
[183.91336060 -188.48313904]
[198.87153625 -191.34202576]
[213.69783020 -187.86337280]
[225.82350159 -178.64991760]
[233.14770508 -165.29791260]
[234.40148926 -150.12069702]
[229.36763000 -135.74780273]
[218.91824341 -124.66943359]
[204.86378479 -118.80496216]
[204.55172729 -103.80821228]
[211.44291687 -100.84822845]
[223.46076965 -109.82438660]
[225.22529602 -94.92826843]
[232.11650085 -91.96828461]
[242.77812195 -102.51957703]
[253.43974304 -113.07086182]
[264.10137939 -123.62215424]
[274.76300049 -134.17344666]
[278.56546021 -150.12565613]
[294.35687256 -154.54878235]
[305.89233398 -142.89266968]
[301.30520630 -127.14814758]
[285.31430054 -123.51181793]
[274.65264893 -112.96053314]
[263.99102783 -102.40924072]
[253.32940674 -91.85794830]
[242.66778564 -81.30665588]
[245.63778687 -57.34735489]
[236.23860168 -36.47449112]
[218.38551331 -24.24340057]
[198.02275085 -23.16492271]
[193.41719055 -8.88946247]
[188.81163025 5.38599777]
[184.20606995 19.66145897]
[179.60049438 33.93692017]
[191.15037537 24.36611176]
[205.24450684 19.23234558]
[220.24417114 19.13252068]
[234.40538025 24.07824135]
[246.08161926 33.49447632]
[253.91529846 46.28640747]
[256.99560547 60.96672440]
[254.96440125 75.82855988]
[248.05783081 89.14394379]
[237.07894897 99.36470032]
[223.30422974 105.30248260]
[208.33526611 106.26689911]
[193.91247559 102.14582062]
[181.71279907 93.41840363]
[173.15466309 81.09938049]
[169.23313904 66.62106323]
[170.40487671 51.66403961]
[161.38734436 63.65087128]
[152.36981201 75.63770294]
[143.35227966 87.62453461]
[134.33474731 99.61137390]
[146.57955933 90.94738007]
[161.48223877 89.24154663]
[175.36811829 94.91450500]
[184.81320190 106.56741333]
[187.48854065 121.32690430]
[182.73443604 135.55358887]
[171.72315979 145.73945618]
[157.16987610 149.37287903]
[142.66311646 145.55792236]
[131.77995300 135.23529053]
[127.20403290 120.95153809]
[127.20403290 135.95153809]
[127.20403290 150.95153809]
[127.20403290 165.95153809]
[127.20403290 180.95153809]
[127.20403290 195.95153809]
[127.20403290 210.95153809]
[127.20403290 225.95153809]
[127.20403290 240.95153809]
[127.20403290 255.95153809]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 50]
[13 49]
[17 46]
[18 45]
[19 44]
[20 43]
[21 42]
[31 41]
[32 40]
[33 39]
[34 38]
[52 130]
[53 129]
[54 128]
[55 127]
[56 126]
[57 109]
[58 108]
[59 107]
[60 106]
[61 105]
[68 84]
[69 83]
[88 101]
[89 100]
[90 99]
[91 98]
[92 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
