%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUGGCAUCACUAUACUACUAACAGACCGCAACCUCAACACCACCUUCUUCGACCCCGCCGxxxxxxxxxxCCACUCCAGCCUAGCCCCUACCCCCCAAUUAGGAGGGCACUGGCCCCCAACAGGCAUCACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[50.06787109 71.07675171]
[38.17549133 61.93501663]
[26.28311157 52.79328156]
[14.39073181 43.65155029]
[2.49835181 34.50981522]
[-9.39402771 25.36808014]
[-21.47401619 16.47573090]
[-33.73638535 7.83661461]
[-45.99875259 -0.80250138]
[-58.26111984 -9.44161797]
[-70.52349091 -18.08073425]
[-82.78585815 -26.71985054]
[-95.13742828 -35.23094177]
[-107.57686615 -43.61308289]
[-120.01631165 -51.99522781]
[-129.41523743 -40.29365921]
[-139.76037598 -29.41962433]
[-150.97915649 -19.44938850]
[-162.99287415 -10.45289326]
[-175.71728516 -2.49323964]
[-189.06311035 4.37373829]
[-202.93675232 10.09987354]
[-217.24089050 14.64500046]
[-231.87519836 17.97723770]
[-246.73699951 20.07321358]
[-261.72207642 20.91822243]
[-276.72531128 20.50633812]
[-291.64144897 18.84045219]
[-306.36587524 15.93224812]
[-320.79531860 11.80212593]
[-334.82855225 6.47905397]
[-348.36712646 0.00037219]
[-361.31610107 -7.58847618]
[-373.58465576 -16.23425865]
[-385.08666992 -25.87633324]
[-395.74154663 -36.44706345]
[-405.47451782 -47.87230301]
[-414.21728516 -60.07191086]
[-421.90853882 -72.96031952]
[-428.49435425 -86.44711304]
[-433.92849731 -100.43769836]
[-438.17291260 -114.83393860]
[-441.19775391 -129.53485107]
[-442.98184204 -144.43731689]
[-443.51263428 -159.43681335]
[-442.78646851 -174.42811584]
[-440.80838013 -189.30607605]
[-437.59225464 -203.96633911]
[-433.16067505 -218.30606079]
[-427.54470825 -232.22465515]
[-420.78372192 -245.62451172]
[-412.92520142 -258.41162109]
[-404.02423096 -270.49627686]
[-394.14324951 -281.79376221]
[-383.35156250 -292.22476196]
[-371.72488403 -301.71618652]
[-359.34475708 -310.20138550]
[-346.29800415 -317.62088013]
[-332.67617798 -323.92263794]
[-318.57476807 -329.06240845]
[-304.09277344 -333.00421143]
[-289.33169556 -335.72033691]
[-274.39511108 -337.19174194]
[-259.38778687 -337.40811157]
[-244.41499329 -336.36795044]
[-229.58174133 -334.07852173]
[-214.99209595 -330.55590820]
[-200.74839783 -325.82479858]
[-186.95053101 -319.91842651]
[-173.69529724 -312.87814331]
[-161.07568359 -304.75338745]
[-149.18017578 -295.60113525]
[-138.09225464 -285.48559570]
[-127.88966370 -274.47769165]
[-118.64398193 -262.65466309]
[-110.42005920 -250.09944153]
[-103.27558136 -236.90008545]
[-97.26066589 -223.14918518]
[-92.41749573 -208.94319153]
[-88.78005219 -194.38175964]
[-86.37384033 -179.56700134]
[-85.21575165 -164.60287476]
[-85.31389618 -149.59431458]
[-86.66758728 -134.64659119]
[-89.26734161 -119.86458588]
[-93.09490204 -105.35195923]
[-98.12344360 -91.21052551]
[-104.31768036 -77.53945923]
[-111.63417053 -64.43466949]
[-99.19472504 -56.05252457]
[-86.75528717 -47.67037964]
[-79.40320587 -46.53347015]
[-74.14674377 -38.98221970]
[-61.88437271 -30.34310150]
[-49.62200546 -21.70398521]
[-37.35963821 -13.06486988]
[-25.09726906 -4.42575359]
[-12.83489990 4.21336269]
[-8.00052738 4.27934504]
[-3.17096734 7.42682838]
[-0.25229380 13.47570038]
[11.64008617 22.61743546]
[23.53246498 31.75916862]
[35.42484665 40.90090179]
[47.31722641 50.04263687]
[59.20960617 59.18437195]
[79.27574158 46.14577866]
[102.90604401 42.36904526]
[126.03656769 48.50369644]
[144.68931580 63.49469376]
[155.65637207 84.76387787]
[157.05165100 108.65337372]
[171.46386719 112.81126404]
[180.64320374 112.18551636]
[186.13098145 117.20846558]
[200.45358276 121.66528320]
[214.77616882 126.12210083]
[229.09877014 130.57891846]
[244.96794128 126.44351959]
[256.28967285 138.30734253]
[251.41714478 153.96591187]
[235.36279297 157.31101990]
[224.64195251 144.90151978]
[210.31935120 140.44470215]
[195.99676514 135.98788452]
[181.67416382 131.53106689]
[167.30598450 127.22348022]
[152.89376831 123.06558990]
[149.28884888 130.00634766]
[144.77847290 136.39588928]
[139.44549561 142.11680603]
[133.38787842 147.06401062]
[126.71691132 151.14663696]
[119.55514526 154.28967285]
[112.03413391 156.43537903]
[104.29205322 157.54432678]
[96.47113037 157.59617615]
[88.71502686 156.58993530]
[81.16623688 154.54412842]
[73.96343231 151.49630737]
[67.23893738 147.50247192]
[61.11627579 142.63598633]
[55.70792770 136.98626709]
[51.11324692 130.65708923]
[47.41664124 123.76472473]
[44.68601608 116.43579102]
[42.97153854 108.80492401]
[42.30470657 101.01229858]
[42.69776154 93.20108795]
[44.14348984 85.51477051]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 106]
[2 105]
[3 104]
[4 103]
[5 102]
[6 101]
[7 98]
[8 97]
[9 96]
[10 95]
[11 94]
[12 93]
[13 91]
[14 90]
[15 89]
[112 128]
[113 127]
[115 126]
[116 125]
[117 124]
[118 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
