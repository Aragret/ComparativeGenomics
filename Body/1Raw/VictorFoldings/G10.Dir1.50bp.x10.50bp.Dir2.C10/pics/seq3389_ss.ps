%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAAGGCCCCAACGUUGUAGGCCCCUACGGGCUACUACAACCCUUCGCUGACGCCAUAAAACUxxxxxxxxxxCAUUAACCUUUUAAGUUAAAGAUUAAGAGAACCAACACCUCUUUACAGUGAAAUGCCCCAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[112.28241730 256.03991699]
[112.28241730 241.03993225]
[112.28241730 226.03993225]
[112.28241730 211.03993225]
[112.28241730 196.03993225]
[112.28241730 181.03993225]
[112.28241730 166.03993225]
[112.28241730 151.03993225]
[112.28241730 136.03993225]
[112.28241730 121.03993225]
[95.88135529 120.95353699]
[85.44180298 111.16457367]
[70.84743500 114.62929535]
[56.25305939 118.09400940]
[41.65868378 121.55872345]
[54.24012375 129.72618103]
[58.79093170 144.01919556]
[53.24781418 157.95741272]
[40.12397766 165.22135925]
[25.36966324 162.51760864]
[15.67436981 151.07202148]
[15.43386841 136.07395935]
[24.75694084 124.32356262]
[9.81928825 125.68978119]
[-5.11836338 127.05599213]
[-20.05601501 128.42221069]
[-34.99366760 129.78842163]
[-49.93132019 131.15464783]
[-64.86897278 132.52085876]
[-79.77586365 134.18954468]
[-94.64588165 136.15998840]
[-109.51589203 138.13044739]
[-124.38591003 140.10089111]
[-137.05096436 150.51860046]
[-152.30836487 144.50663757]
[-154.46261597 128.24960327]
[-141.29759216 118.47133636]
[-126.35636139 125.23088074]
[-111.48634338 123.26042938]
[-96.61633301 121.28997803]
[-81.74631500 119.31952667]
[-78.15250397 116.09336853]
[-72.47663879 115.12889099]
[-66.23519135 117.58321381]
[-51.29753876 116.21699524]
[-36.35988617 114.85077667]
[-21.42223167 113.48455811]
[-6.48458052 112.11833954]
[8.45307159 110.75212860]
[23.39072418 109.38591003]
[38.19396973 106.96435547]
[52.78834152 103.49963379]
[67.38271332 100.03491974]
[81.97708893 96.57020569]
[97.80694580 78.75843048]
[122.49772644 90.65180206]
[131.55863953 78.69773102]
[140.61955261 66.74365997]
[149.68046570 54.78958511]
[144.08270264 46.57618713]
[141.10577393 36.92637634]
[141.10308838 26.66881180]
[144.16828918 16.71343422]
[150.11880493 7.97074986]
[158.50415039 1.26865745]
[168.63911438 -2.72557998]
[179.65942383 -3.57091498]
[190.59529114 -1.09924817]
[196.23005676 -15.00066948]
[194.24345398 -30.69665718]
[206.19509888 -39.58528137]
[211.82984924 -53.48670578]
[199.18809509 -45.41291809]
[184.30963135 -43.50738907]
[170.04119873 -48.13470840]
[159.11286926 -58.40951157]
[153.61560059 -72.36587524]
[154.60121155 -87.33345795]
[161.88111877 -100.44844818]
[174.06242371 -109.20149231]
[188.81442261 -111.91782379]
[203.31454468 -108.07772827]
[214.78842163 -98.41593933]
[221.04069519 -84.78108978]
[220.87554932 -69.78392792]
[229.69232178 -81.91918182]
[238.50910950 -94.05443573]
[247.32588196 -106.18968964]
[256.14266968 -118.32494354]
[252.18428040 -133.45324707]
[258.92297363 -147.56437683]
[273.17687988 -153.99551392]
[288.21578979 -149.71006775]
[296.93878174 -136.73149109]
[295.22711182 -121.18786621]
[283.88897705 -110.41842651]
[268.27792358 -109.50817108]
[259.46115112 -97.37290955]
[250.64436340 -85.23765564]
[241.82759094 -73.10240173]
[233.01080322 -60.96714783]
[225.73127747 -47.85194778]
[220.09651184 -33.95052719]
[222.48614502 -19.24886131]
[210.13146973 -9.36591434]
[204.49671936 4.53550768]
[212.94053650 16.93316460]
[227.93977356 16.78115463]
[242.93899536 16.62914467]
[257.93823242 16.47713470]
[272.93746948 16.32512474]
[281.05892944 3.20852041]
[294.99234009 -3.41444349]
[310.29159546 -1.43040192]
[322.07473755 8.52754402]
[326.58184814 23.28185081]
[322.37469482 38.12447357]
[310.79577637 48.31918335]
[295.53988647 50.61288452]
[281.47509766 44.27367020]
[273.08947754 31.32435608]
[258.09024048 31.47636604]
[243.09100342 31.62837601]
[228.09178162 31.78038597]
[213.09254456 31.93239594]
[204.44195557 55.14699554]
[184.02491760 67.19392395]
[161.63453674 63.85049820]
[152.57362366 75.80457306]
[143.51271057 87.75864410]
[134.45179749 99.71271515]
[145.55374146 89.62575531]
[159.73208618 84.72937012]
[174.69268799 85.81582642]
[188.01483154 92.70932770]
[197.54292297 104.29447174]
[201.73526001 118.69670868]
[199.91349792 133.58566284]
[192.37239075 146.55223083]
[180.33215332 155.49833679]
[165.74096680 158.97644043]
[150.95977783 156.42378235]
[138.38023376 148.25338745]
[130.03782654 135.78726196]
[127.28241730 121.03993225]
[127.28241730 136.03993225]
[127.28241730 151.03993225]
[127.28241730 166.03993225]
[127.28241730 181.03993225]
[127.28241730 196.03993225]
[127.28241730 211.03993225]
[127.28241730 226.03993225]
[127.28241730 241.03993225]
[127.28241730 256.03991699]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[12 54]
[13 53]
[14 52]
[15 51]
[23 50]
[24 49]
[25 48]
[26 47]
[27 46]
[28 45]
[29 44]
[30 41]
[31 40]
[32 39]
[33 38]
[56 131]
[57 130]
[58 129]
[59 128]
[68 106]
[69 105]
[71 103]
[72 102]
[85 101]
[86 100]
[87 99]
[88 98]
[89 97]
[107 125]
[108 124]
[109 123]
[110 122]
[111 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
