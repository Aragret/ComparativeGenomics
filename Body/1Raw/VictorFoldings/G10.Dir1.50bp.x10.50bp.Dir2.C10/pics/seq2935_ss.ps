%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUUCACCAGUCAAAGCGAACUACUAUACUCAAUUGAUCCAAUAACUUGACCAACGGAACAxxxxxxxxxxCUGGGUCUCUAUUUUACCCUCCUACAAGCCUCAGAGUACUUCGAGUCUCCCUUCACCAUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[114.40383148 238.59921265]
[114.09177399 223.60244751]
[113.77971649 208.60569763]
[113.46765900 193.60894775]
[113.15560150 178.61219788]
[112.84354401 163.61543274]
[112.53149414 148.61868286]
[112.21943665 133.62193298]
[111.90737915 118.62517548]
[97.89066315 113.28366852]
[87.67718506 124.26933289]
[77.46370697 135.25498962]
[67.25022888 146.24066162]
[71.17564392 161.16026306]
[66.39004517 175.82659912]
[54.42048264 185.55970764]
[39.08641434 187.25376892]
[25.28087807 180.36822510]
[17.40917206 167.10021973]
[17.98312950 151.68354797]
[26.81960106 139.03758240]
[41.09890366 133.19761658]
[56.26456070 136.02717590]
[66.47804260 125.04151154]
[76.69152069 114.05584717]
[86.90499878 103.07018280]
[93.11040497 89.41394043]
[94.66799164 74.49503326]
[96.07028961 59.56072617]
[97.31716919 44.61263657]
[98.56404114 29.66455078]
[84.90455627 20.40187263]
[77.80361938 5.60754204]
[79.10606384 -10.65694904]
[88.36395264 -23.97887039]
[102.98380280 -30.79147148]
[103.91942596 -45.76226425]
[104.85505676 -60.73305511]
[105.79068756 -75.70384979]
[106.72631836 -90.67463684]
[89.38019562 -104.43196106]
[85.21035767 -125.86211395]
[71.30780029 -131.49406433]
[57.40524673 -137.12602234]
[43.50268936 -142.75798035]
[26.55221367 -143.10102844]
[22.18949699 -159.48403931]
[36.72453308 -168.21153259]
[49.13464737 -156.66053772]
[63.03720474 -151.02857971]
[76.93975830 -145.39662170]
[90.84231567 -139.76466370]
[97.82481384 -146.74391174]
[106.63516998 -151.19844055]
[116.39517212 -152.68421936]
[120.10133362 -167.21914673]
[123.80749512 -181.75408936]
[127.51365662 -196.28901672]
[120.25267792 -202.94111633]
[115.97238159 -211.74502563]
[115.23421478 -221.44805908]
[118.09897614 -230.68698120]
[124.12425232 -238.17951965]
[132.43218994 -242.90232849]
[141.83715820 -244.23062134]
[146.73870850 -258.40716553]
[151.64025879 -272.58374023]
[139.80574036 -263.36721802]
[125.47044373 -258.95141602]
[110.50119019 -259.91137695]
[96.84735870 -266.12207031]
[86.28701782 -276.77474976]
[80.19538879 -290.48211670]
[79.36575317 -305.45916748]
[83.90615082 -319.75546265]
[93.22531891 -331.50933838]
[106.10964966 -339.19009399]
[120.88129425 -341.79748535]
[135.61660767 -338.99203491]
[148.39666748 -331.13900757]
[157.55720520 -319.26110840]
[161.90528870 -304.90512085]
[160.87512207 -289.94229126]
[169.89265442 -301.92913818]
[178.91018677 -313.91595459]
[187.92771912 -325.90280151]
[182.47427368 -340.33413696]
[185.71107483 -355.41812134]
[196.60525513 -366.34152222]
[211.68052673 -369.61868286]
[226.12641907 -364.20391846]
[235.33329773 -351.82501221]
[236.36329651 -336.43209839]
[228.88772583 -322.93692017]
[215.29203796 -315.64578247]
[199.91455078 -316.88525391]
[190.89701843 -304.89843750]
[181.87948608 -292.91159058]
[172.86195374 -280.92477417]
[165.81681824 -267.68218994]
[160.91526794 -253.50563049]
[156.01371765 -239.32907104]
[166.52374268 -221.86264038]
[160.77871704 -202.00195312]
[142.04859924 -192.58285522]
[138.34243774 -178.04792786]
[134.63627625 -163.51298523]
[130.93011475 -148.97805786]
[140.86303711 -140.82991028]
[146.71977234 -129.32711792]
[147.47290039 -116.38047791]
[142.94735718 -104.16256714]
[133.85800171 -94.74324799]
[121.69710541 -89.73901367]
[120.76147461 -74.76821899]
[119.82585144 -59.79742813]
[118.89022064 -44.82663727]
[117.95458984 -29.85584450]
[129.83294678 -23.04672241]
[137.64480591 -11.72179604]
[139.81175232 1.93148279]
[135.85246277 15.24572468]
[126.48820496 25.59471893]
[113.51213074 30.91142464]
[112.26525116 45.85951233]
[111.01837921 60.80759811]
[113.61337280 67.77980804]
[109.58689880 76.05261230]
[108.02931976 90.97152710]
[109.81876373 76.07864380]
[117.77609253 63.36326599]
[130.38821411 55.24325180]
[145.25686646 53.26264954]
[159.55477905 57.79806900]
[170.56312561 67.98709106]
[176.18865967 81.89225006]
[175.36166382 96.86943817]
[168.23939514 110.07069397]
[156.17616272 118.98577881]
[141.46585083 121.91944885]
[126.90412903 118.31311798]
[127.21618652 133.30987549]
[127.52824402 148.30662537]
[127.84030151 163.30337524]
[128.15235901 178.30014038]
[128.46441650 193.29689026]
[128.77647400 208.29364014]
[129.08853149 223.29039001]
[129.40058899 238.28715515]
[131.99157715 257.49487305]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 26]
[11 25]
[12 24]
[13 23]
[27 129]
[28 128]
[29 126]
[30 125]
[31 124]
[36 118]
[37 117]
[38 116]
[39 115]
[40 114]
[42 52]
[43 51]
[44 50]
[45 49]
[55 108]
[56 107]
[57 106]
[58 105]
[65 102]
[66 101]
[67 100]
[83 99]
[84 98]
[85 97]
[86 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
