%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:33:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUAAUAACAAUUGAAUGUCUGCACAGCCACUUUCCACACAGACAUCAUAACAAAAAAUUUxxxxxxxxxxGGACAUAAUAAUAACAAUUGAAUGUCUGCACAGCCACUUUCCACACAGACAUCAUAACAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[77.08863831 264.43011475]
[77.08863831 249.43011475]
[77.08863831 234.43011475]
[77.08863831 219.43011475]
[77.08863831 204.43011475]
[77.08863831 189.43011475]
[77.08863831 174.43011475]
[77.08863831 159.43011475]
[77.08863831 144.43011475]
[77.08863831 129.43011475]
[75.33963776 116.89295959]
[78.46505737 106.47102356]
[84.92134094 99.74676514]
[92.72761536 97.54560852]
[82.97995758 86.14458466]
[70.16480255 84.34860229]
[62.28211594 74.59759521]
[63.15476227 62.49198532]
[53.64640427 50.89064407]
[44.13804626 39.28930283]
[34.62968826 27.68795967]
[25.12133026 16.08661842]
[15.61297131 4.48527765]
[-2.03880954 2.72614193]
[-12.41164303 -11.02299690]
[-27.34595108 -12.42530060]
[-42.28025818 -13.82760429]
[-57.21456528 -15.22990799]
[-72.14887238 -16.63221169]
[-87.08318329 -18.03451538]
[-102.01748657 -19.43681908]
[-108.23208618 -5.62894106]
[-118.59519196 5.41120434]
[-131.98268127 12.48606491]
[-146.94239807 14.82821178]
[-161.85162354 12.18358707]
[-175.09309387 4.83906078]
[-185.23048401 -6.40868950]
[-191.16418457 -20.33959007]
[-192.25053406 -35.44252396]
[-188.37168884 -50.07923508]
[-179.94841003 -62.66204071]
[-167.89437866 -71.82605743]
[-153.51713562 -76.57723999]
[-138.37622070 -76.40021515]
[-124.11399841 -71.31417847]
[-112.27753448 -61.87083817]
[-104.15074921 -49.09452438]
[-100.61518860 -34.37112808]
[-85.68087769 -32.96882248]
[-70.74656677 -31.56651878]
[-55.81226349 -30.16421509]
[-40.87795258 -28.76191139]
[-25.94364738 -27.35960770]
[-11.00933933 -25.95730400]
[-8.10057354 -30.38461494]
[-4.18359566 -33.95102692]
[0.49625766 -36.43315887]
[0.49625766 -51.43315887]
[-14.29205227 -54.19368744]
[-28.32122993 -59.62478638]
[-41.11344910 -67.54146576]
[-52.23300934 -77.67408752]
[-61.30118179 -89.67753601]
[-68.00910950 -103.14299011]
[-72.12832642 -117.61180878]
[-73.51852417 -132.59118652]
[-72.13236237 -147.57095337]
[-68.01705170 -162.04087830]
[-61.31275177 -175.50813293]
[-52.24781418 -187.51403809]
[-41.13098526 -197.64965820]
[-28.34090042 -205.56977844]
[-14.31318665 -211.00465393]
[0.47437879 -213.76918030]
[15.51813698 -213.76918030]
[30.30570221 -211.00465393]
[44.33341599 -205.56977844]
[57.12350082 -197.64965820]
[68.24032593 -187.51403809]
[77.30526733 -175.50813293]
[84.00956726 -162.04087830]
[88.12487793 -147.57095337]
[89.51103973 -132.59118652]
[88.12084198 -117.61180878]
[84.00162506 -103.14299011]
[77.29370117 -89.67753601]
[68.22552490 -77.67408752]
[57.10596466 -67.54146576]
[44.31374741 -59.62478638]
[30.28456688 -54.19368744]
[15.49625778 -51.43315887]
[15.49625778 -36.43315887]
[28.61342430 -23.75813484]
[27.21431160 -5.02308083]
[36.72267151 6.57826042]
[46.23102951 18.17960167]
[55.73938751 29.78094292]
[65.24774933 41.38228607]
[74.75610352 52.98362732]
[91.46897125 58.24479675]
[94.38098145 76.39693451]
[104.12863159 87.79795074]
[117.22178650 95.11705780]
[132.03955078 97.44816589]
[146.85729980 99.77926636]
[161.67506409 102.11037445]
[176.49281311 104.44147491]
[183.55657959 91.04811859]
[194.58815002 80.67587280]
[208.39086914 74.44983673]
[223.46754456 73.04537201]
[238.18276978 76.61480713]
[250.94033813 84.77097321]
[260.35641479 96.62914276]
[265.40960693 110.90303802]
[265.55178833 126.04431915]
[260.76754761 140.41058350]
[251.57580566 152.44348145]
[238.97364807 160.83778381]
[224.32804871 164.68293762]
[209.22764587 163.56182861]
[195.31044006 157.59609985]
[184.08605957 147.43283081]
[176.77201843 134.17449951]
[174.16171265 119.25923157]
[159.34396362 116.92813110]
[144.52619934 114.59702301]
[129.70843506 112.26592255]
[114.89068604 109.93481445]
[109.19017029 114.80864716]
[121.07638550 123.95838928]
[135.76805115 126.98413086]
[144.53208923 139.15751648]
[142.74047852 154.05014038]
[131.33929443 163.79760742]
[116.34920502 163.25254822]
[105.68605042 152.70280457]
[104.98053741 137.72003174]
[97.78915405 124.55629730]
[92.08863831 129.43011475]
[92.08863831 144.43011475]
[92.08863831 159.43011475]
[92.08863831 174.43011475]
[92.08863831 189.43011475]
[92.08863831 204.43011475]
[92.08863831 219.43011475]
[92.08863831 234.43011475]
[92.08863831 249.43011475]
[92.08863831 264.43011475]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[14 103]
[15 102]
[18 100]
[19 99]
[20 98]
[21 97]
[22 96]
[23 95]
[25 55]
[26 54]
[27 53]
[28 52]
[29 51]
[30 50]
[31 49]
[58 93]
[59 92]
[104 130]
[105 129]
[106 128]
[107 127]
[108 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
