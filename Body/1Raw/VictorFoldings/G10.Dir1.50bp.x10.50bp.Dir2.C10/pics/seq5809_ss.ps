%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCACCCCAUUCCUCCCCACACUCAUCGCCCUUACCACGCUACUCCUACCUAUCUCCCCUxxxxxxxxxxAAAUCUAGACAAAAAAGGAAGGAAUCGAACCCCCCAAAGCUGGUUUCAAGCCAACCCCAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[162.02903748 174.40692139]
[152.04631042 163.21115112]
[142.06358337 152.01538086]
[132.08085632 140.81962585]
[122.09812927 129.62385559]
[112.11540222 118.42808533]
[97.19648743 119.98567200]
[89.74157715 133.00198364]
[82.28666687 146.01828003]
[74.83175659 159.03459167]
[75.42967224 175.42283630]
[61.39414215 183.90434265]
[47.16371918 175.75407410]
[47.37743759 159.35630798]
[61.81544876 151.57968140]
[69.27035522 138.56336975]
[76.72526550 125.54706573]
[84.18018341 112.53076172]
[83.86812592 97.53400421]
[75.87820435 84.83907318]
[67.88829041 72.14414215]
[59.89837646 59.44921494]
[51.90845871 46.75428772]
[43.91854095 34.05935669]
[31.49968529 30.42262077]
[25.11553764 19.63088226]
[27.73574448 7.78006697]
[20.01165962 -5.07833576]
[6.50365019 1.46688628]
[-7.53669357 6.77489805]
[-21.99632454 10.80296230]
[-36.75882339 13.51864624]
[-51.70532227 14.90008450]
[-66.71548462 14.93615437]
[-81.66844940 13.62656593]
[-96.44382477 10.98186302]
[-110.92265320 7.02333927]
[-124.98834229 1.78286755]
[-138.52764893 -4.69735813]
[-151.43156433 -12.36516285]
[-163.59619141 -21.15880775]
[-174.92358398 -31.00748825]
[-185.32252502 -41.83191299]
[-194.70930481 -53.54492188]
[-203.00834656 -66.05220795]
[-210.15281677 -79.25307465]
[-216.08518982 -93.04122162]
[-220.75772095 -107.30564880]
[-224.13276672 -121.93148804]
[-226.18316650 -136.80099487]
[-226.89241028 -151.79443359]
[-226.25477600 -166.79109192]
[-224.27540588 -181.67021179]
[-220.97024536 -196.31201172]
[-216.36589050 -210.59857178]
[-210.49943542 -224.41490173]
[-203.41807556 -237.64973450]
[-195.17886353 -250.19651794]
[-185.84812927 -261.95422363]
[-175.50099182 -272.82818604]
[-164.22076416 -282.73083496]
[-152.09828186 -291.58245850]
[-139.23112488 -299.31182861]
[-125.72291565 -305.85662842]
[-111.68241119 -311.16421509]
[-97.22265625 -315.19183350]
[-82.46008301 -317.90707397]
[-67.51353455 -319.28805542]
[-52.50337601 -319.32366943]
[-37.55044556 -318.01361084]
[-22.77515030 -315.36846924]
[-8.29644775 -311.40948486]
[5.76908445 -306.16857910]
[19.30819702 -299.68795776]
[32.21187592 -292.01974487]
[44.37623215 -283.22573853]
[55.70331955 -273.37670898]
[66.10193634 -262.55197144]
[75.48835754 -250.83866882]
[83.78701782 -238.33113098]
[90.93108368 -225.13005066]
[96.86303711 -211.34172058]
[101.53513336 -197.07714844]
[104.90973663 -182.45120239]
[106.95967865 -167.58163452]
[107.66845703 -152.58818054]
[107.03037262 -137.59153748]
[105.05055237 -122.71247864]
[101.74494171 -108.07078552]
[97.14015198 -93.78435516]
[91.27326202 -79.96820831]
[84.19151306 -66.73359680]
[75.95191956 -54.18706894]
[66.62081909 -42.42964935]
[56.27334976 -31.55600739]
[44.99282074 -21.65368652]
[32.87006378 -12.80242062]
[40.59414673 0.05598191]
[56.36657715 7.68686914]
[56.61347198 26.06944084]
[64.60338593 38.76436996]
[72.59330750 51.45930099]
[80.58322144 64.15422821]
[88.57313538 76.84915924]
[96.56304932 89.54409027]
[101.77893066 86.35163116]
[109.00982666 86.15164185]
[116.46779633 89.97579193]
[121.92709351 97.80854797]
[123.31116486 108.44535828]
[133.29389954 119.64112854]
[143.27662659 130.83689880]
[153.25935364 142.03265381]
[163.24206543 153.22842407]
[173.22479248 164.42419434]
[185.93907166 156.39939880]
[199.80082703 150.57690430]
[214.43191528 147.11553955]
[229.43319702 146.10974121]
[244.39540100 147.58692932]
[258.91036987 151.50682068]
[272.58212280 157.76246643]
[285.03765869 166.18322754]
[295.93722534 176.53935242]
[304.98345947 188.54835510]
[311.92953491 201.88258362]
[316.58599854 216.17828369]
[318.82580566 231.04547119]
[318.58786011 246.07853699]
[315.87863159 260.86740112]
[310.77206421 275.00857544]
[303.40744019 288.11627197]
[293.98568726 299.83294678]
[282.76385498 309.83892822]
[270.04803467 317.86126709]
[256.18515015 323.68109131]
[241.55339050 327.13964844]
[226.55192566 328.14257812]
[211.58999634 326.66250610]
[197.07577515 322.73980713]
[183.40524292 316.48150635]
[170.95130920 308.05834961]
[160.05375671 297.70013428]
[151.00984192 285.68939209]
[144.06632996 272.35382080]
[139.41261292 258.05722046]
[137.17567444 243.18960571]
[137.41651917 228.15658569]
[140.12858582 213.36825562]
[145.23788452 199.22807312]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 115]
[2 114]
[3 113]
[4 112]
[5 111]
[6 110]
[7 18]
[8 17]
[9 16]
[10 15]
[19 105]
[20 104]
[21 103]
[22 102]
[23 101]
[24 100]
[27 98]
[28 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
