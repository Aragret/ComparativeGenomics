%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUCAUUCUACUAUCAACAUUACUAAUAAGUGGCUCCUUUAACCUCUCCACCCUUAUCACxxxxxxxxxxAUAUUUCGCCCACUAAGCCAAUCACUUUAUUGACUCCUAGCCGCAGACCUCCUCAUUCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[108.22481537 422.10189819]
[108.22481537 407.10189819]
[108.22481537 392.10189819]
[108.22481537 377.10189819]
[108.22481537 362.10189819]
[108.22481537 347.10189819]
[108.22481537 332.10189819]
[108.22481537 317.10189819]
[108.22481537 302.10189819]
[108.22481537 287.10189819]
[93.57043457 284.01242065]
[79.87337494 277.94107056]
[67.73331451 269.15100098]
[57.68234253 258.02447510]
[50.16159439 245.04620361]
[45.50190735 230.78227234]
[43.90927887 215.85539246]
[45.45573425 200.91778564]
[50.07610321 186.62263489]
[57.57073593 173.59552002]
[67.61414337 162.40710449]
[79.76913452 153.54803467]
[93.50584412 147.40754700]
[108.22481537 144.25624084]
[108.22481537 129.25624084]
[102.57530975 124.32337189]
[92.70939636 135.62222290]
[81.41072083 125.75611877]
[91.27630615 114.45764923]
[85.62680054 109.52478790]
[70.76375580 111.54712677]
[55.90071106 113.56945801]
[43.27209473 124.03130341]
[27.99380302 118.07262421]
[25.78283119 101.82320404]
[38.91363907 91.99905396]
[53.87837601 98.70641327]
[68.74142456 96.68408203]
[83.60446930 94.66174316]
[94.90347290 84.79602051]
[98.91121674 70.34133148]
[102.91895294 55.88664246]
[106.92669678 41.43195724]
[110.93443298 26.97726631]
[114.94217682 12.52257824]
[100.86508179 7.31661558]
[87.27298737 0.95096111]
[74.26123810 -6.52973366]
[61.92108917 -15.07299614]
[50.33911133 -24.61890221]
[39.59653854 -35.10049057]
[29.76872635 -46.44424057]
[20.92461014 -58.57057953]
[13.12622643 -71.39445496]
[6.42827606 -84.82591248]
[0.87774009 -98.77073669]
[-3.48644710 -113.13111115]
[-6.63367319 -127.80631256]
[-8.54186249 -142.69338989]
[-9.19763088 -157.68794250]
[-8.59637737 -172.68478394]
[-6.74232006 -187.57870483]
[-3.64846396 -202.26525879]
[0.66348946 -216.64140320]
[6.16329432 -230.60630798]
[12.81237316 -244.06202698]
[20.56408691 -256.91415405]
[29.36406136 -269.07257080]
[39.15056992 -280.45196533]
[49.85496521 -290.97253418]
[61.40216827 -300.56048584]
[73.71117401 -309.14855957]
[86.69564819 -316.67651367]
[100.26451111 -323.09152222]
[114.32257843 -328.34863281]
[128.77125549 -332.41094971]
[143.50918579 -335.24996948]
[158.43298340 -336.84576416]
[173.43798828 -337.18719482]
[188.41893005 -336.27182007]
[203.27073669 -334.10604858]
[217.88922119 -330.70510864]
[232.17185974 -326.09286499]
[246.01844788 -320.30163574]
[259.33187866 -313.37203979]
[272.01876831 -305.35272217]
[283.99011230 -296.29989624]
[295.16192627 -286.27706909]
[305.45587158 -275.35458374]
[314.79974365 -263.60900879]
[323.12799072 -251.12272644]
[330.38220215 -237.98336792]
[336.51147461 -224.28305054]
[341.47283936 -210.11790466]
[345.23147583 -195.58728027]
[347.76104736 -180.79309082]
[349.04379272 -165.83912659]
[349.07067871 -150.83026123]
[347.84158325 -135.87179565]
[345.36508179 -121.06864166]
[341.65856934 -106.52462769]
[336.74804688 -92.34178162]
[330.66790771 -78.61958313]
[323.46087646 -65.45428467]
[315.17745972 -52.93823242]
[305.87576294 -41.15922546]
[295.62103271 -30.19987869]
[284.48522949 -20.13706779]
[272.54641724 -11.04137897]
[259.88836670 -2.97661090]
[246.59988403 4.00066614]
[232.77413940 9.84151077]
[218.50813293 14.50495338]
[203.90193176 17.95828247]
[189.05799866 20.17727470]
[174.08042908 21.14636803]
[159.07431030 20.85875893]
[144.14488220 19.31647110]
[129.39686584 16.53031921]
[125.38912201 30.98500633]
[121.38138580 45.43969727]
[117.37364197 59.89438248]
[113.36590576 74.34907532]
[109.35816193 88.80376434]
[125.97099304 100.32772064]
[123.22481537 129.25624084]
[123.22481537 144.25624084]
[137.94378662 147.40754700]
[151.68048096 153.54803467]
[163.83547974 162.40710449]
[173.87889099 173.59552002]
[181.37351990 186.62263489]
[185.99389648 200.91778564]
[187.54034424 215.85539246]
[185.94772339 230.78227234]
[181.28804016 245.04620361]
[173.76728821 258.02447510]
[163.71630859 269.15100098]
[151.57624817 277.94107056]
[137.87919617 284.01242065]
[123.22481537 287.10189819]
[123.22481537 302.10189819]
[123.22481537 317.10189819]
[123.22481537 332.10189819]
[123.22481537 347.10189819]
[123.22481537 362.10189819]
[123.22481537 377.10189819]
[123.22481537 392.10189819]
[123.22481537 407.10189819]
[123.22481537 422.10189819]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[24 127]
[25 126]
[30 39]
[31 38]
[32 37]
[40 124]
[41 123]
[42 122]
[43 121]
[44 120]
[45 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
