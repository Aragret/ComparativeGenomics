%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCACCCUCUAAAUCACCACGAUCAAAAGGAACAAGCAUCAAGCACGCAGCAAUGCAGCUCAAAACGCxxxxxxxxxxCGCCAUAAAACUCUUCACCAAAGAGCCCCUAAAACCCGCCACAUCUACCAUCACCCUCUACAUCACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[18.46785355 374.79980469]
[5.60169458 370.64990234]
[0.29289338 384.67904663]
[-5.01590776 398.70819092]
[-10.32470894 412.73733521]
[-7.97235823 428.38265991]
[-19.71330452 437.54779053]
[-16.53826714 453.63665771]
[-29.06052017 464.22555542]
[-44.39824295 458.42156982]
[-46.77330399 442.19534302]
[-33.74243927 432.23898315]
[-36.47451019 417.59710693]
[-24.35384369 407.42852783]
[-19.04504204 393.39938354]
[-13.73624134 379.37023926]
[-8.42744064 365.34112549]
[-22.85521507 358.97686768]
[-36.91116714 351.82879639]
[-50.55276108 343.91860962]
[-63.73870468 335.27017212]
[-76.42909241 325.90969849]
[-88.58551788 315.86550903]
[-100.17119598 305.16799927]
[-111.15104675 293.84954834]
[-121.49185181 281.94442749]
[-131.16232300 269.48864746]
[-140.13316345 256.51989746]
[-148.37725830 243.07745361]
[-155.86962891 229.20198059]
[-162.58761597 214.93547058]
[-168.51087952 200.32112122]
[-173.62149048 185.40313721]
[-177.90399170 170.22669983]
[-181.34541321 154.83770752]
[-183.93534851 139.28274536]
[-185.66595459 123.60890198]
[-186.53198242 107.86360168]
[-186.53083801 92.09450531]
[-185.66250610 76.34933472]
[-183.92961121 60.67574310]
[-181.33740234 45.12116241]
[-177.89372253 29.73267746]
[-173.60900879 14.55685329]
[-168.49620056 -0.36037597]
[-162.57080078 -14.97386456]
[-155.85073853 -29.23938560]
[-148.35633850 -43.11376572]
[-140.11027527 -56.55500793]
[-131.13752747 -69.52243805]
[-121.46524811 -81.97681427]
[-132.80149841 -91.79972076]
[-144.13774109 -101.62263489]
[-157.06484985 -101.48840332]
[-166.30932617 -109.94120026]
[-167.26550293 -122.02838898]
[-178.41267395 -132.06535339]
[-189.55984497 -142.10231018]
[-205.70439148 -144.98077393]
[-211.02865601 -160.49154663]
[-200.05549622 -172.67848206]
[-184.07313538 -169.00471497]
[-179.52288818 -153.24948120]
[-168.37571716 -143.21252441]
[-157.22854614 -133.17556763]
[-139.90716553 -130.48129272]
[-134.31483459 -112.95887756]
[-122.97858429 -103.13596344]
[-111.64234161 -93.31305695]
[-100.22733307 -105.11322021]
[-88.15544891 -116.24047852]
[-75.46628571 -126.65833282]
[-62.20148849 -136.33259583]
[-48.40456009 -145.23153687]
[-34.12076569 -153.32595825]
[-19.39697075 -160.58929443]
[-4.28147554 -166.99774170]
[11.17613125 -172.53025818]
[26.92513847 -177.16868591]
[42.91387939 -180.89782715]
[59.08990097 -183.70544434]
[75.40013123 -185.58232117]
[91.79106903 -186.52230835]
[108.20893097 -186.52230835]
[124.59986877 -185.58232117]
[140.91009521 -183.70544434]
[157.08612061 -180.89782715]
[173.07485962 -177.16868591]
[188.82386780 -172.53025818]
[204.28147888 -166.99774170]
[219.39697266 -160.58929443]
[234.12077332 -153.32595825]
[248.40455627 -145.23153687]
[262.20147705 -136.33259583]
[275.46627808 -126.65833282]
[288.15545654 -116.24047852]
[300.22732544 -105.11322021]
[311.64233398 -93.31305695]
[322.97857666 -103.13596344]
[334.31481934 -112.95887756]
[345.65106201 -122.78178406]
[356.98730469 -132.60470581]
[359.56140137 -148.43989563]
[373.61682129 -156.17454529]
[388.37145996 -149.87528992]
[392.50680542 -134.37437439]
[382.85058594 -121.56276703]
[366.81021118 -121.26845551]
[355.47396851 -111.44554138]
[344.13772583 -101.62263489]
[332.80148315 -91.79972076]
[321.46524048 -81.97681427]
[329.79916382 -71.33231354]
[337.62191772 -60.30670166]
[344.91610718 -48.92451477]
[351.66552734 -37.21106339]
[357.85516357 -25.19240379]
[363.47119141 -12.89527035]
[368.50119019 -0.34701651]
[372.93395996 12.42444611]
[376.75958252 25.39070892]
[379.96960449 38.52293015]
[382.55688477 51.79190063]
[384.51565552 65.16810608]
[385.84155273 78.62178802]
[386.53161621 92.12301636]
[386.58435059 105.64177704]
[385.99960327 119.14797974]
[384.77868652 132.61158752]
[382.92431641 146.00267029]
[380.44061279 159.29141235]
[377.33312988 172.44827271]
[373.60873413 185.44398499]
[369.27575684 198.24963379]
[364.34378052 210.83674622]
[358.82382202 223.17730713]
[352.72814941 235.24388123]
[346.07028198 247.00962830]
[338.86511230 258.44836426]
[331.12857056 269.53463745]
[322.87796021 280.24383545]
[314.13156128 290.55209351]
[304.90884399 300.43649292]
[295.23034668 309.87503052]
[285.11758423 318.84674072]
[274.59304810 327.33166504]
[263.68017578 335.31091309]
[252.40319824 342.76672363]
[240.78721619 349.68255615]
[228.85807800 356.04299927]
[216.64231873 361.83389282]
[204.16708374 367.04238892]
[191.46015930 371.65686035]
[178.54978943 375.66708374]
[165.46469116 379.06414795]
[152.23399353 381.84042358]
[138.88708496 383.98980713]
[125.45368958 385.50747681]
[111.96367645 386.39010620]
[98.44704437 386.63568115]
[84.93387604 386.24365234]
[71.45421600 385.21493530]
[58.03804779 383.55178833]
[44.71522141 381.25790405]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 17]
[3 16]
[4 15]
[5 14]
[7 12]
[51 69]
[52 68]
[53 67]
[56 65]
[57 64]
[58 63]
[98 112]
[99 111]
[100 110]
[101 109]
[102 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
