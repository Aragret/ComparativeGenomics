%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCACCCUAUUAACCACUCACGGGAGCUCUCCAUGCAUUUGGUAUUUUCGUCUGGGGGGUAUxxxxxxxxxxCGCUGGAGCCGGAGCACCCUAUGUCGCAGUAUCUGUCUUUGAUUCCUGCCUCAUCCUAUUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[107.66560364 261.11386108]
[107.04978180 246.12649536]
[106.43395996 231.13914490]
[105.81813049 216.15179443]
[105.20230865 201.16444397]
[104.58647919 186.17707825]
[103.97065735 171.18972778]
[103.35482788 156.20237732]
[89.10813904 151.50857544]
[79.70427704 163.19477844]
[70.30042267 174.88099670]
[75.92343903 189.17355347]
[73.63096619 204.36039734]
[64.03966522 216.35633850]
[49.72954559 221.93452454]
[34.54996872 219.59445190]
[22.58415222 209.96559143]
[17.05084801 195.63806152]
[19.43848419 180.46589661]
[29.10479927 168.53031921]
[43.44960403 163.04196167]
[58.61421585 165.47714233]
[68.01807404 153.79092407]
[77.42192841 142.10472107]
[63.14385605 124.21263885]
[59.72267151 103.38758087]
[66.35433197 85.23922729]
[79.72782898 73.88134003]
[73.45841980 60.25436020]
[58.19494247 50.00463104]
[60.42189789 32.62403488]
[53.87402725 19.12865067]
[47.32615662 5.63326597]
[34.34085083 -3.40511966]
[35.74627304 -18.23327065]
[29.19840240 -31.72865486]
[22.65053177 -45.22403717]
[16.10266113 -58.71942139]
[9.00625706 -71.93460846]
[1.37328744 -84.84730530]
[-6.25968266 -97.76000214]
[-13.89265251 -110.67269897]
[-20.99817657 -116.51284790]
[-21.54664993 -123.92980957]
[-28.91288948 -136.99650574]
[-43.02225876 -131.80787659]
[-57.78125381 -128.94987488]
[-72.80758667 -128.49652100]
[-87.71203613 -130.45957947]
[-102.10853577 -134.78819275]
[-115.62419128 -141.37022400]
[-127.90891266 -150.03520203]
[-138.64450073 -160.55868530]
[-147.55285645 -172.66806030]
[-154.40324402 -186.04969788]
[-159.01823425 -200.35697937]
[-161.27827454 -215.21928406]
[-161.12483215 -230.25167847]
[-158.56187439 -245.06475830]
[-153.65579224 -259.27484131]
[-146.53366089 -272.51385498]
[-137.37997437 -284.43887329]
[-126.43180847 -294.74099731]
[-113.97277069 -303.15341187]
[-100.32557678 -309.45819092]
[-85.84371185 -313.49200439]
[-70.90229034 -315.15042114]
[-55.88834763 -314.39041138]
[-41.19076538 -311.23175049]
[-27.19025421 -305.75616455]
[-14.24945736 -298.10556030]
[-2.70357299 -288.47805786]
[7.14833164 -277.12304688]
[15.05106926 -264.33465576]
[20.79994011 -250.44413757]
[24.24603271 -235.81127930]
[25.30008698 -220.81510925]
[23.93480110 -205.84405518]
[20.18553543 -191.28593445]
[14.14940929 -177.51780701]
[5.98277092 -164.89630127]
[-4.10284424 -153.74836731]
[-15.84619427 -144.36274719]
[-8.47995472 -131.29605103]
[-0.97995454 -118.30567169]
[6.65301561 -105.39297485]
[14.28598499 -92.48027039]
[21.91895485 -79.56757355]
[24.66378593 -78.75706482]
[27.24195862 -76.77659607]
[29.19336891 -73.68811035]
[30.09051132 -69.72342682]
[29.59804535 -65.26729584]
[36.14591599 -51.77190781]
[42.69378662 -38.27652359]
[49.24165726 -24.78114128]
[61.75861359 -16.70803642]
[60.82154083 -0.91460449]
[67.36941528 12.58078003]
[73.91728210 26.07616425]
[85.27246857 30.35658646]
[90.82250977 41.59795761]
[87.08540344 53.98495483]
[93.35480499 67.61193085]
[119.47782135 67.40969086]
[141.06884766 87.69794464]
[143.01965332 120.78187561]
[157.84213257 123.08274841]
[172.66461182 125.38362122]
[187.48709106 127.68450165]
[204.46231079 120.62242126]
[217.72071838 132.07923889]
[232.58732605 134.07530212]
[247.45391846 136.07136536]
[258.88757324 125.40338135]
[274.50613403 124.63227844]
[286.93499756 134.12213135]
[290.30563354 149.39212036]
[283.02655029 163.23223877]
[268.53466797 169.10758972]
[253.67263794 164.24401855]
[245.45785522 150.93795776]
[230.59126282 148.94189453]
[215.72467041 146.94584656]
[205.88429260 154.04719543]
[193.44779968 152.46438599]
[185.18621826 142.50698853]
[170.36373901 140.20610046]
[155.54125977 137.90522766]
[140.71878052 135.60435486]
[135.12463379 140.59989929]
[147.02947998 149.72538757]
[158.93434143 158.85087585]
[173.35009766 162.99647522]
[181.56918335 175.54423523]
[179.61009216 190.41575623]
[168.42184448 200.40690613]
[153.42428589 200.67776489]
[141.88258362 191.09709167]
[139.38784790 176.30580139]
[131.66209412 163.44839478]
[123.93633270 150.59100342]
[118.34218597 155.58654785]
[118.95800781 170.57389832]
[119.57382965 185.56126404]
[120.18965912 200.54861450]
[120.80548096 215.53596497]
[121.42131042 230.52331543]
[122.03713226 245.51066589]
[122.65296173 260.49801636]
[129.34448242 276.07556152]
[116.22810364 286.81787109]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 24]
[10 23]
[11 22]
[28 104]
[29 103]
[31 100]
[32 99]
[33 98]
[35 96]
[36 95]
[37 94]
[38 93]
[39 88]
[40 87]
[41 86]
[42 85]
[44 84]
[45 83]
[107 130]
[108 129]
[109 128]
[110 127]
[112 124]
[113 123]
[114 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
