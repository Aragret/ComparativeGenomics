%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAUACCCACACCCACCCAAGAACAGGGUUUGUUAAGAUGGCAGAGCCCGGUAAUCGCAUAAAxxxxxxxxxxCAACCUCAACACCACCUUCUUCGACCCCGCCGGAGGAGGAGACCCCAUUCUAUACCAACACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[102.00429535 157.36817932]
[94.99206543 170.62821960]
[87.97983551 183.88825989]
[88.36830139 199.70469666]
[75.57873535 207.33859253]
[75.96720123 223.15502930]
[63.17763519 230.78892517]
[56.16540527 244.04895020]
[49.15317917 257.30899048]
[52.48514175 273.00222778]
[42.18226242 285.29980469]
[26.14802361 284.76806641]
[16.68252182 271.81491089]
[21.04688072 256.37692261]
[35.89313889 250.29676819]
[42.90536880 237.03672791]
[49.91759491 223.77668762]
[49.02757263 208.90870667]
[62.31869888 200.32635498]
[61.42867279 185.45837402]
[74.71979523 176.87602234]
[81.73202515 163.61598206]
[88.74425507 150.35595703]
[79.08950806 138.87614441]
[64.82366180 143.51139832]
[50.55781555 148.14665222]
[36.29196548 152.78190613]
[30.60217476 167.34764099]
[16.85615158 174.80290222]
[1.54435360 171.62754822]
[-8.10345936 159.32089233]
[-7.53188419 143.69375610]
[2.98919892 132.12480164]
[18.49205589 130.07652283]
[31.65671158 138.51606750]
[45.92256165 133.88081360]
[60.18840790 129.24555969]
[74.45425415 124.61029816]
[75.43948364 117.17529297]
[60.56946564 115.20484161]
[45.69945145 113.23439026]
[30.82943916 111.26393890]
[15.95945740 109.29324341]
[17.93040276 94.42329407]
[32.79988861 96.39392090]
[47.66990280 98.36437225]
[62.53991699 100.33482361]
[77.40993500 102.30527496]
[78.39515686 94.87026978]
[65.82891846 86.67945099]
[53.26267624 78.48862457]
[36.69181824 74.90491486]
[35.54821014 57.98957825]
[51.48590469 52.20803452]
[61.45349503 65.92238617]
[74.01973724 74.11320496]
[86.58598328 82.30403137]
[96.92048645 71.43213654]
[88.10370636 59.29688263]
[72.54687500 55.37712860]
[66.04338837 40.71137619]
[73.58216858 26.54994011]
[89.38010406 23.75625801]
[101.31837463 34.47340393]
[100.23896027 50.48010254]
[109.05574036 62.61536026]
[107.13623810 47.73868179]
[105.21673584 32.86200333]
[103.29724121 17.98532867]
[101.37773895 3.10865068]
[93.55941772 -9.69267082]
[88.75329590 -23.90186501]
[87.19552612 -38.82075882]
[88.96265411 -53.71630478]
[93.96784210 -67.85660553]
[101.96516418 -80.54686737]
[112.56167603 -91.16355896]
[125.23669434 -99.18501282]
[139.36744690 -104.21710205]
[154.25959778 -106.01256561]
[169.18142700 -104.48319244]
[183.39974976 -99.70411682]
[196.21592712 -91.91017151]
[207.00022888 -81.48430634]
[215.22277832 -68.93880463]
[220.47956848 -54.89009476]
[222.51226807 -40.02846146]
[221.22103882 -25.08414078]
[216.66929626 -10.79142857]
[209.08070374 2.14740062]
[198.82812500 13.09659004]
[186.41534424 21.51814842]
[172.44750977 26.99954987]
[161.93138123 37.69584656]
[151.41523743 48.39214325]
[140.89909363 59.08843994]
[130.38294983 69.78473663]
[144.73980713 65.43955994]
[159.09666443 61.09438324]
[173.45353699 56.74920654]
[187.81039429 52.40402985]
[202.16725159 48.05885315]
[216.52410889 43.71367264]
[230.88096619 39.36849594]
[245.23783875 35.02331924]
[251.22166443 20.57590294]
[265.11596680 13.40076351]
[280.36026001 16.88578224]
[289.75665283 29.38543892]
[288.86849976 44.99777985]
[278.11511230 56.35113144]
[262.57391357 58.08479309]
[249.58300781 49.38018036]
[235.22615051 53.72535706]
[220.86929321 58.07053375]
[206.51243591 62.41571045]
[192.15556335 66.76088715]
[177.79870605 71.10606384]
[163.44184875 75.45124054]
[149.08499146 79.79642487]
[134.72813416 84.14160156]
[149.41064453 87.21139526]
[164.09317017 90.28118896]
[178.57080078 86.35715485]
[193.48884583 84.79123688]
[208.46574402 85.62348938]
[223.11843872 88.83261871]
[237.07217407 94.33655548]
[249.97006226 101.99451447]
[261.48223877 111.61064911]
[271.31423950 122.93901062]
[279.21459961 135.68984985]
[284.98129272 149.53706360]
[288.46679688 164.12649536]
[289.58197021 179.08497620]
[288.29827881 194.02995300]
[284.64859009 208.57917786]
[278.72622681 222.36051941]
[270.68267822 235.02153015]
[260.72363281 246.23837280]
[249.10383606 255.72415161]
[236.12045288 263.23629761]
[222.10559082 268.58261108]
[207.41766357 271.62643433]
[192.43232727 272.28985596]
[177.53288269 270.55590820]
[163.10038757 266.46899414]
[149.50396729 260.13357544]
[137.09136963 251.71173096]
[126.18006897 241.41885376]
[117.04912567 229.51818848]
[109.93208313 216.31410217]
[105.01096344 202.14433289]
[102.41107941 187.36541748]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 23]
[2 22]
[3 21]
[5 19]
[7 17]
[8 16]
[9 15]
[24 38]
[25 37]
[26 36]
[27 35]
[49 57]
[50 56]
[51 55]
[58 66]
[59 65]
[97 121]
[98 120]
[99 119]
[100 118]
[101 117]
[102 116]
[103 115]
[104 114]
[105 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
