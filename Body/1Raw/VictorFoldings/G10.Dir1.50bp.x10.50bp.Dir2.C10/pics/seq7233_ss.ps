%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUGAAACAUCCUAUCAUCUGUAGGCUCAUUCAUUUCUCUAACAGCAGUAAUAUUAAUAAUUxxxxxxxxxxCAACCGCCUUUUCAUCAAUCGCCCACAUCACUCGAGACGUAAAUUAUGGCUGAAUCAUCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 254.60990906]
[92.50000000 239.60990906]
[92.50000000 224.60990906]
[92.50000000 209.60990906]
[92.50000000 194.60990906]
[92.50000000 179.60990906]
[92.50000000 164.60990906]
[92.50000000 149.60990906]
[92.50000000 134.60990906]
[92.50000000 119.60990143]
[85.59300232 106.29474640]
[73.33063507 97.65563202]
[61.06826401 89.01651764]
[48.80589676 80.37740326]
[36.54352951 71.73828125]
[42.11844254 85.66381073]
[42.38756943 100.66139984]
[37.31586456 114.77797699]
[27.56379318 126.17521667]
[14.40131664 133.36891174]
[-0.45747808 135.42225647]
[-15.07760143 132.06785583]
[-27.55514526 123.74253845]
[-36.26522064 111.53047180]
[-40.07355499 97.02197266]
[-38.48421097 82.10640717]
[-31.70415497 68.72616577]
[-20.61632538 58.62369156]
[-6.66463518 53.11457443]
[8.33405304 52.91624832]
[22.42500305 58.05363083]
[13.40747356 46.06679916]
[4.38994408 34.07996750]
[-4.62758541 22.09313583]
[-17.61175156 29.63951111]
[-31.39733315 35.59720230]
[-45.79080200 39.88257599]
[-60.59009552 42.43547058]
[-75.58745575 43.22005081]
[-90.57234192 42.22529221]
[-105.33438873 39.46517181]
[-119.66636658 34.97842789]
[-133.36706543 28.82805443]
[-146.24415588 21.10038948]
[-158.11686707 11.90391731]
[-168.81852722 1.36774254]
[-178.19888306 -10.36022282]
[-186.12626648 -23.11533737]
[-192.48939514 -36.71854019]
[-197.19891357 -50.97885895]
[-200.18873596 -65.69610596]
[-201.41687012 -80.66367340]
[-200.86607361 -95.67144012]
[-198.54409790 -110.50871277]
[-194.48353577 -124.96720886]
[-188.74137878 -138.84394836]
[-181.39823914 -151.94413757]
[-172.55722046 -164.08384705]
[-162.34240723 -175.09266663]
[-150.89723206 -184.81605530]
[-138.38235474 -193.11749268]
[-124.97344971 -199.88046265]
[-110.85877228 -205.01000977]
[-96.23646545 -208.43412781]
[-81.31180573 -210.10475159]
[-66.29431915 -209.99841309]
[-51.39481354 -208.11662292]
[-36.82246399 -204.48577881]
[-22.78183937 -199.15687561]
[-9.47005081 -192.20471191]
[2.92602539 -183.72688293]
[14.23236847 -173.84239197]
[24.29025459 -162.69003296]
[32.95848846 -150.42633057]
[40.11537933 -137.22348022]
[45.66045380 -123.26682281]
[49.51587296 -108.75227356]
[51.62751007 -93.88360596]
[51.96572113 -78.86954498]
[50.52575684 -63.92087173]
[47.32783508 -49.24743652]
[42.41684341 -35.05523682]
[35.86173248 -21.54350471]
[27.75452423 -8.90192699]
[18.20902634 2.69202971]
[7.35924673 13.07560539]
[16.37677765 25.06243706]
[25.39430618 37.04927063]
[34.41183472 49.03610229]
[45.18264389 59.47591400]
[57.44501495 68.11502838]
[69.70738220 76.75415039]
[81.96974945 85.39326477]
[94.23211670 94.03237915]
[94.20587921 89.40327454]
[96.34890747 84.57085419]
[100.69971466 80.37932587]
[107.00016022 77.66001892]
[114.71012115 77.13407135]
[123.05250549 79.32328033]
[131.08493042 84.47829437]
[146.01924133 85.88059998]
[160.95355225 87.28290558]
[166.43147278 73.93329620]
[175.44668579 62.68671417]
[187.25810242 54.45323181]
[200.89891052 49.89584351]
[215.25555420 49.37707520]
[229.15879822 52.93016052]
[241.47885132 60.25707626]
[251.21717834 70.75350952]
[257.58749390 83.55870056]
[260.07916260 97.62601471]
[274.98104858 99.33870697]
[291.40698242 95.14041138]
[299.98834229 109.76218414]
[288.31353760 122.05590820]
[273.26837158 114.24060822]
[258.36645508 112.52791595]
[252.02456665 126.81707001]
[241.57205200 138.46829224]
[228.01901245 146.33776855]
[212.68069458 149.64797974]
[197.04985046 148.06452942]
[182.65148926 141.72987366]
[170.89411926 131.25062561]
[162.93185425 117.63944244]
[159.55123901 102.21720886]
[144.61694336 100.81491089]
[129.68263245 99.41260529]
[124.13697052 104.46192932]
[136.57075500 112.85245514]
[151.30091858 115.68487549]
[160.29666138 127.68806458]
[158.88073730 142.62109375]
[147.78936768 152.71966553]
[132.78936768 152.73313904]
[121.67986298 142.65451050]
[120.23703766 127.72431946]
[113.04565430 114.56057739]
[107.50000000 119.60990143]
[107.50000000 134.60990906]
[107.50000000 149.60990906]
[107.50000000 164.60990906]
[107.50000000 179.60990906]
[107.50000000 194.60990906]
[107.50000000 209.60990906]
[107.50000000 224.60990906]
[107.50000000 239.60990906]
[107.50000000 254.60990906]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 94]
[12 93]
[13 92]
[14 91]
[15 90]
[31 89]
[32 88]
[33 87]
[34 86]
[101 130]
[102 129]
[103 128]
[113 119]
[114 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
