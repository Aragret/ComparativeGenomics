%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUACCAAACCUGCAUUAAAAAUUUCGGUUGGGGCGACCUCGGAGCAGAACCCAACCUCCGxxxxxxxxxxGUCAACCUCGCUUCCCCACCCUUACUAACAUUAACGAAAAUAACCCCACCCUACUAAACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 557.37866211]
[92.50000000 542.37866211]
[92.50000000 527.37866211]
[92.50000000 512.37866211]
[92.50000000 497.37863159]
[92.50000000 482.37863159]
[92.50000000 467.37863159]
[92.50000000 452.37863159]
[92.50000000 437.37863159]
[92.50000000 422.37863159]
[77.95760345 418.82797241]
[64.67964935 411.89575195]
[53.43997574 401.98101807]
[44.89479446 389.65692139]
[39.54439163 375.63732910]
[37.70384216 360.73562622]
[39.48443985 345.81750488]
[44.78699112 331.75064087]
[53.30733109 319.35427856]
[64.55376434 309.35144043]
[77.87543488 302.32681274]
[92.50000000 298.69256592]
[78.13413239 294.52133179]
[65.51298523 286.46292114]
[55.66399765 275.16323853]
[49.39180374 261.53237915]
[47.21248627 246.67144775]
[49.31111145 231.78361511]
[55.52607346 218.07659912]
[65.36148071 206.66476440]
[78.02671051 198.47854614]
[92.50000000 194.18856812]
[92.50000000 179.18856812]
[92.50000000 164.18856812]
[92.50000000 149.18856812]
[92.50000000 134.18856812]
[84.76270294 121.46128845]
[92.50000000 107.66111755]
[90.32316589 92.81991577]
[86.01557922 78.45172882]
[81.70799255 64.08354187]
[77.40040588 49.71535873]
[72.64659119 35.48858261]
[67.45117950 21.41706085]
[62.25576401 7.34554195]
[57.06034851 -6.72597742]
[42.98407364 -13.39652729]
[37.91563797 -27.74106026]
[44.36173248 -41.11952972]
[37.17922592 -54.28810883]
[28.16169548 -66.27494049]
[19.14416504 -78.26177216]
[10.12663555 -90.24861145]
[1.10910571 -102.23544312]
[-13.98649216 -99.70927429]
[-28.52332306 -104.49875641]
[-39.16092682 -115.50330353]
[-43.45486450 -130.19413757]
[-40.41841888 -145.19541931]
[-30.74934006 -157.05996704]
[-16.66951561 -163.06140137]
[-1.41438293 -161.82061768]
[11.51053810 -153.62275696]
[19.13519478 -140.35160828]
[19.70749855 -125.05680847]
[13.09593868 -111.25296783]
[22.11346817 -99.26613617]
[31.13099861 -87.27930450]
[40.14852905 -75.29247284]
[49.16605759 -63.30564117]
[48.31534576 -78.28149414]
[53.15938187 -92.47781372]
[62.98688889 -103.81006622]
[76.35485077 -110.61430359]
[91.30038452 -111.89141083]
[105.62896729 -107.45388031]
[117.23666382 -97.95327759]
[124.41905975 -84.78463745]
[126.12152863 -69.88156128]
[122.09410095 -55.43235016]
[112.92812347 -43.55864334]
[99.96949005 -36.00391388]
[85.12098694 -33.87746429]
[70.56287384 -37.49152374]
[58.43325424 -46.31494522]
[72.02663422 -40.33535004]
[77.49597931 -26.13883972]
[71.13186646 -11.92139244]
[76.32728577 2.15012670]
[81.52269745 16.22164536]
[86.71811676 30.29316521]
[89.81726837 32.09947205]
[92.17032623 35.52945328]
[93.00878143 40.20378494]
[91.76859283 45.40777588]
[96.07617950 59.77595901]
[100.38376617 74.14414215]
[104.69134521 88.51232910]
[109.08034515 74.16880035]
[118.54158783 62.52900696]
[131.68583679 55.30206680]
[146.58306885 53.54914856]
[161.04583740 57.52764130]
[172.95050049 66.65335846]
[180.54905701 79.58634186]
[182.72576904 94.42756653]
[179.16102600 108.99782562]
[170.37823486 121.15770721]
[157.66703796 129.12170410]
[142.89385986 131.72044373]
[128.22793579 128.57232666]
[115.82272339 120.13961029]
[107.50000000 107.66111755]
[115.23729706 121.46128845]
[107.50000000 134.18856812]
[107.50000000 149.18856812]
[107.50000000 164.18856812]
[107.50000000 179.18856812]
[107.50000000 194.18856812]
[121.97328949 198.47854614]
[134.63851929 206.66476440]
[144.47392273 218.07659912]
[150.68888855 231.78361511]
[152.78752136 246.67144775]
[150.60820007 261.53237915]
[144.33599854 275.16323853]
[134.48701477 286.46292114]
[121.86586761 294.52133179]
[107.50000000 298.69256592]
[122.12456512 302.32681274]
[135.44624329 309.35144043]
[146.69267273 319.35427856]
[155.21301270 331.75064087]
[160.51556396 345.81750488]
[162.29615784 360.73562622]
[160.45561218 375.63732910]
[155.10520935 389.65692139]
[146.56002808 401.98101807]
[135.32034302 411.89575195]
[122.04239655 418.82797241]
[107.50000000 422.37863159]
[107.50000000 437.37863159]
[107.50000000 452.37863159]
[107.50000000 467.37863159]
[107.50000000 482.37863159]
[107.50000000 497.37863159]
[107.50000000 512.37866211]
[107.50000000 527.37866211]
[107.50000000 542.37866211]
[107.50000000 557.37866211]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[22 129]
[32 119]
[33 118]
[34 117]
[35 116]
[36 115]
[38 113]
[39 98]
[40 97]
[41 96]
[42 95]
[43 91]
[44 90]
[45 89]
[46 88]
[49 85]
[50 70]
[51 69]
[52 68]
[53 67]
[54 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
