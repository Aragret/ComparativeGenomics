%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUUACACCUAGCAGGUGUCUCCUCUAUCUUAGGGGCCAUCAAUUUCAUCACAACAAUUAUxxxxxxxxxxCACAUUAACAACAUAAAACCCUCAUUCACACGAGAAAACACCCUCAUGUUCAUACACCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 255.29391479]
[92.50000000 240.29391479]
[92.50000000 225.29391479]
[92.50000000 210.29391479]
[92.50000000 195.29391479]
[92.50000000 180.29391479]
[92.50000000 165.29391479]
[92.50000000 150.29391479]
[92.50000000 135.29391479]
[92.50000000 120.29392242]
[85.70452118 117.12035370]
[73.41245270 125.71715546]
[72.11357117 110.77322388]
[65.31809998 107.59966278]
[53.81629562 117.22818756]
[42.31449127 126.85671234]
[30.81268692 136.48524475]
[19.31088448 146.11376953]
[7.80908108 155.74229431]
[-0.45500216 170.54571533]
[-16.96762466 166.70259094]
[-17.84584045 149.77140808]
[-1.81944525 144.24049377]
[9.68235779 134.61196899]
[21.18416214 124.98343658]
[32.68596649 115.35491180]
[44.18776703 105.72638702]
[55.68957138 96.09785461]
[60.88498688 82.02633667]
[58.39986801 67.23362732]
[55.91474915 52.44092178]
[40.93073654 50.60807800]
[27.08428192 44.63330460]
[15.49414730 35.00865555]
[7.09416819 22.52071571]
[2.55800605 8.18630886]
[2.24513364 -6.83028936]
[6.17236090 -21.31192017]
[14.01316643 -34.08719254]
[25.12482643 -44.12523651]
[38.60109329 -50.61888504]
[36.11597443 -65.41159058]
[33.63085556 -80.20429993]
[31.14573860 -94.99700928]
[16.15187836 -94.18204498]
[1.16105103 -95.05101013]
[-13.63821793 -97.59298706]
[-28.05981255 -101.77600861]
[-41.92236328 -107.54745483]
[-55.05154037 -114.83475494]
[-67.28222656 -123.54626465]
[-78.46060181 -133.57243347]
[-88.44609833 -144.78713989]
[-97.11312866 -157.04939270]
[-104.35269928 -170.20494080]
[-110.07376099 -184.08836365]
[-114.20437622 -198.52505493]
[-116.69258881 -213.33346558]
[-117.50710297 -228.32734680]
[-116.63768768 -243.31814575]
[-114.09526825 -258.11734009]
[-109.91181946 -272.53881836]
[-104.13995361 -286.40118408]
[-96.85225677 -299.53015137]
[-88.14038086 -311.76055908]
[-78.11389160 -322.93865967]
[-66.89887238 -332.92379761]
[-54.63636780 -341.59048462]
[-41.48059845 -348.82965088]
[-27.59700394 -354.55029297]
[-13.16018963 -358.68048096]
[1.64828861 -361.16824341]
[16.64219666 -361.98233032]
[31.63297272 -361.11245728]
[46.43209076 -358.56958008]
[60.85343552 -354.38571167]
[74.71564484 -348.61343384]
[87.84438324 -341.32534790]
[100.07453918 -332.61309814]
[111.25231934 -322.58627319]
[121.23714447 -311.37094116]
[129.90344238 -299.10818481]
[137.14222717 -285.95220947]
[142.86245728 -272.06845093]
[146.99220276 -257.63150024]
[149.47953796 -242.82295227]
[150.29315186 -227.82902527]
[149.42283630 -212.83827209]
[146.87953186 -198.03923035]
[142.69522095 -183.61801147]
[136.92253113 -169.75596619]
[129.63404846 -156.62745667]
[120.92144775 -144.39755249]
[110.89427948 -133.22007751]
[99.67866516 -123.23558044]
[87.41564941 -114.56965637]
[74.25944519 -107.33126068]
[60.37550735 -101.61144257]
[45.93844604 -97.48212433]
[48.42356491 -82.68942261]
[50.90868378 -67.89671326]
[53.39380264 -53.10400391]
[68.25220490 -51.37047195]
[82.03401184 -45.51443481]
[93.61896515 -36.00261688]
[102.06275940 -23.59927177]
[106.67404175 -9.30478859]
[107.07095337 5.72499609]
[103.21278381 20.27225685]
[95.40394592 33.15585709]
[84.26998901 43.32724762]
[70.70745850 49.95580673]
[73.19257355 64.74851227]
[75.67769623 79.54122162]
[95.24624634 65.77506256]
[120.93399048 69.09893036]
[138.92765808 90.39459229]
[152.58390808 96.59999847]
[166.24014282 102.80541229]
[179.89639282 109.01081848]
[194.60385132 103.22582245]
[209.06063843 109.61146545]
[214.68981934 124.37926483]
[208.15168762 138.76774597]
[193.32519531 144.24047852]
[179.00665283 137.55058289]
[173.69097900 122.66705322]
[160.03474426 116.46164703]
[146.37849426 110.25624084]
[132.72225952 104.05083466]
[126.41669464 108.11161041]
[135.42614746 120.10451508]
[144.43559265 132.09742737]
[156.94566345 140.37377930]
[156.85317993 155.37350464]
[144.24201965 163.49497986]
[130.54783630 157.37376404]
[128.18832397 142.56062317]
[120.99694824 129.39688110]
[113.80556488 116.23314667]
[107.50000000 120.29392242]
[107.50000000 135.29391479]
[107.50000000 150.29391479]
[107.50000000 165.29391479]
[107.50000000 180.29391479]
[107.50000000 195.29391479]
[107.50000000 210.29391479]
[107.50000000 225.29391479]
[107.50000000 240.29391479]
[107.50000000 255.29391479]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[14 28]
[15 27]
[16 26]
[17 25]
[18 24]
[19 23]
[29 114]
[30 113]
[31 112]
[41 102]
[42 101]
[43 100]
[44 99]
[117 130]
[118 129]
[119 128]
[120 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
