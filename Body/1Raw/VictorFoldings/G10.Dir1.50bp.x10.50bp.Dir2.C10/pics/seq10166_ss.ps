%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUACUCUUAAAACUAGGCGGCUAUGGUAUAAUACGCCUCACACUCAUUCUCAACCCCCUGAxxxxxxxxxxUAACAAGCUCCAUCUGCCUACGACAAACAGACCUAAAAUCGCUCAUUGCAUACUCUUCAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[84.06872559 386.62237549]
[84.06872559 371.62237549]
[84.06872559 356.62237549]
[84.06872559 341.62237549]
[84.06872559 326.62237549]
[84.06872559 311.62237549]
[84.06872559 296.62237549]
[84.06872559 281.62237549]
[84.06872559 266.62237549]
[84.06872559 251.62237549]
[69.02824402 248.02536011]
[55.27092361 240.94297791]
[43.59170532 230.77983093]
[34.66658020 218.11865234]
[29.01343727 203.68692017]
[26.96202087 188.31503296]
[28.63470650 172.88856506]
[33.93919373 158.29725647]
[42.57360458 145.38365173]
[54.04365540 134.89447021]
[67.69094086 127.43742371]
[82.73074341 123.44603729]
[85.24913025 93.17015076]
[76.99684143 80.64418793]
[68.74455261 68.11822510]
[60.49226379 55.59226608]
[52.23997498 43.06630325]
[43.98768616 30.54034233]
[35.73539734 18.01437950]
[29.91490173 14.66336155]
[27.12712860 9.61760807]
[27.41304207 4.79124594]
[19.68895721 -8.06715679]
[11.96487141 -20.92555809]
[4.24078655 -33.78396225]
[-9.41577244 -27.54069138]
[-23.68549538 -22.86575890]
[-38.38892746 -19.81795502]
[-53.34115601 -18.43560982]
[-68.35414124 -18.73610497]
[-83.23907471 -20.71566391]
[-97.80877686 -24.34939194]
[-111.87999725 -29.59159088]
[-125.27579498 -36.37633133]
[-137.82768250 -44.61829376]
[-149.37783813 -54.21382141]
[-159.78097534 -65.04224396]
[-168.90628052 -76.96737671]
[-176.63897705 -89.83925629]
[-182.88183594 -103.49600220]
[-187.55635071 -117.76586914]
[-190.60371399 -132.46939087]
[-191.98561096 -147.42166138]
[-191.68466187 -162.43463135]
[-189.70466614 -177.31951904]
[-186.07049561 -191.88909912]
[-180.82788086 -205.96017456]
[-174.04273987 -219.35575867]
[-165.80039978 -231.90740967]
[-156.20452881 -243.45727539]
[-145.37579346 -253.86007690]
[-133.45037842 -262.98501587]
[-120.57826996 -270.71734619]
[-106.92134094 -276.95980835]
[-92.65133667 -281.63388062]
[-77.94772339 -284.68081665]
[-62.99541092 -286.06225586]
[-47.98244476 -285.76086426]
[-33.09762573 -283.78042603]
[-18.52814674 -280.14581299]
[-4.45723534 -274.90277100]
[8.93815231 -268.11721802]
[21.48955536 -259.87451172]
[33.03912735 -250.27830505]
[43.44161606 -239.44924927]
[52.56620789 -227.52357483]
[60.29814148 -214.65122986]
[66.54018402 -200.99411011]
[71.21383667 -186.72396851]
[74.26032257 -172.02026367]
[75.64132690 -157.06791687]
[75.33948517 -142.05494690]
[73.35858917 -127.17019653]
[69.72355652 -112.60082245]
[64.48009491 -98.53006744]
[57.69414902 -85.13488770]
[49.45106506 -72.58373260]
[39.85449982 -61.03444672]
[29.02514458 -50.63227844]
[17.09918976 -41.50804520]
[24.82327461 -28.64964294]
[32.54735947 -15.79124165]
[40.27144241 -2.93283892]
[48.26136017 9.76209068]
[56.51364899 22.28805351]
[64.76593781 34.81401443]
[73.01822662 47.33997726]
[81.27051544 59.86594009]
[89.52280426 72.39189911]
[97.77509308 84.91786194]
[111.29928589 91.40602875]
[126.23358917 90.00372314]
[141.16790771 88.60141754]
[145.27539062 73.99002075]
[154.38688660 61.85144424]
[167.27012634 53.82732773]
[182.18276978 51.00286865]
[197.10800171 53.76005173]
[210.02729797 61.72599411]
[219.19343567 73.82336426]
[223.36676025 88.41609192]
[221.98289490 103.53063202]
[215.22895813 117.12286377]
[204.01838684 127.35455322]
[189.86730957 132.84194946]
[174.68954468 132.84292603]
[160.53776550 127.35734558]
[149.32588196 117.12709808]
[142.57020569 103.53572845]
[127.63589478 104.93803406]
[112.70159149 106.34033203]
[127.63535309 107.74844360]
[137.76971436 118.80712891]
[137.87228394 133.80677795]
[127.89011383 145.00303650]
[112.97700500 146.61524963]
[100.83264160 137.81101990]
[97.72750092 123.13398743]
[111.98202515 126.17386627]
[125.18997955 132.31903076]
[136.68479919 141.25563049]
[145.88720703 152.52905273]
[152.33441162 165.56703186]
[155.70335388 179.70869446]
[155.82695007 194.23803711]
[152.70230103 208.42025757]
[146.49072266 221.53880310]
[137.50939941 232.93167114]
[126.21520996 242.02474976]
[113.18143463 248.36079407]
[99.06872559 251.62237549]
[99.06872559 266.62237549]
[99.06872559 281.62237549]
[99.06872559 296.62237549]
[99.06872559 311.62237549]
[99.06872559 326.62237549]
[99.06872559 341.62237549]
[99.06872559 356.62237549]
[99.06872559 371.62237549]
[99.06872559 386.62237549]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[22 128]
[23 100]
[24 99]
[25 98]
[26 97]
[27 96]
[28 95]
[29 94]
[32 93]
[33 92]
[34 91]
[35 90]
[101 121]
[102 120]
[103 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
