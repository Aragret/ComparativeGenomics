%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUUAAAAAUUUCGGUUGGGGCGACCUCGGAGCAGAACCCAACCUCCGAGCAGUACAUGCUAxxxxxxxxxxUGAAACAUCCUAUCAUCUGUAGGCUCAUUCAUUUCUCUAACAGCAGUAAUAUUAAUAAUUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[107.26472473 338.39813232]
[107.26472473 323.39813232]
[107.26472473 308.39813232]
[107.26472473 293.39813232]
[107.26472473 278.39813232]
[107.26472473 263.39813232]
[107.26472473 248.39813232]
[107.26472473 233.39813232]
[107.26472473 218.39813232]
[107.26472473 203.39813232]
[105.57432556 188.49368286]
[102.21507263 173.87467957]
[98.85581207 159.25567627]
[95.49655151 144.63665771]
[88.71560669 141.43217468]
[89.94631195 156.38160706]
[77.61512756 164.92221069]
[64.05311584 158.51348877]
[62.82213593 143.56408691]
[75.15370941 135.02319336]
[68.37275696 131.81871033]
[54.94531250 138.50479126]
[41.51786041 145.19085693]
[32.61326599 158.26828003]
[17.77146721 157.01516724]
[6.28794289 169.48773193]
[-8.87615013 161.90573120]
[-5.78830338 145.23536682]
[11.08539200 143.58770752]
[19.02956772 130.98852539]
[34.83178711 131.76341248]
[48.25923538 125.07733917]
[61.68668365 118.39125824]
[62.72626495 105.96735382]
[67.28065491 95.72096252]
[53.23867798 90.44622803]
[39.19670105 85.17148590]
[25.15472412 79.89674377]
[11.11274815 74.62200165]
[-2.92922831 69.34725952]
[-16.97120476 64.07251740]
[-28.35287857 74.30560303]
[-43.18925858 78.06598663]
[-58.07104874 74.48955536]
[-69.57852936 64.39813995]
[-75.06735229 50.11069107]
[-73.27624512 34.91034317]
[-64.61677551 22.29003525]
[-51.07883835 15.14981556]
[-35.77334213 15.13045788]
[-22.21738052 22.23640823]
[-13.52601814 34.83477402]
[-11.69646263 50.03054047]
[2.34551334 55.30528259]
[16.38748932 60.58002472]
[30.42946625 65.85476685]
[44.47144318 71.12950897]
[58.51342010 76.40425110]
[72.55539703 81.67899323]
[76.66695404 76.66687775]
[81.67908478 72.55533600]
[87.39833069 69.50305176]
[93.60395813 67.62784576]
[100.05644226 67.00208282]
[106.50675201 67.64991760]
[112.70593262 69.54634857]
[118.41470337 72.61817169]
[129.39550781 62.39946365]
[140.37631226 52.18075943]
[151.35711670 41.96205139]
[144.38528442 29.21064186]
[140.68283081 15.16708946]
[140.46214294 0.65483141]
[143.73158264 -13.47634220]
[150.29528809 -26.40004921]
[159.76489258 -37.36164474]
[171.58247375 -45.72228241]
[185.05345154 -50.99614716]
[199.38743591 -52.87868118]
[213.74455261 -51.26417542]
[227.28465271 -46.25168610]
[239.21652222 -38.13896942]
[250.40481567 -48.13006592]
[261.59310913 -58.12116241]
[272.78140259 -68.11225891]
[269.76339722 -83.10688782]
[274.62390137 -97.50383759]
[285.96270752 -107.46867371]
[300.66851807 -110.40042114]
[314.77227783 -105.60991669]
[325.96057129 -115.60101318]
[337.14889526 -125.59210968]
[348.33718872 -135.58320618]
[359.52548218 -145.57431030]
[361.86282349 -161.44618225]
[375.80117798 -169.38984680]
[390.64822388 -163.31161499]
[395.01455688 -147.87417603]
[385.55075073 -134.91981506]
[369.51657104 -134.38600159]
[358.32827759 -124.39491272]
[347.13998413 -114.40381622]
[335.95169067 -104.41271973]
[324.76339722 -94.42162323]
[327.93395996 -79.86782837]
[323.36364746 -65.58608246]
[312.18450928 -55.44247818]
[297.33151245 -52.23537827]
[282.77252197 -56.92396545]
[271.58422852 -46.93286514]
[260.39590454 -36.94176865]
[249.20762634 -26.95067215]
[256.30310059 -13.15574837]
[259.60263062 2.01343560]
[258.87725830 17.53148842]
[254.17036438 32.34792328]
[245.79502869 45.45826721]
[234.31324768 55.97216415]
[220.49821472 63.17383194]
[205.28221130 66.57079315]
[189.69380188 65.92756653]
[174.78817749 61.28194046]
[161.57582092 52.94285202]
[150.59501648 63.16156006]
[139.61421204 73.38026428]
[128.63340759 83.59897614]
[134.69242859 114.87870026]
[110.11556244 141.27740479]
[113.47482300 155.89640808]
[116.83407593 170.51541138]
[120.19333649 185.13442993]
[126.26678467 171.41899109]
[137.93916321 161.99797058]
[152.62750244 158.95614624]
[167.08142090 162.96664429]
[178.10243225 173.14198303]
[183.25169373 187.23046875]
[181.38970947 202.11445618]
[172.92854309 214.50027466]
[159.74055481 221.64709473]
[144.74411011 221.97337341]
[131.25775146 215.40692139]
[122.26472473 203.39813232]
[122.26472473 218.39813232]
[122.26472473 233.39813232]
[122.26472473 248.39813232]
[122.26472473 263.39813232]
[122.26472473 278.39813232]
[122.26472473 293.39813232]
[122.26472473 308.39813232]
[122.26472473 323.39813232]
[122.26472473 338.39813232]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 131]
[12 130]
[13 129]
[14 128]
[21 33]
[22 32]
[23 31]
[25 29]
[35 59]
[36 58]
[37 57]
[38 56]
[39 55]
[40 54]
[41 53]
[67 126]
[68 125]
[69 124]
[70 123]
[82 112]
[83 111]
[84 110]
[85 109]
[90 104]
[91 103]
[92 102]
[93 101]
[94 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
