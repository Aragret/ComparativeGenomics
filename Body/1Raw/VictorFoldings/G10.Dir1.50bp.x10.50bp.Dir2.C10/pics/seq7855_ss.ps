%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAUCUGUGGAGCAAACCACAGUUUCAUGCCCAUCGUCCUAGAAUUAAUUCCCCUAAAAAUCxxxxxxxxxxACAAACUUACUAUCCGCCAUCCCAUACAUUGGGACAGACCUAGUUCAAUGAAUCUGAGGAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.36930847 239.79681396]
[95.06133270 224.79997253]
[94.75335693 209.80313110]
[94.44537354 194.80628967]
[94.13739777 179.80946350]
[93.82942200 164.81262207]
[93.52144623 149.81578064]
[93.21346283 134.81893921]
[92.90548706 119.82210541]
[79.41010284 113.27423859]
[67.43984985 122.31375885]
[55.46958923 131.35327148]
[49.11957932 145.84423828]
[34.30023193 147.33963013]
[22.32997131 156.37915039]
[10.35971355 165.41867065]
[-1.61054480 174.45819092]
[-13.58080292 183.49771118]
[-25.55106163 192.53723145]
[-27.48602104 208.22262573]
[-39.99671555 217.87963867]
[-55.66077042 215.77896118]
[-65.18498230 203.16685486]
[-62.91880417 187.52589417]
[-50.20671844 178.13555908]
[-34.59057999 180.56697083]
[-22.62032318 171.52745056]
[-10.65006447 162.48793030]
[1.32019413 153.44841003]
[13.29045296 144.40888977]
[25.26071167 135.36936951]
[30.75452805 121.52497864]
[46.43006897 119.38301849]
[58.40032578 110.34349823]
[70.37058258 101.30397797]
[75.50088501 87.20858765]
[72.14163208 72.58958435]
[68.78237152 57.97057343]
[53.90205002 59.94809723]
[38.90193939 60.52349854]
[23.91385651 59.69172668]
[9.06952190 57.46008682]
[-5.50060797 53.84819031]
[-19.66848755 48.88778305]
[-33.30960846 42.62245560]
[-46.30408478 35.10726929]
[-58.53772354 26.40826988]
[-69.90300751 16.60190582]
[-80.30006409 5.77435923]
[-89.63751221 -5.97921658]
[-97.83329010 -18.55552864]
[-104.81538391 -31.84405136]
[-110.52242279 -45.72800446]
[-114.90425873 -60.08537292]
[-117.92238617 -74.78997803]
[-119.55026245 -89.71259308]
[-119.77360535 -104.72207642]
[-118.59043884 -119.68652344]
[-116.01115417 -134.47441101]
[-112.05844116 -148.95579529]
[-106.76701355 -163.00340271]
[-100.18338776 -176.49378967]
[-92.36541748 -189.30838013]
[-83.38180542 -201.33456421]
[-73.31150818 -212.46665955]
[-62.24302292 -222.60684204]
[-50.27362442 -231.66596985]
[-37.50849915 -239.56445312]
[-24.05983162 -246.23287964]
[-10.04581165 -251.61262512]
[4.41040325 -255.65643311]
[19.18176651 -258.32873535]
[34.13846588 -259.60607910]
[49.14905930 -259.47723389]
[64.08162689 -257.94332886]
[78.80493927 -255.01783752]
[93.18960571 -250.72647095]
[107.10920715 -245.10693359]
[120.44142151 -238.20863342]
[133.06907654 -230.09217834]
[144.88119507 -220.82890320]
[155.77398682 -210.50022888]
[165.65168762 -199.19689941]
[174.42753601 -187.01826477]
[182.02436829 -174.07135010]
[188.37544250 -160.46994019]
[193.42494202 -146.33355713]
[197.12847900 -131.78645325]
[199.45352173 -116.95646667]
[200.37963867 -101.97391510]
[199.89866638 -86.97048187]
[198.01484680 -72.07801056]
[194.74475098 -57.42737961]
[190.11709595 -43.14735031]
[184.17256165 -29.36341286]
[176.96337891 -16.19670486]
[168.55290222 -3.76293945]
[159.01506042 7.82861280]
[148.43367004 18.47608376]
[136.90171814 28.08589935]
[124.52056122 36.57360840]
[111.39898682 43.86461639]
[97.65232086 49.89485168]
[83.40137482 54.61131287]
[86.76063538 69.23032379]
[90.11989594 83.84932709]
[108.45333099 73.46499634]
[133.79113770 85.51497650]
[148.50665283 88.42244720]
[163.22218323 91.32992554]
[177.93769836 94.23739624]
[192.65322876 97.14486694]
[207.49855042 99.29344940]
[222.43455505 100.67747498]
[235.64593506 91.57586670]
[250.95658875 96.36788177]
[256.62149048 111.37748718]
[248.29502869 125.09060669]
[232.36454773 126.98770142]
[221.05053711 115.61348724]
[206.11451721 114.22946167]
[213.23167419 127.43347168]
[207.53999329 141.31169128]
[193.20126343 145.71629333]
[180.70001221 137.42662048]
[179.17720032 122.50411987]
[189.74574280 111.86038971]
[175.03022766 108.95291901]
[160.31471252 106.04544830]
[145.59918213 103.13796997]
[130.88366699 100.23049927]
[125.13832855 105.05140686]
[136.65849304 114.65795135]
[148.17866516 124.26449585]
[161.78532410 130.57786560]
[166.68522644 144.75500488]
[159.88079834 158.12286377]
[145.53472900 162.50352478]
[132.42338562 155.21705627]
[128.56794739 140.71984863]
[121.10780334 127.70653534]
[113.64765930 114.69322205]
[107.90232849 119.51412964]
[108.21030426 134.51097107]
[108.51828003 149.50781250]
[108.82626343 164.50463867]
[109.13423920 179.50148010]
[109.44221497 194.49832153]
[109.75019073 209.49516296]
[110.05816650 224.49198914]
[110.36614990 239.48883057]
[112.95191956 258.69726562]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 151]
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 35]
[11 34]
[12 33]
[14 31]
[15 30]
[16 29]
[17 28]
[18 27]
[19 26]
[36 106]
[37 105]
[38 104]
[108 131]
[109 130]
[110 129]
[111 128]
[112 127]
[113 121]
[114 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
