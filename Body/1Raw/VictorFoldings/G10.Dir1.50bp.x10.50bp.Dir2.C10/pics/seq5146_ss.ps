%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAAGCCUUCUCCUCACUCUCUCAAUCUUAUCCAUCAUAGCAGGCAGUUGAGGUGGAUUAAxxxxxxxxxxAACACUAUACCUAUUAUUCGGCGCAUGAGCUGGAGUCCUAGGCACAGCUCUAAGCCUCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[99.98797607 277.64907837]
[99.98797607 262.64907837]
[99.98797607 247.64906311]
[99.98797607 232.64906311]
[99.98797607 217.64906311]
[99.98797607 202.64906311]
[99.98797607 187.64906311]
[99.98797607 172.64906311]
[99.98797607 157.64906311]
[99.98797607 142.64906311]
[79.04868317 134.42718506]
[66.29506683 117.44809723]
[64.47853851 97.55477142]
[72.83878326 80.80778503]
[62.85605240 69.61201477]
[52.87332535 58.41625214]
[40.01492310 50.69216537]
[25.44222260 47.13740158]
[7.92898989 52.72905731]
[-4.30715370 40.18805313]
[-18.95065498 36.93722916]
[-33.59415436 33.68640137]
[-48.74318695 38.24901581]
[-59.49113464 27.93733025]
[-54.10646057 41.93751907]
[-61.51026535 54.98296356]
[-76.29096985 57.53850174]
[-87.64507294 47.73623657]
[-87.27364349 32.74083710]
[-75.44881439 23.51286697]
[-89.67559052 18.75905228]
[-103.90236664 14.00523758]
[-118.12915039 9.25142288]
[-132.35592651 4.49760771]
[-141.55335999 4.74096441]
[-146.82742310 -0.50591904]
[-160.95222473 -5.55467558]
[-170.38575745 6.28961277]
[-183.15533447 14.42697716]
[-197.87580872 17.97473907]
[-212.95039368 16.54806137]
[-226.74392700 10.30170155]
[-237.76019287 -0.08678267]
[-244.80422974 -13.49052620]
[-247.11193848 -28.45559120]
[-244.43301392 -43.35868073]
[-237.05802917 -56.58321762]
[-225.78698730 -66.69470215]
[-211.84245300 -72.59632111]
[-196.73706055 -73.64790344]
[-182.10931396 -69.73538208]
[-169.54592896 -61.28316879]
[-160.40968323 -49.20808411]
[-155.69160461 -34.81995010]
[-155.90347290 -19.67947769]
[-141.77867126 -14.63072205]
[-127.60211182 -9.72917080]
[-113.37533569 -4.97535658]
[-99.14855194 -0.22154157]
[-84.92177582 4.53227329]
[-70.69499969 9.28608799]
[-56.24030685 13.29382801]
[-42.13867950 8.49869347]
[-30.34333038 19.04290199]
[-15.69982910 22.29372787]
[-1.05632770 25.54455376]
[9.35320282 19.30364037]
[21.61191940 21.93856812]
[28.99698448 32.56470108]
[43.56968689 36.11946106]
[33.11124802 25.36673927]
[24.98296738 12.75995350]
[19.50518036 -1.20406616]
[16.89376450 -15.97500038]
[17.25163460 -30.97073174]
[20.56468773 -45.60028076]
[26.70235825 -59.28709793]
[35.42276001 -71.49179077]
[46.38222504 -81.73338318]
[59.14884567 -89.60824585]
[73.21949005 -94.80603027]
[88.03963470 -97.12190247]
[103.02522278 -96.46459198]
[117.58567810 -92.86000061]
[131.14718628 -86.45018768]
[143.17526245 -77.48776245]
[153.19592285 -66.32592773]
[160.81422424 -53.40456772]
[165.72993469 -39.23291779]
[167.74934387 -24.36947060]
[166.79286194 -9.39999771]
[162.89816284 5.08556032]
[156.21876526 18.51633072]
[147.01788330 30.36301041]
[135.65812683 40.15872574]
[122.58718872 47.51742554]
[108.32018280 52.14911270]
[93.41937256 53.87124634]
[78.47198486 52.61595917]
[64.06909180 48.43352509]
[74.05181885 59.62929153]
[84.03454590 70.82505798]
[98.49739838 64.89618683]
[114.92913818 66.13003540]
[129.80416870 75.01321411]
[139.60450745 90.31803131]
[141.63804626 109.23123932]
[156.28155518 112.48207092]
[170.92504883 115.73289490]
[185.56855774 118.98371887]
[200.21205139 122.23454285]
[214.85556030 125.48536682]
[226.17611694 119.21650696]
[238.33735657 122.26992798]
[244.91751099 132.46839905]
[259.49020386 136.02316284]
[273.89123535 128.95280457]
[288.33584595 135.93368530]
[291.74337769 151.61068726]
[281.49984741 163.95774841]
[265.46325684 163.50325012]
[255.93545532 150.59587097]
[241.36274719 147.04110718]
[224.84426880 152.88403320]
[211.60473633 140.12887573]
[196.96122742 136.87805176]
[182.31773376 133.62722778]
[167.67422485 130.37638855]
[153.03073120 127.12557220]
[138.38722229 123.87474060]
[132.53741455 128.56832886]
[143.82975769 138.44166565]
[155.12211609 148.31500244]
[167.21374512 157.19151306]
[167.53565979 172.18804932]
[155.83607483 181.57525635]
[141.26568604 178.01104736]
[135.22055054 164.28295898]
[128.02917480 151.11921692]
[120.83779144 137.95549011]
[114.98797607 142.64906311]
[114.98797607 157.64906311]
[114.98797607 172.64906311]
[114.98797607 187.64906311]
[114.98797607 202.64906311]
[114.98797607 217.64906311]
[114.98797607 232.64906311]
[114.98797607 247.64906311]
[114.98797607 262.64907837]
[114.98797607 277.64907837]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[14 102]
[15 101]
[16 100]
[17 70]
[18 69]
[20 66]
[21 65]
[22 64]
[24 62]
[30 61]
[31 60]
[32 59]
[33 58]
[34 57]
[36 56]
[37 55]
[107 130]
[108 129]
[109 128]
[110 127]
[111 126]
[112 125]
[115 123]
[116 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
