%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAAAUUAUAACCAAGCAUAAUAUAGCAAGGACUAACCCCUAUACCUUCUGCAUAAUGAAUUAAxxxxxxxxxxCCCUGACAAAACACAUAGCCUACCCCUUCCUUGUACUAUCCCUAUGAGGCAUAAUUAUAACAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[89.94519043 436.23040771]
[89.94519043 421.23040771]
[89.94519043 406.23040771]
[89.94519043 391.23040771]
[89.94519043 376.23040771]
[89.94519043 361.23040771]
[89.94519043 346.23040771]
[89.94519043 331.23040771]
[89.94519043 316.23040771]
[89.94519043 301.23040771]
[75.66413879 298.35787964]
[62.21842957 292.74026489]
[50.13032532 284.59359741]
[39.86978149 274.23229980]
[31.83615875 262.05685425]
[26.34268570 248.53842163]
[23.60424423 234.20062256]
[23.72896767 219.59921265]
[26.71397209 205.30053711]
[32.44538879 191.85960388]
[40.70270538 179.79850769]
[51.16726685 169.58616638]
[63.43454361 161.62007141]
[77.02978516 156.21084595]
[91.42640686 153.57011414]
[91.72653961 138.57312012]
[84.24544525 125.69358826]
[92.25732422 112.05098724]
[85.67892456 99.71339417]
[92.74568176 87.64888000]
[93.04581451 72.65187836]
[92.74568176 57.65488434]
[91.84576416 42.68190384]
[90.94584656 27.70892143]
[90.04592896 12.73594093]
[88.84660339 -2.21603560]
[87.34834290 -17.14102173]
[85.85009003 -32.06600952]
[84.35182953 -46.99099350]
[82.85356903 -61.91598129]
[81.35531616 -76.84096527]
[66.34640503 -76.66710663]
[51.38085938 -77.82041931]
[36.57580948 -80.29189301]
[22.04713058 -84.06217957]
[7.90852451 -89.10176849]
[-5.72934961 -95.37121582]
[-18.75975609 -102.82146454]
[-31.08071136 -111.39418793]
[-42.59578323 -121.02230835]
[-53.21485519 -131.63046265]
[-62.85481262 -143.13563538]
[-71.44020844 -155.44776917]
[-78.90385437 -168.47050476]
[-85.18732452 -182.10191345]
[-90.24145508 -196.23533630]
[-94.02667236 -210.76013184]
[-96.51337433 -225.56263733]
[-97.68208313 -240.52697754]
[-97.52365112 -255.53605652]
[-96.03932953 -270.47241211]
[-93.24072266 -285.21911621]
[-89.14974213 -299.66076660]
[-83.79840088 -313.68435669]
[-77.22858429 -327.18008423]
[-69.49171448 -340.04238892]
[-60.64833832 -352.17056274]
[-50.76766968 -363.46966553]
[-39.92704010 -373.85128784]
[-28.21129417 -383.23419189]
[-15.71212482 -391.54495239]
[-2.52735758 -398.71847534]
[11.23981762 -404.69863892]
[25.48165321 -409.43865967]
[40.08668137 -412.90142822]
[54.94060135 -415.05984497]
[69.92715454 -415.89700317]
[84.92905426 -415.40634155]
[99.82888031 -413.59173584]
[114.51001740 -410.46737671]
[128.85757446 -406.05770874]
[142.75926208 -400.39724731]
[156.10626221 -393.53027344]
[168.79412842 -385.51055908]
[180.72355652 -376.40087891]
[191.80117798 -366.27252197]
[201.94029236 -355.20471191]
[211.06153870 -343.28414917]
[219.09355164 -330.60406494]
[225.97344971 -317.26373291]
[231.64739990 -303.36752319]
[236.07098389 -289.02426147]
[239.20959473 -274.34616089]
[241.03865051 -259.44808960]
[241.54383850 -244.44668579]
[240.72122192 -229.45932007]
[238.57722473 -214.60331726]
[235.12863159 -199.99493408]
[230.40243530 -185.74850464]
[224.43560791 -171.97554016]
[217.27487183 -158.78382874]
[208.97625732 -146.27659607]
[199.60472107 -134.55175781]
[189.23359680 -123.70106506]
[177.94407654 -113.80944061]
[165.82449341 -104.95430756]
[152.96972656 -97.20496368]
[139.48034668 -90.62205505]
[125.46196747 -85.25711823]
[111.02428436 -81.15213013]
[96.28029633 -78.33922577]
[97.77855682 -63.41423798]
[99.27681732 -48.48925400]
[100.77507782 -33.56426620]
[102.27333069 -18.63928032]
[103.77159119 -3.71429372]
[106.88003540 -0.02156410]
[107.66477203 5.67831993]
[105.01891327 11.83602524]
[105.91883087 26.80900574]
[106.81874084 41.78198624]
[107.71865845 56.75496674]
[109.78495026 58.72731781]
[111.17163086 61.65970612]
[111.50038910 65.28893280]
[110.49835205 69.21683502]
[108.04280853 72.95201111]
[107.74267578 87.94901276]
[114.32107544 100.28660583]
[107.25431824 112.35112000]
[114.71395111 126.30334473]
[106.72354126 138.87326050]
[106.42340851 153.87025452]
[121.49343109 157.35224915]
[135.51124573 163.87577820]
[147.87069702 173.15614319]
[158.03784180 184.78955078]
[165.57408142 198.27056885]
[170.15502930 213.01417542]
[171.58450317 228.38105774]
[169.80291748 243.70542908]
[164.88973999 258.32382202]
[157.06001282 271.60379028]
[146.65486145 282.97137451]
[134.12667847 291.93572998]
[120.01947021 298.11050415]
[104.94519043 301.23040771]
[104.94519043 316.23040771]
[104.94519043 331.23040771]
[104.94519043 346.23040771]
[104.94519043 361.23040771]
[104.94519043 376.23040771]
[104.94519043 391.23040771]
[104.94519043 406.23040771]
[104.94519043 421.23040771]
[104.94519043 436.23040771]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 156]
[2 155]
[3 154]
[4 153]
[5 152]
[6 151]
[7 150]
[8 149]
[9 148]
[10 147]
[25 133]
[26 132]
[28 130]
[30 128]
[31 127]
[32 122]
[33 121]
[34 120]
[35 119]
[36 116]
[37 115]
[38 114]
[39 113]
[40 112]
[41 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
