%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGAAAACAACCGAAACCAAAUAAUUCAAGCACUGCUUAUUACAAUUUUACUGGGUCUCUAUxxxxxxxxxxUUCUCACCCUAACAGGUCAACCUCGCUUCCCCACCCUUACUAACAUUAACGAAAAUAACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[232.23353577 388.68756104]
[231.29789734 373.71676636]
[230.36227417 358.74600220]
[229.42665100 343.77520752]
[228.49101257 328.80441284]
[227.55538940 313.83361816]
[226.61976624 298.86282349]
[221.42434692 284.79129028]
[212.40681458 272.80447388]
[203.38928223 260.81762695]
[194.37174988 248.83081055]
[185.35421753 236.84397888]
[176.33670044 224.85714722]
[162.99432373 230.18022156]
[148.71536255 231.85781860]
[134.47850037 229.76860046]
[121.26121521 224.04962158]
[109.97265625 215.08738708]
[101.39106750 203.49166870]
[96.11016846 190.05415344]
[94.49806976 175.69422913]
[96.67162323 161.39620972]
[102.48798370 148.14179993]
[111.55396271 136.84271240]
[102.78775024 124.67087555]
[94.02154541 112.49903870]
[81.24418640 104.64160919]
[66.42642975 102.31050873]
[51.60867310 99.97940063]
[36.79091263 97.64830017]
[21.90763283 95.78068542]
[6.97332621 94.37837982]
[-7.96098137 92.97607422]
[-14.21722221 95.41881561]
[-19.89740181 94.43552399]
[-23.48291397 91.19213104]
[-38.34596252 89.16979218]
[-53.20900726 87.14746094]
[-68.07205200 85.12512207]
[-84.58175659 88.98078918]
[-92.85707855 74.18365479]
[-80.92905426 62.13547516]
[-66.04972076 70.26207733]
[-51.18667603 72.28440857]
[-36.32362747 74.30674744]
[-21.46058083 76.32907867]
[-6.55867815 78.04177094]
[8.37562943 79.44407654]
[23.30993652 80.84637451]
[26.27904510 78.83345032]
[30.38936615 78.19551849]
[34.96647263 79.46141052]
[39.12201691 82.83054352]
[53.93977737 85.16164398]
[68.75753021 87.49274445]
[83.57529449 89.82385254]
[89.22479248 84.89099121]
[79.35924530 73.59183502]
[90.65855408 63.72645950]
[100.52379608 75.02526855]
[106.17330170 70.09240723]
[105.86124420 55.09565353]
[105.54918671 40.09889984]
[105.23712921 25.10214424]
[90.61589813 21.34419441]
[77.55132294 13.77984047]
[67.01288605 2.97040844]
[59.78260040 -10.28197002]
[56.39700317 -24.99388123]
[57.10733414 -40.07360458]
[61.86087799 -54.40211868]
[70.30489349 -66.91616058]
[81.81277466 -76.68710327]
[95.53055573 -82.98987579]
[110.44029999 -85.35676575]
[125.43559265 -83.61214447]
[139.40368652 -77.88546753]
[151.30807495 -68.60169220]
[160.26533508 -56.44974518]
[165.61080933 -42.33137131]
[166.94781494 -27.29425049]
[164.17715454 -12.45423889]
[157.50439453 1.08743823]
[147.42474365 12.32589722]
[134.68614197 20.42716980]
[120.23388672 24.79008865]
[120.54594421 39.78684235]
[120.85800171 54.78359604]
[121.17005157 69.78034973]
[124.24523926 79.18769836]
[124.21302032 88.03377533]
[121.58569336 95.42966461]
[117.10504150 100.71377563]
[111.66002655 103.50565338]
[106.19338226 103.73282623]
[114.95958710 115.90466309]
[123.72579956 128.07650757]
[138.51069641 122.80319214]
[154.16716003 121.89661407]
[169.43367004 125.42166138]
[183.08244324 133.08648682]
[194.01812744 144.26661682]
[201.36576843 158.05589294]
[204.54072571 173.33984375]
[203.29524231 188.88577271]
[197.73777771 203.44219971]
[188.32353210 215.83961487]
[197.34104919 227.82644653]
[206.35858154 239.81327820]
[215.37611389 251.80010986]
[224.39364624 263.78692627]
[233.41117859 275.77377319]
[232.08119202 260.83285522]
[233.82760620 245.93486023]
[238.57693481 231.70658875]
[246.12939453 218.74664307]
[256.16723633 207.60025024]
[268.26812744 198.73635864]
[281.92297363 192.52790833]
[296.55731201 189.23608398]
[311.55545044 188.99937439]
[326.28637695 191.82772827]
[340.13034058 197.60217285]
[352.50494385 206.07977295]
[362.88952637 216.90383911]
[370.84719849 229.61898804]
[376.04318237 243.69030762]
[378.25888062 258.52575684]
[377.40106201 273.50122070]
[373.50582886 287.98660278]
[366.73703003 301.37255859]
[357.37945557 313.09585571]
[345.82681274 322.66333008]
[332.56512451 329.67242432]
[318.15231323 333.82824707]
[303.19476318 334.95602417]
[288.32174683 333.00820923]
[274.15902710 328.06683350]
[261.30242920 320.33975220]
[250.29286194 310.15206909]
[241.59054565 297.92718506]
[242.52618408 312.89797974]
[243.46180725 327.86877441]
[244.39743042 342.83956909]
[245.33306885 357.81036377]
[246.26869202 372.78115845]
[247.20431519 387.75195312]
[256.71966553 401.10824585]
[249.66520691 415.91250610]
[233.29798889 416.93542480]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 147]
[2 146]
[3 145]
[4 144]
[5 143]
[6 142]
[7 141]
[8 112]
[9 111]
[10 110]
[11 109]
[12 108]
[13 107]
[24 97]
[25 96]
[26 95]
[27 56]
[28 55]
[29 54]
[30 53]
[31 49]
[32 48]
[33 47]
[36 46]
[37 45]
[38 44]
[39 43]
[61 89]
[62 88]
[63 87]
[64 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
