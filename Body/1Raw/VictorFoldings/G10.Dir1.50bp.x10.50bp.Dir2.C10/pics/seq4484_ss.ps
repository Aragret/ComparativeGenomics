%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAAAUAAUAGGAGCUUAAACCCCCUUAUUUCUAGGACUAUGAGAAUCGAACCCAUCCCUGAGAxxxxxxxxxxAAACCCAGCUACGCAAAAUCUUAGCAUACUCCUCAAUUACCCACAUAGGAUGAAUAAUAGCAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[91.08097839 271.63436890]
[91.08097839 256.63436890]
[91.08097839 241.63438416]
[91.08097839 226.63438416]
[91.08097839 211.63438416]
[91.08097839 196.63438416]
[91.08097839 181.63438416]
[91.08097839 166.63438416]
[91.08097839 151.63438416]
[91.08097839 136.63438416]
[77.78952789 127.45370483]
[70.34413147 114.29553223]
[69.47072601 100.23761749]
[74.46540833 88.17734528]
[83.49635315 80.23752594]
[77.65227509 66.42279053]
[71.80819702 52.60806274]
[65.96411896 38.79333496]
[59.84479141 25.09830284]
[53.45267105 11.52845478]
[47.06055069 -2.04139423]
[40.66843033 -15.61124325]
[34.27630997 -29.18109131]
[20.28796196 -23.74870300]
[5.95474291 -19.30532837]
[-8.65351582 -15.87261772]
[-23.46564484 -13.46729374]
[-38.40947723 -12.10107613]
[-53.41221237 -11.78062057]
[-68.40075684 -12.50748825]
[-83.30207825 -14.27813816]
[-98.04359436 -17.08394241]
[-112.55347443 -20.91123390]
[-126.76102448 -25.74136353]
[-140.59703064 -31.55080032]
[-153.99409485 -38.31124115]
[-166.88693237 -45.98974991]
[-179.21272278 -54.54891968]
[-190.91145325 -63.94704437]
[-201.92608643 -74.13834381]
[-212.20297241 -85.07315826]
[-221.69204712 -96.69821930]
[-230.34709167 -108.95689392]
[-238.12591553 -121.78945160]
[-244.99064636 -135.13337708]
[-250.90780640 -148.92366028]
[-255.84860229 -163.09310913]
[-259.78894043 -177.57269287]
[-262.70962524 -192.29187012]
[-264.59643555 -207.17893982]
[-265.44018555 -222.16136169]
[-265.23675537 -237.16613770]
[-263.98712158 -252.12016296]
[-261.69738770 -266.95059204]
[-258.37872314 -281.58520508]
[-254.04727173 -295.95263672]
[-248.72413635 -309.98291016]
[-242.43527222 -323.60769653]
[-235.21130371 -336.76062012]
[-227.08743286 -349.37756348]
[-218.10322571 -361.39709473]
[-208.30245972 -372.76062012]
[-197.73287964 -383.41278076]
[-186.44599915 -393.30172729]
[-174.49679565 -402.37921143]
[-161.94346619 -410.60107422]
[-148.84719849 -417.92721558]
[-135.27177429 -424.32196045]
[-121.28334808 -429.75415039]
[-106.95007324 -434.19732666]
[-92.34175873 -437.62982178]
[-77.52960205 -440.03494263]
[-62.58574677 -441.40093994]
[-47.58300781 -441.72116089]
[-32.59447479 -440.99407959]
[-17.69317436 -439.22323608]
[-2.95170164 -436.41720581]
[11.55812168 -432.58972168]
[25.76560593 -427.75936890]
[39.60153198 -421.94973755]
[52.99849319 -415.18911743]
[65.89122009 -407.51040649]
[78.21689606 -398.95108032]
[89.91548157 -389.55276489]
[100.92996979 -379.36132812]
[111.20670319 -368.42636108]
[120.69561768 -356.80114746]
[129.35047913 -344.54235840]
[137.12911987 -331.70968628]
[143.99365234 -318.36566162]
[149.91062927 -304.57531738]
[154.85121155 -290.40579224]
[158.79135132 -275.92614746]
[161.71182251 -261.20690918]
[163.59841919 -246.31982422]
[164.44195557 -231.33740234]
[164.23829651 -216.33262634]
[162.98846436 -201.37860107]
[160.69851685 -186.54820251]
[157.37963867 -171.91366577]
[153.04797363 -157.54629517]
[147.72465515 -143.51606750]
[141.43559265 -129.89137268]
[134.21142578 -116.73857117]
[126.08737183 -104.12174225]
[117.10299683 -92.10235596]
[107.30207062 -80.73896790]
[96.73234558 -70.08693695]
[85.44531250 -60.19817352]
[73.49597168 -51.12084198]
[60.94253540 -42.89916992]
[47.84615707 -35.57321167]
[54.23827744 -22.00336266]
[60.63039780 -8.43351460]
[67.02252197 5.13633394]
[73.41464233 18.70618248]
[77.57704163 21.15017700]
[80.21857452 26.26161385]
[79.77884674 32.94925690]
[85.62292480 46.76398468]
[91.46700287 60.57871628]
[97.31108093 74.39344788]
[123.16988373 78.32768250]
[137.15202332 106.43070984]
[150.90759277 112.41271210]
[166.30148315 107.89524841]
[179.34799194 117.23164368]
[180.03894043 133.25981140]
[167.84429932 143.68431091]
[152.11874390 140.50836182]
[144.92558289 126.16828156]
[131.17001343 120.18627930]
[124.89775848 124.29830170]
[134.10148621 136.14277649]
[143.30520630 147.98724365]
[152.50892639 159.83171082]
[161.71264648 171.67617798]
[173.11445618 181.42292786]
[172.16293335 196.39271545]
[159.61880493 204.61737061]
[145.51098633 199.52137756]
[141.11877441 185.17730713]
[133.92738342 172.01356506]
[126.73600769 158.84982300]
[119.54462433 145.68609619]
[112.35324097 132.52235413]
[106.08097839 136.63438416]
[106.08097839 151.63438416]
[106.08097839 166.63438416]
[106.08097839 181.63438416]
[106.08097839 196.63438416]
[106.08097839 211.63438416]
[106.08097839 226.63438416]
[106.08097839 241.63438416]
[106.08097839 256.63436890]
[106.08097839 271.63436890]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 156]
[2 155]
[3 154]
[4 153]
[5 152]
[6 151]
[7 150]
[8 149]
[9 148]
[10 147]
[15 122]
[16 121]
[17 120]
[18 119]
[19 116]
[20 115]
[21 114]
[22 113]
[23 112]
[124 132]
[125 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
