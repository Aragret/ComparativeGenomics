%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCUCUUACUUUUAACCAGUGAAAUUGACCUGCCCGUGAAGAGGCGGGCAUAACACAGCAAxxxxxxxxxxCUGGGAGAACUCUCUGUGCUAGUAACCACGUUCUCCUGAUCAAAUAUCACUCUCCUACUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[61.68552399 528.78088379]
[61.68552399 513.78088379]
[61.68552399 498.78088379]
[61.68552399 483.78088379]
[61.68552399 468.78088379]
[61.68552399 453.78088379]
[61.68552399 438.78088379]
[61.68552399 423.78088379]
[61.68552399 408.78088379]
[61.68552399 393.78088379]
[49.71536255 391.49139404]
[38.30570984 387.19754028]
[27.78966522 381.02331543]
[18.47447395 373.14761353]
[10.63253880 363.79913330]
[4.49347019 353.24957275]
[0.23734939 341.80590820]
[-2.01054502 329.80130005]
[-2.18342757 317.58557129]
[-0.27498996 305.51480103]
[3.66037989 293.94113159]
[9.50914574 283.20245361]
[17.10189819 273.61239624]
[26.21826172 265.45138550]
[36.59329224 258.95828247]
[47.92517471 254.32350159]
[59.88399887 251.68331909]
[72.12138367 251.11598206]
[74.29821777 236.27476501]
[76.47505188 221.43356323]
[78.65189362 206.59236145]
[68.04775238 193.57659912]
[70.14844513 176.58038330]
[84.14231873 166.13485718]
[86.00993347 151.25158691]
[87.87754059 136.36830139]
[89.74515533 121.48502350]
[81.70240021 115.23042297]
[77.01092529 106.18630219]
[76.52999878 96.00914001]
[63.28741455 88.96400452]
[50.04482651 81.91886902]
[36.80224228 74.87373352]
[23.55965614 67.82859802]
[10.31707096 60.78346252]
[-2.92551422 53.73833084]
[-17.96517563 58.59468079]
[-31.99551773 51.31972122]
[-36.69258881 36.22955704]
[-29.26969910 22.27691269]
[-14.13071728 17.73964691]
[-0.25733325 25.30963707]
[4.11962080 40.49574280]
[17.36220551 47.54087830]
[30.60479164 54.58601379]
[43.84737778 61.63114929]
[57.08996201 68.67628479]
[70.33255005 75.72142029]
[83.57513428 82.76655579]
[88.68849182 79.05202484]
[94.59904480 76.81385040]
[100.89024353 76.20976257]
[107.11870575 77.28234100]
[115.88491058 65.11050415]
[120.04280090 50.69828796]
[119.10717010 35.72749710]
[118.17153931 20.75670624]
[103.88529205 15.48196030]
[92.98411560 4.84785080]
[87.35671234 -9.30319977]
[87.97806549 -24.51943398]
[94.74050903 -38.16455078]
[106.47241974 -47.87444687]
[121.14117432 -51.96682739]
[136.20532227 -49.73266220]
[149.05490112 -41.55903244]
[157.46363831 -28.86207008]
[159.97470093 -13.84160042]
[156.15298462 0.89999002]
[146.66067505 12.80863094]
[133.14233398 19.82107735]
[134.07795715 34.79187012]
[135.01359558 49.76266098]
[148.32875061 56.66965866]
[161.10610962 48.81223297]
[173.88345337 40.95480728]
[186.66081238 33.09738159]
[199.43817139 25.23995590]
[212.21553040 17.38253021]
[224.99288940 9.52510548]
[211.38244629 3.21988130]
[207.61930847 -11.30040836]
[216.45404053 -23.42260742]
[231.42913818 -24.28636932]
[241.59904480 -13.26035309]
[239.53073120 1.59576392]
[253.05491638 -4.89240122]
[266.57910156 -11.38056660]
[269.23989868 -26.66780853]
[280.40158081 -37.44728088]
[295.77221680 -39.57405090]
[309.44149780 -32.23033905]
[316.15332031 -18.23994637]
[313.32684326 -2.98246837]
[302.04888916 7.67528534]
[286.65609741 9.63519096]
[273.06729126 2.14362359]
[259.54309082 8.63178825]
[246.01889038 15.11995411]
[232.85031128 22.30246353]
[220.07295227 30.15988922]
[207.29559326 38.01731491]
[194.51824951 45.87474060]
[181.74089050 53.73216629]
[168.96353149 61.58959198]
[156.18617249 69.44701385]
[128.05674744 73.87671661]
[119.29054260 86.04855347]
[122.15689850 108.70861053]
[104.62843323 123.35263062]
[102.76082611 138.23591614]
[100.89321136 153.11918640]
[99.02559662 168.00247192]
[108.48082733 177.64904785]
[110.60211182 190.79164124]
[104.83336639 202.57281494]
[93.49309540 208.76919556]
[91.31626129 223.61039734]
[89.13941956 238.45159912]
[86.96258545 253.29281616]
[103.79775238 259.99627686]
[118.40888214 270.69894409]
[129.86639404 284.71432495]
[137.44277954 301.14529419]
[140.65875244 318.94165039]
[139.31355286 336.96707153]
[133.49752808 354.07186890]
[123.58603668 369.16610718]
[110.21525574 381.28921509]
[94.24132538 389.67108154]
[76.68552399 393.78088379]
[76.68552399 408.78088379]
[76.68552399 423.78088379]
[76.68552399 438.78088379]
[76.68552399 453.78088379]
[76.68552399 468.78088379]
[76.68552399 483.78088379]
[76.68552399 498.78088379]
[76.68552399 513.78088379]
[76.68552399 528.78088379]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[28 130]
[29 129]
[30 128]
[31 127]
[34 123]
[35 122]
[36 121]
[37 120]
[40 59]
[41 58]
[42 57]
[43 56]
[44 55]
[45 54]
[46 53]
[63 118]
[64 117]
[65 83]
[66 82]
[67 81]
[84 116]
[85 115]
[86 114]
[87 113]
[88 112]
[89 111]
[90 110]
[96 109]
[97 108]
[98 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
