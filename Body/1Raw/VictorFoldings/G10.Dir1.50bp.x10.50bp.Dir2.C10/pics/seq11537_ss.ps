%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUUCUCUCCUUAAUGACAUUAACACUAUUCUCACCAGACCUCCUAGGCGACCCAGACAAUxxxxxxxxxxGGGUCCCUUGACCACCAUCCUCCGUGAAAUCAAUAUCCCGCACAAGAGUGCUACUCUCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[118.35016632 262.86257935]
[118.35016632 247.86257935]
[118.35016632 232.86257935]
[118.35016632 217.86257935]
[118.35016632 202.86257935]
[118.35016632 187.86257935]
[118.35016632 172.86257935]
[118.35016632 157.86257935]
[118.35016632 142.86257935]
[118.35016632 127.86258698]
[111.92096710 124.00054169]
[104.72958374 137.16427612]
[97.53820038 150.32801819]
[93.13816071 164.66816711]
[78.16860962 165.62341309]
[71.98149109 151.95887756]
[82.57487488 141.33949280]
[90.81871796 128.80798340]
[99.06256104 116.27645874]
[92.63336182 112.41441345]
[79.39077759 119.45954895]
[66.14819336 126.50468445]
[52.90560532 133.54981995]
[39.66302109 140.59495544]
[28.51943398 153.37214661]
[13.15672112 146.20114136]
[15.79466248 129.45367432]
[32.61788559 127.35237122]
[45.86046982 120.30723572]
[59.10305786 113.26210022]
[72.34564209 106.21696472]
[85.58822632 99.17182922]
[94.85317993 87.37519073]
[98.55934143 72.84025574]
[102.26550293 58.30531693]
[105.97166443 43.77038193]
[107.21853638 28.82229424]
[105.97166443 13.87420654]
[104.72478485 -1.07388008]
[100.87129211 -9.42866421]
[103.61077118 -16.34537506]
[102.67514038 -31.31616592]
[101.73951721 -46.28695679]
[100.80388641 -61.25774765]
[97.85840607 -75.96571350]
[92.95685577 -90.14227295]
[86.82026672 -76.45496368]
[73.89109802 -68.84992218]
[58.94642639 -70.13705444]
[47.50800323 -79.84078979]
[43.80209732 -94.37578583]
[49.19797134 -108.37166595]
[61.70195770 -116.65721893]
[76.69407654 -116.17109680]
[88.63454437 -107.09363556]
[86.14942169 -121.88634491]
[83.66430664 -136.67904663]
[79.12965393 -144.68460083]
[81.28470612 -151.80508423]
[79.10786438 -166.64630127]
[76.93103027 -181.48750305]
[74.75418854 -196.32870483]
[72.57735443 -211.16990662]
[57.69005585 -213.93522644]
[44.50851440 -221.38679504]
[34.46256638 -232.71629333]
[28.64192390 -246.69480896]
[27.67796516 -261.80603027]
[31.67525291 -276.41085815]
[40.20019150 -288.92501831]
[52.32806015 -297.99108887]
[66.74331665 -302.62564087]
[81.88230133 -302.32595825]
[96.10285187 -297.12454224]
[107.86243439 -287.58563232]
[115.88544464 -274.74389648]
[119.30162048 -259.99234009]
[117.74039459 -244.93109131]
[111.37110901 -231.19387817]
[100.88466644 -220.27081299]
[87.41856384 -213.34675598]
[89.59539795 -198.50553894]
[91.77223206 -183.66433716]
[93.94907379 -168.82313538]
[96.12590790 -153.98193359]
[98.45701599 -139.16416931]
[100.94213104 -124.37145996]
[103.42724609 -109.57875824]
[107.13340759 -95.04382324]
[112.03495789 -80.86726379]
[116.04026031 -95.32262421]
[125.49118042 -106.97080994]
[138.81109619 -113.86862183]
[153.77793884 -114.86537170]
[167.89491272 -109.79476166]
[178.80699158 -99.50269318]
[184.69378662 -85.70610809]
[184.57324219 -70.70659637]
[178.46548462 -57.00640106]
[167.38941956 -46.89102936]
[153.19277954 -42.04795074]
[138.24389648 -43.28509903]
[125.03655243 -50.39608765]
[115.77468109 -62.19337845]
[116.71030426 -47.22258759]
[117.64593506 -32.25179672]
[118.58156586 -17.28100395]
[119.67287445 -2.32075453]
[120.91974640 12.62733269]
[122.16662598 27.57541847]
[129.14021301 14.29501915]
[140.17048645 4.12972784]
[153.97496033 -1.73854339]
[168.94859314 -2.62749600]
[183.35041809 1.56622756]
[195.50595093 10.35502720]
[204.00187683 22.71703529]
[207.85037231 37.21493149]
[206.60400391 52.16305923]
[200.40763855 65.82341003]
[189.98176575 76.60771179]
[176.53857422 83.26207733]
[161.64109802 85.01280975]
[147.02143860 81.65634918]
[134.37944031 73.58295441]
[125.18495178 61.73131561]
[120.50659943 47.47654343]
[116.80043793 62.01147842]
[113.09427643 76.54641724]
[109.38811493 91.08135223]
[114.45545959 76.96321106]
[125.09519196 66.38983917]
[139.24476624 61.41092300]
[154.16123962 62.99163437]
[166.95303345 70.82554626]
[175.14039612 83.39404297]
[177.13621521 98.26067352]
[172.55355835 112.54351044]
[162.28082275 123.47377777]
[148.30938721 128.93261719]
[133.35017395 127.86258698]
[133.35017395 142.86257935]
[133.35017395 157.86257935]
[133.35017395 172.86257935]
[133.35017395 187.86257935]
[133.35017395 202.86257935]
[133.35017395 217.86257935]
[133.35017395 232.86257935]
[133.35017395 247.86257935]
[133.35017395 262.86257935]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[20 32]
[21 31]
[22 30]
[23 29]
[24 28]
[33 130]
[34 129]
[35 128]
[36 127]
[37 110]
[38 109]
[39 108]
[41 107]
[42 106]
[43 105]
[44 104]
[45 90]
[46 89]
[55 88]
[56 87]
[57 86]
[59 85]
[60 84]
[61 83]
[62 82]
[63 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
