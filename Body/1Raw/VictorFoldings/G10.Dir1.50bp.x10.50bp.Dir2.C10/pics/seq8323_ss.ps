%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAAUCACCACCCAACAAUGACUAAUCAAACUAACCUCAAAACAAAUGAUAACCAUACACAACxxxxxxxxxxUAGUUUUGACAACAUUCAAAAAAGAGUAAUAAACUUCGCCUUAAUUUUAAUAAUCAACACCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[40.33071136 290.46383667]
[30.60243797 287.13864136]
[21.05829048 283.31692505]
[11.72359371 279.00885010]
[2.62311316 274.22579956]
[-5.18193722 287.03521729]
[-12.98698711 299.84463501]
[-13.56036949 315.65545654]
[-26.79018974 322.49804688]
[-34.59524155 335.30746460]
[-42.40029144 348.11688232]
[-42.24689102 364.51531982]
[-56.50719833 372.61318970]
[-70.51143646 364.08010864]
[-69.85324097 347.69418335]
[-55.20970917 340.31182861]
[-47.40465927 327.50241089]
[-39.59960938 314.69299316]
[-39.58449554 299.79840088]
[-25.79640579 292.03961182]
[-17.99135590 279.23019409]
[-10.18630505 266.42077637]
[-28.68257523 252.57026672]
[-45.45406723 236.67481995]
[-60.27598572 218.94746399]
[-72.94966888 199.62582397]
[-83.30524445 178.96885681]
[-91.20391083 157.25343323]
[-105.72506714 161.01322937]
[-120.24622345 164.77301025]
[-131.55395508 176.65017700]
[-147.42799377 172.53350830]
[-151.53848267 156.65786743]
[-139.65690613 145.35476685]
[-124.00601196 150.25186157]
[-109.48485565 146.49206543]
[-94.96369934 142.73228455]
[-97.10525513 131.40719604]
[-98.58951569 119.97736359]
[-99.41155243 108.48091888]
[-99.56860352 96.95619202]
[-99.06015778 85.44161224]
[-97.88790131 73.97558594]
[-96.05575562 62.59634018]
[-93.56981659 51.34182739]
[-90.43838501 40.24957275]
[-86.67189789 29.35656548]
[-82.28291321 18.69913483]
[-77.28607941 8.31281853]
[-71.69804382 -1.76774919]
[-65.53744507 -11.50895214]
[-58.82483292 -20.87830734]
[-51.58258438 -29.84456825]
[-43.83485794 -38.37783813]
[-35.60748291 -46.44966125]
[-45.37807083 -57.83103180]
[-55.14865494 -69.21240234]
[-70.97183228 -71.85942078]
[-78.64165497 -85.95031738]
[-72.27449036 -100.67576599]
[-56.75468826 -104.73966217]
[-43.98770905 -95.02452850]
[-43.76728439 -78.98299408]
[-33.99669647 -67.60161591]
[-24.22611046 -56.22024536]
[-14.14161396 -63.73327255]
[-3.60400319 -70.59631348]
[7.34488964 -76.78213501]
[18.66160011 -82.26616669]
[30.30120468 -87.02665710]
[42.21749496 -91.04469299]
[54.36316681 -94.30432892]
[66.69001007 -96.79262543]
[79.14907837 -98.49970245]
[91.69092560 -99.41878510]
[104.26575470 -99.54622650]
[116.82365417 -98.88151550]
[129.31475830 -97.42729187]
[141.68949890 -95.18933868]
[153.89874268 -92.17652893]
[165.89401245 -88.40082550]
[177.62771606 -83.87721252]
[189.05323792 -78.62365723]
[200.12525940 -72.66101074]
[210.79978943 -66.01294708]
[221.03448486 -58.70584488]
[230.57240295 -70.28289795]
[240.11032104 -81.85995483]
[249.64822388 -93.43700409]
[259.18615723 -105.01406097]
[268.72406006 -116.59111786]
[266.95556641 -132.29614258]
[276.87539673 -144.59951782]
[292.59823608 -146.20185852]
[304.79605103 -136.15252686]
[306.23205566 -120.41362000]
[296.05432129 -108.32273865]
[280.30111694 -107.05319977]
[270.76321411 -95.47615051]
[261.22528076 -83.89909363]
[251.68736267 -72.32203674]
[242.14945984 -60.74498367]
[232.61154175 -49.16793060]
[254.50050354 -26.35857201]
[272.51348877 -0.37923875]
[286.19860840 28.11832047]
[295.21252441 58.41918564]
[309.99047852 55.84773636]
[324.76840210 53.27628708]
[335.13873291 41.03553009]
[351.16979980 41.65538025]
[360.56396484 54.66034698]
[356.11483765 70.07413483]
[341.23538208 76.07259369]
[327.33984375 68.05422974]
[312.56192017 70.62567902]
[297.78396606 73.19712830]
[298.90173340 83.41705322]
[299.49176025 93.68096924]
[299.55249023 103.96165466]
[299.08377075 114.23182678]
[298.08682251 124.46424103]
[296.56433105 134.63174438]
[294.52029419 144.70736694]
[291.96014404 154.66436768]
[288.89068604 164.47633362]
[285.32006836 174.11721802]
[281.25775146 183.56146240]
[276.71450806 192.78401184]
[271.70242310 201.76036072]
[266.23474121 210.46673584]
[260.32601929 218.88000488]
[253.99192810 226.97785950]
[247.24925232 234.73883057]
[240.11589050 242.14228821]
[232.61076355 249.16862488]
[224.75379944 255.79917908]
[216.56582642 262.01635742]
[208.06858826 267.80368042]
[199.28460693 273.14578247]
[190.23721313 278.02847290]
[180.95039368 282.43881226]
[171.44880676 286.36511230]
[161.75764465 289.79696655]
[151.90261841 292.72521973]
[141.90988159 295.14215088]
[131.80595398 297.04129028]
[121.61763763 298.41766357]
[111.37196350 299.26757812]
[101.09612274 299.58880615]
[90.81736755 299.38046265]
[80.56297302 298.64312744]
[70.36016083 297.37875366]
[60.23597717 295.59066772]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 22]
[6 21]
[7 20]
[9 18]
[10 17]
[11 16]
[28 37]
[29 36]
[30 35]
[55 65]
[56 64]
[57 63]
[86 103]
[87 102]
[88 101]
[89 100]
[90 99]
[91 98]
[107 117]
[108 116]
[109 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
