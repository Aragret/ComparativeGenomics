%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGAACCCUCUAAAUCCCCUUGUAAAUUUAACUGUUAGUCCAAAGAGGAACAGCUCUUUGGxxxxxxxxxxCUAGCAAGCCUCGCUAACCUCGCCUUACCCCCCACUAUUAACCUACUGGGAGAACUCUCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[227.91252136 228.40948486]
[217.47271729 217.63867188]
[207.03289795 206.86785889]
[196.59309387 196.09706116]
[186.15327454 185.32624817]
[175.71345520 174.55543518]
[164.94265747 164.11563110]
[153.85133362 154.01698303]
[139.23144531 151.16955566]
[134.23638916 136.15754700]
[123.14507294 126.05889893]
[112.05375671 115.96025085]
[119.72981262 128.84738159]
[117.91113281 143.73672485]
[107.35880280 154.39732361]
[92.48880768 156.36788940]
[79.52399445 148.82379150]
[73.88992310 134.92208862]
[77.94437408 120.48043060]
[89.99181366 111.54203033]
[75.86701202 116.59078217]
[61.74221039 121.63954163]
[47.61740494 126.68830109]
[33.49260330 131.73706055]
[30.81716347 146.86112976]
[20.92584801 158.61091614]
[6.47936726 163.82577515]
[-8.63624573 161.10293579]
[-20.35496712 151.17485046]
[-25.52452087 136.71208191]
[-22.75432205 121.60508728]
[-12.78954124 109.91754150]
[1.68934703 104.79334259]
[16.78759384 107.61088562]
[28.44384575 117.61225128]
[42.56864929 112.56349182]
[56.69345093 107.51473999]
[70.81825256 102.46598053]
[84.94306183 97.41722870]
[71.18936157 91.43092346]
[70.48511505 76.44746399]
[83.61669159 69.19750214]
[95.92171478 77.77749634]
[92.82339478 63.10096741]
[89.72507477 48.42444229]
[86.62675476 33.74791718]
[83.52842712 19.07139206]
[80.43010712 4.39486694]
[74.08297729 -9.19608402]
[64.81803131 -20.99272346]
[55.55308151 -32.78936386]
[46.28813171 -44.58600235]
[37.02318192 -56.38264465]
[27.75823212 -68.17928314]
[18.49328232 -79.97592163]
[9.22833347 -91.77256012]
[-6.49093866 -93.40964508]
[-16.38352966 -105.73491669]
[-14.58034325 -121.43599701]
[-2.15117669 -131.19772339]
[13.52996635 -129.22863770]
[23.15974045 -116.69696045]
[21.02497292 -101.03751373]
[30.28992271 -89.24087524]
[39.55487061 -77.44423676]
[48.81982040 -65.64759064]
[58.08477020 -53.85095215]
[67.34971619 -42.05431366]
[76.61466980 -30.25767326]
[85.87961578 -18.46103287]
[84.06667328 -33.35107040]
[86.09639740 -48.21311188]
[91.83558655 -62.07174301]
[100.90756989 -74.01741791]
[112.71694946 -83.26612091]
[126.48866272 -89.21086884]
[141.31886292 -91.46148682]
[156.23422241 -89.87026978]
[170.25584412 -84.54165649]
[182.46347046 -75.82536316]
[192.05590820 -64.29344940]
[198.40361023 -50.70275879]
[201.08995056 -35.94526672]
[199.93862915 -20.98951530]
[195.02520752 -6.81706619]
[186.67216492 5.64193296]
[175.42770386 15.56978703]
[162.02983093 22.31492424]
[147.35783386 25.43465233]
[132.37467957 24.72422409]
[118.06369019 20.23026466]
[105.36412811 12.24771500]
[95.10663605 1.29654515]
[98.20495605 15.97307110]
[101.30327606 30.64959717]
[104.40159607 45.32612228]
[107.49992371 60.00264740]
[110.59824371 74.67917633]
[122.15240479 104.86893463]
[133.24372864 114.96759033]
[144.33503723 125.06623840]
[159.74826050 128.63598633]
[163.94998169 142.92565918]
[175.04130554 153.02430725]
[180.26972961 154.15708923]
[184.12149048 156.93492126]
[186.19619751 160.54008484]
[186.48426819 164.11563110]
[196.92408752 174.88642883]
[207.36389160 185.65724182]
[217.80371094 196.42805481]
[228.24351501 207.19885254]
[238.68333435 217.96966553]
[248.45828247 212.20219421]
[259.18273926 208.50796509]
[270.42266846 207.03367615]
[281.72372437 207.83619690]
[292.62960815 210.88044739]
[302.70056152 216.04089355]
[311.53100586 223.10670471]
[318.76596069 231.79039001]
[324.11523438 241.73950195]
[327.36514282 252.55090332]
[328.38699341 263.78713989]
[327.14215088 274.99411011]
[323.68359375 285.71945190]
[318.15353394 295.53079224]
[310.77767944 304.03314209]
[319.54388428 316.20495605]
[328.31008911 328.37680054]
[343.45498657 326.16522217]
[357.88900757 331.25610352]
[368.29537964 342.47955322]
[372.28277588 357.25656128]
[368.93490601 372.19140625]
[359.02108765 383.85223389]
[344.81945801 389.55944824]
[329.59344482 388.00158691]
[316.84185791 379.53659058]
[309.49493408 366.10971069]
[309.24096680 350.80630493]
[316.13824463 337.14300537]
[307.37203979 324.97116089]
[298.60583496 312.79934692]
[280.57244873 318.82574463]
[261.54083252 318.47271729]
[243.70361328 311.76681519]
[229.12060547 299.46719360]
[219.48086548 282.97991943]
[215.90715027 264.19708252]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 113]
[2 112]
[3 111]
[4 110]
[5 109]
[6 108]
[7 104]
[8 103]
[10 101]
[11 100]
[12 99]
[20 39]
[21 38]
[22 37]
[23 36]
[24 35]
[43 98]
[44 97]
[45 96]
[46 95]
[47 94]
[48 93]
[49 70]
[50 69]
[51 68]
[52 67]
[53 66]
[54 65]
[55 64]
[56 63]
[128 144]
[129 143]
[130 142]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
