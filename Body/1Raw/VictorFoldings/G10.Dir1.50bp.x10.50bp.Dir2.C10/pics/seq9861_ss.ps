%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCCUAACAACCCCCCUCCUAAUACUAACUACCUGACUCCUACCCCUCACAAUCAUGGCAAGxxxxxxxxxxGUUCUUCAAAUAUCUACUCAUCUUCCUAAUUACCAUACUAAUCUUAGUUACCGCUAACAACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-41.43071365 339.04806519]
[-57.13184738 329.03320312]
[-65.94862366 341.16845703]
[-74.76540375 353.30371094]
[-83.58218384 365.43896484]
[-92.39896393 377.57421875]
[-101.21573639 389.70947266]
[-110.03251648 401.84472656]
[-118.84929657 413.97998047]
[-127.66607666 426.11523438]
[-121.34584045 440.11346436]
[-122.88742828 455.39477539]
[-131.87615967 467.84863281]
[-145.89411926 474.12496948]
[-161.17054749 472.53546143]
[-173.59616089 463.50775146]
[-179.82852173 449.47018433]
[-178.19116211 434.19882202]
[-169.12452698 421.80157471]
[-155.06748962 415.61325073]
[-139.80133057 417.29846191]
[-130.98455811 405.16320801]
[-122.16777039 393.02795410]
[-113.35099792 380.89270020]
[-104.53421783 368.75744629]
[-95.71743774 356.62219238]
[-86.90065765 344.48693848]
[-78.08387756 332.35168457]
[-69.26709747 320.21643066]
[-79.74316406 311.75225830]
[-89.79660797 302.79022217]
[-99.40379333 293.35134888]
[-108.54212952 283.45788574]
[-117.19013977 273.13308716]
[-125.32748413 262.40118408]
[-132.93502808 251.28744507]
[-139.99488831 239.81799316]
[-146.49046326 228.01980591]
[-152.40647888 215.92060852]
[-157.72903442 203.54884338]
[-162.44560242 190.93362427]
[-166.54510498 178.10459900]
[-170.01789856 165.09191895]
[-172.85580444 151.92620850]
[-175.05216980 138.63839722]
[-176.60182190 125.25973511]
[-177.50111389 111.82168579]
[-177.74794006 98.35584259]
[-177.34172058 84.89385986]
[-176.28338623 71.46739960]
[-174.57545471 58.10802841]
[-172.22193909 44.84714890]
[-169.22836304 31.71595192]
[-165.60176086 18.74530411]
[-161.35067749 5.96570635]
[-156.48507690 -6.59279537]
[-151.01643372 -18.90067101]
[-144.95759583 -30.92898560]
[-138.32279968 -42.64945221]
[-131.12763977 -54.03451920]
[-123.38906097 -65.05741119]
[-115.12523651 -75.69221497]
[-106.35559845 -85.91392517]
[-97.10076904 -95.69850922]
[-87.38251495 -105.02296448]
[-77.22367096 -113.86535645]
[-66.64813995 -122.20490265]
[-55.68077850 -130.02198792]
[-44.34737396 -137.29824829]
[-32.67457581 -144.01655579]
[-20.68982887 -150.16111755]
[-8.42131042 -155.71749878]
[4.10213184 -160.67262268]
[16.85105324 -165.01486206]
[29.79547691 -168.73396301]
[42.90496826 -171.82122803]
[56.14870071 -174.26936340]
[69.49554443 -176.07263184]
[82.91410828 -177.22679138]
[96.37284088 -177.72912598]
[109.84010315 -177.57844543]
[123.28423309 -176.77511597]
[136.67361450 -175.32102966]
[149.97676086 -173.21958923]
[163.16241455 -170.47575378]
[176.19955444 -167.09596252]
[189.05752563 -163.08816528]
[201.70610046 -158.46177673]
[214.11553955 -153.22769165]
[226.25666809 -147.39820862]
[238.10093689 -140.98703003]
[249.62049866 -134.00924683]
[260.78826904 -126.48123932]
[271.57800293 -118.42073059]
[281.96429443 -109.84665680]
[291.92276001 -100.77918243]
[301.42996216 -91.23963165]
[310.46353149 -81.25043488]
[319.00228882 -70.83506775]
[327.02609253 -60.01803589]
[334.51611328 -48.82476044]
[341.45474243 -37.28155899]
[347.82565308 -25.41558075]
[353.61386108 -13.25471878]
[358.80575562 -0.82756919]
[363.38916016 11.83664989]
[367.35324097 24.70816231]
[370.68875122 37.75670242]
[373.38778687 50.95159149]
[375.44400024 64.26181030]
[376.85260010 77.65605164]
[377.61026001 91.10282898]
[377.71520996 104.57052612]
[377.16714478 118.02748108]
[375.96743774 131.44204712]
[374.11883545 144.78268433]
[371.62570190 158.01802063]
[368.49395752 171.11695862]
[364.73089600 184.04867554]
[378.89987183 188.97209167]
[393.06884766 193.89552307]
[407.23782349 198.81895447]
[423.23388672 195.20542908]
[434.16107178 207.43362427]
[428.77838135 222.92422485]
[412.62310791 225.74183655]
[402.31439209 212.98793030]
[388.14541626 208.06449890]
[373.97644043 203.14106750]
[359.80746460 198.21763611]
[352.64172363 215.40704346]
[344.34017944 232.07760620]
[334.94018555 248.15438843]
[324.48400879 263.56512451]
[313.01861572 278.24053955]
[300.59555054 292.11465454]
[287.27069092 305.12509155]
[273.10394287 317.21334839]
[258.15896606 328.32510376]
[242.50299072 338.41040039]
[226.20635986 347.42388916]
[209.34234619 355.32504272]
[191.98677063 362.07833862]
[174.21765137 367.65344238]
[156.11488342 372.02526855]
[137.75984192 375.17416382]
[119.23504639 377.08596802]
[100.62377167 377.75210571]
[82.00969696 377.16955566]
[63.47650528 375.34097290]
[45.10750198 372.27456665]
[26.98528099 367.98410034]
[9.19130421 362.48886108]
[-8.19442844 355.81356812]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 29]
[3 28]
[4 27]
[5 26]
[6 25]
[7 24]
[8 23]
[9 22]
[10 21]
[119 130]
[120 129]
[121 128]
[122 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
