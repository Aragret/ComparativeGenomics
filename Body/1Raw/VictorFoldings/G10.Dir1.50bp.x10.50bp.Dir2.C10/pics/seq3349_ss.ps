%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUCUAAUCGCAAUGGCAUUCCUAAUGCUUACCGAACGAAAAAUUCUAGGCUAUAUACAACxxxxxxxxxxAGCAUGAUUUAUCCUACACUCCAACUCAUGAGACCCACAACAAAUAGCCCUUCUAAACGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[75.93881226 281.24221802]
[75.93881226 266.24221802]
[75.93881226 251.24221802]
[75.93881226 236.24221802]
[75.93881226 221.24221802]
[75.93881226 206.24221802]
[75.93881226 191.24221802]
[75.93881226 176.24221802]
[75.93881226 161.24221802]
[75.93881226 146.24221802]
[63.76697922 137.47599792]
[49.54019928 142.22981262]
[35.31341934 146.98362732]
[30.70575714 159.68115234]
[19.77376938 167.27850342]
[6.65648127 167.17318726]
[-3.83542395 159.62887573]
[-18.15802193 164.08569336]
[-32.48061752 168.54251099]
[-34.85876465 182.36244202]
[-42.93236160 193.74699402]
[-55.07210922 200.49766541]
[-68.87052155 201.34118652]
[-81.61929321 196.16934204]
[-90.84088135 186.04898071]
[-105.25309753 190.20686340]
[-119.66531372 194.36474609]
[-134.07752991 198.52264404]
[-148.48974609 202.68052673]
[-162.03221130 212.88043213]
[-175.58242798 202.69081116]
[-169.54209900 186.84939575]
[-152.64762878 188.26831055]
[-138.23541260 184.11042786]
[-123.82319641 179.95252991]
[-109.41098022 175.79464722]
[-94.99876404 171.63676453]
[-91.51651764 155.88793945]
[-80.51759338 143.96292114]
[-64.92192078 139.16656494]
[-48.94027710 142.89248657]
[-36.93743515 154.21990967]
[-22.61483765 149.76309204]
[-8.29224014 145.30627441]
[-1.14382315 130.11555481]
[15.08881950 124.65795898]
[30.55960655 132.75685120]
[44.78638458 128.00303650]
[59.01316452 123.24922180]
[54.48534393 110.19984436]
[53.96452332 96.53785706]
[57.41408157 83.45372772]
[64.45497894 72.06371307]
[74.40554810 63.31470871]
[86.34677124 57.90563965]
[99.20684052 56.23205566]
[111.85726166 58.35818481]
[123.21183777 64.01838684]
[133.42532349 53.03272247]
[143.63879395 42.04705811]
[153.85227966 31.06139183]
[164.06576538 20.07572746]
[174.27923584 9.09006310]
[164.37414551 -2.19178486]
[155.66125488 -14.41784286]
[148.22996521 -27.46265411]
[142.15655518 -41.19235229]
[137.50332642 -55.46605301]
[134.31805420 -70.13728333]
[132.63340759 -85.05549622]
[132.46665955 -100.06759644]
[133.81954956 -115.01953888]
[136.67817688 -129.75790405]
[141.01322937 -144.13143921]
[146.78018188 -157.99264526]
[153.91989136 -171.19929504]
[162.35908508 -183.61585999]
[172.01115417 -195.11492920]
[182.77706909 -205.57849121]
[194.54632568 -214.89918518]
[207.19818115 -222.98136902]
[220.60278320 -229.74211121]
[234.62260437 -235.11199951]
[249.11375427 -239.03598022]
[263.92755127 -241.47373962]
[278.91195679 -242.40029907]
[293.91320801 -241.80613708]
[308.77740479 -239.69734192]
[323.35198975 -236.09556580]
[337.48736572 -231.03775024]
[351.03857422 -224.57582092]
[363.86645508 -216.77607727]
[375.83944702 -207.71856689]
[386.83465576 -197.49621582]
[396.73925781 -186.21392822]
[405.45159912 -173.98748779]
[412.88232422 -160.94235229]
[418.95510864 -147.21238708]
[423.60772705 -132.93847656]
[426.79235840 -118.26710510]
[428.47634888 -103.34882355]
[428.64242554 -88.33671570]
[427.28887939 -73.38482666]
[424.42959595 -58.64659119]
[420.09393311 -44.27325058]
[414.32635498 -30.41229439]
[407.18606567 -17.20596123]
[398.74630737 -4.78976822]
[389.09375000 6.70887375]
[378.32736206 17.17197037]
[366.55770874 26.49215126]
[353.90548706 34.57377625]
[340.50057983 41.33391571]
[326.48052979 46.70320129]
[311.98922729 50.62653351]
[297.17532349 53.06364822]
[282.19085693 53.98954391]
[267.18963623 53.39471817]
[252.32553101 51.28527069]
[237.75112915 47.68284988]
[223.61593628 42.62442398]
[210.06504822 36.16189575]
[197.23748779 28.36158943]
[185.26490784 19.30354309]
[175.05142212 30.28920746]
[164.83793640 41.27487183]
[154.62446594 52.26053619]
[144.41098022 63.24620056]
[134.19750977 74.23186493]
[138.97424316 81.41752625]
[142.24578857 89.47932434]
[143.85363770 98.10286713]
[143.70474243 106.94559479]
[141.77647400 115.65039825]
[138.11860657 123.86001587]
[132.85247803 131.23171997]
[126.16711426 137.45158386]
[118.31256866 142.24784851]
[109.59060669 145.40263367]
[100.34313202 146.76181030]
[90.93881226 146.24221802]
[90.93881226 161.24221802]
[90.93881226 176.24221802]
[90.93881226 191.24221802]
[90.93881226 206.24221802]
[90.93881226 221.24221802]
[90.93881226 236.24221802]
[90.93881226 251.24221802]
[90.93881226 266.24221802]
[90.93881226 281.24221802]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 49]
[12 48]
[13 47]
[17 44]
[18 43]
[19 42]
[25 37]
[26 36]
[27 35]
[28 34]
[29 33]
[58 129]
[59 128]
[60 127]
[61 126]
[62 125]
[63 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
