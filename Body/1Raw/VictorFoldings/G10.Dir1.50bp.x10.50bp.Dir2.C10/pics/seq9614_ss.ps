%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGGAAUAAUACUAUCGCUGUUCAUUAUAGCUACUCUCAUAACCCUCAACACCCACUCCCUxxxxxxxxxxUUAGUUACCGCUAACAACCUAUUCCAACUGUUCAUCGGCUGAGAGGGCGUAGGAAUUAUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[51.29936218 510.91040039]
[51.29936218 495.91040039]
[51.29936218 480.91040039]
[51.29936218 465.91040039]
[51.29936218 450.91040039]
[51.29936218 435.91040039]
[51.29936218 420.91040039]
[51.29936218 405.91040039]
[51.29936218 390.91040039]
[51.29936218 375.91040039]
[37.93471909 373.10467529]
[25.38384247 367.70938110]
[14.14327240 359.93566895]
[4.65815830 350.08874512]
[-2.69535089 338.55603027]
[-7.62503099 325.79190063]
[-9.93419361 312.29965210]
[-9.52953243 298.61178589]
[-6.42489147 285.26898193]
[-0.74080229 272.79867554]
[7.30019236 261.69424438]
[17.38225174 252.39553833]
[29.10864258 245.27134705]
[42.01735306 240.60485840]
[55.59928894 238.58239746]
[56.53491592 223.61160278]
[57.47054672 208.64082336]
[58.40617371 193.67002869]
[49.32081223 205.60552979]
[36.41363144 213.24783325]
[21.57986259 215.47477722]
[6.99761581 211.95936584]
[-5.19192934 203.21780396]
[-13.19892311 190.53364563]
[-15.84766006 175.76934814]
[-12.74921417 161.09284973]
[-4.35854387 148.65916443]
[8.09230709 140.29397583]
[22.77512360 137.22560120]
[37.53395462 139.90457153]
[50.20169067 147.93753052]
[58.91827011 160.14495850]
[62.40376663 174.73371887]
[67.59918213 160.66220093]
[72.79460144 146.59066772]
[77.99001312 132.51914978]
[83.18543243 118.44763947]
[88.38084412 104.37611389]
[88.69290161 89.37936401]
[84.08734131 75.10390472]
[79.48177338 60.82844162]
[74.87620544 46.55298233]
[59.94148636 48.38344955]
[44.93025589 47.35415268]
[30.38516235 43.50230789]
[16.83200073 36.96714783]
[4.76071119 27.98491669]
[-5.39233923 16.88031960]
[-13.26012230 4.05478001]
[-18.55822372 -10.02806854]
[-21.09511757 -24.85914040]
[-20.77910042 -39.90229797]
[-17.62159538 -54.61374664]
[-11.73674297 -68.46166992]
[-3.33727694 -80.94548035]
[7.27316666 -91.61389160]
[19.71102715 -100.08124542]
[33.52668381 -106.04145813]
[48.22070694 -109.27906799]
[63.26192093 -109.67704010]
[78.10659790 -107.22098541]
[92.21810150 -101.99969482]
[105.08631897 -94.20190430]
[116.24606323 -84.10950470]
[125.29393005 -72.08733368]
[131.90283203 -58.56997681]
[135.83386230 -44.04608536]
[136.94493103 -29.04068375]
[135.19586182 -14.09621143]
[130.64988708 0.24709922]
[123.47132874 13.47074699]
[113.91970062 25.09670639]
[102.34028625 34.70470428]
[89.15167236 41.94741821]
[93.75723267 56.22287750]
[98.36280060 70.49833679]
[102.96836090 84.77379608]
[116.68841553 90.83681488]
[130.34465027 84.63140869]
[144.00090027 78.42599487]
[149.81683350 61.96051025]
[165.42132568 54.90474701]
[181.00001526 61.16274643]
[194.52420044 54.67458344]
[208.04838562 48.18641663]
[221.57258606 41.69824982]
[221.54374695 26.43516159]
[228.14790344 12.67479324]
[240.07382202 3.14927888]
[254.95356750 -0.25008440]
[269.83279419 3.15164971]
[281.75717163 12.67906380]
[288.35916138 26.44048500]
[288.32788086 41.70357132]
[281.66958618 55.43782425]
[269.70623779 64.91629791]
[254.81323242 68.25704193]
[239.94752502 64.79673767]
[228.06074524 55.22244263]
[214.53656006 61.71060562]
[201.01235962 68.19876862]
[187.48817444 74.68693542]
[184.94105530 87.35614777]
[175.40594482 96.36481476]
[162.22657776 98.24427032]
[150.20629883 92.08223724]
[136.55006409 98.28764343]
[122.89382172 104.49304962]
[112.07192993 111.40242767]
[102.45236206 109.57153320]
[97.25695038 123.64305115]
[92.06153107 137.71456909]
[86.86611938 151.78608704]
[81.67070007 165.85760498]
[76.47528839 179.92912292]
[73.37696838 194.60565186]
[72.44133759 209.57644653]
[71.50570679 224.54724121]
[70.57008362 239.51803589]
[86.30683136 244.25553894]
[100.47258759 252.57148743]
[112.26782990 263.99209595]
[121.02788544 277.86846924]
[126.26036835 293.41348267]
[127.67287445 309.74645996]
[125.18929291 325.94299316]
[118.95390320 341.08734131]
[109.32302856 354.32412720]
[96.84463501 364.90670776]
[82.22717285 372.23928833]
[66.29936218 375.91040039]
[66.29936218 390.91040039]
[66.29936218 405.91040039]
[66.29936218 420.91040039]
[66.29936218 435.91040039]
[66.29936218 450.91040039]
[66.29936218 465.91040039]
[66.29936218 480.91040039]
[66.29936218 495.91040039]
[66.29936218 510.91040039]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[25 129]
[26 128]
[27 127]
[28 126]
[43 125]
[44 124]
[45 123]
[46 122]
[47 121]
[48 120]
[49 87]
[50 86]
[51 85]
[52 84]
[88 118]
[89 117]
[90 116]
[93 112]
[94 111]
[95 110]
[96 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
