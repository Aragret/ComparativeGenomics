%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCCAUACCCCGAACCAACCAAACCCCAAAGACACCCCCCACAGUUUAUGUAGCUUACCUxxxxxxxxxxUUACACUUAGGAGAUUUCAACUUAACUUGACCGCUCUGAGCUAAACCUAGCCCCAAACCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[61.42250824 160.63516235]
[48.32935333 167.95426941]
[35.23620224 175.27336121]
[22.14304543 182.59246826]
[9.04989147 189.91157532]
[-4.04326248 197.23068237]
[-15.02892780 207.44416809]
[-23.28121567 219.97012329]
[-31.53350639 232.49609375]
[-39.78579330 245.02204895]
[-35.13935852 259.95336914]
[-41.22531128 274.35806274]
[-55.17005157 281.43466187]
[-70.38929749 277.84182739]
[-79.69699097 265.27597046]
[-78.69831848 249.67030334]
[-67.86482239 238.39335632]
[-52.31175613 236.76976013]
[-44.05946732 224.24380493]
[-35.80717850 211.71783447]
[-27.55488968 199.19187927]
[-41.10443115 205.62692261]
[-55.81495285 208.55961609]
[-70.79633331 207.81246948]
[-85.14207458 203.43072510]
[-97.98413086 195.67948914]
[-108.54545593 185.02780151]
[-116.18698120 172.12016296]
[-120.44635010 157.73762512]
[-121.06581879 142.75041199]
[-118.00790405 128.06541443]
[-111.45764160 114.57118988]
[-101.81138611 103.08425903]
[-89.65280151 94.29967499]
[-75.71759796 88.74898529]
[-60.84897995 86.76805115]
[-45.94661713 88.47674561]
[-31.91223717 93.77166748]
[-19.59504128 102.33242798]
[-9.74032402 113.64102936]
[-2.94438267 127.01321411]
[0.38157004 141.63983154]
[0.03628504 156.63586426]
[-3.95934486 171.09390259]
[-11.36236858 184.13752747]
[1.73078620 176.81842041]
[14.82394028 169.49931335]
[27.91709518 162.18022156]
[41.01025009 154.86111450]
[54.10340500 147.54200745]
[55.24596024 143.98989868]
[57.65754318 140.74967957]
[61.23313904 138.27470398]
[65.70790863 136.97608948]
[74.21900177 124.62451935]
[82.73008728 112.27294922]
[91.24118042 99.92137909]
[90.91310883 96.81874847]
[91.73741150 93.52706146]
[93.78638458 90.48442078]
[96.96522522 88.14926910]
[101.00894165 86.93727112]
[110.51730347 75.33592987]
[120.02565765 63.73459244]
[129.53401184 52.13325119]
[139.04237366 40.53190994]
[124.89787292 45.52520752]
[109.96234894 46.91451263]
[95.13953400 44.61576843]
[81.32633972 38.76806259]
[69.35858154 29.72523117]
[59.96041489 18.03444862]
[53.70050430 4.40310526]
[50.95763016 -10.34398365]
[51.89776611 -25.31449318]
[56.46401596 -39.60257721]
[64.38008881 -52.34368515]
[75.16699219 -62.76686478]
[88.17202759 -70.24142456]
[102.60827637 -74.31509399]
[117.60221863 -74.74137878]
[132.24658203 -71.49448395]
[145.65528870 -64.77087402]
[157.01695251 -54.97739029]
[165.64413452 -42.70661545]
[171.01478577 -28.70104408]
[172.80393982 -13.80812931]
[170.90336609 1.07097590]
[165.42802429 15.03595734]
[156.71058655 27.24035645]
[170.49296570 21.32039452]
[184.27534485 15.40043068]
[198.05772400 9.48046780]
[201.58691406 -5.51456690]
[213.13397217 -15.44023895]
[228.13406372 -16.64905357]
[240.81784058 -8.88633156]
[254.60021973 -14.80629444]
[268.38259888 -20.72625732]
[282.16497803 -26.64622116]
[287.78912354 -41.41593552]
[302.24374390 -47.80650330]
[316.95318604 -42.02651215]
[323.19058228 -27.50513077]
[317.25537109 -12.85763454]
[302.66885376 -6.77412462]
[288.08493042 -12.86383915]
[274.30255127 -6.94387627]
[260.52017212 -1.02391326]
[246.73779297 4.89604998]
[243.63522339 19.43950272]
[232.43125916 29.48614883]
[217.28268433 31.02707863]
[203.97769165 23.26284981]
[190.19531250 29.18281174]
[176.41293335 35.10277557]
[162.63055420 41.02273941]
[150.64372253 50.04026794]
[141.13536072 61.64160919]
[131.62699890 73.24295044]
[122.11864471 84.84429169]
[112.61028290 96.44563293]
[103.59275055 108.43246460]
[95.08166504 120.78403473]
[86.57057190 133.13560486]
[78.05948639 145.48718262]
[91.54946136 138.92817688]
[106.17433929 135.59457397]
[121.17419434 135.65957642]
[135.76962280 139.11982727]
[149.20223999 145.79551697]
[160.77407837 155.33978271]
[169.88383484 167.25666809]
[176.05816650 180.92698669]
[178.97624207 195.64041138]
[178.48646545 210.63241577]
[174.61425781 225.12399292]
[167.56082153 238.36216736]
[157.69267273 249.65905762]
[145.52256775 258.42767334]
[131.68287659 264.21237183]
[116.89271545 266.71261597]
[101.92060089 265.79843140]
[87.54448700 261.51736450]
[74.51138306 254.09185791]
[63.49849701 243.90774536]
[55.07806396 231.49418640]
[49.68762207 217.49621582]
[47.60726166 202.64118958]
[48.94507980 187.70095825]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 50]
[2 49]
[3 48]
[4 47]
[5 46]
[6 45]
[7 21]
[8 20]
[9 19]
[10 18]
[54 126]
[55 125]
[56 124]
[57 123]
[62 122]
[63 121]
[64 120]
[65 119]
[66 118]
[90 117]
[91 116]
[92 115]
[93 114]
[97 110]
[98 109]
[99 108]
[100 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
