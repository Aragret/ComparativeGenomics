%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCCUCCAUAAACCUGGAGUGACUAUAUGGAUGCCCCCCACCCUACCACACAUUCGAAGAxxxxxxxxxxGAGGCGUCCUUGCCCUAUUACUAUCCAUCCUCAUCCUAGCAAUAAUCCCCAUCCUCCAUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[141.29528809 88.50720978]
[127.77110291 94.99537659]
[114.24691010 101.48354340]
[106.19573975 112.91464996]
[92.24125671 112.04064941]
[78.71706390 118.52881622]
[65.19287109 125.01698303]
[51.66868210 131.50514221]
[38.14449310 137.99331665]
[24.62030411 144.48147583]
[18.18542862 151.05751038]
[10.74659443 150.96066284]
[5.46872473 162.77581787]
[-6.08520889 167.64669800]
[-17.47456169 163.45266724]
[-31.25694275 169.37263489]
[-45.03932571 175.29258728]
[-58.82170486 181.21255493]
[-72.60408783 187.13252258]
[-86.38646698 193.05247498]
[-85.80930328 208.21926880]
[-90.75369263 222.56909180]
[-100.55093384 234.16127014]
[-113.87604523 241.42803955]
[-128.92689514 243.38664246]
[-143.66799927 239.77218628]
[-156.10574341 231.07350159]
[-164.55801392 218.46701050]
[-167.88171387 203.65763855]
[-165.62733459 188.64822388]
[-158.09977722 175.46868896]
[-146.31707764 165.90144348]
[-131.87274170 161.24037170]
[-116.72024536 162.11584473]
[-102.90885162 168.40948486]
[-92.30643463 179.27009583]
[-78.52404785 173.35014343]
[-64.74166870 167.43017578]
[-50.95928574 161.51020813]
[-37.17690659 155.59025574]
[-23.39452553 149.67028809]
[-13.70683384 135.07067871]
[4.54118729 137.30441284]
[18.13213730 130.95729065]
[31.65632820 124.46912384]
[45.18051910 117.98095703]
[58.70470810 111.49279022]
[72.22889709 105.00462341]
[85.75308990 98.51645660]
[93.80426025 87.08535004]
[107.75874329 87.95935059]
[121.28293610 81.47118378]
[134.80712891 74.98301697]
[128.47795105 58.66760635]
[123.52215576 41.88433075]
[119.97372437 24.74857903]
[117.85700226 7.37814665]
[117.18647003 -10.10756111]
[117.96669006 -27.58835030]
[120.19222260 -44.94406509]
[123.84770966 -62.05541229]
[128.90797424 -78.80479431]
[135.33818054 -95.07708740]
[143.09405518 -110.76047516]
[152.12225342 -125.74717712]
[162.36064148 -139.93420410]
[173.73880005 -153.22409058]
[186.17849731 -165.52549744]
[199.59414673 -176.75395203]
[213.89352417 -186.83227539]
[228.97828674 -195.69128418]
[244.74472046 -203.27011108]
[261.08444214 -209.51672363]
[277.88507080 -214.38822937]
[295.03115845 -217.85122681]
[312.40481567 -219.88195801]
[329.88659668 -220.46652222]
[347.35635376 -219.60095215]
[364.69403076 -217.29129028]
[381.78039551 -213.55345154]
[398.49807739 -208.41317749]
[414.73217773 -201.90588379]
[430.37109375 -194.07635498]
[438.09518433 -206.93475342]
[445.81924438 -219.79315186]
[453.54333496 -232.65156555]
[453.28649902 -249.04869080]
[467.49542236 -257.23635864]
[481.55322266 -248.79180908]
[480.99841309 -232.40205383]
[466.40173340 -224.92747498]
[458.67767334 -212.06907654]
[450.95358276 -199.21066284]
[443.22949219 -186.35226440]
[454.13433838 -178.76605225]
[464.54019165 -170.50840759]
[474.40576172 -161.61209106]
[483.69189453 -152.11235046]
[492.36181641 -142.04684448]
[500.38107300 -131.45549011]
[507.71789551 -120.38025665]
[514.34313965 -108.86507416]
[520.23052979 -96.95558929]
[525.35662842 -84.69902039]
[529.70123291 -72.14396667]
[533.24700928 -59.34020996]
[535.97991943 -46.33852768]
[537.88903809 -33.19046402]
[538.96685791 -19.94816399]
[539.20898438 -6.66413832]
[538.61456299 6.60893536]
[537.18585205 19.81842041]
[534.92852783 32.91193008]
[531.85150146 45.83753967]
[527.96697998 58.54398346]
[523.29034424 70.98087311]
[517.84014893 83.09887695]
[511.63793945 94.84993744]
[504.70831299 106.18743896]
[497.07876587 117.06642151]
[488.77947998 127.44372559]
[479.84341431 137.27818298]
[470.30593872 146.53079224]
[460.20489502 155.16485596]
[449.58035278 163.14610291]
[438.47436523 170.44287109]
[426.93099976 177.02619934]
[414.99606323 182.86999512]
[402.71679688 187.95104980]
[390.14196777 192.24920654]
[377.32135010 195.74737549]
[364.30587769 198.43170166]
[351.14709473 200.29150391]
[337.89718628 201.31938171]
[324.60873413 201.51126099]
[311.33438110 200.86634827]
[298.12680054 199.38719177]
[285.03839111 197.07963562]
[272.12103271 193.95281982]
[259.42593384 190.01910400]
[247.00347900 185.29408264]
[234.90290833 179.79649353]
[223.17225647 173.54809570]
[211.85801697 166.57365417]
[201.00506592 158.90083313]
[190.65647888 150.56002808]
[180.85327148 141.58430481]
[171.63436890 132.00923157]
[163.03631592 121.87279510]
[155.09323120 111.21515656]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 53]
[2 52]
[3 51]
[5 49]
[6 48]
[7 47]
[8 46]
[9 45]
[10 44]
[12 43]
[15 41]
[16 40]
[17 39]
[18 38]
[19 37]
[20 36]
[83 94]
[84 93]
[85 92]
[86 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
