%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUGACUAUUCUCUACAAACCACAAAGACAUUGGAACACUAUACCUAUUAUUCGGCGCAUGAxxxxxxxxxxGCUUCACCGGCGCAGUCAUUCUCAUAAUCGCCCACGGGCUUACAUCCUCAUUACUAUUCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[47.50588989 433.04644775]
[47.50588989 418.04644775]
[47.50588989 403.04644775]
[47.50588989 388.04644775]
[47.50588989 373.04644775]
[47.50588989 358.04644775]
[47.50588989 343.04644775]
[47.50588989 328.04644775]
[47.50588989 313.04644775]
[47.50588989 298.04644775]
[45.94830704 283.12753296]
[42.84998703 268.45101929]
[39.75166321 253.77449036]
[34.68221664 267.89187622]
[26.74853516 280.62203979]
[16.30775452 291.39190674]
[3.82985711 299.71667480]
[-10.12346840 305.22164917]
[-24.92412186 307.65899658]
[-39.90585709 306.91900635]
[-54.39428329 303.03500366]
[-67.73720551 296.18179321]
[-79.33400726 286.66790771]
[-88.66265106 274.92156982]
[-95.30323029 261.47155762]
[-98.95680237 246.92332458]
[-99.45892334 231.93173218]
[-96.78697968 217.17161560]
[-91.06124878 203.30741882]
[-82.53947449 190.96322632]
[-71.60525513 180.69468689]
[-58.75079727 172.96403503]
[-44.55472565 168.11929321]
[-29.65608025 166.37850952]
[-14.72550964 167.82005310]
[-0.43510821 172.37904358]
[12.57184982 179.85026550]
[23.70986176 189.89738464]
[32.47755814 202.06814575]
[38.48026276 215.81469727]
[41.44798279 230.52050781]
[46.64339828 216.44898987]
[51.83881378 202.37747192]
[41.50181961 193.96752930]
[34.26187515 182.75265503]
[30.84144592 169.82588196]
[31.58991051 156.45230103]
[36.44792938 143.94528198]
[44.95188904 133.53749084]
[56.27810669 126.25935364]
[69.32259369 122.83710480]
[82.80866241 123.62029266]
[88.58493805 109.77707672]
[80.41579437 95.28849030]
[90.38958740 76.64377594]
[94.09574890 62.10884476]
[97.80191040 47.57390594]
[101.50807190 33.03897095]
[105.21423340 18.50403404]
[98.10832214 0.15224278]
[110.21010590 -14.40795898]
[110.83408356 -29.39497566]
[103.67754364 -43.50506210]
[111.93758392 -55.89945602]
[112.56156158 -70.88647461]
[104.39890289 -80.92763519]
[105.26525116 -93.43637085]
[114.14705658 -101.70806122]
[115.08267975 -116.67884827]
[116.01831055 -131.64964294]
[102.49996948 -138.66209412]
[93.00765228 -150.57072449]
[89.18595123 -165.31231689]
[91.69699860 -180.33279419]
[100.10574341 -193.02975464]
[112.95532227 -201.20338440]
[128.01947021 -203.43754578]
[142.68821716 -199.34516907]
[154.42013550 -189.63526917]
[161.18258667 -175.99015808]
[161.80392456 -160.77392578]
[156.17652893 -146.62286377]
[145.27534485 -135.98875427]
[130.98910522 -130.71401978]
[130.05346680 -115.74322510]
[129.11784363 -100.77243042]
[137.77565002 -85.53949738]
[127.54857635 -70.26249695]
[126.92459869 -55.27548218]
[134.12576294 -42.23736572]
[125.82109833 -28.77099800]
[125.19712067 -13.78398228]
[125.61300659 -13.56949806]
[126.02327728 -13.34446335]
[138.10325623 -22.23681259]
[141.92584229 -37.81781006]
[156.55072021 -44.41270447]
[170.75892639 -36.96245956]
[173.65116882 -21.18226242]
[163.00874329 -9.17733383]
[146.99560547 -10.15682411]
[134.91561890 -1.26447475]
[132.63435364 13.51554871]
[119.74916840 22.21019554]
[116.04300690 36.74513245]
[112.33684540 51.28006744]
[108.63068390 65.81500244]
[104.92452240 80.34993744]
[114.31168365 92.04956055]
[129.30438232 91.58152008]
[142.95106506 82.48757935]
[157.52803040 90.00051880]
[158.03973389 106.39168549]
[143.95977783 114.79924011]
[129.77243042 106.57421875]
[114.77972412 107.04225922]
[102.42815399 115.55335236]
[96.65188599 129.39656067]
[108.70343018 141.12290955]
[115.33764648 156.53410339]
[115.57089233 173.27436829]
[109.39567566 188.79641724]
[97.77752686 200.74902344]
[82.50413513 207.33319092]
[65.91033173 207.57287598]
[60.71491623 221.64439392]
[55.51950073 235.71592712]
[54.42818832 250.67616272]
[57.52651215 265.35269165]
[60.62483215 280.02920532]
[67.35721588 266.62493896]
[79.81362915 258.26803589]
[94.76976013 257.12167358]
[108.35426331 263.48257446]
[117.05082703 275.70425415]
[118.60838318 290.62316895]
[112.62375641 304.37759399]
[100.64604950 313.40725708]
[85.77565002 315.37481689]
[71.86172485 309.77102661]
[62.50588989 298.04644775]
[62.50588989 313.04644775]
[62.50588989 328.04644775]
[62.50588989 343.04644775]
[62.50588989 358.04644775]
[62.50588989 373.04644775]
[62.50588989 388.04644775]
[62.50588989 403.04644775]
[62.50588989 418.04644775]
[62.50588989 433.04644775]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 130]
[12 129]
[13 128]
[41 127]
[42 126]
[43 125]
[52 118]
[53 117]
[55 108]
[56 107]
[57 106]
[58 105]
[59 104]
[61 92]
[62 91]
[64 89]
[65 88]
[68 86]
[69 85]
[70 84]
[94 102]
[95 101]
[109 116]
[110 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
