%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUAGCAUUACUUAUAUGAUAUGUCUCCAUACCCAUUACAAUCUCCAGCAUUCCCCCUCAxxxxxxxxxxGGUCAAUGCUCUGAAAUCUGUGGAGCAAACCACAGUUUCAUGCCCAUCGUCCUAGAAUUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[81.59532166 423.65667725]
[81.59532166 408.65667725]
[81.59532166 393.65667725]
[81.59532166 378.65667725]
[81.59532166 363.65667725]
[81.59532166 348.65667725]
[81.59532166 333.65667725]
[81.59532166 318.65667725]
[81.59532166 303.65667725]
[81.59532166 288.65667725]
[66.94094086 285.56719971]
[53.24387741 279.49581909]
[41.10382080 270.70578003]
[31.05284882 259.57925415]
[23.53209877 246.60098267]
[18.87241364 232.33705139]
[17.27978325 217.41017151]
[18.82624054 202.47256470]
[23.44660759 188.17741394]
[30.94124031 175.15029907]
[40.98464966 163.96186829]
[53.13964462 155.10281372]
[66.87635040 148.96231079]
[81.59532166 145.81100464]
[81.59532166 130.81100464]
[70.60965729 120.59753418]
[55.64940643 121.68884277]
[40.68915558 122.78015137]
[25.73870850 133.47894287]
[10.24304295 125.30065155]
[-4.69126415 126.70295715]
[-19.62557220 128.10525513]
[-34.55987930 129.50756836]
[-47.61276245 139.43501282]
[-62.62995529 132.84594727]
[-64.16306305 116.51861572]
[-50.63494873 107.24919128]
[-35.96218491 114.57325745]
[-21.02787590 113.17095184]
[-6.09356785 111.76864624]
[8.84074020 110.36634827]
[16.83126831 101.23076630]
[29.30687714 99.97453308]
[39.59784698 107.81990814]
[54.55809402 106.72859192]
[69.51834106 105.63728333]
[73.77762604 87.70848846]
[86.82768250 76.52069855]
[102.73019409 75.26669312]
[108.79320526 61.54663849]
[99.24526978 60.29799652]
[91.15795898 55.52682114]
[85.73199463 48.15870285]
[83.68649292 39.48559570]
[85.16742706 30.94127464]
[89.75292969 23.86465454]
[96.54998779 19.29002190]
[95.30311584 4.34193468]
[94.05623627 -10.60615253]
[92.80936432 -25.55423927]
[91.56248474 -40.50232697]
[90.31561279 -55.45041275]
[78.53332520 -65.63939667]
[77.48175812 -80.81664276]
[87.26800537 -91.98646545]
[86.02113342 -106.93455505]
[71.53173828 -111.53083038]
[59.90741730 -121.32591248]
[52.92079926 -134.82612610]
[51.63729858 -149.97277832]
[56.25263214 -164.45611572]
[66.06299591 -176.06753540]
[79.57238770 -183.03639221]
[94.72071075 -184.29997253]
[109.19796753 -179.66558838]
[120.79647827 -169.83995056]
[127.74755096 -156.32141113]
[128.99119568 -141.17143250]
[124.33777618 -126.70028687]
[114.49689484 -115.11471558]
[100.96922302 -108.18142700]
[102.21609497 -93.23334503]
[113.71765900 -83.83921814]
[115.19510651 -68.69749451]
[105.26370239 -56.69728851]
[106.51057434 -41.74919891]
[107.75744629 -26.80111313]
[109.00432587 -11.85302639]
[110.25119781 3.09506035]
[111.49807739 18.04314804]
[125.00633240 26.39594650]
[129.25221252 43.30432892]
[143.57479858 38.84751129]
[157.89739990 34.39069748]
[172.22000122 29.93387985]
[186.54260254 25.47706413]
[193.86367798 19.90448952]
[201.20971680 21.07986069]
[215.62193298 16.92197418]
[230.03414917 12.76408577]
[244.44636536 8.60619831]
[258.85858154 4.44831133]
[273.27078247 0.29042384]
[280.69012451 -13.66411400]
[295.82794189 -18.20524406]
[309.70324707 -10.63879490]
[314.08407593 4.54619360]
[306.37136841 18.34073639]
[291.14089966 22.56077766]
[277.42868042 14.70263958]
[263.01644897 18.86052704]
[248.60424805 23.01841545]
[234.19203186 27.17630196]
[219.77981567 31.33419037]
[205.36759949 35.49207687]
[190.99942017 39.79965973]
[176.67681885 44.25647736]
[162.35421753 48.71329117]
[148.03161621 53.17010880]
[133.70903015 57.62692261]
[122.51325989 67.60964966]
[116.45024872 81.32970428]
[125.79750824 94.33451080]
[125.55619049 111.29527283]
[114.70146179 125.54087067]
[96.59532166 130.81100464]
[96.59532166 145.81100464]
[111.31429291 148.96231079]
[125.05099487 155.10281372]
[137.20599365 163.96186829]
[147.24940491 175.15029907]
[154.74403381 188.17741394]
[159.36439514 202.47256470]
[160.91085815 217.41017151]
[159.31822205 232.33705139]
[154.65853882 246.60098267]
[147.13778687 259.57925415]
[137.08682251 270.70578003]
[124.94676208 279.49581909]
[111.24969482 285.56719971]
[96.59532166 288.65667725]
[96.59532166 303.65667725]
[96.59532166 318.65667725]
[96.59532166 333.65667725]
[96.59532166 348.65667725]
[96.59532166 363.65667725]
[96.59532166 378.65667725]
[96.59532166 393.65667725]
[96.59532166 408.65667725]
[96.59532166 423.65667725]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[24 127]
[25 126]
[26 46]
[27 45]
[28 44]
[30 41]
[31 40]
[32 39]
[33 38]
[49 122]
[50 121]
[57 90]
[58 89]
[59 88]
[60 87]
[61 86]
[62 85]
[65 82]
[66 81]
[92 120]
[93 119]
[94 118]
[95 117]
[96 116]
[98 115]
[99 114]
[100 113]
[101 112]
[102 111]
[103 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
