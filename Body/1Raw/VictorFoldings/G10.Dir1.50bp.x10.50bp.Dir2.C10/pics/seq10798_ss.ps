%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGCAAUCCUAUACAACCGUAUCGGCGAUAUCGGUUUCAUCCUCGCCUUAGCAUGAUUUAUxxxxxxxxxxAGCUACCCUUUUACCAUCAUUGGACAAGUAGCAUCCGUACUAUACUUCACAACAAUCCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[110.14808655 258.78430176]
[110.14808655 243.78430176]
[110.14808655 228.78430176]
[110.14808655 213.78430176]
[110.14808655 198.78430176]
[110.14808655 183.78430176]
[110.14808655 168.78430176]
[110.14808655 153.78430176]
[110.14808655 138.78430176]
[110.14808655 123.78430176]
[92.17453766 121.06180573]
[82.87126160 108.40187836]
[67.89154816 109.18172455]
[64.16455078 120.08959198]
[57.19292450 129.22372437]
[47.71462250 135.65525818]
[36.72095871 138.73933411]
[25.35297585 138.17977905]
[14.78299713 134.05735779]
[6.09373713 126.81907654]
[-6.99941730 134.13818359]
[-20.09257126 141.45729065]
[-33.18572617 148.77639771]
[-41.11212158 163.13272095]
[-57.51121521 163.17585754]
[-65.51302338 148.86141968]
[-56.88596725 134.91487122]
[-40.50483322 135.68324280]
[-27.41167641 128.36413574]
[-14.31852245 121.04502869]
[-1.22536838 113.72592163]
[-2.51034307 107.53182220]
[-2.66409850 101.20771027]
[-17.07631493 97.04981995]
[-31.48853111 92.89193726]
[-45.90074539 88.73404694]
[-60.31296158 84.57615662]
[-64.62693787 85.82159424]
[-68.69219971 85.61012268]
[-72.07091522 84.20793915]
[-74.46106720 81.99859619]
[-75.72336578 79.42684174]
[-89.74008179 74.08532715]
[-104.05805969 80.77644348]
[-118.88501740 75.30497742]
[-125.42437744 60.91705322]
[-119.79645538 46.14877319]
[-105.34020233 39.76189804]
[-90.63224792 45.54564285]
[-84.39856720 60.06861496]
[-70.38185120 65.41012573]
[-56.15507507 70.16394043]
[-41.74285889 74.32183075]
[-27.33064270 78.47972107]
[-12.91842747 82.63760376]
[1.49378908 86.79549408]
[16.11485481 72.15438843]
[36.54732132 68.22097015]
[55.77247238 76.47914886]
[67.11170197 94.20201111]
[82.09141541 93.42216492]
[100.42135620 77.53536224]
[124.59047699 92.00093079]
[135.88948059 82.13520813]
[147.18849182 72.26948547]
[139.87542725 59.95353699]
[134.83787537 46.54892731]
[132.23091125 32.47194290]
[132.13418579 18.15951347]
[134.54942322 4.05565643]
[139.40046692 -9.40230751]
[146.53564453 -21.79730606]
[155.73251343 -32.74544525]
[166.70478821 -41.90790176]
[179.11128235 -49.00139236]
[192.56649780 -53.80696487]
[206.65257263 -56.17671585]
[220.93235779 -56.03837967]
[234.96282959 -53.39750290]
[248.30897522 -48.33724976]
[260.55722046 -41.01578522]
[271.32824707 -31.66131210]
[283.02786255 -41.04847336]
[294.72750854 -50.43563461]
[306.42712402 -59.82279587]
[318.12673950 -69.20996094]
[320.05828857 -74.19881439]
[323.40097046 -77.57209015]
[327.28475952 -79.06133270]
[330.86163330 -78.79022980]
[343.12399292 -87.42935181]
[345.95059204 -102.74757385]
[358.50946045 -111.33418274]
[373.09561157 -108.54504395]
[385.35800171 -117.18415833]
[397.62036133 -125.82327271]
[404.01315308 -140.92506409]
[420.31912231 -142.67082214]
[429.76406860 -129.26466370]
[422.63183594 -114.49769592]
[406.25946045 -113.56090546]
[393.99710083 -104.92179108]
[381.73474121 -96.28267670]
[379.45169067 -81.60877991]
[367.13894653 -72.67280579]
[351.76312256 -75.16698456]
[339.50073242 -66.52786255]
[327.51391602 -57.51033401]
[315.81427002 -48.12317276]
[304.11465454 -38.73601151]
[292.41503906 -29.34885025]
[280.71542358 -19.96168900]
[288.07995605 -6.07877874]
[292.62631226 8.96925354]
[294.18164062 24.61643791]
[292.68572998 40.27391815]
[288.19314575 55.35211563]
[280.87133789 69.28292847]
[270.99438477 81.54114532]
[258.93280029 91.66421509]
[245.13945007 99.26974487]
[230.13279724 104.06990814]
[214.47721863 105.88236237]
[198.76182556 104.63715363]
[183.57838440 100.37944794]
[169.49891663 93.26782990]
[157.05421448 83.56848907]
[145.75520325 93.43421173]
[134.45619202 103.29993439]
[147.17189026 95.34310150]
[162.10519409 93.93025208]
[176.08750916 99.36116791]
[186.15199280 110.48349762]
[190.16311646 124.93724823]
[187.26976013 139.65556335]
[178.08587646 151.51541138]
[164.56013489 158.00033569]
[149.56248474 157.73432922]
[136.27522278 150.77383423]
[127.51768494 138.59574890]
[125.14808655 123.78430176]
[125.14808655 138.78430176]
[125.14808655 153.78430176]
[125.14808655 168.78430176]
[125.14808655 183.78430176]
[125.14808655 198.78430176]
[125.14808655 213.78430176]
[125.14808655 228.78430176]
[125.14808655 243.78430176]
[125.14808655 258.78430176]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 61]
[13 60]
[20 31]
[21 30]
[22 29]
[23 28]
[33 56]
[34 55]
[35 54]
[36 53]
[37 52]
[42 51]
[43 50]
[63 129]
[64 128]
[65 127]
[82 112]
[83 111]
[84 110]
[85 109]
[86 108]
[90 107]
[91 106]
[94 103]
[95 102]
[96 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
