%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUGGCGCAAUAGAUAUAGUACCGCAAGGGAAAGAUGAAAAAUUAUAACCAAGCAUAAUAxxxxxxxxxxGGCCCAUACCCCGAAAAUGUUGGUUAUACCCUUCCCGUACUAAUUAAUCCCCUGGCCCAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[96.23888397 499.52398682]
[96.23888397 484.52398682]
[96.23888397 469.52398682]
[96.23888397 454.52398682]
[96.23888397 439.52398682]
[96.23888397 424.52398682]
[96.23888397 409.52398682]
[96.23888397 394.52398682]
[96.23888397 379.52398682]
[96.23888397 364.52398682]
[81.54331970 361.62319946]
[67.69166565 355.90921021]
[55.21701050 347.59988403]
[44.59983444 337.01306152]
[36.24951553 324.55426025]
[30.48854637 310.70126343]
[27.54007149 295.98583984]
[27.51924706 280.97311401]
[30.42874718 266.24014282]
[36.15858841 252.35348511]
[44.49028015 239.84759521]
[55.10516357 229.20414734]
[67.59659576 220.83352661]
[81.48553467 215.05902100]
[96.23888397 212.10429382]
[96.23888397 197.10429382]
[95.92682648 182.10752869]
[95.30284882 167.12051392]
[94.67887115 152.13349915]
[94.05489349 137.14648438]
[93.43091583 122.15946960]
[92.80693817 107.17245483]
[89.33267975 99.83667755]
[92.32916260 91.86783600]
[82.42211151 76.38137817]
[91.39495087 61.33185577]
[90.77097321 46.34484100]
[90.14699554 31.35782433]
[89.52301788 16.37080765]
[88.89904022 1.38379157]
[80.91127014 14.08006859]
[68.51339722 22.52357292]
[53.77366638 25.30573654]
[39.15100479 21.96243477]
[27.08478928 13.05140209]
[19.58794212 0.05920166]
[17.91110420 -14.84677696]
[22.33400726 -29.17988396]
[32.11881638 -40.54903030]
[45.63320160 -47.05759430]
[60.62266159 -47.61979675]
[74.58661652 -42.14184952]
[85.19557190 -31.53759956]
[90.67946625 -17.57747078]
[94.08245087 -32.18636322]
[97.48542786 -46.79525757]
[100.88840485 -61.40414810]
[104.29138184 -76.01303864]
[107.69435883 -90.62193298]
[111.09733582 -105.23082733]
[114.50031281 -119.83972168]
[117.90328979 -134.44860840]
[116.80116272 -143.58300781]
[121.53201294 -149.32449341]
[125.23817444 -163.85943604]
[128.94433594 -178.39436340]
[115.36512756 -184.88215637]
[103.31272888 -193.89469910]
[93.25040436 -205.08558655]
[85.56491089 -218.02464294]
[80.55167389 -232.21456909]
[78.40337372 -247.10989380]
[79.20259857 -262.13812256]
[82.91861725 -276.72158813]
[89.40859985 -290.29974365]
[98.42309570 -302.35067749]
[109.61560822 -312.41119385]
[122.55591583 -320.09460449]
[136.74664307 -325.10552979]
[151.64231873 -327.25143433]
[166.67042542 -326.44976807]
[181.25328064 -322.73138428]
[194.83038330 -316.23919678]
[206.87986755 -307.22274780]
[216.93856812 -296.02862549]
[224.61987305 -283.08706665]
[229.62852478 -268.89553833]
[231.77198792 -253.99949646]
[230.96791077 -238.97154236]
[227.24716187 -224.38928223]
[220.75277710 -210.81321716]
[211.73439026 -198.76519775]
[200.53862000 -188.70831299]
[187.59582520 -181.02909851]
[173.40348816 -176.02275085]
[158.50711060 -173.88168335]
[143.47926331 -174.68820190]
[139.77310181 -160.15327454]
[136.06694031 -145.61833191]
[132.51219177 -131.04563904]
[129.10920715 -116.43674469]
[125.70623016 -101.82785034]
[122.30325317 -87.21895599]
[118.90027618 -72.61006165]
[115.49729919 -58.00117111]
[112.09431458 -43.39227676]
[108.69133759 -28.78338623]
[105.28836060 -14.17449379]
[103.88605499 0.75981426]
[104.51003265 15.74682999]
[105.13401031 30.73384666]
[105.75798798 45.72086334]
[106.38196564 60.70787811]
[115.08976746 69.16255951]
[115.69569397 81.68660736]
[107.32591248 91.55577850]
[107.79395294 106.54847717]
[108.41793060 121.53549194]
[109.04190826 136.52250671]
[109.66588593 151.50952148]
[110.28986359 166.49653625]
[110.91384125 181.48355103]
[114.17775726 187.35333252]
[113.96925354 193.11422729]
[111.23888397 197.10429382]
[111.23888397 212.10429382]
[125.99223328 215.05902100]
[139.88116455 220.83352661]
[152.37260437 229.20414734]
[162.98748779 239.84759521]
[171.31918335 252.35348511]
[177.04901123 266.24014282]
[179.95851135 280.97311401]
[179.93769836 295.98583984]
[176.98922729 310.70126343]
[171.22825623 324.55426025]
[162.87792969 337.01306152]
[152.26075745 347.59988403]
[139.78610229 355.90921021]
[125.93444824 361.62319946]
[111.23888397 364.52398682]
[111.23888397 379.52398682]
[111.23888397 394.52398682]
[111.23888397 409.52398682]
[111.23888397 424.52398682]
[111.23888397 439.52398682]
[111.23888397 454.52398682]
[111.23888397 469.52398682]
[111.23888397 484.52398682]
[111.23888397 499.52398682]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[25 126]
[26 125]
[27 122]
[28 121]
[29 120]
[30 119]
[31 118]
[32 117]
[34 116]
[36 113]
[37 112]
[38 111]
[39 110]
[40 109]
[54 108]
[55 107]
[56 106]
[57 105]
[58 104]
[59 103]
[60 102]
[61 101]
[62 100]
[64 99]
[65 98]
[66 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
