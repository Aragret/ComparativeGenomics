%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCAAAUCAAUUGGCCACCAAUGGUACUGAACCUACGAGUACACCGACUACGGCGGACUAAxxxxxxxxxxCCCCAUGGAUGACCCCCCUCAGAUAGGGGUCCCUUGACCACCAUCCUCCGUGAAAUCAAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[116.64921570 296.02230835]
[116.64921570 281.02230835]
[116.64921570 266.02230835]
[116.64921570 251.02229309]
[116.64921570 236.02229309]
[116.64921570 221.02229309]
[116.64921570 206.02229309]
[116.64921570 191.02229309]
[116.64921570 176.02229309]
[116.64921570 161.02229309]
[110.14105988 157.29484558]
[102.94967651 170.45857239]
[102.76957703 185.45750427]
[89.74714661 192.90171814]
[76.73111725 185.44630432]
[76.56390381 170.44725037]
[89.40933990 162.70353699]
[97.12475586 149.83993530]
[90.61660004 146.11247253]
[77.67854309 153.70237732]
[64.74048615 161.29229736]
[51.80242920 168.88220215]
[38.86437607 176.47210693]
[28.26194763 189.70179749]
[12.61422825 183.17607117]
[14.55321693 166.33335876]
[31.27446747 163.53405762]
[44.21252441 155.94413757]
[57.15057755 148.35423279]
[70.08863068 140.76432800]
[83.02668762 133.17442322]
[81.70726013 125.79138947]
[77.74896240 103.64231110]
[62.98290634 101.00344086]
[48.21685028 98.36457825]
[33.45079422 95.72571564]
[18.68474007 93.08685303]
[8.26656723 104.46512604]
[-6.65513849 108.38256073]
[-21.31891441 103.58910370]
[-31.04560280 91.61433411]
[-32.73145294 76.27935791]
[-25.83851624 62.47751236]
[-12.56630516 54.61291504]
[2.85006881 55.19512558]
[15.49129486 64.03836823]
[21.32360458 78.32079315]
[36.08966064 80.95966339]
[50.85571671 83.59852600]
[65.62177277 86.23738861]
[80.38782501 88.87625122]
[83.97908020 82.29196167]
[94.75284576 62.53908920]
[84.53936768 51.55342484]
[74.32588196 40.56775665]
[58.50008392 36.26937866]
[54.57185364 20.34766388]
[66.58222198 9.18150616]
[82.17594910 14.25769329]
[85.31154633 30.35427856]
[95.52503204 41.33994293]
[105.73851013 52.32560730]
[120.70929718 53.26123810]
[132.21110535 43.63270950]
[143.71290588 34.00418472]
[155.21470642 24.37565804]
[140.38336182 26.61870956]
[125.51027679 24.67160225]
[111.75614929 18.68628693]
[100.19437408 9.12986279]
[91.72722626 -3.25187659]
[87.01550293 -17.49265099]
[86.42691040 -32.48109818]
[90.00737762 -47.04750824]
[97.47747803 -60.05510330]
[108.25424957 -70.48876190]
[121.49665833 -77.53423309]
[136.17124939 -80.64167786]
[151.13282776 -79.56858826]
[165.21374512 -74.39871979]
[177.31513977 -65.53552246]
[186.49259949 -53.67068863]
[192.02990723 -39.73016739]
[193.49493408 -24.80187988]
[190.77334595 -10.05084896]
[184.07751465 3.37174463]
[173.92793274 14.42010975]
[188.34014893 10.26222324]
[202.75236511 6.10433531]
[217.16458130 1.94644797]
[231.57679749 -2.21143937]
[245.42001343 -7.98771191]
[258.51318359 -15.30681705]
[271.60632324 -22.62592316]
[284.69949341 -29.94502831]
[297.79263306 -37.26413345]
[298.63769531 -52.66833496]
[307.69528198 -65.15689087]
[322.07510376 -70.74475098]
[337.18862915 -67.64884949]
[348.21319580 -56.85707855]
[351.63092041 -41.81304932]
[346.35116577 -27.31725693]
[334.05874634 -17.99526024]
[318.67608643 -16.82167244]
[305.11175537 -24.17098045]
[292.01858521 -16.85187340]
[278.92544556 -9.53276825]
[265.83227539 -2.21366310]
[252.73912048 5.10544252]
[267.60241699 7.12589836]
[279.89831543 15.71722603]
[286.90707397 28.97910309]
[287.07839966 43.97812271]
[280.37442017 57.39664459]
[268.27801514 66.26660919]
[253.46473694 68.62606812]
[239.21118164 63.95312881]
[228.67012024 53.28139877]
[224.17311096 38.97137070]
[226.71485901 24.18828964]
[235.73468018 12.20077705]
[221.32246399 16.35866356]
[206.91024780 20.51655197]
[192.49803162 24.67443848]
[178.08581543 28.83232689]
[164.84323120 35.87746048]
[153.34143066 45.50598907]
[141.83963013 55.13451385]
[130.33782959 64.76303864]
[145.33746338 64.86658478]
[159.59028625 69.54174805]
[171.73703003 78.34268188]
[180.61932373 90.43006897]
[185.39007568 104.65117645]
[185.59432983 119.64978790]
[181.21258545 133.99552917]
[172.66273499 146.32031250]
[160.76014709 155.44873047]
[146.63990784 160.51028442]
[131.64921570 161.02229309]
[131.64921570 176.02229309]
[131.64921570 191.02229309]
[131.64921570 206.02229309]
[131.64921570 221.02229309]
[131.64921570 236.02229309]
[131.64921570 251.02229309]
[131.64921570 266.02230835]
[131.64921570 281.02230835]
[131.64921570 296.02230835]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[19 31]
[20 30]
[21 29]
[22 28]
[23 27]
[33 51]
[34 50]
[35 49]
[36 48]
[37 47]
[53 62]
[54 61]
[55 60]
[63 130]
[64 129]
[65 128]
[66 127]
[87 126]
[88 125]
[89 124]
[90 123]
[91 122]
[92 110]
[93 109]
[94 108]
[95 107]
[96 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
