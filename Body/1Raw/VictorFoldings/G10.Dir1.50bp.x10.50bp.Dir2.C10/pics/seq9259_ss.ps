%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUUUUAGUAUAAAUAGUACCGUUAACUUCCAAUUAACUAGUUUUGACAACAUUCAAAAAAGAGxxxxxxxxxxAAUACCAACUAUCUCCCUAAUUGAAAACAAAAUACUCAAAUGGGCCUGUCCUUGUAGUAUAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[160.00201416 391.01324463]
[160.00201416 376.01324463]
[160.00201416 361.01324463]
[160.00201416 346.01324463]
[160.00201416 331.01324463]
[160.00201416 316.01324463]
[160.00201416 301.01324463]
[160.00201416 286.01324463]
[160.00201416 271.01324463]
[160.00201416 256.01324463]
[156.87355042 241.34312439]
[144.61723328 232.87957764]
[146.05154419 217.12351990]
[139.93222046 203.42848206]
[133.81289673 189.73345947]
[127.55686951 176.10034180]
[121.16474915 162.53048706]
[114.77262878 148.96063232]
[108.38050842 135.39079285]
[101.98838806 121.82093811]
[82.26773071 116.73041534]
[73.45059967 96.01468658]
[85.52413177 74.50892639]
[74.97071838 63.84939575]
[64.41731262 53.18986893]
[53.86390305 42.53033829]
[43.31049347 31.87081146]
[30.76146317 35.41794205]
[18.03422737 33.13366318]
[7.67987967 25.57375145]
[1.73092544 14.34150219]
[-13.26832390 14.49157619]
[-28.26757240 14.64165020]
[-43.26682281 14.79172325]
[-58.26607132 14.94179726]
[-68.05693817 27.13494682]
[-83.40477753 30.13126945]
[-97.06279755 22.51599503]
[-102.58210754 7.88482141]
[-97.35665894 -6.85385752]
[-83.85374451 -14.74088860]
[-68.44902802 -12.05225754]
[-58.41614532 -0.05745235]
[-43.41689682 -0.20752594]
[-28.41764641 -0.35759953]
[-13.41839695 -0.50767308]
[1.58085191 -0.65774667]
[3.82231307 -6.44176435]
[7.27504349 -11.59517670]
[11.77171135 -15.86823082]
[6.20521927 -29.79712868]
[-1.89291203 -42.42330170]
[-12.23092365 -53.29185867]
[-22.56893539 -64.16041565]
[-32.90694809 -75.02896881]
[-43.24496078 -85.89752197]
[-59.04858780 -86.04219055]
[-70.06137848 -97.37770844]
[-69.74964142 -113.17892456]
[-58.29831696 -124.07125092]
[-42.50128174 -123.59246826]
[-31.73063278 -112.02662659]
[-32.37640381 -96.23553467]
[-22.03839302 -85.36698151]
[-11.70038033 -74.49842834]
[-1.36236823 -63.62987137]
[8.97564411 -52.76131439]
[5.69855785 -67.39896393]
[6.80158281 -82.35835266]
[12.19015694 -96.35704041]
[21.40232849 -108.19493866]
[33.64834976 -116.85720825]
[47.87839127 -121.60124969]
[62.87253571 -122.02035522]
[77.34535980 -118.07859802]
[90.05612946 -110.11390686]
[99.91516876 -98.80906677]
[106.07727814 -85.13323212]
[108.01419830 -70.25881958]
[105.55987549 -55.46096802]
[98.92471313 -42.00828934]
[88.67752838 -31.05405235]
[75.69680786 -23.53734970]
[61.09535599 -20.10257339]
[46.12494278 -21.04418182]
[32.06894684 -26.28145409]
[20.13411713 -35.36362076]
[25.70060730 -21.43472290]
[45.52829361 -16.52095222]
[57.03164291 0.64408189]
[53.97002029 21.31740189]
[64.52342987 31.97693062]
[75.07683563 42.63645935]
[85.63024902 53.29598999]
[96.18365479 63.95551682]
[87.64277649 51.62452698]
[87.50626373 36.62514877]
[95.82130432 24.14075279]
[109.71443939 18.48560143]
[124.38459015 21.61396217]
[134.76216125 32.44475555]
[137.26094055 47.23516464]
[131.01742554 60.87402344]
[118.18885040 68.64820862]
[132.17274475 63.22135162]
[146.15663147 57.79449844]
[156.00279236 44.68017960]
[172.24847412 46.91839218]
[178.18153381 62.20665359]
[167.69853210 74.81771088]
[151.58349609 71.77838898]
[137.59959412 77.20524597]
[123.61570740 82.63210297]
[125.54371643 101.88220215]
[115.55823517 115.42881775]
[121.95035553 128.99867249]
[128.34246826 142.56851196]
[134.73458862 156.13836670]
[141.12670898 169.70820618]
[147.65129089 176.18261719]
[147.50793457 183.61413574]
[153.62725830 197.30915833]
[159.74658203 211.00419617]
[172.44059753 220.44731140]
[170.56858826 235.22380066]
[172.28529358 220.32235718]
[177.89041138 206.40896606]
[186.98298645 194.47895813]
[198.91253662 185.38577271]
[212.82563782 179.77993774]
[227.72698975 178.06246948]
[242.55056763 180.35623169]
[256.23593140 186.49714661]
[267.80404663 196.04589844]
[276.42736816 208.31938171]
[281.48898315 222.43957520]
[282.62683105 237.39636230]
[279.75942993 252.11975098]
[273.09201050 265.55645752]
[263.10147095 276.74526978]
[250.50253296 284.88571167]
[236.19653320 289.39547729]
[221.20684814 289.95193481]
[206.60585022 286.51528931]
[193.43803406 279.33135986]
[182.64543152 268.91409302]
[175.00201416 256.01324463]
[175.00201416 271.01324463]
[175.00201416 286.01324463]
[175.00201416 301.01324463]
[175.00201416 316.01324463]
[175.00201416 331.01324463]
[175.00201416 346.01324463]
[175.00201416 361.01324463]
[175.00201416 376.01324463]
[175.00201416 391.01324463]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 156]
[2 155]
[3 154]
[4 153]
[5 152]
[6 151]
[7 150]
[8 149]
[9 148]
[10 147]
[11 125]
[13 123]
[14 122]
[15 121]
[16 119]
[17 118]
[18 117]
[19 116]
[20 115]
[23 95]
[24 94]
[25 93]
[26 92]
[27 91]
[31 47]
[32 46]
[33 45]
[34 44]
[35 43]
[50 88]
[51 87]
[52 67]
[53 66]
[54 65]
[55 64]
[56 63]
[104 113]
[105 112]
[106 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
