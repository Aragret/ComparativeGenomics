%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAUCAAUUGGCUUCCUAGGGUUUAUCGUGUGAGCACACCAUAUAUUUACAGUAGGAAUAGxxxxxxxxxxUGCCCCCAUGUCUAACAACAUGGCUUUCUCAACUUUUAAAGGAUAACAGCUAUCCAUUGGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[141.94212341 323.85092163]
[141.94212341 308.85092163]
[141.94212341 293.85092163]
[141.94212341 278.85092163]
[141.94212341 263.85092163]
[141.94212341 248.85092163]
[141.94212341 233.85092163]
[141.94212341 218.85092163]
[141.94212341 203.85092163]
[141.94212341 188.85092163]
[139.61100769 174.03315735]
[135.00544739 159.75770569]
[130.39988708 145.48223877]
[125.79431915 131.20677185]
[106.70046997 137.58586121]
[88.10919189 133.84149170]
[74.73752594 122.09409332]
[69.39753723 106.33997345]
[72.43630219 91.16972351]
[59.82517624 83.04818726]
[47.21404648 74.92664337]
[33.55780792 68.72123718]
[19.14559174 64.56334686]
[4.73337507 60.40546036]
[-9.67884064 56.24757385]
[-24.09105682 52.08968353]
[-38.50327301 47.93179703]
[-52.22002792 55.31342316]
[-66.77683258 50.89142609]
[-73.72955322 37.76910782]
[-88.14176941 33.61121750]
[-102.67670441 29.90505791]
[-117.35323334 26.80673599]
[-132.06118774 23.86125374]
[-146.76914978 20.91577148]
[-161.81999207 25.79255486]
[-172.78013611 15.70669556]
[-187.48809814 12.76121330]
[-202.19606018 9.81573105]
[-216.90400696 6.87024832]
[-232.25798035 12.63112068]
[-244.75044250 2.00706267]
[-241.53021240 -14.07280636]
[-225.91000366 -19.06689453]
[-213.95852661 -7.83771324]
[-199.25056458 -4.89223051]
[-184.54260254 -1.94674814]
[-169.83464050 0.99873435]
[-155.83583069 -4.08872938]
[-143.82366943 6.20780897]
[-129.11570740 9.15329170]
[-114.40774536 12.09877396]
[-107.18484497 10.31683159]
[-99.42588043 15.26155567]
[-96.22924805 13.63396740]
[-92.07148743 13.51276970]
[-87.68760681 15.33869362]
[-83.98387909 19.19900322]
[-69.57166290 23.35688972]
[-56.69763184 15.95453835]
[-42.02236557 19.96591949]
[-34.34538651 33.51958084]
[-19.93317032 37.67746735]
[-5.52095366 41.83535767]
[8.89126205 45.99324417]
[23.30347824 50.15113068]
[37.71569443 54.30901718]
[28.03285599 42.85290146]
[23.36945152 28.59622955]
[24.41023254 13.63238049]
[31.00237656 0.15856726]
[42.17792511 -9.84678650]
[56.29592133 -14.91454792]
[71.28334808 -14.30059147]
[84.93953705 -8.09506893]
[95.25928497 2.79083467]
[100.72728729 16.75868988]
[100.54064941 31.75752831]
[94.72679138 45.58499908]
[84.13937378 56.21075439]
[70.33300018 62.07455444]
[55.33559036 62.31551361]
[67.94671631 70.43705750]
[80.55784607 78.55860138]
[102.87200165 65.40363312]
[131.76960754 74.90214539]
[142.43122864 64.35085297]
[153.09284973 53.79956055]
[163.75448608 43.24827194]
[174.41610718 32.69698334]
[185.07772827 22.14569092]
[184.90930176 6.34230042]
[196.02442932 -4.89288616]
[211.82872009 -4.89423084]
[222.94575500 6.33906364]
[222.78001404 22.14248276]
[211.42980957 33.14014053]
[195.62902832 32.80731964]
[184.96739197 43.35860825]
[174.30577087 53.90989685]
[163.64414978 64.46118927]
[152.98251343 75.01248169]
[142.32089233 85.56376648]
[148.24085999 99.34615326]
[163.23355103 98.87810516]
[178.22624207 98.41006470]
[193.21894836 97.94202423]
[200.40881348 84.36994171]
[213.42997742 76.22470856]
[228.77981567 75.69735718]
[242.32928467 82.92972565]
[250.43367004 95.97636414]
[250.91290283 111.32777405]
[243.63809204 124.85451508]
[230.56613159 132.91795349]
[215.21328735 133.34907532]
[201.70941162 126.03190613]
[193.68698120 112.93472290]
[178.69429016 113.40276337]
[163.70159912 113.87080383]
[148.70889282 114.33884430]
[140.06977844 126.60121155]
[144.67533875 140.87667847]
[149.28091431 155.15213013]
[153.88647461 169.42759705]
[157.80302429 154.94793701]
[166.60403442 142.80123901]
[179.14340210 134.56932068]
[193.78816223 131.32417297]
[208.63121033 133.48840332]
[221.73960876 140.78016663]
[231.40631104 152.24990845]
[236.37248230 166.40396118]
[235.99137878 181.39910889]
[230.31265259 195.28262329]
[220.07579041 206.24652100]
[206.61392212 212.86300659]
[191.68009949 214.27047729]
[177.21908569 210.28561401]
[165.11407471 201.42735291]
[156.94212341 188.85092163]
[156.94212341 203.85092163]
[156.94212341 218.85092163]
[156.94212341 233.85092163]
[156.94212341 248.85092163]
[156.94212341 263.85092163]
[156.94212341 278.85092163]
[156.94212341 293.85092163]
[156.94212341 308.85092163]
[156.94212341 323.85092163]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 125]
[12 124]
[13 123]
[14 122]
[19 84]
[20 83]
[21 82]
[22 67]
[23 66]
[24 65]
[25 64]
[26 63]
[27 62]
[30 59]
[31 58]
[32 54]
[33 52]
[34 51]
[35 50]
[37 48]
[38 47]
[39 46]
[40 45]
[86 103]
[87 102]
[88 101]
[89 100]
[90 99]
[91 98]
[104 121]
[105 120]
[106 119]
[107 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
