%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUACACUUAUCAUCUUCACAAUUCUAAUUCUACUGACUAUCCUAGAAAUCGCUGUCGCCUxxxxxxxxxxUAUGACUAGCUUACACAAUAGCUUUUAUAGUAAAGAUACCUCUUUACGGACUCCACUUAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[94.72306061 396.14544678]
[94.72306061 381.14544678]
[94.72306061 366.14544678]
[94.72306061 351.14544678]
[94.72306061 336.14544678]
[94.72306061 321.14544678]
[94.72306061 306.14544678]
[94.72306061 291.14544678]
[94.72306061 276.14544678]
[94.72306061 261.14544678]
[79.74698639 256.89794922]
[66.55501556 248.60656738]
[56.21400833 236.93220520]
[49.56295776 222.80978394]
[47.14493561 207.37330627]
[49.16273880 191.86480713]
[55.46192169 177.53446960]
[65.54257965 165.53977966]
[78.59900665 156.85206604]
[93.58410645 152.17787170]
[93.27204895 137.18112183]
[79.76540375 131.91021729]
[69.23806000 121.94091797]
[63.24004745 108.74108124]
[62.65449524 94.25422668]
[67.56761932 80.61337280]
[56.47630310 70.51471710]
[45.38499069 60.41606903]
[33.37680817 69.47364807]
[19.91227722 76.16862488]
[5.45061016 80.27428436]
[-9.51527405 81.65222931]
[-24.47554970 80.25697327]
[-38.92084885 76.13750458]
[-52.35961533 69.43553162]
[-64.33481598 60.38059998]
[-74.43950653 49.28227615]
[-82.33061981 36.51951981]
[-87.74066925 22.52775383]
[-90.48676300 7.78402901]
[-90.47682190 -7.20926094]
[-87.71265411 -21.94149208]
[-82.28983307 -35.91120148]
[-74.39441681 -48.64315033]
[-85.48573303 -58.74180222]
[-96.57704163 -68.84045410]
[-107.66835785 -78.93910217]
[-121.08011627 -71.87506866]
[-136.09950256 -69.82721710]
[-150.91287231 -73.04283142]
[-163.73141479 -81.13361359]
[-173.00723267 -93.12255859]
[-177.62023926 -107.56195068]
[-177.01338196 -122.70816040]
[-171.25994873 -136.73219299]
[-161.05468750 -147.94061279]
[-147.62992859 -154.97991943]
[-132.60679626 -157.00007629]
[-117.79938507 -153.75717163]
[-104.99577332 -145.64277649]
[-95.74205780 -133.63676453]
[-91.15567017 -119.18889618]
[-91.79043579 -104.04383087]
[-97.56970978 -90.03041840]
[-86.47839355 -79.93176270]
[-75.38707733 -69.83311462]
[-64.29576111 -59.73446655]
[-52.35769272 -68.78557587]
[-38.95612717 -75.49063110]
[-24.54682732 -79.61997223]
[-9.62013054 -81.03153992]
[5.31574821 -79.67581940]
[19.75200462 -75.59751129]
[33.19658661 -68.93410492]
[45.19095993 -59.91122055]
[55.32575607 -48.83498001]
[63.25473022 -36.08161545]
[68.70660400 -22.08469582]
[71.49433899 -7.32037687]
[71.52154541 7.70878410]
[68.78583527 22.49094391]
[63.37894440 36.52239990]
[55.48363876 49.32475281]
[66.57495117 59.42340469]
[77.66626740 69.52205658]
[91.90673065 59.87919235]
[110.23159790 57.13108444]
[129.23326111 62.92082977]
[140.32458496 52.82217789]
[151.41589355 42.72352982]
[162.50721741 32.62488174]
[160.66586304 17.21744537]
[168.26181030 3.68669820]
[182.37426758 -2.76451325]
[197.57670593 0.34443364]
[208.02346802 11.81808567]
[209.69757080 27.24458885]
[201.95529175 40.69213867]
[187.77368164 46.98987579]
[172.60586548 43.71619415]
[161.51454163 53.81484604]
[150.42323303 63.91349411]
[139.33190918 74.01214600]
[141.26049805 81.25994110]
[155.75608826 77.40278625]
[170.25175476 73.54584503]
[174.10845947 88.04156494]
[159.61325073 91.89837646]
[145.11766052 95.75553894]
[147.04623413 103.00333405]
[161.68974304 106.25416565]
[176.33323669 109.50498962]
[190.97674561 112.75581360]
[205.62023926 116.00663757]
[220.26374817 119.25746918]
[234.90724182 122.50829315]
[250.37773132 117.06808472]
[262.64645386 127.94973755]
[259.09240723 143.95913696]
[243.37168884 148.62718201]
[231.65641785 137.15179443]
[217.01290894 133.90097046]
[202.36941528 130.65014648]
[187.72590637 127.39931488]
[173.08241272 124.14849091]
[158.43890381 120.89766693]
[143.79541016 117.64683533]
[127.51590729 132.39147949]
[108.26880646 136.86906433]
[108.58086395 151.86581421]
[122.61834717 155.44499207]
[135.23446655 162.54026794]
[145.56692505 172.65945435]
[152.91139221 185.10392761]
[156.76951599 199.01687622]
[156.88275146 213.44223022]
[153.24964905 227.39048767]
[146.12548828 239.90646362]
[136.00447083 250.13476562]
[123.58531189 257.37823486]
[109.72306061 261.14544678]
[109.72306061 276.14544678]
[109.72306061 291.14544678]
[109.72306061 306.14544678]
[109.72306061 321.14544678]
[109.72306061 336.14544678]
[109.72306061 351.14544678]
[109.72306061 366.14544678]
[109.72306061 381.14544678]
[109.72306061 396.14544678]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[20 130]
[21 129]
[26 85]
[27 84]
[28 83]
[44 67]
[45 66]
[46 65]
[47 64]
[88 103]
[89 102]
[90 101]
[91 100]
[110 127]
[111 126]
[112 125]
[113 124]
[114 123]
[115 122]
[116 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
