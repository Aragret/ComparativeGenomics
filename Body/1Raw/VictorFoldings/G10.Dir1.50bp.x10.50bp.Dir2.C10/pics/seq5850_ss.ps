%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCACACUCAUCGCCCUUACCACGCUACUCCUACCUAUCUCCCCUUUUAUACUAAUAAUCxxxxxxxxxxUUGGGACAGACCUAGUUCAAUGAAUCUGAGGAGGCUACUCAGUAGACAGUCCCACCCUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[120.93356323 377.01788330]
[120.93356323 362.01788330]
[120.93356323 347.01788330]
[120.93356323 332.01788330]
[120.93356323 317.01788330]
[120.93356323 302.01788330]
[120.93356323 287.01788330]
[120.93356323 272.01788330]
[120.93356323 257.01788330]
[120.93356323 242.01788330]
[103.46242523 234.72850037]
[90.83660126 220.55801392]
[85.57624817 202.27178955]
[88.75865173 183.46279907]
[99.79788208 167.84571838]
[116.55216980 158.52322388]
[114.99459076 143.60430908]
[113.43701172 128.68539429]
[106.96797943 124.89044189]
[93.92605591 132.30044556]
[94.02993011 117.30052948]
[87.56089783 113.50557709]
[73.77851868 119.42553711]
[71.33846283 134.65872192]
[61.03306580 146.13923645]
[46.15074158 150.20370483]
[31.44038200 145.55517578]
[21.59601212 133.67695618]
[19.75893402 118.35936737]
[26.51535225 104.49018097]
[39.70932007 96.49500275]
[55.13068771 96.92507935]
[67.85855103 105.64315796]
[81.64093781 99.72319794]
[91.02809906 88.02357483]
[93.82041931 73.28576660]
[96.61274719 58.54796219]
[99.40506744 43.81015396]
[102.19739532 29.07234955]
[104.06501007 14.18906879]
[105.00063324 -0.78172266]
[105.93626404 -15.75251389]
[103.33602905 -24.57808113]
[107.05027771 -31.02400970]
[108.29715729 -45.97209549]
[109.54402924 -60.92018127]
[103.25869751 -63.85274124]
[98.02159119 -69.09869385]
[94.68560028 -76.24951935]
[93.93482971 -84.58552551]
[89.32926941 -98.86098480]
[84.72370148 -113.13644409]
[80.11814117 -127.41190338]
[65.15592957 -125.76349640]
[50.16821289 -127.16105652]
[35.76871872 -131.54733276]
[22.54710197 -138.74273682]
[11.04477787 -148.45259094]
[1.73275888 -160.27931213]
[-5.00763273 -173.73858643]
[-8.90038204 -188.27926636]
[-9.78608322 -203.30592346]
[-7.62846851 -218.20321655]
[-2.51588988 -232.36112976]
[5.34229565 -245.19989014]
[15.62430000 -256.19375610]
[27.90908241 -264.89254761]
[41.69358826 -270.94006348]
[56.41334915 -274.08862305]
[71.46559906 -274.20935059]
[86.23396301 -271.29724121]
[100.11368561 -265.47158813]
[112.53639221 -256.97094727]
[122.99339294 -246.14337158]
[131.05647278 -233.43229675]
[136.39544678 -219.35820007]
[138.79170227 -204.49740601]
[138.14710999 -189.45848083]
[134.48806763 -174.85723877]
[127.96439362 -161.29159546]
[118.84323883 -149.31706238]
[107.49812317 -139.42398071]
[94.39360046 -132.01747131]
[98.99916840 -117.74200439]
[103.60472870 -103.46654510]
[108.21029663 -89.19108582]
[122.53289032 -84.73426819]
[134.42527771 -93.87600708]
[146.31765747 -103.01773834]
[158.21003723 -112.15946960]
[144.01843262 -117.01731873]
[138.76788330 -131.06835938]
[146.29608154 -144.04241943]
[161.10055542 -146.45649719]
[172.36041260 -136.54611206]
[171.84591675 -121.55554199]
[184.62327576 -129.41296387]
[197.40061951 -137.27038574]
[207.72552490 -150.71778870]
[223.50563049 -144.51899719]
[221.91744995 -127.63960266]
[205.25805664 -124.49303436]
[192.48069763 -116.63561249]
[179.70333862 -108.77818298]
[167.35176086 -100.26708984]
[155.45938110 -91.12535858]
[143.56700134 -81.98362732]
[131.67462158 -72.84188843]
[124.49211884 -59.67330933]
[123.24523926 -44.72521973]
[121.99836731 -29.77713394]
[120.90705872 -14.81688595]
[119.97142792 0.15390578]
[119.03579712 15.12469769]
[131.22560120 6.38349342]
[146.05613708 8.63188553]
[155.10729980 20.59333801]
[153.24026489 35.47669220]
[141.51504517 44.83185959]
[126.58868408 43.34740829]
[116.93520355 31.86467361]
[114.14287567 46.60247803]
[111.35055542 61.34028625]
[108.55822754 76.07809448]
[105.76589966 90.81589508]
[118.55306244 91.73632050]
[129.33639526 105.09982300]
[128.35592651 127.12781525]
[129.91349792 142.04672241]
[131.47108459 156.96563721]
[142.56547546 159.29638672]
[152.65788269 164.42544556]
[161.05728149 171.99247742]
[167.19096375 181.47059631]
[170.64355469 192.20297241]
[171.18511963 203.44836426]
[168.78652954 214.43229675]
[163.62080383 224.40046692]
[156.05076599 232.67045593]
[146.60345459 238.67849731]
[135.93356323 242.01788330]
[135.93356323 257.01788330]
[135.93356323 272.01788330]
[135.93356323 287.01788330]
[135.93356323 302.01788330]
[135.93356323 317.01788330]
[135.93356323 332.01788330]
[135.93356323 347.01788330]
[135.93356323 362.01788330]
[135.93356323 377.01788330]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[16 130]
[17 129]
[18 128]
[22 34]
[23 33]
[35 125]
[36 124]
[37 123]
[38 122]
[39 121]
[40 114]
[41 113]
[42 112]
[44 111]
[45 110]
[46 109]
[50 86]
[51 85]
[52 84]
[53 83]
[87 108]
[88 107]
[89 106]
[90 105]
[96 104]
[97 103]
[98 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
