%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGAUCACCCCCUCCCCAAUAAAGCUAAAACUCACCUGAGUUGUAAAAAACUCCAGUUGACAxxxxxxxxxxCCAUUUACCGUACAUAGCACAUUACAGUCAAAUCCCUUCUCGUCCCCAUGGAUGACCCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[197.25096130 453.80017090]
[189.52687073 466.65856934]
[181.80279541 479.51696777]
[174.07870483 492.37536621]
[166.35461426 505.23376465]
[158.63053894 518.09216309]
[150.90644836 530.95056152]
[143.18235779 543.80895996]
[135.45828247 556.66735840]
[127.73419189 569.52575684]
[130.20640564 585.37719727]
[119.24898529 597.09533691]
[103.26751709 595.69097900]
[94.52161407 582.24151611]
[99.72039032 567.06414795]
[114.87579346 561.80169678]
[122.59987640 548.94329834]
[130.32395935 536.08489990]
[138.04804993 523.22650146]
[145.77212524 510.36807251]
[153.49621582 497.50967407]
[161.22030640 484.65127563]
[168.94438171 471.79287720]
[176.66847229 458.93447876]
[184.39256287 446.07608032]
[165.14781189 432.05834961]
[147.54394531 416.02697754]
[131.79064941 398.17260742]
[118.07554626 378.70758057]
[106.56208038 357.86352539]
[97.38745880 335.88839722]
[90.66106415 313.04370117]
[86.46317291 289.60131836]
[84.84393311 265.84017944]
[85.82283783 242.04312134]
[89.38842773 218.49339294]
[95.49847412 195.47134399]
[104.08043671 173.25103760]
[115.03237152 152.09704590]
[128.22409058 132.26121521]
[116.52446747 122.87405396]
[104.82484436 113.48689270]
[91.03591919 111.17231750]
[85.78799438 98.21273041]
[74.08837128 88.82556915]
[62.38874817 79.43840790]
[50.59210968 70.17345428]
[38.69972992 61.03172302]
[26.80734825 51.88998795]
[14.91496944 42.74825287]
[-0.72142464 45.04580307]
[-13.35259914 35.54690933]
[-15.48470211 19.88709831]
[-5.85279465 7.35705853]
[9.82868290 5.39063978]
[22.25618935 15.15448380]
[24.05670357 30.85587502]
[35.94908142 39.99760818]
[47.84146118 49.13934326]
[59.73384094 58.28107834]
[67.00069427 59.87435913]
[71.77590942 67.73878479]
[83.47553253 77.12594604]
[95.17515564 86.51310730]
[108.96408081 88.82768250]
[114.21200562 101.78726959]
[125.91162872 111.17443085]
[137.61125183 120.56159210]
[145.49084473 111.88840485]
[153.82432556 103.65047455]
[162.58766174 95.87152100]
[171.75563049 88.57392883]
[181.30181885 81.77872467]
[191.19873047 75.50546265]
[201.41784668 69.77220917]
[211.92974854 64.59545135]
[222.70413208 59.99010849]
[233.71000671 55.96942902]
[244.91563416 52.54497910]
[256.28875732 49.72661972]
[267.79660034 47.52245331]
[279.40603638 45.93882370]
[291.08364868 44.98028183]
[302.79577637 44.64957809]
[314.50869751 44.94765854]
[326.18869019 45.87365341]
[337.80209351 47.42488480]
[349.31546021 49.59688568]
[360.69567871 52.38338089]
[371.90994263 55.77634430]
[382.92593384 59.76599121]
[393.71197510 64.34082794]
[404.23699951 69.48766327]
[414.47067261 75.19168091]
[424.38354492 81.43643188]
[433.94708252 88.20392609]
[443.13372803 95.47467041]
[451.91705322 103.22772217]
[460.27172852 111.44073486]
[468.17373657 120.09005737]
[475.60031128 129.15077209]
[482.53005981 138.59678650]
[488.94305420 148.40086365]
[494.82080078 158.53480530]
[500.14642334 168.96939087]
[504.90457153 179.67457581]
[509.08154297 190.61950684]
[512.66534424 201.77268982]
[515.64562988 213.10198975]
[518.01379395 224.57478333]
[519.76312256 236.15800476]
[520.88848877 247.81831360]
[521.38671875 259.52212524]
[521.25640869 271.23571777]
[520.49786377 282.92538452]
[519.11334229 294.55743408]
[517.10675049 306.09838867]
[514.48400879 317.51498413]
[511.25259399 328.77435303]
[507.42184448 339.84411621]
[503.00277710 350.69232178]
[498.00814819 361.28778076]
[492.45236206 371.59997559]
[486.35140991 381.59918213]
[479.72283936 391.25665283]
[472.58581543 400.54455566]
[464.96084595 409.43612671]
[456.86993408 417.90582275]
[448.33636475 425.92919922]
[439.38470459 433.48315430]
[430.04077148 440.54598999]
[420.33148193 447.09735107]
[410.28479004 453.11834717]
[399.92959595 458.59170532]
[389.29580688 463.50161743]
[378.41400146 467.83395386]
[367.31552124 471.57626343]
[356.03234863 474.71777344]
[344.59698486 477.24945068]
[333.04232788 479.16403198]
[321.40170288 480.45596313]
[309.70861816 481.12155151]
[297.99673462 481.15890503]
[286.29980469 480.56790161]
[274.65148926 479.35028076]
[263.08535767 477.50952148]
[251.63471985 475.05096436]
[240.33253479 471.98168945]
[229.21134949 468.31054688]
[218.30320740 464.04809570]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 25]
[2 24]
[3 23]
[4 22]
[5 21]
[6 20]
[7 19]
[8 18]
[9 17]
[10 16]
[40 68]
[41 67]
[42 66]
[44 64]
[45 63]
[46 62]
[47 60]
[48 59]
[49 58]
[50 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
