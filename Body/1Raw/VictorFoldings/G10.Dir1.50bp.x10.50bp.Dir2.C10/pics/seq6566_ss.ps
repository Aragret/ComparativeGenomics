%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUAACCAUCUUCUCCUUACACCUAGCAGGUGUCUCCUCUAUCUUAGGGGCCAUCAAUUUxxxxxxxxxxCUCCCAUCCCUACGCAUCCUUUACAUAACAGACGAGGUCAACGAUCCCUCCCUUACCAUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.35613251 476.91275024]
[92.35613251 461.91275024]
[92.35613251 446.91275024]
[92.35613251 431.91275024]
[92.35613251 416.91275024]
[92.35613251 401.91275024]
[92.35613251 386.91275024]
[92.35613251 371.91275024]
[92.35613251 356.91275024]
[92.35613251 341.91275024]
[76.53385925 338.74768066]
[61.69042587 332.40695190]
[48.45604324 323.15747070]
[37.39307785 311.38958740]
[28.97216225 297.60079956]
[23.55218506 282.37460327]
[21.36498260 266.35589600]
[22.50543022 250.22355652]
[26.92732430 234.66171265]
[34.44525528 220.33081055]
[44.74237823 207.83944702]
[57.38376236 197.71864319]
[71.83476257 190.39918518]
[87.48365021 186.19335938]
[86.54801941 171.22256470]
[78.03192139 159.00268555]
[84.89336395 144.74678040]
[83.95774078 129.77598572]
[72.65872955 119.91026306]
[57.69848251 121.00157166]
[42.73823547 122.09288025]
[27.77798653 123.18418884]
[12.81773758 124.27550507]
[-2.14251065 125.36681366]
[-17.49977303 132.54948425]
[-28.65306091 119.78076172]
[-19.47087479 105.52861023]
[-3.23382115 110.40656281]
[11.72642708 109.31525421]
[26.68667603 108.22394562]
[41.64692307 107.13262939]
[56.60717392 106.04132080]
[71.56742096 104.95001221]
[75.17201996 90.13356018]
[85.28746033 80.31832886]
[97.95527649 77.66418457]
[101.66143799 63.12924957]
[105.36759949 48.59431458]
[109.07376099 34.05937958]
[103.16118622 22.54871941]
[106.59259033 10.48868465]
[116.99140930 4.22994995]
[120.99915314 -10.22473907]
[125.00688934 -24.67942619]
[126.40919495 -39.61373520]
[125.16232300 -54.56182098]
[123.91544342 -69.50991058]
[122.66857147 -84.45799255]
[121.42169952 -99.40608215]
[106.48442841 -101.29594421]
[92.26662445 -106.25051880]
[79.38983154 -114.05320740]
[68.41696930 -124.36290741]
[59.82772446 -136.72892761]
[53.99757767 -150.61068726]
[51.18140030 -165.40132141]
[51.50230789 -180.45425415]
[54.94626236 -195.11143494]
[61.36271667 -208.73210144]
[70.47116852 -220.72084045]
[81.87343597 -230.55354309]
[95.07105255 -237.80036926]
[109.48709106 -242.14451599]
[124.49133301 -243.39607239]
[139.42785645 -241.50033569]
[153.64370728 -236.54016113]
[166.51744080 -228.73240662]
[177.48623657 -218.41839600]
[186.07061768 -206.04899597]
[191.89530945 -192.16494751]
[194.70565796 -177.37319946]
[194.37882996 -162.32040405]
[190.92910767 -147.66458130]
[184.50729370 -134.04643250]
[175.39413452 -122.06127930]
[163.98800659 -112.23306274]
[150.78752136 -104.99143219]
[136.36978149 -100.65295410]
[137.61665344 -85.70487213]
[138.86354065 -70.75678253]
[140.11041260 -55.80869675]
[141.35728455 -40.86061096]
[148.23249817 -54.19220352]
[159.00045776 -64.63495636]
[172.53656006 -71.09822845]
[187.42710876 -72.90700531]
[202.11692810 -69.87237549]
[215.07183838 -62.31127930]
[224.93884277 -51.01338577]
[230.68740845 -37.15864182]
[231.71719360 -22.19403267]
[227.92062378 -7.68244886]
[219.69421387 4.86052608]
[207.89712524 14.12491226]
[193.76145935 19.14314270]
[178.76350403 19.39111710]
[164.46965027 14.84293461]
[152.37275696 5.97360802]
[143.73619080 -6.29055738]
[139.46157837 -20.67168617]
[135.45384216 -6.21699858]
[131.44610596 8.23768997]
[136.77076721 24.93043900]
[123.60869598 37.76554108]
[119.90254211 52.30047607]
[116.19638062 66.83541107]
[112.49021912 81.37034607]
[124.40352631 97.11989594]
[119.63491058 118.11754608]
[98.92852783 128.84034729]
[99.86415863 143.81114197]
[108.44718170 157.10183716]
[101.51881409 170.28694153]
[102.45444489 185.25772095]
[116.27733612 186.96844482]
[129.57859802 191.08813477]
[141.94194031 197.48649597]
[152.98071289 205.96192932]
[162.34994507 216.24790955]
[169.75709534 228.02136230]
[174.97128296 240.91278076]
[177.83038330 254.51785278]
[178.24610901 268.41015625]
[176.20678711 282.15447998]
[171.77757263 295.32049561]
[165.09844971 307.49618530]
[156.37980652 318.30081177]
[145.89576721 327.39675903]
[133.97558594 334.50006104]
[120.99333191 339.38934326]
[107.35613251 341.91275024]
[107.35613251 356.91275024]
[107.35613251 371.91275024]
[107.35613251 386.91275024]
[107.35613251 401.91275024]
[107.35613251 416.91275024]
[107.35613251 431.91275024]
[107.35613251 446.91275024]
[107.35613251 461.91275024]
[107.35613251 476.91275024]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[24 124]
[25 123]
[27 121]
[28 120]
[29 43]
[30 42]
[31 41]
[32 40]
[33 39]
[34 38]
[46 117]
[47 116]
[48 115]
[49 114]
[52 112]
[53 111]
[54 110]
[55 92]
[56 91]
[57 90]
[58 89]
[59 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
