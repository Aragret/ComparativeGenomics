%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAGCUUCACCGGCGCAGUCAUUCUCAUAAUCGCCCACGGGCUUACAUCCUCAUUACUAUUxxxxxxxxxxCACUCCAACUCAUGAGACCCACAACAAAUAGCCCUUCUAAACGCUAAUCCAAGCCUCACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[87.38385773 266.41290283]
[87.38385773 251.41291809]
[87.38385773 236.41291809]
[87.38385773 221.41291809]
[87.38385773 206.41291809]
[87.38385773 191.41291809]
[87.38385773 176.41291809]
[87.38385773 161.41291809]
[87.38385773 146.41291809]
[87.38385773 131.41291809]
[75.58721924 122.14796448]
[61.01451492 125.70272064]
[46.44181061 129.25749207]
[31.86911011 132.81224060]
[28.74461365 136.03700256]
[25.11186981 137.87390137]
[21.48309135 138.33634949]
[18.31100464 137.60708618]
[15.93748951 136.00277710]
[1.11973155 138.33389282]
[-13.69802666 140.66499329]
[-28.43583298 143.45732117]
[-43.07933426 146.70814514]
[-57.72283554 149.95896912]
[-46.91991043 160.36553955]
[-48.10815430 175.31840515]
[-60.41905594 183.88822937]
[-74.85433960 179.81114197]
[-80.86298370 166.06719971]
[-74.05368042 152.70248413]
[-88.95558167 154.41517639]
[-103.85748291 156.12786865]
[-114.91820526 167.74853516]
[-130.88661194 166.20280457]
[-139.51312256 152.67643738]
[-134.18020630 137.54568481]
[-118.97882080 132.41758728]
[-105.57017517 141.22596741]
[-90.66827393 139.51327515]
[-75.76636505 137.80058289]
[-60.97365952 135.31546021]
[-46.33015823 132.06463623]
[-31.68665886 128.81381226]
[-29.47900963 125.98648834]
[-25.76309776 124.11735535]
[-21.01840210 123.91675568]
[-16.02913094 125.84723663]
[-1.21137226 123.51612854]
[13.60638618 121.18502808]
[28.31434822 118.23954773]
[42.88705063 114.68478394]
[57.45975113 111.13002014]
[72.03245544 107.57525635]
[72.25492096 98.98683167]
[74.94618988 91.20756531]
[79.65253448 84.89696503]
[85.76040649 80.52148438]
[92.56874084 78.32169342]
[99.36563873 78.30435944]
[100.61251831 63.35626984]
[101.85939026 48.40818405]
[103.10626221 33.46009827]
[104.35314178 18.51201057]
[89.93539429 14.17353725]
[76.73492432 6.93190718]
[65.32878876 -2.89630818]
[56.21562195 -14.88146114]
[49.79381180 -28.49961090]
[46.34408951 -43.15543365]
[46.01726151 -58.20823669]
[48.82762146 -72.99997711]
[54.65230560 -86.88402557]
[63.23668671 -99.25342560]
[74.20549011 -109.56744385]
[87.07920837 -117.37519836]
[101.29505920 -122.33536530]
[116.23159027 -124.23110199]
[131.23583984 -122.97954559]
[145.65187073 -118.63539886]
[158.84948730 -111.38857269]
[170.25175476 -101.55587006]
[179.36021423 -89.56713867]
[185.77665710 -75.94645691]
[189.22061157 -61.28928375]
[189.54151917 -46.23635101]
[186.72534180 -31.44571877]
[180.89520264 -17.56396484]
[172.30595398 -5.19794226]
[161.33308411 5.11176157]
[148.45629883 12.91444874]
[134.23849487 17.86902046]
[119.30122375 19.75888443]
[118.05435181 34.70697021]
[116.80747986 49.65505981]
[115.56060028 64.60314941]
[114.31372833 79.55123138]
[122.57445526 67.03083801]
[124.26025391 52.12586594]
[132.57252502 39.63962555]
[145.67294312 32.33353806]
[160.66426086 31.82339668]
[174.23104858 38.22202682]
[183.37289429 50.11431885]
[186.06802368 64.87020874]
[181.72038269 79.22631836]
[171.29148865 90.00769806]
[157.08775330 94.82996368]
[142.24989319 92.62639618]
[128.02632141 97.38980103]
[142.79238892 100.02866364]
[157.55844116 102.66753387]
[172.32449341 105.30639648]
[182.16268921 93.51210022]
[196.58549500 88.23210144]
[211.71324158 90.88669586]
[223.47663879 100.76181793]
[228.71141052 115.20109558]
[226.00939941 130.32044983]
[216.09745789 142.05284119]
[201.64184570 147.24230957]
[186.53103638 144.49293518]
[174.82977295 134.54426575]
[169.68563843 120.07244873]
[154.91957092 117.43358612]
[140.15351868 114.79472351]
[125.38746643 112.15586090]
[119.63656616 116.97012329]
[131.32984924 126.36516571]
[143.02314758 135.76020813]
[154.71644592 145.15525818]
[168.32272339 151.46946716]
[175.06590271 164.86831665]
[172.03012085 179.55790710]
[160.52807617 189.18615723]
[145.53350830 189.58961487]
[133.53034973 180.59384155]
[129.70890808 166.08985901]
[122.51752472 152.92611694]
[115.32614136 139.76239014]
[108.13475800 126.59864807]
[102.38385773 131.41291809]
[102.38385773 146.41291809]
[102.38385773 161.41291809]
[102.38385773 176.41291809]
[102.38385773 191.41291809]
[102.38385773 206.41291809]
[102.38385773 221.41291809]
[102.38385773 236.41291809]
[102.38385773 251.41291809]
[102.38385773 266.41290283]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 53]
[12 52]
[13 51]
[14 50]
[19 49]
[20 48]
[21 47]
[22 43]
[23 42]
[24 41]
[30 40]
[31 39]
[32 38]
[59 96]
[60 95]
[61 94]
[62 93]
[63 92]
[109 126]
[110 125]
[111 124]
[112 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
