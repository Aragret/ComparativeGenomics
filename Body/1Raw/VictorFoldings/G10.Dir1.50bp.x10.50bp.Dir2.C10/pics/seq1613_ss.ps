%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGGCUACAAAGUAAGCGCAAGUACCCACGUAAAGACGUUAGGUCAAGGUGUAGCCCAUGAGxxxxxxxxxxUCCUAGCCUUACUACUAAUAAUUAUUACAUUUUGACUACCACAACUCAACGGCUACAUAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.33662415 236.40003967]
[95.02456665 221.40328979]
[94.71250916 206.40652466]
[94.40045166 191.40977478]
[94.08839417 176.41302490]
[93.77634430 161.41627502]
[93.46428680 146.41950989]
[93.15222931 131.42276001]
[92.84017181 116.42601013]
[82.06936646 105.98619843]
[67.07017517 106.14223480]
[52.07098770 106.29827118]
[37.07180023 106.45430756]
[22.07261086 106.61034393]
[7.07342243 106.76638031]
[-7.92576599 106.92241669]
[-22.92495346 107.07845306]
[-26.91628265 120.36934662]
[-35.20617676 131.78364563]
[-46.98783493 139.95289612]
[-61.02700424 143.83712769]
[-75.79076385 142.85516357]
[-89.61479950 136.96603394]
[-100.89101410 126.69024658]
[-114.54725647 132.89566040]
[-123.63958740 146.54342651]
[-139.98551941 145.22323608]
[-146.76974487 130.29318237]
[-137.01324463 117.11203003]
[-120.75266266 119.23941040]
[-107.09642029 113.03400421]
[-108.96403503 98.15072632]
[-123.73009491 95.51186371]
[-138.49615479 92.87300110]
[-155.62649536 99.54615784]
[-168.62106323 87.79280853]
[-183.43881226 85.46170044]
[-198.25657654 83.13059998]
[-213.07434082 80.79949188]
[-228.17536926 87.19408417]
[-241.09895325 77.09888458]
[-238.55041504 60.89897919]
[-223.15147400 55.25943756]
[-210.74322510 65.98173523]
[-195.92547607 68.31284332]
[-181.10771179 70.64394379]
[-166.28996277 72.97504425]
[-156.28997803 66.09699249]
[-143.89077759 67.96215057]
[-135.85728455 78.10694122]
[-121.09122467 80.74580383]
[-106.32517242 83.38467407]
[-94.94712830 67.61489868]
[-78.32482910 58.19950485]
[-59.63106155 56.60790634]
[-42.30055618 62.84634018]
[-29.39896584 75.50819397]
[-23.08099174 92.07926178]
[-8.08180237 91.92322540]
[6.91738605 91.76718903]
[21.91657448 91.61115265]
[36.91576385 91.45511627]
[51.91495132 91.29907990]
[66.91413879 91.14304352]
[81.91333008 90.98700714]
[94.10170746 81.75524139]
[108.42743683 83.93528748]
[120.31981659 74.79355621]
[132.21220398 65.65181732]
[144.10458374 56.51008224]
[136.34284973 43.65568924]
[130.06918335 30.01306725]
[125.36248016 15.75378990]
[122.28193665 1.05718267]
[120.86629486 -13.89192963]
[121.13335419 -28.90554619]
[123.07976532 -43.79485703]
[126.68103790 -58.37260818]
[131.89187622 -72.45547485]
[138.64677429 -85.86634064]
[146.86076355 -98.43656158]
[156.43054199 -110.00804901]
[167.23577881 -120.43527222]
[179.14056396 -129.58711243]
[191.99517822 -137.34846497]
[205.63800049 -143.62171936]
[219.89741516 -148.32798767]
[234.59411621 -151.40809631]
[249.54327393 -152.82328796]
[264.55688477 -152.55578613]
[279.44613647 -150.60893250]
[294.02377319 -147.00721741]
[308.10647583 -141.79594421]
[321.51715088 -135.04066467]
[334.08712769 -126.82629395]
[345.65832520 -117.25616455]
[356.08523560 -106.45063019]
[365.23669434 -94.54557037]
[372.99768066 -81.69071198]
[379.27050781 -68.04771423]
[383.97637939 -53.78815460]
[387.05603027 -39.09136200]
[388.47076416 -24.14216423]
[388.20281982 -9.12856293]
[386.25552368 5.76062918]
[382.65338135 20.33816528]
[377.44168091 34.42071915]
[370.68600464 47.83118439]
[362.47125244 60.40091324]
[352.90078735 71.97182465]
[342.09494019 82.39840698]
[330.18960571 91.54953003]
[317.33450317 99.31011200]
[303.69131470 105.58255768]
[289.43161011 110.28797913]
[274.73474121 113.36720276]
[259.78549194 114.78150177]
[244.77191162 114.51309204]
[229.88276672 112.56535339]
[215.30534363 108.96276855]
[201.22294617 103.75065613]
[187.81268311 96.99456024]
[175.24319458 88.77944946]
[163.67257690 79.20862579]
[153.24630737 68.40246582]
[141.35392761 77.54419708]
[129.46154785 86.68593597]
[117.56917572 95.82766724]
[130.12371826 87.61891937]
[144.96368408 85.43367004]
[159.35154724 89.67503357]
[170.63319397 99.56060791]
[176.72749329 113.26679230]
[176.51022339 128.26521301]
[170.02145386 141.78912354]
[158.45820618 151.34375000]
[143.95350647 155.16656494]
[129.18305969 152.55238342]
[116.87157440 143.98341370]
[109.29013062 131.04039001]
[107.83692932 116.11395264]
[108.14897919 131.11070251]
[108.46103668 146.10745239]
[108.77309418 161.10421753]
[109.08515167 176.10096741]
[109.39720917 191.09771729]
[109.70926666 206.09446716]
[110.02131653 221.09123230]
[110.33337402 236.08798218]
[112.92437744 255.29570007]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 65]
[11 64]
[12 63]
[13 62]
[14 61]
[15 60]
[16 59]
[17 58]
[24 31]
[25 30]
[32 52]
[33 51]
[34 50]
[36 47]
[37 46]
[38 45]
[39 44]
[67 128]
[68 127]
[69 126]
[70 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
