%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCACUUCCACUAUGUCCUAUCAAUAGGAGCUGUAUUUGCCAUCAUAGGAGGCUUCAUUCAxxxxxxxxxxGCCCUACUCCACUCAAGCACUAUAGUUGUAGCAGGAAUCUUCUUACUCAUCCGCUUCCACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[90.28286743 400.68643188]
[90.28286743 385.68643188]
[90.28286743 370.68643188]
[90.28286743 355.68643188]
[90.28286743 340.68643188]
[90.28286743 325.68643188]
[90.28286743 310.68643188]
[90.28286743 295.68643188]
[90.28286743 280.68643188]
[90.28286743 265.68643188]
[76.28285217 262.18975830]
[63.52436066 255.42796326]
[52.75671005 245.79299927]
[44.61352539 233.84573364]
[39.57544708 220.28326416]
[37.94179535 205.89826965]
[39.81276321 191.53263855]
[45.08329773 178.02827454]
[53.44898224 166.17768860]
[64.42361450 156.67749023]
[77.36747742 150.08750916]
[91.52459717 146.79769897]
[91.83665466 131.80094910]
[92.14871216 116.80419159]
[80.35207367 107.53924561]
[65.85647583 111.39640808]
[51.36087799 115.25356293]
[36.86528015 119.11072540]
[22.36968422 122.96788025]
[11.14191437 134.92066956]
[-4.75939226 130.91062927]
[-8.97633362 115.06292725]
[2.82911706 103.68033600]
[18.51252556 108.47228241]
[33.00812149 104.61512756]
[47.50371933 100.75796509]
[61.99931335 96.90081024]
[76.49491119 93.04364777]
[85.63664246 81.15126801]
[85.63664246 66.15126801]
[85.63664246 51.15126801]
[85.63664246 36.15126801]
[85.01266479 21.16425323]
[83.76579285 6.21616554]
[82.51892090 -8.73192120]
[71.66519165 -23.57026863]
[79.68183899 -39.15016937]
[78.12425995 -54.06908035]
[76.56668091 -68.98799133]
[62.76971817 -72.65470123]
[51.08367157 -80.80231476]
[42.90654373 -92.43116760]
[39.20802689 -106.12667084]
[40.41452026 -120.23134613]
[46.36008072 -133.04545593]
[56.30891418 -143.03181458]
[69.04635620 -149.00018311]
[67.79948425 -163.94827271]
[66.55260468 -178.89636230]
[65.30573273 -193.84445190]
[50.38987732 -195.95750427]
[36.31837845 -201.33715820]
[23.79705620 -209.71356201]
[13.45397568 -220.66658020]
[5.80794096 -233.64678955]
[1.24247408 -248.00311279]
[-0.01342329 -263.01547241]
[2.10324430 -277.93081665]
[7.48630571 -292.00100708]
[15.86574936 -304.52029419]
[26.82126427 -314.86071777]
[39.80332947 -322.50360107]
[54.16076660 -327.06558228]
[69.17341614 -328.31784058]
[84.08824158 -326.19757080]
[98.15713501 -320.81109619]
[110.67439270 -312.42861938]
[121.01216888 -301.47061157]
[128.65191650 -288.48669434]
[133.21041870 -274.12814331]
[134.45904541 -259.11520386]
[132.33514404 -244.20088196]
[126.94526672 -230.13330078]
[118.55976105 -217.61807251]
[107.59923553 -207.28294373]
[94.61346436 -199.64634705]
[80.25382233 -195.09132385]
[81.50069427 -180.14323425]
[82.74756622 -165.19514465]
[83.99444580 -150.24705505]
[99.13466644 -145.66902161]
[111.39701080 -135.61727905]
[118.89295959 -121.60177612]
[120.45352936 -105.74580383]
[115.81143951 -90.46427917]
[105.64636993 -78.09597778]
[91.48558807 -70.54557037]
[93.04317474 -55.62666321]
[94.60075378 -40.70774841]
[103.81895447 -32.81268692]
[105.20490265 -20.35081863]
[97.46700287 -9.97879601]
[98.71388245 4.96929073]
[99.96075439 19.91737747]
[102.08183289 21.84308815]
[103.54206848 24.75198746]
[103.95275116 28.38698578]
[103.02907562 32.35156631]
[100.63664246 36.15126801]
[100.63664246 51.15126801]
[100.63664246 66.15126801]
[100.63664246 81.15126801]
[123.38333893 93.81168365]
[137.79556274 97.96957397]
[153.19967651 94.36076355]
[163.28350830 105.32277679]
[177.69572449 109.48066711]
[192.37840271 103.01548767]
[206.52011108 110.59120178]
[209.27255249 126.39637756]
[198.52427673 138.30664062]
[182.52044678 137.18544006]
[173.53784180 123.89288330]
[159.12562561 119.73499298]
[144.75234985 123.64120483]
[133.63766479 112.38179016]
[119.22545624 108.22389984]
[107.14546204 117.11624908]
[106.83340454 132.11300659]
[106.52135468 147.10975647]
[121.53932953 151.41374207]
[134.92961121 159.43975830]
[145.78910828 170.63981628]
[153.38714600 184.25205994]
[157.21458435 199.35264587]
[157.01800537 214.91838074]
[152.81645203 229.89608765]
[144.89974976 243.27386475]
[133.80848694 254.14941406]
[120.29717255 261.79095459]
[105.28286743 265.68643188]
[105.28286743 280.68643188]
[105.28286743 295.68643188]
[105.28286743 310.68643188]
[105.28286743 325.68643188]
[105.28286743 340.68643188]
[105.28286743 355.68643188]
[105.28286743 370.68643188]
[105.28286743 385.68643188]
[105.28286743 400.68643188]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[22 130]
[23 129]
[24 128]
[25 38]
[26 37]
[27 36]
[28 35]
[29 34]
[39 112]
[40 111]
[41 110]
[42 109]
[43 104]
[44 103]
[45 102]
[47 99]
[48 98]
[49 97]
[57 90]
[58 89]
[59 88]
[60 87]
[113 127]
[114 126]
[116 124]
[117 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
