%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAACCCCAGGGUUGGUCAAUUUCGUGCCAGCCACCGCGGUCACACGAUUAACCCAAGUCxxxxxxxxxxCGAAUUUGCAAUUCAAUAUGAAAAUCACCUCGGAGCUGGUAAAAAGAGGCCUAACCCCUGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[111.49019623 253.89685059]
[111.49019623 238.89685059]
[111.49019623 223.89685059]
[111.49019623 208.89685059]
[111.49019623 193.89685059]
[111.49019623 178.89685059]
[111.49019623 163.89685059]
[111.49019623 148.89685059]
[111.49019623 133.89685059]
[111.49019623 118.89685822]
[97.58763885 113.26490021]
[87.14782715 124.03570557]
[76.70801544 134.80651855]
[66.26820374 145.57733154]
[55.82839203 156.34812927]
[45.38858032 167.11894226]
[41.91879272 183.14680481]
[26.22283363 187.89749146]
[14.44736195 176.48388672]
[18.70597267 160.64733887]
[34.61777115 156.67912292]
[45.05758286 145.90832520]
[55.49739456 135.13751221]
[65.93721008 124.36670685]
[76.37702179 113.59589386]
[86.81683350 102.82508850]
[92.87984467 89.10503387]
[93.81547546 74.13423920]
[83.63656616 62.34324646]
[84.79869080 47.17406082]
[96.10233307 37.54269409]
[97.03796387 22.57190132]
[97.97358704 7.60110998]
[95.58512878 2.81416440]
[95.34128571 -1.92850590]
[96.85485077 -5.80288458]
[99.46340179 -8.26518250]
[101.33101654 -23.14846230]
[103.19863129 -38.03174210]
[105.06624603 -52.91502380]
[106.93386078 -67.79830170]
[108.80146790 -82.68157959]
[101.50173950 -93.36650848]
[103.40487671 -105.75994110]
[112.94351959 -113.26470184]
[115.12036133 -128.10591125]
[117.29719543 -142.94711304]
[111.64451599 -157.72404480]
[121.14691925 -169.19372559]
[123.32376099 -184.03494263]
[125.50059509 -198.87614441]
[111.92926788 -192.48716736]
[98.37973785 -198.92224121]
[94.75561523 -213.47785950]
[103.70584106 -225.51502991]
[118.68852997 -226.23554993]
[128.75234985 -215.11343384]
[132.45851135 -229.64836121]
[136.16467285 -244.18330383]
[139.87083435 -258.71823120]
[132.10803223 -259.38330078]
[124.13937378 -263.34240723]
[117.21984100 -270.66595459]
[112.60060883 -280.98037720]
[111.38056183 -293.48303223]
[112.00453949 -308.47006226]
[112.62851715 -323.45706177]
[98.44154358 -328.70919800]
[86.57318878 -338.08990479]
[78.18619537 -350.68011475]
[74.10223389 -365.24639893]
[74.72140503 -380.36166382]
[79.98305511 -394.54513550]
[89.37169647 -406.40719604]
[101.96752930 -414.78573608]
[116.53653717 -418.85995483]
[131.65139771 -418.23065186]
[145.83132935 -412.95950317]
[157.68708801 -403.56292725]
[166.05720520 -390.96145630]
[170.12164307 -376.38973999]
[169.48222351 -361.27529907]
[164.20156860 -347.09890747]
[154.79704285 -335.24942017]
[142.18998718 -326.88775635]
[127.61553192 -322.83309937]
[126.99155426 -307.84606934]
[126.36757660 -292.85906982]
[133.06071472 -289.47500610]
[145.61520386 -297.68383789]
[146.44700623 -282.70687866]
[153.14015198 -279.32281494]
[164.83976746 -288.70999146]
[176.53939819 -298.09713745]
[188.23901367 -307.48431396]
[196.80928040 -322.11260986]
[213.23837280 -317.92678833]
[213.76417542 -300.98098755]
[197.62617493 -295.78469849]
[185.92655945 -286.39752197]
[174.22692871 -277.01037598]
[162.52731323 -267.62319946]
[154.40576172 -255.01206970]
[150.69960022 -240.47714233]
[146.99343872 -225.94219971]
[143.28727722 -211.40727234]
[140.34179688 -196.69931030]
[138.16496277 -181.85810852]
[135.98812866 -167.01689148]
[141.79650879 -153.30149841]
[132.13839722 -140.77027893]
[129.96156311 -125.92907715]
[127.78472900 -111.08786774]
[135.14633179 -95.18797302]
[123.68475342 -80.81397247]
[121.81713867 -65.93068695]
[119.94952393 -51.04740906]
[118.08190918 -36.16412735]
[116.21430206 -21.28084946]
[114.34668732 -6.39756918]
[112.94438171 8.53673840]
[112.00875092 23.50753021]
[111.07312775 38.47832108]
[121.08963013 49.44213486]
[120.35403442 64.63797760]
[108.78626251 75.06987000]
[107.85063934 90.04066467]
[108.91538239 75.07849884]
[115.51006317 61.60592651]
[126.67333984 51.58688736]
[140.77792358 46.48189545]
[155.76771545 47.03511810]
[169.45761108 53.16591644]
[179.85198975 63.98057938]
[185.43562317 77.90261078]
[185.39456177 92.90255737]
[179.73480225 106.79381561]
[169.28137207 117.55140686]
[155.55810547 123.60717010]
[140.56550598 124.07832336]
[126.49019623 118.89685822]
[126.49019623 133.89685059]
[126.49019623 148.89685059]
[126.49019623 163.89685059]
[126.49019623 178.89685059]
[126.49019623 193.89685059]
[126.49019623 208.89685059]
[126.49019623 223.89685059]
[126.49019623 238.89685059]
[126.49019623 253.89685059]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 26]
[12 25]
[13 24]
[14 23]
[15 22]
[16 21]
[27 127]
[28 126]
[31 123]
[32 122]
[33 121]
[37 120]
[38 119]
[39 118]
[40 117]
[41 116]
[42 115]
[45 113]
[46 112]
[47 111]
[49 109]
[50 108]
[51 107]
[57 106]
[58 105]
[59 104]
[60 103]
[65 88]
[66 87]
[67 86]
[92 102]
[93 101]
[94 100]
[95 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
