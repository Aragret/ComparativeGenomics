%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAGAAAUAUGUCUGAUAAAAGAGUUACUUUGAUAGAGUAAAUAAUAGGAGCUUAAACCCCxxxxxxxxxxGCUAUCCCCACCGGCGUCAAAGUAUUUAGCUGACUCGCCACACUCCACGGAAGCAAUAUGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[94.04026031 275.25888062]
[94.04026031 260.25888062]
[94.04026031 245.25888062]
[94.04026031 230.25888062]
[94.04026031 215.25888062]
[94.04026031 200.25888062]
[94.04026031 185.25888062]
[94.04026031 170.25888062]
[94.04026031 155.25888062]
[94.04026031 140.25888062]
[85.08436584 136.71969604]
[77.44208527 131.28472900]
[71.48932648 124.36761475]
[67.48285675 116.44947052]
[65.55034637 108.04651642]
[65.68876648 99.67697144]
[67.77097321 91.82932281]
[71.55971527 84.93381500]
[76.72784424 79.33890533]
[82.88327026 75.29390717]
[77.68785095 61.22238541]
[72.49243927 47.15086746]
[60.45422363 36.88480759]
[63.30436325 22.26543808]
[51.26615143 11.99937820]
[54.11629105 -2.61999154]
[48.92087555 -16.69151115]
[43.72546005 -30.76303101]
[38.53004456 -44.83454895]
[29.67495728 -32.72721863]
[14.69841576 -31.88863564]
[4.54706144 -42.93173218]
[6.64071178 -57.78490067]
[19.44907761 -65.59167480]
[33.60981369 -60.64640045]
[29.90365028 -75.18133545]
[26.19748878 -89.71627045]
[22.49132919 -104.25121307]
[18.78516769 -118.78614807]
[15.07900620 -133.32107544]
[11.37284470 -147.85601807]
[7.66668320 -162.39096069]
[-7.40239668 -162.29911804]
[-22.04666519 -165.81446838]
[-35.41588974 -172.72843933]
[-46.73492432 -182.63528442]
[-55.34867477 -194.95587158]
[-60.75999832 -208.97151184]
[-62.65838623 -223.86595154]
[-60.93779755 -238.77285767]
[-55.70256042 -252.82618713]
[-47.26106262 -265.21057129]
[-36.10758209 -275.20855713]
[-22.89335251 -282.24224854]
[-26.59951401 -296.77716064]
[-30.30567551 -311.31210327]
[-34.01183701 -325.84704590]
[-49.08654404 -325.71798706]
[-63.75392914 -329.20095825]
[-77.16125488 -336.09347534]
[-88.52903748 -345.99484253]
[-97.19637299 -358.32937622]
[-102.65933990 -372.38000488]
[-104.60033417 -387.32977295]
[-102.90651703 -402.30957031]
[-97.67636108 -416.44848633]
[-89.21392822 -428.92449951]
[-78.01123047 -439.01226807]
[-64.71957397 -446.12527466]
[-50.11171341 -449.85003662]
[-35.03693008 -449.96997070]
[-20.37165642 -446.47808838]
[-6.96850967 -439.57745361]
[4.39326763 -429.66918945]
[13.05311680 -417.32940674]
[18.50756645 -403.27548218]
[20.43950081 -388.32452393]
[18.73660088 -373.34576416]
[13.49787045 -359.21002197]
[5.02788162 -346.73913574]
[-6.18093014 -336.65817261]
[-19.47690010 -329.55319214]
[-15.77073860 -315.01828003]
[-12.06457710 -300.48333740]
[-8.35841656 -285.94839478]
[6.61038923 -286.10092163]
[21.18947029 -282.66427612]
[34.53037262 -275.83404541]
[45.85562515 -266.00335693]
[54.50406647 -253.74038696]
[59.96942520 -239.75546265]
[61.92996597 -224.85992432]
[60.26741791 -209.91906738]
[55.07410812 -195.80184937]
[46.64783859 -183.33039856]
[35.47482300 -173.23207092]
[22.20162010 -166.09712219]
[25.90778160 -151.56217957]
[29.61394119 -137.02723694]
[33.32010269 -122.49230957]
[37.02626419 -107.95737457]
[40.73242569 -93.42243195]
[44.43858719 -78.88749695]
[48.14474869 -64.35256195]
[52.60156250 -50.02996445]
[57.79697800 -35.95844650]
[62.99239349 -21.88692665]
[68.18781281 -7.81540680]
[79.85441589 1.44416380]
[77.37588501 17.07002258]
[89.04248810 26.32959366]
[86.56395721 41.95545197]
[91.75936890 56.02696991]
[96.95478821 70.09848785]
[126.66224670 76.74812317]
[139.55110168 109.59204102]
[153.45364380 115.22399902]
[165.51585388 105.71617126]
[180.71824646 103.52913666]
[194.97143555 109.25119781]
[204.44140625 121.34314728]
[206.58078003 136.55230713]
[200.81407166 150.78750610]
[188.69250488 160.21952820]
[173.47669983 162.31120300]
[159.25965881 156.49990845]
[149.86567688 144.34883118]
[147.82170105 129.12655640]
[133.91914368 123.49459839]
[127.69941711 127.68566895]
[137.19995117 139.29341125]
[146.70048523 150.90116882]
[160.33589172 157.15223694]
[164.67431641 171.51113892]
[156.78163147 184.26673889]
[141.99577332 186.79225159]
[130.31661987 177.37963867]
[129.64274597 162.39529419]
[122.45136261 149.23155212]
[115.25997925 136.06781006]
[109.04026031 140.25888062]
[109.04026031 155.25888062]
[109.04026031 170.25888062]
[109.04026031 185.25888062]
[109.04026031 200.25888062]
[109.04026031 215.25888062]
[109.04026031 230.25888062]
[109.04026031 245.25888062]
[109.04026031 260.25888062]
[109.04026031 275.25888062]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[20 114]
[21 113]
[22 112]
[24 110]
[26 108]
[27 107]
[28 106]
[29 105]
[35 104]
[36 103]
[37 102]
[38 101]
[39 100]
[40 99]
[41 98]
[42 97]
[54 85]
[55 84]
[56 83]
[57 82]
[116 129]
[117 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
