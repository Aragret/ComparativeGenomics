%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAUAAUUAUUACAUUUUGACUACCACAACUCAACGGCUACAUAGAAAAAUCCACCCCUUAxxxxxxxxxxCUAUCUAUUACUCUCAUCGCUACCUCCCUGACAAGCGCCUAUAGCACUCGAAUAAUUCUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[109.34514618 256.46606445]
[109.34514618 241.46606445]
[109.34514618 226.46606445]
[109.34514618 211.46606445]
[109.34514618 196.46606445]
[109.34514618 181.46606445]
[109.34514618 166.46606445]
[109.34514618 151.46606445]
[109.34514618 136.46606445]
[109.34514618 121.46605682]
[95.38475800 115.97902679]
[85.17127991 126.96469116]
[74.95780182 137.95036316]
[78.88321686 152.86996460]
[74.09761810 167.53630066]
[62.12805939 177.26940918]
[46.79398727 178.96347046]
[32.98845291 172.07792664]
[25.11674690 158.80992126]
[25.69070435 143.39323425]
[34.52717590 130.74728394]
[48.80647659 124.90732574]
[63.97213745 127.73687744]
[74.18561554 116.75121307]
[84.39909363 105.76554871]
[77.49209595 92.45039368]
[62.62905121 94.47272491]
[47.76600266 96.49506378]
[32.90295410 98.51739502]
[27.16126442 112.76269531]
[15.05627823 122.21599579]
[-0.15581828 124.33441162]
[-14.38304996 118.54809570]
[-23.79836273 106.41353607]
[-25.86908340 91.19487762]
[-20.03820038 76.98584747]
[-7.87418985 67.60861969]
[7.35088825 65.58560944]
[21.54156685 71.46100616]
[30.88062096 83.65435028]
[45.74366760 81.63201141]
[60.60671616 79.60968018]
[75.46976471 77.58734894]
[87.73213196 68.94822693]
[94.63912964 55.63307190]
[101.12729645 42.10888290]
[107.19030762 28.38883018]
[113.25331879 14.66877651]
[119.31632996 0.94872278]
[108.20532227 -24.95883560]
[129.21936035 -49.13988113]
[125.51319122 -63.67481613]
[121.80702972 -78.20975494]
[118.10086823 -92.74468994]
[114.39470673 -107.27962494]
[99.35076141 -106.66864777]
[84.50859833 -109.19921875]
[70.51705170 -114.76071930]
[57.98777008 -123.11002350]
[47.46848679 -133.88214111]
[39.41905975 -146.60614014]
[34.19136810 -160.72581482]
[32.01395035 -175.62388611]
[32.98199081 -190.64907837]
[37.05317307 -205.14456177]
[44.04952240 -218.47666931]
[53.66518402 -230.06254578]
[65.47980499 -239.39573669]
[78.97690582 -246.06822205]
[93.56644440 -249.78829956]
[108.61063385 -250.39335632]
[123.45180511 -247.85694885]
[137.44116211 -242.28994751]
[149.96714783 -233.93571472]
[160.48219299 -223.15945435]
[168.52662659 -210.43228149]
[173.74874878 -196.31056213]
[175.92031860 -181.41163635]
[174.94636536 -166.38682556]
[170.86947632 -151.89294434]
[163.86788940 -138.56359863]
[154.24766541 -126.98149109]
[142.42936707 -117.65295410]
[128.92964172 -110.98578644]
[132.63580322 -96.45085144]
[136.34196472 -81.91591644]
[140.04812622 -67.38098145]
[143.75428772 -52.84604263]
[147.47024536 -67.37847900]
[146.82609558 -82.36463928]
[154.95428467 -94.97148895]
[168.87031555 -100.57007599]
[183.46453857 -97.10472107]
[193.37828064 -85.84783173]
[194.97145081 -70.93267822]
[187.65907288 -57.83576584]
[174.12640381 -51.36603546]
[163.04190063 -41.25991440]
[177.61459351 -44.81467438]
[192.18730164 -48.36943817]
[206.76000977 -51.92419815]
[209.88444519 -66.86409760]
[219.18847656 -78.96360016]
[232.82473755 -85.82034302]
[248.08576965 -86.07291412]
[261.94146729 -79.67116547]
[271.64077759 -67.88616943]
[275.25790405 -53.05784607]
[272.07464600 -38.13036728]
[262.72305298 -26.06759834]
[249.05987549 -19.26460648]
[233.79797363 -19.07213402]
[219.96759033 -25.52839661]
[210.31475830 -37.35149765]
[195.74206543 -33.79673386]
[181.16935730 -30.24197388]
[166.59664917 -26.68721199]
[166.24382019 -14.33878517]
[161.36175537 -3.61455750]
[153.11427307 3.98267460]
[143.09567261 7.57739019]
[133.03639221 7.01173592]
[126.97337341 20.73178864]
[120.91036224 34.45184326]
[114.84735107 48.17189789]
[115.81554413 51.62589264]
[115.11793518 55.72650528]
[112.46672058 59.66648483]
[107.95428467 62.54007339]
[101.04728699 75.85522461]
[108.81417847 63.02263641]
[121.18138123 54.53427887]
[135.94834900 51.90052032]
[150.48753357 55.59000015]
[162.21189880 64.94622803]
[169.03530884 78.30442047]
[169.74360657 93.28768921]
[164.21080017 107.22999573]
[153.42132568 117.65052795]
[139.29504395 122.69511414]
[124.34514618 121.46605682]
[124.34514618 136.46606445]
[124.34514618 151.46606445]
[124.34514618 166.46606445]
[124.34514618 181.46606445]
[124.34514618 196.46606445]
[124.34514618 211.46606445]
[124.34514618 226.46606445]
[124.34514618 241.46606445]
[124.34514618 256.46606445]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 25]
[12 24]
[13 23]
[26 43]
[27 42]
[28 41]
[29 40]
[44 130]
[45 129]
[46 125]
[47 124]
[48 123]
[49 122]
[51 88]
[52 87]
[53 86]
[54 85]
[55 84]
[98 117]
[99 116]
[100 115]
[101 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
