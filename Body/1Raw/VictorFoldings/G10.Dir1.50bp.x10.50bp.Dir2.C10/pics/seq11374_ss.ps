%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACUAAAACACUCACCAAGACCUCAACCCCUGACCCCCAUGCCUCAGGAUACUCCUCAAUAxxxxxxxxxxCUCCCUAAUUGAAAACAAAAUACUCAAAUGGGCCUGUCCUUGUAGUAUAAACUAAUACACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[120.54044342 413.30377197]
[120.54044342 398.30377197]
[120.54044342 383.30377197]
[120.54044342 368.30377197]
[120.54044342 353.30377197]
[120.54044342 338.30377197]
[120.54044342 323.30377197]
[120.54044342 308.30377197]
[120.54044342 293.30377197]
[120.54044342 278.30377197]
[118.36360931 263.46255493]
[114.05602264 249.09437561]
[109.74843597 234.72619629]
[105.44084930 220.35801697]
[99.84600067 234.27554321]
[88.12736511 243.63896179]
[73.31829071 246.02458191]
[59.25204849 240.81489563]
[49.56964874 229.35841370]
[46.77735138 214.62059021]
[51.59793472 200.41630554]
[62.78359985 190.42225647]
[77.43898010 187.22540283]
[91.77056885 191.65321350]
[102.06862640 202.55949402]
[100.82175446 187.61140442]
[99.57487488 172.66333008]
[98.32800293 157.71524048]
[96.92569733 142.78092957]
[95.36811829 127.86201477]
[81.42323303 121.27557373]
[73.01685333 108.34601593]
[58.02415466 108.81405640]
[43.03145599 109.28209686]
[31.04304886 119.94313049]
[15.25838661 117.07537842]
[7.78611374 102.87873077]
[14.35831833 88.24365234]
[29.93336678 84.39691162]
[42.56341553 94.28940582]
[57.55611038 93.82135773]
[72.54880524 93.35331726]
[77.24434662 83.26898956]
[85.46961975 75.77987671]
[95.94875336 72.04765320]
[97.81636810 57.16437149]
[99.68398285 42.28109360]
[101.55158997 27.39781189]
[103.41920471 12.51453209]
[89.09870911 7.91458321]
[75.87084961 0.76335669]
[64.18544006 -8.69430923]
[54.43951797 -20.13517570]
[46.96388626 -33.16865158]
[42.01187515 -47.35012817]
[39.75074387 -62.19614792]
[40.25605774 -77.20087433]
[43.50913620 -91.85334778]
[49.39776230 -105.65486145]
[57.72003937 -118.13595581]
[68.19131470 -128.87239075]
[80.45391846 -137.49951172]
[94.08939362 -143.72471619]
[108.63272858 -147.33734131]
[123.58827972 -148.21575928]
[125.45589447 -163.09904480]
[127.32350922 -177.98231506]
[129.19111633 -192.86560059]
[131.05873108 -207.74888611]
[117.35744476 -214.16213989]
[106.30993652 -224.49691772]
[98.99852753 -237.74073792]
[96.13951874 -252.59606934]
[98.01300812 -267.60757446]
[104.43544769 -281.30456543]
[114.77762604 -292.34515381]
[128.02633667 -299.64767456]
[142.88359070 -302.49673462]
[157.89382935 -300.61318970]
[171.58651733 -294.18157959]
[182.62016296 -283.83200073]
[189.91381836 -270.57839966]
[192.75291443 -255.71923828]
[190.85931396 -240.71026611]
[184.41853333 -227.02189636]
[174.06155396 -215.99517822]
[160.80307007 -208.71040344]
[145.94201660 -205.88127136]
[144.07440186 -190.99798584]
[142.20678711 -176.11471558]
[140.33917236 -161.23143005]
[138.47155762 -146.34814453]
[152.74639893 -141.80178833]
[165.94622803 -134.70783997]
[177.62083435 -125.30661774]
[187.37167358 -113.91716003]
[194.86557007 -100.92639160]
[199.84602356 -86.77601624]
[202.14202881 -71.94745636]
[201.67396545 -56.94551468]
[198.45628357 -42.28114700]
[192.59713745 -28.45409203]
[184.29473877 -15.93583202]
[173.83059692 -5.15350819]
[161.56005859 3.52464604]
[147.90017700 9.80188274]
[133.31553650 13.46308613]
[118.30249023 14.38214588]
[116.43487549 29.26542473]
[114.56726074 44.14870453]
[112.69964600 59.03198624]
[110.83203125 73.91526794]
[123.57263184 84.44116974]
[128.24287415 100.29380798]
[123.24385071 116.04586792]
[110.28703308 126.30443573]
[111.84461212 141.22334290]
[115.87108612 149.49615479]
[113.27608490 156.46836853]
[114.52296448 171.41644287]
[115.76983643 186.36453247]
[117.01671600 201.31262207]
[119.80903625 216.05043030]
[124.11662292 230.41860962]
[128.42420959 244.78680420]
[132.73179626 259.15496826]
[137.12078857 244.81146240]
[146.58203125 233.17166138]
[159.72628784 225.94471741]
[174.62350464 224.19180298]
[189.08627319 228.17028809]
[200.99095154 237.29602051]
[208.58950806 250.22898865]
[210.76622009 265.07022095]
[207.20146179 279.64047241]
[198.41867065 291.80035400]
[185.70747375 299.76437378]
[170.93431091 302.36309814]
[156.26838684 299.21496582]
[143.86317444 290.78225708]
[135.54045105 278.30377197]
[135.54045105 293.30377197]
[135.54045105 308.30377197]
[135.54045105 323.30377197]
[135.54045105 338.30377197]
[135.54045105 353.30377197]
[135.54045105 368.30377197]
[135.54045105 383.30377197]
[135.54045105 398.30377197]
[135.54045105 413.30377197]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 126]
[12 125]
[13 124]
[14 123]
[25 122]
[26 121]
[27 120]
[28 119]
[29 117]
[30 116]
[32 42]
[33 41]
[34 40]
[45 112]
[46 111]
[47 110]
[48 109]
[49 108]
[65 92]
[66 91]
[67 90]
[68 89]
[69 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
