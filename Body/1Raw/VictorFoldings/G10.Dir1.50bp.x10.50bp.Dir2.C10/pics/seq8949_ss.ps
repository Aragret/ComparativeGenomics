%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCGAGAAAGCACAUACCAAGGCCACCACACACCACCUGUCCAAAAAGGCCUUCGAUACGGGAUxxxxxxxxxxAAACAUCAGAUUGUGAAUCUGACAACAGAGGCUUACGACCCCUUAUUUACCGAGAAAGCUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[98.57026672 253.62425232]
[98.57026672 238.62425232]
[98.57026672 223.62425232]
[98.57026672 208.62425232]
[98.57026672 193.62425232]
[98.57026672 178.62425232]
[98.57026672 163.62425232]
[98.57026672 148.62425232]
[98.57026672 133.62425232]
[98.57026672 118.62424469]
[87.59420013 108.40044403]
[72.63192749 109.46364594]
[57.66965485 110.52684021]
[70.74425507 117.87904358]
[80.09172058 129.61039734]
[84.33825684 143.99674988]
[82.85973358 158.92370605]
[75.87345886 172.19743347]
[64.40621185 181.86708069]
[50.14334106 186.51150513]
[35.18108368 185.44808960]
[21.71845818 178.83312988]
[11.73407936 167.63883972]
[6.69536495 153.51045227]
[7.34285879 138.52442932]
[13.58139896 124.88329315]
[24.49410057 114.59188843]
[38.47596741 109.16296387]
[23.81437111 105.99474335]
[9.15277576 102.82652283]
[-5.50881958 99.65830231]
[-20.17041588 96.49008179]
[-30.42048454 110.20427704]
[-45.57154083 118.05952454]
[-62.57625198 118.52994537]
[-78.03792572 111.56961060]
[-88.88900757 98.61205292]
[-92.99963379 82.27536774]
[-107.77758026 79.70392609]
[-122.55552673 77.13247681]
[-136.45104980 85.15083313]
[-151.33049011 79.15237427]
[-155.77963257 63.73859024]
[-146.38546753 50.73362350]
[-130.35438538 50.11376953]
[-119.98407745 62.35453033]
[-105.20613098 64.92597961]
[-90.42819214 67.49742889]
[-83.71787262 56.30189133]
[-73.56605530 48.04681778]
[-61.17686462 43.73952103]
[-48.02944183 43.91739273]
[-35.70137787 48.58094025]
[-25.67940331 57.19112778]
[-19.18008614 68.73156738]
[-17.00219345 81.82848358]
[-2.34059858 84.99670410]
[12.32099628 88.16492462]
[26.98259163 91.33315277]
[41.64418793 94.50137329]
[56.60646057 95.56456757]
[71.56873322 94.50137329]
[86.53100586 93.43817139]
[100.06432343 86.96907806]
[110.28812408 75.99301147]
[120.51192474 65.01695251]
[124.25625610 49.64520645]
[138.59266663 45.60582352]
[148.81646729 34.62976074]
[159.04026794 23.65369606]
[162.78460693 8.28195190]
[177.12101746 4.24256849]
[168.20021057 -7.86757040]
[161.65838623 -21.40716934]
[157.71701050 -35.91447449]
[156.50889587 -50.89502335]
[158.07374573 -65.83850861]
[162.35678101 -80.23616028]
[169.21075439 -93.59804535]
[178.40092468 -105.46977997]
[189.61312866 -115.44793701]
[202.46456909 -123.19379425]
[216.51679993 -128.44479370]
[231.29072571 -131.02349854]
[246.28292847 -130.84350586]
[260.98287964 -127.91241455]
[274.89016724 -122.33149719]
[287.53173828 -114.29218292]
[297.75555420 -125.26824951]
[307.97933960 -136.24430847]
[318.20315552 -147.22036743]
[328.42694092 -158.19644165]
[338.65072632 -169.17250061]
[348.87454224 -180.14855957]
[355.24594116 -195.85975647]
[372.10690308 -194.08663940]
[375.07067871 -177.39375305]
[359.85058594 -169.92475891]
[349.62680054 -158.94869995]
[339.40301514 -147.97264099]
[329.17919922 -136.99658203]
[318.95541382 -126.02051544]
[308.73162842 -115.04444885]
[298.50781250 -104.06838989]
[307.42294312 -92.02842712]
[313.97555542 -78.55167389]
[317.94122314 -64.09646606]
[319.18338013 -49.15471649]
[317.65835571 -34.23517609]
[313.41656494 -19.84610558]
[306.60110474 -6.47796488]
[297.44277954 5.41330099]
[286.25228882 15.42181873]
[273.40982056 23.20563507]
[259.35195923 28.49840546]
[244.55697632 31.11850166]
[229.52847290 30.97524834]
[214.77828979 28.07205772]
[200.80906677 22.50636864]
[188.09707642 14.46636581]
[185.08401489 29.05302811]
[170.01632690 33.87749481]
[159.79252625 44.85355759]
[149.56872559 55.82962036]
[146.55566406 70.41628265]
[131.48799133 75.24074554]
[121.26419067 86.21681213]
[111.04039001 97.19287109]
[125.27481842 92.46202087]
[135.77319336 81.74828339]
[149.33692932 75.34321594]
[164.28045654 74.04279327]
[178.74670410 78.00861359]
[190.93792725 86.74784851]
[199.33909607 99.17444611]
[202.90617371 113.74414062]
[201.19589233 128.64631653]
[194.42079163 142.02906799]
[183.42280579 152.22927856]
[169.56867981 157.97935486]
[154.58010864 158.56472778]
[140.31973267 153.91265869]
[128.55973816 144.60125732]
[120.76165009 131.78797913]
[113.57026672 118.62424469]
[113.57026672 133.62425232]
[113.57026672 148.62425232]
[113.57026672 163.62425232]
[113.57026672 178.62425232]
[113.57026672 193.62425232]
[113.57026672 208.62425232]
[113.57026672 223.62425232]
[113.57026672 238.62425232]
[113.57026672 253.62425232]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[11 63]
[12 62]
[13 61]
[28 60]
[29 59]
[30 58]
[31 57]
[32 56]
[38 48]
[39 47]
[40 46]
[64 128]
[65 127]
[66 126]
[68 124]
[69 123]
[70 122]
[72 120]
[88 104]
[89 103]
[90 102]
[91 101]
[92 100]
[93 99]
[94 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
