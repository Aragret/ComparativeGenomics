%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAAGACCCAAACUGGGAUUAGAUACCCCACUAUGCUUAGCCCUAAACCUCAACAGUUAAAUCxxxxxxxxxxGCAUUGUUCGUUACAUGGUCCAUCAUAGAAUUCUCACUGUGAUAUAUAAACUCAGACCCAAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[109.76976013 254.47192383]
[109.76976013 239.47192383]
[109.76976013 224.47192383]
[109.76976013 209.47192383]
[109.76976013 194.47192383]
[109.76976013 179.47192383]
[109.76976013 164.47192383]
[109.76976013 149.47192383]
[109.76976013 134.47192383]
[109.76976013 119.47192383]
[96.13664246 113.21588898]
[84.76473236 122.99748993]
[73.39282990 132.77909851]
[62.02091980 142.56069946]
[60.26509476 155.37570190]
[50.54494095 163.28761292]
[38.44164658 162.45953369]
[26.87629890 172.01164246]
[15.31095219 181.56373596]
[3.74560380 191.11584473]
[-4.61638260 205.86418152]
[-21.10317993 201.91174316]
[-21.86919212 184.97509766]
[-5.80650187 179.55050659]
[5.75884581 169.99839783]
[17.32419395 160.44628906]
[28.88954163 150.89418030]
[34.09255981 134.15922546]
[52.23931885 131.18879700]
[63.61122513 121.40718842]
[74.98313141 111.62558746]
[86.35503387 101.84398651]
[93.41771698 88.61074829]
[95.21430206 73.71872711]
[97.01089478 58.82670593]
[83.33762360 45.78515244]
[81.32334900 27.23542023]
[91.61422729 11.95571136]
[86.32755280 -2.08177590]
[81.04087830 -16.11926270]
[70.24790192 -17.38813400]
[60.84716797 -24.82312965]
[56.32083130 -37.12380981]
[48.60527039 -49.98732376]
[40.88970566 -62.85084152]
[33.17414474 -75.71436310]
[23.85535812 -87.46852112]
[13.09077740 -97.91474915]
[2.32619596 -108.36098480]
[-8.43838501 -118.80722046]
[-19.20296669 -129.25344849]
[-33.14400864 -123.19409943]
[-48.34275055 -122.93598175]
[-62.48149872 -128.51847839]
[-73.40419769 -139.09028625]
[-79.44520569 -153.03929138]
[-79.68332672 -168.23835754]
[-74.08223724 -182.36975098]
[-63.49607086 -193.27853394]
[-49.53913498 -199.30119324]
[-34.33976746 -199.51931763]
[-20.21575356 -193.89964294]
[-9.32090855 -183.29913330]
[-3.31661558 -169.33428955]
[-3.11848569 -154.13464355]
[-8.75673294 -140.01803589]
[2.00784850 -129.57180786]
[12.77242947 -119.12556458]
[23.53701019 -108.67933655]
[34.30158997 -98.23310089]
[31.25932312 -112.92134857]
[34.34777832 -127.59995270]
[43.05104065 -139.81687927]
[55.91523743 -147.53131104]
[70.79142761 -149.45455933]
[85.19457245 -145.26535034]
[96.71864319 -135.66348267]
[103.43856812 -122.25293732]
[104.23178864 -107.27392578]
[98.96580505 -93.22866821]
[88.52027893 -82.46339417]
[74.64013672 -76.77642822]
[59.64402008 -77.11777496]
[46.03765869 -83.42992401]
[53.75322342 -70.56640625]
[61.46878815 -57.70288849]
[69.18434906 -44.83937073]
[84.18135071 -44.53923798]
[92.40539551 -57.08375931]
[100.62944794 -69.62828064]
[98.78285980 -85.56470490]
[110.19287872 -96.84260559]
[126.10671997 -94.81053925]
[134.31663513 -81.02733612]
[128.52468872 -66.06628418]
[113.17396545 -61.40423203]
[104.94992065 -48.85971069]
[96.72586823 -36.31518936]
[95.07836151 -21.40593910]
[100.36503601 -7.36845255]
[105.65171814 6.66903448]
[114.05574036 7.37493992]
[121.81882477 10.67045021]
[128.16419983 16.22581863]
[132.45695496 23.48517227]
[147.39617920 22.13631248]
[162.33540344 20.78745079]
[177.27464294 19.43859100]
[192.21386719 18.08973122]
[207.15309143 16.74087143]
[222.09233093 15.39201069]
[229.93128967 2.00058675]
[244.15791321 -4.19482231]
[259.30175781 -0.81195456]
[269.53970337 10.84840775]
[270.93505859 26.30261803]
[262.95126343 39.60821533]
[248.65829468 45.64892960]
[233.55203247 42.10197830]
[223.44119263 30.33123970]
[208.50195312 31.68009949]
[193.56272888 33.02896118]
[178.62350464 34.37781906]
[163.68426514 35.72668076]
[148.74504089 37.07554245]
[133.80581665 38.42440033]
[126.47106934 52.86327362]
[111.90291595 60.62329483]
[110.10632324 75.51531219]
[108.30973816 90.40733337]
[117.02600861 78.19968414]
[125.04014587 65.52003479]
[136.73089600 56.12182999]
[150.83642578 51.01946640]
[165.83424377 50.76367188]
[180.10556030 55.38204956]
[192.11001587 64.37612152]
[200.55187988 76.77510071]
[204.52000427 91.24071503]
[203.58607483 106.21161652]
[197.85090637 120.07191467]
[187.93351746 131.32559204]
[174.90434265 138.75799561]
[160.16969299 141.56690979]
[145.31994629 139.44912720]
[131.96115112 132.63566589]
[124.76976013 119.47192383]
[124.76976013 134.47192383]
[124.76976013 149.47192383]
[124.76976013 164.47192383]
[124.76976013 179.47192383]
[124.76976013 194.47192383]
[124.76976013 209.47192383]
[124.76976013 224.47192383]
[124.76976013 239.47192383]
[124.76976013 254.47192383]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 156]
[2 155]
[3 154]
[4 153]
[5 152]
[6 151]
[7 150]
[8 149]
[9 148]
[10 147]
[11 32]
[12 31]
[13 30]
[14 29]
[17 27]
[18 26]
[19 25]
[20 24]
[33 130]
[34 129]
[35 128]
[38 101]
[39 100]
[40 99]
[43 87]
[44 86]
[45 85]
[46 84]
[47 70]
[48 69]
[49 68]
[50 67]
[51 66]
[88 98]
[89 97]
[90 96]
[105 126]
[106 125]
[107 124]
[108 123]
[109 122]
[110 121]
[111 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
