%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCAGCCUAACCAGAUUUCAAAUUUUAUCUUUUGGCGGUAUGCACUUUUAACAGUCACCCCCxxxxxxxxxxAAAUUUUGGUGCAACUCCAAAUAAAAGUAAUAACCAUGCACACUACUAUAACCACCCUAACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 250.29483032]
[92.50000000 235.29483032]
[92.50000000 220.29483032]
[92.50000000 205.29483032]
[92.50000000 190.29483032]
[92.50000000 175.29483032]
[92.50000000 160.29483032]
[92.50000000 145.29483032]
[92.50000000 130.29483032]
[92.50000000 115.29483795]
[80.18854523 106.72581482]
[66.12226868 111.93539429]
[52.05598450 117.14497375]
[45.04549408 123.09427643]
[37.65148163 122.31443024]
[23.48250580 127.23785400]
[9.31352997 132.16128540]
[-1.18248713 143.99954224]
[-15.74425030 140.86834717]
[-29.91322517 145.79177856]
[-34.58440781 150.60420227]
[-40.15208054 152.06935120]
[-44.75732422 150.61491394]
[-59.11418152 154.96009827]
[-73.47104645 159.30526733]
[-87.82790375 163.65045166]
[-91.24684143 178.62397766]
[-101.70624542 189.87103271]
[-116.39259338 194.36624146]
[-131.35533142 190.90037537]
[-142.56954956 180.40577698]
[-147.01869202 165.70541382]
[-143.50595093 150.75361633]
[-132.97624207 139.57234192]
[-118.26200867 135.16929626]
[-103.32128906 138.72888184]
[-92.17308044 149.29359436]
[-77.81622314 144.94841003]
[-63.45936203 140.60324097]
[-49.10250092 136.25805664]
[-34.83665466 131.62280273]
[-20.66767883 126.69937134]
[-11.18512058 115.21327972]
[4.39010191 117.99230957]
[18.55907631 113.06887817]
[32.72805023 108.14545441]
[46.84640503 103.07868958]
[60.91268921 97.86911011]
[74.97897339 92.65953064]
[87.00319672 85.80017090]
[97.56884766 87.81628418]
[102.92070770 73.80352020]
[108.27256775 59.79075623]
[113.62442780 45.77798843]
[117.67774200 31.33601570]
[120.39881897 16.58488846]
[123.11989594 1.83376169]
[125.84097290 -12.91736507]
[128.56204224 -27.66849136]
[131.28312683 -42.41962051]
[121.34738922 -31.18212509]
[109.19640350 -22.38704109]
[95.41733551 -16.45937729]
[80.67603302 -13.68557739]
[65.68484497 -14.19968033]
[51.16819382 -17.97684288]
[37.82757950 -24.83453941]
[26.30766106 -34.44138336]
[17.16511917 -46.33314133]
[10.84175014 -59.93516541]
[7.64312124 -74.59015656]
[7.72380161 -89.58993530]
[11.07989120 -104.20967102]
[17.54921341 -117.74288940]
[26.81915092 -129.53561401]
[38.44174576 -139.01797485]
[51.85535812 -145.73176575]
[66.41179657 -149.35255432]
[81.40764618 -149.70536804]
[96.11825562 -146.77314758]
[109.83277130 -140.69760132]
[121.88844299 -131.77232361]
[131.70271301 -120.42859650]
[138.80131531 -107.21459198]
[142.84123230 -92.76886749]
[143.62724304 -77.78947449]
[141.12197876 -63.00244904]
[150.89256287 -74.38381958]
[160.66314697 -85.76519775]
[170.43373108 -97.14656830]
[180.20433044 -108.52793884]
[177.48410034 -123.92710876]
[185.34342957 -137.44616699]
[200.07136536 -142.70184326]
[214.71382141 -137.21253967]
[222.35708618 -123.57016754]
[219.39224243 -108.21621704]
[207.21920776 -98.40036774]
[191.58569336 -98.75734711]
[181.81510925 -87.37597656]
[172.04452515 -75.99460602]
[162.27394104 -64.61323547]
[152.50334167 -53.23186493]
[146.03425598 -39.69854355]
[143.31317139 -24.94741631]
[140.59210205 -10.19628906]
[137.87101746 4.55483818]
[135.14994812 19.30596542]
[132.42886353 34.05709076]
[144.06752014 24.59444237]
[158.95771790 22.78281403]
[172.52581787 29.17866325]
[180.60424805 41.81745148]
[180.71165466 56.81706619]
[172.81506348 69.57025146]
[159.33995056 76.15975952]
[144.42533875 74.56156158]
[132.65235901 65.26656342]
[127.63719177 51.12984848]
[122.28533173 65.14261627]
[116.93347168 79.15538025]
[111.58161163 93.16814423]
[118.82020569 80.03031158]
[129.15396118 69.15770721]
[141.90722656 61.26124191]
[156.24613953 56.85720444]
[171.23316956 56.23355865]
[185.88841248 59.43107224]
[199.25363159 66.24068451]
[210.45497131 76.21714783]
[218.76005554 88.70817566]
[223.62583923 102.89704895]
[224.73419189 117.85604095]
[222.01264954 132.60708618]
[215.63916016 146.18569946]
[206.03044128 157.70404053]
[193.81474304 166.40902710]
[179.79077148 171.73146057]
[164.87548828 173.32336426]
[150.04408264 171.08065796]
[136.26632690 165.14994812]
[124.44303131 155.91903687]
[115.34726715 143.99145508]
[109.57374573 130.14709473]
[107.50000000 115.29483795]
[107.50000000 130.29483032]
[107.50000000 145.29483032]
[107.50000000 160.29483032]
[107.50000000 175.29483032]
[107.50000000 190.29483032]
[107.50000000 205.29483032]
[107.50000000 220.29483032]
[107.50000000 235.29483032]
[107.50000000 250.29483032]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[11 49]
[12 48]
[13 47]
[15 46]
[16 45]
[17 44]
[19 42]
[20 41]
[23 40]
[24 39]
[25 38]
[26 37]
[51 122]
[52 121]
[53 120]
[54 119]
[55 109]
[56 108]
[57 107]
[58 106]
[59 105]
[60 104]
[87 103]
[88 102]
[89 101]
[90 100]
[91 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
