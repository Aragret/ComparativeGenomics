%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUGACUUCUAGCAAGCCUCGCUAACCUCGCCUUACCCCCCACUAUUAACCUACUGGGAGAACUxxxxxxxxxxACAACAAUCCCCCUCUACCUAAAACUCACAGCCCUCGCUGUCACUUUCCUAGGACUUCUAACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-26.32914352 186.30046082]
[-39.11482239 194.14433289]
[-51.90050507 201.98820496]
[-64.68618774 209.83209229]
[-77.47186279 217.67596436]
[-90.25754547 225.51983643]
[-102.80206299 233.74388123]
[-115.09412384 242.34069824]
[-121.96855164 256.59036255]
[-136.83259583 257.54412842]
[-149.12464905 266.14096069]
[-160.19787598 276.25942993]
[-169.86521912 287.72863770]
[-173.02844238 296.35891724]
[-179.84254456 299.32809448]
[-189.73744202 310.60156250]
[-195.64164734 326.49423218]
[-212.54766846 325.22027588]
[-216.00355530 308.62228394]
[-201.01091003 300.70666504]
[-191.11602783 289.43319702]
[-181.33442688 278.06127930]
[-171.66708374 266.59210205]
[-180.86779785 254.74528503]
[-194.37301636 261.27285767]
[-207.87823486 267.80041504]
[-219.50776672 280.13696289]
[-234.58157349 272.37701416]
[-231.29772949 255.74412537]
[-214.40580750 254.29519653]
[-200.90058899 247.76763916]
[-187.39537048 241.24006653]
[-178.93843079 240.24386597]
[-171.28605652 241.50099182]
[-164.97828674 244.57051086]
[-160.39257812 248.89434814]
[-157.72146606 253.84889221]
[-145.42941284 245.25207520]
[-139.43418884 231.61732483]
[-123.69094086 230.04864502]
[-111.39888000 221.45182800]
[-110.43685913 218.00468445]
[-107.72445679 214.86605835]
[-103.43186951 212.86866760]
[-98.10141754 212.73416138]
[-85.31574249 204.89028931]
[-72.53005981 197.04640198]
[-59.74438095 189.20252991]
[-46.95869827 181.35865784]
[-34.17301941 173.51478577]
[-42.98498154 154.42533875]
[-49.09655380 134.30801392]
[-52.39230728 113.54276276]
[-52.81000519 92.52174377]
[-50.34175491 71.64196014]
[-45.03417587 51.29774094]
[-36.98749924 31.87330246]
[-26.35370064 13.73549747]
[-13.33360386 -2.77313018]
[1.82689464 -17.34079933]
[18.84147453 -29.69238853]
[37.38880157 -39.59462738]
[57.11859512 -46.86050415]
[77.65824127 -51.35279083]
[98.61982727 -52.98665619]
[99.21997833 -67.97464752]
[99.82012177 -82.96263885]
[100.42026520 -97.95062256]
[86.01065063 -102.42559814]
[73.25075531 -110.47840118]
[63.01057816 -121.55996704]
[55.98830414 -134.91474915]
[52.66272736 -149.63218689]
[53.26059341 -164.70881653]
[57.74113083 -179.11669922]
[65.79885864 -191.87348938]
[76.88437653 -202.10939026]
[90.24186707 -209.12649536]
[104.96058655 -212.44639587]
[120.03698730 -211.84271240]
[134.44314575 -207.35661316]
[147.19682312 -199.29396057]
[157.42843628 -188.20448303]
[164.44038391 -174.84428406]
[167.75460815 -160.12428284]
[167.14509583 -145.04811096]
[162.65342712 -130.64369202]
[154.58586121 -117.89314270]
[143.49243164 -107.66580200]
[130.12953186 -100.65900421]
[115.40824890 -97.35047913]
[114.80810547 -82.36248779]
[114.20796204 -67.37450409]
[113.60781860 -52.38651276]
[126.29816437 -50.71572113]
[138.80442810 -47.98999023]
[151.03909302 -44.22840500]
[162.91650391 -39.45729065]
[174.35353088 -33.71004105]
[185.27011108 -27.02688599]
[195.58984375 -19.45460510]
[205.24050903 -11.04619980]
[214.15452576 -1.86052501]
[222.26951599 8.03812408]
[229.52868652 18.58046150]
[235.88121033 29.69269562]
[241.28263855 41.29704666]
[245.69515991 53.31229401]
[249.08787537 65.65432739]
[251.43705750 78.23676300]
[252.72625732 90.97153473]
[267.72549438 90.82146454]
[282.72476196 90.67138672]
[297.72399902 90.52131653]
[312.72326660 90.37123871]
[326.55969238 81.56866455]
[340.97409058 89.38896942]
[341.13815308 105.78730011]
[326.88311768 113.89445496]
[312.87332153 105.37049103]
[297.87408447 105.52056122]
[282.87481689 105.67063904]
[267.87557983 105.82070923]
[252.87632751 105.97078705]
[252.02297974 117.19989777]
[250.34594727 128.33581543]
[247.85432434 139.31822205]
[244.56159973 150.08758545]
[240.48562622 160.58557129]
[235.64848328 170.75529480]
[230.07638550 180.54165649]
[223.79949951 189.89163208]
[216.85186768 198.75456238]
[209.27111816 207.08242798]
[201.09831238 214.83010864]
[192.37774658 221.95562744]
[183.15666199 228.42036438]
[173.48503113 234.18931580]
[163.41525269 239.23120117]
[153.00187683 243.51872253]
[142.30133057 247.02864075]
[131.37158203 249.74192810]
[120.27187347 251.64390564]
[109.06231689 252.72424316]
[97.80366516 252.97711182]
[86.55690765 252.40113831]
[75.38299561 250.99942017]
[64.34245300 248.77957153]
[53.49511337 245.75361633]
[42.89974213 241.93795776]
[32.61374664 237.35325623]
[22.69285965 232.02435303]
[13.19083214 225.98011780]
[4.15914774 219.25331116]
[-4.35325813 211.88038635]
[-12.30026436 203.90126038]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 50]
[2 49]
[3 48]
[4 47]
[5 46]
[6 45]
[7 41]
[8 40]
[10 38]
[11 37]
[12 23]
[13 22]
[15 21]
[16 20]
[24 32]
[25 31]
[26 30]
[65 94]
[66 93]
[67 92]
[68 91]
[111 124]
[112 123]
[113 122]
[114 121]
[115 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
