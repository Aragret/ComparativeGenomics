%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGCACACUCAUCACAGCGCUAAGCUCGCACUGAUUUUUUACCUGAGUAGGCCUAGAAAUAAACAxxxxxxxxxxUAGGAUUCAUCUUUCUUUUCACCGUAGGUGGCCUGACUGGCAUUGUAUUAGCAAACUCAUCACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[125.94821930 291.73464966]
[125.64808655 276.73767090]
[125.34795380 261.74066162]
[125.04782867 246.74366760]
[124.74769592 231.74667358]
[124.44756317 216.74967957]
[124.14743042 201.75268555]
[123.84729767 186.75567627]
[123.54716492 171.75868225]
[119.97985077 157.18905640]
[107.39471436 149.22264099]
[108.19749451 133.42181396]
[101.53514099 119.98258209]
[82.83277893 114.70190430]
[75.50590515 94.23694611]
[60.67450714 96.47964478]
[45.84311295 98.72234344]
[31.01171684 100.96504974]
[16.18032074 103.20774841]
[1.61068487 106.77506256]
[-12.57913685 111.63808441]
[-26.76895714 116.50109863]
[-33.76873398 130.41659546]
[-48.22850418 135.14625549]
[-61.45166397 128.38728333]
[-75.64148712 133.25028992]
[-89.83130646 138.11331177]
[-95.28720856 152.76824951]
[-108.91213226 160.44259644]
[-124.27279663 157.51275635]
[-134.11636353 145.36212158]
[-133.79501343 129.72784424]
[-123.46047211 117.99194336]
[-107.99239349 115.69577026]
[-94.69432831 123.92350006]
[-80.50450134 119.06047821]
[-66.31468201 114.19745636]
[-60.01703262 100.74847412]
[-45.69581223 95.61454010]
[-31.63197899 102.31127930]
[-17.44215775 97.44825745]
[-3.25233579 92.58523560]
[-17.21619797 87.10705566]
[-26.11689186 75.03321075]
[-27.21939659 60.07378387]
[-20.18493080 46.82552719]
[-7.17505980 39.35938644]
[7.81252432 39.96957016]
[20.17241287 48.46858215]
[26.10663795 62.24482727]
[23.79172134 77.06512451]
[13.93762016 88.37635040]
[28.76901627 86.13365173]
[43.60041046 83.89095306]
[58.43180847 81.64824677]
[73.26319885 79.40554810]
[84.82855225 69.85344696]
[89.83329773 55.71298599]
[94.83804321 41.57252884]
[99.84278870 27.43207359]
[104.84752655 13.29161549]
[96.94009399 5.99776220]
[93.64913940 -5.77932692]
[97.35438538 -18.97834015]
[100.33591461 -33.67903519]
[103.31744385 -48.37973404]
[106.29898071 -63.08042908]
[100.02809906 -80.36638641]
[112.09016418 -93.08003998]
[114.77695465 -107.83745575]
[117.46374512 -122.59486389]
[103.76017761 -128.89273071]
[92.05387115 -138.40130615]
[83.08068085 -150.52288818]
[77.40468597 -164.49549866]
[75.38267517 -179.44081116]
[77.14175415 -194.41934204]
[82.57135010 -208.48953247]
[91.33014679 -220.76692200]
[102.86756134 -230.47975159]
[116.45834351 -237.01744080]
[131.24816895 -239.96903992]
[146.30732727 -239.14900208]
[160.68919373 -234.60888672]
[173.48971558 -226.63409424]
[183.90423584 -215.72589111]
[191.27809143 -202.57002258]
[195.14775085 -187.99343872]
[195.26997375 -172.91247559]
[191.63706970 -158.27508545]
[184.47740173 -145.00143433]
[174.24104309 -133.92588806]
[161.57144165 -125.74466705]
[147.26504517 -120.97206116]
[132.22116089 -119.90807343]
[129.53436279 -105.15065765]
[126.84757233 -90.39324951]
[133.48146057 -80.23612976]
[131.32472229 -67.88994598]
[120.99967194 -60.09889603]
[118.01814270 -45.39820099]
[115.03661346 -30.69750404]
[112.05508423 -15.99680901]
[123.62042999 -6.44470263]
[137.49293518 -12.15027332]
[151.36544800 -17.85584450]
[163.71415710 -29.47245598]
[178.29524231 -20.82213593]
[174.01943970 -4.41622925]
[157.07101440 -3.98333621]
[143.19850159 1.72223425]
[129.32600403 7.42780495]
[118.98798370 18.29636002]
[113.98324585 32.43681717]
[108.97850037 46.57727432]
[103.97375488 60.71773148]
[98.96900940 74.85819244]
[112.35483551 79.56142426]
[120.42632294 90.32401276]
[121.10630035 103.02401733]
[114.97437286 113.32022095]
[121.63673401 126.75946045]
[134.69839478 135.68713379]
[133.41908264 150.52668762]
[134.52261353 135.56733704]
[139.39335632 121.38017273]
[147.71119690 108.89764404]
[158.92944336 98.94017792]
[172.31076050 92.16224670]
[186.97564697 89.00932312]
[201.96026611 89.68862915]
[216.27970886 94.15553284]
[228.99285889 102.11643982]
[239.26411438 113.04810333]
[246.41839600 126.23204041]
[249.98547363 140.80172729]
[249.73092651 155.79957581]
[245.67144775 170.23982239]
[238.07388306 183.17338562]
[227.43756104 193.75018311]
[214.46157837 201.27507019]
[199.99879456 205.25344849]
[184.99975586 205.42384338]
[170.45030212 201.77507019]
[157.30671692 194.54693604]
[146.43286133 184.21450806]
[138.54415894 171.45855713]
[138.84429932 186.45555115]
[139.14442444 201.45254517]
[139.44456482 216.44953918]
[139.74468994 231.44654846]
[140.04481506 246.44354248]
[140.34495544 261.44052124]
[140.64508057 276.43753052]
[140.94522095 291.43453979]
[143.52095032 310.64431763]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 155]
[2 154]
[3 153]
[4 152]
[5 151]
[6 150]
[7 149]
[8 148]
[9 147]
[10 124]
[12 122]
[13 121]
[15 56]
[16 55]
[17 54]
[18 53]
[19 52]
[20 42]
[21 41]
[22 40]
[25 37]
[26 36]
[27 35]
[57 117]
[58 116]
[59 115]
[60 114]
[61 113]
[64 103]
[65 102]
[66 101]
[67 100]
[69 97]
[70 96]
[71 95]
[104 112]
[105 111]
[106 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
