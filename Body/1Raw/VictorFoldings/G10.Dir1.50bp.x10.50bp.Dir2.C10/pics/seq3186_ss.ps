%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAAGAACAGGGUUUGUUAAGAUGGCAGAGCCCGGUAAUCGCAUAAAACUUAAAACUUUACxxxxxxxxxxACCUCCCUCUCUCCUACUCCUGCUCGCAUCUGCUAUAGUGGAGGCCGGAGCAGGAACAGGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[103.13545990 274.64950562]
[103.13545990 259.64950562]
[103.13545990 244.64950562]
[103.13545990 229.64950562]
[103.13545990 214.64950562]
[103.13545990 199.64950562]
[103.13545990 184.64950562]
[103.13545990 169.64950562]
[103.13545990 154.64950562]
[103.13545990 139.64950562]
[79.53798676 130.39962769]
[68.05094910 110.12835693]
[71.60750580 89.17125702]
[59.34513855 80.53213501]
[47.08276749 71.89302063]
[34.22118759 73.31906128]
[24.17364311 65.81800842]
[22.02821350 53.87211227]
[9.94822598 44.97976303]
[-2.13176274 36.08740997]
[-14.21175098 27.19506264]
[-27.86799240 20.98965454]
[-42.51149368 17.73882866]
[-57.15499496 14.48800373]
[-63.66669083 16.13278389]
[-69.18024445 14.44991589]
[-72.33403015 10.78533649]
[-86.82962799 6.92817736]
[-101.32522583 3.07101774]
[-115.82082367 -0.78614175]
[-131.51271057 15.23711205]
[-155.37806702 16.98944664]
[-175.64630127 1.62652457]
[-190.63899231 2.09456682]
[-205.63168335 2.56260896]
[-221.27444458 9.10023022]
[-231.88691711 -4.12140894]
[-222.11981201 -17.97925758]
[-206.09973145 -12.43008709]
[-191.10702515 -12.89812946]
[-176.11433411 -13.36617184]
[-173.78323364 -28.18392944]
[-187.90803528 -33.23268509]
[-202.96539307 -27.69592667]
[-216.60702515 -36.13898468]
[-218.36825562 -52.08507156]
[-206.89801025 -63.30171204]
[-190.99528503 -61.18445969]
[-182.85928345 -47.35749054]
[-168.73448181 -42.30873108]
[-159.50946045 -48.00479507]
[-149.25117493 -50.69721222]
[-138.88980103 -50.28372574]
[-129.32464600 -46.93753815]
[-121.34616852 -41.08050919]
[-115.57069397 -33.33525848]
[-112.39351654 -24.46132278]
[-111.96366119 -15.28173828]
[-97.46806335 -11.42457867]
[-82.97246552 -7.56741953]
[-68.47687531 -3.71025991]
[-53.90417099 -0.15549807]
[-39.26066971 3.09532762]
[-24.61716652 6.34615326]
[-35.43445969 -4.04548407]
[-42.95513153 -17.02390862]
[-46.59226227 -31.57627296]
[-46.06200027 -46.56689835]
[-41.40573502 -60.82590103]
[-32.98684311 -73.24050140]
[-21.46234322 -82.84185028]
[-7.73161507 -88.88064575]
[7.13378334 -90.88562012]
[21.97374344 -88.70030975]
[35.63014221 -82.49524689]
[47.03722000 -72.75468445]
[55.30475998 -60.23878479]
[59.78755951 -45.92429733]
[60.13577652 -30.92834091]
[56.32223129 -16.42120743]
[48.64453888 -3.53505111]
[37.70187378 6.72448444]
[24.34820938 13.55673599]
[9.62567711 16.42850876]
[-5.31940126 15.11507320]
[6.76058674 24.00742340]
[18.84057617 32.89977264]
[30.92056274 41.79212189]
[48.41518021 42.76080322]
[55.72188568 59.63065338]
[67.98425293 68.26976776]
[80.24662018 76.90888977]
[92.51570129 68.61545563]
[108.09749603 66.83238220]
[123.56041718 72.75534821]
[135.13293457 85.79462433]
[139.61474609 103.54773712]
[154.61393738 103.70377350]
[169.61312866 103.85980988]
[184.61230469 104.01584625]
[198.49221802 96.42252350]
[211.13832092 104.29180145]
[226.13751221 104.44783783]
[241.13751221 104.44783783]
[256.13668823 104.29180145]
[264.74969482 101.05635834]
[271.44876099 104.29180145]
[286.44796753 104.44783783]
[295.12640381 101.39228058]
[301.75671387 104.76638031]
[316.74942017 105.23442841]
[329.37945557 95.34193420]
[344.95449829 99.18867493]
[351.52670288 113.82376099]
[344.05444336 128.02040100]
[328.26977539 130.88815308]
[316.28137207 120.22711945]
[301.28866577 119.75907898]
[286.29193115 119.44702148]
[271.29272461 119.29098511]
[256.29272461 119.29098511]
[241.29354858 119.44702148]
[234.59446716 122.68246460]
[225.98147583 119.44702148]
[210.98228455 119.29098511]
[198.17521667 126.89547729]
[184.45626831 119.01503754]
[169.45709229 118.85900116]
[154.45790100 118.70296478]
[139.45870972 118.54692841]
[134.12789917 123.82257080]
[147.21611023 131.15049744]
[161.99450684 133.71936035]
[171.29653931 145.48678589]
[170.38420105 160.45901489]
[159.72219849 171.00991821]
[144.74124146 171.76539612]
[133.07188416 162.34062195]
[130.65765381 147.53759766]
[123.46627045 134.37385559]
[118.13545990 139.64950562]
[118.13545990 154.64950562]
[118.13545990 169.64950562]
[118.13545990 184.64950562]
[118.13545990 199.64950562]
[118.13545990 214.64950562]
[118.13545990 229.64950562]
[118.13545990 244.64950562]
[118.13545990 259.64950562]
[118.13545990 274.64950562]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[13 92]
[14 91]
[15 90]
[18 88]
[19 87]
[20 86]
[21 85]
[22 64]
[23 63]
[24 62]
[27 61]
[28 60]
[29 59]
[30 58]
[33 41]
[34 40]
[35 39]
[42 50]
[43 49]
[97 130]
[98 129]
[99 128]
[100 127]
[102 125]
[103 124]
[104 122]
[105 121]
[107 120]
[108 119]
[110 118]
[111 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
