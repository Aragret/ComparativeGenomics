%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAAUAAAAAAUUAUAACAAACCCUGAGAACCAAAAUGAACGAAAAUCUGUUCGCUUCAUUxxxxxxxxxxAAUAGCCAUCGCUGUAGUAUAUCCAAAGACAACCAUCAUUCCCCCUAAAUAAAUUAAAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[189.66751099 466.72955322]
[189.66751099 451.72955322]
[189.66751099 436.72955322]
[189.66751099 421.72955322]
[189.66751099 406.72955322]
[189.66751099 391.72955322]
[189.66751099 376.72955322]
[189.66751099 361.72955322]
[189.66751099 346.72955322]
[189.66751099 331.72955322]
[174.69143677 327.48205566]
[161.49946594 319.19067383]
[151.15846252 307.51629639]
[144.50740051 293.39389038]
[142.08938599 277.95739746]
[144.10719299 262.44891357]
[150.40637207 248.11857605]
[160.48703003 236.12387085]
[173.54345703 227.43617249]
[188.52854919 222.76196289]
[188.21649170 207.76521301]
[187.90443420 192.76846313]
[183.74655151 178.35624695]
[176.02247620 165.49784851]
[168.29838562 152.63943481]
[160.44096375 139.86209106]
[152.45103455 127.16715240]
[140.69288635 124.15830231]
[133.94271851 113.59165192]
[136.30070496 100.86790466]
[128.57662964 88.00949860]
[121.92970276 117.35094452]
[95.89916992 124.59761810]
[79.33615875 107.28543854]
[64.33697510 107.12940216]
[51.91545868 117.28250885]
[36.26375580 113.76062012]
[29.38850784 99.26542664]
[36.56381989 84.91640472]
[52.28540802 81.72089386]
[64.49301147 92.13021851]
[79.49219513 92.28625488]
[80.94684601 81.65332031]
[88.00200653 71.42652130]
[77.56219482 60.65571213]
[67.12238312 49.88490677]
[56.68257141 39.11409760]
[46.24275970 28.34328842]
[35.80294800 17.57247925]
[25.25165558 6.91085339]
[14.59003067 -3.64043689]
[3.92840409 -14.19172668]
[-6.73322248 -24.74301720]
[-22.53400612 -24.41019630]
[-33.88420868 -35.40785217]
[-34.04995728 -51.21127319]
[-22.93291473 -62.44456482]
[-7.12862587 -62.44322205]
[3.98650527 -51.20803452]
[3.81806803 -35.40464401]
[14.47969437 -24.85335350]
[25.14132118 -14.30206299]
[35.80294800 -3.75077295]
[42.81487274 -1.26511025]
[46.57375336 7.13266706]
[57.01356888 17.90347481]
[67.45337677 28.67428398]
[77.89319611 39.44509125]
[88.33300781 50.21590042]
[98.77281952 60.98670959]
[106.22377014 60.13036346]
[102.22576904 45.67297745]
[98.22777557 31.21559143]
[94.22978210 16.75820541]
[87.28685760 3.46174407]
[91.63096619 -10.89543915]
[104.78070831 -18.11238861]
[119.22482300 -14.06671333]
[126.71270752 -1.06934273]
[122.96730042 13.45537567]
[122.35342407 28.44280815]
[121.73954773 43.43024063]
[121.12567139 58.41767502]
[128.57662964 57.56132889]
[136.30070496 44.70292664]
[144.02479553 31.84452629]
[143.76794434 15.44738960]
[157.97688293 7.25971127]
[172.03466797 15.70427132]
[171.47985840 32.09403229]
[156.88319397 39.56861115]
[149.15910339 52.42701340]
[141.43502808 65.28541565]
[141.43502808 80.28541565]
[149.15910339 93.14381409]
[165.45266724 101.65850830]
[165.14596558 119.17723846]
[173.13589478 131.87216187]
[180.40364075 137.51411438]
[181.15678406 144.91535950]
[188.88087463 157.77375793]
[196.60494995 170.63215637]
[196.70481873 155.63249207]
[200.19717407 141.04470825]
[206.90078735 127.62600708]
[216.46768188 116.07288361]
[228.40127563 106.98502350]
[242.08215332 100.83412933]
[256.80020142 97.93946838]
[271.79147339 98.45130157]
[286.27783203 102.34304810]
[299.50732422 109.41271210]
[310.79330444 119.29332733]
[319.54995728 131.47204590]
[325.32272339 145.31672668]
[327.81201172 160.10873413]
[326.88861084 175.08027649]
[322.60043335 189.45425415]
[315.17004395 202.48458862]
[304.98315430 213.49490356]
[292.56848145 221.91372681]
[278.57046509 227.30404663]
[263.71566772 229.38609314]
[248.77514648 228.05178833]
[234.52436829 223.37039185]
[221.70304871 215.58489990]
[210.97669983 205.09941101]
[202.90119934 192.45640564]
[203.21325684 207.45315552]
[203.52531433 222.44992065]
[217.56278992 226.02908325]
[230.17890930 233.12437439]
[240.51136780 243.24356079]
[247.85583496 255.68803406]
[251.71397400 269.60098267]
[251.82720947 284.02633667]
[248.19409180 297.97460938]
[241.06994629 310.49057007]
[230.94892883 320.71887207]
[218.52975464 327.96234131]
[204.66751099 331.72955322]
[204.66751099 346.72955322]
[204.66751099 361.72955322]
[204.66751099 376.72955322]
[204.66751099 391.72955322]
[204.66751099 406.72955322]
[204.66751099 421.72955322]
[204.66751099 436.72955322]
[204.66751099 451.72955322]
[204.66751099 466.72955322]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[20 130]
[21 129]
[22 128]
[23 102]
[24 101]
[25 100]
[26 98]
[27 97]
[30 95]
[31 94]
[34 42]
[35 41]
[44 70]
[45 69]
[46 68]
[47 67]
[48 66]
[49 65]
[50 63]
[51 62]
[52 61]
[53 60]
[84 93]
[85 92]
[86 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
