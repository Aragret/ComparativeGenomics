%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAAAGUAUAGGCGAUAGAAAUUGAAACCUGGCGCAAUAGAUAUAGUACCGCAAGGGAAAGAUxxxxxxxxxxGACUUUUUCAAAAAGGUAUUAGAAAAACCAUUUCAUAACUUUGUCAAAGUUAAAUUAUAGGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.31283569 452.13598633]
[95.31283569 437.13598633]
[95.31283569 422.13598633]
[95.31283569 407.13598633]
[95.31283569 392.13598633]
[95.31283569 377.13598633]
[95.31283569 362.13598633]
[95.31283569 347.13598633]
[95.31283569 332.13598633]
[95.31283569 317.13598633]
[80.23176575 314.21115112]
[66.00125885 308.41217041]
[53.16358948 299.95803833]
[42.20832825 289.16900635]
[33.55368805 276.45443726]
[27.53053856 262.29718018]
[24.36976624 247.23536682]
[24.19343185 231.84185791]
[27.01004410 216.70248413]
[32.71417618 202.39375305]
[41.09040833 189.46092224]
[51.82146454 178.39715576]
[64.50022125 169.62478638]
[78.64517212 163.47915649]
[93.71869659 160.19581604]
[85.72504425 147.62797546]
[93.18106842 133.67382812]
[92.87705994 118.67690277]
[79.82397461 108.51981354]
[78.13514709 90.56624603]
[91.02001190 75.89300537]
[82.20323181 63.75774765]
[73.38645935 51.62249374]
[64.56967926 39.48723602]
[55.75289917 27.35198212]
[34.59138489 37.60659790]
[22.31012344 20.79844666]
[9.12182713 13.65219975]
[-4.06646967 6.50595331]
[-19.88603020 6.73411179]
[-27.38992310 -6.13215685]
[-40.57822037 -13.27840328]
[-53.76651764 -20.42464828]
[-65.31076050 -10.57097626]
[-79.63629913 -5.55665255]
[-94.80571747 -6.05982542]
[-108.76747894 -12.01244450]
[-119.63336182 -22.60946655]
[-125.93386078 -36.41773224]
[-126.81687164 -51.56978607]
[-122.16298676 -66.01643372]
[-112.60158539 -77.80389404]
[-99.42578888 -85.33800507]
[-84.41751099 -87.59983063]
[-69.60648346 -84.28349304]
[-56.99579620 -75.83749390]
[-48.29093170 -63.40407944]
[-44.66915131 -48.66477585]
[-46.62026978 -33.61294556]
[-33.43197250 -26.46669960]
[-20.24367714 -19.32045364]
[-5.36743069 -20.05975914]
[3.07977676 -6.68234301]
[16.26807404 0.46390301]
[29.45636940 7.61014938]
[37.74079514 3.17227030]
[48.25289917 4.26935530]
[48.25289917 -10.73064423]
[48.25289917 -25.73064423]
[48.25289917 -40.73064423]
[34.19571304 -46.51544571]
[23.42583847 -57.24290085]
[17.58560753 -71.27714539]
[17.56561089 -86.47807312]
[23.36889839 -100.52763367]
[34.11051178 -111.28338623]
[48.15243149 -117.10515594]
[63.35336685 -117.10515594]
[77.39528656 -111.28338623]
[88.13690186 -100.52763367]
[93.94018555 -86.47807312]
[93.92018890 -71.27714539]
[88.07995605 -57.24290085]
[77.31008911 -46.51544571]
[63.25289917 -40.73064423]
[63.25289917 -25.73064423]
[63.25289917 -10.73064423]
[63.25289917 4.26935530]
[67.88815308 18.53520393]
[76.70493317 30.67045784]
[85.52171326 42.80571365]
[94.33849335 54.94096756]
[103.15526581 67.07622528]
[117.37341309 71.85581207]
[131.73027039 67.51063538]
[146.08712769 63.16545486]
[160.44398499 58.82027817]
[171.41113281 47.41710663]
[185.83404541 51.13584518]
[200.19090271 46.79066849]
[214.54776001 42.44549179]
[219.41014099 37.82631683]
[225.03260803 36.58801651]
[229.57513428 38.22787857]
[244.09628296 34.46809006]
[258.61743164 30.70830345]
[273.13861084 26.94851494]
[282.48352051 13.90812778]
[298.51214600 13.22767448]
[308.92864990 25.42914200]
[305.74243164 41.15260696]
[291.39761353 48.33637619]
[276.89837646 41.46967316]
[262.37722778 45.22946167]
[247.85607910 48.98924637]
[233.33491516 52.74903488]
[218.89294434 56.80235291]
[204.53608704 61.14752960]
[190.17921448 65.49270630]
[180.23896790 76.58508301]
[164.78916931 73.17713928]
[150.43231201 77.52231598]
[136.07545471 81.86749268]
[121.71858978 86.21266937]
[121.83531952 106.75783539]
[107.87397766 118.37290192]
[108.17798615 133.36981201]
[116.19338226 147.01034546]
[108.71561432 159.89181519]
[123.17170715 162.35954285]
[136.91966248 167.45274353]
[149.48719788 174.99482727]
[160.44285583 184.72511292]
[169.41087341 196.30778503]
[176.08401489 209.34358215]
[180.23416138 223.38345337]
[181.72000122 237.94413757]
[180.49198914 252.52465820]
[176.59384155 266.62371826]
[170.16113281 279.75683594]
[161.41645813 291.47296143]
[150.66175842 301.37011719]
[138.26799011 309.10900879]
[124.66218567 314.42474365]
[110.31283569 317.13598633]
[110.31283569 332.13598633]
[110.31283569 347.13598633]
[110.31283569 362.13598633]
[110.31283569 377.13598633]
[110.31283569 392.13598633]
[110.31283569 407.13598633]
[110.31283569 422.13598633]
[110.31283569 437.13598633]
[110.31283569 452.13598633]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[25 129]
[27 127]
[28 126]
[31 93]
[32 92]
[33 91]
[34 90]
[35 89]
[37 65]
[38 64]
[39 63]
[41 61]
[42 60]
[43 59]
[67 88]
[68 87]
[69 86]
[70 85]
[94 124]
[95 123]
[96 122]
[97 121]
[99 119]
[100 118]
[101 117]
[104 116]
[105 115]
[106 114]
[107 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
