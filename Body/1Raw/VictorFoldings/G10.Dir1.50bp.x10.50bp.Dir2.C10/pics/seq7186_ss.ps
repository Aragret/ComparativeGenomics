%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUCCCACAACACUUUCUCGGCCUAUCCGGAAUGCCCCGACGUUACUCGGACUACCCCGAUxxxxxxxxxxCACUAAAGGACGAACCUGAUCUCUUAUACUAGUAUCCUUAAUCAUUUUUAUUGCCACAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[150.38600159 76.19483948]
[137.77488708 84.31638336]
[125.16374969 92.43792725]
[112.55261993 100.55947113]
[102.56990051 111.75523376]
[103.41246033 127.55398560]
[90.84741974 135.55206299]
[84.21892548 149.00802612]
[77.59042358 162.46398926]
[76.01506805 179.34458923]
[59.35807037 182.50381470]
[51.71119308 167.37232971]
[64.13446045 155.83549500]
[70.76295471 142.37953186]
[77.39145660 128.92355347]
[76.07478333 114.08726501]
[89.11392975 105.12673187]
[84.35974884 99.32606506]
[74.85139465 87.72472382]
[70.09721375 81.92404938]
[55.60161972 85.78121185]
[50.57870102 90.23966217]
[44.90954208 91.28462982]
[40.42258072 89.48387909]
[25.77907944 92.73470306]
[11.13557911 95.98552704]
[3.37661314 100.93025208]
[-3.84628987 99.14831543]
[-18.55425072 102.09379578]
[-33.26221466 105.03927612]
[-43.31868744 117.53915405]
[-59.36032486 117.32614899]
[-69.08135986 104.56365967]
[-65.02464294 89.04197693]
[-50.30213928 82.66800690]
[-36.20769501 90.33131409]
[-21.49973488 87.38583374]
[-6.79177237 84.44035339]
[7.88475323 81.34202576]
[22.52825356 78.09120178]
[37.17175674 74.84037781]
[51.74445724 71.28561401]
[66.24005890 67.42845917]
[104.43108368 87.94834137]
[117.04220581 79.82679749]
[129.65333557 71.70525360]
[142.26446533 63.58371353]
[130.10014343 37.94709778]
[122.39817810 10.63940430]
[119.37477875 -17.56898499]
[121.11417389 -45.88245010]
[127.56626892 -73.50259399]
[138.54809570 -99.65071869]
[153.74899292 -123.58984375]
[172.73942566 -144.64541626]
[194.98303223 -162.22431946]
[187.25895691 -175.08273315]
[179.53486633 -187.94113159]
[171.81077576 -200.79953003]
[156.41764832 -204.38104248]
[148.13662720 -217.84210205]
[151.88069153 -233.19650269]
[165.42854309 -241.33474731]
[180.74250793 -237.42855835]
[188.73706055 -223.79542542]
[184.66918945 -208.52362061]
[192.39326477 -195.66522217]
[200.11735535 -182.80680847]
[207.84143066 -169.94841003]
[217.38549805 -174.73500061]
[227.21305847 -178.90867615]
[237.28480530 -182.45277405]
[247.56045532 -185.35308838]
[257.99887085 -187.59802246]
[268.55834961 -189.17861938]
[279.19662476 -190.08853149]
[289.87112427 -190.32412720]
[300.53915405 -189.88446045]
[311.15808105 -188.77128601]
[321.68539429 -186.98907471]
[332.07901001 -184.54495239]
[342.29730225 -181.44868469]
[352.29943848 -177.71264648]
[362.04537964 -173.35182190]
[371.49618530 -168.38360596]
[380.61401367 -162.82791138]
[389.36239624 -156.70693970]
[398.87075806 -168.30827332]
[408.37911987 -179.90962219]
[408.23345947 -195.95201111]
[420.77545166 -205.95591736]
[436.38394165 -202.24719238]
[443.08544922 -187.67085266]
[435.73910522 -173.40861511]
[419.98046875 -170.40126038]
[410.47210693 -158.79992676]
[400.96374512 -147.19857788]
[408.43945312 -140.07461548]
[415.46572876 -132.50677490]
[422.01626587 -124.52334595]
[428.06655884 -116.15421295]
[433.59393311 -107.43065643]
[438.57769775 -98.38531494]
[442.99917603 -89.05200958]
[446.84179688 -79.46566772]
[450.09118652 -69.66214752]
[452.73513794 -59.67811203]
[454.76376343 -49.55092239]
[456.16943359 -39.31846619]
[456.94686890 -29.01902580]
[457.09310913 -18.69113541]
[456.60766602 -8.37343884]
[455.49224854 1.89545715]
[453.75103760 12.07712746]
[451.39053345 22.13347054]
[448.41955566 32.02685547]
[444.84915161 41.72025681]
[440.69271851 51.17739868]
[435.96575928 60.36288452]
[430.68594360 69.24233246]
[424.87298584 77.78251648]
[418.54867554 85.95146179]
[411.73660278 93.71858215]
[404.46224976 101.05481720]
[396.75280762 107.93268585]
[388.63714600 114.32644653]
[380.14559937 120.21215057]
[371.30993652 125.56776428]
[362.16317749 130.37322998]
[352.73956299 134.61053467]
[343.07431030 138.26382446]
[333.20361328 141.31938171]
[323.16439819 143.76576233]
[312.99420166 145.59381104]
[302.73107910 146.79664612]
[292.41342163 147.36973572]
[282.07983398 147.31092834]
[271.76901245 146.62042236]
[261.51950073 145.30076599]
[251.36967468 143.35688782]
[241.35751343 140.79603577]
[231.52046204 137.62776184]
[221.89535522 133.86392212]
[212.51821899 129.51853943]
[203.42414856 124.60788727]
[194.64715576 119.15029907]
[186.22012329 113.16618347]
[178.17459106 106.67791748]
[170.54066467 99.70975494]
[163.34692383 92.28775024]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 47]
[2 46]
[3 45]
[4 44]
[5 17]
[7 15]
[8 14]
[9 13]
[20 43]
[21 42]
[24 41]
[25 40]
[26 39]
[28 38]
[29 37]
[30 36]
[56 69]
[57 68]
[58 67]
[59 66]
[87 97]
[88 96]
[89 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
