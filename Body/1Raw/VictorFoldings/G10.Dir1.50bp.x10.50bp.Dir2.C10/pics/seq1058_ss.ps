%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAGCCUAGCCACACCCCCACGGGAAACAGCAGUGAUUAACCUUUAGCAAUAAACGAAAGUxxxxxxxxxxAACCCCCUGGUCAACCUCAACCUAGGCCUCCUAUUUAUUCUAGCCACCUCUAGCCUAGCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[111.52248383 275.19384766]
[111.52248383 260.19384766]
[111.52248383 245.19384766]
[111.52248383 230.19384766]
[111.52248383 215.19384766]
[111.52248383 200.19384766]
[111.52248383 185.19384766]
[111.52248383 170.19384766]
[111.52248383 155.19384766]
[111.52248383 140.19384766]
[107.36460114 125.78163147]
[99.37467957 113.08670044]
[90.86359406 100.73513031]
[81.84606171 88.74829865]
[72.82852936 76.76146698]
[63.81100464 64.77462769]
[54.79347229 52.78779984]
[45.77594376 40.80096436]
[29.84525108 46.58552933]
[12.92619133 47.21006775]
[-3.35333180 42.62541580]
[-17.43028831 33.28309250]
[-27.95660210 20.09086037]
[-33.92824173 4.32453918]
[-34.78097534 -12.49538803]
[-30.44368172 -28.75039864]
[-21.34412193 -42.87967682]
[-31.09177399 -54.28070068]
[-40.83942795 -65.68171692]
[-48.84901810 -70.20922089]
[-50.66827393 -77.42282104]
[-60.17663193 -89.02416229]
[-69.68498993 -100.62550354]
[-82.34400177 -92.54553223]
[-95.86981964 -86.01953888]
[-110.07256317 -81.13912964]
[-124.75284576 -77.97281647]
[-139.70458984 -76.56504822]
[-154.71788025 -76.93559265]
[-169.58197021 -79.07924652]
[-184.08818054 -82.96591949]
[-198.03286743 -88.54103851]
[-211.22027588 -95.72634888]
[-223.46527100 -104.42097473]
[-234.59594727 -114.50285339]
[-244.45605469 -125.83045959]
[-252.90718079 -138.24476624]
[-259.83065796 -151.57150269]
[-265.12930298 -165.62356567]
[-268.72875977 -180.20370483]
[-270.57846069 -195.10722351]
[-270.65243530 -210.12490845]
[-268.94967651 -225.04592896]
[-265.49407959 -239.66082764]
[-260.33416748 -253.76441956]
[-253.54232788 -267.15872192]
[-245.21394348 -279.65570068]
[-235.46592712 -291.07992554]
[-224.43513489 -301.27099609]
[-212.27641296 -310.08584595]
[-199.16044617 -317.40075684]
[-185.27136230 -323.11300659]
[-170.80415344 -327.14242554]
[-155.96191406 -329.43243408]
[-140.95300293 -329.95089722]
[-125.98811340 -328.69055176]
[-111.27734375 -325.66903687]
[-97.02719879 -320.92880249]
[-83.43772888 -314.53640747]
[-70.69972229 -306.58157349]
[-58.99198151 -297.17596436]
[-48.47888184 -286.45166016]
[-39.30800247 -274.55917358]
[-31.60808563 -261.66546631]
[-25.48723412 -247.95153809]
[-21.03136826 -233.60993958]
[-18.30304527 -218.84197998]
[-17.34056664 -203.85498047]
[-18.15744019 -188.85934448]
[-20.74220276 -174.06558228]
[-25.05856514 -159.68138123]
[-31.04593468 -145.90866089]
[-38.62025833 -132.94078064]
[-47.67520142 -120.95977783]
[-58.08364868 -110.13385773]
[-48.57529068 -98.53251648]
[-39.06693268 -86.93117523]
[-29.43840599 -75.42937469]
[-19.69075394 -64.02835083]
[-9.94310093 -52.62733078]
[1.93065464 -58.35879898]
[14.84749317 -61.05463791]
[28.04349899 -60.55025101]
[40.73699951 -56.87044144]
[52.17485809 -50.22827148]
[61.67717743 -41.01271820]
[68.67768860 -29.76590157]
[72.75751495 -17.15119362]
[73.67022705 -3.91409206]
[71.35672760 9.16183472]
[65.94903564 21.30133629]
[57.76277542 31.78343582]
[66.78030396 43.77026749]
[75.79783630 55.75709915]
[84.81536865 67.74393463]
[93.83289337 79.73076630]
[102.85042572 91.71759796]
[105.89709473 92.38973236]
[108.75785828 94.21473694]
[110.99429321 97.12237549]
[112.20163727 100.87741089]
[112.06961060 105.09678650]
[120.05953217 117.79171753]
[119.92546844 102.79231262]
[122.95883942 88.10222626]
[129.02308655 74.38272095]
[137.84523010 62.25136566]
[149.02816772 52.25425720]
[162.06846619 44.84140778]
[176.37916565 40.34650040]
[191.31604004 38.97187042]
[206.20674133 40.77940369]
[220.38095093 45.68772507]
[233.20063782 53.47589111]
[244.08872986 63.79332733]
[252.55509949 76.17559814]
[258.21865845 90.06531525]
[260.82440186 104.83724976]
[260.25512695 119.82643890]
[256.53637695 134.35816956]
[249.83560181 147.77827454]
[240.45440674 159.48268127]
[228.81509399 168.94451904]
[215.44158936 175.73786926]
[200.93589783 179.55691528]
[185.95100403 180.22975159]
[171.16142273 177.72610474]
[157.23291016 172.15864563]
[144.79243469 163.77803040]
[134.40002441 152.96148682]
[126.52248383 140.19384766]
[126.52248383 155.19384766]
[126.52248383 170.19384766]
[126.52248383 185.19384766]
[126.52248383 200.19384766]
[126.52248383 215.19384766]
[126.52248383 230.19384766]
[126.52248383 245.19384766]
[126.52248383 260.19384766]
[126.52248383 275.19384766]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 113]
[12 112]
[13 107]
[14 106]
[15 105]
[16 104]
[17 103]
[18 102]
[27 90]
[28 89]
[29 88]
[31 87]
[32 86]
[33 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
