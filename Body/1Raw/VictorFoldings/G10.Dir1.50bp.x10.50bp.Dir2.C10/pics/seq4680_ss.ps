%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACACUCAUCACAGCGCUAAGCUCGCACUGAUUUUUUACCUGAGUAGGCCUAGAAAUAAACAxxxxxxxxxxGUAAAAAUAAAAUGACAGUUUGAACAUACAAAACCCACCCCAUUCCUCCCCACACUCAUCGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[111.07257843 263.99060059]
[111.07257843 248.99060059]
[111.07257843 233.99060059]
[111.07257843 218.99060059]
[111.07257843 203.99060059]
[111.07257843 188.99060059]
[111.07257843 173.99060059]
[111.07257843 158.99060059]
[111.07257843 143.99060059]
[111.07257843 128.99060059]
[105.33267975 124.16323090]
[91.23162842 129.27795410]
[93.85287476 114.50848389]
[88.11297607 109.68110657]
[73.33502960 112.25255585]
[58.55708694 114.82400513]
[43.77914047 117.39545441]
[29.00119591 119.96690369]
[14.51888657 123.87365723]
[0.45260501 129.08323669]
[-13.61367702 134.29281616]
[-20.27005386 148.37579346]
[-34.60947418 153.45866394]
[-47.99442673 147.02604675]
[-62.06070709 152.23562622]
[-76.12699127 157.44520569]
[-81.22182465 172.22953796]
[-94.65442657 180.23574829]
[-110.08232880 177.68351746]
[-120.22094727 165.77796936]
[-120.28314209 150.14050293]
[-110.23954010 138.15467834]
[-94.83242798 135.47981262]
[-81.33657074 143.37892151]
[-67.27028656 138.16934204]
[-53.20400620 132.95976257]
[-47.23810196 119.36036682]
[-33.04710388 113.87673187]
[-18.82325554 120.22653198]
[-4.75697374 115.01695251]
[9.30930805 109.80737305]
[-4.77589560 104.64916992]
[-13.95108795 92.78258514]
[-15.39803028 77.85253906]
[-8.67228222 64.44491577]
[4.16028595 56.67798615]
[19.15804291 56.93742752]
[31.71429825 65.14354706]
[37.97229767 78.77577209]
[36.00983810 93.64684296]
[26.42974854 105.18895721]
[41.20769119 102.61750793]
[55.98563766 100.04605865]
[70.76358032 97.47460938]
[85.54152679 94.90316010]
[98.19013214 86.84011078]
[106.75915527 74.52865601]
[115.32817841 62.21720505]
[103.82630157 52.57287216]
[93.23525238 41.93633652]
[83.64030457 30.39323616]
[75.11870575 18.03651237]
[67.73906708 4.96565771]
[61.56081772 -8.71408844]
[56.63369370 -22.89258194]
[52.99736786 -37.45566559]
[50.68111801 -52.28607941]
[49.70359421 -67.26441956]
[50.07266998 -82.27008820]
[51.78536606 -97.18225861]
[54.82789993 -111.88087463]
[59.17576981 -126.24758148]
[64.79396820 -140.16670227]
[71.63726807 -153.52618408]
[79.65055847 -166.21844482]
[88.76932526 -178.14128113]
[98.92015076 -189.19873047]
[110.02130127 -199.30172729]
[121.98339844 -208.36895752]
[134.71012878 -216.32739258]
[148.09901428 -223.11296082]
[162.04225159 -228.67103577]
[176.42759705 -232.95684814]
[191.13920593 -235.93591309]
[206.05862427 -237.58422852]
[221.06575012 -237.88853455]
[236.03973389 -236.84637451]
[250.86001587 -234.46614075]
[265.40725708 -230.76698303]
[279.56436157 -225.77871704]
[293.21731567 -219.54147339]
[306.25619507 -212.10549927]
[318.57601929 -203.53063965]
[330.07760620 -193.88595581]
[340.66833496 -183.24909973]
[350.26290894 -171.70570374]
[358.78414917 -159.34872437]
[366.16339111 -146.27764893]
[372.34121704 -132.59770203]
[377.26791382 -118.41906738]
[380.90377808 -103.85587311]
[383.21957397 -89.02538300]
[384.19665527 -74.04701233]
[383.82711792 -59.04135895]
[382.11395264 -44.12923813]
[379.07098389 -29.43071556]
[374.72268677 -15.06414223]
[369.10403442 -1.14518774]
[362.26034546 12.21407700]
[354.24667358 24.90608978]
[345.12753296 36.82865906]
[334.97637939 47.88579178]
[323.87490845 57.98845673]
[311.91253662 67.05531311]
[299.18557739 75.01335907]
[285.79647827 81.79852295]
[271.85305786 87.35617065]
[257.46759033 91.64154816]
[242.75588989 94.62016296]
[227.83641052 96.26802826]
[212.82928467 96.57186890]
[197.85533142 95.52925110]
[183.03512573 93.14855957]
[168.48799133 89.44896698]
[154.33103943 84.46025848]
[140.67828369 78.22261047]
[127.63962555 70.78622437]
[119.07060242 83.09767914]
[110.50157928 95.40913391]
[123.92403412 88.71302795]
[133.42895508 77.10886383]
[146.34518433 69.48188019]
[161.09666443 66.76273346]
[175.88339233 69.28321838]
[188.90104675 76.73578644]
[198.56117249 88.21105194]
[203.68505859 102.30877686]
[203.64743042 117.30873108]
[198.45291138 131.38058472]
[188.73535156 142.80725098]
[175.68048096 150.19442749]
[160.88130188 152.64071655]
[146.14364624 149.84762573]
[133.26396179 142.15434265]
[126.07257843 128.99060059]
[126.07257843 143.99060059]
[126.07257843 158.99060059]
[126.07257843 173.99060059]
[126.07257843 188.99060059]
[126.07257843 203.99060059]
[126.07257843 218.99060059]
[126.07257843 233.99060059]
[126.07257843 248.99060059]
[126.07257843 263.99060059]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[14 55]
[15 54]
[16 53]
[17 52]
[18 51]
[19 41]
[20 40]
[21 39]
[24 36]
[25 35]
[26 34]
[56 129]
[57 128]
[58 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
