%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACAACAACCUAUUUAGCUGUUCCCCAACCUUUUCCUCCGACCCCCUAACAACCCCCCUCxxxxxxxxxxUUCGCAGGAUUUCUCAUUACUAACAACAUUUCCCCCGCAUCCCCCUUCCAAACAACAAUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[182.97407532 96.27927399]
[168.11102295 98.30160522]
[153.24797058 100.32394409]
[138.38493347 102.34627533]
[123.52188110 104.36861420]
[108.65883636 106.39094543]
[94.87645721 112.31091309]
[83.17683411 121.69807434]
[71.47721100 131.08523560]
[59.77758408 140.47239685]
[48.07796097 149.85955811]
[36.37833786 159.24671936]
[24.67871284 168.63388062]
[12.97908974 178.02104187]
[17.26422882 192.60548401]
[15.63698673 207.71907043]
[8.34550381 221.05709839]
[-3.49832010 230.58558655]
[-18.08838844 234.85154724]
[-33.19982147 233.20442200]
[-46.52823639 225.89540100]
[-56.04114532 214.03904724]
[-60.28790283 199.44337463]
[-58.62090302 184.33412170]
[-51.29435349 171.01533508]
[-39.42550278 161.51803589]
[-24.82425880 157.29048157]
[-9.71721172 158.97735596]
[3.59192753 166.32141113]
[15.29155159 156.93424988]
[26.99117470 147.54708862]
[38.69079971 138.15992737]
[50.39042282 128.77276611]
[62.09004593 119.38561249]
[73.78967285 109.99845123]
[85.48929596 100.61128235]
[70.60866547 102.49993134]
[55.67477798 101.09319305]
[41.40858841 96.45898438]
[28.49884033 88.82102966]
[17.56877327 78.54807281]
[9.14606857 66.13606262]
[3.63734746 52.18421173]
[1.30855811 37.36609268]
[2.27212787 22.39707184]
[6.48153830 7.99982023]
[13.73357010 -5.13060379]
[23.67811584 -16.36029816]
[35.83507538 -25.14712143]
[49.61754990 -31.06687355]
[64.36015320 -33.83375931]
[79.35115051 -33.31420517]
[93.86682129 -29.53329277]
[107.20638275 -22.67355156]
[118.72584534 -13.06615639]
[127.86907196 -1.17492247]
[134.19465637 12.42607117]
[137.39720154 27.08020592]
[137.32212830 42.08001709]
[133.97302246 56.70135498]
[127.51160431 70.23834229]
[118.24979401 82.03745270]
[106.63650513 91.52790070]
[121.49954987 89.50556183]
[136.36259460 87.48323059]
[151.22564697 85.46089935]
[166.08868408 83.43856049]
[180.95173645 81.41622925]
[180.03192139 66.43753815]
[180.22084045 51.43181992]
[181.51747131 36.48103333]
[183.91470337 21.66683578]
[187.39947510 7.07013702]
[191.95272827 -7.22934055]
[197.54962158 -21.15349770]
[204.15956116 -34.62628174]
[211.74644470 -47.57411194]
[220.26885986 -59.92626953]
[229.68023682 -71.61528778]
[239.92916870 -82.57733154]
[250.95971680 -92.75252533]
[262.71157837 -102.08528900]
[275.12063599 -110.52465820]
[288.11904907 -118.02453613]
[301.63586426 -124.54396820]
[315.59725952 -130.04733276]
[329.92694092 -134.50457764]
[344.54669189 -137.89137268]
[359.37661743 -140.18919373]
[374.33578491 -141.38551331]
[389.34243774 -141.47378540]
[404.31460571 -140.45353699]
[419.17056274 -138.33032227]
[433.82913208 -135.11576843]
[448.21026611 -130.82740784]
[462.23544312 -125.48866272]
[475.82800293 -119.12870026]
[488.91375732 -111.78225708]
[501.42123413 -103.48944855]
[513.28210449 -94.29557800]
[524.43157959 -84.25086212]
[534.80877686 -73.41014862]
[544.35699463 -61.83265305]
[553.02410889 -49.58160782]
[560.76281738 -36.72393036]
[567.53076172 -23.32983589]
[573.29107666 -9.47248650]
[578.01226807 4.77243614]
[581.66851807 19.32712936]
[584.23986816 34.11210251]
[585.71228027 49.04660034]
[586.07769775 64.04905701]
[585.33416748 79.03752899]
[583.48571777 93.93016052]
[580.54248047 108.64560699]
[576.52044678 123.10350037]
[571.44165039 137.22488403]
[565.33386230 150.93260193]
[558.23034668 164.15182495]
[550.16998291 176.81031799]
[541.19677734 188.83897400]
[531.35968018 200.17207336]
[520.71252441 210.74774170]
[509.31335449 220.50819397]
[497.22448730 229.40011597]
[484.51193237 237.37498474]
[471.24514771 244.38919067]
[457.49655151 250.40446472]
[443.34124756 255.38793945]
[428.85656738 259.31237793]
[414.12161255 262.15637207]
[399.21685791 263.90438843]
[384.22372437 264.54687500]
[369.22406006 264.08032227]
[354.29983521 262.50726318]
[339.53253174 259.83630371]
[325.00280762 256.08203125]
[310.79003906 251.26493835]
[296.97183228 245.41136169]
[283.62368774 238.55323792]
[270.81845093 230.72805786]
[258.62612915 221.97853088]
[247.11325073 212.35247803]
[236.34274292 201.90243530]
[226.37339783 190.68550110]
[217.25970459 178.76293945]
[209.05139160 166.19985962]
[201.79333496 153.06488037]
[195.52514648 139.42973328]
[190.28106689 125.36890411]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 68]
[2 67]
[3 66]
[4 65]
[5 64]
[6 63]
[7 36]
[8 35]
[9 34]
[10 33]
[11 32]
[12 31]
[13 30]
[14 29]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
