%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUCACUUCCACUCCAUAACGCUCCUCAUACUAGGCCUACUAACCAACACACUAACCAUAUxxxxxxxxxxUGUCUCCAUCUAUUGAUGAGGGUCUUACUCUUUUAGUAUAAAUAGUACCGUUAACUUCCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[150.96745300 378.44363403]
[150.96745300 363.44363403]
[150.96745300 348.44363403]
[150.96745300 333.44363403]
[150.96745300 318.44363403]
[150.96745300 303.44363403]
[150.96745300 288.44363403]
[150.96745300 273.44363403]
[150.96745300 258.44363403]
[150.96745300 243.44363403]
[148.02197266 228.73567200]
[142.24569702 214.89245605]
[127.74765778 205.05340576]
[130.17109680 186.82962036]
[124.10808563 173.10955811]
[118.04507446 159.38951111]
[103.31093597 161.98205566]
[88.38445282 160.97390747]
[74.13275146 156.42361450]
[61.38375092 148.59550476]
[50.87807465 137.94436646]
[43.22602844 125.08892059]
[38.87213516 110.77599335]
[38.06932831 95.83706665]
[40.86424637 81.13996887]
[47.09452438 67.53850555]
[56.39822388 55.82281876]
[68.23487091 46.67350769]
[62.17185974 32.95345306]
[49.51674271 23.45827103]
[51.44944382 8.68958950]
[45.38643265 -5.03046370]
[39.32341766 -18.75051689]
[26.66829872 -28.24570084]
[28.60100365 -43.01438141]
[22.53798866 -56.73443604]
[16.47497559 -70.45449066]
[2.16585922 -65.90515900]
[-12.55125237 -62.92961121]
[-27.50380707 -61.56273651]
[-42.51649475 -61.82055283]
[-57.41329575 -63.70004654]
[-72.01956177 -67.17917633]
[-86.16403198 -72.21715546]
[-99.68087006 -78.75490570]
[-112.41160583 -86.71578979]
[-124.20697021 -96.00646210]
[-134.92868042 -106.51799011]
[-144.45100403 -118.12714386]
[-152.66233826 -130.69779968]
[-159.46636963 -144.08258057]
[-164.78334045 -158.12455750]
[-168.55091858 -172.65908813]
[-170.72491455 -187.51576233]
[-171.27986145 -202.52041626]
[-170.20922852 -217.49708557]
[-167.52558899 -232.27021790]
[-163.26039124 -246.66658020]
[-157.46365356 -260.51739502]
[-150.20332336 -273.66027832]
[-141.56454468 -285.94110107]
[-131.64860535 -297.21591187]
[-120.57174683 -307.35247803]
[-108.46384430 -316.23202515]
[-95.46686554 -323.75036621]
[-81.73317719 -329.81939697]
[-67.42382050 -334.36798096]
[-52.70654678 -337.34271240]
[-37.75391769 -338.70880127]
[-22.74124527 -338.45016479]
[-7.84454298 -336.56988525]
[6.76153183 -333.08996582]
[20.90573120 -328.05120850]
[34.42222214 -321.51272583]
[47.15252686 -313.55117798]
[58.94739532 -304.25985718]
[69.66853333 -293.74777222]
[79.19024658 -282.13809204]
[87.40088654 -269.56698608]
[94.20420074 -256.18185425]
[99.52041626 -242.13958740]
[103.28720856 -227.60485840]
[105.46041107 -212.74806213]
[106.01454163 -197.74339294]
[104.94310760 -182.76676941]
[102.25867462 -167.99377441]
[97.99269867 -153.59764099]
[92.19522095 -139.74714661]
[84.93418884 -126.60466003]
[76.29475403 -114.32429504]
[66.37820435 -103.05002594]
[55.30079651 -92.91403198]
[43.19241714 -84.03515625]
[30.19503021 -76.51750183]
[36.25804138 -62.79744720]
[42.32105637 -49.07739258]
[54.54251099 -40.56356049]
[53.04347229 -24.81352997]
[59.10648727 -11.09347725]
[65.16950226 2.62657690]
[77.39095306 11.14041042]
[75.89191437 26.89043999]
[81.95492554 40.61049271]
[96.68906403 38.01794052]
[111.61554718 39.02609634]
[125.86724854 43.57639313]
[138.61624146 51.40449142]
[149.12191772 62.05563736]
[156.77397156 74.91107941]
[161.12786865 89.22400665]
[161.93066406 104.16293335]
[159.13575745 118.86003113]
[152.90547180 132.46148682]
[143.60177612 144.17718506]
[131.76512146 153.32649231]
[137.82814026 167.04653931]
[143.89115906 180.76660156]
[155.65077209 186.16708374]
[160.40119934 197.77107239]
[156.08891296 209.11618042]
[161.86518860 222.95939636]
[164.17127991 208.13772583]
[170.66857910 194.61791992]
[180.80090332 183.55735779]
[193.70085144 175.90287781]
[208.26414490 172.30973816]
[223.24406433 173.08554077]
[237.35826111 178.16387939]
[249.39848328 187.11000061]
[258.33401489 199.15808105]
[263.39993286 213.27673340]
[264.16256714 228.25733948]
[260.55664062 242.81745911]
[252.89082336 255.71067810]
[241.82136536 265.83328247]
[228.29585266 272.31869507]
[213.47216797 274.61175537]
[198.61926270 272.51614380]
[185.00866699 266.21127319]
[173.80549622 256.23684692]
[165.96745300 243.44363403]
[165.96745300 258.44363403]
[165.96745300 273.44363403]
[165.96745300 288.44363403]
[165.96745300 303.44363403]
[165.96745300 318.44363403]
[165.96745300 333.44363403]
[165.96745300 348.44363403]
[165.96745300 363.44363403]
[165.96745300 378.44363403]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 121]
[12 120]
[14 117]
[15 116]
[16 115]
[28 103]
[29 102]
[31 100]
[32 99]
[33 98]
[35 96]
[36 95]
[37 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
