%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAAAAAGUAAAAGGAACUCGGCAAAUCUUACCCCGCCUGUUUACCAAAAACAUCACCUCUxxxxxxxxxxCCCCCCACCCUACCACACAUUCGAAGAACCCGUAUACAUAAAAUCUAGACAAAAAAGGAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[403.78091431 206.64073181]
[389.55410767 201.88691711]
[375.32733154 197.13310242]
[360.80401611 200.43801880]
[350.16732788 188.72599792]
[335.94055176 183.97218323]
[321.71377563 179.21836853]
[307.48699951 174.46455383]
[293.26022339 169.71073914]
[279.03344727 164.95692444]
[270.85519409 178.08212280]
[259.77792358 188.88572693]
[246.43727112 196.74198914]
[231.60018921 201.19445801]
[216.12078857 201.98246765]
[200.89114380 199.05645752]
[186.78999329 192.58103943]
[174.63194275 182.92568970]
[165.12043762 170.64376831]
[158.80705261 156.44073486]
[156.05950928 141.13365173]
[157.04031372 125.60416412]
[142.71771240 121.14734650]
[128.39511108 116.69053650]
[120.27999115 127.30774689]
[108.27861786 134.10148621]
[94.14958954 135.69311523]
[80.11775208 131.49636841]
[68.52388763 121.86321259]
[61.43522644 108.07756042]
[46.44253159 107.60951996]
[31.44983673 107.14147949]
[24.44729042 120.70345306]
[12.24873352 129.87721252]
[-2.72380400 132.84130859]
[-17.49751282 129.00721741]
[-29.13906288 119.13619995]
[-35.33701706 105.18814850]
[-34.86076355 89.93246460]
[-27.80486679 76.39817047]
[-15.57027817 67.27251434]
[-0.58618468 64.36740112]
[14.17231178 68.25964355]
[25.77490044 78.17642975]
[31.91787910 92.14878082]
[46.91057587 92.61682129]
[61.90327072 93.08486938]
[67.39030457 79.12447357]
[56.09129715 69.25875092]
[44.79229355 59.39303207]
[33.49328613 49.52730942]
[22.19428253 39.66158295]
[6.15515757 39.30659485]
[-3.45252657 26.45856094]
[0.74142319 10.97339630]
[15.51976776 4.72999287]
[29.54582596 12.51775551]
[32.06000519 28.36257935]
[43.35901260 38.22830200]
[54.65801620 48.09402466]
[65.95702362 57.95974731]
[77.25602722 67.82546997]
[98.08073425 62.26325989]
[117.77396393 68.49902344]
[130.44563293 83.66011047]
[132.85192871 102.36793518]
[147.17453003 106.82475281]
[161.49713135 111.28157043]
[168.89787292 98.72523499]
[178.91213989 88.14566040]
[191.03102112 80.07557678]
[204.63975525 74.92031860]
[219.04890442 72.93746185]
[233.52928162 74.22396088]
[247.34884644 78.71139526]
[259.80972290 86.16961670]
[270.28344727 96.21854401]
[278.24267578 108.34753418]
[283.28765869 121.94132233]
[285.16641235 136.31126404]
[283.78726196 150.73014832]
[298.01403809 155.48396301]
[312.24081421 160.23777771]
[326.46759033 164.99159241]
[340.69436646 169.74540710]
[354.92114258 174.49922180]
[370.46206665 171.53433228]
[380.08114624 182.90632629]
[394.30792236 187.66014099]
[408.53472900 192.41395569]
[414.68606567 178.71945190]
[422.17037964 165.70547485]
[430.91329956 153.50137329]
[440.82791138 142.22843933]
[451.81570435 131.99873352]
[463.76745605 122.91388702]
[476.56439209 115.06422424]
[490.07928467 108.52774811]
[504.17788696 103.36942291]
[518.72003174 99.64051056]
[533.56121826 97.37808228]
[548.55389404 96.60462189]
[563.54907227 97.32781219]
[578.39770508 99.54046631]
[592.95227051 103.22058868]
[607.06811523 108.33161163]
[620.60485840 114.82273865]
[633.42803955 122.62945557]
[645.41015625 131.67416382]
[656.43218994 141.86698914]
[666.38458252 153.10659790]
[675.16833496 165.28131104]
[682.69628906 178.27012634]
[688.89349365 191.94393921]
[693.69842529 206.16685486]
[697.06329346 220.79750061]
[698.95471191 235.69049072]
[699.35382080 250.69779968]
[698.25671387 265.67028809]
[695.67425537 280.45910645]
[691.63208008 294.91729736]
[686.17047119 308.90118408]
[679.34356689 322.27175903]
[671.21929932 334.89614868]
[661.87847900 346.64889526]
[651.41381836 357.41314697]
[639.92932129 367.08197021]
[627.53924561 375.55923462]
[614.36663818 382.76071167]
[600.54248047 388.61480713]
[586.20410156 393.06335449]
[571.49401855 396.06213379]
[556.55847168 397.58135986]
[541.54589844 397.60589600]
[526.60540771 396.13552856]
[511.88565063 393.18484497]
[497.53280640 388.78320312]
[483.68954468 382.97430420]
[470.49346924 375.81594849]
[458.07574463 367.37924194]
[446.55975342 357.74801636]
[436.05993652 347.01800537]
[426.68069458 335.29586792]
[418.51522827 322.69812012]
[411.64468384 309.34991455]
[406.13732910 295.38397217]
[402.04794312 280.93905640]
[399.41714478 266.15875244]
[398.27108765 251.18994141]
[398.62115479 236.18141174]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 90]
[2 89]
[3 88]
[5 86]
[6 85]
[7 84]
[8 83]
[9 82]
[10 81]
[22 68]
[23 67]
[24 66]
[30 47]
[31 46]
[32 45]
[48 62]
[49 61]
[50 60]
[51 59]
[52 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
