%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGGCUUCGAAGCCGCCGCCUGAUACUGGCAUUUUGUAGAUGUGGUUUGACUAUUUCUGUAUxxxxxxxxxxACCCGACCACACCGCUAACAAUCAAUACUAAACCCCCAUAAAUAGGAGAAGGCUUAGAAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[93.01813507 276.81573486]
[93.01813507 261.81573486]
[93.01813507 246.81573486]
[93.01813507 231.81573486]
[93.01813507 216.81573486]
[93.01813507 201.81573486]
[93.01813507 186.81573486]
[93.01813507 171.81573486]
[93.01813507 156.81573486]
[93.01813507 141.81573486]
[78.89333344 136.76698303]
[69.38497162 148.36831665]
[59.87661743 159.96966553]
[50.36825943 171.57099915]
[48.24279404 187.83183289]
[32.99605942 193.87078857]
[20.31258583 183.47552490]
[23.24004364 167.33978271]
[38.76691818 162.06263733]
[48.27527618 150.46130371]
[57.78363419 138.85995483]
[67.29199219 127.25862122]
[59.38990784 99.77095032]
[70.59472656 74.92641449]
[93.99996948 63.81694412]
[86.84342957 49.70685577]
[95.10346985 37.31246185]
[95.72744751 22.32544518]
[96.35142517 7.33842945]
[96.97540283 -7.64858675]
[88.05361938 -23.72284126]
[97.94770050 -38.18337631]
[98.25975800 -53.18013000]
[95.29463959 -61.88989258]
[98.73753357 -68.48474884]
[99.36151123 -83.47176361]
[99.98548889 -98.45877838]
[87.91556549 -111.07838440]
[88.65974426 -128.18774414]
[101.27371979 -139.26679993]
[101.58577728 -154.26354980]
[101.89783478 -169.26029968]
[94.44930267 -183.21846008]
[102.44969940 -195.78201294]
[102.76175690 -210.77876282]
[103.07381439 -225.77551270]
[103.07381439 -240.77551270]
[102.76175690 -255.77227783]
[100.89414215 -270.65554810]
[97.49116516 -285.26443481]
[94.08818817 -299.87332153]
[90.68521118 -314.48223877]
[87.28223419 -329.09112549]
[83.87925720 -343.70001221]
[68.84406281 -343.11734009]
[53.97034454 -345.39086914]
[39.79577637 -350.43844604]
[26.83275414 -358.07760620]
[15.54988766 -368.03216553]
[6.35504532 -379.94229126]
[-0.41938582 -393.37747192]
[-4.52851439 -407.85198975]
[-5.82379723 -422.84259033]
[-4.25841188 -437.80743408]
[0.11105477 -452.20550537]
[7.12664890 -465.51632690]
[16.53476143 -477.25869751]
[27.99529457 -487.00820923]
[41.09395981 -494.41235352]
[55.35724258 -499.20352173]
[70.26953888 -501.20849609]
[85.29177856 -500.35476685]
[99.88092041 -496.67327881]
[113.50956726 -490.29702759]
[125.68505096 -481.45654297]
[135.96725464 -470.47143555]
[143.98445129 -457.73876953]
[149.44685364 -443.71881104]
[152.15699768 -428.91842651]
[152.01689148 -413.87258911]
[149.03161621 -399.12524414]
[143.30908203 -385.20944214]
[135.05615234 -372.62829590]
[124.57117462 -361.83654785]
[112.23316956 -353.22433472]
[98.48815155 -347.10299683]
[101.89112854 -332.49411011]
[105.29410553 -317.88519287]
[108.69708252 -303.27630615]
[112.10005951 -288.66741943]
[115.50303650 -274.05853271]
[121.95510864 -287.59997559]
[134.23497009 -296.21420288]
[149.16401672 -297.67147827]
[162.87789917 -291.59454346]
[171.82684326 -279.55642700]
[173.69442749 -264.67312622]
[167.99723816 -250.79718018]
[156.20997620 -241.52030945]
[141.38372803 -239.24380493]
[127.35623932 -244.55694580]
[117.75851440 -256.08432007]
[118.07057190 -241.08757019]
[120.88336182 -237.15518188]
[121.21166229 -231.39987183]
[118.07057190 -225.46345520]
[117.75851440 -210.46670532]
[117.44645691 -195.46995544]
[124.91730499 -182.58447266]
[116.89458466 -168.94825745]
[116.58252716 -153.95149231]
[116.27046967 -138.95474243]
[126.42743683 -130.96519470]
[130.16462708 -118.39110565]
[125.89526367 -105.78157043]
[114.97250366 -97.83480072]
[114.34852600 -82.84778595]
[113.72455597 -67.86077118]
[113.25650787 -52.86807251]
[112.94445038 -37.87131882]
[121.10793304 -28.88995552]
[120.93149567 -16.35249710]
[111.96241760 -7.02460909]
[111.33843994 7.96240711]
[110.71446228 22.94942284]
[110.09048462 37.93643951]
[117.29164886 50.97455597]
[108.98698425 64.44091797]
[116.33755493 66.65636444]
[123.15190125 70.39231873]
[129.11547852 75.52066040]
[133.94404602 81.84823608]
[137.39712524 89.12398529]
[139.28971863 97.04881287]
[139.50192261 105.28788757]
[137.98564148 113.48474884]
[134.76843262 121.27674103]
[129.95388794 128.31105042]
[123.71872711 134.26065063]
[116.30649567 138.83941650]
[108.01813507 141.81573486]
[108.01813507 156.81573486]
[108.01813507 171.81573486]
[108.01813507 186.81573486]
[108.01813507 201.81573486]
[108.01813507 216.81573486]
[108.01813507 231.81573486]
[108.01813507 246.81573486]
[108.01813507 261.81573486]
[108.01813507 276.81573486]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 22]
[12 21]
[13 20]
[14 19]
[25 128]
[27 126]
[28 125]
[29 124]
[30 123]
[32 120]
[33 119]
[35 118]
[36 117]
[37 116]
[40 112]
[41 111]
[42 110]
[44 108]
[45 107]
[46 106]
[47 103]
[48 102]
[49 91]
[50 90]
[51 89]
[52 88]
[53 87]
[54 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
