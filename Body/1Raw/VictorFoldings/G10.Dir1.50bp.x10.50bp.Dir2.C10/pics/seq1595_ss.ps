%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCGCCAUCUUCAGCAAACCCUGAUGAAGGCUACAAAGUAAGCGCAAGUACCCACGUAAAGAxxxxxxxxxxUACUAACAUCUCAGACGCUCAGGAAAUAGAAACCGUCUGAACUAUCCUGCCCGCCAUCAUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[112.72814941 265.10382080]
[112.72814941 250.10382080]
[112.72814941 235.10382080]
[112.72814941 220.10382080]
[112.72814941 205.10382080]
[112.72814941 190.10382080]
[112.72814941 175.10382080]
[112.72814941 160.10382080]
[112.72814941 145.10382080]
[112.72814941 130.10382080]
[106.43392944 126.02548981]
[99.24254608 139.18922424]
[94.44339752 153.40078735]
[79.45096588 153.87721252]
[73.75918579 139.99903870]
[84.76931763 129.81130981]
[93.84548950 117.86882019]
[87.55126953 113.79048920]
[73.86064148 119.91966248]
[60.17001724 126.04883575]
[46.47938919 132.17800903]
[32.78876495 138.30718994]
[23.35478401 151.00799561]
[8.57694530 149.14660645]
[-5.11368036 155.27578735]
[-12.15263939 169.69218445]
[-27.84322548 173.03659058]
[-40.14896011 162.74346924]
[-39.62994385 146.70881653]
[-26.68431473 137.23304749]
[-11.24285412 141.58515930]
[2.44777107 135.45597839]
[10.90250778 123.19357300]
[26.65959167 124.61656189]
[40.35021591 118.48738861]
[54.04084396 112.35821533]
[67.73146820 106.22904205]
[81.42209625 100.09986877]
[80.49868011 85.12831879]
[66.15861511 80.72801208]
[51.81855774 76.32771301]
[39.49789047 85.76067352]
[23.98489571 86.11653900]
[11.24463749 77.25846863]
[6.17600584 62.59256744]
[10.72799206 47.75817871]
[23.15026474 38.45942688]
[38.66620636 38.27187347]
[51.30961990 47.26763153]
[56.21885681 61.98765182]
[70.55892181 66.38795471]
[84.89897919 70.78825378]
[99.14567566 66.09445190]
[108.06182098 54.03202057]
[116.97797394 41.96958923]
[125.39138794 29.55127716]
[133.28787231 16.79801941]
[141.18435669 4.04476213]
[131.54124451 15.53433990]
[116.97119141 19.09996796]
[103.11208344 13.36192703]
[95.32669067 0.54055065]
[96.62757111 -14.40293312]
[106.51135254 -25.68614769]
[121.15258789 -28.94314384]
[121.15258789 -43.94314194]
[112.58028412 -53.63433838]
[112.92385101 -66.16642761]
[121.45059967 -74.80106354]
[121.75857544 -89.79789734]
[107.95848083 -96.23818207]
[97.97586060 -107.73893738]
[93.54027557 -122.30757904]
[95.42021942 -137.42001343]
[103.28996277 -150.45791626]
[115.78604126 -159.16239929]
[130.74342346 -162.02534485]
[145.57066345 -158.55073547]
[157.69885254 -149.34057617]
[165.02668762 -135.99057007]
[166.28460693 -120.81369019]
[161.25463867 -106.43943024]
[150.80827332 -95.35820770]
[136.75541687 -89.48992157]
[136.44743347 -74.49308777]
[145.73493958 -59.63419342]
[136.15258789 -43.94314194]
[136.15258789 -28.94314384]
[142.27406311 -24.60984039]
[155.90103149 -30.87927246]
[154.51701355 -15.94323254]
[160.63848877 -11.60992908]
[174.78581238 -16.59525108]
[188.93312073 -21.58057213]
[203.08044434 -26.56589508]
[217.22775269 -31.55121613]
[231.37507629 -36.53653717]
[245.52238464 -41.52186203]
[245.65318298 -56.67965317]
[250.96327209 -70.87750244]
[260.81143188 -82.40093994]
[274.00842285 -89.85845947]
[288.96069336 -92.34953308]
[303.86267090 -89.57334137]
[316.91485596 -81.86513519]
[326.54113770 -70.15570831]
[331.57907104 -55.85903931]
[331.42034912 -40.70151138]
[326.08410645 -26.51347733]
[316.21475220 -15.00820637]
[303.00399780 -7.57501793]
[288.04718018 -5.11150551]
[273.15032959 -7.91515064]
[260.11239624 -15.64739895]
[250.50772095 -27.37454414]
[236.36039734 -22.38922310]
[222.21307373 -17.40390015]
[208.06576538 -12.41857815]
[193.91844177 -7.43325615]
[179.77113342 -2.44793439]
[165.62380981 2.53738761]
[153.93760681 11.94124508]
[146.04112244 24.69450188]
[138.14463806 37.44775772]
[138.70033264 40.25529099]
[138.14231873 43.45808029]
[136.31198120 46.61981201]
[133.21626282 49.25422668]
[129.04040527 50.88574219]
[120.12425232 62.94817352]
[111.20810699 75.01060486]
[121.18605804 63.81058884]
[134.64596558 57.19010162]
[149.60797119 56.12298203]
[163.87123108 60.76619720]
[175.33770752 70.43675232]
[182.32078552 83.71217346]
[183.79325867 98.63972473]
[179.53855896 113.02365875]
[170.18251038 124.74818420]
[157.10134888 132.08869934]
[142.21922302 133.96543884]
[127.72814941 130.10382080]
[127.72814941 145.10382080]
[127.72814941 160.10382080]
[127.72814941 175.10382080]
[127.72814941 190.10382080]
[127.72814941 205.10382080]
[127.72814941 220.10382080]
[127.72814941 235.10382080]
[127.72814941 250.10382080]
[127.72814941 265.10382080]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[18 38]
[19 37]
[20 36]
[21 35]
[22 34]
[24 32]
[25 31]
[39 52]
[40 51]
[41 50]
[53 131]
[54 130]
[55 129]
[56 124]
[57 123]
[58 122]
[65 88]
[66 87]
[69 85]
[70 84]
[92 121]
[93 120]
[94 119]
[95 118]
[96 117]
[97 116]
[98 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
