%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAAACCAUUUCAUAACUUUGUCAAAGUUAAAUUAUAGGCUAAAUCCUAUAUAUCUUAAUGxxxxxxxxxxGCCUGUCCUUGUAGUAUAAACUAAUACACCAGUCUUGUAAACCGGAGAUGAAAACCUUUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[94.69727325 268.57540894]
[94.38521576 253.57865906]
[94.07316589 238.58190918]
[93.76110840 223.58515930]
[93.44905090 208.58839417]
[93.13699341 193.59164429]
[92.82493591 178.59489441]
[92.51287842 163.59814453]
[92.20082855 148.60137939]
[77.92536163 143.99581909]
[68.90783691 155.98265076]
[59.89030457 167.96948242]
[50.87277603 179.95631409]
[49.42557907 196.29148865]
[34.44325256 202.95947266]
[21.33832932 193.10081482]
[23.59203148 176.85726929]
[38.88594055 170.93879700]
[47.90347290 158.95195007]
[56.92100143 146.96511841]
[65.93852997 134.97828674]
[62.48962402 127.11565399]
[60.66860580 119.15288544]
[46.25638962 123.31076813]
[31.84417534 127.46865845]
[17.43195915 131.62654114]
[3.01974320 135.78443909]
[-11.39247322 139.94232178]
[-25.80468941 144.10020447]
[-39.34715652 154.30010986]
[-52.89736557 144.11050415]
[-46.85704422 128.26907349]
[-29.96257591 129.68798828]
[-15.55036068 125.53010559]
[-1.13814414 121.37221527]
[13.27407169 117.21433258]
[27.68628883 113.05644226]
[42.09850311 108.89855194]
[56.51071930 104.74066925]
[56.26060867 99.18946838]
[56.71621704 93.65134430]
[57.87019348 88.21565247]
[59.70392227 82.97010040]
[47.09279633 74.84855652]
[34.48166656 66.72701263]
[21.87053871 58.60547256]
[9.25941086 50.48392868]
[-3.35171747 42.36238480]
[-18.74301147 45.95175934]
[-32.12006760 37.53570557]
[-35.54651260 22.10732079]
[-26.98950005 8.81999397]
[-11.52575111 5.55685854]
[1.67036331 14.25387478]
[4.76982450 29.75125885]
[17.38095284 37.87279892]
[29.99208069 45.99434280]
[42.60321045 54.11588669]
[55.21433640 62.23742676]
[67.82546234 70.35897064]
[96.36354065 56.40449905]
[126.81912994 65.43809509]
[137.91044617 55.33944321]
[149.00177002 45.24079132]
[160.09307861 35.14214325]
[145.31399536 37.70703125]
[130.53230286 35.15717697]
[117.46667480 27.78905678]
[107.63622284 16.45935059]
[102.18393707 2.48535585]
[101.74373627 -12.50818348]
[106.36682129 -26.77798080]
[115.51565552 -38.66489792]
[128.12651062 -46.78685760]
[142.73315430 -50.19952011]
[157.63725281 -48.50609970]
[171.10594177 -41.90349197]
[181.57321167 -31.15937233]
[187.82206726 -17.52295494]
[189.12593079 -2.57973051]
[185.33322144 11.93286228]
[176.88288879 24.32953453]
[190.66526794 18.40957260]
[200.29159546 5.85390949]
[215.03936768 7.94013929]
[228.82174683 2.02017593]
[227.28982544 -6.49037504]
[228.87759399 -15.69314289]
[233.83834839 -24.41392136]
[241.97969055 -31.40261841]
[252.64730835 -35.50154495]
[264.77130127 -35.81395340]
[276.66366577 -44.95568466]
[288.55606079 -54.09741974]
[300.44842529 -63.23915482]
[306.20748901 -78.59380341]
[322.42672729 -81.01635742]
[332.42117310 -68.01469421]
[325.90939331 -52.96381760]
[309.59017944 -51.34677505]
[297.69778442 -42.20503998]
[285.80541992 -33.06330490]
[273.91302490 -23.92157173]
[276.51074219 -16.88581276]
[284.30386353 4.22146702]
[299.28356934 3.44162178]
[314.26327515 2.66177678]
[329.24301147 1.88193154]
[338.51318359 -10.71163559]
[353.72164917 -14.34985828]
[367.68740845 -7.31487989]
[373.81631470 7.07159853]
[369.21441650 22.01672173]
[356.05462646 30.46385956]
[340.55059814 28.42453003]
[330.02285767 16.86164665]
[315.04312134 17.64149094]
[300.06341553 18.42133522]
[285.08370972 19.20118141]
[255.76922607 30.54243469]
[234.74171448 15.80255699]
[220.95933533 21.72252083]
[212.31881714 33.85474777]
[196.58523560 32.19195175]
[182.80285645 38.11191559]
[170.19172668 46.23345947]
[159.10041809 56.33210754]
[148.00909424 66.43075562]
[136.91778564 76.52940369]
[140.67398071 82.77772522]
[143.36956787 89.62670135]
[144.90872192 96.89582062]
[145.22636414 104.38928986]
[144.29071045 111.90136719]
[142.10466003 119.22198486]
[138.70637512 126.14264679]
[134.16888428 132.46231079]
[128.59855652 137.99327087]
[122.13269806 142.56661987]
[114.93625641 146.03747559]
[107.19757843 148.28933716]
[107.50963593 163.28608704]
[107.82169342 178.28283691]
[108.13375092 193.27958679]
[108.44580078 208.27635193]
[108.75785828 223.27310181]
[109.06991577 238.26985168]
[109.38197327 253.26660156]
[109.69403076 268.26336670]
[112.28502655 287.47106934]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 21]
[11 20]
[12 19]
[13 18]
[23 39]
[24 38]
[25 37]
[26 36]
[27 35]
[28 34]
[29 33]
[43 60]
[44 59]
[45 58]
[46 57]
[47 56]
[48 55]
[62 129]
[63 128]
[64 127]
[65 126]
[82 125]
[83 124]
[85 122]
[86 121]
[92 103]
[93 102]
[94 101]
[95 100]
[105 119]
[106 118]
[107 117]
[108 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
