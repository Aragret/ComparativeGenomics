%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUCUUCCUAGGAACAACAUAUGACGCACUCUCCCCUGAACUCUACACAACAUAUUUUGUCxxxxxxxxxxACAUCUCAGACGCUCAGGAAAUAGAAACCGUCUGAACUAUCCUGCCCGCCAUCAUCCUAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[115.53945160 420.46484375]
[115.53945160 405.46484375]
[115.53945160 390.46484375]
[115.53945160 375.46484375]
[115.53945160 360.46484375]
[115.53945160 345.46484375]
[115.53945160 330.46484375]
[115.53945160 315.46484375]
[115.53945160 300.46484375]
[115.53945160 285.46484375]
[96.84254456 280.37844849]
[80.49621582 269.94729614]
[67.98831177 255.11051941]
[60.46037674 237.20872498]
[58.60346222 217.86285400]
[62.59469986 198.82740784]
[72.08045197 181.83134460]
[86.20762634 168.42100525]
[103.70037842 159.81948853]
[100.90805054 145.08169556]
[98.11573029 130.34388733]
[95.32340240 115.60607910]
[85.57575226 104.20505524]
[71.45095062 99.15630341]
[57.32614517 94.10754395]
[43.20134354 89.05878448]
[27.60211182 91.69972992]
[18.22168159 80.13008118]
[4.09687805 75.08132172]
[-10.02792454 70.03256989]
[-24.15272713 64.98381042]
[-38.27753067 59.93505478]
[-46.27154160 72.69866943]
[-56.82277679 83.44509125]
[-69.43773651 91.67167664]
[-83.52640533 96.99366760]
[-98.42982483 99.16213226]
[-113.45092773 98.07565308]
[-127.88716125 93.78505707]
[-141.06330872 86.49100494]
[-152.36309814 76.53466797]
[-161.25802612 64.38170624]
[-167.33206177 50.60055161]
[-170.30110168 35.83576584]
[-170.02627563 20.77792740]
[-166.52044678 6.13131571]
[-159.94758606 -7.41901922]
[-150.61511230 -19.23930359]
[-138.95953369 -28.77667999]
[-125.52600098 -35.58507156]
[-110.94281769 -39.34603500]
[-95.89206696 -39.88365936]
[-81.07770538 -37.17280960]
[-67.19262695 -31.34026527]
[-54.88624954 -22.65883255]
[-44.73418045 -11.53455448]
[-37.21124268 1.51226413]
[-32.66930008 15.87140179]
[-31.32078743 30.87125397]
[-33.22877502 45.81025314]
[-19.10397148 50.85900879]
[-4.97916842 55.90776443]
[9.14563465 60.95652008]
[23.27043724 66.00527954]
[37.85936737 63.00321579]
[48.25009918 74.93398285]
[62.37490082 79.98274231]
[76.49970245 85.03149414]
[90.62451172 90.08025360]
[80.64933014 78.87776184]
[66.63924408 73.51889038]
[55.34201813 63.65113449]
[48.14795303 50.48886108]
[45.94238663 35.65189743]
[48.99674988 20.96616173]
[56.93515778 8.23895836]
[68.78066254 -0.96343160]
[83.07549286 -5.50851250]
[98.06045532 -4.83694124]
[111.89141083 0.96863401]
[122.86624908 11.19374847]
[129.63433838 24.58004189]
[131.36277771 39.48012543]
[127.83884430 54.06031418]
[119.49482727 66.52773285]
[111.77941132 79.39133453]
[124.71746826 71.80142975]
[137.65551758 64.21151733]
[150.59358215 56.62160873]
[163.53163147 49.03170013]
[176.46969604 41.44179535]
[189.40774536 33.85188675]
[186.64764404 18.94693184]
[189.15484619 3.99735928]
[196.62660217 -9.19159889]
[208.16067505 -19.02731323]
[222.36424255 -24.32207108]
[237.52215576 -24.43650627]
[251.80404663 -19.35680008]
[263.48529053 -9.69635010]
[271.15533447 3.37829518]
[273.88796997 18.28830910]
[271.35321045 33.23323822]
[263.85717773 46.40840149]
[252.30499268 56.22284317]
[238.09169006 61.49141693]
[222.93357849 61.57791901]
[208.66108704 56.47190094]
[196.99765015 46.78993988]
[184.05960083 54.37984848]
[171.12155151 61.96975708]
[158.18348694 69.55966949]
[145.24543762 77.14957428]
[132.30737305 84.73947906]
[119.36932373 92.32939148]
[134.30712891 93.69395447]
[141.84603882 106.66178894]
[135.64067078 120.31804657]
[120.91398621 123.16843414]
[110.06121063 112.81375122]
[112.85353088 127.55155945]
[115.64585876 142.28936768]
[118.43818665 157.02717590]
[129.55511475 157.21650696]
[140.47155762 159.30488586]
[150.86561584 163.22924805]
[160.43110657 168.87249756]
[168.88648987 176.06686401]
[175.98318481 184.59896851]
[181.51287842 194.21615601]
[185.31364441 204.63392639]
[187.27464294 215.54435730]
[187.33943176 226.62527466]
[185.50750732 237.54969788]
[181.83433533 247.99549866]
[176.42965698 257.65490723]
[169.45419312 266.24356079]
[161.11486816 273.50897217]
[151.65872192 279.23782349]
[141.36549377 283.26223755]
[130.53945923 285.46484375]
[130.53945923 300.46484375]
[130.53945923 315.46484375]
[130.53945923 330.46484375]
[130.53945923 345.46484375]
[130.53945923 360.46484375]
[130.53945923 375.46484375]
[130.53945923 390.46484375]
[130.53945923 405.46484375]
[130.53945923 420.46484375]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[19 123]
[20 122]
[21 121]
[22 120]
[23 69]
[24 68]
[25 67]
[26 66]
[28 64]
[29 63]
[30 62]
[31 61]
[32 60]
[86 115]
[87 114]
[88 113]
[89 112]
[90 111]
[91 110]
[92 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
