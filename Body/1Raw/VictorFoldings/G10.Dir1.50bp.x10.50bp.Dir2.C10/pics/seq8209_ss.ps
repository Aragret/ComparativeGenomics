%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUCCUAGGCCUACCCGCCGCAGUACUGAUCAUUCUAUUUCCCCCUCUAUUGAUCCCCACCUCCxxxxxxxxxxUGACCUCCGGCCUAGCCAUGUGAUUUCACUUCCACUCCAUAACGCUCCUCAUACUAGGCCUACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-57.88439178 121.78585815]
[-72.82362366 123.13471985]
[-87.76285553 124.48358154]
[-102.70207977 125.83244324]
[-117.64131165 127.18130493]
[-130.68980408 136.12821960]
[-144.06127930 129.56675720]
[-159.00051880 130.91561890]
[-173.93974304 132.26448059]
[-188.87896729 133.61334229]
[-203.81820679 134.96220398]
[-218.75743103 136.31105042]
[-233.69665527 137.65991211]
[-247.68055725 143.08677673]
[-259.61880493 152.16850281]
[-266.30868530 169.29666138]
[-283.76077271 170.89495850]
[-295.51495361 180.21374512]
[-307.26910400 189.53251648]
[-308.83428955 205.25910950]
[-321.11422729 215.20794678]
[-336.82336426 213.47656250]
[-346.64181519 201.09216309]
[-344.74444580 185.40217590]
[-332.25692749 175.71520996]
[-316.58789062 177.77836609]
[-304.83374023 168.45957947]
[-293.07955933 159.14079285]
[-291.36511230 147.13096619]
[-281.59994507 139.27470398]
[-268.70056152 140.23023987]
[-256.76229858 131.14851379]
[-271.67599487 132.75509644]
[-286.60357666 131.28282166]
[-300.91607666 126.79372406]
[-314.01052856 119.47691345]
[-325.33520508 109.64067841]
[-334.41299438 97.69941711]
[-340.86145020 84.15625000]
[-344.40887451 69.58175659]
[-344.90582275 54.58999252]
[-342.33132935 39.81257629]
[-336.79388428 25.87210464]
[-328.52679443 13.35591030]
[-317.87835693 2.79131842]
[-305.29718018 -5.37656832]
[-291.31338501 -10.80362415]
[-276.51605225 -13.26120090]
[-261.52868652 -12.64575481]
[-246.98271179 -8.98321819]
[-233.49093628 -2.42789698]
[-221.62182617 6.74402237]
[-211.87542725 18.14611435]
[-204.66236877 31.29798889]
[-200.28656006 45.64554214]
[-198.93234253 60.58428574]
[-200.65678406 75.48483276]
[-205.38723755 89.71939850]
[-212.92437744 102.68826294]
[-222.95068359 113.84502411]
[-235.04551697 122.72068787]
[-220.10629272 121.37182617]
[-205.16705322 120.02296448]
[-190.22782898 118.67411041]
[-175.28860474 117.32524872]
[-160.34936523 115.97638702]
[-145.41014099 114.62752533]
[-133.43020630 105.77708435]
[-118.99017334 112.24207306]
[-104.05094147 110.89321136]
[-89.11170959 109.54434967]
[-74.17248535 108.19548798]
[-59.23325348 106.84663391]
[-58.91609955 87.84355927]
[-56.33916092 69.01335144]
[-51.53908539 50.62377548]
[-44.58412552 32.93632507]
[-35.57318115 16.20252037]
[-24.63439369 0.66031396]
[-11.92330742 -13.46928501]
[2.37932658 -25.98535347]
[18.07012367 -36.70991516]
[34.92596054 -45.49046326]
[52.70714951 -52.20214081]
[71.16084290 -56.74950790]
[90.02462769 -59.06790161]
[109.03025818 -59.12435150]
[127.90748596 -56.91806030]
[146.38786316 -52.48039627]
[164.20861816 -45.87446594]
[181.11631775 -37.19420242]
[196.87054443 -26.56304169]
[206.53787231 -38.03224182]
[216.20521545 -49.50144577]
[221.79025269 -65.50905609]
[238.71838379 -64.57363129]
[242.50567627 -48.04811859]
[227.67442322 -39.83410645]
[218.00708008 -28.36490631]
[208.33973694 -16.89570427]
[221.76329041 -2.83874774]
[233.37591553 12.74766541]
[243.00492859 29.63172722]
[256.76049805 23.64972687]
[270.51608276 17.66772461]
[279.82965088 4.16996861]
[296.15188599 5.75640488]
[302.69186401 20.79504395]
[292.72180176 33.81542587]
[276.49807739 31.42329407]
[262.74249268 37.40529633]
[248.98693848 43.38729477]
[252.72871399 54.43635559]
[255.65229797 65.72949982]
[257.74203491 77.20624542]
[258.98672485 88.80509186]
[259.37969971 100.46392059]
[258.91885376 112.12025452]
[257.60665894 123.71166229]
[255.45014954 135.17604065]
[252.46087646 146.45198059]
[248.65484619 157.47906494]
[244.05244446 168.19824219]
[238.67832947 178.55204773]
[232.56130981 188.48506165]
[225.73413086 197.94403076]
[218.23338318 206.87831116]
[210.09922791 215.24002075]
[201.37527466 222.98439026]
[192.10823059 230.06990051]
[182.34774780 236.45861816]
[172.14611816 242.11630249]
[161.55799866 247.01264954]
[150.64010620 251.12142944]
[139.45091248 254.42062378]
[128.05038452 256.89257812]
[116.49958801 258.52401733]
[104.86040497 259.30624390]
[93.19517517 259.23504639]
[81.56640625 258.31079102]
[70.03638458 256.53845215]
[58.66688156 253.92750549]
[47.51880646 250.49195862]
[36.65188217 246.25019836]
[26.12431908 241.22496033]
[15.99252129 235.44316101]
[6.31076193 228.93576050]
[-2.86909103 221.73765564]
[-11.49785995 213.88737488]
[-19.52931976 205.42697144]
[-26.92044449 196.40179443]
[-33.63163757 186.86018372]
[-39.62694931 176.85324097]
[-44.87425995 166.43458557]
[-49.34545898 155.66003418]
[-53.01659393 144.58731079]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 73]
[2 72]
[3 71]
[4 70]
[5 69]
[7 67]
[8 66]
[9 65]
[10 64]
[11 63]
[12 62]
[13 61]
[14 32]
[15 31]
[17 28]
[18 27]
[19 26]
[92 100]
[93 99]
[94 98]
[103 112]
[104 111]
[105 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
