%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCUUCUAAACGCUAAUCCAAGCCUCACCCCACUACUAGGCCUCCUCCUAGCAGCAGCAGGxxxxxxxxxxGAAGCCUAUUCGCAGGAUUUCUCAUUACUAACAACAUUUCCCCCGCAUCCCCCUUCCAAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-4.81115532 207.48635864]
[-11.08360195 200.99073792]
[-22.67264938 210.51408386]
[-34.26169968 220.03741455]
[-45.85074615 229.56076050]
[-51.60047531 244.30020142]
[-66.34593964 246.40274048]
[-77.93498230 255.92608643]
[-89.52403259 265.44943237]
[-101.11308289 274.97274780]
[-112.70213318 284.49609375]
[-106.77556610 298.39044189]
[-105.00492096 313.39181519]
[-107.53374481 328.28414917]
[-114.15702057 341.86019897]
[-124.33784485 353.01937866]
[-137.25090027 360.85708618]
[-151.84936523 364.73797607]
[-166.94984436 364.34738159]
[-181.32817078 359.71704102]
[-193.81878662 351.22225952]
[-203.40911865 339.55166626]
[-209.32171631 325.65139771]
[-211.07728577 310.64825439]
[-208.53350830 295.75845337]
[-201.89659119 282.18908691]
[-191.70455933 271.04013062]
[-178.78364563 263.21539307]
[-164.18127441 259.34918213]
[-149.08120728 259.75491333]
[-134.70753479 264.39971924]
[-122.22546387 272.90704346]
[-110.63642120 263.38369751]
[-99.04737091 253.86036682]
[-87.45832062 244.33703613]
[-75.86927032 234.81369019]
[-70.94847107 220.75543213]
[-55.37408447 217.97171021]
[-43.78503799 208.44836426]
[-32.19598770 198.92503357]
[-20.60693932 189.40170288]
[-38.56547165 157.77809143]
[-48.39303589 122.76408386]
[-49.51296234 86.41429901]
[-41.85952759 50.86171341]
[-25.88183784 18.19254112]
[-38.03517151 9.40069866]
[-50.18850327 0.60885632]
[-62.34183502 -8.18298626]
[-74.49517059 -16.97482872]
[-90.05809021 -14.22329521]
[-102.96029663 -23.35065079]
[-105.54714203 -38.94179535]
[-96.28388214 -51.74678040]
[-80.66625977 -54.16863632]
[-67.95993042 -44.77051926]
[-65.70332336 -29.12816238]
[-53.54999542 -20.33631897]
[-41.39665985 -11.54447651]
[-29.24332809 -2.75263429]
[-17.08999443 6.03920841]
[-10.59859657 -1.52166057]
[-3.61990428 -8.63522720]
[3.81533504 -15.27014923]
[11.67436218 -21.39719391]
[19.92255020 -26.98936653]
[28.52355576 -32.02202606]
[37.43948746 -36.47299957]
[46.63105774 -40.32267380]
[56.05776978 -43.55409241]
[65.67809296 -46.15301514]
[75.44963837 -48.10799026]
[85.32934570 -49.41040421]
[95.27369690 -50.05451965]
[105.23886871 -50.03749847]
[115.18096161 -49.35941696]
[125.05616760 -48.02326202]
[134.82096863 -46.03491592]
[144.43235779 -43.40314484]
[153.84797668 -40.13954544]
[163.02635193 -36.25849152]
[171.92701721 -31.77708817]
[180.51078796 -26.71507645]
[189.17739868 -38.95803070]
[190.83561707 -54.69209671]
[204.50425720 -60.60964966]
[213.17086792 -72.85260010]
[221.83747864 -85.09555817]
[218.92630005 -100.62940979]
[227.92071533 -113.62464142]
[243.48448181 -116.37141418]
[256.38391113 -107.24010468]
[258.96597290 -91.64817047]
[249.69879150 -78.84602356]
[234.08042908 -76.42894745]
[225.41381836 -64.18599701]
[216.74720764 -51.94303894]
[215.70889282 -37.08467102]
[201.42034912 -30.29142189]
[192.75373840 -18.04846954]
[199.68298340 -12.25862885]
[206.25161743 -6.06267881]
[212.43586731 0.51696676]
[218.21336365 7.45650530]
[223.56320190 14.73083210]
[228.46604919 22.31363106]
[232.90414429 30.17747116]
[236.86145020 38.29390335]
[240.32362366 46.63356400]
[243.27816772 55.16628647]
[245.71438599 63.86119843]
[247.62347412 72.68685150]
[248.99850464 81.61130524]
[249.83450317 90.60228729]
[250.12847900 99.62727356]
[249.87933350 108.65360260]
[249.08796692 117.64862061]
[247.75727844 126.57979584]
[245.89204407 135.41482544]
[243.49902344 144.12171936]
[240.58688354 152.66900635]
[237.16615295 161.02575684]
[233.24920654 169.16174316]
[228.85020447 177.04751587]
[223.98507690 184.65457153]
[218.67141724 191.95536804]
[212.92845154 198.92350769]
[206.77694702 205.53378296]
[200.23916626 211.76226807]
[193.33876038 217.58645630]
[186.10067749 222.98524475]
[178.55113220 227.93911743]
[170.71740723 232.43016052]
[162.62785339 236.44210815]
[154.31173706 239.96046448]
[145.79913330 242.97250366]
[137.12084961 245.46731567]
[128.30827332 247.43588257]
[119.39329529 248.87107849]
[110.40815735 249.76771545]
[101.38536072 250.12254333]
[92.35755920 249.93428040]
[83.35740662 249.20362854]
[74.41745758 247.93319702]
[65.57005310 246.12759399]
[56.84720612 243.79336548]
[48.28047180 240.93894958]
[39.90083694 237.57466125]
[31.73862076 233.71267700]
[23.82334900 229.36697388]
[16.18365479 224.55326843]
[8.84717846 219.28897095]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 41]
[3 40]
[4 39]
[5 38]
[7 36]
[8 35]
[9 34]
[10 33]
[11 32]
[46 61]
[47 60]
[48 59]
[49 58]
[50 57]
[83 100]
[84 99]
[86 97]
[87 96]
[88 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
