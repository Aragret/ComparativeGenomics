%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUGCUCGCCAGAACACUACGAGCCACAGCUUAAAACUCAAAGGACCUGGCGGUGCUUCAUxxxxxxxxxxCUAAUACUAACAUCUCAGACGCUCAGGAAAUAGAAACCGUCUGAACUAUCCUGCCCGCCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.47854614 243.22064209]
[95.16648865 228.22387695]
[94.85443878 213.22712708]
[94.54238129 198.23037720]
[94.23032379 183.23362732]
[93.91826630 168.23686218]
[93.60620880 153.24011230]
[93.29415131 138.24336243]
[92.98210144 123.24660492]
[79.81351471 116.06409454]
[67.03615570 123.92152405]
[54.25880051 131.77894592]
[41.73283768 140.03123474]
[29.47047043 148.67034912]
[17.20810318 157.30946350]
[4.94573402 165.94859314]
[-7.31663418 174.58770752]
[-10.30279827 187.17883301]
[-20.74803352 194.11541748]
[-32.71904373 192.11486816]
[-45.15848541 200.49700928]
[-51.86408234 215.46253967]
[-68.20282745 216.86869812]
[-77.36682892 203.26895142]
[-69.92893982 188.65354919]
[-53.54063034 188.05757141]
[-41.10118866 179.67543030]
[-34.30062485 163.52760315]
[-15.95575047 162.32533264]
[-3.69338202 153.68621826]
[8.56898594 145.04710388]
[20.83135414 136.40798950]
[33.09372330 127.76886749]
[34.04235840 124.30945587]
[36.75193024 121.15351868]
[41.05347061 119.14128113]
[46.40137482 119.00159454]
[59.17873383 111.14416504]
[71.95609283 103.28674316]
[73.12164307 95.87786102]
[58.14140320 96.64761353]
[45.00848770 103.89512634]
[30.43641663 100.33777618]
[22.12029839 87.85410309]
[24.45164490 73.03637695]
[36.19933701 63.70944595]
[51.15974426 64.79859161]
[61.43243408 75.72804260]
[75.45274353 81.06010437]
[76.61829376 73.65122223]
[66.87064362 62.25020218]
[57.12299347 50.84918213]
[42.27416611 45.38814545]
[39.88430786 30.68651962]
[30.13665390 19.28549767]
[20.38900185 7.88447762]
[4.75570631 2.93148994]
[1.49319768 -13.13985348]
[13.95766640 -23.79673195]
[29.32673454 -18.07626343]
[31.79002380 -1.86317456]
[41.53767395 9.53784657]
[51.28532791 20.93886757]
[65.43693542 25.58442688]
[68.52401733 41.10153198]
[78.27166748 52.50255203]
[88.01931763 63.90357208]
[101.05007172 70.46181488]
[108.04467773 80.51436615]
[108.56936646 90.75588989]
[93.65917206 92.39485931]
[78.78118134 90.48557281]
[64.76796722 85.13488007]
[52.40372467 76.64221191]
[42.38035583 65.48281860]
[35.25877762 52.28118515]
[31.43751907 37.77608490]
[31.13041687 22.77922821]
[34.35465622 8.12985039]
[40.92981339 -5.35226107]
[50.48793030 -16.91264153]
[62.49413300 -25.90436172]
[76.27655029 -31.82424355]
[91.06390381 -34.34100723]
[106.02869415 -33.31380844]
[120.33347321 -28.80013657]
[133.17774963 -21.05257416]
[143.84272766 -10.50468159]
[151.73161316 2.25327635]
[156.40293884 16.50735664]
[157.59527588 31.45989227]
[155.24191284 46.27413177]
[149.47454834 60.12105942]
[140.61590576 72.22579956]
[129.16238403 81.91054535]
[143.98013306 79.57943726]
[158.79789734 77.24833679]
[173.61564636 74.91723633]
[188.43341064 72.58612823]
[203.25115967 70.25502777]
[218.06892395 67.92391968]
[220.95237732 53.04233932]
[228.75440979 40.04602432]
[240.53286743 30.50434113]
[254.86544800 25.56949806]
[270.02145386 25.83740044]
[284.17068481 31.27569771]
[295.60455322 41.22768784]
[302.94238281 54.49162292]
[305.29809570 69.46581268]
[302.38723755 84.34205627]
[294.56127930 97.32397461]
[282.76525879 106.84393311]
[268.42358398 111.75235748]
[253.26811218 111.45652008]
[239.12893677 105.99215698]
[227.71340942 96.01911163]
[220.40002441 82.74167633]
[205.58227539 85.07278442]
[190.76451111 87.40388489]
[175.94676208 89.73499298]
[161.12899780 92.06609344]
[146.31123352 94.39720154]
[131.49348450 96.72830200]
[117.71109772 102.64826965]
[132.53042603 100.32714844]
[146.21438599 94.18312836]
[161.19810486 93.48423004]
[175.39457703 98.32779694]
[186.82647705 108.03920746]
[193.90155029 121.26583099]
[195.63433838 136.16540527]
[191.78349304 150.66268921]
[182.88539124 162.73843384]
[170.17936707 170.71070862]
[155.43518066 173.46910095]
[140.70642090 170.62940979]
[128.04457092 162.58715820]
[119.21322632 150.46250916]
[115.44253540 135.94583130]
[107.97885132 122.93454742]
[108.29090881 137.93130493]
[108.60296631 152.92805481]
[108.91502380 167.92480469]
[109.22707367 182.92156982]
[109.53913116 197.91831970]
[109.85118866 212.91506958]
[110.16324615 227.91181946]
[110.47530365 242.90858459]
[113.06629944 262.11630249]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 39]
[11 38]
[12 37]
[13 33]
[14 32]
[15 31]
[16 30]
[17 29]
[20 27]
[21 26]
[50 67]
[51 66]
[52 65]
[54 63]
[55 62]
[56 61]
[70 125]
[95 124]
[96 123]
[97 122]
[98 121]
[99 120]
[100 119]
[101 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
