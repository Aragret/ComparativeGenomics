%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCGUAGACCUAACCAUCUUCUCCUUACACCUAGCAGGUGUCUCCUCUAUCUUAGGGGCCAxxxxxxxxxxCUACCUAAAACUCACAGCCCUCGCUGUCACUUUCCUAGGACUUCUAACAGCCCUAGACCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[130.65824890 329.05307007]
[130.65824890 314.05307007]
[130.65824890 299.05307007]
[130.65824890 284.05307007]
[130.65824890 269.05307007]
[130.65824890 254.05308533]
[130.65824890 239.05308533]
[130.65824890 224.05308533]
[130.65824890 209.05308533]
[130.65824890 194.05308533]
[127.40743256 179.40957642]
[121.06030273 165.81863403]
[115.34333801 161.05816650]
[114.72579193 151.87826538]
[108.66278076 138.15821838]
[102.59976196 124.43816376]
[79.37494659 118.62486267]
[69.66334534 93.60322571]
[54.84558868 91.27212524]
[40.02782822 88.94101715]
[25.21007156 86.60991669]
[10.39231396 84.27880859]
[5.32782936 96.91176605]
[-2.27887654 108.18997192]
[-12.08456612 117.60951996]
[-23.64782333 124.75025940]
[-36.44893265 129.29450989]
[-49.91323090 131.04125977]
[-63.43690491 129.91497803]
[-76.41407013 125.96892548]
[-88.26393127 119.38264465]
[-98.45674133 110.45376587]
[-106.53750610 99.58455658]
[-112.14631653 87.26383972]
[-115.03432465 74.04496765]
[-115.07482910 60.52099228]
[-129.71832275 57.27016830]
[-144.36183167 54.01934052]
[-159.00532532 50.76851654]
[-173.64883423 47.51768875]
[-188.29232788 44.26686478]
[-205.06539917 46.73682022]
[-212.08207703 31.30300331]
[-199.19381714 20.28804016]
[-185.04150391 29.62336159]
[-170.39801025 32.87418747]
[-155.75450134 36.12501526]
[-141.11100769 39.37583923]
[-126.46749878 42.62666702]
[-111.82399750 45.87749100]
[-104.46491241 31.13756371]
[-93.57433319 18.76194191]
[-79.87255859 9.57710075]
[-64.26783752 4.19822025]
[-47.79620743 2.98797941]
[-31.55267143 6.03210926]
[-16.61841774 13.13334274]
[-3.98886156 23.82418633]
[5.49270916 37.39769745]
[11.19144154 52.95422745]
[12.72341728 69.46105194]
[27.54117584 71.79216003]
[42.35893250 74.12326050]
[57.17669296 76.45436859]
[71.99445343 78.78546906]
[83.39546967 69.03781891]
[83.39546967 54.03781891]
[69.14279938 48.87669373]
[57.51687241 39.14974213]
[49.92156982 26.03154182]
[47.27406693 11.10617733]
[49.89405823 -3.82404208]
[57.46517181 -16.95621872]
[69.07315826 -26.70457649]
[83.31629181 -31.89195824]
[98.47464752 -31.89195824]
[112.71778107 -26.70457649]
[124.32576752 -16.95621872]
[131.89688110 -3.82404208]
[134.51687622 11.10617733]
[131.86936951 26.03154182]
[124.27407074 39.14974213]
[112.64813995 48.87669373]
[98.39546967 54.03781891]
[98.39546967 69.03781891]
[105.98429108 71.76605988]
[112.08861542 76.17250061]
[116.39159393 81.68885040]
[129.32965088 74.09893799]
[142.26770020 66.50903320]
[143.90243530 51.19126892]
[154.12380981 39.90513611]
[168.85667419 36.83810425]
[182.40827942 42.96119690]
[195.34632874 35.37128830]
[208.28439331 27.78137970]
[221.22244263 20.19147110]
[234.16049194 12.60156250]
[241.78651428 -1.91656148]
[258.18115234 -2.30084729]
[266.47903442 11.84402561]
[258.14398193 25.96702385]
[241.75041199 25.53961754]
[228.81234741 33.12952805]
[215.87429810 40.71943665]
[202.93623352 48.30934143]
[189.99818420 55.89925003]
[188.73051453 70.71582794]
[178.86460876 82.07927704]
[164.02578735 85.49433136]
[149.85762024 79.44709015]
[136.91955566 87.03699493]
[123.98150635 94.62690735]
[123.38896942 107.54577637]
[116.31981659 118.37515259]
[122.38283539 132.09519958]
[128.44584656 145.81526184]
[134.65124512 159.47149658]
[140.99838257 173.06245422]
[142.62031555 158.15039062]
[148.13423157 144.20060730]
[157.14624023 132.20962524]
[169.01254272 123.03404999]
[182.88540649 117.32936859]
[197.77381897 115.50312042]
[212.61418152 117.68576050]
[226.34631348 123.72136688]
[237.98922729 133.17877197]
[246.71118164 145.38235474]
[251.88911438 159.46031189]
[253.15309143 174.40696716]
[250.41285706 189.15454102]
[243.86413574 202.64952087]
[233.97476196 213.92784119]
[221.45121765 222.18379211]
[207.18815613 226.82760620]
[192.20449829 227.52754211]
[177.57063293 224.23358154]
[164.33198547 217.18106079]
[153.43429565 206.87376404]
[145.65824890 194.05308533]
[145.65824890 209.05308533]
[145.65824890 224.05308533]
[145.65824890 239.05308533]
[145.65824890 254.05308533]
[145.65824890 269.05307007]
[145.65824890 284.05307007]
[145.65824890 299.05307007]
[145.65824890 314.05307007]
[145.65824890 329.05307007]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 119]
[12 118]
[14 117]
[15 116]
[16 115]
[18 65]
[19 64]
[20 63]
[21 62]
[22 61]
[36 50]
[37 49]
[38 48]
[39 47]
[40 46]
[41 45]
[66 85]
[67 84]
[88 113]
[89 112]
[90 111]
[94 107]
[95 106]
[96 105]
[97 104]
[98 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
