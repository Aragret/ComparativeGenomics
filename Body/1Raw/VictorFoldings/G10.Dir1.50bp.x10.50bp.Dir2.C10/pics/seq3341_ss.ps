%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCAUUCUAAUCGCAAUGGCAUUCCUAAUGCUUACCGAACGAAAAAUUCUAGGCUAUAUAxxxxxxxxxxUAUUUCGCCCACUAAGCCAAUCACUUUAUUGACUCCUAGCCGCAGACCUCCUCAUUCUAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 289.48672485]
[92.50000000 274.48672485]
[92.50000000 259.48672485]
[92.50000000 244.48674011]
[92.50000000 229.48674011]
[92.50000000 214.48674011]
[92.50000000 199.48674011]
[92.50000000 184.48674011]
[92.50000000 169.48674011]
[92.50000000 154.48674011]
[80.36634827 151.37678528]
[69.25102234 145.60214233]
[59.73051071 137.46228027]
[52.29861832 127.37941742]
[47.34079742 115.87649536]
[32.52304077 118.20759583]
[17.70528221 120.53870392]
[11.05763721 132.29737854]
[-0.98196167 137.97857666]
[-13.90052891 135.70152283]
[-22.99753952 126.52322388]
[-37.86058807 128.54556274]
[-52.72363281 130.56790161]
[-57.35852814 143.80284119]
[-67.20668030 153.69247437]
[-80.29707336 158.33860779]
[-94.04454803 156.88442993]
[-105.76029205 149.67190552]
[-113.17775726 138.16362000]
[-128.07966614 139.87631226]
[-142.98156738 141.58900452]
[-157.88346863 143.30169678]
[-172.78536987 145.01438904]
[-187.83055115 152.82968140]
[-199.50534058 140.53596497]
[-190.92396545 125.91418457]
[-174.49806213 130.11247253]
[-159.59616089 128.39979553]
[-144.69425964 126.68710327]
[-129.79235840 124.97441101]
[-114.89044952 123.26171875]
[-108.84714508 108.30745697]
[-96.02455139 98.36949158]
[-79.84976959 96.22322083]
[-64.70626831 102.54540253]
[-54.74596786 115.70484924]
[-39.88291931 113.68251801]
[-25.01987457 111.66017914]
[-15.45352840 97.86369324]
[1.45897210 95.17085266]
[15.37417889 105.72094727]
[30.19193649 103.38983917]
[45.00969315 101.05873871]
[49.52978134 78.14109802]
[63.15352249 59.16629410]
[83.42350769 47.55694199]
[106.68350983 45.40709305]
[128.73796082 53.10453796]
[138.24632263 41.50319672]
[147.75466919 29.90185547]
[150.28842163 11.69306564]
[166.88821411 6.08534384]
[176.15316772 -5.71129608]
[185.41812134 -17.50793648]
[194.68307495 -29.30457687]
[203.94801331 -41.10121536]
[194.04080200 -52.41859818]
[186.38397217 -65.36035919]
[181.23704529 -79.48500061]
[178.77392578 -94.31097412]
[179.07705688 -109.33311462]
[182.13465881 -124.03984070]
[187.84114075 -137.93058777]
[196.00083923 -150.53283691]
[206.33459473 -161.41819763]
[218.48941040 -170.21693420]
[232.05049133 -176.63059998]
[246.55535889 -180.44209290]
[261.50964355 -181.52299500]
[276.40393066 -179.83798218]
[290.73114014 -175.44589233]
[304.00378418 -168.49769592]
[313.26873779 -180.29432678]
[322.53369141 -192.09097290]
[321.77825928 -205.00929260]
[329.79153442 -214.65327454]
[341.83279419 -216.17474365]
[351.34115601 -227.77607727]
[348.27029419 -243.10917664]
[355.81912231 -256.80404663]
[370.42330933 -262.39437866]
[385.18719482 -257.24060059]
[393.13973999 -243.77618408]
[390.52600098 -228.35858154]
[378.58007812 -218.26753235]
[362.94250488 -218.26773071]
[353.43414307 -206.66638184]
[351.55725098 -189.24578857]
[334.33032227 -182.82601929]
[325.06536865 -171.02938843]
[315.80041504 -159.23274231]
[325.69610596 -147.98481750]
[333.35839844 -135.10658264]
[338.52511597 -121.03589630]
[341.01892090 -106.25144958]
[340.75344849 -91.25652313]
[337.73623657 -76.56180573]
[332.06863403 -62.66806793]
[323.94232178 -50.04902649]
[313.63278198 -39.13525009]
[301.49008179 -30.29942703]
[287.92687988 -23.84366989]
[273.40451050 -19.98916054]
[258.41717529 -18.86859322]
[243.47514343 -20.52158737]
[229.08750916 -24.89330673]
[215.74465942 -31.83626747]
[206.47970581 -20.03962708]
[197.21475220 -8.24298668]
[187.94981384 3.55365324]
[178.68486023 15.35029316]
[179.80915833 27.43512917]
[172.13104248 37.34801865]
[159.35601807 39.41021347]
[149.84765625 51.01155472]
[140.33929443 62.61289597]
[145.33151245 68.85343170]
[149.36665344 75.75154877]
[152.35955811 83.16160583]
[154.24700928 90.92716217]
[154.98918152 98.88427734]
[154.57038879 106.86494446]
[152.99948120 114.70067596]
[150.30961609 122.22603607]
[146.55760193 129.28215027]
[141.82263184 135.72004700]
[136.20468140 141.40380859]
[129.82237244 146.21342468]
[122.81043243 150.04736328]
[115.31690216 152.82467651]
[107.50000000 154.48674011]
[107.50000000 169.48674011]
[107.50000000 184.48674011]
[107.50000000 199.48674011]
[107.50000000 214.48674011]
[107.50000000 229.48674011]
[107.50000000 244.48674011]
[107.50000000 259.48672485]
[107.50000000 274.48672485]
[107.50000000 289.48672485]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[15 53]
[16 52]
[17 51]
[21 48]
[22 47]
[23 46]
[29 41]
[30 40]
[31 39]
[32 38]
[33 37]
[58 126]
[59 125]
[60 124]
[62 121]
[63 120]
[64 119]
[65 118]
[66 117]
[82 101]
[83 100]
[84 99]
[87 97]
[88 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
