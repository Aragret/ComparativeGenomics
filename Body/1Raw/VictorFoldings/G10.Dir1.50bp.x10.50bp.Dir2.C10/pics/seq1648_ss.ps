%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCGAUAGCCCUUAUGAAACUUAAGGGUCGAAGGUGGAUUUAGCAGUAAACUAAGAGUAGAGxxxxxxxxxxCCUUAUCCCCAUACUAGUUAUUAUCGAAACCAUCAGCCUACUCAUUCAACCAAUAGCCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[87.06319427 273.51339722]
[87.06319427 258.51339722]
[87.06319427 243.51338196]
[87.06319427 228.51338196]
[87.06319427 213.51338196]
[87.06319427 198.51338196]
[87.06319427 183.51338196]
[87.06319427 168.51338196]
[87.06319427 153.51338196]
[87.06319427 138.51338196]
[73.97004700 131.19427490]
[61.19268417 139.05171204]
[48.41532898 146.90913391]
[45.87765503 151.61868286]
[42.14100266 154.54951477]
[38.10200882 155.54360962]
[34.58672714 154.82926941]
[21.34414291 161.87440491]
[8.10155678 168.91954041]
[-5.14102840 175.96467590]
[-18.38361359 183.00981140]
[-31.62619972 190.05494690]
[-34.69669724 205.38812256]
[-46.93704224 215.11991882]
[-62.56772232 214.65528870]
[-74.20840454 204.21360779]
[-76.36271667 188.72514343]
[-68.01345825 175.50303650]
[-53.10289383 170.79039001]
[-38.67133331 176.81236267]
[-25.42874908 169.76722717]
[-12.18616390 162.72209167]
[1.05642211 155.67695618]
[14.29900742 148.63182068]
[27.54159355 141.58668518]
[40.55790329 134.13177490]
[53.33525848 126.27435303]
[66.11261749 118.41692352]
[64.58253479 90.84065247]
[81.42253876 70.81423187]
[105.96791840 67.93999481]
[104.46888733 52.18996811]
[116.69033813 43.67613602]
[122.75334930 29.95608139]
[128.81636047 16.23602676]
[134.87937927 2.51597381]
[140.94239807 -11.20407963]
[137.69155884 -25.84758186]
[126.39256287 -35.71330261]
[115.09355927 -45.57902908]
[103.79454803 -55.44475174]
[88.37310028 -52.85381317]
[74.92044830 -60.82627487]
[69.78852081 -75.59777832]
[75.40045929 -90.19367218]
[89.10647583 -97.72222900]
[104.43501282 -94.62868500]
[114.14839935 -82.37371826]
[113.66027069 -66.74375153]
[124.95928192 -56.87803268]
[136.25828552 -47.01231003]
[147.55728149 -37.14658737]
[162.52807617 -38.08221436]
[172.51080322 -49.27798080]
[182.49353027 -60.47374725]
[192.47625732 -71.66950989]
[202.45898438 -82.86528015]
[212.44171143 -94.06104279]
[202.54397583 -105.35770416]
[194.10954285 -117.78507996]
[187.26623535 -131.15478516]
[182.11784363 -145.26412964]
[178.74237061 -159.89921570]
[177.19102478 -174.83819580]
[177.48730469 -189.85458374]
[179.62672424 -204.72073364]
[183.57684326 -219.21128845]
[189.27778625 -233.10656738]
[196.64312744 -246.19592285]
[205.56121826 -258.28094482]
[215.89685059 -269.17837524]
[227.49334717 -278.72305298]
[240.17489624 -286.77029419]
[253.74925232 -293.19808960]
[268.01065063 -297.90896606]
[282.74285889 -300.83154297]
[297.72256470 -301.92150879]
[312.72265625 -301.16232300]
[327.51577759 -298.56552124]
[341.87762451 -294.17044067]
[355.59051514 -288.04376221]
[368.44653320 -280.27828979]
[380.25082397 -270.99179077]
[390.82437134 -260.32507324]
[400.00692749 -248.43977356]
[407.65930176 -235.51611328]
[413.66543579 -221.75000000]
[417.93432617 -207.35012817]
[420.40124512 -192.53480530]
[421.02877808 -177.52861023]
[419.80743408 -162.55905151]
[416.75570679 -147.85304260]
[411.91989136 -133.63352966]
[405.37326050 -120.11608887]
[397.21505737 -107.50563812]
[387.56900024 -95.99333954]
[376.58129883 -85.75371552]
[364.41851807 -76.94200897]
[351.26501465 -69.69178772]
[337.32025146 -64.11297607]
[322.79559326 -60.29014587]
[307.91125488 -58.28124237]
[292.89285278 -58.11672592]
[277.96804810 -59.79908752]
[263.36315918 -63.30282593]
[249.29951477 -68.57482147]
[235.99037170 -75.53516388]
[223.63748169 -84.07831573]
[213.65475464 -72.88255310]
[203.67202759 -61.68678665]
[193.68930054 -50.49102020]
[183.70657349 -39.29525375]
[173.72384644 -28.09948730]
[154.66244507 -5.14106655]
[148.59942627 8.57898712]
[142.53642273 22.29903984]
[136.47340393 36.01909256]
[130.41038513 49.73914719]
[132.34309387 64.50782776]
[119.68797302 74.00301361]
[125.33882141 78.62191010]
[129.90179443 84.47043610]
[133.10946655 91.29137421]
[134.75546265 98.76948547]
[134.70692444 106.54605103]
[132.91366577 114.23605347]
[129.41308594 121.44724274]
[124.33090973 127.80010986]
[117.87724304 132.94778442]
[110.33816528 136.59472656]
[102.06319427 138.51338196]
[102.06319427 153.51338196]
[102.06319427 168.51338196]
[102.06319427 183.51338196]
[102.06319427 198.51338196]
[102.06319427 213.51338196]
[102.06319427 228.51338196]
[102.06319427 243.51338196]
[102.06319427 258.51339722]
[102.06319427 273.51339722]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 38]
[12 37]
[13 36]
[17 35]
[18 34]
[19 33]
[20 32]
[21 31]
[22 30]
[41 130]
[43 128]
[44 127]
[45 126]
[46 125]
[47 124]
[48 62]
[49 61]
[50 60]
[51 59]
[63 123]
[64 122]
[65 121]
[66 120]
[67 119]
[68 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
