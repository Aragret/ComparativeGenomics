%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCGAAGCCGCCGCCUGAUACUGGCAUUUUGUAGAUGUGGUUUGACUAUUUCUGUAUGUCUxxxxxxxxxxAUUAGCAGGAAUACCUUUCCUCACAGGUUUCUACUCCAAAGACCACAUCAUCGAAACCGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 270.33938599]
[92.50000000 255.33938599]
[92.50000000 240.33938599]
[92.50000000 225.33938599]
[92.50000000 210.33938599]
[92.50000000 195.33938599]
[92.50000000 180.33938599]
[92.50000000 165.33938599]
[92.50000000 150.33938599]
[92.50000000 135.33938599]
[81.39707184 130.96858215]
[72.32357788 123.21934509]
[59.08099365 130.26448059]
[45.83840942 137.30961609]
[32.59582138 144.35475159]
[19.50266838 151.67385864]
[6.56461143 159.26376343]
[-6.37344456 166.85366821]
[-4.63466263 181.98300171]
[-9.20605087 196.50959778]
[-19.29558945 207.91667175]
[-33.15520477 214.22784424]
[-48.38363266 214.34968567]
[-62.34245682 208.26107788]
[-72.61322784 197.01692200]
[-77.41647339 182.56532288]
[-75.91999817 167.41011047]
[-68.38307953 154.17701721]
[-56.11153412 145.15876770]
[-41.23147583 141.91780090]
[-26.32097244 145.01565552]
[-13.96335316 153.91561890]
[-1.02529681 146.32569885]
[11.91275883 138.73579407]
[13.97278023 134.36180115]
[18.83625984 131.26698303]
[25.55068779 131.11216736]
[38.79327393 124.06702423]
[52.03585815 117.02188873]
[65.27844238 109.97675323]
[66.91093445 85.50048828]
[83.79980469 67.70951080]
[108.15810394 64.80670929]
[114.50523376 51.21576309]
[120.85236359 37.62480927]
[127.19949341 24.03385925]
[133.54661560 10.44290829]
[139.89375305 -3.14804244]
[146.24087524 -16.73899269]
[152.58801270 -30.32994461]
[141.59431458 -32.86632156]
[133.18296814 -39.86669922]
[128.96369934 -49.59534073]
[129.56292725 -59.84294128]
[134.54815674 -68.42633057]
[142.58486938 -73.65357208]
[141.96089172 -88.64058685]
[141.33691406 -103.62760162]
[140.71295166 -118.61461639]
[140.08897400 -133.60163879]
[139.46499634 -148.58865356]
[138.84101868 -163.57566833]
[138.21704102 -178.56268311]
[137.59306335 -193.54969788]
[122.93161011 -197.18542480]
[109.88904572 -204.80567932]
[99.52268219 -215.79272461]
[92.67285919 -229.25588989]
[89.89487457 -244.10377502]
[91.41391754 -259.13272095]
[97.10685730 -273.12438965]
[106.51217651 -284.94458008]
[118.86743927 -293.63504028]
[133.17105103 -298.49130249]
[148.26350403 -299.11965942]
[162.92129517 -295.46920776]
[175.95619202 -287.83584595]
[186.31150818 -276.83837891]
[193.14779663 -263.36834717]
[195.91087341 -248.51770020]
[194.37672424 -233.49028015]
[188.66973877 -219.50433350]
[179.25254822 -207.69360352]
[166.88856506 -199.01554871]
[152.58007812 -194.17367554]
[153.20405579 -179.18666077]
[153.82803345 -164.19964600]
[154.45201111 -149.21263123]
[155.07598877 -134.22561646]
[155.69996643 -119.23859406]
[156.32394409 -104.25157928]
[156.94792175 -89.26456451]
[157.57189941 -74.27754974]
[170.95333862 -65.34719849]
[174.62776184 -48.01347733]
[189.27125549 -51.26430511]
[203.91476440 -54.51512909]
[218.55825806 -57.76595688]
[232.78503418 -62.51977158]
[246.44128418 -68.72517395]
[260.09753418 -74.93058777]
[272.01638794 -86.98782349]
[286.90188599 -78.87252045]
[283.22445679 -62.32220840]
[266.30291748 -61.27434158]
[252.64668274 -55.06893539]
[238.99044800 -48.86352921]
[253.53521729 -45.19615173]
[264.39309692 -34.84691238]
[268.75350952 -20.49467850]
[265.48782349 -5.85448217]
[255.44134521 5.28410482]
[241.21455383 10.03789425]
[226.49003601 7.17638159]
[215.07916260 -2.55973864]
[209.93562317 -16.65030098]
[212.39079285 -31.44800758]
[221.80908203 -43.12245560]
[207.16558838 -39.87162781]
[192.52207947 -36.62080383]
[177.87858582 -33.36997604]
[166.17895508 -23.98281479]
[159.83183289 -10.39186382]
[153.48469543 3.19908714]
[147.13757324 16.79003716]
[140.79043579 30.38098907]
[134.44331360 43.97193909]
[128.09617615 57.56288910]
[121.74905396 71.15383911]
[126.81849670 75.79482269]
[130.91726685 81.31189728]
[133.89700317 87.50537109]
[135.64985657 94.15107727]
[136.11239624 101.00848389]
[135.26786804 107.82939148]
[133.14685059 114.36692047]
[129.82611084 120.38444519]
[125.42582703 125.66416931]
[120.10527802 130.01499939]
[114.05702972 133.27944946]
[107.50000000 135.33938599]
[107.50000000 150.33938599]
[107.50000000 165.33938599]
[107.50000000 180.33938599]
[107.50000000 195.33938599]
[107.50000000 210.33938599]
[107.50000000 225.33938599]
[107.50000000 240.33938599]
[107.50000000 255.33938599]
[107.50000000 270.33938599]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 40]
[13 39]
[14 38]
[15 37]
[16 34]
[17 33]
[18 32]
[43 129]
[44 128]
[45 127]
[46 126]
[47 125]
[48 124]
[49 123]
[50 122]
[56 93]
[57 92]
[58 91]
[59 90]
[60 89]
[61 88]
[62 87]
[63 86]
[64 85]
[95 121]
[96 120]
[97 119]
[98 118]
[99 107]
[100 106]
[101 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
