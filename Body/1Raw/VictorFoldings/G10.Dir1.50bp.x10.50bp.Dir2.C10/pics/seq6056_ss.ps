%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACGCAAAUCAGCCACUUUAAUUAAGCUAAGCCCUUACUAGACCAAUGGGACUUAAACCCACAAxxxxxxxxxxAACGCUAAUCCAAGCCUCACCCCACUACUAGGCCUCCUCCUAGCAGCAGCAGGCAAAUCAGCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[98.44706726 397.36343384]
[98.44706726 382.36343384]
[98.44706726 367.36343384]
[98.44706726 352.36343384]
[98.44706726 337.36343384]
[98.44706726 322.36343384]
[98.44706726 307.36343384]
[98.44706726 292.36343384]
[98.44706726 277.36343384]
[98.44706726 262.36343384]
[82.45228577 258.36901855]
[68.00350952 250.40907288]
[56.06572342 239.00918579]
[47.43775940 224.92494202]
[42.69883347 209.09172058]
[42.16965103 192.56268311]
[45.89073944 176.43869019]
[53.61936569 161.79496765]
[64.84538269 149.60939026]
[78.82488251 140.69723511]
[94.62952423 135.65660095]
[93.72960663 120.68361664]
[78.24285889 109.27431488]
[77.10259247 88.35271454]
[93.76699829 72.98198700]
[84.09966278 61.51278687]
[74.43232727 50.04358292]
[58.92702484 48.55247116]
[49.28635406 36.78335190]
[50.80345535 22.01060867]
[41.13611984 10.54140759]
[31.46878052 -0.92779338]
[21.80144119 -12.39699459]
[13.83111095 -16.97540665]
[12.05819988 -24.19376373]
[2.62228251 -35.85409927]
[-9.13187599 -45.17288589]
[-22.63709259 -51.70045090]
[-36.14231110 -58.22801590]
[-49.64752579 -64.75558472]
[-63.21737671 -71.14770508]
[-76.85050201 -77.40373993]
[-90.48361969 -83.65977478]
[-101.88780212 -73.56697845]
[-116.41310120 -68.99144745]
[-131.54292297 -70.72590637]
[-144.65594482 -78.46986389]
[-153.48022461 -90.88162231]
[-156.48693848 -105.81077576]
[-153.15513611 -120.67075348]
[-144.06207275 -132.88697815]
[-130.78318787 -140.34291077]
[-115.61911011 -141.74678040]
[-101.19712830 -136.85533142]
[-90.01592255 -126.51605988]
[-84.01271057 -112.52029419]
[-84.22758484 -97.29289246]
[-70.59445953 -91.03685760]
[-56.96134186 -84.78082275]
[-49.52876663 -84.84982300]
[-43.11996078 -78.26079559]
[-29.61474419 -71.73323059]
[-16.10952759 -65.20566559]
[-2.60431075 -58.67810059]
[-10.90855026 -71.16968536]
[-15.76383972 -85.36215210]
[-16.85106277 -100.32270050]
[-14.09876251 -115.06803131]
[-7.68783331 -128.62899780]
[1.96036160 -140.11431885]
[14.21168804 -148.76907349]
[28.26092148 -154.02445984]
[43.18466568 -155.53504944]
[58.00204849 -153.20156860]
[71.73918915 -147.17735291]
[83.49320221 -137.85838318]
[92.49154663 -125.85715485]
[98.14280701 -111.96243286]
[100.07554626 -97.08747101]
[98.16274261 -82.20993042]
[92.53009796 -68.30764771]
[83.54783630 -56.29436874]
[71.80632019 -46.95965958]
[58.07726288 -40.91706085]
[43.26301956 -38.56371689]
[28.33726692 -40.05430984]
[14.28261948 -45.29001617]
[23.71853638 -33.62968063]
[33.27064133 -22.06433296]
[42.93798065 -10.59513187]
[52.60531998 0.87406969]
[62.27265549 12.34327126]
[77.08902740 13.34860134]
[87.05646515 24.84228706]
[85.90152740 40.37624741]
[95.56886292 51.84544754]
[105.23619843 63.31464767]
[98.20278931 50.06583023]
[98.40946198 35.06725693]
[105.80525208 22.01726341]
[118.56650543 14.13371563]
[133.54656982 13.36053658]
[147.05165100 19.88837433]
[155.75167847 32.10759735]
[157.50140381 47.00519943]
[151.86938477 60.90772629]
[140.24435425 70.38710785]
[125.49402618 73.10599518]
[140.48727417 73.55615997]
[154.51342773 66.23649597]
[167.00276184 74.35226440]
[181.99601746 74.80242920]
[196.98925781 75.25258636]
[211.98249817 75.70274353]
[226.97573853 76.15290833]
[238.30813599 65.13690186]
[254.10943604 65.44415283]
[265.00500488 76.89237976]
[264.53073120 92.68955231]
[252.96794128 103.46348572]
[237.17666626 102.82219696]
[226.52557373 91.14614868]
[211.53233337 90.69599152]
[196.53909302 90.24582672]
[181.54585266 89.79566956]
[166.55261230 89.34550476]
[153.59886169 96.69737244]
[140.03710938 88.54940033]
[125.04386902 88.09924316]
[125.58617401 102.30183411]
[119.20727539 113.80097198]
[108.70258331 119.78369904]
[109.60250092 134.75668335]
[123.01480865 136.99195862]
[135.65069580 141.99600220]
[146.94578552 149.54231262]
[156.39622498 159.29090881]
[163.58113098 170.80363464]
[168.18139648 183.56387329]
[169.99378967 196.99967957]
[168.93997192 210.50952148]
[165.06990051 223.48907471]
[158.55940247 235.35838318]
[149.70223999 245.58764648]
[138.89685059 253.72102356]
[126.62841797 259.39675903]
[113.44706726 262.36343384]
[113.44706726 277.36343384]
[113.44706726 292.36343384]
[113.44706726 307.36343384]
[113.44706726 322.36343384]
[113.44706726 337.36343384]
[113.44706726 352.36343384]
[113.44706726 367.36343384]
[113.44706726 382.36343384]
[113.44706726 397.36343384]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 156]
[2 155]
[3 154]
[4 153]
[5 152]
[6 151]
[7 150]
[8 149]
[9 148]
[10 147]
[21 133]
[22 132]
[25 97]
[26 96]
[27 95]
[30 92]
[31 91]
[32 90]
[33 89]
[35 88]
[36 87]
[37 64]
[38 63]
[39 62]
[40 61]
[41 59]
[42 58]
[43 57]
[108 129]
[109 128]
[111 126]
[112 125]
[113 124]
[114 123]
[115 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
