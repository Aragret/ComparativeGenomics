%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCAUACUACUAAUCUCAUCAAUACAACCCCCGCCCAUCCUACCCAGCACACACACACCGCUGCxxxxxxxxxxAAAAAGAGUAAUAAACUUCGCCUUAAUUUUAAUAAUCAACACCCUCCUAGCCUUACUACUAAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-32.08367157 209.90280151]
[-44.02193451 218.98452759]
[-55.96019745 228.06626892]
[-62.25899887 242.57955933]
[-77.07297516 244.12727356]
[-89.01123810 253.20899963]
[-100.94950104 262.29074097]
[-112.88776398 271.37246704]
[-124.82602692 280.45419312]
[-118.49208832 294.11785889]
[-115.24395752 308.82376099]
[-115.23355865 323.88409424]
[-118.46137238 338.59448242]
[-124.77642822 352.26687622]
[-133.88336182 364.26177979]
[-145.35621643 374.01818848]
[-158.65840149 381.07977295]
[-173.16773987 385.11624146]
[-188.20561218 385.93881226]
[-203.06866455 383.50903320]
[-217.06170654 377.94049072]
[-229.53028870 369.49368286]
[-239.89122009 358.56365967]
[-247.65989685 345.66165161]
[-252.47297668 331.39111328]
[-254.10531616 316.41949463]
[-252.48060608 301.44705200]
[-247.67480469 287.17404175]
[-239.91270447 274.26809692]
[-229.55734253 263.33279419]
[-217.09307861 254.87962341]
[-203.10285950 249.30397034]
[-188.24105835 246.86659241]
[-173.20277405 247.68150330]
[-158.69137573 251.71057129]
[-145.38558960 258.76538086]
[-133.90776062 268.51593018]
[-121.96949768 259.43420410]
[-110.03123474 250.35247803]
[-98.09297180 241.27073669]
[-86.15470886 232.18901062]
[-80.70980835 218.32530212]
[-65.04193115 216.12800598]
[-53.10366821 207.04626465]
[-41.16540527 197.96453857]
[-55.57074738 172.95521545]
[-65.58698273 145.88761902]
[-70.93151093 117.52539825]
[-71.45355988 88.66873169]
[-67.13839722 60.13175201]
[-58.10776520 32.71957397]
[-44.61644745 7.20557642]
[-27.04506683 -15.69041538]
[-5.88937140 -35.32243729]
[-14.60873795 -47.52787399]
[-23.32810402 -59.73331070]
[-32.04747009 -71.93874359]
[-47.20074081 -69.78539276]
[-61.61511612 -74.93169403]
[-71.97827148 -86.19506073]
[-75.90884399 -100.98726654]
[-72.50360107 -115.90915680]
[-62.54504776 -127.53179932]
[-48.32158661 -133.18438721]
[-33.10166931 -131.56800842]
[-20.38271713 -123.05409241]
[-13.08745384 -109.59906769]
[-12.89227581 -94.29480743]
[-19.84203339 -80.65811157]
[-11.12266827 -68.45267487]
[-2.40330219 -56.24724197]
[6.31606388 -44.04180527]
[16.06424141 -49.93168259]
[26.18119240 -55.16283417]
[36.62246704 -59.71227264]
[47.34219360 -63.56000900]
[58.29327393 -66.68914032]
[69.42758942 -69.08592224]
[80.69623566 -70.73982239]
[92.04968262 -71.64356995]
[103.43806458 -71.79319000]
[114.81134033 -71.18804169]
[126.11954498 -69.83077240]
[137.31298828 -67.72734833]
[148.34249878 -64.88700104]
[159.15962219 -61.32222748]
[169.71681213 -57.04867935]
[179.96771240 -52.08513260]
[189.86726379 -46.45339584]
[199.37197876 -40.17821121]
[208.57269287 -52.02501678]
[217.77342224 -63.87182236]
[217.20693970 -79.90486908]
[229.48216248 -90.23437500]
[245.18257141 -86.93641663]
[252.26417542 -72.54091644]
[245.29455566 -58.09086227]
[229.62022400 -54.67110062]
[220.41949463 -42.82429886]
[211.21878052 -30.97749329]
[218.51785278 -24.41157722]
[225.43000793 -17.43950081]
[231.93266296 -10.08402538]
[238.00462341 -2.36916614]
[243.62603760 5.67989206]
[248.77856445 14.03687191]
[253.44538879 22.67448997]
[257.61126709 31.56454849]
[261.26260376 40.67802429]
[264.38745117 49.98516464]
[266.97567749 59.45558548]
[269.01873779 69.05837250]
[270.51004028 78.76216888]
[271.44470215 88.53530121]
[271.81964111 98.34586334]
[271.63363647 108.16181946]
[270.88732910 117.95113373]
[269.58312988 127.68184662]
[267.72531128 137.32218933]
[265.31991577 146.84068298]
[262.37481689 156.20625305]
[258.89959717 165.38835144]
[254.90565491 174.35696411]
[250.40600586 183.08282471]
[245.41532898 191.53746033]
[239.94990540 199.69325256]
[234.02761841 207.52357483]
[227.66777039 215.00288391]
[220.89112854 222.10675049]
[213.71981812 228.81196594]
[206.17726135 235.09666443]
[198.28807068 240.94032288]
[190.07800293 246.32386780]
[181.57386780 251.22970581]
[172.80342102 255.64184570]
[163.79530334 259.54586792]
[154.57890320 262.92901611]
[145.18432617 265.78027344]
[135.64224243 268.09030151]
[125.98379517 269.85159302]
[116.24052429 271.05838013]
[106.44423676 271.70669556]
[96.62690735 271.79449463]
[86.82058716 271.32141113]
[77.05729675 270.28903198]
[67.36890411 268.70071411]
[57.78704071 266.56167603]
[48.34298706 263.87884521]
[39.06757736 260.66101074]
[29.99108887 256.91867065]
[21.14315414 252.66407776]
[12.55265808 247.91107178]
[4.24764776 242.67518616]
[-3.74476576 236.97352600]
[-11.39848995 230.82467651]
[-18.68853760 224.24874878]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 45]
[2 44]
[3 43]
[5 41]
[6 40]
[7 39]
[8 38]
[9 37]
[54 72]
[55 71]
[56 70]
[57 69]
[90 100]
[91 99]
[92 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
