%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUACCGCAAGGGAAAGAUGAAAAAUUAUAACCAAGCAUAAUAUAGCAAGGACUAACCCCUAxxxxxxxxxxAGUGAUUAUAGGCUUUCGCUCUAAGAUUAAAAAUGCCCUAGCCCACUUCUUACCACAAGGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[233.00845337 406.92184448]
[233.00845337 391.92184448]
[233.00845337 376.92184448]
[233.00845337 361.92184448]
[233.00845337 346.92184448]
[233.00845337 331.92184448]
[233.00845337 316.92184448]
[233.00845337 301.92184448]
[233.00845337 286.92184448]
[233.00845337 271.92184448]
[229.91012573 257.24530029]
[223.84712219 243.52526855]
[209.90722656 238.40519714]
[203.56301880 224.57748413]
[209.02792358 209.99076843]
[202.96490479 196.27070618]
[196.90190125 182.55065918]
[189.04446411 169.77330017]
[179.53611755 158.17195129]
[165.48420715 153.23300171]
[162.72061157 137.65502930]
[153.21224976 126.05368805]
[143.70390320 114.45234680]
[134.19554138 102.85100555]
[124.68717957 91.24966431]
[106.66587830 121.13655090]
[82.52530670 104.84315491]
[67.70754242 102.51204681]
[55.01659393 111.54407501]
[40.02248764 108.96891785]
[31.49004173 96.81437683]
[16.65510368 102.31302643]
[5.28489161 92.69182587]
[-9.53286648 90.36072540]
[-24.35062408 88.02961731]
[-39.16838455 85.69851685]
[-53.98614120 83.36740875]
[-64.85121918 94.44575500]
[-80.15848541 96.98879242]
[-94.02200317 90.01866913]
[-101.11094666 76.21553802]
[-98.69948578 60.88698196]
[-87.71487427 49.92715454]
[-72.38091278 47.55032349]
[-58.59383011 54.67043304]
[-51.65503693 68.54965210]
[-36.83728027 70.88075256]
[-22.01952171 73.21186066]
[-7.20176268 75.54296112]
[7.61599541 77.87406921]
[21.39106750 72.20867920]
[33.82114410 81.99661255]
[45.67335510 73.04895020]
[60.73387527 75.20193481]
[70.03865051 87.69429016]
[84.85640717 90.02539825]
[85.97505951 82.83932495]
[90.23576355 75.69598389]
[82.24584961 63.00105667]
[66.98425293 58.05502701]
[61.47085190 42.98910522]
[69.93505859 29.36057854]
[85.88385773 27.62408447]
[97.08269501 39.11171341]
[94.94078064 55.01113892]
[102.93069458 67.70606995]
[117.63865662 64.76058960]
[120.12377167 49.96788025]
[122.60889435 35.17517471]
[125.09400940 20.38246727]
[111.67136383 13.40480709]
[101.06333160 2.61941051]
[94.30917358 -10.91707897]
[92.07060242 -25.87849617]
[94.56691742 -40.79907227]
[101.55357361 -54.21704102]
[112.34607697 -64.81784821]
[125.88708496 -71.56292725]
[140.85000610 -73.79148102]
[155.76890564 -71.28515625]
[169.18218994 -64.28952026]
[179.77575684 -53.48991394]
[186.51176453 -39.94438553]
[188.73028564 -24.97998428]
[186.21397400 -10.06276703]
[179.20935059 3.34582639]
[168.40264893 13.93215942]
[154.85260010 20.65909004]
[139.88671875 22.86758423]
[137.40159607 37.66029358]
[134.91648865 52.45299911]
[132.43136597 67.24570465]
[136.28852844 81.74130249]
[145.79687500 93.34264374]
[155.30523682 104.94398499]
[164.81359863 116.54532623]
[174.32196045 128.14666748]
[189.05395508 133.91543579]
[191.13745117 148.66358948]
[200.64581299 160.26493835]
[199.39640808 145.31706238]
[204.22785950 131.11645508]
[214.33415222 120.03210449]
[228.02934265 113.91312408]
[243.02874756 113.78030396]
[256.83013916 119.65578461]
[267.13116455 130.55941772]
[272.21331787 144.67224121]
[271.22885132 159.63989258]
[264.34194946 172.96545410]
[252.70152283 182.42591858]
[238.24943542 186.44306946]
[223.39665222 184.34674072]
[210.62194824 176.48764038]
[216.68496704 190.20768738]
[222.74797058 203.92774963]
[237.21292114 209.70729065]
[243.16622925 223.70774841]
[237.56716919 237.46224976]
[243.63018799 251.18229675]
[245.58616638 236.31037903]
[251.57968140 222.55982971]
[261.14300537 211.00373840]
[273.52978516 202.54399109]
[287.77337646 197.84075928]
[302.76217651 197.26110840]
[317.32644653 200.85025024]
[330.32955933 208.32812500]
[340.75680542 219.11111450]
[347.79437256 232.35771179]
[350.89306641 247.03416443]
[349.81106567 261.99508667]
[344.63278198 276.07293701]
[335.76235962 288.16903687]
[323.89205933 297.33941650]
[309.94824219 302.86840820]
[295.01907349 304.32452393]
[280.26968384 301.59414673]
[266.85107422 294.89031982]
[255.81048584 284.73623657]
[248.00845337 271.92184448]
[248.00845337 286.92184448]
[248.00845337 301.92184448]
[248.00845337 316.92184448]
[248.00845337 331.92184448]
[248.00845337 346.92184448]
[248.00845337 361.92184448]
[248.00845337 376.92184448]
[248.00845337 391.92184448]
[248.00845337 406.92184448]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 120]
[12 119]
[15 116]
[16 115]
[17 114]
[18 100]
[19 99]
[21 97]
[22 96]
[23 95]
[24 94]
[25 93]
[27 56]
[28 55]
[31 52]
[33 50]
[34 49]
[35 48]
[36 47]
[37 46]
[58 66]
[59 65]
[67 92]
[68 91]
[69 90]
[70 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
