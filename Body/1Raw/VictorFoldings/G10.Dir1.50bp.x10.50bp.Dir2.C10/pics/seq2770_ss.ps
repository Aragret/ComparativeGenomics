%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCCUUAAAUAGGGACCUGUAUGAAUGGCUCCACGAGGGUUCAGCUGUCUCUUACUUUUAAxxxxxxxxxxCACUAUCACGAAAAAAACUCUACCUCUCUAUACUAAUCUCCCUACAAAUCUCCUUAAUUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[116.64163208 223.30326843]
[116.01765442 208.31625366]
[115.39367676 193.32923889]
[114.76969910 178.34222412]
[114.14572144 163.35520935]
[113.52174377 148.36819458]
[112.89776611 133.38117981]
[112.27378845 118.39415741]
[98.14898682 113.34540558]
[88.16625977 124.54116821]
[78.18353271 135.73693848]
[68.20080566 146.93270874]
[58.21807861 158.12846375]
[61.64936829 173.26141357]
[55.49949265 187.50776672]
[42.13320923 195.38952637]
[26.69012451 193.87597656]
[15.10842228 183.54913330]
[11.84150124 168.37986755]
[18.14555931 154.20106506]
[31.59655952 146.46476746]
[47.02231598 148.14573669]
[57.00503922 136.94998169]
[66.98777008 125.75421143]
[76.97049713 114.55844116]
[86.95321655 103.36267853]
[92.58517456 89.46012115]
[93.20915222 74.47310638]
[93.83312988 59.48608780]
[85.14381409 71.71293640]
[72.68043518 80.05944061]
[58.06602859 83.43867493]
[43.20376968 81.41057587]
[30.02909088 74.23925018]
[20.25766754 62.85859680]
[15.16198826 48.75065231]
[15.40563679 33.75263214]
[20.95688438 19.81765366]
[31.09281731 8.76040077]
[44.49348450 2.02080631]
[59.41378021 0.47653604]
[73.91070557 4.32869244]
[86.09639740 13.07562828]
[94.38397980 25.57827187]
[97.69411469 40.20668793]
[102.88952637 26.13516998]
[108.08494568 12.06365108]
[113.28035736 -2.00786853]
[99.69889832 -8.39734364]
[86.71698761 -15.93070412]
[74.43074799 -24.55217361]
[62.93114090 -34.19791794]
[52.30330276 -44.79652786]
[42.62592316 -56.26953125]
[33.97064972 -68.53198242]
[26.40156746 -81.49309540]
[19.97471428 -95.05690765]
[14.73767090 -109.12299347]
[10.72921371 -123.58721161]
[7.97902060 -138.34248352]
[6.50745249 -153.27954102]
[6.32540464 -168.28782654]
[7.43422508 -183.25617981]
[9.82570457 -198.07382202]
[13.48213673 -212.63101196]
[18.37644958 -226.81999207]
[24.47240829 -240.53570557]
[31.72487831 -253.67660522]
[40.08016586 -266.14538574]
[49.47640610 -277.84976196]
[59.84403610 -288.70303345]
[71.10629272 -298.62487793]
[83.17979431 -307.54180908]
[95.97515869 -315.38784790]
[109.39763641 -322.10488892]
[123.34786224 -327.64318848]
[137.72254944 -331.96173096]
[152.41526794 -335.02856445]
[167.31723022 -336.82098389]
[182.31811523 -337.32571411]
[197.30686951 -336.53900146]
[212.17250061 -334.46670532]
[226.80494690 -331.12414551]
[241.09590149 -326.53607178]
[254.93951416 -320.73641968]
[268.23330688 -313.76821899]
[280.87887573 -305.68295288]
[292.78259277 -296.54058838]
[303.85629272 -286.40872192]
[314.01800537 -275.36242676]
[323.19250488 -263.48342896]
[331.31185913 -250.85975647]
[338.31597900 -237.58480835]
[344.15295410 -223.75689697]
[348.77960205 -209.47839355]
[352.16165161 -194.85502625]
[354.27410889 -179.99504089]
[355.10125732 -165.00846863]
[354.63705444 -150.00627136]
[352.88488770 -135.09951782]
[349.85772705 -120.39857483]
[345.57800293 -106.01228333]
[340.07739258 -92.04715729]
[333.39663696 -78.60659027]
[325.58517456 -65.79009247]
[316.70086670 -53.69255829]
[306.80947876 -42.40354919]
[295.98422241 -32.00665283]
[284.30526733 -22.57884026]
[271.85910034 -14.18991661]
[258.73782349 -6.90198994]
[245.03862000 -0.76901919]
[230.86291504 4.16358900]
[216.31564331 7.85931444]
[201.50451660 10.29079437]
[186.53919983 11.44002819]
[171.53048706 11.29850578]
[156.58950806 9.86727524]
[141.82687378 7.15693331]
[127.35187531 3.18754697]
[122.15646362 17.25906563]
[116.96104431 31.33058548]
[111.76563263 45.40210342]
[108.82014465 60.11006546]
[108.19616699 75.09708405]
[107.57219696 90.08409882]
[115.30494690 77.23090363]
[123.67443085 64.78294373]
[135.94499207 56.15546799]
[150.49066162 52.49169159]
[165.38403320 54.27709961]
[178.65158081 61.27510452]
[188.53524780 72.55841827]
[193.72535706 86.63189697]
[193.53417969 101.63067627]
[187.98704529 115.56729126]
[177.81900024 126.59501648]
[164.37738037 133.25257874]
[149.44334412 134.65780640]
[134.99356079 130.62338257]
[127.26080322 117.77017975]
[127.88478088 132.75720215]
[128.50875854 147.74421692]
[129.13273621 162.73123169]
[129.75671387 177.71824646]
[130.38069153 192.70526123]
[131.00466919 207.69227600]
[131.62864685 222.67929077]
[138.32864380 238.25320435]
[125.21810913 249.00263977]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 148]
[2 147]
[3 146]
[4 145]
[5 144]
[6 143]
[7 142]
[8 141]
[9 26]
[10 25]
[11 24]
[12 23]
[13 22]
[27 126]
[28 125]
[29 124]
[45 123]
[46 122]
[47 121]
[48 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
