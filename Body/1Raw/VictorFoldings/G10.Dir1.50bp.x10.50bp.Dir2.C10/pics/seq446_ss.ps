%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGAACCCUAACACCAGCCUAACCAGAUUUCAAAUUUUAUCUUUUGGCGGUAUGCACUUUUAAxxxxxxxxxxCAUAAUGACCCACCAAUCACAUGCCUAUCAUAUAGUAAAACCCAGCCCAUGACCCCUAACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.50518799 277.29794312]
[98.09096527 258.08950806]
[98.39894104 243.09268188]
[98.70691681 228.09584045]
[99.01489258 213.09899902]
[99.32286835 198.10217285]
[99.63085175 183.10533142]
[99.93882751 168.10848999]
[100.24680328 153.11164856]
[100.55477905 138.11482239]
[100.86276245 123.11798096]
[93.40261841 136.13128662]
[89.57832336 150.63558960]
[78.10819244 160.30181885]
[63.16560364 161.61294556]
[50.18739319 154.09190369]
[43.89566040 140.47521973]
[46.57963562 125.71730042]
[57.26276398 115.18778229]
[72.05847168 112.71788025]
[85.70460510 106.49028015]
[70.74332428 105.41320801]
[55.78204727 104.33613586]
[46.93531799 106.85231781]
[40.52565765 103.08026123]
[25.58964348 101.69623566]
[10.65363121 100.31221008]
[-3.80157971 106.74317932]
[-15.76065159 97.86456299]
[-30.69666481 96.48053741]
[-36.94541550 98.92915344]
[-42.62341309 97.95539093]
[-46.21314240 94.72072601]
[-61.07974243 92.72467041]
[-75.94634247 90.72861481]
[-90.81294250 88.73255157]
[-100.13042450 100.94239044]
[-114.31069183 106.84285736]
[-129.53932190 104.84677124]
[-141.71989441 95.49105835]
[-147.57588196 81.29235840]
[-145.53207397 66.07006073]
[-136.13822937 53.91888046]
[-121.92124176 48.10742188]
[-106.70542908 50.19894028]
[-94.58374786 59.63082886]
[-88.81687927 73.86595917]
[-73.95028687 75.86201477]
[-59.08368301 77.85807037]
[-44.21708679 79.85412598]
[-29.31263924 81.54452515]
[-14.37662601 82.92855072]
[-0.98973840 76.39858246]
[12.03765678 85.37619781]
[26.97366905 86.76021576]
[41.90968323 88.14424133]
[56.85911560 89.37485504]
[71.82039642 90.45192719]
[86.78167725 91.52899933]
[100.82365417 86.25425720]
[111.37567139 75.59334564]
[121.92768097 64.93243408]
[122.01642609 49.35585785]
[132.86953735 38.69449615]
[147.71887207 38.87508774]
[158.27088928 28.21417809]
[168.37632751 17.12904549]
[178.01814270 5.63837814]
[187.65995789 -5.85228872]
[197.30177307 -17.34295464]
[188.08276367 -29.88007736]
[182.12149048 -44.24536514]
[179.75781250 -59.60897446]
[181.12390137 -75.08445740]
[186.13685608 -89.77991486]
[194.50372314 -102.84939575]
[205.73858643 -113.54159546]
[219.19084167 -121.24304962]
[234.08279419 -125.51331329]
[249.55468750 -126.11018372]
[264.71429443 -123.00337982]
[278.68841553 -116.37610626]
[288.09225464 -128.06231689]
[297.49612427 -139.74851990]
[296.89324951 -152.67292786]
[305.01757812 -162.22103882]
[317.07385254 -163.60250854]
[326.71566772 -175.09317017]
[336.35748291 -186.58383179]
[332.47305298 -201.60684204]
[338.19207764 -216.03155518]
[351.31549072 -224.31137085]
[366.79708862 -223.26254272]
[378.68383789 -213.28836060]
[382.40509033 -198.22410583]
[376.52990723 -183.86227417]
[363.31744385 -175.72531128]
[347.84814453 -176.94201660]
[338.20632935 -165.45135498]
[328.56451416 -153.96069336]
[326.48486328 -136.56184387]
[309.18231201 -130.34466553]
[299.77847290 -118.65846252]
[290.37460327 -106.97225189]
[299.32400513 -95.58483124]
[305.50595093 -82.47884369]
[308.60482788 -68.31555176]
[308.46060181 -53.81040573]
[305.07727051 -39.69688416]
[298.62258911 -26.68941689]
[289.41992188 -15.44721508]
[277.93203735 -6.54087067]
[264.73770142 -0.42338842]
[250.50271606 2.59285045]
[235.94613647 2.35203934]
[221.80407715 -1.13700974]
[208.79243469 -7.70114088]
[199.15061951 3.78952575]
[189.50880432 15.28019238]
[179.86698914 26.77085876]
[180.01481628 29.62903595]
[179.00379944 32.71886826]
[176.73944092 35.58582306]
[173.29829407 37.74964905]
[168.93180847 38.76619339]
[158.37979126 49.42710114]
[158.71281433 64.27381134]
[148.16343689 75.23580170]
[132.58859253 75.48445129]
[122.03657532 86.14536285]
[111.48456573 96.80626678]
[125.85594177 92.50934601]
[139.05006409 85.37387848]
[154.04673767 85.05762482]
[167.52995300 91.63052368]
[176.51837158 103.63919067]
[179.02453613 118.42834473]
[174.49429321 132.72789001]
[163.92933655 143.37597656]
[149.66574097 148.01814270]
[134.85739136 145.62796021]
[122.77919006 136.73457336]
[115.85959625 123.42595673]
[115.55162048 138.42279053]
[115.24364471 153.41963196]
[114.93566895 168.41647339]
[114.62768555 183.41331482]
[114.31970978 198.41014099]
[114.01173401 213.40698242]
[113.70375824 228.40382385]
[113.39577484 243.40066528]
[113.08779907 258.39749146]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 152]
[3 151]
[4 150]
[5 149]
[6 148]
[7 147]
[8 146]
[9 145]
[10 144]
[11 143]
[21 59]
[22 58]
[23 57]
[25 56]
[26 55]
[27 54]
[29 52]
[30 51]
[33 50]
[34 49]
[35 48]
[36 47]
[60 131]
[61 130]
[62 129]
[65 126]
[66 125]
[67 120]
[68 119]
[69 118]
[70 117]
[82 104]
[83 103]
[84 102]
[87 100]
[88 99]
[89 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
