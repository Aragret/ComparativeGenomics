%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCUAAGCCUCCUUAUUCGAGCCGAGCUGGGCCAGCCAGGCAACCUUCUAGGUAACGACCAxxxxxxxxxxCUACACUCCAACUCAUGAGACCCACAACAAAUAGCCCUUCUAAACGCUAAUCCAAGCCUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[98.92236328 202.99697876]
[97.98673248 188.02619934]
[97.05110168 173.05540466]
[96.11547852 158.08460999]
[95.17984772 143.11381531]
[94.24421692 128.14302063]
[93.30859375 113.17223358]
[86.82042694 99.64804840]
[75.72911072 89.54939270]
[64.63779449 79.45074463]
[53.54647827 69.35209656]
[42.45516586 59.25344467]
[31.36384964 49.15479660]
[16.37115288 49.62284088]
[5.93134069 60.39364624]
[-4.50847149 71.16445923]
[-7.97825909 87.19232941]
[-23.67421532 91.94300842]
[-35.44968796 80.52940369]
[-31.19107819 64.69285583]
[-15.27927971 60.72464371]
[-4.83946753 49.95383453]
[5.60034466 39.18302536]
[6.53597307 24.21223450]
[-2.48155665 12.22540283]
[-14.46838951 3.20787263]
[-28.48510170 -2.13364005]
[-42.50181580 -7.47515249]
[-61.11635971 6.48435307]
[-88.69666290 -3.86032605]
[-103.63097382 -5.26262951]
[-118.56527710 -6.66493320]
[-130.66813660 3.14110589]
[-145.79368591 1.50622571]
[-155.06765747 -10.09243774]
[-170.00195312 -11.49474144]
[-184.93626404 -12.89704514]
[-199.87057495 -14.29934883]
[-216.20559692 -9.76024055]
[-225.08929443 -24.20033073]
[-213.67279053 -36.73426819]
[-198.46827698 -29.23365593]
[-183.53396606 -27.83135223]
[-168.59965515 -26.42904854]
[-153.66534424 -25.02674484]
[-142.39433289 -34.69627380]
[-127.22884369 -33.48688126]
[-117.16297150 -21.59924126]
[-102.22866821 -20.19693756]
[-87.29435730 -18.79463387]
[-80.80591583 -32.31942749]
[-74.31803131 -45.84301376]
[-84.75784302 -56.61382294]
[-95.19765472 -67.38462830]
[-105.63746643 -78.15544128]
[-121.00289917 -85.32061005]
[-118.37132263 -102.06907654]
[-101.54889679 -104.17678070]
[-94.86666107 -88.59525299]
[-84.42684174 -77.82444000]
[-73.98703003 -67.05363464]
[-63.54721832 -56.28282547]
[-45.75401306 -49.30331421]
[-36.60586548 -35.50698853]
[-37.16030121 -21.49186516]
[-23.14358902 -16.15035248]
[-9.12687683 -10.80884075]
[-18.25117493 -22.71460342]
[-24.65836334 -36.27734375]
[-28.06002617 -50.88654327]
[-28.30303955 -65.88457489]
[-25.37646484 -80.59630585]
[-19.41203880 -94.35950470]
[-10.67824650 -106.55462646]
[0.43176225 -116.63270569]
[13.41787815 -124.14009094]
[27.69553757 -128.73883057]
[42.62203598 -130.22192383]
[57.52547073 -128.52261353]
[71.73497009 -123.71739197]
[84.61089325 -116.02255249]
[95.57364655 -105.78447723]
[104.12973785 -93.46404266]
[109.89403534 -79.61582947]
[112.60704041 -64.86322021]
[112.14664459 -49.87028503]
[108.53356934 -35.31193161]
[101.93045044 -21.84349251]
[92.63452911 -10.07124519]
[81.06424713 -0.52510971]
[67.74044800 6.36519909]
[53.26288986 10.28951740]
[38.28327179 11.07119465]
[23.47589302 8.67504311]
[9.50527573 3.20787263]
[18.52280617 15.19470501]
[36.91155243 19.51211739]
[41.46249771 38.06348038]
[52.55381393 48.16213226]
[63.64513016 58.26078033]
[74.73644257 68.35942841]
[85.82775879 78.45807648]
[96.91907501 88.55673218]
[86.58282471 77.68650055]
[83.09529877 63.09755707]
[87.39786530 48.72787094]
[98.32914734 38.45621109]
[112.93849945 35.05518341]
[127.28244019 39.44282150]
[137.48915100 50.43477631]
[140.80355835 65.06401825]
[136.32948303 79.38410950]
[150.65206909 83.84092712]
[164.97467041 88.29774475]
[179.29727173 92.75455475]
[190.52738953 82.27696228]
[205.49536133 78.83380127]
[220.17488098 83.35125732]
[230.61721802 94.61416626]
[234.01344299 109.59285736]
[229.44999695 124.25814056]
[218.15441895 134.66513062]
[203.16514587 138.01438904]
[188.51425171 133.40499878]
[178.14271545 122.07684326]
[174.84045410 107.07715607]
[160.51785278 102.62033844]
[146.19526672 98.16352081]
[131.87266541 93.70671082]
[125.97434235 98.33917999]
[136.40689087 109.11702728]
[146.83944702 119.89486694]
[160.82046509 125.32912445]
[166.07716370 139.37786865]
[159.09754944 152.65509033]
[144.54469299 156.29028320]
[132.14140320 147.85473633]
[130.17465210 132.98321533]
[122.17617035 120.29367065]
[114.17770386 107.60413361]
[108.27938080 112.23660278]
[109.21501160 127.20739746]
[110.15064240 142.17819214]
[111.08626556 157.14898682]
[112.02189636 172.11976624]
[112.95752716 187.09056091]
[113.89315033 202.06135559]
[123.40848541 215.41764832]
[116.35404205 230.22192383]
[99.98682404 231.24482727]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 147]
[2 146]
[3 145]
[4 144]
[5 143]
[6 142]
[7 141]
[8 103]
[9 102]
[10 101]
[11 100]
[12 99]
[13 98]
[14 23]
[15 22]
[16 21]
[24 96]
[25 95]
[26 67]
[27 66]
[28 65]
[30 50]
[31 49]
[32 48]
[35 45]
[36 44]
[37 43]
[38 42]
[52 62]
[53 61]
[54 60]
[55 59]
[112 129]
[113 128]
[114 127]
[115 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
