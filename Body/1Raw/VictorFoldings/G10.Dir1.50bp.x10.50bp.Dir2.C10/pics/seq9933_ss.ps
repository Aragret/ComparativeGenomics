%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUACCCCUCACAAUCAUGGCAAGCCAACGCCACUUAUCCAGUGAACCACUAUCACGAAAAAAACUCUxxxxxxxxxxGUCAAUAGUACUUGCCGCAGUACUCUUAAAACUAGGCGGCUAUGGUAUAAUACGCCUCACACUCAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[127.85688019 336.21264648]
[127.85688019 321.21264648]
[127.85688019 306.21264648]
[127.85688019 291.21264648]
[127.85688019 276.21264648]
[127.85688019 261.21264648]
[127.85688019 246.21263123]
[127.85688019 231.21263123]
[127.85688019 216.21263123]
[127.85688019 201.21263123]
[125.12571716 186.46337891]
[119.75469971 172.45794678]
[114.38367462 158.45251465]
[109.01265717 144.44708252]
[88.29873657 143.81610107]
[70.02809906 134.03608704]
[58.01575470 117.14916229]
[43.38270187 120.44669342]
[28.74964905 123.74423218]
[14.11659527 127.04177094]
[10.59175682 144.59452820]
[-0.19556274 158.81683350]
[-16.05414581 166.89566040]
[-33.79557419 167.25827026]
[-49.87525177 159.87809753]
[-61.10057449 146.27096558]
[-75.51861572 150.40861511]
[-89.93665314 154.54626465]
[-104.35469055 158.68391418]
[-109.53196716 173.31181335]
[-122.33757782 182.07513428]
[-137.84750366 181.60421753]
[-150.09786987 172.08012390]
[-154.37814331 157.16508484]
[-149.04249573 142.59420776]
[-136.14256287 133.97030640]
[-120.63866425 134.60945129]
[-108.49234009 144.26586914]
[-94.07430267 140.12821960]
[-79.65626526 135.99057007]
[-65.23822021 131.85292053]
[-64.47108459 119.56638336]
[-59.94518661 108.09169769]
[-52.08719635 98.55179596]
[-41.65063477 91.88526917]
[-29.64365005 88.75401306]
[-17.23163986 89.47757721]
[-5.62413073 94.00059509]
[4.04307842 101.89670563]
[10.81905842 112.40871429]
[25.45211220 109.11117554]
[40.08516693 105.81364441]
[54.71821976 102.51610565]
[56.13245773 88.49308777]
[61.78347015 75.58141327]
[71.12548065 65.02811432]
[83.25622559 57.85244370]
[80.09985352 43.18829346]
[76.94348145 28.52414131]
[73.78711700 13.85999107]
[70.63074493 -0.80416012]
[55.57870865 -0.65876436]
[40.80558777 -3.54663682]
[26.91633415 -9.34952068]
[14.47969913 -17.82979202]
[4.00495672 -28.64018822]
[-4.07895756 -41.33803177]
[-9.44101334 -55.40335083]
[-11.86163807 -70.26018524]
[-11.24170876 -85.30014801]
[-7.60660982 -99.90737152]
[-1.10519779 -113.48369598]
[7.99629927 -125.47317505]
[19.32518005 -135.38485718]
[32.41753387 -142.81285095]
[46.73723984 -147.45298767]
[61.69791412 -149.11526489]
[76.68692017 -147.73161316]
[91.09047699 -143.35868835]
[104.31876373 -136.17556763]
[115.83008575 -126.47637177]
[125.15306854 -114.65830231]
[131.90594482 -101.20528412]
[135.81217957 -86.66822052]
[136.71180725 -71.64239502]
[134.56802368 -56.74309921]
[129.46856689 -42.58045197]
[121.62229919 -29.73440742]
[111.35049438 -18.73100090]
[99.07378387 -10.02081680]
[85.29489899 -3.96053004]
[88.45126343 10.70362091]
[91.60763550 25.36777306]
[94.76400757 40.03192520]
[97.92037201 54.69607544]
[107.80327606 55.32473373]
[117.31411743 58.08351517]
[125.99942017 62.84087753]
[133.44506836 69.36998749]
[139.29605103 77.35954285]
[153.35260010 72.12373352]
[167.40913391 66.88793182]
[181.46568298 61.65212250]
[195.52221680 56.41631699]
[209.47525024 50.91057968]
[223.31956482 45.13695908]
[237.16389465 39.36333847]
[239.76518250 24.15686417]
[250.19161987 12.78616333]
[265.11618042 8.87958145]
[279.77645874 13.68369675]
[289.49444580 25.66553307]
[291.16915894 41.00172806]
[284.26617432 54.79856110]
[270.98825073 62.65351105]
[255.57231140 62.06009293]
[242.93751526 53.20766068]
[229.09318542 58.98128128]
[215.24887085 64.75490570]
[212.62193298 68.79556274]
[207.40711975 71.20246887]
[200.75802612 70.47285461]
[186.70149231 75.70866394]
[172.64494324 80.94447327]
[158.58840942 86.18027496]
[144.53186035 91.41608429]
[145.04264832 105.28492737]
[141.33541870 118.65886688]
[133.75735474 130.28549194]
[123.01808929 139.07604980]
[128.38911438 153.08148193]
[133.76013184 167.08691406]
[139.13114929 181.09234619]
[141.59654236 166.29634094]
[148.24427795 152.84986877]
[158.50372314 141.90713501]
[171.49427795 134.40740967]
[186.10084534 130.99447632]
[201.06965637 131.96125793]
[215.11584473 137.22479248]
[227.03372192 146.33325195]
[235.80029297 158.50482178]
[240.66308594 172.69473267]
[241.20468140 187.68495178]
[237.37858582 202.18876648]
[229.51324463 214.96124268]
[218.28375244 224.90603638]
[204.65403748 231.16947937]
[189.79402161 233.21398926]
[174.97924805 230.86402893]
[161.48135376 224.32133484]
[150.45895386 214.14750671]
[142.85688782 201.21263123]
[142.85688782 216.21263123]
[142.85688782 231.21263123]
[142.85688782 246.21263123]
[142.85688782 261.21264648]
[142.85688782 276.21264648]
[142.85688782 291.21264648]
[142.85688782 306.21264648]
[142.85688782 321.21264648]
[142.85688782 336.21264648]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 162]
[2 161]
[3 160]
[4 159]
[5 158]
[6 157]
[7 156]
[8 155]
[9 154]
[10 153]
[11 133]
[12 132]
[13 131]
[14 130]
[17 53]
[18 52]
[19 51]
[20 50]
[26 41]
[27 40]
[28 39]
[29 38]
[57 95]
[58 94]
[59 93]
[60 92]
[61 91]
[100 126]
[101 125]
[102 124]
[103 123]
[104 122]
[105 119]
[106 118]
[107 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
