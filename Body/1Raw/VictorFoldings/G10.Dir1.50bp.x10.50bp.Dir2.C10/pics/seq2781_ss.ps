%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUGUAUGAAUGGCUCCACGAGGGUUCAGCUGUCUCUUACUUUUAACCAGUGAAAUUGACxxxxxxxxxxGUUCAGACCGGAGUAAUCCAGGUCGGUUUCUAUCUACXUUCAAAUUCCUCCCUGUACGAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[70.18307495 386.55798340]
[69.87101746 371.56121826]
[69.55896759 356.56448364]
[69.24691010 341.56771851]
[68.93485260 326.57095337]
[68.62279510 311.57421875]
[68.31073761 296.57745361]
[67.99868011 281.58071899]
[67.68663025 266.58395386]
[53.56182480 261.53518677]
[43.81417084 272.93621826]
[34.06652069 284.33724976]
[38.60917282 299.08062744]
[34.43781281 313.93334961]
[22.88349533 324.15594482]
[7.63316965 326.48641968]
[-6.44684458 320.18112183]
[-14.86366558 307.25204468]
[-14.93151569 291.82482910]
[-6.62874460 278.82223511]
[7.39526320 272.39334106]
[22.66549873 274.58956909]
[32.41315079 263.18856812]
[42.16080093 251.78753662]
[31.19824600 234.54193115]
[27.86674881 214.65464783]
[32.48521042 195.30436707]
[44.11858368 179.50132751]
[60.75795746 169.61918640]
[79.66484070 167.03933716]
[82.45716858 152.30152893]
[85.24949646 137.56372070]
[88.04181671 122.82592010]
[76.76670074 111.14606476]
[74.71279907 95.04237366]
[61.47021103 87.99723816]
[48.22762299 80.95210266]
[34.98503876 73.90696716]
[25.87439919 72.62318420]
[21.54248428 66.57502747]
[8.44933033 59.25592422]
[-4.64382362 51.93682098]
[-16.31668282 61.63778687]
[-30.70693779 66.46324158]
[-45.86842346 65.76057434]
[-59.75067902 59.62482071]
[-70.47623444 48.88578415]
[-76.59455109 34.99583817]
[-77.27818298 19.83348083]
[-72.43466187 5.44929647]
[-62.71904373 -6.21137190]
[-49.44528580 -13.57151508]
[-34.40854645 -15.63573360]
[-19.64243126 -12.12485886]
[-7.14393044 -3.51370811]
[1.39663470 9.03313160]
[4.82422352 23.81880188]
[2.67528200 38.84366608]
[15.76843643 46.16276932]
[28.86159134 53.48187637]
[42.03017426 60.66438675]
[55.27275848 67.70951843]
[68.51534271 74.75465393]
[81.75792694 81.79978943]
[96.26039886 74.50419617]
[112.24710083 77.32778168]
[122.90872192 66.77649689]
[133.57034302 56.22520447]
[144.23197937 45.67391205]
[136.22369385 33.41730499]
[130.77542114 19.83321190]
[128.09678650 5.44952631]
[128.28982544 -9.17519474]
[131.34507751 -23.47342491]
[137.14208984 -36.89069366]
[145.45408630 -48.90707779]
[155.95687866 -59.05736542]
[168.24154663 -66.94905090]
[181.83029175 -72.27751160]
[196.19502258 -74.83779907]
[210.77796936 -74.53245544]
[225.01322937 -71.37529755]
[238.34878540 -65.49074554]
[250.26789856 -57.10896301]
[254.94956970 -72.22162628]
[269.50708008 -75.37258911]
[280.38589478 -85.69979095]
[291.26470947 -96.02699280]
[302.14355469 -106.35420227]
[312.91433716 -116.79401398]
[323.57598877 -127.34530640]
[334.23760986 -137.89659119]
[338.04006958 -153.84881592]
[353.83148193 -158.27192688]
[365.36694336 -146.61582947]
[360.77981567 -130.87129211]
[344.78887939 -127.23497009]
[334.12725830 -116.68367767]
[323.46563721 -106.13238525]
[320.90716553 -99.14669800]
[312.47073364 -95.47537994]
[301.59191895 -85.14817047]
[290.71310425 -74.82096863]
[279.83425903 -64.49375916]
[275.93072510 -50.11977005]
[260.59512329 -46.23013687]
[268.70904541 -33.15305710]
[273.94320679 -18.67468643]
[276.06878662 -3.42099857]
[274.99148560 11.94800472]
[270.75561523 26.76684380]
[263.54229736 40.39337540]
[253.66174316 52.23662186]
[241.53984070 61.78240204]
[227.69995117 68.61565399]
[212.74012756 72.43846130]
[197.30740356 73.08309937]
[182.06976318 70.51931000]
[167.68724060 64.85579681]
[154.78326416 56.33554077]
[144.12164307 66.88683319]
[133.46002197 77.43811798]
[122.79838562 87.98941040]
[125.76854706 100.05221558]
[122.74952698 112.10288239]
[114.44301605 121.34057617]
[102.77962494 125.61824799]
[99.98729706 140.35604858]
[97.19497681 155.09385681]
[94.40264893 169.83166504]
[105.06763458 174.81469727]
[114.26368713 182.30897522]
[121.40583801 191.89529419]
[126.02587891 203.01983643]
[127.80292511 215.02616882]
[126.58528137 227.19389343]
[122.40230560 238.78187561]
[115.46531677 249.07345581]
[106.15731812 257.42065430]
[95.01202393 263.28494263]
[82.68338013 266.27188110]
[82.99543762 281.26864624]
[83.30749512 296.26541138]
[83.61955261 311.26214600]
[83.93160248 326.25891113]
[84.24365997 341.25567627]
[84.55571747 356.25241089]
[84.86777496 371.24917603]
[85.17983246 386.24591064]
[87.77082825 405.45364380]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 24]
[11 23]
[12 22]
[30 130]
[31 129]
[32 128]
[33 127]
[35 64]
[36 63]
[37 62]
[38 61]
[40 60]
[41 59]
[42 58]
[66 123]
[67 122]
[68 121]
[69 120]
[84 106]
[86 104]
[87 103]
[88 102]
[89 101]
[90 99]
[91 98]
[92 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
