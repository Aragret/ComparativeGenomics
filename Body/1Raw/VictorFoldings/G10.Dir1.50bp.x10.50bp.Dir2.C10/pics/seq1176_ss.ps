%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAGGGUUGGUCAAUUUCGUGCCAGCCACCGCGGUCACACGAUUAACCCAAGUCAAUAGAAxxxxxxxxxxCGUAAAUGAUAUCAUCUCAACUUAGUAUUAUACCCACACCCACCCAAGAACAGGGUUUGUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[144.50057983 432.83612061]
[144.50057983 417.83612061]
[144.50057983 402.83612061]
[144.50057983 387.83612061]
[144.50057983 372.83612061]
[144.50057983 357.83612061]
[144.50057983 342.83612061]
[144.50057983 327.83612061]
[144.50057983 312.83612061]
[144.50057983 297.83612061]
[142.63296509 282.95281982]
[129.71627808 271.11395264]
[134.75874329 253.43478394]
[130.75099182 238.98008728]
[126.74325562 224.52540588]
[122.73551941 210.07070923]
[111.87899780 199.87339783]
[115.64784241 184.50765991]
[111.64010620 170.05296326]
[107.63236237 155.59828186]
[92.67082214 155.63905334]
[78.23020935 151.72521973]
[65.33692169 144.13493347]
[54.90735245 133.40769958]
[47.68280411 120.30596924]
[44.17677307 105.76096344]
[29.18407822 105.29292297]
[14.19138145 104.82488251]
[-0.80131483 104.35683441]
[-15.79401112 103.88879395]
[-30.79401016 103.88879395]
[-45.78670883 104.35683441]
[-54.33053589 107.77075958]
[-61.09546661 104.67538452]
[-76.09465790 104.83142090]
[-89.92758179 113.63949585]
[-104.34508514 105.82492065]
[-104.51567841 89.42666626]
[-90.26386261 81.31384277]
[-76.25069427 89.83223724]
[-61.25150299 89.67620087]
[-46.25474930 89.36414337]
[-31.26205254 88.89610291]
[-28.56667328 86.52915955]
[-24.56776428 85.38442993]
[-19.86865997 86.07058716]
[-15.32596874 88.89610291]
[-0.33327267 89.36414337]
[14.65942383 89.83218384]
[29.65211868 90.30022430]
[44.64481735 90.76826477]
[51.72598648 71.38111115]
[65.33692169 55.86507034]
[83.63653564 46.31892014]
[104.14954376 44.03391647]
[107.24787140 29.35738945]
[100.86157990 18.10264969]
[103.78833771 5.91031218]
[113.91780853 -0.77558082]
[117.32078552 -15.38447380]
[120.72376251 -29.99336624]
[124.12673950 -44.60225677]
[113.63378906 -33.88321304]
[100.91653442 -25.92887688]
[86.68664551 -21.18437958]
[71.74043274 -19.91522408]
[56.91429520 -22.19243431]
[43.03791428 -27.88857841]
[30.88781738 -36.68489075]
[21.14393234 -48.08913422]
[14.35153198 -61.46311188]
[10.89072227 -76.05841064]
[10.95517254 -91.05827332]
[14.54127693 -105.62329865]
[21.44835281 -118.93840790]
[31.28987885 -130.25849915]
[43.51511765 -138.95007324]
[57.43993378 -144.52676392]
[72.28509521 -146.67648315]
[87.21984863 -145.27894592]
[101.40843964 -140.41233826]
[114.05686951 -132.34901428]
[124.45732117 -121.54019165]
[132.02778625 -108.59074402]
[136.34460449 -94.22533417]
[137.16621399 -79.24785614]
[134.44686890 -64.49716187]
[144.42959595 -75.69293213]
[154.41232300 -86.88869476]
[151.98194885 -102.33625793]
[160.09391785 -115.70525360]
[174.91799927 -120.68324280]
[189.45472717 -114.91977692]
[196.84030151 -101.13618469]
[193.58746338 -85.84066010]
[181.23211670 -76.25527954]
[165.60807800 -76.90596771]
[155.62535095 -65.71020508]
[145.64262390 -54.51443481]
[138.73562622 -41.19927979]
[135.33265686 -26.59038734]
[131.92967224 -11.98149490]
[128.52670288 2.62739706]
[134.54115295 19.08419800]
[121.92439270 32.45571136]
[118.82607269 47.13223648]
[128.93391418 51.91413879]
[137.89305115 58.60509109]
[145.34779358 66.93946075]
[151.00218201 76.58636475]
[154.63174438 87.16281128]
[156.09237671 98.24890900]
[155.32609558 109.40452576]
[152.36331177 120.18676758]
[147.32164001 130.16758728]
[140.40127563 138.95071411]
[131.87693787 146.18746948]
[122.08705139 151.59053040]
[126.09479523 166.04522705]
[130.10253906 180.49990845]
[141.24571228 191.73112488]
[137.19020081 206.06297302]
[141.19795227 220.51766968]
[145.20568848 234.97235107]
[149.21342468 249.42704773]
[160.06481934 256.47695923]
[163.08097839 268.64746094]
[157.16790771 279.24667358]
[162.62170410 265.27325439]
[173.51589966 254.96226501]
[187.76792908 250.28472900]
[202.65341187 252.13479614]
[215.32679749 260.15881348]
[223.36549377 272.82293701]
[225.23277283 287.70623779]
[220.57173157 301.96368408]
[210.27334595 312.86978149]
[196.30625916 318.33975220]
[181.34042358 317.32794189]
[168.23669434 310.02777100]
[159.50057983 297.83612061]
[159.50057983 312.83612061]
[159.50057983 327.83612061]
[159.50057983 342.83612061]
[159.50057983 357.83612061]
[159.50057983 372.83612061]
[159.50057983 387.83612061]
[159.50057983 402.83612061]
[159.50057983 417.83612061]
[159.50057983 432.83612061]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 128]
[13 125]
[14 124]
[15 123]
[16 122]
[18 120]
[19 119]
[20 118]
[26 51]
[27 50]
[28 49]
[29 48]
[30 47]
[31 43]
[32 42]
[34 41]
[35 40]
[55 106]
[56 105]
[59 103]
[60 102]
[61 101]
[62 100]
[87 99]
[88 98]
[89 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
