%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUCAACACCACCUUCUUCGACCCCGCCGGAGGAGGAGACCCCAUUCUAUACCAACACCUxxxxxxxxxxAAUACUACCGUAUGGCCCACCAUAAUUACCCCCAUACUCCUUACACUAUUCCUCAUCACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[104.74374390 255.12287903]
[104.74374390 240.12287903]
[104.74374390 225.12287903]
[104.74374390 210.12287903]
[104.74374390 195.12287903]
[104.74374390 180.12287903]
[104.74374390 165.12287903]
[104.74374390 150.12287903]
[104.74374390 135.12287903]
[104.74374390 120.12288666]
[92.04881287 112.13297272]
[78.52462769 118.62113190]
[65.00043488 125.10929871]
[51.47624588 131.59745789]
[54.69285202 146.31990051]
[54.42692184 161.38728333]
[50.69279861 175.98704529]
[43.69186020 189.33184814]
[33.80165100 200.70199585]
[21.55554581 209.48434448]
[7.61395741 215.20526123]
[-7.27126122 217.55621338]
[-22.29736900 216.41043091]
[-36.65402603 211.82969666]
[-49.56699753 204.06105042]
[-60.33990097 193.52343750]
[-68.39176941 180.78514099]
[-73.28836823 166.53312683]
[-74.76564789 151.53598022]
[-72.74391937 136.60247803]
[-67.33222961 122.53797913]
[-58.82241058 110.10094452]
[-47.67339325 99.96210480]
[-34.48642731 92.66822052]
[-19.97267342 88.61265564]
[-4.91483688 88.01410675]
[9.87503242 90.90486908]
[23.59933472 97.12902832]
[35.51793671 106.35094452]
[44.98808289 118.07327271]
[58.51227188 111.58511353]
[72.03646088 105.09694672]
[85.56065369 98.60877991]
[95.30830383 87.20775604]
[99.61589050 72.83957672]
[103.92346954 58.47138977]
[108.23105621 44.10320663]
[112.53864288 29.73502350]
[99.72348022 21.78474617]
[89.41099548 10.79665756]
[82.29978180 -2.47611427]
[78.86927795 -17.12597084]
[79.34748840 -32.15291214]
[83.69581604 -46.53279877]
[91.61209869 -59.28713226]
[102.55160522 -69.54965973]
[115.76451874 -76.62521362]
[130.34732056 -80.03675842]
[145.30459595 -79.55758667]
[149.61216736 -93.92577362]
[138.28851318 -84.08836365]
[125.29099274 -76.60073853]
[111.10043335 -71.73987579]
[96.24176788 -69.68558502]
[81.26465607 -70.51387024]
[66.72312927 -74.19408417]
[53.15510941 -80.59009552]
[41.06251144 -89.46528625]
[30.89266777 -100.49135590]
[23.02178001 -113.26042938]
[17.74101067 -127.30014038]
[15.24570751 -142.09112549]
[15.62817669 -157.08625793]
[18.87426949 -171.73080444]
[24.86390686 -185.48304749]
[33.37551880 -197.83425903]
[44.09424210 -208.32754517]
[56.62356567 -216.57473755]
[70.50000763 -222.27073669]
[85.21023560 -225.20484924]
[100.21010590 -225.26852417]
[114.94471741 -222.45942688]
[128.86901855 -216.88146973]
[141.46792603 -208.74096680]
[152.27536011 -198.33908081]
[160.89154053 -186.06057739]
[166.99774170 -172.35969543]
[170.36807251 -157.74324036]
[170.87785339 -142.75189209]
[168.50822449 -127.94025421]
[163.34971619 -113.86214447]
[175.24209595 -123.00387573]
[187.13447571 -132.14561462]
[199.02685547 -141.28733826]
[210.91923523 -150.42907715]
[216.67829895 -165.78372192]
[232.89752197 -168.20628357]
[242.89196777 -155.20462036]
[236.38020325 -140.15374756]
[220.06097412 -138.53669739]
[208.16859436 -129.39495850]
[196.27621460 -120.25322723]
[184.38383484 -111.11149597]
[172.49145508 -101.96976471]
[163.98036194 -89.61818695]
[159.67277527 -75.25000763]
[172.42666626 -67.42135620]
[182.72737122 -56.54973221]
[189.86837769 -43.37207794]
[193.35760498 -28.78380585]
[192.95137024 -13.77795696]
[188.67137146 0.62241101]
[180.80360413 13.43396187]
[169.87925720 23.78023148]
[156.63888550 30.95159149]
[141.98217773 34.45391083]
[126.90682220 34.04260635]
[122.59924316 48.41079330]
[118.29165649 62.77897644]
[113.98406982 77.14716339]
[109.67649078 91.51534271]
[120.34522247 80.97124481]
[128.21353149 68.20057678]
[139.40396118 58.21187973]
[152.98271179 51.83868027]
[167.81663513 49.61281586]
[182.66789246 51.72002792]
[196.29714966 57.98447800]
[207.56707764 67.88340759]
[215.53720093 80.59076691]
[219.54246521 95.04614258]
[219.24859619 110.04326630]
[214.68014526 124.33064270]
[206.21832275 136.71601868]
[194.56927490 146.16586304]
[180.70506287 151.89158630]
[165.78266907 153.41540527]
[151.04731750 150.61013794]
[137.72866821 143.70989990]
[126.93512726 133.28662109]
[119.74374390 120.12288666]
[119.74374390 135.12287903]
[119.74374390 150.12287903]
[119.74374390 165.12287903]
[119.74374390 180.12287903]
[119.74374390 195.12287903]
[119.74374390 210.12287903]
[119.74374390 225.12287903]
[119.74374390 240.12287903]
[119.74374390 255.12287903]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 43]
[12 42]
[13 41]
[14 40]
[44 121]
[45 120]
[46 119]
[47 118]
[48 117]
[59 106]
[60 105]
[91 104]
[92 103]
[93 102]
[94 101]
[95 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
