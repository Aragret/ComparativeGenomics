%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACAACAUAUUUUGUCACCAAGACCCUACUUCUAACCUCCCUGUUCUUAUGAAUUCGAACAxxxxxxxxxxGCCAUACUAUUUAUGUGCUCCGGGUCCAUCAUCCACAACCUUAACAAUGAACAAGAUAUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[103.22175598 278.96746826]
[102.90969849 263.97070312]
[102.59764099 248.97395325]
[102.28558350 233.97720337]
[101.97352600 218.98045349]
[101.66146851 203.98368835]
[101.34941864 188.98693848]
[101.03736115 173.99018860]
[100.72530365 158.99343872]
[86.65378571 153.79801941]
[76.67105865 164.99378967]
[66.68833160 176.18954468]
[56.70560455 187.38531494]
[46.72287750 198.58108521]
[47.87672806 214.34320068]
[37.48403931 226.24981689]
[21.71060753 227.23695374]
[9.91453266 216.71896362]
[9.09421539 200.93597412]
[19.73633575 189.25175476]
[35.52711105 188.59835815]
[45.50983810 177.40258789]
[55.49256516 166.20681763]
[65.47528839 155.01106262]
[75.45801544 143.81529236]
[63.56978989 131.01457214]
[57.29384613 115.60501099]
[56.90877151 99.80136871]
[61.88810349 85.67411804]
[71.03755188 74.87886047]
[82.71542358 68.46306610]
[78.40783691 54.09487915]
[74.10025024 39.72669601]
[69.79266357 25.35851097]
[65.48508453 10.99032688]
[57.65027237 11.76696682]
[49.72370148 11.20288754]
[41.93522263 9.28963852]
[34.51485443 6.05824184]
[27.68595886 1.57898057]
[21.65856552 -4.03997803]
[16.62292862 -10.65510464]
[12.74357319 -18.09112167]
[10.15401173 -26.14561844]
[8.95227337 -34.59454727]
[9.19741344 -43.19844437]
[10.90712547 -51.70923233]
[14.05651951 -59.87735367]
[18.57815361 -67.45909119]
[24.36330986 -74.22383118]
[31.26452255 -79.96105957]
[22.49831390 -92.13289642]
[13.73210716 -104.30473328]
[4.96590042 -116.47657013]
[-3.80030680 -128.64840698]
[-19.07334518 -127.02672577]
[-33.10450745 -133.27349854]
[-42.11947632 -145.70835876]
[-43.69327545 -160.98640442]
[-37.40255737 -174.99790955]
[-24.93949509 -183.97386169]
[-9.65659046 -185.49977112]
[4.33513355 -179.16516113]
[13.27197266 -166.67402649]
[14.74996185 -151.38641357]
[8.37152958 -137.41461182]
[17.13773727 -125.24277496]
[25.90394402 -113.07093811]
[34.67015076 -100.89910126]
[43.43635941 -88.72726440]
[50.93473434 -88.88329315]
[49.07715607 -103.76782990]
[47.21957397 -118.65235901]
[41.53610229 -132.53393555]
[49.76489639 -145.07534790]
[64.76164246 -145.38801575]
[73.50600433 -133.20046997]
[68.40509033 -119.09319305]
[67.16828918 -104.14427185]
[65.93148804 -89.19535065]
[73.42986298 -89.35137939]
[81.68215179 -101.87734222]
[89.80369568 -114.48846436]
[97.79361725 -127.18339539]
[105.78353119 -139.87832642]
[113.77344513 -152.57325745]
[111.63153076 -168.47268677]
[122.83036804 -179.96031189]
[138.77915955 -178.22381592]
[147.24337769 -164.59529114]
[141.72998047 -149.52937317]
[126.46837616 -144.58334351]
[118.47846222 -131.88841248]
[110.48854065 -119.19348145]
[102.49862671 -106.49855042]
[101.59167480 -99.11457825]
[94.20811462 -93.62504578]
[85.95582581 -81.09909058]
[104.49493408 -60.00611877]
[109.27277374 -33.27692795]
[99.85281372 -8.80365181]
[79.85326385 6.68274164]
[84.16085052 21.05092621]
[88.46843719 35.41910934]
[92.77601624 49.78729248]
[97.08360291 64.15547943]
[124.58227539 67.54296112]
[144.62199402 91.27019501]
[143.17250061 125.65588379]
[157.66809082 129.51304626]
[172.16369629 133.37020874]
[186.65928650 137.22735596]
[195.86428833 125.13040161]
[209.00041199 117.48118591]
[224.06451416 115.44616699]
[238.75941467 119.33567047]
[250.84426880 128.55656433]
[258.47619629 141.70275879]
[260.49139404 156.76951599]
[256.58255005 171.45928955]
[247.34576416 183.53199768]
[234.18955994 191.14662170]
[219.12016296 193.14199829]
[204.43553162 189.21385193]
[192.37500000 179.96118164]
[184.77767944 166.79496765]
[182.80212402 151.72296143]
[168.30653381 147.86579895]
[153.81092834 144.00863647]
[139.31533813 140.15147400]
[133.41702271 144.78395081]
[144.28887939 155.11848450]
[155.16073608 165.45301819]
[167.55491638 173.90196228]
[168.06095886 188.89341736]
[156.26472473 198.15890503]
[141.81988525 194.11585999]
[136.54774475 180.07147217]
[129.08406067 167.06018066]
[121.62037659 154.04890442]
[115.72205353 158.68138123]
[116.03411102 173.67813110]
[116.34616852 188.67488098]
[116.65822601 203.67164612]
[116.97028351 218.66839600]
[117.28234100 233.66514587]
[117.59439087 248.66189575]
[117.90644836 263.65866089]
[118.21850586 278.65539551]
[120.80950928 297.86312866]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 25]
[11 24]
[12 23]
[13 22]
[14 21]
[31 106]
[32 105]
[33 104]
[34 103]
[35 102]
[51 70]
[52 69]
[53 68]
[54 67]
[55 66]
[81 98]
[82 97]
[83 95]
[84 94]
[85 93]
[86 92]
[109 130]
[110 129]
[111 128]
[112 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
