%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACACCUAGCAGGUGUCUCCUCUAUCUUAGGGGCCAUCAAUUUCAUCACAACAAUUAUCAAxxxxxxxxxxACUUCAAGUCAACUAGGACUCAUAAUAGUUACAAUCGGCAUCAACCAACCACACCUAGCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[111.87129211 241.32321167]
[111.55924225 226.32646179]
[111.24718475 211.32969666]
[110.93512726 196.33294678]
[110.62306976 181.33619690]
[110.31101227 166.33944702]
[109.99895477 151.34268188]
[109.68690491 136.34593201]
[109.37484741 121.34918213]
[95.35813141 116.00766754]
[85.14465332 126.99333191]
[74.93117523 137.97900391]
[64.71768951 148.96466064]
[54.50421143 159.95033264]
[44.29073334 170.93598938]
[34.07725525 181.92166138]
[27.72061348 197.63882446]
[10.85798264 195.88154602]
[7.87854099 179.19145203]
[23.09158897 171.70817566]
[33.30506897 160.72251892]
[43.51854706 149.73684692]
[53.73202896 138.75117493]
[63.94550705 127.76551819]
[74.15898895 116.77985382]
[84.37246704 105.79418945]
[77.32733154 92.55160522]
[62.50957489 94.88270569]
[47.69181824 97.21381378]
[32.87405777 99.54491425]
[24.96170044 113.03300476]
[10.21324062 118.23078918]
[-4.40754890 112.68402863]
[-11.99717808 99.01173401]
[-8.97205544 83.66955566]
[3.23944712 73.90158081]
[18.87143326 74.31996918]
[30.54295540 84.72715759]
[45.36071396 82.39604950]
[60.17847061 80.06494904]
[74.99623108 77.73384094]
[85.87505341 67.40663910]
[88.97337341 52.73011398]
[92.07170105 38.05358887]
[77.70195770 33.71949768]
[63.75154114 28.18237305]
[50.32096863 21.48210716]
[37.50700760 13.66697788]
[25.40198326 4.79329443]
[14.09311581 -5.07500648]
[3.66188741 -15.86682320]
[-5.81654453 -27.50439835]
[-14.27388668 -39.90388489]
[-21.64920235 -52.97593689]
[-27.88935089 -66.62637329]
[-32.94937134 -80.75683594]
[-36.79280472 -95.26551819]
[-39.39196396 -110.04788208]
[-40.72811127 -124.99741364]
[-40.79162979 -140.00640869]
[-39.58205795 -154.96670532]
[-37.10810852 -169.77053833]
[-33.38761139 -184.31123352]
[-28.44736671 -198.48402405]
[-22.32297707 -212.18678284]
[-15.05856419 -225.32078552]
[-6.70647192 -237.79141235]
[2.67312288 -249.50878906]
[13.01263905 -260.38851929]
[24.23757744 -270.35217285]
[36.26706314 -279.32800293]
[49.01441956 -287.25128174]
[62.38780212 -294.06500244]
[76.29084778 -299.72000122]
[90.62339783 -304.17556763]
[105.28216553 -307.39956665]
[120.16154480 -309.36880493]
[135.15432739 -310.06906128]
[150.15248108 -309.49533081]
[165.04795837 -307.65173340]
[179.73339844 -304.55151367]
[194.10304260 -300.21704102]
[208.05331421 -294.67956543]
[221.48370361 -287.97894287]
[234.29747009 -280.16348267]
[246.40226746 -271.28948975]
[257.71087646 -261.42089844]
[268.14181519 -250.62881470]
[277.61996460 -238.99099731]
[286.07696533 -226.59129333]
[293.45196533 -213.51905823]
[299.69174194 -199.86845398]
[304.75140381 -185.73785400]
[308.59445190 -171.22908020]
[311.19323730 -156.44665527]
[312.52899170 -141.49708557]
[312.59213257 -126.48809052]
[311.38217163 -111.52781677]
[308.90783691 -96.72404480]
[305.18698120 -82.18344879]
[300.24636841 -68.01079559]
[294.12161255 -54.30818939]
[286.85687256 -41.17436981]
[278.50445557 -28.70396423]
[269.12454224 -16.98682404]
[258.78475952 -6.10737276]
[247.55955505 3.85600066]
[235.52984619 12.83150959]
[222.78228760 20.75448418]
[209.40872192 27.56783676]
[195.50552368 33.22248077]
[181.17286682 37.67766571]
[166.51400757 40.90129852]
[151.63458252 42.87015152]
[136.64178467 43.57003403]
[121.64364624 42.99591064]
[106.74822235 41.15190887]
[103.64990234 55.82843781]
[100.55158234 70.50495911]
[110.30691528 59.11051178]
[117.91501617 46.18314743]
[128.43426514 35.48990631]
[141.23509216 27.67076874]
[155.55137634 23.19370842]
[170.52629089 22.32667351]
[185.26361084 25.12155342]
[198.88131714 31.41107750]
[210.56439209 40.81882477]
[219.61363220 52.78174210]
[225.48741150 66.58386230]
[227.83422852 81.39914703]
[226.51359558 96.34089661]
[221.60456848 110.51486969]
[213.40095520 123.07276154]
[202.39372253 133.26298523]
[189.24163818 140.47567749]
[174.73187256 144.27915955]
[159.73278809 144.44578552]
[145.14210510 140.96559143]
[131.83528137 134.04840088]
[124.37159729 121.03712463]
[124.68365479 136.03387451]
[124.99571228 151.03062439]
[125.30776978 166.02738953]
[125.61982727 181.02413940]
[125.93187714 196.02088928]
[126.24393463 211.01763916]
[126.55599213 226.01440430]
[126.86804962 241.01115417]
[129.45904541 260.21887207]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 26]
[11 25]
[12 24]
[13 23]
[14 22]
[15 21]
[16 20]
[27 41]
[28 40]
[29 39]
[30 38]
[42 119]
[43 118]
[44 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
