%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAACAUCGAAUACGCCGCAGGCCCCUUCGCCCUAUUCUUCAUAGCCGAAUACACAAACAUxxxxxxxxxxCUAGCAUUAGCAGGAAUACCUUUCCUCACAGGUUUCUACUCCAAAGACCACAUCAUCGAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[77.13244629 122.04922485]
[65.43282318 131.43638611]
[53.73320007 140.82354736]
[47.81149673 155.49475098]
[33.04245758 157.42471313]
[21.54065514 167.05323792]
[10.24165058 176.91896057]
[-1.05735373 186.78468323]
[-12.35635853 196.65040588]
[-17.66263580 211.55523682]
[-32.33860779 214.09790039]
[-28.37160110 228.79566956]
[-31.16804886 243.69757080]
[-40.12065125 255.85780334]
[-53.41057205 262.89620972]
[-68.37676239 263.46405029]
[-82.04873657 257.50228882]
[-93.34774017 267.36801147]
[-98.13783264 283.05197144]
[-114.17436981 286.48150635]
[-124.96033478 274.12857056]
[-119.40004730 258.70080566]
[-103.21346283 256.06900024]
[-91.91445923 246.20327759]
[-95.97850800 231.85235596]
[-93.39805603 217.09938049]
[-84.63214111 204.87973022]
[-71.37593079 197.64833069]
[-56.23305893 196.88652039]
[-42.20433044 202.79890442]
[-37.70623398 188.59973145]
[-22.22208214 185.35140991]
[-10.92307663 175.48568726]
[0.37592795 165.61996460]
[11.67493248 155.75422668]
[12.88470459 151.07321167]
[17.08705711 147.12713623]
[23.65529823 145.72508240]
[28.74016380 131.72532654]
[44.34603882 129.12393188]
[56.04566193 119.73676300]
[67.74528503 110.34960175]
[67.12130737 95.36258698]
[54.68186951 86.98044586]
[42.24242783 78.59830475]
[29.80298805 70.21615601]
[17.36354637 61.83401489]
[3.23524404 68.03034973]
[-11.99662399 65.58214569]
[-23.47162437 55.27059937]
[-27.52812576 40.38610077]
[-22.87171173 25.67823219]
[-10.98822975 15.84022522]
[4.33034563 14.01134968]
[18.19591331 20.77519417]
[26.18401909 33.97343826]
[25.74568939 49.39457703]
[38.18513107 57.77671814]
[50.62456894 66.15885925]
[63.06401062 74.54100800]
[75.50344849 82.92314911]
[82.78980255 81.14576721]
[75.89177704 67.82595825]
[68.99375916 54.50614929]
[62.09573746 41.18634415]
[55.19771194 27.86653519]
[48.29969025 14.54672718]
[37.50411606 4.13252687]
[31.99057961 -9.81741619]
[32.74910355 -24.79822540]
[39.64348221 -38.11991882]
[51.43575287 -47.39042664]
[66.00847626 -50.94512558]
[80.74493408 -48.14571762]
[92.99903870 -39.49488068]
[100.57040405 -26.54596519]
[102.09951019 -11.62410736]
[97.31195831 2.59102225]
[97.32206726 17.59101868]
[97.33217621 32.59101486]
[97.34228516 47.59101105]
[97.35239410 62.59100723]
[97.36250305 77.59100342]
[104.64885712 75.81362152]
[111.83136749 62.64504242]
[110.89264679 46.27278519]
[124.74868774 37.50112152]
[139.14558411 45.35358810]
[139.27305603 61.75224304]
[124.99994659 69.82755280]
[117.81743622 82.99613190]
[128.90875244 93.09477997]
[141.34819031 84.71263885]
[153.78762817 76.33049774]
[166.22708130 67.94835663]
[178.66651917 59.56621170]
[183.13392639 44.15771484]
[198.02047729 38.17689896]
[211.90647888 46.21173859]
[214.13978577 62.09858704]
[203.00717163 73.65041351]
[187.04866028 72.00565338]
[174.60922241 80.38779449]
[162.16978455 88.76993561]
[149.73033142 97.15207672]
[137.29089355 105.53422546]
[138.45645142 112.94309998]
[153.27424622 110.61222839]
[155.60488892 125.43005371]
[140.78755188 127.76085663]
[141.95310974 135.16973877]
[156.36532593 139.32762146]
[170.77754211 143.48551941]
[180.55303955 131.80821228]
[194.23583984 125.12235260]
[209.45532227 124.58629608]
[223.57461548 130.29293823]
[234.14744568 141.25354004]
[239.34204102 155.56913757]
[238.25837708 170.75944519]
[231.08422852 184.19265747]
[219.06253052 193.54139709]
[204.27615356 197.18594360]
[189.28689575 194.49482727]
[176.69174194 185.93432617]
[168.67289734 172.98759460]
[166.61964417 157.89773560]
[152.20742798 153.73983765]
[137.79521179 149.58195496]
[148.44973755 160.14042664]
[159.10424805 170.69889832]
[164.43154907 184.72102356]
[166.28247070 199.60638428]
[164.55146790 214.50617981]
[159.33724976 228.57073975]
[150.93714905 240.99804688]
[139.83016968 251.07946777]
[126.64968109 258.24011230]
[112.14729309 262.07165527]
[97.14997864 262.35556030]
[82.51295471 259.07571411]
[69.07087708 252.41908264]
[57.59027481 242.76528931]
[48.72581100 230.66482544]
[42.98298264 216.80769348]
[40.68925858 201.98410034]
[41.97544098 187.03935242]
[46.76818848 172.82563782]
[54.79419708 160.15350342]
[65.59856415 149.74343872]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 42]
[2 41]
[3 40]
[5 38]
[6 35]
[7 34]
[8 33]
[9 32]
[11 30]
[17 24]
[18 23]
[43 61]
[44 60]
[45 59]
[46 58]
[47 57]
[84 91]
[85 90]
[92 106]
[93 105]
[94 104]
[95 103]
[96 102]
[111 129]
[112 128]
[113 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
