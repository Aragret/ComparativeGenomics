%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUUAACCUUUAGCAAUAAACGAAAGUUUAACUAAGCUAUACUAACCCCAGGGUUGGUCAAxxxxxxxxxxUAUAGCACCCCCUCUACCCCCUCUAGAGCCCACUGUAAAGCUAACUUAGCAUUAACCUUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[231.10556030 180.97912598]
[218.32820129 173.12168884]
[205.55084229 165.26426697]
[192.77348328 157.40684509]
[179.99612427 149.54942322]
[166.90296936 142.23031616]
[153.51669312 135.46220398]
[140.13040161 128.69407654]
[126.74411774 121.92597198]
[113.35783386 115.15785217]
[95.48322296 124.42610931]
[73.89171600 113.68322754]
[60.64913177 120.72836304]
[47.40654755 127.77349854]
[34.16395950 134.81863403]
[25.61465073 148.13102722]
[10.74449730 147.27792358]
[-2.49808884 154.32305908]
[-15.74067402 161.36819458]
[-28.98325920 168.41333008]
[-37.53256989 181.72573853]
[-52.40272522 180.87263489]
[-55.47322083 196.20579529]
[-67.71356964 205.93759155]
[-83.34424591 205.47297668]
[-94.98493195 195.03129578]
[-97.13924408 179.54281616]
[-88.78998566 166.32072449]
[-73.87941742 161.60807800]
[-59.44785690 167.63005066]
[-51.84574890 154.82156372]
[-36.02839661 155.17074585]
[-22.78580856 148.12561035]
[-9.54322338 141.08047485]
[3.69936204 134.03533936]
[11.30147266 121.22686768]
[27.11882591 121.57604980]
[40.36141205 114.53091431]
[53.60399628 107.48577881]
[66.84658051 100.44064331]
[51.84663010 100.47854614]
[43.12840652 88.27230072]
[48.02992249 74.09572601]
[62.42563629 69.88106537]
[74.19890594 79.17581177]
[68.13589478 65.45575714]
[62.07288361 51.73570251]
[56.00986862 38.01564789]
[49.94685745 24.29559326]
[41.95693970 11.60066414]
[32.20928955 0.19964339]
[22.46163559 -11.20137787]
[12.71398354 -22.60239792]
[2.96633148 -34.00341797]
[-6.78132057 -45.40444183]
[-16.52897263 -56.80546188]
[-32.16226959 -61.75844955]
[-35.42477798 -77.82979584]
[-22.96030998 -88.48667145]
[-7.59124041 -82.76620483]
[-5.12795162 -66.55311584]
[4.61970043 -55.15209198]
[14.36735249 -43.75107193]
[24.11500359 -32.35005188]
[33.86265564 -20.94902992]
[43.61030960 -9.54800892]
[53.35795975 1.85301232]
[51.57478333 -13.04061985]
[55.52388763 -27.51143837]
[64.62540436 -39.43462372]
[77.54292297 -47.05943680]
[92.37969208 -49.26629257]
[106.95716858 -45.73114395]
[119.13486481 -36.97307968]
[127.12467194 -24.27808189]
[129.75341797 -9.51021957]
[126.63509369 5.16206980]
[118.22759247 17.58438492]
[105.76541901 25.93269920]
[91.07846832 28.98118973]
[76.32327271 26.28223038]
[63.66690826 18.23258018]
[69.72991943 31.95263481]
[75.79293823 45.67268753]
[81.85594940 59.39274216]
[87.91896057 73.11279297]
[114.39564514 79.75644684]
[120.12594604 101.77156830]
[133.51223755 108.53968048]
[146.89851379 115.30780029]
[160.28480530 122.07591248]
[173.67108154 128.84402466]
[178.14149475 128.42343140]
[182.09632874 129.38796997]
[185.15496826 131.39462280]
[187.09205627 134.01026917]
[187.85356140 136.77206421]
[200.63090515 144.62948608]
[213.40826416 152.48690796]
[226.18562317 160.34434509]
[238.96298218 168.20176697]
[249.19082642 156.12152100]
[261.15261841 145.75880432]
[274.56350708 137.35951233]
[289.10421753 131.12275696]
[304.42877197 127.19624329]
[320.17257690 125.67265320]
[335.96121216 126.58753204]
[351.41931152 129.91844177]
[366.17947388 135.58552551]
[379.89093018 143.45336914]
[392.22799683 153.33430481]
[402.89779663 164.99287415]
[411.64706421 178.15135193]
[418.26840210 192.49652100]
[422.60491943 207.68696594]
[424.55419922 223.36131287]
[424.07058716 239.14677429]
[421.16622925 254.66801453]
[415.91085815 269.55609131]
[429.15344238 276.60122681]
[442.39602661 283.64636230]
[455.63861084 290.69149780]
[472.46185303 292.79281616]
[475.09979248 309.54028320]
[459.73706055 316.71127319]
[448.59347534 303.93408203]
[435.35089111 296.88894653]
[422.10830688 289.84381104]
[408.86572266 282.79867554]
[400.47918701 294.28030396]
[390.58169556 304.49066162]
[379.36380005 313.23248291]
[367.04156494 320.33685303]
[353.85232544 325.66632080]
[340.05026245 329.11764526]
[325.90145874 330.62387085]
[311.67868042 330.15542603]
[297.65621948 327.72085571]
[284.10458374 323.36666870]
[271.28527832 317.17636108]
[259.44567871 309.26885986]
[248.81440735 299.79629517]
[239.59678650 288.94097900]
[231.97094727 276.91189575]
[226.08435059 263.94079590]
[222.05094910 250.27761841]
[219.94897461 236.18571472]
[219.81945801 221.93675232]
[221.66537476 207.80552673]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 101]
[2 100]
[3 99]
[4 98]
[5 97]
[6 92]
[7 91]
[8 90]
[9 89]
[10 88]
[12 40]
[13 39]
[14 38]
[15 37]
[17 35]
[18 34]
[19 33]
[20 32]
[22 30]
[45 86]
[46 85]
[47 84]
[48 83]
[49 82]
[50 67]
[51 66]
[52 65]
[53 64]
[54 63]
[55 62]
[56 61]
[120 130]
[121 129]
[122 128]
[123 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
