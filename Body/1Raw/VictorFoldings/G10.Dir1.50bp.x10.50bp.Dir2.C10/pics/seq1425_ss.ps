%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACCUCAACAGUUAAAUCAACAAAACUGCUCGCCAGAACACUACGAGCCACAGCUUAAAAxxxxxxxxxxUAUCUCAUCAACAACCGACUAAUCACCACCCAACAAUGACUAAUCAAACUAACCUCAAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.01251984 412.11517334]
[92.01251984 397.11517334]
[92.01251984 382.11517334]
[92.01251984 367.11517334]
[92.01251984 352.11517334]
[92.01251984 337.11517334]
[92.01251984 322.11517334]
[92.01251984 307.11517334]
[92.01251984 292.11517334]
[92.01251984 277.11517334]
[77.03645325 272.86767578]
[63.84447861 264.57626343]
[53.50346756 252.90191650]
[46.85242081 238.77951050]
[44.43439484 223.34301758]
[46.45220184 207.83451843]
[52.75138474 193.50418091]
[62.83204269 181.50949097]
[75.88847351 172.82179260]
[90.87356567 168.14758301]
[90.56150818 153.15083313]
[90.24945831 138.15408325]
[89.93740082 123.15732574]
[90.04135895 138.15696716]
[83.84368896 151.81672668]
[72.48768616 161.61677551]
[58.06818008 165.74932861]
[43.24514389 163.45202637]
[30.75297928 155.14866638]
[22.89611244 142.37095642]
[21.12390137 127.47602081]
[25.76326370 113.21150970]
[35.95837784 102.20880127]
[49.82855606 96.49755859]
[64.81516266 97.13134766]
[78.15126038 103.99128723]
[64.90867615 96.94615173]
[51.45270920 90.31765747]
[37.79646683 84.11225128]
[24.14022636 77.90684509]
[10.48398590 71.70143127]
[-3.17225552 65.49602509]
[-15.54355717 69.29138947]
[-26.81183243 63.79184723]
[-31.14354897 52.45414352]
[-44.66773987 45.96597672]
[-60.96905136 47.75461960]
[-70.44921875 34.37334824]
[-63.35586548 19.58767128]
[-46.98601532 18.60782242]
[-38.17957306 32.44178772]
[-24.65538406 38.92995453]
[-7.28624201 36.62499237]
[3.03315139 51.83978653]
[16.68939209 58.04519272]
[30.34563446 64.25060272]
[44.00187683 70.45600891]
[57.65811539 76.66141510]
[61.12199783 75.72920227]
[65.21513367 76.46942902]
[69.12731934 79.16148376]
[71.95381165 83.70356750]
[85.19639587 90.74870300]
[92.18141174 80.91871643]
[105.52609253 76.86545563]
[114.29229736 64.69361877]
[103.29960632 54.45819092]
[93.67646790 42.92569351]
[85.57466888 30.27800751]
[79.12196350 16.71460533]
[74.42014313 2.44939971]
[71.54334259 -12.29262447]
[70.53694916 -27.27896500]
[71.41682434 -42.27326584]
[74.16909790 -57.03904343]
[78.75035858 -71.34342194]
[85.08835602 -84.96080780]
[93.08312988 -97.67641449]
[102.60858917 -109.28972626]
[113.51451111 -119.61756134]
[125.62887573 -128.49703979]
[138.76065063 -135.78813171]
[152.70269775 -141.37583923]
[167.23515320 -145.17202759]
[182.12879944 -147.11683655]
[197.14877319 -147.17959595]
[212.05815125 -145.35929871]
[226.62181091 -141.68466187]
[240.61007690 -136.21365356]
[253.80229187 -129.03254700]
[265.99044800 -120.25459290]
[276.98226929 -110.01824188]
[286.60443115 -98.48493195]
[294.70516968 -85.83656311]
[301.15673828 -72.27262115]
[305.85736084 -58.00701904]
[308.73291016 -43.26475143]
[309.73803711 -28.27832603]
[308.85690308 -13.28409863]
[306.10339355 1.48144829]
[301.52093506 15.78544235]
[295.18179321 29.40228844]
[287.18594360 42.11722946]
[277.65951538 53.72973251]
[266.75271606 64.05664825]
[254.63760376 72.93511963]
[241.50521851 80.22509766]
[227.56269836 85.81163025]
[213.02992249 89.60659790]
[198.13610840 91.55015564]
[183.11613464 91.61164093]
[168.20690918 89.79009247]
[153.64355469 86.11423492]
[139.65576172 80.64204407]
[126.46413422 73.45982361]
[117.69792938 85.63166046]
[122.15474701 99.95426178]
[136.27954102 105.00301361]
[150.40435791 110.05177307]
[166.43180847 106.58009338]
[177.25022888 118.90461731]
[171.73054504 134.34692383]
[155.55093384 137.02130127]
[145.35559082 124.17657471]
[131.23078918 119.12781525]
[117.10598755 114.07906342]
[104.93415070 122.84526825]
[105.24620819 137.84202576]
[105.55826569 152.83877563]
[105.87032318 167.83552551]
[119.90780640 171.41470337]
[132.52392578 178.50997925]
[142.85638428 188.62918091]
[150.20085144 201.07365417]
[154.05897522 214.98658752]
[154.17221069 229.41195679]
[150.53910828 243.36021423]
[143.41494751 255.87619019]
[133.29393005 266.10449219]
[120.87477112 273.34793091]
[107.01251984 277.11517334]
[107.01251984 292.11517334]
[107.01251984 307.11517334]
[107.01251984 322.11517334]
[107.01251984 337.11517334]
[107.01251984 352.11517334]
[107.01251984 367.11517334]
[107.01251984 382.11517334]
[107.01251984 397.11517334]
[107.01251984 412.11517334]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[20 130]
[21 129]
[22 128]
[23 127]
[36 63]
[37 62]
[38 58]
[39 57]
[40 56]
[41 55]
[42 54]
[45 52]
[46 51]
[65 116]
[66 115]
[117 126]
[118 125]
[119 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
