%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAUCGCCCACGGGCUUACAUCCUCAUUACUAUUCUGCCUAGCAAACUCAAACUACGAACGxxxxxxxxxxUAGUUGUAGCAGGAAUCUUCUUACUCAUCCGCUUCCACCCCCUAGCAGAAAAUAGCCCACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[83.84503174 280.28195190]
[83.84503174 265.28195190]
[83.84503174 250.28195190]
[83.84503174 235.28195190]
[83.84503174 220.28195190]
[83.84503174 205.28195190]
[83.84503174 190.28195190]
[83.84503174 175.28195190]
[83.84503174 160.28195190]
[83.84503174 145.28195190]
[70.67645264 138.09944153]
[58.06532288 146.22097778]
[45.45419693 154.34252930]
[34.05317307 164.09017944]
[24.07044792 175.28593445]
[21.27039909 191.44427490]
[5.78564978 196.84376526]
[-6.45441818 185.92988586]
[-2.85827136 169.92990112]
[12.87468243 165.30322266]
[22.85740852 154.10745239]
[13.83987904 142.12062073]
[0.31568894 148.60877991]
[-3.38998675 163.80094910]
[-16.02456665 173.01515198]
[-31.62238884 171.90071106]
[-42.81863785 160.98384094]
[-44.32678604 145.41915894]
[-35.43473434 132.55581665]
[-20.34103775 128.46749878]
[-6.17247629 135.08459473]
[7.35171366 128.59642029]
[21.43383598 128.16488647]
[32.04512787 133.47666931]
[37.33265305 141.73139954]
[49.94378281 133.60984802]
[62.55490875 125.48831177]
[55.98897934 105.03945160]
[59.62393188 84.35682678]
[72.18505096 68.12796783]
[90.42704773 59.82027435]
[109.96195221 60.94416809]
[116.30908203 47.35321808]
[122.65621185 33.76226807]
[129.00334167 20.17131615]
[135.35047913 6.58036470]
[141.69760132 -7.01058626]
[142.50599670 -16.17564774]
[148.32075500 -20.81614494]
[154.94924927 -34.27210999]
[161.57774353 -47.72807693]
[151.41503906 -64.33966827]
[155.15383911 -84.73644257]
[172.53665161 -98.22115326]
[168.83049011 -112.75608826]
[165.12432861 -127.29102325]
[161.41816711 -141.82595825]
[146.34346008 -141.69689941]
[131.67607117 -145.17987061]
[118.26874542 -152.07240295]
[106.90096283 -161.97377014]
[98.23363495 -174.30830383]
[92.77066803 -188.35890198]
[90.82967377 -203.30868530]
[92.52349091 -218.28848267]
[97.75364685 -232.42739868]
[106.21607208 -244.90341187]
[117.41876984 -254.99118042]
[130.71043396 -262.10421753]
[145.31829834 -265.82894897]
[160.39308167 -265.94888306]
[175.05834961 -262.45703125]
[188.46150208 -255.55636597]
[199.82327271 -245.64810181]
[208.48312378 -233.30831909]
[213.93757629 -219.25440979]
[215.86950684 -204.30345154]
[214.16661072 -189.32467651]
[208.92787170 -175.18893433]
[200.45788574 -162.71806335]
[189.24908447 -152.63710022]
[175.95310974 -145.53211975]
[179.65927124 -130.99719238]
[183.36543274 -116.46224976]
[187.07159424 -101.92731476]
[200.72782898 -95.72190857]
[214.11412048 -102.49002075]
[227.28269958 -109.67253113]
[240.22074890 -117.26243591]
[253.15881348 -124.85234833]
[259.02478027 -131.94052124]
[266.44592285 -132.46235657]
[279.53909302 -139.78146362]
[292.63223267 -147.10057068]
[291.20858765 -162.26278687]
[296.08117676 -176.69114685]
[306.40585327 -187.88584900]
[320.39376831 -193.90733337]
[335.62142944 -193.71234131]
[349.45056152 -187.33465576]
[359.48519897 -175.87925720]
[363.98675537 -161.33085632]
[362.17532349 -146.21006775]
[354.36471558 -133.13662720]
[341.90823364 -124.37561798]
[326.96395874 -121.44492340]
[312.12112427 -124.85230255]
[299.95132446 -134.00741577]
[286.85818481 -126.68830872]
[273.76501465 -119.36920166]
[260.74871826 -111.91429138]
[247.81066895 -104.32437897]
[234.87260437 -96.73447418]
[233.63969421 -93.36588287]
[230.67715454 -90.44610596]
[226.22323608 -88.79839325]
[220.88223267 -89.10373688]
[207.49594116 -82.33562469]
[209.93862915 -65.26176453]
[203.19650269 -50.19115448]
[190.06471252 -41.45461655]
[175.03372192 -41.09957886]
[168.40521240 -27.64361191]
[161.77671814 -14.18764687]
[155.28855896 -0.66345686]
[148.94142151 12.92749405]
[142.59429932 26.51844406]
[136.24716187 40.10939407]
[129.90003967 53.70034790]
[123.55290222 67.29129791]
[130.76322937 73.26052856]
[136.47309875 80.80943298]
[140.33909607 89.56341553]
[142.11080933 99.07397461]
[141.64645386 108.84165955]
[138.92298889 118.34225464]
[134.03987122 127.05496216]
[127.21620941 134.49087524]
[118.78121948 140.22038269]
[109.15853882 143.89779663]
[98.84503174 145.28195190]
[98.84503174 160.28195190]
[98.84503174 175.28195190]
[98.84503174 190.28195190]
[98.84503174 205.28195190]
[98.84503174 220.28195190]
[98.84503174 235.28195190]
[98.84503174 250.28195190]
[98.84503174 265.28195190]
[98.84503174 280.28195190]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 37]
[12 36]
[13 35]
[14 21]
[15 20]
[22 32]
[23 31]
[42 130]
[43 129]
[44 128]
[45 127]
[46 126]
[47 125]
[49 124]
[50 123]
[51 122]
[54 85]
[55 84]
[56 83]
[57 82]
[86 118]
[87 117]
[88 113]
[89 112]
[90 111]
[92 110]
[93 109]
[94 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
