%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACACAAAGCACCCAACUUACACUUAGGAGAUUUCAACUUAACUUGACCGCUCUGAGCUAxxxxxxxxxxAGGCGGCUAUGGUAUAAUACGCCUCACACUCAUUCUCAACCCCCUGACAAAACACAUAGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[94.91298676 424.53576660]
[94.91298676 409.53576660]
[94.91298676 394.53576660]
[94.91298676 379.53576660]
[94.91298676 364.53576660]
[94.91298676 349.53576660]
[94.91298676 334.53576660]
[94.91298676 319.53576660]
[94.91298676 304.53576660]
[94.91298676 289.53576660]
[79.84248352 286.41711426]
[65.73836517 280.24514771]
[53.21212006 271.28488159]
[42.80736542 259.92230225]
[34.97624207 246.64775085]
[30.05975914 232.03465271]
[28.27296257 216.71487427]
[29.69552231 201.35133362]
[34.26817322 186.60931396]
[41.79520416 173.12770081]
[51.95280075 161.49122620]
[64.30300903 152.20516968]
[78.31259918 145.67338562]
[93.37608337 142.18074036]
[93.06402588 127.18399048]
[74.02907562 119.78334045]
[62.76631165 99.29171753]
[48.19361115 102.84648132]
[41.42983246 116.94560242]
[27.16448021 123.35136414]
[12.13321781 119.03915405]
[3.43334699 106.04506683]
[5.17268085 90.50451660]
[16.52995872 79.75527191]
[32.14262390 78.87280273]
[44.63884735 88.27377319]
[59.21155167 84.71901703]
[61.38838959 69.87780762]
[48.45033264 62.28789902]
[35.51227570 54.69799042]
[21.34410667 60.74523163]
[6.50527716 57.33018494]
[-3.36062455 45.96673584]
[-4.62829018 31.15015602]
[-17.56634712 23.56024742]
[-30.50440216 15.97033978]
[-43.44245911 8.38043118]
[-58.67111969 12.60695076]
[-72.38668823 4.75464773]
[-76.45196533 -10.51784611]
[-68.45509338 -24.14963150]
[-53.14047241 -28.05321121]
[-39.59399414 -19.91266060]
[-35.85255051 -4.55762482]
[-22.91449356 3.03228354]
[-9.97643757 10.62219143]
[2.96161795 18.21210098]
[16.51321411 12.08900928]
[31.24607849 15.15604115]
[41.46746063 26.44217300]
[43.10218430 41.75993729]
[56.04024124 49.34984589]
[68.97829437 56.93975449]
[83.68625641 53.99427032]
[92.70378876 42.00743866]
[101.72132111 30.02060509]
[110.73884583 18.03377151]
[101.96464539 7.62925673]
[95.58049011 -4.38334036]
[91.87004089 -17.46431732]
[90.99690247 -31.02664185]
[92.99742126 -44.46228790]
[97.77918243 -57.16949844]
[105.12525177 -68.57974243]
[114.70403290 -78.18312836]
[126.08425140 -85.55123138]
[138.75433350 -90.35615540]
[152.14543152 -92.38517761]
[165.65696716 -91.55010986]
[178.68351746 -87.89117432]
[190.64204407 -81.57505035]
[200.38969421 -92.97606659]
[210.13734436 -104.37709045]
[219.88499451 -115.77810669]
[229.63264465 -127.17913055]
[222.70744324 -140.71095276]
[221.49276733 -155.86326599]
[226.17387390 -170.32548523]
[236.03689575 -181.89222717]
[249.57780457 -188.79962158]
[264.73171997 -189.99435425]
[279.18777466 -185.29425049]
[290.74151611 -175.41601562]
[297.63107300 -161.86602783]
[298.80587769 -146.71055603]
[294.08676147 -132.26069641]
[284.19335938 -120.71996307]
[270.63430786 -113.84821320]
[255.47731018 -112.69335175]
[241.03367615 -117.43148041]
[231.28601074 -106.03045654]
[221.53836060 -94.62944031]
[211.79071045 -83.22841644]
[202.04306030 -71.82739258]
[211.59965515 -58.40752029]
[217.41030884 -42.98036575]
[219.08364868 -26.57000542]
[216.50317383 -10.26722145]
[209.83529663 4.84299803]
[199.51863098 17.75367355]
[186.23512268 27.60293961]
[170.86503601 33.73157501]
[154.42855835 35.72712708]
[138.01808167 33.45166779]
[122.72567749 27.05130196]
[113.70815277 39.03813553]
[104.69062042 51.02496719]
[95.67308807 63.01179886]
[110.86952209 65.75544739]
[123.11406708 74.23168182]
[130.46551514 86.54661560]
[131.99053955 100.25466919]
[127.86387634 112.83844757]
[119.25872803 122.17044830]
[108.06078339 126.87193298]
[108.37284088 141.86868286]
[122.77555084 144.49906921]
[136.37850952 149.90007019]
[148.65454102 157.86026001]
[159.12829590 168.06909180]
[167.39466858 180.12898254]
[173.13447571 193.57081604]
[176.12678528 207.87217712]
[176.25735474 222.47766113]
[173.52308655 236.82044983]
[168.03201294 250.34428406]
[159.99902344 262.52508545]
[149.73750305 272.89123535]
[137.64706421 281.04177856]
[124.19799805 286.66204834]
[109.91298676 289.53576660]
[109.91298676 304.53576660]
[109.91298676 319.53576660]
[109.91298676 334.53576660]
[109.91298676 349.53576660]
[109.91298676 364.53576660]
[109.91298676 379.53576660]
[109.91298676 394.53576660]
[109.91298676 409.53576660]
[109.91298676 424.53576660]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[24 126]
[25 125]
[27 37]
[28 36]
[38 63]
[39 62]
[40 61]
[44 57]
[45 56]
[46 55]
[47 54]
[64 118]
[65 117]
[66 116]
[67 115]
[81 104]
[82 103]
[83 102]
[84 101]
[85 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
