%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCCCAACUAACACAUUAUUUUCCCCUCCCACUCCCAUACUACUAAUCUCAUCAAUACAACCCCCxxxxxxxxxxAUCCACAUCAAAACCCCCUCCCCAUGCUUACAAGCAAGUACAGCAAUCAACCCUCAACUAUCACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[87.89600372 101.36280823]
[75.15635681 93.44437408]
[62.41671753 85.52594757]
[49.67707443 77.60752106]
[36.93743134 69.68909454]
[24.19779015 61.77066422]
[11.45814705 53.85223389]
[-1.28149509 45.93380356]
[-14.02113724 38.01537704]
[-26.76078033 30.09694862]
[-35.55202866 42.25830841]
[-45.17020035 53.77679443]
[-55.56843185 64.59629059]
[-66.69606781 74.66407776]
[-78.49889374 83.93112183]
[-90.91941071 92.35225677]
[-103.89710236 99.88645935]
[-117.36874390 106.49703217]
[-131.26869202 112.15176392]
[-145.52925110 116.82310486]
[-160.08091736 120.48829651]
[-174.85281372 123.12947845]
[-189.77296448 124.73378754]
[-204.76867676 125.29341125]
[-219.76690674 124.80561829]
[-234.69456482 123.27278137]
[-249.47894287 120.70236969]
[-264.04800415 117.10691833]
[-278.33074951 112.50392914]
[-292.25762939 106.91583252]
[-305.76077271 100.36985016]
[-318.77441406 92.89788818]
[-331.23510742 84.53633118]
[-343.08218384 75.32592773]
[-354.25790405 65.31153870]
[-364.70785522 54.54196930]
[-374.38107300 43.06967926]
[-383.23046875 30.95056343]
[-391.21289062 18.24366379]
[-398.28952026 5.01088715]
[-404.42581177 -8.68329620]
[-409.59188843 -22.77216911]
[-413.76257324 -37.18709183]
[-416.91760254 -51.85783386]
[-419.04153442 -66.71292114]
[-420.12405396 -81.67997742]
[-420.15988159 -96.68609619]
[-419.14883423 -111.65814972]
[-417.09585571 -126.52320862]
[-414.01092529 -141.20884705]
[-409.90911865 -155.64352417]
[-404.81036377 -169.75689697]
[-398.73953247 -183.48022461]
[-391.72619629 -196.74664307]
[-383.80450439 -209.49151611]
[-375.01309204 -221.65275574]
[-365.39474487 -233.17109680]
[-354.99636841 -243.99044800]
[-343.86859131 -254.05807495]
[-332.06561279 -263.32495117]
[-319.64498901 -271.74591064]
[-306.66717529 -279.27993774]
[-293.19546509 -285.89031982]
[-279.29541016 -291.54483032]
[-265.03479004 -296.21597290]
[-250.48307800 -299.88095093]
[-235.71115112 -302.52194214]
[-220.79096985 -304.12603760]
[-205.79524231 -304.68542480]
[-190.79702759 -304.19741821]
[-175.86938477 -302.66436768]
[-161.08505249 -300.09375000]
[-146.51603699 -296.49807739]
[-132.23335266 -291.89489746]
[-118.30654907 -286.30661011]
[-104.80349731 -279.76043701]
[-91.78997803 -272.28826904]
[-79.32939911 -263.92654419]
[-67.48245239 -254.71595764]
[-56.30687332 -244.70141602]
[-45.85709381 -233.93170166]
[-36.18403625 -222.45927429]
[-27.33481789 -210.34002686]
[-19.35255432 -197.63301086]
[-12.27613831 -184.40013123]
[-6.14004326 -170.70585632]
[-0.97416335 -156.61691284]
[3.19633269 -142.20193481]
[6.35112667 -127.53114319]
[8.47484875 -112.67602539]
[9.55715179 -97.70895386]
[9.59276390 -82.70284271]
[8.58151054 -67.73079681]
[6.52831888 -52.86576462]
[3.44319177 -38.18016815]
[-0.65884006 -23.74555588]
[-5.75779200 -9.63224983]
[-11.82882118 4.09099054]
[-18.84235191 17.35730553]
[-6.10270929 25.27573395]
[6.63693333 33.19416428]
[19.37657547 41.11259079]
[32.11621857 49.03102112]
[44.85586166 56.94944763]
[57.59550476 64.86787415]
[70.33514404 72.78630829]
[83.07479095 80.70473480]
[95.81443024 88.62316132]
[103.07975006 88.32375336]
[109.18085480 92.22798920]
[124.17443085 91.78900909]
[139.16799927 91.35002899]
[154.16157532 90.91104889]
[169.15016174 90.32581329]
[184.13230896 89.59436035]
[199.11447144 88.86291504]
[209.54455566 76.98904419]
[225.32101440 76.05152893]
[237.08395386 86.60657501]
[237.85461426 102.39205933]
[227.17579651 114.04273987]
[211.38304138 114.64646912]
[199.84591675 103.84506989]
[184.86376953 104.57651520]
[169.88160706 105.30796814]
[163.32089233 108.79277802]
[154.60055542 105.90462494]
[139.60697937 106.34360504]
[124.61341095 106.78258514]
[109.61983490 107.22156525]
[122.79709625 114.38814545]
[134.40710449 123.88592529]
[144.04267883 135.38182068]
[151.36592102 148.47265625]
[156.11999512 162.69935608]
[158.13816833 177.56295776]
[157.34967041 192.54222107]
[153.78215027 207.11181641]
[147.56072998 220.76075745]
[138.90357971 233.01040649]
[128.11433411 243.43115234]
[115.57133484 251.65753174]
[101.71450043 257.40106201]
[87.02977753 260.46029663]
[72.03216553 260.72796631]
[57.24763489 258.19467163]
[43.19467926 252.94924927]
[30.36613655 245.17567444]
[19.21190834 235.14654541]
[10.12317562 223.21362305]
[3.41868091 209.79534912]
[-0.66644728 195.36235046]
[-1.98894310 180.42076111]
[-0.50242656 165.49459839]
[3.74097013 151.10733032]
[10.59243011 137.76350403]
[19.81167221 125.93111420]
[31.07537460 116.02510834]
[43.98851776 108.39289093]
[58.09823608 103.30213165]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 108]
[2 107]
[3 106]
[4 105]
[5 104]
[6 103]
[7 102]
[8 101]
[9 100]
[10 99]
[110 130]
[111 129]
[112 128]
[113 127]
[114 125]
[115 124]
[116 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
