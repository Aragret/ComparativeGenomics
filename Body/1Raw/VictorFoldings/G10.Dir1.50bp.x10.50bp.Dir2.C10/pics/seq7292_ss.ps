%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGUCCUAAUAGUAGAAGAACCCUCCAUAAACCUGGAGUGACUAUAUGGAUGCCCCCCACCxxxxxxxxxxUUUACCAUCAUUGGACAAGUAGCAUCCGUACUAUACUUCACAACAAUCCUAAUCCUAAUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[171.74430847 371.40289307]
[171.74430847 356.40289307]
[171.74430847 341.40289307]
[171.74430847 326.40289307]
[171.74430847 311.40289307]
[171.74430847 296.40289307]
[171.74430847 281.40289307]
[171.74430847 266.40289307]
[171.74430847 251.40289307]
[171.74430847 236.40289307]
[168.18954468 221.83020020]
[161.28254700 208.51504517]
[154.37554932 195.19987488]
[151.67648315 194.23947144]
[149.20869446 192.11721802]
[147.42988586 188.92070007]
[146.75563049 184.90617371]
[147.50035095 180.47821045]
[141.72409058 166.63499451]
[135.94781494 152.79176331]
[130.17153931 138.94854736]
[124.39527130 125.10533142]
[118.61899567 111.26211548]
[105.81095123 119.62457275]
[91.64219666 117.25607300]
[83.40076447 106.64599609]
[68.42105103 105.86615753]
[58.29552460 113.92391968]
[45.79647827 112.92749786]
[37.61762619 103.96012878]
[23.29110718 110.67290497]
[11.16048336 102.03015137]
[-3.79976583 100.93883514]
[-18.76001358 99.84752655]
[-33.72026443 98.75621796]
[-48.68051147 97.66490936]
[-60.47389984 108.18591309]
[-76.24758148 107.20279694]
[-86.64331055 95.29883575]
[-85.49348450 79.53643036]
[-73.48027802 69.26713562]
[-57.73090744 70.58354950]
[-47.58920288 82.70465851]
[-32.62895203 83.79596710]
[-17.66870308 84.88727570]
[-2.70845532 85.97859192]
[12.25179386 87.06990051]
[25.50825691 80.27906036]
[38.70893860 88.99987793]
[54.03110886 80.50099945]
[69.20089722 90.88643646]
[84.18061066 91.66628265]
[89.52877045 84.32567596]
[98.17945099 80.26360321]
[108.19158936 80.89167786]
[117.07189941 86.50730896]
[121.07963562 72.05262756]
[125.08737946 57.59793472]
[129.09512329 43.14324570]
[133.10285950 28.68855858]
[137.11059570 14.23387051]
[141.11833191 -0.22081831]
[127.41659546 -6.39841938]
[114.81850433 -14.59527683]
[103.61937714 -24.61924362]
[94.08173370 -36.23534393]
[86.42915344 -49.17127991]
[80.84102631 -63.12381744]
[77.44834137 -77.76588440]
[76.33062744 -92.75424957]
[77.51409149 -107.73757172]
[80.97098541 -122.36460876]
[86.62028503 -136.29249573]
[94.32954407 -149.19473267]
[103.91806793 -160.76887512]
[115.16107178 -170.74360657]
[127.79500580 -178.88510132]
[141.52372742 -185.00253296]
[156.02539062 -188.95246887]
[170.96006775 -190.64233398]
[185.97767639 -190.03251648]
[200.72618103 -187.13731384]
[214.85984802 -182.02458191]
[228.04736328 -174.81419373]
[239.97958374 -165.67514038]
[250.37683105 -154.82165527]
[258.99536133 -142.50819397]
[265.63311768 -129.02337646]
[270.13455200 -114.68330383]
[272.39410400 -99.82413483]
[272.35882568 -84.79418945]
[270.02954102 -69.94579315]
[265.46087646 -55.62701416]
[258.75985718 -42.17350006]
[250.08363342 -29.90062141]
[239.63555908 -19.09607506]
[227.66056824 -10.01313305]
[214.43934631 -2.86471272]
[200.28184509 2.18161631]
[185.51991272 5.00756073]
[170.49961853 5.54687691]
[155.57302856 3.78692198]
[151.56529236 18.24160957]
[147.55754089 32.69630051]
[143.54980469 47.15098572]
[139.54206848 61.60567474]
[135.53433228 76.06036377]
[131.52658081 90.51505280]
[132.46221924 105.48584747]
[138.23847961 119.32906342]
[144.01475525 133.17228699]
[149.79103088 147.01550293]
[155.56730652 160.85871887]
[161.34358215 174.70193481]
[167.69070435 188.29287720]
[174.59770203 201.60803223]
[181.50469971 214.92320251]
[182.49906921 199.95619202]
[187.11705017 185.68473816]
[195.07922363 172.97239685]
[205.90382385 162.58836365]
[218.93585205 155.16096497]
[233.38676453 151.13961792]
[248.38214111 150.76765442]
[263.01464844 154.06758118]
[276.39892578 160.83972168]
[287.72503662 170.67431641]
[296.30767822 182.97625732]
[301.62756348 197.00120544]
[303.36276245 211.90049744]
[301.40829468 226.77261353]
[295.88238525 240.71766663]
[287.11944580 252.89186096]
[275.64968872 262.55853271]
[262.16714478 269.13281250]
[247.48760986 272.21682739]
[232.49932861 271.62402344]
[218.10922241 267.39025879]
[205.18801880 259.77169800]
[194.51756287 249.22933960]
[186.74430847 236.40289307]
[186.74430847 251.40289307]
[186.74430847 266.40289307]
[186.74430847 281.40289307]
[186.74430847 296.40289307]
[186.74430847 311.40289307]
[186.74430847 326.40289307]
[186.74430847 341.40289307]
[186.74430847 356.40289307]
[186.74430847 371.40289307]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 117]
[12 116]
[13 115]
[18 114]
[19 113]
[20 112]
[21 111]
[22 110]
[23 109]
[26 52]
[27 51]
[30 49]
[32 47]
[33 46]
[34 45]
[35 44]
[36 43]
[56 108]
[57 107]
[58 106]
[59 105]
[60 104]
[61 103]
[62 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
