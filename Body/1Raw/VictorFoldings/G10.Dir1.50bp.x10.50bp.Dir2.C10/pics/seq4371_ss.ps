%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCACUCACCCUAGCAUUACUUAUAUGAUAUGUCUCCAUACCCAUUACAAUCUCCAGCAUxxxxxxxxxxCAUAUACCAAUGAUGGCGCGAUGUAACACGAGAAAGCACAUACCAAGGCCACCACACACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[91.19513702 425.98056030]
[91.19513702 410.98056030]
[91.19513702 395.98056030]
[91.19513702 380.98056030]
[91.19513702 365.98056030]
[91.19513702 350.98056030]
[91.19513702 335.98056030]
[91.19513702 320.98056030]
[91.19513702 305.98056030]
[91.19513702 290.98056030]
[75.15293884 286.61212158]
[60.95328522 277.93743896]
[49.72607040 265.63806152]
[42.36708832 250.68428040]
[39.46658325 234.25859070]
[41.26189423 217.66224670]
[47.61806488 202.21208191]
[58.03795624 189.13610840]
[71.70112610 179.47586060]
[87.52840424 174.00347900]
[86.59277344 159.03268433]
[85.65715027 144.06188965]
[77.93523407 156.92160034]
[65.71569824 165.62120056]
[51.03704071 168.70939636]
[36.34798813 165.67103577]
[24.09900284 157.01295471]
[16.33349228 144.17951965]
[14.34691525 129.31166077]
[18.47068024 114.88964081]
[28.01684952 103.31938934]
[41.39290619 96.53108215]
[56.36742783 95.65716553]
[70.44232178 100.84342957]
[81.26959229 111.22467804]
[87.04272461 125.06769562]
[90.14104462 110.39116669]
[85.98494720 97.04132080]
[95.18242645 86.51050568]
[98.28074646 71.83398438]
[101.37907410 57.15745544]
[104.47739410 42.48093033]
[107.57571411 27.80440521]
[94.01719666 21.22776794]
[82.43377686 11.60297108]
[73.49600983 -0.50716859]
[67.71994019 -14.39612961]
[65.43731689 -29.25489807]
[66.77652740 -44.21909714]
[71.65540314 -58.41926956]
[79.78623199 -71.03138733]
[90.69274139 -81.32467651]
[103.73796844 -88.70397186]
[118.16147614 -92.74409485]
[133.12367249 -93.21438599]
[136.22198486 -107.89090729]
[139.32031250 -122.56743622]
[142.41862488 -137.24395752]
[145.51695251 -151.92048645]
[133.11703491 -162.81179810]
[127.91335297 -178.37512207]
[131.23071289 -194.35089111]
[142.07524109 -206.41647339]
[157.42955017 -211.35578918]
[160.22187805 -226.09359741]
[163.01420593 -240.83140564]
[157.98110962 -255.83068848]
[167.95242310 -266.89514160]
[170.74473572 -281.63296509]
[173.53706360 -296.37075806]
[160.16720581 -303.42327881]
[149.47126770 -314.10452271]
[142.40034485 -327.46466064]
[139.58316040 -342.31573486]
[141.27023315 -357.33724976]
[147.31153870 -371.19342041]
[157.16989136 -382.65222168]
[169.96868896 -390.69473267]
[184.56988525 -394.60583496]
[199.67514038 -394.03771973]
[213.94129944 -389.04092407]
[226.09983826 -380.05975342]
[235.06962585 -367.89282227]
[240.05307007 -353.62197876]
[240.60704041 -338.51620483]
[236.68229675 -323.91867065]
[228.62780762 -311.12741089]
[217.15977478 -301.27978516]
[203.29792786 -295.25146484]
[188.27487183 -293.57843018]
[185.48254395 -278.84063721]
[182.69021606 -264.10284424]
[187.92303467 -250.15768433]
[177.75201416 -238.03907776]
[174.95968628 -223.30126953]
[172.16735840 -208.56346130]
[183.10549927 -200.32838440]
[189.44653320 -188.11894226]
[189.89666748 -174.30210876]
[184.31047058 -161.58442688]
[173.73056030 -152.48187256]
[160.19348145 -148.82215881]
[157.09515381 -134.14564514]
[153.99684143 -119.46911621]
[150.89851379 -104.79258728]
[147.80018616 -90.11606598]
[161.29557800 -83.63816833]
[172.85530090 -74.11280060]
[181.80465698 -62.09028625]
[187.61996460 -48.26689911]
[189.95916748 -33.44448090]
[188.68200684 -18.48395920]
[183.85839844 -4.25534105]
[175.76463318 8.41289330]
[164.86749268 18.78202057]
[151.79745483 26.24615097]
[137.31210327 30.36763763]
[122.25224304 30.90272713]
[119.15392303 45.57925415]
[116.05559540 60.25577927]
[112.95727539 74.93230438]
[109.85895538 89.60883331]
[114.01505280 102.95867920]
[104.81757355 113.48949432]
[101.71925354 128.16601562]
[100.62793732 143.12626648]
[101.56356812 158.09706116]
[102.49919891 173.06785583]
[115.74957275 175.48101807]
[128.10966492 180.81031799]
[138.94709778 188.77905273]
[147.70832825 198.97557068]
[153.94691467 210.87457275]
[157.34620667 223.86413574]
[157.73550415 237.27720642]
[155.09855652 250.42585754]
[149.57423401 262.63653564]
[141.44921875 273.28457642]
[131.14312744 281.82626343]
[119.18683624 287.82635498]
[106.19513702 290.98056030]
[106.19513702 305.98056030]
[106.19513702 320.98056030]
[106.19513702 335.98056030]
[106.19513702 350.98056030]
[106.19513702 365.98056030]
[106.19513702 380.98056030]
[106.19513702 395.98056030]
[106.19513702 410.98056030]
[106.19513702 425.98056030]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[20 128]
[21 127]
[22 126]
[36 125]
[37 124]
[39 122]
[40 121]
[41 120]
[42 119]
[43 118]
[55 106]
[56 105]
[57 104]
[58 103]
[59 102]
[64 96]
[65 95]
[66 94]
[68 92]
[69 91]
[70 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
