%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUCCUAUUAUUUAUCGCACCUACGUUCAAUAUUACAGGCGAACAUACUUACUAAAGUGUGxxxxxxxxxxGAUCCAAUAACUUGACCAACGGAACAAGUUACCCUAGGGAUAACAGCGCAAUCCUAUUCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[134.41091919 344.59317017]
[134.41091919 329.59317017]
[134.41091919 314.59317017]
[134.41091919 299.59317017]
[134.41091919 284.59317017]
[134.41091919 269.59317017]
[134.41091919 254.59317017]
[134.41091919 239.59317017]
[134.41091919 224.59317017]
[134.41091919 209.59317017]
[131.46543884 194.88520813]
[125.68916321 181.04199219]
[119.91288757 167.19877625]
[114.13661957 153.35556030]
[108.36034393 139.51234436]
[101.32130432 140.36550903]
[94.24153137 139.97450256]
[87.33925629 138.35134888]
[80.82721710 135.54609680]
[74.90615082 131.64520264]
[69.75854492 126.76892090]
[65.54307556 121.06753540]
[62.38966751 114.71678162]
[60.39552689 107.91241455]
[45.39633560 108.06845093]
[30.39714813 108.22448730]
[15.39795971 108.38052368]
[11.30652142 122.92138672]
[3.28301001 135.71981812]
[-8.02214336 145.73831177]
[-21.69248199 152.16470337]
[-36.61980820 154.47804260]
[-51.59403992 152.49079895]
[-65.40127563 146.36405945]
[-76.92221832 136.59448242]
[-85.22293854 123.97407532]
[-89.63050842 109.52589417]
[-89.78764343 94.42119598]
[-85.68160248 79.88444519]
[-77.64523315 67.09407806]
[-66.33002472 57.08694458]
[-52.65323639 50.67428589]
[-37.72359085 48.37594604]
[-22.75136566 50.37823868]
[-8.95029354 56.51884842]
[2.56083536 66.29998016]
[10.84886551 78.92872620]
[15.24192333 93.38133240]
[30.24111176 93.22529602]
[45.24029922 93.06925964]
[60.23949051 92.91322327]
[67.85569000 71.22629547]
[87.01100922 55.98065186]
[78.75872040 43.45468903]
[70.50643158 30.92872810]
[62.25414276 18.40276527]
[54.00185394 5.87680340]
[45.74956512 -6.64915848]
[37.49727631 -19.17512131]
[22.60231018 -26.03602982]
[21.36619186 -42.38852310]
[35.06053162 -51.41055679]
[49.59776688 -43.82103729]
[50.02323532 -27.42741013]
[58.27552414 -14.90144825]
[66.52781677 -2.37548590]
[74.78010559 10.15047646]
[83.03239441 22.67643738]
[91.28468323 35.20240021]
[99.53697205 47.72836304]
[98.30017090 32.77943802]
[97.06337738 17.83051491]
[95.82657623 2.88159013]
[89.25231934 -10.60096169]
[88.53594971 -25.58384514]
[93.79387665 -39.63212585]
[104.17161560 -50.46275711]
[117.98263550 -56.31560135]
[132.98243713 -56.23949051]
[146.73335266 -50.24679184]
[157.00064087 -39.31140518]
[162.11573792 -25.21048927]
[161.24736023 -10.23564625]
[154.53662109 3.17949533]
[143.07264709 12.85558224]
[135.89901733 26.02900314]
[128.72538757 39.20242310]
[121.55175781 52.37584305]
[134.16288757 44.25430298]
[146.77401733 36.13275909]
[159.38514709 28.01121902]
[171.99627686 19.88967705]
[184.60740662 11.76813412]
[197.21853638 3.64659190]
[205.22067261 -12.90471077]
[222.74043274 -13.14480209]
[235.17988586 -21.52694511]
[244.93646240 -35.39220810]
[260.96075439 -29.85520935]
[260.07611084 -12.92435741]
[243.56202698 -9.08750439]
[231.12258911 -0.70536137]
[228.48207092 11.14094830]
[218.13119507 18.21754837]
[205.34007263 16.25771904]
[192.72894287 24.37926292]
[180.11781311 32.50080490]
[167.50668335 40.62234497]
[154.89555359 48.74388885]
[142.28442383 56.86542892]
[129.67330933 64.98697662]
[138.14694214 76.17150116]
[142.70138550 89.14491272]
[143.06256104 102.60739136]
[139.36769104 115.26414490]
[132.13604736 125.94989014]
[122.20355988 133.73606873]
[127.97983551 147.57928467]
[133.75610352 161.42250061]
[139.53237915 175.26573181]
[145.30865479 189.10894775]
[147.61473083 174.28727722]
[154.11204529 160.76747131]
[164.24435425 149.70690918]
[177.14431763 142.05242920]
[191.70761108 138.45928955]
[206.68753052 139.23509216]
[220.80172729 144.31341553]
[232.84194946 153.25955200]
[241.77748108 165.30761719]
[246.84339905 179.42628479]
[247.60604858 194.40687561]
[244.00010681 208.96701050]
[236.33428955 221.86022949]
[225.26483154 231.98281860]
[211.73931885 238.46824646]
[196.91561890 240.76129150]
[182.06272888 238.66569519]
[168.45211792 232.36080933]
[157.24894714 222.38639832]
[149.41091919 209.59317017]
[149.41091919 224.59317017]
[149.41091919 239.59317017]
[149.41091919 254.59317017]
[149.41091919 269.59317017]
[149.41091919 284.59317017]
[149.41091919 299.59317017]
[149.41091919 314.59317017]
[149.41091919 329.59317017]
[149.41091919 344.59317017]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 121]
[12 120]
[13 119]
[14 118]
[15 117]
[24 51]
[25 50]
[26 49]
[27 48]
[53 70]
[54 69]
[55 68]
[56 67]
[57 66]
[58 65]
[59 64]
[88 111]
[89 110]
[90 109]
[91 108]
[92 107]
[93 106]
[94 105]
[96 102]
[97 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
