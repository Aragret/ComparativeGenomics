%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAGCCUACCCCUUCCUUGUACUAUCCCUAUGAGGCAUAAUUAUAACAAGCUCCAUCUGCCUACxxxxxxxxxxAUUAACACUAUUCUCACCAGACCUCCUAGGCGACCCAGACAAUUAUACCCUAGCCAACCCCUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[208.49946594 360.80337524]
[207.59954834 345.83038330]
[206.69963074 330.85739136]
[205.79971313 315.88442993]
[204.89979553 300.91143799]
[203.99987793 285.93844604]
[203.09997559 270.96548462]
[198.23695374 256.77566528]
[189.76354980 244.39819336]
[181.29014587 232.02073669]
[172.81674194 219.64329529]
[159.24264526 213.51196289]
[157.83155823 197.75379944]
[149.35815430 185.37634277]
[140.88475037 172.99888611]
[132.41133118 160.62142944]
[123.93793488 148.24397278]
[111.24662781 152.66896057]
[97.85485077 153.81361389]
[84.59667969 151.60662842]
[72.29785919 146.18547058]
[61.72439575 137.88778687]
[53.53481293 127.23036194]
[48.23918915 114.87697601]
[46.16733551 101.59701538]
[31.25808716 99.94950867]
[16.34883690 98.30200195]
[1.43958771 96.65450287]
[-13.46966171 95.00699615]
[-19.75197029 97.34163666]
[-25.40548325 96.27285767]
[-28.93815613 92.98364258]
[-43.76955032 90.74094391]
[-58.60094833 88.49824524]
[-69.51040649 99.37436676]
[-84.55634308 101.71384430]
[-97.93654633 94.82659912]
[-104.61563873 81.54022217]
[-119.44702911 79.29752350]
[-134.27842712 77.05482483]
[-149.10981750 74.81212616]
[-165.67492676 78.42234039]
[-173.72973633 63.50401306]
[-161.62420654 51.63418961]
[-146.86712646 59.98072815]
[-132.03572083 62.22342682]
[-117.20433044 64.46612549]
[-102.37293243 66.70883179]
[-92.06413269 55.99124527]
[-77.24581909 53.36798477]
[-63.56426239 60.05143738]
[-56.35824585 73.66684723]
[-41.52685165 75.90955353]
[-26.69545555 78.15225220]
[-11.82215595 80.09774017]
[3.08709407 81.74524689]
[17.99634361 83.39275360]
[32.90559387 85.04026031]
[47.81484222 86.68776703]
[52.39676666 74.81194305]
[59.63792038 64.34318542]
[69.13379669 55.86629868]
[80.35392761 49.85482788]
[92.67154694 46.64458847]
[105.39854431 46.41490936]
[108.96585846 31.84527397]
[112.53316498 17.27563858]
[116.10047913 2.70600343]
[102.39297485 -3.49229455]
[90.05793762 -12.10399818]
[79.51548767 -22.83579636]
[71.12471008 -35.32216644]
[65.17137909 -49.13782883]
[61.85827255 -63.81222916]
[61.29823303 -78.84555817]
[63.51032639 -93.72579193]
[68.41921997 -107.94610596]
[75.85771179 -121.02217102]
[85.57245636 -132.50862122]
[97.23255920 -142.01422119]
[110.44089508 -149.21522522]
[124.74759674 -153.86636353]
[139.66535950 -155.80923462]
[154.68612671 -154.97764587]
[169.29826355 -151.39991760]
[183.00408936 -145.19792175]
[195.33680725 -136.58290100]
[205.87637329 -125.84825897]
[214.26377869 -113.35962677]
[220.21337891 -99.54235840]
[223.52253723 -84.86707306]
[224.07852173 -69.83358765]
[221.86241150 -54.95395660]
[216.94969177 -40.73496246]
[209.50767517 -27.66090202]
[199.78984070 -16.17707443]
[188.12716675 -6.67461395]
[174.91688538 0.52283025]
[160.60894775 5.17011499]
[145.69064331 7.10895586]
[130.67012024 6.27331638]
[127.10280609 20.84295273]
[123.53549194 35.41258621]
[119.96817780 49.98222351]
[135.38197327 59.39676666]
[146.81636047 73.37793732]
[152.98535156 90.35328674]
[153.19508362 108.41358948]
[147.42201233 125.52761841]
[136.31538391 139.77056885]
[144.78878784 152.14802551]
[153.26219177 164.52548218]
[161.73561096 176.90293884]
[170.20901489 189.28039551]
[184.38917542 196.29704285]
[185.19419861 211.16987610]
[193.66760254 223.54733276]
[202.14100647 235.92478943]
[210.61441040 248.30224609]
[209.71104431 233.32948303]
[211.98908997 218.50346375]
[217.34582520 204.49256897]
[225.53979492 191.92837524]
[236.20159912 181.37727356]
[248.85064697 173.31489563]
[262.91668701 168.10470581]
[277.76568604 165.98153687]
[292.72821045 167.04113770]
[307.12979126 171.23571777]
[320.32119751 178.37619019]
[331.70779419 188.14068604]
[340.77627563 200.08901978]
[347.11785889 213.68257141]
[350.44662476 228.30854797]
[350.61254883 243.30763245]
[347.60815430 258.00366211]
[341.56887817 271.73419189]
[332.76693726 283.88021851]
[321.59915161 293.89419556]
[308.56890869 301.32476807]
[294.26367188 305.83691406]
[279.32821655 307.22726440]
[264.43591309 305.43313599]
[250.25804138 300.53536987]
[237.43374634 292.75482178]
[226.54112244 282.44216919]
[218.07295227 270.06555176]
[218.97286987 285.03854370]
[219.87278748 300.01153564]
[220.77268982 314.98449707]
[221.67260742 329.95748901]
[222.57252502 344.93045044]
[223.47244263 359.90344238]
[232.95588684 373.28240967]
[225.86614990 388.06982422]
[209.49655151 389.05368042]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 153]
[2 152]
[3 151]
[4 150]
[5 149]
[6 148]
[7 147]
[8 119]
[9 118]
[10 117]
[11 116]
[13 114]
[14 113]
[15 112]
[16 111]
[17 110]
[25 59]
[26 58]
[27 57]
[28 56]
[29 55]
[32 54]
[33 53]
[34 52]
[38 48]
[39 47]
[40 46]
[41 45]
[65 104]
[66 103]
[67 102]
[68 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
