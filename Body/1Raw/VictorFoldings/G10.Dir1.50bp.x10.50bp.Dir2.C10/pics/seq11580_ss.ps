%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUACCAACUAUCUCCCUAAUUGAAAACAAAAUACUCAAAUGGGCCUGUCCUUGUAGUAUAxxxxxxxxxxCAACUAUCACACAUCAACUGCAACUCCAAAGCCACCCCUCACCCACUAGGAUACCAACAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[96.98780060 260.12500000]
[96.67575073 245.12825012]
[96.36369324 230.13150024]
[96.05163574 215.13473511]
[95.73957825 200.13798523]
[95.42752075 185.14123535]
[95.11546326 170.14448547]
[94.80341339 155.14772034]
[94.49135590 140.15097046]
[80.26457214 135.39715576]
[70.99962616 147.19380188]
[61.73467636 158.99043274]
[52.46972656 170.78707886]
[52.94908524 186.82296753]
[40.61792755 197.08561707]
[24.93566322 193.70240784]
[17.93238258 179.26864624]
[24.98040199 164.85667419]
[40.67308807 161.52212524]
[49.93803787 149.72549438]
[59.20298386 137.92884827]
[68.46793365 126.13220978]
[61.11108398 99.31803131]
[72.47908783 75.51459503]
[95.34887695 65.53409576]
[96.59575653 50.58600998]
[97.84262848 35.63792419]
[99.08950043 20.68983650]
[92.56958771 15.03738022]
[88.94036865 7.50508595]
[73.96065521 6.72524118]
[58.98093796 5.94539595]
[44.00122452 5.16555071]
[36.24835968 18.36220741]
[23.24463272 26.43448067]
[7.97819614 27.52742195]
[-6.04283094 21.38988304]
[-15.59651947 9.43222332]
[-18.48750114 -5.59777355]
[-14.05145168 -20.24632454]
[-3.30774093 -31.14730072]
[11.27480507 -35.79573441]
[26.34522247 -33.12345505]
[38.44044113 -23.74452782]
[44.78106689 -9.81416321]
[59.76078415 -9.03431892]
[74.74049377 -8.25447369]
[89.72021484 -7.47462845]
[98.31211090 -16.79143715]
[110.74906921 -19.22981071]
[117.93157196 -32.39839172]
[125.11408234 -45.56697464]
[132.29660034 -58.73555756]
[119.81612396 -67.07487488]
[108.13343811 -76.49936676]
[97.34260559 -86.93315887]
[87.53049469 -98.29224396]
[78.77610779 -110.48515320]
[71.14994812 -123.41372681]
[64.71340942 -136.97386169]
[59.51831055 -151.05636597]
[55.60649109 -165.54788208]
[53.00943756 -180.33171082]
[51.74806213 -195.28881836]
[51.83252716 -210.29878235]
[53.26214600 -225.24075317]
[56.02540970 -239.99441528]
[60.10007095 -254.44099426]
[65.45332336 -268.46414185]
[72.04206085 -281.95098877]
[79.81323242 -294.79290771]
[88.70427704 -306.88653564]
[98.64360046 -318.13446045]
[109.55117798 -328.44616699]
[121.33918762 -337.73858643]
[133.91271973 -345.93692017]
[147.17051697 -352.97515869]
[161.00585938 -358.79663086]
[175.30734253 -363.35446167]
[189.95982361 -366.61193848]
[204.84530640 -368.54287720]
[219.84396362 -369.13168335]
[234.83500671 -368.37365723]
[249.69776917 -366.27487183]
[264.31253052 -362.85223389]
[278.56167603 -358.13333130]
[292.33044434 -352.15609741]
[305.50799561 -344.96871948]
[317.98822021 -336.62899780]
[329.67059326 -327.20416260]
[340.46112061 -316.77001953]
[350.27288818 -305.41064453]
[359.02688599 -293.21746826]
[366.65267944 -280.28866577]
[373.08880615 -266.72833252]
[378.28344727 -252.64567566]
[382.19482422 -238.15403748]
[384.79144287 -223.37013245]
[386.05236816 -208.41297913]
[385.96743774 -193.40301514]
[384.53735352 -178.46109009]
[381.77365112 -163.70751953]
[377.69854736 -149.26106262]
[372.34487915 -135.23808289]
[365.75570679 -121.75144196]
[357.98416138 -108.90975189]
[349.09274292 -96.81640625]
[339.15307617 -85.56877136]
[328.24517822 -75.25740814]
[316.45687866 -65.96534729]
[303.88311768 -57.76739883]
[290.62509155 -50.72956467]
[276.78955078 -44.90851974]
[262.48794556 -40.35112381]
[247.83537292 -37.09407806]
[232.94981384 -35.16360092]
[217.95115662 -34.57524109]
[202.96012878 -35.33373260]
[188.09744263 -37.43296814]
[173.48275757 -40.85604477]
[159.23376465 -45.57540512]
[145.46517944 -51.55305099]
[138.28266907 -38.38446808]
[131.10015869 -25.21588326]
[123.91764832 -12.04730129]
[128.34771729 7.28975344]
[114.03759003 21.93671227]
[112.79071808 36.88479996]
[111.54383850 51.83288574]
[110.29696655 66.78097534]
[118.09656525 69.64531708]
[125.11071014 74.34194946]
[130.90919495 80.65764618]
[135.11921692 88.27835083]
[137.44898987 96.80452728]
[137.70719910 105.77204895]
[135.81712341 114.67739868]
[131.82434082 123.00598907]
[125.89765930 130.26182556]
[118.32260895 135.99697876]
[109.48810577 139.83891296]
[109.80016327 154.83566284]
[110.11222076 169.83242798]
[110.42427826 184.82917786]
[110.73633575 199.82592773]
[111.04838562 214.82267761]
[111.36044312 229.81944275]
[111.67250061 244.81619263]
[111.98455811 259.81295776]
[114.57555389 279.02066040]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 22]
[11 21]
[12 20]
[13 19]
[25 130]
[26 129]
[27 128]
[28 127]
[30 48]
[31 47]
[32 46]
[33 45]
[50 125]
[51 124]
[52 123]
[53 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
