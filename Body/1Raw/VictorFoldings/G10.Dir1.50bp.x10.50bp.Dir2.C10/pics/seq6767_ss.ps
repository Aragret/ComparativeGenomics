%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAACCUCAACACCACCUUCUUCGACCCCGCCGGAGGAGGAGACCCCAUUCUAUACCAACACxxxxxxxxxxCACGCCUUCUUCAAAGCCAUACUAUUUAUGUGCUCCGGGUCCAUCAUCCACAACCUUAACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 251.17117310]
[92.50000000 236.17117310]
[92.50000000 221.17117310]
[92.50000000 206.17117310]
[92.50000000 191.17117310]
[92.50000000 176.17117310]
[92.50000000 161.17117310]
[92.50000000 146.17117310]
[92.50000000 131.17117310]
[92.50000000 116.17117310]
[86.37852478 111.83786774]
[72.75155640 118.10729980]
[74.13556671 103.17126465]
[68.01409149 98.83795929]
[53.86677551 103.82328033]
[39.71945953 108.80860138]
[25.57214355 113.79392242]
[27.17537689 128.77812195]
[25.27920341 143.72808838]
[19.98587608 157.83757019]
[11.58086205 170.34565735]
[0.51742977 180.57781982]
[-12.60778236 187.98225403]
[-27.08694839 192.15962219]
[-42.13922501 192.88467407]
[-56.95286179 190.11828613]
[-70.72898102 184.00965881]
[-82.72464752 174.88822937]
[-92.29295349 163.24588013]
[-98.91789246 149.71047974]
[-102.24218750 135.01199341]
[-102.08657074 119.94306183]
[-98.45942688 105.31635284]
[-91.55636597 91.92066956]
[-81.74966431 80.47840881]
[-69.56817627 71.60665131]
[-55.66884613 65.78382874]
[-40.80123520 63.32396698]
[-25.76714325 64.35971832]
[-11.37733746 68.83522797]
[1.59215856 76.50914001]
[12.44191647 86.96759796]
[20.58682060 99.64660645]
[34.73413849 94.66128540]
[48.88145447 89.67596436]
[63.02877045 84.69064331]
[85.40683746 77.89543152]
[100.14509583 87.04199982]
[107.51132965 73.97530365]
[114.87757111 60.90860748]
[121.56364441 47.48115921]
[127.55194092 33.72832870]
[133.54023743 19.97550011]
[139.52853394 6.22267056]
[145.51683044 -7.53015852]
[134.96517944 -24.25714493]
[139.60461426 -45.04598618]
[158.82302856 -57.35871124]
[158.82302856 -72.35871124]
[144.01196289 -74.96703339]
[129.87890625 -80.10781860]
[116.85333252 -87.62484741]
[105.33110046 -97.28968811]
[95.66233826 -108.80863953]
[88.14087677 -121.83164215]
[82.99527740 -135.96295166]
[80.38191986 -150.77313232]
[80.38021088 -165.81211853]
[82.99021149 -180.62289429]
[88.13260651 -194.75537109]
[95.65111542 -207.78009033]
[105.31726074 -219.30123901]
[116.83730316 -228.96868896]
[129.86116028 -236.48867798]
[143.99305725 -241.63265991]
[158.80354309 -244.24433899]
[173.84252930 -244.24433899]
[188.65299988 -241.63265991]
[202.78489685 -236.48867798]
[215.80876160 -228.96868896]
[227.32881165 -219.30123901]
[236.99494934 -207.78009033]
[244.51345825 -194.75537109]
[249.65585327 -180.62289429]
[252.26585388 -165.81211853]
[252.26414490 -150.77313232]
[249.65078735 -135.96295166]
[244.50518799 -121.83164215]
[236.98373413 -108.80863953]
[227.31497192 -97.28968811]
[215.79272461 -87.62484741]
[202.76716614 -80.10781860]
[188.63410950 -74.96703339]
[173.82302856 -72.35871124]
[173.82302856 -57.35871124]
[186.24134827 -48.94530106]
[200.17205811 -54.50723648]
[214.10278320 -60.06917572]
[227.97566223 -65.77383423]
[241.78924561 -71.62062836]
[255.60282898 -77.46741486]
[269.41641235 -83.31420135]
[276.74987793 -97.58303833]
[292.50582886 -100.60459137]
[304.59762573 -90.06097412]
[303.74951172 -74.04035950]
[290.61203003 -64.83238220]
[275.26318359 -69.50061798]
[261.44961548 -63.65383148]
[247.63603210 -57.80704117]
[233.82244873 -51.96025467]
[228.85792542 -46.42259216]
[219.66471863 -46.13845825]
[205.73399353 -40.57651901]
[191.80328369 -35.01458359]
[188.99920654 -15.84779453]
[175.96928406 -3.31145740]
[159.26966858 -1.54186177]
[153.28137207 12.21096706]
[147.29307556 25.96379662]
[141.30477905 39.71662521]
[135.31648254 53.46945572]
[150.08448792 50.84152222]
[161.48468018 60.59013367]
[161.18119812 75.58706665]
[149.39595032 84.86649323]
[134.74635315 81.64327240]
[127.94426727 68.27484894]
[120.57802582 81.34153748]
[113.21178436 94.40823364]
[123.98335266 83.96920776]
[138.14036560 79.01146698]
[153.07125854 80.44956970]
[166.02175903 88.01822662]
[174.60287476 100.32125092]
[177.23165894 115.08910370]
[173.42315674 129.59756470]
[163.87994385 141.17025757]
[150.36245728 147.67236328]
[135.36424255 147.90443420]
[121.65205383 141.82368469]
[111.75534821 130.55180359]
[107.50000000 116.17117310]
[107.50000000 131.17117310]
[107.50000000 146.17117310]
[107.50000000 161.17117310]
[107.50000000 176.17117310]
[107.50000000 191.17117310]
[107.50000000 206.17117310]
[107.50000000 221.17117310]
[107.50000000 236.17117310]
[107.50000000 251.17117310]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[14 46]
[15 45]
[16 44]
[17 43]
[48 130]
[49 129]
[50 128]
[51 122]
[52 121]
[53 120]
[54 119]
[55 118]
[58 95]
[59 94]
[96 115]
[97 114]
[98 113]
[99 111]
[100 110]
[101 109]
[102 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
