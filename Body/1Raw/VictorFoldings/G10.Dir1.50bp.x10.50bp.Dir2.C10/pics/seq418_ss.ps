%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCAAAAACAAAGAACCCUAACACCAGCCUAACCAGAUUUCAAAUUUUAUCUUUUGGCGGUxxxxxxxxxxCUGACCCCCAUGCCUCAGGAUACUCCUCAAUAGCCAUCGCUGUAGUAUAUCCAAAGACAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.14332581 259.01889038]
[91.83126831 244.02214050]
[91.51921844 229.02539062]
[91.20716095 214.02864075]
[90.89510345 199.03187561]
[90.58304596 184.03512573]
[90.27098846 169.03837585]
[89.95893097 154.04162598]
[89.64688110 139.04486084]
[55.57807541 90.89662933]
[40.58538055 90.42858124]
[25.59268570 89.96054077]
[10.59998894 89.49250031]
[-4.39270735 89.02445984]
[-19.38540268 88.55641174]
[-6.89953899 96.86924744]
[3.62759352 107.55472565]
[11.75310135 120.16329956]
[17.13513184 134.16450500]
[19.54725647 148.96928406]
[18.88799286 163.95480347]
[15.18507576 178.49055481]
[8.59429359 191.96504211]
[-0.60706884 203.81134033]
[-12.03189754 213.53108215]
[-25.19953156 220.71533203]
[-39.55599213 225.06182861]
[-54.49727631 226.38772583]
[-69.39478302 224.63723755]
[-83.62175751 219.88400269]
[-96.57964325 212.32798767]
[-107.72328186 202.28710938]
[-116.58385468 190.18379211]
[-122.78856659 176.52723694]
[-126.07638550 161.89199829]
[-126.30899811 146.89379883]
[-123.47660065 132.16365051]
[-117.69835663 118.32124329]
[-109.21738434 105.94897461]
[-98.39047241 95.56735992]
[-85.67313385 87.61315918]
[-71.60040283 82.42102814]
[-56.76433945 80.20939636]
[-41.78325653 81.07227325]
[-54.04562378 72.43315887]
[-66.30799103 63.79404068]
[-78.57035828 55.15492249]
[-92.47505188 61.67835236]
[-107.77721405 60.35947037]
[-120.36064148 51.55305481]
[-126.84044647 37.62798309]
[-125.47360992 22.33003044]
[-116.62779236 9.77427101]
[-102.68247986 3.33813977]
[-87.38888550 4.75292397]
[-74.86091614 13.63805389]
[-68.46852875 27.60347366]
[-69.93124390 42.89255524]
[-57.66887665 51.53167343]
[-45.40650940 60.17078781]
[-33.14414215 68.80990601]
[-18.91736221 73.56372070]
[-3.92466521 74.03176117]
[11.06803131 74.49980164]
[26.06072617 74.96784210]
[41.05342484 75.43589020]
[56.04611969 75.90393066]
[67.13743591 65.80528259]
[68.07306671 50.83448792]
[69.00868988 35.86369705]
[55.49035263 28.85124969]
[45.99803162 16.94260979]
[42.17633057 2.20101881]
[44.68737793 -12.81945133]
[53.09612656 -25.51641464]
[65.94570160 -33.69004440]
[81.00984955 -35.92420959]
[95.67860413 -31.83182907]
[107.41051483 -22.12193108]
[114.17295837 -8.47681618]
[114.79431152 6.73941946]
[109.16690826 20.89046860]
[98.26573181 31.52458000]
[83.97948456 36.79932404]
[83.04385376 51.77011871]
[82.10822296 66.74090576]
[88.99942017 69.70088959]
[109.67298889 78.58083344]
[119.88646698 67.59516907]
[116.77074432 52.39411926]
[123.21566772 38.27878952]
[136.74302673 30.67680550]
[152.15127563 32.51129150]
[163.51564026 43.07684708]
[166.46627808 58.31080246]
[159.86860657 72.35538483]
[146.25958252 79.81018066]
[130.87213135 77.80864716]
[120.65865326 88.79431152]
[126.43492889 102.63753510]
[141.42762756 103.10557556]
[156.42031860 103.57361603]
[171.41300964 104.04165649]
[186.40571594 104.50969696]
[178.50895691 91.75661469]
[183.35487366 77.56094360]
[197.40148926 72.29857635]
[210.38186646 79.81587219]
[212.80839539 94.61830139]
[202.90809631 105.88622284]
[217.77113342 107.90856171]
[232.63418579 109.93089294]
[247.49723816 111.95322418]
[262.36029053 113.97556305]
[277.32501221 107.26820374]
[290.45581055 117.09235382]
[288.24484253 133.34176636]
[272.96655273 139.30044556]
[260.33795166 128.83860779]
[245.47489929 126.81627655]
[230.61184692 124.79393768]
[215.74880981 122.77160645]
[200.88575745 120.74927521]
[185.93766785 119.50239563]
[170.94497681 119.03435516]
[155.95227051 118.56631470]
[140.95957947 118.09827423]
[125.96688080 117.63022614]
[120.63607025 122.90587616]
[133.56901550 130.50450134]
[146.50193787 138.10313416]
[160.79127502 142.66546631]
[168.98168945 155.23197937]
[167.38702393 170.14697266]
[156.72494507 180.69779968]
[141.79405212 182.13598633]
[129.31413269 173.81423950]
[124.90180969 159.47972107]
[117.43812561 146.46844482]
[109.97444153 133.45716858]
[104.64363098 138.73280334]
[104.95568848 153.72956848]
[105.26774597 168.72631836]
[105.57980347 183.72306824]
[105.89185333 198.71981812]
[106.20391083 213.71658325]
[106.51596832 228.71333313]
[106.82802582 243.71008301]
[107.14008331 258.70684814]
[109.73107910 277.91455078]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 67]
[11 66]
[12 65]
[13 64]
[14 63]
[15 62]
[44 61]
[45 60]
[46 59]
[47 58]
[68 86]
[69 85]
[70 84]
[88 99]
[89 98]
[100 128]
[101 127]
[102 126]
[103 125]
[104 124]
[110 123]
[111 122]
[112 121]
[113 120]
[114 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
