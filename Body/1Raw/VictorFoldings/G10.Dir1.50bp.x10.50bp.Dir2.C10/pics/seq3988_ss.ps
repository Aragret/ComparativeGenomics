%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCUCCACACUAGCAGAGACCAACCGAACCCCCUUCGACCUUGCCGAAGGGGAGUCCGAACxxxxxxxxxxCAACGUAAAAAUAAAAUGACAGUUUGAACAUACAAAACCCACCCCAUUCCUCCCCACACUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[128.58099365 238.46543884]
[121.12609100 225.44912720]
[113.67118073 212.43281555]
[106.21627045 199.41650391]
[93.17681885 192.21775818]
[93.03228760 176.39721680]
[85.57737732 163.38090515]
[78.12246704 150.36459351]
[63.28126144 148.18775940]
[52.40243530 158.51496887]
[41.52360916 168.84216309]
[30.64478493 179.16937256]
[19.76595879 189.49658203]
[8.88713360 199.82377625]
[12.55315399 214.73873901]
[8.25513363 229.48399353]
[-2.85077977 240.09315491]
[-17.77715302 243.71240234]
[-32.50886536 239.36817932]
[-43.08316040 228.22906494]
[-46.65560532 213.29142761]
[-42.26523209 198.57341003]
[-31.09302902 188.03407288]
[-16.14426041 184.50846863]
[-1.44007099 188.94496155]
[9.43875408 178.61775208]
[20.31757927 168.29054260]
[31.19640541 157.96334839]
[42.07522964 147.63613892]
[52.95405579 137.30892944]
[52.02024841 129.86729431]
[37.52205658 133.71467590]
[24.70695305 141.51039124]
[11.19850731 134.98951721]
[9.33116627 120.10620117]
[20.80998421 110.45027924]
[35.15334702 114.83808899]
[50.15263367 114.98401642]
[49.21883011 107.54237366]
[36.12567520 100.22326660]
[23.03252029 92.90415955]
[9.93936539 85.58505249]
[-3.15378881 78.26595306]
[-16.24694252 70.94684601]
[-29.34009743 63.62773895]
[-42.43325043 56.30863190]
[-56.98696899 62.02906799]
[-71.79626465 57.00724411]
[-79.86864471 43.61431122]
[-77.39258575 28.17400551]
[-65.53719330 17.97676277]
[-49.90023041 17.83741188]
[-37.86499023 27.82175064]
[-35.11414719 43.21548080]
[-22.02099228 50.53458405]
[-8.92783737 57.85369110]
[4.16531658 65.17279816]
[17.25847054 72.49189758]
[30.35162544 79.81100464]
[43.44477844 87.13011169]
[56.53793335 94.44921875]
[75.10526276 71.31607819]
[100.45584106 67.85741425]
[104.16200256 53.32247925]
[107.86816406 38.78754044]
[109.73577881 23.90426254]
[109.73577881 8.90426254]
[95.48310852 3.74313927]
[83.85717773 -5.98381138]
[76.26187134 -19.10201263]
[73.61437225 -34.02737808]
[76.23436737 -48.95759583]
[83.80548096 -62.08977127]
[95.41345978 -71.83813477]
[109.65659332 -77.02551270]
[124.81495667 -77.02551270]
[139.05809021 -71.83813477]
[150.66607666 -62.08977127]
[158.23718262 -48.95759583]
[160.85717773 -34.02737808]
[158.20967102 -19.10201263]
[150.61437988 -5.98381138]
[138.98844910 3.74313927]
[124.73577881 8.90426254]
[124.73577881 23.90426254]
[133.47300720 11.71160603]
[146.57704163 4.41199970]
[161.54292297 3.40083599]
[175.50976562 8.87140942]
[185.80767822 19.77796364]
[190.46810913 34.03560638]
[188.60017395 48.91884613]
[180.56094360 61.58260345]
[167.88720703 69.60607910]
[153.00164795 71.45550537]
[138.74981689 66.77734375]
[127.85607147 56.46587753]
[122.40309906 42.49370193]
[118.69693756 57.02864075]
[114.99077606 71.56357574]
[121.11226654 75.75901031]
[126.10855103 81.24640656]
[129.71333313 87.73330688]
[144.53108215 85.40220642]
[159.34884644 83.07109833]
[174.16659546 80.73999786]
[183.26564026 67.81781006]
[198.85107422 65.19678497]
[211.67634583 74.43193817]
[214.13244629 90.04421234]
[204.76220703 102.77112579]
[189.12483215 105.06201935]
[176.49771118 95.55775452]
[161.67994690 97.88886261]
[146.86219788 100.21996307]
[132.04443359 102.55107117]
[122.79898834 130.37632751]
[91.13877869 142.90968323]
[98.59368896 155.92599487]
[106.04859924 168.94230652]
[119.62126923 177.07206726]
[119.23257446 191.96159363]
[126.68748474 204.97790527]
[134.14239502 217.99421692]
[141.59730530 231.01052856]
[156.00613403 226.61355591]
[171.03216553 225.53363037]
[185.92169189 227.82489014]
[199.92785645 233.37242126]
[212.34811401 241.89794922]
[222.55949402 252.97386169]
[230.04975891 266.04458618]
[234.44323730 280.45446777]
[235.51953125 295.48074341]
[233.22465515 310.36972046]
[227.67373657 324.37454224]
[219.14518738 336.79275513]
[208.06681824 347.00143433]
[194.99429321 354.48852539]
[180.58332825 358.87850952]
[165.55677795 359.95117188]
[150.66836548 357.65267944]
[136.66488647 352.09838867]
[124.24875641 343.56683350]
[114.04276276 332.48596191]
[106.55882263 319.41162109]
[102.17233276 304.99960327]
[101.10331726 289.97280884]
[103.40540314 275.08493042]
[108.96311188 261.08282471]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 125]
[2 124]
[3 123]
[4 122]
[6 120]
[7 119]
[8 118]
[9 30]
[10 29]
[11 28]
[12 27]
[13 26]
[14 25]
[39 61]
[40 60]
[41 59]
[42 58]
[43 57]
[44 56]
[45 55]
[46 54]
[63 100]
[64 99]
[65 98]
[66 85]
[67 84]
[103 116]
[104 115]
[105 114]
[106 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
