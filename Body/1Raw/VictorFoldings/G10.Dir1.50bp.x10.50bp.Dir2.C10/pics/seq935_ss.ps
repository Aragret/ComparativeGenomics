%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAACAAAUAGGUUUGGUCCUAGCCUUUCUAUUAGCUCUUAGUAAGAUUACACAUGCAAGCxxxxxxxxxxUAGGCGGCUAUGGUAUAAUACGCCUCACACUCAUUCUCAACCCCCUGACAAAACACAUAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[124.59725189 259.99816895]
[124.59725189 244.99815369]
[124.59725189 229.99815369]
[124.59725189 214.99815369]
[124.59725189 199.99815369]
[124.59725189 184.99815369]
[124.59725189 169.99815369]
[124.59725189 154.99815369]
[124.59725189 139.99815369]
[124.59725189 124.99815369]
[117.70606232 122.03817749]
[105.68821716 131.01432800]
[103.92368317 116.11820984]
[97.03248596 113.15823364]
[86.15366364 123.48543549]
[75.27484131 133.81263733]
[64.39601135 144.13984680]
[60.26249313 160.00950623]
[44.38250351 164.10314941]
[33.09201050 152.20957947]
[38.00571060 136.56388855]
[54.06880951 133.26101685]
[64.94763184 122.93381500]
[75.82646179 112.60661316]
[86.70528412 102.27940369]
[93.19345093 88.75521851]
[94.44032288 73.80712891]
[95.68719482 58.85904312]
[81.84075928 51.77368546]
[71.69905853 40.09664154]
[66.67985535 25.56009293]
[51.68716049 25.09205055]
[36.69446182 24.62400818]
[28.67203331 37.72119141]
[15.16816235 45.03836441]
[-0.18467769 44.60724640]
[-13.25664997 36.54380417]
[-20.53145981 23.01706314]
[-20.05221939 7.66564941]
[-11.94784164 -5.38098383]
[1.60163569 -12.61335754]
[16.95147133 -12.08600044]
[29.97263718 -3.94076777]
[37.16250610 9.63131332]
[52.15520096 10.09935474]
[67.14789581 10.56739712]
[71.90279388 -1.38827360]
[80.18172455 -11.23745632]
[91.14173126 -17.97730064]
[103.66684723 -20.92155075]
[116.48175812 -19.77042007]
[122.82888794 -33.36137009]
[120.78509521 -51.63164139]
[135.48469543 -61.16693878]
[141.54769897 -74.88699341]
[147.61071777 -88.60704803]
[136.72839355 -99.13322449]
[130.11643982 -112.72197723]
[128.55551147 -127.72476196]
[132.21479797 -142.32885742]
[140.63394165 -154.77633667]
[152.78079224 -163.57566833]
[167.17800903 -167.68048096]
[182.08262634 -166.61387634]
[188.14564514 -180.33393860]
[175.66438293 -172.01419067]
[161.11335754 -168.37168884]
[146.18441772 -169.82995605]
[132.61331177 -176.21942139]
[121.97796631 -186.79719543]
[115.51493073 -200.33341980]
[113.97566223 -215.25422668]
[117.53912354 -229.82481384]
[125.79100037 -242.35104370]
[137.77185059 -251.37651062]
[152.08866882 -255.85185242]
[167.07685852 -255.25669861]
[180.99375916 -249.66024780]
[192.22123718 -239.71321106]
[199.45391846 -226.57211304]
[201.85083008 -211.76486206]
[199.13232422 -197.01036072]
[209.34579468 -207.99603271]
[219.55928040 -218.98168945]
[229.77275085 -229.96736145]
[239.98623657 -240.95301819]
[233.62992859 -254.76119995]
[233.04663086 -269.95092773]
[238.32527161 -284.20590210]
[248.66091919 -295.35235596]
[262.47744751 -301.69049072]
[277.66793823 -302.25381470]
[291.91595459 -296.95642090]
[303.04879761 -286.60610962]
[309.36874390 -272.78125000]
[309.91207886 -257.59002686]
[304.59594727 -243.34899902]
[294.23101807 -232.22979736]
[280.39785767 -225.92803955]
[265.20593262 -225.40467834]
[250.97190857 -230.73954773]
[240.75842285 -219.75387573]
[230.54493713 -208.76821899]
[220.33146667 -197.78254700]
[210.11798096 -186.79689026]
[201.86569214 -174.27091980]
[195.80267334 -160.55087280]
[206.62577820 -150.24815369]
[213.28343201 -136.83901978]
[214.95480347 -121.93328857]
[211.41900635 -107.32781982]
[203.08401489 -94.78995514]
[190.93975830 -85.84361267]
[176.44049072 -81.58409882]
[161.33076477 -82.54402924]
[155.26776123 -68.82397461]
[149.20474243 -55.10392380]
[153.28007507 -43.67155838]
[148.28926086 -32.16891861]
[136.41984558 -27.01424217]
[130.07270813 -13.42329121]
[141.11354065 -1.62806785]
[146.66227722 13.59464741]
[145.79661560 29.82014084]
[138.61903381 44.44884872]
[126.24618530 55.12285614]
[110.63528442 60.10591507]
[109.38841248 75.05400085]
[108.14153290 90.00209045]
[110.56169891 75.19861603]
[118.66464996 62.57553864]
[131.11618042 54.21136093]
[145.86602783 51.48332214]
[160.48547363 54.84061813]
[172.56733704 63.73043823]
[180.12217712 76.68899536]
[181.90606689 91.58254242]
[177.62524414 105.95872498]
[167.98460388 117.45037079]
[154.57154846 124.16527557]
[139.59725952 124.99815369]
[139.59725952 139.99815369]
[139.59725952 154.99815369]
[139.59725952 169.99815369]
[139.59725952 184.99815369]
[139.59725952 199.99815369]
[139.59725952 214.99815369]
[139.59725952 229.99815369]
[139.59725952 244.99815369]
[139.59725952 259.99816895]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[14 25]
[15 24]
[16 23]
[17 22]
[26 129]
[27 128]
[28 127]
[31 46]
[32 45]
[33 44]
[51 121]
[52 120]
[54 117]
[55 116]
[56 115]
[64 107]
[65 106]
[82 105]
[83 104]
[84 103]
[85 102]
[86 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
