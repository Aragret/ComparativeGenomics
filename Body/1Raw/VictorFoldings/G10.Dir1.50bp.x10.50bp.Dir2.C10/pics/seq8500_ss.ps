%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAUCUAUAAACCUAGCCAUGGCCAUCCCCUUAUGAGCGGGCACAGUGAUUAUAGGCUUUxxxxxxxxxxAAGACCACAUCAUCGAAACCGCAAACAUAUCAUACACAAACGCCUGAGCCCUAUCUAUUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[76.03017426 510.31930542]
[76.03017426 495.31930542]
[76.03017426 480.31930542]
[76.03017426 465.31930542]
[76.03017426 450.31930542]
[76.03017426 435.31930542]
[76.03017426 420.31930542]
[76.03017426 405.31930542]
[76.03017426 390.31930542]
[76.03017426 375.31930542]
[62.99111557 372.69589233]
[50.66933060 367.67620850]
[39.50112152 360.43615723]
[29.88228989 351.23019409]
[22.15411568 340.38259888]
[16.59125137 328.27578735]
[13.39195919 315.33715820]
[12.67104435 302.02368164]
[14.45573711 288.80599976]
[18.68466759 276.15161133]
[25.20997620 264.50854492]
[33.80248260 254.28921509]
[44.15973282 245.85609436]
[55.91664886 239.50868225]
[68.65838623 235.47293091]
[81.93498993 233.89318848]
[83.18186188 218.94509888]
[84.27317047 203.98484802]
[85.20880127 189.01405334]
[82.46932220 182.09735107]
[86.32281494 173.74256897]
[87.56969452 158.79447937]
[88.81656647 143.84638977]
[75.80641174 138.23931885]
[65.16771698 128.88403320]
[57.94327927 116.69752502]
[54.84124374 102.87432861]
[56.16567230 88.76938629]
[61.78673935 75.76527405]
[71.15347290 65.13665009]
[83.34774780 57.92533493]
[97.17427063 54.83817673]
[98.73184967 39.91926575]
[100.28943634 25.00035286]
[101.84701538 10.08143997]
[103.40459442 -4.83747244]
[103.87263489 -19.83016777]
[103.24865723 -34.81718445]
[102.62467957 -49.80419922]
[102.00070190 -64.79121399]
[87.77439880 -70.07211304]
[76.68364716 -80.36960602]
[70.39733124 -94.09169769]
[69.84506226 -109.13439178]
[75.07987976 -123.20426941]
[85.27489471 -134.16816711]
[98.85374451 -140.37655640]
[98.22976685 -155.36357117]
[97.60578918 -170.35058594]
[96.98181152 -185.33760071]
[86.77182007 -191.57691956]
[80.92781830 -201.88014221]
[80.81469727 -213.60452271]
[86.34423828 -223.80706787]
[96.02642059 -229.98329163]
[96.02642059 -244.98329163]
[95.87038422 -259.98248291]
[95.55833435 -274.97924805]
[95.24627686 -289.97598267]
[81.52053833 -296.74819946]
[72.52358246 -309.13018799]
[70.32284546 -324.27664185]
[75.42403412 -338.70703125]
[86.65493011 -349.10537720]
[101.43476868 -353.08218384]
[116.36724091 -349.72363281]
[128.02098083 -339.80148315]
[133.71803284 -325.59579468]
[132.14926147 -310.37088013]
[123.67517090 -297.62536621]
[110.24302673 -290.28805542]
[110.55508423 -275.29129028]
[110.86714172 -260.29452515]
[114.17209625 -253.62948608]
[111.02642059 -244.98329163]
[111.02642059 -229.98329163]
[124.72032928 -217.90544128]
[125.31303406 -199.33810425]
[111.96882629 -185.96157837]
[112.59280396 -170.97456360]
[113.21678162 -155.98754883]
[113.84075928 -141.00053406]
[127.88868713 -135.94236755]
[138.95979309 -125.86388397]
[145.34605408 -112.27783966]
[146.04611206 -97.24130249]
[140.92219543 -83.04415131]
[130.72581482 -71.86037445]
[116.98772430 -65.41519165]
[117.61169434 -50.42817688]
[118.23567200 -35.44116211]
[118.85964966 -20.45414543]
[129.30366516 -31.22087669]
[144.20603943 -32.92944717]
[156.81585693 -24.80586052]
[161.42073059 -10.53017998]
[155.93463135 3.43057323]
[142.84278870 10.75203896]
[128.07595825 8.11752319]
[118.32350922 -3.27989149]
[116.76592255 11.63902092]
[115.20834351 26.55793381]
[113.65076447 41.47684479]
[112.09318542 56.39575577]
[126.25544739 63.14587784]
[137.26161194 74.32613373]
[143.78865051 88.59259033]
[145.05197144 104.23029327]
[140.89970398 119.35948944]
[131.83097839 132.16152954]
[118.93593597 141.09750366]
[103.76465607 145.09326172]
[102.51777649 160.04135132]
[101.27090454 174.98944092]
[100.17959595 189.94969177]
[99.24396515 204.92047119]
[101.84420013 213.74604797]
[98.12995148 220.19197083]
[96.88307190 235.14006042]
[112.91056824 240.26397705]
[127.27851105 249.00662231]
[139.18417358 260.87524414]
[147.96336365 275.20254517]
[153.12756348 291.18423462]
[154.39105225 307.92413330]
[151.68675232 324.48446655]
[145.16970825 339.93838501]
[135.20831299 353.42184448]
[122.36338043 364.18191528]
[107.35664368 371.61880493]
[91.03017426 375.31930542]
[91.03017426 390.31930542]
[91.03017426 405.31930542]
[91.03017426 420.31930542]
[91.03017426 435.31930542]
[91.03017426 450.31930542]
[91.03017426 465.31930542]
[91.03017426 480.31930542]
[91.03017426 495.31930542]
[91.03017426 510.31930542]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[26 129]
[27 128]
[28 126]
[29 125]
[31 124]
[32 123]
[33 122]
[42 114]
[43 113]
[44 112]
[45 111]
[46 110]
[47 102]
[48 101]
[49 100]
[50 99]
[57 92]
[58 91]
[59 90]
[60 89]
[65 86]
[66 85]
[67 83]
[68 82]
[69 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
