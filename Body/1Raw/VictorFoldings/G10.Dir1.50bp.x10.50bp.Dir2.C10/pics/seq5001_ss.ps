%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAAACUAGGAAUAGCCCCCUUUCACUUCUGAGUCCCAGAGGUUACCCAAGGCACCCCUCUxxxxxxxxxxAUGUGCUCCGGGUCCAUCAUCCACAACCUUAACAAUGAACAAGAUAUUCGAAAAAUAGGACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[105.06604767 557.64929199]
[105.06604767 542.64929199]
[105.06604767 527.64929199]
[105.06604767 512.64929199]
[105.06604767 497.64932251]
[105.06604767 482.64932251]
[105.06604767 467.64932251]
[105.06604767 452.64932251]
[105.06604767 437.64932251]
[105.06604767 422.64932251]
[88.96794128 417.82339478]
[75.10808563 408.28704834]
[64.82590485 394.94860840]
[59.11911392 379.08450317]
[58.54694366 362.21704102]
[63.17534256 345.96841431]
[72.56958008 331.90463257]
[85.83507538 321.38458252]
[101.70254517 315.42880249]
[100.76691437 300.45800781]
[99.83128357 285.48721313]
[98.89566040 270.51641846]
[97.96002960 255.54562378]
[89.44393158 243.32574463]
[96.30537415 229.06983948]
[85.14389801 224.11381531]
[77.12064362 214.81101990]
[73.81932068 202.90299988]
[75.93189240 190.65426636]
[83.11464691 180.42155457]
[94.04235840 174.20048523]
[93.73030090 159.20373535]
[93.41824341 144.20698547]
[93.10619354 129.21023560]
[80.54050446 124.54341888]
[70.78749084 114.53949738]
[66.06932068 100.78771973]
[67.74880981 85.77527618]
[53.10530853 82.52444458]
[38.46180725 79.27362061]
[24.21099091 86.64205170]
[9.62427807 79.96318054]
[5.89134693 64.36045837]
[15.87578297 51.80297089]
[31.91838264 51.92373657]
[41.71263504 64.63011932]
[56.35613632 67.88094330]
[70.99963379 71.13177490]
[83.35121155 62.62068176]
[85.52804565 47.77947617]
[87.70487976 32.93827057]
[89.88172150 18.09706497]
[92.05855560 3.25586009]
[92.52659607 -11.73683643]
[91.27972412 -26.68492317]
[90.03285217 -41.63301086]
[88.78597260 -56.58109665]
[77.00368500 -66.77008057]
[75.95211792 -81.94732666]
[85.73837280 -93.11714935]
[84.49149323 -108.06523895]
[83.24462128 -123.01332855]
[81.99774933 -137.96141052]
[80.75086975 -152.90950012]
[66.02036285 -156.35438538]
[53.07639313 -164.18438721]
[43.18708420 -175.63238525]
[37.32128525 -189.57682800]
[36.05367279 -204.65159607]
[39.50843430 -219.37979126]
[47.34710312 -232.31851196]
[58.80172729 -242.20014954]
[72.75009918 -248.05659485]
[87.82570648 -249.31410217]
[102.55158997 -245.84948730]
[115.48505402 -238.00215149]
[125.35900879 -226.54090881]
[131.20611572 -212.58860779]
[132.45352173 -197.51216125]
[128.97903442 -182.78860474]
[121.12302399 -169.86039734]
[109.65516663 -159.99412537]
[95.69895935 -154.15637207]
[96.94583130 -139.20828247]
[98.19271088 -124.26020050]
[99.43958282 -109.31211090]
[100.68645477 -94.36402893]
[112.18801880 -84.96990204]
[113.66547394 -69.82817841]
[103.73406219 -57.82797241]
[104.98093414 -42.87988281]
[106.22781372 -27.93179703]
[107.47468567 -12.98371029]
[115.46299744 -25.67964935]
[128.37141418 -33.31985474]
[143.34472656 -34.21437836]
[157.07095337 -28.16536522]
[166.51399231 -16.51079750]
[169.58512878 -1.82855976]
[165.60507202 12.63377190]
[155.45414734 23.67726326]
[141.37765503 28.85919762]
[126.48918915 27.03337669]
[114.08193970 18.60365486]
[106.89976501 5.43269682]
[104.72292328 20.27390289]
[102.54608917 35.11510849]
[100.36925507 49.95631409]
[98.19241333 64.79751587]
[112.33989716 67.78145599]
[123.80583954 76.07230377]
[130.76078796 88.03797913]
[132.22235107 101.48964691]
[128.18757629 114.08054352]
[119.59102631 123.71526337]
[108.10294342 128.89817810]
[108.41500092 143.89492798]
[108.72705841 158.89167786]
[109.03911591 173.88844299]
[124.20015717 183.73506165]
[130.40844727 200.54693604]
[125.37436676 217.58392334]
[111.27616882 228.13420105]
[119.85918427 241.42489624]
[112.93082428 254.61000061]
[113.86644745 269.58078003]
[114.80207825 284.55157471]
[115.73770905 299.52236938]
[116.67333221 314.49316406]
[129.70716858 317.14047241]
[141.70616150 322.85317993]
[151.96188354 331.28836060]
[159.87020874 341.94256592]
[164.96684265 354.18185425]
[166.95465088 367.27944946]
[165.72091675 380.45892334]
[161.34373474 392.94024658]
[154.08709717 403.98593140]
[144.38500977 412.94464111]
[132.81546021 419.28952026]
[120.06604767 422.64932251]
[120.06604767 437.64932251]
[120.06604767 452.64932251]
[120.06604767 467.64932251]
[120.06604767 482.64932251]
[120.06604767 497.64932251]
[120.06604767 512.64929199]
[120.06604767 527.64929199]
[120.06604767 542.64929199]
[120.06604767 557.64929199]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[19 129]
[20 128]
[21 127]
[22 126]
[23 125]
[25 123]
[31 119]
[32 118]
[33 117]
[34 116]
[38 48]
[39 47]
[40 46]
[49 109]
[50 108]
[51 107]
[52 106]
[53 105]
[54 93]
[55 92]
[56 91]
[57 90]
[60 87]
[61 86]
[62 85]
[63 84]
[64 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
