%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCUACUUCUCCCGCCGCCGGGAAAAAAGGCGGGAGAAGCCCCGGCAGGUUUGAAGCUGCUxxxxxxxxxxCUACUCAUCGCACUAAUUUACACUCACAACACCCUAGGCUCACUAAACAUUCUACUACUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[126.22126007 306.79660034]
[126.22126007 291.79660034]
[126.22126007 276.79660034]
[126.22126007 261.79660034]
[126.22126007 246.79660034]
[126.22126007 231.79660034]
[126.22126007 216.79660034]
[126.22126007 201.79660034]
[126.22126007 186.79660034]
[126.22126007 171.79660034]
[122.81827545 157.18769836]
[116.18978119 143.73173523]
[109.56127930 130.27577209]
[102.93278503 116.81980896]
[89.27654266 110.61440277]
[74.78094482 114.47155762]
[60.28534698 118.32872009]
[45.78975296 122.18588257]
[31.29415512 126.04303741]
[16.79855919 129.90019226]
[2.30296230 133.75735474]
[-12.19263458 137.61451721]
[-26.68823051 141.47167969]
[-41.18382645 145.32884216]
[-55.67942429 149.18598938]
[-58.49238968 164.18766785]
[-67.54267883 176.47810364]
[-81.03335571 183.61705017]
[-96.28582001 184.18705750]
[-110.27170563 178.07493591]
[-120.21408844 166.49427795]
[-124.13890839 151.74441528]
[-121.26688385 136.75393677]
[-112.16826630 124.49922943]
[-98.64958191 117.41346741]
[-83.39498901 116.90353394]
[-69.43328857 123.07067108]
[-59.53658295 134.69039917]
[-45.04098892 130.83323669]
[-30.54539108 126.97608185]
[-16.04979324 123.11891937]
[-1.55419719 119.26176453]
[12.94139957 115.40460205]
[27.43699646 111.54743958]
[41.93259430 107.69028473]
[56.42818832 103.83312225]
[70.92378235 99.97596741]
[85.41938019 96.11880493]
[72.15903473 89.10715485]
[70.19522858 74.23625946]
[81.18087006 64.02275848]
[95.86949158 67.06320190]
[101.89788055 80.79858398]
[106.79943085 66.62202454]
[99.54064941 55.23046112]
[100.17977142 41.93311310]
[108.25757599 31.59757423]
[120.63318634 27.87720108]
[125.82859802 13.80568218]
[131.02401733 -0.26583695]
[136.07276917 -14.39064026]
[140.97431946 -28.56719780]
[145.87586975 -42.74375534]
[149.43063354 -57.31645966]
[151.60746765 -72.15766144]
[149.74986267 -81.16883087]
[153.98707581 -87.28370667]
[156.47219849 -102.07640839]
[158.95730591 -116.86911774]
[145.36300659 -123.45483398]
[134.17572021 -133.60476685]
[126.30232239 -146.49609375]
[122.38110352 -161.08378601]
[122.72992706 -176.18527222]
[127.32051086 -190.57635498]
[135.78073120 -203.09040833]
[147.42474365 -212.71296692]
[161.30860901 -218.66398621]
[176.30685425 -220.46102905]
[191.20362854 -217.95843506]
[204.79130554 -211.35905457]
[215.96839905 -201.19789124]
[223.82882690 -188.29866028]
[227.73539734 -173.70704651]
[227.37139893 -158.60591125]
[222.76635742 -144.21945190]
[214.29357910 -131.71389771]
[202.63990784 -122.10304260]
[188.75006104 -116.16597748]
[173.75001526 -114.38400269]
[171.26489258 -99.59129333]
[168.77978516 -84.79858398]
[166.44866943 -69.98082733]
[164.27183533 -55.13962173]
[175.58966064 -64.98374939]
[190.41085815 -67.29289246]
[204.18699646 -61.35839844]
[212.69033813 -49.00149155]
[213.31134033 -34.01435089]
[205.85940552 -20.99633980]
[192.62144470 -13.94251442]
[177.66001892 -15.01760674]
[165.56660461 -23.89168549]
[160.05242920 -37.84220505]
[155.15087891 -23.66564751]
[150.24932861 -9.48908901]
[151.04119873 -2.09188700]
[145.09553528 4.92957878]
[139.90011597 19.00109863]
[134.70469666 33.07261658]
[142.39169312 47.99803162]
[136.82565308 64.19380951]
[120.97599030 71.52357483]
[116.07444000 85.70013428]
[116.38874817 110.19130707]
[123.01725006 123.64727783]
[129.64575195 137.10324097]
[136.27424622 150.55920410]
[137.57600403 135.61579895]
[142.63179016 121.49350739]
[151.10977173 109.11919403]
[162.45355225 99.30499268]
[175.91862488 92.69501495]
[190.62127686 89.72308350]
[205.59652710 90.58424377]
[219.86157227 95.22198486]
[232.48016357 103.33192444]
[242.62414551 114.38179779]
[249.62776184 127.64639282]
[253.03134155 142.25514221]
[252.61151123 157.24926758]
[248.39584351 171.64468384]
[240.66099548 184.49661255]
[229.91461182 194.96157837]
[216.86199951 202.35273743]
[202.35981750 206.18502808]
[187.35983276 206.20690918]
[172.84651184 202.41694641]
[159.77239990 195.06390381]
[148.99552917 184.63034058]
[141.22125244 171.79660034]
[141.22125244 186.79660034]
[141.22125244 201.79660034]
[141.22125244 216.79660034]
[141.22125244 231.79660034]
[141.22125244 246.79660034]
[141.22125244 261.79660034]
[141.22125244 276.79660034]
[141.22125244 291.79660034]
[141.22125244 306.79660034]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 118]
[12 117]
[13 116]
[14 115]
[15 48]
[16 47]
[17 46]
[18 45]
[19 44]
[20 43]
[21 42]
[22 41]
[23 40]
[24 39]
[25 38]
[53 114]
[54 113]
[58 110]
[59 109]
[60 108]
[61 106]
[62 105]
[63 104]
[64 94]
[65 93]
[67 92]
[68 91]
[69 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
