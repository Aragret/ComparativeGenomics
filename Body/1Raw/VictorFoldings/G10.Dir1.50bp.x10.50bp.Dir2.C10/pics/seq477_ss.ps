%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGCCUAACCAGAUUUCAAAUUUUAUCUUUUGGCGGUAUGCACUUUUAACAGUCACCCCCCxxxxxxxxxxGAUCAAAAGGAACAAGCAUCAAGCACGCAGCAAUGCAGCUCAAAACGCUUAGCCUAGCCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 295.85720825]
[92.50000000 280.85720825]
[92.50000000 265.85720825]
[92.50000000 250.85722351]
[92.50000000 235.85722351]
[92.50000000 220.85722351]
[92.50000000 205.85722351]
[92.50000000 190.85722351]
[92.50000000 175.85722351]
[92.50000000 160.85722351]
[66.80042267 151.55229187]
[47.69731522 132.00437927]
[34.04107285 138.20977783]
[20.38483238 144.41519165]
[11.02180672 157.16839600]
[-3.76617956 155.38943481]
[-17.42242050 161.59483337]
[-21.63727188 166.82383728]
[-27.05496025 168.79360962]
[-31.77825165 167.76110840]
[-45.68080902 173.39306641]
[-59.58336258 179.02502441]
[-73.48592377 184.65698242]
[-75.52990723 199.87925720]
[-84.92388916 212.03033447]
[-99.14093018 217.84164429]
[-114.35672760 215.74995422]
[-126.47829437 206.31793213]
[-132.24501038 192.08273315]
[-130.10563660 176.87356567]
[-120.63565826 164.78161621]
[-106.38246155 159.05957031]
[-91.18008423 161.24659729]
[-79.11787415 170.75442505]
[-65.21532440 165.12246704]
[-51.31276703 159.49050903]
[-37.41020966 153.85855103]
[-23.62782860 147.93859863]
[-9.97158623 141.73318481]
[-1.58534682 129.42382812]
[14.17942524 130.75894165]
[27.83566666 124.55354309]
[41.49190903 118.34813690]
[39.21846771 108.09049988]
[38.72954559 97.59533691]
[40.03949738 87.17076874]
[43.10986328 77.12286377]
[47.85049820 67.74662018]
[54.12221909 59.31732178]
[61.74089050 52.08245087]
[70.48283386 46.25441742]
[80.09138489 42.00432587]
[76.99306488 27.32780266]
[73.89474487 12.65127659]
[70.79642487 -2.02524924]
[67.69809723 -16.70177460]
[52.64175797 -16.71713066]
[37.91770935 -19.86292458]
[24.16962242 -26.00164032]
[11.99850750 -34.86491776]
[1.93643403 -46.06528854]
[-5.57672834 -59.11312866]
[-10.21253681 -73.43803406]
[-11.76833248 -88.41378784]
[-10.17610359 -103.38571167]
[-5.50545597 -117.69929504]
[2.03943062 -130.72882080]
[12.12872601 -141.90467834]
[24.32136917 -150.73831177]
[38.08435059 -156.84355164]
[52.81600952 -159.95352173]
[67.87234497 -159.93223572]
[82.59516144 -156.78065491]
[96.34082794 -150.63653564]
[108.50845337 -141.76846313]
[118.56612396 -130.56413269]
[126.07415009 -117.51334381]
[130.70431519 -103.18661499]
[132.25422668 -88.21025085]
[130.65611267 -73.23895264]
[125.97982788 -58.92720413]
[118.42981720 -45.90065384]
[108.33612823 -34.72876740]
[96.14000702 -25.89992905]
[82.37462616 -19.80009651]
[85.47294617 -5.12357092]
[88.57126617 9.55295467]
[91.66959381 24.22948074]
[94.76791382 38.90600586]
[112.83547211 40.04083252]
[129.78422546 46.40195465]
[144.13687134 57.43490601]
[154.64236450 72.17800903]
[160.38499451 89.34619904]
[175.36470032 88.56635284]
[190.34442139 87.78650665]
[205.32414246 87.00666046]
[212.89364624 71.20797729]
[227.32650757 61.43597412]
[244.62959290 60.28628922]
[260.06985474 67.98381805]
[269.46893311 82.34561920]
[284.40325928 80.94331360]
[299.33755493 79.54100800]
[308.18652344 70.09910583]
[320.69787598 69.27108765]
[330.09149170 76.95658875]
[345.05175781 75.86528015]
[360.01199341 74.77397156]
[373.26858521 65.12021637]
[388.14544678 72.02027893]
[389.33856201 88.37596130]
[375.62054443 97.36194611]
[361.10330200 89.73422241]
[346.14306641 90.82553101]
[331.18280029 91.91683960]
[317.25622559 102.54933929]
[300.73986816 94.47531891]
[285.80557251 95.87762451]
[270.87124634 97.27992249]
[266.84069824 109.32791901]
[258.50531006 118.97749329]
[247.08753967 124.75896454]
[234.28276062 125.77397919]
[222.00746155 121.83489227]
[212.11250305 113.49823761]
[206.10397339 101.98637390]
[191.12426758 102.76622009]
[176.14454651 103.54606628]
[161.16484070 104.32591248]
[160.14549255 111.93190765]
[158.18409729 119.35101318]
[155.31137085 126.46702576]
[151.57229614 133.16848755]
[147.02545166 139.35043335]
[141.74206543 144.91604614]
[135.80485535 149.77813721]
[129.30685425 153.86054993]
[122.34981537 157.09934998]
[115.04271698 159.44381714]
[107.50000000 160.85722351]
[107.50000000 175.85722351]
[107.50000000 190.85722351]
[107.50000000 205.85722351]
[107.50000000 220.85722351]
[107.50000000 235.85722351]
[107.50000000 250.85722351]
[107.50000000 265.85720825]
[107.50000000 280.85720825]
[107.50000000 295.85720825]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 43]
[13 42]
[14 41]
[16 39]
[17 38]
[20 37]
[21 36]
[22 35]
[23 34]
[52 89]
[53 88]
[54 87]
[55 86]
[56 85]
[94 130]
[95 129]
[96 128]
[97 127]
[102 120]
[103 119]
[104 118]
[107 116]
[108 115]
[109 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
