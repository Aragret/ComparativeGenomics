%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAUUAAUCCCCUGGCCCAACCCGUCAUCUACUCUACCAUCUUUGCAGGCACACUCAUCACAxxxxxxxxxxAUGCUCUGAAAUCUGUGGAGCAAACCACAGUUUCAUGCCCAUCGUCCUAGAAUUAAUUCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[15.43865013 217.04788208]
[6.03479290 228.73410034]
[-3.36906433 240.42030334]
[-12.53099918 252.29711914]
[-21.44715118 264.35955811]
[-30.36330223 276.42199707]
[-38.90375900 288.75326538]
[-47.06042480 301.34170532]
[-55.21709061 313.93014526]
[-63.37375641 326.51858521]
[-71.53042603 339.10702515]
[-69.59840393 355.03332520]
[-80.94779205 366.37225342]
[-96.87229156 364.42553711]
[-105.15600586 350.68655396]
[-99.44436646 335.69467163]
[-84.11886597 330.95037842]
[-75.96219635 318.36193848]
[-67.80553436 305.77349854]
[-59.64886475 293.18505859]
[-51.49219894 280.59661865]
[-51.90029526 277.03561401]
[-50.56444168 273.10049438]
[-47.32847595 269.63146973]
[-42.42573166 267.50582886]
[-33.50958252 255.44340515]
[-24.59343147 243.38098145]
[-24.41670418 238.55210876]
[-21.16312981 233.79792786]
[-15.05527306 231.01644897]
[-5.65141582 219.33023071]
[3.75244141 207.64402771]
[-7.87868309 195.98446655]
[-18.10651779 183.07633972]
[-26.79801941 169.08757019]
[-33.84012985 154.20008850]
[-39.14123917 138.60757446]
[-42.63239670 122.51284790]
[-44.26818848 106.12527466]
[-44.02733231 89.65802765]
[-41.91296768 73.32530975]
[-37.95259094 57.33957291]
[-32.19772339 41.90876770]
[-24.72322273 27.23361206]
[-15.62631702 13.50500679]
[-5.02534199 0.90153039]
[6.94180632 -10.41286945]
[20.11945915 -20.29101562]
[34.33620071 -28.60441208]
[49.40710068 -35.24491501]
[65.13610840 -40.12615204]
[81.31863403 -43.18461990]
[97.74416351 -44.38053894]
[114.19904327 -43.69835281]
[130.46920776 -41.14693069]
[146.34304810 -36.75946426]
[161.61404419 -30.59302902]
[168.71044922 -43.80821228]
[175.80685425 -57.02339554]
[182.90324402 -70.23857880]
[169.95776367 -62.66133881]
[155.70484924 -57.98650360]
[140.78637695 -56.42461014]
[125.87426758 -58.04600906]
[111.64010620 -62.77767181]
[98.72496033 -70.40650177]
[87.71049500 -80.58890533]
[79.09276581 -92.86631775]
[73.25988770 -106.68577576]
[70.47456360 -121.42491150]
[70.86223602 -136.41990662]
[74.40544891 -150.99542236]
[80.94461823 -164.49501038]
[90.18524170 -176.31072998]
[101.71114349 -185.91038513]
[115.00323486 -192.86166382]
[129.46287537 -196.85148621]
[144.43885803 -197.70018005]
[159.25668335 -195.36949158]
[173.24900818 -189.96441650]
[185.78565979 -181.72837830]
[196.30201721 -171.03230286]
[204.32446289 -158.35789490]
[209.49168396 -144.27600098]
[211.57095337 -129.42080688]
[210.46864319 -114.46137238]
[206.23439026 -100.07140350]
[199.06044006 -86.90123749]
[212.05082703 -94.40123749]
[225.04119873 -101.90123749]
[238.03158569 -109.40123749]
[251.02197266 -116.90123749]
[256.93475342 -123.94642639]
[264.35696411 -124.41872406]
[277.49859619 -131.65042114]
[290.64022827 -138.88212585]
[303.78186035 -146.11383057]
[316.92349243 -153.34553528]
[330.06512451 -160.57723999]
[334.22686768 -175.82371521]
[347.99182129 -183.58914185]
[363.19345093 -179.26643372]
[370.81292725 -165.42015076]
[366.32971191 -150.26507568]
[352.40365601 -142.79241943]
[337.29681396 -147.43560791]
[324.15518188 -140.20390320]
[311.01354980 -132.97219849]
[297.87191772 -125.74050140]
[284.73028564 -118.50879669]
[271.58865356 -111.27709198]
[258.52197266 -103.91085052]
[245.53158569 -96.41085052]
[232.54119873 -88.91085052]
[219.55082703 -81.41085052]
[206.56044006 -73.91085052]
[196.11843872 -63.14217377]
[189.02203369 -49.92699051]
[181.92562866 -36.71180725]
[174.82922363 -23.49662590]
[186.18067932 -15.86077690]
[196.75856018 -7.18493652]
[206.46791077 2.45302010]
[215.22158813 12.96658039]
[222.94099426 24.26137352]
[229.55686951 36.23601151]
[235.00981140 48.78301239]
[239.25086975 61.78974533]
[242.24198914 75.13946533]
[243.95629883 88.71233368]
[244.37843323 102.38652802]
[243.50459290 116.03929901]
[241.34263611 129.54809570]
[237.91194153 142.79165649]
[233.24331665 155.65112305]
[227.37867737 168.01104736]
[220.37065125 179.76048279]
[212.28215027 190.79397583]
[203.18579102 201.01248169]
[193.16320801 210.32427979]
[182.30436707 218.64578247]
[170.70674133 225.90228271]
[158.47444153 232.02867126]
[145.71725464 236.96992493]
[132.54971313 240.68171692]
[119.08998871 243.13072205]
[105.45890808 244.29493713]
[91.77883148 244.16394043]
[78.17254639 242.73889160]
[64.76219177 240.03259277]
[51.66813660 236.06932068]
[39.00791931 230.88465881]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 32]
[2 31]
[3 30]
[4 27]
[5 26]
[6 25]
[7 21]
[8 20]
[9 19]
[10 18]
[11 17]
[57 120]
[58 119]
[59 118]
[60 117]
[88 116]
[89 115]
[90 114]
[91 113]
[92 112]
[94 111]
[95 110]
[96 109]
[97 108]
[98 107]
[99 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
