%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAACUCAAACUACGCCCUGAUCGGCGCACUGCGAGCAGUAGCCCAAACAAUCUCAUAUGAxxxxxxxxxxGUAGCAUUGUUCGUUACAUGGUCCAUCAUAGAAUUCUCACUGUGAUAUAUAAACUCAGACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[94.57565308 393.88739014]
[94.57565308 378.88739014]
[94.57565308 363.88739014]
[94.57565308 348.88739014]
[94.57565308 333.88739014]
[94.57565308 318.88739014]
[94.57565308 303.88739014]
[94.57565308 288.88739014]
[94.57565308 273.88739014]
[94.57565308 258.88739014]
[79.56135559 254.99192810]
[66.05004120 247.35038757]
[54.95877838 236.47482300]
[47.04206848 223.09704590]
[42.84051514 208.11933899]
[42.64394379 192.55360413]
[46.47138214 177.45301819]
[54.06940842 163.84077454]
[64.92890930 152.64071655]
[78.31919861 144.61470032]
[93.33717346 140.31071472]
[93.02511597 125.31396484]
[75.10330200 114.86598206]
[69.06519318 92.90825653]
[54.06600571 92.75222015]
[38.27796173 102.17122650]
[23.51574326 92.73316956]
[8.51655483 92.88920593]
[-6.48263311 93.04524231]
[-20.20157242 100.92567444]
[-33.00864029 93.32118988]
[-48.00783157 93.47722626]
[-63.00701904 93.63326263]
[-71.88654327 106.35858154]
[-86.56095886 111.40249634]
[-101.38765717 106.82552338]
[-110.66546631 94.38760376]
[-110.82688141 78.87136841]
[-101.80983734 66.24312592]
[-87.08156586 61.35869980]
[-72.30538940 66.09623718]
[-63.16305542 78.63407898]
[-48.16386795 78.47804260]
[-33.16468048 78.32200623]
[-20.51858139 70.45272827]
[-6.63866949 78.04605103]
[8.36051846 77.89001465]
[23.35970688 77.73397827]
[32.08197403 69.29422760]
[44.61883163 69.07938385]
[54.22204208 77.75303650]
[69.22122955 77.90907288]
[80.20689392 67.69559479]
[81.14252472 52.72480011]
[82.07814789 37.75400925]
[81.92211151 22.75481987]
[80.67523956 7.80673265]
[79.42836761 -7.14135408]
[78.18148804 -22.08944130]
[76.93461609 -37.03752899]
[75.68774414 -51.98561478]
[74.28543854 -66.91992188]
[72.72785950 -81.83883667]
[57.89585495 -84.75484467]
[44.58309555 -91.91458130]
[33.97333908 -102.68141174]
[27.01000023 -116.09793854]
[24.31225204 -130.97119141]
[26.11997795 -145.97863770]
[32.27243423 -159.78584290]
[42.22255325 -171.16505432]
[55.08557129 -179.10446167]
[69.71772003 -182.89808655]
[84.81791687 -182.20860291]
[99.04347229 -177.09733582]
[111.12944794 -168.01875305]
[120.00116730 -155.78012085]
[124.86976624 -141.46971130]
[125.30233765 -126.35997009]
[121.26041412 -111.79444885]
[113.10339355 -99.06832123]
[101.55660248 -89.31316376]
[87.64676666 -83.39641571]
[89.20435333 -68.47750092]
[93.05189514 -62.11024094]
[90.63582611 -53.23249054]
[91.88270569 -38.28440094]
[93.12957764 -23.33631516]
[94.37644958 -8.38822842]
[95.62332916 6.55985832]
[96.87020111 21.50794601]
[106.85729980 10.31607819]
[121.67569733 7.98906898]
[134.61251831 15.58107567]
[139.80726624 29.65284538]
[134.90664673 43.82972717]
[122.13071442 51.68945694]
[107.26706696 49.67149734]
[97.04894257 38.68963623]
[96.11331177 53.66042709]
[95.17768860 68.63121796]
[106.90194702 70.42745972]
[116.63792419 76.25084686]
[123.14144897 84.90891266]
[125.75433350 94.88529205]
[140.68864441 96.28759766]
[155.62294006 97.68990326]
[170.55725098 99.09220123]
[185.49156189 100.49450684]
[200.42587280 101.89681244]
[215.36018372 103.29911804]
[225.51307678 91.56462860]
[240.63192749 88.07174683]
[254.90319824 94.16356659]
[262.83932495 107.49764252]
[261.38867188 122.94676208]
[251.10906982 134.57041931]
[235.95323181 137.89907837]
[221.74887085 131.65280151]
[213.95787048 118.23342133]
[199.02355957 116.83111572]
[184.08926392 115.42881775]
[169.15495300 114.02651215]
[154.22064209 112.62420654]
[139.28633118 111.22190094]
[124.35202789 109.81960297]
[117.87856293 119.23026276]
[108.02186584 125.00190735]
[108.33392334 139.99865723]
[122.49105072 143.28846741]
[135.43490601 149.87844849]
[146.40954590 159.37864685]
[154.77522278 171.22923279]
[160.04576111 184.73359680]
[161.91673279 199.09922791]
[160.28308105 213.48422241]
[155.24499512 227.04669189]
[147.10180664 238.99395752]
[136.33416748 248.62892151]
[123.57567596 255.39071655]
[109.57565308 258.88739014]
[109.57565308 273.88739014]
[109.57565308 288.88739014]
[109.57565308 303.88739014]
[109.57565308 318.88739014]
[109.57565308 333.88739014]
[109.57565308 348.88739014]
[109.57565308 363.88739014]
[109.57565308 378.88739014]
[109.57565308 393.88739014]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[21 129]
[22 128]
[24 52]
[25 51]
[27 48]
[28 47]
[29 46]
[31 44]
[32 43]
[33 42]
[53 101]
[54 100]
[55 99]
[56 91]
[57 90]
[58 89]
[59 88]
[60 87]
[61 86]
[62 84]
[63 83]
[105 126]
[106 125]
[107 124]
[108 123]
[109 122]
[110 121]
[111 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
