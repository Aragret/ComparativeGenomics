%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGUAGGCCUAAAAGCAGCCACCAAUUAAGAAAGCGUUCAAGCUCAACACCCACUACCUAAAxxxxxxxxxxUAGUUAUUAUCGAAACCAUCAGCCUACUCAUUCAACCAAUAGCCCUGGCCGUACGCCUAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 247.61103821]
[92.50000000 232.61103821]
[92.50000000 217.61103821]
[92.50000000 202.61103821]
[92.50000000 187.61103821]
[92.50000000 172.61103821]
[92.50000000 157.61103821]
[92.50000000 142.61103821]
[92.50000000 127.61103058]
[92.50000000 112.61103058]
[87.45124054 98.48622894]
[77.94288635 86.88488770]
[68.43452454 75.28354645]
[58.92616653 63.68220520]
[49.41780853 52.08086395]
[39.90945053 40.47952271]
[27.64699936 49.12995911]
[14.79231358 56.87300491]
[1.41241312 63.66830063]
[-12.42294407 69.48041534]
[-26.64162636 74.27904510]
[-41.16950226 78.03916931]
[-55.93083191 80.74118805]
[-70.84865570 82.37100983]
[-85.84519196 82.92015076]
[-100.84226990 82.38572693]
[-115.76168060 80.77054596]
[-130.52565002 78.08301544]
[-145.05722046 74.33714294]
[-159.28059387 69.55247498]
[-173.12165833 63.75394058]
[-186.50820923 56.97178268]
[-199.37049866 49.24135208]
[-211.64143372 40.60295486]
[-223.25704956 31.10162926]
[-234.15678406 20.78690910]
[-244.28382874 9.71257496]
[-253.58535767 -2.06363964]
[-262.01287842 -14.48033714]
[-269.52249146 -27.47278214]
[-276.07501221 -40.97323608]
[-281.63629150 -54.91131592]
[-286.17730713 -69.21435547]
[-289.67440796 -83.80777740]
[-292.10937500 -98.61550140]
[-293.46948242 -113.56032562]
[-293.74765015 -128.56434631]
[-292.94244385 -143.54931641]
[-291.05804443 -158.43711853]
[-288.10427856 -173.15014648]
[-284.09655762 -187.61167908]
[-279.05575562 -201.74632263]
[-273.00817871 -215.48037720]
[-265.98532104 -228.74226379]
[-258.02383423 -241.46281433]
[-249.16520691 -253.57571411]
[-239.45562744 -265.01782227]
[-228.94572449 -275.72946167]
[-217.69027710 -285.65484619]
[-205.74798584 -294.74215698]
[-193.18109131 -302.94403076]
[-180.05513000 -310.21774292]
[-166.43852234 -316.52532959]
[-152.40226746 -321.83395386]
[-138.01954651 -326.11587524]
[-123.36533356 -329.34884644]
[-108.51604462 -331.51593018]
[-93.54908752 -332.60589600]
[-78.54249573 -332.61300659]
[-63.57451248 -331.53726196]
[-48.72317123 -329.38427734]
[-34.06590271 -326.16525269]
[-19.67911720 -321.89697266]
[-5.63782835 -316.60168457]
[7.98476076 -310.30703735]
[21.11762810 -303.04577637]
[33.69230270 -294.85583496]
[45.64322662 -285.77987671]
[56.90808868 -275.86520386]
[67.42816925 -265.16354370]
[77.14860535 -253.73065186]
[86.01873016 -241.62615967]
[93.99230194 -228.91317749]
[101.02773285 -215.65797424]
[107.08836365 -201.92965698]
[112.14257812 -187.79981995]
[116.16403961 -173.34210205]
[119.13176727 -158.63188171]
[121.03030396 -143.74588013]
[121.84974670 -128.76167297]
[121.58581543 -113.75740051]
[120.23989868 -98.81129456]
[117.81900787 -84.00125885]
[114.33576202 -69.40452576]
[109.80831909 -55.09717941]
[104.26029205 -41.15382767]
[97.72059631 -27.64715576]
[90.22333527 -14.64758492]
[81.80759430 -2.22288990]
[72.51725006 9.56215286]
[62.40073395 20.64609909]
[51.51079178 30.97116470]
[61.01914978 42.57250595]
[70.52751160 54.17384720]
[80.03586578 65.77518463]
[89.54422760 77.37652588]
[99.05258179 88.97786713]
[96.27019501 74.23818970]
[97.79626465 59.31601715]
[106.54753113 47.13343048]
[120.20164490 40.92334747]
[135.13519287 42.33374786]
[147.38522339 50.99034882]
[153.70091248 64.59593201]
[152.40634155 79.53978729]
[137.54466248 81.57213593]
[151.56137085 86.91365051]
[165.57807922 92.25516510]
[179.14756775 84.48321533]
[194.52886963 87.30271149]
[204.45941162 99.38238525]
[204.25028992 115.01856995]
[194.00025940 126.82833862]
[178.54905701 129.23548889]
[165.19227600 121.10343170]
[160.23657227 106.27187347]
[146.21986389 100.93036652]
[132.20314026 95.58885193]
[126.02735901 99.84439850]
[135.76731873 111.25198364]
[145.50729370 122.65957642]
[155.24725342 134.06716919]
[166.94894409 143.45175171]
[166.40422058 158.44184875]
[154.05226135 166.95236206]
[139.85127258 162.12207031]
[135.24993896 147.84669495]
[128.05854797 134.68296814]
[120.86717224 121.51922607]
[113.67578888 108.35548401]
[107.50000000 112.61103058]
[107.50000000 127.61103058]
[107.50000000 142.61103821]
[107.50000000 157.61103821]
[107.50000000 172.61103821]
[107.50000000 187.61103821]
[107.50000000 202.61103821]
[107.50000000 217.61103821]
[107.50000000 232.61103821]
[107.50000000 247.61103821]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 107]
[12 106]
[13 105]
[14 104]
[15 103]
[16 102]
[116 128]
[117 127]
[118 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
