%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACUAUACUACUAACAGACCGCAACCUCAACACCACCUUCUUCGACCCCGCCGGAGGAGGAxxxxxxxxxxGGACAACCAGUAAGCUACCCUUUUACCAUCAUUGGACAAGUAGCAUCCGUACUAUACUUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[122.20208740 335.97680664]
[122.20208740 320.97680664]
[122.20208740 305.97680664]
[122.20208740 290.97680664]
[122.20208740 275.97680664]
[122.20208740 260.97680664]
[122.20208740 245.97680664]
[122.20208740 230.97680664]
[122.20208740 215.97680664]
[122.20208740 200.97680664]
[120.64450073 186.05789185]
[117.54618073 171.38137817]
[105.13314056 159.01544189]
[110.90667725 141.56132507]
[107.50370026 126.95242310]
[88.58263397 123.00563812]
[78.26196289 108.63015747]
[80.21598053 92.68221283]
[68.91696930 82.81649017]
[57.61796951 72.95076752]
[46.31896210 63.08504486]
[31.81315041 67.93567657]
[16.92532349 64.89439392]
[5.63375139 54.87606812]
[0.90447640 40.64617538]
[3.91258788 26.05792999]
[-11.57156372 22.80960464]
[-16.06966019 8.61043549]
[-27.36866570 -1.25528741]
[-39.21318054 7.23823023]
[-52.64920807 12.86728001]
[-66.99592590 15.35028267]
[-81.52719116 14.56497765]
[-95.50828552 10.55444241]
[-108.23304749 3.52474093]
[-119.05957031 -6.16566133]
[-127.44255066 -18.02417374]
[-132.96078491 -31.44911766]
[-135.33828735 -45.76026535]
[-134.45816040 -60.23328781]
[-130.36825562 -74.13642883]
[-123.27865601 -86.76750946]
[-134.36996460 -96.86615753]
[-149.78318787 -100.43591309]
[-153.98492432 -114.72558594]
[-165.07623291 -124.82423401]
[-176.16755676 -134.92288208]
[-187.25886536 -145.02153015]
[-198.35018921 -155.12017822]
[-213.91693115 -154.55981445]
[-225.02124023 -164.95928955]
[-225.45953369 -179.80325317]
[-236.55084229 -189.90191650]
[-252.67918396 -192.86988831]
[-257.91729736 -208.40997314]
[-246.87669373 -220.53584290]
[-230.91496277 -216.77345276]
[-226.45219421 -200.99322510]
[-215.36088562 -190.89457703]
[-200.54093933 -191.84593201]
[-189.14891052 -181.76246643]
[-188.25152588 -166.21150208]
[-177.16021729 -156.11285400]
[-166.06890869 -146.01419067]
[-154.97758484 -135.91554260]
[-143.88627625 -125.81690216]
[-129.26637268 -122.96946716]
[-124.27132416 -107.95747375]
[-113.18000793 -97.85882568]
[-100.39438629 -106.55839539]
[-85.89550781 -111.96269226]
[-70.51771545 -113.75627899]
[-55.14698792 -111.83164978]
[-40.66991425 -106.29563141]
[-27.92251396 -97.46347046]
[-17.64198875 -85.84088898]
[-10.42408085 -72.09513855]
[-6.68854618 -57.01667404]
[-6.65475512 -41.47370529]
[-10.32880688 -26.36221123]
[-17.50294113 -12.55429173]
[-6.20393705 -2.68856907]
[8.47203445 -0.14590593]
[13.77831078 14.75892544]
[27.82780075 9.81145859]
[42.56538391 12.57904625]
[54.01459503 22.41683197]
[59.03532410 36.75869751]
[56.18468475 51.78604126]
[67.48368835 61.65176392]
[78.78269958 71.51748657]
[90.08170319 81.38320923]
[111.18961334 78.16436005]
[127.72601318 96.25743103]
[142.49206543 93.61856842]
[157.25813293 90.97969818]
[172.02418518 88.34083557]
[186.79023743 85.70197296]
[190.87478638 82.24712372]
[195.42457581 80.88628387]
[199.54727173 81.43856812]
[202.55761719 83.38928986]
[217.45951843 81.67659760]
[227.27590942 69.58212280]
[242.41294861 68.05749512]
[253.88269043 77.49044800]
[268.78457642 75.77776337]
[283.68649292 74.06507111]
[296.53002930 63.86821747]
[311.68103027 70.14345551]
[313.55349731 86.43534851]
[300.22113037 95.98420715]
[285.39916992 88.96697235]
[270.49728394 90.67966461]
[255.59538269 92.39234924]
[246.56471252 104.18144226]
[231.47645569 106.13063049]
[219.17221069 96.57849884]
[204.27030945 98.29119110]
[189.42910767 100.46802521]
[174.66304016 103.10689545]
[159.89698792 105.74575806]
[145.13093567 108.38462067]
[130.36488342 111.02348328]
[122.11258698 123.54944611]
[125.51557159 138.15834045]
[136.06430054 145.65354919]
[138.57156372 157.93901062]
[132.22270203 168.28305054]
[135.32102966 182.95957947]
[142.05340576 169.55528259]
[154.50982666 161.19837952]
[169.46595764 160.05201721]
[183.05046082 166.41293335]
[191.74702454 178.63462830]
[193.30458069 193.55354309]
[187.31994629 207.30796814]
[175.34223938 216.33761597]
[160.47184753 218.30517578]
[146.55792236 212.70137024]
[137.20208740 200.97680664]
[137.20208740 215.97680664]
[137.20208740 230.97680664]
[137.20208740 245.97680664]
[137.20208740 260.97680664]
[137.20208740 275.97680664]
[137.20208740 290.97680664]
[137.20208740 305.97680664]
[137.20208740 320.97680664]
[137.20208740 335.97680664]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 130]
[12 129]
[14 126]
[15 125]
[18 92]
[19 91]
[20 90]
[21 89]
[26 84]
[28 82]
[29 81]
[42 69]
[43 68]
[45 66]
[46 65]
[47 64]
[48 63]
[49 62]
[52 59]
[53 58]
[94 124]
[95 123]
[96 122]
[97 121]
[98 120]
[102 119]
[103 118]
[106 115]
[107 114]
[108 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
