%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGACCCCAUUCUAUACCAACACCUAUUCUGAUUUUUCGGUCACCCUGAAGUUUAUAUUCUxxxxxxxxxxAUCAAUACUAAACCCCCAUAAAUAGGAGAAGGCUUAGAAGAAAACCCCACAAACCCCAUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[194.70083618 505.79614258]
[194.70083618 490.79614258]
[194.70083618 475.79614258]
[194.70083618 460.79614258]
[194.70083618 445.79614258]
[194.70083618 430.79614258]
[194.70083618 415.79614258]
[194.70083618 400.79614258]
[194.70083618 385.79614258]
[194.70083618 370.79614258]
[190.69309998 356.34146118]
[182.96900940 343.48306274]
[176.78863525 339.34197998]
[175.22119141 330.27581787]
[167.76628113 317.25952148]
[164.41070557 315.99160767]
[161.52189636 312.99887085]
[159.92060852 308.52804565]
[160.28149414 303.19052124]
[153.65299988 289.73455811]
[147.02450562 276.27859497]
[140.39599609 262.82263184]
[136.66209412 277.35046387]
[125.76796722 287.66152954]
[111.05690765 290.59149170]
[97.04354858 285.24121094]
[88.02840424 273.25256348]
[86.77811432 258.30477905]
[93.67636871 244.98507690]
[106.60619354 237.38114929]
[121.59957886 237.82652283]
[134.05577087 246.18515015]
[130.04801941 231.73045349]
[126.04028320 217.27577209]
[122.03254700 202.82107544]
[118.02480316 188.36639404]
[114.01706696 173.91169739]
[100.85687256 162.34411621]
[105.53045654 144.56385803]
[101.22286987 130.19567871]
[88.24118042 129.21249390]
[76.36634064 122.68655396]
[67.93842316 111.40615845]
[64.81683350 97.13101959]
[67.98659515 82.32250977]
[55.54714966 73.94036865]
[43.10771179 65.55821991]
[30.58174896 57.30593491]
[17.97062111 49.18439102]
[1.57345498 48.92947769]
[-6.16687822 34.47198105]
[2.71221304 20.68453026]
[19.07668114 21.75047493]
[26.09216309 36.57326508]
[38.70329285 44.69480515]
[46.07743073 45.67851639]
[51.48985291 53.11878204]
[63.92929459 61.50092697]
[76.36873627 69.88307190]
[89.75502014 63.11495590]
[90.37899780 48.12793732]
[91.00297546 33.14092255]
[91.62695312 18.15390587]
[92.25093079 3.16688991]
[92.71897125 -11.82580662]
[93.03102875 -26.82255936]
[93.34308624 -41.81931305]
[93.65514374 -56.81606674]
[79.60829163 -62.56501389]
[68.58943939 -73.00289917]
[62.08879852 -86.71807098]
[60.98552704 -101.85568237]
[65.42883301 -116.36848450]
[74.81779480 -128.29374695]
[87.88262939 -136.01867676]
[102.85643005 -138.49851990]
[117.71411896 -135.39793396]
[130.44630432 -127.13621521]
[139.33105469 -114.83071136]
[143.16680908 -100.14563751]
[141.43478394 -85.06702423]
[134.36924744 -71.63413239]
[122.92573547 -61.66365433]
[108.65189362 -56.50400925]
[108.33983612 -41.50725555]
[108.02777863 -26.51050377]
[107.71572876 -11.51375008]
[110.74056244 -4.71698427]
[107.23794556 3.79086733]
[106.61396790 18.77788353]
[105.98999023 33.76490021]
[105.36601257 48.75191498]
[104.74203491 63.73893356]
[123.77898407 74.34199524]
[132.68893433 93.16860199]
[129.15437317 112.71836853]
[115.59105682 125.88808441]
[119.89863586 140.25627136]
[130.89434814 147.07890320]
[134.16304016 159.18405151]
[128.47175598 169.90396118]
[132.47949219 184.35865784]
[136.48722839 198.81333923]
[140.49497986 213.26803589]
[144.50271606 227.72271729]
[148.51045227 242.17739868]
[153.85197449 256.19412231]
[160.48046875 269.65008545]
[167.10896301 283.10604858]
[173.73745728 296.56201172]
[180.78259277 309.80459595]
[188.23750305 322.82092285]
[195.82742310 335.75897217]
[203.55149841 348.61737061]
[203.68634033 333.61798096]
[207.09365845 319.01010132]
[213.60894775 305.49896240]
[222.91769409 293.73684692]
[234.57048035 284.29159546]
[248.00473022 277.61920166]
[262.57189941 274.04180908]
[277.56869507 273.73208618]
[292.27111816 276.70501709]
[305.96942139 282.81704712]
[318.00222778 291.77316284]
[327.78863525 303.14093018]
[334.85620117 316.37155151]
[338.86370850 330.82629395]
[339.61770630 345.80734253]
[337.08178711 360.59140015]
[331.37835693 374.46481323]
[322.78277588 386.75772095]
[311.71002197 396.87670898]
[298.69464111 404.33325195]
[284.36499023 408.76736450]
[269.41287231 409.96496582]
[254.56015015 407.86828613]
[240.52383423 402.57846069]
[227.98158264 394.35095215]
[217.53890991 383.58291626]
[209.70083618 370.79614258]
[209.70083618 385.79614258]
[209.70083618 400.79614258]
[209.70083618 415.79614258]
[209.70083618 430.79614258]
[209.70083618 445.79614258]
[209.70083618 460.79614258]
[209.70083618 475.79614258]
[209.70083618 490.79614258]
[209.70083618 505.79614258]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 114]
[12 113]
[14 112]
[15 111]
[19 110]
[20 109]
[21 108]
[22 107]
[32 106]
[33 105]
[34 104]
[35 103]
[36 102]
[37 101]
[39 98]
[40 97]
[45 59]
[46 58]
[47 57]
[48 55]
[49 54]
[60 93]
[61 92]
[62 91]
[63 90]
[64 89]
[65 87]
[66 86]
[67 85]
[68 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
