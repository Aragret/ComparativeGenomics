%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCUUCAGCAAACCCUGAUGAAGGCUACAAAGUAAGCGCAAGUACCCACGUAAAGACGUUAxxxxxxxxxxGUAUUUCCUCACGCAAGCAACCGCAUCCAUAAUCCUUCUAAUAGCUAUCCUCUUCAACAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[122.24690247 261.30285645]
[122.24690247 246.30287170]
[122.24690247 231.30287170]
[122.24690247 216.30287170]
[122.24690247 201.30287170]
[122.24690247 186.30287170]
[122.24690247 171.30287170]
[122.24690247 156.30287170]
[122.24690247 141.30287170]
[122.24690247 126.30287170]
[115.51892090 122.98861694]
[95.33496857 113.04587555]
[83.44258881 122.18760681]
[71.55020905 131.32934570]
[59.65782928 140.47106934]
[47.76544952 149.61280823]
[41.53981400 164.15763855]
[26.73382187 165.77993774]
[14.84144211 174.92166138]
[11.34383297 190.57881165]
[-3.14067698 197.47653198]
[-17.50081062 190.32348633]
[-20.72070312 174.60687256]
[-10.33032799 162.38314819]
[5.69970751 163.02928162]
[17.59208679 153.88755798]
[22.96710205 139.99659729]
[38.62371826 137.72042847]
[50.51609802 128.57868958]
[62.40847778 119.43695831]
[74.30085754 110.29522705]
[86.19323730 101.15349579]
[93.78314209 88.21543884]
[95.95998383 73.37422943]
[98.13681793 58.53302383]
[100.31365204 43.69181824]
[88.43058777 29.00196457]
[90.94809723 10.59654140]
[105.82212067 0.00594275]
[107.37970734 -14.91296959]
[108.93728638 -29.83188248]
[89.70001984 -43.06362915]
[81.34784698 -64.75341797]
[86.69323730 -87.26362610]
[103.74778748 -102.74018097]
[100.04162598 -117.27512360]
[96.33546448 -131.81005859]
[83.02794647 -139.90620422]
[79.47643280 -154.69949341]
[87.27688599 -167.33628845]
[83.57072449 -181.87123108]
[77.36531830 -195.52746582]
[68.85422516 -207.87904358]
[64.01911926 -210.16842651]
[60.89797592 -213.74766541]
[59.69524384 -217.72950745]
[60.22585297 -221.27717590]
[52.50176620 -234.13557434]
[44.77768326 -246.99397278]
[37.05359650 -259.85238647]
[22.45693016 -267.32696533]
[21.90212059 -283.71670532]
[35.95991135 -292.16128540]
[50.16884995 -283.97360229]
[49.91199875 -267.57647705]
[57.63608551 -254.71806335]
[65.36016846 -241.85966492]
[73.08425140 -229.00125122]
[81.20579529 -216.39013672]
[89.71688843 -204.03855896]
[89.05715942 -219.02404785]
[93.21111298 -233.43739319]
[101.74491119 -245.77328491]
[113.76728821 -254.74337769]
[128.02264404 -259.41082764]
[143.02214050 -259.28814697]
[157.19924927 -254.38819885]
[169.07331848 -245.22270203]
[177.40423584 -232.74890137]
[181.32191467 -218.26953125]
[180.41720581 -203.29684448]
[174.78457642 -189.39456177]
[165.01231384 -178.01461792]
[152.12103271 -170.34555054]
[137.45707703 -167.18829346]
[122.55193329 -168.87260437]
[108.96230316 -175.22256470]
[98.10565948 -185.57739258]
[101.81182098 -171.04244995]
[114.71080780 -163.68367004]
[118.67643738 -148.99597168]
[110.87040710 -135.51622009]
[114.57656097 -120.98128510]
[118.28272247 -106.44634247]
[129.85148621 -105.34515381]
[140.57632446 -100.87006378]
[149.49671936 -93.42188263]
[162.43476868 -101.01178741]
[170.06079102 -115.52991486]
[186.45542908 -115.91419983]
[194.75329590 -101.76932526]
[186.41825867 -87.64632416]
[170.02468872 -88.07373047]
[157.08662415 -80.48382568]
[158.76014709 -74.28173828]
[159.39015198 -67.87797546]
[158.95588684 -61.44715500]
[157.46569824 -55.16524124]
[154.95683289 -49.20469666]
[151.49456787 -43.72977066]
[147.17051697 -38.89196014]
[142.10015869 -34.82582474]
[136.41984558 -31.64523125]
[130.28303528 -29.44019318]
[123.85619354 -28.27430153]
[122.29861450 -13.35538864]
[120.74103546 1.56352365]
[129.72955322 8.71175003]
[134.16978455 19.43331909]
[132.83982849 31.08256912]
[125.95754242 40.72326279]
[115.15486145 45.86865616]
[112.97801971 60.70986176]
[110.80118561 75.55107117]
[108.62435150 90.39227295]
[117.64995575 78.41152191]
[125.80426788 65.82155609]
[137.61016846 56.56840515]
[151.78376770 51.65832520]
[166.78373718 51.62528229]
[180.97883606 56.47286987]
[192.82537842 65.67391968]
[201.03509521 78.22783661]
[204.71514893 92.76939392]
[203.46539307 107.71723938]
[197.42169189 121.44581604]
[187.24131775 132.46215820]
[174.03135681 139.56826782]
[159.22836304 141.99136353]
[144.43827820 139.46661377]
[137.24690247 126.30287170]
[137.24690247 141.30287170]
[137.24690247 156.30287170]
[137.24690247 171.30287170]
[137.24690247 186.30287170]
[137.24690247 201.30287170]
[137.24690247 216.30287170]
[137.24690247 231.30287170]
[137.24690247 246.30287170]
[137.24690247 261.30285645]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 32]
[13 31]
[14 30]
[15 29]
[16 28]
[18 26]
[19 25]
[33 125]
[34 124]
[35 123]
[36 122]
[39 117]
[40 116]
[41 115]
[45 94]
[46 93]
[47 92]
[50 89]
[51 88]
[52 70]
[53 69]
[57 68]
[58 67]
[59 66]
[60 65]
[97 104]
[98 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
