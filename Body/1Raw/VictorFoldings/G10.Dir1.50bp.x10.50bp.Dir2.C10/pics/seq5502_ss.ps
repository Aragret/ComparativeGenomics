%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUCUCCCUAGGAGGCCUGCCCCCGCUAACCGGCUUUUUGCCCAAAUGGGCCAUUAUCGAxxxxxxxxxxUGAAUCAUCCGCUACCUUCACGCCAAUGGCGCCUCAAUAUUCUUUAUCUGCCUCUUCCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[35.85697937 193.59352112]
[28.40432358 188.02348328]
[18.19084358 199.00915527]
[7.97736311 209.99481201]
[-2.23611665 220.98048401]
[-12.44959641 231.96614075]
[-16.17948914 247.34140015]
[-30.51209831 251.39425659]
[-40.72557831 262.37991333]
[-50.93905640 273.36557007]
[-61.15253830 284.35125732]
[-71.36602020 295.33691406]
[-81.57949829 306.32257080]
[-91.79297638 317.30822754]
[-102.00645447 328.29391479]
[-102.86174011 344.31414795]
[-116.00330353 353.51626587]
[-131.35006714 348.84115601]
[-137.12930298 333.87521362]
[-128.90768433 320.09896851]
[-112.99211884 318.08041382]
[-102.77864075 307.09475708]
[-92.56516266 296.10910034]
[-82.35168457 285.12344360]
[-72.13819885 274.13775635]
[-61.92472076 263.15209961]
[-51.71124268 252.16644287]
[-41.49776077 241.18077087]
[-38.49840546 226.59127808]
[-23.43526077 221.75267029]
[-13.22178173 210.76699829]
[-3.00830150 199.78134155]
[7.20517826 188.79566956]
[17.41865921 177.81001282]
[7.74371767 166.05189514]
[-0.26971960 153.10421753]
[-6.47733498 139.20014954]
[-10.76733112 124.59011078]
[-13.06244659 109.53720093]
[-13.32134724 94.31253815]
[-11.53937149 79.19029999]
[-7.74861002 64.44283295]
[-21.65116501 58.81087494]
[-35.55372238 53.17892075]
[-50.82836151 58.08452225]
[-64.10697174 49.08130264]
[-65.20334625 33.07575607]
[-53.27643204 22.34596825]
[-37.47554016 25.12291718]
[-29.92176437 39.27636337]
[-16.01920891 44.90832138]
[-2.11665320 50.54027557]
[12.67431068 27.55485535]
[32.53291702 8.77353573]
[56.30674362 -4.71377325]
[82.61614990 -12.12438107]
[109.93437958 -13.02824116]
[136.67608643 -7.37289858]
[134.84971619 -23.08833504]
[146.89140320 -31.85457802]
[152.66767883 -45.69779587]
[158.44395447 -59.54101181]
[164.22023010 -73.38423157]
[169.99649048 -87.22744751]
[175.77276611 -101.07066345]
[170.00558472 -115.54054260]
[176.06074524 -129.49725342]
[189.89111328 -134.90620422]
[195.66738892 -148.74942017]
[182.73028564 -141.15788269]
[167.75372314 -140.31973267]
[154.05036926 -146.42039490]
[144.65127563 -158.11044312]
[141.63543701 -172.80413818]
[145.66993713 -187.25137329]
[155.86238098 -198.25657654]
[169.95828247 -203.38546753]
[184.83976746 -201.50358582]
[197.21517944 -193.02720642]
[204.34719849 -179.83122253]
[204.65786743 -164.83250427]
[213.42407227 -177.00434875]
[222.19027710 -189.17617798]
[230.95649719 -201.34802246]
[223.62269592 -214.73376465]
[222.83158875 -229.97636414]
[228.74028015 -244.04939270]
[240.17556763 -254.15864563]
[254.86697388 -258.29690552]
[269.89752197 -255.64254761]
[282.28286743 -246.72257996]
[289.56390381 -233.30805969]
[290.29495239 -218.06245422]
[284.33090210 -204.01280212]
[272.85589600 -193.94866943]
[258.14828491 -189.86827087]
[243.12832642 -192.58181763]
[234.36212158 -180.40997314]
[225.59591675 -168.23814392]
[216.82971191 -156.06629944]
[209.51060486 -142.97314453]
[203.73432922 -129.12992859]
[209.61831665 -115.49489594]
[203.95756531 -101.37361908]
[189.61598206 -95.29439545]
[183.83972168 -81.45117950]
[178.06344604 -67.60795593]
[172.28717041 -53.76473999]
[166.51089478 -39.92152405]
[160.73461914 -26.07830620]
[162.97415161 -11.35302830]
[150.51930237 -1.59662640]
[158.67347717 2.88410211]
[166.43312073 8.01785374]
[173.74606323 13.77010918]
[180.56311035 20.10219002]
[186.83843994 26.97151566]
[192.52986145 34.33189774]
[197.59909058 42.13384247]
[202.01205444 50.32489014]
[205.73905945 58.84996033]
[208.75506592 67.65173340]
[211.03977966 76.67102051]
[212.57785034 85.84717560]
[213.35893250 95.11849213]
[213.37776184 104.42263794]
[212.63421631 113.69704437]
[211.13330078 122.87934875]
[208.88510132 131.90780640]
[205.90475464 140.72171021]
[202.21228027 149.26179504]
[197.83250427 157.47064209]
[192.79490662 165.29304504]
[187.13331604 172.67640686]
[180.88584900 179.57107544]
[174.09448242 185.93069458]
[166.80488586 191.71249390]
[159.06608582 196.87762451]
[150.93011475 201.39131165]
[142.45169067 205.22323608]
[133.68780518 208.34762573]
[124.69739532 210.74345398]
[115.54091644 212.39463806]
[106.27993774 213.29005432]
[96.97673798 213.42369080]
[87.69386292 212.79464722]
[78.49373627 211.40716553]
[69.43821716 209.27055359]
[60.58820724 206.39918518]
[52.00320816 202.81236267]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 34]
[3 33]
[4 32]
[5 31]
[6 30]
[8 28]
[9 27]
[10 26]
[11 25]
[12 24]
[13 23]
[14 22]
[15 21]
[42 52]
[43 51]
[44 50]
[58 112]
[60 110]
[61 109]
[62 108]
[63 107]
[64 106]
[65 105]
[68 102]
[69 101]
[81 100]
[82 99]
[83 98]
[84 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
