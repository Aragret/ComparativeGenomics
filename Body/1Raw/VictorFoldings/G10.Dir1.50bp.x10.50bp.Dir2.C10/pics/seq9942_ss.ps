%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUCACAAUCAUGGCAAGCCAACGCCACUUAUCCAGUGAACCACUAUCACGAAAAAAACUxxxxxxxxxxUGCACAUUUUAUUUCUCCAACAUACUCGGAUUCUACCCUAGCAUCACACACCGCACAAUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[125.89817047 302.78521729]
[125.58611298 287.78845215]
[125.27405548 272.79168701]
[124.96199799 257.79495239]
[124.64994049 242.79820251]
[124.33788300 227.80143738]
[124.02583313 212.80468750]
[123.71377563 197.80793762]
[123.40171814 182.81118774]
[120.30339813 168.13465881]
[114.52712250 154.29144287]
[107.74565125 155.66508484]
[100.84678650 156.19502258]
[93.93508148 155.87319946]
[87.11530304 154.70449829]
[80.49081421 152.70663452]
[74.16203308 149.90988159]
[68.22488403 146.35665894]
[62.76935196 142.10078430]
[57.87812805 137.20678711]
[53.62535095 131.74885559]
[50.07548141 125.80968475]
[35.95067978 130.85844421]
[21.82587624 135.90719604]
[7.70107269 140.95594788]
[3.46725225 155.88426208]
[-8.75339508 165.44645691]
[-24.26178169 165.96565247]
[-37.09461594 157.24224854]
[-42.31740952 142.63053894]
[-37.92189789 127.74903107]
[-25.59823608 118.31997681]
[-10.08513069 117.96903992]
[2.65231633 126.83115387]
[16.77711868 121.78239441]
[30.90192223 116.73364258]
[45.02672577 111.68488312]
[45.00254822 88.42945099]
[54.39505005 67.15512848]
[71.59603882 51.50450897]
[93.66036224 44.15730667]
[93.97241974 29.16055298]
[94.28447723 14.16379833]
[94.59653473 -0.83295494]
[84.33294678 -0.61340314]
[73.46541595 -6.39166546]
[61.38542557 -15.28401566]
[49.30543900 -24.17636490]
[37.22544861 -33.06871414]
[22.07274437 -29.20483780]
[8.00393867 -36.03145599]
[1.66189051 -50.32524490]
[6.04112244 -65.33712006]
[19.07389450 -73.97892761]
[34.60653305 -72.17027283]
[45.30499649 -60.76514816]
[46.11779785 -45.14870453]
[58.19778824 -36.25635147]
[70.27777863 -27.36400414]
[82.35776520 -18.47165298]
[96.07781982 -24.53466606]
[97.63539886 -39.45357895]
[99.19297791 -54.37248993]
[100.75056458 -69.29140472]
[102.15286255 -84.22570801]
[103.39974213 -99.17379761]
[104.64661407 -114.12188721]
[105.89348602 -129.06997681]
[91.93727875 -134.90773010]
[80.46942139 -144.77400208]
[72.61341858 -157.70220947]
[69.13892365 -172.42576599]
[70.38632965 -187.50219727]
[76.23343658 -201.45449829]
[86.10739899 -212.91574097]
[99.04086304 -220.76307678]
[113.76673889 -224.22770691]
[128.84234619 -222.97019958]
[142.79072571 -217.11373901]
[154.24534607 -207.23211670]
[162.08401489 -194.29339600]
[165.53877258 -179.56518555]
[164.27116394 -164.49043274]
[158.40536499 -150.54598999]
[148.51605225 -139.09797668]
[135.57208252 -131.26799011]
[120.84157562 -127.82309723]
[119.59470367 -112.87500763]
[118.34782410 -97.92692566]
[117.10095215 -82.97883606]
[119.69594574 -76.00662994]
[115.66947174 -67.73382568]
[114.11189270 -52.81491089]
[112.55431366 -37.89599991]
[110.99672699 -22.97708511]
[119.55065918 -35.29903412]
[132.48440552 -42.89627457]
[147.41209412 -44.36734390]
[161.58001709 -39.44087982]
[172.37461853 -29.02566147]
[177.80459595 -15.04298687]
[176.86831665 -0.07223624]
[169.73847961 13.12493610]
[157.73031616 22.11404991]
[143.05899048 25.23688316]
[128.43090820 21.91736603]
[116.54450989 12.76785278]
[109.59328461 -0.52089876]
[109.28123474 14.47585487]
[108.96917725 29.47260857]
[108.65711975 44.46936417]
[121.90823364 48.24454880]
[133.84257507 55.13044357]
[143.74285889 64.71317291]
[151.01400757 76.41677856]
[155.21902466 89.53782654]
[156.10514832 103.28769684]
[153.61914062 116.83996582]
[147.91041565 129.38008118]
[139.32208252 140.15434265]
[128.37034607 148.51516724]
[134.14660645 162.35838318]
[136.51336670 147.54627991]
[143.26368713 134.15100098]
[153.76084900 123.43608856]
[167.01470947 116.41219330]
[181.77510071 113.74185944]
[196.64976501 115.67696381]
[210.23562622 122.03497314]
[221.25122070 132.21617126]
[228.65748596 145.26022339]
[231.75582886 159.93673706]
[230.25401306 174.86137390]
[224.29368591 188.62634277]
[214.43705750 199.93328857]
[201.61384583 207.71566772]
[187.03361511 211.23941040]
[172.07164001 210.17214966]
[158.13919067 204.61453247]
[146.55046082 195.09082031]
[138.39846802 182.49913025]
[138.71052551 197.49588013]
[139.02258301 212.49263000]
[139.33464050 227.48937988]
[139.64669800 242.48614502]
[139.95875549 257.48287964]
[140.27081299 272.47964478]
[140.58287048 287.47640991]
[140.89492798 302.47314453]
[143.48591614 321.68087769]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 122]
[11 121]
[22 37]
[23 36]
[24 35]
[25 34]
[41 111]
[42 110]
[43 109]
[44 108]
[46 60]
[47 59]
[48 58]
[49 57]
[61 95]
[62 94]
[63 93]
[64 92]
[65 90]
[66 89]
[67 88]
[68 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
