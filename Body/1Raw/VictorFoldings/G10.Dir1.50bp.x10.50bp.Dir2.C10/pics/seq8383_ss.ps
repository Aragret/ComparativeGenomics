%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUGAUAACCAUACACAACACUAAAGGACGAACCUGAUCUCUUAUACUAGUAUCCUUAAUCAUxxxxxxxxxxCGAAUUGGUAUAUAGUUUAAACAAAACGAAUGAUUUCGACUCAUUAAAUUAUGAUAAUCAUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[120.19219208 316.51644897]
[120.19219208 301.51644897]
[120.19219208 286.51644897]
[120.19219208 271.51644897]
[120.19219208 256.51644897]
[120.19219208 241.51644897]
[120.19219208 226.51644897]
[120.19219208 211.51644897]
[120.19219208 196.51644897]
[120.19219208 181.51644897]
[117.47111511 166.76533508]
[112.11925507 152.75256348]
[106.76739502 138.73979187]
[101.41553497 124.72703552]
[96.20519257 124.47507477]
[91.16318512 123.13742828]
[86.51316833 120.77342224]
[82.46141052 117.48793030]
[69.13098907 124.36542511]
[70.77665710 139.45370483]
[66.85689545 154.11657715]
[57.90183258 166.37101746]
[45.12255859 174.55970764]
[30.24736786 177.57519531]
[15.28800774 175.00964355]
[2.26760960 167.21005249]
[-7.05292559 155.23123169]
[-11.41307163 140.69323730]
[-10.22315407 125.56218719]
[-3.64409995 111.88445282]
[7.43432760 101.50982666]
[21.51386261 95.84139252]
[36.69036102 95.64575958]
[50.91133118 100.94938660]
[62.25350189 111.03500366]
[75.58392334 104.15750885]
[79.25102997 86.47557831]
[93.94825745 75.98320770]
[94.85977173 61.01092911]
[95.77128601 46.03865051]
[96.68280029 31.06637192]
[88.18367767 43.42618179]
[77.18936157 53.63035202]
[64.23114014 61.18578339]
[49.93519974 65.72737122]
[34.99236298 67.03565216]
[20.12471581 65.04740906]
[6.05071688 59.85871887]
[-6.54953432 51.72031021]
[-17.06715012 41.02546310]
[-24.99388695 28.29099083]
[-29.94669724 14.13225842]
[-31.68624496 -0.76653248]
[-30.12846756 -15.68542385]
[-25.34864426 -29.90348625]
[-17.57775307 -42.73365402]
[-7.19130516 -53.55593491]
[5.30878830 -61.84735489]
[19.31848335 -67.20724487]
[34.16078186 -69.37660217]
[49.11846161 -68.25059509]
[63.46871185 -63.88363647]
[76.51808167 -56.48675156]
[87.63597870 -46.41737747]
[96.28516388 -34.16210556]
[102.04766083 -20.31314850]
[104.64501953 -5.53973579]
[103.95207214 9.44199562]
[112.26982117 -3.04059553]
[120.58757019 -15.52318668]
[128.90531921 -28.00577736]
[137.22306824 -40.48836899]
[123.68814087 -34.02262115]
[108.95423126 -31.20981407]
[93.98928833 -32.23473358]
[79.77644348 -37.03004837]
[67.24942017 -45.28072739]
[57.23118973 -56.44473648]
[50.37990952 -69.78865051]
[47.14567566 -84.43582153]
[47.74096680 -99.42400360]
[52.12667084 -113.76853943]
[60.01466751 -126.52704620]
[70.88674927 -136.86134338]
[84.02867126 -144.09252930]
[98.57705688 -147.74552917]
[113.57614899 -147.58035278]
[128.04057312 -143.60786438]
[141.02006531 -136.08905029]
[151.66192627 -125.51782990]
[159.26705933 -112.58871460]
[163.33581543 -98.15108490]
[163.60090637 -83.15342712]
[160.04490662 -68.58102417]
[152.90270996 -55.39298248]
[160.80084229 -69.10173798]
[175.69483948 -68.96590424]
[188.58268738 -76.64074707]
[201.47055054 -84.31558228]
[214.35839844 -91.99042511]
[219.67880249 -107.12557983]
[234.87593079 -112.26625824]
[248.29187012 -103.46897125]
[249.63504028 -87.48224640]
[237.87509155 -76.56972504]
[222.03324890 -79.10256195]
[209.14538574 -71.42772675]
[196.25752258 -63.75288773]
[183.36967468 -56.07804871]
[176.39335632 -42.91825104]
[160.57754517 -42.50512314]
[149.70565796 -32.17061996]
[141.38790894 -19.68803024]
[133.07015991 -7.20543861]
[124.75241089 5.27715206]
[116.43466187 17.75974274]
[111.65507507 31.97788429]
[110.74356079 46.95016479]
[109.83204651 61.92244339]
[108.92053986 76.89472198]
[121.71027374 88.07968903]
[124.28312683 104.87437439]
[115.42829895 119.37517548]
[120.78015900 133.38793945]
[126.13201904 147.40071106]
[131.48388672 161.41346741]
[134.21005249 146.66328430]
[141.28596497 133.43711853]
[152.04353333 122.98365784]
[165.46713257 116.28985596]
[180.28939819 113.98767090]
[195.11096191 116.29447174]
[208.53248596 122.99245453]
[219.28678894 133.44924927]
[226.35858154 146.67762756]
[229.08016968 161.42866516]
[227.19461060 176.30967712]
[220.87992859 189.91574097]
[210.73229980 200.96226501]
[197.70979309 208.40632629]
[183.04187012 211.54513550]
[168.11337280 210.08233643]
[154.33370972 204.15603638]
[143.00386047 194.32575989]
[135.19218445 181.51644897]
[135.19218445 196.51644897]
[135.19218445 211.51644897]
[135.19218445 226.51644897]
[135.19218445 241.51644897]
[135.19218445 256.51644897]
[135.19218445 271.51644897]
[135.19218445 286.51644897]
[135.19218445 301.51644897]
[135.19218445 316.51644897]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[11 126]
[12 125]
[13 124]
[14 123]
[18 36]
[19 35]
[38 120]
[39 119]
[40 118]
[41 117]
[68 116]
[69 115]
[70 114]
[71 113]
[72 112]
[95 111]
[97 109]
[98 108]
[99 107]
[100 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
