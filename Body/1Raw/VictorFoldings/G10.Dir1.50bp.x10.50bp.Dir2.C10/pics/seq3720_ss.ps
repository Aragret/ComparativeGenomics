%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCUAGCCUAGCCGUUUACUCAAUCCUCUGAUCAGGGUGAGCAUCAAACUCAAACUACGCCCUxxxxxxxxxxAUUACCUCAGAAGUUUUUUUCUUCGCAGGAUUUUUCUGAGCCUUUUACCACUCCAGCCUAGCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[168.05711365 348.91818237]
[167.45697021 333.93017578]
[166.85682678 318.94219971]
[166.25668335 303.95419312]
[165.65653992 288.96621704]
[165.05639648 273.97821045]
[164.45625305 258.99023438]
[163.85610962 244.00224304]
[160.14320374 229.46902466]
[153.48085022 216.02980042]
[146.81849670 202.59056091]
[140.15614319 189.15133667]
[133.49377441 175.71209717]
[127.67262268 171.09019470]
[126.83559418 161.93664551]
[120.44347382 148.36679077]
[113.24875641 135.20487976]
[105.27735138 122.49832153]
[97.30595398 109.79175568]
[90.65787506 105.14804840]
[89.30512238 96.75023651]
[81.58955383 83.88671875]
[74.45092010 78.09638977]
[73.85127258 70.68772125]
[59.43823624 75.05467224]
[44.42201233 76.10414124]
[29.55592918 73.78670502]
[15.58506489 68.22177124]
[3.20890260 59.69142151]
[-6.95368624 48.62612152]
[-14.39539146 35.58300018]
[-18.74578667 21.21779251]
[-19.78976440 6.25188637]
[-17.47817612 -8.56391811]
[-11.93013000 -22.48706627]
[-3.42686367 -34.82046890]
[7.60251617 -44.94739532]
[0.14588095 -57.96271515]
[-7.31075430 -70.97803497]
[-14.76738930 -83.99336243]
[-22.22402382 -97.00868225]
[-26.17023659 -99.10835266]
[-28.93349648 -102.07431793]
[-30.38577843 -105.41650391]
[-30.57553482 -108.65467834]
[-29.70847893 -111.37643433]
[-36.10059738 -124.94628143]
[-45.65270615 -136.51162720]
[-57.77029419 -145.35267639]
[-69.88787842 -154.19371033]
[-82.00547028 -163.03475952]
[-97.14165497 -159.10665894]
[-111.23928070 -165.87356567]
[-117.64188385 -180.14033508]
[-113.32635498 -195.17063904]
[-100.33034515 -203.86763000]
[-84.79017639 -202.12486267]
[-74.04344177 -190.76521301]
[-73.16442871 -175.15234375]
[-61.04683685 -166.31130981]
[-48.92924881 -157.47026062]
[-36.81166077 -148.62921143]
[-42.71979523 -162.41667175]
[-45.35149765 -177.18400574]
[-44.56996918 -192.16363525]
[-40.41584015 -206.57693481]
[-33.10503006 -219.67472839]
[-23.01754951 -230.77619934]
[-10.67772865 -239.30432129]
[3.27302504 -244.81579590]
[18.10957146 -247.02416992]
[33.06072617 -245.81465149]
[47.34934998 -241.25009155]
[60.23274231 -233.56774902]
[71.04123688 -223.16696167]
[79.21302795 -210.58833313]
[84.32336426 -196.48570251]
[86.10659790 -181.59207153]
[84.47005463 -166.68161011]
[79.49880219 -152.52935791]
[71.45122528 -139.87089539]
[60.74563599 -129.36421204]
[47.93849182 -121.55542755]
[33.69549561 -116.85043335]
[18.75696945 -115.49378967]
[3.89940405 -117.55600739]
[-10.10492802 -122.92989349]
[-22.53075027 -131.33840942]
[-16.13862991 -117.76855469]
[-9.20870304 -104.46531677]
[-1.75206792 -91.44999695]
[5.70456743 -78.43467712]
[13.16120243 -65.41934967]
[20.61783791 -52.40402985]
[34.93232346 -56.79690933]
[49.87265015 -57.89462662]
[64.68975830 -55.63891983]
[78.64004517 -50.13974380]
[91.02268982 -41.66989517]
[101.21485901 -30.65151405]
[108.70303345 -17.63501167]
[113.10886383 -3.27159429]
[114.20832062 11.71931839]
[111.94304657 26.58613014]
[106.42348480 40.58274460]
[97.92344666 53.00602341]
[86.86659241 63.23108673]
[94.45307159 76.17115784]
[102.16864014 89.03467560]
[110.01251221 101.82035065]
[117.98391724 114.52691650]
[125.95532227 127.23347473]
[130.70458984 113.00518036]
[144.04006958 106.13749695]
[158.38117981 110.53437042]
[165.57571411 123.69638824]
[161.53392029 138.14158630]
[148.55335999 145.65858459]
[134.01332092 141.97467041]
[140.40544128 155.54452515]
[146.93301392 169.04974365]
[153.59536743 182.48896790]
[160.25772095 195.92820740]
[166.92008972 209.36744690]
[173.58244324 222.80667114]
[174.70156860 207.84848022]
[179.74554443 193.72196960]
[188.35351562 181.43771362]
[199.90969849 171.87452698]
[213.58737183 165.71650696]
[228.40808105 163.40422058]
[243.31156921 165.10307312]
[257.23165894 170.69151306]
[269.17257690 179.76977539]
[278.28002930 191.68841553]
[283.90255737 205.59480286]
[285.63787842 220.49407959]
[283.36187744 235.32040405]
[277.23736572 249.01312256]
[267.70248413 260.59268188]
[255.43934631 269.23071289]
[241.32522583 274.30923462]
[226.36981201 275.46496582]
[211.64300537 272.61526489]
[198.19830322 265.96392822]
[186.99754333 255.98680115]
[178.84410095 243.40209961]
[179.44424438 258.39010620]
[180.04438782 273.37808228]
[180.64453125 288.36605835]
[181.24467468 303.35406494]
[181.84481812 318.34204102]
[182.44496155 333.33004761]
[183.04510498 348.31802368]
[189.72032166 363.90255737]
[176.59271240 374.63113403]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 125]
[10 124]
[11 123]
[12 122]
[13 121]
[15 120]
[16 119]
[17 112]
[18 111]
[19 110]
[21 109]
[22 108]
[24 107]
[37 94]
[38 93]
[39 92]
[40 91]
[41 90]
[46 89]
[47 88]
[48 62]
[49 61]
[50 60]
[51 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
