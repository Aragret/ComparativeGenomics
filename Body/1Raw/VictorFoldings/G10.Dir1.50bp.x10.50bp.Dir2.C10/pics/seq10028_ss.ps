%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUUCUUCGAAACCACACUUAUCCCCACCUUGGCUAUCAUCACCCGAUGAGGCAACCAGCCxxxxxxxxxxAUCGGCAUCAACCAACCACACCUAGCAUUCCUGCACAUCUGUACCCACGCCUUCUUCAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[86.04269409 135.99540710]
[90.93468475 121.81555176]
[79.84336853 131.91419983]
[74.84832001 146.92619324]
[60.22842026 149.77362061]
[49.13710403 159.87228394]
[38.04578781 169.97093201]
[26.95447350 180.06958008]
[16.74099350 191.05523682]
[7.47604418 202.85188293]
[5.03712749 218.48397827]
[-8.90898418 223.71418762]
[-18.17393303 235.51083374]
[-27.43888283 247.30747986]
[-32.46703339 263.49865723]
[-49.41737747 263.14916992]
[-53.77387238 246.76449585]
[-39.23552322 238.04252625]
[-29.97057343 226.24588013]
[-20.70562363 214.44924927]
[-18.92939949 199.66093445]
[-4.32059574 193.58692932]
[4.94435358 181.79029846]
[-9.88570690 184.04180908]
[-23.27990150 177.28936768]
[-30.28934479 164.02784729]
[-28.32418442 149.15713501]
[-18.11050987 138.17164612]
[-3.42206979 135.13031006]
[10.31404972 141.15684509]
[18.02262688 154.02455139]
[16.85582352 168.97825623]
[27.94713974 158.87960815]
[39.03845596 148.78096008]
[50.12976837 138.68231201]
[54.33149719 124.39263916]
[69.74472046 120.82289124]
[80.83603668 110.72423553]
[79.58915710 95.77615356]
[66.97803497 87.65460968]
[54.36690521 79.53306580]
[38.57526779 78.56623077]
[32.06417084 65.17015076]
[19.45304298 57.04860687]
[12.77472305 56.33618164]
[8.18533230 52.84780121]
[6.49602890 48.31770325]
[-5.76633930 39.67858887]
[-18.02870750 31.03947258]
[-30.29107475 22.40035629]
[-46.66344452 21.46356773]
[-53.79566574 6.69659615]
[-44.35072327 -6.70956278]
[-28.04476357 -4.96380234]
[-21.65196037 10.13798809]
[-9.38959122 18.77710533]
[2.87277675 27.41622162]
[15.13514519 36.05533600]
[27.57458496 44.43748093]
[40.18571472 52.55902100]
[55.07531738 52.94495392]
[62.48844528 66.92193604]
[75.09957123 75.04347992]
[87.71070099 83.16502380]
[94.40384674 79.78096771]
[95.23532104 64.80403137]
[107.79013062 73.01284790]
[114.48327637 69.62879181]
[115.41889954 54.65800095]
[116.35453033 39.68721008]
[102.83618927 32.67476273]
[93.34387207 20.76612282]
[89.52217102 6.02453279]
[92.03321838 -8.99593735]
[100.44196320 -21.69289970]
[113.29154205 -29.86652946]
[128.35568237 -32.10069656]
[143.02444458 -28.00831413]
[154.75634766 -18.29841805]
[161.51879883 -4.65330172]
[162.14015198 10.56293297]
[156.51274109 24.71398354]
[145.61157227 35.34809494]
[131.32531738 40.62284088]
[130.38969421 55.59363174]
[129.45407104 70.56442261]
[134.99972534 75.61374664]
[142.99819946 62.92420578]
[150.99665833 50.23466492]
[158.99513245 37.54512405]
[166.99360657 24.85558128]
[169.06648254 9.99949837]
[178.51390076 -1.65152061]
[192.62103271 -6.74941826]
[207.33404541 -3.82925415]
[218.42497253 6.26982880]
[222.70669556 20.64574051]
[218.94882202 35.16739273]
[208.23121643 45.66181946]
[193.63589478 49.11340714]
[181.74967957 58.26315308]
[169.86346436 67.41290283]
[157.97724915 76.56265259]
[146.09103394 85.71239471]
[151.63668823 90.76171875]
[166.45445251 88.43061829]
[181.27221680 86.09951019]
[193.68045044 75.37721252]
[209.07939148 81.01676178]
[211.62792969 97.21666718]
[198.70434570 107.31185913]
[183.60331726 100.91727448]
[168.78555298 103.24837494]
[153.96780396 105.57948303]
[168.08920288 110.63775635]
[182.77308655 113.70100403]
[196.85273743 118.87432098]
[210.02671814 126.04694366]
[222.01293945 135.06527710]
[232.55476379 145.73626709]
[241.42649841 157.83140564]
[248.43817139 171.09173584]
[253.43968201 185.23333740]
[256.32391357 199.95343018]
[257.02914429 214.93684387]
[255.54022217 229.86276245]
[251.88908386 244.41162109]
[246.15386963 258.27191162]
[238.45739746 271.14685059]
[228.96443176 282.76080322]
[217.87825012 292.86508179]
[205.43620300 301.24334717]
[191.90467834 307.71621704]
[177.57342529 312.14511108]
[162.74926758 314.43518066]
[147.74961853 314.53741455]
[132.89562988 312.44961548]
[118.50533295 308.21649170]
[104.88684845 301.92864990]
[92.33174896 293.72076416]
[81.10886383 283.76855469]
[71.45847321 272.28506470]
[63.58721161 259.51623535]
[57.66360855 245.73541260]
[53.81448746 231.23768616]
[52.12226868 216.33345032]
[52.62318039 201.34181213]
[55.30649948 186.58377075]
[60.11477280 172.37530518]
[66.94505310 159.02062988]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 38]
[3 37]
[5 35]
[6 34]
[7 33]
[8 32]
[9 23]
[10 22]
[12 20]
[13 19]
[14 18]
[39 64]
[40 63]
[41 62]
[43 60]
[44 59]
[47 58]
[48 57]
[49 56]
[50 55]
[68 86]
[69 85]
[70 84]
[105 114]
[106 113]
[107 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
