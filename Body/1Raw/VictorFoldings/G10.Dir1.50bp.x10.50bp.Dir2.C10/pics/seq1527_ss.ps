%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCUCUAGAGGAGCCUGUUCUGUAAUCGAUAAACCCCGAUCAACCUCACCACCUCUUGCUxxxxxxxxxxAAAAAUCUUUGAAAUAGGGCCCGUAUUUACCCUAUAGCACCCCCUCUACCCCCUCUAGAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[99.45339966 257.30755615]
[99.45339966 242.30755615]
[99.45339966 227.30755615]
[99.45339966 212.30755615]
[99.45339966 197.30755615]
[99.45339966 182.30755615]
[99.45339966 167.30755615]
[99.45339966 152.30755615]
[99.45339966 137.30755615]
[99.45339966 122.30755615]
[96.04475403 136.91513062]
[83.72068787 145.46600342]
[68.84416199 143.54536438]
[59.09594727 132.14482117]
[59.50907516 117.15050507]
[69.87024689 106.30402374]
[84.83192444 105.20602417]
[70.01416779 102.87492371]
[55.19640732 100.54381561]
[40.37865067 98.21271515]
[25.56089211 95.88161469]
[19.07377815 109.51235962]
[9.01875877 120.75152588]
[-3.78291464 128.69395447]
[-18.28925514 132.70324707]
[-33.32235336 132.46270752]
[-47.66403198 128.00036621]
[-60.15454102 119.68605042]
[-69.78635406 108.20067596]
[-75.78543854 94.48052979]
[-77.67344666 79.64096832]
[-92.49120331 77.30986023]
[-98.88762665 79.35760498]
[-104.49541473 78.02192688]
[-107.87163544 74.56120300]
[-122.57959747 71.61571503]
[-137.28756714 68.67023468]
[-151.99552917 65.72475433]
[-163.31204224 76.34153748]
[-178.71183777 78.24561310]
[-192.27340698 70.70481873]
[-198.78202820 56.61874771]
[-195.73501587 41.40377808]
[-184.30400085 30.91037750]
[-168.88442993 29.17347336]
[-155.40547180 36.86093903]
[-149.05003357 51.01679230]
[-134.34207153 53.96227264]
[-119.63411713 56.90775681]
[-104.92615509 59.85323715]
[-90.16010284 62.49210358]
[-75.34233856 64.82320404]
[-68.98922729 51.28011703]
[-59.06731415 40.06464005]
[-46.37429810 32.09136581]
[-31.93430519 28.01370430]
[-16.91526413 28.17035103]
[-2.53444624 32.55715561]
[10.04019737 40.82677460]
[19.78489113 52.31616211]
[25.90337944 66.09971619]
[27.89199638 81.06385040]
[42.70975494 83.39495850]
[57.52751160 85.72605896]
[72.34526825 88.05716705]
[87.16302490 90.38826752]
[101.28783417 85.33951569]
[111.27056122 74.14374542]
[121.25328064 62.94797897]
[131.23600769 51.75221634]
[116.89603424 56.15279770]
[101.91564941 56.91960907]
[87.20129395 54.00624466]
[73.64331055 47.58899307]
[62.06208038 38.05614853]
[53.15836334 25.98453712]
[47.47091293 12.10459042]
[45.34387207 -2.74383378]
[46.90594101 -17.66227722]
[52.06260681 -31.74804306]
[60.50183868 -44.14882278]
[71.71298981 -54.11426544]
[85.01770020 -61.04136658]
[99.61090851 -64.51098633]
[114.60960388 -64.31317902]
[129.10623169 -60.45990753]
[142.22363281 -53.18433762]
[153.16807556 -42.92669678]
[161.27732849 -30.30766869]
[166.06072998 -16.09080696]
[167.22882080 -1.13635755]
[164.71093750 13.65080643]
[158.65940857 27.37593460]
[149.44183350 39.20713806]
[163.45855713 33.86562347]
[177.47526550 28.52411270]
[191.49197388 23.18260002]
[205.50868225 17.84108734]
[219.52540588 12.49957466]
[221.88562012 -2.67688441]
[231.53036499 -14.62990189]
[245.86521912 -20.14417648]
[261.03421021 -17.73639488]
[272.95693970 -8.05423927]
[278.42623901 6.29783964]
[275.97094727 21.45920372]
[266.25146484 33.35152435]
[251.88230896 38.77582550]
[236.72871399 36.27299881]
[224.86691284 26.51628876]
[210.85020447 31.85780144]
[196.83348083 37.19931412]
[182.81677246 42.54082489]
[168.80006409 47.88233948]
[154.78335571 53.22385025]
[142.43177795 61.73493958]
[132.44905090 72.93070984]
[122.46632385 84.12647247]
[112.48359680 95.32223511]
[126.61180115 90.28300476]
[140.74000549 85.24376678]
[153.05555725 76.68063354]
[167.24885559 71.82776642]
[182.22909546 71.05812836]
[196.84500122 74.43087006]
[209.97328186 81.68677521]
[220.60498047 92.26821136]
[227.92303467 105.36196136]
[231.36500549 119.96170807]
[230.66638184 134.94543457]
[225.88084412 149.16157532]
[217.37617493 161.51756287]
[205.80599976 171.06382751]
[192.05950928 177.06666565]
[177.19319153 179.06477356]
[162.34954834 176.90457153]
[148.66938782 170.75209045]
[137.20407104 161.08013916]
[128.83616638 148.63504028]
[121.64478302 135.47129822]
[114.45339966 122.30755615]
[114.45339966 137.30755615]
[114.45339966 152.30755615]
[114.45339966 167.30755615]
[114.45339966 182.30755615]
[114.45339966 197.30755615]
[114.45339966 212.30755615]
[114.45339966 227.30755615]
[114.45339966 242.30755615]
[114.45339966 257.30755615]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[17 66]
[18 65]
[19 64]
[20 63]
[21 62]
[31 52]
[32 51]
[35 50]
[36 49]
[37 48]
[38 47]
[67 119]
[68 118]
[69 117]
[70 116]
[94 115]
[95 114]
[96 113]
[97 112]
[98 111]
[99 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
