%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCAUCGCUAUCCCCACCGGCGUCAAAGUAUUUAGCUGACUCGCCACACUCCACGGAAGCAAxxxxxxxxxxCGAAACCGCAAACAUAUCAUACACAAACGCCUGAGCCCUAUCUAUUACUCUCAUCGCUACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[164.94706726 457.62673950]
[164.94706726 442.62673950]
[164.94706726 427.62673950]
[164.94706726 412.62673950]
[164.94706726 397.62673950]
[164.94706726 382.62673950]
[164.94706726 367.62673950]
[164.94706726 352.62673950]
[164.94706726 337.62673950]
[164.94706726 322.62673950]
[160.84213257 308.19937134]
[152.94564819 295.44610596]
[145.04916382 282.69284058]
[144.58009338 297.68551636]
[138.50559998 311.40048218]
[127.71804810 321.82299805]
[113.80216217 327.42193604]
[98.80223846 327.37478638]
[84.92181396 321.68850708]
[74.19998169 311.19839478]
[68.21180725 297.44552612]
[67.83698273 282.45019531]
[73.13056183 268.41531372]
[83.31491089 257.40264893]
[96.89390564 251.02996826]
[111.87274170 250.23347473]
[126.05097961 255.13017273]
[137.34535217 265.00015259]
[133.38874817 250.53137207]
[129.43212891 236.06260681]
[125.47552490 221.59384155]
[121.51891327 207.12507629]
[107.07763672 203.47607422]
[96.33030701 193.01898193]
[92.23310852 178.49041748]
[95.98278046 163.76502991]
[106.66933441 152.82223511]
[102.71272278 138.35346985]
[98.75611115 123.88470459]
[94.79949951 109.41593170]
[86.90301514 96.66267395]
[75.71472168 86.67157745]
[67.17311096 83.26031494]
[64.40197754 76.35865021]
[53.42117691 66.13994598]
[42.44037247 55.92123795]
[29.50604057 55.59452438]
[20.56593704 46.80555725]
[20.05374527 34.68120956]
[11.65938663 30.92214584]
[9.17393589 23.91252899]
[-1.37807894 13.25162125]
[-16.21326828 17.22814369]
[-31.04502106 13.23881817]
[-41.88366699 2.35675550]
[-45.81366730 -12.49082565]
[-41.77787399 -27.30999947]
[-30.86189079 -38.11448288]
[-16.00206375 -41.99792480]
[-1.19561231 -37.91569901]
[9.57460213 -26.96590233]
[13.41144753 -12.09397697]
[9.28283024 2.69960594]
[19.83484459 13.36051464]
[30.49575424 23.91252899]
[47.70034790 27.23615265]
[52.65908051 44.94043350]
[63.63988113 55.15914154]
[74.62068176 65.37784576]
[85.70581818 75.48328400]
[96.89411163 85.47438049]
[92.60218811 71.10150909]
[91.33383942 56.15523148]
[93.14246368 41.26466751]
[97.95191193 27.05660057]
[105.55976105 14.12908649]
[115.64577484 3.02627492]
[127.78540039 -5.78448677]
[141.46765137 -11.93233204]
[156.11660767 -15.15848255]
[171.11566162 -15.32714081]
[185.83345032 -12.43120861]
[199.65048218 -6.59258175]
[211.98516846 1.94297600]
[222.31828308 12.81618214]
[230.21490479 25.56935501]
[235.34263611 39.66567993]
[237.48562622 54.51181030]
[236.55369568 69.48283386]
[232.58604431 83.94857788]
[225.74969482 97.30014801]
[216.33241272 108.97554016]
[204.73059082 118.48329926]
[191.43257141 125.42324066]
[176.99810791 129.50321960]
[162.03477478 130.55151367]
[147.17243958 128.52400208]
[133.03666687 123.50601196]
[120.22249603 115.70877838]
[109.26826477 105.45932770]
[113.22487640 119.92809296]
[117.18148804 134.39686584]
[121.13809967 148.86563110]
[135.90599060 152.84768677]
[146.62710571 163.61590576]
[150.49311829 178.20768738]
[146.56256104 192.67858887]
[135.98768616 203.16845703]
[139.94429016 217.63722229]
[143.90090942 232.10600281]
[147.85751343 246.57476807]
[151.81411743 261.04351807]
[157.80241394 274.79635620]
[165.69889832 287.54962158]
[173.59538269 300.30288696]
[173.50604248 285.30313110]
[176.58398438 270.62231445]
[182.69056702 256.92160034]
[191.55079651 244.81803894]
[202.76562500 234.85673523]
[215.82995605 227.48629761]
[230.15541077 223.03869629]
[245.09681702 221.71421814]
[259.98126221 223.57254028]
[274.13839722 228.52993774]
[286.93060303 236.36317444]
[297.78176880 246.71943665]
[306.20318604 259.13232422]
[311.81555176 273.04278564]
[314.36614990 287.82434082]
[313.74011230 302.81127930]
[309.96557617 317.32861328]
[303.21255493 330.72253418]
[293.78521729 342.38980103]
[282.10812378 351.80496216]
[268.70718384 358.54400635]
[254.18592834 362.30340576]
[239.19834900 362.91384888]
[224.41946411 360.34783936]
[210.51484680 354.72094727]
[198.11074829 346.28659058]
[187.76579285 335.42465210]
[179.94706726 322.62673950]
[179.94706726 337.62673950]
[179.94706726 352.62673950]
[179.94706726 367.62673950]
[179.94706726 382.62673950]
[179.94706726 397.62673950]
[179.94706726 412.62673950]
[179.94706726 427.62673950]
[179.94706726 442.62673950]
[179.94706726 457.62673950]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 115]
[12 114]
[13 113]
[28 112]
[29 111]
[30 110]
[31 109]
[32 108]
[37 103]
[38 102]
[39 101]
[40 100]
[41 71]
[42 70]
[44 69]
[45 68]
[46 67]
[49 65]
[51 64]
[52 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
