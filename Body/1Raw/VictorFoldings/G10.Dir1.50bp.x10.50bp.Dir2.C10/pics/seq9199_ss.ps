%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAUCUGCUUCAUCCGCCAACUAAUAUUUCACUUUACAUCCAAACAUCACUUUGGCUUCGAxxxxxxxxxxUAUGGCUGAAUCAUCCGCUACCUUCACGCCAAUGGCGCCUCAAUAUUCUUUAUCUGCCUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[142.28059387 444.04507446]
[142.28059387 429.04507446]
[142.28059387 414.04507446]
[142.28059387 399.04507446]
[142.28059387 384.04507446]
[142.28059387 369.04507446]
[142.28059387 354.04507446]
[142.28059387 339.04507446]
[142.28059387 324.04507446]
[142.28059387 309.04507446]
[139.94949341 294.22729492]
[135.34393311 279.95184326]
[130.73835754 265.67639160]
[125.65859985 260.24114990]
[126.18882751 251.05580139]
[121.88124084 236.68762207]
[119.40813446 235.24156189]
[117.37854767 232.69700623]
[116.22589111 229.22521973]
[116.31074524 225.15534973]
[117.86673737 220.94342041]
[105.28503418 213.05442810]
[101.93382263 198.21447754]
[110.29383087 185.07112122]
[107.19551086 170.39459229]
[104.09719086 155.71806335]
[100.99886322 141.04153442]
[97.90054321 126.36501312]
[82.39495087 126.64493561]
[66.84930420 117.36405945]
[57.10007858 99.05957794]
[42.10089111 98.90354156]
[27.10170174 98.74750519]
[18.71259308 111.69457245]
[4.64611816 118.03001404]
[-10.60916519 115.73220825]
[-22.18535042 105.53439331]
[-26.38851929 90.69064331]
[-21.87745476 75.93754578]
[-10.09162140 65.98276520]
[5.20816278 64.00283051]
[19.13979340 70.62953186]
[27.25773811 83.74832153]
[42.25692749 83.90435791]
[57.25611496 84.06039429]
[60.14425278 77.13878632]
[51.04356384 65.21496582]
[65.92052460 63.29556656]
[68.80866241 56.37395859]
[58.14703369 45.82266617]
[47.48540878 35.27137756]
[36.82378006 24.72008705]
[26.16215515 14.16879654]
[10.36137104 14.50161839]
[-0.98883224 3.50396252]
[-1.15458012 -12.29945755]
[9.96246243 -23.53275108]
[25.76675224 -23.53140640]
[36.88188171 -12.29622078]
[36.71344376 3.50717068]
[47.37507248 14.05846119]
[58.03669739 24.60975075]
[68.69832611 35.16104126]
[79.35994720 45.71232986]
[75.06204987 31.34124756]
[70.76415253 16.97016335]
[66.46625519 2.59907889]
[57.75091553 -9.60923386]
[54.09539413 -24.15698814]
[56.00455093 -39.03499603]
[63.21471405 -52.18845749]
[74.73008728 -61.80075073]
[88.96028900 -66.54431915]
[103.93997955 -65.76403046]
[117.60031891 -59.56765747]
[128.05468750 -48.81097031]
[133.85922241 -34.97957993]
[134.21224976 -19.98373604]
[129.06504822 -5.89451122]
[119.13034058 5.34077549]
[113.36340332 19.18788338]
[107.59645844 33.03499222]
[101.82952118 46.88209915]
[113.52914429 37.49493790]
[125.22876740 28.10777473]
[136.92839050 18.72061348]
[148.52973938 9.21225548]
[160.03153992 -0.41627094]
[171.53334045 -10.04479694]
[183.03514099 -19.67332268]
[179.23603821 -34.45606613]
[182.23556519 -49.42154694]
[191.43818665 -61.59835434]
[205.01669312 -68.56877136]
[220.27508545 -68.94882202]
[234.18377686 -62.66304779]
[243.98120117 -50.95948792]
[247.72206116 -36.16189957]
[244.66362000 -21.20834732]
[235.41311646 -9.06787586]
[221.80726624 -2.15098214]
[206.54750061 -1.83102059]
[192.66366577 -8.17152023]
[181.16186523 1.45700622]
[169.66006470 11.08553219]
[158.15826416 20.71405792]
[155.02795410 27.46290016]
[146.31555176 30.42023659]
[134.61593628 39.80739975]
[122.91630554 49.19456100]
[111.21668243 58.58172226]
[134.44810486 96.00177002]
[112.57707214 123.26669312]
[115.67539215 137.94322205]
[118.77371216 152.61973572]
[121.87203217 167.29626465]
[124.97035980 181.97279358]
[137.92956543 190.61550903]
[140.86264038 205.54373169]
[132.54325867 217.84509277]
[136.24942017 232.38003540]
[140.55700684 246.74821472]
[145.01382446 261.07083130]
[149.61938477 275.34628296]
[154.22496033 289.62173462]
[158.14151001 275.14208984]
[166.94252014 262.99539185]
[179.48187256 254.76345825]
[194.12663269 251.51831055]
[208.96968079 253.68254089]
[222.07807922 260.97430420]
[231.74479675 272.44403076]
[236.71095276 286.59808350]
[236.32984924 301.59326172]
[230.65112305 315.47677612]
[220.41427612 326.44067383]
[206.95240784 333.05715942]
[192.01858521 334.46459961]
[177.55757141 330.47973633]
[165.45254517 321.62149048]
[157.28059387 309.04507446]
[157.28059387 324.04507446]
[157.28059387 339.04507446]
[157.28059387 354.04507446]
[157.28059387 369.04507446]
[157.28059387 384.04507446]
[157.28059387 399.04507446]
[157.28059387 414.04507446]
[157.28059387 429.04507446]
[157.28059387 444.04507446]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 125]
[12 124]
[13 123]
[15 122]
[16 121]
[21 120]
[24 117]
[25 116]
[26 115]
[27 114]
[28 113]
[31 45]
[32 44]
[33 43]
[49 64]
[50 63]
[51 62]
[52 61]
[53 60]
[83 111]
[84 110]
[85 109]
[86 108]
[87 106]
[88 105]
[89 104]
[90 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
