%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAAUCUUACCCCGCCUGUUUACCAAAAACAUCACCUCUAGCAUCACCAGUAUUAGAGGCAxxxxxxxxxxAUCCAUCAUAGCAGGCAGUUGAGGUGGAUUAAACCAAACCCAGCUACGCAAAAUCUUAGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[51.63709259 176.44566345]
[45.04798508 171.96987915]
[38.87175751 166.92695618]
[30.61946869 179.45292664]
[29.48841095 195.23364258]
[16.02532578 201.60504150]
[7.77303743 214.13099670]
[-0.47925165 226.65696716]
[-8.73154068 239.18292236]
[-9.86259937 254.96365356]
[-23.32568359 261.33505249]
[-31.57797241 273.86099243]
[-35.24283218 290.41409302]
[-52.16356277 291.47482300]
[-57.86695480 275.50900269]
[-44.10393524 265.60870361]
[-35.85164642 253.08274841]
[-35.31084442 238.19796753]
[-21.25750351 230.93063354]
[-13.00521374 218.40467834]
[-4.75292444 205.87870789]
[3.49936485 193.35275269]
[4.04016447 178.46797180]
[18.09350777 171.20063782]
[26.34579659 158.67466736]
[17.96365356 146.23522949]
[3.25569201 149.18070984]
[-11.45226955 152.12619019]
[-26.16023064 155.07168579]
[-40.86819458 158.01716614]
[-50.92466736 170.51704407]
[-66.96630096 170.30403137]
[-76.68733978 157.54154968]
[-72.63062286 142.01986694]
[-57.90811920 135.64588928]
[-43.81367493 143.30920410]
[-29.10571289 140.36372375]
[-14.39775181 137.41822815]
[0.31020942 134.47274780]
[15.01817131 131.52726746]
[10.42663956 108.79726410]
[11.76649570 85.81062317]
[18.86629295 64.07878113]
[31.17859840 45.00943756]
[20.29977417 34.68223190]
[9.42094898 24.35502815]
[-1.45787656 14.02782345]
[-12.33670139 3.70061851]
[-23.21552658 -6.62658644]
[-37.27002335 -0.76220387]
[-52.49455261 -1.12779355]
[-66.25136566 -7.66001511]
[-76.15702057 -19.22712135]
[-80.49529266 -33.82503891]
[-78.51455688 -48.92459488]
[-70.55799103 -61.90969849]
[-58.00410843 -70.53060150]
[-43.02795029 -73.29367828]
[-28.22422600 -69.72020721]
[-16.15777206 -60.42932510]
[-8.91917229 -47.03071976]
[-7.76255941 -31.84578896]
[-12.88832188 -17.50541115]
[-2.00949669 -7.17820644]
[8.86932850 3.14899826]
[19.74815369 13.47620296]
[30.62697983 23.80340767]
[41.50580597 34.13061142]
[47.94143677 28.93486786]
[54.83600235 24.36561394]
[62.12871933 20.46313286]
[69.75530243 17.26182556]
[77.64851379 14.78991699]
[85.73876953 13.06919765]
[93.95475006 12.11483574]
[102.22402191 11.93524647]
[110.47368622 12.53201199]
[118.63101959 13.89987087]
[126.62410736 16.02676582]
[134.38247681 18.89394569]
[141.83775330 22.47613525]
[148.92419434 26.74175453]
[155.57933044 31.65319824]
[161.74449158 37.16716766]
[167.36532593 43.23505402]
[172.39230347 49.80336761]
[176.78108215 56.81419754]
[180.49296570 64.20574188]
[183.49525452 71.91284180]
[198.06796265 68.35808563]
[212.64067078 64.80332184]
[227.21336365 61.24855804]
[238.78680420 50.46124268]
[252.98513794 54.96197510]
[267.55783081 51.40721130]
[272.67242432 47.05421829]
[278.36209106 46.12742233]
[282.81063843 48.02112961]
[297.51858521 45.07564545]
[312.22656250 42.13016510]
[320.04724121 31.82043648]
[332.40496826 29.69773293]
[342.54586792 36.36626434]
[357.31192017 33.72740173]
[372.07797241 31.08853722]
[379.70803833 17.43875885]
[394.34515381 11.93527699]
[409.07818604 17.17666817]
[416.95059204 30.68810844]
[414.24530029 46.08990860]
[402.23965454 56.10980606]
[386.60235596 56.01671600]
[374.71685791 45.85459137]
[359.95080566 48.49345779]
[345.18472290 51.13232040]
[332.43750000 63.15346146]
[315.17202759 56.83812332]
[300.46408081 59.78360748]
[285.75610352 62.72909164]
[271.11260986 65.97991943]
[256.53991699 69.53467560]
[246.00880432 80.06773376]
[230.76812744 75.82125854]
[216.19543457 79.37602234]
[201.62272644 82.93078613]
[187.05001831 86.48554993]
[187.99194336 94.18537903]
[188.25341797 101.94621277]
[187.83102417 109.70797729]
[186.72660828 117.41046906]
[184.94732666 124.99379730]
[182.50563049 132.39891052]
[179.41905212 139.56799316]
[175.71025085 146.44493103]
[171.40669250 152.97579956]
[166.54054260 159.10923767]
[161.14842224 164.79682922]
[155.27104187 169.99354553]
[148.95303345 174.65808105]
[142.24250793 178.75315857]
[135.19068909 182.24586487]
[127.85160828 185.10786438]
[120.28160858 187.31567383]
[112.53892517 188.85084534]
[104.68328857 189.70010376]
[96.77539062 189.85546875]
[88.87647247 189.31431580]
[81.04782867 188.07943726]
[73.35031891 186.15901184]
[65.84391785 183.56655884]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 25]
[4 24]
[6 22]
[7 21]
[8 20]
[9 19]
[11 17]
[12 16]
[26 40]
[27 39]
[28 38]
[29 37]
[30 36]
[44 68]
[45 67]
[46 66]
[47 65]
[48 64]
[49 63]
[89 126]
[90 125]
[91 124]
[92 123]
[94 121]
[95 120]
[98 119]
[99 118]
[100 117]
[103 115]
[104 114]
[105 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
