%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCCUAGAAGUCCCACUCCUAAACACAUCCGUAUUACUCGCAUCAGGAGUAUCAAUCACCxxxxxxxxxxACUCAAGCACUAUAGUUGUAGCAGGAAUCUUCUUACUCAUCCGCUUCCACCCCCUAGCAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[101.10504150 266.76617432]
[101.10504150 251.76615906]
[101.10504150 236.76615906]
[101.10504150 221.76615906]
[101.10504150 206.76615906]
[101.10504150 191.76615906]
[101.10504150 176.76615906]
[101.10504150 161.76615906]
[101.10504150 146.76615906]
[101.10504150 131.76615906]
[86.89443207 126.56472778]
[77.64315033 115.94069672]
[74.90743256 103.18675232]
[78.40792084 91.70565796]
[66.90612030 82.07713318]
[55.40431595 72.44860840]
[42.46870804 72.80059052]
[33.07946396 64.49029541]
[31.93445969 52.40740585]
[20.63545609 42.54167938]
[9.33645058 32.67595673]
[-3.60368109 32.75875854]
[-12.81800938 24.25492859]
[-13.71139526 12.15083122]
[-27.09767914 5.38271666]
[-41.80564117 2.43723416]
[-56.51360321 -0.50824839]
[-71.22156525 -3.45373082]
[-85.92952728 -6.39921331]
[-100.63748932 -9.34469604]
[-107.04159546 4.30267763]
[-116.52619171 16.02043724]
[-128.53985596 25.12732697]
[-142.38410950 31.09388733]
[-157.25408936 33.57322693]
[-172.28527832 32.42119980]
[-186.60374451 27.70478439]
[-199.37707520 19.69818687]
[-209.86262512 8.86690235]
[-217.45077515 -4.15935469]
[-221.70036316 -18.62325478]
[-222.36433411 -33.68388367]
[-219.40406799 -48.46564102]
[-212.99169922 -62.10913086]
[-203.50000000 -73.82113647]
[-191.48081970 -82.92073822]
[-177.63293457 -88.87890625]
[-162.76145935 -91.34922791]
[-147.73098755 -90.18808746]
[-133.41535950 -85.46299744]
[-120.64689636 -77.44865417]
[-110.16791534 -66.61101532]
[-102.58766174 -53.58016205]
[-98.34683990 -39.11368561]
[-97.69200134 -24.05265808]
[-82.98404694 -21.10717583]
[-68.27608490 -18.16169167]
[-53.56811905 -15.21621037]
[-38.86015701 -12.27072716]
[-24.15219688 -9.32524490]
[-35.15228653 -19.52318764]
[-43.65970612 -31.87728882]
[-49.26374435 -45.79112244]
[-51.69385529 -60.59296417]
[-50.83271408 -75.56822205]
[-46.72189331 -89.99393463]
[-39.55986023 -103.17366791]
[-29.69237137 -114.47113037]
[-17.59580612 -123.34091949]
[-3.85415506 -129.35481262]
[10.86917400 -132.22250366]
[25.86337662 -131.80551147]
[40.40457535 -128.12399292]
[53.79075623 -121.35566711]
[65.37567139 -111.82730103]
[74.60002899 -99.99890137]
[81.01850891 -86.44149780]
[84.32124329 -71.80961609]
[84.34877777 -56.80964279]
[81.09978485 -42.16573334]
[74.73112488 -28.58485794]
[65.55025482 -16.72266769]
[54.00039673 -7.15183401]
[40.63915634 -0.33441296]
[26.11157227 3.40046883]
[11.11900234 3.87250161]
[-3.61274529 1.05951595]
[13.68671131 3.83957744]
[19.20217323 21.37695312]
[30.50117874 31.24267578]
[41.80018234 41.10839844]
[59.15373230 43.52796555]
[65.03284454 60.94680405]
[76.53464508 70.57533264]
[88.03645325 80.20385742]
[113.78081512 76.25081635]
[131.77593994 100.77453613]
[146.77513123 100.61849976]
[162.36380005 90.87308502]
[177.31916809 100.00199127]
[192.31187439 99.53394318]
[207.30456543 99.06590271]
[215.84838867 95.65197754]
[222.61332703 98.74735260]
[237.61251831 98.59131622]
[252.61169434 98.43527985]
[258.62203979 84.44258118]
[269.80853271 74.10901642]
[284.23300171 69.22492981]
[299.39636230 70.63652802]
[312.67144775 78.09923553]
[321.75827026 90.32009888]
[325.08248901 105.18177032]
[322.06817627 120.10939026]
[313.23754883 132.51664734]
[300.12057495 140.25390625]
[284.98989868 141.98065186]
[270.46691895 137.39770508]
[259.06787109 127.29910278]
[252.76773071 113.43447113]
[237.76855469 113.59050751]
[222.76936340 113.74654388]
[207.77259827 114.05860138]
[192.77990723 114.52664185]
[177.78721619 114.99468231]
[169.24241638 123.61405945]
[156.71273804 124.08967590]
[146.93116760 115.61768341]
[131.93197632 115.77371979]
[145.16981506 122.82778168]
[160.16477966 123.21631622]
[173.01034546 130.96173096]
[180.35276794 144.04182434]
[180.27505493 159.04162598]
[172.79751587 172.04493713]
[159.87237549 179.65684509]
[144.87419128 179.88999939]
[131.71870422 172.68353271]
[123.84059143 159.91891479]
[123.29642487 144.92990112]
[116.10504150 131.76615906]
[116.10504150 146.76615906]
[116.10504150 161.76615906]
[116.10504150 176.76615906]
[116.10504150 191.76615906]
[116.10504150 206.76615906]
[116.10504150 221.76615906]
[116.10504150 236.76615906]
[116.10504150 251.76615906]
[116.10504150 266.76617432]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[14 95]
[15 94]
[16 93]
[19 91]
[20 90]
[21 89]
[24 87]
[25 60]
[26 59]
[27 58]
[28 57]
[29 56]
[30 55]
[97 129]
[98 128]
[100 125]
[101 124]
[102 123]
[104 122]
[105 121]
[106 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
