%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUACCUCUCACUUCAACCUCCCUCACCAUUGGCAGCCUAGCAUUAGCAGGAAUACCUUUCCUCACxxxxxxxxxxUGAAUCUGAGGAGGCUACUCAGUAGACAGUCCCACCCUCACACGAUUCUUUACCUUUCACUUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[19.32623863 201.18733215]
[9.31132317 212.35430908]
[5.85763979 227.79396057]
[-8.40001583 232.10307312]
[-18.41493034 243.27006531]
[-28.42984390 254.43704224]
[-38.44475937 265.60403442]
[-48.45967484 276.77099609]
[-58.36378098 288.03637695]
[-68.15611267 299.39904785]
[-77.94844055 310.76171875]
[-71.41525269 324.51806641]
[-71.04859161 339.74258423]
[-76.91198730 353.79748535]
[-87.98956299 364.24771118]
[-102.36206818 369.28268433]
[-117.53938293 368.03005981]
[-130.89193726 360.70684814]
[-140.10632324 348.58187866]
[-143.58610535 333.75585938]
[-140.72836304 318.79748535]
[-132.02824402 306.29837036]
[-118.99308014 298.42407227]
[-103.88130188 296.53887939]
[-89.31111145 300.96939087]
[-79.51878357 289.60671997]
[-69.72644806 278.24404907]
[-67.73144531 271.08605957]
[-59.62665558 266.75610352]
[-49.61174011 255.58911133]
[-39.59682846 244.42213440]
[-29.58191299 233.25514221]
[-19.56699753 222.08816528]
[-16.82964897 207.44725037]
[-1.85565877 202.33940125]
[8.15925598 191.17240906]
[-0.86899930 181.30157471]
[-8.83948040 170.53991699]
[-15.66463757 159.00047302]
[-21.26896858 146.80487061]
[-25.58985710 134.08200073]
[-28.57826805 120.96666718]
[-30.19930267 107.59819794]
[-30.43260574 94.11891937]
[-29.27261162 80.67266083]
[-26.72863579 67.40320587]
[-22.82481575 54.45278931]
[-17.59987640 41.96052933]
[-11.10675240 30.06095695]
[-24.24277687 22.81907463]
[-40.61910629 23.68387794]
[-49.32812881 9.78837585]
[-41.41074753 -4.57293081]
[-25.01168633 -4.62636042]
[-17.00089455 9.68305016]
[-3.86486959 16.92493248]
[6.15004492 5.75795126]
[-2.47382164 -6.51514673]
[-11.09768772 -18.78824425]
[-19.72155380 -31.06134224]
[-28.34542084 -43.33443832]
[-43.83835602 -47.49959946]
[-50.10921860 -62.26631165]
[-42.34754181 -76.30682373]
[-26.50741959 -78.85044861]
[-14.74003601 -67.94594574]
[-16.07232285 -51.95830536]
[-7.44845629 -39.68520737]
[1.17540991 -27.41211128]
[9.79927635 -15.13901329]
[18.42314339 -2.86591530]
[31.22745323 -11.68569660]
[44.97197342 -18.92217255]
[59.46210480 -24.47685051]
[74.49315643 -28.27501678]
[89.85324860 -30.26674843]
[105.32628632 -30.42755508]
[120.69499969 -28.75868416]
[135.74398804 -25.28705215]
[150.26278687 -20.06481171]
[164.04872131 -13.16858006]
[176.90982056 -4.69830942]
[188.66744995 5.22415638]
[199.15881348 16.45683289]
[208.23916626 28.83962631]
[215.78385925 42.19661713]
[229.57009888 36.28567505]
[243.35635376 30.37472916]
[257.14260864 24.46378517]
[270.92886353 18.55284119]
[284.53390503 12.23595905]
[297.94577026 5.51868916]
[311.35763550 -1.19858038]
[324.76950073 -7.91585016]
[338.18139648 -14.63311958]
[347.92514038 -30.22909737]
[365.37265015 -28.56908607]
[378.64920044 -35.55002594]
[391.48886108 -43.30521393]
[403.84655762 -51.80741501]
[416.20425415 -60.30961227]
[428.56195068 -68.81181335]
[438.18380737 -82.77089691]
[454.26095581 -77.38931274]
[453.54031372 -60.45069122]
[437.06414795 -56.45411682]
[424.70645142 -47.95191574]
[412.34875488 -39.44971848]
[399.99105835 -30.94751930]
[414.41268921 -26.82236290]
[421.85250854 -13.79743481]
[418.07977295 0.72035760]
[405.23986816 8.47515965]
[390.63449097 5.05703688]
[382.56933594 -7.59022188]
[385.63012695 -22.27348709]
[372.35360718 -15.29254723]
[368.44580078 -3.80939245]
[357.39697266 2.10325432]
[344.89865112 -1.22124851]
[331.48678589 5.49602127]
[318.07492065 12.21329117]
[304.66302490 18.93056107]
[291.25115967 25.64783096]
[289.79788208 28.91548729]
[286.66064453 31.62403297]
[282.12814331 32.97646713]
[276.83981323 32.33909225]
[263.05355835 38.25003815]
[249.26730347 44.16098022]
[235.48104858 50.07192612]
[221.69479370 55.98287201]
[225.24140930 67.41593933]
[227.71641541 79.12780762]
[229.09864807 91.01825714]
[229.37626648 102.98556519]
[228.54690552 114.92733002]
[226.61766052 126.74136353]
[223.60502625 138.32659912]
[219.53480530 149.58389282]
[214.44180298 160.41693115]
[208.36959839 170.73303223]
[201.37014771 180.44390869]
[193.50335693 189.46649170]
[184.83651733 197.72357178]
[175.44378662 205.14450073]
[165.40554810 211.66578674]
[154.80766296 217.23161316]
[143.74082947 221.79437256]
[132.29974365 225.31503296]
[120.58229828 227.76345825]
[108.68873596 229.11869812]
[96.72083282 229.36915588]
[84.78098297 228.51269531]
[72.97135162 226.55664062]
[61.39299011 223.51773071]
[50.14495850 219.42196655]
[39.32350159 214.30439758]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 36]
[2 35]
[4 33]
[5 32]
[6 31]
[7 30]
[8 29]
[9 27]
[10 26]
[11 25]
[49 56]
[50 55]
[57 71]
[58 70]
[59 69]
[60 68]
[61 67]
[86 132]
[87 131]
[88 130]
[89 129]
[90 128]
[91 124]
[92 123]
[93 122]
[94 121]
[95 120]
[97 117]
[98 116]
[99 109]
[100 108]
[101 107]
[102 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
