%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAAGUCAAUAGAAGCCGGCGUAAAGAGUGUUUUAGAUCACCCCCUCCCCAAUAAAGCUAAxxxxxxxxxxAUUAAAACACUGAACUGACAAUUAACAGCCCAAUAUCUACAAUCAACCAACAAGUCAUUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[151.11421204 510.75695801]
[151.11421204 495.75695801]
[151.11421204 480.75695801]
[151.11421204 465.75695801]
[151.11421204 450.75695801]
[151.11421204 435.75695801]
[151.11421204 420.75695801]
[151.11421204 405.75695801]
[151.11421204 390.75695801]
[151.11421204 375.75695801]
[131.12777710 370.59725952]
[113.49664307 359.83798218]
[99.75084686 344.40383911]
[91.08583832 325.62573242]
[88.25854492 305.12579346]
[91.52120972 284.67739868]
[100.59893799 266.05166626]
[114.71285248 250.86407471]
[132.64688110 240.43440247]
[128.63914490 225.97970581]
[124.63140106 211.52502441]
[120.62365723 197.07032776]
[104.91191101 193.42443848]
[93.10196686 182.30206299]
[88.46809387 166.65734863]
[92.36006927 150.71533203]
[103.81172943 138.83096313]
[99.50415039 124.46278381]
[95.19656372 110.09459686]
[90.73974609 95.77199554]
[86.13418579 81.49653625]
[81.38037109 67.26976013]
[76.47881317 53.09320068]
[70.84686279 39.19064331]
[64.49973297 25.59969330]
[57.73161697 12.21340942]
[50.54910660 -0.95517337]
[43.36659622 -14.12375546]
[36.18408966 -27.29233932]
[29.00158119 -40.46092224]
[21.81907082 -53.62950516]
[14.63656235 -66.79808807]
[7.45405388 -79.96666718]
[0.27154478 -93.13525391]
[-13.88740063 -88.08839417]
[-28.66155052 -85.31874084]
[-43.68708038 -84.89450073]
[-58.59396744 -86.82611084]
[-73.01512146 -91.06600952]
[-86.59541321 -97.50978851]
[-99.00040436 -105.99876404]
[-109.92461395 -116.32388306]
[-119.09902954 -128.23088074]
[-126.29772186 -141.42654419]
[-131.34341431 -155.58590698]
[-134.11184692 -170.36027527]
[-134.53485107 -185.38584900]
[-132.60200500 -200.29257202]
[-128.36091614 -214.71337891]
[-121.91600800 -228.29313660]
[-113.42601776 -240.69741821]
[-103.09999084 -251.62078857]
[-91.19223785 -260.79421997]
[-77.99598694 -267.99182129]
[-63.83621216 -273.03634644]
[-49.06160355 -275.80355835]
[-34.03600693 -276.22531128]
[-19.12943459 -274.29125977]
[-4.70897913 -270.04895020]
[8.87024403 -263.60293579]
[21.27383423 -255.11192322]
[32.19634247 -244.78500366]
[41.36879349 -232.87649536]
[48.56530380 -219.67964172]
[53.60865784 -205.51945496]
[56.37465286 -190.74461365]
[56.79517746 -175.71897888]
[54.85987473 -160.81257629]
[50.61640167 -146.39247131]
[44.16926193 -132.81376648]
[35.67721939 -120.41088104]
[25.34939575 -109.48922729]
[13.44012737 -100.31775665]
[20.62263680 -87.14917755]
[27.80514526 -73.98059845]
[34.98765564 -60.81201172]
[42.17016220 -47.64342880]
[49.35267258 -34.47484589]
[56.53517914 -21.30626488]
[63.71768951 -8.13768196]
[70.90019989 5.03090048]
[74.22867584 6.36832666]
[77.05459595 9.42051888]
[78.56253052 13.92368603]
[78.09068298 19.25256538]
[84.43781281 32.84351730]
[92.25582886 20.04200935]
[107.11083221 17.96140289]
[118.14501190 28.12244987]
[117.29327393 43.09824753]
[105.17817688 51.94269943]
[90.65537262 48.19165039]
[95.55692291 62.36820984]
[100.74866486 67.69657898]
[100.40964508 76.89097595]
[105.01520538 91.16643524]
[110.32315063 97.30725861]
[109.56474304 105.78701019]
[113.87232971 120.15519714]
[118.17991638 134.52337646]
[131.97434998 137.04516602]
[143.27430725 145.23674011]
[149.89833069 157.44606018]
[150.59826660 171.25250244]
[145.29408264 183.94677734]
[135.07835388 193.06259155]
[139.08609009 207.51728821]
[143.09382629 221.97196960]
[147.10156250 236.42665100]
[157.30534363 235.51115417]
[167.53147888 236.08338928]
[177.56423950 238.13052368]
[187.19210815 241.60862732]
[196.21220398 246.44357300]
[204.43457031 252.53269958]
[211.68620300 259.74691772]
[217.81462097 267.93344116]
[222.69114685 276.91912842]
[226.21354675 286.51400757]
[228.30822754 296.51535034]
[228.93176270 306.71203613]
[228.07173157 316.88885498]
[225.74703979 326.83114624]
[222.00750732 336.32931519]
[216.93273926 345.18322754]
[210.63044739 353.20648193]
[203.23422241 360.23028564]
[194.90065002 366.10693359]
[185.80598450 370.71313477]
[176.14245605 373.95233154]
[166.11421204 375.75695801]
[166.11421204 390.75695801]
[166.11421204 405.75695801]
[166.11421204 420.75695801]
[166.11421204 435.75695801]
[166.11421204 450.75695801]
[166.11421204 465.75695801]
[166.11421204 480.75695801]
[166.11421204 495.75695801]
[166.11421204 510.75695801]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[19 119]
[20 118]
[21 117]
[22 116]
[27 110]
[28 109]
[29 108]
[30 106]
[31 105]
[32 103]
[33 102]
[34 96]
[35 95]
[36 91]
[37 90]
[38 89]
[39 88]
[40 87]
[41 86]
[42 85]
[43 84]
[44 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
