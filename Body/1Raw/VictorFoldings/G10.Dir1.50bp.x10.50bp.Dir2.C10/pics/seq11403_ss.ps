%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACCAUCAUUCCCCCUAAAUAAAUUAAAAAAACUAUUAAACCCAUAUAACCUCCCCCAAAxxxxxxxxxxCAUACAUCAUUAUUCUCGCACGGACUACAACCACGACCAAUGAUAUGAAAAACCAUCGUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[171.11962891 96.76951599]
[156.30186462 99.10061646]
[141.48411560 101.43172455]
[126.66635132 103.76282501]
[111.84859467 106.09393311]
[98.99019623 113.81801605]
[89.97266388 125.80484772]
[80.95513153 137.79168701]
[71.93760681 149.77851868]
[62.92007446 161.76535034]
[53.90254593 173.75218201]
[44.88501358 185.73901367]
[47.34509659 201.35066223]
[37.97811127 214.07995605]
[22.34132576 216.37484741]
[9.71176910 206.87380981]
[7.58233070 191.21363831]
[17.21636963 178.68522644]
[32.89818192 176.72148132]
[41.91571045 164.73464966]
[50.93324280 152.74781799]
[59.95077133 140.76098633]
[68.96829987 128.77415466]
[77.98583221 116.78731537]
[87.00336456 104.80048370]
[83.61930084 98.10734558]
[76.85118866 84.72106171]
[73.46713257 78.02791595]
[58.46794510 78.18395233]
[43.46875381 78.33998871]
[28.46956635 78.49602509]
[17.45037460 89.50579834]
[2.23684144 89.45037842]
[-8.19138908 78.87741089]
[-23.19057655 79.03344727]
[-37.02350235 87.84152222]
[-51.44100952 80.02694702]
[-51.61159897 63.62868881]
[-37.35978699 55.51586533]
[-23.34661484 64.03425598]
[-8.34742546 63.87822342]
[1.85859060 53.09059906]
[17.06767845 52.71868515]
[28.31352997 63.49683762]
[43.31271744 63.34080124]
[58.31190872 63.18476486]
[73.31109619 63.02872849]
[60.07326126 55.97467041]
[57.39484024 41.21573639]
[59.66248703 26.38813591]
[66.62960815 13.10433960]
[77.53853607 2.80893707]
[91.20294189 -3.37846541]
[106.13684845 -4.78499842]
[120.71622467 -1.25770438]
[133.35559082 6.81983042]
[142.68041992 18.56918716]
[147.67668152 32.71264648]
[147.80102539 47.71213150]
[143.03991699 61.93647385]
[133.91114807 73.83880615]
[121.40370941 82.12642670]
[109.51749420 91.27617645]
[124.33525085 88.94506836]
[139.15301514 86.61396790]
[153.97076416 84.28285980]
[168.78852844 81.95175934]
[168.51698303 64.83773804]
[170.78250122 47.87409210]
[175.53457642 31.43479729]
[182.66784668 15.88218784]
[192.02453613 1.55897689]
[203.39784241 -11.21931267]
[216.53654480 -22.17128754]
[231.15057373 -31.05588722]
[246.91738892 -37.67768097]
[263.48910522 -41.89117813]
[280.50018311 -43.60401917]
[297.57543945 -42.77899170]
[314.33837891 -39.43486023]
[330.41949463 -33.64591217]
[345.46438599 -25.54033089]
[359.14157104 -15.29734802]
[371.14978027 -3.14327931]
[381.22467041 10.65347576]
[389.14447021 25.78835678]
[403.26928711 20.73960114]
[417.39407349 15.69084358]
[431.51889038 10.64208794]
[445.64367676 5.59333134]
[459.76849365 0.54457492]
[462.69244385 -11.05816174]
[470.79397583 -19.69955635]
[481.95529175 -23.29112434]
[493.34002686 -21.04268837]
[502.11410522 -13.63284111]
[516.43670654 -18.08965683]
[530.75927734 -22.54647255]
[531.76013184 -37.69119644]
[538.16790771 -51.45003128]
[549.11590576 -61.96220398]
[563.12353516 -67.80603027]
[578.29638672 -68.19118500]
[592.58251953 -63.06556702]
[604.04974365 -53.12238693]
[611.14727783 -39.70637512]
[612.91522217 -24.63193130]
[609.11450195 -9.93775654]
[600.25903320 2.38888574]
[587.54663086 10.68091774]
[572.69635010 13.81690979]
[557.71667480 11.37274551]
[544.63348389 3.67897749]
[535.21612549 -8.22387505]
[520.89349365 -3.76705956]
[506.57092285 0.68975621]
[499.10726929 17.35382462]
[481.55453491 23.43651199]
[464.81726074 14.66937828]
[450.69244385 19.71813393]
[436.56765747 24.76689148]
[422.44284058 29.81564713]
[408.31802368 34.86440277]
[394.19323730 39.91315842]
[397.07958984 52.72513199]
[398.48687744 65.78359222]
[398.39654541 78.91835022]
[396.80953979 91.95819855]
[393.74630737 104.73313141]
[389.24658203 117.07659149]
[383.36877441 128.82759094]
[376.18933105 139.83288574]
[367.80163574 149.94886780]
[358.31478882 159.04356384]
[347.85238647 166.99824524]
[336.55056763 173.70906067]
[324.55661011 179.08831787]
[312.02670288 183.06570435]
[299.12414551 185.58917236]
[286.01705933 186.62559509]
[272.87625122 186.16122437]
[259.87301636 184.20191956]
[247.17691040 180.77296448]
[234.95346069 175.91883850]
[223.36209106 169.70262146]
[212.55400085 162.20512390]
[202.67018127 153.52389526]
[193.83963013 143.77191162]
[186.17761230 133.07612610]
[179.78417969 121.57585907]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 67]
[2 66]
[3 65]
[4 64]
[5 63]
[6 25]
[7 24]
[8 23]
[9 22]
[10 21]
[11 20]
[12 19]
[28 47]
[29 46]
[30 45]
[31 44]
[34 41]
[35 40]
[86 124]
[87 123]
[88 122]
[89 121]
[90 120]
[91 119]
[96 116]
[97 115]
[98 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
