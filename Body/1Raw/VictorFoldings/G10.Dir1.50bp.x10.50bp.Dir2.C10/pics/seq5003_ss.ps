%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAACUAGGAAUAGCCCCCUUUCACUUCUGAGUCCCAGAGGUUACCCAAGGCACCCCUCUGxxxxxxxxxxAUAAUCGCCCACGGGCUUACAUCCUCAUUACUAUUCUGCCUAGCAAACUCAAACUACGAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[71.29100800 248.63529968]
[70.97895050 233.63854980]
[70.66690063 218.64178467]
[70.35484314 203.64503479]
[70.04278564 188.64828491]
[69.73072815 173.65153503]
[69.41867065 158.65476990]
[69.10661316 143.65802002]
[68.79456329 128.66127014]
[88.08745575 94.28428650]
[80.63254547 81.26797485]
[73.17763519 68.25166321]
[67.57749176 64.54411316]
[65.10987854 59.33430099]
[65.69628143 54.53517151]
[58.78927994 41.22001648]
[51.88228226 27.90485954]
[38.65953827 19.21753120]
[39.66728210 4.35705566]
[32.76028061 -8.95810032]
[25.85328293 -22.27325630]
[17.73174095 -34.88438416]
[8.46679211 -46.68102264]
[-0.79815727 -58.47766495]
[-10.06310654 -70.27430725]
[-19.32805634 -82.07094574]
[-30.22107697 -77.50189209]
[-42.36616516 -76.57913971]
[-54.53829956 -79.62661743]
[-65.43759155 -86.55623627]
[-73.82761383 -96.85479736]
[-78.67388153 -109.61717987]
[-79.26697540 -123.62423706]
[-94.03302765 -126.26309967]
[-108.79908752 -128.90196228]
[-123.56513977 -131.54083252]
[-138.33119202 -134.17970276]
[-153.09724426 -136.81855774]
[-167.86331177 -139.45742798]
[-181.79527283 -131.50256348]
[-196.64718628 -137.56886292]
[-201.02593994 -153.00279236]
[-191.57252502 -165.96475220]
[-175.53878784 -166.51144409]
[-165.22444153 -154.22348022]
[-150.45838928 -151.58460999]
[-135.69233704 -148.94575500]
[-120.92627716 -146.30688477]
[-106.16021729 -143.66802979]
[-91.39416504 -141.02915955]
[-76.62811279 -138.39028931]
[-71.03022766 -143.38165283]
[-82.72351837 -152.77670288]
[-94.47361755 -162.10060120]
[-90.59265137 -176.58984375]
[-75.75521088 -178.79222107]
[-67.83293152 -166.05392456]
[-59.83446121 -153.36437988]
[-54.23657608 -158.35574341]
[-55.17220688 -173.32653809]
[-56.10783386 -188.29733276]
[-70.96085358 -190.84379578]
[-84.82601929 -196.74752808]
[-96.95558929 -205.69013977]
[-106.69543457 -217.18936157]
[-113.52030945 -230.62504578]
[-117.06214142 -245.27264404]
[-117.12993622 -260.34222412]
[-113.72002411 -275.02108765]
[-107.01631165 -288.51763916]
[-97.38031769 -300.10403442]
[-85.33168793 -309.15539551]
[-71.52020264 -315.18362427]
[-56.69069672 -317.86364746]
[-41.64290237 -317.05087280]
[-27.18832970 -312.78918457]
[-14.10649490 -305.30838013]
[-3.10288525 -295.01190186]
[5.22908783 -282.45504761]
[10.44009113 -268.31497192]
[12.24910355 -253.35420227]
[10.55856514 -238.37959290]
[5.45964622 -224.19869995]
[-2.77267551 -211.57627869]
[-13.69444180 -201.19303894]
[-26.71665382 -193.60893250]
[-41.13704300 -189.23295593]
[-40.20141602 -174.26216125]
[-39.26578522 -159.29138184]
[-14.92075729 -152.11775208]
[0.52387869 -133.48532104]
[2.81365323 -110.57637787]
[-7.53141594 -91.33589172]
[1.73353338 -79.53925323]
[10.99848270 -67.74261475]
[20.26343155 -55.94597244]
[29.52838135 -44.14933395]
[30.18097878 -59.13513184]
[38.71036530 -71.47407532]
[52.49898148 -77.37950134]
[67.31527710 -75.03911591]
[78.61231995 -65.17114258]
[82.92318726 -50.80394363]
[78.92493439 -36.34662628]
[67.84457397 -26.23596001]
[53.08252335 -23.57477570]
[39.16843796 -29.18025398]
[46.07543945 -15.86509895]
[52.98243713 -2.54994297]
[65.71114349 5.18499613]
[65.19744110 20.99785995]
[72.10443878 34.31301498]
[79.01143646 47.62817001]
[86.19394684 60.79675293]
[93.64885712 73.81306458]
[101.10376740 86.82937622]
[112.70510864 96.33773041]
[126.93188477 101.09154510]
[141.15866089 105.84535980]
[158.09753418 105.13045502]
[163.47364807 121.20943451]
[149.51129150 130.82655334]
[136.40484619 120.07214355]
[122.17807007 115.31832886]
[107.95129395 110.56451416]
[101.91129303 115.01068878]
[112.11737061 126.00323486]
[122.32344055 136.99577332]
[132.52951050 147.98832703]
[142.73559570 158.98086548]
[155.42120361 166.98556519]
[158.84445190 181.58972168]
[151.03741455 194.39791870]
[136.48808289 198.04718018]
[123.56037903 190.43966675]
[119.68603516 175.94816589]
[112.22235107 162.93687439]
[104.75867462 149.92559814]
[97.29499054 136.91432190]
[89.83130646 123.90303802]
[83.79131317 128.34921265]
[84.10337067 143.34596252]
[84.41542816 158.34271240]
[84.72748566 173.33947754]
[85.03953552 188.33622742]
[85.35159302 203.33297729]
[85.66365051 218.32972717]
[85.97570801 233.32649231]
[86.28776550 248.32324219]
[88.87876129 267.53097534]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 116]
[11 115]
[12 114]
[15 113]
[16 112]
[17 111]
[19 109]
[20 108]
[21 107]
[22 97]
[23 96]
[24 95]
[25 94]
[26 93]
[33 51]
[34 50]
[35 49]
[36 48]
[37 47]
[38 46]
[39 45]
[59 89]
[60 88]
[61 87]
[117 125]
[118 124]
[119 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
