%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACUAGCAGAGACCAACCGAACCCCCUUCGACCUUGCCGAAGGGGAGUCCGAACUAGUCUxxxxxxxxxxCUCAAGCACUAUAGUUGUAGCAGGAAUCUUCUUACUCAUCCGCUUCCACCCCCUAGCAGACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[84.14023590 258.06671143]
[84.14023590 243.06669617]
[84.14023590 228.06669617]
[84.14023590 213.06669617]
[84.14023590 198.06669617]
[84.14023590 183.06669617]
[84.14023590 168.06669617]
[84.14023590 153.06669617]
[84.14023590 138.06669617]
[84.14023590 123.06670380]
[82.99671173 108.06602478]
[90.38686371 99.20431519]
[78.49448395 90.06257629]
[66.60210419 80.92084503]
[54.70972443 71.77911377]
[41.79995728 72.66889191]
[32.07314301 64.75637054]
[30.42650032 52.73156738]
[18.72687721 43.34440231]
[5.48429108 36.29927063]
[-8.83830643 31.84245300]
[-23.16090393 27.38563728]
[-37.48350143 22.92882156]
[-49.48634338 34.25624084]
[-65.46798706 37.98216629]
[-81.06365967 33.18580627]
[-92.06258392 21.26079750]
[-95.54483032 5.51197147]
[-109.95704651 1.35408390]
[-125.36117554 4.96288919]
[-135.44499207 -5.99912453]
[-149.85720825 -10.15701199]
[-164.31190491 -14.16475201]
[-178.80749512 -18.02191162]
[-193.30310059 -21.87907028]
[-207.79869080 -25.73623085]
[-222.29429626 -29.59338951]
[-236.78988647 -33.45055008]
[-251.28547668 -37.30770874]
[-265.78106689 -41.16486740]
[-278.47018433 -32.02589417]
[-294.06109619 -33.23297882]
[-305.19229126 -44.21617126]
[-306.60794067 -59.78954315]
[-297.63964844 -72.59982300]
[-282.52191162 -76.59839630]
[-268.39291382 -69.89724731]
[-261.92391968 -55.66046524]
[-247.42832947 -51.80330658]
[-232.93272400 -47.94614792]
[-218.43713379 -44.08898544]
[-203.94152832 -40.23182678]
[-189.44593811 -36.37466812]
[-174.95034790 -32.51750946]
[-160.45474243 -28.66034889]
[-153.13475037 -29.98829079]
[-145.69932556 -24.56922722]
[-131.28710938 -20.41134071]
[-116.91384125 -24.31754684]
[-105.79916382 -13.05813217]
[-91.38694763 -8.90024471]
[-82.16535950 -19.02060509]
[-69.41658783 -24.19244766]
[-55.61817551 -23.34892654]
[-43.47842789 -16.59825706]
[-35.40483475 -5.21370173]
[-33.02668381 8.60622501]
[-18.70408821 13.06304073]
[-4.38149023 17.51985550]
[9.94110680 21.97667122]
[0.10259902 10.65396214]
[-5.83567572 -3.12053990]
[-7.31358957 -18.04755402]
[-4.19173908 -32.71909332]
[3.23540783 -45.75126648]
[14.26728630 -55.91481018]
[27.86331558 -62.25105286]
[42.74105072 -64.16233063]
[57.49715042 -61.46836090]
[70.73975372 -54.42325211]
[81.21974182 -43.69153214]
[87.94860077 -30.28547096]
[90.29162598 -15.46959400]
[88.02780914 -0.64140630]
[81.37069702 12.80042458]
[70.94821167 23.58799934]
[57.74345016 30.70377922]
[43.00195694 33.47657013]
[28.11403847 31.64478111]
[39.81366348 41.03194046]
[57.25284195 42.72753143]
[63.85145950 59.88673019]
[75.74384308 69.02846527]
[87.63622284 78.17019653]
[99.52860260 87.31193542]
[113.85119629 91.76874542]
[128.83091736 90.98890686]
[144.00070190 80.60346222]
[159.32287598 89.10234070]
[174.28312683 88.01103210]
[189.24336243 86.91972351]
[197.63778687 83.15334320]
[204.52561951 85.96463013]
[219.50534058 85.18478394]
[234.48506165 84.40493774]
[239.90812683 70.17433167]
[250.65505981 59.38436508]
[264.86389160 53.90447235]
[280.07284546 54.68407440]
[293.64685059 61.58810043]
[303.23419189 73.42038727]
[307.17376709 88.13091278]
[304.78302002 103.17099762]
[296.47616577 115.93486023]
[283.69241333 124.21106720]
[268.64663696 126.56573486]
[253.94560242 122.59088898]
[242.13633728 112.97520447]
[235.26489258 99.38465118]
[220.28518677 100.16449738]
[205.30546570 100.94434357]
[190.33468628 101.87996674]
[175.37443542 102.97128296]
[160.41418457 104.06259155]
[152.23533630 113.02996063]
[139.73628235 114.02638245]
[129.61076355 105.96862030]
[114.63104248 106.74846649]
[128.15084839 113.24574280]
[143.13101196 112.47457123]
[156.79725647 118.65792084]
[166.10705566 130.41920471]
[168.98776245 145.13998413]
[164.79804993 159.54298401]
[154.47065735 170.42164612]
[140.30480957 175.35404968]
[125.45423126 173.24208069]
[113.22512054 164.55595398]
[106.34005737 151.22944641]
[106.33161926 136.23043823]
[99.14023590 123.06670380]
[99.14023590 138.06669617]
[99.14023590 153.06669617]
[99.14023590 168.06669617]
[99.14023590 183.06669617]
[99.14023590 198.06669617]
[99.14023590 213.06669617]
[99.14023590 228.06669617]
[99.14023590 243.06669617]
[99.14023590 258.06671143]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 95]
[13 94]
[14 93]
[15 92]
[18 90]
[19 89]
[20 70]
[21 69]
[22 68]
[23 67]
[28 61]
[29 60]
[31 58]
[32 57]
[33 55]
[34 54]
[35 53]
[36 52]
[37 51]
[38 50]
[39 49]
[40 48]
[96 128]
[97 127]
[99 124]
[100 123]
[101 122]
[103 121]
[104 120]
[105 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
