%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACUUCCUAUUCUACACCCUAGUAGGCUCCCUUCCCCUACUCAUCGCACUAAUUUACACUCACxxxxxxxxxxUACCUUUCACUUCAUCUUGCCCUUCAUUAUUGCAGCCCUAGCAACACUCCACCUCCUAUUCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[239.96829224 35.11108780]
[228.99275208 21.21968269]
[216.59509277 29.66350174]
[204.19743347 38.10732269]
[191.79977417 46.55113983]
[179.40211487 54.99496078]
[167.00445557 63.43877792]
[154.60679626 71.88259888]
[142.20913696 80.32641602]
[129.81147766 88.77023315]
[117.41382599 97.21405792]
[116.12225342 107.14672089]
[109.62982178 114.77394104]
[100.03091431 117.63524628]
[90.42203522 114.80761719]
[77.69237518 122.74207306]
[64.96270752 130.67652893]
[52.23304367 138.61099243]
[48.74155426 144.33715820]
[43.63563919 146.99710083]
[38.82279205 146.59692383]
[25.78203964 154.00898743]
[12.74128342 161.42105103]
[7.11523724 176.44528198]
[-8.18296432 181.27690125]
[-21.41784859 172.20951843]
[-22.43674660 156.19885254]
[-10.45804691 145.52691650]
[5.32921886 148.38029480]
[18.36997414 140.96823120]
[31.41072845 133.55616760]
[44.29858398 125.88133240]
[57.02824783 117.94686890]
[69.75791168 110.01241302]
[82.48757935 102.07794952]
[90.37017822 85.22605896]
[108.97000885 84.81639862]
[121.36766815 76.37257385]
[133.76531982 67.92875671]
[146.16297913 59.48493958]
[158.56063843 51.04112244]
[170.95829773 42.59730148]
[183.35595703 34.15348434]
[195.75361633 25.70966339]
[208.15127563 17.26584435]
[220.54893494 8.82202530]
[213.74792480 -2.60800195]
[207.61352539 -14.40907669]
[202.16587830 -26.54236412]
[197.42289734 -38.96794128]
[193.40020752 -51.64492035]
[190.11099243 -64.53159332]
[187.56610107 -77.58554840]
[185.77386475 -90.76383972]
[184.74017334 -104.02310944]
[184.46842957 -117.31972504]
[184.95950317 -130.60993958]
[186.21176147 -143.85003662]
[188.22109985 -156.99644470]
[190.98086548 -170.00592041]
[194.48197937 -182.83566284]
[198.71290588 -195.44345093]
[203.65971375 -207.78781128]
[209.30612183 -219.82814026]
[215.63352966 -231.52482605]
[222.62112427 -242.83938599]
[230.24589539 -253.73461914]
[238.48275757 -264.17465210]
[247.30458069 -274.12518311]
[256.68234253 -283.55343628]
[266.58520508 -292.42843628]
[276.98052979 -300.72097778]
[287.83410645 -308.40377808]
[299.11029053 -315.45159912]
[310.77188110 -321.84121704]
[322.78057861 -327.55166626]
[335.09683228 -332.56414795]
[347.68011475 -336.86218262]
[360.48904419 -340.43161011]
[373.48144531 -343.26077271]
[386.61459351 -345.34030151]
[399.84524536 -346.66339111]
[413.12991333 -347.22570801]
[426.42483521 -347.02542114]
[439.68630981 -346.06320190]
[452.87069702 -344.34219360]
[465.93460083 -341.86810303]
[478.83508301 -338.64904785]
[491.52963257 -334.69567871]
[503.97656250 -330.02099609]
[516.13488770 -324.64038086]
[527.96459961 -318.57156372]
[539.42681885 -311.83450317]
[550.48376465 -304.45135498]
[561.09918213 -296.44650269]
[571.23803711 -287.84619141]
[580.86706543 -278.67880249]
[589.95452881 -268.97448730]
[598.47058105 -258.76516724]
[606.38720703 -248.08445740]
[613.67834473 -236.96748352]
[620.32006836 -225.45085144]
[626.29040527 -213.57244873]
[631.56988525 -201.37135315]
[636.14111328 -188.88774109]
[639.98895264 -176.16265869]
[643.10089111 -163.23799133]
[645.46655273 -150.15628052]
[647.07830811 -136.96054077]
[647.93084717 -123.69419861]
[648.02130127 -110.40090942]
[647.34942627 -97.12441254]
[662.25634766 -95.45573425]
[677.16320801 -93.78705597]
[692.07012939 -92.11837769]
[703.26641846 -103.03518677]
[718.86425781 -104.14954376]
[731.49877930 -94.93527985]
[735.20434570 -79.74308777]
[728.23138428 -65.74626160]
[713.87219238 -59.55367279]
[698.90679932 -64.08927155]
[690.40142822 -77.21148682]
[675.49456787 -78.88016510]
[660.58764648 -80.54883575]
[645.68072510 -82.21751404]
[642.48132324 -64.81406403]
[637.96337891 -47.70515442]
[632.15313721 -30.99053383]
[625.08441162 -14.76765919]
[616.79846191 0.86887777]
[607.34344482 15.82790184]
[596.77453613 30.02218246]
[585.15325928 43.36894608]
[572.54730225 55.79035568]
[559.03021240 67.21396637]
[544.68066406 77.57315063]
[529.58233643 86.80748749]
[513.82318115 94.86309052]
[497.49508667 101.69296265]
[480.69320679 107.25725555]
[463.51547241 111.52347565]
[446.06204224 114.46672058]
[428.43460083 116.06977844]
[410.73593140 116.32326508]
[393.06924438 115.22565460]
[375.53747559 112.78329468]
[358.24285889 109.01039124]
[341.28622437 103.92887878]
[324.76644897 97.56834412]
[308.77981567 89.96582794]
[293.41958618 81.16559601]
[278.77529907 71.21893311]
[264.93237305 60.18376160]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 46]
[3 45]
[4 44]
[5 43]
[6 42]
[7 41]
[8 40]
[9 39]
[10 38]
[11 37]
[15 35]
[16 34]
[17 33]
[18 32]
[21 31]
[22 30]
[23 29]
[112 126]
[113 125]
[114 124]
[115 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
