%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCCUAGGCGACCCAGACAAUUAUACCCUAGCCAACCCCUUAAACACCCCUCCCCACAUCxxxxxxxxxxCCAAACAACAAAGCAUAAUAUUUCGCCCACUAAGCCAAUCACUUUAUUGACUCCUAGCCGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[69.86864471 248.26522827]
[69.55658722 233.26847839]
[69.24453735 218.27171326]
[68.93247986 203.27496338]
[68.62042236 188.27821350]
[68.30836487 173.28146362]
[67.99630737 158.28469849]
[67.68424988 143.28794861]
[67.37220001 128.29119873]
[88.44462585 95.03083801]
[80.72054291 82.17243195]
[72.99645996 69.31403351]
[56.49915695 69.78056335]
[42.09104538 61.92551041]
[33.64273071 47.96642685]
[33.36957932 31.74584007]
[41.25156403 17.67367172]
[33.26164627 4.97874308]
[25.27173233 -7.71618652]
[17.28181458 -20.41111565]
[9.29189873 -33.10604477]
[-3.97722054 -26.09549332]
[-17.73854065 -20.10855103]
[-31.91323471 -15.17951298]
[-46.42011261 -11.33661270]
[-61.17607880 -8.60186195]
[-76.09661102 -6.99092436]
[-91.09624481 -6.51302814]
[-106.08905792 -7.17091084]
[-120.98918152 -8.96080399]
[-135.71125793 -11.87245560]
[-150.17097473 -15.88918686]
[-164.28549194 -20.98798943]
[-177.97396851 -27.13965988]
[-191.15798950 -34.30895996]
[-203.76205444 -42.45482254]
[-215.71394348 -51.53059387]
[-226.94522095 -61.48428345]
[-237.39154053 -72.25887299]
[-246.99305725 -83.79265594]
[-255.69479370 -96.01956177]
[-263.44689941 -108.86955261]
[-270.20495605 -122.26902771]
[-275.93029785 -136.14123535]
[-280.59005737 -150.40670776]
[-284.15762329 -164.98374939]
[-286.61248779 -179.78884888]
[-287.94064331 -194.73719788]
[-288.13446045 -209.74319458]
[-287.19284058 -224.72087097]
[-285.12115479 -239.58442688]
[-281.93127441 -254.24874878]
[-277.64151001 -268.62982178]
[-272.27636719 -282.64526367]
[-265.86663818 -296.21481323]
[-258.44900513 -309.26074219]
[-250.06596375 -321.70831299]
[-240.76553345 -333.48623657]
[-230.60098267 -344.52703857]
[-219.63053894 -354.76748657]
[-207.91703796 -364.14889526]
[-195.52757263 -372.61758423]
[-182.53311157 -380.12500000]
[-169.00808716 -386.62817383]
[-155.02996826 -392.08981323]
[-140.67881775 -396.47866821]
[-126.03684998 -399.76956177]
[-111.18792725 -401.94369507]
[-96.21710205 -402.98858643]
[-81.21012878 -402.89825439]
[-66.25296783 -401.67321777]
[-51.43128967 -399.32049561]
[-36.83000183 -395.85354614]
[-22.53272820 -391.29226685]
[-8.62137127 -385.66275024]
[4.82438707 -378.99722290]
[17.72753143 -371.33392334]
[30.01415062 -362.71670532]
[41.61386871 -353.19494629]
[52.46024323 -342.82318115]
[62.49114227 -331.66082764]
[71.64911652 -319.77178955]
[79.88170624 -307.22421265]
[87.14174652 -294.08993530]
[93.38766479 -280.44421387]
[98.58367920 -266.36517334]
[102.70002747 -251.93351746]
[105.71313477 -237.23185730]
[107.60573578 -222.34443665]
[108.36698914 -207.35650635]
[107.99253845 -192.35394287]
[106.48453522 -177.42265320]
[103.85160065 -162.64817810]
[100.10882568 -148.11514282]
[95.27765656 -133.90679932]
[89.38574982 -120.10452271]
[82.46687317 -106.78737640]
[74.56063843 -94.03163910]
[65.71234131 -81.91036987]
[55.97266388 -70.49301147]
[45.39739609 -59.84495544]
[34.04711533 -50.02719498]
[21.98682785 -41.09596252]
[29.97674561 -28.40103340]
[37.96665955 -15.70610332]
[45.95657730 -3.01117325]
[53.94649506 9.68375683]
[67.56459808 8.26718426]
[80.52201843 12.89150143]
[90.25955963 22.70414352]
[94.82780457 35.82192230]
[93.27722168 49.69227600]
[85.85485840 61.58994675]
[93.57894897 74.44834900]
[101.30303192 87.30674744]
[112.70405579 97.05440521]
[126.60660553 102.68636322]
[140.50917053 108.31831360]
[154.41172791 113.95027161]
[168.86579895 107.55847931]
[183.57571411 113.33721161]
[189.81434631 127.85806274]
[183.88040161 142.50607300]
[169.29440308 148.59082031]
[154.70996094 142.50234985]
[148.77976990 127.85282898]
[134.87721252 122.22087097]
[120.97465515 116.58891296]
[107.07209778 110.95696259]
[100.89630890 115.21250153]
[110.39684296 126.82025146]
[119.89738464 138.42799377]
[133.67985535 144.34776306]
[138.28553772 158.62318420]
[130.56150818 171.48161316]
[115.79544830 174.12046814]
[104.09588623 164.73323059]
[103.47209930 149.74615479]
[96.00841522 136.73487854]
[88.54473877 123.72359467]
[82.36894989 127.97914124]
[82.68100739 142.97589111]
[82.99306488 157.97264099]
[83.30512238 172.96940613]
[83.61717224 187.96615601]
[83.92922974 202.96290588]
[84.24128723 217.95965576]
[84.55334473 232.95642090]
[84.86540222 247.95317078]
[87.45639801 267.16088867]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 115]
[11 114]
[12 113]
[17 107]
[18 106]
[19 105]
[20 104]
[21 103]
[116 129]
[117 128]
[118 127]
[119 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
