%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACUCACCUGAGUUGUAAAAAACUCCAGUUGACACAAAAUAGACUACGAAAGUGGCUUUAACAUxxxxxxxxxxCUAGAAGUCCCACUCCUAAACACAUCCGUAUUACUCGCAUCAGGAGUAUCAAUCACCUGAGCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[131.42370605 372.37405396]
[131.42370605 357.37405396]
[131.42370605 342.37405396]
[131.42370605 327.37405396]
[131.42370605 312.37405396]
[131.42370605 297.37405396]
[131.42370605 282.37405396]
[131.42370605 267.37405396]
[131.42370605 252.37403870]
[131.42370605 237.37403870]
[129.03273010 222.56582642]
[124.31191254 208.32806396]
[119.59110260 194.09030151]
[115.75138855 191.16535950]
[113.74108124 185.77432251]
[114.97864532 179.18750000]
[110.83126068 164.77224731]
[106.68388367 150.35700989]
[102.53649902 135.94177246]
[98.38911438 121.52652740]
[80.36225891 115.38599396]
[72.08547974 95.29682922]
[57.41534805 98.42529297]
[42.74521637 101.55375671]
[28.07508469 104.68221283]
[23.41391945 117.68749237]
[13.00827789 126.60948944]
[-0.34312782 129.18991089]
[-13.11854076 124.85745239]
[-22.00206947 114.84991455]
[-36.73185730 117.68421936]
[-51.46165085 120.51852417]
[-63.49759293 131.65710449]
[-79.07963562 126.54517365]
[-82.17831421 110.44144440]
[-69.60597229 99.91204834]
[-54.29595184 105.78873444]
[-39.56616211 102.95442963]
[-24.83637238 100.12012482]
[-18.37154007 85.05884552]
[-4.07028961 76.71772766]
[12.55168629 78.54220581]
[24.94662476 90.01208496]
[39.61675644 86.88362122]
[54.28688431 83.75516510]
[68.95701599 80.62670135]
[53.95810318 80.80742645]
[41.03984070 73.18388367]
[33.94770432 59.96640778]
[34.73796463 44.98723984]
[43.18149948 32.58938599]
[56.83021164 26.36744308]
[71.72684479 28.12537766]
[83.55231476 37.35350037]
[88.87798309 51.37624359]
[86.16082001 66.12569427]
[91.72731018 52.19679642]
[97.29380035 38.26789856]
[91.48291016 19.14640427]
[104.07781982 4.49310207]
[104.07781982 -10.50689793]
[104.07781982 -25.50689888]
[104.07781982 -40.50689697]
[104.07781982 -55.50689697]
[103.77769470 -70.50389862]
[103.17754364 -85.49188232]
[102.57740021 -100.47987366]
[87.92175293 -104.13891602]
[74.89132690 -111.77989960]
[64.54244232 -122.78341675]
[57.71404648 -136.25744629]
[54.95967484 -151.10972595]
[56.50261688 -166.13624573]
[62.21779251 -180.11885071]
[71.64189911 -191.92405701]
[84.01096344 -200.59486389]
[98.32228851 -205.42835999]
[113.41571045 -206.03273010]
[128.06767273 -202.35896301]
[141.09042358 -194.70489502]
[151.42823792 -183.69097900]
[158.24310303 -170.21009827]
[160.98255920 -155.35505676]
[159.42451477 -140.33010864]
[153.69529724 -126.35324860]
[144.25933838 -114.55751038]
[131.88156128 -105.89913940]
[117.56539154 -101.08001709]
[118.16553497 -86.09202576]
[118.76567841 -71.10404205]
[121.64698792 -67.23146820]
[122.08834839 -61.49477386]
[119.07781982 -55.50689697]
[119.07781982 -40.50689697]
[119.07781982 -25.50689888]
[119.07781982 -10.50689793]
[119.07781982 4.49310207]
[121.43907166 5.65360785]
[123.62484741 7.11805725]
[125.59627533 8.86039448]
[139.46878052 3.15482354]
[153.34129333 -2.55074692]
[159.04104614 -14.16194820]
[170.75729370 -18.61268234]
[181.98493958 -14.01752567]
[195.96882629 -19.44438171]
[205.81498718 -32.55869675]
[222.06066895 -30.32048607]
[227.99372864 -15.03222561]
[217.51072693 -2.42116880]
[201.39569092 -5.46048927]
[187.41180420 -0.03363350]
[177.20632935 14.21343040]
[159.04685974 11.32176018]
[145.17434692 17.02733040]
[131.30184937 22.73290062]
[125.89094543 37.28965759]
[111.22269440 43.83439255]
[105.65620422 57.76329041]
[100.08971405 71.69218445]
[119.37009430 82.55534363]
[123.70488739 102.41043854]
[112.80435944 117.37914276]
[116.95174408 131.79438782]
[121.09912109 146.20962524]
[125.24650574 160.62487793]
[129.39389038 175.04011536]
[133.82887268 189.36949158]
[138.54968262 203.60725403]
[143.27049255 217.84501648]
[146.81138611 203.26893616]
[155.04687500 190.73191833]
[167.01806641 181.69364929]
[181.33117676 177.20645142]
[196.31971741 177.79277039]
[210.23855591 183.38435364]
[221.46713257 193.33015442]
[228.69808960 206.47219849]
[231.08953857 221.28033447]
[228.36302185 236.03045654]
[220.83601379 249.00520325]
[209.38485718 258.69390869]
[195.34283447 263.96853638]
[180.34486389 264.21493530]
[166.13714600 259.40441895]
[154.37391663 250.09710693]
[146.42370605 237.37403870]
[146.42370605 252.37403870]
[146.42370605 267.37405396]
[146.42370605 282.37405396]
[146.42370605 297.37405396]
[146.42370605 312.37405396]
[146.42370605 327.37405396]
[146.42370605 342.37405396]
[146.42370605 357.37405396]
[146.42370605 372.37405396]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 156]
[2 155]
[3 154]
[4 153]
[5 152]
[6 151]
[7 150]
[8 149]
[9 148]
[10 147]
[11 130]
[12 129]
[13 128]
[16 127]
[17 126]
[18 125]
[19 124]
[20 123]
[22 46]
[23 45]
[24 44]
[25 43]
[30 39]
[31 38]
[32 37]
[56 120]
[57 119]
[58 118]
[60 97]
[61 96]
[62 95]
[63 94]
[64 93]
[65 90]
[66 89]
[67 88]
[100 116]
[101 115]
[102 114]
[105 112]
[106 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
