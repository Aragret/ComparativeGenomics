%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUCACUAUACUACUAACAGACCGCAACCUCAACACCACCUUCUUCGACCCCGCCGGAGGAxxxxxxxxxxCAUCUUUCUUUUCACCGUAGGUGGCCUGACUGGCAUUGUAUUAGCAAACUCAUCACUAGACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[123.15287781 668.19506836]
[123.15287781 653.19506836]
[123.15287781 638.19506836]
[123.15287781 623.19506836]
[123.15287781 608.19506836]
[123.15287781 593.19506836]
[123.15287781 578.19506836]
[123.15287781 563.19506836]
[123.15287781 548.19506836]
[123.15287781 533.19506836]
[106.98392487 530.01007080]
[91.79859924 523.59503174]
[78.23502350 514.21710205]
[66.86361694 502.26824951]
[58.16312790 488.24847412]
[52.50046158 472.74505615]
[50.11523438 456.40798950]
[51.10960388 439.92254639]
[55.44392014 423.98074341]
[62.93828201 409.25219727]
[73.28002167 396.35595703]
[86.03673553 385.83456421]
[100.67436981 378.13122559]
[116.57957458 373.57101440]
[115.34896088 358.62158203]
[114.11835480 343.67214966]
[112.88774109 328.72268677]
[110.43481445 313.92462158]
[106.77610779 299.37765503]
[103.11740112 284.83071899]
[96.44338989 298.26416016]
[83.64178467 306.08203125]
[68.64309692 305.88397217]
[56.05239487 297.73077393]
[49.73544693 284.12576294]
[51.63175201 269.24612427]
[61.15908432 257.66036987]
[75.39224243 252.92568970]
[89.96119690 256.49578857]
[100.39192963 267.27294922]
[99.46851349 252.30139160]
[98.54510498 237.32983398]
[87.76617432 230.20474243]
[83.00603485 217.98304749]
[86.22032166 205.06602478]
[96.44837952 196.24578857]
[95.83255005 181.25842285]
[95.21672821 166.27107239]
[94.60090637 151.28372192]
[93.98507690 136.29637146]
[93.36925507 121.30901337]
[86.29104614 117.60980988]
[80.96856689 111.65528107]
[78.08348846 104.20803833]
[78.00530243 96.22185516]
[80.74402618 88.71955109]
[71.10221100 77.22888947]
[55.51538467 72.13155365]
[52.40161896 56.03073120]
[64.96409607 45.48956299]
[80.27960968 51.35189819]
[82.59288025 67.58707428]
[92.23469543 79.07773590]
[94.55661774 78.35720825]
[96.94314575 77.89351654]
[100.00154114 63.20861816]
[103.05993652 48.52371979]
[89.27801514 42.46134949]
[77.05792999 33.66571045]
[66.93389130 22.52131653]
[59.34848022 9.51534748]
[54.63329697 -4.78362894]
[52.99446869 -19.75052261]
[54.50363541 -34.73104858]
[59.09482956 -49.07031631]
[66.56733704 -62.14147949]
[76.59449005 -73.37312317]
[88.73795319 -82.27424622]
[102.46686554 -88.45572662]
[117.18105316 -91.64734650]
[132.23727417 -91.70957184]
[146.97734070 -88.63968658]
[160.75686646 -82.57189178]
[172.97349548 -73.77144623]
[183.09313965 -62.62306976]
[190.67344666 -49.61412048]
[195.38299561 -35.31328964]
[197.01594543 -20.34575081]
[195.50088501 -5.36582184]
[190.90405273 8.97164059]
[183.42639160 22.03986359]
[173.39482117 33.26755905]
[161.24786377 42.16390610]
[147.51651001 48.33998489]
[132.80107117 51.52581406]
[117.74483490 51.58211517]
[114.68643951 66.26701355]
[111.62804413 80.95191193]
[122.24160004 101.83089447]
[108.35660553 120.69319153]
[108.97242737 135.68054199]
[109.58825684 150.66789246]
[110.20407867 165.65524292]
[110.81990814 180.64260864]
[111.43572998 195.62995911]
[124.50710297 207.21125793]
[125.17618561 224.32510376]
[113.51665497 236.40643311]
[114.44006348 251.37797546]
[115.36347961 266.34951782]
[117.66435242 281.17199707]
[121.32305908 295.71896362]
[124.98176575 310.26593018]
[132.25617981 297.14788818]
[145.78421021 290.66772461]
[160.56533813 293.22079468]
[171.13584900 303.86334229]
[173.58845520 318.66146851]
[167.01655579 332.14517212]
[153.84941101 339.33032227]
[138.95413208 337.56097412]
[127.83717346 327.49209595]
[129.06777954 342.44152832]
[130.29840088 357.39096069]
[131.52900696 372.34039307]
[145.07861328 373.65386963]
[158.21203613 377.22338867]
[170.55647278 382.94650269]
[181.76171875 390.65963745]
[191.51011658 400.14279175]
[199.52549744 411.12579346]
[205.58105469 423.29602051]
[209.50576782 436.30722046]
[211.18917847 449.78952026]
[210.58457947 463.35977173]
[207.71022034 476.63253784]
[202.64883423 489.23104858]
[195.54521179 500.79779053]
[186.60209656 511.00479126]
[176.07432556 519.56286621]
[164.26167297 526.22967529]
[151.50022888 530.81683350]
[138.15287781 533.19506836]
[138.15287781 548.19506836]
[138.15287781 563.19506836]
[138.15287781 578.19506836]
[138.15287781 593.19506836]
[138.15287781 608.19506836]
[138.15287781 623.19506836]
[138.15287781 638.19506836]
[138.15287781 653.19506836]
[138.15287781 668.19506836]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[24 125]
[25 124]
[26 123]
[27 122]
[28 113]
[29 112]
[30 111]
[40 110]
[41 109]
[42 108]
[46 105]
[47 104]
[48 103]
[49 102]
[50 101]
[51 100]
[56 63]
[57 62]
[65 98]
[66 97]
[67 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
