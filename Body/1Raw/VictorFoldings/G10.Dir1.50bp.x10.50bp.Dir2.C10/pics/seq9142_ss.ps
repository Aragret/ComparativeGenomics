%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUACAAGCCUCAGAGUACUUCGAGUCUCCCUUCACCAUUUCCGACGGCAUCUACGGCUCAACxxxxxxxxxxCUACACUCCAACUCAUGAGACCCACAACAAAUAGCCCUUCUAAACGCUAAUCCAAGCCUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.29408264 236.13348389]
[94.98609924 221.13664246]
[94.67812347 206.13980103]
[94.37014771 191.14297485]
[94.06217194 176.14613342]
[93.75418854 161.14929199]
[93.44621277 146.15245056]
[93.13823700 131.15560913]
[92.83026123 116.15877533]
[87.55551910 102.11679840]
[77.91370392 90.62613678]
[62.64064407 95.55712891]
[46.68196106 94.26540375]
[32.46921158 86.97732544]
[22.15661049 74.83065796]
[17.29453087 59.69700623]
[18.59646606 43.89348984]
[25.83449554 29.82795906]
[15.95878887 18.53767967]
[6.08308268 7.24739933]
[-3.79262352 -4.04288054]
[-13.78372002 -15.23117733]
[-23.88915443 -26.31631088]
[-33.99459076 -37.40144348]
[-44.10002518 -48.48657990]
[-56.07862473 -39.44015121]
[-68.84082794 -31.53757477]
[-82.27775574 -24.84626961]
[-96.27477264 -19.42332649]
[-110.71244049 -15.31501007]
[-125.46759796 -12.55637455]
[-140.41433716 -11.17095566]
[-155.42515564 -11.17057323]
[-170.37197876 -12.55523109]
[-185.12727356 -15.31311417]
[-199.56515503 -19.42069435]
[-213.56243896 -24.84292412]
[-226.99971008 -31.53354645]
[-239.76232910 -39.43547440]
[-251.74137878 -48.48128891]
[-262.83468628 -58.59381485]
[-272.94760132 -69.68677521]
[-281.99383545 -81.66552734]
[-289.89617920 -94.42786407]
[-296.58728027 -107.86490631]
[-302.00997925 -121.86200714]
[-306.11804199 -136.29974365]
[-308.87643433 -151.05494690]
[-310.26162720 -166.00170898]
[-310.26174927 -181.01252747]
[-308.87683105 -195.95933533]
[-306.11871338 -210.71458435]
[-302.01089478 -225.15238953]
[-296.58843994 -239.14958191]
[-289.89758301 -252.58674622]
[-281.99545288 -265.34921265]
[-272.94943237 -277.32812500]
[-262.83673096 -288.42126465]
[-251.74359131 -298.53399658]
[-239.76469421 -307.58001709]
[-227.00221252 -315.48217773]
[-213.56506348 -322.17303467]
[-199.56787109 -327.59552002]
[-185.13006592 -331.70333862]
[-170.37481689 -334.46148682]
[-155.42802429 -335.84640503]
[-140.41720581 -335.84628296]
[-125.47043610 -334.46112061]
[-110.71523285 -331.70275879]
[-96.27748871 -327.59469604]
[-82.28038025 -322.17199707]
[-68.84333038 -315.48092651]
[-56.08098602 -307.57858276]
[-44.10223007 -298.53237915]
[-33.00926208 -288.41946411]
[-22.89672279 -277.32617188]
[-13.85089493 -265.34713745]
[-5.94895601 -252.58451843]
[0.74167800 -239.14726257]
[6.16392279 -225.14997864]
[10.27151680 -210.71209717]
[13.02941418 -195.95680237]
[14.41408634 -181.00999451]
[14.41371918 -165.99917603]
[13.02831459 -151.05242920]
[10.26969337 -136.29727173]
[6.16139221 -121.85958862]
[0.73846167 -107.86257172]
[-5.95283031 -94.42563629]
[-13.85539532 -81.66342163]
[-22.90180969 -69.68481445]
[-33.01489258 -58.59201431]
[-22.90945625 -47.50687790]
[-12.80402184 -36.42174530]
[-2.69858670 -25.33661270]
[4.17426682 -22.49476814]
[7.49765682 -13.91858673]
[17.37336349 -2.62830663]
[27.24906921 8.66197395]
[37.12477493 19.95225334]
[50.26957703 14.94869804]
[64.36288452 14.74213409]
[77.70521545 19.37793922]
[88.68063354 28.31632423]
[95.95247650 40.49510574]
[98.62612915 54.45590591]
[96.35901642 68.51876831]
[89.40436554 80.98432159]
[99.04618073 92.47499084]
[102.90145874 84.71264648]
[111.30837250 79.35948944]
[122.92769623 78.38468933]
[135.68568420 83.09954834]
[150.11306763 87.20449066]
[164.54045105 91.30943298]
[178.96784973 95.41438293]
[189.93817139 84.66507721]
[204.81738281 80.85661316]
[219.60307312 85.01345062]
[230.31793213 96.01741028]
[234.07974243 110.90850067]
[229.87657166 125.68107605]
[218.83908081 136.36138916]
[203.93627930 140.07650757]
[189.17694092 135.82705688]
[178.53128052 124.75614166]
[174.86289978 109.84176636]
[160.43551636 105.73681641]
[146.00813293 101.63187408]
[131.58074951 97.52693176]
[125.64233398 102.10789490]
[136.33554077 112.62718201]
[147.02874756 123.14646912]
[161.39089966 127.47412872]
[169.19938660 140.28144836]
[166.46826172 155.03071594]
[154.59164429 164.19293213]
[139.63217163 163.09107971]
[129.22613525 152.28764343]
[128.68579102 137.29646301]
[121.22565460 124.28314209]
[113.76551056 111.26983643]
[107.82709503 115.85079956]
[108.13507080 130.84764099]
[108.44305420 145.84448242]
[108.75102997 160.84130859]
[109.05900574 175.83815002]
[109.36698151 190.83499146]
[109.67496490 205.83183289]
[109.98294067 220.82867432]
[110.29091644 235.82550049]
[112.87669373 255.03393555]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 151]
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 109]
[11 108]
[18 100]
[19 99]
[20 98]
[21 97]
[22 95]
[23 94]
[24 93]
[25 92]
[113 130]
[114 129]
[115 128]
[116 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
