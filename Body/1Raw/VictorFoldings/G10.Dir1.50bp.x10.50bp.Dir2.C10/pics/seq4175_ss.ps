%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGAACAACAUAUGACGCACUCUCCCCUGAACUCUACACAACAUAUUUUGUCACCAAGACCCxxxxxxxxxxAUAUUUUGUCACCAAGACCCUACUUCUAACCUCCCUGUUCUUAUGAAUUCGAACAGCAUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[121.16362762 273.91195679]
[123.75463104 254.70422363]
[124.06668091 239.70747375]
[124.37873840 224.71070862]
[124.69079590 209.71395874]
[125.00285339 194.71720886]
[125.31491089 179.72045898]
[125.62696838 164.72369385]
[125.93901825 149.72694397]
[126.25107574 134.73019409]
[126.56313324 119.73343658]
[95.98690033 129.24067688]
[75.78076172 109.28665924]
[60.82051468 110.37796783]
[45.86026764 111.46927643]
[30.90001678 112.56059265]
[17.69933701 121.28140259]
[4.44287300 114.49057007]
[-10.51737595 115.58187866]
[-25.47762489 116.67318726]
[-40.43787384 117.76449585]
[-55.39812088 118.85581207]
[-57.55093765 133.76148987]
[-62.85813141 147.85574341]
[-71.07146454 160.47933960]
[-81.80680084 171.04185486]
[-94.56201172 179.04925537]
[-108.74052429 184.12704468]
[-123.67918396 186.03768921]
[-138.67927551 184.69184875]
[-153.03923035 180.15246582]
[-166.08738708 172.63185120]
[-177.21347046 162.48176575]
[-185.89709473 150.17695618]
[-191.73211670 136.29290771]
[-194.44561768 121.47902679]
[-193.91067505 106.42818451]
[-190.15231323 91.84432983]
[-183.34631348 78.40958405]
[-173.81101990 66.75230408]
[-161.99240112 57.41772461]
[-148.44323730 50.84244919]
[-133.79725647 47.33400726]
[-118.73946381 47.05649567]
[-103.97414398 50.02289963]
[-90.19190979 56.09446716]
[-78.03736115 64.98722839]
[-68.07901001 76.28524780]
[-60.78260803 89.46009827]
[-56.48943329 103.89556122]
[-41.52918243 102.80425262]
[-26.56893539 101.71294403]
[-11.60868645 100.62162781]
[3.35156250 99.53031921]
[15.48218632 90.88756561]
[29.80870628 97.60034180]
[44.76895523 96.50903320]
[59.72920227 95.41771698]
[74.68945312 94.32640839]
[80.20208740 80.58831787]
[92.97811890 71.33267212]
[109.69277954 70.23561859]
[125.28923035 78.65840912]
[125.28923035 63.65840530]
[125.28923035 48.65840530]
[110.79170990 44.41592789]
[98.07743073 36.25971603]
[88.17708588 24.85095787]
[81.89324188 11.11451054]
[79.73530579 -3.83607531]
[81.87821960 -18.78882027]
[88.14826202 -32.53157425]
[98.03713989 -43.95027542]
[110.74321747 -52.11925507]
[125.23647308 -56.37629318]
[140.34199524 -56.37629318]
[154.83523560 -52.11925507]
[167.54132080 -43.95027542]
[177.43020630 -32.53157425]
[183.70024109 -18.78882027]
[185.84315491 -3.83607531]
[183.68521118 11.11451054]
[177.40138245 24.85095787]
[167.50102234 36.25971603]
[154.78674316 44.41592789]
[140.28923035 48.65840530]
[140.28923035 63.65840530]
[140.28923035 78.65840912]
[152.08587646 87.92335510]
[166.65856934 84.36859131]
[181.23127747 80.81383514]
[188.61633301 70.18769836]
[200.87506104 67.55277252]
[211.28459167 73.79368591]
[225.92808533 70.54286194]
[240.57159424 67.29203033]
[255.21508789 64.04120636]
[258.40600586 60.88215637]
[262.07617188 59.12122345]
[265.71377563 58.73436356]
[268.87002563 59.52947235]
[271.20962524 61.18279648]
[286.07269287 59.16046143]
[290.29406738 44.52831268]
[300.10690308 32.88235474]
[313.81103516 26.24031830]
[329.03213501 25.75297737]
[343.13308716 31.50476837]
[353.67080688 42.49915695]
[358.81954956 56.83129883]
[357.68728638 72.01806641]
[350.47018433 85.42825317]
[338.41864014 94.73847198]
[323.62063599 98.33567047]
[308.64007568 95.59660339]
[296.07238770 86.99584198]
[288.09503174 74.02351379]
[273.23196411 76.04584503]
[258.46591187 78.68470764]
[243.82241821 81.93553162]
[229.17890930 85.18636322]
[214.53541565 88.43718719]
[202.29927063 100.97818756]
[184.78604126 95.38653564]
[170.21333313 98.94129944]
[155.64062500 102.49605560]
[170.13362122 106.36299133]
[184.82402039 103.33110809]
[199.51026917 106.38301849]
[211.77647400 115.01668549]
[219.60484314 127.81186676]
[221.70759583 142.66375732]
[217.73884583 157.12919617]
[208.35144043 168.82862854]
[195.08963013 175.83747864]
[180.13496399 177.00280762]
[165.94749451 172.13291931]
[154.86108398 162.02888489]
[148.69943237 148.35284424]
[148.47586060 133.35598755]
[141.55989075 120.04549408]
[141.24783325 135.04225159]
[140.93577576 150.03900146]
[140.62371826 165.03575134]
[140.31166077 180.03251648]
[139.99960327 195.02926636]
[139.68754578 210.02601624]
[139.37548828 225.02276611]
[139.06343079 240.01953125]
[138.75138855 255.01628113]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 142]
[11 141]
[13 59]
[14 58]
[15 57]
[16 56]
[18 54]
[19 53]
[20 52]
[21 51]
[22 50]
[63 88]
[64 87]
[65 86]
[89 126]
[90 125]
[91 124]
[94 122]
[95 121]
[96 120]
[97 119]
[102 118]
[103 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
