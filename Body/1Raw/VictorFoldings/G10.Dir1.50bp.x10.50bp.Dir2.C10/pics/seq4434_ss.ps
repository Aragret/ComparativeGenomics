%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUACCCAUUACAAUCUCCAGCAUUCCCCCUCAAACCUAAGAAAUAUGUCUGAUAAAAGAGxxxxxxxxxxUUCGCCGACCGUUGACUAUUCUCUACAAACCACAAAGACAUUGGAACACUAUACCUAUUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 315.82177734]
[92.50000000 300.82177734]
[92.50000000 285.82177734]
[92.50000000 270.82177734]
[92.50000000 255.82177734]
[92.50000000 240.82177734]
[92.50000000 225.82177734]
[92.50000000 210.82177734]
[92.50000000 195.82177734]
[92.50000000 180.82177734]
[77.77803040 178.06788635]
[63.81266022 172.65594482]
[51.07939148 164.77024841]
[40.01176071 154.67926025]
[30.98659325 142.72656250]
[24.31117439 129.31913757]
[20.21278954 114.91345215]
[18.83097839 100.00000000]
[20.21278954 85.08654785]
[24.31117439 70.68086243]
[30.98659325 57.27343369]
[40.01176071 45.32074356]
[51.07939148 35.22975922]
[63.81266022 27.34405327]
[77.77803040 21.93211937]
[92.50000000 19.17822075]
[92.50000000 4.17822075]
[92.50000000 -10.82177925]
[92.50000000 -25.82177925]
[84.69049072 -13.01508141]
[74.18492126 -2.30840039]
[61.52859116 5.74252462]
[47.37844467 10.71980572]
[32.46894836 12.36509132]
[17.57399559 10.59298420]
[3.46671724 5.49546480]
[-9.12063694 -2.66287518]
[-19.53471184 -13.45857143]
[-27.23495483 -26.33126450]
[-31.82168198 -40.61278915]
[-33.05681610 -55.56185150]
[-30.87624168 -70.40251160]
[-25.39314651 -84.36444855]
[-16.89213562 -96.72295380]
[-5.81446028 -106.83656311]
[7.26488638 -114.18032074]
[21.66700935 -118.37303162]
[36.64435959 -119.19707489]
[51.41951752 -116.60968018]
[65.22557831 -110.74515533]
[77.34592438 -101.90788269]
[87.15143585 -90.55658722]
[94.13315582 -77.28045654]
[97.92868805 -62.76860428]
[98.34085083 -47.77228546]
[105.79576111 -60.78859711]
[113.25067139 -73.80490112]
[120.70558167 -86.82121277]
[128.16049194 -99.83752441]
[135.61540222 -112.85383606]
[123.48524475 -121.70383453]
[112.40229797 -131.83454895]
[102.50110626 -143.12303162]
[93.90185547 -155.43220520]
[86.70893860 -168.61270142]
[81.00966644 -182.50447083]
[76.87321472 -196.93890381]
[74.34981537 -211.74078369]
[73.47008514 -226.73042297]
[74.24470520 -241.72586060]
[76.66427612 -256.54507446]
[80.69942474 -271.00814819]
[86.30117035 -284.93954468]
[93.40151215 -298.17013550]
[101.91425323 -310.53930664]
[111.73606110 -321.89691162]
[122.74771118 -332.10507202]
[134.81552124 -341.03988647]
[147.79301453 -348.59289551]
[161.52264404 -354.67242432]
[175.83775330 -359.20462036]
[190.56455994 -362.13452148]
[205.52430725 -363.42651367]
[220.53538513 -363.06497192]
[235.41558838 -361.05422974]
[249.98425293 -357.41873169]
[264.06457520 -352.20257568]
[277.48559570 -345.46914673]
[290.08438110 -337.30007935]
[301.70806885 -327.79464722]
[312.21548462 -317.06814575]
[321.47909546 -305.25085449]
[329.38647461 -292.48620605]
[335.84158325 -278.92910767]
[340.76614380 -264.74420166]
[344.10028076 -250.10360718]
[345.80358887 -235.18510437]
[345.85537720 -220.16975403]
[344.25500488 -205.23985291]
[341.02191162 -190.57662964]
[336.19531250 -176.35807800]
[329.83386230 -162.75679016]
[322.01470947 -149.93788147]
[312.83282471 -138.05697632]
[302.39962769 -127.25827789]
[290.84179688 -117.67288208]
[278.29965210 -109.41714478]
[264.92538452 -102.59127808]
[250.88139343 -97.27814484]
[236.33813477 -93.54224396]
[221.47216797 -91.42892456]
[206.46394348 -90.96384430]
[191.49563599 -92.15264130]
[176.74897766 -94.98088837]
[162.40295410 -99.41425323]
[148.63171387 -105.39892578]
[141.17680359 -92.38261414]
[133.72189331 -79.36630249]
[126.26698303 -66.34999084]
[118.81207275 -53.33368683]
[111.35716248 -40.31737518]
[107.50000000 -25.82177925]
[107.50000000 -10.82177925]
[107.50000000 4.17822075]
[107.50000000 19.17822075]
[122.22196960 21.93211937]
[136.18733215 27.34405327]
[148.92060852 35.22975922]
[159.98823547 45.32074356]
[169.01341248 57.27343369]
[175.68882751 70.68086243]
[179.78721619 85.08654785]
[181.16902161 100.00000000]
[179.78721619 114.91345215]
[175.68882751 129.31913757]
[169.01341248 142.72656250]
[159.98823547 154.67926025]
[148.92060852 164.77024841]
[136.18733215 172.65594482]
[122.22196960 178.06788635]
[107.50000000 180.82177734]
[107.50000000 195.82177734]
[107.50000000 210.82177734]
[107.50000000 225.82177734]
[107.50000000 240.82177734]
[107.50000000 255.82177734]
[107.50000000 270.82177734]
[107.50000000 285.82177734]
[107.50000000 300.82177734]
[107.50000000 315.82177734]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[26 125]
[27 124]
[28 123]
[29 122]
[55 121]
[56 120]
[57 119]
[58 118]
[59 117]
[60 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
