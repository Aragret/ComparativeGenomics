%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAACAGCUAAGGACUGCAAAACCCCACUCUGCAUCAACUGAACGCAAAUCAGCCACUUUAxxxxxxxxxxUAUCGAAACCAUCAGCCUACUCAUUCAACCAAUAGCCCUGGCCGUACGCCUAACCGCUAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[94.32917023 279.66006470]
[94.32917023 264.66006470]
[94.32917023 249.66007996]
[94.32917023 234.66007996]
[94.32917023 219.66007996]
[94.32917023 204.66007996]
[94.32917023 189.66007996]
[94.32917023 174.66007996]
[94.32917023 159.66007996]
[94.32917023 144.66007996]
[78.15439606 137.51206970]
[66.53211212 125.04334259]
[60.97372818 109.60630035]
[61.90891647 93.86475372]
[68.68918610 80.33723450]
[79.77015686 70.99407196]
[73.99388123 57.15085602]
[68.21761322 43.30764008]
[62.44133759 29.46442223]
[54.71725464 16.60601997]
[45.20889664 5.00467825]
[35.70053864 -6.59666300]
[31.17165565 1.69704604]
[22.74829865 8.32867146]
[11.10245419 11.88528728]
[-3.71530414 14.21639156]
[-18.53306198 16.54749489]
[-33.35081863 18.87859917]
[-38.21065903 33.39205933]
[-49.26659775 43.97623825]
[-63.97806168 48.19896698]
[-78.96446228 45.08989334]
[-90.78203583 35.36346054]
[-96.71519470 21.25473022]
[-95.40053558 6.00578785]
[-87.14015961 -6.87927341]
[-73.83224487 -14.43955994]
[-58.53484726 -14.93777370]
[-44.76319885 -8.25942802]
[-35.68192291 4.06084108]
[-20.86416626 1.72973728]
[-6.04640818 -0.60136658]
[8.77134991 -2.93247056]
[13.15445328 -9.01838875]
[0.98276240 -17.78479767]
[9.74937344 -29.95634460]
[21.92066002 -21.19022560]
[26.30376434 -27.27614403]
[23.81864548 -42.06885147]
[21.33352661 -56.86155701]
[18.84840965 -71.65426636]
[3.82201338 -71.39912415]
[-11.07456303 -73.38649750]
[-25.50852585 -77.57199860]
[-39.15741348 -83.86210632]
[-51.71630859 -92.11631012]
[-62.90463638 -102.15019989]
[-72.47245026 -113.73961639]
[-80.20599365 -126.62565613]
[-85.93250275 -140.52043152]
[-89.52404785 -155.11352539]
[-90.90038300 -170.07893372]
[-90.03076935 -185.08230591]
[-86.93463135 -199.78848267]
[-81.68113708 -213.86891174]
[-74.38764954 -227.00903320]
[-65.21710968 -238.91528320]
[-54.37439728 -249.32168579]
[-42.10173416 -257.99575806]
[-28.67329788 -264.74371338]
[-14.38908482 -269.41476440]
[0.43178886 -271.90463257]
[15.45822048 -272.15762329]
[30.35451317 -270.16812134]
[44.78787994 -265.98056030]
[58.43587112 -259.68850708]
[70.99359131 -251.43252563]
[82.18048859 -241.39704895]
[91.74665070 -229.80625916]
[99.47836304 -216.91912842]
[105.20288849 -203.02352905]
[108.79235840 -188.42993164]
[110.16656494 -173.46432495]
[109.29480743 -158.46107483]
[106.19657898 -143.75534058]
[100.94107819 -129.67565918]
[93.64572144 -116.53657532]
[84.47348785 -104.63162994]
[73.62928772 -94.22676849]
[61.35539246 -85.55445862]
[47.92599487 -78.80842590]
[33.64111710 -74.13938141]
[36.12623596 -59.34667587]
[38.61135483 -44.55397034]
[41.09646988 -29.76126289]
[47.30187988 -16.10502052]
[56.81023788 -4.50368023]
[66.31859589 7.09766102]
[64.84564972 -7.82984447]
[69.09494019 -22.21537399]
[78.44254303 -33.94663239]
[91.51588440 -41.30106354]
[106.39535522 -43.19878006]
[120.89613342 -39.36113358]
[132.88899231 -30.35162163]
[140.61296082 -17.49315262]
[142.93391418 -2.67380023]
[139.51103210 11.93044090]
[130.84690857 24.17516136]
[118.21376801 32.26240921]
[103.46656799 35.00469589]
[88.77072144 31.99935722]
[76.28455353 23.68815041]
[82.06082916 37.53136826]
[87.83710480 51.37458420]
[93.61337280 65.21780396]
[112.85290527 64.47624207]
[130.87194824 74.26570892]
[142.01834106 92.95449066]
[142.09111023 115.96932220]
[155.33369446 123.01445770]
[168.57627869 130.05958557]
[184.27774048 126.76660919]
[196.54968262 137.09999084]
[195.97813416 153.13285828]
[183.00152588 162.56616211]
[167.57441711 158.16348267]
[161.53114319 143.30216980]
[148.28855896 136.25704956]
[135.04597473 129.21191406]
[128.61677551 133.07394409]
[136.86062622 145.60546875]
[145.10446167 158.13699341]
[157.74317932 166.21553040]
[157.53465271 181.21408081]
[144.67623901 188.93812561]
[131.33703613 182.07768250]
[130.14114380 167.12551880]
[122.94975281 153.96177673]
[115.75836945 140.79803467]
[109.32917023 144.66007996]
[109.32917023 159.66007996]
[109.32917023 174.66007996]
[109.32917023 189.66007996]
[109.32917023 204.66007996]
[109.32917023 219.66007996]
[109.32917023 234.66007996]
[109.32917023 249.66007996]
[109.32917023 264.66006470]
[109.32917023 279.66006470]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[16 116]
[17 115]
[18 114]
[19 113]
[20 98]
[21 97]
[22 96]
[25 43]
[26 42]
[27 41]
[28 40]
[48 95]
[49 94]
[50 93]
[51 92]
[120 130]
[121 129]
[122 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
