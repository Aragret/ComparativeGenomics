%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCUUUGGACACUAGGAAAAAACCUUGUAGAGAGAGUAAAAAAUUUAACACCCAUAGUAGGxxxxxxxxxxCCUCAUUCUAACCUGAAUCGGAGGACAACCAGUAAGCUACCCUUUUACCAUCAUUGGACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[104.49781799 255.04623413]
[104.49781799 240.04623413]
[104.49781799 225.04623413]
[104.49781799 210.04623413]
[104.49781799 195.04623413]
[104.49781799 180.04623413]
[104.49781799 165.04623413]
[104.49781799 150.04623413]
[104.49781799 135.04623413]
[104.49781799 120.04622650]
[91.88668823 111.92469025]
[78.23044586 118.13009644]
[64.57420349 124.33550262]
[50.91796494 130.54090881]
[37.26172256 136.74632263]
[31.63295555 151.27059937]
[17.69518661 157.36921692]
[3.88319349 151.91354370]
[-9.77304745 158.11895752]
[-23.42928886 164.32435608]
[-27.64414024 169.55337524]
[-33.06182861 171.52313232]
[-37.78512192 170.49063110]
[-51.68767548 176.12258911]
[-65.59023285 181.75454712]
[-71.52043152 196.40406799]
[-86.10487366 202.49253845]
[-100.69087219 196.40779114]
[-106.62480927 181.75979614]
[-100.38619232 167.23893738]
[-85.67626953 161.46020508]
[-71.22219086 167.85198975]
[-57.31963348 162.22003174]
[-43.41707611 156.58808899]
[-29.63469505 150.66812134]
[-15.97845459 144.46270752]
[-2.32221365 138.25730896]
[2.65255904 124.26490784]
[16.41353035 117.77720642]
[31.05631638 123.09007263]
[44.71255875 116.88466644]
[58.36879730 110.67926025]
[72.02503967 104.47385406]
[85.68128204 98.26844788]
[96.45208740 87.82863617]
[103.08058929 74.37266541]
[109.70908356 60.91670227]
[116.33758545 47.46073914]
[122.96608734 34.00477219]
[129.59458923 20.54880714]
[122.89206696 6.25171995]
[126.29859924 -8.77822113]
[116.31587219 -19.97398758]
[101.09463501 -17.46054649]
[86.93991852 -23.59630203]
[78.36843872 -36.42335510]
[78.11533356 -51.84864426]
[86.26136017 -64.95001221]
[100.20715332 -71.54685974]
[115.50266266 -69.53415680]
[127.26714325 -59.55414963]
[131.74659729 -44.79142761]
[127.51164246 -29.95671272]
[137.49436951 -18.76094818]
[146.68855286 -20.63784790]
[155.88273621 -18.76094818]
[165.86546326 -29.95671272]
[175.84819031 -41.15247726]
[185.83091736 -52.34824371]
[176.99340820 -65.15548706]
[171.46646118 -79.69194031]
[169.56477356 -95.11817932]
[171.39385986 -110.54441071]
[176.84414673 -125.08188629]
[185.59757996 -137.89402771]
[197.14611816 -148.24461365]
[210.82125854 -155.54005432]
[225.83274841 -159.36347961]
[241.31420898 -159.49850464]
[256.37313843 -155.94148254]
[270.14242554 -148.90150452]
[279.89007568 -160.30253601]
[289.63772583 -171.70355225]
[299.38537598 -183.10456848]
[308.89373779 -194.70591736]
[318.15869141 -206.50254822]
[327.42364502 -218.29919434]
[336.68859863 -230.09584045]
[334.55383301 -245.75527954]
[344.18359375 -258.28695679]
[359.86474609 -260.25604248]
[372.29391479 -250.49432373]
[374.09710693 -234.79324341]
[364.20449829 -222.46797180]
[348.48522949 -220.83088684]
[339.22027588 -209.03424072]
[329.95532227 -197.23760986]
[320.69036865 -185.44096375]
[320.37313843 -180.61656189]
[316.97885132 -175.95716858]
[310.78640747 -173.35691833]
[301.03875732 -161.95590210]
[291.29110718 -150.55488586]
[281.54345703 -139.15385437]
[290.15054321 -127.50377655]
[295.93966675 -114.21804047]
[298.61495972 -99.96721649]
[298.03778076 -85.47141266]
[294.23400879 -71.46387482]
[287.39273071 -58.65389252]
[277.85699463 -47.69091034]
[266.10647583 -39.13158035]
[252.73352051 -33.41150284]
[238.41311646 -30.82305527]
[223.86888123 -31.50046158]
[209.83654785 -35.41282272]
[197.02668762 -42.36551666]
[187.04396057 -31.16975212]
[177.06123352 -19.97398758]
[167.07850647 -8.77822113]
[169.91781616 8.21571064]
[160.31704712 22.86305618]
[143.05055237 27.17730522]
[136.42204285 40.63327026]
[129.79354858 54.08923721]
[123.16505432 67.54520416]
[116.53655243 81.00116730]
[109.90805817 94.45713043]
[122.17624664 85.82628632]
[133.68949890 76.21144867]
[148.17967224 72.33398438]
[162.95614624 74.91388702]
[175.27511597 83.47210693]
[182.84910583 96.41948700]
[184.27172852 111.35187531]
[179.27882385 125.49651337]
[168.79750061 136.22694397]
[154.77401733 141.55064392]
[139.81234741 140.47909546]
[126.68920135 133.20996094]
[119.49781799 120.04622650]
[119.49781799 135.04623413]
[119.49781799 150.04623413]
[119.49781799 165.04623413]
[119.49781799 180.04623413]
[119.49781799 195.04623413]
[119.49781799 210.04623413]
[119.49781799 225.04623413]
[119.49781799 240.04623413]
[119.49781799 255.04623413]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 44]
[12 43]
[13 42]
[14 41]
[15 40]
[18 37]
[19 36]
[20 35]
[23 34]
[24 33]
[25 32]
[45 128]
[46 127]
[47 126]
[48 125]
[49 124]
[50 123]
[52 64]
[53 63]
[66 120]
[67 119]
[68 118]
[69 117]
[81 104]
[82 103]
[83 102]
[84 101]
[85 98]
[86 97]
[87 96]
[88 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
