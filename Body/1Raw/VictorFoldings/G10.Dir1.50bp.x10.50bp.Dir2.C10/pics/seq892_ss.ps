%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACAUCACCCCAUAAACAAAUAGGUUUGGUCCUAGCCUUUCUAUUAGCUCUUAGUAAGAUUxxxxxxxxxxCCUAACCCCUGUCUUUAGAUUUACAGUCCAAUGCUUCACUCAGCCAUUUUACCUCACCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[82.60725403 562.15264893]
[82.60725403 547.15264893]
[82.60725403 532.15264893]
[82.60725403 517.15264893]
[82.60725403 502.15261841]
[82.60725403 487.15261841]
[82.60725403 472.15261841]
[82.60725403 457.15261841]
[82.60725403 442.15261841]
[82.60725403 427.15261841]
[69.86576080 424.68844604]
[57.76181412 419.99618530]
[46.68180847 413.22406006]
[36.97972488 404.58676147]
[28.96582985 394.35855103]
[22.89674187 382.86462402]
[18.96722031 370.47073364]
[17.30391312 357.57156372]
[17.96127510 344.57815552]
[20.91979218 331.90484619]
[26.08654976 319.95593262]
[33.29815292 309.11297607]
[42.32589722 299.72241211]
[52.88301086 292.08462524]
[64.63378143 286.44430542]
[77.20421600 282.98251343]
[90.19394684 281.81103516]
[91.75152588 266.89212036]
[93.30911255 251.97322083]
[94.86669159 237.05430603]
[92.41730499 230.02961731]
[96.61501312 221.84237671]
[98.48262787 206.95909119]
[100.35024261 192.07580566]
[100.50627899 177.07662964]
[98.94869232 162.15771484]
[97.39111328 147.23880005]
[95.83353424 132.31988525]
[85.05644989 128.95901489]
[76.07271576 122.12282562]
[69.96045685 112.63171387]
[67.45318604 101.62468719]
[68.85181427 90.42268372]
[55.91375732 82.83277130]
[42.97570419 75.24286652]
[29.66139221 82.89954376]
[14.30255795 82.85721588]
[1.03064966 75.12727356]
[-6.58425713 61.78903198]
[-6.49378967 46.43040466]
[1.27771568 33.18279266]
[14.63976383 25.60973167]
[29.99803162 25.74834061]
[43.22121811 33.56133270]
[50.75235748 46.94705200]
[50.56560898 62.30480957]
[63.50366592 69.89471436]
[76.44171906 77.48462677]
[82.07199097 72.78748322]
[88.60990906 69.46804047]
[86.74229431 54.58476257]
[84.87468719 39.70148468]
[83.00707245 24.81820297]
[68.14601135 21.98906326]
[54.88752747 14.70429325]
[44.53055954 3.67758155]
[38.08977127 -10.01078796]
[36.19617081 -25.01976585]
[39.03526688 -39.87892914]
[46.32892227 -53.13252640]
[57.36257172 -63.48210526]
[71.05525208 -69.91371918]
[86.06549835 -71.79726410]
[100.92275238 -68.94821167]
[114.17145538 -61.64567566]
[124.51364136 -50.60509491]
[130.93608093 -36.90810776]
[132.80957031 -21.89660454]
[129.95056152 -7.04125929]
[122.63915253 6.20255089]
[111.59163666 16.53733253]
[97.89035034 22.95059013]
[99.75796509 37.83386993]
[101.62557983 52.71715164]
[103.49319458 67.60043335]
[108.10486603 68.43663788]
[112.54888916 69.92575836]
[116.73332977 72.03698730]
[120.57163239 74.72664642]
[132.46400452 65.58490753]
[144.35638428 56.44317627]
[156.24876404 47.30144119]
[154.15132141 32.08643723]
[159.95722961 17.86719322]
[172.10475159 8.46860981]
[187.32624817 6.41885996]
[201.52722168 12.26931572]
[210.88768005 24.44623566]
[212.88970947 39.67408752]
[206.99478149 53.85665512]
[194.78857422 63.17890167]
[179.55451965 65.13318634]
[165.39050293 59.19382095]
[153.49812317 68.33555603]
[141.60574341 77.47728729]
[129.71336365 86.61902618]
[129.94207764 112.86105347]
[110.75244141 130.76229858]
[112.31002808 145.68121338]
[113.86760712 160.60012817]
[115.42518616 175.51904297]
[123.14764404 162.65966797]
[135.89433289 154.75256348]
[150.84577942 153.54673767]
[164.69488525 159.30888367]
[174.37834167 170.76448059]
[177.75425720 185.37965393]
[174.07592773 199.92164612]
[164.15695190 211.17393494]
[150.19129944 216.64758301]
[135.26808167 215.13189697]
[122.68814850 206.96211243]
[115.23352051 193.94342041]
[113.36590576 208.82670593]
[111.49829102 223.70999146]
[109.78560638 238.61189270]
[108.22801971 253.53079224]
[106.67044067 268.44970703]
[105.11286163 283.36862183]
[121.39734650 288.88641357]
[135.93440247 298.05398560]
[147.92034912 310.36038208]
[156.69358826 325.12115479]
[161.77099609 341.51657104]
[162.87458801 358.63711548]
[159.94676208 375.53378296]
[153.15324402 391.27099609]
[142.87373352 404.97802734]
[129.68066406 415.89749146]
[114.30735779 423.42703247]
[97.60725403 427.15261841]
[97.60725403 442.15261841]
[97.60725403 457.15261841]
[97.60725403 472.15261841]
[97.60725403 487.15261841]
[97.60725403 502.15261841]
[97.60725403 517.15264893]
[97.60725403 532.15264893]
[97.60725403 547.15264893]
[97.60725403 562.15264893]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[27 129]
[28 128]
[29 127]
[30 126]
[32 125]
[33 124]
[34 123]
[35 111]
[36 110]
[37 109]
[38 108]
[43 58]
[44 57]
[45 56]
[60 85]
[61 84]
[62 83]
[63 82]
[89 106]
[90 105]
[91 104]
[92 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
