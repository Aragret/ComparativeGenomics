%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCCUAGGCCUACCCGCCGCAGUACUGAUCAUUCUAUUUCCCCCUCUAUUGAUCCCCACCUxxxxxxxxxxCCAAACAACAAUCCCCCUCUACCUAAAACUCACAGCCCUCGCUGUCACUUUCCUAGGACUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[7.53954649 253.97619629]
[-0.71274257 266.50216675]
[-1.84380150 282.28289795]
[-15.30688572 288.65426636]
[-23.55917358 301.18023682]
[-31.81146431 313.70620728]
[-32.94252396 329.48693848]
[-46.40560532 335.85830688]
[-54.65789413 348.38427734]
[-62.91018295 360.91024780]
[-71.16247559 373.43621826]
[-69.35179138 389.37673950]
[-80.78718567 400.62890625]
[-96.69641113 398.56100464]
[-104.87525940 384.75933838]
[-99.04962921 369.81137085]
[-83.68843842 365.18392944]
[-75.43614960 352.65795898]
[-67.18386078 340.13198853]
[-58.93156815 327.60601807]
[-58.39076996 312.72125244]
[-44.33742523 305.45391846]
[-36.08513641 292.92794800]
[-27.83284760 280.40197754]
[-27.29204750 265.51721191]
[-13.23870468 258.24987793]
[-4.98641539 245.72390747]
[-26.20522881 227.78828430]
[-44.40394974 206.79467773]
[-59.14708328 183.24548340]
[-70.08182526 157.70422363]
[-76.94651031 130.78208923]
[-79.57686615 103.12335205]
[-77.90994263 75.38986969]
[-71.98563385 48.24530792]
[-61.94570541 22.33923531]
[-75.18828583 15.29409981]
[-88.43087769 8.24896526]
[-101.67346191 1.20383024]
[-114.91604614 -5.84130478]
[-125.78794098 4.67806435]
[-139.37927246 11.32115746]
[-154.35852051 13.43715286]
[-169.25816345 10.81874561]
[-182.61846924 3.72246146]
[-193.13055420 -7.15647793]
[-199.76454163 -20.75226593]
[-201.87049866 -35.73292542]
[-199.24209595 -50.63080215]
[-192.13687134 -63.98635483]
[-181.25088501 -74.49114227]
[-167.65066528 -81.11602020]
[-152.66859436 -83.21193695]
[-137.77247620 -80.57356262]
[-124.42169189 -73.45938110]
[-113.92419434 -62.56636429]
[-107.30844116 -48.96170044]
[-105.22255707 -33.97823334]
[-107.87091064 -19.08389091]
[-94.62832642 -12.03875542]
[-81.38574219 -4.99362040]
[-68.14315796 2.05151439]
[-54.90056992 9.09664917]
[-49.48132324 0.43625432]
[-43.57842636 -7.90199852]
[-37.21097183 -15.89113045]
[-30.39957047 -23.50529289]
[-23.16625595 -30.71984863]
[-15.53443146 -37.51145554]
[-7.52879143 -43.85813904]
[0.82476217 -49.73936462]
[9.49920082 -55.13610458]
[18.46645737 -60.03089523]
[27.69751930 -64.40789795]
[37.16251755 -68.25295258]
[46.83082962 -71.55361938]
[56.67117310 -74.29921722]
[66.65171051 -76.48086548]
[76.74014282 -78.09150696]
[86.90383911 -79.12592316]
[97.10990143 -79.58077240]
[107.32531738 -79.45457458]
[117.51703644 -78.74774933]
[127.65207672 -77.46258545]
[137.69764709 -75.60322571]
[147.62124634 -73.17569733]
[157.39076233 -70.18785858]
[166.97457886 -66.64936066]
[176.34172058 -62.57167053]
[185.46183777 -57.96797180]
[194.30543518 -52.85316086]
[202.84391785 -47.24378967]
[211.04963684 -41.15800476]
[218.89605713 -34.61549759]
[226.35778809 -27.63743591]
[233.41067505 -20.24640083]
[240.03190613 -12.46630287]
[246.20007324 -4.32231665]
[251.89518738 4.15920830]
[257.09884644 12.95083046]
[261.79421997 22.02410316]
[265.96606445 31.34966850]
[269.60095215 40.89735413]
[272.68707275 50.63627243]
[275.21447754 60.53490448]
[277.17495728 70.56123352]
[278.56216431 80.68280792]
[279.37164307 90.86688232]
[279.60076904 101.08050537]
[279.24877930 111.29064178]
[278.31683350 121.46424103]
[276.80792236 131.56838989]
[291.45141602 134.81921387]
[306.09494019 138.07003784]
[320.73843384 141.32086182]
[335.38192749 144.57168579]
[350.85241699 139.13148499]
[363.12115479 150.01313782]
[359.56710815 166.02253723]
[343.84637451 170.69058228]
[332.13110352 159.21519470]
[317.48760986 155.96437073]
[302.84411621 152.71354675]
[288.20059204 149.46272278]
[273.55709839 146.21188354]
[269.98306274 157.99450684]
[265.61013794 169.50456238]
[260.45889282 180.68795776]
[254.55352783 191.49214172]
[247.92178345 201.86633301]
[240.59484863 211.76177979]
[232.60714722 221.13195801]
[223.99621582 229.93284607]
[214.80252075 238.12307739]
[205.06929016 245.66416931]
[194.84225464 252.52066040]
[184.16947937 258.66033936]
[173.10113525 264.05435181]
[161.68922424 268.67733765]
[149.98738098 272.50759888]
[138.05061340 275.52706909]
[125.93502045 277.72164917]
[113.69753265 279.08093262]
[101.39566803 279.59860229]
[89.08724976 279.27218628]
[76.83011627 278.10324097]
[64.68187714 276.09722900]
[52.69962311 273.26361084]
[40.93967438 269.61569214]
[29.45729446 265.17062378]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 27]
[2 26]
[4 24]
[5 23]
[6 22]
[8 20]
[9 19]
[10 18]
[11 17]
[36 63]
[37 62]
[38 61]
[39 60]
[40 59]
[112 125]
[113 124]
[114 123]
[115 122]
[116 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
