%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAAGAUUACACAUGCAAGCAUCCCCGUUCCAGUGAGUUCACCCUCUAAAUCACCACGAUCxxxxxxxxxxGCCAUGGCCAUCCCCUUAUGAGCGGGCACAGUGAUUAUAGGCUUUCGCUCUAAGAUUAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[118.85136414 585.14166260]
[118.85136414 570.14166260]
[118.85136414 555.14166260]
[118.85136414 540.14166260]
[118.85136414 525.14166260]
[118.85136414 510.14163208]
[118.85136414 495.14163208]
[118.85136414 480.14163208]
[118.85136414 465.14163208]
[118.85136414 450.14163208]
[104.64508057 447.08602905]
[91.38477325 441.12817383]
[79.65640259 432.52850342]
[69.97880554 421.66436768]
[62.78076172 409.01324463]
[58.38198853 395.13192749]
[56.97893906 380.63198853]
[58.63602829 366.15277100]
[63.28268814 352.33319092]
[70.71635437 339.78372192]
[80.61132812 329.05917358]
[92.53298950 320.63433838]
[105.95693970 314.88293457]
[120.29205322 312.06094360]
[120.60411072 297.06420898]
[120.60411072 282.06420898]
[120.29205322 267.06744385]
[119.98000336 252.07069397]
[119.66794586 237.07392883]
[118.57663727 222.11369324]
[116.70902252 207.23040771]
[114.84140778 192.34712219]
[112.04907990 177.60931396]
[108.34291840 163.07438660]
[104.63676453 148.53944397]
[100.93060303 134.00451660]
[97.22444153 119.46957397]
[81.77243042 107.38402557]
[84.45641327 87.95155334]
[77.00150299 74.93524170]
[69.54659271 61.91893387]
[59.44794464 50.82761765]
[47.18557739 42.18849945]
[34.92321014 33.54938507]
[22.66084099 24.91026878]
[6.92309237 23.28735733]
[0.97488827 9.63202381]
[-11.28747940 0.99290735]
[-25.92967224 6.12962246]
[-40.78504944 1.64660621]
[-50.14141083 -10.73233032]
[-50.40105057 -26.24723244]
[-41.46413040 -38.93230438]
[-26.76707840 -43.90987778]
[-11.96120834 -39.26597214]
[-2.73968172 -26.78626823]
[-2.64836383 -11.26946068]
[9.61400414 -2.63034463]
[24.47466660 -1.62536097]
[31.29995728 12.64789963]
[43.56232452 21.28701591]
[55.82469177 29.92613220]
[68.08705902 38.56524658]
[62.08330154 24.81916237]
[59.93506622 9.97379017]
[61.79582214 -4.91034842]
[67.53263855 -18.76996422]
[76.73568726 -30.61495399]
[88.74753571 -39.59914017]
[102.71006775 -45.08071518]
[117.62583923 -46.66807938]
[132.42930603 -44.24784470]
[146.06292725 -37.99289703]
[157.55274963 -28.35008430]
[166.07797241 -16.00826454]
[171.02957153 -1.84911025]
[172.05381775 13.11588001]
[169.07754517 27.81764030]
[162.31335449 41.20590591]
[152.24446106 52.32425690]
[139.59019470 60.37841415]
[125.25453186 64.79300690]
[110.26157379 65.25267792]
[95.68239594 61.72457504]
[82.56290436 54.46401978]
[90.01781464 67.48033142]
[97.47272491 80.49664307]
[102.65147400 80.51313782]
[107.64635468 81.88091278]
[118.30798340 71.32962036]
[128.96960449 60.77833176]
[128.80117798 44.97494125]
[139.91630554 33.73975372]
[155.72059631 33.73840714]
[166.83763123 44.97170258]
[166.67189026 60.77512360]
[155.32168579 71.77278137]
[139.52090454 71.43995667]
[128.85926819 81.99124908]
[118.19764709 92.54254150]
[118.95146942 105.25452423]
[111.75937653 115.76341248]
[115.46553802 130.29835510]
[119.17169952 144.83328247]
[122.87786102 159.36822510]
[126.58402252 173.90315247]
[135.50114441 161.84144592]
[150.30566406 159.42770386]
[162.59225464 168.03234863]
[165.38514709 182.77003479]
[157.09867859 195.27340698]
[142.43751526 198.44361877]
[129.72468567 190.47950745]
[131.59230042 205.36279297]
[133.45991516 220.24607849]
[144.83084106 210.46333313]
[159.60713196 213.04428101]
[166.98851013 226.10243225]
[161.57978821 240.09333801]
[147.33428955 244.79078674]
[134.66470337 236.76188660]
[134.97676086 251.75863647]
[135.28880310 266.75540161]
[135.60086060 281.75213623]
[138.74195862 287.68856812]
[138.41366577 293.44384766]
[135.60086060 297.37625122]
[135.28880310 312.37301636]
[150.34300232 316.09698486]
[164.19187927 323.06042480]
[176.14854431 332.91458130]
[185.62072754 345.16726685]
[192.14009094 359.20767212]
[195.38542175 374.33670044]
[195.19847107 389.80181885]
[191.59156799 404.83447266]
[184.74700928 418.68823242]
[175.00769043 430.67596436]
[162.86006165 440.20385742]
[148.90974426 446.80075073]
[133.85136414 450.14163208]
[133.85136414 465.14163208]
[133.85136414 480.14163208]
[133.85136414 495.14163208]
[133.85136414 510.14163208]
[133.85136414 525.14166260]
[133.85136414 540.14166260]
[133.85136414 555.14166260]
[133.85136414 570.14166260]
[133.85136414 585.14166260]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[24 128]
[25 127]
[26 124]
[27 123]
[28 122]
[29 121]
[30 115]
[31 114]
[32 113]
[33 106]
[34 105]
[35 104]
[36 103]
[37 102]
[39 87]
[40 86]
[41 85]
[42 63]
[43 62]
[44 61]
[45 60]
[47 58]
[48 57]
[89 100]
[90 99]
[91 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
