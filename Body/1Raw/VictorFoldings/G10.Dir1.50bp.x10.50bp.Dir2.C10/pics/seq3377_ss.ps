%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAUAUACAACUACGCAAAGGCCCCAACGUUGUAGGCCCCUACGGGCUACUACAACCCUUCxxxxxxxxxxACCCUACUCCUAAUCACAUAACCUAUUCCCCCGAGCAAUCUCAAUUACAAUAUAUACACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[143.78656006 168.17411804]
[133.12492371 157.62281799]
[122.46330261 147.07153320]
[111.80167389 136.52024841]
[101.14004517 125.96895599]
[83.66841888 102.23710632]
[70.14423370 95.74893951]
[56.62004089 89.26077271]
[43.09585190 82.77260590]
[29.57166100 76.28444672]
[16.04747200 69.79627991]
[2.52328134 63.30811310]
[-6.70655060 75.66606140]
[-18.15630531 85.99412537]
[-31.38917542 93.90070343]
[-45.90079117 99.08654785]
[-61.13846207 101.35604858]
[-76.52220154 100.62464142]
[-91.46682739 96.92195892]
[-105.40419769 90.39060974]
[-117.80484772 81.28070831]
[-128.19804382 69.94028473]
[-136.18971252 56.80200958]
[-141.47735596 42.36665344]
[-143.86149597 27.18402863]
[-143.25318909 11.83203411]
[-139.67738342 -3.10533571]
[-153.33363342 -9.31074238]
[-166.98986816 -15.51614952]
[-180.64611816 -21.72155762]
[-175.75009155 -7.54308605]
[-180.94940186 6.52699709]
[-193.88868713 14.11480713]
[-208.70632935 11.78299141]
[-218.68980408 0.58788615]
[-219.31648254 -14.39901733]
[-210.30247498 -26.38850403]
[-195.73083496 -29.94917870]
[-208.34196472 -38.07072067]
[-220.95307922 -46.19226456]
[-233.56420898 -54.31380463]
[-246.17533875 -62.43534851]
[-258.78646851 -70.55689240]
[-271.39758301 -78.67842865]
[-284.17495728 -86.53585815]
[-297.11300659 -94.12576294]
[-310.05105591 -101.71567535]
[-322.98913574 -109.30558014]
[-339.38269043 -108.87817383]
[-347.71774292 -123.00117493]
[-339.41986084 -137.14604187]
[-323.02523804 -136.76176453]
[-315.39920044 -122.24363708]
[-302.46115112 -114.65373230]
[-289.52310181 -107.06381989]
[-276.58505249 -99.47391510]
[-271.76193237 -99.81001282]
[-266.68743896 -97.07488251]
[-263.27606201 -91.28955841]
[-250.66493225 -83.16801453]
[-238.05380249 -75.04647827]
[-225.44267273 -66.92493439]
[-212.83154297 -58.80339050]
[-200.22041321 -50.68185043]
[-187.60928345 -42.56030655]
[-174.44070435 -35.37779617]
[-160.78446960 -29.17239189]
[-147.12821960 -22.96698380]
[-133.47198486 -16.76157761]
[-125.06561279 -28.70595551]
[-114.59493256 -38.89520645]
[-102.41912079 -46.97768402]
[-88.95624542 -52.67403412]
[-74.66889191 -55.78687286]
[-60.04828262 -56.20761490]
[-45.59740067 -53.92025757]
[-31.81365585 -49.00199127]
[-19.17179108 -41.62058258]
[-8.10751247 -32.02867889]
[0.99751651 -20.55512810]
[7.82884407 -7.59372568]
[12.15009022 6.41030598]
[13.81112576 20.97561264]
[12.75328732 35.60125351]
[9.01144600 49.78392410]
[22.53563690 56.27208710]
[36.05982590 62.76025391]
[49.58401489 69.24842072]
[63.10820770 75.73658752]
[76.63239288 82.22474670]
[90.15658569 88.71291351]
[105.12738037 87.77728271]
[117.73850250 79.65574646]
[130.34963989 71.53420258]
[129.52418518 56.19750595]
[136.49198914 42.51008987]
[149.37872314 34.15379333]
[164.71792603 33.37642670]
[178.38343811 40.38708878]
[186.69929504 53.29995346]
[187.42857361 68.64152527]
[180.37510681 82.28498840]
[167.43624878 90.56033325]
[152.09246826 91.24152374]
[138.47117615 84.14533234]
[125.86004639 92.26686859]
[113.24891663 100.38841248]
[111.69133759 115.30732727]
[122.35296631 125.85861969]
[133.01458740 136.40991211]
[143.67622375 146.96119690]
[154.33784485 157.51248169]
[167.65299988 164.41947937]
[182.41905212 167.05834961]
[197.18510437 169.69721985]
[212.41590881 163.61816406]
[225.12667847 173.98004150]
[222.24166870 190.12341309]
[206.72872925 195.44139099]
[194.54624939 184.46327209]
[179.78019714 181.82440186]
[165.01412964 179.18554688]
[176.12290955 189.26498413]
[185.02171326 201.34020996]
[191.35984802 214.93536377]
[194.88751221 229.51464844]
[195.46571350 244.50349426]
[193.07162476 259.31121826]
[187.79962158 273.35421753]
[179.85746765 286.07910156]
[169.55816650 296.98434448]
[157.30760193 305.64016724]
[143.58857727 311.70550537]
[128.94174194 314.94128418]
[113.94433594 315.21997070]
[99.18739319 312.53060913]
[85.25248718 306.97918701]
[72.68878174 298.78445435]
[61.99142456 288.26940918]
[53.58198547 275.84838867]
[47.79188156 262.01095581]
[44.84929276 247.30242920]
[44.87019730 232.30244446]
[47.85376358 217.60215759]
[53.68240738 203.78091431]
[62.12643433 191.38339233]
[72.85305786 180.89817810]
[85.43954468 172.73851013]
[99.38986969 167.22593689]
[114.15425110 164.57771301]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 112]
[2 111]
[3 110]
[4 109]
[5 108]
[6 91]
[7 90]
[8 89]
[9 88]
[10 87]
[11 86]
[12 85]
[27 69]
[28 68]
[29 67]
[30 66]
[38 65]
[39 64]
[40 63]
[41 62]
[42 61]
[43 60]
[44 59]
[45 56]
[46 55]
[47 54]
[48 53]
[92 107]
[93 106]
[94 105]
[113 122]
[114 121]
[115 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
