%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCACACUCAACAGAAACAAAGCAUACAUCAUUAUUCUCGCACGGACUACAACCACGACCxxxxxxxxxxUUGGGACAGACCUAGUUCAAUGAAUCUGAGGAGGCUACUCAGUAGACAGUCCCACCCUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[77.98287201 265.73284912]
[77.98287201 250.73284912]
[77.98287201 235.73284912]
[77.98287201 220.73284912]
[77.98287201 205.73284912]
[77.98287201 190.73284912]
[77.98287201 175.73284912]
[77.98287201 160.73284912]
[77.98287201 145.73284912]
[77.98287201 130.73284912]
[69.86132812 118.12172699]
[56.20508957 111.91632080]
[42.54884720 105.71091461]
[28.89260674 99.50550842]
[21.46628952 112.55023956]
[12.88450623 124.86560059]
[3.21837211 136.34954834]
[-7.45201445 146.90692139]
[-19.03823471 156.45024109]
[-31.44427681 164.90040588]
[-44.56734085 172.18740845]
[-58.29868317 178.25085449]
[-72.52452087 183.04052734]
[-87.12696075 186.51670837]
[-101.98501587 188.65060425]
[-116.97555542 189.42451477]
[-131.97436523 188.83206177]
[-146.85714722 186.87812805]
[-161.50059509 183.57890320]
[-175.78335571 178.96174622]
[-189.58706665 173.06491089]
[-202.79734802 165.93724060]
[-215.30474854 157.63783264]
[-227.00559998 148.23542786]
[-237.80296326 137.80795288]
[-247.60736084 126.44181824]
[-256.33755493 114.23120117]
[-263.92117310 101.27729797]
[-270.29544067 87.68743896]
[-275.40744019 73.57423401]
[-279.21490479 59.05464172]
[-281.68621826 44.24897385]
[-282.80093384 29.27991867]
[-282.54983521 14.27151489]
[-280.93493652 -0.65186900]
[-277.96966553 -15.36657143]
[-273.67861938 -29.75065994]
[-268.09729004 -43.68494034]
[-261.27197266 -57.05394363]
[-253.25921631 -69.74689484]
[-244.12541199 -81.65859985]
[-233.94625854 -92.69036865]
[-222.80609131 -102.75078583]
[-210.79722595 -111.75646973]
[-198.01918030 -119.63281250]
[-184.57783508 -126.31453705]
[-170.58456421 -131.74627686]
[-156.15533447 -135.88302612]
[-141.40971375 -138.69050598]
[-126.46989441 -140.14544678]
[-111.45966339 -140.23579407]
[-96.50340271 -138.96080017]
[-81.72505951 -136.33102417]
[-67.24707794 -132.36827087]
[-53.18944550 -127.10536957]
[-39.66864014 -120.58592987]
[-26.79670715 -112.86397552]
[-14.68030643 -104.00350189]
[-3.41984200 -94.07791901]
[6.89137745 -83.16947937]
[16.16790771 -71.36858368]
[24.33288002 -58.77300644]
[31.31863213 -45.48713303]
[37.06727982 -31.62104797]
[41.53118896 -17.28965569]
[44.67336273 -2.61171436]
[46.46776962 12.29114914]
[46.89953995 27.29544258]
[45.96509171 42.27683258]
[43.67217255 57.11117554]
[40.03977966 71.67555237]
[35.09801483 85.84926605]
[48.75425720 92.05467224]
[62.41049576 98.26007843]
[76.06673431 104.46548462]
[75.55081177 76.44516754]
[106.38804626 56.91758728]
[118.28042603 47.77585220]
[130.17280579 38.63412094]
[142.06518555 29.49238586]
[127.87358856 24.63453674]
[122.62303162 10.58350086]
[130.15122986 -2.39055300]
[144.95570374 -4.80464125]
[156.21556091 5.10573959]
[155.70106506 20.09631729]
[168.47842407 12.23889160]
[181.25578308 4.38146639]
[191.58068848 -9.06593704]
[207.36077881 -2.86714387]
[205.77259827 14.01225281]
[189.11320496 17.15882301]
[176.33584595 25.01624870]
[163.55848694 32.87367630]
[151.20690918 41.38476562]
[139.31452942 50.52650070]
[127.42215729 59.66823196]
[115.52977753 68.80996704]
[116.92594147 76.17887115]
[131.66378784 73.38677216]
[134.45565796 88.12466431]
[119.71826172 90.91667938]
[121.11442566 98.28558350]
[136.51855469 94.67677307]
[146.60237122 105.63878632]
[161.01458740 109.79667664]
[175.42680359 113.95455933]
[189.83901978 118.11244965]
[206.73348999 116.69352722]
[212.77381897 132.53495789]
[199.22360229 142.72456360]
[185.68113708 132.52467346]
[171.26892090 128.36677551]
[156.85670471 124.20889282]
[142.44448853 120.05100250]
[128.07122803 123.95720673]
[116.95653534 112.69779205]
[110.96311951 117.20655823]
[121.61763763 127.76503754]
[132.27214050 138.32350159]
[142.92665100 148.88198853]
[155.79821777 156.58410645]
[159.48908997 171.12294006]
[151.84992981 184.03196716]
[137.32929993 187.79380798]
[124.38310242 180.21780396]
[120.55043793 165.71530151]
[113.35905457 152.55157471]
[106.16767120 139.38783264]
[98.97628784 126.22409058]
[92.98287201 130.73284912]
[92.98287201 145.73284912]
[92.98287201 160.73284912]
[92.98287201 175.73284912]
[92.98287201 190.73284912]
[92.98287201 205.73284912]
[92.98287201 220.73284912]
[92.98287201 235.73284912]
[92.98287201 250.73284912]
[92.98287201 265.73284912]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 85]
[12 84]
[13 83]
[14 82]
[87 108]
[88 107]
[89 106]
[90 105]
[96 104]
[97 103]
[98 102]
[113 127]
[115 125]
[116 124]
[117 123]
[118 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
