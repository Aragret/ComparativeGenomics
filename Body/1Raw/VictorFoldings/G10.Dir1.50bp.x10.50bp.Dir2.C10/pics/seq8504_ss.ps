%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAACCUAGCCAUGGCCAUCCCCUUAUGAGCGGGCACAGUGAUUAUAGGCUUUCGCUCUAAxxxxxxxxxxCUGCACGACAACACAUAAUGACCCACCAAUCACAUGCCUAUCAUAUAGUAAAACCCAGCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 299.09490967]
[92.50000000 284.09490967]
[92.50000000 269.09490967]
[92.50000000 254.09492493]
[92.50000000 239.09492493]
[92.50000000 224.09492493]
[92.50000000 209.09492493]
[92.50000000 194.09492493]
[92.50000000 179.09492493]
[92.50000000 164.09492493]
[83.66634369 162.43092346]
[75.14962006 159.55557251]
[67.11505890 155.52467346]
[59.71857452 150.41641235]
[49.05694962 160.96771240]
[50.51904678 176.53678894]
[41.58897781 189.37376404]
[26.48325157 193.41740417]
[12.33432770 186.75842285]
[5.82289505 172.54100037]
[10.02345371 157.47814941]
[22.95262909 148.68211365]
[38.50565720 150.30607605]
[49.16728210 139.75479126]
[39.96536255 123.66962433]
[35.71405792 105.63259125]
[36.76393890 87.13108826]
[43.02842712 69.69078064]
[53.99094391 54.74985886]
[68.74748993 43.54037476]
[86.08119965 36.98670578]
[104.56268311 35.62927246]
[107.35501099 20.89146805]
[109.99387360 6.12541199]
[112.47898865 -8.66729546]
[114.96411133 -23.46000290]
[117.44922638 -38.25270844]
[119.93434906 -53.04541779]
[113.08541107 -64.02475739]
[115.50244141 -76.32828522]
[125.34502411 -83.42976379]
[128.13734436 -98.16757202]
[130.92967224 -112.90537262]
[133.72200012 -127.64318085]
[136.51432800 -142.38098145]
[129.89527893 -153.50042725]
[132.56774902 -165.75102234]
[142.55593872 -172.64619446]
[145.65425110 -187.32272339]
[148.75257874 -201.99925232]
[151.85090637 -216.67578125]
[154.94921875 -231.35229492]
[158.04754639 -246.02882385]
[147.82183838 -257.55017090]
[146.35810852 -272.70635986]
[154.00907898 -285.66500854]
[167.66014099 -291.56301880]
[170.75846863 -306.23956299]
[156.92839050 -315.68389893]
[149.95649719 -332.60861206]
[153.66833496 -352.12344360]
[168.50698853 -367.58126831]
[168.19494629 -382.57803345]
[167.88288879 -397.57476807]
[153.26165771 -401.33273315]
[140.19708252 -408.89709473]
[129.65863037 -419.70651245]
[122.42835236 -432.95889282]
[119.04275513 -447.67080688]
[119.75308228 -462.75051880]
[124.50662994 -477.07904053]
[132.95063782 -489.59307861]
[144.45852661 -499.36401367]
[158.17631531 -505.66680908]
[173.08604431 -508.03369141]
[188.08134460 -506.28906250]
[202.04943848 -500.56237793]
[213.95381165 -491.27862549]
[222.91108704 -479.12667847]
[228.25656128 -465.00830078]
[229.59356689 -449.97116089]
[226.82290649 -435.13116455]
[220.15014648 -421.58947754]
[210.07048035 -410.35101318]
[197.33189392 -402.24975586]
[182.87963867 -397.88684082]
[183.19169617 -382.89007568]
[183.50375366 -367.89334106]
[190.36376953 -364.86181641]
[202.47434998 -373.71249390]
[204.08383179 -358.79879761]
[210.94386292 -355.76730347]
[222.24285889 -365.63302612]
[224.75703430 -381.47784424]
[238.78309631 -389.26562500]
[253.56144714 -383.02221680]
[257.75540161 -367.53704834]
[248.14770508 -354.68899536]
[232.10858154 -354.33401489]
[220.80958557 -344.46829224]
[218.01176453 -321.56088257]
[203.72769165 -306.40557861]
[185.43499756 -303.14123535]
[182.33666992 -288.46469116]
[192.43891907 -277.55221558]
[194.19914246 -262.60678101]
[186.73414612 -249.33547974]
[172.72407532 -242.93049622]
[169.62574768 -228.25398254]
[166.52742004 -213.57745361]
[163.42910767 -198.90092468]
[160.33078003 -184.22439575]
[157.23246765 -169.54788208]
[163.58796692 -153.21975708]
[151.25212097 -139.58866882]
[148.45980835 -124.85086060]
[145.66748047 -110.11305237]
[142.87515259 -95.37524414]
[140.08282471 -80.63744354]
[146.77665710 -64.44507599]
[134.72705078 -50.56029892]
[132.24194336 -35.76758957]
[129.75682068 -20.97488403]
[127.27169800 -6.18217707]
[124.78658295 8.61052990]
[126.79302979 15.77431488]
[122.09281158 23.68379211]
[119.30049133 38.42159653]
[131.67581177 43.77677536]
[142.66810608 51.58677292]
[151.79742432 61.51058960]
[158.66516113 73.11493683]
[162.97146606 85.89313507]
[164.52828979 99.28727722]
[163.26768494 112.71253204]
[159.24468994 125.58273315]
[152.63493347 137.33593750]
[143.72703552 147.45898438]
[132.90992737 155.50987244]
[120.65590668 161.13706970]
[107.50000000 164.09492493]
[107.50000000 179.09492493]
[107.50000000 194.09492493]
[107.50000000 209.09492493]
[107.50000000 224.09492493]
[107.50000000 239.09492493]
[107.50000000 254.09492493]
[107.50000000 269.09490967]
[107.50000000 284.09490967]
[107.50000000 299.09490967]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[14 24]
[15 23]
[32 128]
[33 127]
[34 125]
[35 124]
[36 123]
[37 122]
[38 121]
[41 119]
[42 118]
[43 117]
[44 116]
[45 115]
[48 113]
[49 112]
[50 111]
[51 110]
[52 109]
[53 108]
[57 104]
[58 103]
[62 88]
[63 87]
[64 86]
[92 100]
[93 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
