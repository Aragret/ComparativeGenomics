%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUACCCCUCACAAUCAUGGCAAGCCAACGCCACUUAUCCAGUGAACCACUAUCACGAAAxxxxxxxxxxACACACCGCACAAUCCCCUAUCUAGGCCUUCUUACGAGCCAAAACCUGCCCCUACUCCUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[31.82493019 280.57189941]
[21.09699249 276.14871216]
[10.65424538 271.08883667]
[10.50971508 286.90939331]
[-2.52973557 294.10815430]
[-9.98464584 307.12445068]
[-17.43955612 320.14074707]
[-24.89446640 333.15707397]
[-32.34937668 346.17337036]
[-39.80428696 359.18969727]
[-39.20637131 375.57794189]
[-53.24190140 384.05944824]
[-67.47232819 375.90914917]
[-67.25860596 359.51141357]
[-52.82059479 351.73477173]
[-45.36568451 338.71847534]
[-37.91077423 325.70214844]
[-30.45586586 312.68585205]
[-23.00095558 299.66952515]
[-15.54604530 286.65322876]
[-15.93474007 271.76370239]
[-2.36206388 263.63394165]
[-25.15979767 246.93223572]
[-45.27425003 227.08047485]
[-62.27419662 204.50427246]
[-75.79517365 179.68760681]
[-85.54730225 153.16253662]
[-91.32151794 125.49772644]
[-106.25582123 126.90002441]
[-121.19013214 128.30233765]
[-136.12443542 129.70463562]
[-143.91543579 143.12402344]
[-158.11979675 149.37028503]
[-173.27563477 146.04162598]
[-183.55523682 134.41796875]
[-185.00588989 118.96885681]
[-177.06976318 105.63477325]
[-162.79849243 99.54296112]
[-147.67964172 103.03584290]
[-137.52674866 114.77032471]
[-122.59243774 113.36802673]
[-107.65812683 111.96572113]
[-92.72382355 110.56341553]
[-92.81547546 91.26795959]
[-90.98010254 72.05977631]
[-87.23604584 53.13082886]
[-81.62071991 34.67030334]
[-74.19025421 16.86268997]
[-65.01889801 -0.11403614]
[-54.19831467 -16.09020615]
[-41.83665085 -30.90615082]
[-28.05745125 -44.41379929]
[-37.56581116 -56.01514053]
[-47.07416916 -67.61648560]
[-56.58252716 -79.21782684]
[-72.22010803 -79.21763611]
[-84.16602325 -89.30868530]
[-86.77976227 -104.72628021]
[-78.82720947 -118.19071198]
[-64.06331635 -123.34448242]
[-49.45913696 -117.75414276]
[-41.91031647 -104.05928040]
[-44.98118591 -88.72618103]
[-35.47282791 -77.12483978]
[-25.96446800 -65.52349854]
[-16.45611000 -53.92215729]
[-7.80449438 -60.10074234]
[1.17418993 -65.79359436]
[10.45270252 -70.98344421]
[20.00289345 -75.65454865]
[29.79578781 -79.79272461]
[39.80167389 -83.38543701]
[49.99020004 -86.42176819]
[60.33044815 -88.89251709]
[70.79104614 -90.79018402]
[81.34027100 -92.10900879]
[91.94609833 -92.84499359]
[102.57636261 -92.99590302]
[113.19881439 -92.56127930]
[123.78121948 -91.54244995]
[134.29147339 -89.94249725]
[144.69769287 -87.76627350]
[154.96830750 -85.02038574]
[165.07214355 -81.71315765]
[174.97856140 -77.85463715]
[184.65750122 -73.45652008]
[194.07960510 -68.53215027]
[203.21627808 -63.09646606]
[212.03979492 -57.16596603]
[220.52339172 -50.75864029]
[228.64134216 -43.89392853]
[236.36900330 -36.59265137]
[243.68292236 -28.87696838]
[250.56092834 -20.77028275]
[256.98214722 -12.29719162]
[262.92709351 -3.48340178]
[268.37774658 5.64434719]
[273.31756592 15.05836201]
[277.73153687 24.73008347]
[281.60629272 34.63016510]
[284.93005371 44.72857285]
[287.69277954 54.99467087]
[289.88604736 65.39730835]
[291.50323486 75.90493011]
[292.53939819 86.48564911]
[307.53210449 86.01760864]
[322.52478027 85.54956818]
[329.71466064 71.97748566]
[342.73580933 63.83225250]
[358.08566284 63.30489349]
[371.63513184 70.53726959]
[379.73950195 83.58390045]
[380.21875000 98.93531799]
[372.94393921 112.46205902]
[359.87197876 120.52549744]
[344.51913452 120.95661926]
[331.01525879 113.63944244]
[322.99282837 100.54225922]
[308.00012207 101.01030731]
[293.00744629 101.47834778]
[292.56979370 113.07411194]
[291.43609619 124.62261963]
[289.61047363 136.08213806]
[287.09951782 147.41122437]
[283.91229248 158.56895447]
[280.06033325 169.51498413]
[275.55755615 180.20976257]
[270.42019653 190.61462402]
[264.66690063 200.69195557]
[258.31838989 210.40534973]
[251.39767456 219.71968079]
[243.92971802 228.60128784]
[235.94154358 237.01808167]
[227.46200562 244.93962097]
[218.52175903 252.33728027]
[209.15313721 259.18432617]
[199.38996887 265.45599365]
[189.26756287 271.12963867]
[178.82250977 276.18475342]
[168.09254456 280.60305786]
[157.11647034 284.36856079]
[145.93395996 287.46768188]
[134.58540344 289.88919067]
[123.11185455 291.62435913]
[111.55475616 292.66693115]
[99.95590210 293.01309204]
[88.35720825 292.66162109]
[76.80059052 291.61380005]
[65.32782745 289.87338257]
[53.98038864 287.44665527]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 22]
[5 20]
[6 19]
[7 18]
[8 17]
[9 16]
[10 15]
[28 43]
[29 42]
[30 41]
[31 40]
[52 66]
[53 65]
[54 64]
[55 63]
[105 120]
[106 119]
[107 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
